void sub_20ECF5098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
    {
      sub_20ECF67C8(&a9);
      _Unwind_Resume(a1);
    }
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  sub_20ECF67C8(&a9);
  _Unwind_Resume(a1);
}

void sub_20ECF50EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECF51E4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ECF51F4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ECF5200(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ECF5210(_QWORD *a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  void *v69;
  void **v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  __int128 *v76;
  std::string *v77;
  std::runtime_error *exception;
  std::runtime_error *v79;
  std::__shared_weak_count *v80[2];
  void *__p[2];
  uint64_t v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::runtime_error v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  _QWORD *v93;
  __int128 *v94;
  _QWORD v95[3];
  std::string v96;
  std::string *v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v92 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v92 + 1) = 45;
    v75 = (_QWORD *)a1[6];
    v74 = a1 + 6;
    v73 = v75;
    v76 = (__int128 *)*((unsigned __int8 *)v74 + 23);
    if ((char)v76 < 0)
      v76 = (__int128 *)v74[1];
    else
      v73 = v74;
    v93 = v73;
    v94 = v76;
    sub_20E8778D4((uint64_t)&v92, (uint64_t)v95, 0, 0, &v96);
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = &v96;
    else
      v77 = (std::string *)v96.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v89, (const char *)v77);
    v89.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v79 = std::runtime_error::runtime_error(exception, &v89);
    v79->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v79, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v87 = v6 + 1;
    v88 = v6;
    v85 = v6 + 1;
    v86 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x30uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DBCD0;
    v9[1].__vftable = 0;
    v11 = v9 + 1;
    v9[1].__shared_owners_ = 0;
    v9[1].__shared_weak_owners_ = 0;
    sub_20ECF7060((uint64_t)&v9[1], *a2, a2[1], 0xD37A6F4DE9BD37A7 * ((a2[1] - *a2) >> 4));
    v90 = v9 + 1;
    v91 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v92 = v15;
    *((_QWORD *)&v92 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v92;
      if (!(_QWORD)v92)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v92 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v92 = v43;
            *((_QWORD *)&v92 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v92 = 0uLL;
          }
        }
        v48 = v85;
        v49 = v86;
        v85 = 0;
        v86 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24C9DBE20;
        *(_OWORD *)(v50 + 8) = v92;
        v92 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v93 = 0;
        v94 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v95[0] = 0;
        v95[1] = 0;
        v97 = (std::string *)v50;
        sub_210216F3C(*v39, (uint64_t)&v96);
        v51 = v97;
        if (v97 == &v96)
        {
          v52 = 4;
          v51 = &v96;
        }
        else
        {
          if (!v97)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v91)
        {
          v53 = &v91->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        if (v86)
        {
          v55 = &v86->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        if (v88)
        {
          v57 = &v88->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v92;
      if (!(_QWORD)v92)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v80 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v80[0] = v34;
      v80[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v80 = 0uLL;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v82 = 0;
  sub_20ECF7060((uint64_t)__p, *a2, a2[1], 0xD37A6F4DE9BD37A7 * ((a2[1] - *a2) >> 4));
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
  v59[1].__vftable = *a3;
  *a3 = 0;
  v83 = &v59[1].__vftable;
  v84 = v59;
  v94 = 0;
  v60 = (char *)operator new(0x40uLL);
  v61 = *(_OWORD *)__p;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v80;
  *(_QWORD *)v60 = off_24C9DBEA0;
  *(_OWORD *)(v60 + 24) = v61;
  v62 = v82;
  __p[1] = 0;
  v82 = 0;
  __p[0] = 0;
  *((_QWORD *)v60 + 5) = v62;
  *((_QWORD *)v60 + 6) = v59 + 1;
  *((_QWORD *)v60 + 7) = v59;
  v83 = 0;
  v84 = 0;
  v94 = (__int128 *)v60;
  sub_210216F3C(*v30, (uint64_t)&v92);
  v63 = v94;
  if (v94 == &v92)
  {
    v64 = 4;
    v63 = &v92;
    goto LABEL_71;
  }
  if (v94)
  {
    v64 = 5;
LABEL_71:
    (*(void (**)(__int128 *))(*(_QWORD *)v63 + 8 * v64))(v63);
  }
  v65 = v84;
  if (v84)
  {
    v66 = (unint64_t *)&v84->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (char *)__p[0];
  if (__p[0])
  {
    v69 = __p[0];
    if (__p[1] != __p[0])
    {
      v70 = (void **)((char *)__p[1] - 344);
      do
      {
        while (1)
        {
          if (*((_BYTE *)v70 + 336) && *((char *)v70 + 335) < 0)
            operator delete(v70[39]);
          if (*((char *)v70 + 23) < 0)
            break;
          v71 = (char *)(v70 - 3);
          v70 -= 46;
          if (v71 == v68)
            goto LABEL_86;
        }
        operator delete(*v70);
        v72 = (char *)(v70 - 3);
        v70 -= 46;
      }
      while (v72 != v68);
LABEL_86:
      v69 = __p[0];
    }
    __p[1] = v68;
    operator delete(v69);
  }
}

void sub_20ECF5954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 81) < 0)
      operator delete(*(void **)(v28 - 104));
    JUMPOUT(0x20ECF5868);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ECF5A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ECF5B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  sub_20E86665C((uint64_t)&a16);
  sub_20E86665C((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20ECF5B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ECF5B50(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ECF5BC4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DBF20;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ECF5CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ECF5D38(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DBFA0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ECF5E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ECF5EAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DC020;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ECF60C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ECF618C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DC0A0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ECF63A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECF646C(uint64_t a1)
{
  return sub_20ECF65DC(a1 - 16);
}

void sub_20ECF6474(uint64_t a1)
{
  sub_20ECF65DC(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECF649C(uint64_t a1)
{
  return sub_20ECF5BC4((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ECF64A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ECF5EAC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ECF64AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ECF618C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ECF64B4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ECF64BC(uint64_t a1)
{
  return sub_20ECF65DC(a1 - 24);
}

void sub_20ECF64C4(uint64_t a1)
{
  sub_20ECF65DC(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECF64EC(uint64_t a1)
{
  return sub_20ECF5D38((_QWORD *)(a1 - 24));
}

uint64_t sub_20ECF64F4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ECF64FC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ECF6564(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ECF65CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ECF65DC(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9DBAE0;
  *(_QWORD *)(a1 + 16) = &unk_24C9DBB58;
  *(_QWORD *)(a1 + 24) = &unk_24C9DBB98;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20ECF67C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      v5 = v3 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v5 + 336) && *(char *)(v5 + 335) < 0)
            operator delete(*(void **)(v5 + 312));
          if (*(char *)(v5 + 23) < 0)
            break;
          v6 = v5 - 24;
          v5 -= 368;
          if (v6 == v2)
            goto LABEL_10;
        }
        operator delete(*(void **)v5);
        v7 = v5 - 24;
        v5 -= 368;
      }
      while (v7 != v2);
LABEL_10:
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20ECF6874(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DBCD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ECF6884(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DBCD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ECF68B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      v5 = v3 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v5 + 336))
          {
            if (*(char *)(v5 + 335) < 0)
              operator delete(*(void **)(v5 + 312));
          }
          if (*(char *)(v5 + 23) < 0)
            break;
          v6 = v5 - 24;
          v5 -= 368;
          if (v6 == v1)
            goto LABEL_10;
        }
        operator delete(*(void **)v5);
        v7 = v5 - 24;
        v5 -= 368;
      }
      while (v7 != v1);
LABEL_10:
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void **sub_20ECF6960(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v5 + 336) && *(char *)(v5 + 335) < 0)
            operator delete(*(void **)(v5 + 312));
          if (*(char *)(v5 + 23) < 0)
            break;
          v6 = (void *)(v5 - 24);
          v5 -= 368;
          if (v6 == v2)
            goto LABEL_10;
        }
        operator delete(*(void **)v5);
        v7 = (void *)(v5 - 24);
        v5 -= 368;
      }
      while (v7 != v2);
LABEL_10:
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20ECF6A00(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DBD20;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ECF6A44(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DBD20;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECF6A98(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DBD20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ECF6B08(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DBD20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ECF6B58(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ECF6B94(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ECF6BCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ECF6EF0((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ECF6D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECF6E78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7"
                     "_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9a"
                                "llocatorIS7_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECF6EE4()
{
  return &unk_24C9DBD80;
}

void sub_20ECF6EF0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ECF6F88()
{
  __break(1u);
}

void sub_20ECF7034(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ECF7054);
}

uint64_t sub_20ECF7060(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0xB21642C8590B22)
      sub_20E867F44();
    result = (uint64_t)operator new(368 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 368 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20ECF7264(v8 + v9, (__int128 *)(a2 + v9));
        v9 += 368;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20ECF7120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20ECF71A0(&a9);
  _Unwind_Resume(a1);
}

void sub_20ECF7134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  for (; v11; v11 -= 368)
  {
    while (1)
    {
      v13 = v10 + v11;
      if (*(_BYTE *)(v10 + v11 - 8))
      {
        if (*(char *)(v13 - 9) < 0)
          operator delete(*(void **)(v13 - 32));
      }
      if (*(char *)(v13 - 321) < 0)
        break;
      v11 -= 368;
      if (!v11)
        goto LABEL_9;
    }
    operator delete(*(void **)(v10 + v11 - 344));
  }
LABEL_9:
  *(_QWORD *)(v9 + 8) = v10;
  sub_20ECF71A0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20ECF71A0(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = (uint64_t)v4 - 344;
        do
        {
          while (1)
          {
            if (*(_BYTE *)(v6 + 336))
            {
              if (*(char *)(v6 + 335) < 0)
                operator delete(*(void **)(v6 + 312));
            }
            if (*(char *)(v6 + 23) < 0)
              break;
            v7 = (void *)(v6 - 24);
            v6 -= 368;
            if (v7 == v3)
              goto LABEL_12;
          }
          operator delete(*(void **)v6);
          v8 = (void *)(v6 - 24);
          v6 -= 368;
        }
        while (v8 != v3);
LABEL_12:
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20ECF7264(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  v6 = *(__int128 *)((char *)a2 + 56);
  v7 = *(__int128 *)((char *)a2 + 72);
  v8 = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  v9 = *(__int128 *)((char *)a2 + 120);
  v10 = *(__int128 *)((char *)a2 + 136);
  v11 = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  v12 = *(__int128 *)((char *)a2 + 264);
  v13 = *(__int128 *)((char *)a2 + 280);
  v14 = *(__int128 *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 296) = v14;
  *(_OWORD *)(a1 + 264) = v12;
  v15 = *(__int128 *)((char *)a2 + 184);
  v16 = *(__int128 *)((char *)a2 + 200);
  v17 = *(__int128 *)((char *)a2 + 216);
  *(_OWORD *)(a1 + 232) = *(__int128 *)((char *)a2 + 232);
  *(_OWORD *)(a1 + 216) = v17;
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  v18 = *(__int128 *)((char *)a2 + 312);
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  *(_OWORD *)(a1 + 312) = v18;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  if (*((_BYTE *)a2 + 360))
  {
    if (*((char *)a2 + 359) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 336), *((void **)a2 + 42), *((_QWORD *)a2 + 43));
    }
    else
    {
      v19 = a2[21];
      *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 44);
      *(_OWORD *)(a1 + 336) = v19;
    }
    *(_BYTE *)(a1 + 360) = 1;
  }
  return a1;
}

void sub_20ECF73B8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[360] && v1[359] < 0)
    operator delete(*v3);
  if (v1[47] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ECF73EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = off_24C9DBDA0;
  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      v5 = v3 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v5 + 336) && *(char *)(v5 + 335) < 0)
            operator delete(*(void **)(v5 + 312));
          if (*(char *)(v5 + 23) < 0)
            break;
          v6 = v5 - 24;
          v5 -= 368;
          if (v6 == v2)
            goto LABEL_10;
        }
        operator delete(*(void **)v5);
        v7 = v5 - 24;
        v5 -= 368;
      }
      while (v7 != v2);
LABEL_10:
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20ECF74A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = off_24C9DBDA0;
  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      v5 = v3 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v5 + 336) && *(char *)(v5 + 335) < 0)
            operator delete(*(void **)(v5 + 312));
          if (*(char *)(v5 + 23) < 0)
            break;
          v6 = v5 - 24;
          v5 -= 368;
          if (v6 == v2)
            goto LABEL_10;
        }
        operator delete(*(void **)v5);
        v7 = v5 - 24;
        v5 -= 368;
      }
      while (v7 != v2);
LABEL_10:
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECF756C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x30uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = off_24C9DBDA0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = 0;
  v2[4] = 0;
  v2[5] = 0;
  sub_20ECF7060((uint64_t)(v2 + 3), a1[3], a1[4], 0xD37A6F4DE9BD37A7 * ((uint64_t)(a1[4] - a1[3]) >> 4));
  return v3;
}

void sub_20ECF75F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECF7614(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a1[1];
  v2 = a1[2];
  *a2 = off_24C9DBDA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return sub_20ECF7060((uint64_t)(a2 + 3), a1[3], a1[4], 0xD37A6F4DE9BD37A7 * ((uint64_t)(a1[4] - a1[3]) >> 4));
}

void sub_20ECF7690(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20ECF76A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      v5 = v3 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v5 + 336) && *(char *)(v5 + 335) < 0)
            operator delete(*(void **)(v5 + 312));
          if (*(char *)(v5 + 23) < 0)
            break;
          v6 = v5 - 24;
          v5 -= 368;
          if (v6 == v2)
            goto LABEL_10;
        }
        operator delete(*(void **)v5);
        v7 = v5 - 24;
        v5 -= 368;
      }
      while (v7 != v2);
LABEL_10:
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20ECF775C(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = __p[3];
  if (v2)
  {
    v3 = __p[4];
    v4 = (void *)__p[3];
    if (v3 != v2)
    {
      v5 = v3 - 344;
      do
      {
        while (1)
        {
          if (*(_BYTE *)(v5 + 336) && *(char *)(v5 + 335) < 0)
            operator delete(*(void **)(v5 + 312));
          if (*(char *)(v5 + 23) < 0)
            break;
          v6 = v5 - 24;
          v5 -= 368;
          if (v6 == v2)
            goto LABEL_10;
        }
        operator delete(*(void **)v5);
        v7 = v5 - 24;
        v5 -= 368;
      }
      while (v7 != v2);
LABEL_10:
      v4 = (void *)__p[3];
    }
    __p[4] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20ECF7808(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ECF6EF0((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECF78B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECF78FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7"
                     "_EEEEvvvLb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9a"
                                "llocatorIS7_EEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECF7968()
{
  return &unk_24C9DBE00;
}

_QWORD *sub_20ECF7974(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_16;
  }
  v6 = (void *)a1[3];
  v7 = v5;
  if (v6 != v5)
  {
    v8 = (uint64_t)v6 - 344;
    do
    {
      while (1)
      {
        if (*(_BYTE *)(v8 + 336) && *(char *)(v8 + 335) < 0)
          operator delete(*(void **)(v8 + 312));
        if (*(char *)(v8 + 23) < 0)
          break;
        v9 = (void *)(v8 - 24);
        v8 -= 368;
        if (v9 == v5)
          goto LABEL_14;
      }
      operator delete(*(void **)v8);
      v10 = (void *)(v8 - 24);
      v8 -= 368;
    }
    while (v10 != v5);
LABEL_14:
    v7 = (void *)a1[2];
  }
  a1[3] = v5;
  operator delete(v7);
LABEL_16:
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

_QWORD *sub_20ECF7A64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DBE20;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ECF7AEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DBE20;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ECF7B84(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DBE20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ECF7C14(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DBE20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ECF7C84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ECF7D04(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ECF7D80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ECF6EF0(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ECF8034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ECF818C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7"
                     "_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9a"
                                "llocatorIS7_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEE"
                                "EUlT_T0_E_EEvSE_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECF81F8()
{
  return &unk_24C9DBE80;
}

_QWORD *sub_20ECF8204(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;

  *a1 = off_24C9DBEA0;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[3];
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[3];
    if (!v5)
      goto LABEL_16;
  }
  v6 = (void *)a1[4];
  v7 = v5;
  if (v6 != v5)
  {
    v8 = (uint64_t)v6 - 344;
    do
    {
      while (1)
      {
        if (*(_BYTE *)(v8 + 336) && *(char *)(v8 + 335) < 0)
          operator delete(*(void **)(v8 + 312));
        if (*(char *)(v8 + 23) < 0)
          break;
        v9 = (void *)(v8 - 24);
        v8 -= 368;
        if (v9 == v5)
          goto LABEL_14;
      }
      operator delete(*(void **)v8);
      v10 = (void *)(v8 - 24);
      v8 -= 368;
    }
    while (v10 != v5);
LABEL_14:
    v7 = (void *)a1[3];
  }
  a1[4] = v5;
  operator delete(v7);
LABEL_16:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20ECF8300(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;

  *a1 = off_24C9DBEA0;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[3];
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[3];
    if (!v5)
      goto LABEL_16;
  }
  v6 = (void *)a1[4];
  v7 = v5;
  if (v6 != v5)
  {
    v8 = (uint64_t)v6 - 344;
    do
    {
      while (1)
      {
        if (*(_BYTE *)(v8 + 336) && *(char *)(v8 + 335) < 0)
          operator delete(*(void **)(v8 + 312));
        if (*(char *)(v8 + 23) < 0)
          break;
        v9 = (void *)(v8 - 24);
        v8 -= 368;
        if (v9 == v5)
          goto LABEL_14;
      }
      operator delete(*(void **)v8);
      v10 = (void *)(v8 - 24);
      v8 -= 368;
    }
    while (v10 != v5);
LABEL_14:
    v7 = (void *)a1[3];
  }
  a1[4] = v5;
  operator delete(v7);
LABEL_16:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECF840C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x40uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = off_24C9DBEA0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = 0;
  v2[4] = 0;
  v2[5] = 0;
  sub_20ECF7060((uint64_t)(v2 + 3), a1[3], a1[4], 0xD37A6F4DE9BD37A7 * ((uint64_t)(a1[4] - a1[3]) >> 4));
  v8 = a1[7];
  v3[6] = a1[6];
  v3[7] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_20ECF84B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECF84D4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = off_24C9DBEA0;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  result = sub_20ECF7060((uint64_t)(a2 + 3), a1[3], a1[4], 0xD37A6F4DE9BD37A7 * ((uint64_t)(a1[4] - a1[3]) >> 4));
  v9 = a1[7];
  a2[6] = a1[6];
  a2[7] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ECF8570(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20ECF8588(uint64_t a1)
{
  sub_20ECF87EC((_QWORD *)(a1 + 8));
}

void sub_20ECF8590(_QWORD *a1)
{
  sub_20ECF87EC(a1 + 1);
  operator delete(a1);
}

void sub_20ECF85B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[6];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ECF6EF0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ECF86CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECF8774(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7"
                     "_EEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9a"
                                "llocatorIS7_EEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECF87E0()
{
  return &unk_24C9DBF00;
}

void sub_20ECF87EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_16;
  }
  v6 = (void *)a1[3];
  v7 = v5;
  if (v6 != v5)
  {
    v8 = (uint64_t)v6 - 344;
    do
    {
      while (1)
      {
        if (*(_BYTE *)(v8 + 336) && *(char *)(v8 + 335) < 0)
          operator delete(*(void **)(v8 + 312));
        if (*(char *)(v8 + 23) < 0)
          break;
        v9 = (void *)(v8 - 24);
        v8 -= 368;
        if (v9 == v5)
          goto LABEL_14;
      }
      operator delete(*(void **)v8);
      v10 = (void *)(v8 - 24);
      v8 -= 368;
    }
    while (v10 != v5);
LABEL_14:
    v7 = (void *)a1[2];
  }
  a1[3] = v5;
  operator delete(v7);
LABEL_16:
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

_QWORD *sub_20ECF88E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DBF20;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECF891C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DBF20;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECF8964(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DBF20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ECF89B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DBF20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ECF89E4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ECF89F4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ECF8A20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECF8AB4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECF8AF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_"
                     "EEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9al"
                                "locatorIS7_EEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECF8B5C()
{
  return &unk_24C9DBF80;
}

_QWORD *sub_20ECF8B68(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DBFA0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECF8BA0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DBFA0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECF8BE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DBFA0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ECF8C38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DBFA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ECF8C68(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ECF8C78(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ECF8CA4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECF8D38(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECF8D74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_"
                     "EEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9al"
                                "locatorIS7_EEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECF8DE0()
{
  return &unk_24C9DC000;
}

_QWORD *sub_20ECF8DEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DC020;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECF8E24(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DC020;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECF8E6C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DC020;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ECF8EC4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DC020;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ECF8EFC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ECF8F0C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ECF8F38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECF8FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECF903C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7"
                     "_EEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9a"
                                "llocatorIS7_EEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECF90A8()
{
  return &unk_24C9DC080;
}

_QWORD *sub_20ECF90B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DC0A0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECF90EC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DC0A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECF9134(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DC0A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ECF918C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DC0A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ECF91C4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ECF91D4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ECF9200(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECF92B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECF9304(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7"
                     "_EEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9a"
                                "llocatorIS7_EEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3vio14ObjectAnchorCMENS4_9allocatorIS7_EEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECF9370()
{
  return &unk_24C9DC100;
}

void sub_20ECF9380(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ECF93A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ECF93BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3vio14ObjectAnchorCMENS"
                     "_9allocatorIS8_EEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3vio14Object"
                                "AnchorCMENS_9allocatorIS8_EEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3vio14ObjectAnchorCMENS_9allocatorIS8_EEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3vio14ObjectAnchorCMENS_9allocatorIS8_EEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ECF942C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECF9458(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECF9494@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DC170;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ECF94FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECF958C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ECF95A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECF9630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECF9644(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ECF9708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECF971C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ECF97E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ECF97F4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ECF9898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ECF98B0(uint64_t a1)
{
  sub_20ECFB07C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ECF98D4(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DC358;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9DC3A8;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24C9DC428;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20ECF9CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECF9DDC(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ECF9DEC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ECF9DF8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ECF9E08(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DC358;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9DC4A8;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24C9B85F0;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9DC528;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20ECFA42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x20ECFA340);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ECFA534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ECFA5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ECFA5F0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ECFA664(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DC5A8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ECFA774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ECFA7D8(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DC628;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ECFA8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ECFA94C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DC6A8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ECFAB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ECFAC2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DC728;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ECFAE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECFAF0C(uint64_t a1)
{
  return sub_20ECFB07C(a1 - 16);
}

void sub_20ECFAF14(uint64_t a1)
{
  sub_20ECFB07C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFAF3C(uint64_t a1)
{
  return sub_20ECFA664((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ECFAF44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ECFA94C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ECFAF4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ECFAC2C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ECFAF54(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ECFAF5C(uint64_t a1)
{
  return sub_20ECFB07C(a1 - 24);
}

void sub_20ECFAF64(uint64_t a1)
{
  sub_20ECFB07C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFAF8C(uint64_t a1)
{
  return sub_20ECFA7D8((_QWORD *)(a1 - 24));
}

uint64_t sub_20ECFAF94(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ECFAF9C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ECFB004(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ECFB06C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ECFB07C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9DC1E8;
  *(_QWORD *)(a1 + 16) = &unk_24C9DC260;
  *(_QWORD *)(a1 + 24) = &unk_24C9DC2A0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ECFB268(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DC358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ECFB278(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DC358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFB2B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DC3A8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ECFB2F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DC3A8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFB348(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DC3A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ECFB3B8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DC3A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ECFB408(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ECFB444(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ECFB47C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ECFB7A0((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ECFB644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECFB728(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE25EnqueueMessage"
                     "AndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE25Enq"
                                "ueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECFB794()
{
  return &unk_24C9DC408;
}

void sub_20ECFB7A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ECFB838()
{
  __break(1u);
}

void sub_20ECFB8E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ECFB904);
}

_QWORD *sub_20ECFB910(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DC428;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECFB948(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DC428;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFB990(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DC428;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_20ECFB9E8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9DC428;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_20ECFBA20(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ECFBA30(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ECFBA5C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ECFB7A0((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECFBB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECFBB50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECFBBBC()
{
  return &unk_24C9DC488;
}

_QWORD *sub_20ECFBBC8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DC4A8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ECFBC50(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DC4A8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ECFBCE8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DC4A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ECFBD78(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DC4A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ECFBDE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ECFBE68(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ECFBEE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ECFB7A0(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ECFC198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ECFC2F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE25EnqueueMessage"
                     "AndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE25Enq"
                                "ueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECFC35C()
{
  return &unk_24C9DC508;
}

_QWORD *sub_20ECFC368(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DC528;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ECFC3E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DC528;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFC470(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DC528;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20ECFC4E8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9DC528;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ECFC540(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ECFC5B0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ECFC620(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ECFB7A0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ECFC734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECFC7DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE7ProcessERKS6_NS"
                     "t3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE7Proc"
                                "essERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECFC848()
{
  return &unk_24C9DC588;
}

_QWORD *sub_20ECFC854(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DC5A8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECFC88C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DC5A8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFC8D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DC5A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ECFC924(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DC5A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ECFC954(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ECFC964(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ECFC990(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECFCA24(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECFCA60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE9SubscribeENS1_12"
                     "ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE9Subsc"
                                "ribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECFCACC()
{
  return &unk_24C9DC608;
}

_QWORD *sub_20ECFCAD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DC628;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECFCB10(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DC628;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFCB58(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DC628;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ECFCBA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DC628;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ECFCBD8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ECFCBE8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ECFCC14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECFCCA8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECFCCE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE15AddErrorHandler"
                     "ENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE15AddE"
                                "rrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECFCD50()
{
  return &unk_24C9DC688;
}

_QWORD *sub_20ECFCD5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DC6A8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECFCD94(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DC6A8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFCDDC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DC6A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ECFCE34(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DC6A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ECFCE6C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ECFCE7C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ECFCEA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECFCF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECFCFAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE16Out"
                                "putHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECFD018()
{
  return &unk_24C9DC708;
}

_QWORD *sub_20ECFD024(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DC728;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECFD05C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DC728;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFD0A4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DC728;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ECFD0FC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DC728;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ECFD134(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ECFD144(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ECFD170(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECFD228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECFD274(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE15Err"
                                "orHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio12area_mapping9CMRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECFD2E0()
{
  return &unk_24C9DC788;
}

void sub_20ECFD2F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ECFD314(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ECFD32C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio12area_mapping9CMRequestEvvvLb"
                     "0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio12area_mapping9CMRe"
                                "questEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio12area_mapping9CMRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio12area_mapping9CMRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ECFD39C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9E10E8;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9E1118;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9E1388;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B2520;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20ECFD54C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECFD5BC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ECFD5E8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFD624@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E1388;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ECFD68C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECFD71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ECFD730(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ECFD7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECFD7D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ECFD898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECFD8AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ECFD970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ECFD984(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ECFDA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ECFDA40(uint64_t a1)
{
  sub_20ECFF534(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ECFDA64(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl **v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::mutex **v34;
  uint64_t **v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  __int128 *v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56[2];
  _QWORD v57[3];
  _QWORD *v58;
  __int128 v59;
  uint64_t v60;
  __int128 *v61;
  _BYTE v62[24];
  _BYTE *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x38uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DC9E8;
    v6 = (std::__shared_weak_count_vtbl *)&v4[1];
    v7 = a2[3];
    if (v7)
    {
      if ((_QWORD *)v7 == a2)
      {
        v4[2].__vftable = v6;
        (*(void (**)(_QWORD *, std::__shared_weak_count_vtbl *))(*a2 + 24))(a2, v6);
        goto LABEL_18;
      }
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    v4[2].__vftable = (std::__shared_weak_count_vtbl *)v7;
LABEL_18:
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    v19 = (uint64_t *)a1[18];
    v20 = (_QWORD *)operator new();
    *v20 = v19 + 7;
    std::mutex::lock((std::mutex *)(v19 + 7));
    *(_QWORD *)&v59 = v20;
    *((_QWORD *)&v59 + 1) = v19;
    if (!*((_BYTE *)v19 + 48))
      sub_20E866B34();
    v21 = v19[4];
    v22 = *v19;
    v23 = (std::__shared_weak_count_vtbl **)(*v19 + 16 * v21);
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    *v23 = v6;
    v25 = v22 + 16 * v21;
    v26 = *(std::__shared_weak_count **)(v25 + 8);
    *(_QWORD *)(v25 + 8) = v4;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (v19[1] - *v19) >> 4;
    v30 = v19[5];
    v31 = v19[4] + 1;
    if (v31 >= v29)
      v32 = (v19[1] - *v19) >> 4;
    else
      v32 = 0;
    v19[4] = v31 - v32;
    if (v30 == v29)
    {
      v33 = v19[3] + 1;
      if (v33 < v29)
        v29 = 0;
      v19[3] = v33 - v29;
      v34 = (std::mutex **)v59;
      if (!(_QWORD)v59)
      {
LABEL_38:
        v35 = (uint64_t **)a1[9];
        v59 = 0uLL;
        v36 = (std::__shared_weak_count *)a1[5];
        if (v36)
        {
          v37 = std::__shared_weak_count::lock(v36);
          if (v37)
          {
            v38 = v37;
            v39 = a1[4];
            v40 = (unint64_t *)&v37->__shared_weak_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
            *(_QWORD *)&v59 = v39;
            *((_QWORD *)&v59 + 1) = v37;
            v42 = (unint64_t *)&v37->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          else
          {
            v59 = 0uLL;
          }
        }
        v44 = (char *)operator new(0x30uLL);
        *(_QWORD *)v44 = &off_24C9DCA38;
        *(_OWORD *)(v44 + 8) = v59;
        v59 = 0uLL;
        *((_QWORD *)v44 + 3) = v6;
        *((_QWORD *)v44 + 4) = v4;
        v60 = 0;
        v61 = 0;
        v63 = v44;
        sub_210216F3C(*v35, (uint64_t)v62);
        v45 = v63;
        if (v63 == v62)
        {
          v46 = 4;
          v45 = v62;
        }
        else
        {
          if (!v63)
            goto LABEL_52;
          v46 = 5;
        }
        (*(void (**)(_QWORD *))(*v45 + 8 * v46))(v45);
LABEL_52:
        if (v4)
        {
          v47 = (unint64_t *)&v4->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        return;
      }
    }
    else
    {
      v19[5] = v30 + 1;
      v34 = (std::mutex **)v59;
      if (!(_QWORD)v59)
        goto LABEL_38;
    }
    std::mutex::unlock(*v34);
    MEMORY[0x212BC6398](v34, 0x20C4093837F09);
    goto LABEL_38;
  }
  v8 = (uint64_t **)a1[9];
  *(_OWORD *)v56 = 0uLL;
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      v11 = v10;
      v12 = (std::__shared_weak_count *)a1[4];
      v13 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v56[0] = v12;
      v56[1] = v10;
      v15 = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      *(_OWORD *)v56 = 0uLL;
    }
  }
  v49 = v57;
  v50 = a2[3];
  if (!v50)
    goto LABEL_61;
  if ((_QWORD *)v50 != a2)
  {
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
LABEL_61:
    v58 = (_QWORD *)v50;
    goto LABEL_63;
  }
  v58 = v57;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v57);
LABEL_63:
  v61 = 0;
  v51 = (char *)operator new(0x38uLL);
  v52 = (__int128 *)v51;
  *(_QWORD *)v51 = &off_24C9DCAB8;
  *(_OWORD *)(v51 + 8) = *(_OWORD *)v56;
  if (v58)
  {
    if (v58 == v57)
    {
      *((_QWORD *)v51 + 6) = v51 + 24;
      (*(void (**)(_QWORD *))(v57[0] + 24))(v57);
    }
    else
    {
      *((_QWORD *)v51 + 6) = v58;
      v58 = 0;
    }
  }
  else
  {
    *((_QWORD *)v51 + 6) = 0;
  }
  v61 = v52;
  sub_210216F3C(*v8, (uint64_t)&v59);
  v53 = v61;
  if (v61 == &v59)
  {
    v54 = 4;
    v53 = &v59;
    goto LABEL_72;
  }
  if (v61)
  {
    v54 = 5;
LABEL_72:
    (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
  }
  if (v58 == v57)
  {
    v55 = 4;
  }
  else
  {
    if (!v58)
      return;
    v55 = 5;
    v49 = v58;
  }
  (*(void (**)(_QWORD *))(*v49 + 8 * v55))(v49);
}

void sub_20ECFDF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20ECFE008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v18 - 64);
  if (v20 == v17)
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 88);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  sub_20EA02254((uint64_t)&a17);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ECFE058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex **a17)
{
  std::__shared_weak_count *v17;

  sub_20EA0228C(&a17);
  std::__shared_weak_count::__release_weak(v17);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ECFE07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  uint64_t v10;

  MEMORY[0x212BC6398](v10, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ECFE0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;

  std::__shared_weak_count::__release_weak(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECFE0D0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ECFE0E0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ECFE0EC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ECFE0FC(_QWORD *a1, _QWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t **v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count_vtbl **v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::mutex **v41;
  uint64_t **v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  std::string *v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  __int128 *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  __int128 *v73;
  std::string *v74;
  std::runtime_error *exception;
  std::runtime_error *v76;
  _QWORD *v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  std::runtime_error v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83[2];
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  _QWORD *v89;
  __int128 *v90;
  _QWORD v91[3];
  std::string v92;
  std::string *v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v88 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v88 + 1) = 45;
    v72 = (_QWORD *)a1[6];
    v71 = a1 + 6;
    v70 = v72;
    v73 = (__int128 *)*((unsigned __int8 *)v71 + 23);
    if ((char)v73 < 0)
      v73 = (__int128 *)v71[1];
    else
      v70 = v71;
    v89 = v70;
    v90 = v73;
    sub_20E8778D4((uint64_t)&v88, (uint64_t)v91, 0, 0, &v92);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v74 = &v92;
    else
      v74 = (std::string *)v92.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v80, (const char *)v74);
    v80.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v76 = std::runtime_error::runtime_error(exception, &v80);
    v76->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v76, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v13 = (uint64_t **)a1[9];
    v83[0] = 0;
    v83[1] = 0;
    v14 = (std::__shared_weak_count *)a1[5];
    if (!v14)
      goto LABEL_20;
    v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      v16 = v15;
      v17 = (std::__shared_weak_count *)a1[4];
      p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
      do
        v19 = __ldxr(p_shared_weak_owners);
      while (__stxr(v19 + 1, p_shared_weak_owners));
      v83[0] = v17;
      v83[1] = v15;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (v21)
      {
LABEL_20:
        v22 = v84;
        v23 = a2[3];
        if (!v23)
          goto LABEL_23;
        goto LABEL_21;
      }
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
      v22 = v84;
      v23 = a2[3];
      if (!v23)
        goto LABEL_23;
    }
    else
    {
      v83[0] = 0;
      v83[1] = 0;
      v22 = v84;
      v23 = a2[3];
      if (!v23)
        goto LABEL_23;
    }
LABEL_21:
    if ((_QWORD *)v23 == a2)
    {
      v85 = v84;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v84);
LABEL_72:
      v59 = (std::__shared_weak_count *)operator new(0x20uLL);
      v59->__shared_owners_ = 0;
      v59->__shared_weak_owners_ = 0;
      v59->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
      v59[1].__vftable = *a3;
      v60 = &v59[1].__vftable;
      *a3 = 0;
      v86 = &v59[1].__vftable;
      v87 = v59;
      v90 = 0;
      v61 = (char *)operator new(0x48uLL);
      v62 = v61;
      *(_QWORD *)v61 = &off_24C9DCBB8;
      *(_OWORD *)(v61 + 8) = *(_OWORD *)v83;
      v83[0] = 0;
      v83[1] = 0;
      if (v85)
      {
        if (v85 == v84)
        {
          *((_QWORD *)v61 + 6) = v61 + 24;
          (*(void (**)(_QWORD *))(v84[0] + 24))(v84);
          v60 = v86;
          v59 = v87;
        }
        else
        {
          *((_QWORD *)v61 + 6) = v85;
          v85 = 0;
        }
      }
      else
      {
        *((_QWORD *)v61 + 6) = 0;
      }
      *((_QWORD *)v62 + 7) = v60;
      *((_QWORD *)v62 + 8) = v59;
      v86 = 0;
      v87 = 0;
      v90 = (__int128 *)v62;
      sub_210216F3C(*v13, (uint64_t)&v88);
      v63 = v90;
      if (v90 == &v88)
      {
        v64 = 4;
        v63 = &v88;
      }
      else
      {
        if (!v90)
        {
LABEL_82:
          v65 = v87;
          if (!v87)
            goto LABEL_86;
          v66 = (unint64_t *)&v87->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
            v68 = v85;
            if (v85 != v84)
              goto LABEL_87;
          }
          else
          {
LABEL_86:
            v68 = v85;
            if (v85 != v84)
            {
LABEL_87:
              if (!v68)
                goto LABEL_92;
              v69 = 5;
              v22 = v68;
LABEL_91:
              (*(void (**)(_QWORD *))(*v22 + 8 * v69))(v22);
LABEL_92:
              v58 = v83[1];
              if (!v83[1])
                return;
              goto LABEL_93;
            }
          }
          v69 = 4;
          goto LABEL_91;
        }
        v64 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v63 + 8 * v64))();
      goto LABEL_82;
    }
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
LABEL_23:
    v85 = (_QWORD *)v23;
    goto LABEL_72;
  }
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
  v6[1].__vftable = *a3;
  v79 = v6;
  v77 = &v6[1].__vftable;
  v78 = &v6->__vftable;
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  *a3 = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (!a1[18]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = (std::__shared_weak_count *)operator new(0x38uLL);
  v9->__shared_owners_ = 0;
  v10 = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DC9E8;
  v11 = (std::__shared_weak_count_vtbl *)&v9[1];
  v12 = a2[3];
  if (v12)
  {
    if ((_QWORD *)v12 == a2)
    {
      v9[2].__vftable = v11;
      (*(void (**)(_QWORD *, std::__shared_weak_count_vtbl *))(*a2 + 24))(a2, v11);
      goto LABEL_25;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  }
  v9[2].__vftable = (std::__shared_weak_count_vtbl *)v12;
LABEL_25:
  v81 = v9 + 1;
  v82 = v9;
  v24 = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = (uint64_t *)a1[18];
  v27 = (_QWORD *)operator new();
  *v27 = v26 + 7;
  std::mutex::lock((std::mutex *)(v26 + 7));
  *(_QWORD *)&v88 = v27;
  *((_QWORD *)&v88 + 1) = v26;
  if (!*((_BYTE *)v26 + 48))
    sub_20E866B34();
  v28 = v26[4];
  v29 = *v26;
  v30 = (std::__shared_weak_count_vtbl **)(*v26 + 16 * v28);
  do
    v31 = __ldxr(v10);
  while (__stxr(v31 + 1, v10));
  *v30 = v11;
  v32 = v29 + 16 * v28;
  v33 = *(std::__shared_weak_count **)(v32 + 8);
  *(_QWORD *)(v32 + 8) = v9;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (v26[1] - *v26) >> 4;
  v37 = v26[5];
  v38 = v26[4] + 1;
  if (v38 >= v36)
    v39 = (v26[1] - *v26) >> 4;
  else
    v39 = 0;
  v26[4] = v38 - v39;
  if (v37 != v36)
  {
    v26[5] = v37 + 1;
    v41 = (std::mutex **)v88;
    if (!(_QWORD)v88)
      goto LABEL_45;
    goto LABEL_44;
  }
  v40 = v26[3] + 1;
  if (v40 < v36)
    v36 = 0;
  v26[3] = v40 - v36;
  v41 = (std::mutex **)v88;
  if ((_QWORD)v88)
  {
LABEL_44:
    std::mutex::unlock(*v41);
    MEMORY[0x212BC6398](v41, 0x20C4093837F09);
  }
LABEL_45:
  v42 = (uint64_t **)a1[9];
  v88 = 0uLL;
  v43 = (std::__shared_weak_count *)a1[5];
  if (v43)
  {
    v44 = std::__shared_weak_count::lock(v43);
    if (v44)
    {
      v45 = v44;
      v46 = a1[4];
      v47 = (unint64_t *)&v44->__shared_weak_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      *(_QWORD *)&v88 = v46;
      *((_QWORD *)&v88 + 1) = v44;
      v49 = (unint64_t *)&v44->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    else
    {
      v88 = 0uLL;
    }
  }
  v51 = (char *)operator new(0x38uLL);
  *(_QWORD *)v51 = &off_24C9DCB38;
  *(_OWORD *)(v51 + 8) = v88;
  v88 = 0uLL;
  *((_QWORD *)v51 + 3) = v11;
  *((_QWORD *)v51 + 4) = v9;
  v89 = 0;
  v90 = 0;
  *((_QWORD *)v51 + 5) = v77;
  *((_QWORD *)v51 + 6) = v78;
  v91[0] = 0;
  v91[1] = 0;
  v93 = (std::string *)v51;
  sub_210216F3C(*v42, (uint64_t)&v92);
  v52 = v93;
  if (v93 == &v92)
  {
    v53 = 4;
    v52 = &v92;
    goto LABEL_58;
  }
  if (v93)
  {
    v53 = 5;
LABEL_58:
    (*(void (**)(void))(v52->__r_.__value_.__r.__words[0] + 8 * v53))();
  }
  if (v82)
  {
    v54 = &v82->__shared_owners_;
    do
      v55 = __ldaxr((unint64_t *)v54);
    while (__stlxr(v55 - 1, (unint64_t *)v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v79)
  {
    v56 = (unint64_t *)&v79->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      v58 = v79;
LABEL_93:
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_20ECFE878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, std::runtime_error a14, std::exception_ptr a15, uint64_t a16, uint64_t a17, char a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20ECFE9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  v30 = *(_QWORD **)(v28 - 80);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 104);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  sub_20EA031A8(&a27);
  sub_20E86665C((uint64_t)&a17);
  sub_20E86665C((uint64_t)&a10);
  sub_20E86665C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20ECFEA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ECFEAA8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ECFEB1C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DCC38;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ECFEC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ECFEC90(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DCCB8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ECFEDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ECFEE04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DCD38;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ECFF01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ECFF0E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DCDB8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ECFF2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECFF3C4(uint64_t a1)
{
  return sub_20ECFF534(a1 - 16);
}

void sub_20ECFF3CC(uint64_t a1)
{
  sub_20ECFF534(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFF3F4(uint64_t a1)
{
  return sub_20ECFEB1C((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ECFF3FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ECFEE04((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ECFF404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ECFF0E4((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ECFF40C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ECFF414(uint64_t a1)
{
  return sub_20ECFF534(a1 - 24);
}

void sub_20ECFF41C(uint64_t a1)
{
  sub_20ECFF534(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFF444(uint64_t a1)
{
  return sub_20ECFEC90((_QWORD *)(a1 - 24));
}

uint64_t sub_20ECFF44C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ECFF454(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ECFF4BC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ECFF524(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ECFF534(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9DC7F8;
  *(_QWORD *)(a1 + 16) = &unk_24C9DC870;
  *(_QWORD *)(a1 + 24) = &unk_24C9DC8B0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_20ECFF720(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 40);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ECFF77C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DC9E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ECFF78C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DC9E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ECFF7BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 24;
  result = *(_QWORD *)(a1 + 48);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

_QWORD *sub_20ECFF7FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DCA38;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ECFF840(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DCA38;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFF894(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DCA38;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ECFF904(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DCA38;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ECFF954(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ECFF990(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ECFF9C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ECFFCEC((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ECFFB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ECFFC74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE25EnqueueMessageAndDispat"
                     "chIZNKS8_4SendERKS7_EUlT_T0_E_EEvSB_SC_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE25EnqueueMessa"
                                "geAndDispatchIZNKS8_4SendERKS7_EUlT_T0_E_EEvSB_SC_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS7_EUlT_T0_E_EEvSB_SC_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS7_EUlT_T0_E_EEvSB_SC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ECFFCE0()
{
  return &unk_24C9DCA98;
}

void sub_20ECFFCEC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ECFFD84()
{
  __break(1u);
}

void sub_20ECFFE30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ECFFE50);
}

_QWORD *sub_20ECFFE5C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DCAB8;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ECFFEC4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DCAB8;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ECFFF3C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v2 = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *v2 = &off_24C9DCAB8;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[6];
  if (!v7)
    goto LABEL_7;
  if ((_QWORD *)v7 != a1 + 3)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_7:
    v2[6] = v7;
    return v2;
  }
  v2[6] = v2 + 3;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  return v2;
}

void sub_20ECFFFDC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ECFFFFC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v4 = a1[1];
  v3 = a1[2];
  *a2 = &off_24C9DCAB8;
  a2[1] = v4;
  a2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)a1[6];
  if (v7)
  {
    if (v7 == a1 + 3)
    {
      a2[6] = a2 + 3;
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 24))(a1[6]);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*v7 + 16))(a1[6]);
      a2[6] = result;
    }
  }
  else
  {
    result = 0;
    a2[6] = 0;
  }
  return result;
}

void sub_20ED0009C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20ED000B4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED00114(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = __p + 24;
  v3 = (char *)*((_QWORD *)__p + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

void sub_20ED00170(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ECFFCEC((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED00218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED00264(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE4SendERKS7_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE4SendERKS7_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE4SendERKS7_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE4SendERKS7_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED002D0()
{
  return &unk_24C9DCB18;
}

_QWORD *sub_20ED002DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1 + 2;
      v6 = (_QWORD *)a1[5];
      if (v6 != a1 + 2)
        goto LABEL_6;
LABEL_9:
      v7 = 4;
      v6 = v5;
      goto LABEL_10;
    }
  }
  v5 = a1 + 2;
  v6 = (_QWORD *)a1[5];
  if (v6 == a1 + 2)
    goto LABEL_9;
LABEL_6:
  if (!v6)
    goto LABEL_11;
  v7 = 5;
LABEL_10:
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

_QWORD *sub_20ED00380(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DCB38;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED00408(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DCB38;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED004A0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DCB38;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED00530(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DCB38;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED005A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED00620(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED0069C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ECFFCEC(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED00950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED00AA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE25EnqueueMessageAndDispat"
                     "chIZNKS8_7ProcessERKS7_NS4_7promiseIvEEEUlT_T0_E_EEvSB_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE25EnqueueMessa"
                                "geAndDispatchIZNKS8_7ProcessERKS7_NS4_7promiseIvEEEUlT_T0_E_EEvSB_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS7_NS4_7promiseIvEEEUlT_T0_E_EEvSB_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS7_NS4_7promiseIvEEEUlT_T0_E_EEvSB_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED00B14()
{
  return &unk_24C9DCB98;
}

_QWORD *sub_20ED00B20(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9DCBB8;
  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1 + 3;
      v6 = (_QWORD *)a1[6];
      if (v6 != a1 + 3)
        goto LABEL_6;
LABEL_9:
      v7 = 4;
      v6 = v5;
      goto LABEL_10;
    }
  }
  v5 = a1 + 3;
  v6 = (_QWORD *)a1[6];
  if (v6 == a1 + 3)
    goto LABEL_9;
LABEL_6:
  if (!v6)
    goto LABEL_11;
  v7 = 5;
LABEL_10:
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20ED00BD0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9DCBB8;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
    {
LABEL_6:
      if (!v6)
        goto LABEL_11;
      v7 = 5;
LABEL_10:
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
      v8 = (std::__shared_weak_count *)a1[2];
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      JUMPOUT(0x212BC6398);
    }
  }
  v7 = 4;
  v6 = v5;
  goto LABEL_10;
}

_QWORD *sub_20ED00C90(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x48uLL);
  v4 = a1[1];
  v3 = a1[2];
  *v2 = &off_24C9DCBB8;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[6];
  if (!v7)
    goto LABEL_7;
  if ((_QWORD *)v7 != a1 + 3)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_7:
    v2[6] = v7;
    goto LABEL_9;
  }
  v2[6] = v2 + 3;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
LABEL_9:
  v8 = a1[8];
  v2[7] = a1[7];
  v2[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v2;
}

void sub_20ED00D44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED00D64(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24C9DCBB8;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a1[6];
  if (!result)
    goto LABEL_7;
  if ((_QWORD *)result != a1 + 3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_7:
    a2[6] = result;
    goto LABEL_9;
  }
  a2[6] = a2 + 3;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 24))(a1[6]);
LABEL_9:
  v9 = a1[8];
  a2[7] = a1[7];
  a2[8] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED00E10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20ED00E28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1 + 3;
      v6 = (_QWORD *)a1[6];
      if (v6 != a1 + 3)
        goto LABEL_6;
LABEL_9:
      v7 = 4;
      v6 = v5;
      goto LABEL_10;
    }
  }
  v5 = a1 + 3;
  v6 = (_QWORD *)a1[6];
  if (v6 == a1 + 3)
    goto LABEL_9;
LABEL_6:
  if (!v6)
    goto LABEL_11;
  v7 = 5;
LABEL_10:
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20ED00ED0(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = __p + 24;
      v6 = (char *)*((_QWORD *)__p + 6);
      if (v6 != __p + 24)
        goto LABEL_6;
LABEL_9:
      v7 = 4;
      v6 = v5;
      goto LABEL_10;
    }
  }
  v5 = __p + 24;
  v6 = (char *)*((_QWORD *)__p + 6);
  if (v6 == __p + 24)
    goto LABEL_9;
LABEL_6:
  if (!v6)
    goto LABEL_11;
  v7 = 5;
LABEL_10:
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20ED00F74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[7];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ECFFCEC((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED01088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED01130(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE7ProcessERKS7_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE7ProcessERKS7_"
                                "NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE7ProcessERKS7_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE7ProcessERKS7_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0119C()
{
  return &unk_24C9DCC18;
}

_QWORD *sub_20ED011A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DCC38;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED011E0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DCC38;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED01228(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DCC38;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED01278(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DCC38;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED012A8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED012B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED012E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED01378(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED013B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE9SubscribeENS1_"
                                "12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED01420()
{
  return &unk_24C9DCC98;
}

_QWORD *sub_20ED0142C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DCCB8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED01464(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DCCB8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED014AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DCCB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED014FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DCCB8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED0152C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED0153C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED01568(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED015FC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED01638(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE15AddErrorHandlerENS1_12Ch"
                     "annelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE15AddErrorHandl"
                                "erENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED016A4()
{
  return &unk_24C9DCD18;
}

_QWORD *sub_20ED016B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DCD38;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED016E8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DCD38;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED01730(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DCD38;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED01788(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DCD38;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED017C0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED017D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED017FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED018B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED01900(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0196C()
{
  return &unk_24C9DCD98;
}

_QWORD *sub_20ED01978(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DCDB8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED019B0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DCDB8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED019F8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DCDB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED01A50(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DCDB8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED01A88(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED01A98(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED01AC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED01B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED01BC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18functionIFvvEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED01C34()
{
  return &unk_24C9DCE18;
}

void sub_20ED01C44(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED01C68(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED01C80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8functionIFvvEEEvvvLb0EEEE27__share"
                     "d_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8functionIFvvEEEvvvLb0EE"
                                "EE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8functionIFvvEEEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8functionIFvvEEEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED01CF0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED01D1C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED01D58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DCE88;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED01DC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED01E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED01E64(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED01EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED01F08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED01FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED01FE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED020A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED020B8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED0215C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED02174(uint64_t a1)
{
  sub_20ED039A8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED02198(_QWORD *a1, _WORD *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  __int16 v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DD0F0;
    LOWORD(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9DD140;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24C9DD1C0;
  v49[1] = v29;
  v49[2] = v28;
  *((_WORD *)v49 + 12) = v48;
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20ED025AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED026A0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED026B0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED026BC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED026CC(_QWORD *a1, _WORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  __int16 v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9CDF68;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DD0F0;
    LOWORD(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9DD240;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24C9CDF68;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9DD2C0;
  *(_OWORD *)(v56 + 8) = v70;
  *((_WORD *)v56 + 12) = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20ED02CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x20ED02C04);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED02D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED02DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_20EA25E90((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_20EA25E90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED02E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED02E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED02ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED02EEC(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED02F60(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9DD340;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B2630;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20ED03090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED03104(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DD3C0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED03214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED03278@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DD440;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED03490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED03558@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DD4C0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED03770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED03838(uint64_t a1)
{
  return sub_20ED039A8(a1 - 16);
}

void sub_20ED03840(uint64_t a1)
{
  sub_20ED039A8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED03868(uint64_t a1, uint64_t a2)
{
  return sub_20ED02F60((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED03870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED03278((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED03878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED03558((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED03880(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED03888(uint64_t a1)
{
  return sub_20ED039A8(a1 - 24);
}

void sub_20ED03890(uint64_t a1)
{
  sub_20ED039A8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED038B8(uint64_t a1)
{
  return sub_20ED03104((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED038C0(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED038C8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED03930(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED03998(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED039A8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9DCF00;
  *(_QWORD *)(a1 + 16) = &unk_24C9DCF78;
  *(_QWORD *)(a1 + 24) = &unk_24C9DCFB8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ED03BA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DD0F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED03BB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DD0F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED03BF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DD140;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED03C34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DD140;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED03C88(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DD140;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED03CF8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DD140;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED03D48(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED03D84(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED03DBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20ED040E0((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EBF0C90(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED03F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EBF0C90(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED04068(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE25EnqueueMes"
                     "sageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE2"
                                "5EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED040D4()
{
  return &unk_24C9DD1A0;
}

void sub_20ED040E0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_20ED0434C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED04414(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED04434);
}

_QWORD *sub_20ED04440(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DD1C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED04478(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DD1C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED044C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DD1C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_WORD *)result + 12) = *(_WORD *)(a1 + 24);
  return result;
}

uint64_t sub_20ED04518(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9DD1C0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_WORD *)(a2 + 24) = *(_WORD *)(result + 24);
  return result;
}

void sub_20ED04550(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED04560(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED0458C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20ED040E0((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EBF0C90(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED04634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EBF0C90(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED04680(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE4"
                                "SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED046EC()
{
  return &unk_24C9DD220;
}

_QWORD *sub_20ED046F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DD240;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED04780(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DD240;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED04818(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DD240;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED048A8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DD240;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED04918(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED04998(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED04A14(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED040E0(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EBF0C90((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED04CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20ED04D1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20ED04B28);
    JUMPOUT(0x20ED04AF8);
  }
  sub_20E96CE78(3u);
}

void sub_20ED04D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20ED04DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EBF0C90(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED04E90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE25EnqueueMes"
                     "sageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE2"
                                "5EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED04EFC()
{
  return &unk_24C9DD2A0;
}

_QWORD *sub_20ED04F08(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DD2C0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED04F84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DD2C0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED05010(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DD2C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_WORD *)result + 12) = *(_WORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20ED05088(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9DD2C0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_WORD *)(a2 + 24) = *(_WORD *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED050E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED05150(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED051C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED040E0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EBF0C90((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED052D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20ED05348(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20ED0537CLL);
  JUMPOUT(0x20ED053ACLL);
}

uint64_t sub_20ED053B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE7ProcessERKS"
                     "6_NSt3__17promiseIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE7"
                                "ProcessERKS6_NSt3__17promiseIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED05420()
{
  return &unk_24C9DD320;
}

_QWORD *sub_20ED0542C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DD340;
  v2 = a1[4];
  a1[3] = &off_24C9B2630;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED05484(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DD340;
  v2 = a1[4];
  a1[3] = &off_24C9B2630;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED054EC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9DD340;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B2630;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20ED05564(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED05584(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9DD340;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B2630;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20ED055EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20ED05604(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B2630;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED05654(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B2630;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED056A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B2630;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED05754(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED05790(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE9SubscribeENS"
                     "1_12ChannelInputIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE9S"
                                "ubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED057FC()
{
  return &unk_24C9DD3A0;
}

_QWORD *sub_20ED05808(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DD3C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED05840(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DD3C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED05888(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DD3C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED058D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DD3C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED05908(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED05918(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED05944(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED059D8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED05A14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE15AddErrorHan"
                     "dlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE15"
                                "AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED05A80()
{
  return &unk_24C9DD420;
}

_QWORD *sub_20ED05A8C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DD440;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED05AC4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DD440;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED05B0C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DD440;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED05B64(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DD440;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED05B9C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED05BAC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED05BD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20ED05D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED05DC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE1"
                                "6OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED05E30()
{
  return &unk_24C9DD4A0;
}

_QWORD *sub_20ED05E3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DD4C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED05E74(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DD4C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED05EBC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DD4C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED05F14(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DD4C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED05F4C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED05F5C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED05F88(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED06040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0608C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE1"
                                "5ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio11slam_engine13ReinitRequestEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED060F8()
{
  return &unk_24C9DD520;
}

void sub_20ED06108(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED0612C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED06144(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio11slam_engine13ReinitRequestEb"
                     "vbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio11slam_engine13Rein"
                                "itRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio11slam_engine13ReinitRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio11slam_engine13ReinitRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED061B4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED061E0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0621C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DD590;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED06284(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED06314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED06328(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED063B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED063CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED06490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED064A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED06568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED0657C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED06620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED06638(uint64_t a1)
{
  sub_20ED07E0C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED0665C(_QWORD *a1, std::__shared_count *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 *v53;
  _BYTE v54[24];
  _BYTE *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DD7F8;
    v8 = v5 + 1;
    v5[1].std::__shared_count = *a2;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v51 = v10;
    *((_QWORD *)&v51 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v51;
      if (!(_QWORD)v51)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v51 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v51 = v38;
            *((_QWORD *)&v51 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v51 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9DD848;
        *(_OWORD *)(v43 + 8) = v51;
        v51 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v52 = 0;
        v53 = 0;
        v55 = v43;
        sub_210216F3C(*v34, (uint64_t)v54);
        v44 = v55;
        if (v55 == v54)
        {
          v45 = 4;
          v44 = v54;
        }
        else
        {
          if (!v55)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v51;
      if (!(_QWORD)v51)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = (char *)operator new(0x28uLL);
  *(_QWORD *)v48 = &off_24C9DD8C8;
  *((_QWORD *)v48 + 1) = v29;
  *((_QWORD *)v48 + 2) = v28;
  *(std::__shared_count *)(v48 + 24) = *a2;
  v53 = (__int128 *)v48;
  sub_210216F3C(*v25, (uint64_t)&v51);
  v49 = v53;
  if (v53 == &v51)
  {
    v50 = 4;
    v49 = &v51;
  }
  else
  {
    if (!v53)
      return;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
}

void sub_20ED06A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED06B64(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED06B74(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED06B80(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED06B90(_QWORD *a1, _OWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t *v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 *v63;
  std::string *v64;
  std::runtime_error *exception;
  std::runtime_error *v66;
  __int128 v67;
  __int128 v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  std::runtime_error v72;
  char *v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  _QWORD *v76;
  __int128 *v77;
  _QWORD v78[3];
  std::string v79;
  std::string *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v75 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v75 + 1) = 45;
    v62 = (_QWORD *)a1[6];
    v61 = a1 + 6;
    v60 = v62;
    v63 = (__int128 *)*((unsigned __int8 *)v61 + 23);
    if ((char)v63 < 0)
      v63 = (__int128 *)v61[1];
    else
      v60 = v61;
    v76 = v60;
    v77 = v63;
    sub_20E8778D4((uint64_t)&v75, (uint64_t)v78, 0, 0, &v79);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v79;
    else
      v64 = (std::string *)v79.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v72, (const char *)v64);
    v72.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v66 = std::runtime_error::runtime_error(exception, &v72);
    v66->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v66, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v71 = v6;
    v69 = &v6[1].__vftable;
    v70 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (char *)operator new(0x28uLL);
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    v11 = (unint64_t *)(v9 + 16);
    *(_QWORD *)v9 = &off_24C9DD7F8;
    v12 = v9 + 24;
    *(_OWORD *)(v9 + 24) = *a2;
    v73 = v9 + 24;
    v74 = (std::__shared_weak_count *)v9;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v75 = v15;
    *((_QWORD *)&v75 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (_QWORD *)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v75;
      if (!(_QWORD)v75)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v75 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(p_shared_weak_owners);
            while (__stxr(v45 + 1, p_shared_weak_owners));
            *(_QWORD *)&v75 = v43;
            *((_QWORD *)&v75 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v75 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9DD948;
        *(_OWORD *)(v48 + 8) = v75;
        v75 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v76 = 0;
        v77 = 0;
        *((_QWORD *)v48 + 5) = v69;
        *((_QWORD *)v48 + 6) = v70;
        v78[0] = 0;
        v78[1] = 0;
        v80 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v79);
        v49 = v80;
        if (v80 == &v79)
        {
          v50 = 4;
          v49 = &v79;
        }
        else
        {
          if (!v80)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v74)
        {
          v51 = &v74->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        if (v71)
        {
          v53 = (unint64_t *)&v71->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v75;
      if (!(_QWORD)v75)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v67 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v67 = v34;
      *((_QWORD *)&v67 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v67 = 0uLL;
    }
  }
  v68 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24C9B85F0;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x38uLL);
  *(_QWORD *)v56 = &off_24C9DD9C8;
  *(_OWORD *)(v56 + 8) = v67;
  *(_OWORD *)(v56 + 24) = v68;
  *((_QWORD *)v56 + 5) = v55 + 3;
  *((_QWORD *)v56 + 6) = v55;
  v77 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v75);
  v58 = v77;
  if (v77 == &v75)
  {
    v59 = 4;
    v58 = &v75;
  }
  else
  {
    if (!v77)
      return;
    v59 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v58 + 8 * v59))(v58, v57);
}

void sub_20ED071BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 81) < 0)
      operator delete(*(void **)(v28 - 104));
    JUMPOUT(0x20ED070D0);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED072C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED07364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED07380(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED073F4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DDA48;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED07504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED07568(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DDAC8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED07678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED076DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DDB48;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED078F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED079BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DDBC8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED07BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED07C9C(uint64_t a1)
{
  return sub_20ED07E0C(a1 - 16);
}

void sub_20ED07CA4(uint64_t a1)
{
  sub_20ED07E0C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED07CCC(uint64_t a1)
{
  return sub_20ED073F4((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ED07CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED076DC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED07CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED079BC((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED07CE4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED07CEC(uint64_t a1)
{
  return sub_20ED07E0C(a1 - 24);
}

void sub_20ED07CF4(uint64_t a1)
{
  sub_20ED07E0C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED07D1C(uint64_t a1)
{
  return sub_20ED07568((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED07D24(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED07D2C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED07D94(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED07DFC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED07E0C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9DD608;
  *(_QWORD *)(a1 + 16) = &unk_24C9DD680;
  *(_QWORD *)(a1 + 24) = &unk_24C9DD6C0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ED07FF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DD7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED08008(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DD7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED08040(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DD848;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED08084(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DD848;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED080D8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DD848;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED08148(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DD848;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED08198(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED081D4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED0820C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ED08530((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED083D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED084B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvv"
                     "Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualS"
                                "LAMHintEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED08524()
{
  return &unk_24C9DD8A8;
}

void sub_20ED08530(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ED085C8()
{
  __break(1u);
}

void sub_20ED08674(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED08694);
}

_QWORD *sub_20ED086A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DD8C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED086D8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DD8C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20ED08720(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9DD8C8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20ED08778(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9DD8C8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20ED087B0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED087C0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED087EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ED08530((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED08894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED088E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvv"
                     "Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualS"
                                "LAMHintEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0894C()
{
  return &unk_24C9DD928;
}

_QWORD *sub_20ED08958(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DD948;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED089E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DD948;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED08A78(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DD948;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED08B08(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DD948;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED08B78(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED08BF8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED08C74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED08530(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED08F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED09080(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvv"
                     "Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualS"
                                "LAMHintEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_"
                                "T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED090EC()
{
  return &unk_24C9DD9A8;
}

_QWORD *sub_20ED090F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DD9C8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED09174(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DD9C8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

char *sub_20ED09200(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = (char *)operator new(0x38uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24C9DD9C8;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20ED09278(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9DD9C8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED092D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED09340(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED093B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED08530((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED094C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0956C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvv"
                     "Lb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualS"
                                "LAMHintEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED095D8()
{
  return &unk_24C9DDA28;
}

_QWORD *sub_20ED095E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DDA48;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED0961C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DDA48;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED09664(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DDA48;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED096B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DDA48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED096E4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED096F4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED09720(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED097B4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED097F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvL"
                     "b0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSL"
                                "AMHintEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0985C()
{
  return &unk_24C9DDAA8;
}

_QWORD *sub_20ED09868(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DDAC8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED098A0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DDAC8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED098E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DDAC8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED09938(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DDAC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED09968(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED09978(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED099A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED09A38(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED09A74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvL"
                     "b0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSL"
                                "AMHintEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED09AE0()
{
  return &unk_24C9DDB28;
}

_QWORD *sub_20ED09AEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DDB48;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED09B24(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DDB48;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED09B6C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DDB48;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED09BC4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DDB48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED09BFC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED09C0C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED09C38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED09CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED09D3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvv"
                     "Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualS"
                                "LAMHintEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED09DA8()
{
  return &unk_24C9DDBA8;
}

_QWORD *sub_20ED09DB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DDBC8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED09DEC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DDBC8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED09E34(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DDBC8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED09E8C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DDBC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED09EC4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED09ED4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED09F00(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED09FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0A004(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvv"
                     "Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualS"
                                "LAMHintEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0A070()
{
  return &unk_24C9DDC28;
}

void sub_20ED0A080(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED0A0A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED0A0BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group19Forc"
                     "eVisualSLAMHintEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_"
                                "group19ForceVisualSLAMHintEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group19ForceVisualSLAMHintEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED0A12C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED0A158(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0A194@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DDC98;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED0A1FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED0A28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED0A2A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED0A330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED0A344(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED0A408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED0A41C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED0A4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED0A4F4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED0A598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED0A5B0(uint64_t a1)
{
  sub_20ED0BD50(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED0A5D4(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count **v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::mutex **v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t **v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v2 = (uint64_t *)a1[18];
  if (v2)
  {
    v3 = (std::__shared_weak_count *)operator new(0x20uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DDF00;
    v6 = v3 + 1;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = (_QWORD *)operator new();
    *v8 = v2 + 7;
    std::mutex::lock((std::mutex *)(v2 + 7));
    *(_QWORD *)&v49 = v8;
    *((_QWORD *)&v49 + 1) = v2;
    if (!*((_BYTE *)v2 + 48))
      sub_20E866B34();
    v9 = v2[4];
    v10 = *v2;
    v11 = (std::__shared_weak_count **)(*v2 + 16 * v9);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *v11 = v6;
    v13 = v10 + 16 * v9;
    v14 = *(std::__shared_weak_count **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v3;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (v2[1] - *v2) >> 4;
    v18 = v2[5];
    v19 = v2[4] + 1;
    if (v19 >= v17)
      v20 = (v2[1] - *v2) >> 4;
    else
      v20 = 0;
    v2[4] = v19 - v20;
    if (v18 == v17)
    {
      v21 = v2[3] + 1;
      if (v21 < v17)
        v17 = 0;
      v2[3] = v21 - v17;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
      {
LABEL_33:
        v32 = (uint64_t **)a1[9];
        v49 = 0uLL;
        v33 = (std::__shared_weak_count *)a1[5];
        if (v33)
        {
          v34 = std::__shared_weak_count::lock(v33);
          if (v34)
          {
            v35 = v34;
            v36 = a1[4];
            v37 = (unint64_t *)&v34->__shared_weak_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
            *(_QWORD *)&v49 = v36;
            *((_QWORD *)&v49 + 1) = v34;
            v39 = (unint64_t *)&v34->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          else
          {
            v49 = 0uLL;
          }
        }
        v41 = (char *)operator new(0x30uLL);
        *(_QWORD *)v41 = &off_24C9DDF50;
        *(_OWORD *)(v41 + 8) = v49;
        v49 = 0uLL;
        *((_QWORD *)v41 + 3) = v6;
        *((_QWORD *)v41 + 4) = v3;
        v50 = 0;
        v51 = 0;
        v53 = v41;
        sub_210216F3C(*v32, (uint64_t)v52);
        v42 = v53;
        if (v53 == v52)
        {
          v43 = 4;
          v42 = v52;
        }
        else
        {
          if (!v53)
            goto LABEL_47;
          v43 = 5;
        }
        (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
LABEL_47:
        if (v3)
        {
          v44 = (unint64_t *)&v3->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        return;
      }
    }
    else
    {
      v2[5] = v18 + 1;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
        goto LABEL_33;
    }
    std::mutex::unlock(*v22);
    MEMORY[0x212BC6398](v22, 0x20C4093837F09);
    goto LABEL_33;
  }
  v23 = (uint64_t **)a1[9];
  v24 = (std::__shared_weak_count *)a1[5];
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v26 = v25;
    if (v25)
    {
      v27 = a1[4];
      v28 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v46 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v46 = &off_24C9DDFD0;
  *((_QWORD *)v46 + 1) = v27;
  *((_QWORD *)v46 + 2) = v26;
  v51 = v46;
  sub_210216F3C(*v23, (uint64_t)&v49);
  v47 = v51;
  if (v51 == &v49)
  {
    v48 = 4;
    v47 = &v49;
  }
  else
  {
    if (!v51)
      return;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
}

void sub_20ED0A9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0AAC8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED0AAD8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED0AAE4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED0AAF4(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count **v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  __int128 *v62;
  std::string *v63;
  std::runtime_error *exception;
  std::runtime_error *v65;
  __int128 v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::runtime_error v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  _QWORD *v74;
  __int128 *v75;
  _QWORD v76[3];
  std::string v77;
  std::string *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v73 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v73 + 1) = 45;
    v61 = (_QWORD *)a1[6];
    v60 = a1 + 6;
    v59 = v61;
    v62 = (__int128 *)*((unsigned __int8 *)v60 + 23);
    if ((char)v62 < 0)
      v62 = (__int128 *)v60[1];
    else
      v59 = v60;
    v74 = v59;
    v75 = v62;
    sub_20E8778D4((uint64_t)&v73, (uint64_t)v76, 0, 0, &v77);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v77;
    else
      v63 = (std::string *)v77.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v70, (const char *)v63);
    v70.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v65 = std::runtime_error::runtime_error(exception, &v70);
    v65->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v65, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v5[1].__vftable = *a3;
    v69 = v5;
    v67 = &v5[1].__vftable;
    v68 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    *a3 = 0;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v9 = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DDF00;
    v11 = v8 + 1;
    v71 = v8 + 1;
    v72 = v8;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v13 = (uint64_t *)a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 7;
    std::mutex::lock((std::mutex *)(v13 + 7));
    *(_QWORD *)&v73 = v14;
    *((_QWORD *)&v73 + 1) = v13;
    if (!*((_BYTE *)v13 + 48))
      sub_20E866B34();
    v15 = v13[4];
    v16 = *v13;
    v17 = (std::__shared_weak_count **)(*v13 + 16 * v15);
    do
      v18 = __ldxr(v9);
    while (__stxr(v18 + 1, v9));
    *v17 = v11;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v8;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v13[1] - *v13) >> 4;
    v24 = v13[5];
    v25 = v13[4] + 1;
    if (v25 >= v23)
      v26 = (v13[1] - *v13) >> 4;
    else
      v26 = 0;
    v13[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v13[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v13[3] = v27 - v23;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v73 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v73 = v42;
            *((_QWORD *)&v73 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v73 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x38uLL);
        *(_QWORD *)v47 = &off_24C9DE050;
        *(_OWORD *)(v47 + 8) = v73;
        v73 = 0uLL;
        *((_QWORD *)v47 + 3) = v11;
        *((_QWORD *)v47 + 4) = v8;
        v74 = 0;
        v75 = 0;
        *((_QWORD *)v47 + 5) = v67;
        *((_QWORD *)v47 + 6) = v68;
        v76[0] = 0;
        v76[1] = 0;
        v78 = (std::string *)v47;
        sub_210216F3C(*v38, (uint64_t)&v77);
        v48 = v78;
        if (v78 == &v77)
        {
          v49 = 4;
          v48 = &v77;
        }
        else
        {
          if (!v78)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(v48->__r_.__value_.__r.__words[0] + 8 * v49))();
LABEL_51:
        if (v72)
        {
          v50 = &v72->__shared_owners_;
          do
            v51 = __ldaxr((unint64_t *)v50);
          while (__stlxr(v51 - 1, (unint64_t *)v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v69)
        {
          v52 = (unint64_t *)&v69->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        return;
      }
    }
    else
    {
      v13[5] = v24 + 1;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v66 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v66 = v33;
      *((_QWORD *)&v66 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v66 = 0uLL;
    }
  }
  v54 = operator new(0x20uLL);
  v54[1] = 0;
  v54[2] = 0;
  *v54 = &unk_24C9B85F0;
  v54[3] = *a3;
  *a3 = 0;
  v55 = (char *)operator new(0x30uLL);
  *(_QWORD *)v55 = &off_24C9DE0D0;
  *(_OWORD *)(v55 + 8) = v66;
  *((_QWORD *)v55 + 4) = v54 + 3;
  *((_QWORD *)v55 + 5) = v54;
  v75 = (__int128 *)v55;
  sub_210216F3C(*v29, (uint64_t)&v73);
  v57 = v75;
  if (v75 == &v73)
  {
    v58 = 4;
    v57 = &v73;
  }
  else
  {
    if (!v75)
      return;
    v58 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v57 + 8 * v58))(v57, v56);
}

void sub_20ED0B100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x20ED0B014);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED0B208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED0B2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED0B2C4(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED0B338(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DE150;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED0B448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED0B4AC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DE1D0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED0B5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED0B620@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DE250;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED0B838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED0B900@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DE2D0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED0BB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED0BBE0(uint64_t a1)
{
  return sub_20ED0BD50(a1 - 16);
}

void sub_20ED0BBE8(uint64_t a1)
{
  sub_20ED0BD50(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0BC10(uint64_t a1)
{
  return sub_20ED0B338((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ED0BC18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED0B620((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED0BC20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED0B900((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED0BC28(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED0BC30(uint64_t a1)
{
  return sub_20ED0BD50(a1 - 24);
}

void sub_20ED0BC38(uint64_t a1)
{
  sub_20ED0BD50(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0BC60(uint64_t a1)
{
  return sub_20ED0B4AC((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED0BC68(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED0BC70(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED0BCD8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED0BD40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED0BD50(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9DDD10;
  *(_QWORD *)(a1 + 16) = &unk_24C9DDD88;
  *(_QWORD *)(a1 + 24) = &unk_24C9DDDC8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ED0BF3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DDF00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED0BF4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DDF00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0BF84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DDF50;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED0BFC8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DDF50;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0C01C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DDF50;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED0C08C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DDF50;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED0C0DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED0C118(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED0C150(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ED0C474((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED0C318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0C3FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenter"
                     "ingEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualS"
                                "LAMRecenteringEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0C468()
{
  return &unk_24C9DDFB0;
}

void sub_20ED0C474(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ED0C50C()
{
  __break(1u);
}

void sub_20ED0C5B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED0C5D8);
}

_QWORD *sub_20ED0C5E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DDFD0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED0C61C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DDFD0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0C664(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DDFD0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED0C6B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DDFD0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED0C6E4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED0C6F4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED0C720(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ED0C474((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED0C7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0C814(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenter"
                     "ingEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualS"
                                "LAMRecenteringEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0C880()
{
  return &unk_24C9DE030;
}

_QWORD *sub_20ED0C88C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DE050;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED0C914(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DE050;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED0C9AC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DE050;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED0CA3C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DE050;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED0CAAC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED0CB2C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED0CBA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED0C474(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED0CE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED0CFB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenter"
                     "ingEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualS"
                                "LAMRecenteringEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIv"
                                "EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0D020()
{
  return &unk_24C9DE0B0;
}

_QWORD *sub_20ED0D02C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DE0D0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED0D0A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DE0D0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0D134(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DE0D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[5];
  result[4] = a1[4];
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED0D1A4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DE0D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED0D1F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED0D264(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED0D2D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED0C474((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED0D3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0D490(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenter"
                     "ingEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualS"
                                "LAMRecenteringEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0D4FC()
{
  return &unk_24C9DE130;
}

_QWORD *sub_20ED0D508(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DE150;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED0D540(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DE150;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0D588(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DE150;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED0D5D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DE150;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED0D608(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED0D618(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED0D644(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED0D6D8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0D714(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteri"
                     "ngEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSL"
                                "AMRecenteringEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0D780()
{
  return &unk_24C9DE1B0;
}

_QWORD *sub_20ED0D78C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DE1D0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED0D7C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DE1D0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0D80C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DE1D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED0D85C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DE1D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED0D88C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED0D89C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED0D8C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED0D95C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0D998(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteri"
                     "ngEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSL"
                                "AMRecenteringEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0DA04()
{
  return &unk_24C9DE230;
}

_QWORD *sub_20ED0DA10(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DE250;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED0DA48(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DE250;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0DA90(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DE250;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED0DAE8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DE250;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED0DB20(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED0DB30(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED0DB5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED0DC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0DC60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenter"
                     "ingEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualS"
                                "LAMRecenteringEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0DCCC()
{
  return &unk_24C9DE2B0;
}

_QWORD *sub_20ED0DCD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DE2D0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED0DD10(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DE2D0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0DD58(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DE2D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED0DDB0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DE2D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED0DDE8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED0DDF8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED0DE24(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED0DEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0DF28(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenter"
                     "ingEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualS"
                                "LAMRecenteringEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED0DF94()
{
  return &unk_24C9DE330;
}

void sub_20ED0DFA4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED0DFC8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED0DFE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group26Forc"
                     "eVisualSLAMRecenteringEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_"
                                "group26ForceVisualSLAMRecenteringEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group26ForceVisualSLAMRecenteringEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED0E050(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED0E07C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0E0B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DE3A0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED0E120(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED0E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED0E1C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED0E254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED0E268(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED0E32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED0E340(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED0E404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED0E418(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED0E4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED0E4D4(uint64_t a1)
{
  sub_20ED0FC74(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED0E4F8(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count **v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::mutex **v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t **v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v2 = (uint64_t *)a1[18];
  if (v2)
  {
    v3 = (std::__shared_weak_count *)operator new(0x20uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DE608;
    v6 = v3 + 1;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = (_QWORD *)operator new();
    *v8 = v2 + 7;
    std::mutex::lock((std::mutex *)(v2 + 7));
    *(_QWORD *)&v49 = v8;
    *((_QWORD *)&v49 + 1) = v2;
    if (!*((_BYTE *)v2 + 48))
      sub_20E866B34();
    v9 = v2[4];
    v10 = *v2;
    v11 = (std::__shared_weak_count **)(*v2 + 16 * v9);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *v11 = v6;
    v13 = v10 + 16 * v9;
    v14 = *(std::__shared_weak_count **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v3;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (v2[1] - *v2) >> 4;
    v18 = v2[5];
    v19 = v2[4] + 1;
    if (v19 >= v17)
      v20 = (v2[1] - *v2) >> 4;
    else
      v20 = 0;
    v2[4] = v19 - v20;
    if (v18 == v17)
    {
      v21 = v2[3] + 1;
      if (v21 < v17)
        v17 = 0;
      v2[3] = v21 - v17;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
      {
LABEL_33:
        v32 = (uint64_t **)a1[9];
        v49 = 0uLL;
        v33 = (std::__shared_weak_count *)a1[5];
        if (v33)
        {
          v34 = std::__shared_weak_count::lock(v33);
          if (v34)
          {
            v35 = v34;
            v36 = a1[4];
            v37 = (unint64_t *)&v34->__shared_weak_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
            *(_QWORD *)&v49 = v36;
            *((_QWORD *)&v49 + 1) = v34;
            v39 = (unint64_t *)&v34->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          else
          {
            v49 = 0uLL;
          }
        }
        v41 = (char *)operator new(0x30uLL);
        *(_QWORD *)v41 = &off_24C9DE658;
        *(_OWORD *)(v41 + 8) = v49;
        v49 = 0uLL;
        *((_QWORD *)v41 + 3) = v6;
        *((_QWORD *)v41 + 4) = v3;
        v50 = 0;
        v51 = 0;
        v53 = v41;
        sub_210216F3C(*v32, (uint64_t)v52);
        v42 = v53;
        if (v53 == v52)
        {
          v43 = 4;
          v42 = v52;
        }
        else
        {
          if (!v53)
            goto LABEL_47;
          v43 = 5;
        }
        (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
LABEL_47:
        if (v3)
        {
          v44 = (unint64_t *)&v3->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        return;
      }
    }
    else
    {
      v2[5] = v18 + 1;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
        goto LABEL_33;
    }
    std::mutex::unlock(*v22);
    MEMORY[0x212BC6398](v22, 0x20C4093837F09);
    goto LABEL_33;
  }
  v23 = (uint64_t **)a1[9];
  v24 = (std::__shared_weak_count *)a1[5];
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v26 = v25;
    if (v25)
    {
      v27 = a1[4];
      v28 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v46 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v46 = &off_24C9DE6D8;
  *((_QWORD *)v46 + 1) = v27;
  *((_QWORD *)v46 + 2) = v26;
  v51 = v46;
  sub_210216F3C(*v23, (uint64_t)&v49);
  v47 = v51;
  if (v51 == &v49)
  {
    v48 = 4;
    v47 = &v49;
  }
  else
  {
    if (!v51)
      return;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
}

void sub_20ED0E8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED0E9EC(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED0E9FC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED0EA08(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED0EA18(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count **v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  __int128 *v62;
  std::string *v63;
  std::runtime_error *exception;
  std::runtime_error *v65;
  __int128 v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::runtime_error v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  _QWORD *v74;
  __int128 *v75;
  _QWORD v76[3];
  std::string v77;
  std::string *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v73 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v73 + 1) = 45;
    v61 = (_QWORD *)a1[6];
    v60 = a1 + 6;
    v59 = v61;
    v62 = (__int128 *)*((unsigned __int8 *)v60 + 23);
    if ((char)v62 < 0)
      v62 = (__int128 *)v60[1];
    else
      v59 = v60;
    v74 = v59;
    v75 = v62;
    sub_20E8778D4((uint64_t)&v73, (uint64_t)v76, 0, 0, &v77);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v77;
    else
      v63 = (std::string *)v77.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v70, (const char *)v63);
    v70.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v65 = std::runtime_error::runtime_error(exception, &v70);
    v65->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v65, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v5[1].__vftable = *a3;
    v69 = v5;
    v67 = &v5[1].__vftable;
    v68 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    *a3 = 0;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v9 = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DE608;
    v11 = v8 + 1;
    v71 = v8 + 1;
    v72 = v8;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v13 = (uint64_t *)a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 7;
    std::mutex::lock((std::mutex *)(v13 + 7));
    *(_QWORD *)&v73 = v14;
    *((_QWORD *)&v73 + 1) = v13;
    if (!*((_BYTE *)v13 + 48))
      sub_20E866B34();
    v15 = v13[4];
    v16 = *v13;
    v17 = (std::__shared_weak_count **)(*v13 + 16 * v15);
    do
      v18 = __ldxr(v9);
    while (__stxr(v18 + 1, v9));
    *v17 = v11;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v8;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v13[1] - *v13) >> 4;
    v24 = v13[5];
    v25 = v13[4] + 1;
    if (v25 >= v23)
      v26 = (v13[1] - *v13) >> 4;
    else
      v26 = 0;
    v13[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v13[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v13[3] = v27 - v23;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v73 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v73 = v42;
            *((_QWORD *)&v73 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v73 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x38uLL);
        *(_QWORD *)v47 = &off_24C9DE758;
        *(_OWORD *)(v47 + 8) = v73;
        v73 = 0uLL;
        *((_QWORD *)v47 + 3) = v11;
        *((_QWORD *)v47 + 4) = v8;
        v74 = 0;
        v75 = 0;
        *((_QWORD *)v47 + 5) = v67;
        *((_QWORD *)v47 + 6) = v68;
        v76[0] = 0;
        v76[1] = 0;
        v78 = (std::string *)v47;
        sub_210216F3C(*v38, (uint64_t)&v77);
        v48 = v78;
        if (v78 == &v77)
        {
          v49 = 4;
          v48 = &v77;
        }
        else
        {
          if (!v78)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(v48->__r_.__value_.__r.__words[0] + 8 * v49))();
LABEL_51:
        if (v72)
        {
          v50 = &v72->__shared_owners_;
          do
            v51 = __ldaxr((unint64_t *)v50);
          while (__stlxr(v51 - 1, (unint64_t *)v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v69)
        {
          v52 = (unint64_t *)&v69->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        return;
      }
    }
    else
    {
      v13[5] = v24 + 1;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v66 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v66 = v33;
      *((_QWORD *)&v66 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v66 = 0uLL;
    }
  }
  v54 = operator new(0x20uLL);
  v54[1] = 0;
  v54[2] = 0;
  *v54 = &unk_24C9B85F0;
  v54[3] = *a3;
  *a3 = 0;
  v55 = (char *)operator new(0x30uLL);
  *(_QWORD *)v55 = &off_24C9DE7D8;
  *(_OWORD *)(v55 + 8) = v66;
  *((_QWORD *)v55 + 4) = v54 + 3;
  *((_QWORD *)v55 + 5) = v54;
  v75 = (__int128 *)v55;
  sub_210216F3C(*v29, (uint64_t)&v73);
  v57 = v75;
  if (v75 == &v73)
  {
    v58 = 4;
    v57 = &v73;
  }
  else
  {
    if (!v75)
      return;
    v58 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v57 + 8 * v58))(v57, v56);
}

void sub_20ED0F024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x20ED0EF38);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED0F12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED0F1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED0F1E8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED0F25C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DE858;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED0F36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED0F3D0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9DE8D8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED0F4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED0F544@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DE958;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED0F75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED0F824@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9DE9D8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED0FA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED0FB04(uint64_t a1)
{
  return sub_20ED0FC74(a1 - 16);
}

void sub_20ED0FB0C(uint64_t a1)
{
  sub_20ED0FC74(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0FB34(uint64_t a1)
{
  return sub_20ED0F25C((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ED0FB3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED0F544((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED0FB44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED0F824((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED0FB4C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED0FB54(uint64_t a1)
{
  return sub_20ED0FC74(a1 - 24);
}

void sub_20ED0FB5C(uint64_t a1)
{
  sub_20ED0FC74(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0FB84(uint64_t a1)
{
  return sub_20ED0F3D0((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED0FB8C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED0FB94(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED0FBFC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED0FC64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED0FC74(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9DE418;
  *(_QWORD *)(a1 + 16) = &unk_24C9DE490;
  *(_QWORD *)(a1 + 24) = &unk_24C9DE4D0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ED0FE60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DE608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED0FE70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DE608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0FEA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DE658;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED0FEEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9DE658;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED0FF40(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DE658;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED0FFB0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DE658;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED10000(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED1003C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED10074(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ED10398((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED1023C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED10320(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRe"
                     "questEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAl"
                                "ertIn3DoFRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED1038C()
{
  return &unk_24C9DE6B8;
}

void sub_20ED10398(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ED10430()
{
  __break(1u);
}

void sub_20ED104DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED104FCLL);
}

_QWORD *sub_20ED10508(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DE6D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED10540(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DE6D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED10588(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DE6D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED105D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DE6D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED10608(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED10618(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED10644(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ED10398((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED106EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED10738(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRe"
                     "questEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAl"
                                "ertIn3DoFRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED107A4()
{
  return &unk_24C9DE738;
}

_QWORD *sub_20ED107B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DE758;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED10838(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9DE758;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED108D0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DE758;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED10960(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DE758;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED109D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED10A50(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED10ACC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED10398(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED10D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED10ED8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRe"
                     "questEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAl"
                                "ertIn3DoFRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promise"
                                "IvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED10F44()
{
  return &unk_24C9DE7B8;
}

_QWORD *sub_20ED10F50(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DE7D8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED10FCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9DE7D8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED11058(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DE7D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[5];
  result[4] = a1[4];
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED110C8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DE7D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED11118(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED11188(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED111F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED10398((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED1130C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED113B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRe"
                     "questEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAl"
                                "ertIn3DoFRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED11420()
{
  return &unk_24C9DE838;
}

_QWORD *sub_20ED1142C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DE858;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED11464(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DE858;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED114AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DE858;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED114FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DE858;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED1152C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED1153C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED11568(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED115FC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED11638(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFReq"
                     "uestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAle"
                                "rtIn3DoFRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED116A4()
{
  return &unk_24C9DE8B8;
}

_QWORD *sub_20ED116B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DE8D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED116E8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DE8D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED11730(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DE8D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED11780(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9DE8D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED117B0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED117C0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED117EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED11880(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED118BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFReq"
                     "uestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAle"
                                "rtIn3DoFRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED11928()
{
  return &unk_24C9DE938;
}

_QWORD *sub_20ED11934(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DE958;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED1196C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DE958;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED119B4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DE958;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED11A0C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DE958;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED11A44(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED11A54(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED11A80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED11B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED11B84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRe"
                     "questEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAl"
                                "ertIn3DoFRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED11BF0()
{
  return &unk_24C9DE9B8;
}

_QWORD *sub_20ED11BFC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DE9D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED11C34(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DE9D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED11C7C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9DE9D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED11CD4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9DE9D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED11D0C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED11D1C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED11D48(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED11E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED11E4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRe"
                     "questEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAl"
                                "ertIn3DoFRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED11EB8()
{
  return &unk_24C9DEA38;
}

void sub_20ED11EC8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED11EEC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED11F04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group28Trav"
                     "elModeAlertIn3DoFRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_"
                                "group28TravelModeAlertIn3DoFRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group28TravelModeAlertIn3DoFRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED11F74(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED11FA0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED11FDC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DEAA8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED12044(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED120D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED120E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED12178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED1218C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED12250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED12264(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED12328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED1233C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED123E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED123F4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1AF8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1B28;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED125D8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1A90;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1AC0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED127BC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1A28;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1A58;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED129A0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D19C0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CC9A0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D19F0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED12B84(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1958;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1988;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED12D68(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E10E8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9E1118;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED12F4C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D18F0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1920;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED13130(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D18C0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9D1148;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9C7D60;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED13314(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1890;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9D1148;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9C6280;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED134F8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1860;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9D1148;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B47B8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED136DC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1830;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B5770;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED138C0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1790;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D17F8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D17C0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED13AA4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1728;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1758;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED13C88(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D16F8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC650;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED13E6C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1690;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CC900;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D16C0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED14050(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D15F0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D1620;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2630;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED14234(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D15C0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9D1148;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC618;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED14418(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1558;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D1588;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC5E0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED145FC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1480;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D14E8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D14B0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED147E0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D13E0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D1410;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC5A8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED149C4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1378;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D13A8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED14BA8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1348;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9E10B0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED14D8C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E1048;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CCAD0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9E1078;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED14F70(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1318;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4710;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED15154(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D12E8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC570;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED15338(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1280;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D12B0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC538;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED1551C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1218;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1248;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED15700(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D11E8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9D1148;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D10D8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B6AE0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED158E4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1180;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9D1148;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D10D8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D11B0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED15AC8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9D1070;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9D1148;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D10D8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D10A0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED15CAC(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50;
  char v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  std::__shared_weak_count *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  char v128;
  char *v129;
  __int128 v130;
  uint64_t v131;
  _QWORD *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  std::__shared_weak_count *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void *v149;
  char *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  char v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  _QWORD *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  std::__shared_weak_count *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  __int128 v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  void *v218;
  char v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  _QWORD *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  std::__shared_weak_count *v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  __int128 v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  _QWORD *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  char v264;
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  _QWORD *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  std::__shared_weak_count *v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  __int128 v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  uint64_t v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t *v360;
  void *v361[5];
  std::__shared_weak_count *v362;
  void *v363[5];
  std::__shared_weak_count *v364;
  void *v365[5];
  std::__shared_weak_count *v366;
  void *v367[4];
  _QWORD v368[7];
  __int128 v369;
  __int128 v370;
  uint64_t (**v371)();
  __int128 v372;
  uint64_t v373;
  uint64_t (**v374)();
  __int128 v375;
  uint64_t (**v376)();
  __int128 v377;
  uint64_t v378;
  std::__shared_weak_count *v379;
  void *v380[2];
  uint64_t v381;
  _BYTE v382[24];
  uint64_t v383;
  __int128 v384;
  uint64_t v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  uint64_t v389;
  __int128 v390;
  __int128 v391;
  uint64_t v392;
  std::__shared_weak_count *v393;
  void *v394[3];
  _QWORD v395[7];
  __int128 v396;
  __int128 v397;
  uint64_t (**v398)();
  __int128 v399;
  uint64_t v400;
  uint64_t (**v401)();
  __int128 v402;
  uint64_t (**v403)();
  __int128 v404;
  uint64_t v405;
  std::__shared_weak_count *v406;
  void *__dst[3];
  _QWORD v408[7];
  __int128 v409;
  __int128 v410;
  uint64_t (**v411)();
  __int128 v412;
  uint64_t v413;
  uint64_t (**v414)();
  __int128 v415;
  uint64_t (**v416)();
  __int128 v417;
  _QWORD *v418;
  std::__shared_weak_count *v419;
  _QWORD v420[2];
  _QWORD v421[7];
  __int128 v422;
  __int128 v423;
  uint64_t (**v424)();
  __int128 v425;
  uint64_t v426;
  uint64_t (**v427)();
  __int128 v428;
  uint64_t (**v429)();
  __int128 v430;
  _QWORD v431[2];
  _QWORD v432[7];
  __int128 v433;
  __int128 v434;
  uint64_t (**v435)();
  __int128 v436;
  uint64_t v437;
  uint64_t (**v438)();
  __int128 v439;
  uint64_t (**v440)();
  __int128 v441;
  _QWORD v442[2];
  void *__p[7];
  __int128 v444;
  __int128 v445;
  uint64_t (**v446)();
  __int128 v447;
  uint64_t v448;
  uint64_t (**v449)();
  __int128 v450;
  uint64_t (**v451)();
  __int128 v452;
  _QWORD v453[2];
  _QWORD v454[2];
  _QWORD v455[2];
  __int128 v456;
  _QWORD v457[2];
  _QWORD v458[2];
  __int128 v459;
  _QWORD v460[2];
  __int128 v461;
  _QWORD v462[5];

  v462[2] = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)operator new(0x58uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v4[1]);
  v418 = &v4[1].__vftable;
  v419 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    __dst[2] = *(void **)(a2 + 16);
  }
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = __dst[0];
  v421[0] = __dst[1];
  *(void **)((char *)v421 + 7) = *(void **)((char *)&__dst[1] + 7);
  v8 = HIBYTE(__dst[2]);
  memset(__dst, 0, sizeof(__dst));
  v406 = 0;
  v405 = 0;
  *(_QWORD *)((char *)v432 + 7) = 0;
  v432[0] = 0;
  *(_QWORD *)v382 = v4 + 1;
  *(_QWORD *)&v382[8] = v4;
  v368[0] = 0;
  v368[1] = 0;
  v9 = operator new();
  __p[0] = (void *)v432[0];
  *(void **)((char *)__p + 7) = *(void **)((char *)v432 + 7);
  v432[0] = 0;
  *(_QWORD *)((char *)v432 + 7) = 0;
  v10 = *(_OWORD *)v382;
  *(_OWORD *)v382 = 0uLL;
  *(_BYTE *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)v9 = &off_24C9DEDB8;
  *(_QWORD *)(v9 + 16) = &unk_24C9DEE30;
  *(_QWORD *)(v9 + 24) = &unk_24C9DEE70;
  v11 = __p[0];
  *(void **)(v9 + 63) = *(void **)((char *)__p + 7);
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = v11;
  *(_BYTE *)(v9 + 71) = 0;
  __p[0] = 0;
  *(void **)((char *)__p + 7) = 0;
  *(_OWORD *)(v9 + 72) = v10;
  v395[1] = 0;
  v395[0] = 0;
  v12 = (_QWORD *)operator new();
  v360 = a1;
  *v12 = &off_24C9DEF68;
  *(_QWORD *)(v9 + 88) = v12;
  *(_QWORD *)(v9 + 96) = v9 + 96;
  *(_QWORD *)(v9 + 104) = v9 + 96;
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 120) = v9 + 120;
  *(_QWORD *)(v9 + 128) = v9 + 120;
  *(_QWORD *)(v9 + 136) = 0;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DEFB8;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  v15 = *(std::__shared_weak_count **)(v9 + 40);
  if (v15)
  {
    if (v15->__shared_owners_ != -1)
      goto LABEL_18;
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    *(_QWORD *)(v9 + 32) = v9;
    *(_QWORD *)(v9 + 40) = v13;
    std::__shared_weak_count::__release_weak(v15);
  }
  else
  {
    do
      v19 = __ldxr(v14);
    while (__stxr(v19 + 1, v14));
    v20 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *(_QWORD *)(v9 + 32) = v9;
    *(_QWORD *)(v9 + 40) = v13;
  }
  do
    v22 = __ldaxr(v14);
  while (__stlxr(v22 - 1, v14));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_18:
  if (v395[1])
  {
    v23 = (unint64_t *)(v395[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v395[1] + 16))(v395[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v395[1]);
    }
  }
  v395[0] = v9;
  v395[1] = v13;
  if (*(_QWORD *)&v382[8])
  {
    v25 = (unint64_t *)(*(_QWORD *)&v382[8] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v382[8] + 16))(*(_QWORD *)&v382[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v382[8]);
    }
  }
  v408[0] = &off_24C9DEB50;
  v408[1] = v7;
  v408[2] = v421[0];
  *(_QWORD *)((char *)&v408[2] + 7) = *(_QWORD *)((char *)v421 + 7);
  HIBYTE(v408[3]) = v8;
  v421[0] = 0;
  *(_QWORD *)((char *)v421 + 7) = 0;
  v408[4] = 0x7974706D45;
  v408[5] = __p[0];
  *(void **)((char *)&v408[5] + 7) = *(void **)((char *)__p + 7);
  HIBYTE(v408[6]) = 5;
  __p[0] = 0;
  *(void **)((char *)__p + 7) = 0;
  v409 = 0uLL;
  *(_OWORD *)v382 = 0uLL;
  v27 = v395[0];
  v28 = v395[1];
  v410 = *(_OWORD *)v395;
  v395[0] = 0;
  v395[1] = 0;
  if (*((_QWORD *)&v410 + 1))
  {
    v29 = (unint64_t *)(v28 + 16);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v411 = &off_24C9D1110;
  v31 = (_QWORD *)operator new();
  *v31 = &off_24C9DF008;
  v31[1] = v27;
  v31[2] = v28;
  *(_QWORD *)&v412 = v31;
  v33 = *((_QWORD *)&v410 + 1);
  v32 = v410;
  if (!*((_QWORD *)&v410 + 1))
  {
    *((_QWORD *)&v412 + 1) = v410;
    v413 = 0;
    if ((_QWORD)v410)
      v37 = v410 + 16;
    else
      v37 = 0;
    goto LABEL_48;
  }
  v34 = (unint64_t *)(*((_QWORD *)&v410 + 1) + 16);
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  v36 = *((_QWORD *)&v410 + 1);
  *((_QWORD *)&v412 + 1) = v32;
  v413 = v33;
  if ((_QWORD)v410)
    v37 = v410 + 16;
  else
    v37 = 0;
  if (!*((_QWORD *)&v410 + 1))
  {
    v32 = v410;
LABEL_48:
    v40 = 0;
    v414 = &off_24C9DEB80;
    v415 = v37;
    goto LABEL_49;
  }
  v38 = (unint64_t *)(*((_QWORD *)&v410 + 1) + 16);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  v40 = *((_QWORD *)&v410 + 1);
  v32 = v410;
  v414 = &off_24C9DEB80;
  *(_QWORD *)&v415 = v37;
  *((_QWORD *)&v415 + 1) = v36;
  if (*((_QWORD *)&v410 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v410 + 1) + 16);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
LABEL_49:
  if (v32)
    v43 = v32 + 24;
  else
    v43 = 0;
  v416 = &off_24C9B2310;
  *(_QWORD *)&v417 = v43;
  *((_QWORD *)&v417 + 1) = v40;
  if (!v368[1])
    goto LABEL_56;
  v44 = (unint64_t *)(v368[1] + 8);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v368[1] + 16))(v368[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v368[1]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_57;
  }
  else
  {
LABEL_56:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_57:
      *(_OWORD *)v394 = *(_OWORD *)a2;
      v394[2] = *(void **)(a2 + 16);
      goto LABEL_60;
    }
  }
  sub_20E860C04(v394, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_60:
  v46 = v418;
  v47 = v419;
  if (v419)
  {
    v48 = (unint64_t *)&v419->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = v394[0];
  *(void **)&v461 = v394[1];
  *(void **)((char *)&v461 + 7) = *(void **)((char *)&v394[1] + 7);
  v51 = HIBYTE(v394[2]);
  memset(v394, 0, sizeof(v394));
  *(_QWORD *)&v459 = v455[0];
  *(_QWORD *)((char *)&v459 + 7) = *(_QWORD *)((char *)v455 + 7);
  v455[0] = 0;
  *(_QWORD *)((char *)v455 + 7) = 0;
  v393 = 0;
  v392 = 0;
  v421[0] = 0;
  *(_QWORD *)((char *)v421 + 7) = 0;
  v368[0] = v46;
  v368[1] = v47;
  __p[1] = 0;
  __p[0] = 0;
  v52 = operator new();
  v432[0] = v421[0];
  *(_QWORD *)((char *)v432 + 7) = *(_QWORD *)((char *)v421 + 7);
  v421[0] = 0;
  *(_QWORD *)((char *)v421 + 7) = 0;
  v53 = *(_OWORD *)v368;
  v368[0] = 0;
  v368[1] = 0;
  *(_BYTE *)(v52 + 8) = 1;
  *(_QWORD *)(v52 + 32) = 0;
  *(_QWORD *)(v52 + 40) = 0;
  *(_QWORD *)v52 = &off_24C9DF080;
  *(_QWORD *)(v52 + 16) = &unk_24C9DF0F8;
  *(_QWORD *)(v52 + 24) = &unk_24C9DF138;
  v54 = v432[0];
  *(_QWORD *)(v52 + 63) = *(_QWORD *)((char *)v432 + 7);
  *(_QWORD *)(v52 + 48) = 0;
  *(_QWORD *)(v52 + 56) = v54;
  *(_BYTE *)(v52 + 71) = 0;
  v432[0] = 0;
  *(_QWORD *)((char *)v432 + 7) = 0;
  *(_OWORD *)(v52 + 72) = v53;
  *(_OWORD *)v382 = 0uLL;
  v55 = (_QWORD *)operator new();
  *v55 = &off_24C9DF220;
  *(_QWORD *)(v52 + 88) = v55;
  *(_QWORD *)(v52 + 96) = v52 + 96;
  *(_QWORD *)(v52 + 104) = v52 + 96;
  *(_QWORD *)(v52 + 112) = 0;
  *(_QWORD *)(v52 + 120) = v52 + 120;
  *(_QWORD *)(v52 + 128) = v52 + 120;
  *(_QWORD *)(v52 + 136) = 0;
  v56 = (std::__shared_weak_count *)operator new();
  v56->__shared_owners_ = 0;
  v57 = (unint64_t *)&v56->__shared_owners_;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DF2C0;
  v56->__shared_weak_owners_ = 0;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)v52;
  v58 = *(std::__shared_weak_count **)(v52 + 40);
  if (v58)
  {
    if (v58->__shared_owners_ != -1)
      goto LABEL_76;
    do
      v59 = __ldxr(v57);
    while (__stxr(v59 + 1, v57));
    v60 = (unint64_t *)&v56->__shared_weak_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    *(_QWORD *)(v52 + 32) = v52;
    *(_QWORD *)(v52 + 40) = v56;
    std::__shared_weak_count::__release_weak(v58);
  }
  else
  {
    do
      v62 = __ldxr(v57);
    while (__stxr(v62 + 1, v57));
    v63 = (unint64_t *)&v56->__shared_weak_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
    *(_QWORD *)(v52 + 32) = v52;
    *(_QWORD *)(v52 + 40) = v56;
  }
  do
    v65 = __ldaxr(v57);
  while (__stlxr(v65 - 1, v57));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
LABEL_76:
  if (*(_QWORD *)&v382[8])
  {
    v66 = (unint64_t *)(*(_QWORD *)&v382[8] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v382[8] + 16))(*(_QWORD *)&v382[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v382[8]);
    }
  }
  *(_QWORD *)v382 = v52;
  *(_QWORD *)&v382[8] = v56;
  if (v368[1])
  {
    v68 = (unint64_t *)(v368[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v368[1] + 16))(v368[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v368[1]);
    }
  }
  v395[0] = &off_24C9DEBB8;
  v395[1] = v50;
  v395[2] = v461;
  *(_QWORD *)((char *)&v395[2] + 7) = *(_QWORD *)((char *)&v461 + 7);
  HIBYTE(v395[3]) = v51;
  *(_QWORD *)&v461 = 0;
  *(_QWORD *)((char *)&v461 + 7) = 0;
  v395[4] = 0x7974706D45;
  v395[5] = v459;
  *(_QWORD *)((char *)&v395[5] + 7) = *(_QWORD *)((char *)&v459 + 7);
  HIBYTE(v395[6]) = 5;
  *(_QWORD *)&v459 = 0;
  *(_QWORD *)((char *)&v459 + 7) = 0;
  v396 = 0uLL;
  v368[0] = 0;
  v368[1] = 0;
  v70 = *(_OWORD *)v382;
  v397 = *(_OWORD *)v382;
  *(_OWORD *)v382 = 0uLL;
  if (*((_QWORD *)&v397 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 16);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v398 = &off_24C9D1110;
  v73 = operator new();
  *(_QWORD *)v73 = &off_24C9DF008;
  *(_OWORD *)(v73 + 8) = v70;
  *(_QWORD *)&v399 = v73;
  v75 = *((_QWORD *)&v397 + 1);
  v74 = v397;
  if (!*((_QWORD *)&v397 + 1))
  {
    *((_QWORD *)&v399 + 1) = v397;
    v400 = 0;
    if ((_QWORD)v397)
      v79 = v397 + 16;
    else
      v79 = 0;
    goto LABEL_106;
  }
  v76 = (unint64_t *)(*((_QWORD *)&v397 + 1) + 16);
  do
    v77 = __ldxr(v76);
  while (__stxr(v77 + 1, v76));
  v78 = *((_QWORD *)&v397 + 1);
  *((_QWORD *)&v399 + 1) = v74;
  v400 = v75;
  if ((_QWORD)v397)
    v79 = v397 + 16;
  else
    v79 = 0;
  if (!*((_QWORD *)&v397 + 1))
  {
    v74 = v397;
LABEL_106:
    v82 = 0;
    v401 = &off_24C9DEBE8;
    v402 = v79;
    goto LABEL_107;
  }
  v80 = (unint64_t *)(*((_QWORD *)&v397 + 1) + 16);
  do
    v81 = __ldxr(v80);
  while (__stxr(v81 + 1, v80));
  v82 = *((_QWORD *)&v397 + 1);
  v74 = v397;
  v401 = &off_24C9DEBE8;
  *(_QWORD *)&v402 = v79;
  *((_QWORD *)&v402 + 1) = v78;
  if (*((_QWORD *)&v397 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v397 + 1) + 16);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
LABEL_107:
  if (v74)
    v85 = v74 + 24;
  else
    v85 = 0;
  v403 = &off_24C9B2310;
  *(_QWORD *)&v404 = v85;
  *((_QWORD *)&v404 + 1) = v82;
  v86 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_114;
  v87 = (unint64_t *)((char *)__p[1] + 8);
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_115;
  }
  else
  {
LABEL_114:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_115:
      *(_OWORD *)v380 = *(_OWORD *)a2;
      v381 = *(_QWORD *)(a2 + 16);
      goto LABEL_118;
    }
  }
  sub_20E860C04(v380, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_118:
  v89 = v418;
  v90 = v419;
  if (v419)
  {
    v91 = (unint64_t *)&v419->__shared_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  v93 = *(_OWORD *)v380;
  v380[0] = 0;
  v380[1] = 0;
  v368[2] = v381;
  __p[0] = (void *)0x7974706D45;
  __p[1] = (void *)v454[0];
  *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v454 + 7);
  HIBYTE(__p[2]) = 5;
  *(_OWORD *)v368 = v93;
  v381 = 0;
  v454[0] = 0;
  *(_QWORD *)((char *)v454 + 7) = 0;
  v378 = 0;
  v379 = 0;
  *(_QWORD *)&v456 = 0;
  *(_QWORD *)((char *)&v456 + 7) = 0;
  v421[0] = v89;
  v421[1] = v90;
  v461 = 0uLL;
  v94 = operator new();
  *(_QWORD *)&v459 = v456;
  *(_QWORD *)((char *)&v459 + 7) = *(_QWORD *)((char *)&v456 + 7);
  *(_QWORD *)&v456 = 0;
  *(_QWORD *)((char *)&v456 + 7) = 0;
  v95 = *(_OWORD *)v421;
  *(_OWORD *)v421 = 0uLL;
  *(_BYTE *)(v94 + 8) = 1;
  *(_QWORD *)(v94 + 32) = 0;
  *(_QWORD *)(v94 + 40) = 0;
  *(_QWORD *)v94 = &off_24C9DF310;
  *(_QWORD *)(v94 + 16) = &unk_24C9DF388;
  *(_QWORD *)(v94 + 24) = &unk_24C9DF3C8;
  v96 = v459;
  *(_QWORD *)(v94 + 63) = *(_QWORD *)((char *)&v459 + 7);
  *(_QWORD *)(v94 + 48) = 0;
  *(_QWORD *)(v94 + 56) = v96;
  *(_BYTE *)(v94 + 71) = 0;
  *(_QWORD *)&v459 = 0;
  *(_QWORD *)((char *)&v459 + 7) = 0;
  *(_OWORD *)(v94 + 72) = v95;
  *(_OWORD *)v432 = 0uLL;
  v97 = (_QWORD *)operator new();
  *v97 = &off_24C9DF4B0;
  *(_QWORD *)(v94 + 88) = v97;
  *(_QWORD *)(v94 + 96) = v94 + 96;
  *(_QWORD *)(v94 + 104) = v94 + 96;
  *(_QWORD *)(v94 + 112) = 0;
  *(_QWORD *)(v94 + 120) = v94 + 120;
  *(_QWORD *)(v94 + 128) = v94 + 120;
  *(_QWORD *)(v94 + 136) = 0;
  v98 = (std::__shared_weak_count *)operator new();
  v98->__shared_owners_ = 0;
  v99 = (unint64_t *)&v98->__shared_owners_;
  v98->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DF500;
  v98->__shared_weak_owners_ = 0;
  v98[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  v100 = *(std::__shared_weak_count **)(v94 + 40);
  if (v100)
  {
    if (v100->__shared_owners_ != -1)
      goto LABEL_134;
    do
      v101 = __ldxr(v99);
    while (__stxr(v101 + 1, v99));
    v102 = (unint64_t *)&v98->__shared_weak_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
    *(_QWORD *)(v94 + 32) = v94;
    *(_QWORD *)(v94 + 40) = v98;
    std::__shared_weak_count::__release_weak(v100);
  }
  else
  {
    do
      v104 = __ldxr(v99);
    while (__stxr(v104 + 1, v99));
    v105 = (unint64_t *)&v98->__shared_weak_owners_;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
    *(_QWORD *)(v94 + 32) = v94;
    *(_QWORD *)(v94 + 40) = v98;
  }
  do
    v107 = __ldaxr(v99);
  while (__stlxr(v107 - 1, v99));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
  }
LABEL_134:
  v108 = (std::__shared_weak_count *)v432[1];
  if (v432[1])
  {
    v109 = (unint64_t *)(v432[1] + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v432[0] = v94;
  v432[1] = v98;
  v111 = (std::__shared_weak_count *)v421[1];
  if (v421[1])
  {
    v112 = (unint64_t *)(v421[1] + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  *(_OWORD *)v421 = 0uLL;
  sub_20ED1CD6C((uint64_t)v382, (__int128 *)v368, (__int128 *)__p, (uint64_t)v432, (uint64_t)v421);
  v114 = (std::__shared_weak_count *)v421[1];
  if (v421[1])
  {
    v115 = (unint64_t *)(v421[1] + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = (std::__shared_weak_count *)v432[1];
  if (v432[1])
  {
    v118 = (unint64_t *)(v432[1] + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v461 + 1);
  if (!*((_QWORD *)&v461 + 1))
    goto LABEL_158;
  v121 = (unint64_t *)(*((_QWORD *)&v461 + 1) + 8);
  do
    v122 = __ldaxr(v121);
  while (__stlxr(v122 - 1, v121));
  if (!v122)
  {
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_159:
      if ((SHIBYTE(v368[2]) & 0x80000000) == 0)
        goto LABEL_160;
LABEL_164:
      operator delete((void *)v368[0]);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_161;
      goto LABEL_165;
    }
  }
  else
  {
LABEL_158:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_159;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v368[2]) < 0)
    goto LABEL_164;
LABEL_160:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_161:
    *(_OWORD *)v367 = *(_OWORD *)a2;
    v367[2] = *(void **)(a2 + 16);
    goto LABEL_166;
  }
LABEL_165:
  sub_20E860C04(v367, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_166:
  v123 = v418;
  v124 = v419;
  if (v419)
  {
    v125 = (unint64_t *)&v419->__shared_owners_;
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
  v127 = v367[0];
  *(void **)&v456 = v367[1];
  *(void **)((char *)&v456 + 7) = *(void **)((char *)&v367[1] + 7);
  v128 = HIBYTE(v367[2]);
  v366 = 0;
  memset(v367, 0, 24);
  v462[0] = v453[0];
  *(_QWORD *)((char *)v462 + 7) = *(_QWORD *)((char *)v453 + 7);
  v453[0] = 0;
  *(_QWORD *)((char *)v453 + 7) = 0;
  v365[4] = 0;
  *(_QWORD *)&v459 = 0;
  *(_QWORD *)((char *)&v459 + 7) = 0;
  v432[0] = v123;
  v432[1] = v124;
  *(_OWORD *)v421 = 0uLL;
  v129 = (char *)operator new();
  *(_QWORD *)&v461 = v459;
  *(_QWORD *)((char *)&v461 + 7) = *(_QWORD *)((char *)&v459 + 7);
  *(_QWORD *)&v459 = 0;
  *(_QWORD *)((char *)&v459 + 7) = 0;
  v130 = *(_OWORD *)v432;
  *(_OWORD *)v432 = 0uLL;
  v129[8] = 1;
  *((_QWORD *)v129 + 4) = 0;
  *((_QWORD *)v129 + 5) = 0;
  *(_QWORD *)v129 = &off_24C9DF5B8;
  *((_QWORD *)v129 + 2) = &unk_24C9DF630;
  *((_QWORD *)v129 + 3) = &unk_24C9DF670;
  v131 = v461;
  *(_QWORD *)(v129 + 63) = *(_QWORD *)((char *)&v461 + 7);
  *((_QWORD *)v129 + 6) = 0;
  *((_QWORD *)v129 + 7) = v131;
  v129[71] = 0;
  *(_QWORD *)&v461 = 0;
  *(_QWORD *)((char *)&v461 + 7) = 0;
  *(_OWORD *)(v129 + 72) = v130;
  __p[1] = 0;
  __p[0] = 0;
  v132 = (_QWORD *)operator new();
  *v132 = &off_24C9DF748;
  *((_QWORD *)v129 + 11) = v132;
  *((_QWORD *)v129 + 12) = v129 + 96;
  *((_QWORD *)v129 + 13) = v129 + 96;
  *((_QWORD *)v129 + 14) = 0;
  *((_QWORD *)v129 + 15) = v129 + 120;
  *((_QWORD *)v129 + 16) = v129 + 120;
  *((_QWORD *)v129 + 17) = 0;
  v133 = (std::__shared_weak_count *)operator new();
  v133->__shared_owners_ = 0;
  v134 = (unint64_t *)&v133->__shared_owners_;
  v133->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DF798;
  v133->__shared_weak_owners_ = 0;
  v133[1].__vftable = (std::__shared_weak_count_vtbl *)v129;
  v135 = (std::__shared_weak_count *)*((_QWORD *)v129 + 5);
  if (v135)
  {
    if (v135->__shared_owners_ != -1)
      goto LABEL_182;
    do
      v136 = __ldxr(v134);
    while (__stxr(v136 + 1, v134));
    v137 = (unint64_t *)&v133->__shared_weak_owners_;
    do
      v138 = __ldxr(v137);
    while (__stxr(v138 + 1, v137));
    *((_QWORD *)v129 + 4) = v129;
    *((_QWORD *)v129 + 5) = v133;
    std::__shared_weak_count::__release_weak(v135);
  }
  else
  {
    do
      v139 = __ldxr(v134);
    while (__stxr(v139 + 1, v134));
    v140 = (unint64_t *)&v133->__shared_weak_owners_;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
    *((_QWORD *)v129 + 4) = v129;
    *((_QWORD *)v129 + 5) = v133;
  }
  do
    v142 = __ldaxr(v134);
  while (__stlxr(v142 - 1, v134));
  if (!v142)
  {
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v133);
  }
LABEL_182:
  v143 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v144 = (unint64_t *)((char *)__p[1] + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  __p[0] = v129;
  __p[1] = v133;
  v146 = (std::__shared_weak_count *)v432[1];
  if (v432[1])
  {
    v147 = (unint64_t *)(v432[1] + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v368[0] = &off_24C9DEC50;
  v368[1] = v127;
  v368[2] = v456;
  *(_QWORD *)((char *)&v368[2] + 7) = *(_QWORD *)((char *)&v456 + 7);
  HIBYTE(v368[3]) = v128;
  *(_QWORD *)&v456 = 0;
  *(_QWORD *)((char *)&v456 + 7) = 0;
  v368[4] = 0x7974706D45;
  v368[5] = v462[0];
  *(_QWORD *)((char *)&v368[5] + 7) = *(_QWORD *)((char *)v462 + 7);
  HIBYTE(v368[6]) = 5;
  v462[0] = 0;
  *(_QWORD *)((char *)v462 + 7) = 0;
  v369 = 0uLL;
  *(_OWORD *)v432 = 0uLL;
  v149 = __p[0];
  v150 = (char *)__p[1];
  v370 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  if (*((_QWORD *)&v370 + 1))
  {
    v151 = (unint64_t *)(v150 + 16);
    do
      v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
  }
  v371 = &off_24C9D1110;
  v153 = (_QWORD *)operator new();
  *v153 = &off_24C9DF008;
  v153[1] = v149;
  v153[2] = v150;
  *(_QWORD *)&v372 = v153;
  v155 = *((_QWORD *)&v370 + 1);
  v154 = v370;
  if (!*((_QWORD *)&v370 + 1))
  {
    *((_QWORD *)&v372 + 1) = v370;
    v373 = 0;
    if ((_QWORD)v370)
      v159 = v370 + 16;
    else
      v159 = 0;
    goto LABEL_212;
  }
  v156 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 16);
  do
    v157 = __ldxr(v156);
  while (__stxr(v157 + 1, v156));
  v158 = *((_QWORD *)&v370 + 1);
  *((_QWORD *)&v372 + 1) = v154;
  v373 = v155;
  if ((_QWORD)v370)
    v159 = v370 + 16;
  else
    v159 = 0;
  if (!*((_QWORD *)&v370 + 1))
  {
    v154 = v370;
LABEL_212:
    v162 = 0;
    v374 = &off_24C9C62E8;
    v375 = v159;
    goto LABEL_213;
  }
  v160 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 16);
  do
    v161 = __ldxr(v160);
  while (__stxr(v161 + 1, v160));
  v162 = *((_QWORD *)&v370 + 1);
  v154 = v370;
  v374 = &off_24C9C62E8;
  *(_QWORD *)&v375 = v159;
  *((_QWORD *)&v375 + 1) = v158;
  if (*((_QWORD *)&v370 + 1))
  {
    v163 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 16);
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
  }
LABEL_213:
  if (v154)
    v165 = v154 + 24;
  else
    v165 = 0;
  v376 = &off_24C9B2310;
  *(_QWORD *)&v377 = v165;
  *((_QWORD *)&v377 + 1) = v162;
  v166 = (std::__shared_weak_count *)v421[1];
  if (!v421[1])
    goto LABEL_220;
  v167 = (unint64_t *)(v421[1] + 8);
  do
    v168 = __ldaxr(v167);
  while (__stlxr(v168 - 1, v167));
  if (!v168)
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_221;
  }
  else
  {
LABEL_220:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_221:
      *(_OWORD *)v365 = *(_OWORD *)a2;
      v365[2] = *(void **)(a2 + 16);
      goto LABEL_224;
    }
  }
  sub_20E860C04(v365, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_224:
  v169 = v418;
  v170 = v419;
  if (v419)
  {
    v171 = (unint64_t *)&v419->__shared_owners_;
    do
      v172 = __ldxr(v171);
    while (__stxr(v172 + 1, v171));
  }
  v173 = v365[0];
  v462[0] = v365[1];
  *(void **)((char *)v462 + 7) = *(void **)((char *)&v365[1] + 7);
  v174 = HIBYTE(v365[2]);
  v364 = 0;
  memset(v365, 0, 24);
  v460[0] = v442[0];
  *(_QWORD *)((char *)v460 + 7) = *(_QWORD *)((char *)v442 + 7);
  v442[0] = 0;
  *(_QWORD *)((char *)v442 + 7) = 0;
  v363[4] = 0;
  *(_QWORD *)&v456 = 0;
  *(_QWORD *)((char *)&v456 + 7) = 0;
  v421[0] = v169;
  v421[1] = v170;
  v461 = 0uLL;
  v175 = operator new();
  *(_QWORD *)&v459 = v456;
  *(_QWORD *)((char *)&v459 + 7) = *(_QWORD *)((char *)&v456 + 7);
  *(_QWORD *)&v456 = 0;
  *(_QWORD *)((char *)&v456 + 7) = 0;
  v176 = *(_OWORD *)v421;
  *(_OWORD *)v421 = 0uLL;
  *(_BYTE *)(v175 + 8) = 1;
  *(_QWORD *)(v175 + 32) = 0;
  *(_QWORD *)(v175 + 40) = 0;
  *(_QWORD *)v175 = &off_24C9DF7E8;
  *(_QWORD *)(v175 + 16) = &unk_24C9DF860;
  *(_QWORD *)(v175 + 24) = &unk_24C9DF8A0;
  v177 = v459;
  *(_QWORD *)(v175 + 63) = *(_QWORD *)((char *)&v459 + 7);
  *(_QWORD *)(v175 + 48) = 0;
  *(_QWORD *)(v175 + 56) = v177;
  *(_BYTE *)(v175 + 71) = 0;
  *(_QWORD *)&v459 = 0;
  *(_QWORD *)((char *)&v459 + 7) = 0;
  *(_OWORD *)(v175 + 72) = v176;
  *(_OWORD *)v432 = 0uLL;
  v178 = (_QWORD *)operator new();
  *v178 = &off_24C9DF988;
  *(_QWORD *)(v175 + 88) = v178;
  *(_QWORD *)(v175 + 96) = v175 + 96;
  *(_QWORD *)(v175 + 104) = v175 + 96;
  *(_QWORD *)(v175 + 112) = 0;
  *(_QWORD *)(v175 + 120) = v175 + 120;
  *(_QWORD *)(v175 + 128) = v175 + 120;
  *(_QWORD *)(v175 + 136) = 0;
  v179 = (std::__shared_weak_count *)operator new();
  v179->__shared_owners_ = 0;
  v180 = (unint64_t *)&v179->__shared_owners_;
  v179->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DF9D8;
  v179->__shared_weak_owners_ = 0;
  v179[1].__vftable = (std::__shared_weak_count_vtbl *)v175;
  v181 = *(std::__shared_weak_count **)(v175 + 40);
  if (v181)
  {
    if (v181->__shared_owners_ != -1)
      goto LABEL_240;
    do
      v182 = __ldxr(v180);
    while (__stxr(v182 + 1, v180));
    v183 = (unint64_t *)&v179->__shared_weak_owners_;
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
    *(_QWORD *)(v175 + 32) = v175;
    *(_QWORD *)(v175 + 40) = v179;
    std::__shared_weak_count::__release_weak(v181);
  }
  else
  {
    do
      v185 = __ldxr(v180);
    while (__stxr(v185 + 1, v180));
    v186 = (unint64_t *)&v179->__shared_weak_owners_;
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 1, v186));
    *(_QWORD *)(v175 + 32) = v175;
    *(_QWORD *)(v175 + 40) = v179;
  }
  do
    v188 = __ldaxr(v180);
  while (__stlxr(v188 - 1, v180));
  if (!v188)
  {
    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
    std::__shared_weak_count::__release_weak(v179);
  }
LABEL_240:
  v189 = (std::__shared_weak_count *)v432[1];
  if (v432[1])
  {
    v190 = (unint64_t *)(v432[1] + 8);
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v432[0] = v175;
  v432[1] = v179;
  v192 = (std::__shared_weak_count *)v421[1];
  if (v421[1])
  {
    v193 = (unint64_t *)(v421[1] + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  __p[0] = &off_24C9DEC80;
  __p[1] = v173;
  __p[2] = (void *)v462[0];
  *(void **)((char *)&__p[2] + 7) = *(void **)((char *)v462 + 7);
  HIBYTE(__p[3]) = v174;
  v462[0] = 0;
  *(_QWORD *)((char *)v462 + 7) = 0;
  __p[4] = (void *)0x7974706D45;
  __p[5] = (void *)v460[0];
  *(void **)((char *)&__p[5] + 7) = *(void **)((char *)v460 + 7);
  HIBYTE(__p[6]) = 5;
  v460[0] = 0;
  *(_QWORD *)((char *)v460 + 7) = 0;
  v444 = 0uLL;
  *(_OWORD *)v421 = 0uLL;
  v195 = *(_OWORD *)v432;
  v445 = *(_OWORD *)v432;
  *(_OWORD *)v432 = 0uLL;
  if (*((_QWORD *)&v445 + 1))
  {
    v196 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 16);
    do
      v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
  }
  v446 = &off_24C9D1110;
  v198 = operator new();
  *(_QWORD *)v198 = &off_24C9DF008;
  *(_OWORD *)(v198 + 8) = v195;
  *(_QWORD *)&v447 = v198;
  v200 = *((_QWORD *)&v445 + 1);
  v199 = v445;
  if (!*((_QWORD *)&v445 + 1))
  {
    *((_QWORD *)&v447 + 1) = v445;
    v448 = 0;
    if ((_QWORD)v445)
      v204 = v445 + 16;
    else
      v204 = 0;
    goto LABEL_270;
  }
  v201 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 16);
  do
    v202 = __ldxr(v201);
  while (__stxr(v202 + 1, v201));
  v203 = *((_QWORD *)&v445 + 1);
  *((_QWORD *)&v447 + 1) = v199;
  v448 = v200;
  if ((_QWORD)v445)
    v204 = v445 + 16;
  else
    v204 = 0;
  if (!*((_QWORD *)&v445 + 1))
  {
    v199 = v445;
LABEL_270:
    v207 = 0;
    v449 = &off_24C9DECB0;
    v450 = v204;
    goto LABEL_271;
  }
  v205 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 16);
  do
    v206 = __ldxr(v205);
  while (__stxr(v206 + 1, v205));
  v207 = *((_QWORD *)&v445 + 1);
  v199 = v445;
  v449 = &off_24C9DECB0;
  *(_QWORD *)&v450 = v204;
  *((_QWORD *)&v450 + 1) = v203;
  if (*((_QWORD *)&v445 + 1))
  {
    v208 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 16);
    do
      v209 = __ldxr(v208);
    while (__stxr(v209 + 1, v208));
  }
LABEL_271:
  if (v199)
    v210 = v199 + 24;
  else
    v210 = 0;
  v451 = &off_24C9B2310;
  *(_QWORD *)&v452 = v210;
  *((_QWORD *)&v452 + 1) = v207;
  v211 = (std::__shared_weak_count *)*((_QWORD *)&v461 + 1);
  if (!*((_QWORD *)&v461 + 1))
    goto LABEL_278;
  v212 = (unint64_t *)(*((_QWORD *)&v461 + 1) + 8);
  do
    v213 = __ldaxr(v212);
  while (__stlxr(v213 - 1, v212));
  if (!v213)
  {
    ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
    std::__shared_weak_count::__release_weak(v211);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_279;
  }
  else
  {
LABEL_278:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_279:
      *(_OWORD *)v363 = *(_OWORD *)a2;
      v363[2] = *(void **)(a2 + 16);
      goto LABEL_282;
    }
  }
  sub_20E860C04(v363, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_282:
  v214 = v418;
  v215 = v419;
  if (v419)
  {
    v216 = (unint64_t *)&v419->__shared_owners_;
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
  }
  v218 = v363[0];
  v460[0] = v363[1];
  *(void **)((char *)v460 + 7) = *(void **)((char *)&v363[1] + 7);
  v219 = HIBYTE(v363[2]);
  v362 = 0;
  memset(v363, 0, 24);
  v458[0] = v431[0];
  *(_QWORD *)((char *)v458 + 7) = *(_QWORD *)((char *)v431 + 7);
  v431[0] = 0;
  *(_QWORD *)((char *)v431 + 7) = 0;
  v361[4] = 0;
  v462[0] = 0;
  *(_QWORD *)((char *)v462 + 7) = 0;
  *(_QWORD *)&v461 = v214;
  *((_QWORD *)&v461 + 1) = v215;
  v459 = 0uLL;
  v220 = operator new();
  *(_QWORD *)&v456 = v462[0];
  *(_QWORD *)((char *)&v456 + 7) = *(_QWORD *)((char *)v462 + 7);
  v462[0] = 0;
  *(_QWORD *)((char *)v462 + 7) = 0;
  v221 = v461;
  v461 = 0uLL;
  *(_BYTE *)(v220 + 8) = 1;
  *(_QWORD *)(v220 + 32) = 0;
  *(_QWORD *)(v220 + 40) = 0;
  *(_QWORD *)v220 = &off_24C9DFA28;
  *(_QWORD *)(v220 + 16) = &unk_24C9DFAA0;
  *(_QWORD *)(v220 + 24) = &unk_24C9DFAE0;
  v222 = v456;
  *(_QWORD *)(v220 + 63) = *(_QWORD *)((char *)&v456 + 7);
  *(_QWORD *)(v220 + 48) = 0;
  *(_QWORD *)(v220 + 56) = v222;
  *(_BYTE *)(v220 + 71) = 0;
  *(_QWORD *)&v456 = 0;
  *(_QWORD *)((char *)&v456 + 7) = 0;
  *(_OWORD *)(v220 + 72) = v221;
  *(_OWORD *)v421 = 0uLL;
  v223 = (_QWORD *)operator new();
  *v223 = &off_24C9DFBC8;
  *(_QWORD *)(v220 + 88) = v223;
  *(_QWORD *)(v220 + 96) = v220 + 96;
  *(_QWORD *)(v220 + 104) = v220 + 96;
  *(_QWORD *)(v220 + 112) = 0;
  *(_QWORD *)(v220 + 120) = v220 + 120;
  *(_QWORD *)(v220 + 128) = v220 + 120;
  *(_QWORD *)(v220 + 136) = 0;
  v224 = (std::__shared_weak_count *)operator new();
  v224->__shared_owners_ = 0;
  v225 = (unint64_t *)&v224->__shared_owners_;
  v224->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DFC18;
  v224->__shared_weak_owners_ = 0;
  v224[1].__vftable = (std::__shared_weak_count_vtbl *)v220;
  v226 = *(std::__shared_weak_count **)(v220 + 40);
  if (v226)
  {
    if (v226->__shared_owners_ != -1)
      goto LABEL_298;
    do
      v227 = __ldxr(v225);
    while (__stxr(v227 + 1, v225));
    v228 = (unint64_t *)&v224->__shared_weak_owners_;
    do
      v229 = __ldxr(v228);
    while (__stxr(v229 + 1, v228));
    *(_QWORD *)(v220 + 32) = v220;
    *(_QWORD *)(v220 + 40) = v224;
    std::__shared_weak_count::__release_weak(v226);
  }
  else
  {
    do
      v230 = __ldxr(v225);
    while (__stxr(v230 + 1, v225));
    v231 = (unint64_t *)&v224->__shared_weak_owners_;
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
    *(_QWORD *)(v220 + 32) = v220;
    *(_QWORD *)(v220 + 40) = v224;
  }
  do
    v233 = __ldaxr(v225);
  while (__stlxr(v233 - 1, v225));
  if (!v233)
  {
    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
    std::__shared_weak_count::__release_weak(v224);
  }
LABEL_298:
  v234 = (std::__shared_weak_count *)v421[1];
  if (v421[1])
  {
    v235 = (unint64_t *)(v421[1] + 8);
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v421[0] = v220;
  v421[1] = v224;
  v237 = (std::__shared_weak_count *)*((_QWORD *)&v461 + 1);
  if (*((_QWORD *)&v461 + 1))
  {
    v238 = (unint64_t *)(*((_QWORD *)&v461 + 1) + 8);
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v432[0] = &off_24C9DECE8;
  v432[1] = v218;
  v432[2] = v460[0];
  *(_QWORD *)((char *)&v432[2] + 7) = *(_QWORD *)((char *)v460 + 7);
  HIBYTE(v432[3]) = v219;
  v460[0] = 0;
  *(_QWORD *)((char *)v460 + 7) = 0;
  v432[4] = 0x7974706D45;
  v432[5] = v458[0];
  *(_QWORD *)((char *)&v432[5] + 7) = *(_QWORD *)((char *)v458 + 7);
  HIBYTE(v432[6]) = 5;
  v458[0] = 0;
  *(_QWORD *)((char *)v458 + 7) = 0;
  v433 = 0uLL;
  v461 = 0uLL;
  v240 = *(_OWORD *)v421;
  v434 = *(_OWORD *)v421;
  *(_OWORD *)v421 = 0uLL;
  if (*((_QWORD *)&v434 + 1))
  {
    v241 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 16);
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  v435 = &off_24C9D1110;
  v243 = operator new();
  *(_QWORD *)v243 = &off_24C9DF008;
  *(_OWORD *)(v243 + 8) = v240;
  *(_QWORD *)&v436 = v243;
  v245 = *((_QWORD *)&v434 + 1);
  v244 = v434;
  if (!*((_QWORD *)&v434 + 1))
  {
    *((_QWORD *)&v436 + 1) = v434;
    v437 = 0;
    if ((_QWORD)v434)
      v249 = v434 + 16;
    else
      v249 = 0;
    goto LABEL_328;
  }
  v246 = (unint64_t *)(*((_QWORD *)&v434 + 1) + 16);
  do
    v247 = __ldxr(v246);
  while (__stxr(v247 + 1, v246));
  v248 = *((_QWORD *)&v434 + 1);
  *((_QWORD *)&v436 + 1) = v244;
  v437 = v245;
  if ((_QWORD)v434)
    v249 = v434 + 16;
  else
    v249 = 0;
  if (!*((_QWORD *)&v434 + 1))
  {
    v244 = v434;
LABEL_328:
    v252 = 0;
    v438 = &off_24C9DED18;
    v439 = v249;
    goto LABEL_329;
  }
  v250 = (unint64_t *)(*((_QWORD *)&v434 + 1) + 16);
  do
    v251 = __ldxr(v250);
  while (__stxr(v251 + 1, v250));
  v252 = *((_QWORD *)&v434 + 1);
  v244 = v434;
  v438 = &off_24C9DED18;
  *(_QWORD *)&v439 = v249;
  *((_QWORD *)&v439 + 1) = v248;
  if (*((_QWORD *)&v434 + 1))
  {
    v253 = (unint64_t *)(*((_QWORD *)&v434 + 1) + 16);
    do
      v254 = __ldxr(v253);
    while (__stxr(v254 + 1, v253));
  }
LABEL_329:
  if (v244)
    v255 = v244 + 24;
  else
    v255 = 0;
  v440 = &off_24C9B2310;
  *(_QWORD *)&v441 = v255;
  *((_QWORD *)&v441 + 1) = v252;
  v256 = (std::__shared_weak_count *)*((_QWORD *)&v459 + 1);
  if (!*((_QWORD *)&v459 + 1))
    goto LABEL_336;
  v257 = (unint64_t *)(*((_QWORD *)&v459 + 1) + 8);
  do
    v258 = __ldaxr(v257);
  while (__stlxr(v258 - 1, v257));
  if (!v258)
  {
    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
    std::__shared_weak_count::__release_weak(v256);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_337;
  }
  else
  {
LABEL_336:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_337:
      *(_OWORD *)v361 = *(_OWORD *)a2;
      v361[2] = *(void **)(a2 + 16);
      goto LABEL_340;
    }
  }
  sub_20E860C04(v361, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_340:
  v259 = v418;
  v260 = v419;
  if (v419)
  {
    v261 = (unint64_t *)&v419->__shared_owners_;
    do
      v262 = __ldxr(v261);
    while (__stxr(v262 + 1, v261));
  }
  v263 = v361[0];
  v458[0] = v361[1];
  *(void **)((char *)v458 + 7) = *(void **)((char *)&v361[1] + 7);
  v264 = HIBYTE(v361[2]);
  memset(v361, 0, 24);
  v457[0] = v420[0];
  *(_QWORD *)((char *)v457 + 7) = *(_QWORD *)((char *)v420 + 7);
  v420[0] = 0;
  *(_QWORD *)((char *)v420 + 7) = 0;
  *((_QWORD *)&v459 + 1) = v260;
  v460[0] = 0;
  *(_QWORD *)((char *)v460 + 7) = 0;
  *(_QWORD *)&v459 = v259;
  v456 = 0uLL;
  v265 = operator new();
  v462[0] = v460[0];
  *(_QWORD *)((char *)v462 + 7) = *(_QWORD *)((char *)v460 + 7);
  v460[0] = 0;
  *(_QWORD *)((char *)v460 + 7) = 0;
  v266 = v459;
  v459 = 0uLL;
  *(_BYTE *)(v265 + 8) = 1;
  *(_QWORD *)(v265 + 32) = 0;
  *(_QWORD *)(v265 + 40) = 0;
  *(_QWORD *)v265 = &off_24C9DFC68;
  *(_QWORD *)(v265 + 16) = &unk_24C9DFCE0;
  *(_QWORD *)(v265 + 24) = &unk_24C9DFD20;
  v267 = v462[0];
  *(_QWORD *)(v265 + 63) = *(_QWORD *)((char *)v462 + 7);
  *(_QWORD *)(v265 + 48) = 0;
  *(_QWORD *)(v265 + 56) = v267;
  *(_BYTE *)(v265 + 71) = 0;
  v462[0] = 0;
  *(_QWORD *)((char *)v462 + 7) = 0;
  *(_OWORD *)(v265 + 72) = v266;
  v461 = 0uLL;
  v268 = (_QWORD *)operator new();
  *v268 = &off_24C9DFE08;
  *(_QWORD *)(v265 + 88) = v268;
  *(_QWORD *)(v265 + 96) = v265 + 96;
  *(_QWORD *)(v265 + 104) = v265 + 96;
  *(_QWORD *)(v265 + 112) = 0;
  *(_QWORD *)(v265 + 120) = v265 + 120;
  *(_QWORD *)(v265 + 128) = v265 + 120;
  *(_QWORD *)(v265 + 136) = 0;
  v269 = (std::__shared_weak_count *)operator new();
  v269->__shared_owners_ = 0;
  v270 = (unint64_t *)&v269->__shared_owners_;
  v269->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DFE58;
  v269->__shared_weak_owners_ = 0;
  v269[1].__vftable = (std::__shared_weak_count_vtbl *)v265;
  v271 = *(std::__shared_weak_count **)(v265 + 40);
  if (v271)
  {
    if (v271->__shared_owners_ != -1)
      goto LABEL_356;
    do
      v272 = __ldxr(v270);
    while (__stxr(v272 + 1, v270));
    v273 = (unint64_t *)&v269->__shared_weak_owners_;
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
    *(_QWORD *)(v265 + 32) = v265;
    *(_QWORD *)(v265 + 40) = v269;
    std::__shared_weak_count::__release_weak(v271);
  }
  else
  {
    do
      v275 = __ldxr(v270);
    while (__stxr(v275 + 1, v270));
    v276 = (unint64_t *)&v269->__shared_weak_owners_;
    do
      v277 = __ldxr(v276);
    while (__stxr(v277 + 1, v276));
    *(_QWORD *)(v265 + 32) = v265;
    *(_QWORD *)(v265 + 40) = v269;
  }
  do
    v278 = __ldaxr(v270);
  while (__stlxr(v278 - 1, v270));
  if (!v278)
  {
    ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
    std::__shared_weak_count::__release_weak(v269);
  }
LABEL_356:
  v279 = (std::__shared_weak_count *)*((_QWORD *)&v461 + 1);
  if (*((_QWORD *)&v461 + 1))
  {
    v280 = (unint64_t *)(*((_QWORD *)&v461 + 1) + 8);
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  *(_QWORD *)&v461 = v265;
  *((_QWORD *)&v461 + 1) = v269;
  v282 = (std::__shared_weak_count *)*((_QWORD *)&v459 + 1);
  if (*((_QWORD *)&v459 + 1))
  {
    v283 = (unint64_t *)(*((_QWORD *)&v459 + 1) + 8);
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v421[0] = &off_24C9DED50;
  v421[1] = v263;
  v421[2] = v458[0];
  *(_QWORD *)((char *)&v421[2] + 7) = *(_QWORD *)((char *)v458 + 7);
  HIBYTE(v421[3]) = v264;
  v458[0] = 0;
  *(_QWORD *)((char *)v458 + 7) = 0;
  v421[4] = 0x7974706D45;
  v421[5] = v457[0];
  *(_QWORD *)((char *)&v421[5] + 7) = *(_QWORD *)((char *)v457 + 7);
  HIBYTE(v421[6]) = 5;
  v457[0] = 0;
  *(_QWORD *)((char *)v457 + 7) = 0;
  v422 = 0uLL;
  v459 = 0uLL;
  v285 = v461;
  v423 = v461;
  v461 = 0uLL;
  if (*((_QWORD *)&v423 + 1))
  {
    v286 = (unint64_t *)(*((_QWORD *)&v285 + 1) + 16);
    do
      v287 = __ldxr(v286);
    while (__stxr(v287 + 1, v286));
  }
  v424 = &off_24C9D1110;
  v288 = operator new();
  *(_QWORD *)v288 = &off_24C9DF008;
  *(_OWORD *)(v288 + 8) = v285;
  *(_QWORD *)&v425 = v288;
  v290 = *((_QWORD *)&v423 + 1);
  v289 = v423;
  if (!*((_QWORD *)&v423 + 1))
  {
    *((_QWORD *)&v425 + 1) = v423;
    v426 = 0;
    if ((_QWORD)v423)
      v294 = v423 + 16;
    else
      v294 = 0;
    goto LABEL_386;
  }
  v291 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 16);
  do
    v292 = __ldxr(v291);
  while (__stxr(v292 + 1, v291));
  v293 = *((_QWORD *)&v423 + 1);
  *((_QWORD *)&v425 + 1) = v289;
  v426 = v290;
  if ((_QWORD)v423)
    v294 = v423 + 16;
  else
    v294 = 0;
  if (!*((_QWORD *)&v423 + 1))
  {
    v289 = v423;
LABEL_386:
    v297 = 0;
    v427 = &off_24C9DED80;
    v428 = v294;
    goto LABEL_387;
  }
  v295 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 16);
  do
    v296 = __ldxr(v295);
  while (__stxr(v296 + 1, v295));
  v297 = *((_QWORD *)&v423 + 1);
  v289 = v423;
  v427 = &off_24C9DED80;
  *(_QWORD *)&v428 = v294;
  *((_QWORD *)&v428 + 1) = v293;
  if (*((_QWORD *)&v423 + 1))
  {
    v298 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 16);
    do
      v299 = __ldxr(v298);
    while (__stxr(v299 + 1, v298));
  }
LABEL_387:
  if (v289)
    v300 = v289 + 24;
  else
    v300 = 0;
  v429 = &off_24C9B2310;
  *(_QWORD *)&v430 = v300;
  *((_QWORD *)&v430 + 1) = v297;
  v301 = (std::__shared_weak_count *)*((_QWORD *)&v456 + 1);
  if (*((_QWORD *)&v456 + 1))
  {
    v302 = (unint64_t *)(*((_QWORD *)&v456 + 1) + 8);
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v304 = operator new();
  *(_QWORD *)v304 = &off_24C9DEB50;
  *(_QWORD *)(v304 + 168) = &off_24C9DEBB8;
  *(_QWORD *)(v304 + 504) = &off_24C9DEC50;
  *(_QWORD *)(v304 + 624) = &off_24C9C62E8;
  *(_QWORD *)(v304 + 672) = &off_24C9DEC80;
  *(_QWORD *)(v304 + 792) = &off_24C9DECB0;
  *(_QWORD *)(v304 + 840) = &off_24C9DECE8;
  *(_QWORD *)(v304 + 960) = &off_24C9DED18;
  *(_QWORD *)(v304 + 1008) = &off_24C9DED50;
  *(_QWORD *)(v304 + 1128) = &off_24C9DED80;
  *(_QWORD *)(v304 + 24) = v408[3];
  v305 = *(_OWORD *)&v408[1];
  memset(&v408[1], 0, 24);
  *(_QWORD *)(v304 + 48) = v408[6];
  v306 = *(_OWORD *)&v408[4];
  memset(&v408[4], 0, 24);
  v307 = v409;
  v409 = 0uLL;
  *(_OWORD *)(v304 + 8) = v305;
  *(_OWORD *)(v304 + 32) = v306;
  v308 = v410;
  v410 = 0uLL;
  v309 = v412;
  v310 = v413;
  *((_QWORD *)&v412 + 1) = 0;
  v413 = 0;
  *(_QWORD *)(v304 + 112) = v310;
  *(_QWORD *)(v304 + 120) = &off_24C9DEB80;
  *(_OWORD *)(v304 + 56) = v307;
  *(_OWORD *)(v304 + 72) = v308;
  v311 = v415;
  v312 = v417;
  v417 = 0uLL;
  *(_QWORD *)(v304 + 192) = v395[3];
  *(_OWORD *)(v304 + 96) = v309;
  v313 = *(_OWORD *)&v395[1];
  memset(&v395[1], 0, 24);
  *(_QWORD *)(v304 + 216) = v395[6];
  *(_OWORD *)(v304 + 128) = v311;
  v314 = *(_OWORD *)&v395[4];
  memset(&v395[4], 0, 24);
  *(_OWORD *)(v304 + 152) = v312;
  v315 = v396;
  v396 = 0uLL;
  *(_OWORD *)(v304 + 176) = v313;
  *(_OWORD *)(v304 + 200) = v314;
  v316 = v397;
  v397 = 0uLL;
  *(_OWORD *)(v304 + 344) = *(_OWORD *)&v382[8];
  *(_OWORD *)(v304 + 536) = *(_OWORD *)&v368[4];
  v317 = v399;
  v318 = v400;
  *((_QWORD *)&v399 + 1) = 0;
  v400 = 0;
  *(_QWORD *)(v304 + 280) = v318;
  *(_QWORD *)(v304 + 288) = &off_24C9DEBE8;
  *(_OWORD *)(v304 + 224) = v315;
  *(_OWORD *)(v304 + 240) = v316;
  v319 = v402;
  v320 = v404;
  v404 = 0uLL;
  *(_QWORD *)(v304 + 336) = &off_24C9DEC20;
  *(_QWORD *)(v304 + 360) = v383;
  *(_QWORD *)(v304 + 384) = v385;
  *(_QWORD *)(v304 + 424) = &off_24C9B46D8;
  *(_QWORD *)(v304 + 448) = v389;
  *(_QWORD *)(v304 + 456) = &off_24C9D12B0;
  *(_OWORD *)(v304 + 264) = v317;
  *(_OWORD *)(v304 + 296) = v319;
  *(_OWORD *)(v304 + 320) = v320;
  *(_OWORD *)(v304 + 368) = v384;
  v321 = v386;
  v322 = v387;
  v323 = v391;
  *(_QWORD *)(v304 + 528) = v368[3];
  *(_OWORD *)(v304 + 392) = v321;
  *(_OWORD *)(v304 + 408) = v322;
  *(_OWORD *)(v304 + 432) = v388;
  *(_OWORD *)(v304 + 464) = v390;
  v324 = *(_OWORD *)&v368[1];
  memset(&v368[1], 0, 24);
  *(_QWORD *)(v304 + 552) = v368[6];
  memset(&v368[4], 0, 24);
  *(_QWORD *)(v304 + 88) = &off_24C9D1110;
  *(_QWORD *)&v412 = 0;
  v415 = 0uLL;
  *(_QWORD *)(v304 + 144) = &off_24C9B2310;
  *(_QWORD *)(v304 + 256) = &off_24C9D1110;
  *(_QWORD *)&v399 = 0;
  v402 = 0uLL;
  *(_QWORD *)(v304 + 312) = &off_24C9B2310;
  *(_QWORD *)&v382[8] = 0;
  *(_QWORD *)&v382[16] = 0;
  v383 = 0;
  v384 = 0uLL;
  v385 = 0;
  v386 = 0uLL;
  v387 = 0uLL;
  v388 = 0uLL;
  v389 = 0;
  *(_QWORD *)&v390 = 0;
  *(_QWORD *)(v304 + 480) = &off_24C9B2310;
  *(_OWORD *)(v304 + 488) = v323;
  *((_QWORD *)&v390 + 1) = 0;
  v391 = 0uLL;
  *(_OWORD *)(v304 + 512) = v324;
  v325 = v369;
  v369 = 0uLL;
  v326 = v370;
  *(_OWORD *)(v304 + 560) = v325;
  *(_OWORD *)(v304 + 576) = v326;
  v370 = 0uLL;
  *(_QWORD *)(v304 + 592) = &off_24C9D1110;
  *(_OWORD *)(v304 + 600) = v372;
  *(_QWORD *)(v304 + 616) = v373;
  *((_QWORD *)&v372 + 1) = 0;
  v373 = 0;
  *(_OWORD *)(v304 + 632) = v375;
  v375 = 0uLL;
  *(_QWORD *)&v372 = 0;
  *(_QWORD *)(v304 + 648) = &off_24C9B2310;
  *(_OWORD *)(v304 + 656) = v377;
  v377 = 0uLL;
  v327 = *(_OWORD *)&__p[1];
  *(void **)(v304 + 696) = __p[3];
  *(_OWORD *)(v304 + 680) = v327;
  memset(&__p[1], 0, 24);
  v328 = *(_OWORD *)&__p[4];
  *(void **)(v304 + 720) = __p[6];
  *(_OWORD *)(v304 + 704) = v328;
  memset(&__p[4], 0, 24);
  v329 = v444;
  v444 = 0uLL;
  v330 = v445;
  *(_OWORD *)(v304 + 728) = v329;
  *(_OWORD *)(v304 + 744) = v330;
  v445 = 0uLL;
  *(_QWORD *)(v304 + 760) = &off_24C9D1110;
  *(_OWORD *)(v304 + 768) = v447;
  *(_QWORD *)(v304 + 784) = v448;
  *((_QWORD *)&v447 + 1) = 0;
  v448 = 0;
  *(_OWORD *)(v304 + 800) = v450;
  *(_QWORD *)&v447 = 0;
  v450 = 0uLL;
  *(_QWORD *)(v304 + 816) = &off_24C9B2310;
  *(_OWORD *)(v304 + 824) = v452;
  v452 = 0uLL;
  v331 = *(_OWORD *)&v432[1];
  *(_QWORD *)(v304 + 864) = v432[3];
  *(_OWORD *)(v304 + 848) = v331;
  memset(&v432[1], 0, 24);
  v332 = *(_OWORD *)&v432[4];
  *(_QWORD *)(v304 + 888) = v432[6];
  *(_OWORD *)(v304 + 872) = v332;
  memset(&v432[4], 0, 24);
  v333 = v433;
  v433 = 0uLL;
  v334 = v434;
  *(_OWORD *)(v304 + 896) = v333;
  *(_OWORD *)(v304 + 912) = v334;
  v434 = 0uLL;
  *(_QWORD *)(v304 + 928) = &off_24C9D1110;
  *(_OWORD *)(v304 + 936) = v436;
  *(_QWORD *)(v304 + 952) = v437;
  *((_QWORD *)&v436 + 1) = 0;
  v437 = 0;
  *(_OWORD *)(v304 + 968) = v439;
  *(_QWORD *)&v436 = 0;
  v439 = 0uLL;
  *(_QWORD *)(v304 + 984) = &off_24C9B2310;
  *(_OWORD *)(v304 + 992) = v441;
  v441 = 0uLL;
  v335 = *(_OWORD *)&v421[1];
  *(_QWORD *)(v304 + 1032) = v421[3];
  *(_OWORD *)(v304 + 1016) = v335;
  memset(&v421[1], 0, 24);
  v336 = *(_OWORD *)&v421[4];
  *(_QWORD *)(v304 + 1056) = v421[6];
  *(_OWORD *)(v304 + 1040) = v336;
  memset(&v421[4], 0, 24);
  v337 = v422;
  v422 = 0uLL;
  v338 = v423;
  *(_OWORD *)(v304 + 1064) = v337;
  *(_OWORD *)(v304 + 1080) = v338;
  v423 = 0uLL;
  *(_QWORD *)(v304 + 1096) = &off_24C9D1110;
  *(_OWORD *)(v304 + 1104) = v425;
  *(_QWORD *)(v304 + 1120) = v426;
  *((_QWORD *)&v425 + 1) = 0;
  v426 = 0;
  *(_OWORD *)(v304 + 1136) = v428;
  *(_QWORD *)&v425 = 0;
  v428 = 0uLL;
  *(_QWORD *)(v304 + 1152) = &off_24C9B2310;
  *(_OWORD *)(v304 + 1160) = v430;
  v430 = 0uLL;
  *v360 = v304;
  sub_20ED21064((uint64_t)v421);
  if (SHIBYTE(v361[2]) < 0)
    operator delete(v361[0]);
  sub_20ED21248((uint64_t)v432);
  v339 = v362;
  if (v362)
  {
    v340 = (unint64_t *)&v362->__shared_owners_;
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
      std::__shared_weak_count::__release_weak(v339);
      if ((SHIBYTE(v363[2]) & 0x80000000) == 0)
        goto LABEL_403;
      goto LABEL_402;
    }
  }
  if (SHIBYTE(v363[2]) < 0)
LABEL_402:
    operator delete(v363[0]);
LABEL_403:
  sub_20ED2142C((uint64_t)__p);
  v342 = v364;
  if (v364)
  {
    v343 = (unint64_t *)&v364->__shared_owners_;
    do
      v344 = __ldaxr(v343);
    while (__stlxr(v344 - 1, v343));
    if (!v344)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
      if ((SHIBYTE(v365[2]) & 0x80000000) == 0)
        goto LABEL_409;
      goto LABEL_408;
    }
  }
  if (SHIBYTE(v365[2]) < 0)
LABEL_408:
    operator delete(v365[0]);
LABEL_409:
  sub_20ED21610((uint64_t)v368);
  v345 = v366;
  if (v366)
  {
    v346 = (unint64_t *)&v366->__shared_owners_;
    do
      v347 = __ldaxr(v346);
    while (__stlxr(v347 - 1, v346));
    if (!v347)
    {
      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
      std::__shared_weak_count::__release_weak(v345);
      if ((SHIBYTE(v367[2]) & 0x80000000) == 0)
        goto LABEL_415;
      goto LABEL_414;
    }
  }
  if (SHIBYTE(v367[2]) < 0)
LABEL_414:
    operator delete(v367[0]);
LABEL_415:
  sub_20ED217F4((uint64_t)v382);
  v348 = v379;
  if (v379)
  {
    v349 = (unint64_t *)&v379->__shared_owners_;
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
      if ((SHIBYTE(v381) & 0x80000000) == 0)
        goto LABEL_421;
      goto LABEL_420;
    }
  }
  if (SHIBYTE(v381) < 0)
LABEL_420:
    operator delete(v380[0]);
LABEL_421:
  sub_20ED219D8((uint64_t)v395);
  v351 = v393;
  if (v393)
  {
    v352 = (unint64_t *)&v393->__shared_owners_;
    do
      v353 = __ldaxr(v352);
    while (__stlxr(v353 - 1, v352));
    if (!v353)
    {
      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
      std::__shared_weak_count::__release_weak(v351);
      if ((SHIBYTE(v394[2]) & 0x80000000) == 0)
        goto LABEL_427;
      goto LABEL_426;
    }
  }
  if (SHIBYTE(v394[2]) < 0)
LABEL_426:
    operator delete(v394[0]);
LABEL_427:
  sub_20ED21BBC((uint64_t)v408);
  v354 = v406;
  if (!v406)
    goto LABEL_431;
  v355 = (unint64_t *)&v406->__shared_owners_;
  do
    v356 = __ldaxr(v355);
  while (__stlxr(v356 - 1, v355));
  if (v356)
  {
LABEL_431:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_433;
    goto LABEL_432;
  }
  ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
  std::__shared_weak_count::__release_weak(v354);
  if (SHIBYTE(__dst[2]) < 0)
LABEL_432:
    operator delete(__dst[0]);
LABEL_433:
  v357 = v419;
  if (v419)
  {
    v358 = (unint64_t *)&v419->__shared_owners_;
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
}

void sub_20ED18488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  void *a73;
  char a74;
  char a75;

  sub_20ED21248((uint64_t)&STACK[0x510]);
  sub_20E9AF634((uint64_t)&a23);
  if (a30 < 0)
    operator delete(__p);
  sub_20ED2142C((uint64_t)&STACK[0x5C8]);
  sub_20E9AF634((uint64_t)&a32);
  if (a39 < 0)
    operator delete(a34);
  sub_20ED21610((uint64_t)&a50);
  sub_20E9AF634((uint64_t)&a41);
  if (a48 < 0)
    operator delete(a43);
  sub_20ED217F4((uint64_t)&a75);
  sub_20E9AF634((uint64_t)&a72);
  if (a74 < 0)
    operator delete(a73);
  sub_20ED219D8((uint64_t)&STACK[0x2B8]);
  sub_20E9AF634((uint64_t)&STACK[0x290]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  sub_20ED21BBC((uint64_t)&STACK[0x388]);
  sub_20E9AF634((uint64_t)&STACK[0x360]);
  if ((SLOBYTE(STACK[0x387]) & 0x80000000) == 0)
  {
    sub_20E9AF634((uint64_t)&STACK[0x430]);
    _Unwind_Resume(a1);
  }
  operator delete((void *)STACK[0x370]);
  sub_20E9AF634((uint64_t)&STACK[0x430]);
  _Unwind_Resume(a1);
}

void sub_20ED18850()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x5E7]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x450]);
        sub_20E86665C((uint64_t)&STACK[0x510]);
        sub_20E9AF634(v3 - 144);
        JUMPOUT(0x20ED18798);
      }
LABEL_4:
      operator delete((void *)STACK[0x5D0]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x5E8]);
  if ((SLOBYTE(STACK[0x5E7]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20ED188D8()
{
  void *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_20E9AF634((uint64_t)&STACK[0x510]);
  sub_20E9AF634((uint64_t)&STACK[0x450]);
  sub_20E9AF634(v3 - 144);
  if (v2 < 0)
    operator delete(v0);
  JUMPOUT(0x20ED18798);
}

void sub_20ED18998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  std::__shared_weak_count *v53;
  uint64_t v54;
  uint64_t v55;

  if (v53)
  {
    std::__shared_weak_count::__release_weak(v53);
    sub_20E86665C(v54);
    sub_20E86665C(v55);
    if ((a53 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a47 & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x510]);
        sub_20E86665C((uint64_t)&STACK[0x5C8]);
        sub_20E9AF634((uint64_t)&STACK[0x450]);
        JUMPOUT(0x20ED187B8);
      }
LABEL_4:
      operator delete(__p);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v54);
    sub_20E86665C(v55);
    if ((a53 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a48);
  if ((a47 & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20ED18A1C()
{
  void *v0;
  uint64_t v1;
  int v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_20E9AF634((uint64_t)&STACK[0x5C8]);
  sub_20E9AF634((uint64_t)&STACK[0x510]);
  sub_20E9AF634((uint64_t)&STACK[0x450]);
  if (v2 < 0)
    operator delete(v0);
  JUMPOUT(0x20ED187B8);
}

void sub_20ED18ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  sub_20E86665C((uint64_t)&STACK[0x450]);
  sub_20E86665C((uint64_t)&STACK[0x510]);
  sub_20E9AF634(v46 - 144);
  if (SLOBYTE(STACK[0x5DF]) < 0)
  {
    operator delete((void *)STACK[0x5C8]);
    if ((a46 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a46 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a41);
LABEL_6:
  JUMPOUT(0x20ED187D8);
}

void sub_20ED18BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;

  if (v69)
  {
    std::__shared_weak_count::__release_weak(v69);
    sub_20E86665C(v71);
    sub_20E86665C(v70);
    if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&a41);
        sub_20E86665C((uint64_t)&a69);
        sub_20E9AF634((uint64_t)&STACK[0x5C8]);
        JUMPOUT(0x20ED187F8);
      }
LABEL_4:
      operator delete((void *)STACK[0x2C0]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v71);
    sub_20E86665C(v70);
    if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x2D8]);
  if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20ED18C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  void *v69;
  uint64_t v70;
  int v71;

  (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  sub_20E9AF634((uint64_t)&a69);
  sub_20E9AF634((uint64_t)&a41);
  sub_20E9AF634((uint64_t)&STACK[0x5C8]);
  if (v71 < 0)
    operator delete(v69);
  JUMPOUT(0x20ED187F8);
}

void sub_20ED18D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;

  if (v69)
  {
    std::__shared_weak_count::__release_weak(v69);
    sub_20E86665C(v71);
    sub_20E86665C(v70);
    if ((SLOBYTE(STACK[0x3BF]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&a69);
        sub_20E86665C((uint64_t)&STACK[0x2B8]);
        sub_20E9AF634((uint64_t)&a41);
        JUMPOUT(0x20ED18818);
      }
LABEL_4:
      operator delete((void *)STACK[0x390]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v71);
    sub_20E86665C(v70);
    if ((SLOBYTE(STACK[0x3BF]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x3A8]);
  if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20ED18DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  void *v69;
  uint64_t v70;
  int v71;

  (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  sub_20E9AF634((uint64_t)&STACK[0x2B8]);
  sub_20E9AF634((uint64_t)&a69);
  sub_20E9AF634((uint64_t)&a41);
  if (v71 < 0)
    operator delete(v69);
  JUMPOUT(0x20ED18818);
}

void sub_20ED18E64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20ED18E7C(uint64_t a1)
{
  sub_20ED27ABC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED18EBC(uint64_t a1)
{
  sub_20ED21BBC(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED18EE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DEB80;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED18F18(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DEB80;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED18F60(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B5708;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B5708;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED19034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED19060(uint64_t a1)
{
  sub_20ED219D8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED19084(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DEBE8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED190BC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DEBE8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED19104(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B33C8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B33C8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED191D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED19204(uint64_t a1)
{
  sub_20ED217F4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED19228(uint64_t a1)
{
  sub_20ED21610(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1924C(uint64_t a1)
{
  sub_20ED2142C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED19270(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DECB0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED192A8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DECB0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED192F0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B4748;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B4748;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED193C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED193F0(uint64_t a1)
{
  sub_20ED21248(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED19414(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DED18;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED1944C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DED18;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED19494(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC760;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC760;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED19568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED19594(uint64_t a1)
{
  sub_20ED21064(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED195B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DED80;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED195F0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DED80;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED19638(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9C7CF0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9C7CF0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED1970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED1973C(uint64_t a1)
{
  sub_20ED19F48(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED19760(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED1A0A4(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED1A468(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED1981C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED1A468(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED19844(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED19854(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED19860(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED19870(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED1A0A4(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED1A468(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED19A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED19934);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED19A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED19ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED1A468(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED19B00(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED19B84(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B5708;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED19C34(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED19C48(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED19CD8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED19CEC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED1A590(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED19D30(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED19D44(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED19D78(uint64_t a1)
{
  return sub_20ED19F48(a1 - 16);
}

void sub_20ED19D80(uint64_t a1)
{
  sub_20ED19F48(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED19DA8(uint64_t a1, uint64_t a2)
{
  sub_20ED19B84(a1 - 16, a2);
}

void sub_20ED19DB0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED1A590(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED19DF4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED19E08(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED19E3C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED19E44(uint64_t a1)
{
  return sub_20ED19F48(a1 - 24);
}

void sub_20ED19E4C(uint64_t a1)
{
  sub_20ED19F48(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED19E74(uint64_t a1)
{
  sub_20ED19C48(a1 - 24);
}

uint64_t sub_20ED19E7C(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED19E88()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED19E9C@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v3 = *a1;
  result = operator new(0x50uLL);
  result[1] = 0;
  result[2] = 0;
  *result = &off_24C9C3988;
  v5 = *(_QWORD *)(v3 + 8);
  result[3] = *(_QWORD *)v3;
  result[4] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(v3 + 24);
  result[5] = *(_QWORD *)(v3 + 16);
  result[6] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(v3 + 40);
  result[7] = *(_QWORD *)(v3 + 32);
  result[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *((_BYTE *)result + 72) = *(_BYTE *)(v3 + 48);
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

uint64_t sub_20ED19F48(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9DEDB8;
  *(_QWORD *)(a1 + 16) = &unk_24C9DEE30;
  *(_QWORD *)(a1 + 24) = &unk_24C9DEE70;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED1A0A4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20ED1A360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED1A43C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED1A45CLL);
}

uint64_t *sub_20ED1A468(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED1A554(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED1A4B0);
}

char *sub_20ED1A590(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED1A66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED1A690(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED1A6B4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED1A6CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine12SLAMMetadataEEENS0_IKNS7_11VIOMetadataEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine12SLAMMetadataEEENS0_IKNS7_11VIOMetadataEEEvSD_Lb0EEEE27__shared_ptr_def"
                                "ault_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS0_IKNS7_11VIOMetadataEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS0_IKNS7_11VIOMetadataEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED1A73C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED1A768(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED1A7A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DF008;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED1A80C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED1A89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED1A8B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED1A940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED1A954(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED1AA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED1AA2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED1AAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED1AB04(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED1ABA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED1ABC0(uint64_t a1)
{
  sub_20ED1B6F4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1ABE4(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED1B850(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED1BB1C(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED1ACA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED1BB1C(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED1ACC8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED1B850(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED1BB1C(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED1AE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED1AD8CLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED1AED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED1AF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED1BB1C(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED1AF58(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED1AFDC(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B33C8;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1B08C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1B0A0(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED1B130(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1B144(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED1BC44(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1B188(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1B19C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED1B1D0(uint64_t a1)
{
  return sub_20ED1B6F4(a1 - 16);
}

void sub_20ED1B1D8(uint64_t a1)
{
  sub_20ED1B6F4(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1B200(uint64_t a1, uint64_t a2)
{
  sub_20ED1AFDC(a1 - 16, a2);
}

void sub_20ED1B208(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED1BC44(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1B24C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1B260(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED1B294(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED1B29C(uint64_t a1)
{
  return sub_20ED1B6F4(a1 - 24);
}

void sub_20ED1B2A4(uint64_t a1)
{
  sub_20ED1B6F4(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1B2CC(uint64_t a1)
{
  sub_20ED1B0A0(a1 - 24);
}

uint64_t sub_20ED1B2D4(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED1B2E0()
{
  JUMPOUT(0x212BC6398);
}

void sub_20ED1B2F4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if (v3 == v4)
  {
    v8 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = &off_24C9DF270;
    v5[4] = 0;
    v5[5] = 0;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v4 - v3) >> 3)) >= 0x492492492492493)
      sub_20E867F44();
    v6 = (char *)operator new(v4 - v3);
    v7 = 0;
    v5[3] = v6;
    v5[4] = v6;
    v5[5] = &v6[8 * ((v4 - v3) >> 3)];
    do
    {
      sub_20ED1B5EC((uint64_t)&v6[v7], (char *)(v3 + v7));
      v7 += 56;
    }
    while (v3 + v7 != v4);
    v5[4] = &v6[v7];
    *(_QWORD *)a2 = v5 + 3;
    *(_QWORD *)(a2 + 8) = v5;
    v8 = 1;
  }
  *(_BYTE *)(a2 + 16) = v8;
}

void sub_20ED1B408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_20ED1B548(&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_20ED1B46C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DF270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED1B47C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DF270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1B4AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 48);
        if (v6)
        {
          *(_QWORD *)(v3 - 40) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v1);
      v7 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v7);
    }
  }
}

void ***sub_20ED1B548(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v6)
          {
            *((_QWORD *)v4 - 2) = v6;
            operator delete(v6);
          }
          v7 = (void *)*((_QWORD *)v4 - 6);
          if (v7)
          {
            *((_QWORD *)v4 - 5) = v7;
            operator delete(v7);
          }
          v4 -= 56;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20ED1B5EC(uint64_t a1, char *a2)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  char *v13;
  char *v14;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[v7];
    *(_QWORD *)(a1 + 24) = &v8[v7];
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  v10 = (_BYTE *)*((_QWORD *)a2 + 5);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if ((v12 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[v12];
    *(_QWORD *)(a1 + 48) = &v13[v12];
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  return a1;
}

void sub_20ED1B6C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED1B6F4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9DF080;
  *(_QWORD *)(a1 + 16) = &unk_24C9DF0F8;
  *(_QWORD *)(a1 + 24) = &unk_24C9DF138;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED1B850(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::exception_ptr v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  char v20;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v18, v6, a2);
  if (v20)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, uint64_t *))(i[2] + 16))(i + 2, &v18);
  }
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v17), v10))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v9 + 144) = 0;
    *(_BYTE *)(v9 + 160) = 0;
    if (v20)
    {
      v11 = v19;
      *(_QWORD *)(v9 + 144) = v18;
      *(_QWORD *)(v9 + 152) = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      *(_BYTE *)(v9 + 160) = 1;
    }
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  if (v20)
  {
    v14 = v19;
    if (v19)
    {
      v15 = (unint64_t *)&v19->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_20ED1BA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  std::mutex *v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  std::mutex::unlock(v17);
  sub_20E869AA8((uint64_t)&a17);
  if (a2 == 1)
  {
    v20 = (uint64_t *)__cxa_begin_catch(a1);
    v21 = *v20;
    a10 = *(_QWORD *)(*(_QWORD *)(*v20 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v21 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v22 = (uint64_t *)&a11;
    else
      v22 = a11;
    if ((a16 & 0x80u) == 0)
      v23 = a16;
    else
      v23 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v22, v23, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED1BAF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED1BB10);
}

uint64_t *sub_20ED1BB1C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED1BC08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED1BB64);
}

char *sub_20ED1BC44(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED1BD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED1BD44(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED1BD68(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED1BD80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine12SLAMMetadataEEENS0_INS_6vectorINS6_13mapping_types34SerializedCollaborativeMappingDataENS_9a"
                     "llocatorISD_EEEEEEvNS_8optionalISH_EELb0EEEE27__shared_ptr_default_deleteISK_SK_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine12SLAMMetadataEEENS0_INS_6vectorINS6_13mapping_types34SerializedCollabor"
                                "ativeMappingDataENS_9allocatorISD_EEEEEEvNS_8optionalISH_EELb0EEEE27__shared_ptr_default"
                                "_deleteISK_SK_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS0_INS_6vectorINS6_13mapping_types34SerializedCollaborativeMappingDataENS_9allocatorISD_EEEEEEvNS_8optionalISH_EELb0EEEE27__shared_ptr_default_deleteISK_SK_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS0_INS_6vectorINS6_13mapping_types34SerializedCollaborativeMappingDataENS_9allocatorISD_EEEEEEvNS_8optionalISH_EELb0EEEE27__shared_ptr_default_deleteISK_SK_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20ED1BDF4(uint64_t a1)
{
  sub_20ED1C578(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1BE18(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED1C6D4(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED1CA98(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED1BED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED1CA98(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED1BEFC(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED1BF0C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED1BF18(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED1BF28(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED1C6D4(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED1CA98(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED1C0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED1BFECLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED1C134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED1C194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED1CA98(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED1C1B8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED1C23C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B46D8;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1C2EC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1C300(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED1C390(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1C3A4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED1CBC0(a1 + 96, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1C3E8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1C3FC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED1C430(uint64_t a1)
{
  return sub_20ED1C578(a1 - 16);
}

void sub_20ED1C438(uint64_t a1)
{
  sub_20ED1C578(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1C460(uint64_t a1, uint64_t a2)
{
  sub_20ED1C23C(a1 - 16, a2);
}

void sub_20ED1C468(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED1CBC0(a1 + 80, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1C4AC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1C4C0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED1C4F4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED1C4FC(uint64_t a1)
{
  return sub_20ED1C578(a1 - 24);
}

void sub_20ED1C504(uint64_t a1)
{
  sub_20ED1C578(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1C52C(uint64_t a1)
{
  sub_20ED1C300(a1 - 24);
}

uint64_t sub_20ED1C534(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED1C540()
{
  JUMPOUT(0x212BC6398);
}

void sub_20ED1C554(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t sub_20ED1C578(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9DF310;
  *(_QWORD *)(a1 + 16) = &unk_24C9DF388;
  *(_QWORD *)(a1 + 24) = &unk_24C9DF3C8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED1C6D4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20ED1C990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED1CA6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED1CA8CLL);
}

uint64_t *sub_20ED1CA98(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED1CB84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED1CAE0);
}

char *sub_20ED1CBC0@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a1 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    v12 = &v9;
    if (v7 != a1)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v12 = &v9;
  if (v7 == a1)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a1);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a2 = v8;
  a2[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED1CC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED1CCC0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED1CCE4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED1CCFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio10mapping_io"
                     "16SubmapSaveBundleEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "0mapping_io16SubmapSaveBundleEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio10mapping_io16SubmapSaveBundleEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio10mapping_io16SubmapSaveBundleEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED1CD6C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9DEC20;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B46D8;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9DF550;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9D12B0;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9D12B0;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20ED1CF1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED1CF8C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED1CFB8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED1CFF4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9DF550;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED1D05C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED1D0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED1D100(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED1D190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED1D1A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED1D268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED1D27C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED1D340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED1D354(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED1D3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED1D410(uint64_t a1)
{
  sub_20ED1DB6C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1D434(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED1DCC8(a1 + 11, a2, &v5);
    if (v6)
      sub_20EBB6D1C(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED1D4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EBB6D1C(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED1D518(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED1DCC8(a1 + 11, a2, &v14);
  if (v15)
    sub_20EBB6D1C(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED1D6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED1D5DCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED1D724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED1D784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EBB6D1C(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED1D7A8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED1D82C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B4780;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1D8DC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1D8F0(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED1D980(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1D994(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED1E08C(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1D9D8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1D9EC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED1DA20(uint64_t a1)
{
  return sub_20ED1DB6C(a1 - 16);
}

void sub_20ED1DA28(uint64_t a1)
{
  sub_20ED1DB6C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1DA50(uint64_t a1, uint64_t a2)
{
  sub_20ED1D82C(a1 - 16, a2);
}

void sub_20ED1DA58(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED1E08C(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1DA9C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1DAB0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED1DAE4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED1DAEC(uint64_t a1)
{
  return sub_20ED1DB6C(a1 - 24);
}

void sub_20ED1DAF4(uint64_t a1)
{
  sub_20ED1DB6C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1DB1C(uint64_t a1)
{
  sub_20ED1D8F0(a1 - 24);
}

uint64_t sub_20ED1DB24(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED1DB30()
{
  JUMPOUT(0x212BC6398);
}

void sub_20ED1DB44(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t sub_20ED1DB6C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9DF5B8;
  *(_QWORD *)(a1 + 16) = &unk_24C9DF630;
  *(_QWORD *)(a1 + 24) = &unk_24C9DF670;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED1DCC8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20ED1DF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED1E060(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED1E080);
}

char *sub_20ED1E08C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED1E168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED1E18C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED1E1B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED1E1C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine12SLAMMetadataEEENS0_INS6_17feature_detection17VIOMLFeatureEventEEEvSD_Lb0EEEE27__shared_ptr_d"
                     "efault_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine12SLAMMetadataEEENS0_INS6_17feature_detection17VIOMLFeatureEventEEEvSD_L"
                                "b0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS0_INS6_17feature_detection17VIOMLFeatureEventEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS0_INS6_17feature_detection17VIOMLFeatureEventEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20ED1E23C(uint64_t a1)
{
  sub_20ED1E9B4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1E260(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED1EB10(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED1EDDC(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED1E31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED1EDDC(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED1E344(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED1EB10(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED1EDDC(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED1E4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED1E408);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED1E550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED1E5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED1EDDC(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED1E5D4(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED1E658(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B4748;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1E708(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1E71C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED1E7AC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1E7C0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED1EF04(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1E804(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1E818(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED1E84C(uint64_t a1)
{
  return sub_20ED1E9B4(a1 - 16);
}

void sub_20ED1E854(uint64_t a1)
{
  sub_20ED1E9B4(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1E87C(uint64_t a1, uint64_t a2)
{
  sub_20ED1E658(a1 - 16, a2);
}

void sub_20ED1E884(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED1EF04(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1E8C8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1E8DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED1E910(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED1E918(uint64_t a1)
{
  return sub_20ED1E9B4(a1 - 24);
}

void sub_20ED1E920(uint64_t a1)
{
  sub_20ED1E9B4(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1E948(uint64_t a1)
{
  sub_20ED1E71C(a1 - 24);
}

uint64_t sub_20ED1E950(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED1E95C()
{
  JUMPOUT(0x212BC6398);
}

void sub_20ED1E970(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 120);
    *(_QWORD *)a2 = v2;
    *(_QWORD *)(a2 + 8) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

uint64_t sub_20ED1E9B4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9DF7E8;
  *(_QWORD *)(a1 + 16) = &unk_24C9DF860;
  *(_QWORD *)(a1 + 24) = &unk_24C9DF8A0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED1EB10(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::exception_ptr v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  char v20;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v18, v6, a2);
  if (v20)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, uint64_t *))(i[2] + 16))(i + 2, &v18);
  }
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v17), v10))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v9 + 144) = 0;
    *(_BYTE *)(v9 + 160) = 0;
    if (v20)
    {
      v11 = v19;
      *(_QWORD *)(v9 + 144) = v18;
      *(_QWORD *)(v9 + 152) = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      *(_BYTE *)(v9 + 160) = 1;
    }
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  if (v20)
  {
    v14 = v19;
    if (v19)
    {
      v15 = (unint64_t *)&v19->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_20ED1ECD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  std::mutex *v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  std::mutex::unlock(v17);
  sub_20E869AA8((uint64_t)&a17);
  if (a2 == 1)
  {
    v20 = (uint64_t *)__cxa_begin_catch(a1);
    v21 = *v20;
    a10 = *(_QWORD *)(*(_QWORD *)(*v20 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v21 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v22 = (uint64_t *)&a11;
    else
      v22 = a11;
    if ((a16 & 0x80u) == 0)
      v23 = a16;
    else
      v23 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v22, v23, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED1EDB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED1EDD0);
}

uint64_t *sub_20ED1EDDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED1EEC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED1EE24);
}

char *sub_20ED1EF04(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED1EFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED1F004(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED1F028(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED1F040(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine12SLAMMetadataEEENS0_IKNS6_17feature_detection18VIOFrameDebugEventEEEvNS_8optionalISE_EELb0EEE"
                     "E27__shared_ptr_default_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine12SLAMMetadataEEENS0_IKNS6_17feature_detection18VIOFrameDebugEventEEEvNS"
                                "_8optionalISE_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS0_IKNS6_17feature_detection18VIOFrameDebugEventEEEvNS_8optionalISE_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS0_IKNS6_17feature_detection18VIOFrameDebugEventEEEvNS_8optionalISE_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20ED1F0B4(uint64_t a1)
{
  sub_20ED1F8BC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1F0D8(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED1FA18(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED1FE3C(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED1F194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED1FE3C(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED1F1BC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED1FA18(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED1FE3C(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED1F354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED1F280);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED1F3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED1F428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED1FE3C(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED1F44C(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED1F4D0(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC760;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1F580(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1F594(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED1F624(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1F638(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED1FF64(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1F67C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1F690(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED1F6C4(uint64_t a1)
{
  return sub_20ED1F8BC(a1 - 16);
}

void sub_20ED1F6CC(uint64_t a1)
{
  sub_20ED1F8BC(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1F6F4(uint64_t a1, uint64_t a2)
{
  sub_20ED1F4D0(a1 - 16, a2);
}

void sub_20ED1F6FC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED1FF64(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED1F740(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED1F754(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED1F788(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED1F790(uint64_t a1)
{
  return sub_20ED1F8BC(a1 - 24);
}

void sub_20ED1F798(uint64_t a1)
{
  sub_20ED1F8BC(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED1F7C0(uint64_t a1)
{
  sub_20ED1F594(a1 - 24);
}

uint64_t sub_20ED1F7C8(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED1F7D4()
{
  JUMPOUT(0x212BC6398);
}

void sub_20ED1F7E8(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = **a1;
  if (v2)
  {
    *(_QWORD *)a2 = *(_QWORD *)(v2 + 3864);
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(v2 + 3872);
    v3 = *(_QWORD *)(v2 + 3888);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 3880);
    *(_QWORD *)(a2 + 24) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    v6 = *(_QWORD *)(v2 + 3904);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v2 + 3896);
    *(_QWORD *)(a2 + 40) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(_OWORD *)(v2 + 4056);
    v10 = *(_OWORD *)(v2 + 4088);
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(v2 + 4072);
    *(_OWORD *)(a2 + 224) = v10;
    *(_OWORD *)(a2 + 235) = *(_OWORD *)(v2 + 4099);
    v11 = *(_OWORD *)(v2 + 3992);
    v12 = *(_OWORD *)(v2 + 4024);
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(v2 + 4008);
    *(_OWORD *)(a2 + 160) = v12;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)(v2 + 4040);
    *(_OWORD *)(a2 + 192) = v9;
    v13 = *(_OWORD *)(v2 + 3928);
    v14 = *(_OWORD *)(v2 + 3960);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(v2 + 3944);
    *(_OWORD *)(a2 + 96) = v14;
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(v2 + 3976);
    *(_OWORD *)(a2 + 128) = v11;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(v2 + 3912);
    *(_OWORD *)(a2 + 64) = v13;
    *(_BYTE *)(a2 + 256) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 256) = 0;
  }
}

uint64_t sub_20ED1F8BC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9DFA28;
  *(_QWORD *)(a1 + 16) = &unk_24C9DFAA0;
  *(_QWORD *)(a1 + 24) = &unk_24C9DFAE0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED1FA18(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::exception_ptr v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  char v50;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v32, v6, a2);
  if (v50)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, uint64_t *))(i[2] + 16))(i + 2, &v32);
  }
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v31.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v31), v10))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v9 + 144) = 0;
    *(_BYTE *)(v9 + 400) = 0;
    if (v50)
    {
      *(_QWORD *)(v9 + 144) = v32;
      *(_BYTE *)(v9 + 152) = v33;
      v11 = v35;
      *(_QWORD *)(v9 + 160) = v34;
      *(_QWORD *)(v9 + 168) = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = v37;
      *(_QWORD *)(v9 + 176) = v36;
      *(_QWORD *)(v9 + 184) = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = v47;
      v18 = v49[0];
      *(_OWORD *)(v9 + 352) = v48;
      *(_OWORD *)(v9 + 368) = v18;
      v19 = v43;
      v20 = v45;
      v21 = v46;
      *(_OWORD *)(v9 + 288) = v44;
      *(_OWORD *)(v9 + 304) = v20;
      *(_OWORD *)(v9 + 320) = v21;
      *(_OWORD *)(v9 + 336) = v17;
      v22 = v41;
      v23 = v42;
      *(_OWORD *)(v9 + 224) = v40;
      *(_OWORD *)(v9 + 240) = v22;
      *(_OWORD *)(v9 + 256) = v23;
      *(_OWORD *)(v9 + 272) = v19;
      v24 = v39;
      *(_OWORD *)(v9 + 192) = v38;
      *(_OWORD *)(v9 + 208) = v24;
      *(_OWORD *)(v9 + 379) = *(_OWORD *)((char *)v49 + 11);
      *(_BYTE *)(v9 + 400) = 1;
    }
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  if (v50)
  {
    v25 = v37;
    if (v37)
    {
      v26 = (unint64_t *)&v37->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v35;
    if (v35)
    {
      v29 = (unint64_t *)&v35->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
}

void sub_20ED1FC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  std::mutex *v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  std::mutex::unlock(v17);
  sub_20ED1FD94((uint64_t)&a17);
  if (a2 == 1)
  {
    v20 = (uint64_t *)__cxa_begin_catch(a1);
    v21 = *v20;
    a10 = *(_QWORD *)(*(_QWORD *)(*v20 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v21 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v22 = (uint64_t *)&a11;
    else
      v22 = a11;
    if ((a16 & 0x80u) == 0)
      v23 = a16;
    else
      v23 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v22, v23, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED1FD68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED1FD88);
}

uint64_t sub_20ED1FD94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 256))
    return a1;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t *sub_20ED1FE3C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED1FF28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED1FE84);
}

char *sub_20ED1FF64(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED20040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED20064(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED20088(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED200A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine12SLAMMetadataEEENS6_8cv_types19FeatureFilterInputsEvNS_8optionalISC_EELb0EEEE27__shared_ptr_d"
                     "efault_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine12SLAMMetadataEEENS6_8cv_types19FeatureFilterInputsEvNS_8optionalISC_EEL"
                                "b0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS6_8cv_types19FeatureFilterInputsEvNS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS6_8cv_types19FeatureFilterInputsEvNS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20ED20114(uint64_t a1)
{
  sub_20ED20870(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED20138(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED209CC(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED20D90(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED201F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED20D90(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED2021C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED209CC(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED20D90(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED203B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED202E0);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED20428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED20488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED20D90(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED204AC(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED20530(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9C7CF0;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED205E0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED205F4(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED20684(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED20698(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED20EB8(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED206DC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED206F0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED20724(uint64_t a1)
{
  return sub_20ED20870(a1 - 16);
}

void sub_20ED2072C(uint64_t a1)
{
  sub_20ED20870(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED20754(uint64_t a1, uint64_t a2)
{
  sub_20ED20530(a1 - 16, a2);
}

void sub_20ED2075C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED20EB8(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED207A0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED207B4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED207E8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED207F0(uint64_t a1)
{
  return sub_20ED20870(a1 - 24);
}

void sub_20ED207F8(uint64_t a1)
{
  sub_20ED20870(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED20820(uint64_t a1)
{
  sub_20ED205F4(a1 - 24);
}

uint64_t sub_20ED20828(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED20834()
{
  JUMPOUT(0x212BC6398);
}

void sub_20ED20848(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t sub_20ED20870(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9DFC68;
  *(_QWORD *)(a1 + 16) = &unk_24C9DFCE0;
  *(_QWORD *)(a1 + 24) = &unk_24C9DFD20;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED209CC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20ED20C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED20D64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED20D84);
}

uint64_t *sub_20ED20D90(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED20E7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED20DD8);
}

char *sub_20ED20EB8(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED20F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED20FB8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED20FDC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED20FF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine12SLAMMetadataEEENS0_INS6_17feature_detection20VIODepthFeatureEventEEEvSD_Lb0EEEE27__shared_pt"
                     "r_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine12SLAMMetadataEEENS0_INS6_17feature_detection20VIODepthFeatureEventEEEvS"
                                "D_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS0_INS6_17feature_detection20VIODepthFeatureEventEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine12SLAMMetadataEEENS0_INS6_17feature_detection20VIODepthFeatureEventEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED21064(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9DED50;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9DED80;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1110;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED21248(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9DECE8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9DED18;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1110;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED2142C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9DEC80;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9DECB0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1110;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED21610(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9DEC50;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9C62E8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1110;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED217F4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9DEC20;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D12B0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B46D8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED219D8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9DEBB8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9DEBE8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1110;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED21BBC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9DEB50;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9DEB80;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1110;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED21DA0(uint64_t a1)
{
  sub_20ED27984(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED21DC8(uint64_t a1)
{
  sub_20ED22EA0(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED21DEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9DFF08;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED21E24(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9DFF08;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED21E6C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC500;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC500;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED21F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED21F70(uint64_t a1)
{
  sub_20ED226DC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED21F94(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED22838(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED22BCC(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED22050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED22BCC(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED22078(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED22838(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED22BCC(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED22210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED2213CLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED22284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED222E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED22BCC(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED22308(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED2238C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC500;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED2243C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED22450(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED224E0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED224F4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED22CF4(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED22538(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED2254C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED22580(uint64_t a1)
{
  return sub_20ED226DC(a1 - 16);
}

void sub_20ED22588(uint64_t a1)
{
  sub_20ED226DC(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED225B0(uint64_t a1, uint64_t a2)
{
  sub_20ED2238C(a1 - 16, a2);
}

void sub_20ED225B8(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED22CF4(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED225FC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED22610(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED22644(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED2264C(uint64_t a1)
{
  return sub_20ED226DC(a1 - 24);
}

void sub_20ED22654(uint64_t a1)
{
  sub_20ED226DC(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED2267C(uint64_t a1)
{
  sub_20ED22450(a1 - 24);
}

uint64_t sub_20ED22684(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED22690()
{
  JUMPOUT(0x212BC6398);
}

std::runtime_error *sub_20ED226A4@<X0>(uint64_t a1@<X1>, std::runtime_error *a2@<X8>)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a2, (const std::runtime_error *)a1);
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9D0E90;
  LODWORD(result[1].__vftable) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t sub_20ED226DC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9DFF40;
  *(_QWORD *)(a1 + 16) = &unk_24C9DFFB8;
  *(_QWORD *)(a1 + 24) = &unk_24C9DFFF8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED22838(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  std::runtime_error v17;
  int v18;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v17, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, std::runtime_error *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v14 + 144), &v17);
    *(_QWORD *)(v14 + 144) = &off_24C9D0E90;
    *(_DWORD *)(v14 + 160) = v18;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  std::runtime_error::~runtime_error(&v17);
}

void sub_20ED22AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, std::runtime_error a17)
{
  std::mutex *v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  std::mutex::unlock(v17);
  std::runtime_error::~runtime_error(&a17);
  if (a2 == 1)
  {
    v20 = (uint64_t *)__cxa_begin_catch(a1);
    v21 = *v20;
    a10 = *(_QWORD *)(*(_QWORD *)(*v20 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v21 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v22 = (uint64_t *)&a11;
    else
      v22 = a11;
    if ((a16 & 0x80u) == 0)
      v23 = a16;
    else
      v23 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v22, v23, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED22BA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED22BC0);
}

uint64_t *sub_20ED22BCC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED22CB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED22C14);
}

char *sub_20ED22CF4(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED22DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED22DF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED22E18(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED22E30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_engine_node"
                     "_group19SlamEngineNodeErrorES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_"
                                "engine_node_group19SlamEngineNodeErrorES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_engine_node_group19SlamEngineNodeErrorES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_engine_node_group19SlamEngineNodeErrorES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED22EA0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9DFED8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9DFF08;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC500;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED23084(uint64_t a1)
{
  sub_20ED2784C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED230AC(uint64_t a1)
{
  sub_20ED23FA0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED230D4(uint64_t a1)
{
  sub_20ED23810(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED230F8(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED2396C(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED23CCC(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED231B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED23CCC(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED231DC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED2396C(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED23CCC(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED23374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED232A0);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED233E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED23448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED23CCC(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED2346C(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED234F0(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC538;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED235A0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED235B4(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED23644(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED23658(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED23DF4(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED2369C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED236B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED236E4(uint64_t a1)
{
  return sub_20ED23810(a1 - 16);
}

void sub_20ED236EC(uint64_t a1)
{
  sub_20ED23810(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED23714(uint64_t a1, uint64_t a2)
{
  sub_20ED234F0(a1 - 16, a2);
}

void sub_20ED2371C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED23DF4(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED23760(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED23774(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED237A8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED237B0(uint64_t a1)
{
  return sub_20ED23810(a1 - 24);
}

void sub_20ED237B8(uint64_t a1)
{
  sub_20ED23810(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED237E0(uint64_t a1)
{
  sub_20ED235B4(a1 - 24);
}

uint64_t sub_20ED237E8(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED237F4()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED23808(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_20ED23810(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E01E0;
  *(_QWORD *)(a1 + 16) = &unk_24C9E0258;
  *(_QWORD *)(a1 + 24) = &unk_24C9E0298;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED2396C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_20ED23BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED23CA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED23CC0);
}

uint64_t *sub_20ED23CCC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED23DB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED23D14);
}

char *sub_20ED23DF4(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED23ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED23EF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED23F18(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED23F30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io14MapS"
                     "aveRequestES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mappi"
                                "ng_io14MapSaveRequestES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io14MapSaveRequestES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io14MapSaveRequestES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED23FA0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E01B0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CC820;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC538;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED24184(uint64_t a1)
{
  sub_20ED276FC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED241B0(uint64_t a1)
{
  sub_20ED26648(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED241D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E0470;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED2420C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E0470;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED24254(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC5A8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC5A8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED24328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED24354(uint64_t a1)
{
  sub_20ED26464(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED2437C(uint64_t a1)
{
  sub_20ED24B48(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED243A0(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED24CA4(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED25064(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED2445C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED25064(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED24484(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED24494(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED244A0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED244B0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED24CA4(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED25064(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED24648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED24574);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED246BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED2471C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED25064(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED24740(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED247C4(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC5A8;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED24874(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED24888(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED24918(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED2492C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED2518C(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED24970(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED24984(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED249B8(uint64_t a1)
{
  return sub_20ED24B48(a1 - 16);
}

void sub_20ED249C0(uint64_t a1)
{
  sub_20ED24B48(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED249E8(uint64_t a1, uint64_t a2)
{
  sub_20ED247C4(a1 - 16, a2);
}

void sub_20ED249F0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED2518C(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED24A34(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED24A48(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED24A7C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED24A84(uint64_t a1)
{
  return sub_20ED24B48(a1 - 24);
}

void sub_20ED24A8C(uint64_t a1)
{
  sub_20ED24B48(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED24AB4(uint64_t a1)
{
  sub_20ED24888(a1 - 24);
}

uint64_t sub_20ED24ABC(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED24AC8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20ED24ADC@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  __n128 result;
  __int128 v6;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = (_BYTE *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(v4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    result = *(__n128 *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 48);
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    result = *(__n128 *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 48);
  }
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t sub_20ED24B48(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E04D8;
  *(_QWORD *)(a1 + 16) = &unk_24C9E0550;
  *(_QWORD *)(a1 + 24) = &unk_24C9E0590;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED24CA4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  __int128 v17;
  std::exception_ptr v18;
  uint64_t v19;
  __int128 __p;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v19, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v19);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v18.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v18), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = v19;
    v16 = (_BYTE *)(v14 + 152);
    if (SHIBYTE(v21) < 0)
    {
      sub_20E860C04(v16, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      *(_OWORD *)v16 = __p;
      *(_QWORD *)(v14 + 168) = v21;
    }
    v17 = v23;
    *(_OWORD *)(v14 + 176) = v22;
    *(_OWORD *)(v14 + 192) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
}

void sub_20ED24F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  if (a24 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    v26 = (uint64_t *)__cxa_begin_catch(exception_object);
    v27 = *v26;
    a11 = *(_QWORD *)(*(_QWORD *)(*v26 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v27 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v28 = (uint64_t *)&a12;
    else
      v28 = a12;
    if ((a17 & 0x80u) == 0)
      v29 = a17;
    else
      v29 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v28, v29, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED25038(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED25058);
}

uint64_t *sub_20ED25064(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED25150(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED250ACLL);
}

char *sub_20ED2518C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED25268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED2528C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED252B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED252C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_engine_node"
                     "_group22DataVerificationResultENS6_17data_verification22DataVerificationStatusEvSA_Lb0EEEE27__share"
                     "d_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_"
                                "engine_node_group22DataVerificationResultENS6_17data_verification22DataVerificationStatu"
                                "sEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_engine_node_group22DataVerificationResultENS6_17data_verification22DataVerificationStatusEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_engine_node_group22DataVerificationResultENS6_17data_verification22DataVerificationStatusEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED25338(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED25364(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED253A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E0728;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED25408(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED25498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED254AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED2553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED25550(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED25614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED25628(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED256EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED25700(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED257A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED257BC(uint64_t a1)
{
  sub_20ED25F2C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED257E0(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED26088(a1 + 11, a2, (uint64_t)&v5);
    if (v6)
      sub_20ECA3DA4(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED2589C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ECA3DA4(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED258C4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED26088(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    sub_20ECA3DA4(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED25A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED25988);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED25AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED25B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ECA3DA4(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED25B54(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED25BD8(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B46D8;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED25C88(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED25C9C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED25D2C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED25D40(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED262B8(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED25D84(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED25D98(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED25DCC(uint64_t a1)
{
  return sub_20ED25F2C(a1 - 16);
}

void sub_20ED25DD4(uint64_t a1)
{
  sub_20ED25F2C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED25DFC(uint64_t a1, uint64_t a2)
{
  sub_20ED25BD8(a1 - 16, a2);
}

void sub_20ED25E04(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED262B8(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED25E48(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED25E5C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED25E90(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED25E98(uint64_t a1)
{
  return sub_20ED25F2C(a1 - 24);
}

void sub_20ED25EA0(uint64_t a1)
{
  sub_20ED25F2C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED25EC8(uint64_t a1)
{
  sub_20ED25C9C(a1 - 24);
}

uint64_t sub_20ED25ED0(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED25EDC()
{
  JUMPOUT(0x212BC6398);
}

void sub_20ED25EF0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 8) = v2;
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    *(_BYTE *)(a2 + 16) = 1;
  }
}

uint64_t sub_20ED25F2C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E07A0;
  *(_QWORD *)(a1 + 16) = &unk_24C9E0818;
  *(_QWORD *)(a1 + 24) = &unk_24C9E0858;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED26088(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v12, v6, a2);
  if (v14)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, uint64_t *))(i[2] + 16))(i + 2, &v12);
  }
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_20E96CE78(3u);
    sub_20ECA3CD4(*(_QWORD *)a3, (uint64_t)&v12);
  }
  if (v14)
  {
    v9 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_20ED261C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  sub_20E869AA8((uint64_t)&a17);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = &a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED2628C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED262ACLL);
}

char *sub_20ED262B8(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED26394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED263B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED263DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED263F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_engine_node"
                     "_group22DataVerificationResultENS0_IKNS6_10mapping_io16SubmapSaveBundleEEEvNS_8optionalISC_EELb0EEE"
                     "E27__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_"
                                "engine_node_group22DataVerificationResultENS0_IKNS6_10mapping_io16SubmapSaveBundleEEEvNS"
                                "_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_engine_node_group22DataVerificationResultENS0_IKNS6_10mapping_io16SubmapSaveBundleEEEvNS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio22slam_engine_node_group22DataVerificationResultENS0_IKNS6_10mapping_io16SubmapSaveBundleEEEvNS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED26464(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E04A8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9D12B0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1448;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED26648(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E0440;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E0470;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D1448;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED2682C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20ED2687C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED268DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9E09D0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20ED2697C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20ED269A0()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20ED269DC()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20ED26A18()
{
  return 1;
}

uint64_t sub_20ED26A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_20ED26AA0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED26AB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0A38;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED26AE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0A38;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED26B04(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 256;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED26B2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED26B98()
{
  return &unk_24C9E0AA8;
}

void sub_20ED26BA8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED26BBC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0AC8;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED26BF0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0AC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED26C0C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 256;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED26C34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED26CA0()
{
  return &unk_24C9E0B28;
}

void sub_20ED26CB0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED26CC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0B48;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED26CF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0B48;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED26D14(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 256;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED26D3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE1_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE1_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE1_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE1_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED26DA8()
{
  return &unk_24C9E0BA8;
}

void sub_20ED26DB8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED26DCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0BC8;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED26E00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0BC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED26E1C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 592;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED26E44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE2_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE2_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE2_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE2_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED26EB0()
{
  return &unk_24C9E0C28;
}

void sub_20ED26EC0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED26ED4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0C48;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED26F08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0C48;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED26F24(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 592;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED26F4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE3_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE3_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE3_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE3_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED26FB8()
{
  return &unk_24C9E0CA8;
}

void sub_20ED26FC8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED26FDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0CC8;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED27010(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0CC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED2702C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 592;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED27054(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE4_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE4_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE4_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE4_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED270C0()
{
  return &unk_24C9E0D28;
}

void sub_20ED270D0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED270E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0D48;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED27118(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0D48;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED27134(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 928;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED2715C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE5_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE5_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE5_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE5_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED271C8()
{
  return &unk_24C9E0DA8;
}

void sub_20ED271D8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED271EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0DC8;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED27220(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0DC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED2723C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 928;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED27264(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE6_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE6_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE6_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE6_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED272D0()
{
  return &unk_24C9E0E28;
}

void sub_20ED272E0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED272F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0E48;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED27328(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0E48;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED27344(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 928;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED2736C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE7_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE7_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE7_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE7_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED273D8()
{
  return &unk_24C9E0EA8;
}

void sub_20ED273E8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED273FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0EC8;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED27430(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0EC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED2744C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 1096;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED27474(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE8_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE8_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE8_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE8_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED274E0()
{
  return &unk_24C9E0F28;
}

void sub_20ED274F0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED27504(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0F48;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED27538(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0F48;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED27554(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 1096;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED2757C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE9_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE9_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE9_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE9_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED275E8()
{
  return &unk_24C9E0FA8;
}

void sub_20ED275F8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED2760C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9E0FC8;
  result[1] = v3;
  return result;
}

uint64_t sub_20ED27640(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9E0FC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20ED2765C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176) + 1096;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t sub_20ED27684(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS"
                     "0_15odometry_engine12SLAMMetadataEEEE10_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110sha"
                                "red_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE10_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE10_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group19SlamEngineNodeGroup4Impl7ConnectEvEUlRKNSt3__110shared_ptrIKNS0_15odometry_engine12SLAMMetadataEEEE10_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED276F0()
{
  return &unk_24C9E1028;
}

uint64_t sub_20ED276FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E0410;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20ED26464(v2 + 168);
    v3 = sub_20ED26648(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4059065CFELL);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20ED26464(v7 + 168);
    v8 = sub_20ED26648(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4059065CFELL);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED2784C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E0180;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20ED23FA0(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20ED23FA0(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED27984(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9DFEA8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20ED22EA0(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20ED22EA0(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED27ABC(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24C9DEB20;
  v2 = (uint64_t *)(a1 + 72);
  sub_20ED27BC8((uint64_t *)(a1 + 72));
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    sub_20ED27BC8(v2);
    v6 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    sub_20ED27BC8(v2);
    v6 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v6)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_20ED27BC8(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_20ED21064(v1 + 1008);
    sub_20ED21248(v1 + 840);
    sub_20ED2142C(v1 + 672);
    sub_20ED21610(v1 + 504);
    sub_20ED217F4(v1 + 336);
    sub_20ED219D8(v1 + 168);
    sub_20ED21BBC(v1);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20ED27C40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9D1040;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20ED27D78(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C403104F911);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20ED27D78(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C403104F911);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED27D78(uint64_t a1)
{
  sub_20ED123F4(a1 + 4872);
  sub_20ED125D8(a1 + 4704);
  sub_20ED127BC(a1 + 4536);
  sub_20ED129A0(a1 + 4368);
  sub_20ED12B84(a1 + 4200);
  sub_20ED12D68(a1 + 4032);
  sub_20ED12F4C(a1 + 3864);
  sub_20ED13130(a1 + 3696);
  sub_20ED13314(a1 + 3528);
  sub_20ED134F8(a1 + 3360);
  sub_20ED136DC(a1 + 3192);
  sub_20ED138C0(a1 + 3024);
  sub_20ED13AA4(a1 + 2856);
  sub_20ED13C88(a1 + 2688);
  sub_20ED13E6C(a1 + 2520);
  sub_20ED14050(a1 + 2352);
  sub_20ED14234(a1 + 2184);
  sub_20ED14418(a1 + 2016);
  sub_20ED145FC(a1 + 1848);
  sub_20ED147E0(a1 + 1680);
  sub_20ED149C4(a1 + 1512);
  sub_20ED14BA8(a1 + 1344);
  sub_20ED14D8C(a1 + 1176);
  sub_20ED14F70(a1 + 1008);
  sub_20ED15154(a1 + 840);
  sub_20ED15338(a1 + 672);
  sub_20ED1551C(a1 + 504);
  sub_20ED15700(a1 + 336);
  sub_20ED158E4(a1 + 168);
  return sub_20ED15AC8(a1);
}

uint64_t sub_20ED27E94(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    sub_20ED276FC(result + 344);
    sub_20ED2784C(v1 + 264);
    sub_20ED27984(v1 + 184);
    sub_20ED27ABC(v1 + 104);
    sub_20ED27C40(v1 + 24);
    v2 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)v1 = &off_24C9EB158;
    *(_QWORD *)(v1 + 8) = 0;
    if (v2)
      (*(void (**)(void))(v1 + 16))();
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20ED27F1C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  void **v6;
  void **v7;
  uint64_t v8;
  void **v9;
  _BYTE *v10;
  size_t v11;
  char *v12;
  void **v13;
  char *v14;
  char *v15;
  void **v16;
  void **v17;
  char *v18;
  void **v19;
  _BYTE __p[24];
  void *__dst[4];

  *(_OWORD *)(a1 + 8) = 0u;
  v6 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 168) = 0u;
  v7 = (void **)(a1 + 168);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_24C9E1400;
  *(_QWORD *)(a1 + 56) = &unk_24C9E1438;
  *(_QWORD *)(a1 + 112) = &unk_24C9E1460;
  *(_WORD *)(a1 + 216) = 0;
  v8 = operator new();
  sub_20F005530(v8, a2, a3);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = v8;
  *(_QWORD *)(a1 + 240) = 0;
  HIBYTE(__dst[2]) = 17;
  strcpy((char *)__dst, "Vision-only State");
  *(_QWORD *)__p = operator new(0x58uLL);
  *(_OWORD *)&__p[8] = xmmword_210363230;
  strcpy(*(char **)__p, "Transforms the engine state plus vision features to a new predictor state input.");
  if (v7 != __dst)
  {
    if (*(char *)(a1 + 191) < 0)
    {
      sub_20E867CBC(v7, __dst, 0x11uLL);
    }
    else
    {
      *(_OWORD *)v7 = *(_OWORD *)__dst;
      v7[2] = __dst[2];
    }
  }
  v9 = (void **)(a1 + 192);
  if ((_BYTE *)(a1 + 192) != __p)
  {
    if (*(char *)(a1 + 215) < 0)
    {
      if (__p[23] >= 0)
        v10 = __p;
      else
        v10 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v11 = __p[23];
      else
        v11 = *(_QWORD *)&__p[8];
      sub_20E867CBC(v9, v10, v11);
    }
    else if ((__p[23] & 0x80) != 0)
    {
      sub_20E867BF8(v9, *(void **)__p, *(size_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v9 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 208) = *(_QWORD *)&__p[16];
    }
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(__dst[0]);
LABEL_19:
  v12 = (char *)operator new(0x28uLL);
  strcpy(v12, "State passed from the VIO engine");
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v6);
  strcpy((char *)(a1 + 8), "Engine state");
  *(_BYTE *)(a1 + 21) = 0;
  *(_WORD *)(a1 + 22) = 0;
  *(_BYTE *)(a1 + 31) = 12;
  sub_20E860C04(__dst, v12, 0x20uLL);
  v13 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)__dst;
  *(void **)(a1 + 48) = __dst[2];
  operator delete(v12);
  v14 = (char *)operator new(0x19uLL);
  strcpy(v14, "FeaturePoint Processing");
  v15 = (char *)operator new(0x40uLL);
  strcpy(v15, "Feature point inputs used to calculate the vision-only state");
  sub_20E860C04(__dst, v14, 0x17uLL);
  v16 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = *(_OWORD *)__dst;
  *(void **)(a1 + 80) = __dst[2];
  sub_20E860C04(__dst, v15, 0x3CuLL);
  v17 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = *(_OWORD *)__dst;
  *(void **)(a1 + 104) = __dst[2];
  operator delete(v15);
  operator delete(v14);
  v18 = (char *)operator new(0x38uLL);
  strcpy(v18, "True for vision-only slam, False for pass-through state");
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  strcpy((char *)(a1 + 120), "Runtime mode");
  *(_BYTE *)(a1 + 133) = 0;
  *(_WORD *)(a1 + 134) = 0;
  *(_BYTE *)(a1 + 143) = 12;
  sub_20E860C04(__dst, v18, 0x37uLL);
  v19 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)__dst;
  *(void **)(a1 + 160) = __dst[2];
  operator delete(v18);
  return a1;
}

void sub_20ED28310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  sub_20E86665C(v22);
  sub_20ED283E0((uint64_t *)(v21 + 224));
  sub_20ED28424(v21);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED283E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20ED28E58(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C400E4FD90ALL);
  }
  return a1;
}

uint64_t sub_20ED28424(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9E1518;
  *(_QWORD *)(a1 + 56) = &unk_24C9E1540;
  *(_QWORD *)(a1 + 112) = &unk_24C9E1568;
  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 112) = off_24C9E15E0;
      if ((*(char *)(a1 + 167) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24C9E15E0;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = off_24C9E15B8;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9E15B8;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)a1 = off_24C9E1590;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_16:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9E1590;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_16;
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_17:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED28570(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;

  v5 = *a2;
  if (*((_BYTE *)*a2 + 48))
    goto LABEL_20;
  if (v5[4])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/VOStatePropagatorNode.cpp", 61, (uint64_t)"!state->vision_tracker_pose_metadata", 36, (uint64_t)"Vision-Tracker metadata should be invalid", 41, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_24;
    }
    v5 = *a2;
  }
  v7 = *v5;
  v8 = *(unsigned __int8 *)(*v5 + 5032);
  *(_BYTE *)(a1 + 216) = v8;
  if (!*(_BYTE *)(a1 + 217))
    goto LABEL_20;
  if (v8 != 1)
    goto LABEL_11;
  v9 = *(_DWORD *)(v7 + 20);
  if ((v9 & 0x80000000) != 0)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/VOStatePropagatorNode.cpp", 75, (uint64_t)"state->pose_metadata->reinitialize_attempts >= 0", 48, (uint64_t)"Number of re_initialization has to be positive", 46, (void (*)(void **))sub_21023DDB0))
    {
      v7 = **a2;
      v9 = *(_DWORD *)(v7 + 20);
      goto LABEL_10;
    }
LABEL_24:
    abort();
  }
LABEL_10:
  sub_20F006A90(*(_QWORD *)(a1 + 224), v7 + 32, v9);
  v5 = *a2;
LABEL_11:
  v10 = a2[1];
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(std::__shared_weak_count **)(a1 + 240);
  *(_QWORD *)(a1 + 232) = v5;
  *(_QWORD *)(a1 + 240) = v10;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v5 = *a2;
LABEL_20:
  v16 = a2[1];
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 1);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_20ED286E8(uint64_t a1@<X0>, double ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  double *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  std::__shared_weak_count *v33;
  char v34;
  double v35;
  char v36;
  double *v37;
  std::__shared_weak_count *v38;

  if (!*(_BYTE *)(a1 + 217) || !*(_BYTE *)(a1 + 216))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
  v5 = *(_QWORD *)(a1 + 224);
  LOBYTE(v35) = 0;
  v36 = 0;
  sub_20F024EE4(a2, (uint64_t *)&__p);
  sub_20F00685C(v5, &v35, (uint64_t *)&__p, v6, &v37);
  v7 = (unint64_t *)__p;
  if (__p)
  {
    v8 = (uint64_t)v29;
    v9 = __p;
    if (v29 != __p)
    {
      do
      {
        v8 -= 240;
        sub_20E990F68(v8);
      }
      while ((unint64_t *)v8 != v7);
      v9 = __p;
    }
    v29 = v7;
    operator delete(v9);
  }
  v10 = *(_QWORD **)(a1 + 232);
  if (!v10 || !v37)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    v25 = v38;
    if (!v38)
      return;
    goto LABEL_27;
  }
  v11 = (void *)*v10;
  if (*v37 < *(double *)(*v10 + 40))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/VOStatePropagatorNode.cpp", 109, (uint64_t)"res->timestamp >= base_vio_metadata->pose_metadata->odometry_metadata.latest_state_orig_timestamp", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v10 = *(_QWORD **)(a1 + 232);
    v11 = (void *)*v10;
  }
  v12 = (unint64_t *)v10[1];
  __p = v11;
  v29 = v12;
  if (v12)
  {
    v13 = v12 + 1;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v10 = *(_QWORD **)(a1 + 232);
  }
  v15 = v10[2];
  v16 = v10[3];
  v30 = v15;
  v31 = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = v37;
  v20 = v38;
  v32 = v37;
  v33 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = *(_BYTE *)(*(_QWORD *)(a1 + 232) + 48);
  v34 = v23;
  v24 = operator new(0x50uLL);
  v24[1] = 0;
  v24[2] = 0;
  *v24 = &off_24C9B0848;
  v24[3] = v11;
  v24[4] = v12;
  v24[5] = v15;
  v24[6] = v16;
  v24[7] = v19;
  v24[8] = v20;
  *((_BYTE *)v24 + 72) = v23;
  *(_QWORD *)a3 = v24 + 3;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = 1;
  v25 = v38;
  if (v38)
  {
LABEL_27:
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_20ED28908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20E91D88C((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED28924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED28938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20ED2894C((void **)va);
  _Unwind_Resume(a1);
}

void **sub_20ED2894C(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 240;
        sub_20E990F68(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20ED289AC(uint64_t a1@<X0>, double ***a2@<X1>, uint64_t a3@<X8>)
{
  sub_20ED286E8(a1 - 56, a2, a3);
}

uint64_t sub_20ED289B4(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(result + 217) = *a2;
  return result;
}

uint64_t sub_20ED289C0(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(result + 105) = *a2;
  return result;
}

uint64_t sub_20ED289CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24C9E1400;
  a1[7] = &unk_24C9E1438;
  a1[14] = &unk_24C9E1460;
  v2 = (std::__shared_weak_count *)a1[30];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1[28];
      a1[28] = 0;
      if (!v5)
        return sub_20ED28424((uint64_t)a1);
      goto LABEL_6;
    }
  }
  v5 = a1[28];
  a1[28] = 0;
  if (v5)
  {
LABEL_6:
    v6 = sub_20ED28E58(v5);
    MEMORY[0x212BC6398](v6, 0x10B2C400E4FD90ALL);
  }
  return sub_20ED28424((uint64_t)a1);
}

void sub_20ED28A74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24C9E1400;
  a1[7] = &unk_24C9E1438;
  a1[14] = &unk_24C9E1460;
  v2 = (std::__shared_weak_count *)a1[30];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = a1[28];
    a1[28] = 0;
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = a1[28];
    a1[28] = 0;
    if (!v5)
    {
LABEL_7:
      sub_20ED28424((uint64_t)a1);
      JUMPOUT(0x212BC6398);
    }
  }
  v6 = sub_20ED28E58(v5);
  MEMORY[0x212BC6398](v6, 0x10B2C400E4FD90ALL);
  goto LABEL_7;
}

uint64_t sub_20ED28B30(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(a1 - 7) = &off_24C9E1400;
  v2 = (uint64_t)(a1 - 7);
  *a1 = &unk_24C9E1438;
  a1[7] = &unk_24C9E1460;
  v3 = (std::__shared_weak_count *)a1[23];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = a1[21];
      a1[21] = 0;
      if (!v6)
        return sub_20ED28424(v2);
      goto LABEL_6;
    }
  }
  v6 = a1[21];
  a1[21] = 0;
  if (v6)
  {
LABEL_6:
    v7 = sub_20ED28E58(v6);
    MEMORY[0x212BC6398](v7, 0x10B2C400E4FD90ALL);
  }
  return sub_20ED28424(v2);
}

void sub_20ED28BE4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(a1 - 7) = &off_24C9E1400;
  v2 = (uint64_t)(a1 - 7);
  *a1 = &unk_24C9E1438;
  a1[7] = &unk_24C9E1460;
  v3 = (std::__shared_weak_count *)a1[23];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = a1[21];
    a1[21] = 0;
    if (!v6)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v6 = a1[21];
    a1[21] = 0;
    if (!v6)
    {
LABEL_7:
      sub_20ED28424(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  v7 = sub_20ED28E58(v6);
  MEMORY[0x212BC6398](v7, 0x10B2C400E4FD90ALL);
  goto LABEL_7;
}

uint64_t sub_20ED28CAC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(a1 - 14) = &off_24C9E1400;
  v2 = (uint64_t)(a1 - 14);
  *(a1 - 7) = &unk_24C9E1438;
  *a1 = &unk_24C9E1460;
  v3 = (std::__shared_weak_count *)a1[16];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = a1[14];
      a1[14] = 0;
      if (!v6)
        return sub_20ED28424(v2);
      goto LABEL_6;
    }
  }
  v6 = a1[14];
  a1[14] = 0;
  if (v6)
  {
LABEL_6:
    v7 = sub_20ED28E58(v6);
    MEMORY[0x212BC6398](v7, 0x10B2C400E4FD90ALL);
  }
  return sub_20ED28424(v2);
}

void sub_20ED28D60(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(a1 - 14) = &off_24C9E1400;
  v2 = (uint64_t)(a1 - 14);
  *(a1 - 7) = &unk_24C9E1438;
  *a1 = &unk_24C9E1460;
  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = a1[14];
    a1[14] = 0;
    if (!v6)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v6 = a1[14];
    a1[14] = 0;
    if (!v6)
    {
LABEL_7:
      sub_20ED28424(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  v7 = sub_20ED28E58(v6);
  MEMORY[0x212BC6398](v7, 0x10B2C400E4FD90ALL);
  goto LABEL_7;
}

uint64_t sub_20ED28E58(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 3640);
  *(_QWORD *)(a1 + 3640) = 0;
  if (v2)
    MEMORY[0x212BC6398](v2, 0x1000C40244176AFLL);
  sub_20E86A810(a1 + 1208);
  if ((*(char *)(a1 + 1031) & 0x80000000) == 0)
  {
    v3 = *(void **)(a1 + 960);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 1008));
  v3 = *(void **)(a1 + 960);
  if (v3)
  {
LABEL_5:
    *(_QWORD *)(a1 + 968) = v3;
    operator delete(v3);
  }
LABEL_6:
  v4 = *(void **)(a1 + 568);
  if (v4)
  {
    *(_QWORD *)(a1 + 576) = v4;
    operator delete(v4);
  }
  if ((*(char *)(a1 + 343) & 0x80000000) == 0)
  {
    v5 = *(void **)(a1 + 256);
    if (!v5)
      goto LABEL_11;
    goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 320));
  v5 = *(void **)(a1 + 256);
  if (v5)
  {
LABEL_10:
    *(_QWORD *)(a1 + 264) = v5;
    operator delete(v5);
  }
LABEL_11:
  v6 = *(void **)(a1 + 224);
  if (v6)
  {
    *(_QWORD *)(a1 + 232) = v6;
    operator delete(v6);
  }
  sub_20ED29074((void ***)(a1 + 64), 0);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(void **)(a1 + 32);
    if (v8 != v7)
    {
      do
      {
        v10 = *(_QWORD *)(v8 - 24);
        if (v10)
        {
          v11 = *(_QWORD *)(v8 - 16);
          v12 = *(void **)(v8 - 24);
          if (v11 != v10)
          {
            do
              v11 = sub_20EB8188C(v11 - 1664);
            while (v11 != v10);
            v12 = *(void **)(v8 - 24);
          }
          *(_QWORD *)(v8 - 16) = v10;
          operator delete(v12);
        }
        v8 -= 32;
      }
      while (v8 != v7);
      v9 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v7;
    operator delete(v9);
  }
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v13)
  {
    v14 = *(_QWORD **)(v13 + 8);
    if (v14)
    {
      v15 = *(_QWORD **)(v13 + 16);
      v16 = *(void **)(v13 + 8);
      if (v15 != v14)
      {
        do
        {
          v15 -= 51;
          sub_20ED29134(v15);
        }
        while (v15 != v14);
        v16 = *(void **)(v13 + 8);
      }
      *(_QWORD *)(v13 + 16) = v14;
      operator delete(v16);
    }
    v17 = *(_QWORD **)v13;
    *(_QWORD *)v13 = 0;
    if (v17)
    {
      v18 = sub_20ED291D8(v17);
      MEMORY[0x212BC6398](v18, 0x10F0C405208BBE6);
    }
    MEMORY[0x212BC6398](v13, 0x1020C4001A2EF61);
  }
  v19 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v20 = *(_QWORD **)(a1 + 8);
    v21 = *(_QWORD **)a1;
    if (v20 != v19)
    {
      do
      {
        v23 = *--v20;
        v22 = v23;
        *v20 = 0;
        if (v23)
        {
          v24 = sub_20ED293AC(v22);
          MEMORY[0x212BC6398](v24, 0x10B2C4036EE574ELL);
        }
      }
      while (v20 != v19);
      v21 = *(_QWORD **)a1;
    }
    *(_QWORD *)(a1 + 8) = v19;
    operator delete(v21);
  }
  return a1;
}

void ***sub_20ED29074(void ***result, void **a2)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2[3];
    if (v3)
    {
      v4 = v2[4];
      v5 = v2[3];
      if (v4 != v3)
      {
        do
        {
          v4 -= 13;
          sub_20E9905B4(v4);
        }
        while (v4 != v3);
        v5 = v2[3];
      }
      v2[4] = v3;
      operator delete(v5);
    }
    v6 = *v2;
    if (*v2)
    {
      v7 = (uint64_t)v2[1];
      v8 = *v2;
      if ((void *)v7 != v6)
      {
        do
        {
          v7 -= 240;
          sub_20E990F68(v7);
        }
        while ((void *)v7 != v6);
        v8 = *v2;
      }
      v2[1] = v6;
      operator delete(v8);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20ED29134(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)a1[48];
  if (v2)
  {
    a1[49] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[45];
  if (v3)
  {
    a1[46] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[42];
  if (v4)
  {
    a1[43] = v4;
    operator delete(v4);
  }
  v5 = a1[39];
  if (v5)
  {
    v6 = a1[40];
    v7 = (void *)a1[39];
    if (v6 != v5)
    {
      do
      {
        sub_20E990658(v6 - 208);
        sub_20E990658(v6 - 416);
        v6 -= 440;
      }
      while (v6 != v5);
      v7 = (void *)a1[39];
    }
    a1[40] = v5;
    operator delete(v7);
  }
}

uint64_t sub_20ED291D8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v2 = (void *)a1[129];
  if (v2)
  {
    a1[130] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[125];
  if (v3)
  {
    a1[126] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[122];
  if (v4)
  {
    a1[123] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[119];
  if (v5)
  {
    a1[120] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[116];
  if (v6)
  {
    a1[117] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[113];
  if (v7)
  {
    a1[114] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[110];
  if (v8)
  {
    a1[111] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[107];
  if (v9)
  {
    a1[108] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[104];
  if (v10)
  {
    a1[105] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[101];
  if (v11)
  {
    a1[102] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[98];
  if (v12)
  {
    a1[99] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[95];
  if (v13)
  {
    a1[96] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[92];
  if (v14)
  {
    a1[93] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[89];
  if (v15)
  {
    a1[90] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[86];
  if (v16)
  {
    a1[87] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[83];
  if (v17)
  {
    a1[84] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[80];
  if (v18)
  {
    a1[81] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[68];
  if (v19)
  {
    a1[69] = v19;
    operator delete(v19);
  }
  sub_20ED29320((uint64_t)(a1 + 21));
  return sub_20ED29320((uint64_t)a1);
}

uint64_t sub_20ED29320(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 144);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_20ED293AC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void **v14;

  v2 = *(void **)(a1 + 696);
  if (v2)
  {
    *(_QWORD *)(a1 + 704) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 672);
  if (v3)
  {
    *(_QWORD *)(a1 + 680) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 648);
  if (v4)
  {
    *(_QWORD *)(a1 + 656) = v4;
    operator delete(v4);
  }
  sub_20ED294B4((_QWORD *)(a1 + 552));
  sub_20ED294B4((_QWORD *)(a1 + 480));
  v14 = (void **)(a1 + 456);
  sub_20ED295D8(&v14);
  v5 = *(_QWORD *)(a1 + 424);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 432);
    v7 = *(void **)(a1 + 424);
    if (v6 != v5)
    {
      v8 = *(_QWORD *)(a1 + 432);
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 424);
    }
    *(_QWORD *)(a1 + 432) = v5;
    operator delete(v7);
  }
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
    v11 = *(void **)(a1 + 160);
    if (!v11)
      goto LABEL_18;
    goto LABEL_17;
  }
  operator delete(*(void **)(a1 + 224));
  v11 = *(void **)(a1 + 160);
  if (v11)
  {
LABEL_17:
    *(_QWORD *)(a1 + 168) = v11;
    operator delete(v11);
  }
LABEL_18:
  v12 = *(void **)(a1 + 128);
  if (v12)
  {
    *(_QWORD *)(a1 + 136) = v12;
    operator delete(v12);
  }
  return a1;
}

_QWORD *sub_20ED294B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
  {
    v4 = a1[6];
    v5 = (void *)a1[5];
    if (v4 != v3)
    {
      v6 = a1[6];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[5];
    }
    a1[6] = v3;
    operator delete(v5);
  }
  v9 = a1[2];
  if (v9)
  {
    v10 = a1[3];
    v11 = (void *)a1[2];
    if (v10 != v9)
    {
      v12 = a1[3];
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)a1[2];
    }
    a1[3] = v9;
    operator delete(v11);
  }
  v15 = (std::__shared_weak_count *)a1[1];
  if (!v15)
    return a1;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED295D8(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
        {
          v8 = (void *)v6[5];
          if (v8)
          {
            v6[6] = v8;
            operator delete(v8);
          }
          v9 = (void (***)(_QWORD))v6[2];
          if (v9)
          {
            v10 = (void (***)(_QWORD))v6[3];
            v11 = (void *)v6[2];
            if (v10 != v9)
            {
              v12 = v10 - 18;
              v13 = v10 - 18;
              do
              {
                v14 = *v13;
                v13 -= 18;
                (*v14)(v12);
                v15 = v12 == v9;
                v12 = v13;
              }
              while (!v15);
              v11 = (void *)v6[2];
            }
            v6[3] = v9;
            operator delete(v11);
          }
          MEMORY[0x212BC6398](v6, 0x1030C40380150A2);
        }
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20ED296D8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v6;
  uint64_t *v7;

  *(_OWORD *)(a1 + 8) = 0u;
  v6 = (std::string *)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = off_24C9E1608;
  v7 = (uint64_t *)operator new();
  sub_20ED2CB0C(v7, a2, a3);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = sub_20ED331F8;
  sub_20E8B43E8(v6, "VOStatePropagatorNodeGroup", 0x1AuLL);
  sub_20E8B43E8((std::string *)(a1 + 32), "Node group to propagate vision-only state", 0x29uLL);
  return a1;
}

void sub_20ED2978C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v2, 0x10B2C405D937C26);
  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

void sub_20ED297B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

void sub_20ED297CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 64))();
  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED297F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_20ED29804(a2, *(_QWORD **)(a1 + 56));
}

uint64_t sub_20ED29804(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  char *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  void **v18;
  char *v19;
  void **v20;
  char *v21;
  int v24;
  size_t v25;
  unint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *p_dst;
  char *v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  void *v39;
  void **v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void **v43;
  __int128 v44;
  char *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  void *v49;
  void **v50;
  unint64_t *v51;
  unint64_t v52;
  void **v53;
  void *v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  __int128 v59;
  uint64_t v60;
  __int128 *v61;
  char *v62;
  __int128 *v63;
  char *v64;
  char *v65;
  void *v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t *v70;
  __int128 v71;
  uint64_t v72;
  void **v73;
  char *v74;
  void **v75;
  char *v76;
  int v79;
  size_t v80;
  unint64_t v81;
  __int128 *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  char *v86;
  void *v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  void *v94;
  void **v95;
  unint64_t *v96;
  unint64_t v97;
  void **v98;
  __int128 v99;
  char *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  void *v104;
  void **v105;
  unint64_t *v106;
  unint64_t v107;
  void **v108;
  void *v109;
  __int128 v110;
  char *v111;
  uint64_t v112;
  uint64_t *v113;
  __int128 v114;
  uint64_t v115;
  __int128 *v116;
  char *v117;
  __int128 *v118;
  char *v119;
  char *v120;
  void *v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t *v125;
  __int128 v126;
  uint64_t v127;
  void **v128;
  char *v129;
  void **v130;
  char *v131;
  int v134;
  size_t v135;
  unint64_t v136;
  __int128 *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 *v140;
  char *v141;
  void *v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  void *v149;
  void **v150;
  unint64_t *v151;
  unint64_t v152;
  void **v153;
  __int128 v154;
  char *v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  void *v159;
  void **v160;
  unint64_t *v161;
  unint64_t v162;
  void **v163;
  void *v164;
  __int128 v165;
  char *v166;
  __int128 v167;
  _BOOL4 v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  __int128 v173;
  char *v174;
  void *v175;
  uint64_t v176;
  uint64_t *v177;
  __int128 v178;
  uint64_t v179;
  __int128 *v180;
  char *v181;
  __int128 *v182;
  char *v183;
  __int128 v184;
  char *v185;
  void *v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  uint64_t *v190;
  __int128 v191;
  uint64_t v192;
  void **v193;
  char *v194;
  void **v195;
  char *v196;
  int v199;
  size_t v200;
  unint64_t v201;
  __int128 *v202;
  uint64_t v203;
  uint64_t v204;
  __int128 *v205;
  char *v206;
  void *v207;
  __int128 v208;
  uint64_t v209;
  __int128 v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count *v213;
  void *v214;
  void **v215;
  unint64_t *v216;
  unint64_t v217;
  void **v218;
  __int128 v219;
  char *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  void *v224;
  void **v225;
  unint64_t *v226;
  unint64_t v227;
  void **v228;
  __int128 v229;
  char *v230;
  _BOOL4 v231;
  char *v232;
  char *v233;
  char *v234;
  char *v235;
  void *v236;
  __int128 v238;
  __int128 v239;
  uint64_t v241;
  _QWORD *v242;
  void *v243;
  char *v244;
  unint64_t v245;
  void *v246;
  char *v247;
  unint64_t v248;
  void **v249;
  void **v250;
  uint64_t v251;
  void *v252[2];
  uint64_t v253;
  void *v254[2];
  __int128 v255;
  unint64_t v256;
  __int128 __p;
  _BYTE v258[24];
  uint64_t v259;
  __int128 v260;
  uint64_t v261;
  __int128 __dst;
  int64_t v263;
  _BYTE v264[128];
  _QWORD v265[19];

  v2 = a2;
  v265[16] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v246 = 0;
  v247 = 0;
  v248 = 0;
  v243 = 0;
  v244 = 0;
  v245 = 0;
  v241 = v3;
  v4 = *(_QWORD *)(v3 + 72);
  if (v4)
  {
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      v5 = *(_OWORD *)(v4 + 8);
      v263 = *(_QWORD *)(v4 + 24);
      __dst = v5;
      goto LABEL_7;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(v241 + 72);
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  sub_20E860C04(&__dst, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
LABEL_7:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 48))(*(_QWORD *)(v4 + 96));
  v7 = sub_20EC72848();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20E860C04(&v260, (void *)*v7, v7[1]);
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v261 = v7[2];
    v260 = v8;
  }
  v9 = HIBYTE(v261);
  if (v261 >= 0)
  {
    v10 = &v260;
  }
  else
  {
    v9 = *((_QWORD *)&v260 + 1);
    v10 = (__int128 *)v260;
  }
  if (v9 >= 4)
  {
    v11 = (char *)v10 + v9;
    v12 = v10;
    do
    {
      v13 = (char *)memchr(v12, 118, v9 - 3);
      if (!v13)
        break;
      if (*(_DWORD *)v13 == 1684631414)
      {
        if (v13 == v11 || v13 - (char *)v10 == -1)
          break;
        v254[0] = (void *)v6;
        LODWORD(v254[1]) = 4;
        if (SHIBYTE(v263) < 0)
        {
          sub_20E860C04(&v255, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v255 = __dst;
          v256 = v263;
        }
        if (*(char *)(v4 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
        }
        else
        {
          v238 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)v258 = *(_QWORD *)(v4 + 48);
          __p = v238;
        }
        sub_20ED2C42C();
        if ((byte_254A5EFC7 & 0x80000000) == 0)
        {
          *(_OWORD *)&v258[8] = xmmword_254A5EFB0;
          v259 = unk_254A5EFC0;
          goto LABEL_34;
        }
        goto LABEL_31;
      }
      v12 = (__int128 *)(v13 + 1);
      v9 = v11 - (char *)v12;
    }
    while (v11 - (char *)v12 >= 4);
  }
  v254[0] = (void *)v6;
  LODWORD(v254[1]) = 2;
  if (SHIBYTE(v263) < 0)
  {
    sub_20E860C04(&v255, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v255 = __dst;
    v256 = v263;
  }
  if (*(char *)(v4 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v14 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)v258 = *(_QWORD *)(v4 + 48);
    __p = v14;
  }
  sub_20ED2C42C();
  if (byte_254A5EFC7 < 0)
  {
LABEL_31:
    sub_20E860C04(&v258[8], (void *)xmmword_254A5EFB0, *((unint64_t *)&xmmword_254A5EFB0 + 1));
  }
  else
  {
    *(_OWORD *)&v258[8] = xmmword_254A5EFB0;
    v259 = unk_254A5EFC0;
  }
LABEL_34:
  v247 = sub_20EBA558C((char **)&v246, (uint64_t)v254);
  if ((SHIBYTE(v259) & 0x80000000) == 0)
  {
    if ((v258[7] & 0x80000000) == 0)
      goto LABEL_36;
LABEL_32:
    operator delete((void *)__p);
    if ((SHIBYTE(v256) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  operator delete(*(void **)&v258[8]);
  if ((v258[7] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_36:
  if (SHIBYTE(v256) < 0)
LABEL_33:
    operator delete((void *)v255);
LABEL_37:
  v15 = sub_20EBA4AA4();
  if (*((char *)v15 + 23) < 0)
  {
    sub_20E860C04(v252, (void *)*v15, v15[1]);
  }
  else
  {
    v16 = *(_OWORD *)v15;
    v253 = v15[2];
    *(_OWORD *)v252 = v16;
  }
  v17 = HIBYTE(v253);
  if (v253 >= 0)
  {
    v18 = v252;
  }
  else
  {
    v17 = (uint64_t)v252[1];
    v18 = (void **)v252[0];
  }
  v242 = v2;
  if (v17 >= 18)
  {
    v19 = (char *)v18 + v17;
    v20 = v18;
    do
    {
      v21 = (char *)memchr(v20, 67, v17 - 17);
      if (!v21)
        break;
      if (*(_QWORD *)v21 == 0x456C656E6E616843
        && *((_QWORD *)v21 + 1) == 0x696F763C726F7272
        && *((_WORD *)v21 + 8) == 15972)
      {
        if (v21 != v19 && v21 - (char *)v18 != -1)
          goto LABEL_81;
        break;
      }
      v20 = (void **)(v21 + 1);
      v17 = v19 - (char *)v20;
    }
    while (v19 - (char *)v20 >= 18);
  }
  v254[0] = (void *)(v6 + 1);
  LODWORD(v254[1]) = 3;
  v24 = SHIBYTE(v263);
  if (v263 >= 0)
    v25 = HIBYTE(v263);
  else
    v25 = *((_QWORD *)&__dst + 1);
  v26 = v25 + 6;
  if (v25 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v26 >= 0x17)
  {
    v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v28 = v26 | 7;
    v29 = v28 + 1;
    v27 = (__int128 *)operator new(v28 + 1);
    *((_QWORD *)&v255 + 1) = v25 + 6;
    v256 = v29 | 0x8000000000000000;
    *(_QWORD *)&v255 = v27;
    v2 = v242;
  }
  else
  {
    v256 = 0;
    v255 = 0uLL;
    v27 = &v255;
    HIBYTE(v256) = v25 + 6;
    if (!v25)
      goto LABEL_73;
  }
  if (v24 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v27, p_dst, v25);
LABEL_73:
  strcpy((char *)v27 + v25, ".Error");
  *(_WORD *)&v258[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v259) = 0;
  v31 = v247;
  if ((unint64_t)v247 >= v248)
  {
    v247 = sub_20EBA558C((char **)&v246, (uint64_t)v254);
    if (SHIBYTE(v259) < 0)
    {
      operator delete(*(void **)&v258[8]);
      if ((v258[7] & 0x80000000) == 0)
        goto LABEL_80;
    }
    else if ((v258[7] & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
LABEL_75:
    operator delete((void *)__p);
    if (SHIBYTE(v256) < 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  v32 = v254[0];
  *((_DWORD *)v247 + 2) = v254[1];
  *(_QWORD *)v31 = v32;
  v33 = v255;
  *((_QWORD *)v31 + 4) = v256;
  *((_OWORD *)v31 + 1) = v33;
  v256 = 0;
  v255 = 0uLL;
  v34 = *(_QWORD *)v258;
  *(_OWORD *)(v31 + 40) = __p;
  *((_QWORD *)v31 + 7) = v34;
  *(_QWORD *)v258 = 0;
  __p = 0uLL;
  v35 = *(_OWORD *)&v258[8];
  *((_QWORD *)v31 + 10) = v259;
  *((_OWORD *)v31 + 4) = v35;
  *(_QWORD *)&v258[8] = 0;
  *(_QWORD *)&v258[16] = 0;
  v259 = 0;
  v247 = v31 + 88;
  if ((v258[7] & 0x80000000) != 0)
    goto LABEL_75;
LABEL_80:
  if (SHIBYTE(v256) < 0)
  {
LABEL_76:
    operator delete((void *)v255);
    v36 = *(std::__shared_weak_count **)(v4 + 136);
    if (!v36)
      goto LABEL_85;
    goto LABEL_82;
  }
LABEL_81:
  v36 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v36)
  {
LABEL_85:
    v249 = 0;
    v250 = 0;
    v251 = 0;
    v40 = 0;
    goto LABEL_100;
  }
LABEL_82:
  v37 = std::__shared_weak_count::lock(v36);
  v254[1] = v37;
  if (!v37)
    goto LABEL_85;
  v38 = v37;
  v39 = *(void **)(v4 + 128);
  v254[0] = v39;
  if (v39)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v39 + 24))(&v249);
  }
  else
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
  }
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (v42)
  {
    v40 = v249;
    v43 = v250;
    if (v249 == v250)
      goto LABEL_100;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v40 = v249;
    v43 = v250;
    if (v249 == v250)
      goto LABEL_100;
  }
  do
  {
    v254[0] = (void *)v6;
    v254[1] = *v40;
    v256 = 0;
    v255 = 0uLL;
    v45 = v244;
    if ((unint64_t)v244 < v245)
    {
      *(_OWORD *)v244 = *(_OWORD *)v254;
      v44 = v255;
      *((_QWORD *)v45 + 4) = v256;
      *((_OWORD *)v45 + 1) = v44;
      v244 = v45 + 40;
    }
    else
    {
      v244 = sub_20EBA5F8C(&v243, (uint64_t)v254);
      if (SHIBYTE(v256) < 0)
        operator delete((void *)v255);
    }
    ++v40;
  }
  while (v40 != v43);
  v40 = v249;
LABEL_100:
  if (v40)
  {
    v250 = v40;
    operator delete(v40);
  }
  v46 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v46 || (v47 = std::__shared_weak_count::lock(v46), (v254[1] = v47) == 0))
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
    v50 = 0;
    goto LABEL_121;
  }
  v48 = v47;
  v49 = *(void **)(v4 + 128);
  v254[0] = v49;
  if (v49)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v49 + 32))(&v249);
  }
  else
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
  }
  v51 = (unint64_t *)&v48->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (v52)
  {
    v50 = v249;
    v53 = v250;
    if (v249 == v250)
      goto LABEL_121;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    v50 = v249;
    v53 = v250;
    if (v249 == v250)
      goto LABEL_121;
  }
  v54 = (void *)(v6 + 1);
  do
  {
    v254[0] = v54;
    v254[1] = *v50;
    v256 = 0;
    v255 = 0uLL;
    v56 = v244;
    if ((unint64_t)v244 < v245)
    {
      *(_OWORD *)v244 = *(_OWORD *)v254;
      v55 = v255;
      *((_QWORD *)v56 + 4) = v256;
      *((_OWORD *)v56 + 1) = v55;
      v244 = v56 + 40;
    }
    else
    {
      v244 = sub_20EBA5F8C(&v243, (uint64_t)v254);
      if (SHIBYTE(v256) < 0)
        operator delete((void *)v255);
    }
    ++v50;
  }
  while (v50 != v53);
  v50 = v249;
LABEL_121:
  if (v50)
  {
    v250 = v50;
    operator delete(v50);
  }
  if (SHIBYTE(v253) < 0)
  {
    operator delete(v252[0]);
    if ((SHIBYTE(v261) & 0x80000000) == 0)
    {
LABEL_125:
      if ((SHIBYTE(v263) & 0x80000000) == 0)
        goto LABEL_126;
LABEL_130:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 199) & 0x80000000) == 0)
        goto LABEL_127;
      goto LABEL_131;
    }
  }
  else if ((SHIBYTE(v261) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete((void *)v260);
  if (SHIBYTE(v263) < 0)
    goto LABEL_130;
LABEL_126:
  if ((*(char *)(v4 + 199) & 0x80000000) == 0)
  {
LABEL_127:
    __dst = *(_OWORD *)(v4 + 176);
    v263 = *(_QWORD *)(v4 + 192);
    goto LABEL_132;
  }
LABEL_131:
  sub_20E860C04(&__dst, *(void **)(v4 + 176), *(_QWORD *)(v4 + 184));
LABEL_132:
  v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 264) + 48))(*(_QWORD *)(v4 + 264));
  v58 = sub_20EC72848();
  if (*((char *)v58 + 23) < 0)
  {
    sub_20E860C04(&v260, (void *)*v58, v58[1]);
  }
  else
  {
    v59 = *(_OWORD *)v58;
    v261 = v58[2];
    v260 = v59;
  }
  v60 = HIBYTE(v261);
  if (v261 >= 0)
  {
    v61 = &v260;
  }
  else
  {
    v60 = *((_QWORD *)&v260 + 1);
    v61 = (__int128 *)v260;
  }
  if (v60 >= 4)
  {
    v62 = (char *)v61 + v60;
    v63 = v61;
    do
    {
      v64 = (char *)memchr(v63, 118, v60 - 3);
      if (!v64)
        break;
      if (*(_DWORD *)v64 == 1684631414)
      {
        if (v64 == v62 || v64 - (char *)v61 == -1)
          break;
        v254[0] = (void *)v57;
        LODWORD(v254[1]) = 4;
        if (SHIBYTE(v263) < 0)
        {
          sub_20E860C04(&v255, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v255 = __dst;
          v256 = v263;
        }
        if (*(char *)(v4 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 200);
          *(_QWORD *)v258 = *(_QWORD *)(v4 + 216);
        }
        sub_20ED2C5E4();
        if (byte_254A5F00F < 0)
        {
          sub_20E860C04(&v258[8], (void *)xmmword_254A5EFF8, *((unint64_t *)&xmmword_254A5EFF8 + 1));
        }
        else
        {
          *(_OWORD *)&v258[8] = xmmword_254A5EFF8;
          v259 = unk_254A5F008;
        }
        v65 = v247;
        if ((unint64_t)v247 < v248)
          goto LABEL_158;
        goto LABEL_161;
      }
      v63 = (__int128 *)(v64 + 1);
      v60 = v62 - (char *)v63;
    }
    while (v62 - (char *)v63 >= 4);
  }
  v254[0] = (void *)v57;
  LODWORD(v254[1]) = 2;
  if (SHIBYTE(v263) < 0)
  {
    sub_20E860C04(&v255, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v255 = __dst;
    v256 = v263;
  }
  if (*(char *)(v4 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v258 = *(_QWORD *)(v4 + 216);
  }
  sub_20ED2C5E4();
  if (byte_254A5F00F < 0)
  {
    sub_20E860C04(&v258[8], (void *)xmmword_254A5EFF8, *((unint64_t *)&xmmword_254A5EFF8 + 1));
  }
  else
  {
    *(_OWORD *)&v258[8] = xmmword_254A5EFF8;
    v259 = unk_254A5F008;
  }
  v65 = v247;
  if ((unint64_t)v247 >= v248)
  {
LABEL_161:
    v247 = sub_20EBA558C((char **)&v246, (uint64_t)v254);
    if (SHIBYTE(v259) < 0)
    {
      operator delete(*(void **)&v258[8]);
      if ((v258[7] & 0x80000000) == 0)
        goto LABEL_163;
    }
    else if ((v258[7] & 0x80000000) == 0)
    {
      goto LABEL_163;
    }
LABEL_159:
    operator delete((void *)__p);
    if ((SHIBYTE(v256) & 0x80000000) == 0)
      goto LABEL_164;
    goto LABEL_160;
  }
LABEL_158:
  v66 = v254[0];
  *((_DWORD *)v65 + 2) = v254[1];
  *(_QWORD *)v65 = v66;
  v67 = v255;
  *((_QWORD *)v65 + 4) = v256;
  *((_OWORD *)v65 + 1) = v67;
  v256 = 0;
  v255 = 0uLL;
  v68 = *(_QWORD *)v258;
  *(_OWORD *)(v65 + 40) = __p;
  *((_QWORD *)v65 + 7) = v68;
  *(_QWORD *)v258 = 0;
  __p = 0uLL;
  v69 = *(_OWORD *)&v258[8];
  *((_QWORD *)v65 + 10) = v259;
  *((_OWORD *)v65 + 4) = v69;
  *(_QWORD *)&v258[8] = 0;
  *(_QWORD *)&v258[16] = 0;
  v259 = 0;
  v247 = v65 + 88;
  if ((v258[7] & 0x80000000) != 0)
    goto LABEL_159;
LABEL_163:
  if (SHIBYTE(v256) < 0)
LABEL_160:
    operator delete((void *)v255);
LABEL_164:
  v70 = sub_20EBA4AA4();
  if (*((char *)v70 + 23) < 0)
  {
    sub_20E860C04(v252, (void *)*v70, v70[1]);
  }
  else
  {
    v71 = *(_OWORD *)v70;
    v253 = v70[2];
    *(_OWORD *)v252 = v71;
  }
  v72 = HIBYTE(v253);
  if (v253 >= 0)
  {
    v73 = v252;
  }
  else
  {
    v72 = (uint64_t)v252[1];
    v73 = (void **)v252[0];
  }
  if (v72 >= 18)
  {
    v74 = (char *)v73 + v72;
    v75 = v73;
    do
    {
      v76 = (char *)memchr(v75, 67, v72 - 17);
      if (!v76)
        break;
      if (*(_QWORD *)v76 == 0x456C656E6E616843
        && *((_QWORD *)v76 + 1) == 0x696F763C726F7272
        && *((_WORD *)v76 + 8) == 15972)
      {
        if (v76 != v74 && v76 - (char *)v73 != -1)
          goto LABEL_208;
        break;
      }
      v75 = (void **)(v76 + 1);
      v72 = v74 - (char *)v75;
    }
    while (v74 - (char *)v75 >= 18);
  }
  v254[0] = (void *)(v57 + 1);
  LODWORD(v254[1]) = 3;
  v79 = SHIBYTE(v263);
  if (v263 >= 0)
    v80 = HIBYTE(v263);
  else
    v80 = *((_QWORD *)&__dst + 1);
  v81 = v80 + 6;
  if (v80 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v81 >= 0x17)
  {
    v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v81 | 7) != 0x17)
      v83 = v81 | 7;
    v84 = v83 + 1;
    v82 = (__int128 *)operator new(v83 + 1);
    *((_QWORD *)&v255 + 1) = v80 + 6;
    v256 = v84 | 0x8000000000000000;
    *(_QWORD *)&v255 = v82;
    v2 = v242;
  }
  else
  {
    v256 = 0;
    v255 = 0uLL;
    v82 = &v255;
    HIBYTE(v256) = v80 + 6;
    if (!v80)
      goto LABEL_200;
  }
  if (v79 >= 0)
    v85 = &__dst;
  else
    v85 = (__int128 *)__dst;
  memmove(v82, v85, v80);
LABEL_200:
  strcpy((char *)v82 + v80, ".Error");
  *(_WORD *)&v258[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v259) = 0;
  v86 = v247;
  if ((unint64_t)v247 >= v248)
  {
    v247 = sub_20EBA558C((char **)&v246, (uint64_t)v254);
    if (SHIBYTE(v259) < 0)
    {
      operator delete(*(void **)&v258[8]);
      if ((v258[7] & 0x80000000) == 0)
        goto LABEL_207;
    }
    else if ((v258[7] & 0x80000000) == 0)
    {
      goto LABEL_207;
    }
LABEL_202:
    operator delete((void *)__p);
    if (SHIBYTE(v256) < 0)
      goto LABEL_203;
    goto LABEL_208;
  }
  v87 = v254[0];
  *((_DWORD *)v247 + 2) = v254[1];
  *(_QWORD *)v86 = v87;
  v88 = v255;
  *((_QWORD *)v86 + 4) = v256;
  *((_OWORD *)v86 + 1) = v88;
  v256 = 0;
  v255 = 0uLL;
  v89 = *(_QWORD *)v258;
  *(_OWORD *)(v86 + 40) = __p;
  *((_QWORD *)v86 + 7) = v89;
  *(_QWORD *)v258 = 0;
  __p = 0uLL;
  v90 = *(_OWORD *)&v258[8];
  *((_QWORD *)v86 + 10) = v259;
  *((_OWORD *)v86 + 4) = v90;
  *(_QWORD *)&v258[8] = 0;
  *(_QWORD *)&v258[16] = 0;
  v259 = 0;
  v247 = v86 + 88;
  if ((v258[7] & 0x80000000) != 0)
    goto LABEL_202;
LABEL_207:
  if (SHIBYTE(v256) < 0)
  {
LABEL_203:
    operator delete((void *)v255);
    v91 = *(std::__shared_weak_count **)(v4 + 304);
    if (!v91)
      goto LABEL_212;
    goto LABEL_209;
  }
LABEL_208:
  v91 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v91)
  {
LABEL_212:
    v249 = 0;
    v250 = 0;
    v251 = 0;
    v95 = 0;
    goto LABEL_229;
  }
LABEL_209:
  v92 = std::__shared_weak_count::lock(v91);
  v254[1] = v92;
  if (!v92)
    goto LABEL_212;
  v93 = v92;
  v94 = *(void **)(v4 + 296);
  v254[0] = v94;
  if (v94)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v94 + 24))(&v249);
  }
  else
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
  }
  v96 = (unint64_t *)&v93->__shared_owners_;
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (v97)
  {
    v95 = v249;
    v98 = v250;
    if (v249 == v250)
      goto LABEL_229;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
    v95 = v249;
    v98 = v250;
    if (v249 == v250)
      goto LABEL_229;
  }
  do
  {
    v254[0] = (void *)v57;
    v254[1] = *v95;
    v256 = 0;
    v255 = 0uLL;
    v100 = v244;
    if ((unint64_t)v244 < v245)
    {
      *(_OWORD *)v244 = *(_OWORD *)v254;
      v99 = v255;
      *((_QWORD *)v100 + 4) = v256;
      *((_OWORD *)v100 + 1) = v99;
      v244 = v100 + 40;
    }
    else
    {
      v244 = sub_20EBA5F8C(&v243, (uint64_t)v254);
      if (SHIBYTE(v256) < 0)
        operator delete((void *)v255);
    }
    ++v95;
  }
  while (v95 != v98);
  v95 = v249;
LABEL_229:
  if (v95)
  {
    v250 = v95;
    operator delete(v95);
  }
  v101 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v101 || (v102 = std::__shared_weak_count::lock(v101), (v254[1] = v102) == 0))
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
    v105 = 0;
    goto LABEL_250;
  }
  v103 = v102;
  v104 = *(void **)(v4 + 296);
  v254[0] = v104;
  if (v104)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v104 + 32))(&v249);
  }
  else
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
  }
  v106 = (unint64_t *)&v103->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
    v105 = v249;
    v108 = v250;
    if (v249 == v250)
      goto LABEL_250;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
    v105 = v249;
    v108 = v250;
    if (v249 == v250)
      goto LABEL_250;
  }
  v109 = (void *)(v57 + 1);
  do
  {
    v254[0] = v109;
    v254[1] = *v105;
    v256 = 0;
    v255 = 0uLL;
    v111 = v244;
    if ((unint64_t)v244 < v245)
    {
      *(_OWORD *)v244 = *(_OWORD *)v254;
      v110 = v255;
      *((_QWORD *)v111 + 4) = v256;
      *((_OWORD *)v111 + 1) = v110;
      v244 = v111 + 40;
    }
    else
    {
      v244 = sub_20EBA5F8C(&v243, (uint64_t)v254);
      if (SHIBYTE(v256) < 0)
        operator delete((void *)v255);
    }
    ++v105;
  }
  while (v105 != v108);
  v105 = v249;
LABEL_250:
  if (v105)
  {
    v250 = v105;
    operator delete(v105);
  }
  if (SHIBYTE(v253) < 0)
  {
    operator delete(v252[0]);
    if ((SHIBYTE(v261) & 0x80000000) == 0)
    {
LABEL_254:
      if ((SHIBYTE(v263) & 0x80000000) == 0)
        goto LABEL_255;
LABEL_259:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 367) & 0x80000000) == 0)
        goto LABEL_256;
      goto LABEL_260;
    }
  }
  else if ((SHIBYTE(v261) & 0x80000000) == 0)
  {
    goto LABEL_254;
  }
  operator delete((void *)v260);
  if (SHIBYTE(v263) < 0)
    goto LABEL_259;
LABEL_255:
  if ((*(char *)(v4 + 367) & 0x80000000) == 0)
  {
LABEL_256:
    __dst = *(_OWORD *)(v4 + 344);
    v263 = *(_QWORD *)(v4 + 360);
    goto LABEL_261;
  }
LABEL_260:
  sub_20E860C04(&__dst, *(void **)(v4 + 344), *(_QWORD *)(v4 + 352));
LABEL_261:
  v112 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 432) + 48))(*(_QWORD *)(v4 + 432));
  v113 = sub_20EBA60E8();
  if (*((char *)v113 + 23) < 0)
  {
    sub_20E860C04(&v260, (void *)*v113, v113[1]);
  }
  else
  {
    v114 = *(_OWORD *)v113;
    v261 = v113[2];
    v260 = v114;
  }
  v115 = HIBYTE(v261);
  if (v261 >= 0)
  {
    v116 = &v260;
  }
  else
  {
    v115 = *((_QWORD *)&v260 + 1);
    v116 = (__int128 *)v260;
  }
  if (v115 >= 4)
  {
    v117 = (char *)v116 + v115;
    v118 = v116;
    do
    {
      v119 = (char *)memchr(v118, 118, v115 - 3);
      if (!v119)
        break;
      if (*(_DWORD *)v119 == 1684631414)
      {
        if (v119 == v117 || v119 - (char *)v116 == -1)
          break;
        v254[0] = (void *)v112;
        LODWORD(v254[1]) = 4;
        if (SHIBYTE(v263) < 0)
        {
          sub_20E860C04(&v255, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v255 = __dst;
          v256 = v263;
        }
        if (*(char *)(v4 + 391) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 368);
          *(_QWORD *)v258 = *(_QWORD *)(v4 + 384);
        }
        sub_20ED2C79C();
        if (byte_254A5F057 < 0)
        {
          sub_20E860C04(&v258[8], (void *)xmmword_254A5F040, *((unint64_t *)&xmmword_254A5F040 + 1));
        }
        else
        {
          *(_OWORD *)&v258[8] = xmmword_254A5F040;
          v259 = unk_254A5F050;
        }
        v120 = v247;
        if ((unint64_t)v247 < v248)
          goto LABEL_287;
        goto LABEL_290;
      }
      v118 = (__int128 *)(v119 + 1);
      v115 = v117 - (char *)v118;
    }
    while (v117 - (char *)v118 >= 4);
  }
  v254[0] = (void *)v112;
  LODWORD(v254[1]) = 2;
  if (SHIBYTE(v263) < 0)
  {
    sub_20E860C04(&v255, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v255 = __dst;
    v256 = v263;
  }
  if (*(char *)(v4 + 391) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 368);
    *(_QWORD *)v258 = *(_QWORD *)(v4 + 384);
  }
  sub_20ED2C79C();
  if (byte_254A5F057 < 0)
  {
    sub_20E860C04(&v258[8], (void *)xmmword_254A5F040, *((unint64_t *)&xmmword_254A5F040 + 1));
  }
  else
  {
    *(_OWORD *)&v258[8] = xmmword_254A5F040;
    v259 = unk_254A5F050;
  }
  v120 = v247;
  if ((unint64_t)v247 >= v248)
  {
LABEL_290:
    v247 = sub_20EBA558C((char **)&v246, (uint64_t)v254);
    if (SHIBYTE(v259) < 0)
    {
      operator delete(*(void **)&v258[8]);
      if ((v258[7] & 0x80000000) == 0)
        goto LABEL_292;
    }
    else if ((v258[7] & 0x80000000) == 0)
    {
      goto LABEL_292;
    }
LABEL_288:
    operator delete((void *)__p);
    if ((SHIBYTE(v256) & 0x80000000) == 0)
      goto LABEL_293;
    goto LABEL_289;
  }
LABEL_287:
  v121 = v254[0];
  *((_DWORD *)v120 + 2) = v254[1];
  *(_QWORD *)v120 = v121;
  v122 = v255;
  *((_QWORD *)v120 + 4) = v256;
  *((_OWORD *)v120 + 1) = v122;
  v256 = 0;
  v255 = 0uLL;
  v123 = *(_QWORD *)v258;
  *(_OWORD *)(v120 + 40) = __p;
  *((_QWORD *)v120 + 7) = v123;
  *(_QWORD *)v258 = 0;
  __p = 0uLL;
  v124 = *(_OWORD *)&v258[8];
  *((_QWORD *)v120 + 10) = v259;
  *((_OWORD *)v120 + 4) = v124;
  *(_QWORD *)&v258[8] = 0;
  *(_QWORD *)&v258[16] = 0;
  v259 = 0;
  v247 = v120 + 88;
  if ((v258[7] & 0x80000000) != 0)
    goto LABEL_288;
LABEL_292:
  if (SHIBYTE(v256) < 0)
LABEL_289:
    operator delete((void *)v255);
LABEL_293:
  v125 = sub_20EBA4AA4();
  if (*((char *)v125 + 23) < 0)
  {
    sub_20E860C04(v252, (void *)*v125, v125[1]);
  }
  else
  {
    v126 = *(_OWORD *)v125;
    v253 = v125[2];
    *(_OWORD *)v252 = v126;
  }
  v127 = HIBYTE(v253);
  if (v253 >= 0)
  {
    v128 = v252;
  }
  else
  {
    v127 = (uint64_t)v252[1];
    v128 = (void **)v252[0];
  }
  if (v127 >= 18)
  {
    v129 = (char *)v128 + v127;
    v130 = v128;
    do
    {
      v131 = (char *)memchr(v130, 67, v127 - 17);
      if (!v131)
        break;
      if (*(_QWORD *)v131 == 0x456C656E6E616843
        && *((_QWORD *)v131 + 1) == 0x696F763C726F7272
        && *((_WORD *)v131 + 8) == 15972)
      {
        if (v131 != v129 && v131 - (char *)v128 != -1)
          goto LABEL_337;
        break;
      }
      v130 = (void **)(v131 + 1);
      v127 = v129 - (char *)v130;
    }
    while (v129 - (char *)v130 >= 18);
  }
  v254[0] = (void *)(v112 + 1);
  LODWORD(v254[1]) = 3;
  v134 = SHIBYTE(v263);
  if (v263 >= 0)
    v135 = HIBYTE(v263);
  else
    v135 = *((_QWORD *)&__dst + 1);
  v136 = v135 + 6;
  if (v135 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v136 >= 0x17)
  {
    v138 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v136 | 7) != 0x17)
      v138 = v136 | 7;
    v139 = v138 + 1;
    v137 = (__int128 *)operator new(v138 + 1);
    *((_QWORD *)&v255 + 1) = v135 + 6;
    v256 = v139 | 0x8000000000000000;
    *(_QWORD *)&v255 = v137;
    v2 = v242;
  }
  else
  {
    v256 = 0;
    v255 = 0uLL;
    v137 = &v255;
    HIBYTE(v256) = v135 + 6;
    if (!v135)
      goto LABEL_329;
  }
  if (v134 >= 0)
    v140 = &__dst;
  else
    v140 = (__int128 *)__dst;
  memmove(v137, v140, v135);
LABEL_329:
  strcpy((char *)v137 + v135, ".Error");
  *(_WORD *)&v258[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v259) = 0;
  v141 = v247;
  if ((unint64_t)v247 >= v248)
  {
    v247 = sub_20EBA558C((char **)&v246, (uint64_t)v254);
    if (SHIBYTE(v259) < 0)
    {
      operator delete(*(void **)&v258[8]);
      if ((v258[7] & 0x80000000) == 0)
        goto LABEL_336;
    }
    else if ((v258[7] & 0x80000000) == 0)
    {
      goto LABEL_336;
    }
LABEL_331:
    operator delete((void *)__p);
    if (SHIBYTE(v256) < 0)
      goto LABEL_332;
    goto LABEL_337;
  }
  v142 = v254[0];
  *((_DWORD *)v247 + 2) = v254[1];
  *(_QWORD *)v141 = v142;
  v143 = v255;
  *((_QWORD *)v141 + 4) = v256;
  *((_OWORD *)v141 + 1) = v143;
  v256 = 0;
  v255 = 0uLL;
  v144 = *(_QWORD *)v258;
  *(_OWORD *)(v141 + 40) = __p;
  *((_QWORD *)v141 + 7) = v144;
  *(_QWORD *)v258 = 0;
  __p = 0uLL;
  v145 = *(_OWORD *)&v258[8];
  *((_QWORD *)v141 + 10) = v259;
  *((_OWORD *)v141 + 4) = v145;
  *(_QWORD *)&v258[8] = 0;
  *(_QWORD *)&v258[16] = 0;
  v259 = 0;
  v247 = v141 + 88;
  if ((v258[7] & 0x80000000) != 0)
    goto LABEL_331;
LABEL_336:
  if (SHIBYTE(v256) < 0)
  {
LABEL_332:
    operator delete((void *)v255);
    v146 = *(std::__shared_weak_count **)(v4 + 472);
    if (!v146)
      goto LABEL_341;
    goto LABEL_338;
  }
LABEL_337:
  v146 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v146)
  {
LABEL_341:
    v249 = 0;
    v250 = 0;
    v251 = 0;
    v150 = 0;
    goto LABEL_358;
  }
LABEL_338:
  v147 = std::__shared_weak_count::lock(v146);
  v254[1] = v147;
  if (!v147)
    goto LABEL_341;
  v148 = v147;
  v149 = *(void **)(v4 + 464);
  v254[0] = v149;
  if (v149)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v149 + 24))(&v249);
  }
  else
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
  }
  v151 = (unint64_t *)&v148->__shared_owners_;
  do
    v152 = __ldaxr(v151);
  while (__stlxr(v152 - 1, v151));
  if (v152)
  {
    v150 = v249;
    v153 = v250;
    if (v249 == v250)
      goto LABEL_358;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
    v150 = v249;
    v153 = v250;
    if (v249 == v250)
      goto LABEL_358;
  }
  do
  {
    v254[0] = (void *)v112;
    v254[1] = *v150;
    v256 = 0;
    v255 = 0uLL;
    v155 = v244;
    if ((unint64_t)v244 < v245)
    {
      *(_OWORD *)v244 = *(_OWORD *)v254;
      v154 = v255;
      *((_QWORD *)v155 + 4) = v256;
      *((_OWORD *)v155 + 1) = v154;
      v244 = v155 + 40;
    }
    else
    {
      v244 = sub_20EBA5F8C(&v243, (uint64_t)v254);
      if (SHIBYTE(v256) < 0)
        operator delete((void *)v255);
    }
    ++v150;
  }
  while (v150 != v153);
  v150 = v249;
LABEL_358:
  if (v150)
  {
    v250 = v150;
    operator delete(v150);
  }
  v156 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v156 || (v157 = std::__shared_weak_count::lock(v156), (v254[1] = v157) == 0))
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
    v160 = 0;
    goto LABEL_379;
  }
  v158 = v157;
  v159 = *(void **)(v4 + 464);
  v254[0] = v159;
  if (v159)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v159 + 32))(&v249);
  }
  else
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
  }
  v161 = (unint64_t *)&v158->__shared_owners_;
  do
    v162 = __ldaxr(v161);
  while (__stlxr(v162 - 1, v161));
  if (v162)
  {
    v160 = v249;
    v163 = v250;
    if (v249 == v250)
      goto LABEL_379;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
    v160 = v249;
    v163 = v250;
    if (v249 == v250)
      goto LABEL_379;
  }
  v164 = (void *)(v112 + 1);
  do
  {
    v254[0] = v164;
    v254[1] = *v160;
    v256 = 0;
    v255 = 0uLL;
    v166 = v244;
    if ((unint64_t)v244 < v245)
    {
      *(_OWORD *)v244 = *(_OWORD *)v254;
      v165 = v255;
      *((_QWORD *)v166 + 4) = v256;
      *((_OWORD *)v166 + 1) = v165;
      v244 = v166 + 40;
    }
    else
    {
      v244 = sub_20EBA5F8C(&v243, (uint64_t)v254);
      if (SHIBYTE(v256) < 0)
        operator delete((void *)v255);
    }
    ++v160;
  }
  while (v160 != v163);
  v160 = v249;
LABEL_379:
  if (v160)
  {
    v250 = v160;
    operator delete(v160);
  }
  if (SHIBYTE(v253) < 0)
  {
    operator delete(v252[0]);
    if ((SHIBYTE(v261) & 0x80000000) == 0)
    {
LABEL_383:
      if ((SHIBYTE(v263) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_388:
      operator delete((void *)__dst);
      if ((*(char *)(v241 + 31) & 0x80000000) == 0)
        goto LABEL_385;
      goto LABEL_389;
    }
  }
  else if ((SHIBYTE(v261) & 0x80000000) == 0)
  {
    goto LABEL_383;
  }
  operator delete((void *)v260);
  if (SHIBYTE(v263) < 0)
    goto LABEL_388;
LABEL_384:
  if ((*(char *)(v241 + 31) & 0x80000000) == 0)
  {
LABEL_385:
    v167 = *(_OWORD *)(v241 + 8);
    *(_QWORD *)&v255 = *(_QWORD *)(v241 + 24);
    *(_OWORD *)v254 = v167;
    goto LABEL_390;
  }
LABEL_389:
  sub_20E860C04(v254, *(void **)(v241 + 8), *(_QWORD *)(v241 + 16));
LABEL_390:
  v168 = *(_QWORD *)(v241 + 56) != 0;
  if (*(char *)(v241 + 55) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(v241 + 32), *(_QWORD *)(v241 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(v241 + 32);
    v263 = *(_QWORD *)(v241 + 48);
  }
  sub_20EBA690C((uint64_t)v264, (__int128 *)v254, v168, (uint64_t *)&v246, (uint64_t *)&v243, &__dst);
  if (SHIBYTE(v263) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v255) & 0x80000000) == 0)
    {
LABEL_395:
      v169 = (char *)v243;
      if (v243)
        goto LABEL_396;
LABEL_408:
      v171 = (char *)v246;
      if (v246)
        goto LABEL_409;
      goto LABEL_398;
    }
  }
  else if ((SBYTE7(v255) & 0x80000000) == 0)
  {
    goto LABEL_395;
  }
  operator delete(v254[0]);
  v169 = (char *)v243;
  if (!v243)
    goto LABEL_408;
LABEL_396:
  v170 = v244;
  if (v244 != v169)
  {
    do
    {
      if (*(v170 - 1) < 0)
        operator delete(*((void **)v170 - 3));
      v170 -= 40;
    }
    while (v170 != v169);
    v244 = v169;
    operator delete(v243);
    v171 = (char *)v246;
    if (v246)
      goto LABEL_409;
LABEL_398:
    v246 = 0;
    v247 = 0;
    v248 = 0;
    v243 = 0;
    v244 = 0;
    v245 = 0;
    v172 = v2[10];
    if (v172)
      goto LABEL_399;
LABEL_421:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v172 = v2[10];
    if ((*(char *)(v172 + 31) & 0x80000000) == 0)
      goto LABEL_400;
    goto LABEL_423;
  }
  v244 = v169;
  operator delete(v169);
  v171 = (char *)v246;
  if (!v246)
    goto LABEL_398;
LABEL_409:
  v174 = v247;
  v175 = v171;
  if (v247 != v171)
  {
    while (1)
    {
      while (*(v174 - 1) < 0)
      {
        operator delete(*((void **)v174 - 3));
        if (*(v174 - 25) < 0)
          goto LABEL_411;
LABEL_417:
        if ((*(v174 - 49) & 0x80000000) == 0)
          goto LABEL_412;
LABEL_418:
        operator delete(*((void **)v174 - 9));
        v174 -= 88;
        if (v174 == v171)
        {
LABEL_419:
          v175 = v246;
          goto LABEL_420;
        }
      }
      if ((*(v174 - 25) & 0x80000000) == 0)
        goto LABEL_417;
LABEL_411:
      operator delete(*((void **)v174 - 6));
      if (*(v174 - 49) < 0)
        goto LABEL_418;
LABEL_412:
      v174 -= 88;
      if (v174 == v171)
        goto LABEL_419;
    }
  }
LABEL_420:
  v247 = v171;
  operator delete(v175);
  v246 = 0;
  v247 = 0;
  v248 = 0;
  v243 = 0;
  v244 = 0;
  v245 = 0;
  v172 = v2[10];
  if (!v172)
    goto LABEL_421;
LABEL_399:
  if ((*(char *)(v172 + 31) & 0x80000000) == 0)
  {
LABEL_400:
    v173 = *(_OWORD *)(v172 + 8);
    v263 = *(_QWORD *)(v172 + 24);
    __dst = v173;
    goto LABEL_424;
  }
LABEL_423:
  sub_20E860C04(&__dst, *(void **)(v172 + 8), *(_QWORD *)(v172 + 16));
LABEL_424:
  v176 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v172 + 96) + 48))(*(_QWORD *)(v172 + 96));
  v177 = sub_20EC72848();
  if (*((char *)v177 + 23) < 0)
  {
    sub_20E860C04(&v260, (void *)*v177, v177[1]);
  }
  else
  {
    v178 = *(_OWORD *)v177;
    v261 = v177[2];
    v260 = v178;
  }
  v179 = HIBYTE(v261);
  if (v261 >= 0)
  {
    v180 = &v260;
  }
  else
  {
    v179 = *((_QWORD *)&v260 + 1);
    v180 = (__int128 *)v260;
  }
  if (v179 >= 4)
  {
    v181 = (char *)v180 + v179;
    v182 = v180;
    do
    {
      v183 = (char *)memchr(v182, 118, v179 - 3);
      if (!v183)
        break;
      if (*(_DWORD *)v183 == 1684631414)
      {
        if (v183 == v181 || v183 - (char *)v180 == -1)
          break;
        v254[0] = (void *)v176;
        LODWORD(v254[1]) = 4;
        if (SHIBYTE(v263) < 0)
        {
          sub_20E860C04(&v255, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v255 = __dst;
          v256 = v263;
        }
        if (*(char *)(v172 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v172 + 32), *(_QWORD *)(v172 + 40));
        }
        else
        {
          v239 = *(_OWORD *)(v172 + 32);
          *(_QWORD *)v258 = *(_QWORD *)(v172 + 48);
          __p = v239;
        }
        sub_20ED2C954();
        if (byte_254A5F09F < 0)
        {
          sub_20E860C04(&v258[8], (void *)xmmword_254A5F088, *((unint64_t *)&xmmword_254A5F088 + 1));
        }
        else
        {
          *(_OWORD *)&v258[8] = xmmword_254A5F088;
          v259 = unk_254A5F098;
        }
        v185 = v247;
        if ((unint64_t)v247 < v248)
          goto LABEL_450;
        goto LABEL_453;
      }
      v182 = (__int128 *)(v183 + 1);
      v179 = v181 - (char *)v182;
    }
    while (v181 - (char *)v182 >= 4);
  }
  v254[0] = (void *)v176;
  LODWORD(v254[1]) = 2;
  if (SHIBYTE(v263) < 0)
  {
    sub_20E860C04(&v255, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v255 = __dst;
    v256 = v263;
  }
  if (*(char *)(v172 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v172 + 32), *(_QWORD *)(v172 + 40));
  }
  else
  {
    v184 = *(_OWORD *)(v172 + 32);
    *(_QWORD *)v258 = *(_QWORD *)(v172 + 48);
    __p = v184;
  }
  sub_20ED2C954();
  if (byte_254A5F09F < 0)
  {
    sub_20E860C04(&v258[8], (void *)xmmword_254A5F088, *((unint64_t *)&xmmword_254A5F088 + 1));
  }
  else
  {
    *(_OWORD *)&v258[8] = xmmword_254A5F088;
    v259 = unk_254A5F098;
  }
  v185 = v247;
  if ((unint64_t)v247 >= v248)
  {
LABEL_453:
    v247 = sub_20EBA558C((char **)&v246, (uint64_t)v254);
    if (SHIBYTE(v259) < 0)
    {
      operator delete(*(void **)&v258[8]);
      if ((v258[7] & 0x80000000) == 0)
        goto LABEL_455;
    }
    else if ((v258[7] & 0x80000000) == 0)
    {
      goto LABEL_455;
    }
LABEL_451:
    operator delete((void *)__p);
    if ((SHIBYTE(v256) & 0x80000000) == 0)
      goto LABEL_456;
    goto LABEL_452;
  }
LABEL_450:
  v186 = v254[0];
  *((_DWORD *)v185 + 2) = v254[1];
  *(_QWORD *)v185 = v186;
  v187 = v255;
  *((_QWORD *)v185 + 4) = v256;
  *((_OWORD *)v185 + 1) = v187;
  v256 = 0;
  v255 = 0uLL;
  v188 = *(_QWORD *)v258;
  *(_OWORD *)(v185 + 40) = __p;
  *((_QWORD *)v185 + 7) = v188;
  *(_QWORD *)v258 = 0;
  __p = 0uLL;
  v189 = *(_OWORD *)&v258[8];
  *((_QWORD *)v185 + 10) = v259;
  *((_OWORD *)v185 + 4) = v189;
  *(_QWORD *)&v258[8] = 0;
  *(_QWORD *)&v258[16] = 0;
  v259 = 0;
  v247 = v185 + 88;
  if ((v258[7] & 0x80000000) != 0)
    goto LABEL_451;
LABEL_455:
  if (SHIBYTE(v256) < 0)
LABEL_452:
    operator delete((void *)v255);
LABEL_456:
  v190 = sub_20EBA4AA4();
  if (*((char *)v190 + 23) < 0)
  {
    sub_20E860C04(v252, (void *)*v190, v190[1]);
  }
  else
  {
    v191 = *(_OWORD *)v190;
    v253 = v190[2];
    *(_OWORD *)v252 = v191;
  }
  v192 = HIBYTE(v253);
  if (v253 >= 0)
  {
    v193 = v252;
  }
  else
  {
    v192 = (uint64_t)v252[1];
    v193 = (void **)v252[0];
  }
  if (v192 >= 18)
  {
    v194 = (char *)v193 + v192;
    v195 = v193;
    do
    {
      v196 = (char *)memchr(v195, 67, v192 - 17);
      if (!v196)
        break;
      if (*(_QWORD *)v196 == 0x456C656E6E616843
        && *((_QWORD *)v196 + 1) == 0x696F763C726F7272
        && *((_WORD *)v196 + 8) == 15972)
      {
        if (v196 != v194 && v196 - (char *)v193 != -1)
          goto LABEL_500;
        break;
      }
      v195 = (void **)(v196 + 1);
      v192 = v194 - (char *)v195;
    }
    while (v194 - (char *)v195 >= 18);
  }
  v254[0] = (void *)(v176 + 1);
  LODWORD(v254[1]) = 3;
  v199 = SHIBYTE(v263);
  if (v263 >= 0)
    v200 = HIBYTE(v263);
  else
    v200 = *((_QWORD *)&__dst + 1);
  v201 = v200 + 6;
  if (v200 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v201 >= 0x17)
  {
    v203 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v201 | 7) != 0x17)
      v203 = v201 | 7;
    v204 = v203 + 1;
    v202 = (__int128 *)operator new(v203 + 1);
    *((_QWORD *)&v255 + 1) = v200 + 6;
    v256 = v204 | 0x8000000000000000;
    *(_QWORD *)&v255 = v202;
    v2 = v242;
  }
  else
  {
    v256 = 0;
    v255 = 0uLL;
    v202 = &v255;
    HIBYTE(v256) = v200 + 6;
    if (!v200)
      goto LABEL_492;
  }
  if (v199 >= 0)
    v205 = &__dst;
  else
    v205 = (__int128 *)__dst;
  memmove(v202, v205, v200);
LABEL_492:
  strcpy((char *)v202 + v200, ".Error");
  *(_WORD *)&v258[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v259) = 0;
  v206 = v247;
  if ((unint64_t)v247 >= v248)
  {
    v247 = sub_20EBA558C((char **)&v246, (uint64_t)v254);
    if (SHIBYTE(v259) < 0)
    {
      operator delete(*(void **)&v258[8]);
      if ((v258[7] & 0x80000000) == 0)
        goto LABEL_499;
    }
    else if ((v258[7] & 0x80000000) == 0)
    {
      goto LABEL_499;
    }
LABEL_494:
    operator delete((void *)__p);
    if (SHIBYTE(v256) < 0)
      goto LABEL_495;
    goto LABEL_500;
  }
  v207 = v254[0];
  *((_DWORD *)v247 + 2) = v254[1];
  *(_QWORD *)v206 = v207;
  v208 = v255;
  *((_QWORD *)v206 + 4) = v256;
  *((_OWORD *)v206 + 1) = v208;
  v256 = 0;
  v255 = 0uLL;
  v209 = *(_QWORD *)v258;
  *(_OWORD *)(v206 + 40) = __p;
  *((_QWORD *)v206 + 7) = v209;
  *(_QWORD *)v258 = 0;
  __p = 0uLL;
  v210 = *(_OWORD *)&v258[8];
  *((_QWORD *)v206 + 10) = v259;
  *((_OWORD *)v206 + 4) = v210;
  *(_QWORD *)&v258[8] = 0;
  *(_QWORD *)&v258[16] = 0;
  v259 = 0;
  v247 = v206 + 88;
  if ((v258[7] & 0x80000000) != 0)
    goto LABEL_494;
LABEL_499:
  if (SHIBYTE(v256) < 0)
  {
LABEL_495:
    operator delete((void *)v255);
    v211 = *(std::__shared_weak_count **)(v172 + 136);
    if (!v211)
      goto LABEL_504;
    goto LABEL_501;
  }
LABEL_500:
  v211 = *(std::__shared_weak_count **)(v172 + 136);
  if (!v211)
  {
LABEL_504:
    v249 = 0;
    v250 = 0;
    v251 = 0;
    v215 = 0;
    goto LABEL_521;
  }
LABEL_501:
  v212 = std::__shared_weak_count::lock(v211);
  v254[1] = v212;
  if (!v212)
    goto LABEL_504;
  v213 = v212;
  v214 = *(void **)(v172 + 128);
  v254[0] = v214;
  if (v214)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v214 + 24))(&v249);
  }
  else
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
  }
  v216 = (unint64_t *)&v213->__shared_owners_;
  do
    v217 = __ldaxr(v216);
  while (__stlxr(v217 - 1, v216));
  if (v217)
  {
    v215 = v249;
    v218 = v250;
    if (v249 == v250)
      goto LABEL_521;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
    std::__shared_weak_count::__release_weak(v213);
    v215 = v249;
    v218 = v250;
    if (v249 == v250)
      goto LABEL_521;
  }
  do
  {
    v254[0] = (void *)v176;
    v254[1] = *v215;
    v256 = 0;
    v255 = 0uLL;
    v220 = v244;
    if ((unint64_t)v244 < v245)
    {
      *(_OWORD *)v244 = *(_OWORD *)v254;
      v219 = v255;
      *((_QWORD *)v220 + 4) = v256;
      *((_OWORD *)v220 + 1) = v219;
      v244 = v220 + 40;
    }
    else
    {
      v244 = sub_20EBA5F8C(&v243, (uint64_t)v254);
      if (SHIBYTE(v256) < 0)
        operator delete((void *)v255);
    }
    ++v215;
  }
  while (v215 != v218);
  v215 = v249;
LABEL_521:
  if (v215)
  {
    v250 = v215;
    operator delete(v215);
  }
  v221 = *(std::__shared_weak_count **)(v172 + 136);
  if (!v221 || (v222 = std::__shared_weak_count::lock(v221), (v254[1] = v222) == 0))
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
    v225 = 0;
    goto LABEL_542;
  }
  v223 = v222;
  v224 = *(void **)(v172 + 128);
  v254[0] = v224;
  if (v224)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v224 + 32))(&v249);
  }
  else
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
  }
  v226 = (unint64_t *)&v223->__shared_owners_;
  do
    v227 = __ldaxr(v226);
  while (__stlxr(v227 - 1, v226));
  if (v227)
  {
    v225 = v249;
    v228 = v250;
    if (v249 == v250)
      goto LABEL_542;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
    std::__shared_weak_count::__release_weak(v223);
    v225 = v249;
    v228 = v250;
    if (v249 == v250)
      goto LABEL_542;
  }
  do
  {
    v254[0] = (void *)(v176 + 1);
    v254[1] = *v225;
    v256 = 0;
    v255 = 0uLL;
    v230 = v244;
    if ((unint64_t)v244 < v245)
    {
      *(_OWORD *)v244 = *(_OWORD *)v254;
      v229 = v255;
      *((_QWORD *)v230 + 4) = v256;
      *((_OWORD *)v230 + 1) = v229;
      v244 = v230 + 40;
    }
    else
    {
      v244 = sub_20EBA5F8C(&v243, (uint64_t)v254);
      if (SHIBYTE(v256) < 0)
        operator delete((void *)v255);
    }
    ++v225;
  }
  while (v225 != v228);
  v225 = v249;
LABEL_542:
  if (v225)
  {
    v250 = v225;
    operator delete(v225);
  }
  if (SHIBYTE(v253) < 0)
  {
    operator delete(v252[0]);
    if ((SHIBYTE(v261) & 0x80000000) == 0)
    {
LABEL_546:
      if ((SHIBYTE(v263) & 0x80000000) == 0)
        goto LABEL_547;
LABEL_551:
      operator delete((void *)__dst);
      if ((*((char *)v2 + 39) & 0x80000000) == 0)
        goto LABEL_548;
      goto LABEL_552;
    }
  }
  else if ((SHIBYTE(v261) & 0x80000000) == 0)
  {
    goto LABEL_546;
  }
  operator delete((void *)v260);
  if (SHIBYTE(v263) < 0)
    goto LABEL_551;
LABEL_547:
  if ((*((char *)v2 + 39) & 0x80000000) == 0)
  {
LABEL_548:
    *(_OWORD *)v254 = *((_OWORD *)v2 + 1);
    *(_QWORD *)&v255 = v2[4];
    goto LABEL_553;
  }
LABEL_552:
  sub_20E860C04(v254, (void *)v2[2], v2[3]);
LABEL_553:
  v231 = v2[8] != 0;
  if (*((char *)v2 + 63) < 0)
  {
    sub_20E860C04(&__dst, (void *)v2[5], v2[6]);
  }
  else
  {
    __dst = *(_OWORD *)(v2 + 5);
    v263 = v2[7];
  }
  sub_20EBA690C((uint64_t)v265, (__int128 *)v254, v231, (uint64_t *)&v246, (uint64_t *)&v243, &__dst);
  if ((SHIBYTE(v263) & 0x80000000) == 0)
  {
    if ((SBYTE7(v255) & 0x80000000) == 0)
      goto LABEL_558;
LABEL_568:
    operator delete(v254[0]);
    v232 = (char *)v243;
    if (v243)
      goto LABEL_559;
LABEL_569:
    v234 = (char *)v246;
    if (v246)
      goto LABEL_570;
    goto LABEL_582;
  }
  operator delete((void *)__dst);
  if (SBYTE7(v255) < 0)
    goto LABEL_568;
LABEL_558:
  v232 = (char *)v243;
  if (!v243)
    goto LABEL_569;
LABEL_559:
  v233 = v244;
  if (v244 == v232)
  {
    v244 = v232;
    operator delete(v232);
    v234 = (char *)v246;
    if (!v246)
      goto LABEL_582;
LABEL_570:
    v235 = v247;
    v236 = v234;
    if (v247 == v234)
    {
LABEL_581:
      v247 = v234;
      operator delete(v236);
      goto LABEL_582;
    }
    while (1)
    {
      while (*(v235 - 1) < 0)
      {
        operator delete(*((void **)v235 - 3));
        if (*(v235 - 25) < 0)
          goto LABEL_572;
LABEL_578:
        if ((*(v235 - 49) & 0x80000000) == 0)
          goto LABEL_573;
LABEL_579:
        operator delete(*((void **)v235 - 9));
        v235 -= 88;
        if (v235 == v234)
        {
LABEL_580:
          v236 = v246;
          goto LABEL_581;
        }
      }
      if ((*(v235 - 25) & 0x80000000) == 0)
        goto LABEL_578;
LABEL_572:
      operator delete(*((void **)v235 - 6));
      if (*(v235 - 49) < 0)
        goto LABEL_579;
LABEL_573:
      v235 -= 88;
      if (v235 == v234)
        goto LABEL_580;
    }
  }
  do
  {
    if (*(v233 - 1) < 0)
      operator delete(*((void **)v233 - 3));
    v233 -= 40;
  }
  while (v233 != v232);
  v244 = v232;
  operator delete(v243);
  v234 = (char *)v246;
  if (v246)
    goto LABEL_570;
LABEL_582:
  sub_20EBA4824(a1, (uint64_t)v264, 2uLL);
  sub_20EBA8C18((uint64_t)v265);
  return sub_20EBA8C18((uint64_t)v264);
}

void sub_20ED2BE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  if (a35 < 0)
    operator delete(__p);
  if (a51 < 0)
    operator delete(a46);
  if (a58 < 0)
    operator delete(a53);
  sub_20EBA4920(&a12);
  sub_20EBA4990(&a15);
  sub_20EBA8C18((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void sub_20ED2C220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v56;

  if (a35 < 0)
  {
    operator delete(__p);
    v56 = a18;
    if (a18)
      goto LABEL_3;
  }
  else
  {
    v56 = a18;
    if (a18)
    {
LABEL_3:
      a19 = (uint64_t)v56;
      operator delete(v56);
      if ((a26 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_7:
      operator delete(a21);
LABEL_8:
      if (a48 < 0)
        operator delete(a43);
      if (a55 < 0)
        operator delete(a50);
      sub_20EBA4920((void **)&a12);
      sub_20EBA4990((void **)&a15);
      _Unwind_Resume(a1);
    }
  }
  if ((a26 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_20ED2C2B4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD **v2;

  v1 = *(_QWORD **)(a1 + 56);
  v2 = *(_QWORD ***)(*v1 + 72);
  (*(void (**)(_QWORD *))(*v2[9] + 64))(v2[9]);
  (*(void (**)(_QWORD *))(*v2[30] + 64))(v2[30]);
  (*(void (**)(_QWORD *))(*v2[51] + 64))(v2[51]);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1[10] + 72) + 64))(*(_QWORD *)(v1[10] + 72));
}

uint64_t sub_20ED2C318(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9E1608;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED2C3A0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9E1608;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_20ED2C42C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5EF50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5EF50))
  {
    sub_20ED2C4E4();
    if (byte_254A5EFF7 < 0)
    {
      sub_20E860C04(&xmmword_254A5EFB0, (void *)xmmword_254A5EFE0, *((unint64_t *)&xmmword_254A5EFE0 + 1));
    }
    else
    {
      xmmword_254A5EFB0 = xmmword_254A5EFE0;
      unk_254A5EFC0 = unk_254A5EFF0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EFB0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5EF50);
  }
}

void sub_20ED2C4CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EF50);
  _Unwind_Resume(a1);
}

void sub_20ED2C4E4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5EF58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5EF58))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata>> (const std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata> &)]", qword_254A5EFC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EFC8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5EF58);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5EF60);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5EF60))
    {
      sub_21023CD84((uint64_t)qword_254A5EFC8, (uint64_t)&xmmword_254A5EFE0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EFE0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5EF60);
    }
  }
}

void sub_20ED2C5B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EF60);
  _Unwind_Resume(a1);
}

void sub_20ED2C5CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EF58);
  _Unwind_Resume(a1);
}

void sub_20ED2C5E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5EF68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5EF68))
  {
    sub_20ED2C69C();
    if (byte_254A5F03F < 0)
    {
      sub_20E860C04(&xmmword_254A5EFF8, (void *)xmmword_254A5F028, *((unint64_t *)&xmmword_254A5F028 + 1));
    }
    else
    {
      xmmword_254A5EFF8 = xmmword_254A5F028;
      unk_254A5F008 = unk_254A5F038;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EFF8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5EF68);
  }
}

void sub_20ED2C684(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EF68);
  _Unwind_Resume(a1);
}

void sub_20ED2C69C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5EF70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5EF70))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata>> (const cv3d::vio::feature_detection::NodeCameraSystemFeatures &)]", qword_254A5F010);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F010, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5EF70);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5EF78);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5EF78))
    {
      sub_21023CD84((uint64_t)qword_254A5F010, (uint64_t)&xmmword_254A5F028);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F028, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5EF78);
    }
  }
}

void sub_20ED2C76C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EF78);
  _Unwind_Resume(a1);
}

void sub_20ED2C784(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EF70);
  _Unwind_Resume(a1);
}

void sub_20ED2C79C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5EF80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5EF80))
  {
    sub_20ED2C854();
    if (byte_254A5F087 < 0)
    {
      sub_20E860C04(&xmmword_254A5F040, (void *)xmmword_254A5F070, *((unint64_t *)&xmmword_254A5F070 + 1));
    }
    else
    {
      xmmword_254A5F040 = xmmword_254A5F070;
      unk_254A5F050 = unk_254A5F080;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F040, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5EF80);
  }
}

void sub_20ED2C83C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EF80);
  _Unwind_Resume(a1);
}

void sub_20ED2C854()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5EF88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5EF88))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (BOOL)]", qword_254A5F058);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F058, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5EF88);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5EF90);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5EF90))
    {
      sub_21023CD84((uint64_t)qword_254A5F058, (uint64_t)&xmmword_254A5F070);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F070, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5EF90);
    }
  }
}

void sub_20ED2C924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EF90);
  _Unwind_Resume(a1);
}

void sub_20ED2C93C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EF88);
  _Unwind_Resume(a1);
}

void sub_20ED2C954()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5EF98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5EF98))
  {
    sub_20ED2CA0C();
    if (byte_254A5F0CF < 0)
    {
      sub_20E860C04(&xmmword_254A5F088, (void *)xmmword_254A5F0B8, *((unint64_t *)&xmmword_254A5F0B8 + 1));
    }
    else
    {
      xmmword_254A5F088 = xmmword_254A5F0B8;
      unk_254A5F098 = unk_254A5F0C8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F088, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5EF98);
  }
}

void sub_20ED2C9F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EF98);
  _Unwind_Resume(a1);
}

void sub_20ED2CA0C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5EFA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5EFA0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata> (std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata>)]", qword_254A5F0A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F0A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5EFA0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5EFA8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5EFA8))
    {
      sub_21023CD84((uint64_t)qword_254A5F0A0, (uint64_t)&xmmword_254A5F0B8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F0B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5EFA8);
    }
  }
}

void sub_20ED2CADC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EFA8);
  _Unwind_Resume(a1);
}

void sub_20ED2CAF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5EFA0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED2CB0C(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  char v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  void *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  unint64_t *v96;
  unint64_t v97;
  __int128 v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  char v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  std::__shared_weak_count *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void *v122;
  char *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  unint64_t *v150;
  unint64_t v151;
  __int128 v152;
  unint64_t *v153;
  unint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  std::__shared_weak_count *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  __int128 v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v250;
  std::string *__dst;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  char v256;
  char v257;
  char v258;
  __int128 *v259;
  uint64_t v260;
  char *v262;
  std::__shared_weak_count *v263;
  char *v264;
  std::__shared_weak_count *v265;
  uint64_t (**v266)();
  _BYTE v267[24];
  _BYTE v268[24];
  __int128 v269;
  __int128 v270;
  uint64_t (**v271)();
  _BYTE v272[24];
  uint64_t (**v273)();
  __int128 v274;
  uint64_t (**v275)();
  __int128 v276;
  _QWORD *v277;
  std::__shared_weak_count *v278;
  void *v279[4];
  void *v280[4];
  char *v281;
  std::__shared_weak_count *v282;
  _QWORD *v283;
  std::__shared_weak_count *v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  void *__p[7];
  __int128 v289;
  __int128 v290;
  uint64_t (**v291)();
  __int128 v292;
  uint64_t v293;
  uint64_t (**v294)();
  __int128 v295;
  uint64_t (**v296)();
  __int128 v297;
  __int128 v298;
  __int128 v299;
  void *v300[7];
  __int128 v301;
  __int128 v302;
  uint64_t (**v303)();
  __int128 v304;
  uint64_t v305;
  uint64_t (**v306)();
  __int128 v307;
  uint64_t (**v308)();
  __int128 v309;
  __int128 v310;
  __int128 v311;
  _QWORD v312[2];
  _QWORD v313[2];
  _QWORD v314[2];
  _QWORD v315[5];

  v315[2] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = (uint64_t)&off_24C9E1650;
  strcpy((char *)a1 + 16, "OutputFwd");
  *((_BYTE *)a1 + 39) = 9;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  a1[9] = 0;
  __dst = (std::string *)(a1 + 5);
  v5 = (std::__shared_weak_count *)operator new(0x58uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v5[1]);
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = operator new();
  *(_BYTE *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)v8 = &off_24C9E16B0;
  *(_QWORD *)(v8 + 16) = &unk_24C9E1728;
  *(_QWORD *)(v8 + 24) = &unk_24C9E1768;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = v5 + 1;
  *(_QWORD *)(v8 + 80) = v5;
  v9 = (_QWORD *)operator new();
  v259 = a2;
  *v9 = &off_24C9E1840;
  *(_QWORD *)(v8 + 88) = v9;
  *(_QWORD *)(v8 + 96) = v8 + 96;
  *(_QWORD *)(v8 + 104) = v8 + 96;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = v8 + 120;
  *(_QWORD *)(v8 + 128) = v8 + 120;
  *(_QWORD *)(v8 + 136) = 0;
  v10 = (std::__shared_weak_count *)operator new();
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E1890;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  v12 = *(std::__shared_weak_count **)(v8 + 40);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_16;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(v11);
    while (__stxr(v16 + 1, v11));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *(_QWORD *)(v8 + 32) = v8;
    *(_QWORD *)(v8 + 40) = v10;
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_16:
  v266 = &off_24C9E1680;
  strcpy(v267, "channel");
  *(void **)&v267[8] = v300[0];
  *(void **)&v267[15] = *(void **)((char *)v300 + 7);
  v267[23] = 7;
  v300[0] = 0;
  *(void **)((char *)v300 + 7) = 0;
  *(_QWORD *)v268 = 0x7974706D45;
  *(void **)&v268[8] = __p[0];
  *(void **)&v268[15] = *(void **)((char *)__p + 7);
  v268[23] = 5;
  __p[0] = 0;
  *(void **)((char *)__p + 7) = 0;
  v269 = 0uLL;
  v20 = (unint64_t *)&v10->__shared_weak_owners_;
  *(_QWORD *)&v270 = v8;
  *((_QWORD *)&v270 + 1) = v10;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v271 = &off_24C9B5708;
  v22 = (_QWORD *)operator new();
  *v22 = &off_24C9B5A58;
  v22[1] = v8;
  v22[2] = v10;
  *(_QWORD *)v272 = v22;
  v23 = v270;
  if (*((_QWORD *)&v270 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 16);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    *(_OWORD *)&v272[8] = v270;
    if ((_QWORD)v270)
      v26 = v270 + 16;
    else
      v26 = 0;
    v27 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 16);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v29 = *((_QWORD *)&v270 + 1);
    v23 = v270;
    v273 = &off_24C9DEB80;
    *(_QWORD *)&v274 = v26;
    *((_QWORD *)&v274 + 1) = *((_QWORD *)&v270 + 1);
    v30 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 16);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  else
  {
    *(_QWORD *)&v272[8] = v270;
    *(_QWORD *)&v272[16] = 0;
    if ((_QWORD)v270)
      v32 = v270 + 16;
    else
      v32 = 0;
    v29 = 0;
    v273 = &off_24C9DEB80;
    v274 = v32;
  }
  if (v23)
    v33 = v23 + 24;
  else
    v33 = 0;
  v275 = &off_24C9B2310;
  *(_QWORD *)&v276 = v33;
  *((_QWORD *)&v276 + 1) = v29;
  v34 = operator new();
  *(_QWORD *)v34 = &off_24C9E1680;
  *(_OWORD *)(v34 + 8) = *(_OWORD *)v267;
  *(_QWORD *)(v34 + 24) = *(_QWORD *)&v267[16];
  memset(v267, 0, sizeof(v267));
  *(_OWORD *)(v34 + 32) = *(_OWORD *)v268;
  *(_QWORD *)(v34 + 48) = *(_QWORD *)&v268[16];
  memset(v268, 0, sizeof(v268));
  *(_OWORD *)(v34 + 56) = v269;
  v269 = 0uLL;
  *(_OWORD *)(v34 + 72) = v270;
  v270 = 0uLL;
  *(_QWORD *)(v34 + 88) = &off_24C9B5708;
  *(_OWORD *)(v34 + 96) = *(_OWORD *)v272;
  v35 = *(_QWORD *)&v272[16];
  *(_QWORD *)&v272[8] = 0;
  *(_QWORD *)&v272[16] = 0;
  *(_QWORD *)(v34 + 112) = v35;
  *(_QWORD *)(v34 + 120) = &off_24C9DEB80;
  *(_OWORD *)(v34 + 128) = v274;
  v274 = 0uLL;
  *(_QWORD *)v272 = 0;
  *(_QWORD *)(v34 + 144) = &off_24C9B2310;
  *(_OWORD *)(v34 + 152) = v276;
  v276 = 0uLL;
  a1[10] = v34;
  sub_20ED2FFB0((uint64_t)&v266);
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v37 = (char *)operator new(0x110uLL);
  *((_QWORD *)v37 + 1) = 0;
  v38 = (unint64_t *)(v37 + 8);
  *((_QWORD *)v37 + 2) = 0;
  *(_QWORD *)v37 = &off_24C9E2030;
  sub_20ED27F1C((uint64_t)(v37 + 24), v259, a3);
  v39 = operator new();
  v40 = v39;
  v262 = v37 + 24;
  v263 = (std::__shared_weak_count *)v37;
  *(_QWORD *)v39 = &off_24C9E18E0;
  v260 = v39;
  if (v37[215] < 0)
  {
    sub_20E860C04((_BYTE *)(v39 + 8), *((void **)v37 + 24), *((_QWORD *)v37 + 25));
  }
  else
  {
    *(_OWORD *)(v39 + 8) = *((_OWORD *)v37 + 12);
    *(_QWORD *)(v39 + 24) = *((_QWORD *)v37 + 26);
  }
  if (v37[239] < 0)
  {
    sub_20E860C04((_BYTE *)(v40 + 32), *((void **)v37 + 27), *((_QWORD *)v37 + 28));
  }
  else
  {
    *(_OWORD *)(v40 + 32) = *(_OWORD *)(v37 + 216);
    *(_QWORD *)(v40 + 48) = *((_QWORD *)v37 + 29);
  }
  *(_QWORD *)(v40 + 56) = 0;
  *(_QWORD *)(v40 + 64) = 0;
  v41 = (unint64_t *)operator new(0x58uLL);
  v41[1] = 0;
  v42 = v41 + 1;
  v41[2] = 0;
  *v41 = (unint64_t)&unk_24C9B6A90;
  v43 = v41 + 3;
  MEMORY[0x212BC5E10](v41 + 3);
  v277 = v41 + 3;
  v278 = (std::__shared_weak_count *)v41;
  do
    v44 = __ldxr(v42);
  while (__stxr(v44 + 1, v42));
  v264 = v37 + 24;
  v265 = (std::__shared_weak_count *)v37;
  do
    v45 = __ldxr(v38);
  while (__stxr(v45 + 1, v38));
  if (v37[55] < 0)
  {
    sub_20E860C04(v300, *((void **)v37 + 4), *((_QWORD *)v37 + 5));
  }
  else
  {
    *(_OWORD *)v300 = *((_OWORD *)v37 + 2);
    v300[2] = *((void **)v37 + 6);
  }
  if (v37[79] < 0)
  {
    sub_20E860C04(__p, *((void **)v37 + 7), *((_QWORD *)v37 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v37 + 56);
    __p[2] = *((void **)v37 + 9);
  }
  v281 = v37 + 24;
  v282 = (std::__shared_weak_count *)v37;
  do
    v46 = __ldxr(v38);
  while (__stxr(v46 + 1, v38));
  v47 = v300[0];
  *(void **)&v299 = v300[1];
  *(void **)((char *)&v299 + 7) = *(void **)((char *)&v300[1] + 7);
  v256 = HIBYTE(v300[2]);
  memset(v300, 0, 24);
  v252 = __p[0];
  v253 = v47;
  *(void **)&v298 = __p[1];
  *(void **)((char *)&v298 + 7) = *(void **)((char *)&__p[1] + 7);
  v48 = HIBYTE(__p[2]);
  memset(__p, 0, 24);
  v283 = 0;
  v284 = 0;
  *(_QWORD *)&v310 = 0;
  *(_QWORD *)((char *)&v310 + 7) = 0;
  v279[0] = v41 + 3;
  v279[1] = v41;
  v285 = 0uLL;
  v49 = (char *)operator new();
  *(_QWORD *)&v311 = v310;
  *(_QWORD *)((char *)&v311 + 7) = *(_QWORD *)((char *)&v310 + 7);
  *(_QWORD *)&v310 = 0;
  *(_QWORD *)((char *)&v310 + 7) = 0;
  v279[0] = 0;
  v279[1] = 0;
  v49[8] = 1;
  *((_QWORD *)v49 + 4) = 0;
  *((_QWORD *)v49 + 5) = 0;
  *(_QWORD *)v49 = &off_24C9E19A0;
  *((_QWORD *)v49 + 2) = &unk_24C9E1A18;
  *((_QWORD *)v49 + 3) = &unk_24C9E1A58;
  v50 = v311;
  *(_QWORD *)(v49 + 63) = *(_QWORD *)((char *)&v311 + 7);
  *((_QWORD *)v49 + 6) = 0;
  *((_QWORD *)v49 + 7) = v50;
  v49[71] = 0;
  *(_QWORD *)&v311 = 0;
  *(_QWORD *)((char *)&v311 + 7) = 0;
  *((_QWORD *)v49 + 9) = v43;
  *((_QWORD *)v49 + 10) = v41;
  v280[0] = 0;
  v280[1] = 0;
  v51 = (_QWORD *)operator new();
  *v51 = &off_24C9E1B30;
  v51[1] = v37 + 24;
  v51[2] = v37;
  v281 = 0;
  v282 = 0;
  *((_QWORD *)v49 + 11) = v51;
  *((_QWORD *)v49 + 12) = v49 + 96;
  *((_QWORD *)v49 + 13) = v49 + 96;
  *((_QWORD *)v49 + 14) = 0;
  *((_QWORD *)v49 + 15) = v49 + 120;
  *((_QWORD *)v49 + 16) = v49 + 120;
  *((_QWORD *)v49 + 17) = 0;
  v52 = (std::__shared_weak_count *)operator new();
  v52->__shared_owners_ = 0;
  v53 = (unint64_t *)&v52->__shared_owners_;
  v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E1B80;
  v52->__shared_weak_owners_ = 0;
  v52[1].__vftable = (std::__shared_weak_count_vtbl *)v49;
  v54 = (std::__shared_weak_count *)*((_QWORD *)v49 + 5);
  if (v54)
  {
    if (v54->__shared_owners_ != -1)
      goto LABEL_71;
    do
      v55 = __ldxr(v53);
    while (__stxr(v55 + 1, v53));
    v56 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    *((_QWORD *)v49 + 4) = v49;
    *((_QWORD *)v49 + 5) = v52;
    std::__shared_weak_count::__release_weak(v54);
  }
  else
  {
    do
      v58 = __ldxr(v53);
    while (__stxr(v58 + 1, v53));
    v59 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    *((_QWORD *)v49 + 4) = v49;
    *((_QWORD *)v49 + 5) = v52;
  }
  do
    v61 = __ldaxr(v53);
  while (__stlxr(v61 - 1, v53));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
LABEL_71:
  v62 = (std::__shared_weak_count *)v280[1];
  if (v280[1])
  {
    v63 = (unint64_t *)((char *)v280[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v280[0] = v49;
  v280[1] = v52;
  v65 = (std::__shared_weak_count *)v279[1];
  if (v279[1])
  {
    v66 = (unint64_t *)((char *)v279[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v266 = &off_24C9E1910;
  *(_QWORD *)v267 = v253;
  *(_QWORD *)&v267[8] = v299;
  *(_QWORD *)&v267[15] = *(_QWORD *)((char *)&v299 + 7);
  v267[23] = v256;
  *(_QWORD *)&v299 = 0;
  *(_QWORD *)((char *)&v299 + 7) = 0;
  *(_QWORD *)v268 = v252;
  *(_QWORD *)&v268[8] = v298;
  *(_QWORD *)&v268[15] = *(_QWORD *)((char *)&v298 + 7);
  v268[23] = v48;
  *(_QWORD *)&v298 = 0;
  *(_QWORD *)((char *)&v298 + 7) = 0;
  v269 = 0uLL;
  v279[0] = 0;
  v279[1] = 0;
  v69 = v280[0];
  v68 = (char *)v280[1];
  v270 = *(_OWORD *)v280;
  v280[0] = 0;
  v280[1] = 0;
  if (*((_QWORD *)&v270 + 1))
  {
    v70 = (unint64_t *)(v68 + 16);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v271 = &off_24C9B5708;
  v72 = (_QWORD *)operator new();
  *v72 = &off_24C9B5A58;
  v72[1] = v69;
  v72[2] = v68;
  *(_QWORD *)v272 = v72;
  v74 = *((_QWORD *)&v270 + 1);
  v73 = v270;
  if (!*((_QWORD *)&v270 + 1))
  {
    *(_QWORD *)&v272[8] = v270;
    *(_QWORD *)&v272[16] = 0;
    if ((_QWORD)v270)
      v78 = v270 + 16;
    else
      v78 = 0;
    goto LABEL_101;
  }
  v75 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 16);
  do
    v76 = __ldxr(v75);
  while (__stxr(v76 + 1, v75));
  v77 = *((_QWORD *)&v270 + 1);
  *(_QWORD *)&v272[8] = v73;
  *(_QWORD *)&v272[16] = v74;
  if ((_QWORD)v270)
    v78 = v270 + 16;
  else
    v78 = 0;
  if (!*((_QWORD *)&v270 + 1))
  {
    v73 = v270;
LABEL_101:
    v81 = 0;
    v273 = &off_24C9DEB80;
    v274 = v78;
    goto LABEL_102;
  }
  v79 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 16);
  do
    v80 = __ldxr(v79);
  while (__stxr(v80 + 1, v79));
  v81 = *((_QWORD *)&v270 + 1);
  v73 = v270;
  v273 = &off_24C9DEB80;
  *(_QWORD *)&v274 = v78;
  *((_QWORD *)&v274 + 1) = v77;
  if (*((_QWORD *)&v270 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 16);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
LABEL_102:
  if (v73)
    v84 = v73 + 24;
  else
    v84 = 0;
  v275 = &off_24C9B2310;
  *(_QWORD *)&v276 = v84;
  *((_QWORD *)&v276 + 1) = v81;
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
  if (*((_QWORD *)&v285 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v285 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v282;
  if (v282)
  {
    v89 = (unint64_t *)&v282->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v284;
  if (!v284)
    goto LABEL_119;
  v92 = (unint64_t *)&v284->__shared_owners_;
  do
    v93 = __ldaxr(v92);
  while (__stlxr(v93 - 1, v92));
  if (!v93)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_120:
      if ((SHIBYTE(v300[2]) & 0x80000000) == 0)
        goto LABEL_121;
      goto LABEL_125;
    }
  }
  else
  {
LABEL_119:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_120;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v300[2]) & 0x80000000) == 0)
  {
LABEL_121:
    if (v264)
      goto LABEL_127;
    goto LABEL_126;
  }
LABEL_125:
  operator delete(v300[0]);
  if (v264)
    goto LABEL_127;
LABEL_126:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_127:
  *(_QWORD *)&v299 = v41 + 3;
  *((_QWORD *)&v299 + 1) = v41;
  do
    v94 = __ldxr(v42);
  while (__stxr(v94 + 1, v42));
  if (v262)
    v95 = v262 + 56;
  else
    v95 = 0;
  *(_QWORD *)&v298 = v95;
  *((_QWORD *)&v298 + 1) = v263;
  if (v263)
  {
    v96 = (unint64_t *)&v263->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  if (v95[31] < 0)
  {
    sub_20E860C04(__p, *((void **)v95 + 1), *((_QWORD *)v95 + 2));
  }
  else
  {
    v98 = *(_OWORD *)(v95 + 8);
    __p[2] = *((void **)v95 + 3);
    *(_OWORD *)__p = v98;
  }
  if (v262[111] < 0)
  {
    sub_20E860C04(v280, *((void **)v262 + 11), *((_QWORD *)v262 + 12));
  }
  else
  {
    *(_OWORD *)v280 = *(_OWORD *)(v262 + 88);
    v280[2] = *((void **)v262 + 13);
  }
  v299 = 0uLL;
  *(_QWORD *)&v311 = v95;
  *((_QWORD *)&v311 + 1) = v263;
  if (v263)
  {
    v99 = (unint64_t *)&v263->__shared_owners_;
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  v254 = __p[0];
  *(void **)&v286 = __p[1];
  *(void **)((char *)&v286 + 7) = *(void **)((char *)&__p[1] + 7);
  v257 = HIBYTE(__p[2]);
  memset(__p, 0, 24);
  v101 = v280[0];
  v315[0] = v280[1];
  *(void **)((char *)v315 + 7) = *(void **)((char *)&v280[1] + 7);
  v102 = HIBYTE(v280[2]);
  memset(v280, 0, 24);
  v281 = 0;
  v282 = 0;
  *(_QWORD *)&v287 = 0;
  *(_QWORD *)((char *)&v287 + 7) = 0;
  v284 = 0;
  *(_QWORD *)&v285 = v41 + 3;
  *((_QWORD *)&v285 + 1) = v41;
  v283 = 0;
  v103 = (char *)operator new();
  *(_QWORD *)&v310 = v287;
  *(_QWORD *)((char *)&v310 + 7) = *(_QWORD *)((char *)&v287 + 7);
  *(_QWORD *)&v287 = 0;
  *(_QWORD *)((char *)&v287 + 7) = 0;
  v285 = 0uLL;
  v103[8] = 1;
  *((_QWORD *)v103 + 4) = 0;
  *((_QWORD *)v103 + 5) = 0;
  *(_QWORD *)v103 = &off_24C9E1BD0;
  *((_QWORD *)v103 + 2) = &unk_24C9E1C48;
  *((_QWORD *)v103 + 3) = &unk_24C9E1C88;
  v104 = v310;
  *(_QWORD *)(v103 + 63) = *(_QWORD *)((char *)&v310 + 7);
  *((_QWORD *)v103 + 6) = 0;
  *((_QWORD *)v103 + 7) = v104;
  v103[71] = 0;
  *(_QWORD *)&v310 = 0;
  *(_QWORD *)((char *)&v310 + 7) = 0;
  *((_QWORD *)v103 + 9) = v43;
  *((_QWORD *)v103 + 10) = v41;
  v279[0] = 0;
  v279[1] = 0;
  v105 = (_QWORD *)operator new();
  *v105 = &off_24C9E1D60;
  v105[1] = v95;
  v105[2] = v263;
  v311 = 0uLL;
  *((_QWORD *)v103 + 11) = v105;
  *((_QWORD *)v103 + 12) = v103 + 96;
  *((_QWORD *)v103 + 13) = v103 + 96;
  *((_QWORD *)v103 + 14) = 0;
  *((_QWORD *)v103 + 15) = v103 + 120;
  *((_QWORD *)v103 + 16) = v103 + 120;
  *((_QWORD *)v103 + 17) = 0;
  v106 = (std::__shared_weak_count *)operator new();
  v106->__shared_owners_ = 0;
  v107 = (unint64_t *)&v106->__shared_owners_;
  v106->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E1DB0;
  v106->__shared_weak_owners_ = 0;
  v106[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  v108 = (std::__shared_weak_count *)*((_QWORD *)v103 + 5);
  if (v108)
  {
    if (v108->__shared_owners_ != -1)
      goto LABEL_157;
    do
      v109 = __ldxr(v107);
    while (__stxr(v109 + 1, v107));
    v110 = (unint64_t *)&v106->__shared_weak_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
    *((_QWORD *)v103 + 4) = v103;
    *((_QWORD *)v103 + 5) = v106;
    std::__shared_weak_count::__release_weak(v108);
  }
  else
  {
    do
      v112 = __ldxr(v107);
    while (__stxr(v112 + 1, v107));
    v113 = (unint64_t *)&v106->__shared_weak_owners_;
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
    *((_QWORD *)v103 + 4) = v103;
    *((_QWORD *)v103 + 5) = v106;
  }
  do
    v115 = __ldaxr(v107);
  while (__stlxr(v115 - 1, v107));
  if (!v115)
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
  }
LABEL_157:
  v116 = (std::__shared_weak_count *)v279[1];
  if (v279[1])
  {
    v117 = (unint64_t *)((char *)v279[1] + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v279[0] = v103;
  v279[1] = v106;
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
  if (*((_QWORD *)&v285 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v285 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v300[0] = &off_24C9E1940;
  v300[1] = v254;
  v300[2] = (void *)v286;
  *(void **)((char *)&v300[2] + 7) = *(void **)((char *)&v286 + 7);
  HIBYTE(v300[3]) = v257;
  *(_QWORD *)&v286 = 0;
  *(_QWORD *)((char *)&v286 + 7) = 0;
  v300[4] = v101;
  v300[5] = (void *)v315[0];
  *(void **)((char *)&v300[5] + 7) = *(void **)((char *)v315 + 7);
  HIBYTE(v300[6]) = v102;
  v315[0] = 0;
  *(_QWORD *)((char *)v315 + 7) = 0;
  v301 = 0uLL;
  v285 = 0uLL;
  v122 = v279[0];
  v123 = (char *)v279[1];
  v302 = *(_OWORD *)v279;
  v279[0] = 0;
  v279[1] = 0;
  if (*((_QWORD *)&v302 + 1))
  {
    v124 = (unint64_t *)(v123 + 16);
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  v303 = &off_24C9B6AE0;
  v126 = (_QWORD *)operator new();
  *v126 = &off_24C9D2F70;
  v126[1] = v122;
  v126[2] = v123;
  *(_QWORD *)&v304 = v126;
  v128 = *((_QWORD *)&v302 + 1);
  v127 = v302;
  if (!*((_QWORD *)&v302 + 1))
  {
    *((_QWORD *)&v304 + 1) = v302;
    v305 = 0;
    if ((_QWORD)v302)
      v132 = v302 + 16;
    else
      v132 = 0;
    goto LABEL_187;
  }
  v129 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 16);
  do
    v130 = __ldxr(v129);
  while (__stxr(v130 + 1, v129));
  v131 = *((_QWORD *)&v302 + 1);
  *((_QWORD *)&v304 + 1) = v127;
  v305 = v128;
  if ((_QWORD)v302)
    v132 = v302 + 16;
  else
    v132 = 0;
  if (!*((_QWORD *)&v302 + 1))
  {
    v127 = v302;
LABEL_187:
    v135 = 0;
    v306 = &off_24C9DEB80;
    v307 = v132;
    goto LABEL_188;
  }
  v133 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 16);
  do
    v134 = __ldxr(v133);
  while (__stxr(v134 + 1, v133));
  v135 = *((_QWORD *)&v302 + 1);
  v127 = v302;
  v306 = &off_24C9DEB80;
  *(_QWORD *)&v307 = v132;
  *((_QWORD *)&v307 + 1) = v131;
  if (*((_QWORD *)&v302 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 16);
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
LABEL_188:
  if (v127)
    v138 = v127 + 24;
  else
    v138 = 0;
  v308 = &off_24C9B2310;
  *(_QWORD *)&v309 = v138;
  *((_QWORD *)&v309 + 1) = v135;
  v139 = v284;
  if (v284)
  {
    v140 = (unint64_t *)&v284->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = (std::__shared_weak_count *)*((_QWORD *)&v311 + 1);
  if (*((_QWORD *)&v311 + 1))
  {
    v143 = (unint64_t *)(*((_QWORD *)&v311 + 1) + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v282;
  if (!v282)
    goto LABEL_205;
  v146 = (unint64_t *)&v282->__shared_owners_;
  do
    v147 = __ldaxr(v146);
  while (__stlxr(v147 - 1, v146));
  if (!v147)
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
    if ((SHIBYTE(v280[2]) & 0x80000000) == 0)
    {
LABEL_206:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_207;
      goto LABEL_211;
    }
  }
  else
  {
LABEL_205:
    if ((SHIBYTE(v280[2]) & 0x80000000) == 0)
      goto LABEL_206;
  }
  operator delete(v280[0]);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_207:
    if ((_QWORD)v298)
      goto LABEL_213;
    goto LABEL_212;
  }
LABEL_211:
  operator delete(__p[0]);
  if ((_QWORD)v298)
    goto LABEL_213;
LABEL_212:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_213:
  *(_QWORD *)&v287 = v41 + 3;
  *((_QWORD *)&v287 + 1) = v41;
  do
    v148 = __ldxr(v42);
  while (__stxr(v148 + 1, v42));
  if (v262)
    v149 = v262 + 112;
  else
    v149 = 0;
  *(_QWORD *)&v286 = v149;
  *((_QWORD *)&v286 + 1) = v263;
  if (v263)
  {
    v150 = (unint64_t *)&v263->__shared_owners_;
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
  }
  if (v149[31] < 0)
  {
    sub_20E860C04(v280, *((void **)v149 + 1), *((_QWORD *)v149 + 2));
  }
  else
  {
    v152 = *(_OWORD *)(v149 + 8);
    v280[2] = *((void **)v149 + 3);
    *(_OWORD *)v280 = v152;
  }
  if (v262[167] < 0)
  {
    sub_20E860C04(v279, *((void **)v262 + 18), *((_QWORD *)v262 + 19));
  }
  else
  {
    *(_OWORD *)v279 = *((_OWORD *)v262 + 9);
    v279[2] = *((void **)v262 + 20);
  }
  v287 = 0uLL;
  *(_QWORD *)&v310 = v149;
  *((_QWORD *)&v310 + 1) = v263;
  if (v263)
  {
    v153 = (unint64_t *)&v263->__shared_owners_;
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
  }
  v255 = v280[0];
  v313[0] = v280[1];
  *(void **)((char *)v313 + 7) = *(void **)((char *)&v280[1] + 7);
  v258 = HIBYTE(v280[2]);
  memset(v280, 0, 24);
  v250 = v279[0];
  v312[0] = v279[1];
  *(void **)((char *)v312 + 7) = *(void **)((char *)&v279[1] + 7);
  v155 = HIBYTE(v279[2]);
  memset(v279, 0, 24);
  v311 = 0uLL;
  v314[0] = 0;
  *(_QWORD *)((char *)v314 + 7) = 0;
  v283 = v41 + 3;
  v284 = (std::__shared_weak_count *)v41;
  v281 = 0;
  v282 = 0;
  v156 = operator new();
  v315[0] = v314[0];
  *(_QWORD *)((char *)v315 + 7) = *(_QWORD *)((char *)v314 + 7);
  v314[0] = 0;
  *(_QWORD *)((char *)v314 + 7) = 0;
  v283 = 0;
  v284 = 0;
  *(_BYTE *)(v156 + 8) = 1;
  *(_QWORD *)(v156 + 32) = 0;
  *(_QWORD *)(v156 + 40) = 0;
  *(_QWORD *)v156 = &off_24C9E1E00;
  *(_QWORD *)(v156 + 16) = &unk_24C9E1E78;
  *(_QWORD *)(v156 + 24) = &unk_24C9E1EB8;
  v157 = v315[0];
  *(_QWORD *)(v156 + 63) = *(_QWORD *)((char *)v315 + 7);
  *(_QWORD *)(v156 + 48) = 0;
  *(_QWORD *)(v156 + 56) = v157;
  *(_BYTE *)(v156 + 71) = 0;
  v315[0] = 0;
  *(_QWORD *)((char *)v315 + 7) = 0;
  *(_QWORD *)(v156 + 72) = v43;
  *(_QWORD *)(v156 + 80) = v41;
  v285 = 0uLL;
  v158 = (_QWORD *)operator new();
  *v158 = &off_24C9E1F90;
  v158[1] = v149;
  v158[2] = v263;
  v310 = 0uLL;
  *(_QWORD *)(v156 + 88) = v158;
  *(_QWORD *)(v156 + 96) = v156 + 96;
  *(_QWORD *)(v156 + 104) = v156 + 96;
  *(_QWORD *)(v156 + 112) = 0;
  *(_QWORD *)(v156 + 120) = v156 + 120;
  *(_QWORD *)(v156 + 128) = v156 + 120;
  *(_QWORD *)(v156 + 136) = 0;
  v159 = (std::__shared_weak_count *)operator new();
  v159->__shared_owners_ = 0;
  v160 = (unint64_t *)&v159->__shared_owners_;
  v159->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E1FE0;
  v159->__shared_weak_owners_ = 0;
  v159[1].__vftable = (std::__shared_weak_count_vtbl *)v156;
  v161 = *(std::__shared_weak_count **)(v156 + 40);
  if (v161)
  {
    if (v161->__shared_owners_ != -1)
      goto LABEL_243;
    do
      v162 = __ldxr(v160);
    while (__stxr(v162 + 1, v160));
    v163 = (unint64_t *)&v159->__shared_weak_owners_;
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
    *(_QWORD *)(v156 + 32) = v156;
    *(_QWORD *)(v156 + 40) = v159;
    std::__shared_weak_count::__release_weak(v161);
  }
  else
  {
    do
      v165 = __ldxr(v160);
    while (__stxr(v165 + 1, v160));
    v166 = (unint64_t *)&v159->__shared_weak_owners_;
    do
      v167 = __ldxr(v166);
    while (__stxr(v167 + 1, v166));
    *(_QWORD *)(v156 + 32) = v156;
    *(_QWORD *)(v156 + 40) = v159;
  }
  do
    v168 = __ldaxr(v160);
  while (__stlxr(v168 - 1, v160));
  if (!v168)
  {
    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
    std::__shared_weak_count::__release_weak(v159);
  }
LABEL_243:
  v169 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
  if (*((_QWORD *)&v285 + 1))
  {
    v170 = (unint64_t *)(*((_QWORD *)&v285 + 1) + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  *(_QWORD *)&v285 = v156;
  *((_QWORD *)&v285 + 1) = v159;
  v172 = v284;
  if (v284)
  {
    v173 = (unint64_t *)&v284->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  __p[0] = &off_24C9E1970;
  __p[1] = v255;
  __p[2] = (void *)v313[0];
  *(void **)((char *)&__p[2] + 7) = *(void **)((char *)v313 + 7);
  HIBYTE(__p[3]) = v258;
  v313[0] = 0;
  *(_QWORD *)((char *)v313 + 7) = 0;
  __p[4] = v250;
  __p[5] = (void *)v312[0];
  *(void **)((char *)&__p[5] + 7) = *(void **)((char *)v312 + 7);
  HIBYTE(__p[6]) = v155;
  v312[0] = 0;
  *(_QWORD *)((char *)v312 + 7) = 0;
  v289 = 0uLL;
  v283 = 0;
  v284 = 0;
  v175 = v285;
  v290 = v285;
  v285 = 0uLL;
  if (*((_QWORD *)&v290 + 1))
  {
    v176 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 16);
    do
      v177 = __ldxr(v176);
    while (__stxr(v177 + 1, v176));
  }
  v291 = &off_24C9B2630;
  v178 = operator new();
  *(_QWORD *)v178 = &off_24C9BB4D0;
  *(_OWORD *)(v178 + 8) = v175;
  *(_QWORD *)&v292 = v178;
  v180 = *((_QWORD *)&v290 + 1);
  v179 = v290;
  if (!*((_QWORD *)&v290 + 1))
  {
    *((_QWORD *)&v292 + 1) = v290;
    v293 = 0;
    if ((_QWORD)v290)
      v184 = v290 + 16;
    else
      v184 = 0;
    goto LABEL_273;
  }
  v181 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 16);
  do
    v182 = __ldxr(v181);
  while (__stxr(v182 + 1, v181));
  v183 = *((_QWORD *)&v290 + 1);
  *((_QWORD *)&v292 + 1) = v179;
  v293 = v180;
  if ((_QWORD)v290)
    v184 = v290 + 16;
  else
    v184 = 0;
  if (!*((_QWORD *)&v290 + 1))
  {
    v179 = v290;
LABEL_273:
    v187 = 0;
    v294 = &off_24C9B2520;
    v295 = v184;
    goto LABEL_274;
  }
  v185 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 16);
  do
    v186 = __ldxr(v185);
  while (__stxr(v186 + 1, v185));
  v187 = *((_QWORD *)&v290 + 1);
  v179 = v290;
  v294 = &off_24C9B2520;
  *(_QWORD *)&v295 = v184;
  *((_QWORD *)&v295 + 1) = v183;
  if (*((_QWORD *)&v290 + 1))
  {
    v188 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 16);
    do
      v189 = __ldxr(v188);
    while (__stxr(v189 + 1, v188));
  }
LABEL_274:
  if (v179)
    v190 = v179 + 24;
  else
    v190 = 0;
  v296 = &off_24C9B2310;
  *(_QWORD *)&v297 = v190;
  *((_QWORD *)&v297 + 1) = v187;
  v191 = v282;
  if (v282)
  {
    v192 = (unint64_t *)&v282->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = (std::__shared_weak_count *)*((_QWORD *)&v310 + 1);
  if (*((_QWORD *)&v310 + 1))
  {
    v195 = (unint64_t *)(*((_QWORD *)&v310 + 1) + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = (std::__shared_weak_count *)*((_QWORD *)&v311 + 1);
  if (!*((_QWORD *)&v311 + 1))
    goto LABEL_291;
  v198 = (unint64_t *)(*((_QWORD *)&v311 + 1) + 8);
  do
    v199 = __ldaxr(v198);
  while (__stlxr(v199 - 1, v198));
  if (!v199)
  {
    ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
    std::__shared_weak_count::__release_weak(v197);
    if ((SHIBYTE(v279[2]) & 0x80000000) == 0)
    {
LABEL_292:
      if ((SHIBYTE(v280[2]) & 0x80000000) == 0)
        goto LABEL_293;
      goto LABEL_297;
    }
  }
  else
  {
LABEL_291:
    if ((SHIBYTE(v279[2]) & 0x80000000) == 0)
      goto LABEL_292;
  }
  operator delete(v279[0]);
  if ((SHIBYTE(v280[2]) & 0x80000000) == 0)
  {
LABEL_293:
    if ((_QWORD)v286)
      goto LABEL_299;
    goto LABEL_298;
  }
LABEL_297:
  operator delete(v280[0]);
  if ((_QWORD)v286)
    goto LABEL_299;
LABEL_298:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_299:
  v200 = operator new();
  *(_QWORD *)v200 = &off_24C9E1910;
  *(_QWORD *)(v200 + 24) = *(_QWORD *)&v267[16];
  v201 = *(_OWORD *)v267;
  memset(v267, 0, sizeof(v267));
  *(_QWORD *)(v200 + 48) = *(_QWORD *)&v268[16];
  v202 = *(_OWORD *)v268;
  memset(v268, 0, sizeof(v268));
  v203 = v269;
  v269 = 0uLL;
  v204 = v270;
  v270 = 0uLL;
  v205 = *(_OWORD *)v272;
  v206 = *(_QWORD *)&v272[16];
  *(_QWORD *)&v272[8] = 0;
  *(_QWORD *)&v272[16] = 0;
  v207 = v276;
  v276 = 0uLL;
  *(_QWORD *)(v200 + 168) = &off_24C9E1940;
  *(void **)(v200 + 192) = v300[3];
  v208 = *(_OWORD *)&v300[1];
  memset(&v300[1], 0, 24);
  *(void **)(v200 + 216) = v300[6];
  v209 = *(_OWORD *)&v300[4];
  memset(&v300[4], 0, 24);
  v210 = v301;
  v301 = 0uLL;
  v211 = v302;
  v302 = 0uLL;
  *(_QWORD *)(v200 + 256) = &off_24C9B6AE0;
  v212 = v305;
  v213 = v304;
  *((_QWORD *)&v304 + 1) = 0;
  v305 = 0;
  *(_QWORD *)(v200 + 112) = v206;
  *(_QWORD *)(v200 + 120) = &off_24C9DEB80;
  *(_QWORD *)(v200 + 280) = v212;
  *(_QWORD *)(v200 + 288) = &off_24C9DEB80;
  v214 = v307;
  v215 = v309;
  v309 = 0uLL;
  *(_QWORD *)(v200 + 336) = &off_24C9E1970;
  *(void **)(v200 + 360) = __p[3];
  *(_OWORD *)(v200 + 344) = *(_OWORD *)&__p[1];
  memset(&__p[1], 0, 24);
  *(void **)(v200 + 384) = __p[6];
  v216 = *(_OWORD *)&__p[4];
  memset(&__p[4], 0, 24);
  v217 = v289;
  v289 = 0uLL;
  v218 = v290;
  v290 = 0uLL;
  *(_QWORD *)(v200 + 424) = &off_24C9B2630;
  v219 = v292;
  v220 = v293;
  *((_QWORD *)&v292 + 1) = 0;
  v293 = 0;
  *(_QWORD *)(v200 + 448) = v220;
  *(_QWORD *)(v200 + 456) = &off_24C9B2520;
  *(_OWORD *)(v200 + 264) = v213;
  *(_OWORD *)(v200 + 296) = v214;
  *(_OWORD *)(v200 + 392) = v217;
  *(_OWORD *)(v200 + 408) = v218;
  *(_OWORD *)(v200 + 488) = v297;
  v221 = v295;
  *(_QWORD *)(v200 + 144) = &off_24C9B2310;
  *(_QWORD *)(v200 + 312) = &off_24C9B2310;
  *(_QWORD *)(v200 + 480) = &off_24C9B2310;
  v297 = 0uLL;
  *(_OWORD *)(v200 + 8) = v201;
  *(_OWORD *)(v200 + 32) = v202;
  *(_OWORD *)(v200 + 56) = v203;
  *(_OWORD *)(v200 + 72) = v204;
  *(_OWORD *)(v200 + 96) = v205;
  *(_OWORD *)(v200 + 128) = v274;
  *(_OWORD *)(v200 + 152) = v207;
  *(_OWORD *)(v200 + 176) = v208;
  *(_OWORD *)(v200 + 200) = v209;
  *(_OWORD *)(v200 + 224) = v210;
  *(_OWORD *)(v200 + 240) = v211;
  *(_OWORD *)(v200 + 320) = v215;
  *(_OWORD *)(v200 + 368) = v216;
  *(_OWORD *)(v200 + 432) = v219;
  *(_QWORD *)(v200 + 88) = &off_24C9B5708;
  *(_OWORD *)(v200 + 464) = v221;
  *(_QWORD *)(v260 + 72) = v200;
  v274 = 0uLL;
  *(_QWORD *)v272 = 0;
  *(_QWORD *)&v304 = 0;
  v307 = 0uLL;
  *(_QWORD *)&v292 = 0;
  v295 = 0uLL;
  sub_20ED32964((uint64_t)__p);
  v222 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
  if (*((_QWORD *)&v286 + 1))
  {
    v223 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
  if (*((_QWORD *)&v287 + 1))
  {
    v226 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  sub_20ED32B48((uint64_t)v300);
  v228 = (std::__shared_weak_count *)*((_QWORD *)&v298 + 1);
  if (*((_QWORD *)&v298 + 1))
  {
    v229 = (unint64_t *)(*((_QWORD *)&v298 + 1) + 8);
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
  if (*((_QWORD *)&v299 + 1))
  {
    v232 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  sub_20ED32D2C((uint64_t)&v266);
  if (v265)
  {
    v234 = (unint64_t *)&v265->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  v236 = v278;
  if (v278)
  {
    v237 = (unint64_t *)&v278->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  if (v263)
  {
    v239 = (unint64_t *)&v263->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
  v241 = *a1;
  *a1 = v260;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  v242 = *(_QWORD *)(*a1 + 72);
  v243 = a1[10];
  v266 = &off_24C9B5708;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v243 + 96) + 16))(v267);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v242 + 120) + 16))(v242 + 120, &v266);
  v244 = *(_QWORD *)v267;
  v266 = &off_24C9B5708;
  *(_QWORD *)v267 = 0;
  if (v244)
    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  v245 = *(_QWORD *)(*a1 + 72);
  v246 = a1[10];
  v266 = &off_24C9B5708;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v246 + 96) + 16))(v267);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v245 + 288) + 16))(v245 + 288, &v266);
  v247 = *(_QWORD *)v267;
  v266 = &off_24C9B5708;
  *(_QWORD *)v267 = 0;
  if (v247)
    (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
  sub_20E8B43E8(__dst, "Forward outgoing vision-only pose further", 0x29uLL);
  v248 = a1[10];
  sub_20E8B43E8((std::string *)(v248 + 8), "Vision-only PoseMetadata Fwd", 0x1CuLL);
  sub_20E8B43E8((std::string *)(v248 + 32), "Forward PoseMetadata further", 0x1CuLL);
  return a1;
}

void sub_20ED2E8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t *a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  uint64_t v71;

  if (a70 < 0)
    operator delete(__p);
  sub_20E86665C((uint64_t)&STACK[0x210]);
  sub_20E9AF634((uint64_t)&STACK[0x220]);
  sub_20ED32B48((uint64_t)&STACK[0x300]);
  sub_20E86665C((uint64_t)&STACK[0x2E0]);
  sub_20E9AF634((uint64_t)&STACK[0x2F0]);
  sub_20ED32D2C((uint64_t)&a38);
  sub_20E86665C((uint64_t)&a34);
  sub_20E9AF634((uint64_t)&a36);
  sub_20E9AF634((uint64_t)&a59);
  sub_20E86665C(a12);
  if (*(char *)(a28 + 55) < 0)
    operator delete(*a10);
  if (*(char *)(a28 + 31) < 0)
    operator delete(*a11);
  sub_20E86665C((uint64_t)&a32);
  MEMORY[0x212BC6398](a28, 0x10B3C404AE8992ELL);
  sub_20E86665C((uint64_t)&a30);
  sub_20ED330C0(a13);
  v71 = *a29;
  *a29 = 0;
  if (v71)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED2F13C(uint64_t a1)
{
  sub_20ED330C0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED2F164(uint64_t a1)
{
  sub_20ED2FFB0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED2F18C(uint64_t a1)
{
  sub_20ED2F8E4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED2F1B0(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED2FA40(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED1A468(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED2F26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED1A468(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED2F294(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED2FA40(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED1A468(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED2F42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED2F358);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED2F4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED2F500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED1A468(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED2F524(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED2F5A8(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B5708;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED2F658(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED2F66C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED2F6FC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED2F710(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED2FE04(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED2F754(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED2F768(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED2F79C(uint64_t a1)
{
  return sub_20ED2F8E4(a1 - 16);
}

void sub_20ED2F7A4(uint64_t a1)
{
  sub_20ED2F8E4(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED2F7CC(uint64_t a1, uint64_t a2)
{
  sub_20ED2F5A8(a1 - 16, a2);
}

void sub_20ED2F7D4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED2FE04(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED2F818(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED2F82C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED2F860(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED2F868(uint64_t a1)
{
  return sub_20ED2F8E4(a1 - 24);
}

void sub_20ED2F870(uint64_t a1)
{
  sub_20ED2F8E4(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED2F898(uint64_t a1)
{
  sub_20ED2F66C(a1 - 24);
}

uint64_t sub_20ED2F8A0(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED2F8AC()
{
  JUMPOUT(0x212BC6398);
}

void sub_20ED2F8C0(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t sub_20ED2F8E4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E16B0;
  *(_QWORD *)(a1 + 16) = &unk_24C9E1728;
  *(_QWORD *)(a1 + 24) = &unk_24C9E1768;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED2FA40(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20ED2FCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED2FDD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED2FDF8);
}

char *sub_20ED2FE04(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED2FEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED2FF04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED2FF28(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED2FF40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine11VIOMetadataEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine11VIOMetadataEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED2FFB0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E1680;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9DEB80;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B5708;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED30198(uint64_t a1)
{
  sub_20ED32F10(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED301C8(uint64_t a1)
{
  sub_20ED32D2C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED301EC(uint64_t a1)
{
  sub_20ED32B48(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED30210(uint64_t a1)
{
  sub_20ED32964(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED30238(uint64_t a1)
{
  sub_20ED30A34(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED3025C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED30B90(a1 + 11, a2, (uint64_t)&v5);
    if (v6)
      sub_20ED30E90(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED30318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED30E90(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED30340(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED30B90(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    sub_20ED30E90(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED304D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED30404);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED3054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED305AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED30E90(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED305D0(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED30654(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B5708;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED30704(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED30718(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED307A8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED307BC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED30FB8(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED30800(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED30814(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED30848(uint64_t a1)
{
  return sub_20ED30A34(a1 - 16);
}

void sub_20ED30850(uint64_t a1)
{
  sub_20ED30A34(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED30878(uint64_t a1, uint64_t a2)
{
  sub_20ED30654(a1 - 16, a2);
}

void sub_20ED30880(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED30FB8(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED308C4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED308D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED3090C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED30914(uint64_t a1)
{
  return sub_20ED30A34(a1 - 24);
}

void sub_20ED3091C(uint64_t a1)
{
  sub_20ED30A34(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED30944(uint64_t a1)
{
  sub_20ED30718(a1 - 24);
}

uint64_t sub_20ED3094C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED30954(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED309BC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED30A24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED30A34(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E19A0;
  *(_QWORD *)(a1 + 16) = &unk_24C9E1A18;
  *(_QWORD *)(a1 + 24) = &unk_24C9E1A58;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED30B90(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v12, v6, a2);
  if (v14)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, uint64_t *))(i[2] + 16))(i + 2, &v12);
  }
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_20E96CE78(3u);
    sub_20ED30DC0(*(_QWORD *)a3, (uint64_t)&v12);
  }
  if (v14)
  {
    v9 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_20ED30CD0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  sub_20E869AA8((uint64_t)&a17);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = &a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED30D94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED30DB4);
}

void sub_20ED30DC0(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::exception_ptr v9;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v9.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v9), v5))
  {
    sub_20E96CE78(2u);
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 152) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *(_BYTE *)(a1 + 160) = 1;
  }
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_20ED30E7C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED30E90(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED30F7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED30ED8);
}

char *sub_20ED30FB8(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED31094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED310B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED310DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED310F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine11VIOMetadataEEESA_vNS_8optionalISA_EELb0EEEE27__shared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine11VIOMetadataEEESA_vNS_8optionalISA_EELb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEESA_vNS_8optionalISA_EELb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEESA_vNS_8optionalISA_EELb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20ED31168(uint64_t a1)
{
  sub_20ED31964(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED3118C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED31AC0(a1 + 11, a2, (uint64_t)&v5);
    if (v6)
      sub_20ED30E90(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED31248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED30E90(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED31270(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED31AC0(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    sub_20ED30E90(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED31408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED31334);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED3147C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED314DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED30E90(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED31500(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED31584(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B5708;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED31634(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED31648(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED316D8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED316EC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED31CF0(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED31730(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED31744(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED31778(uint64_t a1)
{
  return sub_20ED31964(a1 - 16);
}

void sub_20ED31780(uint64_t a1)
{
  sub_20ED31964(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED317A8(uint64_t a1, uint64_t a2)
{
  sub_20ED31584(a1 - 16, a2);
}

void sub_20ED317B0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED31CF0(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED317F4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED31808(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED3183C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED31844(uint64_t a1)
{
  return sub_20ED31964(a1 - 24);
}

void sub_20ED3184C(uint64_t a1)
{
  sub_20ED31964(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED31874(uint64_t a1)
{
  sub_20ED31648(a1 - 24);
}

uint64_t sub_20ED3187C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED31884(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED318EC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED31954(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED31964(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E1BD0;
  *(_QWORD *)(a1 + 16) = &unk_24C9E1C48;
  *(_QWORD *)(a1 + 24) = &unk_24C9E1C88;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED31AC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v12, v6, a2);
  if (v14)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, uint64_t *))(i[2] + 16))(i + 2, &v12);
  }
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_20E96CE78(3u);
    sub_20ED30DC0(*(_QWORD *)a3, (uint64_t)&v12);
  }
  if (v14)
  {
    v9 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_20ED31C00(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  sub_20E869AA8((uint64_t)&a17);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = &a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED31CC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED31CE4);
}

char *sub_20ED31CF0(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED31DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED31DF0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED31E14(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED31E2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio17feature_detectio"
                     "n24NodeCameraSystemFeaturesENS0_IKNS6_15odometry_engine11VIOMetadataEEEvNS_8optionalISC_EELb0EEEE27"
                     "__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio17featu"
                                "re_detection24NodeCameraSystemFeaturesENS0_IKNS6_15odometry_engine11VIOMetadataEEEvNS_8o"
                                "ptionalISC_EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio17feature_detection24NodeCameraSystemFeaturesENS0_IKNS6_15odometry_engine11VIOMetadataEEEvNS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio17feature_detection24NodeCameraSystemFeaturesENS0_IKNS6_15odometry_engine11VIOMetadataEEEvNS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20ED31EA0(uint64_t a1)
{
  sub_20ED325FC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED31EC4(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20ED32744(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED31F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED31FA8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED32744(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED32140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20ED3206CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED321DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20ED32200(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED32284(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED32314(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED32328(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED323B8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED323CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20ED32400(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED32434(uint64_t a1)
{
  return sub_20ED325FC(a1 - 16);
}

void sub_20ED3243C(uint64_t a1)
{
  sub_20ED325FC(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED32464(uint64_t a1)
{
  sub_20ED32284(a1 - 16);
}

void sub_20ED3246C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20ED324A0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED324D4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED324DC(uint64_t a1)
{
  return sub_20ED325FC(a1 - 24);
}

void sub_20ED324E4(uint64_t a1)
{
  sub_20ED325FC(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED3250C(uint64_t a1)
{
  sub_20ED32328(a1 - 24);
}

uint64_t sub_20ED32514(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED3251C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED32584(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED325EC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED325FC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E1E00;
  *(_QWORD *)(a1 + 16) = &unk_24C9E1E78;
  *(_QWORD *)(a1 + 24) = &unk_24C9E1EB8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED32744(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ED327DC()
{
  __break(1u);
}

void sub_20ED32888(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED328A8);
}

void sub_20ED328B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED328DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED328F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorIbvvvLb0EEEE27__shared_ptr_"
                     "default_deleteIS6_S6_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorIbvvvLb0EEEE27__"
                                "shared_ptr_default_deleteIS6_S6_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorIbvvvLb0EEEE27__shared_ptr_default_deleteIS6_S6_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorIbvvvLb0EEEE27__shared_ptr_default_deleteIS6_S6_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED32964(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E1970;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2630;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED32B48(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E1940;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9DEB80;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B6AE0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED32D2C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E1910;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9DEB80;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B5708;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED32F10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E18E0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20ED32964(v2 + 336);
    sub_20ED32B48(v2 + 168);
    v3 = sub_20ED32D2C(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40EC6BA667);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20ED32964(v7 + 336);
    sub_20ED32B48(v7 + 168);
    v8 = sub_20ED32D2C(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C40EC6BA667);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED33070(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED33080(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED330B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20ED330C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E1650;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20ED2FFB0(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20ED2FFB0(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_20ED331F8(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    sub_20ED330C0((uint64_t)(result + 1));
    v2 = *v1;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20ED33250(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_24C9E2080;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_20ED33290(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_24C9E2080;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x212BC6398);
}

void sub_20ED332E0(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_20ED57648((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t sub_20ED332E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL8 v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  char v43;
  _DWORD v44[2];
  uint64_t v45;
  uint64_t v46;

  v2 = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 56);
  if (v2 != v3)
  {
    v4 = -1;
    while (1)
    {
      v5 = *(_QWORD *)(v2 + 80);
      v6 = *(_DWORD *)(v2 + 24);
      v7 = *(_DWORD *)(v2 + 40);
      v44[0] = v6;
      v44[1] = v7;
      v8 = *(_QWORD *)(v2 + 32);
      v46 = v5;
      v9 = v6 != 0;
      if (v7)
        v10 = v6 == 0;
      else
        v10 = 1;
      v11 = v8 << 32;
      if (v10)
        v11 = 0;
      v45 = v11 | v9;
      sub_20EA6AA08(&v46, v44, &v45, (uint64_t)&v37);
      v12 = v37;
      if (!v37)
        goto LABEL_26;
      v13 = v38;
      if (!v38)
        break;
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (v16)
      {
        v12 = v37;
        v17 = v38;
        if (!v38)
          break;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        v12 = v37;
        v17 = v38;
        if (!v38)
          break;
      }
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (v20)
        break;
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (v43)
      {
LABEL_23:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v12 + 96))(&v46, v12, 0);
        v21 = v41;
        v22 = v39;
        v23 = v40;
        if (v42)
          goto LABEL_27;
        goto LABEL_35;
      }
LABEL_26:
      v46 = 0;
      v21 = v41;
      v22 = v39;
      v23 = v40;
      if (v42)
      {
LABEL_27:
        if (v22)
        {
          v24 = v37;
          v25 = v38;
          if (v38)
          {
            v26 = (unint64_t *)&v38->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            do
              v28 = __ldaxr(v26);
            while (__stlxr(v28 - 1, v26));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v24 + 88))(v24, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v22 = v39;
        }
      }
LABEL_35:
      v29 = (v21 * HIDWORD(v23));
      if ((_DWORD)v29 && (_DWORD)v23)
      {
        v30 = v22 + v29;
        do
        {
          v31 = 0;
          do
            v4 = dword_210364F44[(*(_BYTE *)(v22 + v31++) ^ v4)] ^ (v4 >> 8);
          while (v23 != v31);
          v22 += v21;
        }
        while (v22 != v30);
      }
      v32 = v46;
      v46 = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      v33 = v38;
      if (v38)
      {
        v34 = (unint64_t *)&v38->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v2 += 400;
      if (v2 == v3)
        return ~v4;
    }
    if (v43)
      goto LABEL_23;
    goto LABEL_26;
  }
  return 0;
}

void sub_20ED335B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EA69240((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED335CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19;

  v19 = a18;
  a18 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_20EA69240((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED335F8(uint64_t *a1@<X1>, int a2@<W3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  int64x2_t *v20;
  int64x2_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t *v26;
  void *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE v35[516];
  _BYTE __dst[511];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v32 = 0;
  v33 = 0;
  v30 = a1[1];
  v31 = 0;
  v6 = v30 - *a1;
  if (!v6)
  {
    v8 = 0;
    if (v30 != v5)
      goto LABEL_4;
LABEL_38:
    v28 = v8;
    goto LABEL_39;
  }
  v7 = 0x9B8B577E613716AFLL * (v6 >> 3);
  if (v7 > 0x76B981DAE6076BLL)
    sub_20ED343A8();
  v8 = (uint64_t *)operator new(0x6474A8819EC8E958 * (v6 >> 3));
  v6 = (uint64_t)&v8[69 * v7];
  v31 = v8;
  v32 = v8;
  v33 = v6;
  if (v30 == v5)
    goto LABEL_38;
LABEL_4:
  v29 = a2;
  do
  {
    while (1)
    {
      if (*(_BYTE *)(v5 + 624))
      {
        v9 = *(_BYTE *)(v5 + 112);
        memcpy(__dst, (const void *)(v5 + 113), sizeof(__dst));
        v10 = 1;
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      v11 = *(_QWORD *)v5;
      v34 = 0;
      v13 = *(_BYTE **)(v5 + 40);
      v12 = *(_BYTE **)(v5 + 48);
      v14 = v12 - v13;
      if (v12 == v13)
      {
        v16 = 0;
        v15 = 0;
      }
      else
      {
        if (v14 < 0)
          sub_20ED343A8();
        v15 = operator new(v12 - v13);
        v16 = (unint64_t)v15 + 64 * (v14 >> 6);
        v34 = v16;
        memcpy(v15, v13, v14);
      }
      v35[0] = v9;
      memcpy(&v35[1], __dst, 0x1FFuLL);
      v35[512] = v10;
      if ((unint64_t)v8 >= v33)
        break;
      *v8 = v11;
      v8[2] = v16;
      v8[3] = 0;
      v8[1] = (uint64_t)v15;
      v8[3] = v34;
      memcpy(v8 + 4, v35, 0x204uLL);
      v8 += 69;
      v32 = v8;
      v5 += 632;
      if (v5 == v30)
        goto LABEL_36;
    }
    v17 = 0xF128CFC4A33F128DLL * (v8 - v31) + 1;
    if (v17 > 0x76B981DAE6076BLL)
      sub_20ED343A8();
    if (0xE2519F89467E251ALL * ((uint64_t)(v33 - (_QWORD)v31) >> 3) > v17)
      v17 = 0xE2519F89467E251ALL * ((uint64_t)(v33 - (_QWORD)v31) >> 3);
    if (0xF128CFC4A33F128DLL * ((uint64_t)(v33 - (_QWORD)v31) >> 3) >= 0x3B5CC0ED7303B5)
      v18 = 0x76B981DAE6076BLL;
    else
      v18 = v17;
    if (v18)
    {
      if (v18 > 0x76B981DAE6076BLL)
        sub_20E877A38();
      v19 = (char *)operator new(552 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (int64x2_t *)&v19[8 * (v8 - v31)];
    v20->i64[0] = v11;
    v20[1].i64[0] = 0;
    v20[1].i64[1] = 0;
    v21 = vdupq_n_s64(v16);
    v22 = &v19[552 * v18];
    v20->i64[1] = (uint64_t)v15;
    v20[1] = v21;
    memcpy(&v20[2], v35, 0x204uLL);
    if (v8 == v31)
    {
      v31 = (uint64_t *)v20;
      v33 = (unint64_t)v22;
    }
    else
    {
      v23 = 0;
      do
      {
        *(_QWORD *)((char *)&v20[-34] + v23 * 8 - 8) = v8[v23 - 69];
        v24 = (uint64_t)&v8[v23 - 68];
        *(int64x2_t *)((char *)&v20[-33] + v23 * 8 - 8) = 0u;
        *(int64x2_t *)((char *)&v20[-34] + v23 * 8) = *(int64x2_t *)v24;
        v20[-33].i64[v23] = v8[v23 - 66];
        *(_QWORD *)(v24 + 16) = 0;
        *(_OWORD *)v24 = 0u;
        memcpy((char *)&v20[-32] + v23 * 8 - 8, &v8[v23 - 65], 0x204uLL);
        v23 -= 69;
      }
      while (&v8[v23] != v31);
      v8 = v31;
      v31 = &v20->i64[v23];
      v33 = (unint64_t)v22;
      if (v32 != v8)
      {
        v25 = (void **)(v32 - 68);
        do
        {
          v27 = *v25;
          if (*v25)
          {
            v25[1] = v27;
            operator delete(v27);
          }
          v26 = (uint64_t *)(v25 - 1);
          v25 -= 69;
        }
        while (v26 != v8);
      }
    }
    if (v8)
      operator delete(v8);
    v32 = &v20[34].i64[1];
    v8 = &v20[34].i64[1];
    v5 += 632;
  }
  while (v5 != v30);
LABEL_36:
  v28 = v31;
  v6 = v33;
  a2 = v29;
LABEL_39:
  *(_QWORD *)a3 = v28;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 24) = a2;
  *(_BYTE *)(a3 + 32) = 1;
}

void sub_20ED33A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20ED33A70((void **)va);
  _Unwind_Resume(a1);
}

void sub_20ED33A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    sub_20ED33A70(&a13);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20ED33A60);
}

void **sub_20ED33A70(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 544;
      do
      {
        v7 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v7;
          operator delete(v7);
        }
        v6 = (void *)(v5 - 8);
        v5 -= 552;
      }
      while (v6 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double sub_20ED33AE8@<D0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  double result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  _OWORD v60[2];
  int v61;
  __int128 v62;
  char *v63;
  __int128 v64;
  _QWORD v65[4];
  _OWORD v66[32];
  char v67;

  v4 = *a1;
  v3 = a1[1];
  v6 = *a2;
  v5 = a2[1];
  v7 = 0xED7303B5CC0ED73 * ((*a1 - v3) >> 3);
  v58 = 0uLL;
  v59 = 0;
  sub_20ED343BC((uint64_t)&v58, v7);
  v8 = v4 == v3 && v6 == v5;
  if (!v8)
  {
    v9 = v6 + 64;
    v10 = v4 + 552;
    while (1)
    {
      v11 = v9;
      v12 = *(unsigned __int8 *)(v10 - 8);
      v57 = 0u;
      if (*(_BYTE *)(v10 - 8))
      {
        v55 = *(_OWORD *)(v10 - 40);
        v56 = *(_OWORD *)(v10 - 24);
        v53 = *(_OWORD *)(v10 - 72);
        v54 = *(_OWORD *)(v10 - 56);
        v51 = *(_OWORD *)(v10 - 104);
        v52 = *(_OWORD *)(v10 - 88);
        v49 = *(_OWORD *)(v10 - 136);
        v50 = *(_OWORD *)(v10 - 120);
        v47 = *(_OWORD *)(v10 - 168);
        v48 = *(_OWORD *)(v10 - 152);
        v45 = *(_OWORD *)(v10 - 200);
        v46 = *(_OWORD *)(v10 - 184);
        v43 = *(_OWORD *)(v10 - 232);
        v44 = *(_OWORD *)(v10 - 216);
        v41 = *(_OWORD *)(v10 - 264);
        v42 = *(_OWORD *)(v10 - 248);
        v39 = *(_OWORD *)(v10 - 296);
        v40 = *(_OWORD *)(v10 - 280);
        v37 = *(_OWORD *)(v10 - 328);
        v38 = *(_OWORD *)(v10 - 312);
        v35 = *(_OWORD *)(v10 - 360);
        v36 = *(_OWORD *)(v10 - 344);
        v33 = *(_OWORD *)(v10 - 392);
        v34 = *(_OWORD *)(v10 - 376);
        v31 = *(_OWORD *)(v10 - 424);
        v32 = *(_OWORD *)(v10 - 408);
        v29 = *(_OWORD *)(v10 - 456);
        v30 = *(_OWORD *)(v10 - 440);
        v27 = *(_OWORD *)(v10 - 488);
        v28 = *(_OWORD *)(v10 - 472);
        v26 = *(_OWORD *)(v10 - 504);
        v57 = *(_OWORD *)(v10 - 520);
      }
      *(_QWORD *)&v60[0] = *(_QWORD *)(v9 - 40);
      v13 = *(_OWORD *)(v9 - 64);
      DWORD2(v60[1]) = *(_DWORD *)(v9 - 48);
      *(_OWORD *)((char *)v60 + 8) = v13;
      v61 = *(_DWORD *)(v9 - 32);
      v63 = 0;
      v62 = 0uLL;
      v14 = *(_BYTE **)(v10 - 544);
      v15 = *(_BYTE **)(v10 - 536);
      v16 = v15 - v14;
      if (v15 != v14)
      {
        if (v16 < 0)
          sub_20ED343A8();
        v17 = (char *)operator new(v15 - v14);
        v18 = &v17[64 * (v16 >> 6)];
        *(_QWORD *)&v62 = v17;
        v63 = v18;
        memcpy(v17, v14, v16);
        *((_QWORD *)&v62 + 1) = v18;
      }
      v67 = 0;
      v64 = 0u;
      memset(v65, 0, sizeof(v65));
      LOBYTE(v66[0]) = 0;
      if (v12)
      {
        v66[0] = v57;
        v66[1] = v26;
        v66[2] = v27;
        v66[3] = v28;
        v66[4] = v29;
        v66[5] = v30;
        v66[6] = v31;
        v66[7] = v32;
        v66[8] = v33;
        v66[9] = v34;
        v66[10] = v35;
        v66[11] = v36;
        v66[12] = v37;
        v66[13] = v38;
        v66[14] = v39;
        v66[15] = v40;
        v66[16] = v41;
        v66[17] = v42;
        v66[18] = v43;
        v66[19] = v44;
        v66[20] = v45;
        v66[21] = v46;
        v66[22] = v47;
        v66[23] = v48;
        v66[24] = v49;
        v66[25] = v50;
        v66[26] = v51;
        v66[27] = v52;
        v66[28] = v53;
        v66[29] = v54;
        v66[30] = v55;
        v66[31] = v56;
        v67 = 1;
      }
      v19 = *((_QWORD *)&v58 + 1);
      if (*((_QWORD *)&v58 + 1) >= v59)
      {
        *((_QWORD *)&v58 + 1) = sub_20ED345D4((void **)&v58, (uint64_t)v60);
        if (v65[1])
        {
          v65[2] = v65[1];
          operator delete((void *)v65[1]);
        }
      }
      else
      {
        v20 = v60[0];
        v21 = v60[1];
        *(_DWORD *)(*((_QWORD *)&v58 + 1) + 32) = v61;
        *(_OWORD *)v19 = v20;
        *(_OWORD *)(v19 + 16) = v21;
        *(_QWORD *)(v19 + 48) = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_QWORD *)(v19 + 40) = 0;
        *(_OWORD *)(v19 + 40) = v62;
        *(_QWORD *)(v19 + 56) = v63;
        *(_QWORD *)(v19 + 64) = 0;
        v62 = 0uLL;
        v63 = 0;
        *(_QWORD *)(v19 + 72) = 0;
        *(_QWORD *)(v19 + 80) = 0;
        *(_OWORD *)(v19 + 64) = v64;
        v64 = 0uLL;
        *(_QWORD *)(v19 + 80) = v65[0];
        *(_QWORD *)(v19 + 88) = 0;
        v65[0] = 0;
        *(_QWORD *)(v19 + 96) = 0;
        *(_QWORD *)(v19 + 104) = 0;
        *(_OWORD *)(v19 + 88) = *(_OWORD *)&v65[1];
        *(_QWORD *)(v19 + 104) = v65[3];
        memset(&v65[1], 0, 24);
        *(_BYTE *)(v19 + 112) = 0;
        *(_BYTE *)(v19 + 624) = 0;
        if (v67)
        {
          memcpy((void *)(v19 + 112), v66, 0x200uLL);
          *(_BYTE *)(v19 + 624) = 1;
        }
        *((_QWORD *)&v58 + 1) = v19 + 632;
      }
      if ((_QWORD)v64)
      {
        *((_QWORD *)&v64 + 1) = v64;
        operator delete((void *)v64);
      }
      if ((_QWORD)v62)
      {
        *((_QWORD *)&v62 + 1) = v62;
        operator delete((void *)v62);
      }
      v9 = v11 + 64;
      v22 = v10 + 552;
      v8 = v10 == v3;
      v10 += 552;
      if (v8)
      {
        v10 = v22;
        if (v11 == v5)
          break;
      }
    }
  }
  v23 = v59;
  result = *(double *)&v58;
  *(_OWORD *)a3 = v58;
  *(_QWORD *)(a3 + 16) = v23;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

void sub_20ED33ED0(_Unwind_Exception *a1)
{
  sub_20ED33F50((void **)&STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_20ED33F2C()
{
  if (STACK[0x270])
    JUMPOUT(0x20ED33F38);
  JUMPOUT(0x20ED33F40);
}

void **sub_20ED33F50(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 68);
        if (v5)
        {
          *((_QWORD *)v3 - 67) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 71);
        if (v6)
        {
          *((_QWORD *)v3 - 70) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v3 - 74);
        if (v7)
        {
          *((_QWORD *)v3 - 73) = v7;
          operator delete(v7);
        }
        v3 -= 632;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20ED33FF8(uint64_t *a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  std::string::size_type size;
  std::string *v18;
  std::string::size_type v19;
  std::string *p_p;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  double *v26;
  uint64_t v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  uint64_t v30;
  std::string v31;
  std::string __p;
  void *v33;
  uint64_t v34;
  std::string *v35;
  std::string::size_type v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v3 = a1[1];
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = v3 - v4;
  if (v3 == v4)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v5 < 0)
      sub_20E867F44();
    v7 = (char *)operator new((unint64_t)v5 >> 3);
    v8 = v5 >> 6;
    v33 = v7;
    v34 = (uint64_t)v7;
    v35 = (std::string *)&v7[8 * v8];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    v9 = 24;
    do
    {
      v31.__r_.__value_.__r.__words[0] = *(_QWORD *)(*a1 + v9);
      sub_20E8EB140((uint64_t *)&__p, &v31);
      v9 += 64;
      --v8;
    }
    while (v8);
    v11 = (double *)v33;
    v10 = (double *)v34;
  }
  v12 = 0;
  v13 = (char *)v11 - (char *)v10;
  v14 = v11 - v10;
  if (v14 >= -1)
    v15 = -1;
  else
    v15 = v11 - v10;
  v16 = (char *)v10 - (char *)v11;
  v30 = v10 - v11;
  if (v10 != v11)
  {
    v12 = 0;
    v21 = 8 * v30;
    v22 = v11;
    do
    {
      sub_20ED348D0((uint64_t)&v33, v22);
      if (SHIBYTE(v35) >= 0)
        v23 = HIBYTE(v35);
      else
        v23 = v34;
      if (SHIBYTE(v35) < 0)
        operator delete(v33);
      v12 += v23;
      ++v22;
      v21 -= 8;
    }
    while (v21);
  }
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, v12 + ~v15);
  if (v13 < 0)
  {
    sub_20ED348D0((uint64_t)&v33, v11);
    if (SHIBYTE(v35) >= 0)
      v24 = (const std::string::value_type *)&v33;
    else
      v24 = (const std::string::value_type *)v33;
    if (SHIBYTE(v35) >= 0)
      v25 = HIBYTE(v35);
    else
      v25 = v34;
    std::string::append(&v31, v24, v25);
    if (SHIBYTE(v35) < 0)
      operator delete(v33);
    if (v16 != 8 && (unint64_t)(v14 + 1) >= 2)
    {
      v26 = v11 + 1;
      v27 = 8 * v30 - 8;
      do
      {
        std::string::append(&v31, "-", 1uLL);
        sub_20ED348D0((uint64_t)&v33, v26);
        if (SHIBYTE(v35) >= 0)
          v28 = (const std::string::value_type *)&v33;
        else
          v28 = (const std::string::value_type *)v33;
        if (SHIBYTE(v35) >= 0)
          v29 = HIBYTE(v35);
        else
          v29 = v34;
        std::string::append(&v31, v28, v29);
        if (SHIBYTE(v35) < 0)
          operator delete(v33);
        ++v26;
        v27 -= 8;
      }
      while (v27);
    }
  }
  v33 = "desc-ts-";
  v34 = 8;
  size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  v18 = &v31;
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v31.__r_.__value_.__l.__size_;
    v18 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  v35 = v18;
  v36 = size;
  v37 = ".msgpack";
  v38 = 8;
  sub_20E8778D4((uint64_t)&v33, (uint64_t)&v39, 0, 0, &__p);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = __p.__r_.__value_.__l.__size_;
  sub_20E8A9678(a2, p_p, (std::string *)((char *)p_p + v19));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11)
    operator delete(v11);
}

void sub_20ED34304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  if (a27 < 0)
    operator delete(a22);
  if (a15 < 0)
    operator delete(__p);
  if (v27)
    operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED343A0(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 24);
}

void sub_20ED343A8()
{
  sub_20E860B90("vector");
}

void sub_20ED343BC(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  void *v20;

  v2 = *(char **)a1;
  if (0x9B8B577E613716AFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x67B23A5440CF65)
      sub_20ED343A8();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 632 * a2;
    v6 = (char *)operator new(632 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = (uint64_t)&v8[v9 - 632];
        v11 = *(_OWORD *)&v4[v9 - 632];
        v12 = *(_OWORD *)&v4[v9 - 616];
        *(_DWORD *)(v10 + 32) = *(_DWORD *)&v4[v9 - 600];
        *(_OWORD *)v10 = v11;
        *(_OWORD *)(v10 + 16) = v12;
        v13 = (uint64_t)&v4[v9 - 592];
        *(_OWORD *)&v8[v9 - 592] = *(_OWORD *)v13;
        *(_QWORD *)&v8[v9 - 576] = *(_QWORD *)&v4[v9 - 576];
        *(_QWORD *)(v13 + 16) = 0;
        *(_OWORD *)v13 = 0u;
        v14 = (uint64_t)&v4[v9 - 568];
        *(_OWORD *)&v8[v9 - 568] = *(_OWORD *)v14;
        *(_QWORD *)&v8[v9 - 552] = *(_QWORD *)&v4[v9 - 552];
        *(_QWORD *)(v14 + 16) = 0;
        *(_OWORD *)v14 = 0u;
        v15 = (uint64_t)&v4[v9 - 544];
        *(_OWORD *)&v8[v9 - 544] = *(_OWORD *)v15;
        *(_QWORD *)&v8[v9 - 528] = *(_QWORD *)&v4[v9 - 528];
        *(_QWORD *)(v15 + 16) = 0;
        *(_OWORD *)v15 = 0u;
        v16 = &v8[v9 - 520];
        *v16 = 0;
        v8[v9 - 8] = 0;
        if (v4[v9 - 8])
        {
          memcpy(v16, &v4[v9 - 520], 0x200uLL);
          v8[v9 - 8] = 1;
        }
        v9 -= 632;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v17 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v17 != v2)
      {
        v18 = (void *)*((_QWORD *)v17 - 68);
        if (v18)
        {
          *((_QWORD *)v17 - 67) = v18;
          operator delete(v18);
        }
        v19 = (void *)*((_QWORD *)v17 - 71);
        if (v19)
        {
          *((_QWORD *)v17 - 70) = v19;
          operator delete(v19);
        }
        v20 = (void *)*((_QWORD *)v17 - 74);
        if (v20)
        {
          *((_QWORD *)v17 - 73) = v20;
          operator delete(v20);
        }
        v17 -= 632;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_20ED345D4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  void *v25;

  v3 = 0x9B8B577E613716AFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x67B23A5440CF64)
    sub_20ED343A8();
  if (0x3716AEFCC26E2D5ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x3716AEFCC26E2D5ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x9B8B577E613716AFLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x33D91D2A2067B2)
    v6 = 0x67B23A5440CF64;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x67B23A5440CF64)
      sub_20E877A38();
    v7 = (char *)operator new(632 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[632 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  *((_DWORD *)v9 + 8) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v9 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v9 + 10) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *((_QWORD *)v9 + 12) = 0;
  *((_QWORD *)v9 + 13) = 0;
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(a2 + 88);
  *((_QWORD *)v9 + 13) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v9[112] = 0;
  v9[624] = 0;
  if (*(_BYTE *)(a2 + 624))
  {
    memcpy(v9 + 112, (const void *)(a2 + 112), 0x200uLL);
    v9[624] = 1;
  }
  v10 = &v7[632 * v6];
  v11 = v9 + 632;
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = (uint64_t)&v9[v14 - 632];
      v16 = *(_OWORD *)&v12[v14 - 632];
      v17 = *(_OWORD *)&v12[v14 - 616];
      *(_DWORD *)(v15 + 32) = *(_DWORD *)&v12[v14 - 600];
      *(_OWORD *)v15 = v16;
      *(_OWORD *)(v15 + 16) = v17;
      v18 = (uint64_t)&v12[v14 - 592];
      *(_OWORD *)&v9[v14 - 584] = 0u;
      *(_OWORD *)&v9[v14 - 592] = *(_OWORD *)v18;
      *(_QWORD *)&v9[v14 - 576] = *(_QWORD *)&v12[v14 - 576];
      *(_QWORD *)(v18 + 16) = 0;
      *(_OWORD *)v18 = 0u;
      v19 = (uint64_t)&v12[v14 - 568];
      *(_OWORD *)&v9[v14 - 560] = 0u;
      *(_OWORD *)&v9[v14 - 568] = *(_OWORD *)v19;
      *(_QWORD *)&v9[v14 - 552] = *(_QWORD *)&v12[v14 - 552];
      *(_QWORD *)(v19 + 16) = 0;
      *(_OWORD *)v19 = 0u;
      v20 = (uint64_t)&v12[v14 - 544];
      *(_OWORD *)&v9[v14 - 536] = 0u;
      *(_OWORD *)&v9[v14 - 544] = *(_OWORD *)v20;
      *(_QWORD *)&v9[v14 - 528] = *(_QWORD *)&v12[v14 - 528];
      *(_QWORD *)(v20 + 16) = 0;
      *(_OWORD *)v20 = 0u;
      v21 = &v9[v14 - 520];
      *v21 = 0;
      v9[v14 - 8] = 0;
      if (v12[v14 - 8])
      {
        memcpy(v21, &v12[v14 - 520], 0x200uLL);
        v9[v14 - 8] = 1;
      }
      v14 -= 632;
    }
    while (&v12[v14] != v13);
    v12 = (char *)*a1;
    v22 = (char *)a1[1];
    *a1 = &v9[v14];
    a1[1] = v11;
    a1[2] = v10;
    while (v22 != v12)
    {
      v23 = (void *)*((_QWORD *)v22 - 68);
      if (v23)
      {
        *((_QWORD *)v22 - 67) = v23;
        operator delete(v23);
      }
      v24 = (void *)*((_QWORD *)v22 - 71);
      if (v24)
      {
        *((_QWORD *)v22 - 70) = v24;
        operator delete(v24);
      }
      v25 = (void *)*((_QWORD *)v22 - 74);
      if (v25)
      {
        *((_QWORD *)v22 - 73) = v25;
        operator delete(v25);
      }
      v22 -= 632;
    }
  }
  if (v12)
    operator delete(v12);
  return v9 + 632;
}

uint64_t sub_20ED348D0(uint64_t a1, double *a2)
{
  uint64_t result;
  _BYTE v3[24];
  int v4;
  char v5;
  _QWORD v6[2];

  v4 = 0;
  sub_20E87876C((uint64_t)v6, (uint64_t)v3, a2);
  if (v4 == -1)
    sub_20E877AB8();
  v6[0] = &v5;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9E2100[v4])(v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9E20E8[v4])(v6, v3);
  return result;
}

void sub_20ED34968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9E20E8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED349A0(_DWORD *a1, _QWORD *a2, char **a3, unint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  BOOL v9;
  int32x4_t *v10;
  int32x4_t *v11;
  unint64_t v12;
  char *v15;
  char *v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  int32x4_t *v20;
  int32x4_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int32x4_t *v25;
  char *v28;
  char *v29;
  char *v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *j;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int32x4_t v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t i;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int32x4_t *v61;
  unint64_t **v62;
  unint64_t v63;
  unint64_t v64;
  uint8x8_t v65;
  unint64_t *v66;
  void **v67;
  void **v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int32x4_t v73;
  int32x4_t *v74;
  int32x4_t v75;
  int32x4_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  unsigned int v80;
  char *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  __int32 v85;
  unint64_t v86;
  int v87;
  int v88;
  int v89;
  unsigned int *v90;
  unsigned int *v91;
  uint64_t v92;
  unsigned int *v93;
  unint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  float v108;
  float v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int *v112;
  float v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  float v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  float v128;
  float v129;
  float v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  unsigned int v139;
  unsigned int v140;
  int v142;
  unint64_t v143;
  unint64_t v144;
  unsigned __int8 *v145;
  size_t v146;
  const char *v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t *v152;
  char *v153;
  char *v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  unsigned __int8 *v158;
  size_t v159;
  const char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  float v164;
  float v165;
  uint64_t v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  float v184;
  float v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  int v190;
  int v191;
  char *v192;
  unint64_t v193;
  char *v194;
  _QWORD *v195;
  _DWORD *v196;
  unint64_t v197;
  _QWORD *v198;
  char *v199;
  char *v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  void *v204;
  size_t v205;
  const char *v206;
  _DWORD *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  int v216;
  _DWORD *v217;
  unsigned __int8 v218;
  const char *v219;
  size_t v220;
  _BYTE *v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE *v224;
  uint64_t v225;
  uint64_t v226;
  NSObject *v227;
  size_t v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  double v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  double v263;
  double v264;
  void *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  _DWORD *v270;
  _DWORD *v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  char *v276;
  char *v277;
  uint64_t v278;
  int v279;
  _DWORD *v280;
  char *v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  char *v286;
  char *v287;
  char *v288;
  uint64_t v289;
  int v290;
  _BYTE *v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned __int8 v296;
  unint64_t v297;
  char *v298;
  NSObject *v299;
  float *v300;
  unsigned int **v301;
  _BYTE *v302;
  uint64_t v303;
  unsigned int *v304;
  uint64_t v305;
  unsigned int *v306;
  unint64_t v307;
  unsigned int *v308;
  unsigned int *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  float v313;
  float v314;
  float v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  float v321;
  float v322;
  unsigned int *v323;
  unsigned int *v324;
  unsigned int *v325;
  float v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int *v329;
  unsigned int v330;
  unsigned int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float v335;
  float v336;
  unsigned int *v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int *v340;
  float v341;
  float v342;
  float v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int *v346;
  unsigned int v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  float v351;
  float v352;
  uint64_t v353;
  float v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int *v358;
  unsigned int *v359;
  unsigned int v360;
  unsigned int *v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  int32x4_t *v369;
  int32x4_t *v370;
  char *v371;
  void *v372;
  void *v373;
  unsigned __int8 v374;
  const char *v375;
  size_t v376;
  _BYTE *v377;
  unint64_t v378;
  const char *v379;
  unsigned __int8 *v380;
  int v381;
  int v382;
  uint64_t v383;
  _BYTE *v384;
  uint64_t v385;
  uint64_t v386;
  NSObject *v387;
  size_t v388;
  std::__shared_weak_count_vtbl *v389;
  std::__shared_weak_count *v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  void *v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  char *v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  void *v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  unsigned __int8 v424;
  const char *v425;
  size_t v426;
  _BYTE *v427;
  unint64_t v428;
  const char *v429;
  unsigned __int8 *v430;
  int v431;
  int v432;
  uint64_t v433;
  _BYTE *v434;
  uint64_t v435;
  uint64_t v436;
  NSObject *v437;
  size_t v438;
  std::__shared_weak_count_vtbl *v439;
  std::__shared_weak_count *v440;
  std::__shared_weak_count *v441;
  unint64_t *p_shared_owners;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  char *v447;
  uint64_t v448;
  uint64_t v449;
  void *v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  char *v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  void *v470;
  unint64_t *v471;
  _QWORD *v472;
  _QWORD *v473;
  void *v474;
  uint64_t v476;
  _QWORD *v477;
  unint64_t v478;
  const char *__src;
  int v480;
  int v481;
  int v482;
  int v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  float *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  void **v491;
  _QWORD *v492;
  void *v493[2];
  void *v494[2];
  int v495;
  uint64_t v496;
  void *__p;
  char *v498;
  char *v499;
  char *category;
  char *v501;
  char *v502;
  void **p_p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v505;
  int v506;
  const char *v507;
  int v508;
  const char *v509;
  uint64_t v510;
  std::__shared_weak_count *v511;
  void *v512[2];
  char v513;
  char v514;
  uint64_t v515;
  _BYTE v516[24];
  _BYTE v517[32];
  unint64_t v518;
  char v519;
  uint64_t v520;

  v520 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)(a2[1] - *a2) >> 5;
  if (*a1)
    v9 = v8 > a4;
  else
    v9 = 0;
  if (!v9)
  {
    v11 = *(int32x4_t **)a6;
    v10 = *(int32x4_t **)(a6 + 8);
    v12 = ((uint64_t)v10->i64 - *(_QWORD *)a6) >> 2;
    if (v8 <= v12)
    {
      if (v8 < v12)
      {
        v10 = (int32x4_t *)((char *)v11 + 4 * v8);
        *(_QWORD *)(a6 + 8) = v10;
      }
    }
    else
    {
      sub_20E93DC84(a6, v8 - v12);
      v11 = *(int32x4_t **)a6;
      v10 = *(int32x4_t **)(a6 + 8);
    }
    if (v11 == v10)
      goto LABEL_53;
    v23 = (char *)v10 - (char *)v11 - 4;
    if (v23 >= 0x1C)
    {
      v50 = (v23 >> 2) + 1;
      v24 = v50 & 0x7FFFFFFFFFFFFFF8;
      v25 = (int32x4_t *)((char *)v11 + 4 * (v50 & 0x7FFFFFFFFFFFFFF8));
      v51 = (int32x4_t)xmmword_210365350;
      v52 = v11 + 1;
      v53.i64[0] = 0x400000004;
      v53.i64[1] = 0x400000004;
      v54.i64[0] = 0x800000008;
      v54.i64[1] = 0x800000008;
      v55 = v50 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v52[-1] = v51;
        *v52 = vaddq_s32(v51, v53);
        v51 = vaddq_s32(v51, v54);
        v52 += 2;
        v55 -= 8;
      }
      while (v55);
      if (v50 == v24)
      {
LABEL_53:
        v56 = LFV2KeypointsCreate();
        v58 = *a2;
        for (i = a2[1]; v58 != i; v58 += 32)
          LFV2KeypointsAppend();
        return v56;
      }
    }
    else
    {
      LODWORD(v24) = 0;
      v25 = v11;
    }
    do
    {
      v25->i32[0] = v24;
      v25 = (int32x4_t *)((char *)v25 + 4);
      LODWORD(v24) = v24 + 1;
    }
    while (v25 != v10);
    goto LABEL_53;
  }
  if (*a1 != 3)
  {
    *(_OWORD *)v493 = 0u;
    *(_OWORD *)v494 = 0u;
    v495 = 1065353216;
    v29 = *a3;
    v28 = a3[1];
    if (*a3 == v28)
    {
      v30 = 0;
      v491 = (void **)a6;
      v492 = a2;
      v31 = 1;
      v32 = a4;
      if (a4)
        goto LABEL_26;
    }
    else
    {
      do
      {
        *(_DWORD *)v516 = 0;
        *(_DWORD *)v516 = *(_DWORD *)v29;
        sub_20EABA148((uint64_t)v493, (unsigned int *)v516, v516);
        v29 += 4;
      }
      while (v29 != v28);
      v30 = (char *)v494[1];
      v491 = (void **)a6;
      v492 = a2;
      v31 = (void *)a4 >= v494[1];
      v32 = a4 - (unint64_t)v494[1];
      if ((void *)a4 > v494[1])
      {
LABEL_26:
        if (*a1 != 2)
        {
          if (*a1 == 1)
          {
            v34 = *a2;
            v33 = a2[1];
            if (v34 == v33)
            {
              v37 = 0;
              v40 = 0;
              v39 = 0;
            }
            else
            {
              v35 = (v34 - v33) >> 5;
              v36 = -v35;
              if ((unint64_t)-v35 > 0x1555555555555555)
                sub_20E867F44();
              v37 = (char *)operator new(-12 * v35);
              v485 = v32;
              v38 = 0;
              v39 = &v37[12 * v36];
              v40 = v37;
              do
              {
                while (1)
                {
                  v41 = *(_DWORD *)(v34 + 20);
                  v42 = v38 | ((unint64_t)*(unsigned int *)(v34 + 28) << 32);
                  if (v40 >= v39)
                    break;
                  *(_QWORD *)v40 = v42;
                  *((_DWORD *)v40 + 2) = v41;
                  v40 += 12;
                  v34 += 32;
                  ++v38;
                  if (v34 == v33)
                    goto LABEL_48;
                }
                v43 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v37) >> 2) + 1;
                if (v43 > 0x1555555555555555)
                  sub_20E867F44();
                if (0x5555555555555556 * ((v39 - v37) >> 2) > v43)
                  v43 = 0x5555555555555556 * ((v39 - v37) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((v39 - v37) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v44 = 0x1555555555555555;
                else
                  v44 = v43;
                if (v44)
                {
                  if (v44 > 0x1555555555555555)
                    sub_20E877A38();
                  v45 = (char *)operator new(12 * v44);
                }
                else
                {
                  v45 = 0;
                }
                v46 = &v45[4 * ((v40 - v37) >> 2)];
                *(_QWORD *)v46 = v42;
                *((_DWORD *)v46 + 2) = v41;
                for (j = v46; v40 != v37; *((_DWORD *)j + 2) = v49)
                {
                  v48 = *(_QWORD *)(v40 - 12);
                  v40 -= 12;
                  v49 = *((_DWORD *)v40 + 2);
                  *(_QWORD *)(j - 12) = v48;
                  j -= 12;
                }
                v39 = &v45[12 * v44];
                v40 = v46 + 12;
                if (v37)
                  operator delete(v37);
                v37 = j;
                v34 += 32;
                ++v38;
              }
              while (v34 != v33);
LABEL_48:
              v30 = (char *)v494[1];
              v32 = v485;
            }
            *(_QWORD *)v516 = v37;
            *(_QWORD *)&v516[8] = v40;
            *(_QWORD *)&v516[16] = v39;
            sub_20ED37D78(v32, (unsigned int **)v516, (uint64_t)v30, (uint64_t)v493);
            if (v37)
            {
              v161 = v37;
              goto LABEL_195;
            }
          }
          else
          {
            sub_20ED37C84(&__p);
            if (**((int **)__p + 7) <= 5)
            {
              v148 = *((unsigned __int8 *)__p + 72);
              v149 = sub_20E8C31DC((uint64_t)__p, "OSLogSurrogateAppender", 1, 0);
              v150 = v149 ? v149 + 16 : 0;
              if (v148 || v149)
              {
                p_p = &__p;
                rep = std::chrono::steady_clock::now().__d_.__rep_;
                v505 = std::chrono::system_clock::now().__d_.__rep_;
                v506 = 5;
                v507 = "unknown file";
                v508 = 229;
                v510 = 0;
                v511 = 0;
                v509 = "unknown function";
                LODWORD(v515) = *a1;
                v151 = *p_p;
                v152 = (uint64_t *)((char *)*p_p + 16);
                if (*((char *)*p_p + 39) < 0)
                {
                  v154 = (char *)*((_QWORD *)v151 + 2);
                  v153 = (char *)*((_QWORD *)v151 + 3);
                }
                else
                {
                  v153 = (char *)*((unsigned __int8 *)*p_p + 39);
                  v154 = (char *)*p_p + 16;
                }
                category = v154;
                v501 = v153;
                v296 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v296 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v516);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v516);
                  if (v517[0] && (v516[23] & 0x80000000) != 0)
                    operator delete(*(void **)v516);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
                v297 = byte_254A4A4F8[23];
                if (byte_254A4A4F8[23] >= 0)
                {
                  v298 = byte_254A4A4F8;
                }
                else
                {
                  v297 = *(_QWORD *)&byte_254A4A4F8[8];
                  v298 = *(char **)byte_254A4A4F8;
                }
                v512[0] = v298;
                v512[1] = (void *)v297;
                *(_QWORD *)v516 = os_log_create(v298, category);
                sub_20E86E5A8(&v516[8], (uint64_t)v512);
                sub_20E86E5A8(&v517[16], (uint64_t)&category);
                v299 = *(NSObject **)v516;
                sub_20E86E44C((uint64_t)v516);
                sub_20ED38BEC(v150, v152, v299, OS_LOG_TYPE_ERROR, (int *)&v515);
                if (v148)
                {
                  sub_20E8C003C((uint64_t)&p_p, "CV3DMLFeatureDetection: MLDescriptorExtractionUtil: SubsampleKeypoints: Invalid subsampling method specified: %i", *a1);
                  sub_20E863570((uint64_t)&p_p);
                }
                sub_20E863714((uint64_t)&p_p);
              }
            }
          }
          goto LABEL_664;
        }
        v136 = *a5;
        if (v32 >= (uint64_t)(a2[1] - *a2) >> 5
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractionUtil.cpp", 257, (uint64_t)"keypoints.size() > sample_size", 30, (uint64_t)"AreaBinning: keypoints.size() > sample_size", 43, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v137 = HIDWORD(v136);
        v138 = atomic_load((unsigned __int8 *)&qword_254A5F100);
        if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F100))
        {
          dword_254A5F190 = 994218966;
          xmmword_254A5F180 = xmmword_210365360;
          dword_254A5F1A4 = 1012531786;
          unk_254A5F194 = xmmword_210365370;
          dword_254A5F1B8 = 1018410959;
          unk_254A5F1A8 = xmmword_210365380;
          dword_254A5F1CC = 1012531786;
          unk_254A5F1BC = xmmword_210365370;
          dword_254A5F1E0 = 994218966;
          xmmword_254A5F1D0 = xmmword_210365360;
          __cxa_guard_release(&qword_254A5F100);
        }
        if (v136 >= 5 && HIDWORD(v136) > 4)
        {
          v139 = v136 / 5;
          v140 = HIDWORD(v136) / 5;
          if (5 * (v136 / 5) != v136 || 5 * (HIDWORD(v136) / 5) != HIDWORD(v136))
          {
            sub_20ED37C84(&__p);
            if (**((int **)__p + 7) > 5)
              goto LABEL_664;
            v142 = *((unsigned __int8 *)__p + 72);
            v143 = sub_20E8C31DC((uint64_t)__p, "OSLogSurrogateAppender", 1, 0);
            v144 = v143;
            if (!v142 && !v143)
              goto LABEL_664;
            p_p = &__p;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v505 = std::chrono::system_clock::now().__d_.__rep_;
            v506 = 5;
            v507 = "unknown file";
            v508 = 281;
            v510 = 0;
            v511 = 0;
            v509 = "unknown function";
            v145 = (unsigned __int8 *)*p_p;
            if (*((char *)*p_p + 39) < 0)
            {
              v147 = (const char *)*((_QWORD *)v145 + 2);
              v146 = *((_QWORD *)v145 + 3);
            }
            else
            {
              v146 = *((unsigned __int8 *)*p_p + 39);
              v147 = (char *)*p_p + 16;
            }
            v490 = (uint64_t)*p_p + 16;
            v483 = v136;
            v424 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v424 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v516);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v516);
              if (v517[0] && (v516[23] & 0x80000000) != 0)
                operator delete(*(void **)v516);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v425 = byte_254A4A4F8;
            else
              v425 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v426 = byte_254A4A4F8[23];
            else
              v426 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v516 = os_log_create(v425, v147);
            v427 = &v516[8];
            if (v426 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v426 >= 0x17)
            {
              v428 = v144;
              v429 = v147;
              v430 = v145;
              v431 = v142;
              v432 = v137;
              v433 = (v426 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v426 | 7) != 0x17)
                v433 = v426 | 7;
              v137 = v433 + 1;
              v427 = operator new(v433 + 1);
              *(_QWORD *)&v516[16] = v426;
              *(_QWORD *)v517 = v137 | 0x8000000000000000;
              *(_QWORD *)&v516[8] = v427;
              LODWORD(v137) = v432;
              v142 = v431;
              v145 = v430;
              v147 = v429;
              v144 = v428;
            }
            else
            {
              v517[7] = v426;
              if (!v426)
              {
LABEL_597:
                v427[v426] = 0;
                v517[8] = 1;
                v434 = &v517[16];
                if (v146 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v146 >= 0x17)
                {
                  v435 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v146 | 7) != 0x17)
                    v435 = v146 | 7;
                  v436 = v435 + 1;
                  v434 = operator new(v435 + 1);
                  *(_QWORD *)&v517[24] = v146;
                  v518 = v436 | 0x8000000000000000;
                  *(_QWORD *)&v517[16] = v434;
                }
                else
                {
                  HIBYTE(v518) = v146;
                  if (!v146)
                    goto LABEL_605;
                }
                memmove(v434, v147, v146);
LABEL_605:
                v434[v146] = 0;
                v519 = 1;
                v437 = *(NSObject **)v516;
                if (SHIBYTE(v518) < 0)
                  operator delete(*(void **)&v517[16]);
                if (v517[8] && (v517[7] & 0x80000000) != 0)
                  operator delete(*(void **)&v516[8]);
                if (*(_QWORD *)v516)
                  os_release(*(void **)v516);
                if (v144 && *(_QWORD *)(v144 + 24))
                {
                  v438 = _os_log_pack_size();
                  v439 = (std::__shared_weak_count_vtbl *)operator new(v438, (std::align_val_t)8uLL);
                  v440 = (std::__shared_weak_count *)operator new();
                  v441 = v440;
                  v440->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v440->__shared_owners_;
                  v440->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v440->__shared_weak_owners_ = 0;
                  v440[1].__vftable = v439;
                  *(_QWORD *)v516 = v439;
                  *(_QWORD *)&v516[8] = v439;
                  *(_QWORD *)&v516[16] = v440;
                  do
                    v443 = __ldxr(p_shared_owners);
                  while (__stxr(v443 + 1, p_shared_owners));
                  memset(v517, 0, 24);
                  do
                    v444 = __ldaxr(p_shared_owners);
                  while (__stlxr(v444 - 1, p_shared_owners));
                  if (!v444)
                  {
                    ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
                    std::__shared_weak_count::__release_weak(v441);
                  }
                  v445 = *(_QWORD *)v516;
                  v446 = _os_log_pack_fill();
                  *(_DWORD *)v446 = 67109888;
                  *(_DWORD *)(v446 + 4) = v483;
                  *(_WORD *)(v446 + 8) = 1024;
                  *(_DWORD *)(v446 + 10) = v137;
                  *(_WORD *)(v446 + 14) = 2048;
                  *(_QWORD *)(v446 + 16) = 5;
                  *(_WORD *)(v446 + 24) = 2048;
                  *(_QWORD *)(v446 + 26) = 5;
                  v447 = (char *)operator new();
                  v448 = v145[39];
                  v449 = v490;
                  if ((v448 & 0x80u) != 0)
                  {
                    v449 = *((_QWORD *)v145 + 2);
                    v448 = *((_QWORD *)v145 + 3);
                  }
                  *(_QWORD *)v447 = v445;
                  *(_OWORD *)(v447 + 8) = *(_OWORD *)&v516[8];
                  *(_QWORD *)&v516[8] = 0;
                  *(_QWORD *)&v516[16] = 0;
                  *(_OWORD *)(v447 + 24) = *(_OWORD *)v517;
                  *(_QWORD *)v517 = 0;
                  *(_QWORD *)&v517[8] = 0;
                  *((_QWORD *)v447 + 5) = v449;
                  *((_QWORD *)v447 + 6) = v448;
                  v447[56] = 16;
                  category = 0;
                  v512[0] = v447;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v144 + 24) + 40))(*(_QWORD *)(v144 + 24), v512);
                  v450 = v512[0];
                  v512[0] = 0;
                  if (v450)
                  {
                    v451 = (std::__shared_weak_count *)*((_QWORD *)v450 + 4);
                    if (v451)
                    {
                      v452 = (unint64_t *)&v451->__shared_owners_;
                      do
                        v453 = __ldaxr(v452);
                      while (__stlxr(v453 - 1, v452));
                      if (!v453)
                      {
                        ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
                        std::__shared_weak_count::__release_weak(v451);
                      }
                    }
                    v454 = (std::__shared_weak_count *)*((_QWORD *)v450 + 2);
                    if (v454)
                    {
                      v455 = (unint64_t *)&v454->__shared_owners_;
                      do
                        v456 = __ldaxr(v455);
                      while (__stlxr(v456 - 1, v455));
                      if (!v456)
                      {
                        ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
                        std::__shared_weak_count::__release_weak(v454);
                      }
                    }
                    MEMORY[0x212BC6398](v450, 0x10F0C40B62ED6C6);
                    v457 = category;
                    category = 0;
                    if (v457)
                    {
                      v458 = (std::__shared_weak_count *)*((_QWORD *)v457 + 4);
                      if (v458)
                      {
                        v459 = (unint64_t *)&v458->__shared_owners_;
                        do
                          v460 = __ldaxr(v459);
                        while (__stlxr(v460 - 1, v459));
                        if (!v460)
                        {
                          ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
                          std::__shared_weak_count::__release_weak(v458);
                        }
                      }
                      v461 = (std::__shared_weak_count *)*((_QWORD *)v457 + 2);
                      if (v461)
                      {
                        v462 = (unint64_t *)&v461->__shared_owners_;
                        do
                          v463 = __ldaxr(v462);
                        while (__stlxr(v463 - 1, v462));
                        if (!v463)
                        {
                          ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
                          std::__shared_weak_count::__release_weak(v461);
                        }
                      }
                      MEMORY[0x212BC6398](v457, 0x10F0C40B62ED6C6);
                    }
                  }
                  v464 = *(std::__shared_weak_count **)&v517[8];
                  if (*(_QWORD *)&v517[8])
                  {
                    v465 = (unint64_t *)(*(_QWORD *)&v517[8] + 8);
                    do
                      v466 = __ldaxr(v465);
                    while (__stlxr(v466 - 1, v465));
                    if (!v466)
                    {
                      ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
                      std::__shared_weak_count::__release_weak(v464);
                    }
                  }
                  v467 = *(std::__shared_weak_count **)&v516[16];
                  if (*(_QWORD *)&v516[16])
                  {
                    v468 = (unint64_t *)(*(_QWORD *)&v516[16] + 8);
                    do
                      v469 = __ldaxr(v468);
                    while (__stlxr(v469 - 1, v468));
                    if (!v469)
                    {
                      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
                      std::__shared_weak_count::__release_weak(v467);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v437, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v516 = 67109888;
                  *(_DWORD *)&v516[4] = v483;
                  *(_WORD *)&v516[8] = 1024;
                  *(_DWORD *)&v516[10] = v137;
                  *(_WORD *)&v516[14] = 2048;
                  *(_QWORD *)&v516[16] = 5;
                  *(_WORD *)v517 = 2048;
                  *(_QWORD *)&v517[2] = 5;
                  v470 = (void *)_os_log_send_and_compose_impl();
                  if (v470)
                    free(v470);
                }
                if (v142)
                {
                  sub_20E8C003C((uint64_t)&p_p, "CV3DMLFeatureDetection: MLDescriptorExtractionUtil: AreaBinning: Bin size should be a round number, image size [w:%i, h:%i], number of bins [w:%lu , h:%lu]", v483, v137, 5, 5);
                  sub_20E863570((uint64_t)&p_p);
                }
                sub_20E863570((uint64_t)&p_p);
                v421 = v511;
                if (!v511)
                  goto LABEL_664;
                v471 = (unint64_t *)&v511->__shared_owners_;
                do
                  v423 = __ldaxr(v471);
                while (__stlxr(v423 - 1, v471));
                goto LABEL_662;
              }
            }
            memmove(v427, v425, v426);
            goto LABEL_597;
          }
          v178 = (char *)operator new(0x258uLL);
          v481 = v136;
          v486 = v32;
          v478 = HIDWORD(v136);
          v179 = v178 + 600;
          category = v178;
          v502 = v178 + 600;
          bzero(v178, 0x258uLL);
          v501 = v178 + 600;
          v181 = *a2;
          v180 = a2[1];
          __p = 0;
          v498 = 0;
          v499 = 0;
          v182 = (v180 - v181) >> 5;
          if ((unint64_t)(v180 - v181) >= 0x20)
          {
            if (v180 - v181 < 0)
              sub_20E867F44();
            __p = operator new(12 * v182);
            v498 = (char *)__p;
            v499 = (char *)__p + 12 * v182;
          }
          if (v180 == v181)
          {
            v291 = v494[1];
            v293 = 25;
            v292 = v486;
            goto LABEL_385;
          }
          v183 = 0;
          v184 = (float)v139;
          v185 = (float)v140;
          if (v182 <= 1)
            v186 = 1;
          else
            v186 = v182;
          v488 = v186;
          while (1)
          {
            v188 = *a2 + 32 * v183;
            v189 = 5 * (unint64_t)(float)(*(float *)(v188 + 4) / v185)
                 + (unint64_t)(float)(*(float *)v188 / v184);
            v190 = *(_DWORD *)(v188 + 28);
            v191 = *(_DWORD *)(v188 + 20);
            v192 = v501;
            v193 = 0xAAAAAAAAAAAAAAABLL * ((v501 - category) >> 3);
            if (v189 < v193)
            {
              v194 = &category[24 * v189];
              v195 = v194 + 8;
              v196 = (_DWORD *)*((_QWORD *)v194 + 1);
              v198 = v194 + 16;
              v197 = *((_QWORD *)v194 + 2);
              if ((unint64_t)v196 >= v197)
              {
                v207 = *(_DWORD **)v194;
                v208 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v196 - *(_QWORD *)v194) >> 2);
                v209 = v208 + 1;
                if (v208 + 1 > 0x1555555555555555)
                  goto LABEL_671;
                v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v197 - (_QWORD)v207) >> 2);
                if (2 * v210 > v209)
                  v209 = 2 * v210;
                if (v210 >= 0xAAAAAAAAAAAAAAALL)
                  v211 = 0x1555555555555555;
                else
                  v211 = v209;
                if (v211)
                {
                  if (v211 > 0x1555555555555555)
                    goto LABEL_672;
                  v212 = (char *)operator new(12 * v211);
                }
                else
                {
                  v212 = 0;
                }
                v213 = &v212[12 * v208];
                *(_DWORD *)v213 = v183;
                *((_DWORD *)v213 + 1) = v190;
                *((_DWORD *)v213 + 2) = v191;
                v214 = v213;
                if (v196 != v207)
                {
                  do
                  {
                    v215 = *(_QWORD *)(v196 - 3);
                    v196 -= 3;
                    v216 = v196[2];
                    *(_QWORD *)(v214 - 12) = v215;
                    v214 -= 12;
                    *((_DWORD *)v214 + 2) = v216;
                  }
                  while (v196 != v207);
                  v196 = *(_DWORD **)v194;
                }
                *(_QWORD *)v194 = v214;
                v217 = v213 + 12;
                *v195 = v213 + 12;
                *v198 = &v212[12 * v211];
                if (v196)
                  operator delete(v196);
                *v195 = v217;
                v200 = v498;
                v199 = v499;
                if (v498 >= v499)
                  goto LABEL_351;
              }
              else
              {
                *v196 = v183;
                v196[1] = v190;
                v196[2] = v191;
                *v195 = v196 + 3;
                v200 = v498;
                v199 = v499;
                if (v498 >= v499)
                  goto LABEL_351;
              }
              goto LABEL_220;
            }
            sub_20ED37C84(&v496);
            if (**(int **)(v496 + 56) <= 4)
            {
              v487 = (float *)(v188 + 4);
              v201 = *(unsigned __int8 *)(v496 + 72);
              v202 = sub_20E8C31DC(v496, "OSLogSurrogateAppender", 1, 0);
              v203 = v202;
              if (v201 || v202)
                break;
            }
LABEL_332:
            v270 = (_DWORD *)*((_QWORD *)v192 - 2);
            v269 = *((_QWORD *)v192 - 1);
            if ((unint64_t)v270 >= v269)
            {
              v271 = (_DWORD *)*((_QWORD *)v192 - 3);
              v272 = 0xAAAAAAAAAAAAAAABLL * (v270 - v271) + 1;
              if (v272 > 0x1555555555555555)
                goto LABEL_671;
              v273 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v269 - (_QWORD)v271) >> 2);
              if (2 * v273 > v272)
                v272 = 2 * v273;
              if (v273 >= 0xAAAAAAAAAAAAAAALL)
                v274 = 0x1555555555555555;
              else
                v274 = v272;
              if (v274)
              {
                if (v274 > 0x1555555555555555)
                  goto LABEL_672;
                v275 = (char *)operator new(12 * v274);
              }
              else
              {
                v275 = 0;
              }
              v276 = &v275[4 * (v270 - v271)];
              *(_DWORD *)v276 = v183;
              *((_DWORD *)v276 + 1) = v190;
              *((_DWORD *)v276 + 2) = v191;
              v277 = v276;
              if (v270 != v271)
              {
                do
                {
                  v278 = *(_QWORD *)(v270 - 3);
                  v270 -= 3;
                  v279 = v270[2];
                  *(_QWORD *)(v277 - 12) = v278;
                  v277 -= 12;
                  *((_DWORD *)v277 + 2) = v279;
                }
                while (v270 != v271);
                v270 = (_DWORD *)*((_QWORD *)v192 - 3);
              }
              v280 = v276 + 12;
              *((_QWORD *)v192 - 3) = v277;
              *((_QWORD *)v192 - 2) = v276 + 12;
              *((_QWORD *)v192 - 1) = &v275[12 * v274];
              if (v270)
                operator delete(v270);
              *((_QWORD *)v192 - 2) = v280;
              v200 = v498;
              v199 = v499;
              if (v498 >= v499)
              {
LABEL_351:
                v281 = (char *)__p;
                v282 = 0xAAAAAAAAAAAAAAABLL * ((v200 - (_BYTE *)__p) >> 2);
                v283 = v282 + 1;
                if (v282 + 1 > 0x1555555555555555)
LABEL_671:
                  sub_20E867F44();
                v284 = 0xAAAAAAAAAAAAAAABLL * ((v199 - (_BYTE *)__p) >> 2);
                if (2 * v284 > v283)
                  v283 = 2 * v284;
                if (v284 >= 0xAAAAAAAAAAAAAAALL)
                  v285 = 0x1555555555555555;
                else
                  v285 = v283;
                if (v285)
                {
                  if (v285 > 0x1555555555555555)
LABEL_672:
                    sub_20E877A38();
                  v286 = (char *)operator new(12 * v285);
                }
                else
                {
                  v286 = 0;
                }
                v287 = &v286[12 * v282];
                *(_DWORD *)v287 = v183;
                *((_DWORD *)v287 + 1) = v190;
                *((_DWORD *)v287 + 2) = v191;
                v288 = v287;
                if (v200 != v281)
                {
                  do
                  {
                    v289 = *(_QWORD *)(v200 - 12);
                    v200 -= 12;
                    v290 = *((_DWORD *)v200 + 2);
                    *(_QWORD *)(v288 - 12) = v289;
                    v288 -= 12;
                    *((_DWORD *)v288 + 2) = v290;
                  }
                  while (v200 != v281);
                  v200 = (char *)__p;
                }
                v187 = v287 + 12;
                __p = v288;
                v499 = &v286[12 * v285];
                if (v200)
                  operator delete(v200);
                goto LABEL_221;
              }
            }
            else
            {
              *v270 = v183;
              v270[1] = v190;
              v270[2] = v191;
              *((_QWORD *)v192 - 2) = v270 + 3;
              v200 = v498;
              v199 = v499;
              if (v498 >= v499)
                goto LABEL_351;
            }
LABEL_220:
            *(_DWORD *)v200 = v183;
            v187 = v200 + 12;
            *((_DWORD *)v200 + 1) = v190;
            *((_DWORD *)v200 + 2) = v191;
LABEL_221:
            v498 = v187;
            if (++v183 == v488)
            {
              v178 = category;
              v179 = v501;
              v291 = v494[1];
              v292 = v486;
              if (v501 == category)
              {
                LOBYTE(v293) = 1;
                v179 = category;
                v302 = v494[1];
              }
              else
              {
                v293 = 0xAAAAAAAAAAAAAAABLL * ((v501 - category) >> 3);
LABEL_385:
                v300 = (float *)&xmmword_254A5F180;
                v301 = (unsigned int **)v178;
                do
                {
                  sub_20ED37D78((unint64_t)(float)(*v300 * (float)v292), v301, (uint64_t)v291, (uint64_t)v493);
                  v301 += 3;
                  ++v300;
                  --v293;
                }
                while (v293);
                v302 = v494[1];
              }
              if (&v291[v292] > v302)
                sub_20ED37D78(&v291[v292] - v302, (unsigned int **)&__p, (uint64_t)v302, (uint64_t)v493);
              if (__p)
                operator delete(__p);
              if (v178)
              {
                if ((v293 & 1) == 0)
                {
                  v371 = v179;
                  do
                  {
                    v373 = (void *)*((_QWORD *)v371 - 3);
                    v371 -= 24;
                    v372 = v373;
                    if (v373)
                    {
                      *((_QWORD *)v179 - 2) = v372;
                      operator delete(v372);
                    }
                    v179 = v371;
                  }
                  while (v371 != v178);
                  v179 = v178;
                }
                v501 = v178;
                v161 = v179;
LABEL_195:
                operator delete(v161);
              }
LABEL_664:
              v56 = sub_20ED37A4C(&v491, (uint64_t)v493);
              v472 = v494[0];
              if (v494[0])
              {
                do
                {
                  v473 = (_QWORD *)*v472;
                  operator delete(v472);
                  v472 = v473;
                }
                while (v473);
              }
              v474 = v493[0];
              v493[0] = 0;
              if (v474)
                operator delete(v474);
              return v56;
            }
          }
          v480 = v201;
          p_p = (void **)&v496;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v505 = std::chrono::system_clock::now().__d_.__rep_;
          v506 = 4;
          v507 = "unknown file";
          v508 = 301;
          v509 = "unknown function";
          v510 = 0;
          v511 = 0;
          v204 = *p_p;
          v477 = *p_p;
          if (*((char *)*p_p + 39) < 0)
          {
            v206 = (const char *)*((_QWORD *)v204 + 2);
            v205 = *((_QWORD *)v204 + 3);
          }
          else
          {
            v205 = *((unsigned __int8 *)*p_p + 39);
            v206 = (char *)*p_p + 16;
          }
          v476 = (uint64_t)*p_p + 16;
          v484 = v189;
          v218 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v218 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v512);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v512);
            if (v514 && v513 < 0)
              operator delete(v512[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v219 = byte_254A4A4F8;
          else
            v219 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v220 = byte_254A4A4F8[23];
          else
            v220 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v516 = os_log_create(v219, v206);
          if (v220 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          __src = v206;
          if (v220 >= 0x17)
          {
            v222 = (v220 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v220 | 7) != 0x17)
              v222 = v220 | 7;
            v223 = v222 + 1;
            v221 = operator new(v222 + 1);
            *(_QWORD *)&v516[16] = v220;
            *(_QWORD *)v517 = v223 | 0x8000000000000000;
            *(_QWORD *)&v516[8] = v221;
          }
          else
          {
            v517[7] = v220;
            v221 = &v516[8];
            if (!v220)
            {
LABEL_264:
              v221[v220] = 0;
              v517[8] = 1;
              if (v205 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v205 >= 0x17)
              {
                v225 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v205 | 7) != 0x17)
                  v225 = v205 | 7;
                v226 = v225 + 1;
                v224 = operator new(v225 + 1);
                *(_QWORD *)&v517[24] = v205;
                v518 = v226 | 0x8000000000000000;
                *(_QWORD *)&v517[16] = v224;
              }
              else
              {
                HIBYTE(v518) = v205;
                v224 = &v517[16];
                if (!v205)
                  goto LABEL_272;
              }
              memmove(v224, __src, v205);
LABEL_272:
              v224[v205] = 0;
              v519 = 1;
              v227 = *(NSObject **)v516;
              if (SHIBYTE(v518) < 0)
                operator delete(*(void **)&v517[16]);
              if (v517[8] && (v517[7] & 0x80000000) != 0)
                operator delete(*(void **)&v516[8]);
              if (*(_QWORD *)v516)
                os_release(*(void **)v516);
              if (v203 && *(_QWORD *)(v203 + 24))
              {
                v228 = _os_log_pack_size();
                v229 = (std::__shared_weak_count_vtbl *)operator new(v228, (std::align_val_t)8uLL);
                v230 = (std::__shared_weak_count *)operator new();
                v231 = v230;
                v230->__shared_owners_ = 0;
                v232 = (unint64_t *)&v230->__shared_owners_;
                v230->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v230->__shared_weak_owners_ = 0;
                v230[1].__vftable = v229;
                *(_QWORD *)v516 = v229;
                *(_QWORD *)&v516[8] = v229;
                *(_QWORD *)&v516[16] = v230;
                do
                  v233 = __ldxr(v232);
                while (__stxr(v233 + 1, v232));
                memset(v517, 0, 24);
                do
                  v234 = __ldaxr(v232);
                while (__stlxr(v234 - 1, v232));
                if (!v234)
                {
                  ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                  std::__shared_weak_count::__release_weak(v231);
                }
                v235 = *(_QWORD *)v516;
                v236 = _os_log_pack_fill();
                v237 = *(float *)v188;
                v238 = *v487;
                *(_DWORD *)v236 = 134219264;
                *(_QWORD *)(v236 + 4) = v484;
                *(_WORD *)(v236 + 12) = 2048;
                *(_QWORD *)(v236 + 14) = v193;
                *(_WORD *)(v236 + 22) = 1024;
                *(_DWORD *)(v236 + 24) = v481;
                *(_WORD *)(v236 + 28) = 1024;
                *(_DWORD *)(v236 + 30) = v478;
                *(_WORD *)(v236 + 34) = 2048;
                *(double *)(v236 + 36) = v237;
                *(_WORD *)(v236 + 44) = 2048;
                *(double *)(v236 + 46) = v238;
                v239 = (char *)operator new();
                v240 = *((unsigned __int8 *)v477 + 39);
                v241 = v476;
                if ((v240 & 0x80u) != 0)
                {
                  v241 = v477[2];
                  v240 = v477[3];
                }
                *(_QWORD *)v239 = v235;
                *(_OWORD *)(v239 + 8) = *(_OWORD *)&v516[8];
                *(_QWORD *)&v516[8] = 0;
                *(_QWORD *)&v516[16] = 0;
                *(_OWORD *)(v239 + 24) = *(_OWORD *)v517;
                *(_QWORD *)v517 = 0;
                *(_QWORD *)&v517[8] = 0;
                *((_QWORD *)v239 + 5) = v241;
                *((_QWORD *)v239 + 6) = v240;
                v239[56] = 16;
                v515 = 0;
                v512[0] = v239;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v203 + 24) + 40))(*(_QWORD *)(v203 + 24), v512);
                v242 = v512[0];
                v512[0] = 0;
                if (v242)
                {
                  v243 = (std::__shared_weak_count *)*((_QWORD *)v242 + 4);
                  if (v243)
                  {
                    v244 = (unint64_t *)&v243->__shared_owners_;
                    do
                      v245 = __ldaxr(v244);
                    while (__stlxr(v245 - 1, v244));
                    if (!v245)
                    {
                      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                      std::__shared_weak_count::__release_weak(v243);
                    }
                  }
                  v246 = (std::__shared_weak_count *)*((_QWORD *)v242 + 2);
                  if (v246)
                  {
                    v247 = (unint64_t *)&v246->__shared_owners_;
                    do
                      v248 = __ldaxr(v247);
                    while (__stlxr(v248 - 1, v247));
                    if (!v248)
                    {
                      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                      std::__shared_weak_count::__release_weak(v246);
                    }
                  }
                  MEMORY[0x212BC6398](v242, 0x10F0C40B62ED6C6);
                  v249 = v515;
                  v515 = 0;
                  if (v249)
                  {
                    v250 = *(std::__shared_weak_count **)(v249 + 32);
                    if (v250)
                    {
                      v251 = (unint64_t *)&v250->__shared_owners_;
                      do
                        v252 = __ldaxr(v251);
                      while (__stlxr(v252 - 1, v251));
                      if (!v252)
                      {
                        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                        std::__shared_weak_count::__release_weak(v250);
                      }
                    }
                    v253 = *(std::__shared_weak_count **)(v249 + 16);
                    if (v253)
                    {
                      v254 = (unint64_t *)&v253->__shared_owners_;
                      do
                        v255 = __ldaxr(v254);
                      while (__stlxr(v255 - 1, v254));
                      if (!v255)
                      {
                        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                        std::__shared_weak_count::__release_weak(v253);
                      }
                    }
                    MEMORY[0x212BC6398](v249, 0x10F0C40B62ED6C6);
                  }
                }
                v256 = *(std::__shared_weak_count **)&v517[8];
                v257 = v484;
                if (*(_QWORD *)&v517[8])
                {
                  v258 = (unint64_t *)(*(_QWORD *)&v517[8] + 8);
                  do
                    v259 = __ldaxr(v258);
                  while (__stlxr(v259 - 1, v258));
                  if (!v259)
                  {
                    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                    std::__shared_weak_count::__release_weak(v256);
                  }
                }
                v260 = *(std::__shared_weak_count **)&v516[16];
                if (*(_QWORD *)&v516[16])
                {
                  v261 = (unint64_t *)(*(_QWORD *)&v516[16] + 8);
                  do
                    v262 = __ldaxr(v261);
                  while (__stlxr(v262 - 1, v261));
                  if (!v262)
                  {
                    ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                    std::__shared_weak_count::__release_weak(v260);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v227, OS_LOG_TYPE_ERROR);
                v263 = *(float *)v188;
                v264 = *v487;
                *(_DWORD *)v516 = 134219264;
                v257 = v484;
                *(_QWORD *)&v516[4] = v484;
                *(_WORD *)&v516[12] = 2048;
                *(_QWORD *)&v516[14] = v193;
                *(_WORD *)&v516[22] = 1024;
                *(_DWORD *)v517 = v481;
                *(_WORD *)&v517[4] = 1024;
                *(_DWORD *)&v517[6] = v478;
                *(_WORD *)&v517[10] = 2048;
                *(double *)&v517[12] = v263;
                *(_WORD *)&v517[20] = 2048;
                *(double *)&v517[22] = v264;
                v265 = (void *)_os_log_send_and_compose_impl();
                if (v265)
                  free(v265);
              }
              if (v480)
              {
                sub_20E8C003C((uint64_t)&p_p, "CV3DMLFeatureDetection: MLDescriptorExtractionUtil: AreaBinning: bin index out of bound: %lu, bins size: %lu, image width: %i, image height: %i, x: %f, y: %f", v257, 0xAAAAAAAAAAAAAAABLL * ((v501 - category) >> 3), v481, v478, *(float *)v188, *v487);
                sub_20E863570((uint64_t)&p_p);
              }
              sub_20E863570((uint64_t)&p_p);
              v266 = v511;
              if (v511)
              {
                v267 = (unint64_t *)&v511->__shared_owners_;
                do
                  v268 = __ldaxr(v267);
                while (__stlxr(v268 - 1, v267));
                if (!v268)
                {
                  ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                  std::__shared_weak_count::__release_weak(v266);
                }
              }
              v192 = v501;
              goto LABEL_332;
            }
          }
          memmove(v221, v219, v220);
          goto LABEL_264;
        }
        sub_20ED37C84(&__p);
        if (**((int **)__p + 7) > 5)
          goto LABEL_664;
        v155 = *((unsigned __int8 *)__p + 72);
        v156 = sub_20E8C31DC((uint64_t)__p, "OSLogSurrogateAppender", 1, 0);
        v157 = v156;
        if (!v155 && !v156)
          goto LABEL_664;
        p_p = &__p;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v505 = std::chrono::system_clock::now().__d_.__rep_;
        v506 = 5;
        v507 = "unknown file";
        v508 = 272;
        v510 = 0;
        v511 = 0;
        v509 = "unknown function";
        v158 = (unsigned __int8 *)*p_p;
        if (*((char *)*p_p + 39) < 0)
        {
          v160 = (const char *)*((_QWORD *)v158 + 2);
          v159 = *((_QWORD *)v158 + 3);
        }
        else
        {
          v159 = *((unsigned __int8 *)*p_p + 39);
          v160 = (char *)*p_p + 16;
        }
        v489 = (uint64_t)*p_p + 16;
        v482 = v136;
        v374 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v374 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v516);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v516);
          if (v517[0] && (v516[23] & 0x80000000) != 0)
            operator delete(*(void **)v516);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v375 = byte_254A4A4F8;
        else
          v375 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v376 = byte_254A4A4F8[23];
        else
          v376 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v516 = os_log_create(v375, v160);
        v377 = &v516[8];
        if (v376 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v376 >= 0x17)
        {
          v378 = v157;
          v379 = v160;
          v380 = v158;
          v381 = v155;
          v382 = v137;
          v383 = (v376 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v376 | 7) != 0x17)
            v383 = v376 | 7;
          v137 = v383 + 1;
          v377 = operator new(v383 + 1);
          *(_QWORD *)&v516[16] = v376;
          *(_QWORD *)v517 = v137 | 0x8000000000000000;
          *(_QWORD *)&v516[8] = v377;
          LODWORD(v137) = v382;
          v155 = v381;
          v158 = v380;
          v160 = v379;
          v157 = v378;
        }
        else
        {
          v517[7] = v376;
          if (!v376)
          {
LABEL_515:
            v377[v376] = 0;
            v517[8] = 1;
            v384 = &v517[16];
            if (v159 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v159 >= 0x17)
            {
              v385 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v159 | 7) != 0x17)
                v385 = v159 | 7;
              v386 = v385 + 1;
              v384 = operator new(v385 + 1);
              *(_QWORD *)&v517[24] = v159;
              v518 = v386 | 0x8000000000000000;
              *(_QWORD *)&v517[16] = v384;
            }
            else
            {
              HIBYTE(v518) = v159;
              if (!v159)
                goto LABEL_523;
            }
            memmove(v384, v160, v159);
LABEL_523:
            v384[v159] = 0;
            v519 = 1;
            v387 = *(NSObject **)v516;
            if (SHIBYTE(v518) < 0)
              operator delete(*(void **)&v517[16]);
            if (v517[8] && (v517[7] & 0x80000000) != 0)
              operator delete(*(void **)&v516[8]);
            if (*(_QWORD *)v516)
              os_release(*(void **)v516);
            if (v157 && *(_QWORD *)(v157 + 24))
            {
              v388 = _os_log_pack_size();
              v389 = (std::__shared_weak_count_vtbl *)operator new(v388, (std::align_val_t)8uLL);
              v390 = (std::__shared_weak_count *)operator new();
              v391 = v390;
              v390->__shared_owners_ = 0;
              v392 = (unint64_t *)&v390->__shared_owners_;
              v390->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v390->__shared_weak_owners_ = 0;
              v390[1].__vftable = v389;
              *(_QWORD *)v516 = v389;
              *(_QWORD *)&v516[8] = v389;
              *(_QWORD *)&v516[16] = v390;
              do
                v393 = __ldxr(v392);
              while (__stxr(v393 + 1, v392));
              memset(v517, 0, 24);
              do
                v394 = __ldaxr(v392);
              while (__stlxr(v394 - 1, v392));
              if (!v394)
              {
                ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
                std::__shared_weak_count::__release_weak(v391);
              }
              v395 = *(_QWORD *)v516;
              v396 = _os_log_pack_fill();
              *(_DWORD *)v396 = 67109376;
              *(_DWORD *)(v396 + 4) = v482;
              *(_WORD *)(v396 + 8) = 1024;
              *(_DWORD *)(v396 + 10) = v137;
              v397 = (char *)operator new();
              v398 = v158[39];
              v399 = v489;
              if ((v398 & 0x80u) != 0)
              {
                v399 = *((_QWORD *)v158 + 2);
                v398 = *((_QWORD *)v158 + 3);
              }
              *(_QWORD *)v397 = v395;
              *(_OWORD *)(v397 + 8) = *(_OWORD *)&v516[8];
              *(_QWORD *)&v516[8] = 0;
              *(_QWORD *)&v516[16] = 0;
              *(_OWORD *)(v397 + 24) = *(_OWORD *)v517;
              *(_QWORD *)v517 = 0;
              *(_QWORD *)&v517[8] = 0;
              *((_QWORD *)v397 + 5) = v399;
              *((_QWORD *)v397 + 6) = v398;
              v397[56] = 16;
              category = 0;
              v512[0] = v397;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v157 + 24) + 40))(*(_QWORD *)(v157 + 24), v512);
              v400 = v512[0];
              v512[0] = 0;
              if (v400)
              {
                v401 = (std::__shared_weak_count *)*((_QWORD *)v400 + 4);
                if (v401)
                {
                  v402 = (unint64_t *)&v401->__shared_owners_;
                  do
                    v403 = __ldaxr(v402);
                  while (__stlxr(v403 - 1, v402));
                  if (!v403)
                  {
                    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                    std::__shared_weak_count::__release_weak(v401);
                  }
                }
                v404 = (std::__shared_weak_count *)*((_QWORD *)v400 + 2);
                if (v404)
                {
                  v405 = (unint64_t *)&v404->__shared_owners_;
                  do
                    v406 = __ldaxr(v405);
                  while (__stlxr(v406 - 1, v405));
                  if (!v406)
                  {
                    ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                    std::__shared_weak_count::__release_weak(v404);
                  }
                }
                MEMORY[0x212BC6398](v400, 0x10F0C40B62ED6C6);
                v407 = category;
                category = 0;
                if (v407)
                {
                  v408 = (std::__shared_weak_count *)*((_QWORD *)v407 + 4);
                  if (v408)
                  {
                    v409 = (unint64_t *)&v408->__shared_owners_;
                    do
                      v410 = __ldaxr(v409);
                    while (__stlxr(v410 - 1, v409));
                    if (!v410)
                    {
                      ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
                      std::__shared_weak_count::__release_weak(v408);
                    }
                  }
                  v411 = (std::__shared_weak_count *)*((_QWORD *)v407 + 2);
                  if (v411)
                  {
                    v412 = (unint64_t *)&v411->__shared_owners_;
                    do
                      v413 = __ldaxr(v412);
                    while (__stlxr(v413 - 1, v412));
                    if (!v413)
                    {
                      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                      std::__shared_weak_count::__release_weak(v411);
                    }
                  }
                  MEMORY[0x212BC6398](v407, 0x10F0C40B62ED6C6);
                }
              }
              v414 = *(std::__shared_weak_count **)&v517[8];
              if (*(_QWORD *)&v517[8])
              {
                v415 = (unint64_t *)(*(_QWORD *)&v517[8] + 8);
                do
                  v416 = __ldaxr(v415);
                while (__stlxr(v416 - 1, v415));
                if (!v416)
                {
                  ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
                  std::__shared_weak_count::__release_weak(v414);
                }
              }
              v417 = *(std::__shared_weak_count **)&v516[16];
              if (*(_QWORD *)&v516[16])
              {
                v418 = (unint64_t *)(*(_QWORD *)&v516[16] + 8);
                do
                  v419 = __ldaxr(v418);
                while (__stlxr(v419 - 1, v418));
                if (!v419)
                {
                  ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
                  std::__shared_weak_count::__release_weak(v417);
                }
              }
            }
            else
            {
              os_log_type_enabled(v387, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v516 = 67109376;
              *(_DWORD *)&v516[4] = v482;
              *(_WORD *)&v516[8] = 1024;
              *(_DWORD *)&v516[10] = v137;
              v420 = (void *)_os_log_send_and_compose_impl();
              if (v420)
                free(v420);
            }
            if (v155)
            {
              sub_20E8C003C((uint64_t)&p_p, "CV3DMLFeatureDetection: MLDescriptorExtractionUtil: AreaBinning: Invalid image width or height given: [w:%i, h:%i]", v482, v137);
              sub_20E863570((uint64_t)&p_p);
            }
            sub_20E863570((uint64_t)&p_p);
            v421 = v511;
            if (!v511)
              goto LABEL_664;
            v422 = (unint64_t *)&v511->__shared_owners_;
            do
              v423 = __ldaxr(v422);
            while (__stlxr(v423 - 1, v422));
LABEL_662:
            if (!v423)
            {
              ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
              std::__shared_weak_count::__release_weak(v421);
            }
            goto LABEL_664;
          }
        }
        memmove(v377, v375, v376);
        goto LABEL_515;
      }
    }
    if (v31)
      goto LABEL_664;
    while (1)
    {
      v63 = (unint64_t)v493[1];
      v62 = (unint64_t **)v494[0];
      v64 = *((_QWORD *)v494[0] + 1);
      v65 = (uint8x8_t)vcnt_s8((int8x8_t)v493[1]);
      v65.i16[0] = vaddlv_u8(v65);
      if (v65.u32[0] > 1uLL)
      {
        if ((void *)v64 >= v493[1])
          v64 %= (unint64_t)v493[1];
      }
      else
      {
        v64 &= (unint64_t)v493[1] - 1;
      }
      v66 = *(unint64_t **)v494[0];
      v67 = (void **)*((_QWORD *)v493[0] + v64);
      do
      {
        v68 = v67;
        v67 = (void **)*v67;
      }
      while (v67 != v494[0]);
      if (v68 == v494)
        goto LABEL_82;
      v69 = (unint64_t)v68[1];
      if (v65.u32[0] > 1uLL)
      {
        if ((void *)v69 >= v493[1])
          v69 %= (unint64_t)v493[1];
      }
      else
      {
        v69 &= (unint64_t)v493[1] - 1;
      }
      if (v69 != v64)
      {
LABEL_82:
        if (v66)
        {
          v70 = v66[1];
          if (v65.u32[0] > 1uLL)
          {
            v71 = v66[1];
            if ((void *)v70 >= v493[1])
              v71 = v70 % (unint64_t)v493[1];
          }
          else
          {
            v71 = v70 & ((unint64_t)v493[1] - 1);
          }
          if (v71 == v64)
            goto LABEL_86;
        }
        *((_QWORD *)v493[0] + v64) = 0;
        v66 = *v62;
      }
      if (v66)
      {
        v70 = v66[1];
LABEL_86:
        if (v65.u32[0] > 1uLL)
        {
          if (v70 >= v63)
            v70 %= v63;
        }
        else
        {
          v70 &= v63 - 1;
        }
        if (v70 != v64)
        {
          *((_QWORD *)v493[0] + v70) = v68;
          v66 = *v62;
        }
      }
      *v68 = v66;
      v494[1] = v30 - 1;
      operator delete(v62);
      v30 = (char *)v494[1];
      if (v494[1] <= (void *)a4)
        goto LABEL_664;
    }
  }
  v16 = *a3;
  v15 = a3[1];
  if (*a3 == v15)
  {
LABEL_13:
    if (v16 != v15)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractionUtil.cpp", 113, (uint64_t)"range::is_sorted(feature_3d_indices)", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v8 = (uint64_t)(a2[1] - *a2) >> 5;
    }
  }
  else
  {
    v17 = v16 + 4;
    while (v17 != v15)
    {
      v19 = *((_DWORD *)v17 - 1);
      v18 = *(_DWORD *)v17;
      v17 += 4;
      if (v18 < v19)
      {
        v16 = v17 - 4;
        goto LABEL_13;
      }
    }
  }
  v20 = *(int32x4_t **)a6;
  v21 = *(int32x4_t **)(a6 + 8);
  v22 = ((uint64_t)v21->i64 - *(_QWORD *)a6) >> 2;
  if (v8 <= v22)
  {
    if (v8 < v22)
    {
      v21 = (int32x4_t *)((char *)v20 + 4 * v8);
      *(_QWORD *)(a6 + 8) = v21;
    }
  }
  else
  {
    sub_20E93DC84(a6, v8 - v22);
    v20 = *(int32x4_t **)a6;
    v21 = *(int32x4_t **)(a6 + 8);
  }
  if (v20 == v21)
    goto LABEL_97;
  v59 = (char *)v21 - (char *)v20 - 4;
  if (v59 >= 0x1C)
  {
    v72 = (v59 >> 2) + 1;
    v60 = v72 & 0x7FFFFFFFFFFFFFF8;
    v61 = (int32x4_t *)((char *)v20 + 4 * (v72 & 0x7FFFFFFFFFFFFFF8));
    v73 = (int32x4_t)xmmword_210365350;
    v74 = v20 + 1;
    v75.i64[0] = 0x400000004;
    v75.i64[1] = 0x400000004;
    v76.i64[0] = 0x800000008;
    v76.i64[1] = 0x800000008;
    v77 = v72 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v74[-1] = v73;
      *v74 = vaddq_s32(v73, v75);
      v73 = vaddq_s32(v73, v76);
      v74 += 2;
      v77 -= 8;
    }
    while (v77);
    if (v72 == v60)
      goto LABEL_97;
  }
  else
  {
    LODWORD(v60) = 0;
    v61 = v20;
  }
  do
  {
    v61->i32[0] = v60;
    v61 = (int32x4_t *)((char *)v61 + 4);
    LODWORD(v60) = v60 + 1;
  }
  while (v61 != v21);
LABEL_97:
  v78 = *a3;
  v79 = a3[1];
  if (*a3 != v79)
  {
    v80 = 0;
    v81 = *a3;
    do
    {
      v82 = *(_DWORD *)v81;
      v81 += 4;
      v83 = v80;
      v84 = v82;
      v85 = v20->i32[v83];
      v20->i32[v83] = v20->i32[v84];
      v20->i32[v84] = v85;
      ++v80;
    }
    while (v81 != v79);
  }
  v86 = v79 - v78;
  v87 = a4 - (v86 >> 2);
  v88 = (int)(float)((float)v87 * 0.35);
  v89 = v87 - v88;
  v90 = (unsigned __int32 *)((char *)v20->u32 + ((uint64_t)(v86 << 30) >> 30));
  v91 = &v90[v88];
  if (v91 == (unsigned int *)v21)
    goto LABEL_391;
  v92 = *a2;
  v93 = (unsigned int *)v21;
  while (1)
  {
    v94 = v93 - v90;
    if (v94 < 2)
      goto LABEL_391;
    if (v94 == 3)
      break;
    if (v94 == 2)
    {
      v168 = *(v93 - 1);
      v169 = *v90;
      if (*(float *)(v92 + 32 * v168 + 20) > *(float *)(v92 + 32 * v169 + 20))
      {
        *v90 = v168;
        *(v93 - 1) = v169;
      }
      goto LABEL_391;
    }
    if ((char *)v93 - (char *)v90 <= 31)
    {
      if (v93 - 1 == v90)
        goto LABEL_391;
      v170 = *a2;
      while (2)
      {
        v171 = v93;
        if (v90 == v93)
        {
LABEL_210:
          if (v171 != v90)
          {
            v177 = *v90;
            *v90 = *v171;
            *v171 = v177;
          }
        }
        else
        {
          v172 = v90 + 1;
          if (v90 + 1 != v93)
          {
            v173 = *v90;
            v171 = v90;
            v174 = v90 + 1;
            do
            {
              v176 = *v174++;
              v175 = v176;
              if (*(float *)(v170 + 32 * v176 + 20) > *(float *)(v170 + 32 * v173 + 20))
              {
                v173 = v175;
                v171 = v172;
              }
              v172 = v174;
            }
            while (v174 != v93);
            goto LABEL_210;
          }
        }
        if (++v90 == v93 - 1)
          goto LABEL_391;
        continue;
      }
    }
    v95 = &v90[v94 >> 1];
    v97 = v93 - 1;
    v96 = *(v93 - 1);
    v98 = *v95;
    v99 = *v90;
    v100 = *(float *)(v92 + 32 * v98 + 20);
    v101 = *(float *)(v92 + 32 * v99 + 20);
    v102 = *(float *)(v92 + 32 * v96 + 20);
    if (v100 > v101)
    {
      if (v102 <= v100)
      {
        *v90 = v98;
        *v95 = v99;
        v105 = *v97;
        if (*(float *)(v92 + 32 * v105 + 20) > v101)
        {
          *v95 = v105;
          *v97 = v99;
          goto LABEL_114;
        }
      }
      else
      {
        *v90 = v96;
        *v97 = v99;
      }
LABEL_115:
      v106 = 1;
      goto LABEL_117;
    }
    if (v102 > v100)
    {
      *v95 = v96;
      *v97 = v98;
      v103 = *v95;
      v104 = *v90;
      if (*(float *)(v92 + 32 * v103 + 20) > *(float *)(v92 + 32 * v104 + 20))
      {
        *v90 = v103;
        *v95 = v104;
LABEL_114:
        v106 = 2;
        goto LABEL_117;
      }
      goto LABEL_115;
    }
    v106 = 0;
LABEL_117:
    v107 = *v90;
    v108 = *(float *)(v92 + 32 * v107 + 20);
    v109 = *(float *)(v92 + 32 * *v95 + 20);
    if (v108 <= v109)
    {
      v110 = v93 - 1;
      while (--v110 != v90)
      {
        v119 = *v110;
        if (*(float *)(v92 + 32 * v119 + 20) > v109)
        {
          *v90 = v119;
          *v110 = v107;
          ++v106;
          v111 = v90 + 1;
          if (v90 + 1 < v110)
            goto LABEL_119;
          goto LABEL_132;
        }
      }
      v124 = v90 + 1;
      v125 = *v97;
      if (v108 <= *(float *)(v92 + 32 * v125 + 20))
      {
        if (v124 == v97)
          goto LABEL_391;
        while (1)
        {
          v126 = *v124;
          if (v108 > *(float *)(v92 + 32 * v126 + 20))
            break;
          if (++v124 == v97)
            goto LABEL_391;
        }
        *v124++ = v125;
        *v97 = v126;
      }
      if (v124 == v97)
        goto LABEL_391;
      while (1)
      {
        v130 = *(float *)(v92 + 32 * *v90 + 20);
        do
        {
          v132 = *v124++;
          v131 = v132;
        }
        while (v130 <= *(float *)(v92 + 32 * v132 + 20));
        v133 = v124 - 1;
        do
        {
          v135 = *--v97;
          v134 = v135;
        }
        while (v130 > *(float *)(v92 + 32 * v135 + 20));
        if (v133 >= v97)
          break;
        *v133 = v134;
        *v97 = v131;
      }
      v90 = v124 - 1;
      if (v133 > v91)
        goto LABEL_391;
    }
    else
    {
      v110 = v93 - 1;
      v111 = v90 + 1;
      if (v90 + 1 >= v93 - 1)
      {
LABEL_132:
        v116 = v111;
      }
      else
      {
LABEL_119:
        v112 = v111;
        while (1)
        {
          v113 = *(float *)(v92 + 32 * *v95 + 20);
          do
          {
            v115 = *v112++;
            v114 = v115;
          }
          while (*(float *)(v92 + 32 * v115 + 20) > v113);
          v116 = v112 - 1;
          do
          {
            v118 = *--v110;
            v117 = v118;
          }
          while (*(float *)(v92 + 32 * v118 + 20) <= v113);
          if (v116 >= v110)
            break;
          *v116 = v117;
          *v110 = v114;
          ++v106;
          if (v116 == v95)
            v95 = v110;
        }
      }
      if (v116 != v95)
      {
        v120 = *v95;
        v121 = *v116;
        if (*(float *)(v92 + 32 * v120 + 20) > *(float *)(v92 + 32 * v121 + 20))
        {
          *v116 = v120;
          *v95 = v121;
          ++v106;
        }
      }
      if (v116 == v91)
        goto LABEL_391;
      if (!v106)
      {
        if (v116 <= v91)
        {
          v127 = v116 + 1;
          while (v127 != v93)
          {
            v128 = *(float *)(v92 + 32 * *v127 + 20);
            v129 = *(float *)(v92 + 32 * *(v127++ - 1) + 20);
            if (v128 > v129)
              goto LABEL_138;
          }
        }
        else
        {
          while (v111 != v116)
          {
            v122 = *(float *)(v92 + 32 * *v111 + 20);
            v123 = *(float *)(v92 + 32 * *(v111++ - 1) + 20);
            if (v122 > v123)
              goto LABEL_138;
          }
        }
        goto LABEL_391;
      }
LABEL_138:
      if (v116 <= v91)
        v90 = v116 + 1;
      else
        v93 = v116;
    }
    if (v93 == v91)
      goto LABEL_391;
  }
  v162 = *v90;
  v163 = v90[1];
  v164 = *(float *)(v92 + 32 * v163 + 20);
  v165 = *(float *)(v92 + 32 * v162 + 20);
  v166 = *(v93 - 1);
  v167 = *(float *)(v92 + 32 * v166 + 20);
  if (v164 <= v165)
  {
    if (v167 > v164)
    {
      v90[1] = v166;
      *(v93 - 1) = v163;
      v295 = *v90;
      v294 = v90[1];
      if (*(float *)(v92 + 32 * v294 + 20) > *(float *)(v92 + 32 * v295 + 20))
      {
        *v90 = v294;
        v90[1] = v295;
      }
    }
  }
  else
  {
    if (v167 <= v164)
    {
      *v90 = v163;
      v90[1] = v162;
      v303 = *(v93 - 1);
      if (*(float *)(v92 + 32 * v303 + 20) <= v165)
        goto LABEL_391;
      v90[1] = v303;
    }
    else
    {
      *v90 = v166;
    }
    *(v93 - 1) = v162;
  }
LABEL_391:
  v304 = &v91[v89];
  if (v304 == (unsigned int *)v21)
    goto LABEL_478;
  v305 = *a2;
  v306 = (unsigned int *)v21;
  while (2)
  {
    v307 = v306 - v91;
    if (v307 < 2)
      goto LABEL_478;
    if (v307 != 3)
    {
      if (v307 == 2)
      {
        v355 = *(v306 - 1);
        v356 = *v91;
        if (*(float *)(v305 + 32 * v355 + 28) > *(float *)(v305 + 32 * v356 + 28))
        {
          *v91 = v355;
          *(v306 - 1) = v356;
        }
        goto LABEL_478;
      }
      if ((char *)v306 - (char *)v91 <= 31)
      {
        if (v306 - 1 == v91)
          goto LABEL_478;
        v357 = *a2;
        while (2)
        {
          v358 = v306;
          if (v91 == v306)
          {
LABEL_470:
            if (v358 != v91)
            {
              v364 = *v91;
              *v91 = *v358;
              *v358 = v364;
            }
          }
          else
          {
            v359 = v91 + 1;
            if (v91 + 1 != v306)
            {
              v360 = *v91;
              v358 = v91;
              v361 = v91 + 1;
              do
              {
                v363 = *v361++;
                v362 = v363;
                if (*(float *)(v357 + 32 * v363 + 28) > *(float *)(v357 + 32 * v360 + 28))
                {
                  v360 = v362;
                  v358 = v359;
                }
                v359 = v361;
              }
              while (v361 != v306);
              goto LABEL_470;
            }
          }
          if (++v91 == v306 - 1)
            goto LABEL_478;
          continue;
        }
      }
      v308 = &v91[v307 >> 1];
      v309 = v306 - 1;
      v310 = *(v306 - 1);
      v311 = *v308;
      v312 = *v91;
      v313 = *(float *)(v305 + 32 * v311 + 28);
      v314 = *(float *)(v305 + 32 * v312 + 28);
      v315 = *(float *)(v305 + 32 * v310 + 28);
      if (v313 <= v314)
      {
        if (v315 <= v313)
        {
          v319 = 0;
          goto LABEL_408;
        }
        *v308 = v310;
        *v309 = v311;
        v316 = *v308;
        v317 = *v91;
        if (*(float *)(v305 + 32 * v316 + 28) > *(float *)(v305 + 32 * v317 + 28))
        {
          *v91 = v316;
          *v308 = v317;
          goto LABEL_405;
        }
      }
      else
      {
        if (v315 > v313)
        {
          *v91 = v310;
          *v309 = v312;
          goto LABEL_406;
        }
        *v91 = v311;
        *v308 = v312;
        v318 = *v309;
        if (*(float *)(v305 + 32 * v318 + 28) > v314)
        {
          *v308 = v318;
          *v309 = v312;
LABEL_405:
          v319 = 2;
LABEL_408:
          v320 = *v91;
          v321 = *(float *)(v305 + 32 * v320 + 28);
          v322 = *(float *)(v305 + 32 * *v308 + 28);
          if (v321 <= v322)
          {
            v323 = v306 - 1;
            while (--v323 != v91)
            {
              v332 = *v323;
              if (*(float *)(v305 + 32 * v332 + 28) > v322)
              {
                *v91 = v332;
                *v323 = v320;
                ++v319;
                v324 = v91 + 1;
                if (v91 + 1 < v323)
                  goto LABEL_410;
                goto LABEL_423;
              }
            }
            v337 = v91 + 1;
            v338 = *v309;
            if (v321 <= *(float *)(v305 + 32 * v338 + 28))
            {
              if (v337 == v309)
                goto LABEL_478;
              while (1)
              {
                v339 = *v337;
                if (v321 > *(float *)(v305 + 32 * v339 + 28))
                  break;
                if (++v337 == v309)
                  goto LABEL_478;
              }
              *v337++ = v338;
              *v309 = v339;
            }
            if (v337 == v309)
              goto LABEL_478;
            while (1)
            {
              v343 = *(float *)(v305 + 32 * *v91 + 28);
              do
              {
                v345 = *v337++;
                v344 = v345;
              }
              while (v343 <= *(float *)(v305 + 32 * v345 + 28));
              v346 = v337 - 1;
              do
              {
                v348 = *--v309;
                v347 = v348;
              }
              while (v343 > *(float *)(v305 + 32 * v348 + 28));
              if (v346 >= v309)
                break;
              *v346 = v347;
              *v309 = v344;
            }
            v91 = v337 - 1;
            if (v346 > v304)
              goto LABEL_478;
          }
          else
          {
            v323 = v306 - 1;
            v324 = v91 + 1;
            if (v91 + 1 >= v306 - 1)
            {
LABEL_423:
              v329 = v324;
            }
            else
            {
LABEL_410:
              v325 = v324;
              while (1)
              {
                v326 = *(float *)(v305 + 32 * *v308 + 28);
                do
                {
                  v328 = *v325++;
                  v327 = v328;
                }
                while (*(float *)(v305 + 32 * v328 + 28) > v326);
                v329 = v325 - 1;
                do
                {
                  v331 = *--v323;
                  v330 = v331;
                }
                while (*(float *)(v305 + 32 * v331 + 28) <= v326);
                if (v329 >= v323)
                  break;
                *v329 = v330;
                *v323 = v327;
                ++v319;
                if (v329 == v308)
                  v308 = v323;
              }
            }
            if (v329 != v308)
            {
              v333 = *v308;
              v334 = *v329;
              if (*(float *)(v305 + 32 * v333 + 28) > *(float *)(v305 + 32 * v334 + 28))
              {
                *v329 = v333;
                *v308 = v334;
                ++v319;
              }
            }
            if (v329 == v304)
              goto LABEL_478;
            if (!v319)
            {
              if (v329 <= v304)
              {
                v340 = v329 + 1;
                while (v340 != v306)
                {
                  v341 = *(float *)(v305 + 32 * *v340 + 28);
                  v342 = *(float *)(v305 + 32 * *(v340++ - 1) + 28);
                  if (v341 > v342)
                    goto LABEL_429;
                }
              }
              else
              {
                while (v324 != v329)
                {
                  v335 = *(float *)(v305 + 32 * *v324 + 28);
                  v336 = *(float *)(v305 + 32 * *(v324++ - 1) + 28);
                  if (v335 > v336)
                    goto LABEL_429;
                }
              }
              goto LABEL_478;
            }
LABEL_429:
            if (v329 <= v304)
              v91 = v329 + 1;
            else
              v306 = v329;
          }
          if (v306 == v304)
            goto LABEL_478;
          continue;
        }
      }
LABEL_406:
      v319 = 1;
      goto LABEL_408;
    }
    break;
  }
  v349 = *v91;
  v350 = v91[1];
  v351 = *(float *)(v305 + 32 * v350 + 28);
  v352 = *(float *)(v305 + 32 * v349 + 28);
  v353 = *(v306 - 1);
  v354 = *(float *)(v305 + 32 * v353 + 28);
  if (v351 <= v352)
  {
    if (v354 > v351)
    {
      v91[1] = v353;
      *(v306 - 1) = v350;
      v366 = *v91;
      v365 = v91[1];
      if (*(float *)(v305 + 32 * v365 + 28) > *(float *)(v305 + 32 * v366 + 28))
      {
        *v91 = v365;
        v91[1] = v366;
      }
    }
  }
  else
  {
    if (v354 <= v351)
    {
      *v91 = v350;
      v91[1] = v349;
      v367 = *(v306 - 1);
      if (*(float *)(v305 + 32 * v367 + 28) <= v352)
        goto LABEL_478;
      v91[1] = v367;
    }
    else
    {
      *v91 = v353;
    }
    *(v306 - 1) = v349;
  }
LABEL_478:
  v368 = ((char *)v21 - (char *)v20) >> 2;
  if (a4 <= v368)
  {
    if (a4 < v368)
      *(_QWORD *)(a6 + 8) = (char *)v20 + 4 * a4;
    v56 = LFV2KeypointsCreate();
    v370 = *(int32x4_t **)a6;
    v369 = *(int32x4_t **)(a6 + 8);
    if (v370 != v369)
      goto LABEL_484;
  }
  else
  {
    sub_20E93DC84(a6, a4 - v368);
    v56 = LFV2KeypointsCreate();
    v370 = *(int32x4_t **)a6;
    v369 = *(int32x4_t **)(a6 + 8);
    if (v370 == v369)
      return v56;
    do
    {
LABEL_484:
      v370 = (int32x4_t *)((char *)v370 + 4);
      LFV2KeypointsAppend();
    }
    while (v370 != v369);
  }
  return v56;
}

void sub_20ED37764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  if (*(_BYTE *)(v49 - 184))
  {
    if (*(char *)(v49 - 185) < 0)
      operator delete(*(void **)(v49 - 208));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a49);
  sub_20E8C25A8((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED37A4C(void ***a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v12;
  int v13;
  void **v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  _BYTE *v25;
  _DWORD *v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  int v37;

  v4 = LFV2KeypointsCreate();
  v5 = *a1;
  v6 = **a1;
  v5[1] = v6;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 > ((_BYTE *)v5[2] - (_BYTE *)v6) >> 2)
  {
    if (v7 >> 62)
      sub_20E867F44();
    v8 = 4 * v7;
    v9 = (char *)operator new(4 * v7);
    *v5 = v9;
    v5[1] = v9;
    v5[2] = &v9[v8];
    if (v6)
      operator delete(v6);
  }
  v10 = *(uint64_t **)(a2 + 16);
  if (v10)
  {
    while (1)
    {
      v13 = *((_DWORD *)v10 + 4);
      v14 = *a1;
      v16 = (char *)(*a1)[1];
      v15 = (char *)(*a1)[2];
      if (v16 >= v15)
        break;
      *(_DWORD *)v16 = v13;
      v12 = (uint64_t)(v16 + 4);
LABEL_8:
      v14[1] = (void *)v12;
      LFV2KeypointsAppend();
      v10 = (uint64_t *)*v10;
      if (!v10)
        return v4;
    }
    v17 = v4;
    v18 = (char *)*v14;
    v19 = v16 - (_BYTE *)*v14;
    v20 = v19 >> 2;
    v21 = (v19 >> 2) + 1;
    if (v21 >> 62)
      sub_20E867F44();
    v22 = v15 - v18;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    if (v21)
    {
      if (v21 >> 62)
        sub_20E877A38();
      v23 = *((_DWORD *)v10 + 4);
      v24 = v21;
      v25 = operator new(4 * v21);
      v26 = &v25[4 * v20];
      *v26 = v23;
      v12 = (uint64_t)(v26 + 1);
      v27 = v16 - v18;
      if (v16 != v18)
      {
LABEL_18:
        v28 = v27 - 4;
        if (v28 >= 0x2C)
        {
          v29 = v16 - v25 - v19;
          v4 = v17;
          if (v29 >= 0x20)
          {
            v30 = (v28 >> 2) + 1;
            v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
            v32 = &v16[-v31];
            v26 = (_DWORD *)((char *)v26 - v31);
            v33 = &v25[4 * v20 - 16];
            v34 = v16 - 16;
            v35 = v30 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v36 = *(_OWORD *)v34;
              *(v33 - 1) = *((_OWORD *)v34 - 1);
              *v33 = v36;
              v33 -= 2;
              v34 -= 32;
              v35 -= 8;
            }
            while (v35);
            v16 = v32;
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_27:
              *v14 = v26;
              v14[1] = (void *)v12;
              v14[2] = &v25[4 * v24];
              if (v18)
                operator delete(v18);
              goto LABEL_8;
            }
          }
        }
        else
        {
          v4 = v17;
        }
        do
        {
          v37 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *--v26 = v37;
        }
        while (v16 != v18);
        goto LABEL_27;
      }
    }
    else
    {
      v24 = 0;
      v25 = 0;
      v26 = (_DWORD *)(4 * v20);
      *(_DWORD *)(4 * v20) = v13;
      v12 = 4 * v20 + 4;
      v27 = v16 - v18;
      if (v16 != v18)
        goto LABEL_18;
    }
    v4 = v17;
    goto LABEL_27;
  }
  return v4;
}

void sub_20ED37C84(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)qword_254A5F110);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_254A5F110))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F108);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(qword_254A5F110);
  }
  *a1 = qword_254A5F108;
}

void sub_20ED37D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_254A5F110);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_254A5F110);
  _Unwind_Resume(a1);
}

unint64_t sub_20ED37D78(unint64_t result, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  int v8;
  unint64_t v10;
  float v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  float v17;
  float v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  unint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  float v40;
  float v41;
  unsigned int *v42;
  unint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  uint64_t *v51;
  unsigned int *v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  signed int v71;
  unsigned int *v72;
  unsigned int *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int *v76;
  float v77;
  float v78;
  uint64_t v79;
  int v80;
  float v81;
  float v82;
  unsigned int *v83;
  unint64_t v84;
  float v85;
  unint64_t v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  float v99;
  float v100;
  unsigned int *v101;
  unint64_t v102;
  float v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  unsigned int *v110;
  unsigned int *v111;
  float v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int *v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;

  v5 = *a2;
  v6 = a2[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - *a2);
  if (v7 <= result)
  {
    while (v5 != v6)
    {
      result = (unint64_t)sub_20EABA148(a4, v5, v5);
      v5 += 3;
    }
  }
  else
  {
    v8 = a3;
    v10 = result;
    v11 = (float)result * 0.35;
    v12 = (unint64_t)v11;
    if (v7 >= (unint64_t)v11 + a3)
      v7 = (unint64_t)v11 + a3;
    v13 = &v5[3 * (int)v7];
    while (v6 != v13)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5);
      if (v14 < 2)
        break;
      if (v14 == 3)
      {
        v51 = (uint64_t *)(v5 + 3);
        v52 = v6 - 3;
        v53 = *((float *)v5 + 5);
        v54 = *((float *)v6 - 1);
        if (v53 <= *((float *)v5 + 2))
        {
          if (v54 > v53)
          {
            v61 = *v51;
            v172 = v5[5];
            v62 = *(v6 - 1);
            *v51 = *(_QWORD *)v52;
            v5[5] = v62;
            *(v6 - 1) = v172;
            *(_QWORD *)v52 = v61;
            if (*((float *)v5 + 5) > *((float *)v5 + 2))
            {
              v173 = v5[2];
              v142 = *(_QWORD *)v5;
              *(_QWORD *)v5 = *v51;
              v5[2] = v5[5];
              *v51 = v142;
              v5[5] = v173;
            }
          }
        }
        else if (v54 <= v53)
        {
          v174 = v5[2];
          v143 = *(_QWORD *)v5;
          *(_QWORD *)v5 = *v51;
          v5[2] = v5[5];
          *v51 = v143;
          v5[5] = v174;
          if (*((float *)v6 - 1) > *((float *)v5 + 5))
          {
            v63 = *v51;
            v175 = v5[5];
            v64 = *(v6 - 1);
            *v51 = *(_QWORD *)v52;
            v5[5] = v64;
            *(v6 - 1) = v175;
            *(_QWORD *)v52 = v63;
          }
        }
        else
        {
          v169 = v5[2];
          v139 = *(_QWORD *)v5;
          v55 = *(_QWORD *)v52;
          v5[2] = *(v6 - 1);
          *(_QWORD *)v5 = v55;
          *(v6 - 1) = v169;
          *(_QWORD *)v52 = v139;
        }
        break;
      }
      if (v14 == 2)
      {
        if (*((float *)v6 - 1) > *((float *)v5 + 2))
        {
          v170 = v5[2];
          v140 = *(_QWORD *)v5;
          v56 = *(_QWORD *)(v6 - 3);
          v5[2] = *(v6 - 1);
          *(_QWORD *)v5 = v56;
          *(v6 - 1) = v170;
          *(_QWORD *)(v6 - 3) = v140;
        }
        break;
      }
      if ((char *)v6 - (char *)v5 <= 95)
      {
        while (v5 != v6 - 3)
        {
          v57 = v5;
          v5 += 3;
          if (v57 != v6 && v5 != v6)
          {
            v58 = v5;
            v59 = v57;
            do
            {
              if (*((float *)v58 + 2) > *((float *)v59 + 2))
                v59 = v58;
              v58 += 3;
            }
            while (v58 != v6);
            if (v59 != v57)
            {
              v171 = v57[2];
              v141 = *(_QWORD *)v57;
              v60 = *(_QWORD *)v59;
              v57[2] = v59[2];
              *(_QWORD *)v57 = v60;
              v59[2] = v171;
              *(_QWORD *)v59 = v141;
            }
          }
        }
        break;
      }
      v15 = (unint64_t)&v5[3 * (v14 >> 1)];
      v16 = v6 - 3;
      v17 = *(float *)(v15 + 8);
      v18 = *((float *)v6 - 1);
      if (v17 <= *((float *)v5 + 2))
      {
        if (v18 <= v17)
        {
          v20 = 0;
          v21 = *((float *)v5 + 2);
          v22 = *(float *)(v15 + 8);
          if (v21 <= v22)
            goto LABEL_30;
          goto LABEL_12;
        }
        v161 = *(_DWORD *)(v15 + 8);
        v131 = *(_QWORD *)v15;
        v31 = *(_QWORD *)v16;
        *(_DWORD *)(v15 + 8) = *(v6 - 1);
        *(_QWORD *)v15 = v31;
        *(v6 - 1) = v161;
        *(_QWORD *)v16 = v131;
        if (*(float *)(v15 + 8) > *((float *)v5 + 2))
        {
          v162 = v5[2];
          v132 = *(_QWORD *)v5;
          v32 = *(_QWORD *)v15;
          v5[2] = *(_DWORD *)(v15 + 8);
          *(_QWORD *)v5 = v32;
          *(_DWORD *)(v15 + 8) = v162;
          *(_QWORD *)v15 = v132;
          v20 = 2;
          v21 = *((float *)v5 + 2);
          v22 = *(float *)(v15 + 8);
          if (v21 <= v22)
            goto LABEL_30;
          goto LABEL_12;
        }
      }
      else
      {
        if (v18 > v17)
        {
          v159 = v5[2];
          v129 = *(_QWORD *)v5;
          v19 = *(_QWORD *)v16;
          v5[2] = *(v6 - 1);
          *(_QWORD *)v5 = v19;
          *(v6 - 1) = v159;
          *(_QWORD *)v16 = v129;
          v20 = 1;
          v21 = *((float *)v5 + 2);
          v22 = *(float *)(v15 + 8);
          if (v21 <= v22)
            goto LABEL_30;
          goto LABEL_12;
        }
        v163 = v5[2];
        v133 = *(_QWORD *)v5;
        v33 = *(_QWORD *)v15;
        v5[2] = *(_DWORD *)(v15 + 8);
        *(_QWORD *)v5 = v33;
        *(_DWORD *)(v15 + 8) = v163;
        *(_QWORD *)v15 = v133;
        if (*((float *)v6 - 1) > *(float *)(v15 + 8))
        {
          v164 = *(_DWORD *)(v15 + 8);
          v134 = *(_QWORD *)v15;
          v34 = *(_QWORD *)v16;
          *(_DWORD *)(v15 + 8) = *(v6 - 1);
          *(_QWORD *)v15 = v34;
          *(v6 - 1) = v164;
          *(_QWORD *)v16 = v134;
          v20 = 2;
          v21 = *((float *)v5 + 2);
          v22 = *(float *)(v15 + 8);
          if (v21 <= v22)
            goto LABEL_30;
          goto LABEL_12;
        }
      }
      v20 = 1;
      v21 = *((float *)v5 + 2);
      v22 = *(float *)(v15 + 8);
      if (v21 <= v22)
      {
LABEL_30:
        v35 = v6 - 3;
        while (1)
        {
          v23 = (unint64_t)(v35 - 3);
          if (v35 - 3 == v5)
            break;
          v36 = *((float *)v35 - 1);
          v35 -= 3;
          if (v36 > v22)
          {
            v165 = v5[2];
            v135 = *(_QWORD *)v5;
            v37 = *(_QWORD *)v23;
            v5[2] = *(_DWORD *)(v23 + 8);
            *(_QWORD *)v5 = v37;
            *(_DWORD *)(v23 + 8) = v165;
            *(_QWORD *)v23 = v135;
            ++v20;
            v24 = v5 + 3;
            if ((unint64_t)(v5 + 3) < v23)
              goto LABEL_13;
            goto LABEL_34;
          }
        }
        v42 = v5 + 3;
        if (v21 <= *((float *)v6 - 1))
        {
          if (v42 == v16)
            break;
          while (v21 <= *((float *)v42 + 2))
          {
            v42 += 3;
            if (v42 == v16)
              goto LABEL_93;
          }
          v167 = v42[2];
          v137 = *(_QWORD *)v42;
          v46 = *(_QWORD *)v16;
          v42[2] = *(v6 - 1);
          *(_QWORD *)v42 = v46;
          v42 += 3;
          *(v6 - 1) = v167;
          *(_QWORD *)v16 = v137;
        }
        if (v42 == v16)
          break;
        while (1)
        {
          v48 = *((float *)v5 + 2);
          v39 = v42 - 3;
          do
          {
            v49 = *((float *)v39 + 5);
            v39 += 3;
          }
          while (v48 <= v49);
          v42 = v39 + 3;
          do
          {
            v50 = *((float *)v16 - 1);
            v16 -= 3;
          }
          while (v48 > v50);
          if (v39 >= v16)
            break;
          v168 = v39[2];
          v138 = *(_QWORD *)v39;
          v47 = *(_QWORD *)v16;
          v39[2] = v16[2];
          *(_QWORD *)v39 = v47;
          v16[2] = v168;
          *(_QWORD *)v16 = v138;
        }
        if (v39 > v13)
          break;
        goto LABEL_68;
      }
LABEL_12:
      v23 = (unint64_t)(v6 - 3);
      v24 = v5 + 3;
      if (v5 + 3 >= v6 - 3)
      {
LABEL_34:
        v27 = (unint64_t)v24;
      }
      else
      {
LABEL_13:
        v25 = (unint64_t)v24;
        while (1)
        {
          v26 = *(float *)(v15 + 8);
          v27 = v25 - 12;
          do
          {
            v28 = *(float *)(v27 + 20);
            v27 += 12;
          }
          while (v28 > v26);
          v25 = v27 + 12;
          do
          {
            v29 = *(float *)(v23 - 4);
            v23 -= 12;
          }
          while (v29 <= v26);
          if (v27 >= v23)
            break;
          v160 = *(_DWORD *)(v27 + 8);
          v130 = *(_QWORD *)v27;
          v30 = *(_QWORD *)v23;
          *(_DWORD *)(v27 + 8) = *(_DWORD *)(v23 + 8);
          *(_QWORD *)v27 = v30;
          result = v160;
          *(_DWORD *)(v23 + 8) = v160;
          *(_QWORD *)v23 = v130;
          ++v20;
          if (v27 == v15)
            v15 = v23;
        }
      }
      if (v27 != v15 && *(float *)(v15 + 8) > *(float *)(v27 + 8))
      {
        v166 = *(_DWORD *)(v27 + 8);
        v136 = *(_QWORD *)v27;
        v38 = *(_QWORD *)v15;
        *(_DWORD *)(v27 + 8) = *(_DWORD *)(v15 + 8);
        *(_QWORD *)v27 = v38;
        *(_DWORD *)(v15 + 8) = v166;
        *(_QWORD *)v15 = v136;
        ++v20;
      }
      if ((unsigned int *)v27 == v13)
        break;
      if (!v20)
      {
        if (v27 <= (unint64_t)v13)
        {
          v43 = v27 + 12;
          while ((unsigned int *)v43 != v6)
          {
            v44 = *(float *)(v43 + 8);
            v45 = *(float *)(v43 - 4);
            v43 += 12;
            if (v44 > v45)
              goto LABEL_40;
          }
        }
        else
        {
          while (v24 != (unsigned int *)v27)
          {
            v40 = *((float *)v24 + 2);
            v41 = *((float *)v24 - 1);
            v24 += 3;
            if (v40 > v41)
              goto LABEL_40;
          }
        }
        break;
      }
LABEL_40:
      if (v27 <= (unint64_t)v13)
      {
        v39 = (unsigned int *)(v27 + 12);
      }
      else
      {
        v6 = (unsigned int *)v27;
        v39 = v5;
      }
LABEL_68:
      v5 = v39;
    }
LABEL_93:
    v65 = *(_QWORD *)(a4 + 24);
    v66 = v65 + v12;
    v68 = *a2;
    v67 = a2[1];
    if (v65 < v65 + v12 && v68 != v67)
    {
      do
      {
        result = (unint64_t)sub_20EABA148(a4, v68, v68);
        v68 += 3;
        v67 = a2[1];
      }
      while (*(_QWORD *)(a4 + 24) < v66 && v68 != v67);
    }
    if (v68 != v67)
    {
      v71 = v10 - v12 + v8;
      if ((int)(-1431655765 * ((unint64_t)((char *)v67 - (char *)v68) >> 2)) < v71)
        v71 = -1431655765 * ((unint64_t)((char *)v67 - (char *)v68) >> 2);
      v72 = &v68[3 * v71];
      if (v72 != v67)
      {
        v73 = v68;
        do
        {
          v74 = 0xAAAAAAAAAAAAAAABLL * (v67 - v73);
          if (v74 < 2)
            break;
          if (v74 == 3)
          {
            v110 = v73 + 3;
            v111 = v67 - 3;
            v112 = *((float *)v73 + 4);
            v113 = *((float *)v67 - 2);
            if (v112 <= *((float *)v73 + 1))
            {
              if (v113 > v112)
              {
                v122 = *(_QWORD *)v110;
                v189 = v73[5];
                v123 = v111[2];
                *(_QWORD *)v110 = *(_QWORD *)v111;
                v73[5] = v123;
                v111[2] = v189;
                *(_QWORD *)v111 = v122;
                if (*((float *)v73 + 4) > *((float *)v73 + 1))
                {
                  v190 = v73[2];
                  v157 = *(_QWORD *)v73;
                  *(_QWORD *)v73 = *(_QWORD *)v110;
                  v73[2] = v73[5];
                  *(_QWORD *)v110 = v157;
                  v73[5] = v190;
                }
              }
            }
            else
            {
              if (v113 <= v112)
              {
                v191 = v73[2];
                v158 = *(_QWORD *)v73;
                *(_QWORD *)v73 = *(_QWORD *)v110;
                v73[2] = v73[5];
                *(_QWORD *)v110 = v158;
                v73[5] = v191;
                if (*((float *)v67 - 2) <= *((float *)v73 + 4))
                  break;
                v115 = *(_QWORD *)v110;
                v116 = v73[5];
                v124 = v111[2];
                *(_QWORD *)v110 = *(_QWORD *)v111;
                v110[2] = v124;
              }
              else
              {
                v186 = v73[2];
                v154 = *(_QWORD *)v73;
                v114 = *(_QWORD *)v111;
                v73[2] = v111[2];
                *(_QWORD *)v73 = v114;
                v115 = v154;
                v116 = v186;
              }
              v111[2] = v116;
              *(_QWORD *)v111 = v115;
            }
            break;
          }
          if (v74 == 2)
          {
            if (*((float *)v67 - 2) > *((float *)v73 + 1))
            {
              v187 = v73[2];
              v155 = *(_QWORD *)v73;
              v117 = *(_QWORD *)(v67 - 3);
              v73[2] = *(v67 - 1);
              *(_QWORD *)v73 = v117;
              *(v67 - 1) = v187;
              *(_QWORD *)(v67 - 3) = v155;
            }
            break;
          }
          if ((char *)v67 - (char *)v73 <= 95)
          {
            while (v73 != v67 - 3)
            {
              v118 = v73;
              v73 += 3;
              if (v118 != v67 && v73 != v67)
              {
                v119 = v73;
                v120 = v118;
                do
                {
                  if (*((float *)v119 + 1) > *((float *)v120 + 1))
                    v120 = v119;
                  v119 += 3;
                }
                while (v119 != v67);
                if (v120 != v118)
                {
                  v188 = v118[2];
                  v156 = *(_QWORD *)v118;
                  v121 = *(_QWORD *)v120;
                  v118[2] = v120[2];
                  *(_QWORD *)v118 = v121;
                  v120[2] = v188;
                  *(_QWORD *)v120 = v156;
                }
              }
            }
            break;
          }
          v75 = (unint64_t)&v73[3 * (v74 >> 1)];
          v76 = v67 - 3;
          v77 = *(float *)(v75 + 4);
          v78 = *((float *)v67 - 2);
          if (v77 <= *((float *)v73 + 1))
          {
            if (v78 <= v77)
            {
              v80 = 0;
              v81 = *((float *)v73 + 1);
              v82 = *(float *)(v75 + 4);
              if (v81 <= v82)
                goto LABEL_132;
              goto LABEL_114;
            }
            v178 = *(_DWORD *)(v75 + 8);
            v146 = *(_QWORD *)v75;
            v90 = *(_QWORD *)v76;
            *(_DWORD *)(v75 + 8) = *(v67 - 1);
            *(_QWORD *)v75 = v90;
            *(v67 - 1) = v178;
            *(_QWORD *)v76 = v146;
            if (*(float *)(v75 + 4) > *((float *)v73 + 1))
            {
              v179 = v73[2];
              v147 = *(_QWORD *)v73;
              v91 = *(_QWORD *)v75;
              v73[2] = *(_DWORD *)(v75 + 8);
              *(_QWORD *)v73 = v91;
              *(_DWORD *)(v75 + 8) = v179;
              *(_QWORD *)v75 = v147;
              v80 = 2;
              v81 = *((float *)v73 + 1);
              v82 = *(float *)(v75 + 4);
              if (v81 <= v82)
                goto LABEL_132;
              goto LABEL_114;
            }
          }
          else
          {
            if (v78 > v77)
            {
              v176 = v73[2];
              v144 = *(_QWORD *)v73;
              v79 = *(_QWORD *)v76;
              v73[2] = *(v67 - 1);
              *(_QWORD *)v73 = v79;
              *(v67 - 1) = v176;
              *(_QWORD *)v76 = v144;
              v80 = 1;
              v81 = *((float *)v73 + 1);
              v82 = *(float *)(v75 + 4);
              if (v81 <= v82)
                goto LABEL_132;
              goto LABEL_114;
            }
            v180 = v73[2];
            v148 = *(_QWORD *)v73;
            v92 = *(_QWORD *)v75;
            v73[2] = *(_DWORD *)(v75 + 8);
            *(_QWORD *)v73 = v92;
            *(_DWORD *)(v75 + 8) = v180;
            *(_QWORD *)v75 = v148;
            if (*((float *)v67 - 2) > *(float *)(v75 + 4))
            {
              v181 = *(_DWORD *)(v75 + 8);
              v149 = *(_QWORD *)v75;
              v93 = *(_QWORD *)v76;
              *(_DWORD *)(v75 + 8) = *(v67 - 1);
              *(_QWORD *)v75 = v93;
              *(v67 - 1) = v181;
              *(_QWORD *)v76 = v149;
              v80 = 2;
              v81 = *((float *)v73 + 1);
              v82 = *(float *)(v75 + 4);
              if (v81 <= v82)
                goto LABEL_132;
              goto LABEL_114;
            }
          }
          v80 = 1;
          v81 = *((float *)v73 + 1);
          v82 = *(float *)(v75 + 4);
          if (v81 <= v82)
          {
LABEL_132:
            v94 = v67 - 3;
            while (1)
            {
              result = (unint64_t)(v94 - 3);
              if (v94 - 3 == v73)
                break;
              v95 = *((float *)v94 - 2);
              v94 -= 3;
              if (v95 > v82)
              {
                v182 = v73[2];
                v150 = *(_QWORD *)v73;
                v96 = *(_QWORD *)result;
                v73[2] = *(_DWORD *)(result + 8);
                *(_QWORD *)v73 = v96;
                *(_DWORD *)(result + 8) = v182;
                *(_QWORD *)result = v150;
                ++v80;
                v83 = v73 + 3;
                if ((unint64_t)(v73 + 3) < result)
                  goto LABEL_115;
                goto LABEL_136;
              }
            }
            v101 = v73 + 3;
            if (v81 <= *((float *)v67 - 2))
            {
              if (v101 == v76)
                break;
              while (v81 <= *((float *)v101 + 1))
              {
                v101 += 3;
                if (v101 == v76)
                  goto LABEL_194;
              }
              v184 = v101[2];
              v152 = *(_QWORD *)v101;
              v105 = *(_QWORD *)v76;
              v101[2] = *(v67 - 1);
              *(_QWORD *)v101 = v105;
              v101 += 3;
              *(v67 - 1) = v184;
              *(_QWORD *)v76 = v152;
            }
            if (v101 == v76)
              break;
            while (1)
            {
              v107 = *((float *)v73 + 1);
              v98 = v101 - 3;
              do
              {
                v108 = *((float *)v98 + 4);
                v98 += 3;
              }
              while (v107 <= v108);
              v101 = v98 + 3;
              do
              {
                v109 = *((float *)v76 - 2);
                v76 -= 3;
              }
              while (v107 > v109);
              if (v98 >= v76)
                break;
              v185 = v98[2];
              v153 = *(_QWORD *)v98;
              v106 = *(_QWORD *)v76;
              result = v76[2];
              v98[2] = result;
              *(_QWORD *)v98 = v106;
              v76[2] = v185;
              *(_QWORD *)v76 = v153;
            }
            if (v98 > v72)
              break;
            goto LABEL_170;
          }
LABEL_114:
          result = (unint64_t)(v67 - 3);
          v83 = v73 + 3;
          if (v73 + 3 >= v67 - 3)
          {
LABEL_136:
            v86 = (unint64_t)v83;
          }
          else
          {
LABEL_115:
            v84 = (unint64_t)v83;
            while (1)
            {
              v85 = *(float *)(v75 + 4);
              v86 = v84 - 12;
              do
              {
                v87 = *(float *)(v86 + 16);
                v86 += 12;
              }
              while (v87 > v85);
              v84 = v86 + 12;
              do
              {
                v88 = *(float *)(result - 8);
                result -= 12;
              }
              while (v88 <= v85);
              if (v86 >= result)
                break;
              v177 = *(_DWORD *)(v86 + 8);
              v145 = *(_QWORD *)v86;
              v89 = *(_QWORD *)result;
              *(_DWORD *)(v86 + 8) = *(_DWORD *)(result + 8);
              *(_QWORD *)v86 = v89;
              *(_DWORD *)(result + 8) = v177;
              *(_QWORD *)result = v145;
              ++v80;
              if (v86 == v75)
                v75 = result;
            }
          }
          if (v86 != v75 && *(float *)(v75 + 4) > *(float *)(v86 + 4))
          {
            v183 = *(_DWORD *)(v86 + 8);
            v151 = *(_QWORD *)v86;
            v97 = *(_QWORD *)v75;
            *(_DWORD *)(v86 + 8) = *(_DWORD *)(v75 + 8);
            *(_QWORD *)v86 = v97;
            result = v151;
            *(_DWORD *)(v75 + 8) = v183;
            *(_QWORD *)v75 = v151;
            ++v80;
          }
          if ((unsigned int *)v86 == v72)
            break;
          if (!v80)
          {
            if (v86 <= (unint64_t)v72)
            {
              v102 = v86 + 12;
              while ((unsigned int *)v102 != v67)
              {
                v103 = *(float *)(v102 + 4);
                v104 = *(float *)(v102 - 8);
                v102 += 12;
                if (v103 > v104)
                  goto LABEL_142;
              }
            }
            else
            {
              while (v83 != (unsigned int *)v86)
              {
                v99 = *((float *)v83 + 1);
                v100 = *((float *)v83 - 2);
                v83 += 3;
                if (v99 > v100)
                  goto LABEL_142;
              }
            }
            break;
          }
LABEL_142:
          if (v86 <= (unint64_t)v72)
          {
            v98 = (unsigned int *)(v86 + 12);
          }
          else
          {
            v67 = (unsigned int *)v86;
            v98 = v73;
          }
LABEL_170:
          v73 = v98;
        }
        while (v67 != v72);
      }
LABEL_194:
      v125 = *(_QWORD *)(a4 + 24);
      v126 = v125 + v10 - v12;
      if (v125 < v126 && v68 != a2[1])
      {
        do
        {
          result = (unint64_t)sub_20EABA148(a4, v68, v68);
          v68 += 3;
        }
        while (*(_QWORD *)(a4 + 24) < v126 && v68 != a2[1]);
      }
    }
  }
  return result;
}

void sub_20ED38BEC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20ED38FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20ED38FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED39008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20ED3902C(std::string *a1, CVPixelBufferRef pixelBuffer, int a3, const void **a4)
{
  int v7;
  size_t v8;
  unint64_t v9;
  std::string::size_type *v10;
  int v11;
  size_t v12;
  unint64_t v13;
  std::string::size_type *v15;
  uint64_t v16;
  const void *v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  uint64_t v31;
  const void *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  void *v38;
  void *__p[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43[2];
  std::string::size_type v44;
  std::string v45;
  std::string v46[2];
  std::string::size_type v47;
  size_t Height;
  size_t Width;

  if (a3 == 6)
  {
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    v7 = *((char *)a4 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a4 + 23);
    else
      v8 = (size_t)a4[1];
    v9 = v8 + 48;
    if (v8 + 48 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v9 > 0x16)
    {
      v16 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v16 = v9 | 7;
      v43[0].__r_.__value_.__l.__size_ = v8 + 48;
      v43[0].__r_.__value_.__r.__words[2] = (v16 + 1) | 0x8000000000000000;
      v43[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v16 + 1);
      v10 = (std::string::size_type *)(v43[0].__r_.__value_.__r.__words[0] + 48);
      qmemcpy(v43[0].__r_.__value_.__l.__data_, "CV3DMLFeatureDetection: MLDescriptorExtractor:  ", 48);
      if (!v8)
      {
LABEL_21:
        *((_BYTE *)v10 + v8) = 0;
        v18 = std::string::append(v43, " return value kLFReturnInvalidImageResolution, for image size (", 0x3FuLL);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v44 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43[1].__r_.__value_.__r.__words[1] = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        sub_20E9F6B94(&Width);
        if ((v42 & 0x80u) == 0)
          v20 = v41;
        else
          v20 = (void **)v41[0];
        if ((v42 & 0x80u) == 0)
          v21 = v42;
        else
          v21 = (std::string::size_type)v41[1];
        v22 = std::string::append((std::string *)&v43[1].__r_.__value_.__r.__words[1], (const std::string::value_type *)v20, v21);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v45, "x", 1uLL);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v46[0].__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v46[0].__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        sub_20E9F6B94(&Height);
        if ((v40 & 0x80u) == 0)
          v26 = __p;
        else
          v26 = (void **)__p[0];
        if ((v40 & 0x80u) == 0)
          v27 = v40;
        else
          v27 = (std::string::size_type)__p[1];
        v28 = std::string::append(v46, (const std::string::value_type *)v26, v27);
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v47 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v46[1].__r_.__value_.__r.__words[1] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append((std::string *)&v46[1].__r_.__value_.__r.__words[1], ").", 2uLL);
        *a1 = *v30;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v47) < 0)
        {
          operator delete((void *)v46[1].__r_.__value_.__l.__size_);
          if (((char)v40 & 0x80000000) == 0)
          {
LABEL_35:
            if ((SHIBYTE(v46[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_36;
            goto LABEL_63;
          }
        }
        else if (((char)v40 & 0x80000000) == 0)
        {
          goto LABEL_35;
        }
        operator delete(__p[0]);
        if ((SHIBYTE(v46[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_36:
          if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_37;
          goto LABEL_64;
        }
LABEL_63:
        operator delete(v46[0].__r_.__value_.__l.__data_);
        if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_37:
          if (((char)v42 & 0x80000000) == 0)
            goto LABEL_38;
          goto LABEL_65;
        }
LABEL_64:
        operator delete(v45.__r_.__value_.__l.__data_);
        if (((char)v42 & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v44) & 0x80000000) == 0)
            goto LABEL_39;
          goto LABEL_66;
        }
LABEL_65:
        operator delete(v41[0]);
        if ((SHIBYTE(v44) & 0x80000000) == 0)
        {
LABEL_39:
          if ((SHIBYTE(v43[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
LABEL_67:
          v38 = (void *)v43[0].__r_.__value_.__r.__words[0];
          goto LABEL_68;
        }
LABEL_66:
        operator delete((void *)v43[1].__r_.__value_.__l.__size_);
        if ((SHIBYTE(v43[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_67;
      }
    }
    else
    {
      v10 = &v44;
      qmemcpy(v43, "CV3DMLFeatureDetection: MLDescriptorExtractor:  ", sizeof(v43));
    }
    if (v7 >= 0)
      v17 = a4;
    else
      v17 = *a4;
    memmove(v10, v17, v8);
    goto LABEL_21;
  }
  v11 = *((char *)a4 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a4 + 23);
  else
    v12 = (size_t)a4[1];
  v13 = v12 + 48;
  if (v12 + 48 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 <= 0x16)
  {
    v15 = &v47;
    qmemcpy(v46, "CV3DMLFeatureDetection: MLDescriptorExtractor:  ", sizeof(v46));
LABEL_44:
    if (v11 >= 0)
      v32 = a4;
    else
      v32 = *a4;
    memmove(v15, v32, v12);
    goto LABEL_48;
  }
  v31 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v31 = v13 | 7;
  v46[0].__r_.__value_.__l.__size_ = v12 + 48;
  v46[0].__r_.__value_.__r.__words[2] = (v31 + 1) | 0x8000000000000000;
  v46[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v31 + 1);
  v15 = (std::string::size_type *)(v46[0].__r_.__value_.__r.__words[0] + 48);
  qmemcpy(v46[0].__r_.__value_.__l.__data_, "CV3DMLFeatureDetection: MLDescriptorExtractor:  ", 48);
  if (v12)
    goto LABEL_44;
LABEL_48:
  *((_BYTE *)v15 + v12) = 0;
  v33 = std::string::append(v46, " return value ", 0xEuLL);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v47 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46[1].__r_.__value_.__r.__words[1] = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v43[1].__r_.__value_.__r.__words[1]) = a3;
  sub_20E8A9280((int *)&v43[1].__r_.__value_.__r.__words[1]);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v45;
  else
    v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    size = v45.__r_.__value_.__l.__size_;
  v37 = std::string::append((std::string *)&v46[1].__r_.__value_.__r.__words[1], (const std::string::value_type *)v35, size);
  *a1 = *v37;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_56;
LABEL_59:
    operator delete((void *)v46[1].__r_.__value_.__l.__size_);
    if ((SHIBYTE(v46[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_60;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47) < 0)
    goto LABEL_59;
LABEL_56:
  if ((SHIBYTE(v46[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_60:
  v38 = (void *)v46[0].__r_.__value_.__r.__words[0];
LABEL_68:
  operator delete(v38);
}

void sub_20ED39490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a40 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v47 - 89) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a47 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a42);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v47 - 89) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v47 - 112));
  if ((a47 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20ED39608(void ***a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v27;
  uint64_t p_p;
  uint64_t v29;
  char v30;
  size_t v31;
  _BYTE *v32;
  _BYTE *v33;
  void **v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  size_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *shared_owners;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  const char *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  const char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  void **v91;
  void **v92;
  unint64_t v93;
  int v94;
  _DWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  void *v104;
  int v105;
  __CVBuffer *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  std::__shared_weak_count *v112;
  __CVBuffer *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t LocalDescriptors;
  const void *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  char *v122;
  int v123;
  char v124;
  std::string::size_type v125;
  int v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  int64_t v131;
  unsigned int *v132;
  std::string::size_type v133;
  std::string *v134;
  __int128 v135;
  std::string *v136;
  __int128 v137;
  void **v138;
  std::string::size_type v139;
  std::string *v140;
  __int128 v141;
  std::string *v142;
  __int128 v143;
  void **v144;
  std::string::size_type v145;
  std::string *v146;
  unint64_t v147;
  void *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t Dimension;
  const void *Data;
  void *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  __int128 v164;
  __int128 v165;
  char *v166;
  uint64_t v167;
  size_t v168;
  char *v169;
  unsigned int *v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  void **v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 *v190;
  char *v192;
  std::__shared_weak_count_vtbl *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  __int128 *v198;
  __int128 *v199;
  std::__shared_weak_count *v200;
  const char *v201;
  int v202;
  uint64_t *v203;
  __int128 *v204;
  uint64_t v205;
  __int128 v206;
  int v207;
  int v208;
  uint64_t *v210;
  __int128 v211;
  unint64_t v212;
  _OWORD v213[2];
  int v214;
  __int128 v215;
  std::string::size_type v216;
  __int128 v217;
  _QWORD v218[4];
  _BYTE v219[512];
  char v220;
  __int128 v221;
  int v222;
  _OWORD v223[3];
  _OWORD v224[2];
  uint64_t v225;
  std::__shared_weak_count *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  __int128 v229;
  __int128 v230;
  const char *v231;
  int v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  void *v236;
  char v237;
  char v238;
  char v239;
  void *v240[2];
  unsigned __int8 v241;
  uint64_t v242;
  void *v243[2];
  unsigned __int8 v244;
  std::string v245;
  std::string v246;
  _BYTE v247[7];
  __int128 __p;
  int64_t v249;
  char v250;
  void *v251;
  char v252;
  void *v253;
  char v254;
  char v255;
  char v256;
  uint64_t Size;
  uint64_t v258;
  std::string v259;
  std::string v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t (**v264)();
  uint64_t v265;
  std::__shared_weak_count *v266;
  void *v267;
  _BYTE *v268;
  uint64_t v269;
  void *object[64];
  void *v271[64];
  std::string v272;
  char v273;
  void *v274;
  char v275;
  void *v276;
  char v277;
  char v278;
  char v279;
  _QWORD v280[3];
  _QWORD *v281;
  _QWORD v282[3];
  _QWORD *v283;
  void *v284[2];
  uint64_t v285;
  void **v286;
  uint64_t v287;

  v287 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v3 = a2[1];
  v210 = (uint64_t *)a2[3];
  v211 = 0uLL;
  v203 = (uint64_t *)a2[4];
  v5 = a2[6];
  v199 = a2[7];
  v212 = 0;
  sub_20ED343BC((uint64_t)&v211, -(((char *)v4 - (char *)v3) >> 6));
  if (v4 != v3 || v210 != v203 || v5 != v199)
  {
    v196 = (void *)*MEMORY[0x24BEDB7F0];
    v195 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v197 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
    v194 = (void *)(MEMORY[0x24BEDB848] + 16);
    v204 = v3;
    do
    {
      v223[0] = *v5;
      v6 = v5[1];
      v7 = v5[2];
      v8 = v5[3];
      *(_OWORD *)((char *)v224 + 9) = *(__int128 *)((char *)v5 + 57);
      v224[0] = v8;
      v223[2] = v7;
      v223[1] = v6;
      v9 = (std::__shared_weak_count *)*((_QWORD *)v5 + 11);
      v225 = *((_QWORD *)v5 + 10);
      v226 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)v5 + 13);
      v227 = *((_QWORD *)v5 + 12);
      v228 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = (std::__shared_weak_count_vtbl *)sub_20EAAB158(v223);
      v16 = v228;
      if (!v228)
        goto LABEL_16;
      v17 = (unint64_t *)&v228->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        v19 = v226;
        if (!v226)
          goto LABEL_22;
      }
      else
      {
LABEL_16:
        v19 = v226;
        if (!v226)
          goto LABEL_22;
      }
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
LABEL_22:
      v22 = atomic_load((unsigned __int8 *)&qword_254A5F1F0);
      if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F1F0))
      {
        sub_21021D3D8(object);
        HIBYTE(v271[2]) = 8;
        strcpy((char *)v271, "cv3d.vio");
        sub_20E8C4068((uint64_t **)object, (uint64_t)v271, &qword_254A5F1E8);
        if (SHIBYTE(v271[2]) < 0)
          operator delete(v271[0]);
        __cxa_guard_release(&qword_254A5F1F0);
      }
      v280[0] = qword_254A5F1E8;
      if (**(int **)(qword_254A5F1E8 + 56) <= 2)
      {
        v23 = *(unsigned __int8 *)(qword_254A5F1E8 + 72);
        v24 = sub_20E8C31DC(qword_254A5F1E8, "OSLogSurrogateAppender", 1, 0);
        v25 = v24;
        if (v23 || v24 != 0)
        {
          sub_20E863438((uint64_t)v271);
          v27 = *((_DWORD *)v4 + 2);
          object[0] = *(void **)v4;
          LODWORD(object[1]) = v27;
          sub_210216370((uint64_t)object);
          DWORD2(v230) = 0;
          sub_20EAA4AA0(&v229, "MLDescriptorExtractor: extract desc for ");
          object[0] = &v229;
          object[1] = v284;
          object[2] = &v229;
          object[3] = v284;
          object[4] = v284;
          if (DWORD2(v230) == -1)
            sub_20E877AB8();
          v272.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
          ((void (*)(std::string *, __int128 *))off_24C9E2160[DWORD2(v230)])(&v272, &v229);
          object[0] = &v229;
          object[1] = "_";
          object[2] = &v229;
          object[3] = "_";
          object[4] = "_";
          if (DWORD2(v230) == -1)
            sub_20E877AB8();
          v272.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
          ((void (*)(std::string *, __int128 *))off_24C9E2178[DWORD2(v230)])(&v272, &v229);
          std::to_string(&v272, *((_DWORD *)v4 + 4));
          object[0] = &v229;
          object[1] = &v272;
          object[2] = &v229;
          object[3] = &v272;
          object[4] = &v272;
          if (DWORD2(v230) == -1)
            sub_20E877AB8();
          v282[0] = object;
          ((void (*)(_QWORD *, __int128 *))off_24C9E2118[DWORD2(v230)])(v282, &v229);
          if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v272.__r_.__value_.__l.__data_);
          if (DWORD2(v230) == -1)
            sub_20E877AB8();
          object[0] = &v272;
          ((void (*)(__int128 *__return_ptr, void **, __int128 *))off_24C9E2148[DWORD2(v230)])(&__p, object, &v229);
          if (DWORD2(v230) != -1)
            ((void (*)(void **, __int128 *))off_24C9E2130[DWORD2(v230)])(object, &v229);
          if (v249 >= 0)
            p_p = (uint64_t)&__p;
          else
            p_p = __p;
          if (v249 >= 0)
            v29 = HIBYTE(v249);
          else
            v29 = *((_QWORD *)&__p + 1);
          sub_20E86A980(&v271[2], p_p, v29);
          if (SHIBYTE(v249) < 0)
          {
            operator delete((void *)__p);
            if (SHIBYTE(v285) < 0)
              goto LABEL_48;
LABEL_44:
            v30 = (char)v271[15];
            v198 = v4;
            v207 = v23;
            if (((uint64_t)v271[15] & 0x10) == 0)
              goto LABEL_45;
LABEL_49:
            v33 = v271[14];
            v34 = &v271[8];
            if (v271[14] < v271[9])
            {
              v271[14] = v271[9];
              v33 = v271[9];
              v34 = &v271[8];
            }
          }
          else
          {
            if ((SHIBYTE(v285) & 0x80000000) == 0)
              goto LABEL_44;
LABEL_48:
            operator delete(v284[0]);
            v30 = (char)v271[15];
            v198 = v4;
            v207 = v23;
            if (((uint64_t)v271[15] & 0x10) != 0)
              goto LABEL_49;
LABEL_45:
            if ((v30 & 8) == 0)
            {
              v31 = 0;
              HIBYTE(v249) = 0;
              v32 = &__p;
              goto LABEL_60;
            }
            v33 = v271[7];
            v34 = &v271[5];
          }
          v35 = *v34;
          v31 = v33 - (_BYTE *)*v34;
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v31 >= 0x17)
          {
            v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v36 = v31 | 7;
            v37 = v36 + 1;
            v32 = operator new(v36 + 1);
            v249 = v37 | 0x8000000000000000;
            *(_QWORD *)&__p = v32;
            *((_QWORD *)&__p + 1) = v31;
          }
          else
          {
            HIBYTE(v249) = (_BYTE)v33 - *(_BYTE *)v34;
            v32 = &__p;
            if (!v31)
            {
LABEL_60:
              v32[v31] = 0;
              *(_QWORD *)&v229 = v280;
              *((std::chrono::steady_clock::time_point *)&v229 + 1) = std::chrono::steady_clock::now();
              *(std::chrono::system_clock::time_point *)&v230 = std::chrono::system_clock::now();
              DWORD2(v230) = 2;
              v231 = "unknown file";
              v232 = 266;
              *(_QWORD *)&v233 = "unknown function";
              *((_QWORD *)&v233 + 1) = 0;
              *(_QWORD *)&v234 = 0;
              if (v249 >= 0)
                v38 = (const char *)&__p;
              else
                v38 = (const char *)__p;
              v39 = *(_QWORD *)v229;
              v40 = (const char *)(*(_QWORD *)v229 + 16);
              v205 = *(_QWORD *)v229;
              v201 = v40;
              if (*(char *)(*(_QWORD *)v229 + 39) < 0)
              {
                v40 = *(const char **)(v39 + 16);
                v41 = *(_QWORD *)(v39 + 24);
                v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v43 & 1) == 0)
                {
LABEL_404:
                  if (__cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)&v272);
                    if (v273)
                    {
                      *(std::string *)byte_254A4A4F8 = v272;
                    }
                    else
                    {
                      byte_254A4A4F8[23] = 14;
                      strcpy(byte_254A4A4F8, "com.apple.cv3d");
                    }
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                  }
                }
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)v229 + 39);
                v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v42 & 1) == 0)
                  goto LABEL_404;
              }
              if (byte_254A4A4F8[23] >= 0)
                v44 = byte_254A4A4F8;
              else
                v44 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v45 = byte_254A4A4F8[23];
              else
                v45 = *(_QWORD *)&byte_254A4A4F8[8];
              object[0] = os_log_create(v44, v40);
              if (v45 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v45 >= 0x17)
              {
                v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v45 | 7) != 0x17)
                  v47 = v45 | 7;
                v48 = v47 + 1;
                v46 = (void **)operator new(v47 + 1);
                object[3] = (void *)(v48 | 0x8000000000000000);
                object[1] = v46;
                object[2] = (void *)v45;
              }
              else
              {
                HIBYTE(object[3]) = v45;
                v46 = &object[1];
                if (!v45)
                {
LABEL_81:
                  *((_BYTE *)v46 + v45) = 0;
                  LOBYTE(object[4]) = 1;
                  if (v41 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v41 >= 0x17)
                  {
                    v51 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v41 | 7) != 0x17)
                      v51 = v41 | 7;
                    v52 = v51 + 1;
                    v49 = (void **)operator new(v51 + 1);
                    object[7] = (void *)(v52 | 0x8000000000000000);
                    object[5] = v49;
                    object[6] = (void *)v41;
                  }
                  else
                  {
                    HIBYTE(object[7]) = v41;
                    v49 = &object[5];
                    if (!v41)
                    {
                      LOBYTE(object[5]) = 0;
                      LOBYTE(object[8]) = 1;
                      v50 = object[0];
                      if ((SHIBYTE(object[7]) & 0x80000000) == 0)
                        goto LABEL_85;
LABEL_91:
                      operator delete(object[5]);
                      if (LOBYTE(object[4]))
                        goto LABEL_92;
                      goto LABEL_94;
                    }
                  }
                  memmove(v49, v40, v41);
                  *((_BYTE *)v49 + v41) = 0;
                  LOBYTE(object[8]) = 1;
                  v50 = object[0];
                  if (SHIBYTE(object[7]) < 0)
                    goto LABEL_91;
LABEL_85:
                  if (LOBYTE(object[4]))
                  {
LABEL_92:
                    if (SHIBYTE(object[3]) < 0)
                      operator delete(object[1]);
                  }
LABEL_94:
                  if (object[0])
                    os_release(object[0]);
                  if (v25 && *(_QWORD *)(v25 + 24))
                  {
                    v53 = _os_log_pack_size();
                    v54 = (std::__shared_weak_count_vtbl *)operator new(v53, (std::align_val_t)8uLL);
                    v55 = (std::__shared_weak_count *)operator new();
                    v55->__shared_owners_ = 0;
                    v56 = (unint64_t *)&v55->__shared_owners_;
                    v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v55->__shared_weak_owners_ = 0;
                    v55[1].__vftable = v54;
                    v57 = strlen(v38);
                    v200 = v55;
                    if (v57 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v58 = (void *)v57;
                    v193 = v54;
                    if (v57 >= 0x17)
                    {
                      v61 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v57 | 7) != 0x17)
                        v61 = v57 | 7;
                      v62 = v61 + 1;
                      v59 = operator new(v61 + 1);
                      object[2] = (void *)(v62 | 0x8000000000000000);
                      object[0] = v59;
                      object[1] = v58;
                    }
                    else
                    {
                      HIBYTE(object[2]) = v57;
                      v59 = object;
                      if (!v57)
                        goto LABEL_108;
                    }
                    memcpy(v59, v38, (size_t)v58);
LABEL_108:
                    *((_BYTE *)v58 + (_QWORD)v59) = 0;
                    v63 = object[0];
                    v272.__r_.__value_.__l.__data_ = (std::string::pointer)object[1];
                    *(std::string::size_type *)((char *)v272.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&object[1] + 7);
                    v64 = HIBYTE(object[2]);
                    v65 = operator new(0x38uLL);
                    v66 = (std::__shared_weak_count *)v65;
                    v65[1] = 0;
                    v67 = v65 + 1;
                    v65[2] = 0;
                    v65[3] = off_24C9ABC20;
                    v192 = (char *)(v65 + 3);
                    v65[4] = v63;
                    v68 = (char *)(v65 + 4);
                    *v65 = &off_24C9ABBD0;
                    v65[5] = v272.__r_.__value_.__r.__words[0];
                    *(_QWORD *)((char *)v65 + 47) = *(std::string::size_type *)((char *)v272.__r_.__value_.__r.__words
                                                                              + 7);
                    *((_BYTE *)v65 + 55) = v64;
                    do
                      v69 = __ldxr(v56);
                    while (__stxr(v69 + 1, v56));
                    do
                      v70 = __ldxr(v67);
                    while (__stxr(v70 + 1, v67));
                    do
                      v71 = __ldaxr(v67);
                    while (__stlxr(v71 - 1, v67));
                    if (!v71)
                    {
                      (*(void (**)(_QWORD *))(*v65 + 16))(v65);
                      std::__shared_weak_count::__release_weak(v66);
                    }
                    do
                      v72 = __ldaxr(v56);
                    while (__stlxr(v72 - 1, v56));
                    if (!v72)
                    {
                      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                      std::__shared_weak_count::__release_weak(v200);
                    }
                    if (SHIBYTE(v66[2].__vftable) >= 0)
                      shared_owners = v68;
                    else
                      shared_owners = (char *)v66[1].__shared_owners_;
                    v74 = _os_log_pack_fill();
                    *(_DWORD *)v74 = 136315138;
                    *(_QWORD *)(v74 + 4) = shared_owners;
                    v75 = (_QWORD *)operator new();
                    v76 = *(unsigned __int8 *)(v205 + 39);
                    v77 = v201;
                    if ((v76 & 0x80u) != 0)
                    {
                      v77 = *(const char **)(v205 + 16);
                      v76 = *(_QWORD *)(v205 + 24);
                    }
                    *v75 = v193;
                    v75[1] = v193;
                    v75[2] = v200;
                    v75[3] = v192;
                    v75[4] = v66;
                    v75[5] = v77;
                    v75[6] = v76;
                    *((_BYTE *)v75 + 56) = 2;
                    object[0] = v75;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), object);
                    v78 = object[0];
                    object[0] = 0;
                    if (v78)
                    {
                      v79 = (std::__shared_weak_count *)*((_QWORD *)v78 + 4);
                      if (v79)
                      {
                        v80 = (unint64_t *)&v79->__shared_owners_;
                        do
                          v81 = __ldaxr(v80);
                        while (__stlxr(v81 - 1, v80));
                        if (!v81)
                        {
                          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                          std::__shared_weak_count::__release_weak(v79);
                        }
                      }
                      v82 = (std::__shared_weak_count *)*((_QWORD *)v78 + 2);
                      if (v82)
                      {
                        v83 = (unint64_t *)&v82->__shared_owners_;
                        do
                          v84 = __ldaxr(v83);
                        while (__stlxr(v84 - 1, v83));
                        if (!v84)
                        {
                          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                          std::__shared_weak_count::__release_weak(v82);
                        }
                      }
                      MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG);
                    LODWORD(object[0]) = 136315138;
                    *(void **)((char *)object + 4) = (void *)v38;
                    v60 = (void *)_os_log_send_and_compose_impl();
                    if (v60)
                      free(v60);
                  }
                  v4 = v198;
                  if (v207)
                  {
                    v85 = (const char *)&__p;
                    if (v249 < 0)
                      v85 = (const char *)__p;
                    sub_20E8C003C((uint64_t)&v229, "%s", v85);
                    sub_20E863570((uint64_t)&v229);
                  }
                  sub_20E863570((uint64_t)&v229);
                  v86 = (std::__shared_weak_count *)v234;
                  if (!(_QWORD)v234)
                    goto LABEL_142;
                  v87 = (unint64_t *)(v234 + 8);
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                    if (SHIBYTE(v249) < 0)
LABEL_143:
                      operator delete((void *)__p);
                  }
                  else
                  {
LABEL_142:
                    if (SHIBYTE(v249) < 0)
                      goto LABEL_143;
                  }
                  v271[0] = v196;
                  *(void **)((char *)v271 + *((_QWORD *)v196 - 3)) = v195;
                  v271[2] = v197;
                  v271[3] = v194;
                  if (SHIBYTE(v271[13]) < 0)
                    operator delete(v271[11]);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v271[16]);
                  goto LABEL_147;
                }
              }
              memmove(v46, v44, v45);
              goto LABEL_81;
            }
          }
          memmove(v32, v35, v31);
          goto LABEL_60;
        }
      }
LABEL_147:
      v89 = *((_QWORD *)v4 + 3);
      v221 = *v4;
      v222 = *((_DWORD *)v4 + 4);
      v90 = *((_DWORD *)v4 + 8);
      v91 = *a1;
      if (!**a1)
      {
        v271[0] = 0;
        if (LFV2HandleCreate()
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractor.cpp", 114, (uint64_t)"ret == kLFReturnNoError", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v104 = *v91;
        *v91 = v271[0];
        if (v104
          && LFV2HandleRelease()
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractor.cpp", 104, (uint64_t)"ret == kLFReturnNoError", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
      }
      v208 = v90;
      v92 = *a1;
      v93 = (unint64_t)(*a1)[4];
      v94 = *((_DWORD *)*a1 + 6);
      kdebug_trace();
      v268 = 0;
      v267 = 0;
      v269 = 0;
      sub_21015D058(&v264, v15, 1, 0);
      v263 = 0;
      v95 = (_DWORD *)v92 + 5;
      v271[0] = (void *)sub_21015D618((uint64_t)&v264);
      v263 = sub_20ED349A0((_DWORD *)v92 + 5, v210, (char **)v4 + 5, v93, (unint64_t *)v271, (uint64_t)&v267);
      v284[0] = &off_24C9E21A0;
      v284[1] = &v263;
      v285 = 0;
      v286 = v284;
      v262 = 0;
      v261 = 0;
      v282[0] = &off_24C9E2220;
      v282[1] = &v262;
      v282[2] = 0;
      v283 = v282;
      v280[0] = &off_24C9E22A0;
      v280[1] = &v261;
      v280[2] = 0;
      v281 = v280;
      LFV2DescriptorSetPSHandle();
      if (v94 == 1)
      {
        if (v265)
        {
          v96 = *(std::__shared_weak_count **)(v265 + 8);
          if (v96)
          {
            v97 = (unint64_t *)&v96->__shared_owners_;
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
            do
              v99 = __ldaxr(v97);
            while (__stlxr(v99 - 1, v97));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
        }
        v105 = LFV2ComputeDescriptors();
        LFV2DescriptorResetPSHandle();
        if (v105)
        {
          if (v265)
          {
            v106 = *(__CVBuffer **)v265;
            v107 = *(std::__shared_weak_count **)(v265 + 8);
            if (v107)
            {
              v108 = (unint64_t *)&v107->__shared_owners_;
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
              do
                v110 = __ldaxr(v108);
              while (__stlxr(v110 - 1, v108));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
          }
          else
          {
            v106 = 0;
          }
          *((_BYTE *)&v259.__r_.__value_.__s + 23) = 20;
          strcpy((char *)&v259, "LFComputeDescriptors");
          sub_20ED3902C(&v260, v106, v105, (const void **)&v259.__r_.__value_.__l.__data_);
          v121 = SHIBYTE(v260.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
            sub_20E860C04(&v272, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
          else
            v272 = v260;
          v273 = 1;
          LOBYTE(v274) = 0;
          v278 = 0;
          v279 = 1;
          sub_20E89F2F8(0x16u, (__int128 *)&v272, (uint64_t)v271);
          v229 = *(_OWORD *)v271;
          LOBYTE(v230) = 0;
          v238 = 0;
          if (LOBYTE(v271[14]))
          {
            LOBYTE(v232) = 0;
            if (LOBYTE(v271[5]))
            {
              v230 = *(_OWORD *)&v271[2];
              v231 = (const char *)v271[4];
              memset(&v271[2], 0, 24);
              LOBYTE(v232) = 1;
            }
            LOBYTE(v233) = 0;
            v237 = 0;
            if (LOBYTE(v271[13]))
            {
              v233 = *(_OWORD *)&v271[6];
              v234 = *(_OWORD *)&v271[8];
              memset(&v271[6], 0, 24);
              v235 = *(_OWORD *)&v271[10];
              v236 = v271[12];
              memset(&v271[10], 0, 24);
              v237 = 1;
            }
            v238 = 1;
            v239 = 0;
            if (LOBYTE(v271[5]) && SHIBYTE(v271[4]) < 0)
              operator delete(v271[2]);
            if (!v279)
            {
LABEL_229:
              if (v121 < 0)
                operator delete(v260.__r_.__value_.__l.__data_);
              v124 = 0;
              v125 = 0;
              v126 = 0;
              v206 = 0u;
              v127 = v281;
              if (!v281)
                goto LABEL_409;
              goto LABEL_358;
            }
          }
          else
          {
            v239 = 0;
            if (!v279)
              goto LABEL_229;
          }
          if (v278)
          {
            if (v277 < 0)
            {
              operator delete(v276);
              if ((v275 & 0x80000000) == 0)
                goto LABEL_226;
            }
            else if ((v275 & 0x80000000) == 0)
            {
              goto LABEL_226;
            }
            operator delete(v274);
            if (!v273)
              goto LABEL_229;
          }
          else
          {
LABEL_226:
            if (!v273)
              goto LABEL_229;
          }
          if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v272.__r_.__value_.__l.__data_);
          goto LABEL_229;
        }
        LOBYTE(v200) = 0;
        v202 = 0;
        LocalDescriptors = v262;
LABEL_248:
        if ((v210[1] - *v210) >> 5 >= v93)
          v128 = v93;
        else
          v128 = (v210[1] - *v210) >> 5;
        if (*v95)
          v129 = v128;
        else
          v129 = (v210[1] - *v210) >> 5;
        v258 = v129;
        Size = 0;
        Size = LFV2DescriptorsGetSize();
        if (Size != v258)
        {
          sub_20E9F6B94((unint64_t *)&Size);
          v134 = std::string::insert(&v245, 0, "CV3DMLFeatureDetection: MLDescriptorExtractor: LFDescriptor size ", 0x41uLL);
          v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
          v246.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v135;
          v134->__r_.__value_.__l.__size_ = 0;
          v134->__r_.__value_.__r.__words[2] = 0;
          v134->__r_.__value_.__r.__words[0] = 0;
          v136 = std::string::append(&v246, ", Keypoint size: ", 0x11uLL);
          v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
          v259.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v137;
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          v242 = (v210[1] - *v210) >> 5;
          sub_20E9F6B94((unint64_t *)&v242);
          if ((v244 & 0x80u) == 0)
            v138 = v243;
          else
            v138 = (void **)v243[0];
          if ((v244 & 0x80u) == 0)
            v139 = v244;
          else
            v139 = (std::string::size_type)v243[1];
          v140 = std::string::append(&v259, (const std::string::value_type *)v138, v139);
          v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
          v260.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v141;
          v140->__r_.__value_.__l.__size_ = 0;
          v140->__r_.__value_.__r.__words[2] = 0;
          v140->__r_.__value_.__r.__words[0] = 0;
          v142 = std::string::append(&v260, ", Subsampling size: ", 0x14uLL);
          v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
          v272.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v143;
          v142->__r_.__value_.__l.__size_ = 0;
          v142->__r_.__value_.__r.__words[2] = 0;
          v142->__r_.__value_.__r.__words[0] = 0;
          sub_20E9F6B94((unint64_t *)&v258);
          if ((v241 & 0x80u) == 0)
            v144 = v240;
          else
            v144 = (void **)v240[0];
          if ((v241 & 0x80u) == 0)
            v145 = v241;
          else
            v145 = (std::string::size_type)v240[1];
          v146 = std::string::append(&v272, (const std::string::value_type *)v144, v145);
          v148 = (void *)v146->__r_.__value_.__r.__words[0];
          v147 = v146->__r_.__value_.__l.__size_;
          *(_DWORD *)v247 = v146->__r_.__value_.__r.__words[2];
          *(_DWORD *)&v247[3] = *(_DWORD *)((char *)&v146->__r_.__value_.__r.__words[2] + 3);
          v149 = SHIBYTE(v146->__r_.__value_.__r.__words[2]);
          v146->__r_.__value_.__l.__size_ = 0;
          v146->__r_.__value_.__r.__words[2] = 0;
          v146->__r_.__value_.__r.__words[0] = 0;
          if (v149 < 0)
          {
            sub_20E860C04(&__p, v148, v147);
          }
          else
          {
            *(_QWORD *)&__p = v148;
            *((_QWORD *)&__p + 1) = v147;
            LODWORD(v249) = *(_DWORD *)v247;
            *(_DWORD *)((char *)&v249 + 3) = *(_DWORD *)&v247[3];
            HIBYTE(v249) = v149;
          }
          v250 = 1;
          LOBYTE(v251) = 0;
          v255 = 0;
          v256 = 1;
          sub_20E89F2F8(0x22u, &__p, (uint64_t)v271);
          v229 = *(_OWORD *)v271;
          LOBYTE(v230) = 0;
          v238 = 0;
          if (LOBYTE(v271[14]))
          {
            LOBYTE(v232) = 0;
            if (LOBYTE(v271[5]))
            {
              v230 = *(_OWORD *)&v271[2];
              v231 = (const char *)v271[4];
              memset(&v271[2], 0, 24);
              LOBYTE(v232) = 1;
            }
            LOBYTE(v233) = 0;
            v237 = 0;
            v124 = (char)v200;
            v126 = v202;
            if (LOBYTE(v271[13]))
            {
              v233 = *(_OWORD *)&v271[6];
              v234 = *(_OWORD *)&v271[8];
              memset(&v271[6], 0, 24);
              v235 = *(_OWORD *)&v271[10];
              v236 = v271[12];
              memset(&v271[10], 0, 24);
              v237 = 1;
            }
            v238 = 1;
            v239 = 0;
            if (LOBYTE(v271[5]) && SHIBYTE(v271[4]) < 0)
              operator delete(v271[2]);
            if (!v256)
            {
LABEL_298:
              if (v149 < 0)
              {
                operator delete(v148);
                if ((char)v241 < 0)
                  goto LABEL_309;
LABEL_300:
                if ((SHIBYTE(v272.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_301;
LABEL_310:
                operator delete(v272.__r_.__value_.__l.__data_);
                if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_311;
LABEL_302:
                if (((char)v244 & 0x80000000) == 0)
                  goto LABEL_303;
LABEL_312:
                operator delete(v243[0]);
                if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_313;
LABEL_304:
                if ((SHIBYTE(v246.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_305;
LABEL_314:
                operator delete(v246.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_306:
                  v125 = 0;
                  v206 = 0u;
                  v127 = v281;
                  if (!v281)
                    goto LABEL_409;
                  goto LABEL_358;
                }
              }
              else
              {
                if (((char)v241 & 0x80000000) == 0)
                  goto LABEL_300;
LABEL_309:
                operator delete(v240[0]);
                if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_310;
LABEL_301:
                if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_302;
LABEL_311:
                operator delete(v260.__r_.__value_.__l.__data_);
                if ((char)v244 < 0)
                  goto LABEL_312;
LABEL_303:
                if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_304;
LABEL_313:
                operator delete(v259.__r_.__value_.__l.__data_);
                if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_314;
LABEL_305:
                if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_306;
              }
              operator delete(v245.__r_.__value_.__l.__data_);
              v125 = 0;
              v206 = 0u;
              v127 = v281;
              if (!v281)
                goto LABEL_409;
              goto LABEL_358;
            }
          }
          else
          {
            v239 = 0;
            v124 = (char)v200;
            v126 = v202;
            if (!v256)
              goto LABEL_298;
          }
          if (v255)
          {
            if (v254 < 0)
            {
              operator delete(v253);
              if ((v252 & 0x80000000) == 0)
                goto LABEL_295;
            }
            else if ((v252 & 0x80000000) == 0)
            {
              goto LABEL_295;
            }
            operator delete(v251);
            if (!v250)
              goto LABEL_298;
          }
          else
          {
LABEL_295:
            if (!v250)
              goto LABEL_298;
          }
          if (SHIBYTE(v249) < 0)
            operator delete((void *)__p);
          goto LABEL_298;
        }
        memset(&v260, 0, sizeof(v260));
        v130 = v267;
        v131 = v268 - (_BYTE *)v267;
        if (v268 == v267)
        {
          v133 = 0;
          v132 = 0;
        }
        else
        {
          if (v131 < 0)
            sub_20E867F44();
          v132 = (unsigned int *)operator new(v268 - (_BYTE *)v267);
          v133 = (std::string::size_type)&v132[v131 >> 2];
          v260.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
          v260.__r_.__value_.__r.__words[2] = v133;
          memcpy(v132, v130, v131);
          v260.__r_.__value_.__l.__size_ = v133;
        }
        v151 = *v210;
        v150 = v210[1];
        v152 = LFV2DescriptorsGetSize();
        v153 = v152;
        if (!v152)
          goto LABEL_279;
        v154 = v150 - v151;
        v155 = (v150 - v151) >> 5;
        if (v152 == v155)
        {
          if (LocalDescriptors)
          {
            v156 = LFV2DescriptorsGetSize();
            Dimension = LFV2DescriptorsGetDimension();
            Data = (const void *)LFV2DescriptorsGetData();
            memset(&v272, 0, sizeof(v272));
            if (v156)
            {
              if (v156 >> 58)
                sub_20ED343A8();
              v159 = operator new(v156 << 6);
              v272.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
              v272.__r_.__value_.__r.__words[2] = (std::string::size_type)v159 + 64 * v156;
              bzero(v159, v156 << 6);
              v272.__r_.__value_.__l.__size_ = (std::string::size_type)v159 + 64 * v156;
            }
            else
            {
              v159 = 0;
            }
            memcpy(v159, Data, Dimension * v156);
            goto LABEL_355;
          }
LABEL_279:
          memset(&v272, 0, sizeof(v272));
          goto LABEL_355;
        }
        if (LFV2DescriptorsGetType() != 1
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractor.cpp", 61, (uint64_t)"LFV2DescriptorsGetType(lf_descriptors) == kLFV2DescriptorDataTypeUint8", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v153 != (uint64_t)(v133 - (_QWORD)v132) >> 2&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractor.cpp", 62, (uint64_t)"lf_descriptors_count == selected_indices.size()", 47, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_420;
        }
        if (v132 != (unsigned int *)v133 && v155 > *(unsigned int *)(v133 - 4))
        {
          memset(v271, 0, 64);
          memset(&v272, 0, sizeof(v272));
          goto LABEL_334;
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractor.cpp", 63, (uint64_t)"!selected_indices.empty() && selected_indices.back() < original_size", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_420;
        }
        memset(v271, 0, 64);
        memset(&v272, 0, sizeof(v272));
        if (v150 == v151)
        {
          v161 = 0;
        }
        else
        {
LABEL_334:
          if (v154 >= 0x7FFFFFFFFFFFFFE1)
            sub_20ED343A8();
          v160 = (char *)operator new(2 * v154);
          v161 = v160;
          v162 = 0;
          v272.__r_.__value_.__r.__words[0] = (std::string::size_type)v160;
          v272.__r_.__value_.__r.__words[2] = (std::string::size_type)&v160[64 * v155];
          do
          {
            v163 = &v160[v162];
            v164 = *(_OWORD *)&v271[2];
            *(_OWORD *)v163 = *(_OWORD *)v271;
            *((_OWORD *)v163 + 1) = v164;
            v165 = *(_OWORD *)&v271[6];
            *((_OWORD *)v163 + 2) = *(_OWORD *)&v271[4];
            *((_OWORD *)v163 + 3) = v165;
            v162 += 64;
          }
          while (v155 << 6 != v162);
          v272.__r_.__value_.__l.__size_ = (std::string::size_type)&v160[64 * v155];
        }
        v166 = (char *)LFV2DescriptorsGetData();
        v167 = LFV2DescriptorsGetDimension();
        if (v132 != (unsigned int *)v133)
        {
          v168 = v167;
          if (v166 || !v167)
          {
            if (v167)
            {
              v172 = v132;
              do
              {
                v173 = *v172++;
                memmove(&v161[64 * (unint64_t)v173], v166, v168);
                v166 += v168;
              }
              while (v172 != (unsigned int *)v133);
            }
          }
          else
          {
            v169 = 0;
            v170 = v132;
            do
            {
              v171 = *v170;
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              memcpy(&v161[64 * v171], v169, v168);
              ++v170;
              v169 += v168;
            }
            while (v170 != (unsigned int *)v133);
          }
        }
LABEL_355:
        v206 = *(_OWORD *)&v272.__r_.__value_.__l.__data_;
        v125 = v272.__r_.__value_.__r.__words[2];
        memset(&v272, 0, sizeof(v272));
        if (v132)
        {
          v260.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
          operator delete(v132);
        }
        v239 = 1;
        v124 = (char)v200;
        v126 = v202;
        v127 = v281;
        if (!v281)
          goto LABEL_409;
        goto LABEL_358;
      }
      if (v265)
      {
        v100 = *(std::__shared_weak_count **)(v265 + 8);
        if (v100)
        {
          v101 = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldxr(v101);
          while (__stxr(v102 + 1, v101));
          do
            v103 = __ldaxr(v101);
          while (__stlxr(v103 - 1, v101));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
      }
      v111 = LFV2ComputeLocalGlobalDescriptors();
      LFV2DescriptorResetPSHandle();
      if (!v111)
      {
        LocalDescriptors = LFV2FeaturesGetLocalDescriptors();
        LFV2FeaturesGetGlobalDescriptors();
        if (!LFV2DescriptorsGetSize())
        {
          LOBYTE(v200) = 0;
          v202 = 0;
          goto LABEL_248;
        }
        v118 = (const void *)LFV2DescriptorsGetData();
        if ((LFV2DescriptorsGetSize() != 1 || LFV2DescriptorsGetType() != 2)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractor.cpp", 84, (uint64_t)"LFV2DescriptorsGetSize(descriptor) == 1 && LFV2DescriptorsGetType(descriptor) == kLFV2DescriptorDataTypeFloat32", 111, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_420:
          abort();
        }
        v119 = LFV2DescriptorsGetDimension();
        v120 = v119;
        if (v118 || !v119)
        {
          if (v119)
            goto LABEL_246;
        }
        else
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_420;
          }
LABEL_246:
          memcpy(v271, v118, 4 * v120);
          LOBYTE(v200) = v271[0];
        }
        memcpy(object, (char *)v271 + 1, 0x1FFuLL);
        v202 = 1;
        goto LABEL_248;
      }
      if (v265)
      {
        v113 = *(__CVBuffer **)v265;
        v112 = *(std::__shared_weak_count **)(v265 + 8);
        if (v112)
        {
          v114 = (unint64_t *)&v112->__shared_owners_;
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
          do
            v116 = __ldaxr(v114);
          while (__stlxr(v116 - 1, v114));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
      }
      else
      {
        v113 = 0;
      }
      v122 = (char *)operator new(0x20uLL);
      v259.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
      *(_OWORD *)&v259.__r_.__value_.__r.__words[1] = xmmword_2102DBFF0;
      strcpy(v122, "LFComputeLocalGlobalDescriptors");
      sub_20ED3902C(&v260, v113, v111, (const void **)&v259.__r_.__value_.__l.__data_);
      v123 = SHIBYTE(v260.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(&v272, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
      else
        v272 = v260;
      v273 = 1;
      LOBYTE(v274) = 0;
      v278 = 0;
      v279 = 1;
      sub_20E89F2F8(0x16u, (__int128 *)&v272, (uint64_t)v271);
      v229 = *(_OWORD *)v271;
      LOBYTE(v230) = 0;
      v238 = 0;
      if (!LOBYTE(v271[14]))
      {
        v239 = 0;
        if (!v279)
          goto LABEL_240;
LABEL_234:
        if (v278)
        {
          if (v277 < 0)
          {
            operator delete(v276);
            if ((v275 & 0x80000000) == 0)
              goto LABEL_237;
          }
          else if ((v275 & 0x80000000) == 0)
          {
            goto LABEL_237;
          }
          operator delete(v274);
          if (!v273)
            goto LABEL_240;
        }
        else
        {
LABEL_237:
          if (!v273)
            goto LABEL_240;
        }
        if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v272.__r_.__value_.__l.__data_);
        goto LABEL_240;
      }
      LOBYTE(v232) = 0;
      if (LOBYTE(v271[5]))
      {
        v230 = *(_OWORD *)&v271[2];
        v231 = (const char *)v271[4];
        memset(&v271[2], 0, 24);
        LOBYTE(v232) = 1;
      }
      LOBYTE(v233) = 0;
      v237 = 0;
      if (LOBYTE(v271[13]))
      {
        v233 = *(_OWORD *)&v271[6];
        v234 = *(_OWORD *)&v271[8];
        memset(&v271[6], 0, 24);
        v235 = *(_OWORD *)&v271[10];
        v236 = v271[12];
        memset(&v271[10], 0, 24);
        v237 = 1;
      }
      v238 = 1;
      v239 = 0;
      if (LOBYTE(v271[5]) && SHIBYTE(v271[4]) < 0)
        operator delete(v271[2]);
      if (v279)
        goto LABEL_234;
LABEL_240:
      if (v123 < 0)
        operator delete(v260.__r_.__value_.__l.__data_);
      operator delete(v122);
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v206 = 0u;
      v127 = v281;
      if (!v281)
LABEL_409:
        sub_20E86D37C();
LABEL_358:
      (*(void (**)(_QWORD *))(*v127 + 48))(v127);
      v175 = v281;
      if (v281 == v280)
      {
        v175 = v280;
        v176 = 4;
      }
      else
      {
        if (!v281)
          goto LABEL_363;
        v176 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v175 + 8 * v176))(v175, v174);
LABEL_363:
      if (!v283)
        sub_20E86D37C();
      (*(void (**)(_QWORD *))(*v283 + 48))(v283);
      v178 = v283;
      if (v283 == v282)
      {
        v178 = v282;
        v179 = 4;
      }
      else
      {
        if (!v283)
          goto LABEL_369;
        v179 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v178 + 8 * v179))(v178, v177);
LABEL_369:
      if (!v286)
        sub_20E86D37C();
      (*((void (**)(void **))*v286 + 6))(v286);
      v181 = v286;
      if (v286 == v284)
      {
        v181 = v284;
        v182 = 4;
        goto LABEL_374;
      }
      if (v286)
      {
        v182 = 5;
LABEL_374:
        (*((void (**)(void **, uint64_t))*v181 + v182))(v181, v180);
      }
      v264 = &off_24CA1A9A0;
      v183 = v266;
      if (v266)
      {
        v184 = (unint64_t *)&v266->__shared_owners_;
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
          v186 = v267;
          if (!v267)
            goto LABEL_381;
LABEL_380:
          v268 = v186;
          operator delete(v186);
          goto LABEL_381;
        }
      }
      v186 = v267;
      if (v267)
        goto LABEL_380;
LABEL_381:
      kdebug_trace();
      if (!v239)
        sub_20E9F5CE8((uint64_t)&v229);
      *(_QWORD *)&v213[0] = v89;
      *(_OWORD *)((char *)v213 + 8) = v221;
      DWORD2(v213[1]) = v222;
      v214 = v208;
      v215 = v206;
      v216 = v125;
      v220 = 0;
      v217 = 0u;
      memset(v218, 0, sizeof(v218));
      v219[0] = 0;
      if (v126)
      {
        v219[0] = v124;
        memcpy(&v219[1], object, 0x1FFuLL);
        v220 = 1;
      }
      v187 = *((_QWORD *)&v211 + 1);
      if (*((_QWORD *)&v211 + 1) >= v212)
      {
        *((_QWORD *)&v211 + 1) = sub_20ED345D4((void **)&v211, (uint64_t)v213);
        v190 = v204;
        if (v218[1])
        {
          v218[2] = v218[1];
          operator delete((void *)v218[1]);
        }
      }
      else
      {
        v188 = v213[0];
        v189 = v213[1];
        *(_DWORD *)(*((_QWORD *)&v211 + 1) + 32) = v214;
        *(_OWORD *)v187 = v188;
        *(_OWORD *)(v187 + 16) = v189;
        *(_QWORD *)(v187 + 48) = 0;
        *(_QWORD *)(v187 + 56) = 0;
        *(_QWORD *)(v187 + 40) = 0;
        *(_OWORD *)(v187 + 40) = v215;
        *(_QWORD *)(v187 + 56) = v216;
        *(_QWORD *)(v187 + 64) = 0;
        v215 = 0uLL;
        v216 = 0;
        *(_QWORD *)(v187 + 72) = 0;
        *(_QWORD *)(v187 + 80) = 0;
        *(_OWORD *)(v187 + 64) = v217;
        v217 = 0uLL;
        *(_QWORD *)(v187 + 80) = v218[0];
        *(_QWORD *)(v187 + 88) = 0;
        v218[0] = 0;
        *(_QWORD *)(v187 + 96) = 0;
        *(_QWORD *)(v187 + 104) = 0;
        *(_OWORD *)(v187 + 88) = *(_OWORD *)&v218[1];
        *(_QWORD *)(v187 + 104) = v218[3];
        memset(&v218[1], 0, 24);
        *(_BYTE *)(v187 + 112) = 0;
        *(_BYTE *)(v187 + 624) = 0;
        if (v220)
        {
          memcpy((void *)(v187 + 112), v219, 0x200uLL);
          *(_BYTE *)(v187 + 624) = 1;
        }
        *((_QWORD *)&v211 + 1) = v187 + 632;
        v190 = v204;
      }
      if ((_QWORD)v217)
      {
        *((_QWORD *)&v217 + 1) = v217;
        operator delete((void *)v217);
      }
      if ((_QWORD)v215)
      {
        *((_QWORD *)&v215 + 1) = v215;
        operator delete((void *)v215);
      }
      v4 += 4;
      v210 += 3;
      v5 += 25;
    }
    while (v4 != v190 || v210 != v203 || v5 != v199);
  }
  *(_OWORD *)a3 = v211;
  *(_QWORD *)(a3 + 16) = v212;
}

void sub_20ED3B710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unint64_t a27,unint64_t a28,unint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char *a59,char *a60)
{
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void *v67;
  void *v68;
  void *v69;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&STACK[0x4B0]);
  v61 = (std::__shared_weak_count *)STACK[0x4F0];
  if (STACK[0x4F0])
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SLOBYTE(STACK[0x5BF]) < 0)
    operator delete((void *)STACK[0x5A8]);
  STACK[0x8A0] = a28;
  *(unint64_t *)((char *)&STACK[0x8A0] + *(_QWORD *)(a28 - 24)) = a27;
  v64 = MEMORY[0x24BEDB848] + 16;
  STACK[0x8B0] = a29;
  STACK[0x8B8] = v64;
  if (SLOBYTE(STACK[0x90F]) < 0)
    operator delete((void *)STACK[0x8F8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](a30);
  if (a59)
  {
    v65 = a60;
    v66 = a59;
    if (a60 != a59)
    {
      do
      {
        v67 = (void *)*((_QWORD *)v65 - 68);
        if (v67)
        {
          *((_QWORD *)v65 - 67) = v67;
          operator delete(v67);
        }
        v68 = (void *)*((_QWORD *)v65 - 71);
        if (v68)
        {
          *((_QWORD *)v65 - 70) = v68;
          operator delete(v68);
        }
        v69 = (void *)*((_QWORD *)v65 - 74);
        if (v69)
        {
          *((_QWORD *)v65 - 73) = v69;
          operator delete(v69);
        }
        v65 -= 632;
      }
      while (v65 != a59);
      v66 = a59;
    }
    operator delete(v66);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED3BD54(std::__shared_weak_count_vtbl **a1@<X8>)
{
  int v2;
  int v3;
  int v4;
  unint64_t v5;
  size_t v6;
  const char *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  const char *v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  const char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  size_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  int v67;
  const char *v68;
  int v69;
  const char *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  uint64_t v75;
  uint64_t v76;
  void *object;
  void *v78[2];
  __int128 v79;
  void *__p[2];
  unint64_t v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v74 = 0;
  v2 = LFDescriptorProgramMetadata();
  if (!v2)
    goto LABEL_89;
  sub_20ED3C668(&v73);
  if (**(int **)(v73 + 56) > 5)
    goto LABEL_89;
  v3 = *(unsigned __int8 *)(v73 + 72);
  v4 = *(_BYTE *)(v73 + 72) != 0;
  v5 = sub_20E8C31DC(v73, "OSLogSurrogateAppender", 1, 0);
  if (((v5 == 0) & ~v4) != 0)
    goto LABEL_89;
  v66[0] = &v73;
  v66[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v66[2] = std::chrono::system_clock::now().__d_.__rep_;
  v67 = 5;
  v68 = "unknown file";
  v69 = 288;
  v71 = 0;
  v72 = 0;
  v70 = "unknown function";
  v65 = v73;
  if (*(char *)(v73 + 39) < 0)
  {
    v7 = *(const char **)(v73 + 16);
    v6 = *(_QWORD *)(v73 + 24);
    v64 = v73 + 16;
    v9 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v9 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    v6 = *(unsigned __int8 *)(v73 + 39);
    v7 = (const char *)(v73 + 16);
    v64 = v73 + 16;
    v8 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v8 & 1) != 0)
      goto LABEL_8;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v79 && SHIBYTE(v78[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_8:
  if (byte_254A4A4F8[23] >= 0)
    v10 = byte_254A4A4F8;
  else
    v10 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v11 = byte_254A4A4F8[23];
  else
    v11 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v10, v7);
  v12 = v78;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v11 >= 0x17)
  {
    v13 = v5;
    v14 = v7;
    v15 = v3;
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    v12 = operator new(v16 + 1);
    v78[1] = (void *)v11;
    *(_QWORD *)&v79 = v17 | 0x8000000000000000;
    v78[0] = v12;
    v3 = v15;
    v7 = v14;
    v5 = v13;
    goto LABEL_21;
  }
  BYTE7(v79) = v11;
  if (v11)
LABEL_21:
    memmove(v12, v10, v11);
  *((_BYTE *)v12 + v11) = 0;
  BYTE8(v79) = 1;
  v18 = __p;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v6 >= 0x17)
  {
    v19 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v19 = v6 | 7;
    v20 = v19 + 1;
    v18 = operator new(v19 + 1);
    __p[1] = (void *)v6;
    v81 = v20 | 0x8000000000000000;
    __p[0] = v18;
  }
  else
  {
    HIBYTE(v81) = v6;
    if (!v6)
      goto LABEL_30;
  }
  memmove(v18, v7, v6);
LABEL_30:
  *((_BYTE *)v18 + v6) = 0;
  v82 = 1;
  v21 = object;
  if (SHIBYTE(v81) < 0)
    operator delete(__p[0]);
  if (BYTE8(v79) && SBYTE7(v79) < 0)
    operator delete(v78[0]);
  if (object)
    os_release(object);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v22 = _os_log_pack_size();
    v23 = (std::__shared_weak_count_vtbl *)operator new(v22, (std::align_val_t)8uLL);
    v24 = (std::__shared_weak_count *)operator new();
    v25 = v24;
    v24->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v24->__shared_weak_owners_ = 0;
    v24[1].__vftable = v23;
    object = v23;
    v78[0] = v23;
    v78[1] = v24;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    v79 = 0uLL;
    __p[0] = 0;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v25);
    }
    v29 = object;
    v30 = (_DWORD *)_os_log_pack_fill();
    *v30 = 67109120;
    v30[1] = v2;
    v31 = operator new();
    v32 = *(unsigned __int8 *)(v65 + 39);
    v33 = v64;
    if ((v32 & 0x80u) != 0)
    {
      v33 = *(_QWORD *)(v65 + 16);
      v32 = *(_QWORD *)(v65 + 24);
    }
    *(_QWORD *)v31 = v29;
    *(_OWORD *)(v31 + 8) = *(_OWORD *)v78;
    v78[0] = 0;
    v78[1] = 0;
    *(_OWORD *)(v31 + 24) = v79;
    v79 = 0uLL;
    *(_QWORD *)(v31 + 40) = v33;
    *(_QWORD *)(v31 + 48) = v32;
    *(_BYTE *)(v31 + 56) = 16;
    v75 = 0;
    v76 = v31;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), &v76);
    v34 = v76;
    v76 = 0;
    if (v34)
    {
      v35 = *(std::__shared_weak_count **)(v34 + 32);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = *(std::__shared_weak_count **)(v34 + 16);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      MEMORY[0x212BC6398](v34, 0x10F0C40B62ED6C6);
      v41 = v75;
      v75 = 0;
      if (v41)
      {
        v42 = *(std::__shared_weak_count **)(v41 + 32);
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = *(std::__shared_weak_count **)(v41 + 16);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        MEMORY[0x212BC6398](v41, 0x10F0C40B62ED6C6);
      }
    }
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
    if (*((_QWORD *)&v79 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)v78[1];
    if (v78[1])
    {
      v52 = (unint64_t *)((char *)v78[1] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  else
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    LODWORD(object) = 67109120;
    HIDWORD(object) = v2;
    v54 = (void *)_os_log_send_and_compose_impl();
    if (v54)
      free(v54);
  }
  if (v3)
  {
    sub_20E8C003C((uint64_t)v66, "Error getting the program metadata with code %d", v2);
    sub_20E863570((uint64_t)v66);
  }
  sub_20E863570((uint64_t)v66);
  v55 = v72;
  if (v72)
  {
    v56 = (unint64_t *)&v72->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
LABEL_89:
  v58 = v74;
  v59 = (std::__shared_weak_count *)operator new();
  v60 = v59;
  v59->__shared_owners_ = 0;
  v61 = (unint64_t *)&v59->__shared_owners_;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFE68;
  v59->__shared_weak_owners_ = 0;
  v59[1].__vftable = v58;
  *a1 = v58;
  a1[1] = (std::__shared_weak_count_vtbl *)v59;
  do
    v62 = __ldxr(v61);
  while (__stxr(v62 + 1, v61));
  do
    v63 = __ldaxr(v61);
  while (__stlxr(v63 - 1, v61));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v60);
  }
}

void sub_20ED3C508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20ED3C548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E86E8C4(&a26);
  sub_20E86E8C4(&a25);
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20ED3C57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x212BC6398](v6, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED3C5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED3C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED3C5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a34 && a33 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20ED3C61C(void *a1, int a2)
{
  const void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2)
      CFRelease(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x20ED3C660);
}

void sub_20ED3C640()
{
  __cxa_end_catch();
  JUMPOUT(0x20ED3C660);
}

void sub_20ED3C64C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20ED3C668(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F1F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F1F0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F1E8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F1F0);
  }
  *a1 = qword_254A5F1E8;
}

void sub_20ED3C704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F1F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F1F0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED3C75C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2
    && LFV2HandleRelease()
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractor.cpp", 104, (uint64_t)"ret == kLFReturnNoError", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

uint64_t sub_20ED3C7D0(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C9B4620;
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_20ED3C810(uint64_t a1, int a2, int *a3, uint64_t a4, int a5)
{
  int v9;
  void *object;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    object = 0;
    if (LFV2HandleCreate()
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractor.cpp", 114, (uint64_t)"ret == kLFReturnNoError", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    *(_QWORD *)a1 = object;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 1;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 1;
  }
  v9 = *a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 20) = v9;
  *(_DWORD *)(a1 + 24) = a5;
  return a1;
}

void sub_20ED3CFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,void *__p,void *a35,int a36,__int16 a37,char a38,char a39,char a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t *v44;

  if (a40)
  {
    if (a39 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  sub_20ED3C75C(v44);
  _Unwind_Resume(a1);
}

void sub_20ED3D0D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20ED3C75C(v1);
  _Unwind_Resume(a1);
}

void sub_20ED3D0EC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20ED3C75C(v1);
  _Unwind_Resume(a1);
}

void sub_20ED3D100(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20ED3C75C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20ED3D120(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    *v1 = 0;
    if (v2
      && LFV2HandleRelease()
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractor.cpp", 104, (uint64_t)"ret == kLFReturnNoError", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20ED3D1B8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20ED3D1CC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9E21A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20ED3D204(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9E21A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20ED3D224()
{
  return LFV2KeypointsRelease();
}

uint64_t sub_20ED3D230(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group25ExtractDes"
                     "criptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detection28PointDescriptorS"
                     "toreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15SubsampleMethodEm14LFFeaturesTypeRNSD_"
                     "22MLPointDescriptorStoreEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group2"
                                "5ExtractDescriptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detec"
                                "tion28PointDescriptorStoreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15Subsa"
                                "mpleMethodEm14LFFeaturesTypeRNSD_22MLPointDescriptorStoreEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group25ExtractDescriptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detection28PointDescriptorStoreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15SubsampleMethodEm14LFFeaturesTypeRNSD_22MLPointDescriptorStoreEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group25ExtractDescriptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detection28PointDescriptorStoreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15SubsampleMethodEm14LFFeaturesTypeRNSD_22MLPointDescriptorStoreEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED3D29C()
{
  return &unk_24C9E2200;
}

void sub_20ED3D2AC()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20ED3D2C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9E2220;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20ED3D2F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9E2220;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20ED3D318()
{
  return LFV2DescriptorsRelease();
}

uint64_t sub_20ED3D324(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group25ExtractDes"
                     "criptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detection28PointDescriptorS"
                     "toreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15SubsampleMethodEm14LFFeaturesTypeRNSD_"
                     "22MLPointDescriptorStoreEE3$_1JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group2"
                                "5ExtractDescriptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detec"
                                "tion28PointDescriptorStoreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15Subsa"
                                "mpleMethodEm14LFFeaturesTypeRNSD_22MLPointDescriptorStoreEE3$_1JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group25ExtractDescriptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detection28PointDescriptorStoreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15SubsampleMethodEm14LFFeaturesTypeRNSD_22MLPointDescriptorStoreEE3$_1JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group25ExtractDescriptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detection28PointDescriptorStoreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15SubsampleMethodEm14LFFeaturesTypeRNSD_22MLPointDescriptorStoreEE3$_1JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED3D390()
{
  return &unk_24C9E2280;
}

void sub_20ED3D3A0()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20ED3D3B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9E22A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20ED3D3EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9E22A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20ED3D40C()
{
  return LFV2FeaturesRelease();
}

uint64_t sub_20ED3D418(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group25ExtractDes"
                     "criptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detection28PointDescriptorS"
                     "toreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15SubsampleMethodEm14LFFeaturesTypeRNSD_"
                     "22MLPointDescriptorStoreEE3$_2JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group2"
                                "5ExtractDescriptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detec"
                                "tion28PointDescriptorStoreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15Subsa"
                                "mpleMethodEm14LFFeaturesTypeRNSD_22MLPointDescriptorStoreEE3$_2JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group25ExtractDescriptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detection28PointDescriptorStoreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15SubsampleMethodEm14LFFeaturesTypeRNSD_22MLPointDescriptorStoreEE3$_2JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio31ml_feature_detection_node_group25ExtractDescriptorsOnImageEP10LFV2HandlePvP10__CVBufferRKNS3_6vectorINS5_17feature_detection28PointDescriptorStoreKeypointENS3_9allocatorISE_EEEERKNSC_IjNSF_IjEEEERKNSD_15SubsampleMethodEm14LFFeaturesTypeRNSD_22MLPointDescriptorStoreEE3$_2JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED3D484()
{
  return &unk_24C9E2300;
}

void sub_20ED3D490(__int128 *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  std::string::value_type v14;
  char v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  char *v23;
  char v24;
  char *v25;
  void **v26;
  char *v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  char v38;
  char *v39;
  void **v40;
  char *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  uint64_t (***v50)();
  __int128 v51;
  _QWORD v52[2];
  __int128 v53;
  void *__dst[4];
  void *v55[2];
  void *v56;
  uint64_t v57;
  void (*v58)(void);
  void *__p;
  __int128 v60;
  std::__fs::filesystem::path v61;

  v8 = *(_QWORD *)(a3 + 72);
  v9 = *(_DWORD *)(a3 + 80);
  v10 = v9 == 1 || v9 == 4;
  if (!v10
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLDescriptorExtractor.cpp", 94, (uint64_t)"(lf_feature_type == kDetectorNoneDescriptorHardnet || lf_feature_type == kDetectorNoneDescriptorATUHardNetGlobalFeat)", 117, (uint64_t)"feature type is not supported", 29, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = operator new();
  sub_20ED3C810(v11, a2, (int *)(a3 + 64), v8, v9);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_DWORD *)(v11 + 16);
  v14 = *(_BYTE *)a3;
  v57 = v11;
  v58 = (void (*)(void))sub_20ED3D120;
  v15 = *(_BYTE *)(a3 + 1);
  v61.__pn_.__r_.__value_.__s.__data_[0] = v14;
  LOBYTE(__p) = v15;
  sub_20ED5739C((unsigned __int8 *)&v61, &v57, (char *)&__p, (__int128 *)(a3 + 8), (uint64_t *)__dst);
  v16 = __dst[0];
  v17 = __dst[1];
  v18 = v57;
  v57 = 0;
  if (v18)
    v58();
  if (*(_BYTE *)(a3 + 32))
  {
    v19 = atomic_load((unsigned __int8 *)&qword_254A5F1F8);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F1F8))
    {
      v50 = sub_21022700C();
      ((void (*)(void **__return_ptr))(*v50)[36])(__dst);
      sub_20ED3E29C(&v61.__pn_);
      sub_20ED3E218((uint64_t)__dst, &v61);
      if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst[2]) < 0)
        operator delete(__dst[0]);
      __cxa_atexit((void (*)(void *))sub_20E8A8B40, &xmmword_254A5F210, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5F1F8);
    }
    v20 = (_QWORD *)operator new();
    *v20 = &off_24C9E2080;
    v20[1] = v16;
    v20[2] = v17;
    v21 = (__int128 *)(a3 + 40);
    v22 = *(unsigned __int8 *)(a3 + 63);
    if ((v22 & 0x80u) != 0)
      v22 = *(_QWORD *)(a3 + 48);
    if (!v22)
      v21 = &xmmword_254A5F210;
    if (*((char *)v21 + 23) < 0)
    {
      sub_20E860C04(v55, *(void **)v21, *((_QWORD *)v21 + 1));
    }
    else
    {
      *(_OWORD *)v55 = *v21;
      v56 = (void *)*((_QWORD *)v21 + 2);
    }
    __dst[0] = v20;
    if (SHIBYTE(v56) < 0)
    {
      sub_20E860C04(&__dst[1], v55[0], (unint64_t)v55[1]);
    }
    else
    {
      *(_OWORD *)&__dst[1] = *(_OWORD *)v55;
      __dst[3] = v56;
    }
    v53 = *a1;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v35 = operator new();
    *(void **)(v35 + 232) = __dst[2];
    *(void **)(v35 + 239) = *(void **)((char *)&__dst[2] + 7);
    v36 = HIBYTE(__dst[3]);
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 64) = 0u;
    v37 = *(_OWORD *)__dst;
    memset(__dst, 0, sizeof(__dst));
    v38 = *(_BYTE *)(a3 + 84);
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    *(_OWORD *)(v35 + 80) = 0u;
    *(_OWORD *)(v35 + 96) = 0u;
    *(_OWORD *)(v35 + 200) = 0u;
    *(_OWORD *)(v35 + 184) = 0u;
    *(_OWORD *)(v35 + 168) = 0u;
    *(_OWORD *)(v35 + 152) = 0u;
    *(_OWORD *)(v35 + 136) = 0u;
    *(_OWORD *)(v35 + 120) = 0u;
    *(_OWORD *)(v35 + 216) = v37;
    *(_QWORD *)v35 = off_24C9E2320;
    *(_QWORD *)(v35 + 56) = &unk_24C9E2358;
    *(_QWORD *)(v35 + 112) = &unk_24C9E2380;
    *(_BYTE *)(v35 + 247) = v36;
    *(_QWORD *)(v35 + 248) = v12;
    *(_DWORD *)(v35 + 256) = v13;
    *(_QWORD *)(v35 + 272) = 0;
    *(_QWORD *)(v35 + 280) = 0;
    *(_QWORD *)(v35 + 264) = v35 + 272;
    *(_QWORD *)(v35 + 352) = 0;
    *(_OWORD *)(v35 + 320) = 0u;
    *(_OWORD *)(v35 + 336) = 0u;
    *(_OWORD *)(v35 + 288) = xmmword_210365BE0;
    *(_OWORD *)(v35 + 304) = 0u;
    *(_BYTE *)(v35 + 364) = v38;
    *(_QWORD *)(v35 + 368) = *(_QWORD *)(a3 + 88);
    v61.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v61.__pn_.__r_.__value_.__r.__words[1] = xmmword_2102DBFE0;
    strcpy(v61.__pn_.__r_.__value_.__l.__data_, "MLDescriptorExtractorNode");
    __p = operator new(0x38uLL);
    v60 = xmmword_2102DBF10;
    strcpy((char *)__p, "Node to extract ML Descriptors for ML relocalization");
    sub_20ED3E348(v35, (void **)&v61.__pn_.__r_.__value_.__l.__data_, &__p);
    if (SHIBYTE(v60) < 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
    }
    else if ((SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete(v61.__pn_.__r_.__value_.__l.__data_);
LABEL_41:
    v39 = (char *)operator new(0x40uLL);
    strcpy(v39, "Accept image to process on ANE and get ML descriptors from");
    if (*(char *)(v35 + 31) < 0)
      operator delete(*(void **)(v35 + 8));
    strcpy((char *)(v35 + 8), "VIOPoseMetadata Input");
    *(_BYTE *)(v35 + 31) = 21;
    sub_20E860C04(&v61, v39, 0x3AuLL);
    v40 = (void **)(v35 + 32);
    if (*(char *)(v35 + 55) < 0)
      operator delete(*v40);
    *(_OWORD *)v40 = *(_OWORD *)&v61.__pn_.__r_.__value_.__l.__data_;
    *(_QWORD *)(v35 + 48) = *((_QWORD *)&v61.__pn_.__r_.__value_.__l + 2);
    operator delete(v39);
    v41 = (char *)operator new(0x19uLL);
    strcpy(v41, "ML Model version getter");
    if (*(char *)(v35 + 87) < 0)
      operator delete(*(void **)(v35 + 64));
    strcpy((char *)(v35 + 64), "MLModelVersion Getter");
    *(_BYTE *)(v35 + 87) = 21;
    sub_20E860C04(&v61, v41, 0x17uLL);
    v42 = (void **)(v35 + 88);
    if (*(char *)(v35 + 111) < 0)
      operator delete(*v42);
    *(_OWORD *)v42 = *(_OWORD *)&v61.__pn_.__r_.__value_.__l.__data_;
    *(_QWORD *)(v35 + 104) = *((_QWORD *)&v61.__pn_.__r_.__value_.__l + 2);
    operator delete(v41);
    *(float *)(v35 + 360) = *(float *)(v35 + 368) / *(float *)(v35 + 372);
    v52[0] = v35;
    v43 = (std::__shared_weak_count *)operator new();
    v43->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2618;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = (std::__shared_weak_count_vtbl *)v35;
    v52[1] = v43;
    sub_20ED41910(a4, (uint64_t)&v53, v52);
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (v45)
    {
      v46 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (!*((_QWORD *)&v53 + 1))
        goto LABEL_60;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      v46 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (!*((_QWORD *)&v53 + 1))
        goto LABEL_60;
    }
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      if ((SHIBYTE(__dst[3]) & 0x80000000) == 0)
        goto LABEL_62;
      goto LABEL_61;
    }
LABEL_60:
    if ((SHIBYTE(__dst[3]) & 0x80000000) == 0)
    {
LABEL_62:
      v49 = __dst[0];
      __dst[0] = 0;
      if (v49)
        (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
      if (SHIBYTE(v56) < 0)
        operator delete(v55[0]);
      return;
    }
LABEL_61:
    operator delete(__dst[1]);
    goto LABEL_62;
  }
  v51 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v23 = (char *)operator new();
  v24 = *(_BYTE *)(a3 + 84);
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *((_OWORD *)v23 + 4) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 6) = 0u;
  *(_OWORD *)(v23 + 120) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(_OWORD *)(v23 + 152) = 0u;
  *(_OWORD *)(v23 + 168) = 0u;
  *(_OWORD *)(v23 + 184) = 0u;
  *(_OWORD *)(v23 + 200) = 0u;
  *(_QWORD *)v23 = &off_24C9E2578;
  *((_QWORD *)v23 + 7) = &unk_24C9E25B0;
  *((_QWORD *)v23 + 14) = &unk_24C9E25D8;
  *((_QWORD *)v23 + 27) = v16;
  *((_QWORD *)v23 + 28) = v17;
  *((_QWORD *)v23 + 29) = v12;
  *((_DWORD *)v23 + 60) = v13;
  *((_QWORD *)v23 + 32) = 0;
  *((_QWORD *)v23 + 33) = 0;
  *((_QWORD *)v23 + 31) = v23 + 256;
  *((_OWORD *)v23 + 17) = xmmword_210365BE0;
  *((_OWORD *)v23 + 18) = 0u;
  *((_OWORD *)v23 + 19) = 0u;
  *((_OWORD *)v23 + 20) = 0u;
  *((_QWORD *)v23 + 42) = 0;
  v23[348] = v24;
  *((_QWORD *)v23 + 44) = *(_QWORD *)(a3 + 88);
  __dst[0] = operator new(0x20uLL);
  *(_OWORD *)&__dst[1] = xmmword_2102DBFE0;
  strcpy((char *)__dst[0], "MLDescriptorExtractorNode");
  v61.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v61.__pn_.__r_.__value_.__r.__words[1] = xmmword_2102DBF10;
  strcpy(v61.__pn_.__r_.__value_.__l.__data_, "Node to extract ML Descriptors for ML relocalization");
  sub_20ED3E348((uint64_t)v23, __dst, (void **)&v61.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v61.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_70:
    operator delete(__dst[0]);
    goto LABEL_18;
  }
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_70;
LABEL_18:
  v25 = (char *)operator new(0x40uLL);
  strcpy(v25, "Accept image to process on ANE and get ML descriptors from");
  if (v23[31] < 0)
    operator delete(*((void **)v23 + 1));
  strcpy(v23 + 8, "VIOPoseMetadata Input");
  v23[31] = 21;
  sub_20E860C04(__dst, v25, 0x3AuLL);
  v26 = (void **)(v23 + 32);
  if (v23[55] < 0)
    operator delete(*v26);
  *(_OWORD *)v26 = *(_OWORD *)__dst;
  *((void **)v23 + 6) = __dst[2];
  operator delete(v25);
  v27 = (char *)operator new(0x19uLL);
  strcpy(v27, "ML Model version getter");
  if (v23[87] < 0)
    operator delete(*((void **)v23 + 8));
  strcpy(v23 + 64, "MLModelVersion Getter");
  v23[87] = 21;
  sub_20E860C04(__dst, v27, 0x17uLL);
  v28 = (void **)(v23 + 88);
  if (v23[111] < 0)
    operator delete(*v28);
  *(_OWORD *)v28 = *(_OWORD *)__dst;
  *((void **)v23 + 13) = __dst[2];
  operator delete(v27);
  *((float *)v23 + 86) = *((float *)v23 + 88) / *((float *)v23 + 89);
  __p = v23;
  v29 = (std::__shared_weak_count *)operator new();
  v29->__shared_owners_ = 0;
  v30 = (unint64_t *)&v29->__shared_owners_;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E3D90;
  v29->__shared_weak_owners_ = 0;
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)v23;
  *(_QWORD *)&v60 = v29;
  sub_20ED41910(a4, (uint64_t)&v51, &__p);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_20ED3DEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;

  if (*(char *)(v41 - 97) < 0)
    operator delete(*(void **)(v41 - 120));
  if (a20 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A5F1F8);
  if (v39)
    v40(v39);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED3E218(uint64_t a1, std::__fs::filesystem::path *this)
{
  __int128 v3;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(&xmmword_254A5F210, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    v3 = *(_OWORD *)a1;
    qword_254A5F220 = *(_QWORD *)(a1 + 16);
    xmmword_254A5F210 = v3;
  }
  return sub_20E8A944C((uint64_t)&xmmword_254A5F210, this);
}

void sub_20ED3E278(_Unwind_Exception *exception_object)
{
  if (SHIBYTE(qword_254A5F220) < 0)
    operator delete((void *)xmmword_254A5F210);
  _Unwind_Resume(exception_object);
}

std::string *sub_20ED3E29C(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_20E8A9678(a1, (std::string *)"cv3d-vio-ml-desc", (std::string *)"");
  return a1;
}

void sub_20ED3E2D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED3E2F0(uint64_t *a1)
{
  uint64_t v2;

  if (*((char *)a1 + 31) < 0)
  {
    operator delete((void *)a1[1]);
    v2 = *a1;
    *a1 = 0;
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *a1;
  *a1 = 0;
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void **sub_20ED3E348(uint64_t a1, void **a2, void **a3)
{
  void **v5;
  __int128 v6;
  void **result;
  size_t v8;
  size_t v9;
  char v10;
  __int128 v11;
  void *v12;
  size_t v13;

  v5 = (void **)(a1 + 168);
  if (v5 == a2)
    goto LABEL_10;
  if (*(char *)(a1 + 191) < 0)
  {
    v8 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      v9 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      v9 = v8;
    }
    sub_20E867CBC(v5, a2, v9);
LABEL_10:
    result = (void **)(a1 + 192);
    if ((void **)(a1 + 192) == a3)
      return result;
    goto LABEL_11;
  }
  if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
  {
    sub_20E867BF8(v5, *a2, (size_t)a2[1]);
    result = (void **)(a1 + 192);
    if ((void **)(a1 + 192) == a3)
      return result;
  }
  else
  {
    v6 = *(_OWORD *)a2;
    v5[2] = a2[2];
    *(_OWORD *)v5 = v6;
    result = (void **)(a1 + 192);
    if ((void **)(a1 + 192) == a3)
      return result;
  }
LABEL_11:
  v10 = *((_BYTE *)a3 + 23);
  if (*(char *)(a1 + 215) < 0)
  {
    if (v10 >= 0)
      v12 = a3;
    else
      v12 = *a3;
    if (v10 >= 0)
      v13 = *((unsigned __int8 *)a3 + 23);
    else
      v13 = (size_t)a3[1];
    return sub_20E867CBC(result, v12, v13);
  }
  else if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
  {
    return (void **)sub_20E867BF8(result, *a3, (size_t)a3[1]);
  }
  else
  {
    v11 = *(_OWORD *)a3;
    result[2] = a3[2];
    *(_OWORD *)result = v11;
  }
  return result;
}

uint64_t sub_20ED3E43C(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED3E46C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9E2438;
  *(_QWORD *)(a1 + 56) = &unk_24C9E2460;
  *(_QWORD *)(a1 + 112) = &unk_24C9E2488;
  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 112) = off_24C9E2500;
      if ((*(char *)(a1 + 167) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24C9E2500;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = off_24C9E24D8;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9E24D8;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)a1 = off_24C9E24B0;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_16:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9E24B0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_16;
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_17:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED3E5B8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9E2320;
  *(_QWORD *)(a1 + 56) = &unk_24C9E2358;
  *(_QWORD *)(a1 + 112) = &unk_24C9E2380;
  std::mutex::~mutex((std::mutex *)(a1 + 296));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 272));
  if (*(char *)(a1 + 247) < 0)
  {
    operator delete(*(void **)(a1 + 224));
    v2 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (!v2)
      return sub_20ED3E46C(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20ED3E46C(a1);
}

void sub_20ED3E63C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9E2320;
  *(_QWORD *)(a1 + 56) = &unk_24C9E2358;
  *(_QWORD *)(a1 + 112) = &unk_24C9E2380;
  std::mutex::~mutex((std::mutex *)(a1 + 296));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 272));
  if (*(char *)(a1 + 247) < 0)
  {
    operator delete(*(void **)(a1 + 224));
    v2 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (!v2)
    {
LABEL_4:
      sub_20ED3E46C(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20ED3E6D4(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  char v29;

  v5 = a2[1];
  if (*(_BYTE *)(a1 + 364))
  {
    v6 = *(float *)(a1 + 360) + 1.0;
    *(float *)(a1 + 360) = v6;
    if (v5)
    {
      sub_20ED40EC8((uint64_t **)(a1 + 264), (uint64_t)a2);
      v6 = *(float *)(a1 + 360);
    }
    v7 = *(float *)(a1 + 368) / *(float *)(a1 + 372);
    if (v6 >= v7)
    {
      *(float *)(a1 + 360) = v6 - v7;
      sub_20ED411F4((uint64_t)&v27, a1 + 264);
      if (v29)
      {
        v9 = *((_QWORD *)&v27 + 1);
        v8 = v27;
        v10 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
        if ((v10 & 1) == 0)
        {
          v22 = *((_QWORD *)&v27 + 1);
          v24 = v27;
          v20 = __cxa_guard_acquire(&qword_254A6DE08);
          v9 = v22;
          v8 = v24;
          if (v20)
          {
            __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE08);
            v9 = v22;
            v8 = v24;
          }
        }
        sub_20ED3ED6C((uint64_t (**)())&v25, (_QWORD *)(a1 + 216), v8, v9, (uint64_t)&off_254A5A4B8);
        v11 = (char *)operator new(0x30uLL);
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = 0;
        *(_OWORD *)(v11 + 24) = v25;
        *(_QWORD *)v11 = &off_24C9E2528;
        *((_QWORD *)v11 + 5) = v26;
        *a3 = v11 + 24;
        a3[1] = v11;
        if (v29)
        {
          v12 = v28;
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
        return;
      }
    }
LABEL_17:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  if (!v5)
    goto LABEL_17;
  v15 = (_QWORD *)(a1 + 216);
  v16 = *a2;
  v17 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v17 & 1) == 0)
  {
    v21 = *a2;
    v23 = a2[1];
    v19 = __cxa_guard_acquire(&qword_254A6DE08);
    v16 = v21;
    v5 = v23;
    if (v19)
    {
      __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE08);
      v16 = v21;
      v5 = v23;
    }
  }
  sub_20ED3ED6C((uint64_t (**)())&v27, v15, v16, v5, (uint64_t)&off_254A5A4B8);
  v18 = (char *)operator new(0x30uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24C9E2528;
  *(_OWORD *)(v18 + 24) = v27;
  *((_QWORD *)v18 + 5) = v28;
  *a3 = v18 + 24;
  a3[1] = v18;
}

void sub_20ED3E904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20ED33F50((void **)va);
  sub_20ED41364((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED3E920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20ED41364((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED3E934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20ED33F50((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED3E948(uint64_t a1)
{
  return *(_QWORD *)(a1 + 248);
}

void sub_20ED3E958(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_20ED3E960(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 56) = off_24C9E2320;
  v2 = a1 - 56;
  *(_QWORD *)a1 = &unk_24C9E2358;
  *(_QWORD *)(a1 + 56) = &unk_24C9E2380;
  std::mutex::~mutex((std::mutex *)(a1 + 240));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 216));
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v3 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    if (!v3)
      return sub_20ED3E46C(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20ED3E46C(v2);
}

void sub_20ED3E9E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 56) = off_24C9E2320;
  v2 = a1 - 56;
  *(_QWORD *)a1 = &unk_24C9E2358;
  *(_QWORD *)(a1 + 56) = &unk_24C9E2380;
  std::mutex::~mutex((std::mutex *)(a1 + 240));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 216));
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v3 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    if (!v3)
    {
LABEL_4:
      sub_20ED3E46C(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20ED3EA84(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192);
}

uint64_t sub_20ED3EA94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 112) = off_24C9E2320;
  v2 = a1 - 112;
  *(_QWORD *)(a1 - 56) = &unk_24C9E2358;
  *(_QWORD *)a1 = &unk_24C9E2380;
  std::mutex::~mutex((std::mutex *)(a1 + 184));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 160));
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    v3 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (!v3)
      return sub_20ED3E46C(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20ED3E46C(v2);
}

void sub_20ED3EB18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 112) = off_24C9E2320;
  v2 = a1 - 112;
  *(_QWORD *)(a1 - 56) = &unk_24C9E2358;
  *(_QWORD *)a1 = &unk_24C9E2380;
  std::mutex::~mutex((std::mutex *)(a1 + 184));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 160));
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    v3 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (!v3)
    {
LABEL_4:
      sub_20ED3E46C(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

void sub_20ED3EBB0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_20ED3EBE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_20ED3EBE8(*a1);
    sub_20ED3EBE8(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

void sub_20ED3EC68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED3EC78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED3ECA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = *(void **)(v3 - 544);
        if (v5)
        {
          *(_QWORD *)(v3 - 536) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 568);
        if (v6)
        {
          *(_QWORD *)(v3 - 560) = v6;
          operator delete(v6);
        }
        v7 = *(void **)(v3 - 592);
        if (v7)
        {
          *(_QWORD *)(v3 - 584) = v7;
          operator delete(v7);
        }
        v3 -= 632;
      }
      while (v3 != v1);
      v8 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v8);
    }
  }
}

void sub_20ED3ED6C(uint64_t (**a1)(), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _OWORD *v6;
  std::__fs::filesystem::path *v7;
  std::string::size_type v8;
  std::__fs::filesystem::path *v9;
  size_t size;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t (**v19)();
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t (**v25)();
  _QWORD *v26;
  char *n;
  uint64_t v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  char *i;
  uint64_t v35;
  void (*v36)(uint64_t);
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *j;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  char v51;
  _QWORD *v52;
  char *k;
  uint64_t v54;
  void (*v55)(uint64_t);
  _QWORD *v56;
  _QWORD *v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  _QWORD *v62;
  char *m;
  uint64_t v64;
  void (*v65)(uint64_t);
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  uint64_t (*v71)();
  uint64_t (*v72)();
  int64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t (*v77)();
  uint64_t (*v78)();
  uint64_t v79;
  char *v80;
  size_t v81;
  char *v82;
  uint64_t (*v83)();
  uint64_t (*v84)();
  int64_t v85;
  char *v86;
  char *v87;
  std::string::size_type v88;
  void *v89;
  std::string::size_type v90;
  std::string::size_type v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::string::size_type ii;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t jj;
  uint64_t v103;
  uint64_t kk;
  int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  unsigned int v110;
  uint64_t v111;
  size_t v112;
  size_t v113;
  BOOL v114;
  uint64_t mm;
  unsigned int v116;
  void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::string::size_type v121;
  void *v122;
  std::string::size_type v123;
  std::string::size_type v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  uint64_t (**v129)();
  std::string::size_type v130;
  void *v131;
  std::string::size_type v132;
  std::string::size_type v133;
  void *v134;
  std::__shared_weak_count *v135;
  unint64_t *p_shared_owners;
  unint64_t v137;
  std::bad_cast *v138;
  std::bad_cast *v139;
  std::bad_cast *v140;
  std::bad_cast *v141;
  std::bad_alloc *v142;
  std::bad_alloc *v143;
  std::bad_cast *v144;
  std::bad_cast *v145;
  std::bad_cast *v146;
  std::bad_cast *v147;
  std::bad_cast *exception;
  std::bad_cast *v149;
  uint64_t (**v150)();
  unsigned int v152;
  uint64_t (*v156)();
  std::string::size_type v157;
  uint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  std::__fs::filesystem::path v161;
  unsigned int v162;
  char v163;
  std::__fs::filesystem::path __dst;
  uint64_t (**v165)();
  uint64_t v166;
  void *v167;
  uint64_t v168;
  char v169[16];
  uint64_t (**v170)();
  char v171;
  void (**v172)();
  void *v173;
  void *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _BYTE v180[18];
  uint64_t v181;

  v5 = a2;
  v181 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 1;
  v152 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a4);
  (*(void (**)(std::__fs::filesystem::path *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v5 + 56))(&v161, *v5, a4);
  if (*((char *)v5 + 31) < 0)
  {
    sub_20E860C04(&__dst, (void *)v5[1], v5[2]);
  }
  else
  {
    *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = *v6;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v5[3];
  }
  if (std::__fs::filesystem::path::__root_directory(&v161).__size_)
  {
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v161.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v161;
      else
        v9 = (std::__fs::filesystem::path *)v161.__pn_.__r_.__value_.__r.__words[0];
      if ((v161.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v161.__pn_.__r_.__value_.__r.__words[2]);
      else
        size = v161.__pn_.__r_.__value_.__l.__size_;
      sub_20E867CBC((void **)&__dst.__pn_.__r_.__value_.__l.__data_, v9, size);
    }
    else if ((*((_BYTE *)&v161.__pn_.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      sub_20E867BF8(&__dst, v161.__pn_.__r_.__value_.__l.__data_, v161.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      __dst = v161;
    }
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(&__dst).__size_)
      std::string::push_back(&__dst.__pn_, 47);
    if ((v161.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v161;
    else
      v7 = (std::__fs::filesystem::path *)v161.__pn_.__r_.__value_.__r.__words[0];
    if ((v161.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = HIBYTE(v161.__pn_.__r_.__value_.__r.__words[2]);
    else
      v8 = v161.__pn_.__r_.__value_.__l.__size_;
    std::string::append(&__dst.__pn_, (const std::string::value_type *)v7, v8);
  }
  if (SHIBYTE(v161.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__pn_.__r_.__value_.__l.__data_);
  if (!(*(unsigned int (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a5 + 176))(a5, &__dst))
    goto LABEL_140;
  v11 = v5;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::__fs::filesystem::path *, uint64_t))(*(_QWORD *)a5 + 368))(&v158, a5, &__dst, 8);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 16))(v159);
  v177 = 1;
  sub_20E9EECEC(&v170, &v177, v12, 0x2800uLL);
  v170 = &off_24C9B0298;
  v172 = (void (**)())&unk_24C9B03E0;
  memset(&v161, 0, sizeof(v161));
  v176 = 0;
  sub_20E9EDE6C(v175, &v176);
  v13 = v176;
  if (!v176)
  {
    v16 = 0;
    v17 = v161.__pn_.__r_.__value_.__r.__words[0];
    if (v161.__pn_.__r_.__value_.__r.__words[0])
      goto LABEL_43;
    goto LABEL_33;
  }
  if (v176 >= 0x76B981DAE6076CLL)
    sub_20ED343A8();
  v14 = (char *)operator new(552 * v176);
  v15 = 552 * ((552 * v13 - 552) / 0x228) + 552;
  bzero(v14, v15);
  v16 = &v14[v15];
  v161.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  v161.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&v14[v15];
  v161.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&v14[552 * v13];
  v17 = (std::string::size_type)v14;
  if (&v14[v15] != v14)
  {
LABEL_43:
    while (1)
    {
      sub_20E9EFAC4(v175, (uint64_t)&v177);
      if ((_DWORD)v177 == 2)
        break;
      if ((_DWORD)v177 == 3)
      {
        *(double *)v17 = (double)v178;
        v26 = v179;
        v179 = 0;
        if (!v26)
          goto LABEL_57;
        goto LABEL_51;
      }
      if ((_DWORD)v177 != 4)
      {
        exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        exception->__vftable = 0;
        v149 = std::bad_cast::bad_cast(exception);
        v149->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v149, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      *(double *)v17 = *(double *)&v178;
      v26 = v179;
      v179 = 0;
      if (v26)
        goto LABEL_51;
LABEL_57:
      sub_20E9EFAC4(v175, (uint64_t)&v177);
      if ((_DWORD)v177 != 2)
      {
        v144 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v144->__vftable = 0;
        v145 = std::bad_cast::bad_cast(v144);
        v145->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v145, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v32 = v178;
      v33 = v179;
      v179 = 0;
      if (v33)
      {
        for (i = (char *)v33[4]; i != (char *)v33[6]; i -= 16)
        {
          v36 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v35 = *((_QWORD *)i - 1);
          v36(v35);
        }
        free(i);
        v37 = (_QWORD *)v33[3];
        if (v37)
        {
          do
          {
            v38 = (_QWORD *)*v37;
            free(v37);
            v37 = v38;
          }
          while (v38);
        }
        free(v33);
      }
      v40 = *(_QWORD *)(v17 + 8);
      v39 = *(_QWORD *)(v17 + 16);
      v41 = (v39 - v40) >> 6;
      if (v32 <= v41)
      {
        if (v32 < v41)
        {
          v39 = v40 + (v32 << 6);
          *(_QWORD *)(v17 + 16) = v39;
        }
      }
      else
      {
        sub_20ED406CC((char **)(v17 + 8), v32 - v41);
        v40 = *(_QWORD *)(v17 + 8);
        v39 = *(_QWORD *)(v17 + 16);
      }
      if (v39 != v40)
      {
        v42 = v39;
        do
        {
          v43 = 0;
          v44 = v175;
          do
          {
            sub_20E9EFAC4(v44, (uint64_t)&v177);
            if ((_DWORD)v177 != 2 || (unint64_t)v178 >= 0x100)
            {
              v138 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              v138->__vftable = 0;
              v139 = std::bad_cast::bad_cast(v138);
              v139->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
              __cxa_throw(v139, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
            }
            *(_BYTE *)(v40 + v43) = v178;
            v45 = v179;
            v179 = 0;
            if (v45)
            {
              for (j = (char *)v45[4]; j != (char *)v45[6]; j -= 16)
              {
                v48 = (void (*)(uint64_t))*((_QWORD *)j - 2);
                v47 = *((_QWORD *)j - 1);
                v48(v47);
              }
              free(j);
              v49 = (_QWORD *)v45[3];
              if (v49)
              {
                do
                {
                  v50 = (_QWORD *)*v49;
                  free(v49);
                  v49 = v50;
                }
                while (v50);
              }
              free(v45);
              v5 = v11;
            }
            ++v43;
          }
          while (v43 != 64);
          v40 += 64;
        }
        while (v40 != v42);
      }
      sub_20E9EFAC4(v175, (uint64_t)&v177);
      if ((_DWORD)v177 != 2 || (v51 = v178, (unint64_t)v178 >= 0x100))
      {
        v146 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v146->__vftable = 0;
        v147 = std::bad_cast::bad_cast(v146);
        v147->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
        __cxa_throw(v147, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
      }
      v52 = v179;
      v179 = 0;
      if (v52)
      {
        for (k = (char *)v52[4]; k != (char *)v52[6]; k -= 16)
        {
          v55 = (void (*)(uint64_t))*((_QWORD *)k - 2);
          v54 = *((_QWORD *)k - 1);
          v55(v54);
        }
        free(k);
        v56 = (_QWORD *)v52[3];
        if (v56)
        {
          do
          {
            v57 = (_QWORD *)*v56;
            free(v56);
            v56 = v57;
          }
          while (v57);
        }
        free(v52);
      }
      if (v51)
      {
        v58 = (float *)(v17 + 32);
        if (!*(_BYTE *)(v17 + 544))
        {
          *(_OWORD *)(v17 + 512) = 0u;
          *(_OWORD *)(v17 + 528) = 0u;
          *(_OWORD *)(v17 + 480) = 0u;
          *(_OWORD *)(v17 + 496) = 0u;
          *(_OWORD *)(v17 + 448) = 0u;
          *(_OWORD *)(v17 + 464) = 0u;
          *(_OWORD *)(v17 + 416) = 0u;
          *(_OWORD *)(v17 + 432) = 0u;
          *(_OWORD *)(v17 + 384) = 0u;
          *(_OWORD *)(v17 + 400) = 0u;
          *(_OWORD *)(v17 + 352) = 0u;
          *(_OWORD *)(v17 + 368) = 0u;
          *(_OWORD *)(v17 + 320) = 0u;
          *(_OWORD *)(v17 + 336) = 0u;
          *(_OWORD *)(v17 + 288) = 0u;
          *(_OWORD *)(v17 + 304) = 0u;
          *(_OWORD *)(v17 + 256) = 0u;
          *(_OWORD *)(v17 + 272) = 0u;
          *(_OWORD *)(v17 + 224) = 0u;
          *(_OWORD *)(v17 + 240) = 0u;
          *(_OWORD *)(v17 + 192) = 0u;
          *(_OWORD *)(v17 + 208) = 0u;
          *(_OWORD *)(v17 + 160) = 0u;
          *(_OWORD *)(v17 + 176) = 0u;
          *(_OWORD *)(v17 + 128) = 0u;
          *(_OWORD *)(v17 + 144) = 0u;
          *(_OWORD *)(v17 + 96) = 0u;
          *(_OWORD *)(v17 + 112) = 0u;
          *(_OWORD *)(v17 + 64) = 0u;
          *(_OWORD *)(v17 + 80) = 0u;
          *(_OWORD *)v58 = 0u;
          *(_OWORD *)(v17 + 48) = 0u;
          *(_BYTE *)(v17 + 544) = 1;
        }
        v59 = 0;
        v60 = v175;
        while (1)
        {
          sub_20E9EFAC4(v60, (uint64_t)&v177);
          switch((_DWORD)v177)
          {
            case 2:
              v58[v59] = (float)(unint64_t)v178;
              v62 = v179;
              v179 = 0;
              if (v62)
                goto LABEL_107;
              break;
            case 3:
              v58[v59] = (float)v178;
              v62 = v179;
              v179 = 0;
              if (v62)
                goto LABEL_107;
              break;
            case 4:
              v61 = *(double *)&v178;
              v58[v59] = v61;
              v62 = v179;
              v179 = 0;
              if (!v62)
                break;
LABEL_107:
              for (m = (char *)v62[4]; m != (char *)v62[6]; m -= 16)
              {
                v65 = (void (*)(uint64_t))*((_QWORD *)m - 2);
                v64 = *((_QWORD *)m - 1);
                v65(v64);
              }
              free(m);
              v66 = (_QWORD *)v62[3];
              if (v66)
              {
                do
                {
                  v67 = (_QWORD *)*v66;
                  free(v66);
                  v66 = v67;
                }
                while (v67);
              }
              free(v62);
              break;
            default:
              v140 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              v140->__vftable = 0;
              v141 = std::bad_cast::bad_cast(v140);
              v141->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
              __cxa_throw(v141, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
          }
          if (++v59 == 128)
            goto LABEL_42;
        }
      }
      if (*(_BYTE *)(v17 + 544))
        *(_BYTE *)(v17 + 544) = 0;
LABEL_42:
      v17 += 552;
      if ((char *)v17 == v16)
        goto LABEL_33;
    }
    *(double *)v17 = (double)(unint64_t)v178;
    v26 = v179;
    v179 = 0;
    if (!v26)
      goto LABEL_57;
LABEL_51:
    for (n = (char *)v26[4]; n != (char *)v26[6]; n -= 16)
    {
      v29 = (void (*)(uint64_t))*((_QWORD *)n - 2);
      v28 = *((_QWORD *)n - 1);
      v29(v28);
    }
    free(n);
    v30 = (_QWORD *)v26[3];
    if (v30)
    {
      do
      {
        v31 = (_QWORD *)*v30;
        free(v30);
        v30 = v31;
      }
      while (v31);
    }
    free(v26);
    goto LABEL_57;
  }
LABEL_33:
  sub_20E9EDADC(v175, &v162);
  v170 = &off_24C9B71C0;
  v172 = (void (**)())&unk_24C9B7308;
  v18 = v175;
  v175 = 0;
  if (v18)
  {
    sub_20E9EF740((_QWORD *)(v18 + 8));
    MEMORY[0x212BC6398](v18, 0x10F2C40853B94B7);
  }
  v172 = off_24C9B7428;
  if (v173)
  {
    v174 = v173;
    operator delete(v173);
  }
  if ((*(unsigned int (**)(_QWORD, std::__fs::filesystem::path *))(*(_QWORD *)*v5 + 32))(*v5, &v161) == v152)
  {
    (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, std::__fs::filesystem::path *, uint64_t))(*(_QWORD *)*v5 + 48))(&v165, *v5, &v161, a4);
    if ((_BYTE)v168)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      v19 = v165;
      v20 = v166;
      v170 = a1;
      v171 = 0;
      v21 = v166 - (_QWORD)v165;
      if ((uint64_t (**)())v166 == v165)
      {
        v129 = v165;
        if (!v165)
        {
LABEL_224:
          v130 = v161.__pn_.__r_.__value_.__r.__words[0];
          if (v161.__pn_.__r_.__value_.__r.__words[0])
          {
            v131 = (void *)v161.__pn_.__r_.__value_.__r.__words[0];
            if (v161.__pn_.__r_.__value_.__l.__size_ != v161.__pn_.__r_.__value_.__r.__words[0])
            {
              v132 = v161.__pn_.__r_.__value_.__l.__size_ - 544;
              do
              {
                v134 = *(void **)v132;
                if (*(_QWORD *)v132)
                {
                  *(_QWORD *)(v132 + 8) = v134;
                  operator delete(v134);
                }
                v133 = v132 - 8;
                v132 -= 552;
              }
              while (v133 != v130);
              v131 = (void *)v161.__pn_.__r_.__value_.__r.__words[0];
            }
            v161.__pn_.__r_.__value_.__l.__size_ = v130;
            operator delete(v131);
          }
          v135 = v160;
          if (v160)
          {
            p_shared_owners = (unint64_t *)&v160->__shared_owners_;
            do
              v137 = __ldaxr(p_shared_owners);
            while (__stlxr(v137 - 1, p_shared_owners));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
          }
          goto LABEL_237;
        }
      }
      else
      {
        v22 = 0x9B8B577E613716AFLL * (v21 >> 3);
        if (v22 >= 0x67B23A5440CF65)
          sub_20ED343A8();
        v23 = (uint64_t (*)())operator new(v21);
        v24 = 0;
        *a1 = v23;
        a1[1] = v23;
        a1[2] = (uint64_t (*)())((char *)v23 + 632 * v22);
        v150 = v19;
        v25 = v19 + 14;
        v156 = v23;
        do
        {
          v68 = (char *)v23 + v24 * 8;
          v69 = *(_OWORD *)&v25[v24 - 14];
          v70 = *(_OWORD *)&v25[v24 - 12];
          *((_DWORD *)v68 + 8) = v25[v24 - 10];
          *(_OWORD *)v68 = v69;
          *((_OWORD *)v68 + 1) = v70;
          *((_QWORD *)v68 + 6) = 0;
          *((_QWORD *)v68 + 7) = 0;
          *((_QWORD *)v68 + 5) = 0;
          v72 = v25[v24 - 9];
          v71 = v25[v24 - 8];
          v73 = (char *)v71 - (char *)v72;
          if (v71 != v72)
          {
            if (v73 < 0)
              sub_20ED343A8();
            v74 = (char *)operator new((char *)v71 - (char *)v72);
            *((_QWORD *)v68 + 5) = v74;
            *((_QWORD *)v68 + 6) = v74;
            v75 = &v74[64 * (v73 >> 6)];
            *((_QWORD *)v68 + 7) = v75;
            memcpy(v74, v72, v73);
            *((_QWORD *)v68 + 6) = v75;
          }
          *((_QWORD *)v68 + 8) = 0;
          v76 = (uint64_t)&v25[v24 - 14];
          *((_QWORD *)v68 + 9) = 0;
          *((_QWORD *)v68 + 10) = 0;
          v78 = v25[v24 - 6];
          v77 = v25[v24 - 5];
          v79 = (char *)v77 - (char *)v78;
          if (v77 != v78)
          {
            if (v79 < 0)
              sub_20E969238();
            v80 = (char *)operator new((char *)v77 - (char *)v78);
            *((_QWORD *)v68 + 8) = v80;
            *((_QWORD *)v68 + 9) = v80;
            *((_QWORD *)v68 + 10) = &v80[8 * (v79 >> 3)];
            v81 = v79 & 0xFFFFFFFFFFFFFFF8;
            memcpy(v80, v78, v81);
            *((_QWORD *)v68 + 9) = &v80[v81];
          }
          v82 = (char *)v156 + v24 * 8;
          *(_QWORD *)((char *)v156 + v24 * 8 + 88) = 0;
          *((_QWORD *)v82 + 12) = 0;
          *((_QWORD *)v82 + 13) = 0;
          v84 = v25[v24 - 3];
          v83 = v25[v24 - 2];
          v85 = (char *)v83 - (char *)v84;
          if (v83 != v84)
          {
            if (v85 < 0)
              sub_20ED343A8();
            v86 = (char *)operator new((char *)v83 - (char *)v84);
            *(_QWORD *)((char *)v156 + v24 * 8 + 88) = v86;
            v87 = &v86[64 * (v85 >> 6)];
            *((_QWORD *)v82 + 12) = v86;
            *((_QWORD *)v82 + 13) = v87;
            memcpy(v86, v84, v85);
            *((_QWORD *)v82 + 12) = v87;
          }
          v82[112] = 0;
          v82[624] = 0;
          if (LOBYTE(v25[v24 + 64]))
          {
            memcpy(v82 + 112, &v25[v24], 0x200uLL);
            v82[624] = 1;
          }
          v24 += 79;
          v23 = v156;
        }
        while (v76 + 632 != v20);
        a1[1] = (uint64_t (*)())((char *)v156 + v24 * 8);
        v19 = v150;
        if (!v150)
          goto LABEL_224;
        do
        {
          v126 = *(void **)(v20 - 544);
          if (v126)
          {
            *(_QWORD *)(v20 - 536) = v126;
            operator delete(v126);
          }
          v127 = *(void **)(v20 - 568);
          if (v127)
          {
            *(_QWORD *)(v20 - 560) = v127;
            operator delete(v127);
          }
          v128 = *(void **)(v20 - 592);
          if (v128)
          {
            *(_QWORD *)(v20 - 584) = v128;
            operator delete(v128);
          }
          v20 -= 632;
        }
        while ((uint64_t (**)())v20 != v150);
        v129 = v165;
      }
      v166 = (uint64_t)v19;
      operator delete(v129);
      goto LABEL_224;
    }
  }
  v88 = v161.__pn_.__r_.__value_.__r.__words[0];
  if (v161.__pn_.__r_.__value_.__r.__words[0])
  {
    v89 = (void *)v161.__pn_.__r_.__value_.__r.__words[0];
    if (v161.__pn_.__r_.__value_.__l.__size_ != v161.__pn_.__r_.__value_.__r.__words[0])
    {
      v90 = v161.__pn_.__r_.__value_.__l.__size_ - 544;
      do
      {
        v92 = *(void **)v90;
        if (*(_QWORD *)v90)
        {
          *(_QWORD *)(v90 + 8) = v92;
          operator delete(v92);
        }
        v91 = v90 - 8;
        v90 -= 552;
      }
      while (v91 != v88);
      v89 = (void *)v161.__pn_.__r_.__value_.__r.__words[0];
    }
    v161.__pn_.__r_.__value_.__l.__size_ = v88;
    operator delete(v89);
  }
  v93 = v160;
  if (v160)
  {
    v94 = (unint64_t *)&v160->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
LABEL_140:
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, a3, a4);
  (*(void (**)(std::__fs::filesystem::path *__return_ptr, _QWORD, uint64_t (**)(), uint64_t, _QWORD))(*(_QWORD *)*v5 + 40))(&v161, *v5, a1, a4, v152);
  if (!v163)
    goto LABEL_237;
  sub_210224144(&__dst, 0x10u, a5, &v158);
  if (!v159)
    goto LABEL_198;
  v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 16))(v159);
  v166 = 1;
  v97 = operator new();
  *(_QWORD *)v97 = v96;
  *(_QWORD *)(v97 + 8) = v96;
  *(_BYTE *)(v97 + 16) = 0;
  *(_BYTE *)(v97 + 40) = 0;
  *(_BYTE *)(v97 + 48) = 0;
  *(_BYTE *)(v97 + 72) = 0;
  *(_QWORD *)(v97 + 88) = 0;
  *(_QWORD *)(v97 + 96) = 0;
  *(_QWORD *)(v97 + 80) = 0;
  v165 = &off_24C9B4468;
  v167 = &unk_24C9B45B8;
  v168 = v97;
  sub_20E9F4A34();
  v157 = v161.__pn_.__r_.__value_.__l.__size_;
  for (ii = v161.__pn_.__r_.__value_.__r.__words[0]; ii != v157; ii += 552)
  {
    if (*(_BYTE *)(v97 + 40))
    {
      *(_QWORD *)v180 = v97 + 16;
      sub_20E9F4C08((uint64_t)v169, (uint64_t **)v180, (unint64_t *)ii);
    }
    else
    {
      v99 = *(_QWORD *)ii;
      v180[0] = -53;
      *(_QWORD *)&v180[1] = bswap64(v99);
      std::ostream::write();
    }
    v100 = (uint64_t)(*(_QWORD *)(ii + 16) - *(_QWORD *)(ii + 8)) >> 6;
    if (*(_BYTE *)(v97 + 40))
    {
      *(_QWORD *)v180 = v97 + 16;
      sub_20E9F472C((uint64_t **)v180, v100);
      v101 = *(_QWORD *)(ii + 8);
      jj = *(_QWORD *)(ii + 16);
      if (jj != v101)
        goto LABEL_155;
    }
    else
    {
      sub_20E9F4A34();
      v97 = v168;
      v101 = *(_QWORD *)(ii + 8);
      for (jj = *(_QWORD *)(ii + 16); v101 != jj; v101 += 64)
      {
LABEL_155:
        if (*(_BYTE *)(v97 + 40))
        {
          v103 = 0;
          *(_QWORD *)v180 = v97 + 16;
          do
            sub_20E9F3164((uint64_t **)v180, *(_BYTE *)(v101 + v103++));
          while (v103 != 64);
        }
        else
        {
          for (kk = 0; kk != 64; ++kk)
          {
            v105 = *(char *)(v101 + kk);
            if (v105 < 0)
            {
              v180[0] = -52;
              v180[1] = v105;
            }
            else
            {
              v180[0] = *(_BYTE *)(v101 + kk);
            }
            std::ostream::write();
          }
        }
      }
    }
    if (*(_BYTE *)(ii + 544))
    {
      if (*(_BYTE *)(v97 + 40))
      {
        *(_QWORD *)v180 = v97 + 16;
        sub_20E9F3164((uint64_t **)v180, 1);
      }
      else
      {
        v180[0] = 1;
        std::ostream::write();
      }
      if (*(_BYTE *)(v97 + 40))
      {
        v106 = 0;
        v107 = *(_QWORD *)(v97 + 16);
        do
        {
          v110 = *(_DWORD *)(ii + 32 + 4 * v106);
          v111 = *(_QWORD *)(v97 + 32);
          if ((unint64_t)(v111 - v107) >= 5)
          {
            v108 = *(char **)(v97 + 24);
          }
          else
          {
            if (v111)
              v112 = 2 * v111;
            else
              v112 = 0x2000;
            v113 = v107 + 5;
            while (v112 < v113)
            {
              v114 = (uint64_t)v112 <= 0;
              v112 *= 2;
              if (v114)
              {
                v112 = v113;
                break;
              }
            }
            v108 = (char *)malloc_type_realloc(*(void **)(v97 + 24), v112, 0xAD6A59EEuLL);
            if (!v108)
            {
              v142 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v143 = std::bad_alloc::bad_alloc(v142);
              __cxa_throw(v143, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v97 + 24) = v108;
            *(_QWORD *)(v97 + 32) = v112;
            v107 = *(_QWORD *)(v97 + 16);
          }
          v109 = &v108[v107];
          *v109 = -54;
          *(_DWORD *)(v109 + 1) = bswap32(v110);
          v107 = *(_QWORD *)(v97 + 16) + 5;
          *(_QWORD *)(v97 + 16) = v107;
          ++v106;
        }
        while (v106 != 128);
      }
      else
      {
        for (mm = 32; mm != 544; mm += 4)
        {
          v116 = *(_DWORD *)(ii + mm);
          v180[0] = -54;
          *(_DWORD *)&v180[1] = bswap32(v116);
          std::ostream::write();
        }
      }
    }
    else if (*(_BYTE *)(v97 + 40))
    {
      *(_QWORD *)v180 = v97 + 16;
      sub_20E9F3164((uint64_t **)v180, 0);
    }
    else
    {
      v180[0] = 0;
      std::ostream::write();
    }
  }
  if (*(_BYTE *)(v97 + 40))
  {
    *(_QWORD *)v180 = v97 + 16;
    sub_20E9F3D4C((uint64_t **)v180, v162);
    v165 = &off_24C9B7040;
    v167 = &unk_24C9B7190;
    v168 = 0;
LABEL_191:
    v117 = *(void **)(v97 + 80);
    if (v117)
    {
      *(_QWORD *)(v97 + 88) = v117;
      operator delete(v117);
    }
    if (*(_BYTE *)(v97 + 72))
      free(*(void **)(v97 + 56));
    if (*(_BYTE *)(v97 + 40))
      free(*(void **)(v97 + 24));
    MEMORY[0x212BC6398](v97, 0x1030C408C1A3048);
    goto LABEL_198;
  }
  sub_20E9F3FC0((uint64_t)v180, v97 + 8);
  v97 = v168;
  v165 = &off_24C9B7040;
  v167 = &unk_24C9B7190;
  v168 = 0;
  if (v97)
    goto LABEL_191;
LABEL_198:
  v118 = v160;
  if (v160)
  {
    v119 = (unint64_t *)&v160->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v163)
  {
    v121 = v161.__pn_.__r_.__value_.__r.__words[0];
    if (v161.__pn_.__r_.__value_.__r.__words[0])
    {
      v122 = (void *)v161.__pn_.__r_.__value_.__r.__words[0];
      if (v161.__pn_.__r_.__value_.__l.__size_ != v161.__pn_.__r_.__value_.__r.__words[0])
      {
        v123 = v161.__pn_.__r_.__value_.__l.__size_ - 544;
        do
        {
          v125 = *(void **)v123;
          if (*(_QWORD *)v123)
          {
            *(_QWORD *)(v123 + 8) = v125;
            operator delete(v125);
          }
          v124 = v123 - 8;
          v123 -= 552;
        }
        while (v124 != v121);
        v122 = (void *)v161.__pn_.__r_.__value_.__r.__words[0];
      }
      v161.__pn_.__r_.__value_.__l.__size_ = v121;
      operator delete(v122);
    }
  }
LABEL_237:
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
}

#error "20ED40320: call analysis failed (funcsize=171)"

char **sub_20ED404A8(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (void *)*((_QWORD *)v3 - 68);
          if (v5)
          {
            *((_QWORD *)v3 - 67) = v5;
            operator delete(v5);
          }
          v6 = (void *)*((_QWORD *)v3 - 71);
          if (v6)
          {
            *((_QWORD *)v3 - 70) = v6;
            operator delete(v6);
          }
          v7 = (void *)*((_QWORD *)v3 - 74);
          if (v7)
          {
            *((_QWORD *)v3 - 73) = v7;
            operator delete(v7);
          }
          v3 -= 632;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20ED40558(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F208);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F208))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F200);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F208);
  }
  *a1 = qword_254A5F200;
}

void sub_20ED405F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F208);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F208);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED4064C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void **)(a1 + 8);
      v4 = *(void **)a1;
      if (v3 != v2)
      {
        v5 = (uint64_t)v3 - 544;
        do
        {
          v7 = *(void **)v5;
          if (*(_QWORD *)v5)
          {
            *(_QWORD *)(v5 + 8) = v7;
            operator delete(v7);
          }
          v6 = (void *)(v5 - 8);
          v5 -= 552;
        }
        while (v6 != v2);
        v4 = *(void **)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20ED406CC(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 6)
  {
    if (a2)
    {
      v12 = a2 << 6;
      bzero(a1[1], a2 << 6);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 6;
    v8 = v7 + a2;
    if ((v7 + a2) >> 58)
      sub_20ED343A8();
    v9 = v4 - v6;
    if (v9 >> 5 > v8)
      v8 = v9 >> 5;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v10 = 0x3FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 58)
        sub_20E877A38();
      v11 = (char *)operator new(v10 << 6);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[64 * v7];
    v14 = a2 << 6;
    v15 = &v11[64 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 4);
        v18 = *((_OWORD *)v5 - 3);
        v19 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v19;
        *((_OWORD *)v13 - 4) = v17;
        *((_OWORD *)v13 - 3) = v18;
        v13 -= 64;
        v5 -= 64;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void ***sub_20ED407F8(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 68);
          if (v6)
          {
            *((_QWORD *)v4 - 67) = v6;
            operator delete(v6);
          }
          v7 = (void *)*((_QWORD *)v4 - 71);
          if (v7)
          {
            *((_QWORD *)v4 - 70) = v7;
            operator delete(v7);
          }
          v8 = (void *)*((_QWORD *)v4 - 74);
          if (v8)
          {
            *((_QWORD *)v4 - 73) = v8;
            operator delete(v8);
          }
          v4 -= 632;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20ED408C4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20ED40E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20ED40E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED40E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20ED40EC8(uint64_t **a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  v4 = (std::mutex *)(a1 + 4);
  std::mutex::lock((std::mutex *)(a1 + 4));
  if (a1[2] >= a1[3] && sub_20ED410E4(a2, (uint64_t)(*a1 + 4)))
    goto LABEL_12;
  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v7 = a1 + 1;
    goto LABEL_13;
  }
  while (1)
  {
    while (1)
    {
      v7 = (uint64_t **)v5;
      v8 = (uint64_t)(v5 + 4);
      if (!sub_20ED410E4(a2, (uint64_t)(v5 + 4)))
        break;
      v5 = *v7;
      v6 = v7;
      if (!*v7)
        goto LABEL_13;
    }
    if (!sub_20ED410E4(v8, a2))
      break;
    v6 = v7 + 1;
    v5 = v7[1];
    if (!v5)
      goto LABEL_13;
  }
  if (!*v6)
  {
LABEL_13:
    v10 = (uint64_t *)operator new(0x38uLL);
    v11 = v10;
    *((_OWORD *)v10 + 2) = *(_OWORD *)a2;
    v12 = *(_QWORD *)(a2 + 16);
    v10[6] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v7;
    *v6 = v10;
    v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      v11 = *v6;
    }
    sub_20E868578(a1[1], v11);
    v16 = (unint64_t)a1[3];
    v9 = (unint64_t)a1[2] + 1;
    a1[2] = (uint64_t *)v9;
    if (v9 > v16)
      goto LABEL_19;
LABEL_12:
    std::mutex::unlock(v4);
    return;
  }
  v9 = (unint64_t)a1[2];
  if (v9 <= (unint64_t)a1[3])
    goto LABEL_12;
LABEL_19:
  v17 = *a1;
  v18 = (uint64_t *)(*a1)[1];
  if (v18)
  {
    do
    {
      v19 = v18;
      v18 = (uint64_t *)*v18;
    }
    while (v18);
  }
  else
  {
    v20 = *a1;
    do
    {
      v19 = (uint64_t *)v20[2];
      v21 = *v19 == (_QWORD)v20;
      v20 = v19;
    }
    while (!v21);
  }
  *a1 = v19;
  a1[2] = (uint64_t *)(v9 - 1);
  sub_20E8D2134(a1[1], v17);
  v22 = (std::__shared_weak_count *)v17[6];
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(v17);
  std::mutex::unlock(v4);
}

void sub_20ED410A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED410BC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED410D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20ED410E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = *(_QWORD **)(a1 + 8);
  if ((!v4 || *v4 == v4[1])
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/include/VIO/MLFeatureDetectionNodeGroup/Types.h", 47, (uint64_t)"(lhs.metadata && !lhs.metadata->frames_info.empty())", 52, (uint64_t)"MLFeatureEvent incomplete in Metadata in MLPriorityQueue", 56, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_11;
  }
  v5 = *(uint64_t **)(a2 + 8);
  if (!v5 || (v6 = *v5, *v5 == v5[1]))
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/include/VIO/MLFeatureDetectionNodeGroup/Types.h", 49, (uint64_t)"(rhs.metadata && !rhs.metadata->frames_info.empty())", 52, (uint64_t)"MLFeatureEvent incomplete in Metadata in MLPriorityQueue", 56, (void (*)(void **))sub_21023DDB0))
    {
      v6 = **(_QWORD **)(a2 + 8);
      v7 = **(_QWORD **)(a1 + 8);
      v8 = *(unsigned __int8 *)(v7 + 36);
      if (v8 == *(unsigned __int8 *)(v6 + 36))
        return *(double *)(v7 + 24) < *(double *)(v6 + 24);
      return v8 != 0;
    }
LABEL_11:
    abort();
  }
  v7 = **(_QWORD **)(a1 + 8);
  v8 = *(unsigned __int8 *)(v7 + 36);
  if (v8 == *(unsigned __int8 *)(v6 + 36))
    return *(double *)(v7 + 24) < *(double *)(v6 + 24);
  return v8 != 0;
}

void sub_20ED411F4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v4 = (std::mutex *)(a2 + 32);
  std::mutex::lock((std::mutex *)(a2 + 32));
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_29;
  v6 = (uint64_t *)(a2 + 8);
  v5 = *(uint64_t **)(a2 + 8);
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 8);
    do
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
  }
  else
  {
    v9 = a2 + 8;
    do
    {
      v8 = *(_QWORD *)(v9 + 16);
      v10 = *(_QWORD *)v8 == v9;
      v9 = v8;
    }
    while (v10);
  }
  *(_OWORD *)a1 = *(_OWORD *)(v8 + 32);
  v11 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(a1 + 16) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v5 = (uint64_t *)*v6;
  }
  *(_BYTE *)(a1 + 24) = 1;
  if (v5)
  {
    v14 = v5;
    do
    {
      v6 = v14;
      v14 = (uint64_t *)v14[1];
    }
    while (v14);
  }
  else
  {
    do
    {
      v17 = v6;
      v6 = (uint64_t *)v6[2];
    }
    while ((uint64_t *)*v6 == v17);
    v18 = (uint64_t *)v6[1];
    if (v18)
    {
      do
      {
        v15 = v18;
        v18 = (uint64_t *)*v18;
      }
      while (v18);
      goto LABEL_21;
    }
  }
  v15 = v6;
  do
  {
    v16 = v15;
    v15 = (uint64_t *)v15[2];
  }
  while ((uint64_t *)*v15 != v16);
LABEL_21:
  if (*(uint64_t **)a2 == v6)
    *(_QWORD *)a2 = v15;
  --*(_QWORD *)(a2 + 16);
  sub_20E8D2134(v5, v6);
  v19 = (std::__shared_weak_count *)v6[6];
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  operator delete(v6);
LABEL_29:
  std::mutex::unlock(v4);
}

uint64_t sub_20ED41364(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_20ED413D4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9E2578;
  *(_QWORD *)(a1 + 56) = &unk_24C9E25B0;
  *(_QWORD *)(a1 + 112) = &unk_24C9E25D8;
  std::mutex::~mutex((std::mutex *)(a1 + 280));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 256));
  v2 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 224))();
  return sub_20ED3E46C(a1);
}

void sub_20ED41438(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9E2578;
  *(_QWORD *)(a1 + 56) = &unk_24C9E25B0;
  *(_QWORD *)(a1 + 112) = &unk_24C9E25D8;
  std::mutex::~mutex((std::mutex *)(a1 + 280));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 256));
  v2 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 224))();
  sub_20ED3E46C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED414B0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  float v6;
  float v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  char v17;

  v5 = *(_QWORD *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 348))
  {
    if (v5)
    {
      sub_20ED57648((uint64_t *)(a1 + 216), v5, (uint64_t)&v15);
      v12 = (char *)operator new(0x30uLL);
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
      *(_QWORD *)v12 = &off_24C9E2528;
      *(_OWORD *)(v12 + 24) = v15;
      *((_QWORD *)v12 + 5) = v16;
      *a3 = v12 + 24;
      a3[1] = v12;
      return;
    }
    goto LABEL_13;
  }
  v6 = *(float *)(a1 + 344) + 1.0;
  *(float *)(a1 + 344) = v6;
  if (v5)
  {
    sub_20ED40EC8((uint64_t **)(a1 + 248), a2);
    v6 = *(float *)(a1 + 344);
  }
  v7 = *(float *)(a1 + 352) / *(float *)(a1 + 356);
  if (v6 < v7 || (*(float *)(a1 + 344) = v6 - v7, sub_20ED411F4((uint64_t)&v15, a1 + 248), !v17))
  {
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  sub_20ED57648((uint64_t *)(a1 + 216), *((uint64_t *)&v15 + 1), (uint64_t)&v13);
  v8 = (char *)operator new(0x30uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_OWORD *)(v8 + 24) = v13;
  *(_QWORD *)v8 = &off_24C9E2528;
  *((_QWORD *)v8 + 5) = v14;
  *a3 = v8 + 24;
  a3[1] = v8;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20ED41624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20ED33F50(&a9);
  sub_20ED41364((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20ED41640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20ED41364((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED41654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20ED33F50((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED41668(uint64_t a1)
{
  return *(_QWORD *)(a1 + 232);
}

void sub_20ED41678(std::__shared_weak_count_vtbl **a1@<X8>)
{
  sub_20ED3BD54(a1);
}

uint64_t sub_20ED41684(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 56) = &off_24C9E2578;
  v2 = a1 - 56;
  *(_QWORD *)a1 = &unk_24C9E25B0;
  *(_QWORD *)(a1 + 56) = &unk_24C9E25D8;
  std::mutex::~mutex((std::mutex *)(a1 + 224));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 200));
  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 168))();
  return sub_20ED3E46C(v2);
}

void sub_20ED416EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 56) = &off_24C9E2578;
  v2 = a1 - 56;
  *(_QWORD *)a1 = &unk_24C9E25B0;
  *(_QWORD *)(a1 + 56) = &unk_24C9E25D8;
  std::mutex::~mutex((std::mutex *)(a1 + 224));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 200));
  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 168))();
  sub_20ED3E46C(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED41768(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176);
}

uint64_t sub_20ED41778(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 112) = &off_24C9E2578;
  v2 = a1 - 112;
  *(_QWORD *)(a1 - 56) = &unk_24C9E25B0;
  *(_QWORD *)a1 = &unk_24C9E25D8;
  std::mutex::~mutex((std::mutex *)(a1 + 168));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 144));
  v3 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 112))();
  return sub_20ED3E46C(v2);
}

void sub_20ED417DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 112) = &off_24C9E2578;
  v2 = a1 - 112;
  *(_QWORD *)(a1 - 56) = &unk_24C9E25B0;
  *(_QWORD *)a1 = &unk_24C9E25D8;
  std::mutex::~mutex((std::mutex *)(a1 + 168));
  sub_20ED3EBE8(*(_QWORD **)(a1 + 144));
  v3 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 112))();
  sub_20ED3E46C(v2);
  JUMPOUT(0x212BC6398);
}

void sub_20ED41854(std::__shared_weak_count_vtbl **a1@<X8>)
{
  sub_20ED3BD54(a1);
}

void sub_20ED41864(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED41888(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED418A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3vio31ml_feature_detection_node_group31MLDescriptorExtractorNodeWorke"
                     "rINS3_14CacheDecoratorINS2_17feature_detection17VIOMLFeatureEventENS_6vectorINS6_22MLPointDescripto"
                     "rStoreENS_9allocatorIS9_EEEENS3_21FrameDescriptorsCacheEEEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3vio31ml_feature_detection_node_group31MLDescriptorExtract"
                                "orNodeWorkerINS3_14CacheDecoratorINS2_17feature_detection17VIOMLFeatureEventENS_6vectorI"
                                "NS6_22MLPointDescriptorStoreENS_9allocatorIS9_EEEENS3_21FrameDescriptorsCacheEEEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3vio31ml_feature_detection_node_group31MLDescriptorExtractorNodeWorkerINS3_14CacheDecoratorINS2_17feature_detection17VIOMLFeatureEventENS_6vectorINS6_22MLPointDescriptorStoreENS_9allocatorIS9_EEEENS3_21FrameDescriptorsCacheEEEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3vio31ml_feature_detection_node_group31MLDescriptorExtractorNodeWorkerINS3_14CacheDecoratorINS2_17feature_detection17VIOMLFeatureEventENS_6vectorINS6_22MLPointDescriptorStoreENS_9allocatorIS9_EEEENS3_21FrameDescriptorsCacheEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED41910(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  char v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t v36;
  unint64_t *p_shared_weak_owners;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  void *v50;
  void *v51;
  char *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  void *v85;
  char v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  std::__shared_weak_count *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  __int128 v109;
  uint64_t v110;
  void *v111;
  char *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  __int128 v141;
  unint64_t *v142;
  unint64_t v143;
  void *v144;
  void *v145;
  char v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  _QWORD *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  std::__shared_weak_count *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  __int128 v169;
  __int128 v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v230;
  __int128 v231;
  std::__shared_weak_count *v232;
  void *__p[3];
  uint64_t v234;
  __int128 v235;
  void *v236;
  __int128 v237;
  __int128 v238;
  uint64_t (**v239)();
  __int128 v240;
  uint64_t v241;
  uint64_t (**v242)();
  __int128 v243;
  uint64_t (**v244)();
  __int128 v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  __int128 v248;
  void *v249[3];
  void *v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  uint64_t (**v255)();
  __int128 v256;
  uint64_t v257;
  uint64_t (**v258)();
  __int128 v259;
  uint64_t (**v260)();
  __int128 v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  void *v264;
  std::__shared_weak_count *v265;
  uint64_t (**v266)();
  __int128 v267;
  void *v268;
  __int128 v269;
  void *v270;
  __int128 v271;
  __int128 v272;
  uint64_t (**v273)();
  __int128 v274;
  uint64_t v275;
  uint64_t (**v276)();
  __int128 v277;
  uint64_t (**v278)();
  __int128 v279;
  void *v280[2];
  void *v281;
  void *v282[4];
  void *__src[4];
  _OWORD __dst[2];
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  _QWORD v289[2];
  _QWORD v290[2];
  _QWORD v291[5];

  v291[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C9E2668;
  v6 = *a3;
  if (*(char *)(*a3 + 191) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)(v6 + 168), *(_QWORD *)(v6 + 176));
    v8 = a1 + 32;
    v9 = *a3;
    v230 = a1;
    if ((*(char *)(*a3 + 215) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 168);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 + 184);
    *(_OWORD *)(a1 + 8) = v7;
    v8 = a1 + 32;
    v9 = *a3;
    v230 = a1;
    if ((*(char *)(*a3 + 215) & 0x80000000) == 0)
    {
LABEL_3:
      v10 = *(_OWORD *)(v9 + 192);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 208);
      *(_OWORD *)v8 = v10;
      goto LABEL_6;
    }
  }
  sub_20E860C04((_BYTE *)v8, *(void **)(v9 + 192), *(_QWORD *)(v9 + 200));
LABEL_6:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *(void **)(a1 + 56);
  v11 = *(unint64_t **)(a1 + 64);
  *(_QWORD *)&v231 = v12;
  *((_QWORD *)&v231 + 1) = v11;
  if (v11)
  {
    v13 = v11 + 1;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v264 = v12;
    v265 = (std::__shared_weak_count *)v11;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    v16 = *a3;
    v17 = (std::__shared_weak_count *)a3[1];
    v262 = *a3;
    v263 = v17;
    if (!v17)
      goto LABEL_16;
    goto LABEL_14;
  }
  v264 = *(void **)(a1 + 56);
  v265 = 0;
  v16 = *a3;
  v17 = (std::__shared_weak_count *)a3[1];
  v262 = *a3;
  v263 = v17;
  if (v17)
  {
LABEL_14:
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
LABEL_16:
  if (*(char *)(v16 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v16 + 8), *(_QWORD *)(v16 + 16));
  }
  else
  {
    v20 = *(_OWORD *)(v16 + 8);
    *(_QWORD *)&__dst[1] = *(_QWORD *)(v16 + 24);
    __dst[0] = v20;
  }
  if (*(char *)(v16 + 55) < 0)
  {
    sub_20E860C04(__src, *(void **)(v16 + 32), *(_QWORD *)(v16 + 40));
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)(v16 + 32);
    __src[2] = *(void **)(v16 + 48);
  }
  *(_QWORD *)&v286 = v12;
  *((_QWORD *)&v286 + 1) = v11;
  v264 = 0;
  v265 = 0;
  *(_QWORD *)&v285 = v16;
  *((_QWORD *)&v285 + 1) = v17;
  if (v17)
  {
    v21 = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (SBYTE7(__dst[1]) < 0)
  {
    sub_20E860C04(v249, *(void **)&__dst[0], *((unint64_t *)&__dst[0] + 1));
  }
  else
  {
    *(_OWORD *)v249 = __dst[0];
    v249[2] = *(void **)&__dst[1];
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(__p, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__src;
    __p[2] = __src[2];
  }
  *(_QWORD *)((char *)v291 + 7) = *(_QWORD *)((char *)__dst + 15);
  v23 = __dst[0];
  HIBYTE(v291[0]) = HIBYTE(__dst[0]);
  v24 = BYTE7(__dst[1]);
  memset(__dst, 0, 24);
  *(_QWORD *)&v287 = *((_QWORD *)&v23 + 1);
  *(_QWORD *)((char *)&v287 + 7) = *(_QWORD *)((char *)v291 + 7);
  *(_QWORD *)((char *)v291 + 7) = 0;
  v291[0] = 0;
  v280[0] = v12;
  v280[1] = v11;
  if (v11)
  {
    v25 = v11 + 1;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (char *)operator new();
  *(_QWORD *)&v288 = v287;
  *(_QWORD *)((char *)&v288 + 7) = *(_QWORD *)((char *)&v287 + 7);
  *(_QWORD *)&v287 = 0;
  *(_QWORD *)((char *)&v287 + 7) = 0;
  v28 = *(_OWORD *)v280;
  v280[0] = 0;
  v280[1] = 0;
  v27[8] = 1;
  *((_QWORD *)v27 + 4) = 0;
  *((_QWORD *)v27 + 5) = 0;
  *(_QWORD *)v27 = &off_24C9E2840;
  *((_QWORD *)v27 + 2) = &unk_24C9E28B8;
  *((_QWORD *)v27 + 3) = &unk_24C9E28F8;
  v29 = v288;
  *(_QWORD *)(v27 + 63) = *(_QWORD *)((char *)&v288 + 7);
  *((_QWORD *)v27 + 6) = v23;
  *((_QWORD *)v27 + 7) = v29;
  v27[71] = v24;
  *(_QWORD *)&v288 = 0;
  *(_QWORD *)((char *)&v288 + 7) = 0;
  *(_OWORD *)(v27 + 72) = v28;
  v282[1] = 0;
  v282[0] = 0;
  v30 = (_QWORD *)operator new();
  *v30 = &off_24C9E29F0;
  v30[1] = v16;
  v30[2] = v17;
  v285 = 0uLL;
  *((_QWORD *)v27 + 11) = v30;
  *((_QWORD *)v27 + 12) = v27 + 96;
  *((_QWORD *)v27 + 13) = v27 + 96;
  *((_QWORD *)v27 + 14) = 0;
  *((_QWORD *)v27 + 15) = v27 + 120;
  *((_QWORD *)v27 + 16) = v27 + 120;
  *((_QWORD *)v27 + 17) = 0;
  v31 = operator new();
  v32 = operator new(0x10uLL);
  *v32 = 0;
  v32[1] = 0;
  *(_QWORD *)v31 = v32;
  *(_QWORD *)(v31 + 8) = v32 + 2;
  *(_QWORD *)(v31 + 16) = v32 + 2;
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 40) = 0;
  *(_BYTE *)(v31 + 48) = 1;
  *(_QWORD *)(v31 + 56) = 850045863;
  *(_OWORD *)(v31 + 64) = 0u;
  *(_OWORD *)(v31 + 80) = 0u;
  *(_OWORD *)(v31 + 96) = 0u;
  *(_QWORD *)(v31 + 112) = 0;
  *((_QWORD *)v27 + 18) = v31;
  if (!*((_QWORD *)v27 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v33 = (std::__shared_weak_count *)operator new();
  v33->__shared_owners_ = 0;
  v34 = (unint64_t *)&v33->__shared_owners_;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2EE0;
  v33->__shared_weak_owners_ = 0;
  v33[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
  v35 = (std::__shared_weak_count *)*((_QWORD *)v27 + 5);
  if (v35)
  {
    if (v35->__shared_owners_ != -1)
      goto LABEL_49;
    do
      v36 = __ldxr(v34);
    while (__stxr(v36 + 1, v34));
    p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
    do
      v38 = __ldxr(p_shared_weak_owners);
    while (__stxr(v38 + 1, p_shared_weak_owners));
    *((_QWORD *)v27 + 4) = v27;
    *((_QWORD *)v27 + 5) = v33;
    std::__shared_weak_count::__release_weak(v35);
  }
  else
  {
    do
      v39 = __ldxr(v34);
    while (__stxr(v39 + 1, v34));
    v40 = (unint64_t *)&v33->__shared_weak_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    *((_QWORD *)v27 + 4) = v27;
    *((_QWORD *)v27 + 5) = v33;
  }
  do
    v42 = __ldaxr(v34);
  while (__stlxr(v42 - 1, v34));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_49:
  v43 = (std::__shared_weak_count *)v282[1];
  if (v282[1])
  {
    v44 = (unint64_t *)((char *)v282[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v282[0] = v27;
  v282[1] = v33;
  v46 = (std::__shared_weak_count *)v280[1];
  if (v280[1])
  {
    v47 = (unint64_t *)((char *)v280[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v286;
  v286 = 0uLL;
  v267 = *(_OWORD *)v249;
  v266 = &off_24C9E2698;
  v268 = v249[2];
  memset(v249, 0, sizeof(v249));
  v269 = *(_OWORD *)__p;
  v50 = __p[2];
  memset(__p, 0, sizeof(__p));
  v271 = v49;
  v280[1] = 0;
  v280[0] = 0;
  v51 = v282[0];
  v52 = (char *)v282[1];
  v270 = v50;
  v272 = *(_OWORD *)v282;
  v282[0] = 0;
  v282[1] = 0;
  if (*((_QWORD *)&v272 + 1))
  {
    v53 = (unint64_t *)(v52 + 16);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v273 = &off_24C9CC290;
  v55 = (_QWORD *)operator new();
  *v55 = &off_24C9E2F30;
  v55[1] = v51;
  v55[2] = v52;
  *(_QWORD *)&v274 = v55;
  v57 = *((_QWORD *)&v272 + 1);
  v56 = v272;
  if (!*((_QWORD *)&v272 + 1))
  {
    *((_QWORD *)&v274 + 1) = v272;
    v275 = 0;
    if ((_QWORD)v272)
      v61 = v272 + 16;
    else
      v61 = 0;
    goto LABEL_79;
  }
  v58 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 16);
  do
    v59 = __ldxr(v58);
  while (__stxr(v59 + 1, v58));
  v60 = *((_QWORD *)&v272 + 1);
  *((_QWORD *)&v274 + 1) = v56;
  v275 = v57;
  if ((_QWORD)v272)
    v61 = v272 + 16;
  else
    v61 = 0;
  if (!*((_QWORD *)&v272 + 1))
  {
    v56 = v272;
LABEL_79:
    v64 = 0;
    v276 = &off_24C9E26C8;
    v277 = v61;
    goto LABEL_80;
  }
  v62 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 16);
  do
    v63 = __ldxr(v62);
  while (__stxr(v63 + 1, v62));
  v64 = *((_QWORD *)&v272 + 1);
  v56 = v272;
  v276 = &off_24C9E26C8;
  *(_QWORD *)&v277 = v61;
  *((_QWORD *)&v277 + 1) = v60;
  if (*((_QWORD *)&v272 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 16);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
LABEL_80:
  if (v56)
    v67 = v56 + 24;
  else
    v67 = 0;
  v278 = &off_24C9B2310;
  *(_QWORD *)&v279 = v67;
  *((_QWORD *)&v279 + 1) = v64;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v249[2]) & 0x80000000) == 0)
      goto LABEL_85;
LABEL_88:
    operator delete(v249[0]);
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
    if (!*((_QWORD *)&v285 + 1))
      goto LABEL_93;
    goto LABEL_89;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v249[2]) < 0)
    goto LABEL_88;
LABEL_85:
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
  if (!*((_QWORD *)&v285 + 1))
    goto LABEL_93;
LABEL_89:
  v69 = (unint64_t *)&v68->__shared_owners_;
  do
    v70 = __ldaxr(v69);
  while (__stlxr(v70 - 1, v69));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
LABEL_93:
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
  if (!*((_QWORD *)&v286 + 1))
    goto LABEL_97;
  v72 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
    {
LABEL_98:
      if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        goto LABEL_99;
LABEL_103:
      operator delete(*(void **)&__dst[0]);
      if (v262)
        goto LABEL_105;
      goto LABEL_104;
    }
  }
  else
  {
LABEL_97:
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_98;
  }
  operator delete(__src[0]);
  if (SBYTE7(__dst[1]) < 0)
    goto LABEL_103;
LABEL_99:
  if (v262)
    goto LABEL_105;
LABEL_104:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_105:
  v248 = v231;
  if (*((_QWORD *)&v231 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  v77 = *a3;
  v76 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v78 = *a3 + 56;
  else
    v78 = 0;
  v246 = v78;
  v247 = v76;
  if (v76)
  {
    v79 = (unint64_t *)&v76->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  if (*(char *)(v78 + 31) < 0)
  {
    sub_20E860C04(__src, *(void **)(v78 + 8), *(_QWORD *)(v78 + 16));
  }
  else
  {
    v81 = *(_OWORD *)(v78 + 8);
    __src[2] = *(void **)(v78 + 24);
    *(_OWORD *)__src = v81;
  }
  if (*(char *)(v77 + 111) < 0)
  {
    sub_20E860C04(v282, *(void **)(v77 + 88), *(_QWORD *)(v77 + 96));
  }
  else
  {
    *(_OWORD *)v282 = *(_OWORD *)(v77 + 88);
    v282[2] = *(void **)(v77 + 104);
  }
  v285 = v231;
  v248 = 0uLL;
  *(_QWORD *)&v288 = v78;
  *((_QWORD *)&v288 + 1) = v76;
  if (v76)
  {
    v82 = (unint64_t *)&v76->__shared_owners_;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(__p, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__src;
    __p[2] = __src[2];
  }
  if (SHIBYTE(v282[2]) < 0)
  {
    sub_20E860C04(__dst, v282[0], (unint64_t)v282[1]);
  }
  else
  {
    __dst[0] = *(_OWORD *)v282;
    *(void **)&__dst[1] = v282[2];
  }
  *(void **)((char *)v290 + 7) = *(void **)((char *)&__src[1] + 7);
  v84 = __src[0];
  v85 = __src[1];
  HIBYTE(v290[0]) = HIBYTE(__src[1]);
  v86 = HIBYTE(__src[2]);
  memset(__src, 0, 24);
  v291[0] = v85;
  *(_QWORD *)((char *)v291 + 7) = *(_QWORD *)((char *)v290 + 7);
  *(_QWORD *)((char *)v290 + 7) = 0;
  v290[0] = 0;
  v286 = v231;
  if (*((_QWORD *)&v231 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v89 = (char *)operator new();
  *(_QWORD *)&v287 = v291[0];
  *(_QWORD *)((char *)&v287 + 7) = *(_QWORD *)((char *)v291 + 7);
  v291[0] = 0;
  *(_QWORD *)((char *)v291 + 7) = 0;
  v90 = v286;
  v286 = 0uLL;
  v89[8] = 1;
  *((_QWORD *)v89 + 4) = 0;
  *((_QWORD *)v89 + 5) = 0;
  *(_QWORD *)v89 = &off_24C9E2FA8;
  *((_QWORD *)v89 + 2) = &unk_24C9E3020;
  *((_QWORD *)v89 + 3) = &unk_24C9E3060;
  v91 = v287;
  *(_QWORD *)(v89 + 63) = *(_QWORD *)((char *)&v287 + 7);
  *((_QWORD *)v89 + 6) = v84;
  *((_QWORD *)v89 + 7) = v91;
  v89[71] = v86;
  *(_QWORD *)&v287 = 0;
  *(_QWORD *)((char *)&v287 + 7) = 0;
  *(_OWORD *)(v89 + 72) = v90;
  v280[1] = 0;
  v280[0] = 0;
  v92 = (_QWORD *)operator new();
  *v92 = &off_24C9E3158;
  v92[1] = v78;
  v92[2] = v76;
  v288 = 0uLL;
  *((_QWORD *)v89 + 18) = 0;
  *((_QWORD *)v89 + 11) = v92;
  *((_QWORD *)v89 + 12) = v89 + 96;
  *((_QWORD *)v89 + 13) = v89 + 96;
  *((_QWORD *)v89 + 14) = 0;
  *((_QWORD *)v89 + 15) = v89 + 120;
  *((_QWORD *)v89 + 16) = v89 + 120;
  *((_QWORD *)v89 + 17) = 0;
  if (!*((_QWORD *)v89 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v93 = (std::__shared_weak_count *)operator new();
  v93->__shared_owners_ = 0;
  v94 = (unint64_t *)&v93->__shared_owners_;
  v93->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E3648;
  v93->__shared_weak_owners_ = 0;
  v93[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  v95 = (std::__shared_weak_count *)*((_QWORD *)v89 + 5);
  if (v95)
  {
    if (v95->__shared_owners_ != -1)
      goto LABEL_147;
    do
      v96 = __ldxr(v94);
    while (__stxr(v96 + 1, v94));
    v97 = (unint64_t *)&v93->__shared_weak_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
    *((_QWORD *)v89 + 4) = v89;
    *((_QWORD *)v89 + 5) = v93;
    std::__shared_weak_count::__release_weak(v95);
  }
  else
  {
    do
      v99 = __ldxr(v94);
    while (__stxr(v99 + 1, v94));
    v100 = (unint64_t *)&v93->__shared_weak_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
    *((_QWORD *)v89 + 4) = v89;
    *((_QWORD *)v89 + 5) = v93;
  }
  do
    v102 = __ldaxr(v94);
  while (__stlxr(v102 - 1, v94));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
  }
LABEL_147:
  v103 = (std::__shared_weak_count *)v280[1];
  if (v280[1])
  {
    v104 = (unint64_t *)((char *)v280[1] + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v280[0] = v89;
  v280[1] = v93;
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
  if (*((_QWORD *)&v286 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v285;
  v285 = 0uLL;
  *(_OWORD *)&v249[1] = *(_OWORD *)__p;
  v249[0] = &off_24C9E2700;
  v250 = __p[2];
  memset(__p, 0, sizeof(__p));
  v251 = __dst[0];
  v110 = *(_QWORD *)&__dst[1];
  memset(__dst, 0, 24);
  v253 = v109;
  v286 = 0uLL;
  v111 = v280[0];
  v112 = (char *)v280[1];
  v252 = v110;
  v254 = *(_OWORD *)v280;
  v280[0] = 0;
  v280[1] = 0;
  if (*((_QWORD *)&v254 + 1))
  {
    v113 = (unint64_t *)(v112 + 16);
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  v255 = &off_24C9B2C18;
  v115 = (_QWORD *)operator new();
  *v115 = &off_24C9E3698;
  v115[1] = v111;
  v115[2] = v112;
  *(_QWORD *)&v256 = v115;
  v117 = *((_QWORD *)&v254 + 1);
  v116 = v254;
  if (!*((_QWORD *)&v254 + 1))
  {
    *((_QWORD *)&v256 + 1) = v254;
    v257 = 0;
    if ((_QWORD)v254)
      v121 = v254 + 16;
    else
      v121 = 0;
    goto LABEL_177;
  }
  v118 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 16);
  do
    v119 = __ldxr(v118);
  while (__stxr(v119 + 1, v118));
  v120 = *((_QWORD *)&v254 + 1);
  *((_QWORD *)&v256 + 1) = v116;
  v257 = v117;
  if ((_QWORD)v254)
    v121 = v254 + 16;
  else
    v121 = 0;
  if (!*((_QWORD *)&v254 + 1))
  {
    v116 = v254;
LABEL_177:
    v124 = 0;
    v258 = &off_24C9E2730;
    v259 = v121;
    goto LABEL_178;
  }
  v122 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 16);
  do
    v123 = __ldxr(v122);
  while (__stxr(v123 + 1, v122));
  v124 = *((_QWORD *)&v254 + 1);
  v116 = v254;
  v258 = &off_24C9E2730;
  *(_QWORD *)&v259 = v121;
  *((_QWORD *)&v259 + 1) = v120;
  if (*((_QWORD *)&v254 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 16);
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
LABEL_178:
  if (v116)
    v127 = v116 + 24;
  else
    v127 = 0;
  v260 = &off_24C9B2310;
  *(_QWORD *)&v261 = v127;
  *((_QWORD *)&v261 + 1) = v124;
  if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_183;
LABEL_186:
    operator delete(__p[0]);
    v128 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
    if (!*((_QWORD *)&v288 + 1))
      goto LABEL_191;
    goto LABEL_187;
  }
  operator delete(*(void **)&__dst[0]);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_186;
LABEL_183:
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
  if (!*((_QWORD *)&v288 + 1))
    goto LABEL_191;
LABEL_187:
  v129 = (unint64_t *)&v128->__shared_owners_;
  do
    v130 = __ldaxr(v129);
  while (__stlxr(v130 - 1, v129));
  if (!v130)
  {
    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
    std::__shared_weak_count::__release_weak(v128);
  }
LABEL_191:
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
  if (!*((_QWORD *)&v285 + 1))
    goto LABEL_195;
  v132 = (unint64_t *)(*((_QWORD *)&v285 + 1) + 8);
  do
    v133 = __ldaxr(v132);
  while (__stlxr(v133 - 1, v132));
  if (!v133)
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
    if ((SHIBYTE(v282[2]) & 0x80000000) == 0)
    {
LABEL_196:
      if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
        goto LABEL_197;
LABEL_201:
      operator delete(__src[0]);
      if (v246)
        goto LABEL_203;
      goto LABEL_202;
    }
  }
  else
  {
LABEL_195:
    if ((SHIBYTE(v282[2]) & 0x80000000) == 0)
      goto LABEL_196;
  }
  operator delete(v282[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_201;
LABEL_197:
  if (v246)
    goto LABEL_203;
LABEL_202:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_203:
  if (*((_QWORD *)&v231 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  v137 = *a3;
  v136 = a3[1];
  if (*a3)
    v138 = *a3 + 112;
  else
    v138 = 0;
  v232 = (std::__shared_weak_count *)a3[1];
  if (v136)
  {
    v139 = (unint64_t *)(v136 + 8);
    do
      v140 = __ldxr(v139);
    while (__stxr(v140 + 1, v139));
  }
  if (*(char *)(v138 + 31) < 0)
  {
    sub_20E860C04(v282, *(void **)(v138 + 8), *(_QWORD *)(v138 + 16));
  }
  else
  {
    v141 = *(_OWORD *)(v138 + 8);
    v282[2] = *(void **)(v138 + 24);
    *(_OWORD *)v282 = v141;
  }
  if (*(char *)(v137 + 167) < 0)
  {
    sub_20E860C04(v280, *(void **)(v137 + 144), *(_QWORD *)(v137 + 152));
  }
  else
  {
    *(_OWORD *)v280 = *(_OWORD *)(v137 + 144);
    v281 = *(void **)(v137 + 160);
  }
  v288 = v231;
  *(_QWORD *)&v287 = v138;
  *((_QWORD *)&v287 + 1) = v136;
  if (v136)
  {
    v142 = (unint64_t *)(v136 + 8);
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  if (SHIBYTE(v282[2]) < 0)
  {
    sub_20E860C04(__dst, v282[0], (unint64_t)v282[1]);
  }
  else
  {
    __dst[0] = *(_OWORD *)v282;
    *(void **)&__dst[1] = v282[2];
  }
  if (SHIBYTE(v281) < 0)
  {
    sub_20E860C04(__src, v280[0], (unint64_t)v280[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v280;
    __src[2] = v281;
  }
  *(void **)((char *)v289 + 7) = *(void **)((char *)&v282[1] + 7);
  v144 = v282[0];
  v145 = v282[1];
  HIBYTE(v289[0]) = HIBYTE(v282[1]);
  v146 = HIBYTE(v282[2]);
  memset(v282, 0, 24);
  v290[0] = v145;
  *(_QWORD *)((char *)v290 + 7) = *(_QWORD *)((char *)v289 + 7);
  *(_QWORD *)((char *)v289 + 7) = 0;
  v289[0] = 0;
  v285 = v231;
  if (*((_QWORD *)&v231 + 1))
  {
    v147 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
  }
  v149 = operator new();
  v291[0] = v290[0];
  *(_QWORD *)((char *)v291 + 7) = *(_QWORD *)((char *)v290 + 7);
  v290[0] = 0;
  *(_QWORD *)((char *)v290 + 7) = 0;
  v150 = v285;
  v285 = 0uLL;
  *(_BYTE *)(v149 + 8) = 1;
  *(_QWORD *)(v149 + 32) = 0;
  *(_QWORD *)(v149 + 40) = 0;
  *(_QWORD *)v149 = &off_24C9E3700;
  *(_QWORD *)(v149 + 16) = &unk_24C9E3778;
  *(_QWORD *)(v149 + 24) = &unk_24C9E37B8;
  v151 = v291[0];
  *(_QWORD *)(v149 + 63) = *(_QWORD *)((char *)v291 + 7);
  *(_QWORD *)(v149 + 48) = v144;
  *(_QWORD *)(v149 + 56) = v151;
  *(_BYTE *)(v149 + 71) = v146;
  v291[0] = 0;
  *(_QWORD *)((char *)v291 + 7) = 0;
  *(_OWORD *)(v149 + 72) = v150;
  v286 = 0uLL;
  v152 = (_QWORD *)operator new();
  *v152 = &off_24C9E38A0;
  v152[1] = v138;
  v152[2] = v136;
  v287 = 0uLL;
  *(_QWORD *)(v149 + 144) = 0;
  *(_QWORD *)(v149 + 88) = v152;
  *(_QWORD *)(v149 + 96) = v149 + 96;
  *(_QWORD *)(v149 + 104) = v149 + 96;
  *(_QWORD *)(v149 + 112) = 0;
  *(_QWORD *)(v149 + 120) = v149 + 120;
  *(_QWORD *)(v149 + 128) = v149 + 120;
  *(_QWORD *)(v149 + 136) = 0;
  if (!*(_QWORD *)(v149 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v153 = (std::__shared_weak_count *)operator new();
  v153->__shared_owners_ = 0;
  v154 = (unint64_t *)&v153->__shared_owners_;
  v153->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E3D40;
  v153->__shared_weak_owners_ = 0;
  v153[1].__vftable = (std::__shared_weak_count_vtbl *)v149;
  v155 = *(std::__shared_weak_count **)(v149 + 40);
  if (v155)
  {
    if (v155->__shared_owners_ != -1)
      goto LABEL_245;
    do
      v156 = __ldxr(v154);
    while (__stxr(v156 + 1, v154));
    v157 = (unint64_t *)&v153->__shared_weak_owners_;
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
    *(_QWORD *)(v149 + 32) = v149;
    *(_QWORD *)(v149 + 40) = v153;
    std::__shared_weak_count::__release_weak(v155);
  }
  else
  {
    do
      v159 = __ldxr(v154);
    while (__stxr(v159 + 1, v154));
    v160 = (unint64_t *)&v153->__shared_weak_owners_;
    do
      v161 = __ldxr(v160);
    while (__stxr(v161 + 1, v160));
    *(_QWORD *)(v149 + 32) = v149;
    *(_QWORD *)(v149 + 40) = v153;
  }
  do
    v162 = __ldaxr(v154);
  while (__stlxr(v162 - 1, v154));
  if (!v162)
  {
    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
    std::__shared_weak_count::__release_weak(v153);
  }
LABEL_245:
  v163 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
  if (*((_QWORD *)&v286 + 1))
  {
    v164 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  *(_QWORD *)&v286 = v149;
  *((_QWORD *)&v286 + 1) = v153;
  v166 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
  if (*((_QWORD *)&v285 + 1))
  {
    v167 = (unint64_t *)(*((_QWORD *)&v285 + 1) + 8);
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = v288;
  v288 = 0uLL;
  __p[0] = &off_24C9E27A0;
  *(_OWORD *)&__p[1] = __dst[0];
  v234 = *(_QWORD *)&__dst[1];
  memset(__dst, 0, 24);
  v235 = *(_OWORD *)__src;
  v236 = __src[2];
  memset(__src, 0, 24);
  v237 = v169;
  v285 = 0uLL;
  v170 = v286;
  v238 = v286;
  v286 = 0uLL;
  if (*((_QWORD *)&v238 + 1))
  {
    v171 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 16);
    do
      v172 = __ldxr(v171);
    while (__stxr(v172 + 1, v171));
  }
  v239 = &off_24C9B2630;
  v173 = operator new();
  *(_QWORD *)v173 = &off_24C9BB4D0;
  *(_OWORD *)(v173 + 8) = v170;
  *(_QWORD *)&v240 = v173;
  v175 = *((_QWORD *)&v238 + 1);
  v174 = v238;
  if (!*((_QWORD *)&v238 + 1))
  {
    *((_QWORD *)&v240 + 1) = v238;
    v241 = 0;
    if ((_QWORD)v238)
      v179 = v238 + 16;
    else
      v179 = 0;
    goto LABEL_275;
  }
  v176 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 16);
  do
    v177 = __ldxr(v176);
  while (__stxr(v177 + 1, v176));
  v178 = *((_QWORD *)&v238 + 1);
  *((_QWORD *)&v240 + 1) = v174;
  v241 = v175;
  if ((_QWORD)v238)
    v179 = v238 + 16;
  else
    v179 = 0;
  if (!*((_QWORD *)&v238 + 1))
  {
    v174 = v238;
LABEL_275:
    v182 = 0;
    v242 = &off_24C9E27D0;
    v243 = v179;
    goto LABEL_276;
  }
  v180 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 16);
  do
    v181 = __ldxr(v180);
  while (__stxr(v181 + 1, v180));
  v182 = *((_QWORD *)&v238 + 1);
  v174 = v238;
  v242 = &off_24C9E27D0;
  *(_QWORD *)&v243 = v179;
  *((_QWORD *)&v243 + 1) = v178;
  if (*((_QWORD *)&v238 + 1))
  {
    v183 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 16);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
  }
LABEL_276:
  if (v174)
    v185 = v174 + 24;
  else
    v185 = 0;
  v244 = &off_24C9B2310;
  *(_QWORD *)&v245 = v185;
  *((_QWORD *)&v245 + 1) = v182;
  if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
  {
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_281;
LABEL_284:
    operator delete(*(void **)&__dst[0]);
    v186 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
    if (!*((_QWORD *)&v287 + 1))
      goto LABEL_289;
    goto LABEL_285;
  }
  operator delete(__src[0]);
  if (SBYTE7(__dst[1]) < 0)
    goto LABEL_284;
LABEL_281:
  v186 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
  if (!*((_QWORD *)&v287 + 1))
    goto LABEL_289;
LABEL_285:
  v187 = (unint64_t *)&v186->__shared_owners_;
  do
    v188 = __ldaxr(v187);
  while (__stlxr(v188 - 1, v187));
  if (!v188)
  {
    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
    std::__shared_weak_count::__release_weak(v186);
  }
LABEL_289:
  v189 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
  if (!*((_QWORD *)&v288 + 1))
    goto LABEL_293;
  v190 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
  do
    v191 = __ldaxr(v190);
  while (__stlxr(v191 - 1, v190));
  if (!v191)
  {
    ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
    std::__shared_weak_count::__release_weak(v189);
    if ((SHIBYTE(v281) & 0x80000000) == 0)
    {
LABEL_294:
      if ((SHIBYTE(v282[2]) & 0x80000000) == 0)
        goto LABEL_295;
      goto LABEL_299;
    }
  }
  else
  {
LABEL_293:
    if ((SHIBYTE(v281) & 0x80000000) == 0)
      goto LABEL_294;
  }
  operator delete(v280[0]);
  if ((SHIBYTE(v282[2]) & 0x80000000) == 0)
  {
LABEL_295:
    if (v138)
      goto LABEL_301;
    goto LABEL_300;
  }
LABEL_299:
  operator delete(v282[0]);
  if (v138)
    goto LABEL_301;
LABEL_300:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_301:
  v192 = operator new();
  *(_QWORD *)v192 = &off_24C9E2698;
  *(_QWORD *)(v192 + 24) = v268;
  v193 = v267;
  v267 = 0uLL;
  v268 = 0;
  *(_QWORD *)(v192 + 48) = v270;
  v194 = v269;
  v269 = 0uLL;
  v270 = 0;
  v195 = v271;
  v271 = 0uLL;
  v196 = v272;
  v272 = 0uLL;
  *(_QWORD *)(v192 + 88) = &off_24C9CC290;
  v197 = v274;
  v198 = v275;
  *((_QWORD *)&v274 + 1) = 0;
  v275 = 0;
  *(_QWORD *)(v192 + 112) = v198;
  *(_QWORD *)(v192 + 120) = &off_24C9E26C8;
  v199 = v277;
  v200 = v279;
  v279 = 0uLL;
  *(_QWORD *)(v192 + 168) = &off_24C9E2700;
  *(_QWORD *)(v192 + 192) = v250;
  v201 = *(_OWORD *)&v249[1];
  v249[1] = 0;
  v249[2] = 0;
  v250 = 0;
  *(_QWORD *)(v192 + 216) = v252;
  v202 = v251;
  v251 = 0uLL;
  v252 = 0;
  v203 = v253;
  v253 = 0uLL;
  v204 = v254;
  v254 = 0uLL;
  *(_QWORD *)(v192 + 256) = &off_24C9B2C18;
  v205 = v256;
  v206 = v257;
  *((_QWORD *)&v256 + 1) = 0;
  v257 = 0;
  *(_QWORD *)(v192 + 280) = v206;
  *(_QWORD *)(v192 + 288) = &off_24C9E2730;
  v207 = v261;
  v261 = 0uLL;
  *(_QWORD *)(v192 + 336) = &off_24C9E27A0;
  *(_QWORD *)(v192 + 360) = v234;
  *(_OWORD *)(v192 + 344) = *(_OWORD *)&__p[1];
  __p[1] = 0;
  __p[2] = 0;
  v234 = 0;
  *(_QWORD *)(v192 + 384) = v236;
  v208 = v235;
  v235 = 0uLL;
  v236 = 0;
  v209 = v237;
  v237 = 0uLL;
  v210 = v238;
  v238 = 0uLL;
  *(_QWORD *)(v192 + 424) = &off_24C9B2630;
  *(_OWORD *)(v192 + 264) = v205;
  *(_OWORD *)(v192 + 296) = v259;
  *(_OWORD *)(v192 + 392) = v209;
  *(_OWORD *)(v192 + 408) = v210;
  *(_OWORD *)(v192 + 488) = v245;
  v211 = v240;
  v212 = v241;
  *((_QWORD *)&v240 + 1) = 0;
  v241 = 0;
  *(_QWORD *)(v192 + 448) = v212;
  *(_QWORD *)(v192 + 456) = &off_24C9E27D0;
  *(_QWORD *)(v192 + 144) = &off_24C9B2310;
  *(_QWORD *)(v192 + 312) = &off_24C9B2310;
  *(_QWORD *)(v192 + 480) = &off_24C9B2310;
  v245 = 0uLL;
  *(_OWORD *)(v192 + 8) = v193;
  *(_OWORD *)(v192 + 32) = v194;
  *(_OWORD *)(v192 + 56) = v195;
  *(_OWORD *)(v192 + 72) = v196;
  *(_OWORD *)(v192 + 96) = v197;
  *(_OWORD *)(v192 + 128) = v199;
  *(_OWORD *)(v192 + 152) = v200;
  *(_OWORD *)(v192 + 176) = v201;
  *(_OWORD *)(v192 + 200) = v202;
  *(_OWORD *)(v192 + 224) = v203;
  *(_OWORD *)(v192 + 240) = v204;
  *(_OWORD *)(v192 + 320) = v207;
  *(_OWORD *)(v192 + 368) = v208;
  *(_OWORD *)(v192 + 432) = v211;
  *(_OWORD *)(v192 + 464) = v243;
  *(_QWORD *)(v230 + 72) = v192;
  *(_QWORD *)&v274 = 0;
  v277 = 0uLL;
  v259 = 0uLL;
  *(_QWORD *)&v256 = 0;
  v243 = 0uLL;
  *(_QWORD *)&v240 = 0;
  sub_20ED513F4((uint64_t)__p);
  if (v232)
  {
    v213 = (unint64_t *)&v232->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  sub_20ED515D8((uint64_t)v249);
  v215 = v247;
  if (v247)
  {
    v216 = (unint64_t *)&v247->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
  if (*((_QWORD *)&v248 + 1))
  {
    v219 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  sub_20ED517BC((uint64_t)&v266);
  v221 = v263;
  if (v263)
  {
    v222 = (unint64_t *)&v263->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v224 = v265;
  if (v265)
  {
    v225 = (unint64_t *)&v265->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  if (*((_QWORD *)&v231 + 1))
  {
    v227 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v231 + 1) + 16))(*((_QWORD *)&v231 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v231 + 1));
    }
  }
  return v230;
}

void sub_20ED431F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,void *a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  char a70;
  char a72;
  uint64_t v72;

  if (*(char *)(v72 - 233) < 0)
  {
    operator delete(*(void **)(v72 - 256));
    sub_20E86665C(v72 - 192);
    sub_20E86665C(v72 - 176);
    if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&a17);
        sub_20E86665C((uint64_t)&a19);
        sub_20ED515D8((uint64_t)&a47);
        sub_20E86665C((uint64_t)&a43);
        sub_20E86665C((uint64_t)&a45);
        sub_20ED517BC((uint64_t)&a72);
        sub_20E86665C((uint64_t)&a68);
        sub_20E86665C((uint64_t)&a70);
        sub_20E86665C((uint64_t)&a15);
        sub_20E86665C(a11);
        if (*(char *)(a14 + 55) < 0)
        {
          operator delete(*a9);
          if ((*(char *)(a14 + 31) & 0x80000000) == 0)
LABEL_11:
            _Unwind_Resume(a1);
        }
        else if ((*(char *)(a14 + 31) & 0x80000000) == 0)
        {
          goto LABEL_11;
        }
        operator delete(*a10);
        _Unwind_Resume(a1);
      }
LABEL_4:
      operator delete((void *)STACK[0x2C0]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v72 - 192);
    sub_20E86665C(v72 - 176);
    if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x2A0]);
  if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20ED43880()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x2A0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20ED43798);
}

void sub_20ED438A0(uint64_t a1)
{
  sub_20ED519A0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED438D0(uint64_t a1)
{
  sub_20ED517BC(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED438F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E26C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED4392C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E26C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED43974(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B47B8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B47B8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED43A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED43A74(uint64_t a1)
{
  sub_20ED515D8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED43A98(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E2730;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED43AD0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E2730;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED43B18(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9E2768;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9E2768;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED43BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20ED43C18(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E2768;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ED43C58(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E2768;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED43CA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20ED43CB8(uint64_t a1)
{
  sub_20ED513F4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED43CDC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E27D0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED43D14(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E27D0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED43D5C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9E2808;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9E2808;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED43E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20ED43E5C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E2808;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ED43E9C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E2808;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED43EEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20ED43F00(uint64_t a1)
{
  sub_20ED4588C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED43F24(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  char *v5;
  char *v6;
  unint64_t *v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *p_shared_weak_owners;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  uint64_t v67;
  __int128 *v68;
  _BYTE v69[24];
  _BYTE *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (char *)operator new(0x30uLL);
    v6 = v5;
    *((_QWORD *)v5 + 1) = 0;
    v7 = (unint64_t *)(v5 + 8);
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_24C9E2A40;
    *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
    v8 = v5 + 24;
    v9 = a2[2];
    *((_QWORD *)v5 + 5) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v65 = (std::__shared_weak_count *)v5;
    v12 = (unint64_t *)(v5 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v66 = v14;
    *((_QWORD *)&v66 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(v7);
    while (__stxr(v18 + 1, v7));
    *v17 = v8;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v66;
      if (!(_QWORD)v66)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v66 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(p_shared_weak_owners);
            while (__stxr(v44 + 1, p_shared_weak_owners));
            *(_QWORD *)&v66 = v42;
            *((_QWORD *)&v66 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v66 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9E2A90;
        *(_OWORD *)(v47 + 8) = v66;
        v66 = 0uLL;
        *((_QWORD *)v47 + 3) = v8;
        *((_QWORD *)v47 + 4) = v6;
        v67 = 0;
        v68 = 0;
        v70 = v47;
        sub_210216F3C(*v38, (uint64_t)v69);
        v48 = v70;
        if (v70 == v69)
        {
          v49 = 4;
          v48 = v69;
        }
        else
        {
          if (!v70)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v65)
        {
          v50 = (unint64_t *)&v65->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v66;
      if (!(_QWORD)v66)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v64 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v64 = v33;
      *((_QWORD *)&v64 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v64 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  v54 = a2[2];
  if (v54)
  {
    v55 = (unint64_t *)(v54 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = (char *)operator new(0x30uLL);
  *(_QWORD *)v57 = &off_24C9E2B10;
  *(_OWORD *)(v57 + 8) = v64;
  *((_QWORD *)v57 + 3) = v52;
  *((_QWORD *)v57 + 4) = v53;
  *((_QWORD *)v57 + 5) = v54;
  v68 = (__int128 *)v57;
  sub_210216F3C(*v29, (uint64_t)&v66);
  v62 = v68;
  if (v68 == &v66)
  {
    v63 = 4;
    v62 = &v66;
  }
  else
  {
    if (!v68)
      return;
    v63 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 8 * v63))(v62, v58, v59, v60, v61);
}

void sub_20ED44394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
    {
      sub_20EA25E90((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  sub_20EA25E90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED443E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v10 = *(_QWORD **)(v8 - 64);
  if (v10 == v7)
  {
    v11 = 4;
    v10 = (_QWORD *)(v8 - 88);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  sub_20EA02254((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED44438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED4445C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BC6398](v8, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED44490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;

  std::__shared_weak_count::__release_weak(v15);
  sub_20E86665C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED444B0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED444C0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED444CC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED444DC(_QWORD *a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t *v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *p_shared_weak_owners;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  char *v65;
  __int128 *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  __int128 *v71;
  std::string *v72;
  std::runtime_error *exception;
  std::runtime_error *v74;
  std::__shared_weak_count *v75[2];
  _QWORD *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::runtime_error v79;
  char *v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  _QWORD *v83;
  __int128 *v84;
  _QWORD v85[3];
  std::string v86;
  std::string *v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v82 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v82 + 1) = 45;
    v70 = (_QWORD *)a1[6];
    v69 = a1 + 6;
    v68 = v70;
    v71 = (__int128 *)*((unsigned __int8 *)v69 + 23);
    if ((char)v71 < 0)
      v71 = (__int128 *)v69[1];
    else
      v68 = v69;
    v83 = v68;
    v84 = v71;
    sub_20E8778D4((uint64_t)&v82, (uint64_t)v85, 0, 0, &v86);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v72 = &v86;
    else
      v72 = (std::string *)v86.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v79, (const char *)v72);
    v79.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v74 = std::runtime_error::runtime_error(exception, &v79);
    v74->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v74, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2B90;
    v6[1].__vftable = *a3;
    v78 = v6;
    v76 = &v6[1].__vftable;
    v77 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (char *)operator new(0x30uLL);
    v10 = v9;
    *((_QWORD *)v9 + 1) = 0;
    v11 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_24C9E2A40;
    *(_OWORD *)(v9 + 24) = *(_OWORD *)a2;
    v12 = v9 + 24;
    v13 = a2[2];
    *((_QWORD *)v9 + 5) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v80 = v9 + 24;
    v81 = (std::__shared_weak_count *)v9;
    v16 = (unint64_t *)(v9 + 16);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v82 = v19;
    *((_QWORD *)&v82 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (_QWORD *)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v12;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v82;
      if (!(_QWORD)v82)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v82 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(p_shared_weak_owners);
            while (__stxr(v49 + 1, p_shared_weak_owners));
            *(_QWORD *)&v82 = v47;
            *((_QWORD *)&v82 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v82 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9E2BE0;
        *(_OWORD *)(v52 + 8) = v82;
        v82 = 0uLL;
        *((_QWORD *)v52 + 3) = v12;
        *((_QWORD *)v52 + 4) = v10;
        v83 = 0;
        v84 = 0;
        *((_QWORD *)v52 + 5) = v76;
        *((_QWORD *)v52 + 6) = v77;
        v85[0] = 0;
        v85[1] = 0;
        v87 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v86);
        v53 = v87;
        if (v87 == &v86)
        {
          v54 = 4;
          v53 = &v86;
        }
        else
        {
          if (!v87)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v81)
        {
          v55 = &v81->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        if (v78)
        {
          v57 = (unint64_t *)&v78->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v82;
      if (!(_QWORD)v82)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v75 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v75[0] = v38;
      v75[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v75 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = a2[1];
  v61 = a2[2];
  if (v61)
  {
    v62 = (unint64_t *)(v61 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = operator new(0x20uLL);
  v64[1] = 0;
  v64[2] = 0;
  *v64 = &off_24C9E2B90;
  v64[3] = *a3;
  *a3 = 0;
  v65 = (char *)operator new(0x40uLL);
  *(_QWORD *)v65 = &off_24C9E2C60;
  *(_OWORD *)(v65 + 8) = *(_OWORD *)v75;
  *((_QWORD *)v65 + 3) = v59;
  *((_QWORD *)v65 + 4) = v60;
  *((_QWORD *)v65 + 5) = v61;
  *((_QWORD *)v65 + 6) = v64 + 3;
  *((_QWORD *)v65 + 7) = v64;
  v84 = (__int128 *)v65;
  sub_210216F3C(*v34, (uint64_t)&v82);
  v66 = v84;
  if (v84 == &v82)
  {
    v67 = 4;
    v66 = &v82;
  }
  else
  {
    if (!v84)
      return;
    v67 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v66 + 8 * v67))(v66);
}

void sub_20ED44BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 97) < 0)
        operator delete(*(void **)(v25 - 120));
      JUMPOUT(0x20ED44ADCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED44C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 97) < 0)
  {
    operator delete(*(void **)(v24 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED44C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20ED46928(&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20ED46928(&a9);
  _Unwind_Resume(a1);
}

void sub_20ED44CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_20E8C2824(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED44D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED44DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED44DD0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED44E44(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9E2CE0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B47B8;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20ED44F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED44FE8(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E2D60;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED450F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED4515C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E2DE0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED45374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED4543C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E2E60;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED45654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED4571C(uint64_t a1)
{
  return sub_20ED4588C(a1 - 16);
}

void sub_20ED45724(uint64_t a1)
{
  sub_20ED4588C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4574C(uint64_t a1, uint64_t a2)
{
  return sub_20ED44E44((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED45754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED4515C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED4575C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED4543C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED45764(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED4576C(uint64_t a1)
{
  return sub_20ED4588C(a1 - 24);
}

void sub_20ED45774(uint64_t a1)
{
  sub_20ED4588C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4579C(uint64_t a1)
{
  return sub_20ED44FE8((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED457A4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED457AC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED45814(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED4587C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED4588C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9E2840;
  *(_QWORD *)(a1 + 16) = &unk_24C9E28B8;
  *(_QWORD *)(a1 + 24) = &unk_24C9E28F8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ED45A8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED45A9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED45ACC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *sub_20ED45B28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E2A90;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED45B6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E2A90;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED45BC0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E2A90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED45C30(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E2A90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED45C80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED45CBC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED45CF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20ED46018((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20ED463DC(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED45EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20ED463DC(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED45FA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataE"
                     "NS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStor"
                     "eENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKS6_EUlT_T0_E_EEvSL_SM_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13Inp"
                                "utMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection2"
                                "2MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZ"
                                "NKSI_4SendERKS6_EUlT_T0_E_EEvSL_SM_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKS6_EUlT_T0_E_EEvSL_SM_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKS6_EUlT_T0_E_EEvSL_SM_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4600C()
{
  return &unk_24C9E2AF0;
}

void sub_20ED46018(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20ED462D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED463B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED463D0);
}

uint64_t *sub_20ED463DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED464C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED46424);
}

_QWORD *sub_20ED46504(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E2B10;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED46580(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E2B10;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

char *sub_20ED4660C(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = (char *)operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24C9E2B10;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20ED46684(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E2B10;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED466DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED4674C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED467BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20ED46018((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20ED463DC(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED46864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20ED463DC(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED468B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataE"
                     "NS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStor"
                     "eENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13Inp"
                                "utMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection2"
                                "2MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4691C()
{
  return &unk_24C9E2B70;
}

_QWORD *sub_20ED46928(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20ED469D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED469E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E2B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20ED46A10(uint64_t a1)
{
  return sub_20ED463DC((uint64_t *)(a1 + 24));
}

_QWORD *sub_20ED46A1C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E2BE0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED46AA4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E2BE0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED46B3C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E2BE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED46BCC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E2BE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED46C3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED46CBC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED46D38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED46018(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20ED463DC((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED47014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20ED47040(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20ED46E4CLL);
    JUMPOUT(0x20ED46E1CLL);
  }
  sub_20E96CE78(3u);
}

void sub_20ED4709C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20ED470C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20ED463DC(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED471B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataE"
                     "NS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStor"
                     "eENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKS6_NS8_7promiseIS"
                     "G_EEEUlT_T0_E_EEvSL_SO_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13Inp"
                                "utMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection2"
                                "2MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZ"
                                "NKSI_7ProcessERKS6_NS8_7promiseISG_EEEUlT_T0_E_EEvSL_SO_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKS6_NS8_7promiseISG_EEEUlT_T0_E_EEvSL_SO_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKS6_NS8_7promiseISG_EEEUlT_T0_E_EEvSL_SO_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED47220()
{
  return &unk_24C9E2C40;
}

_QWORD *sub_20ED4722C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9E2C60;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20ED472E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9E2C60;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

char *sub_20ED473A4(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = (char *)operator new(0x40uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24C9E2C60;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)result + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 7) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

uint64_t sub_20ED4743C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E2C60;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(result + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 56) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED474B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20ED47560(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20ED47608(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[6];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED46018((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20ED463DC((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED47718(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20ED47790(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20ED477C4);
  JUMPOUT(0x20ED477F4);
}

uint64_t sub_20ED477FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataE"
                     "NS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStor"
                     "eENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE7ProcessERKS6_NS8_7promiseISG_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13Inp"
                                "utMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection2"
                                "2MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE7ProcessERKS6_NS8_7promiseISG_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE7ProcessERKS6_NS8_7promiseISG_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE7ProcessERKS6_NS8_7promiseISG_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED47868()
{
  return &unk_24C9E2CC0;
}

_QWORD *sub_20ED47874(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E2CE0;
  v2 = a1[4];
  a1[3] = &off_24C9B47B8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED478CC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E2CE0;
  v2 = a1[4];
  a1[3] = &off_24C9B47B8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED47934(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9E2CE0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B47B8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20ED479AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED479CC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9E2CE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B47B8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20ED47A34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20ED47A4C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B47B8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED47A9C(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B47B8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED47AE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        if (*(_QWORD *)(v5 + 112)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 128, (uint64_t)"downstream_.empty()", 19, (uint64_t)"It is mandated that there is only one output handler for a single consumer", 74, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B47B8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED47BE0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED47C1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataEN"
                     "S1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStore"
                     "ENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13Inpu"
                                "tMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22"
                                "MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED47C88()
{
  return &unk_24C9E2D40;
}

_QWORD *sub_20ED47C94(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E2D60;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED47CCC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E2D60;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED47D14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E2D60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED47D64(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E2D60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED47D94(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED47DA4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED47DD0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 136)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 114, (uint64_t)"error_downstream_.empty()", 25, (uint64_t)"It is mandated that there is only one error handler for a single consumer", 73, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED47EA8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED47EE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataEN"
                     "S1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStore"
                     "ENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13Inpu"
                                "tMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22"
                                "MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE15AddErrorHandlerENS1_12Channe"
                                "lInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED47F50()
{
  return &unk_24C9E2DC0;
}

_QWORD *sub_20ED47F5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E2DE0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED47F94(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E2DE0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED47FDC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E2DE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED48034(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E2DE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED4806C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED4807C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED480A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20ED48224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED48294(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataE"
                     "NS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStor"
                     "eENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13Inp"
                                "utMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection2"
                                "2MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED48300()
{
  return &unk_24C9E2E40;
}

_QWORD *sub_20ED4830C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E2E60;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED48344(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E2E60;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4838C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E2E60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED483E4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E2E60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED4841C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED4842C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED48458(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED48510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED4855C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataE"
                     "NS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStor"
                     "eENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13Inp"
                                "utMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection2"
                                "2MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio31ml_feature_detection_node_group13InputMetadataENS1_14SingleConsumerINSt3__110shared_ptrINS8_6vectorINS4_17feature_detection22MLPointDescriptorStoreENS8_9allocatorISC_EEEEEEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED485C8()
{
  return &unk_24C9E2EC0;
}

void sub_20ED485D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED485FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED48614(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio31ml_feature_detection_node_gr"
                     "oup13InputMetadataENS3_14SingleConsumerINS0_INS_6vectorINS6_17feature_detection22MLPointDescriptorS"
                     "toreENS_9allocatorISC_EEEEEEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio31ml_feature_detect"
                                "ion_node_group13InputMetadataENS3_14SingleConsumerINS0_INS_6vectorINS6_17feature_detecti"
                                "on22MLPointDescriptorStoreENS_9allocatorISC_EEEEEEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio31ml_feature_detection_node_group13InputMetadataENS3_14SingleConsumerINS0_INS_6vectorINS6_17feature_detection22MLPointDescriptorStoreENS_9allocatorISC_EEEEEEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio31ml_feature_detection_node_group13InputMetadataENS3_14SingleConsumerINS0_INS_6vectorINS6_17feature_detection22MLPointDescriptorStoreENS_9allocatorISC_EEEEEEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED48684(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED486B0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED486EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E2F30;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED48754(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED487E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED487F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED48888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED4889C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED48960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED48974(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED48A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED48A4C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED48AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED48B08(uint64_t a1)
{
  sub_20ED4A348(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED48B2C(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E31A8;
    LODWORD(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9E31F8;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24C9E3278;
  v49[1] = v29;
  v49[2] = v28;
  *((_DWORD *)v49 + 6) = v48;
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20ED48F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED49034(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED49044(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED49050(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED49060(_QWORD *a1, _DWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  int v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E32F8;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E31A8;
    LODWORD(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9E3348;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_24C9E32F8;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9E33C8;
  *(_OWORD *)(v56 + 8) = v70;
  *((_DWORD *)v56 + 6) = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20ED4967C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x20ED49590);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED496F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED49744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_20EA25E90((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_20EA25E90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED49798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED497BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED4985C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED49878(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED498EC(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9E3448;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9E2768;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20ED49A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED49A90(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E34C8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED49BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED49C04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E3548;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED49E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED49EE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E35C8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED4A0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED4A1C4(uint64_t a1)
{
  return sub_20ED4A348(a1 - 16);
}

void sub_20ED4A1CC(uint64_t a1)
{
  sub_20ED4A348(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4A1F4(uint64_t a1, uint64_t a2)
{
  return sub_20ED498EC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED4A1FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED49C04((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED4A204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED49EE4((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED4A20C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED4A214(uint64_t a1)
{
  return sub_20ED4A348(a1 - 24);
}

void sub_20ED4A21C(uint64_t a1)
{
  sub_20ED4A348(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4A244(uint64_t a1)
{
  return sub_20ED49A90((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED4A24C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED4A254(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED4A2BC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED4A324(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED4A348(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9E2FA8;
  *(_QWORD *)(a1 + 16) = &unk_24C9E3020;
  *(_QWORD *)(a1 + 24) = &unk_24C9E3060;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ED4A548(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E31A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED4A558(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E31A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4A590(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E31F8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED4A5D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E31F8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4A628(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E31F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED4A698(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E31F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED4A6E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED4A724(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED4A75C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20ED4AA80((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20ED4ADEC(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED4A924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20ED4ADEC(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED4AA08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE25Enque"
                     "ueMessageAndDispatchIZNKS7_4SendERKiEUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_L"
                                "b0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKiEUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKiEUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKiEUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4AA74()
{
  return &unk_24C9E3258;
}

void sub_20ED4AA80(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  int v12;
  _QWORD *v13;
  _QWORD *j;
  uint64_t v15;
  uint64_t v16;
  std::exception_ptr v17;
  uint64_t v18;
  int v19;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v19 = v12;
  v13 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v13; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v18);
  if (*((_BYTE *)a3 + 8))
  {
    v15 = *a3;
    if (!v15)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v15 + 24));
    if ((*(_BYTE *)(v15 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v16 = *(_QWORD *)(v15 + 16), std::exception_ptr::~exception_ptr(&v17), v16))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v15 + 140) = v18;
    *(_DWORD *)(v15 + 148) = v19;
    *(_DWORD *)(v15 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v15 + 88));
    std::mutex::unlock((std::mutex *)(v15 + 24));
  }
}

void sub_20ED4ACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17)
{
  std::mutex *v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  std::mutex::unlock(v17);
  if (a2 == 1)
  {
    v20 = (uint64_t *)__cxa_begin_catch(a1);
    v21 = *v20;
    a11 = *(_QWORD *)(*(_QWORD *)(*v20 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v21 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v22 = (uint64_t *)&a12;
    else
      v22 = a12;
    if ((a17 & 0x80u) == 0)
      v23 = a17;
    else
      v23 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v22, v23, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED4ADC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED4ADE0);
}

uint64_t *sub_20ED4ADEC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED4AED8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED4AE34);
}

_QWORD *sub_20ED4AF14(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E3278;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED4AF4C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E3278;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4AF94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E3278;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_20ED4AFEC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E3278;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void sub_20ED4B024(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED4B034(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED4B060(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20ED4AA80((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20ED4ADEC(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED4B108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20ED4ADEC(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED4B154(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE4SendERKiEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_L"
                                "b0EE4SendERKiEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE4SendERKiEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE4SendERKiEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4B1C0()
{
  return &unk_24C9E32D8;
}

void sub_20ED4B1CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E32F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED4B1DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E32F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20ED4B20C(uint64_t a1)
{
  return sub_20ED4ADEC((uint64_t *)(a1 + 24));
}

_QWORD *sub_20ED4B218(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E3348;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED4B2A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E3348;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED4B338(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E3348;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED4B3C8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E3348;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED4B438(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED4B4B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED4B534(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED4AA80(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20ED4ADEC((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED4B810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20ED4B83C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20ED4B648);
    JUMPOUT(0x20ED4B618);
  }
  sub_20E96CE78(3u);
}

void sub_20ED4B898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20ED4B8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20ED4ADEC(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED4B9B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE25Enque"
                     "ueMessageAndDispatchIZNKS7_7ProcessERKiNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_L"
                                "b0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKiNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKiNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKiNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4BA1C()
{
  return &unk_24C9E33A8;
}

_QWORD *sub_20ED4BA28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E33C8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED4BAA4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E33C8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4BB30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E33C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20ED4BBA8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E33C8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED4BC00(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED4BC70(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED4BCE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED4AA80((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20ED4ADEC((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED4BDF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20ED4BE68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20ED4BE9CLL);
  JUMPOUT(0x20ED4BECCLL);
}

uint64_t sub_20ED4BED4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE7Proces"
                     "sERKiNSt3__17promiseIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_L"
                                "b0EE7ProcessERKiNSt3__17promiseIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE7ProcessERKiNSt3__17promiseIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE7ProcessERKiNSt3__17promiseIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4BF40()
{
  return &unk_24C9E3428;
}

_QWORD *sub_20ED4BF4C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E3448;
  v2 = a1[4];
  a1[3] = &off_24C9E2768;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED4BFA4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E3448;
  v2 = a1[4];
  a1[3] = &off_24C9E2768;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4C00C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9E3448;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9E2768;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20ED4C084(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED4C0A4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9E3448;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9E2768;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20ED4C10C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20ED4C124(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9E2768;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED4C174(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9E2768;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED4C1C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9E2768;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED4C274(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED4C2B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE9Subscri"
                     "beENS1_12ChannelInputIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb"
                                "0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4C31C()
{
  return &unk_24C9E34A8;
}

_QWORD *sub_20ED4C328(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E34C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED4C360(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E34C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4C3A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E34C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED4C3F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E34C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED4C428(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED4C438(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED4C464(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED4C4F8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED4C534(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE15AddErr"
                     "orHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb"
                                "0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4C5A0()
{
  return &unk_24C9E3528;
}

_QWORD *sub_20ED4C5AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E3548;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED4C5E4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E3548;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4C62C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E3548;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED4C684(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E3548;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED4C6BC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED4C6CC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED4C6F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20ED4C874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED4C8E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE16Outpu"
                     "tHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_L"
                                "b0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4C950()
{
  return &unk_24C9E35A8;
}

_QWORD *sub_20ED4C95C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E35C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED4C994(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E35C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4C9DC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E35C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED4CA34(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E35C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED4CA6C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED4CA7C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED4CAA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED4CB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED4CBAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE15Error"
                     "HandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_L"
                                "b0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNS_3vio13mapping_types14MLModelVersionEvS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4CC18()
{
  return &unk_24C9E3628;
}

void sub_20ED4CC28(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED4CC4C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED4CC64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIiNS1_3vio13mapping_types14MLModelVersi"
                     "onEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIiNS1_3vio13mapping_types14M"
                                "LModelVersionEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIiNS1_3vio13mapping_types14MLModelVersionEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIiNS1_3vio13mapping_types14MLModelVersionEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED4CCD4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED4CD00(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4CD3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E3698;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED4CDA4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED4CE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED4CE48(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED4CED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED4CEEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED4CFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED4CFC4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED4D088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED4D09C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED4D140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED4D158(uint64_t a1)
{
  sub_20ED4E960(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED4D17C(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9BAFE0;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9E38F0;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24C9E3970;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20ED4D594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED4D688(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E39F0;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9BAFE0;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9E3A40;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_24C9E39F0;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9E3AC0;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20ED4DCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x20ED4DBBCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED4DD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED4DD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_20EA25E90((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_20EA25E90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED4DDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED4DDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED4DE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED4DEA4(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED4DF18(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9E3B40;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9E2808;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20ED4E048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED4E0BC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E3BC0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED4E1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED4E230@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E3C40;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED4E448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED4E510@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E3CC0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED4E728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED4E7F0(uint64_t a1)
{
  return sub_20ED4E960(a1 - 16);
}

void sub_20ED4E7F8(uint64_t a1)
{
  sub_20ED4E960(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4E820(uint64_t a1, uint64_t a2)
{
  return sub_20ED4DF18((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED4E828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED4E230((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED4E830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED4E510((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED4E838(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED4E840(uint64_t a1)
{
  return sub_20ED4E960(a1 - 24);
}

void sub_20ED4E848(uint64_t a1)
{
  sub_20ED4E960(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4E870(uint64_t a1)
{
  return sub_20ED4E0BC((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED4E878(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED4E880(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED4E8E8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED4E950(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED4E960(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9E3700;
  *(_QWORD *)(a1 + 16) = &unk_24C9E3778;
  *(_QWORD *)(a1 + 24) = &unk_24C9E37B8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20ED4EB60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E38F0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED4EBA4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E38F0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4EBF8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E38F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED4EC68(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E38F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED4ECB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED4ECF4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED4ED2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20ED4F050((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20ED4F50C(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED4EEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20ED4F50C(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED4EFD8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE25EnqueueMessageAndD"
                     "ispatchIZNKSA_4SendERKbEUlT_T0_E_EEvSD_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE25Enqueue"
                                "MessageAndDispatchIZNKSA_4SendERKbEUlT_T0_E_EEvSD_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKbEUlT_T0_E_EEvSD_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKbEUlT_T0_E_EEvSD_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4F044()
{
  return &unk_24C9E3950;
}

void sub_20ED4F050(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::exception_ptr v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v32, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, std::__shared_weak_count_vtbl **))(j[2] + 16))(j + 2, &v32);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v30.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v30), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v32;
    v30.__ptr_ = v32;
    v31 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    if (v16)
      CFRetain(v16);
    v19 = (std::__shared_weak_count *)operator new();
    v20 = v19;
    v19->__shared_owners_ = 0;
    v21 = (unint64_t *)&v19->__shared_owners_;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFE68;
    v19->__shared_weak_owners_ = 0;
    v19[1].__vftable = v16;
    *(_QWORD *)(v14 + 144) = v16;
    *(_QWORD *)(v14 + 152) = v19;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
    v24 = v31;
    if (v31)
    {
      v25 = (unint64_t *)&v31->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v27 = v33;
  if (v33)
  {
    v28 = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20ED4F3C4(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  std::mutex *v3;
  uint64_t *v6;
  uint64_t v7;
  va_list v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;
  va_list v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, va_list);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_20E86665C((uint64_t)va2);
  std::mutex::unlock(v3);
  sub_20E86665C((uint64_t)va3);
  if (a2 == 1)
  {
    v6 = (uint64_t *)__cxa_begin_catch(a1);
    v7 = *v6;
    v12 = *(_QWORD *)(*(_QWORD *)(*v6 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    v10 = (*(uint64_t (**)(void))(v7 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", va1, "\n", "message: ", va, "\n");
    if (v17 >= 0)
      va_copy(v8, va2);
    else
      v8 = v14;
    if (v17 >= 0)
      v9 = HIBYTE(v17);
    else
      v9 = v16;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v8, v9, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED4F4E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED4F500);
}

uint64_t *sub_20ED4F50C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED4F5F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED4F554);
}

_QWORD *sub_20ED4F634(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E3970;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED4F66C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E3970;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED4F6B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E3970;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_20ED4F70C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E3970;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_20ED4F744(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED4F754(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED4F780(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20ED4F050((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20ED4F50C(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED4F828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20ED4F50C(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED4F874(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE4SendERKbEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE4SendERKbEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE4SendERKbEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE4SendERKbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED4F8E0()
{
  return &unk_24C9E39D0;
}

void sub_20ED4F8EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E39F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED4F8FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E39F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20ED4F92C(uint64_t a1)
{
  return sub_20ED4F50C((uint64_t *)(a1 + 24));
}

_QWORD *sub_20ED4F938(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E3A40;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED4F9C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E3A40;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED4FA58(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E3A40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED4FAE8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E3A40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED4FB58(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED4FBD8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED4FC54(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED4F050(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20ED4F50C((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED4FF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20ED4FF5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20ED4FD68);
    JUMPOUT(0x20ED4FD38);
  }
  sub_20E96CE78(3u);
}

void sub_20ED4FFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20ED4FFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20ED4F50C(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED500D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE25EnqueueMessageAndD"
                     "ispatchIZNKSA_7ProcessERKbNSt3__17promiseIS9_EEEUlT_T0_E_EEvSD_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE25Enqueue"
                                "MessageAndDispatchIZNKSA_7ProcessERKbNSt3__17promiseIS9_EEEUlT_T0_E_EEvSD_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKbNSt3__17promiseIS9_EEEUlT_T0_E_EEvSD_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKbNSt3__17promiseIS9_EEEUlT_T0_E_EEvSD_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED5013C()
{
  return &unk_24C9E3AA0;
}

_QWORD *sub_20ED50148(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E3AC0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED501C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E3AC0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED50250(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E3AC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20ED502C8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E3AC0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED50320(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED50390(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED50400(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED4F050((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20ED4F50C((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED50510(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20ED50588(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20ED505BCLL);
  JUMPOUT(0x20ED505ECLL);
}

uint64_t sub_20ED505F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE7ProcessERKbNSt3__17"
                     "promiseIS9_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE7ProcessE"
                                "RKbNSt3__17promiseIS9_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE7ProcessERKbNSt3__17promiseIS9_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE7ProcessERKbNSt3__17promiseIS9_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED50660()
{
  return &unk_24C9E3B20;
}

_QWORD *sub_20ED5066C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E3B40;
  v2 = a1[4];
  a1[3] = &off_24C9E2808;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED506C4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E3B40;
  v2 = a1[4];
  a1[3] = &off_24C9E2808;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED5072C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9E3B40;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9E2808;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20ED507A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED507C4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9E3B40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9E2808;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20ED5082C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20ED50844(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9E2808;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED50894(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9E2808;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED508E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9E2808;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED50994(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED509D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE9SubscribeENS1_12Chan"
                     "nelInputIS9_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE9Subscribe"
                                "ENS1_12ChannelInputIS9_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE9SubscribeENS1_12ChannelInputIS9_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE9SubscribeENS1_12ChannelInputIS9_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED50A3C()
{
  return &unk_24C9E3BA0;
}

_QWORD *sub_20ED50A48(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E3BC0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED50A80(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E3BC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED50AC8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E3BC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED50B18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E3BC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED50B48(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED50B58(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED50B84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED50C18(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED50C54(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE15AddErrorHandlerENS1"
                     "_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE15AddError"
                                "HandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED50CC0()
{
  return &unk_24C9E3C20;
}

_QWORD *sub_20ED50CCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E3C40;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED50D04(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E3C40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED50D4C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E3C40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED50DA4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E3C40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED50DDC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED50DEC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED50E18(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20ED50F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED51004(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE16OutputH"
                                "andlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED51070()
{
  return &unk_24C9E3CA0;
}

_QWORD *sub_20ED5107C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E3CC0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED510B4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E3CC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED510FC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E3CC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED51154(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E3CC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED5118C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED5119C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED511C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED51280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED512CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE15ErrorHa"
                                "ndlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS0_2cf3RefIPK9__CFArrayEEvS9_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED51338()
{
  return &unk_24C9E3D20;
}

void sub_20ED51348(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED5136C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED51384(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS2_2cf3RefIPK9__CFArrayEEvSB_Lb0EEEE"
                     "27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS2_2cf3RefIPK9__CFArrayEE"
                                "vSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS2_2cf3RefIPK9__CFArrayEEvSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS2_2cf3RefIPK9__CFArrayEEvSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED513F4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E27A0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E27D0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2630;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED515D8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E2700;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E2730;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B2C18;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED517BC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E2698;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E26C8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC290;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED519A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E2668;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20ED513F4(v2 + 336);
    sub_20ED515D8(v2 + 168);
    v3 = sub_20ED517BC(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40EC6BA667);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20ED513F4(v7 + 336);
    sub_20ED515D8(v7 + 168);
    v8 = sub_20ED517BC(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C40EC6BA667);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED51B04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED51B28(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED51B40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3vio31ml_feature_detection_node_group31MLDescriptorExtractorNodeWorke"
                     "rINS3_18MLFeatureExtractorEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3vio31ml_feature_detection_node_group31MLDescriptorExtract"
                                "orNodeWorkerINS3_18MLFeatureExtractorEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3vio31ml_feature_detection_node_group31MLDescriptorExtractorNodeWorkerINS3_18MLFeatureExtractorEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3vio31ml_feature_detection_node_group31MLDescriptorExtractorNodeWorkerINS3_18MLFeatureExtractorEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20ED51BB0(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  v8 = operator new();
  v10 = *a1;
  v9 = a1[1];
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *a2;
  *(_QWORD *)&v17 = v10;
  *((_QWORD *)&v17 + 1) = v9;
  sub_20ED3D490(&v17, v13, a3, v8);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      *(_BYTE *)(v8 + 80) = v13;
      if (v13)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  *(_BYTE *)(v8 + 80) = v13;
  if (!v13)
  {
LABEL_9:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 72) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v8 + 72) + 96));
    *(_BYTE *)(v8 + 80) = 0;
  }
LABEL_11:
  *a4 = v8;
  a4[1] = (uint64_t)sub_20ED57370;
}

void sub_20ED51D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20ED519A0(v9);
  sub_20E86665C((uint64_t)&a9);
  MEMORY[0x212BC6398](v9, 0x10B2C40E6709449);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED51D4C(uint64_t a1, uint64_t *a2, unsigned __int8 a3, uint64_t a4)
{
  std::string *v5;
  uint64_t v6;
  uint64_t v8[2];
  unsigned __int8 v9;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (std::string *)(a1 + 8);
  v9 = a3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = off_24C9E3DE0;
  sub_20ED51BB0(a2, &v9, a4, v8);
  v6 = v8[1];
  *(_QWORD *)(a1 + 56) = v8[0];
  *(_QWORD *)(a1 + 64) = v6;
  sub_20E8B43E8(v5, "ML Feature Detection Node Group", 0x1FuLL);
  sub_20E8B43E8((std::string *)(a1 + 32), "Generates binary descriptors from keyframes", 0x2BuLL);
  return a1;
}

void sub_20ED51DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

void sub_20ED51DF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 64))();
  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED51E20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  __int128 *v8;
  char *v9;
  __int128 *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;
  void **v21;
  char *v22;
  void **v23;
  char *v24;
  int v27;
  size_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *p_dst;
  char *v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  void *v42;
  void **v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void **v46;
  __int128 v47;
  char *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  void *v52;
  void **v53;
  unint64_t *v54;
  unint64_t v55;
  void **v56;
  void *v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  __int128 *v65;
  char *v66;
  char *v67;
  void *v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t *v72;
  __int128 v73;
  uint64_t v74;
  void **v75;
  char *v76;
  void **v77;
  char *v78;
  int v81;
  size_t v82;
  unint64_t v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  char *v88;
  void *v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  void *v96;
  void **v97;
  unint64_t *v98;
  unint64_t v99;
  void **v100;
  __int128 v101;
  char *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  void *v106;
  void **v107;
  unint64_t *v108;
  unint64_t v109;
  void **v110;
  void *v111;
  __int128 v112;
  char *v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  __int128 *v117;
  char *v118;
  __int128 *v119;
  char *v120;
  char *v121;
  void *v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  uint64_t *v126;
  __int128 v127;
  uint64_t v128;
  void **v129;
  char *v130;
  void **v131;
  char *v132;
  int v135;
  size_t v136;
  unint64_t v137;
  __int128 *v138;
  uint64_t v139;
  uint64_t v140;
  __int128 *v141;
  char *v142;
  void *v143;
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count *v149;
  void *v150;
  uint64_t v151;
  void **v152;
  unint64_t *v153;
  unint64_t v154;
  void **v155;
  __int128 v156;
  char *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count *v160;
  void *v161;
  void **v162;
  unint64_t *v163;
  unint64_t v164;
  void **v165;
  void *v166;
  __int128 v167;
  char *v168;
  __int128 v169;
  _BOOL4 v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  void *v175;
  __int128 v177;
  int v178;
  size_t v179;
  unint64_t v180;
  __int128 *v181;
  int v182;
  size_t v183;
  unint64_t v184;
  __int128 *v185;
  int v186;
  size_t v187;
  unint64_t v188;
  __int128 *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v200;
  void *v201;
  char *v202;
  unint64_t v203;
  void *v204;
  char *v205;
  unint64_t v206;
  void **v207;
  void **v208;
  uint64_t v209;
  void *v210[2];
  uint64_t v211;
  void *v212[2];
  __int128 v213;
  unint64_t v214;
  __int128 __p;
  _BYTE v216[24];
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  __int128 __dst;
  int64_t v221;
  _BYTE v222[128];
  uint64_t v223;

  v223 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 56);
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(_QWORD *)(v2 + 72);
    v200 = v2;
    if ((*(char *)(v3 + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    sub_20E860C04(&__dst, *(void **)(v3 + 8), *(_QWORD *)(v3 + 16));
    goto LABEL_7;
  }
  v200 = v2;
  if (*(char *)(v3 + 31) < 0)
    goto LABEL_6;
LABEL_3:
  v4 = *(_OWORD *)(v3 + 8);
  v221 = *(_QWORD *)(v3 + 24);
  __dst = v4;
LABEL_7:
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 96) + 48))(*(_QWORD *)(v3 + 96));
  v6 = atomic_load((unsigned __int8 *)&qword_254A5F228);
  if ((v6 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5F228))
    goto LABEL_8;
  sub_20ED54310();
  v178 = byte_254A5F3FF;
  if (byte_254A5F3FF >= 0)
    v179 = byte_254A5F3FF;
  else
    v179 = qword_254A5F3F0;
  v180 = v179 + 1;
  if (v179 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v180 >= 0x17)
  {
    v190 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17)
      v190 = v180 | 7;
    v191 = v190 + 1;
    v181 = (__int128 *)operator new(v190 + 1);
    *((_QWORD *)&xmmword_254A5F3D0 + 1) = v179 + 1;
    unk_254A5F3E0 = v191 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5F3D0 = v181;
    goto LABEL_485;
  }
  v181 = &xmmword_254A5F3D0;
  unk_254A5F3E0 = 0;
  xmmword_254A5F3D0 = 0uLL;
  byte_254A5F3E7 = v179 + 1;
  if (v179)
  {
LABEL_485:
    if (v178 >= 0)
      v192 = &qword_254A5F3E8;
    else
      v192 = (uint64_t *)qword_254A5F3E8;
    memmove(v181, v192, v179);
  }
  *(_WORD *)((char *)v181 + v179) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F3D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5F228);
LABEL_8:
  if (byte_254A5F3E7 < 0)
  {
    sub_20E860C04(&v218, (void *)xmmword_254A5F3D0, *((unint64_t *)&xmmword_254A5F3D0 + 1));
  }
  else
  {
    v218 = xmmword_254A5F3D0;
    v219 = unk_254A5F3E0;
  }
  v7 = HIBYTE(v219);
  if (v219 >= 0)
  {
    v8 = &v218;
  }
  else
  {
    v7 = *((_QWORD *)&v218 + 1);
    v8 = (__int128 *)v218;
  }
  if (v7 >= 4)
  {
    v9 = (char *)v8 + v7;
    v10 = v8;
    do
    {
      v11 = (char *)memchr(v10, 118, v7 - 3);
      if (!v11)
        break;
      if (*(_DWORD *)v11 == 1684631414)
      {
        if (v11 == v9 || v11 - (char *)v8 == -1)
          break;
        v212[0] = (void *)v5;
        LODWORD(v212[1]) = 4;
        if (SHIBYTE(v221) < 0)
        {
          sub_20E860C04(&v213, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v213 = __dst;
          v214 = v221;
        }
        if (*(char *)(v3 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v3 + 32), *(_QWORD *)(v3 + 40));
        }
        else
        {
          v177 = *(_OWORD *)(v3 + 32);
          *(_QWORD *)v216 = *(_QWORD *)(v3 + 48);
          __p = v177;
        }
        sub_20ED55320();
        if (byte_254A5F57F < 0)
        {
          sub_20E860C04(&v216[8], (void *)xmmword_254A5F568, *((unint64_t *)&xmmword_254A5F568 + 1));
        }
        else
        {
          *(_OWORD *)&v216[8] = xmmword_254A5F568;
          v217 = unk_254A5F578;
        }
        v13 = v205;
        if ((unint64_t)v205 < v206)
          goto LABEL_34;
        goto LABEL_37;
      }
      v10 = (__int128 *)(v11 + 1);
      v7 = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 >= 4);
  }
  v212[0] = (void *)v5;
  LODWORD(v212[1]) = 2;
  if (SHIBYTE(v221) < 0)
  {
    sub_20E860C04(&v213, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v213 = __dst;
    v214 = v221;
  }
  if (*(char *)(v3 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v3 + 32), *(_QWORD *)(v3 + 40));
  }
  else
  {
    v12 = *(_OWORD *)(v3 + 32);
    *(_QWORD *)v216 = *(_QWORD *)(v3 + 48);
    __p = v12;
  }
  sub_20ED55320();
  if (byte_254A5F57F < 0)
  {
    sub_20E860C04(&v216[8], (void *)xmmword_254A5F568, *((unint64_t *)&xmmword_254A5F568 + 1));
  }
  else
  {
    *(_OWORD *)&v216[8] = xmmword_254A5F568;
    v217 = unk_254A5F578;
  }
  v13 = v205;
  if ((unint64_t)v205 >= v206)
  {
LABEL_37:
    v205 = sub_20EBA558C((char **)&v204, (uint64_t)v212);
    if (SHIBYTE(v217) < 0)
    {
      operator delete(*(void **)&v216[8]);
      if ((v216[7] & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((v216[7] & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
LABEL_35:
    operator delete((void *)__p);
    if ((SHIBYTE(v214) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_36;
  }
LABEL_34:
  v14 = v212[0];
  *((_DWORD *)v13 + 2) = v212[1];
  *(_QWORD *)v13 = v14;
  v15 = v213;
  *((_QWORD *)v13 + 4) = v214;
  *((_OWORD *)v13 + 1) = v15;
  v214 = 0;
  v213 = 0uLL;
  v16 = *(_QWORD *)v216;
  *(_OWORD *)(v13 + 40) = __p;
  *((_QWORD *)v13 + 7) = v16;
  *(_QWORD *)v216 = 0;
  __p = 0uLL;
  v17 = *(_OWORD *)&v216[8];
  *((_QWORD *)v13 + 10) = v217;
  *((_OWORD *)v13 + 4) = v17;
  *(_QWORD *)&v216[8] = 0;
  *(_QWORD *)&v216[16] = 0;
  v217 = 0;
  v205 = v13 + 88;
  if ((v216[7] & 0x80000000) != 0)
    goto LABEL_35;
LABEL_39:
  if (SHIBYTE(v214) < 0)
LABEL_36:
    operator delete((void *)v213);
LABEL_40:
  v18 = sub_20EBA4AA4();
  if (*((char *)v18 + 23) < 0)
  {
    sub_20E860C04(v210, (void *)*v18, v18[1]);
  }
  else
  {
    v19 = *(_OWORD *)v18;
    v211 = v18[2];
    *(_OWORD *)v210 = v19;
  }
  v20 = HIBYTE(v211);
  if (v211 >= 0)
  {
    v21 = v210;
  }
  else
  {
    v20 = (uint64_t)v210[1];
    v21 = (void **)v210[0];
  }
  if (v20 >= 18)
  {
    v22 = (char *)v21 + v20;
    v23 = v21;
    do
    {
      v24 = (char *)memchr(v23, 67, v20 - 17);
      if (!v24)
        break;
      if (*(_QWORD *)v24 == 0x456C656E6E616843
        && *((_QWORD *)v24 + 1) == 0x696F763C726F7272
        && *((_WORD *)v24 + 8) == 15972)
      {
        if (v24 != v22 && v24 - (char *)v21 != -1)
          goto LABEL_84;
        break;
      }
      v23 = (void **)(v24 + 1);
      v20 = v22 - (char *)v23;
    }
    while (v22 - (char *)v23 >= 18);
  }
  v212[0] = (void *)(v5 + 1);
  LODWORD(v212[1]) = 3;
  v27 = SHIBYTE(v221);
  if (v221 >= 0)
    v28 = HIBYTE(v221);
  else
    v28 = *((_QWORD *)&__dst + 1);
  v29 = v28 + 6;
  if (v28 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v29 >= 0x17)
  {
    v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v31 = v29 | 7;
    v32 = v31 + 1;
    v30 = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&v213 + 1) = v28 + 6;
    v214 = v32 | 0x8000000000000000;
    *(_QWORD *)&v213 = v30;
  }
  else
  {
    v214 = 0;
    v213 = 0uLL;
    v30 = &v213;
    HIBYTE(v214) = v28 + 6;
    if (!v28)
      goto LABEL_76;
  }
  if (v27 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v30, p_dst, v28);
LABEL_76:
  strcpy((char *)v30 + v28, ".Error");
  *(_WORD *)&v216[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v217) = 0;
  v34 = v205;
  if ((unint64_t)v205 >= v206)
  {
    v205 = sub_20EBA558C((char **)&v204, (uint64_t)v212);
    if (SHIBYTE(v217) < 0)
    {
      operator delete(*(void **)&v216[8]);
      if ((v216[7] & 0x80000000) == 0)
        goto LABEL_83;
    }
    else if ((v216[7] & 0x80000000) == 0)
    {
      goto LABEL_83;
    }
LABEL_78:
    operator delete((void *)__p);
    if (SHIBYTE(v214) < 0)
      goto LABEL_79;
    goto LABEL_84;
  }
  v35 = v212[0];
  *((_DWORD *)v205 + 2) = v212[1];
  *(_QWORD *)v34 = v35;
  v36 = v213;
  *((_QWORD *)v34 + 4) = v214;
  *((_OWORD *)v34 + 1) = v36;
  v214 = 0;
  v213 = 0uLL;
  v37 = *(_QWORD *)v216;
  *(_OWORD *)(v34 + 40) = __p;
  *((_QWORD *)v34 + 7) = v37;
  *(_QWORD *)v216 = 0;
  __p = 0uLL;
  v38 = *(_OWORD *)&v216[8];
  *((_QWORD *)v34 + 10) = v217;
  *((_OWORD *)v34 + 4) = v38;
  *(_QWORD *)&v216[8] = 0;
  *(_QWORD *)&v216[16] = 0;
  v217 = 0;
  v205 = v34 + 88;
  if ((v216[7] & 0x80000000) != 0)
    goto LABEL_78;
LABEL_83:
  if (SHIBYTE(v214) < 0)
  {
LABEL_79:
    operator delete((void *)v213);
    v39 = *(std::__shared_weak_count **)(v3 + 136);
    if (!v39)
      goto LABEL_88;
    goto LABEL_85;
  }
LABEL_84:
  v39 = *(std::__shared_weak_count **)(v3 + 136);
  if (!v39)
  {
LABEL_88:
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v43 = 0;
    goto LABEL_103;
  }
LABEL_85:
  v40 = std::__shared_weak_count::lock(v39);
  v212[1] = v40;
  if (!v40)
    goto LABEL_88;
  v41 = v40;
  v42 = *(void **)(v3 + 128);
  v212[0] = v42;
  if (v42)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v42 + 24))(&v207);
  }
  else
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
  }
  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (v45)
  {
    v43 = v207;
    v46 = v208;
    if (v207 == v208)
      goto LABEL_103;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v43 = v207;
    v46 = v208;
    if (v207 == v208)
      goto LABEL_103;
  }
  do
  {
    v212[0] = (void *)v5;
    v212[1] = *v43;
    v214 = 0;
    v213 = 0uLL;
    v48 = v202;
    if ((unint64_t)v202 < v203)
    {
      *(_OWORD *)v202 = *(_OWORD *)v212;
      v47 = v213;
      *((_QWORD *)v48 + 4) = v214;
      *((_OWORD *)v48 + 1) = v47;
      v202 = v48 + 40;
    }
    else
    {
      v202 = sub_20EBA5F8C(&v201, (uint64_t)v212);
      if (SHIBYTE(v214) < 0)
        operator delete((void *)v213);
    }
    ++v43;
  }
  while (v43 != v46);
  v43 = v207;
LABEL_103:
  if (v43)
  {
    v208 = v43;
    operator delete(v43);
  }
  v49 = *(std::__shared_weak_count **)(v3 + 136);
  if (!v49 || (v50 = std::__shared_weak_count::lock(v49), (v212[1] = v50) == 0))
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v53 = 0;
    goto LABEL_124;
  }
  v51 = v50;
  v52 = *(void **)(v3 + 128);
  v212[0] = v52;
  if (v52)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v52 + 32))(&v207);
  }
  else
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
  }
  v54 = (unint64_t *)&v51->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
  {
    v53 = v207;
    v56 = v208;
    if (v207 == v208)
      goto LABEL_124;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    v53 = v207;
    v56 = v208;
    if (v207 == v208)
      goto LABEL_124;
  }
  v57 = (void *)(v5 + 1);
  do
  {
    v212[0] = v57;
    v212[1] = *v53;
    v214 = 0;
    v213 = 0uLL;
    v59 = v202;
    if ((unint64_t)v202 < v203)
    {
      *(_OWORD *)v202 = *(_OWORD *)v212;
      v58 = v213;
      *((_QWORD *)v59 + 4) = v214;
      *((_OWORD *)v59 + 1) = v58;
      v202 = v59 + 40;
    }
    else
    {
      v202 = sub_20EBA5F8C(&v201, (uint64_t)v212);
      if (SHIBYTE(v214) < 0)
        operator delete((void *)v213);
    }
    ++v53;
  }
  while (v53 != v56);
  v53 = v207;
LABEL_124:
  if (v53)
  {
    v208 = v53;
    operator delete(v53);
  }
  if (SHIBYTE(v211) < 0)
  {
    operator delete(v210[0]);
    if ((SHIBYTE(v219) & 0x80000000) == 0)
    {
LABEL_128:
      if ((SHIBYTE(v221) & 0x80000000) == 0)
        goto LABEL_129;
LABEL_133:
      operator delete((void *)__dst);
      if ((*(char *)(v3 + 199) & 0x80000000) == 0)
        goto LABEL_130;
LABEL_134:
      sub_20E860C04(&__dst, *(void **)(v3 + 176), *(_QWORD *)(v3 + 184));
      goto LABEL_135;
    }
  }
  else if ((SHIBYTE(v219) & 0x80000000) == 0)
  {
    goto LABEL_128;
  }
  operator delete((void *)v218);
  if (SHIBYTE(v221) < 0)
    goto LABEL_133;
LABEL_129:
  if (*(char *)(v3 + 199) < 0)
    goto LABEL_134;
LABEL_130:
  __dst = *(_OWORD *)(v3 + 176);
  v221 = *(_QWORD *)(v3 + 192);
LABEL_135:
  v60 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 264) + 48))(*(_QWORD *)(v3 + 264));
  v61 = atomic_load((unsigned __int8 *)&qword_254A5F2C8);
  if ((v61 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5F2C8))
    goto LABEL_136;
  sub_20ED554D8();
  v182 = byte_254A5F5DF;
  if (byte_254A5F5DF >= 0)
    v183 = byte_254A5F5DF;
  else
    v183 = qword_254A5F5D0;
  v184 = v183 + 1;
  if (v183 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v184 >= 0x17)
  {
    v193 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v184 | 7) != 0x17)
      v193 = v184 | 7;
    v194 = v193 + 1;
    v185 = (__int128 *)operator new(v193 + 1);
    *((_QWORD *)&xmmword_254A5F5B0 + 1) = v183 + 1;
    unk_254A5F5C0 = v194 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5F5B0 = v185;
    goto LABEL_493;
  }
  v185 = &xmmword_254A5F5B0;
  unk_254A5F5C0 = 0;
  xmmword_254A5F5B0 = 0uLL;
  byte_254A5F5C7 = v183 + 1;
  if (v183)
  {
LABEL_493:
    if (v182 >= 0)
      v195 = &qword_254A5F5C8;
    else
      v195 = (uint64_t *)qword_254A5F5C8;
    memmove(v185, v195, v183);
  }
  *(_WORD *)((char *)v185 + v183) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F5B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5F2C8);
LABEL_136:
  if (byte_254A5F5C7 < 0)
  {
    sub_20E860C04(&v218, (void *)xmmword_254A5F5B0, *((unint64_t *)&xmmword_254A5F5B0 + 1));
  }
  else
  {
    v218 = xmmword_254A5F5B0;
    v219 = unk_254A5F5C0;
  }
  v62 = HIBYTE(v219);
  if (v219 >= 0)
  {
    v63 = &v218;
  }
  else
  {
    v62 = *((_QWORD *)&v218 + 1);
    v63 = (__int128 *)v218;
  }
  if (v62 >= 4)
  {
    v64 = (char *)v63 + v62;
    v65 = v63;
    do
    {
      v66 = (char *)memchr(v65, 118, v62 - 3);
      if (!v66)
        break;
      if (*(_DWORD *)v66 == 1684631414)
      {
        if (v66 == v64 || v66 - (char *)v63 == -1)
          break;
        v212[0] = (void *)v60;
        LODWORD(v212[1]) = 4;
        if (SHIBYTE(v221) < 0)
        {
          sub_20E860C04(&v213, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v213 = __dst;
          v214 = v221;
        }
        if (*(char *)(v3 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v3 + 200), *(_QWORD *)(v3 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v3 + 200);
          *(_QWORD *)v216 = *(_QWORD *)(v3 + 216);
        }
        sub_20ED55C94();
        if (byte_254A5F6B7 < 0)
        {
          sub_20E860C04(&v216[8], (void *)xmmword_254A5F6A0, *((unint64_t *)&xmmword_254A5F6A0 + 1));
        }
        else
        {
          *(_OWORD *)&v216[8] = xmmword_254A5F6A0;
          v217 = unk_254A5F6B0;
        }
        v67 = v205;
        if ((unint64_t)v205 < v206)
          goto LABEL_162;
        goto LABEL_165;
      }
      v65 = (__int128 *)(v66 + 1);
      v62 = v64 - (char *)v65;
    }
    while (v64 - (char *)v65 >= 4);
  }
  v212[0] = (void *)v60;
  LODWORD(v212[1]) = 2;
  if (SHIBYTE(v221) < 0)
  {
    sub_20E860C04(&v213, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v213 = __dst;
    v214 = v221;
  }
  if (*(char *)(v3 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v3 + 200), *(_QWORD *)(v3 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v3 + 200);
    *(_QWORD *)v216 = *(_QWORD *)(v3 + 216);
  }
  sub_20ED55C94();
  if (byte_254A5F6B7 < 0)
  {
    sub_20E860C04(&v216[8], (void *)xmmword_254A5F6A0, *((unint64_t *)&xmmword_254A5F6A0 + 1));
  }
  else
  {
    *(_OWORD *)&v216[8] = xmmword_254A5F6A0;
    v217 = unk_254A5F6B0;
  }
  v67 = v205;
  if ((unint64_t)v205 >= v206)
  {
LABEL_165:
    v205 = sub_20EBA558C((char **)&v204, (uint64_t)v212);
    if (SHIBYTE(v217) < 0)
    {
      operator delete(*(void **)&v216[8]);
      if ((v216[7] & 0x80000000) == 0)
        goto LABEL_167;
    }
    else if ((v216[7] & 0x80000000) == 0)
    {
      goto LABEL_167;
    }
LABEL_163:
    operator delete((void *)__p);
    if ((SHIBYTE(v214) & 0x80000000) == 0)
      goto LABEL_168;
    goto LABEL_164;
  }
LABEL_162:
  v68 = v212[0];
  *((_DWORD *)v67 + 2) = v212[1];
  *(_QWORD *)v67 = v68;
  v69 = v213;
  *((_QWORD *)v67 + 4) = v214;
  *((_OWORD *)v67 + 1) = v69;
  v214 = 0;
  v213 = 0uLL;
  v70 = *(_QWORD *)v216;
  *(_OWORD *)(v67 + 40) = __p;
  *((_QWORD *)v67 + 7) = v70;
  *(_QWORD *)v216 = 0;
  __p = 0uLL;
  v71 = *(_OWORD *)&v216[8];
  *((_QWORD *)v67 + 10) = v217;
  *((_OWORD *)v67 + 4) = v71;
  *(_QWORD *)&v216[8] = 0;
  *(_QWORD *)&v216[16] = 0;
  v217 = 0;
  v205 = v67 + 88;
  if ((v216[7] & 0x80000000) != 0)
    goto LABEL_163;
LABEL_167:
  if (SHIBYTE(v214) < 0)
LABEL_164:
    operator delete((void *)v213);
LABEL_168:
  v72 = sub_20EBA4AA4();
  if (*((char *)v72 + 23) < 0)
  {
    sub_20E860C04(v210, (void *)*v72, v72[1]);
  }
  else
  {
    v73 = *(_OWORD *)v72;
    v211 = v72[2];
    *(_OWORD *)v210 = v73;
  }
  v74 = HIBYTE(v211);
  if (v211 >= 0)
  {
    v75 = v210;
  }
  else
  {
    v74 = (uint64_t)v210[1];
    v75 = (void **)v210[0];
  }
  if (v74 >= 18)
  {
    v76 = (char *)v75 + v74;
    v77 = v75;
    do
    {
      v78 = (char *)memchr(v77, 67, v74 - 17);
      if (!v78)
        break;
      if (*(_QWORD *)v78 == 0x456C656E6E616843
        && *((_QWORD *)v78 + 1) == 0x696F763C726F7272
        && *((_WORD *)v78 + 8) == 15972)
      {
        if (v78 != v76 && v78 - (char *)v75 != -1)
          goto LABEL_212;
        break;
      }
      v77 = (void **)(v78 + 1);
      v74 = v76 - (char *)v77;
    }
    while (v76 - (char *)v77 >= 18);
  }
  v212[0] = (void *)(v60 + 1);
  LODWORD(v212[1]) = 3;
  v81 = SHIBYTE(v221);
  if (v221 >= 0)
    v82 = HIBYTE(v221);
  else
    v82 = *((_QWORD *)&__dst + 1);
  v83 = v82 + 6;
  if (v82 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v83 >= 0x17)
  {
    v85 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17)
      v85 = v83 | 7;
    v86 = v85 + 1;
    v84 = (__int128 *)operator new(v85 + 1);
    *((_QWORD *)&v213 + 1) = v82 + 6;
    v214 = v86 | 0x8000000000000000;
    *(_QWORD *)&v213 = v84;
  }
  else
  {
    v214 = 0;
    v213 = 0uLL;
    v84 = &v213;
    HIBYTE(v214) = v82 + 6;
    if (!v82)
      goto LABEL_204;
  }
  if (v81 >= 0)
    v87 = &__dst;
  else
    v87 = (__int128 *)__dst;
  memmove(v84, v87, v82);
LABEL_204:
  strcpy((char *)v84 + v82, ".Error");
  *(_WORD *)&v216[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v217) = 0;
  v88 = v205;
  if ((unint64_t)v205 >= v206)
  {
    v205 = sub_20EBA558C((char **)&v204, (uint64_t)v212);
    if (SHIBYTE(v217) < 0)
    {
      operator delete(*(void **)&v216[8]);
      if ((v216[7] & 0x80000000) == 0)
        goto LABEL_211;
    }
    else if ((v216[7] & 0x80000000) == 0)
    {
      goto LABEL_211;
    }
LABEL_206:
    operator delete((void *)__p);
    if (SHIBYTE(v214) < 0)
      goto LABEL_207;
    goto LABEL_212;
  }
  v89 = v212[0];
  *((_DWORD *)v205 + 2) = v212[1];
  *(_QWORD *)v88 = v89;
  v90 = v213;
  *((_QWORD *)v88 + 4) = v214;
  *((_OWORD *)v88 + 1) = v90;
  v214 = 0;
  v213 = 0uLL;
  v91 = *(_QWORD *)v216;
  *(_OWORD *)(v88 + 40) = __p;
  *((_QWORD *)v88 + 7) = v91;
  *(_QWORD *)v216 = 0;
  __p = 0uLL;
  v92 = *(_OWORD *)&v216[8];
  *((_QWORD *)v88 + 10) = v217;
  *((_OWORD *)v88 + 4) = v92;
  *(_QWORD *)&v216[8] = 0;
  *(_QWORD *)&v216[16] = 0;
  v217 = 0;
  v205 = v88 + 88;
  if ((v216[7] & 0x80000000) != 0)
    goto LABEL_206;
LABEL_211:
  if (SHIBYTE(v214) < 0)
  {
LABEL_207:
    operator delete((void *)v213);
    v93 = *(std::__shared_weak_count **)(v3 + 304);
    if (!v93)
      goto LABEL_216;
    goto LABEL_213;
  }
LABEL_212:
  v93 = *(std::__shared_weak_count **)(v3 + 304);
  if (!v93)
  {
LABEL_216:
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v97 = 0;
    goto LABEL_233;
  }
LABEL_213:
  v94 = std::__shared_weak_count::lock(v93);
  v212[1] = v94;
  if (!v94)
    goto LABEL_216;
  v95 = v94;
  v96 = *(void **)(v3 + 296);
  v212[0] = v96;
  if (v96)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v96 + 24))(&v207);
  }
  else
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
  }
  v98 = (unint64_t *)&v95->__shared_owners_;
  do
    v99 = __ldaxr(v98);
  while (__stlxr(v99 - 1, v98));
  if (v99)
  {
    v97 = v207;
    v100 = v208;
    if (v207 == v208)
      goto LABEL_233;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
    v97 = v207;
    v100 = v208;
    if (v207 == v208)
      goto LABEL_233;
  }
  do
  {
    v212[0] = (void *)v60;
    v212[1] = *v97;
    v214 = 0;
    v213 = 0uLL;
    v102 = v202;
    if ((unint64_t)v202 < v203)
    {
      *(_OWORD *)v202 = *(_OWORD *)v212;
      v101 = v213;
      *((_QWORD *)v102 + 4) = v214;
      *((_OWORD *)v102 + 1) = v101;
      v202 = v102 + 40;
    }
    else
    {
      v202 = sub_20EBA5F8C(&v201, (uint64_t)v212);
      if (SHIBYTE(v214) < 0)
        operator delete((void *)v213);
    }
    ++v97;
  }
  while (v97 != v100);
  v97 = v207;
LABEL_233:
  if (v97)
  {
    v208 = v97;
    operator delete(v97);
  }
  v103 = *(std::__shared_weak_count **)(v3 + 304);
  if (!v103 || (v104 = std::__shared_weak_count::lock(v103), (v212[1] = v104) == 0))
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v107 = 0;
    goto LABEL_254;
  }
  v105 = v104;
  v106 = *(void **)(v3 + 296);
  v212[0] = v106;
  if (v106)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v106 + 32))(&v207);
  }
  else
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
  }
  v108 = (unint64_t *)&v105->__shared_owners_;
  do
    v109 = __ldaxr(v108);
  while (__stlxr(v109 - 1, v108));
  if (v109)
  {
    v107 = v207;
    v110 = v208;
    if (v207 == v208)
      goto LABEL_254;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
    v107 = v207;
    v110 = v208;
    if (v207 == v208)
      goto LABEL_254;
  }
  v111 = (void *)(v60 + 1);
  do
  {
    v212[0] = v111;
    v212[1] = *v107;
    v214 = 0;
    v213 = 0uLL;
    v113 = v202;
    if ((unint64_t)v202 < v203)
    {
      *(_OWORD *)v202 = *(_OWORD *)v212;
      v112 = v213;
      *((_QWORD *)v113 + 4) = v214;
      *((_OWORD *)v113 + 1) = v112;
      v202 = v113 + 40;
    }
    else
    {
      v202 = sub_20EBA5F8C(&v201, (uint64_t)v212);
      if (SHIBYTE(v214) < 0)
        operator delete((void *)v213);
    }
    ++v107;
  }
  while (v107 != v110);
  v107 = v207;
LABEL_254:
  if (v107)
  {
    v208 = v107;
    operator delete(v107);
  }
  if (SHIBYTE(v211) < 0)
  {
    operator delete(v210[0]);
    if ((SHIBYTE(v219) & 0x80000000) == 0)
    {
LABEL_258:
      if ((SHIBYTE(v221) & 0x80000000) == 0)
        goto LABEL_259;
LABEL_263:
      operator delete((void *)__dst);
      if ((*(char *)(v3 + 367) & 0x80000000) == 0)
        goto LABEL_260;
LABEL_264:
      sub_20E860C04(&__dst, *(void **)(v3 + 344), *(_QWORD *)(v3 + 352));
      goto LABEL_265;
    }
  }
  else if ((SHIBYTE(v219) & 0x80000000) == 0)
  {
    goto LABEL_258;
  }
  operator delete((void *)v218);
  if (SHIBYTE(v221) < 0)
    goto LABEL_263;
LABEL_259:
  if (*(char *)(v3 + 367) < 0)
    goto LABEL_264;
LABEL_260:
  __dst = *(_OWORD *)(v3 + 344);
  v221 = *(_QWORD *)(v3 + 360);
LABEL_265:
  v114 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 432) + 48))(*(_QWORD *)(v3 + 432));
  v115 = atomic_load((unsigned __int8 *)&qword_254A5F330);
  if ((v115 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5F330))
    goto LABEL_266;
  sub_20ED55E4C();
  v186 = byte_254A5F717;
  if (byte_254A5F717 >= 0)
    v187 = byte_254A5F717;
  else
    v187 = qword_254A5F708;
  v188 = v187 + 1;
  if (v187 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v188 >= 0x17)
  {
    v196 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v188 | 7) != 0x17)
      v196 = v188 | 7;
    v197 = v196 + 1;
    v189 = (__int128 *)operator new(v196 + 1);
    *((_QWORD *)&xmmword_254A5F6E8 + 1) = v187 + 1;
    unk_254A5F6F8 = v197 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5F6E8 = v189;
    goto LABEL_501;
  }
  v189 = &xmmword_254A5F6E8;
  unk_254A5F6F8 = 0;
  xmmword_254A5F6E8 = 0uLL;
  byte_254A5F6FF = v187 + 1;
  if (v187)
  {
LABEL_501:
    if (v186 >= 0)
      v198 = &qword_254A5F700;
    else
      v198 = (uint64_t *)qword_254A5F700;
    memmove(v189, v198, v187);
  }
  *(_WORD *)((char *)v189 + v187) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F6E8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5F330);
LABEL_266:
  if (byte_254A5F6FF < 0)
  {
    sub_20E860C04(&v218, (void *)xmmword_254A5F6E8, *((unint64_t *)&xmmword_254A5F6E8 + 1));
  }
  else
  {
    v218 = xmmword_254A5F6E8;
    v219 = unk_254A5F6F8;
  }
  v116 = HIBYTE(v219);
  if (v219 >= 0)
  {
    v117 = &v218;
  }
  else
  {
    v116 = *((_QWORD *)&v218 + 1);
    v117 = (__int128 *)v218;
  }
  if (v116 >= 4)
  {
    v118 = (char *)v117 + v116;
    v119 = v117;
    do
    {
      v120 = (char *)memchr(v119, 118, v116 - 3);
      if (!v120)
        break;
      if (*(_DWORD *)v120 == 1684631414)
      {
        if (v120 == v118 || v120 - (char *)v117 == -1)
          break;
        v212[0] = (void *)v114;
        LODWORD(v212[1]) = 4;
        if (SHIBYTE(v221) < 0)
        {
          sub_20E860C04(&v213, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v213 = __dst;
          v214 = v221;
        }
        if (*(char *)(v3 + 391) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v3 + 368), *(_QWORD *)(v3 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v3 + 368);
          *(_QWORD *)v216 = *(_QWORD *)(v3 + 384);
        }
        sub_20ED56D64();
        if (byte_254A5F897 < 0)
        {
          sub_20E860C04(&v216[8], (void *)xmmword_254A5F880, *((unint64_t *)&xmmword_254A5F880 + 1));
        }
        else
        {
          *(_OWORD *)&v216[8] = xmmword_254A5F880;
          v217 = unk_254A5F890;
        }
        v121 = v205;
        if ((unint64_t)v205 < v206)
          goto LABEL_292;
        goto LABEL_295;
      }
      v119 = (__int128 *)(v120 + 1);
      v116 = v118 - (char *)v119;
    }
    while (v118 - (char *)v119 >= 4);
  }
  v212[0] = (void *)v114;
  LODWORD(v212[1]) = 2;
  if (SHIBYTE(v221) < 0)
  {
    sub_20E860C04(&v213, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v213 = __dst;
    v214 = v221;
  }
  if (*(char *)(v3 + 391) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v3 + 368), *(_QWORD *)(v3 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v3 + 368);
    *(_QWORD *)v216 = *(_QWORD *)(v3 + 384);
  }
  sub_20ED56D64();
  if (byte_254A5F897 < 0)
  {
    sub_20E860C04(&v216[8], (void *)xmmword_254A5F880, *((unint64_t *)&xmmword_254A5F880 + 1));
  }
  else
  {
    *(_OWORD *)&v216[8] = xmmword_254A5F880;
    v217 = unk_254A5F890;
  }
  v121 = v205;
  if ((unint64_t)v205 >= v206)
  {
LABEL_295:
    v205 = sub_20EBA558C((char **)&v204, (uint64_t)v212);
    if (SHIBYTE(v217) < 0)
    {
      operator delete(*(void **)&v216[8]);
      if ((v216[7] & 0x80000000) == 0)
        goto LABEL_297;
    }
    else if ((v216[7] & 0x80000000) == 0)
    {
      goto LABEL_297;
    }
LABEL_293:
    operator delete((void *)__p);
    if ((SHIBYTE(v214) & 0x80000000) == 0)
      goto LABEL_298;
    goto LABEL_294;
  }
LABEL_292:
  v122 = v212[0];
  *((_DWORD *)v121 + 2) = v212[1];
  *(_QWORD *)v121 = v122;
  v123 = v213;
  *((_QWORD *)v121 + 4) = v214;
  *((_OWORD *)v121 + 1) = v123;
  v214 = 0;
  v213 = 0uLL;
  v124 = *(_QWORD *)v216;
  *(_OWORD *)(v121 + 40) = __p;
  *((_QWORD *)v121 + 7) = v124;
  *(_QWORD *)v216 = 0;
  __p = 0uLL;
  v125 = *(_OWORD *)&v216[8];
  *((_QWORD *)v121 + 10) = v217;
  *((_OWORD *)v121 + 4) = v125;
  *(_QWORD *)&v216[8] = 0;
  *(_QWORD *)&v216[16] = 0;
  v217 = 0;
  v205 = v121 + 88;
  if ((v216[7] & 0x80000000) != 0)
    goto LABEL_293;
LABEL_297:
  if (SHIBYTE(v214) < 0)
LABEL_294:
    operator delete((void *)v213);
LABEL_298:
  v126 = sub_20EBA4AA4();
  if (*((char *)v126 + 23) < 0)
  {
    sub_20E860C04(v210, (void *)*v126, v126[1]);
  }
  else
  {
    v127 = *(_OWORD *)v126;
    v211 = v126[2];
    *(_OWORD *)v210 = v127;
  }
  v128 = HIBYTE(v211);
  if (v211 >= 0)
  {
    v129 = v210;
  }
  else
  {
    v128 = (uint64_t)v210[1];
    v129 = (void **)v210[0];
  }
  if (v128 >= 18)
  {
    v130 = (char *)v129 + v128;
    v131 = v129;
    do
    {
      v132 = (char *)memchr(v131, 67, v128 - 17);
      if (!v132)
        break;
      if (*(_QWORD *)v132 == 0x456C656E6E616843
        && *((_QWORD *)v132 + 1) == 0x696F763C726F7272
        && *((_WORD *)v132 + 8) == 15972)
      {
        if (v132 != v130 && v132 - (char *)v129 != -1)
          goto LABEL_342;
        break;
      }
      v131 = (void **)(v132 + 1);
      v128 = v130 - (char *)v131;
    }
    while (v130 - (char *)v131 >= 18);
  }
  v212[0] = (void *)(v114 + 1);
  LODWORD(v212[1]) = 3;
  v135 = SHIBYTE(v221);
  if (v221 >= 0)
    v136 = HIBYTE(v221);
  else
    v136 = *((_QWORD *)&__dst + 1);
  v137 = v136 + 6;
  if (v136 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v137 >= 0x17)
  {
    v139 = (v137 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v137 | 7) != 0x17)
      v139 = v137 | 7;
    v140 = v139 + 1;
    v138 = (__int128 *)operator new(v139 + 1);
    *((_QWORD *)&v213 + 1) = v136 + 6;
    v214 = v140 | 0x8000000000000000;
    *(_QWORD *)&v213 = v138;
  }
  else
  {
    v214 = 0;
    v213 = 0uLL;
    v138 = &v213;
    HIBYTE(v214) = v136 + 6;
    if (!v136)
      goto LABEL_334;
  }
  if (v135 >= 0)
    v141 = &__dst;
  else
    v141 = (__int128 *)__dst;
  memmove(v138, v141, v136);
LABEL_334:
  strcpy((char *)v138 + v136, ".Error");
  *(_WORD *)&v216[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v217) = 0;
  v142 = v205;
  if ((unint64_t)v205 >= v206)
  {
    v205 = sub_20EBA558C((char **)&v204, (uint64_t)v212);
    if (SHIBYTE(v217) < 0)
    {
      operator delete(*(void **)&v216[8]);
      if ((v216[7] & 0x80000000) == 0)
        goto LABEL_341;
    }
    else if ((v216[7] & 0x80000000) == 0)
    {
      goto LABEL_341;
    }
LABEL_336:
    operator delete((void *)__p);
    if (SHIBYTE(v214) < 0)
      goto LABEL_337;
    goto LABEL_342;
  }
  v143 = v212[0];
  *((_DWORD *)v205 + 2) = v212[1];
  *(_QWORD *)v142 = v143;
  v144 = v213;
  *((_QWORD *)v142 + 4) = v214;
  *((_OWORD *)v142 + 1) = v144;
  v214 = 0;
  v213 = 0uLL;
  v145 = *(_QWORD *)v216;
  *(_OWORD *)(v142 + 40) = __p;
  *((_QWORD *)v142 + 7) = v145;
  *(_QWORD *)v216 = 0;
  __p = 0uLL;
  v146 = *(_OWORD *)&v216[8];
  *((_QWORD *)v142 + 10) = v217;
  *((_OWORD *)v142 + 4) = v146;
  *(_QWORD *)&v216[8] = 0;
  *(_QWORD *)&v216[16] = 0;
  v217 = 0;
  v205 = v142 + 88;
  if ((v216[7] & 0x80000000) != 0)
    goto LABEL_336;
LABEL_341:
  if (SHIBYTE(v214) < 0)
  {
LABEL_337:
    operator delete((void *)v213);
    v147 = *(std::__shared_weak_count **)(v3 + 472);
    if (!v147)
      goto LABEL_346;
    goto LABEL_343;
  }
LABEL_342:
  v147 = *(std::__shared_weak_count **)(v3 + 472);
  if (!v147)
  {
LABEL_346:
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v151 = v200;
    v152 = 0;
    goto LABEL_363;
  }
LABEL_343:
  v148 = std::__shared_weak_count::lock(v147);
  v212[1] = v148;
  if (!v148)
    goto LABEL_346;
  v149 = v148;
  v150 = *(void **)(v3 + 464);
  v212[0] = v150;
  v151 = v200;
  if (v150)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v150 + 24))(&v207);
  }
  else
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
  }
  v153 = (unint64_t *)&v149->__shared_owners_;
  do
    v154 = __ldaxr(v153);
  while (__stlxr(v154 - 1, v153));
  if (v154)
  {
    v152 = v207;
    v155 = v208;
    if (v207 == v208)
      goto LABEL_363;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
    std::__shared_weak_count::__release_weak(v149);
    v152 = v207;
    v155 = v208;
    if (v207 == v208)
      goto LABEL_363;
  }
  do
  {
    v212[0] = (void *)v114;
    v212[1] = *v152;
    v214 = 0;
    v213 = 0uLL;
    v157 = v202;
    if ((unint64_t)v202 < v203)
    {
      *(_OWORD *)v202 = *(_OWORD *)v212;
      v156 = v213;
      *((_QWORD *)v157 + 4) = v214;
      *((_OWORD *)v157 + 1) = v156;
      v202 = v157 + 40;
    }
    else
    {
      v202 = sub_20EBA5F8C(&v201, (uint64_t)v212);
      if (SHIBYTE(v214) < 0)
        operator delete((void *)v213);
    }
    ++v152;
  }
  while (v152 != v155);
  v152 = v207;
LABEL_363:
  if (v152)
  {
    v208 = v152;
    operator delete(v152);
  }
  v158 = *(std::__shared_weak_count **)(v3 + 472);
  if (!v158 || (v159 = std::__shared_weak_count::lock(v158), (v212[1] = v159) == 0))
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v162 = 0;
    goto LABEL_384;
  }
  v160 = v159;
  v161 = *(void **)(v3 + 464);
  v212[0] = v161;
  if (v161)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v161 + 32))(&v207);
  }
  else
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
  }
  v163 = (unint64_t *)&v160->__shared_owners_;
  do
    v164 = __ldaxr(v163);
  while (__stlxr(v164 - 1, v163));
  if (v164)
  {
    v162 = v207;
    v165 = v208;
    if (v207 == v208)
      goto LABEL_384;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
    std::__shared_weak_count::__release_weak(v160);
    v162 = v207;
    v165 = v208;
    if (v207 == v208)
      goto LABEL_384;
  }
  v166 = (void *)(v114 + 1);
  do
  {
    v212[0] = v166;
    v212[1] = *v162;
    v214 = 0;
    v213 = 0uLL;
    v168 = v202;
    if ((unint64_t)v202 < v203)
    {
      *(_OWORD *)v202 = *(_OWORD *)v212;
      v167 = v213;
      *((_QWORD *)v168 + 4) = v214;
      *((_OWORD *)v168 + 1) = v167;
      v202 = v168 + 40;
    }
    else
    {
      v202 = sub_20EBA5F8C(&v201, (uint64_t)v212);
      if (SHIBYTE(v214) < 0)
        operator delete((void *)v213);
    }
    ++v162;
  }
  while (v162 != v165);
  v162 = v207;
LABEL_384:
  if (v162)
  {
    v208 = v162;
    operator delete(v162);
  }
  if (SHIBYTE(v211) < 0)
  {
    operator delete(v210[0]);
    if ((SHIBYTE(v219) & 0x80000000) == 0)
    {
LABEL_388:
      if ((SHIBYTE(v221) & 0x80000000) == 0)
        goto LABEL_389;
LABEL_393:
      operator delete((void *)__dst);
      if ((*(char *)(v151 + 31) & 0x80000000) == 0)
        goto LABEL_390;
      goto LABEL_394;
    }
  }
  else if ((SHIBYTE(v219) & 0x80000000) == 0)
  {
    goto LABEL_388;
  }
  operator delete((void *)v218);
  if (SHIBYTE(v221) < 0)
    goto LABEL_393;
LABEL_389:
  if ((*(char *)(v151 + 31) & 0x80000000) == 0)
  {
LABEL_390:
    v169 = *(_OWORD *)(v151 + 8);
    *(_QWORD *)&v213 = *(_QWORD *)(v151 + 24);
    *(_OWORD *)v212 = v169;
    goto LABEL_395;
  }
LABEL_394:
  sub_20E860C04(v212, *(void **)(v151 + 8), *(_QWORD *)(v151 + 16));
LABEL_395:
  v170 = *(_QWORD *)(v151 + 56) != 0;
  if (*(char *)(v151 + 55) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(v151 + 32), *(_QWORD *)(v151 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(v151 + 32);
    v221 = *(_QWORD *)(v151 + 48);
  }
  sub_20EBA690C((uint64_t)v222, (__int128 *)v212, v170, (uint64_t *)&v204, (uint64_t *)&v201, &__dst);
  if ((SHIBYTE(v221) & 0x80000000) == 0)
  {
    if ((SBYTE7(v213) & 0x80000000) == 0)
      goto LABEL_400;
LABEL_410:
    operator delete(v212[0]);
    v171 = (char *)v201;
    if (v201)
      goto LABEL_401;
LABEL_411:
    v173 = (char *)v204;
    if (v204)
      goto LABEL_412;
    goto LABEL_424;
  }
  operator delete((void *)__dst);
  if (SBYTE7(v213) < 0)
    goto LABEL_410;
LABEL_400:
  v171 = (char *)v201;
  if (!v201)
    goto LABEL_411;
LABEL_401:
  v172 = v202;
  if (v202 == v171)
  {
    v202 = v171;
    operator delete(v171);
    v173 = (char *)v204;
    if (!v204)
      goto LABEL_424;
LABEL_412:
    v174 = v205;
    v175 = v173;
    if (v205 == v173)
    {
LABEL_423:
      v205 = v173;
      operator delete(v175);
      goto LABEL_424;
    }
    while (1)
    {
      while (*(v174 - 1) < 0)
      {
        operator delete(*((void **)v174 - 3));
        if (*(v174 - 25) < 0)
          goto LABEL_414;
LABEL_420:
        if ((*(v174 - 49) & 0x80000000) == 0)
          goto LABEL_415;
LABEL_421:
        operator delete(*((void **)v174 - 9));
        v174 -= 88;
        if (v174 == v173)
        {
LABEL_422:
          v175 = v204;
          goto LABEL_423;
        }
      }
      if ((*(v174 - 25) & 0x80000000) == 0)
        goto LABEL_420;
LABEL_414:
      operator delete(*((void **)v174 - 6));
      if (*(v174 - 49) < 0)
        goto LABEL_421;
LABEL_415:
      v174 -= 88;
      if (v174 == v173)
        goto LABEL_422;
    }
  }
  do
  {
    if (*(v172 - 1) < 0)
      operator delete(*((void **)v172 - 3));
    v172 -= 40;
  }
  while (v172 != v171);
  v202 = v171;
  operator delete(v201);
  v173 = (char *)v204;
  if (v204)
    goto LABEL_412;
LABEL_424:
  sub_20EBA4824(a2, (uint64_t)v222, 1uLL);
  return sub_20EBA8C18((uint64_t)v222);
}

