uint64_t sub_20FD881F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float64x2_t v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  double v21;
  float64x2_t v22;
  double v25;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int8x16_t v36;
  double v37;
  float64x2_t v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  char v44;
  double *v45;
  double *v46;
  double *v47;
  double v48;
  double v49;
  unint64_t v50;
  double *v51;
  uint64_t v52;
  double *v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  unint64_t v58;
  uint64_t v59;
  float64x2_t *v60;
  uint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  double v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _QWORD *v83;
  int64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float64x2_t *v91;
  float64x2_t *v92;
  uint64_t v93;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  void *__p;
  uint64_t v102;
  char *v103;
  double *v104;
  double *v105;
  double *v106;
  std::runtime_error v107;
  float64x2_t v108;
  void *v109;
  void *v110;
  char v111;
  __int128 v112;
  __int128 v113;
  int v114;

  v112 = 0u;
  v113 = 0u;
  v114 = 733222980;
  kdebug_trace();
  sub_20FD88914((uint64_t)&v107, a1, a2, a3, v8, v9, v10, v11, v12);
  if (v111)
  {
    *(_QWORD *)&_Q1.f64[1] = v107.__imp_.__imp_;
    _D3 = v107.__imp_.__imp_;
    __asm { FMLA            D2, D3, V1.D[1] }
    _D3 = v108.f64[1];
    __asm { FMLA            D2, D3, V0.D[1] }
    v21 = 1.0 / sqrt(_D2);
    v22 = vmulq_n_f64(v108, v21);
    _Q2 = vmulq_n_f64((float64x2_t)v107, v21);
    _Q1.f64[0] = _Q2.f64[1];
    v96 = _Q2;
    v97 = v22;
    __asm { FMLA            D0, D1, V2.D[1] }
    v25 = sqrt(vmlad_n_f64(_D0, v22.f64[0], v22.f64[0]));
    _Q1.f64[0] = 1.0 / v25;
    if (v25 == 0.0)
      _Q1.f64[0] = 1.0;
    v95 = _Q1;
    if (v25 == 0.0)
      v27 = 1.0;
    else
      v27 = v25;
    v29 = *a2;
    v28 = a2[1];
    v99 = a4;
    v100 = a2;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v30 = v28 - v29;
    v31 = (v28 - v29) >> 3;
    v98 = a1;
    if (v28 == v29)
    {
      v40 = 0;
      v32 = 0;
      v45 = 0;
      v46 = 0;
    }
    else
    {
      if (v30 < 0)
        sub_20E867F44();
      v32 = (double *)operator new(v28 - v29);
      v104 = v32;
      v106 = &v32[v31];
      bzero(v32, v28 - v29);
      v36 = (int8x16_t)vmulq_n_f64(v96, v95.f64[0]);
      *(_QWORD *)&v37 = vextq_s8(v36, v36, 8uLL).u64[0];
      v38 = vmulq_f64(v97, v95);
      v39 = 0;
      v40 = (double *)((char *)v32 + v30);
      v105 = (double *)((char *)v32 + v30);
      v41 = *a1;
      if (v31 <= 1)
        v42 = 1;
      else
        v42 = (v28 - v29) >> 3;
      do
      {
        v43 = (float *)(v41 + 12 * *(_QWORD *)(v29 + 8 * v39));
        v35.f64[0] = v43[2];
        v32[v39++] = fabs(*v43 * *(double *)v36.i64 + v43[1] * v37 + v35.f64[0] * v38.f64[0] + v97.f64[1] / v27);
      }
      while (v42 != v39);
      if (v32 < v40)
      {
        v44 = 1;
        v45 = (double *)((char *)v32 + v30);
        v46 = v32;
        v47 = v32 + 1;
        v48 = *v32;
        v49 = *v32;
        if (v32 + 1 == v40)
        {
LABEL_27:
          if ((v44 & 1) == 0)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Statistics.h", 561, (uint64_t)"begin < end", 11, (uint64_t)"Standard deviation is undefined for empty ranges", 48, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v48 = *v46;
          }
          v56 = (double)(v40 - v32);
          v34.f64[0] = v49 / v56;
          v57 = (v48 - v34.f64[0]) * (v48 - v34.f64[0]);
          if (v47 != v45)
          {
            v58 = (char *)v45 - (char *)v46 - 16;
            if (v58 < 0x18)
              goto LABEL_93;
            v59 = (v58 >> 3) + 1;
            v47 += v59 & 0x3FFFFFFFFFFFFFFCLL;
            v35 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34.f64[0], 0);
            v60 = (float64x2_t *)(v46 + 3);
            v61 = v59 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v62 = vsubq_f64(v60[-1], v35);
              v63 = vsubq_f64(*v60, v35);
              v38 = vmulq_f64(v62, v62);
              v64 = vmulq_f64(v63, v63);
              v57 = v57 + v38.f64[0] + v38.f64[1] + v64.f64[0] + v64.f64[1];
              v60 += 2;
              v61 -= 4;
            }
            while (v61);
            if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                v65 = *v47++;
                v35.f64[0] = (v65 - v34.f64[0]) * (v65 - v34.f64[0]);
                v57 = v57 + v35.f64[0];
              }
              while (v47 != v45);
            }
          }
          v33.f64[0] = sqrt(v57 / v56);
          v66.f64[0] = *(float64_t *)(a3 + 16);
          if (v33.f64[0] >= v66.f64[0])
            v67 = v33.f64[0];
          else
            v67 = *(double *)(a3 + 16);
          __p = 0;
          v102 = 0;
          v103 = 0;
          v68 = v100;
          v69 = v100[1];
          v70 = v69 - *v100;
          if (v69 == *v100)
          {
            v71 = 0;
            if (v28 == v29)
              goto LABEL_79;
          }
          else
          {
            if (v70 < 0)
              sub_20E867F44();
            v71 = (char *)operator new(v69 - *v100);
            __p = v71;
            v102 = (uint64_t)v71;
            v103 = &v71[8 * (v70 >> 3)];
            if (v28 == v29)
            {
LABEL_79:
              sub_20FD88914(v99, v98, (uint64_t *)&__p, a3, v33, v66.f64[0], v34, v35, v38);
              if (__p)
              {
                v102 = (uint64_t)__p;
                operator delete(__p);
              }
              v105 = v46;
              operator delete(v46);
              if (v111)
                goto LABEL_82;
LABEL_17:
              ((void (*)(std::runtime_error *))v107.~runtime_error)(&v107);
              return kdebug_trace();
            }
          }
          v72 = 0;
          if (v31 <= 1)
            v73 = 1;
          else
            v73 = v31;
          while (1)
          {
            v33.f64[0] = v46[v72];
            v66.f64[0] = v67 * *(double *)a3;
            if (v33.f64[0] > v66.f64[0])
              goto LABEL_49;
            v75 = *v68;
            if (v71 >= v103)
              break;
            *(_QWORD *)v71 = *(_QWORD *)(v75 + 8 * v72);
            v74 = (uint64_t)(v71 + 8);
LABEL_48:
            v102 = v74;
            v71 = (char *)v74;
LABEL_49:
            if (++v72 == v73)
              goto LABEL_79;
          }
          v76 = (char *)__p;
          v77 = v71 - (_BYTE *)__p;
          v78 = (v71 - (_BYTE *)__p) >> 3;
          v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 61)
            sub_20E867F44();
          v80 = v103 - (_BYTE *)__p;
          if ((v103 - (_BYTE *)__p) >> 2 > v79)
            v79 = v80 >> 2;
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
            v81 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v81 = v79;
          if (v81)
          {
            if (v81 >> 61)
              sub_20E877A38();
            v82 = operator new(8 * v81);
            v83 = &v82[8 * v78];
            *v83 = *(_QWORD *)(v75 + 8 * v72);
            v74 = (uint64_t)(v83 + 1);
            v84 = v71 - v76;
            if (v71 == v76)
              goto LABEL_66;
          }
          else
          {
            v82 = 0;
            v83 = (_QWORD *)(8 * v78);
            *(_QWORD *)(8 * v78) = *(_QWORD *)(v75 + 8 * v72);
            v74 = 8 * v78 + 8;
            v84 = v71 - v76;
            if (v71 == v76)
              goto LABEL_66;
          }
          v85 = v84 - 8;
          if (v85 >= 0x168)
          {
            v88 = (v71 - 8 - v76) & 0xFFFFFFFFFFFFFFF8;
            if (&v82[v77 - 8 - v88] > &v82[v77 - 8])
            {
              v86 = v71;
            }
            else if (&v71[-v88 - 8] > v71 - 8)
            {
              v86 = v71;
            }
            else if ((unint64_t)(v71 - v82 - v77) >= 0x20)
            {
              v89 = (v85 >> 3) + 1;
              v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
              v86 = &v71[-v90];
              v83 = (_QWORD *)((char *)v83 - v90);
              v91 = (float64x2_t *)&v82[8 * v78 - 16];
              v92 = (float64x2_t *)(v71 - 16);
              v93 = v89 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v66 = v92[-1];
                v33 = *v92;
                v91[-1] = v66;
                *v91 = v33;
                v91 -= 2;
                v92 -= 2;
                v93 -= 4;
              }
              while (v93);
              if (v89 == (v89 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_66;
            }
            else
            {
              v86 = v71;
            }
          }
          else
          {
            v86 = v71;
          }
          do
          {
            v87 = *((_QWORD *)v86 - 1);
            v86 -= 8;
            *--v83 = v87;
          }
          while (v86 != v76);
LABEL_66:
          __p = v83;
          v102 = v74;
          v103 = &v82[8 * v81];
          if (v76)
            operator delete(v76);
          v68 = v100;
          goto LABEL_48;
        }
LABEL_22:
        v50 = (char *)v45 - (char *)v46 - 16;
        v49 = v48;
        v51 = v47;
        if (v50 < 8)
          goto LABEL_94;
        v52 = (v50 >> 3) + 1;
        v51 = &v47[v52 & 0x3FFFFFFFFFFFFFFELL];
        v53 = v46 + 2;
        v54 = v52 & 0x3FFFFFFFFFFFFFFELL;
        v49 = v48;
        do
        {
          v49 = v49 + *(v53 - 1) + *v53;
          v53 += 2;
          v54 -= 2;
        }
        while (v54);
        if (v52 != (v52 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_94:
          do
          {
            v55 = *v51++;
            v49 = v49 + v55;
          }
          while (v51 != v45);
        }
        goto LABEL_27;
      }
      v45 = (double *)((char *)v32 + v30);
      v46 = v32;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Statistics.h", 335, (uint64_t)"begin < end", 11, (uint64_t)"Mean is undefined for empty ranges", 34, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v44 = 0;
    v47 = v46 + 1;
    v48 = *v46;
    v49 = *v46;
    if (v46 + 1 == v45)
      goto LABEL_27;
    goto LABEL_22;
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 168) = 0;
  std::runtime_error::runtime_error((std::runtime_error *)a4, &v107);
  *(_QWORD *)a4 = &off_24CA06F70;
  *(_DWORD *)(a4 + 16) = LODWORD(v108.f64[0]);
  if (!v111)
    goto LABEL_17;
LABEL_82:
  if (v109)
  {
    v110 = v109;
    operator delete(v109);
  }
  return kdebug_trace();
}

void sub_20FD8889C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (__p)
    operator delete(__p);
  sub_20EE4551C((uint64_t)&a27);
  sub_20E8E69C4(v27 - 144);
  _Unwind_Resume(a1);
}

void sub_20FD88914(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, float64x2_t a5, double a6, float64x2_t a7, float64x2_t a8, float64x2_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string *p_p;
  uint64_t v16;
  float *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  unsigned int v24;
  std::string::size_type v25;
  float64x2_t v26;
  float *v27;
  unint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  float32x2_t *v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  std::string::size_type v35;
  float32x2_t v36;
  uint64_t v37;
  int v38;
  float64x2_t v39;
  float *v40;
  float64x2_t v41;
  unsigned int v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  unint64_t v47;
  float64x2_t v48;
  float v49;
  float64x2_t v50;
  BOOL v51;
  double v52;
  float64_t v53;
  float64x2_t v54;
  int8x16_t v55;
  float64x2_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float64x2_t v59;
  float64x2_t v60;
  std::runtime_error v62;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  double v81;
  float64x2_t v82;
  float64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  std::runtime_error_vtbl *v87;
  float64x2_t v88;
  float64_t v89;
  float *v90;
  float64x2_t v91;
  unsigned int v92;
  unint64_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64_t v97;
  float64x2_t v98;
  float64x2_t v99;
  unint64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  int8x16_t v120;
  float64x2_t v121;
  int8x16_t v122;
  float64_t v123;
  int8x16_t v124;
  double v125;
  unint64_t v126;
  float64x2_t v127;
  unint64_t v128;
  double v129;
  double v130;
  std::string::size_type v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  float64x2_t v135;
  float64x2_t v137;
  float64x2_t v139;
  uint64_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  unint64_t v144;
  float64x2_t v145;
  float64_t v146;
  float64x2_t v147;
  std::runtime_error v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64_t v152;
  std::runtime_error v153;
  _OWORD v154[2];
  float64x2_t v155;
  float64_t v156;
  std::string v157;
  std::string __p;
  float64x2_t v159;
  int8x16_t v160;
  float64x2_t v161;
  float64x2_t v162;
  double v163;
  double v164[3];
  int v165;
  char v166;
  double v167;
  int v168;
  uint64_t v169;

  v9 = a1;
  v11 = *a3;
  v10 = a3[1];
  v12 = v10 - *a3;
  v13 = v12 >> 3;
  v140 = v12 >> 3;
  if ((unint64_t)(v12 >> 3) < *(_QWORD *)(a4 + 48))
  {
    sub_20E863438((uint64_t)&v159);
    sub_20E86A980(&v160, (uint64_t)"Insufficient points to extract plane: ", 38);
    std::ostream::operator<<();
    if ((v168 & 0x10) != 0)
    {
      v52 = v167;
      if (*(_QWORD *)&v167 < *(_QWORD *)&v164[0])
      {
        v167 = v164[0];
        v52 = v164[0];
      }
      v53 = v163;
      v14 = *(_QWORD *)&v52 - *(_QWORD *)&v163;
      if (*(_QWORD *)&v52 - *(_QWORD *)&v163 >= 0x7FFFFFFFFFFFFFF8uLL)
        goto LABEL_55;
    }
    else
    {
      if ((v168 & 8) == 0)
      {
        v14 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        p_p = &__p;
        goto LABEL_49;
      }
      v53 = v161.f64[1];
      v14 = *(_QWORD *)&v162.f64[1] - *(_QWORD *)&v161.f64[1];
      if (*(_QWORD *)&v162.f64[1] - *(_QWORD *)&v161.f64[1] >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_55:
        sub_20E860B7C();
    }
    if (v14 >= 0x17)
    {
      v69 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v69 = v14 | 7;
      v70 = v69 + 1;
      p_p = (std::string *)operator new(v69 + 1);
      __p.__r_.__value_.__l.__size_ = v14;
      __p.__r_.__value_.__r.__words[2] = v70 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v14;
      p_p = &__p;
      if (!v14)
        goto LABEL_49;
    }
    memmove(p_p, *(const void **)&v53, v14);
LABEL_49:
    p_p->__r_.__value_.__s.__data_[v14] = 0;
    std::runtime_error::runtime_error(&v148, &__p);
    v148.__vftable = (std::runtime_error_vtbl *)&off_24CA06F70;
    LODWORD(v149.f64[0]) = 0;
    std::runtime_error::runtime_error(&v153, &v148);
    v153.__vftable = (std::runtime_error_vtbl *)&off_24CA06F70;
    LODWORD(v154[0]) = LODWORD(v149.f64[0]);
    std::runtime_error::runtime_error((std::runtime_error *)v9, &v153);
    *(_QWORD *)v9 = &off_24CA06F70;
    *(_DWORD *)(v9 + 16) = v154[0];
    *(_BYTE *)(v9 + 168) = 0;
    std::runtime_error::~runtime_error(&v153);
    std::runtime_error::~runtime_error(&v148);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v159.f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
    v71 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(float64_t *)((char *)v159.f64 + *(_QWORD *)(*(_QWORD *)&v159.f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0]
                                                                                                  + 64);
    v160.i64[0] = v71;
    v160.i64[1] = MEMORY[0x24BEDB848] + 16;
    if (v166 < 0)
      operator delete(*(void **)&v164[2]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v169);
    return;
  }
  v16 = a4;
  memset(&__p, 0, sizeof(__p));
  if (v10 == v11)
  {
    a5.f64[0] = (double)(unint64_t)v13;
    v41.f64[0] = 0.0;
    a7.f64[0] = 0.0 / (double)(unint64_t)v13;
    a8.f64[0] = a7.f64[0];
    v143 = a7;
    v145 = a7;
    v147 = a8;
    v20.f64[0] = 0.0;
    a7.f64[0] = 0.0;
    v45.f64[0] = 0.0;
    a8.f64[0] = 0.0;
    a9.f64[0] = 0.0;
    goto LABEL_38;
  }
  if (v12 < 0)
    sub_20E867F44();
  v133 = v11;
  v134 = v10;
  v19 = (float *)operator new(12 * v13);
  v23 = 0;
  v24 = 0;
  v25 = (std::string::size_type)&v19[3 * v13];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
  __p.__r_.__value_.__r.__words[2] = v25;
  v26.f64[0] = 0.0;
  a8.f64[0] = 0.0;
  a9.f64[0] = 0.0;
  v27 = v19;
  v28 = v13;
  do
  {
    v31 = (float32x2_t *)(*a2 + 12 * *(_QWORD *)(*a3 + 8 * v23));
    if ((unint64_t)v19 < v25)
    {
      v29 = (unint64_t)*v31;
      v19[2] = v31[1].f32[0];
      *(_QWORD *)v19 = v29;
      v30 = (std::string::size_type)(v19 + 3);
      goto LABEL_9;
    }
    v32 = 0xAAAAAAAAAAAAAAABLL * (v19 - v27) + 1;
    if (v32 > 0x1555555555555555)
      sub_20E867F44();
    if (0x5555555555555556 * ((uint64_t)(v25 - (_QWORD)v27) >> 2) > v32)
      v32 = 0x5555555555555556 * ((uint64_t)(v25 - (_QWORD)v27) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v27) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v33 = 0x1555555555555555;
    else
      v33 = v32;
    v144 = *(_QWORD *)&a8.f64[0];
    v146 = v26.f64[0];
    v142 = a9;
    if (v33)
    {
      if (v33 > 0x1555555555555555)
        sub_20E877A38();
      v34 = operator new(12 * v33);
      *(_QWORD *)&a8.f64[0] = v144;
      v26.f64[0] = v146;
      a9 = v142;
    }
    else
    {
      v34 = 0;
    }
    v35 = (std::string::size_type)v34 + 4 * (v19 - v27);
    v36 = *v31;
    v25 = (std::string::size_type)v34 + 12 * v33;
    *(_DWORD *)(v35 + 8) = v31[1].i32[0];
    *(float32x2_t *)v35 = v36;
    v30 = v35 + 12;
    if (v19 == v27)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v34 + 4 * (v19 - v27);
      __p.__r_.__value_.__r.__words[2] = v25;
      v27 = v19;
    }
    else
    {
      do
      {
        v37 = *(_QWORD *)(v19 - 3);
        v19 -= 3;
        v38 = *((_DWORD *)v19 + 2);
        *(_QWORD *)(v35 - 12) = v37;
        v35 -= 12;
        *(_DWORD *)(v35 + 8) = v38;
      }
      while (v19 != v27);
      __p.__r_.__value_.__r.__words[0] = v35;
      __p.__r_.__value_.__r.__words[2] = v25;
      if (!v27)
        goto LABEL_27;
    }
    operator delete(v27);
    a9 = v142;
    *(_QWORD *)&a8.f64[0] = v144;
    v26.f64[0] = v146;
LABEL_27:
    v27 = (float *)v35;
    v28 = v140;
LABEL_9:
    __p.__r_.__value_.__l.__size_ = v30;
    a5.f64[0] = *(float64_t *)v31;
    LODWORD(a5.f64[1]) = v31[1].i32[0];
    a5 = vcvt_hight_f64_f32((float32x4_t)a5);
    a9 = vaddq_f64(a9, a5);
    v26.f64[1] = a8.f64[0];
    v26 = vaddq_f64(v26, vcvtq_f64_f32(*v31));
    a8 = (float64x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL);
    v19 = (float *)v30;
    v23 = ++v24;
  }
  while (v28 > v24);
  a5.f64[0] = (double)v28;
  v39 = vdivq_f64(a9, a5);
  v26.f64[1] = a8.f64[0];
  v43 = vdivq_f64(v26, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v28), 0));
  a7 = (float64x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL);
  v40 = v27 + 2;
  v41.f64[0] = 0.0;
  v42 = 1;
  v143 = v43;
  v147 = a7;
  v43.f64[1] = a7.f64[0];
  v20.f64[0] = 0.0;
  a7.f64[0] = 0.0;
  v44.f64[0] = 0.0;
  v45.f64[0] = 0.0;
  a8.f64[0] = 0.0;
  v46.f64[0] = 0.0;
  v47 = 0;
  a9.f64[0] = 0.0;
  v9 = a1;
  v11 = v133;
  do
  {
    v48 = vcvtq_f64_f32(*(float32x2_t *)(v40 - 2));
    v49 = *v40;
    v40 += 3;
    v21.f64[0] = v49;
    v21 = vsubq_f64(v21, v39);
    v50 = vsubq_f64(v48, v43);
    v22.f64[0] = vmuld_n_f64(v21.f64[0], v50.f64[0]);
    v41.f64[1] = v20.f64[0];
    v20.f64[0] = vmuld_lane_f64(v21.f64[0], v50, 1);
    v44.f64[1] = v45.f64[0];
    *(_QWORD *)&v46.f64[1] = v47;
    v41 = vmlaq_n_f64(v41, v50, v50.f64[0]);
    a7 = vaddq_f64(a7, v22);
    a8 = vaddq_f64(a8, v20);
    v44 = vmlaq_laneq_f64(v44, v50, v50, 1);
    v46 = vmlaq_n_f64(v46, v50, v21.f64[0]);
    a9 = vmlaq_f64(a9, v21, v21);
    v45.f64[0] = v44.f64[1];
    v20 = (float64x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL);
    v47 = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
    v51 = v28 > v42++;
  }
  while (v51);
  v145 = v39;
  v16 = a4;
  v10 = v134;
LABEL_38:
  v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5.f64[0], 0);
  v55 = (int8x16_t)vdivq_f64(a9, a5);
  v45.f64[1] = a8.f64[0];
  v56 = vdivq_f64(v45, v54);
  v57 = (int8x16_t)vdivq_f64(a7, v54);
  v41.f64[1] = v20.f64[0];
  v58 = (int8x16_t)vdivq_f64(v41, v54);
  v165 = 2;
  v159 = (float64x2_t)v58;
  v58.i64[0] = v57.i64[0];
  v160 = v58;
  v161 = v56;
  *(_QWORD *)&v56.f64[0] = v57.i64[0];
  v162 = v56;
  v163 = *(double *)v55.i64;
  v165 = sub_20EB7DFF4(v159.f64, v164, v55, v58, v57, v56, a9.f64[0], v45.f64[0], v20.f64[0], v54) ^ 1;
  if (fabs(v164[0]) > *(double *)(v16 + 8) * fabs(v164[1]))
  {
    v157.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v157.__r_.__value_.__r.__words[1] = xmmword_2102DCA50;
    strcpy(v157.__r_.__value_.__l.__data_, "Eigenvalues indicate this is a degenerate Plane.");
    std::runtime_error::runtime_error(&v148, &v157);
    v148.__vftable = (std::runtime_error_vtbl *)&off_24CA06F70;
    LODWORD(v149.f64[0]) = 1;
    std::runtime_error::runtime_error(&v153, &v148);
    v153.__vftable = (std::runtime_error_vtbl *)&off_24CA06F70;
    LODWORD(v154[0]) = LODWORD(v149.f64[0]);
    std::runtime_error::runtime_error((std::runtime_error *)v9, &v153);
    *(_QWORD *)v9 = &off_24CA06F70;
    *(_DWORD *)(v9 + 16) = v154[0];
    *(_BYTE *)(v9 + 168) = 0;
    std::runtime_error::~runtime_error(&v153);
    std::runtime_error::~runtime_error(&v148);
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v157.__r_.__value_.__l.__data_);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  _Q3 = v159;
  *(_QWORD *)&v59.f64[0] = v160.i64[0];
  v62 = (std::runtime_error)vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL);
  _Q0 = vmulq_f64(v143, v159);
  _D2 = v147.f64[0];
  __asm { FMLA            D0, D2, V3.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + v145.f64[0] * *(double *)v160.i64;
  if (_Q0.f64[0] >= 0.0)
  {
    v137 = _Q0;
  }
  else
  {
    _Q0.f64[0] = -_Q0.f64[0];
    v137 = _Q0;
    *(_QWORD *)&_Q3.f64[1] = v62.__vftable;
    _Q3 = vnegq_f64(_Q3);
    v62 = (std::runtime_error)vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL);
    v59 = vnegq_f64(v59);
  }
  v72 = v140;
  _D9 = _Q3.f64[1];
  v74 = *(double *)(v16 + 24);
  v75 = vabsq_f64(_Q3);
  v76 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v75, 1);
  v156 = 0.0;
  v155 = 0u;
  v153 = (std::runtime_error)0;
  memset(v154, 0, sizeof(v154));
  v139 = v59;
  v141 = _Q3;
  if ((vmovn_s64(vcgtq_f64(v75, v76)).u8[0] & 1) != 0)
  {
    v78 = vmulq_f64(_Q3, _Q3);
    v78.f64[0] = sqrt(v78.f64[0] + v59.f64[0] * v59.f64[0]);
    v76.f64[0] = -v59.f64[0] / v78.f64[0];
    v77.f64[0] = _Q3.f64[0] / v78.f64[0];
    v78.f64[0] = 0.0;
    v79.f64[0] = v143.f64[0];
    v79.f64[1] = v147.f64[0];
    v135 = v79;
    if (v10 == v11)
      goto LABEL_63;
LABEL_61:
    v83 = v139.f64[0];
    v101.f64[1] = _Q3.f64[1];
    v84.f64[0] = _Q3.f64[0];
    *(_QWORD *)&v84.f64[1] = v62.__vftable;
    v91 = vmlsq_lane_f64(v135, v84, v137.f64[0], 0);
    v85 = vmlsq_f64(v145, v139, v137);
    v86.f64[0] = v77.f64[0];
    v86.f64[1] = v76.f64[0];
    v87 = v62.__vftable;
    v96.f64[1] = v139.f64[0];
    v88.f64[0] = v78.f64[0];
    v88.f64[1] = v77.f64[0];
    v99.f64[1] = v141.f64[0];
    v98 = vmulq_f64(v99, v88);
    v95 = vsubq_f64(vmulq_f64(v96, v86), v98);
    *(_QWORD *)&v89 = *(_OWORD *)&vsubq_f64(vmulq_f64(v141, v78), vmulq_f64((float64x2_t)v62, v76));
    v78.f64[1] = v95.f64[1];
    v76.f64[1] = v95.f64[0];
    v77.f64[1] = v89;
    v90 = (float *)(__p.__r_.__value_.__r.__words[0] + 8);
    v62.__vftable = 0;
    *(_QWORD *)&v91.f64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
    v92 = 1;
    __asm { FMOV            V6.2D, #1.0 }
    v94 = 0;
    v95.f64[0] = 0.0;
    v96.f64[0] = 0.0;
    v97 = 0.0;
    v98.f64[0] = 0.0;
    v99.f64[0] = 0.0;
    v100 = 0;
    v101.f64[0] = 0.0;
    do
    {
      v102 = vcvtq_f64_f32(*(float32x2_t *)(v90 - 2));
      v103 = *v90;
      v90 += 3;
      v60.f64[0] = v103;
      v60 = vsubq_f64(v60, v85);
      v104 = vsubq_f64(v102, v91);
      v105 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, v104.f64[0]), v78, v104, 1), v77, v60.f64[0]);
      v62.__imp_.__imp_ = (const char *)v94;
      v96.f64[1] = v97;
      *(_QWORD *)&v99.f64[1] = v100;
      v95 = vsubq_f64(v95, v105);
      v62 = (std::runtime_error)vmlaq_n_f64((float64x2_t)v62, v105, v105.f64[0]);
      v96 = vmlaq_laneq_f64(v96, v105, v105, 1);
      v98 = vsubq_f64(v98, (float64x2_t)vdupq_laneq_s64((int64x2_t)v105, 1));
      v99 = vsubq_f64(v99, v105);
      *(float64_t *)v154 = v95.f64[0];
      v153 = v62;
      v101 = vaddq_f64(v101, _Q6);
      v97 = v96.f64[1];
      v94 = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
      v100 = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
      *(float64x2_t *)((char *)v154 + 8) = v96;
      *((_QWORD *)&v154[1] + 1) = *(_QWORD *)&v98.f64[0];
      v155 = v99;
      v156 = v101.f64[0];
      v51 = v72 > v92++;
    }
    while (v51);
    goto LABEL_63;
  }
  v80.f64[0] = _Q3.f64[0];
  *(_QWORD *)&v80.f64[1] = v62.__vftable;
  v78 = vmulq_f64(v80, v80);
  v81 = sqrt(v78.f64[1] + v59.f64[0] * v59.f64[0]);
  v78.f64[0] = v59.f64[0] / v81;
  v77.f64[0] = -_Q3.f64[1] / v81;
  v76.f64[0] = 0.0;
  v82.f64[0] = v143.f64[0];
  v82.f64[1] = v147.f64[0];
  v135 = v82;
  if (v10 != v11)
    goto LABEL_61;
LABEL_63:
  sub_20E8BE424((uint64_t)&v148);
  v107.f64[0] = v139.f64[0];
  _Q5 = v141;
  __asm { FMLA            D0, D9, V5.D[1] }
  v109 = (float64x2_t)vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL);
  v110 = v147;
  v111 = 1.0 / sqrt(_D0 + v107.f64[0] * v107.f64[0] + v137.f64[0] * v137.f64[0]);
  _Q5.f64[1] = v109.f64[0];
  v107.f64[1] = -v137.f64[0];
  v109.f64[0] = sqrt(vmulq_f64(v135, v135).f64[0] + v110.f64[0] * v110.f64[0] + v145.f64[0] * v145.f64[0]) * v74;
  v112 = vmulq_n_f64(v107, v111);
  v113 = vmulq_n_f64(_Q5, v111);
  v109.f64[0] = v109.f64[0] * v109.f64[0];
  v110.f64[0] = v152;
  v114.f64[1] = v149.f64[1];
  v115 = vmulq_f64(v109, v110);
  v116 = vmulq_n_f64(v151, v109.f64[0]);
  v117 = vmulq_n_f64(v150, v109.f64[0]);
  v121 = vmulq_n_f64((float64x2_t)v148, v109.f64[0]);
  v118 = vmulq_n_f64(v149, v109.f64[0]);
  v114.f64[0] = sqrtf(*(float *)(v16 + 56));
  v127.f64[0] = sqrtf(*(float *)(v16 + 60));
  v119 = vmulq_n_f64(v116, v114.f64[0]);
  v120 = (int8x16_t)vmulq_n_f64(vmulq_n_f64(v121, v114.f64[0]), v114.f64[0]);
  *(_QWORD *)&v121.f64[0] = *(_OWORD *)&vmulq_f64(v114, vmulq_f64(v118, v127));
  v122 = (int8x16_t)vmulq_n_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v118, (int8x16_t)v117, 8uLL), v114.f64[0]), v114.f64[0]);
  *(_QWORD *)&v123 = *(_OWORD *)&vmulq_f64(v114, vmulq_laneq_f64(v127, v117, 1));
  v124 = (int8x16_t)vmulq_n_f64(v119, v127.f64[0]);
  *(_QWORD *)&v125 = *(_OWORD *)&vmulq_f64(v127, vmulq_f64(v115, v127));
  v126 = vextq_s8(v124, v124, 8uLL).u64[0];
  *(_QWORD *)&v127.f64[0] = vextq_s8(v122, v122, 8uLL).u64[0];
  v128 = vextq_s8(v120, v120, 8uLL).u64[0];
  v129 = *(double *)&v122.i64[1];
  if (*(double *)&v122.i64[1] <= *(double *)v120.i64)
    v129 = *(double *)v120.i64;
  v130 = *(double *)(v16 + 64);
  if (v125 >= v130)
    v130 = v125;
  if (*(_BYTE *)(v16 + 40))
  {
    v129 = (float)(*(float *)(v16 + 32) * *(float *)(v16 + 32));
    v130 = (float)(*(float *)(v16 + 36) * *(float *)(v16 + 36));
  }
  v131 = __p.__r_.__value_.__r.__words[2];
  v120.i64[1] = v128;
  *(int8x16_t *)(v9 + 72) = v120;
  *(_QWORD *)&v121.f64[1] = v122.i64[0];
  *(float64x2_t *)(v9 + 88) = v121;
  v127.f64[1] = v123;
  *(float64x2_t *)(v9 + 104) = v127;
  *(double *)(v9 + 136) = v125;
  v124.i64[1] = v126;
  *(int8x16_t *)(v9 + 120) = v124;
  *(float64x2_t *)v9 = v113;
  *(float64x2_t *)(v9 + 16) = v112;
  *(double *)(v9 + 32) = v129;
  *(double *)(v9 + 40) = v130;
  *(_OWORD *)(v9 + 48) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 64) = v131;
  *(float64_t *)(v9 + 160) = v145.f64[0];
  *(float64_t *)&v132 = v143.f64[0];
  *((_QWORD *)&v132 + 1) = *(_QWORD *)&v147.f64[0];
  *(_OWORD *)(v9 + 144) = v132;
  *(_BYTE *)(v9 + 168) = 1;
}

void sub_20FD892F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,char a57)
{
  void *v58;

  if (a49 < 0)
  {
    operator delete(__p);
    v58 = a50;
    if (!a50)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v58 = a50;
    if (!a50)
      goto LABEL_3;
  }
  operator delete(v58);
  _Unwind_Resume(exception_object);
}

void sub_20FD893A0(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD893C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  double v18;
  float v19;
  float v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float32x2_t *v29;
  int v30;
  int v31;
  double v32;
  float32_t v33;
  float32_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  size_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  double v70;
  double v71;
  float64x2_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  if (!a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/PointDescriptorStoreUtil.cpp", 31, (uint64_t)"undistortion", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_102:
    abort();
  }
  v68 = *(_QWORD *)(a3 + 16);
  if (*(_BYTE *)(a3 + 184))
  {
    v5 = *(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80);
    if (v5)
      v6 = v5 == *(_QWORD *)(a3 + 168) - *(_QWORD *)(a3 + 160);
    else
      v6 = 0;
    if (!v6)
      goto LABEL_16;
  }
  else
  {
    if (*(_QWORD *)(a3 + 160) != *(_QWORD *)(a3 + 168))
      goto LABEL_16;
    v5 = *(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80);
  }
  v7 = (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 5;
  if (v7 == v5 >> 6 && v68 <= v7)
    goto LABEL_18;
LABEL_16:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_102;
  }
  v7 = (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 5;
LABEL_18:
  if (!v7)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v12 = v9;
    v13 = v11;
    v67 = v10;
    if ((v10 & 1) == 0)
      break;
    while (1)
    {
      v14 = v11;
      v15 = *(_QWORD *)(a3 + 56) + 32 * v11;
      v72 = vcvtq_f64_f32(*(float32x2_t *)v15);
      v16 = (*(uint64_t (**)(uint64_t, float64x2_t *, uint64_t, double *))(*(_QWORD *)a1 + 16))(a1, &v72, a2, &v70);
      v17 = v70 >= 0.0 ? v16 : 0;
      if (v17 != 1)
        break;
      v18 = v71;
      if (v71 < 0.0 || v70 > (double)*(unint64_t *)a3 || v71 > (double)*(unint64_t *)(a3 + 8))
        break;
      v19 = v70;
      *(float *)v15 = v19;
      v20 = v18;
      *(float *)(v15 + 4) = v20;
      v21 = (_OWORD *)(*(_QWORD *)(a3 + 56) + 32 * v9);
      v22 = *(_OWORD *)(v15 + 16);
      *v21 = *(_OWORD *)v15;
      v21[1] = v22;
      v23 = *(_QWORD *)(a3 + 80);
      v24 = (__int128 *)(v23 + ((unint64_t)v11 << 6));
      v25 = (_OWORD *)(v23 + ((unint64_t)v9 << 6));
      v26 = *v24;
      v27 = v24[1];
      v28 = v24[3];
      v25[2] = v24[2];
      v25[3] = v28;
      *v25 = v26;
      v25[1] = v27;
      v9 = (v9 + 1);
      if (v7 == ++v11)
        goto LABEL_52;
    }
    v13 = v11;
    if (*(_BYTE *)(a3 + 184))
    {
LABEL_40:
      v35 = *(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80);
      if (!v35)
        goto LABEL_48;
      if (v35 != *(_QWORD *)(a3 + 168) - *(_QWORD *)(a3 + 160))
        goto LABEL_48;
      v36 = (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 5;
      if (v36 != v35 >> 6)
        goto LABEL_48;
    }
    else
    {
LABEL_45:
      if (*(_QWORD *)(a3 + 160) != *(_QWORD *)(a3 + 168)
        || (v36 = (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 5,
            v36 != (uint64_t)(*(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80)) >> 6))
      {
LABEL_48:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v36 = (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 5;
        v37 = *(_QWORD *)(a3 + 16);
        goto LABEL_50;
      }
    }
    v37 = *(_QWORD *)(a3 + 16);
    if (v37 > v36)
      goto LABEL_48;
LABEL_50:
    LODWORD(v68) = v68 - (v14 >= v36 - v37);
    v11 = v13 + 1;
    v10 = 1;
    if (v13 + 1 == v7)
      goto LABEL_53;
  }
  do
  {
    v14 = v13;
    v29 = (float32x2_t *)(*(_QWORD *)(a3 + 56) + 32 * v13);
    v72 = vcvtq_f64_f32(*v29);
    v30 = (*(uint64_t (**)(uint64_t, float64x2_t *, uint64_t, double *))(*(_QWORD *)a1 + 16))(a1, &v72, a2, &v70);
    if (v70 >= 0.0)
      v31 = v30;
    else
      v31 = 0;
    if (v31 != 1
      || (v32 = v71, v71 < 0.0)
      || v70 > (double)*(unint64_t *)a3
      || v71 > (double)*(unint64_t *)(a3 + 8))
    {
      v9 = v12;
      if (*(_BYTE *)(a3 + 184))
        goto LABEL_40;
      goto LABEL_45;
    }
    v33 = v70;
    v29->f32[0] = v33;
    v34 = v32;
    v29->f32[1] = v34;
    v12 = (v12 + 1);
    ++v13;
  }
  while (v7 != v13);
  LODWORD(v9) = v9 + v7 - v11;
LABEL_52:
  if ((v67 & 1) == 0)
    return 0;
LABEL_53:
  if ((_DWORD)v9)
  {
    if (*(_BYTE *)(a3 + 184))
    {
      v38 = *(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80);
      if (!v38)
        goto LABEL_67;
      if (v38 != *(_QWORD *)(a3 + 168) - *(_QWORD *)(a3 + 160))
        goto LABEL_67;
      v39 = *(_BYTE **)(a3 + 56);
      v40 = *(_BYTE **)(a3 + 64);
      v41 = (v40 - v39) >> 5;
      if (v41 != v38 >> 6)
        goto LABEL_67;
LABEL_64:
      if (*(_QWORD *)(a3 + 16) > v41)
        goto LABEL_67;
      v43 = v9;
      v44 = v41 - v9;
      if (v41 < v9)
        goto LABEL_69;
    }
    else
    {
      if (*(_QWORD *)(a3 + 160) == *(_QWORD *)(a3 + 168))
      {
        v39 = *(_BYTE **)(a3 + 56);
        v40 = *(_BYTE **)(a3 + 64);
        v41 = (v40 - v39) >> 5;
        if (v41 == (uint64_t)(*(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80)) >> 6)
          goto LABEL_64;
      }
LABEL_67:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v39 = *(_BYTE **)(a3 + 56);
      v40 = *(_BYTE **)(a3 + 64);
      v45 = (v40 - v39) >> 5;
      v43 = v9;
      v44 = v45 - v9;
      if (v45 < v9)
      {
LABEL_69:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 216, (uint64_t)"old_size >= new_size", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v39 = *(_BYTE **)(a3 + 56);
        v40 = *(_BYTE **)(a3 + 64);
      }
    }
    v46 = *(_QWORD *)(a3 + 16);
    v47 = v46 >= v44;
    v48 = v46 - v44;
    if (!v47)
      v48 = 0;
    *(_QWORD *)(a3 + 16) = v48;
    v49 = (v40 - v39) >> 5;
    v50 = v43 - v49;
    if (v43 <= v49)
    {
      if (v43 >= v49)
        goto LABEL_91;
      v62 = &v39[32 * v43];
    }
    else
    {
      v51 = *(_QWORD *)(a3 + 72);
      if (v50 > (v51 - (uint64_t)v40) >> 5)
      {
        v52 = v51 - (_QWORD)v39;
        v53 = v52 >> 4;
        if (v52 >> 4 <= v43)
          v53 = v43;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0)
          v54 = 0x7FFFFFFFFFFFFFFLL;
        else
          v54 = v53;
        if (v54 >> 59)
          sub_20E877A38();
        v55 = (char *)operator new(32 * v54);
        v56 = &v55[32 * v49];
        v57 = 32 * v50;
        v58 = &v55[32 * v54];
        bzero(v56, v57);
        v59 = &v56[v57];
        if (v40 == v39)
        {
          *(_QWORD *)(a3 + 56) = v56;
          *(_QWORD *)(a3 + 64) = v59;
          *(_QWORD *)(a3 + 72) = v58;
          if (!v39)
            goto LABEL_91;
        }
        else
        {
          do
          {
            v60 = *((_OWORD *)v40 - 1);
            v61 = v56 - 32;
            *((_OWORD *)v56 - 2) = *((_OWORD *)v40 - 2);
            *((_OWORD *)v56 - 1) = v60;
            v40 -= 32;
            v56 -= 32;
          }
          while (v40 != v39);
          *(_QWORD *)(a3 + 56) = v61;
          *(_QWORD *)(a3 + 64) = v59;
          *(_QWORD *)(a3 + 72) = v58;
          if (!v39)
          {
LABEL_91:
            v63 = *(_QWORD *)(a3 + 80);
            v64 = (*(_QWORD *)(a3 + 88) - v63) >> 6;
            if (v43 <= v64)
            {
              if (v43 < v64)
                *(_QWORD *)(a3 + 88) = v63 + (v43 << 6);
            }
            else
            {
              sub_20ED406CC((char **)(a3 + 80), v43 - v64);
            }
            if (*(_BYTE *)(a3 + 184))
            {
              v65 = *(_QWORD *)(a3 + 160);
              v66 = (*(_QWORD *)(a3 + 168) - v65) >> 6;
              if (v43 <= v66)
              {
                if (v43 < v66)
                  *(_QWORD *)(a3 + 168) = v65 + (v43 << 6);
              }
              else
              {
                sub_20ED406CC((char **)(a3 + 160), v43 - v66);
              }
            }
            goto LABEL_100;
          }
        }
        operator delete(v39);
        goto LABEL_91;
      }
      bzero(v40, 32 * v50);
      v62 = &v40[32 * v50];
    }
    *(_QWORD *)(a3 + 64) = v62;
    goto LABEL_91;
  }
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 88) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 168) = *(_QWORD *)(a3 + 160);
  *(_BYTE *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if (*(_BYTE *)(a3 + 48))
    *(_BYTE *)(a3 + 48) = 0;
LABEL_100:
  *(_QWORD *)(a3 + 16) = v68;
  return 1;
}

uint64_t sub_20FD89A84(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(a1 + 28) = *(__int128 *)((char *)a2 + 28);
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 6);
  v6 = (_BYTE *)*((_QWORD *)a2 + 7);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_20E867F44();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v9;
    v10 = &v9[4 * (v8 >> 2)];
    *(_QWORD *)(a1 + 64) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 56) = v10;
  }
  v11 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v11;
  v12 = (_BYTE *)(a1 + 96);
  if (*((char *)a2 + 119) < 0)
  {
    sub_20E860C04(v12, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v13 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)v12 = v13;
  }
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  v14 = *((unsigned int *)a2 + 20);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if ((_DWORD)v14)
  {
    v15 = operator new(32 * v14);
    *(_QWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 136) = v15;
    v16 = &v15[4 * v14];
    *(_QWORD *)(a1 + 144) = v16;
    do
    {
      *v15 = 0xBFF0000000000000;
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = 0;
      v15 += 4;
    }
    while (v15 != v16);
    *(_QWORD *)(a1 + 136) = v16;
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(float *)(a1 + 176) = 1.0 / (float)*((unsigned int *)a2 + 10);
  *(double *)(a1 + 184) = *((double *)a2 + 3) * 0.0174532925 * (*((double *)a2 + 3) * 0.0174532925);
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  return a1;
}

void sub_20FD89C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD89C38(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    v2 = *(void **)(a1 + 48);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20FD89C84(uint64_t a1, int a2, int a3)
{
  int *v5;
  int *v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  int *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int *v23;
  int v24;
  unint64_t v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  int *v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int *v41;
  int v42;
  unint64_t v43;
  int *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  int *v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  int *v59;
  int v60;
  unint64_t v61;
  int *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  int *v68;
  uint64_t v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  int *v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  int *v82;
  uint64_t v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  int *v89;
  uint64_t v90;
  __int128 v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  int *v96;
  uint64_t v97;
  __int128 v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  int *v103;
  uint64_t v104;
  __int128 v105;
  int *v106;
  char *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v112;
  int v113;
  uint64_t v115;
  int v116;
  int v117;
  int *v118;

  v5 = (int *)operator new(0x24uLL);
  v6 = v5 + 9;
  v112 = a3 - 1;
  v113 = a3 + 1;
  v7 = -1;
  v8 = v5;
  v115 = a1;
  v116 = a3;
  do
  {
    v117 = v7;
    v9 = v7 + a2;
    if (v9 < 0 || (v10 = *(_DWORD *)(a1 + 296), v9 >= v10))
    {
      if (a3 < 1 || (v10 = *(_DWORD *)(a1 + 296), v10 < a3))
      {
        if (v5 < v6)
        {
          *v5 = -1;
          v11 = v5 + 1;
          if (v9 < 0)
            goto LABEL_49;
          goto LABEL_48;
        }
        v19 = v5 - v8;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          goto LABEL_192;
        if (((char *)v6 - (char *)v8) >> 1 > v20)
          v20 = ((char *)v6 - (char *)v8) >> 1;
        if ((unint64_t)((char *)v6 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v20;
        if (v15)
        {
          if (v15 >> 62)
            goto LABEL_197;
          v16 = operator new(4 * v15);
          v17 = (int *)&v16[4 * v19];
          *v17 = -1;
          v11 = v17 + 1;
          v21 = (char *)v5 - (char *)v8;
          if (v5 == v8)
            goto LABEL_44;
LABEL_40:
          v25 = v21 - 4;
          if (v25 < 0xBC
            || (v92 = ((char *)(v5 - 1) - (char *)v8) & 0xFFFFFFFFFFFFFFFCLL,
                &v16[(char *)v5 - (char *)v8 - 4 - v92] > &v16[(char *)v5 - (char *)v8 - 4])
            || (int *)((char *)v5 - v92 - 4) > v5 - 1
            || (unint64_t)((char *)v8 - v16) < 0x20)
          {
            v26 = v5;
            a1 = v115;
          }
          else
          {
            v93 = (v25 >> 2) + 1;
            v94 = 4 * (v93 & 0x7FFFFFFFFFFFFFF8);
            v26 = &v5[v94 / 0xFFFFFFFFFFFFFFFCLL];
            v17 = (int *)((char *)v17 - v94);
            v95 = &v16[4 * v19 - 16];
            v96 = v5 - 4;
            v97 = v93 & 0x7FFFFFFFFFFFFFF8;
            a1 = v115;
            do
            {
              v98 = *(_OWORD *)v96;
              *(v95 - 1) = *((_OWORD *)v96 - 1);
              *v95 = v98;
              v95 -= 2;
              v96 -= 8;
              v97 -= 8;
            }
            while (v97);
            if (v93 == (v93 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_45;
          }
          do
          {
            v27 = *--v26;
            *--v17 = v27;
          }
          while (v26 != v8);
          goto LABEL_45;
        }
        v16 = 0;
        v17 = (int *)(4 * v19);
        *(_DWORD *)(4 * v19) = -1;
        v11 = (int *)(4 * v19 + 4);
        v21 = (char *)v5 - (char *)v8;
        if (v5 != v8)
          goto LABEL_40;
LABEL_44:
        a1 = v115;
        goto LABEL_45;
      }
    }
    v12 = v9 + v10 * v112;
    if (v5 >= v6)
    {
      v13 = v5 - v8;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        goto LABEL_191;
      if (((char *)v6 - (char *)v8) >> 1 > v14)
        v14 = ((char *)v6 - (char *)v8) >> 1;
      if ((unint64_t)((char *)v6 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 62)
          goto LABEL_196;
        v16 = operator new(4 * v15);
        v17 = (int *)&v16[4 * v13];
        *v17 = v12;
        v11 = v17 + 1;
        v18 = (char *)v5 - (char *)v8;
        if (v5 == v8)
          goto LABEL_44;
      }
      else
      {
        v16 = 0;
        v17 = (int *)(4 * v13);
        *(_DWORD *)(4 * v13) = v12;
        v11 = (int *)(4 * v13 + 4);
        v18 = (char *)v5 - (char *)v8;
        if (v5 == v8)
          goto LABEL_44;
      }
      v22 = v18 - 4;
      if (v22 < 0xBC
        || (v64 = ((char *)(v5 - 1) - (char *)v8) & 0xFFFFFFFFFFFFFFFCLL,
            &v16[(char *)v5 - (char *)v8 - 4 - v64] > &v16[(char *)v5 - (char *)v8 - 4])
        || (int *)((char *)v5 - v64 - 4) > v5 - 1
        || (unint64_t)((char *)v8 - v16) < 0x20)
      {
        v23 = v5;
        a1 = v115;
      }
      else
      {
        v65 = (v22 >> 2) + 1;
        v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
        v23 = &v5[v66 / 0xFFFFFFFFFFFFFFFCLL];
        v17 = (int *)((char *)v17 - v66);
        v67 = &v16[4 * v13 - 16];
        v68 = v5 - 4;
        v69 = v65 & 0x7FFFFFFFFFFFFFF8;
        a1 = v115;
        do
        {
          v70 = *(_OWORD *)v68;
          *(v67 - 1) = *((_OWORD *)v68 - 1);
          *v67 = v70;
          v67 -= 2;
          v68 -= 8;
          v69 -= 8;
        }
        while (v69);
        if (v65 == (v65 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_45:
          v6 = (int *)&v16[4 * v15];
          if (v8)
            operator delete(v8);
          v8 = v17;
          a3 = v116;
          if (v9 < 0)
            goto LABEL_49;
          goto LABEL_48;
        }
      }
      do
      {
        v24 = *--v23;
        *--v17 = v24;
      }
      while (v23 != v8);
      goto LABEL_45;
    }
    *v5 = v12;
    v11 = v5 + 1;
    if (v9 < 0)
      goto LABEL_49;
LABEL_48:
    v28 = *(_DWORD *)(a1 + 296);
    if (v9 < v28)
      goto LABEL_51;
LABEL_49:
    if ((a3 & 0x80000000) == 0)
    {
      v28 = *(_DWORD *)(a1 + 296);
      if (v28 > a3)
      {
LABEL_51:
        v29 = v9 + v28 * a3;
        if (v11 < v6)
        {
          *v11 = v29;
          v30 = v11 + 1;
          if (v9 < 0)
            goto LABEL_92;
          goto LABEL_91;
        }
        v31 = v11 - v8;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62)
          goto LABEL_191;
        if (((char *)v6 - (char *)v8) >> 1 > v32)
          v32 = ((char *)v6 - (char *)v8) >> 1;
        if ((unint64_t)((char *)v6 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
        {
          if (v33 >> 62)
            goto LABEL_196;
          v34 = operator new(4 * v33);
          v35 = (int *)&v34[4 * v31];
          *v35 = v29;
          v30 = v35 + 1;
          v36 = (char *)v11 - (char *)v8;
          if (v11 == v8)
            goto LABEL_87;
LABEL_78:
          v40 = v36 - 4;
          if (v40 < 0xBC
            || (v71 = ((char *)(v11 - 1) - (char *)v8) & 0xFFFFFFFFFFFFFFFCLL,
                &v34[(char *)v11 - (char *)v8 - 4 - v71] > &v34[(char *)v11 - (char *)v8 - 4])
            || (int *)((char *)v11 - v71 - 4) > v11 - 1
            || (unint64_t)((char *)v8 - v34) < 0x20)
          {
            v41 = v11;
            a1 = v115;
          }
          else
          {
            v72 = (v40 >> 2) + 1;
            v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
            v41 = &v11[v73 / 0xFFFFFFFFFFFFFFFCLL];
            v35 = (int *)((char *)v35 - v73);
            v74 = &v34[4 * v31 - 16];
            v75 = v11 - 4;
            v76 = v72 & 0x7FFFFFFFFFFFFFF8;
            a1 = v115;
            do
            {
              v77 = *(_OWORD *)v75;
              *(v74 - 1) = *((_OWORD *)v75 - 1);
              *v74 = v77;
              v74 -= 2;
              v75 -= 8;
              v76 -= 8;
            }
            while (v76);
            if (v72 == (v72 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_88;
          }
          do
          {
            v42 = *--v41;
            *--v35 = v42;
          }
          while (v41 != v8);
          goto LABEL_88;
        }
        v34 = 0;
        v35 = (int *)(4 * v31);
        *(_DWORD *)(4 * v31) = v29;
        v30 = (int *)(4 * v31 + 4);
        v36 = (char *)v11 - (char *)v8;
        if (v11 != v8)
          goto LABEL_78;
LABEL_87:
        a1 = v115;
        goto LABEL_88;
      }
    }
    if (v11 >= v6)
    {
      v37 = v11 - v8;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 62)
        goto LABEL_192;
      if (((char *)v6 - (char *)v8) >> 1 > v38)
        v38 = ((char *)v6 - (char *)v8) >> 1;
      if ((unint64_t)((char *)v6 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
        v33 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v33 = v38;
      if (v33)
      {
        if (v33 >> 62)
          goto LABEL_197;
        v34 = operator new(4 * v33);
        v35 = (int *)&v34[4 * v37];
        *v35 = -1;
        v30 = v35 + 1;
        v39 = (char *)v11 - (char *)v8;
        if (v11 == v8)
          goto LABEL_87;
      }
      else
      {
        v34 = 0;
        v35 = (int *)(4 * v37);
        *(_DWORD *)(4 * v37) = -1;
        v30 = (int *)(4 * v37 + 4);
        v39 = (char *)v11 - (char *)v8;
        if (v11 == v8)
          goto LABEL_87;
      }
      v43 = v39 - 4;
      if (v43 < 0xBC
        || (v99 = ((char *)(v11 - 1) - (char *)v8) & 0xFFFFFFFFFFFFFFFCLL,
            &v34[(char *)v11 - (char *)v8 - 4 - v99] > &v34[(char *)v11 - (char *)v8 - 4])
        || (int *)((char *)v11 - v99 - 4) > v11 - 1
        || (unint64_t)((char *)v8 - v34) < 0x20)
      {
        v44 = v11;
        a1 = v115;
      }
      else
      {
        v100 = (v43 >> 2) + 1;
        v101 = 4 * (v100 & 0x7FFFFFFFFFFFFFF8);
        v44 = &v11[v101 / 0xFFFFFFFFFFFFFFFCLL];
        v35 = (int *)((char *)v35 - v101);
        v102 = &v34[4 * v37 - 16];
        v103 = v11 - 4;
        v104 = v100 & 0x7FFFFFFFFFFFFFF8;
        a1 = v115;
        do
        {
          v105 = *(_OWORD *)v103;
          *(v102 - 1) = *((_OWORD *)v103 - 1);
          *v102 = v105;
          v102 -= 2;
          v103 -= 8;
          v104 -= 8;
        }
        while (v104);
        if (v100 == (v100 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_88:
          v6 = (int *)&v34[4 * v33];
          if (v8)
            operator delete(v8);
          v8 = v35;
          a3 = v116;
          if (v9 < 0)
            goto LABEL_92;
          goto LABEL_91;
        }
      }
      do
      {
        v45 = *--v44;
        *--v35 = v45;
      }
      while (v44 != v8);
      goto LABEL_88;
    }
    *v11 = -1;
    v30 = v11 + 1;
    if (v9 < 0)
      goto LABEL_92;
LABEL_91:
    v46 = *(_DWORD *)(a1 + 296);
    if (v9 < v46)
      goto LABEL_94;
LABEL_92:
    if (a3 >= -1)
    {
      v46 = *(_DWORD *)(a1 + 296);
      if (v113 < v46)
      {
LABEL_94:
        v47 = v9 + v46 * v113;
        if (v30 < v6)
        {
          *v30 = v47;
          v5 = v30 + 1;
          v48 = v117;
          goto LABEL_3;
        }
        v55 = v30 - v8;
        v56 = v55 + 1;
        v48 = v117;
        if ((unint64_t)(v55 + 1) >> 62)
LABEL_191:
          sub_20EABADD4();
        if (((char *)v6 - (char *)v8) >> 1 > v56)
          v56 = ((char *)v6 - (char *)v8) >> 1;
        if ((unint64_t)((char *)v6 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v56;
        if (v51)
        {
          if (v51 >> 62)
LABEL_196:
            sub_20E877A38();
          v52 = operator new(4 * v51);
          v48 = v117;
          v53 = (int *)&v52[4 * v55];
          *v53 = v47;
          v5 = v53 + 1;
          v57 = (char *)v30 - (char *)v8;
          if (v30 == v8)
            goto LABEL_127;
        }
        else
        {
          v52 = 0;
          v53 = (int *)(4 * v55);
          *(_DWORD *)(4 * v55) = v47;
          v5 = (int *)(4 * v55 + 4);
          v57 = (char *)v30 - (char *)v8;
          if (v30 == v8)
            goto LABEL_127;
        }
        v61 = v57 - 4;
        if (v61 < 0xBC
          || (v85 = ((char *)(v30 - 1) - (char *)v8) & 0xFFFFFFFFFFFFFFFCLL,
              &v52[(char *)v30 - (char *)v8 - 4 - v85] > &v52[(char *)v30 - (char *)v8 - 4])
          || (int *)((char *)v30 - v85 - 4) > v30 - 1
          || (unint64_t)((char *)v8 - v52) < 0x20)
        {
          v62 = v30;
          a1 = v115;
        }
        else
        {
          v86 = (v61 >> 2) + 1;
          v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
          v62 = &v30[v87 / 0xFFFFFFFFFFFFFFFCLL];
          v53 = (int *)((char *)v53 - v87);
          v88 = &v52[4 * v55 - 16];
          v89 = v30 - 4;
          v90 = v86 & 0x7FFFFFFFFFFFFFF8;
          a1 = v115;
          do
          {
            v91 = *(_OWORD *)v89;
            *(v88 - 1) = *((_OWORD *)v89 - 1);
            *v88 = v91;
            v88 -= 2;
            v89 -= 8;
            v90 -= 8;
          }
          while (v90);
          if (v86 == (v86 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_128;
        }
        do
        {
          v63 = *--v62;
          *--v53 = v63;
        }
        while (v62 != v8);
        goto LABEL_128;
      }
    }
    v48 = v117;
    if (v30 < v6)
    {
      *v30 = -1;
      v5 = v30 + 1;
      goto LABEL_3;
    }
    v49 = v30 - v8;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 62)
LABEL_192:
      sub_20EABADD4();
    if (((char *)v6 - (char *)v8) >> 1 > v50)
      v50 = ((char *)v6 - (char *)v8) >> 1;
    if ((unint64_t)((char *)v6 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    if (v51)
    {
      if (v51 >> 62)
LABEL_197:
        sub_20E877A38();
      v52 = operator new(4 * v51);
      v48 = v117;
      v53 = (int *)&v52[4 * v49];
      *v53 = -1;
      v5 = v53 + 1;
      v54 = (char *)v30 - (char *)v8;
      if (v30 == v8)
      {
LABEL_127:
        a1 = v115;
        goto LABEL_128;
      }
    }
    else
    {
      v52 = 0;
      v53 = (int *)(4 * v49);
      *(_DWORD *)(4 * v49) = -1;
      v5 = (int *)(4 * v49 + 4);
      v54 = (char *)v30 - (char *)v8;
      if (v30 == v8)
        goto LABEL_127;
    }
    v58 = v54 - 4;
    if (v58 < 0xBC
      || (v78 = ((char *)(v30 - 1) - (char *)v8) & 0xFFFFFFFFFFFFFFFCLL,
          &v52[(char *)v30 - (char *)v8 - 4 - v78] > &v52[(char *)v30 - (char *)v8 - 4])
      || (int *)((char *)v30 - v78 - 4) > v30 - 1
      || (unint64_t)((char *)v8 - v52) < 0x20)
    {
      v59 = v30;
      a1 = v115;
    }
    else
    {
      v79 = (v58 >> 2) + 1;
      v80 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
      v59 = &v30[v80 / 0xFFFFFFFFFFFFFFFCLL];
      v53 = (int *)((char *)v53 - v80);
      v81 = &v52[4 * v49 - 16];
      v82 = v30 - 4;
      v83 = v79 & 0x7FFFFFFFFFFFFFF8;
      a1 = v115;
      do
      {
        v84 = *(_OWORD *)v82;
        *(v81 - 1) = *((_OWORD *)v82 - 1);
        *v81 = v84;
        v81 -= 2;
        v82 -= 8;
        v83 -= 8;
      }
      while (v83);
      if (v79 == (v79 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_128;
    }
    do
    {
      v60 = *--v59;
      *--v53 = v60;
    }
    while (v59 != v8);
LABEL_128:
    v6 = (int *)&v52[4 * v51];
    if (v8)
      operator delete(v8);
    v8 = v53;
    a3 = v116;
LABEL_3:
    v7 = v48 + 1;
  }
  while (v7 != 2);
  v118 = v8;
  if ((char *)v5 - (char *)v8 != 36
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/StaticFeatureDetector.cpp", 97, (uint64_t)"lut_indices.size() == 9u", 24, (uint64_t)&unk_2102C52DE, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_198;
  }
  if (v8[4] <= 0)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/StaticFeatureDetector.cpp", 98, (uint64_t)"lut_indices[4u] > 0", 19, (uint64_t)"Feature center should always be valid", 37, (void (*)(void **))sub_21023DDB0))
    {
      v106 = v5;
      if (v8 != v5)
        goto LABEL_180;
      goto LABEL_188;
    }
LABEL_198:
    abort();
  }
  v106 = v5;
  if (v8 == v5)
    goto LABEL_188;
LABEL_180:
  v107 = &byte_2103C029D;
  do
  {
    v108 = *v8;
    if ((*v8 & 0x80000000) == 0)
    {
      v109 = *(_QWORD *)(a1 + 192);
      if (v108 >= *(_DWORD *)(a1 + 200) - (int)v109)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/StaticFeatureDetector.cpp", 102, (uint64_t)"lut_idx < static_cast<int>(occurance_count_lut_.size())", 55, (uint64_t)&unk_2102C52DE, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v108 = *v8;
        v109 = *(_QWORD *)(a1 + 192);
      }
      *(_BYTE *)(v109 + v108) += *v107;
    }
    ++v8;
    ++v107;
  }
  while (v8 != v106);
  v8 = v118;
LABEL_188:
  v110 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 192) + v8[4]);
  operator delete(v8);
  return v110;
}

void sub_20FD8A7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD8A7EC(uint64_t a1)
{
  unsigned int *i;
  float **v3;
  void *v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  float *v8;
  float *v9;
  int v10;
  uint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  float *v22;
  char *v23;
  unint64_t v24;
  float *v25;
  float *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  float *v34;
  uint64_t v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40[2];
  void *__p;
  unint64_t v42;

  sub_20EB053B8((uint64_t)v40, a1 + 256);
  for (i = *(unsigned int **)(a1 + 232); i; i = *(unsigned int **)i)
    sub_20EABA148((uint64_t)v40, i + 4, i + 4);
  v3 = (float **)(a1 + 328);
  v4 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 336) = v4;
  v5 = v42;
  if (v42 > (uint64_t)(*(_QWORD *)(a1 + 344) - (_QWORD)v4) >> 3)
  {
    if (v42 >> 61)
      sub_20E969238();
    v6 = (char *)operator new(8 * v42);
    *(_QWORD *)(a1 + 328) = v6;
    *(_QWORD *)(a1 + 336) = v6;
    *(_QWORD *)(a1 + 344) = &v6[8 * v5];
    if (v4)
      operator delete(v4);
  }
  v7 = __p;
  if (__p)
  {
    v8 = *(float **)(a1 + 336);
    while (1)
    {
      v10 = *(_DWORD *)(a1 + 40) * v7[4];
      v11 = *(_QWORD *)(a1 + 296);
      v12 = (float)(v10 % (int)v11);
      v13 = (float)(v10 / (int)v11);
      v14 = *(_QWORD *)(a1 + 344);
      if ((unint64_t)v8 < v14)
      {
        *v8 = v12;
        v8[1] = v13;
        v9 = v8 + 2;
      }
      else
      {
        v15 = *v3;
        v16 = (char *)v8 - (char *)*v3;
        v17 = v16 >> 3;
        v18 = (v16 >> 3) + 1;
        if (v18 >> 61)
          sub_20E969238();
        v19 = v14 - (_QWORD)v15;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          if (v20 >> 61)
            sub_20E877A38();
          v21 = operator new(8 * v20);
          v22 = (float *)&v21[8 * v17];
          *v22 = v12;
          v22[1] = v13;
          v23 = (char *)((char *)v8 - (char *)v15);
          if (v8 != v15)
          {
LABEL_21:
            v24 = (unint64_t)(v23 - 8);
            if (v24 < 0x168
              || (v30 = ((char *)(v8 - 2) - (char *)v15) & 0xFFFFFFFFFFFFFFF8, &v21[v16 - 8 - v30] > &v21[v16 - 8])
              || (float *)((char *)v8 - v30 - 8) > v8 - 2
              || (unint64_t)((char *)v8 - v21 - v16) < 0x20)
            {
              v25 = v8;
              v26 = v22;
            }
            else
            {
              v31 = (v24 >> 3) + 1;
              v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
              v25 = &v8[v32 / 0xFFFFFFFFFFFFFFFCLL];
              v26 = &v22[v32 / 0xFFFFFFFFFFFFFFFCLL];
              v33 = &v21[8 * v17 - 16];
              v34 = v8 - 4;
              v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *v33 = v36;
                v33 -= 2;
                v34 -= 8;
                v35 -= 4;
              }
              while (v35);
              if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_24:
                v8 = *v3;
                v28 = &v21[8 * v20];
                v9 = v22 + 2;
                *(_QWORD *)(a1 + 328) = v26;
                *(_QWORD *)(a1 + 336) = v22 + 2;
                *(_QWORD *)(a1 + 344) = v28;
                if (!v8)
                  goto LABEL_10;
LABEL_28:
                operator delete(v8);
                goto LABEL_10;
              }
            }
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 2;
              *((_QWORD *)v26 - 1) = v27;
              v26 -= 2;
            }
            while (v25 != v15);
            goto LABEL_24;
          }
        }
        else
        {
          v21 = 0;
          v22 = (float *)(8 * v17);
          *v22 = v12;
          v22[1] = v13;
          v23 = (char *)((char *)v8 - (char *)v15);
          if (v8 != v15)
            goto LABEL_21;
        }
        v29 = &v21[8 * v20];
        v9 = v22 + 2;
        *(_QWORD *)(a1 + 328) = v22;
        *(_QWORD *)(a1 + 336) = v22 + 2;
        *(_QWORD *)(a1 + 344) = v29;
        if (v8)
          goto LABEL_28;
      }
LABEL_10:
      *(_QWORD *)(a1 + 336) = v9;
      v7 = *(_DWORD **)v7;
      v8 = v9;
      if (!v7)
      {
        v37 = __p;
        if (__p)
        {
          do
          {
            v38 = (_QWORD *)*v37;
            operator delete(v37);
            v37 = v38;
          }
          while (v38);
        }
        break;
      }
    }
  }
  v39 = v40[0];
  v40[0] = 0;
  if (v39)
    operator delete(v39);
}

void sub_20FD8AAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD8AAB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD8AACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD8AAE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD8AAF4(_QWORD *a1, unsigned int a2, int a3)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t j;
  char v16;

  v5 = a1[24];
  v6 = a1[25];
  v4 = a1 + 24;
  if (v5 == v6)
  {
    a1[37] = a2;
    a1[38] = 0;
    a1[40] = 0xBFF0000000000000;
    v7 = a3 * a2;
    v16 = 0;
    if ((_DWORD)v7)
      sub_20EEBEDD0(v4, v7, &v16);
    if (a1[30])
    {
      v8 = (_QWORD *)a1[29];
      if (v8)
      {
        do
        {
          v9 = (_QWORD *)*v8;
          operator delete(v8);
          v8 = v9;
        }
        while (v9);
      }
      a1[29] = 0;
      v10 = a1[28];
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_QWORD *)(a1[27] + 8 * i) = 0;
      }
      a1[30] = 0;
    }
    if (a1[35])
    {
      v12 = (_QWORD *)a1[34];
      if (v12)
      {
        do
        {
          v13 = (_QWORD *)*v12;
          operator delete(v12);
          v12 = v13;
        }
        while (v13);
      }
      a1[34] = 0;
      v14 = a1[33];
      if (v14)
      {
        for (j = 0; j != v14; ++j)
          *(_QWORD *)(a1[32] + 8 * j) = 0;
      }
      a1[35] = 0;
    }
  }
}

void sub_20FD8ABE8(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v11;
  v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16)
        v17 %= v16;
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = a2 + 16;
  }
}

uint64_t *sub_20FD8ACF4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  __int128 v21;

  __p = operator new(0x28uLL);
  v21 = xmmword_2102DB450;
  strcpy((char *)__p, "StaticFeatureDetectorConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.enable_static_feature_detection", v4, "Whether to enable the static feature detector.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.gyro_time_interval_s", v5, "Minimum time interval that gyro measurements are accepted.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.gyro_buffer_max_size", v6, "Max mumber of gyro measurements in the buffer.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.max_gyro_camera_time_diff_s", v7, "Maximum time difference between camera and IMU to consider gyro measurements.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 2));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.identify_static_feature_with_low_angular_speed", v8, "Accumulate features with angular speed under min_angular_speed.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EAA14D8((_BYTE *)(a1 + 3));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.accumulate_occurance_as_gaussian", v9, "Accumulate feature occurance as a Gaussian distribution represented by a 3x3 kernal.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.max_accumulate_window_s", v10, "Maximum time window to accumulate feature occurances.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DCF0((unsigned int *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.max_num_frame_to_accumulate", v11, "Maximum number of frames to accumulate feature occurances.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.min_angular_speed_to_accumulate_deg_per_sec", v12, "Minimum angular speed to enable static keypoint accumulation.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DCF0((unsigned int *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.min_num_occurances_for_static_feature", v13, "Minimum number of occurances to be considered as meaningful for static features.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DCF0((unsigned int *)(a1 + 36));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.min_num_feature_with_occurances_over_threshold", v14, "Minimum number of features over the threshold to consider that the camera has smudge.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EB8894C(a1 + 96);
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.output_dir_path", v15, "Output directory path for logged artifacts.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EAA14D8((_BYTE *)(a1 + 120));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.visualize_static_features", v16, "Visualize static features in visualize with CVPlayer. (default: false)");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EA9DCF0((unsigned int *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.downscale_factor", v17, "Look-up table downscale factor.");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  return sub_20E8B2F9C((uint64_t *)&__p, "StaticFeatureDetectorConfig.enable_detection_only_with_illuminator_on", v18, "Accumulate features with prewitt on.");
}

void sub_20FD8B044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FD8B0E8(_QWORD *a1, _OWORD *a2, _QWORD *a3, uint64_t a4)
{
  _OWORD *v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  BOOL v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  size_t v74;
  const void *v75;
  void *v76;
  BOOL v77;
  char *v78;
  char *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  std::__shared_weak_count *v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  _QWORD *v111;
  _QWORD *v112;
  void (***v113)(_QWORD);
  void (**v114)(_QWORD *);
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t (**v123)();
  __int128 v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void *__dst;
  unsigned int v129;
  _QWORD v130[2];
  std::__shared_weak_count *v131;
  uint64_t (**v132)();
  __int128 v133;
  uint64_t (**v134)();
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE v141[32];
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v141 = *a2;
  *(_OWORD *)&v141[9] = *(_OWORD *)((char *)a2 + 9);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v7 = operator new(0x20uLL);
  a1[1] = v7 + 2;
  a1[2] = v7 + 2;
  *v7 = *(_OWORD *)v141;
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)&v141[9];
  *a1 = v7;
  v122 = a1;
  a1[3] = 0;
  a1[4] = 0;
  v121 = a1 + 3;
  a1[5] = 0;
  memset(v141, 0, 24);
  v8 = *(const void **)a4;
  v9 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v9)
  {
    if (v9 < 0)
      sub_20E867F44();
    v10 = (char *)operator new(v9);
    v11 = &v10[32 * (v9 >> 5)];
    *(_QWORD *)v141 = v10;
    *(_QWORD *)&v141[16] = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)&v141[8] = v11;
  }
  v121[3] = 0;
  v121[4] = 0;
  v121[5] = 0;
  v12 = operator new(0x18uLL);
  v122[8] = v12 + 3;
  v122[6] = v12;
  v122[7] = v12;
  v122[7] = sub_20F311BAC((uint64_t)(v122 + 8), (uint64_t)v141, (uint64_t)&v141[24], v12);
  if (*(_QWORD *)v141)
  {
    *(_QWORD *)&v141[8] = *(_QWORD *)v141;
    operator delete(*(void **)v141);
  }
  v13 = (std::__shared_weak_count *)a3[11];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = a3[12];
  v17 = (std::__shared_weak_count *)a3[13];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldxr(v18);
    while (__stxr(v20 + 1, v18));
  }
  v134 = &off_24CA1A9A0;
  if (!v16)
  {
    v135 = 0;
    v136 = 0;
    if (!v17)
      goto LABEL_27;
    goto LABEL_20;
  }
  v22 = *(_QWORD *)(v16 + 8);
  v21 = *(std::__shared_weak_count **)(v16 + 16);
  v135 = v22;
  v136 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (v17)
  {
LABEL_20:
    v25 = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    do
      v27 = __ldaxr(v25);
    while (__stlxr(v27 - 1, v25));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_27:
  if (v13)
  {
    v28 = (unint64_t *)&v13->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v125 = sub_21015D618((uint64_t)&v134);
  v30 = sub_21015BE44((uint64_t)&v134);
  v141[23] = 7;
  strcpy(v141, "kf_copy");
  sub_21015D490((uint64_t)&v132, (unsigned int *)&v125, v30, (uint64_t *)v141, 1u);
  if ((v141[23] & 0x80000000) != 0)
    operator delete(*(void **)v141);
  v130[0] = &off_24CA1A9A0;
  v130[1] = v135;
  v131 = v136;
  if (v136)
  {
    v31 = (unint64_t *)&v136->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  sub_20EB9ECBC((uint64_t)v130, v141);
  v123 = &off_24CA1A9A0;
  v124 = v133;
  if (*((_QWORD *)&v133 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  sub_20EB9ECBC((uint64_t)&v123, &v125);
  v35 = *(_QWORD *)&v141[8];
  if (!*(_QWORD *)&v141[8])
  {
    v138 = 0;
    v44 = v126;
    if (v126)
      goto LABEL_54;
LABEL_99:
    v137 = 0;
    v53 = v142;
    if (v144 != v142 || v144 != v129)
      goto LABEL_70;
LABEL_104:
    v74 = v143 * (unint64_t)v53;
    v75 = *(const void **)&v141[24];
    if (*(_QWORD *)&v141[24]
      || !v74
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v76 = __dst;
      if (v74)
        v77 = __dst == 0;
      else
        v77 = 0;
      if (!v77)
      {
        if (!v74)
          goto LABEL_142;
LABEL_114:
        memmove(v76, v75, v74);
        goto LABEL_142;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))goto LABEL_114;
    }
    abort();
  }
  v36 = *(std::__shared_weak_count **)&v141[16];
  if (*(_QWORD *)&v141[16])
  {
    v37 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    do
      v39 = __ldaxr(v37);
    while (__stlxr(v39 - 1, v37));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    v35 = *(_QWORD *)&v141[8];
    v40 = *(std::__shared_weak_count **)&v141[16];
    if (*(_QWORD *)&v141[16])
    {
      v41 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 - 1, v41));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v35 + 96))(&v138, v35, 1);
  v44 = v126;
  if (!v126)
    goto LABEL_99;
LABEL_54:
  v45 = v127;
  if (v127)
  {
    v46 = (unint64_t *)&v127->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    do
      v48 = __ldaxr(v46);
    while (__stlxr(v48 - 1, v46));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    v44 = v126;
    v49 = v127;
    if (v127)
    {
      v50 = (unint64_t *)&v127->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
      do
        v52 = __ldaxr(v50);
      while (__stlxr(v52 - 1, v50));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v44 + 96))(&v137, v44, 1);
  v53 = v142;
  v54 = v144 == v142 && v144 == v129;
  if (v54)
    goto LABEL_104;
LABEL_70:
  v55 = *(_QWORD *)&v141[8];
  if (*(_QWORD *)&v141[8])
  {
    v56 = *(std::__shared_weak_count **)&v141[16];
    if (*(_QWORD *)&v141[16])
    {
      v57 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
      v55 = *(_QWORD *)&v141[8];
      v60 = *(std::__shared_weak_count **)&v141[16];
      if (*(_QWORD *)&v141[16])
      {
        v61 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
        do
          v63 = __ldaxr(v61);
        while (__stlxr(v63 - 1, v61));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v55 + 96))(&v140, v55, 1);
    v64 = v126;
    if (v126)
    {
LABEL_84:
      v65 = v127;
      if (v127)
      {
        v66 = (unint64_t *)&v127->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        do
          v68 = __ldaxr(v66);
        while (__stlxr(v68 - 1, v66));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
        v64 = v126;
        v69 = v127;
        if (v127)
        {
          v70 = (unint64_t *)&v127->__shared_owners_;
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
          do
            v72 = __ldaxr(v70);
          while (__stlxr(v72 - 1, v70));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v64 + 96))(&v139, v64, 1);
      if (!v142)
        goto LABEL_138;
      goto LABEL_117;
    }
  }
  else
  {
    v140 = 0;
    v64 = v126;
    if (v126)
      goto LABEL_84;
  }
  v139 = 0;
  if (!v142)
    goto LABEL_138;
LABEL_117:
  if (!v143)
    goto LABEL_138;
  v78 = *(char **)&v141[24];
  v79 = (char *)__dst;
  v80 = v143 - 1;
  if (v143 == 1)
  {
LABEL_127:
    if (!(_DWORD)v53 || v78)
    {
      if ((_DWORD)v53 && !v79)
      {
LABEL_134:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_126;
        }
        v79 = 0;
        goto LABEL_137;
      }
      if (!(_DWORD)v53)
        goto LABEL_138;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_126;
      }
      if (!v79)
        goto LABEL_134;
    }
LABEL_137:
    memmove(v79, v78, v53);
    goto LABEL_138;
  }
  if ((_DWORD)v53)
  {
    v81 = v129;
    v82 = v144;
    while ((v78
          || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (v79|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
    {
      memmove(v79, v78, v53);
      v78 += v82;
      v79 += v81;
      if (!--v80)
        goto LABEL_127;
    }
LABEL_126:
    abort();
  }
LABEL_138:
  v83 = v139;
  v139 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = v140;
  v140 = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
LABEL_142:
  v85 = v137;
  v137 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = v138;
  v138 = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  v87 = v127;
  if (v127)
  {
    v88 = (unint64_t *)&v127->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v123 = &off_24CA1A9A0;
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = *(std::__shared_weak_count **)&v141[16];
  if (*(_QWORD *)&v141[16])
  {
    v94 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v130[0] = &off_24CA1A9A0;
  v96 = v131;
  if (!v131)
    goto LABEL_165;
  v97 = (unint64_t *)&v131->__shared_owners_;
  do
    v98 = __ldaxr(v97);
  while (__stlxr(v98 - 1, v97));
  if (v98)
  {
LABEL_165:
    v100 = (_QWORD *)v122[4];
    v99 = v122[5];
    if ((unint64_t)v100 < v99)
      goto LABEL_166;
LABEL_169:
    v102 = (_QWORD *)*v121;
    v103 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v100 - *v121) >> 3);
    v104 = v103 + 1;
    if (v103 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - (_QWORD)v102) >> 3);
    if (2 * v105 > v104)
      v104 = 2 * v105;
    if (v105 >= 0x555555555555555)
      v106 = 0xAAAAAAAAAAAAAAALL;
    else
      v106 = v104;
    if (v106 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v107 = (char *)operator new(24 * v106);
    v108 = &v107[24 * v103];
    *(_QWORD *)v108 = &off_24CA1A9A0;
    *(_OWORD *)(v108 + 8) = v133;
    v109 = &v107[24 * v106];
    v133 = 0uLL;
    v110 = v108 + 24;
    if (v100 == v102)
    {
      v122[3] = v108;
      v122[4] = v110;
      v122[5] = v109;
      if (v100)
LABEL_183:
        operator delete(v100);
    }
    else
    {
      do
      {
        *((_QWORD *)v108 - 3) = &off_24CA1A9A0;
        v108 -= 24;
        *(_OWORD *)(v108 + 8) = *((_OWORD *)v100 - 1);
        *(v100 - 2) = 0;
        *(v100 - 1) = 0;
        v100 -= 3;
      }
      while (v100 != v102);
      v100 = (_QWORD *)v122[3];
      v111 = (_QWORD *)v122[4];
      v122[3] = v108;
      v122[4] = v110;
      v122[5] = v109;
      if (v111 != v100)
      {
        v112 = v111 - 3;
        v113 = (void (***)(_QWORD))(v111 - 3);
        do
        {
          v114 = (void (**)(_QWORD *))*v113;
          v113 -= 3;
          (*v114)(v112);
          v54 = v112 == v100;
          v112 = v113;
        }
        while (!v54);
      }
      if (v100)
        goto LABEL_183;
    }
    v122[4] = v110;
    v132 = &off_24CA1A9A0;
    v101 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
    if (!*((_QWORD *)&v133 + 1))
      goto LABEL_189;
    goto LABEL_185;
  }
  ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
  std::__shared_weak_count::__release_weak(v96);
  v100 = (_QWORD *)v122[4];
  v99 = v122[5];
  if ((unint64_t)v100 >= v99)
    goto LABEL_169;
LABEL_166:
  *v100 = &off_24CA1A9A0;
  *(_OWORD *)(v100 + 1) = v133;
  v133 = 0uLL;
  v122[4] = v100 + 3;
  v132 = &off_24CA1A9A0;
  v101 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (!*((_QWORD *)&v133 + 1))
    goto LABEL_189;
LABEL_185:
  v115 = (unint64_t *)&v101->__shared_owners_;
  do
    v116 = __ldaxr(v115);
  while (__stlxr(v116 - 1, v115));
  if (!v116)
  {
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
  }
LABEL_189:
  v134 = &off_24CA1A9A0;
  v117 = v136;
  if (v136)
  {
    v118 = (unint64_t *)&v136->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  return v122;
}

void sub_20FD8BCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  v34 = *(_QWORD *)(v32 - 168);
  *(_QWORD *)(v32 - 168) = 0;
  if (v34)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = a31;
    a31 = 0;
    if (v35)
    {
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = a32;
      a32 = 0;
      if (!v36)
      {
LABEL_7:
        sub_20EB9EEB8((uint64_t)&a15);
        sub_21015D41C(&a12);
        sub_20EB9EEB8(v32 - 160);
        sub_21015D41C(&a22);
        sub_21015D41C(&a25);
        sub_21015D41C(&a28);
        sub_20E9DD680(a9);
        sub_20EEC68E4(a10);
        v37 = *(void **)a11;
        if (*(_QWORD *)a11)
        {
          *(_QWORD *)(a11 + 8) = v37;
          operator delete(v37);
          _Unwind_Resume(a1);
        }
        _Unwind_Resume(a1);
      }
LABEL_6:
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      goto LABEL_7;
    }
  }
  else
  {
    v35 = a31;
    a31 = 0;
    if (v35)
      goto LABEL_10;
  }
  v36 = a32;
  a32 = 0;
  if (!v36)
    goto LABEL_7;
  goto LABEL_6;
}

uint64_t sub_20FD8BEF8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5, char *a6)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  size_t v10;
  size_t v11;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  __int128 *v18;
  size_t v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  size_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  const void *p_p;
  size_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  __int128 *v37;
  size_t v38;
  unint64_t v39;
  __int128 *v40;
  size_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  unint64_t v50;
  _BYTE *v51;
  size_t v52;
  unint64_t v53;
  _BYTE *v54;
  size_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  std::string::size_type v61;
  char v62;
  std::string *v63;
  uint64_t v64;
  uint64_t v65;
  FILE *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  size_t v84;
  size_t v85;
  __int128 *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  size_t v90;
  unint64_t v91;
  __int128 *v92;
  size_t v93;
  unint64_t v94;
  __int128 *v95;
  char *v96;
  size_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  _QWORD *v104;
  unint64_t v105;
  const void *v106;
  size_t v107;
  unint64_t v108;
  size_t v109;
  unint64_t v110;
  __int128 *v111;
  size_t v112;
  unint64_t v113;
  __int128 *v114;
  size_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  size_t v123;
  unint64_t v124;
  _BYTE *v125;
  size_t v126;
  unint64_t v127;
  _BYTE *v128;
  size_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  std::string::size_type v135;
  char v136;
  std::string *v137;
  uint64_t v138;
  uint64_t v139;
  FILE *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  uint64_t v154;
  size_t v155;
  std::string::size_type v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  std::string *v160;
  __int128 v161;
  const std::string::value_type *v162;
  std::string::size_type v163;
  std::string *v164;
  __int128 v165;
  std::string *v166;
  NSObject *v167;
  char v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  FILE *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  _QWORD *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  size_t v189;
  size_t v190;
  __int128 *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  size_t v195;
  unint64_t v196;
  __int128 *v197;
  size_t v198;
  unint64_t v199;
  __int128 *v200;
  char *v201;
  size_t v202;
  char *v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  _QWORD *v209;
  unint64_t v210;
  const void *v211;
  size_t v212;
  unint64_t v213;
  size_t v214;
  unint64_t v215;
  __int128 *v216;
  size_t v217;
  unint64_t v218;
  __int128 *v219;
  size_t v220;
  char *v221;
  unint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  unint64_t v226;
  unint64_t v227;
  size_t v228;
  unint64_t v229;
  _BYTE *v230;
  size_t v231;
  unint64_t v232;
  _BYTE *v233;
  size_t v234;
  char *v235;
  unint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  std::string::size_type v240;
  char v241;
  std::string *v242;
  uint64_t v243;
  uint64_t v244;
  FILE *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  char v258;
  int v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  size_t v264;
  const char *v265;
  int v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  std::string::size_type v270;
  uint64_t v271;
  int v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v276;
  uint64_t v277;
  size_t v278;
  const char *v279;
  unsigned __int8 v280;
  unsigned __int8 v281;
  const char *v282;
  size_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  NSObject *v290;
  size_t v291;
  std::__shared_weak_count_vtbl *v292;
  std::__shared_weak_count *v293;
  std::__shared_weak_count *v294;
  unint64_t *p_shared_owners;
  unint64_t v296;
  unint64_t v297;
  NSObject *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  std::string::size_type v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::string::size_type v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  void *v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  char **v327;
  char **v328;
  FILE *v329;
  size_t v330;
  std::string::size_type v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  std::string *v335;
  __int128 v336;
  const std::string::value_type *v337;
  std::string::size_type v338;
  std::string *v339;
  __int128 v340;
  std::string *v341;
  NSObject *v342;
  char v343;
  const char *v344;
  char *v345;
  char *v346;
  char **v347;
  char **v348;
  FILE *v349;
  size_t v350;
  std::string::size_type v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  std::string *v355;
  __int128 v356;
  const std::string::value_type *v357;
  std::string::size_type v358;
  std::string *v359;
  __int128 v360;
  std::string *v361;
  NSObject *v362;
  char v363;
  const char *v364;
  char *v365;
  char *v366;
  int v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  std::string::size_type v371;
  uint64_t v372;
  int v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  size_t v378;
  const char *v379;
  unsigned __int8 v380;
  const char *v381;
  size_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  NSObject *v389;
  size_t v390;
  std::__shared_weak_count_vtbl *v391;
  std::__shared_weak_count *v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  unint64_t v396;
  NSObject *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  std::string::size_type v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  std::string::size_type v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  void *v421;
  unint64_t *v422;
  int v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  std::string::size_type v428;
  uint64_t v429;
  unsigned __int8 v430;
  const char *v431;
  size_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  void *v436;
  uint64_t v437;
  uint64_t v438;
  NSObject *v439;
  size_t v440;
  std::__shared_weak_count_vtbl *v441;
  std::__shared_weak_count *v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  unint64_t v446;
  NSObject *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  std::string::size_type v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::string::size_type v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  void *v471;
  unint64_t *v472;
  int v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t *v476;
  std::string::size_type v477;
  uint64_t v478;
  unsigned __int8 v479;
  std::string::size_type v480;
  const char *v481;
  NSObject *v482;
  int v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t *v486;
  std::string::size_type v487;
  uint64_t v488;
  unsigned __int8 v489;
  std::string::size_type v490;
  const char *v491;
  NSObject *v492;
  int v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t *v496;
  std::string::size_type v497;
  uint64_t v498;
  unsigned __int8 v499;
  std::string::size_type v500;
  const char *v501;
  NSObject *v502;
  int v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t *v506;
  std::string::size_type v507;
  uint64_t v508;
  unsigned __int8 v509;
  std::string::size_type v510;
  const char *v511;
  NSObject *v512;
  int v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t *v516;
  std::string::size_type v517;
  uint64_t v518;
  unsigned __int8 v519;
  std::string::size_type v520;
  const char *v521;
  NSObject *v522;
  int v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t *v526;
  std::string::size_type v527;
  uint64_t v528;
  unsigned __int8 v529;
  std::string::size_type v530;
  const char *v531;
  NSObject *v532;
  int v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t *v536;
  std::string::size_type v537;
  uint64_t v538;
  unsigned __int8 v539;
  std::string::size_type v540;
  const char *v541;
  NSObject *v542;
  unsigned __int8 v543;
  std::string::size_type v544;
  const char *v545;
  NSObject *v546;
  unsigned __int8 v547;
  std::string::size_type v548;
  const char *v549;
  NSObject *v550;
  unsigned __int8 v551;
  std::string::size_type v552;
  const char *v553;
  NSObject *v554;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  std::string v564;
  int v565;
  const char *v566;
  int v567;
  const char *v568;
  uint64_t v569;
  std::__shared_weak_count *v570;
  NSObject *__ptr;
  void *v572[2];
  __int128 v573;
  void *v574;
  size_t v575;
  unint64_t v576;
  char v577;
  void *__p;
  size_t v579;
  unsigned __int8 v580;
  __int128 __dst;
  int64_t v582;
  void **p_ptr;
  _BYTE v584[24];
  std::string v585;
  std::string v586;
  __int128 v587;
  int64_t v588;
  _QWORD v589[5];

  v589[2] = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)a1[6];
  memset(&v585, 0, sizeof(v585));
  v7 = v6[2];
  if (!v7 || (v8 = v6[3]) == 0)
  {
    v79 = 1;
    if ((SHIBYTE(v585.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_156;
    goto LABEL_530;
  }
  for (i = 0; i < v7; ++i)
  {
    if (!v8)
      goto LABEL_150;
    v560 = 0;
    while (2)
    {
      v10 = strlen(a6);
      if (v10 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v11 = v10;
      if (v10 >= 0x17)
      {
        v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v13 = v10 | 7;
        v14 = v13 + 1;
        p_dst = (__int128 *)operator new(v13 + 1);
        *((_QWORD *)&__dst + 1) = v11;
        v582 = v14 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
LABEL_14:
        memcpy(p_dst, a6, v11);
        goto LABEL_15;
      }
      HIBYTE(v582) = v10;
      p_dst = &__dst;
      if (v10)
        goto LABEL_14;
LABEL_15:
      *((_BYTE *)p_dst + v11) = 0;
      if (v582 >= 0)
        v15 = 22;
      else
        v15 = (v582 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v582 >= 0)
        v16 = HIBYTE(v582);
      else
        v16 = *((_QWORD *)&__dst + 1);
      if (v15 - v16 >= 9)
      {
        v21 = &__dst;
        if (v582 < 0)
          v21 = (__int128 *)__dst;
        v22 = (char *)v21 + v16;
        *(_QWORD *)v22 = *(_QWORD *)"/DesGenGP";
        v22[8] = 80;
        v23 = v16 + 9;
        if (SHIBYTE(v582) < 0)
          *((_QWORD *)&__dst + 1) = v16 + 9;
        else
          HIBYTE(v582) = v23 & 0x7F;
        v24 = (char *)v21 + v23;
      }
      else
      {
        v17 = v16 + 9;
        if (0x7FFFFFFFFFFFFFF6 - v15 < v16 + 9 - v15)
          sub_20E860B7C();
        if (v582 >= 0)
          v18 = &__dst;
        else
          v18 = (__int128 *)__dst;
        v19 = 0x7FFFFFFFFFFFFFF7;
        if (v15 < 0x3FFFFFFFFFFFFFF3)
        {
          v20 = 2 * v15;
          if (v17 > 2 * v15)
            v20 = v16 + 9;
          if (v20 >= 0x17)
          {
            v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            v26 = v20 | 7;
            if (v26 == 23)
              v26 = v25;
            v19 = v26 + 1;
          }
          else
          {
            v19 = 23;
          }
        }
        v27 = (char *)operator new(v19);
        v28 = v27;
        if (v16)
          memmove(v27, v18, v16);
        v29 = &v28[v16];
        *(_QWORD *)v29 = *(_QWORD *)"/DesGenGP";
        v29[8] = 80;
        if (v15 != 22)
          operator delete(v18);
        *((_QWORD *)&__dst + 1) = v16 + 9;
        v582 = v19 | 0x8000000000000000;
        *(_QWORD *)&__dst = v28;
        v24 = &v28[v17];
      }
      *v24 = 0;
      v587 = __dst;
      v588 = v582;
      v582 = 0;
      __dst = 0uLL;
      v565 = 0;
      std::to_string(&v586, v560 + v8 * i);
      __ptr = &v564;
      v572[0] = &v586;
      v572[1] = &v564;
      *(_QWORD *)&v573 = &v586;
      *((_QWORD *)&v573 + 1) = &v586;
      if (v565 == -1)
        sub_20E877AB8();
      p_ptr = (void **)&__ptr;
      ((void (*)(void ***, std::string *))off_24CA06FA0[v565])(&p_ptr, &v564);
      if (SHIBYTE(v586.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v586.__r_.__value_.__l.__data_);
      if (v565 == -1)
        sub_20E877AB8();
      __ptr = &v586;
      ((void (*)(void **__return_ptr, NSObject **, std::string *))off_24CA06FD0[v565])(&__p, &__ptr, &v564);
      if (v565 != -1)
        ((void (*)(NSObject **, std::string *))off_24CA06FB8[v565])(&__ptr, &v564);
      v30 = v6;
      v31 = i;
      if ((v580 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v580 & 0x80u) == 0)
        v33 = v580;
      else
        v33 = v579;
      if (v588 >= 0)
        v34 = 22;
      else
        v34 = (v588 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v588 >= 0)
        v35 = HIBYTE(v588);
      else
        v35 = *((_QWORD *)&v587 + 1);
      if (v34 - v35 >= v33)
      {
        if (!v33)
          goto LABEL_89;
        if (v588 >= 0)
          v40 = &v587;
        else
          v40 = (__int128 *)v587;
        memmove((char *)v40 + v35, p_p, v33);
        v41 = v35 + v33;
        if (SHIBYTE(v588) < 0)
          *((_QWORD *)&v587 + 1) = v35 + v33;
        else
          HIBYTE(v588) = v41 & 0x7F;
        v42 = (char *)v40 + v41;
      }
      else
      {
        v36 = v35 + v33;
        if (0x7FFFFFFFFFFFFFF6 - v34 < v35 + v33 - v34)
          sub_20E860B7C();
        if (v588 >= 0)
          v37 = &v587;
        else
          v37 = (__int128 *)v587;
        v38 = 0x7FFFFFFFFFFFFFF7;
        if (v34 < 0x3FFFFFFFFFFFFFF3)
        {
          v39 = 2 * v34;
          if (v36 > 2 * v34)
            v39 = v35 + v33;
          if (v39 >= 0x17)
          {
            v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            v44 = v39 | 7;
            if (v44 == 23)
              v44 = v43;
            v38 = v44 + 1;
          }
          else
          {
            v38 = 23;
          }
        }
        v45 = (char *)operator new(v38);
        v46 = v45;
        if (v35)
          memmove(v45, v37, v35);
        memcpy(&v46[v35], p_p, v33);
        if (v34 != 22)
          operator delete(v37);
        *((_QWORD *)&v587 + 1) = v35 + v33;
        v588 = v38 | 0x8000000000000000;
        *(_QWORD *)&v587 = v46;
        v42 = &v46[v36];
      }
      *v42 = 0;
LABEL_89:
      v47 = v588;
      *(_QWORD *)&v584[16] = v588;
      *(_OWORD *)v584 = v587;
      v588 = 0;
      v587 = 0uLL;
      if (v584[23] >= 0)
        v48 = 22;
      else
        v48 = (v47 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v584[23] >= 0)
        v49 = HIBYTE(v47);
      else
        v49 = *(_QWORD *)&v584[8];
      if (v48 - v49 >= 8)
      {
        v54 = v584;
        if (v584[23] < 0)
          v54 = *(_BYTE **)v584;
        *(_QWORD *)&v54[v49] = 0x746C73722E74754FLL;
        v55 = v49 + 8;
        i = v31;
        if ((v584[23] & 0x80000000) != 0)
          *(_QWORD *)&v584[8] = v49 + 8;
        else
          v584[23] = v55 & 0x7F;
        v6 = v30;
        v56 = &v54[v55];
      }
      else
      {
        v50 = v49 + 8;
        if (0x7FFFFFFFFFFFFFF6 - v48 < v49 + 8 - v48)
          sub_20E860B7C();
        i = v31;
        if (v584[23] >= 0)
          v51 = v584;
        else
          v51 = *(_BYTE **)v584;
        v52 = 0x7FFFFFFFFFFFFFF7;
        v6 = v30;
        if (v48 < 0x3FFFFFFFFFFFFFF3)
        {
          v53 = 2 * v48;
          if (v50 > 2 * v48)
            v53 = v49 + 8;
          if (v53 >= 0x17)
          {
            v57 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
            v58 = v53 | 7;
            if (v58 == 23)
              v58 = v57;
            v52 = v58 + 1;
          }
          else
          {
            v52 = 23;
          }
        }
        v59 = (char *)operator new(v52);
        v60 = v59;
        if (v49)
          memmove(v59, v51, v49);
        *(_QWORD *)&v60[v49] = 0x746C73722E74754FLL;
        if (v48 != 22)
          operator delete(v51);
        *(_QWORD *)&v584[8] = v49 + 8;
        *(_QWORD *)&v584[16] = v52 | 0x8000000000000000;
        *(_QWORD *)v584 = v60;
        v56 = &v60[v50];
      }
      *v56 = 0;
      v589[0] = *(_QWORD *)&v584[8];
      v61 = *(_QWORD *)v584;
      *(_QWORD *)((char *)v589 + 7) = *(_QWORD *)&v584[15];
      v62 = v584[23];
      memset(v584, 0, sizeof(v584));
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v585.__r_.__value_.__l.__data_);
        v585.__r_.__value_.__r.__words[0] = v61;
        v585.__r_.__value_.__l.__size_ = v589[0];
        *(std::string::size_type *)((char *)&v585.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v589 + 7);
        *((_BYTE *)&v585.__r_.__value_.__s + 23) = v62;
        if ((v584[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v584);
          if ((char)v580 < 0)
          {
LABEL_121:
            operator delete(__p);
            if (SHIBYTE(v588) < 0)
              goto LABEL_122;
            goto LABEL_131;
          }
        }
        else if ((char)v580 < 0)
        {
          goto LABEL_121;
        }
      }
      else
      {
        v585.__r_.__value_.__r.__words[0] = v61;
        v585.__r_.__value_.__l.__size_ = v589[0];
        *(std::string::size_type *)((char *)&v585.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v589 + 7);
        *((_BYTE *)&v585.__r_.__value_.__s + 23) = v62;
        if ((char)v580 < 0)
          goto LABEL_121;
      }
      if (SHIBYTE(v588) < 0)
      {
LABEL_122:
        operator delete((void *)v587);
        if (SHIBYTE(v582) < 0)
          goto LABEL_123;
        goto LABEL_132;
      }
LABEL_131:
      if (SHIBYTE(v582) < 0)
      {
LABEL_123:
        operator delete((void *)__dst);
        if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = &v585;
        else
          v63 = (std::string *)v585.__r_.__value_.__r.__words[0];
        if (!v63)
          goto LABEL_529;
        goto LABEL_136;
      }
LABEL_132:
      if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v585;
      else
        v63 = (std::string *)v585.__r_.__value_.__r.__words[0];
      if (!v63)
      {
LABEL_529:
        v79 = 0;
        if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_530;
LABEL_156:
        if ((v79 & 1) == 0)
          goto LABEL_531;
        goto LABEL_157;
      }
LABEL_136:
      v64 = v6[3];
      v65 = v6[6];
      v66 = fopen((const char *)v63, "wb");
      if (!v66)
        goto LABEL_529;
      v67 = v560 + v64 * i;
      v68 = v65 + 144 * v67;
      v71 = *(_QWORD *)(v68 + 48);
      v70 = (unint64_t *)(v68 + 48);
      v69 = v71;
      if (!v71)
        goto LABEL_6;
      v72 = v65 + 144 * v67;
      v74 = *(_QWORD *)(v72 + 32);
      v73 = (uint64_t *)(v72 + 32);
      if (!v74)
        goto LABEL_6;
      v75 = 0;
      v76 = *(_QWORD *)(v65 + 144 * v67 + 88);
      v77 = 1;
      while (2)
      {
        if (!v77)
          goto LABEL_140;
        v78 = 0;
        do
        {
          LODWORD(__ptr) = 0;
          LODWORD(__ptr) = *(unsigned __int8 *)(v76 + v78);
          if (fwrite(&__ptr, 4uLL, 1uLL, v66) != 1)
          {
            fclose(v66);
            v79 = 0;
            goto LABEL_155;
          }
          ++v78;
          v77 = *v73;
        }
        while (v78 < *v73);
        v69 = *v70;
LABEL_140:
        ++v75;
        v76 += v73[1];
        if (v75 < v69)
          continue;
        break;
      }
LABEL_6:
      fclose(v66);
      v8 = v6[3];
      if (++v560 < v8)
        continue;
      break;
    }
    v7 = v6[2];
LABEL_150:
    v79 = 1;
  }
LABEL_155:
  if ((SHIBYTE(v585.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_156;
LABEL_530:
  operator delete(v585.__r_.__value_.__l.__data_);
  if ((v79 & 1) == 0)
  {
LABEL_531:
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v272 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v273 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v274 = v273;
    if (!v272 && v273 == 0)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 483;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v276 = *(_QWORD *)v564.__r_.__value_.__l.__data_;
    v277 = *(_QWORD *)v564.__r_.__value_.__l.__data_ + 16;
    if (*(char *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v279 = *(const char **)(v276 + 16);
      v278 = *(_QWORD *)(v276 + 24);
      v281 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v281 & 1) == 0)
      {
LABEL_1060:
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__ptr);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
          if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
            operator delete(__ptr);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
      }
    }
    else
    {
      v278 = *(unsigned __int8 *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 39);
      v279 = (const char *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 16);
      v280 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v280 & 1) == 0)
        goto LABEL_1060;
    }
    if (byte_254A4A4F8[23] >= 0)
      v282 = byte_254A4A4F8;
    else
      v282 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v283 = byte_254A4A4F8[23];
    else
      v283 = *(_QWORD *)&byte_254A4A4F8[8];
    __ptr = os_log_create(v282, v279);
    v284 = v572;
    if (v283 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v283 >= 0x17)
    {
      v285 = (v283 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v283 | 7) != 0x17)
        v285 = v283 | 7;
      v286 = v285 + 1;
      v284 = operator new(v285 + 1);
      v572[1] = (void *)v283;
      *(_QWORD *)&v573 = v286 | 0x8000000000000000;
      v572[0] = v284;
    }
    else
    {
      BYTE7(v573) = v283;
      if (!v283)
      {
LABEL_554:
        *((_BYTE *)v284 + v283) = 0;
        BYTE8(v573) = 1;
        v287 = &v574;
        if (v278 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v278 >= 0x17)
        {
          v288 = (v278 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v278 | 7) != 0x17)
            v288 = v278 | 7;
          v289 = v288 + 1;
          v287 = operator new(v288 + 1);
          v575 = v278;
          v576 = v289 | 0x8000000000000000;
          v574 = v287;
        }
        else
        {
          HIBYTE(v576) = v278;
          if (!v278)
            goto LABEL_562;
        }
        memmove(v287, v279, v278);
LABEL_562:
        *((_BYTE *)v287 + v278) = 0;
        v577 = 1;
        v290 = __ptr;
        if (SHIBYTE(v576) < 0)
          operator delete(v574);
        if (BYTE8(v573) && SBYTE7(v573) < 0)
          operator delete(v572[0]);
        if (__ptr)
          os_release(__ptr);
        if (v274 && *(_QWORD *)(v274 + 24))
        {
          v291 = _os_log_pack_size();
          v292 = (std::__shared_weak_count_vtbl *)operator new(v291, (std::align_val_t)8uLL);
          v293 = (std::__shared_weak_count *)operator new();
          v294 = v293;
          v293->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v293->__shared_owners_;
          v293->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v293->__shared_weak_owners_ = 0;
          v293[1].__vftable = v292;
          __ptr = v292;
          v572[0] = v292;
          v572[1] = v293;
          do
            v296 = __ldxr(p_shared_owners);
          while (__stxr(v296 + 1, p_shared_owners));
          v573 = 0uLL;
          v574 = 0;
          do
            v297 = __ldaxr(p_shared_owners);
          while (__stlxr(v297 - 1, p_shared_owners));
          if (!v297)
          {
            ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
            std::__shared_weak_count::__release_weak(v294);
          }
          v298 = __ptr;
          *(_WORD *)_os_log_pack_fill() = 0;
          v299 = operator new();
          v300 = *(unsigned __int8 *)(v276 + 39);
          if ((v300 & 0x80u) == 0)
            v301 = v277;
          else
            v301 = *(_QWORD *)(v276 + 16);
          if ((v300 & 0x80u) != 0)
            v300 = *(_QWORD *)(v276 + 24);
          *(_QWORD *)v299 = v298;
          *(_OWORD *)(v299 + 8) = *(_OWORD *)v572;
          v572[0] = 0;
          v572[1] = 0;
          *(_OWORD *)(v299 + 24) = v573;
          v573 = 0uLL;
          *(_QWORD *)(v299 + 40) = v301;
          *(_QWORD *)(v299 + 48) = v300;
          *(_BYTE *)(v299 + 56) = 16;
          v585.__r_.__value_.__r.__words[0] = 0;
          v586.__r_.__value_.__r.__words[0] = v299;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v274 + 24) + 40))(*(_QWORD *)(v274 + 24), &v586);
          v302 = v586.__r_.__value_.__r.__words[0];
          v586.__r_.__value_.__r.__words[0] = 0;
          if (v302)
          {
            v303 = *(std::__shared_weak_count **)(v302 + 32);
            if (v303)
            {
              v304 = (unint64_t *)&v303->__shared_owners_;
              do
                v305 = __ldaxr(v304);
              while (__stlxr(v305 - 1, v304));
              if (!v305)
              {
                ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                std::__shared_weak_count::__release_weak(v303);
              }
            }
            v306 = *(std::__shared_weak_count **)(v302 + 16);
            if (v306)
            {
              v307 = (unint64_t *)&v306->__shared_owners_;
              do
                v308 = __ldaxr(v307);
              while (__stlxr(v308 - 1, v307));
              if (!v308)
              {
                ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                std::__shared_weak_count::__release_weak(v306);
              }
            }
            MEMORY[0x212BC6398](v302, 0x10F0C40B62ED6C6);
            v309 = v585.__r_.__value_.__r.__words[0];
            v585.__r_.__value_.__r.__words[0] = 0;
            if (v309)
            {
              v310 = *(std::__shared_weak_count **)(v309 + 32);
              if (v310)
              {
                v311 = (unint64_t *)&v310->__shared_owners_;
                do
                  v312 = __ldaxr(v311);
                while (__stlxr(v312 - 1, v311));
                if (!v312)
                {
                  ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                  std::__shared_weak_count::__release_weak(v310);
                }
              }
              v313 = *(std::__shared_weak_count **)(v309 + 16);
              if (v313)
              {
                v314 = (unint64_t *)&v313->__shared_owners_;
                do
                  v315 = __ldaxr(v314);
                while (__stlxr(v315 - 1, v314));
                if (!v315)
                {
                  ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                  std::__shared_weak_count::__release_weak(v313);
                }
              }
              MEMORY[0x212BC6398](v309, 0x10F0C40B62ED6C6);
            }
          }
          v316 = (std::__shared_weak_count *)*((_QWORD *)&v573 + 1);
          if (*((_QWORD *)&v573 + 1))
          {
            v317 = (unint64_t *)(*((_QWORD *)&v573 + 1) + 8);
            do
              v318 = __ldaxr(v317);
            while (__stlxr(v318 - 1, v317));
            if (!v318)
            {
              ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
              std::__shared_weak_count::__release_weak(v316);
            }
          }
          v319 = (std::__shared_weak_count *)v572[1];
          if (v572[1])
          {
            v320 = (unint64_t *)((char *)v572[1] + 8);
            do
              v321 = __ldaxr(v320);
            while (__stlxr(v321 - 1, v320));
            if (!v321)
            {
              ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
              std::__shared_weak_count::__release_weak(v319);
            }
          }
        }
        else
        {
          os_log_type_enabled(v290, OS_LOG_TYPE_ERROR);
          LOWORD(__ptr) = 0;
          v322 = (void *)_os_log_send_and_compose_impl();
          if (v322)
            free(v322);
        }
        if (v272)
        {
          sub_20E8C003C((uint64_t)&v564, "Error dumping gaussian pyramid.");
          sub_20E863570((uint64_t)&v564);
        }
        sub_20E863570((uint64_t)&v564);
        v323 = v570;
        if (!v570)
          return 0;
        v324 = (unint64_t *)&v570->__shared_owners_;
        do
          v325 = __ldaxr(v324);
        while (__stlxr(v325 - 1, v324));
        goto LABEL_917;
      }
    }
    memmove(v284, v282, v283);
    goto LABEL_554;
  }
LABEL_157:
  v80 = (_QWORD *)a1[7];
  memset(&v585, 0, sizeof(v585));
  v81 = v80[2];
  if (!v81 || (v82 = v80[3]) == 0)
  {
    v153 = 1;
    if ((SHIBYTE(v585.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_312;
    goto LABEL_721;
  }
  v83 = 0;
  while (2)
  {
    if (!v82)
      goto LABEL_306;
    v561 = 0;
    while (2)
    {
      v84 = strlen(a6);
      if (v84 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v85 = v84;
      if (v84 >= 0x17)
      {
        v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v84 | 7) != 0x17)
          v87 = v84 | 7;
        v88 = v87 + 1;
        v86 = (__int128 *)operator new(v87 + 1);
        *((_QWORD *)&__dst + 1) = v85;
        v582 = v88 | 0x8000000000000000;
        *(_QWORD *)&__dst = v86;
        goto LABEL_170;
      }
      HIBYTE(v582) = v84;
      v86 = &__dst;
      if (v84)
LABEL_170:
        memcpy(v86, a6, v85);
      *((_BYTE *)v86 + v85) = 0;
      if (v582 >= 0)
        v89 = 22;
      else
        v89 = (v582 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v582 >= 0)
        v90 = HIBYTE(v582);
      else
        v90 = *((_QWORD *)&__dst + 1);
      if (v89 - v90 >= 0xB)
      {
        v95 = &__dst;
        if (v582 < 0)
          v95 = (__int128 *)__dst;
        v96 = (char *)v95 + v90;
        *(_QWORD *)v96 = *(_QWORD *)"/DesGenBlur";
        *(_DWORD *)(v96 + 7) = 1920298050;
        v97 = v90 + 11;
        if (SHIBYTE(v582) < 0)
          *((_QWORD *)&__dst + 1) = v90 + 11;
        else
          HIBYTE(v582) = v97 & 0x7F;
        v98 = (char *)v95 + v97;
      }
      else
      {
        v91 = v90 + 11;
        if (0x7FFFFFFFFFFFFFF6 - v89 < v90 + 11 - v89)
          sub_20E860B7C();
        if (v582 >= 0)
          v92 = &__dst;
        else
          v92 = (__int128 *)__dst;
        v93 = 0x7FFFFFFFFFFFFFF7;
        if (v89 < 0x3FFFFFFFFFFFFFF3)
        {
          v94 = 2 * v89;
          if (v91 > 2 * v89)
            v94 = v90 + 11;
          if (v94 >= 0x17)
          {
            v99 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
            v100 = v94 | 7;
            if (v100 == 23)
              v100 = v99;
            v93 = v100 + 1;
          }
          else
          {
            v93 = 23;
          }
        }
        v101 = (char *)operator new(v93);
        v102 = v101;
        if (v90)
          memmove(v101, v92, v90);
        v103 = &v102[v90];
        *(_QWORD *)v103 = *(_QWORD *)"/DesGenBlur";
        *(_DWORD *)(v103 + 7) = 1920298050;
        if (v89 != 22)
          operator delete(v92);
        *((_QWORD *)&__dst + 1) = v90 + 11;
        v582 = v93 | 0x8000000000000000;
        *(_QWORD *)&__dst = v102;
        v98 = &v102[v91];
      }
      *v98 = 0;
      v587 = __dst;
      v588 = v582;
      v582 = 0;
      __dst = 0uLL;
      v565 = 0;
      std::to_string(&v586, v561 + v82 * v83);
      __ptr = &v564;
      v572[0] = &v586;
      v572[1] = &v564;
      *(_QWORD *)&v573 = &v586;
      *((_QWORD *)&v573 + 1) = &v586;
      if (v565 == -1)
        sub_20E877AB8();
      p_ptr = (void **)&__ptr;
      ((void (*)(void ***, std::string *))off_24CA06FA0[v565])(&p_ptr, &v564);
      if (SHIBYTE(v586.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v586.__r_.__value_.__l.__data_);
      if (v565 == -1)
        sub_20E877AB8();
      __ptr = &v586;
      ((void (*)(void **__return_ptr, NSObject **, std::string *))off_24CA06FD0[v565])(&__p, &__ptr, &v564);
      if (v565 != -1)
        ((void (*)(NSObject **, std::string *))off_24CA06FB8[v565])(&__ptr, &v564);
      v104 = v80;
      v105 = v83;
      if ((v580 & 0x80u) == 0)
        v106 = &__p;
      else
        v106 = __p;
      if ((v580 & 0x80u) == 0)
        v107 = v580;
      else
        v107 = v579;
      if (v588 >= 0)
        v108 = 22;
      else
        v108 = (v588 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v588 >= 0)
        v109 = HIBYTE(v588);
      else
        v109 = *((_QWORD *)&v587 + 1);
      if (v108 - v109 >= v107)
      {
        if (v107)
        {
          if (v588 >= 0)
            v114 = &v587;
          else
            v114 = (__int128 *)v587;
          memmove((char *)v114 + v109, v106, v107);
          v115 = v109 + v107;
          if (SHIBYTE(v588) < 0)
            *((_QWORD *)&v587 + 1) = v109 + v107;
          else
            HIBYTE(v588) = v115 & 0x7F;
          v116 = (char *)v114 + v115;
          goto LABEL_244;
        }
      }
      else
      {
        v110 = v109 + v107;
        if (0x7FFFFFFFFFFFFFF6 - v108 < v109 + v107 - v108)
          sub_20E860B7C();
        if (v588 >= 0)
          v111 = &v587;
        else
          v111 = (__int128 *)v587;
        v112 = 0x7FFFFFFFFFFFFFF7;
        if (v108 < 0x3FFFFFFFFFFFFFF3)
        {
          v113 = 2 * v108;
          if (v110 > 2 * v108)
            v113 = v109 + v107;
          if (v113 >= 0x17)
          {
            v117 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
            v118 = v113 | 7;
            if (v118 == 23)
              v118 = v117;
            v112 = v118 + 1;
          }
          else
          {
            v112 = 23;
          }
        }
        v119 = (char *)operator new(v112);
        v120 = v119;
        if (v109)
          memmove(v119, v111, v109);
        memcpy(&v120[v109], v106, v107);
        if (v108 != 22)
          operator delete(v111);
        *((_QWORD *)&v587 + 1) = v109 + v107;
        v588 = v112 | 0x8000000000000000;
        *(_QWORD *)&v587 = v120;
        v116 = &v120[v110];
LABEL_244:
        *v116 = 0;
      }
      v121 = v588;
      *(_QWORD *)&v584[16] = v588;
      *(_OWORD *)v584 = v587;
      v588 = 0;
      v587 = 0uLL;
      if (v584[23] >= 0)
        v122 = 22;
      else
        v122 = (v121 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v584[23] >= 0)
        v123 = HIBYTE(v121);
      else
        v123 = *(_QWORD *)&v584[8];
      if (v122 - v123 >= 8)
      {
        v128 = v584;
        if (v584[23] < 0)
          v128 = *(_BYTE **)v584;
        *(_QWORD *)&v128[v123] = 0x746C73722E74754FLL;
        v129 = v123 + 8;
        v83 = v105;
        if ((v584[23] & 0x80000000) != 0)
          *(_QWORD *)&v584[8] = v123 + 8;
        else
          v584[23] = v129 & 0x7F;
        v80 = v104;
        v130 = &v128[v129];
      }
      else
      {
        v124 = v123 + 8;
        if (0x7FFFFFFFFFFFFFF6 - v122 < v123 + 8 - v122)
          sub_20E860B7C();
        v83 = v105;
        if (v584[23] >= 0)
          v125 = v584;
        else
          v125 = *(_BYTE **)v584;
        v126 = 0x7FFFFFFFFFFFFFF7;
        v80 = v104;
        if (v122 < 0x3FFFFFFFFFFFFFF3)
        {
          v127 = 2 * v122;
          if (v124 > 2 * v122)
            v127 = v123 + 8;
          if (v127 >= 0x17)
          {
            v131 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
            v132 = v127 | 7;
            if (v132 == 23)
              v132 = v131;
            v126 = v132 + 1;
          }
          else
          {
            v126 = 23;
          }
        }
        v133 = (char *)operator new(v126);
        v134 = v133;
        if (v123)
          memmove(v133, v125, v123);
        *(_QWORD *)&v134[v123] = 0x746C73722E74754FLL;
        if (v122 != 22)
          operator delete(v125);
        *(_QWORD *)&v584[8] = v123 + 8;
        *(_QWORD *)&v584[16] = v126 | 0x8000000000000000;
        *(_QWORD *)v584 = v134;
        v130 = &v134[v124];
      }
      *v130 = 0;
      v589[0] = *(_QWORD *)&v584[8];
      v135 = *(_QWORD *)v584;
      *(_QWORD *)((char *)v589 + 7) = *(_QWORD *)&v584[15];
      v136 = v584[23];
      memset(v584, 0, sizeof(v584));
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v585.__r_.__value_.__l.__data_);
        v585.__r_.__value_.__r.__words[0] = v135;
        v585.__r_.__value_.__l.__size_ = v589[0];
        *(std::string::size_type *)((char *)&v585.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v589 + 7);
        *((_BYTE *)&v585.__r_.__value_.__s + 23) = v136;
        if ((v584[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v584);
          if (((char)v580 & 0x80000000) == 0)
            goto LABEL_286;
        }
        else if (((char)v580 & 0x80000000) == 0)
        {
          goto LABEL_286;
        }
LABEL_277:
        operator delete(__p);
        if (SHIBYTE(v588) < 0)
          goto LABEL_278;
LABEL_287:
        if ((SHIBYTE(v582) & 0x80000000) == 0)
          goto LABEL_288;
LABEL_279:
        operator delete((void *)__dst);
        if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v137 = &v585;
        else
          v137 = (std::string *)v585.__r_.__value_.__r.__words[0];
        if (!v137)
          goto LABEL_720;
      }
      else
      {
        v585.__r_.__value_.__r.__words[0] = v135;
        v585.__r_.__value_.__l.__size_ = v589[0];
        *(std::string::size_type *)((char *)&v585.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v589 + 7);
        *((_BYTE *)&v585.__r_.__value_.__s + 23) = v136;
        if ((char)v580 < 0)
          goto LABEL_277;
LABEL_286:
        if ((SHIBYTE(v588) & 0x80000000) == 0)
          goto LABEL_287;
LABEL_278:
        operator delete((void *)v587);
        if (SHIBYTE(v582) < 0)
          goto LABEL_279;
LABEL_288:
        if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v137 = &v585;
        else
          v137 = (std::string *)v585.__r_.__value_.__r.__words[0];
        if (!v137)
        {
LABEL_720:
          v153 = 0;
          if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_721;
LABEL_312:
          if ((v153 & 1) == 0)
            goto LABEL_722;
          goto LABEL_313;
        }
      }
      v138 = v80[3];
      v139 = v80[6];
      v140 = fopen((const char *)v137, "wb");
      if (!v140)
        goto LABEL_720;
      v141 = v561 + v138 * v83;
      v142 = v139 + 144 * v141;
      v145 = *(_QWORD *)(v142 + 48);
      v144 = (unint64_t *)(v142 + 48);
      v143 = v145;
      if (!v145)
        goto LABEL_162;
      v146 = v139 + 144 * v141;
      v148 = *(_QWORD *)(v146 + 32);
      v147 = (uint64_t *)(v146 + 32);
      if (!v148)
        goto LABEL_162;
      v149 = 0;
      v150 = *(_QWORD *)(v139 + 144 * v141 + 88);
      v151 = 1;
      while (2)
      {
        if (!v151)
          goto LABEL_296;
        v152 = 0;
        do
        {
          LODWORD(__ptr) = 0;
          LODWORD(__ptr) = *(unsigned __int16 *)(v150 + 2 * v152);
          if (fwrite(&__ptr, 4uLL, 1uLL, v140) != 1)
          {
            fclose(v140);
            v153 = 0;
            goto LABEL_311;
          }
          ++v152;
          v151 = *v147;
        }
        while (v152 < *v147);
        v143 = *v144;
LABEL_296:
        ++v149;
        v150 += 2 * v147[1];
        if (v149 < v143)
          continue;
        break;
      }
LABEL_162:
      fclose(v140);
      v82 = v80[3];
      if (++v561 < v82)
        continue;
      break;
    }
    v81 = v80[2];
LABEL_306:
    ++v83;
    v153 = 1;
    if (v83 < v81)
      continue;
    break;
  }
LABEL_311:
  if ((SHIBYTE(v585.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_312;
LABEL_721:
  operator delete(v585.__r_.__value_.__l.__data_);
  if ((v153 & 1) == 0)
  {
LABEL_722:
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v373 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v374 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v375 = v374;
    if (!v373 && !v374)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 489;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v376 = *(_QWORD *)v564.__r_.__value_.__l.__data_;
    v377 = *(_QWORD *)v564.__r_.__value_.__l.__data_ + 16;
    if (*(char *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v379 = *(const char **)(v376 + 16);
      v378 = *(_QWORD *)(v376 + 24);
    }
    else
    {
      v378 = *(unsigned __int8 *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 39);
      v379 = (const char *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 16);
    }
    v380 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v380 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v381 = byte_254A4A4F8;
    else
      v381 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v382 = byte_254A4A4F8[23];
    else
      v382 = *(_QWORD *)&byte_254A4A4F8[8];
    __ptr = os_log_create(v381, v379);
    v383 = v572;
    if (v382 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v382 >= 0x17)
    {
      v384 = (v382 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v382 | 7) != 0x17)
        v384 = v382 | 7;
      v385 = v384 + 1;
      v383 = operator new(v384 + 1);
      v572[1] = (void *)v382;
      *(_QWORD *)&v573 = v385 | 0x8000000000000000;
      v572[0] = v383;
    }
    else
    {
      BYTE7(v573) = v382;
      if (!v382)
      {
LABEL_743:
        *((_BYTE *)v383 + v382) = 0;
        BYTE8(v573) = 1;
        v386 = &v574;
        if (v378 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v378 >= 0x17)
        {
          v387 = (v378 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v378 | 7) != 0x17)
            v387 = v378 | 7;
          v388 = v387 + 1;
          v386 = operator new(v387 + 1);
          v575 = v378;
          v576 = v388 | 0x8000000000000000;
          v574 = v386;
        }
        else
        {
          HIBYTE(v576) = v378;
          if (!v378)
          {
LABEL_751:
            *((_BYTE *)v386 + v378) = 0;
            v577 = 1;
            v389 = __ptr;
            if (SHIBYTE(v576) < 0)
              operator delete(v574);
            if (BYTE8(v573) && SBYTE7(v573) < 0)
              operator delete(v572[0]);
            if (__ptr)
              os_release(__ptr);
            if (v375 && *(_QWORD *)(v375 + 24))
            {
              v390 = _os_log_pack_size();
              v391 = (std::__shared_weak_count_vtbl *)operator new(v390, (std::align_val_t)8uLL);
              v392 = (std::__shared_weak_count *)operator new();
              v393 = v392;
              v392->__shared_owners_ = 0;
              v394 = (unint64_t *)&v392->__shared_owners_;
              v392->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v392->__shared_weak_owners_ = 0;
              v392[1].__vftable = v391;
              __ptr = v391;
              v572[0] = v391;
              v572[1] = v392;
              do
                v395 = __ldxr(v394);
              while (__stxr(v395 + 1, v394));
              v573 = 0uLL;
              v574 = 0;
              do
                v396 = __ldaxr(v394);
              while (__stlxr(v396 - 1, v394));
              if (!v396)
              {
                ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                std::__shared_weak_count::__release_weak(v393);
              }
              v397 = __ptr;
              *(_WORD *)_os_log_pack_fill() = 0;
              v398 = operator new();
              v399 = *(unsigned __int8 *)(v376 + 39);
              if ((v399 & 0x80u) == 0)
                v400 = v377;
              else
                v400 = *(_QWORD *)(v376 + 16);
              if ((v399 & 0x80u) != 0)
                v399 = *(_QWORD *)(v376 + 24);
              *(_QWORD *)v398 = v397;
              *(_OWORD *)(v398 + 8) = *(_OWORD *)v572;
              v572[0] = 0;
              v572[1] = 0;
              *(_OWORD *)(v398 + 24) = v573;
              v573 = 0uLL;
              *(_QWORD *)(v398 + 40) = v400;
              *(_QWORD *)(v398 + 48) = v399;
              *(_BYTE *)(v398 + 56) = 16;
              v585.__r_.__value_.__r.__words[0] = 0;
              v586.__r_.__value_.__r.__words[0] = v398;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v375 + 24) + 40))(*(_QWORD *)(v375 + 24), &v586);
              v401 = v586.__r_.__value_.__r.__words[0];
              v586.__r_.__value_.__r.__words[0] = 0;
              if (v401)
              {
                v402 = *(std::__shared_weak_count **)(v401 + 32);
                if (v402)
                {
                  v403 = (unint64_t *)&v402->__shared_owners_;
                  do
                    v404 = __ldaxr(v403);
                  while (__stlxr(v404 - 1, v403));
                  if (!v404)
                  {
                    ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
                    std::__shared_weak_count::__release_weak(v402);
                  }
                }
                v405 = *(std::__shared_weak_count **)(v401 + 16);
                if (v405)
                {
                  v406 = (unint64_t *)&v405->__shared_owners_;
                  do
                    v407 = __ldaxr(v406);
                  while (__stlxr(v407 - 1, v406));
                  if (!v407)
                  {
                    ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                    std::__shared_weak_count::__release_weak(v405);
                  }
                }
                MEMORY[0x212BC6398](v401, 0x10F0C40B62ED6C6);
                v408 = v585.__r_.__value_.__r.__words[0];
                v585.__r_.__value_.__r.__words[0] = 0;
                if (v408)
                {
                  v409 = *(std::__shared_weak_count **)(v408 + 32);
                  if (v409)
                  {
                    v410 = (unint64_t *)&v409->__shared_owners_;
                    do
                      v411 = __ldaxr(v410);
                    while (__stlxr(v411 - 1, v410));
                    if (!v411)
                    {
                      ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
                      std::__shared_weak_count::__release_weak(v409);
                    }
                  }
                  v412 = *(std::__shared_weak_count **)(v408 + 16);
                  if (v412)
                  {
                    v413 = (unint64_t *)&v412->__shared_owners_;
                    do
                      v414 = __ldaxr(v413);
                    while (__stlxr(v414 - 1, v413));
                    if (!v414)
                    {
                      ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
                      std::__shared_weak_count::__release_weak(v412);
                    }
                  }
                  MEMORY[0x212BC6398](v408, 0x10F0C40B62ED6C6);
                }
              }
              v415 = (std::__shared_weak_count *)*((_QWORD *)&v573 + 1);
              if (*((_QWORD *)&v573 + 1))
              {
                v416 = (unint64_t *)(*((_QWORD *)&v573 + 1) + 8);
                do
                  v417 = __ldaxr(v416);
                while (__stlxr(v417 - 1, v416));
                if (!v417)
                {
                  ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
                  std::__shared_weak_count::__release_weak(v415);
                }
              }
              v418 = (std::__shared_weak_count *)v572[1];
              if (v572[1])
              {
                v419 = (unint64_t *)((char *)v572[1] + 8);
                do
                  v420 = __ldaxr(v419);
                while (__stlxr(v420 - 1, v419));
                if (!v420)
                {
                  ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
                  std::__shared_weak_count::__release_weak(v418);
                }
              }
            }
            else
            {
              os_log_type_enabled(v389, OS_LOG_TYPE_ERROR);
              LOWORD(__ptr) = 0;
              v421 = (void *)_os_log_send_and_compose_impl();
              if (v421)
                free(v421);
            }
            if (v373)
            {
              sub_20E8C003C((uint64_t)&v564, "Error dumping intermediate gaussian pyramid.");
              sub_20E863570((uint64_t)&v564);
            }
            sub_20E863570((uint64_t)&v564);
            v323 = v570;
            if (!v570)
              return 0;
            v422 = (unint64_t *)&v570->__shared_owners_;
            do
              v325 = __ldaxr(v422);
            while (__stlxr(v325 - 1, v422));
            goto LABEL_917;
          }
        }
        memmove(v386, v379, v378);
        goto LABEL_751;
      }
    }
    memmove(v383, v381, v382);
    goto LABEL_743;
  }
LABEL_313:
  v154 = a1[8];
  __ptr = 0;
  v572[0] = 0;
  v572[1] = 0;
  *(_QWORD *)&__dst = 0;
  if (!*(_QWORD *)(v154 + 16))
  {
LABEL_512:
    v184 = 1;
    if ((SHIBYTE(v572[1]) & 0x80000000) == 0)
      goto LABEL_360;
LABEL_513:
    operator delete(__ptr);
    if ((v184 & 1) != 0)
      goto LABEL_361;
LABEL_514:
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v259 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v260 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v261 = v260;
    if (!v259 && !v260)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 495;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v262 = *(_QWORD *)v564.__r_.__value_.__l.__data_;
    v263 = *(_QWORD *)v564.__r_.__value_.__l.__data_ + 16;
    if (*(char *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v265 = *(const char **)(v262 + 16);
      v264 = *(_QWORD *)(v262 + 24);
    }
    else
    {
      v264 = *(unsigned __int8 *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 39);
      v265 = (const char *)(*(_QWORD *)v564.__r_.__value_.__l.__data_ + 16);
    }
    v430 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v430 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v431 = byte_254A4A4F8;
    else
      v431 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v432 = byte_254A4A4F8[23];
    else
      v432 = *(_QWORD *)&byte_254A4A4F8[8];
    __ptr = os_log_create(v431, v265);
    v433 = v572;
    if (v432 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v432 >= 0x17)
    {
      v434 = (v432 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v432 | 7) != 0x17)
        v434 = v432 | 7;
      v435 = v434 + 1;
      v433 = operator new(v434 + 1);
      v572[1] = (void *)v432;
      *(_QWORD *)&v573 = v435 | 0x8000000000000000;
      v572[0] = v433;
    }
    else
    {
      BYTE7(v573) = v432;
      if (!v432)
      {
LABEL_849:
        *((_BYTE *)v433 + v432) = 0;
        BYTE8(v573) = 1;
        v436 = &v574;
        if (v264 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v264 >= 0x17)
        {
          v437 = (v264 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v264 | 7) != 0x17)
            v437 = v264 | 7;
          v438 = v437 + 1;
          v436 = operator new(v437 + 1);
          v575 = v264;
          v576 = v438 | 0x8000000000000000;
          v574 = v436;
        }
        else
        {
          HIBYTE(v576) = v264;
          if (!v264)
            goto LABEL_857;
        }
        memmove(v436, v265, v264);
LABEL_857:
        *((_BYTE *)v436 + v264) = 0;
        v577 = 1;
        v439 = __ptr;
        if (SHIBYTE(v576) < 0)
          operator delete(v574);
        if (BYTE8(v573) && SBYTE7(v573) < 0)
          operator delete(v572[0]);
        if (__ptr)
          os_release(__ptr);
        if (v261 && *(_QWORD *)(v261 + 24))
        {
          v440 = _os_log_pack_size();
          v441 = (std::__shared_weak_count_vtbl *)operator new(v440, (std::align_val_t)8uLL);
          v442 = (std::__shared_weak_count *)operator new();
          v443 = v442;
          v442->__shared_owners_ = 0;
          v444 = (unint64_t *)&v442->__shared_owners_;
          v442->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v442->__shared_weak_owners_ = 0;
          v442[1].__vftable = v441;
          __ptr = v441;
          v572[0] = v441;
          v572[1] = v442;
          do
            v445 = __ldxr(v444);
          while (__stxr(v445 + 1, v444));
          v573 = 0uLL;
          v574 = 0;
          do
            v446 = __ldaxr(v444);
          while (__stlxr(v446 - 1, v444));
          if (!v446)
          {
            ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
            std::__shared_weak_count::__release_weak(v443);
          }
          v447 = __ptr;
          *(_WORD *)_os_log_pack_fill() = 0;
          v448 = operator new();
          v449 = *(unsigned __int8 *)(v262 + 39);
          if ((v449 & 0x80u) == 0)
            v450 = v263;
          else
            v450 = *(_QWORD *)(v262 + 16);
          if ((v449 & 0x80u) != 0)
            v449 = *(_QWORD *)(v262 + 24);
          *(_QWORD *)v448 = v447;
          *(_OWORD *)(v448 + 8) = *(_OWORD *)v572;
          v572[0] = 0;
          v572[1] = 0;
          *(_OWORD *)(v448 + 24) = v573;
          v573 = 0uLL;
          *(_QWORD *)(v448 + 40) = v450;
          *(_QWORD *)(v448 + 48) = v449;
          *(_BYTE *)(v448 + 56) = 16;
          v585.__r_.__value_.__r.__words[0] = 0;
          v586.__r_.__value_.__r.__words[0] = v448;
          (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v261 + 24) + 40))(*(_QWORD *)(v261 + 24), &v586);
          v451 = v586.__r_.__value_.__r.__words[0];
          v586.__r_.__value_.__r.__words[0] = 0;
          if (v451)
          {
            v452 = *(std::__shared_weak_count **)(v451 + 32);
            if (v452)
            {
              v453 = (unint64_t *)&v452->__shared_owners_;
              do
                v454 = __ldaxr(v453);
              while (__stlxr(v454 - 1, v453));
              if (!v454)
              {
                ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
                std::__shared_weak_count::__release_weak(v452);
              }
            }
            v455 = *(std::__shared_weak_count **)(v451 + 16);
            if (v455)
            {
              v456 = (unint64_t *)&v455->__shared_owners_;
              do
                v457 = __ldaxr(v456);
              while (__stlxr(v457 - 1, v456));
              if (!v457)
              {
                ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
                std::__shared_weak_count::__release_weak(v455);
              }
            }
            MEMORY[0x212BC6398](v451, 0x10F0C40B62ED6C6);
            v458 = v585.__r_.__value_.__r.__words[0];
            v585.__r_.__value_.__r.__words[0] = 0;
            if (v458)
            {
              v459 = *(std::__shared_weak_count **)(v458 + 32);
              if (v459)
              {
                v460 = (unint64_t *)&v459->__shared_owners_;
                do
                  v461 = __ldaxr(v460);
                while (__stlxr(v461 - 1, v460));
                if (!v461)
                {
                  ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
                  std::__shared_weak_count::__release_weak(v459);
                }
              }
              v462 = *(std::__shared_weak_count **)(v458 + 16);
              if (v462)
              {
                v463 = (unint64_t *)&v462->__shared_owners_;
                do
                  v464 = __ldaxr(v463);
                while (__stlxr(v464 - 1, v463));
                if (!v464)
                {
                  ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
                  std::__shared_weak_count::__release_weak(v462);
                }
              }
              MEMORY[0x212BC6398](v458, 0x10F0C40B62ED6C6);
            }
          }
          v465 = (std::__shared_weak_count *)*((_QWORD *)&v573 + 1);
          if (*((_QWORD *)&v573 + 1))
          {
            v466 = (unint64_t *)(*((_QWORD *)&v573 + 1) + 8);
            do
              v467 = __ldaxr(v466);
            while (__stlxr(v467 - 1, v466));
            if (!v467)
            {
              ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
              std::__shared_weak_count::__release_weak(v465);
            }
          }
          v468 = (std::__shared_weak_count *)v572[1];
          if (v572[1])
          {
            v469 = (unint64_t *)((char *)v572[1] + 8);
            do
              v470 = __ldaxr(v469);
            while (__stlxr(v470 - 1, v469));
            if (!v470)
            {
              ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
              std::__shared_weak_count::__release_weak(v468);
            }
          }
        }
        else
        {
          os_log_type_enabled(v439, OS_LOG_TYPE_ERROR);
          LOWORD(__ptr) = 0;
          v471 = (void *)_os_log_send_and_compose_impl();
          if (v471)
            free(v471);
        }
        if (v259)
        {
          sub_20E8C003C((uint64_t)&v564, "Error dumping blur pyramid.");
          sub_20E863570((uint64_t)&v564);
        }
        sub_20E863570((uint64_t)&v564);
        v323 = v570;
        if (!v570)
          return 0;
        v472 = (unint64_t *)&v570->__shared_owners_;
        do
          v325 = __ldaxr(v472);
        while (__stlxr(v325 - 1, v472));
LABEL_917:
        if (!v325)
        {
          ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
          std::__shared_weak_count::__release_weak(v323);
        }
        return 0;
      }
    }
    memmove(v433, v431, v432);
    goto LABEL_849;
  }
LABEL_316:
  v155 = strlen(a6);
  if (v155 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v156 = v155;
  if (v155 >= 0x17)
  {
    v158 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v155 | 7) != 0x17)
      v158 = v155 | 7;
    v159 = v158 + 1;
    v157 = operator new(v158 + 1);
    v585.__r_.__value_.__l.__size_ = v156;
    v585.__r_.__value_.__r.__words[2] = v159 | 0x8000000000000000;
    v585.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
    goto LABEL_323;
  }
  *((_BYTE *)&v585.__r_.__value_.__s + 23) = v155;
  v157 = &v585;
  if (v155)
LABEL_323:
    memcpy(v157, a6, v156);
  *((_BYTE *)v157 + v156) = 0;
  v160 = std::string::append(&v585, "/DesGen3x3", 0xAuLL);
  v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
  v586.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v586.__r_.__value_.__l.__data_ = v161;
  v160->__r_.__value_.__l.__size_ = 0;
  v160->__r_.__value_.__r.__words[2] = 0;
  v160->__r_.__value_.__r.__words[0] = 0;
  sub_20E9F6B94((unint64_t *)&__dst);
  if (v584[23] >= 0)
    v162 = v584;
  else
    v162 = *(const std::string::value_type **)v584;
  if (v584[23] >= 0)
    v163 = v584[23];
  else
    v163 = *(_QWORD *)&v584[8];
  v164 = std::string::append(&v586, v162, v163);
  v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
  v564.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v564.__r_.__value_.__l.__data_ = v165;
  v164->__r_.__value_.__l.__size_ = 0;
  v164->__r_.__value_.__r.__words[2] = 0;
  v164->__r_.__value_.__r.__words[0] = 0;
  v166 = std::string::append(&v564, "Out.rslt", 8uLL);
  v167 = v166->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v587 = v166->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v587 + 7) = *(std::string::size_type *)((char *)&v166->__r_.__value_.__r.__words[1] + 7);
  v168 = HIBYTE(v166->__r_.__value_.__r.__words[2]);
  v166->__r_.__value_.__l.__size_ = 0;
  v166->__r_.__value_.__r.__words[2] = 0;
  v166->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v572[1]) < 0)
    operator delete(__ptr);
  __ptr = v167;
  v572[0] = (void *)v587;
  *(void **)((char *)v572 + 7) = *(void **)((char *)&v587 + 7);
  HIBYTE(v572[1]) = v168;
  if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v564.__r_.__value_.__l.__data_);
    if ((v584[23] & 0x80000000) != 0)
      goto LABEL_342;
LABEL_334:
    if ((SHIBYTE(v586.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_335;
LABEL_343:
    operator delete(v586.__r_.__value_.__l.__data_);
    if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_344;
LABEL_336:
    if (SHIBYTE(v572[1]) >= 0)
      v169 = (const char *)&__ptr;
    else
      v169 = (const char *)__ptr;
    if (!v169)
      goto LABEL_359;
  }
  else
  {
    if ((v584[23] & 0x80000000) == 0)
      goto LABEL_334;
LABEL_342:
    operator delete(*(void **)v584);
    if (SHIBYTE(v586.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_343;
LABEL_335:
    if ((SHIBYTE(v585.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_336;
LABEL_344:
    operator delete(v585.__r_.__value_.__l.__data_);
    if (SHIBYTE(v572[1]) >= 0)
      v169 = (const char *)&__ptr;
    else
      v169 = (const char *)__ptr;
    if (!v169)
      goto LABEL_359;
  }
  v170 = __dst;
  v171 = *(_QWORD *)(v154 + 48);
  v172 = fopen(v169, "wb");
  if (!v172)
    goto LABEL_359;
  v173 = v171 + 144 * v170;
  v176 = *(_QWORD *)(v173 + 48);
  v175 = (unint64_t *)(v173 + 48);
  v174 = v176;
  if (!v176)
    goto LABEL_315;
  v177 = v171 + 144 * v170;
  v179 = *(_QWORD *)(v177 + 32);
  v178 = (uint64_t *)(v177 + 32);
  if (!v179)
    goto LABEL_315;
  v180 = 0;
  v181 = *(_QWORD *)(v171 + 144 * v170 + 88);
  v182 = 1;
LABEL_353:
  if (!v182)
    goto LABEL_352;
  v183 = 0;
  while (1)
  {
    LODWORD(v564.__r_.__value_.__l.__data_) = 0;
    LODWORD(v564.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(v181 + v183);
    if (fwrite(&v564, 4uLL, 1uLL, v172) != 1)
      break;
    ++v183;
    v182 = *v178;
    if (v183 >= *v178)
    {
      v174 = *v175;
LABEL_352:
      ++v180;
      v181 += v178[1];
      if (v180 < v174)
        goto LABEL_353;
LABEL_315:
      fclose(v172);
      *(_QWORD *)&__dst = __dst + 1;
      if ((unint64_t)__dst >= *(_QWORD *)(v154 + 16))
        goto LABEL_512;
      goto LABEL_316;
    }
  }
  fclose(v172);
LABEL_359:
  v184 = 0;
  if (SHIBYTE(v572[1]) < 0)
    goto LABEL_513;
LABEL_360:
  if ((v184 & 1) == 0)
    goto LABEL_514;
LABEL_361:
  v185 = *(_QWORD **)(a2 + 224);
  memset(&v585, 0, sizeof(v585));
  v186 = v185[2];
  if (!v186 || (v187 = v185[3]) == 0)
  {
    v258 = 1;
    if ((SHIBYTE(v585.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_626;
    goto LABEL_520;
  }
  v188 = 0;
  while (!v187)
  {
LABEL_510:
    ++v188;
    v258 = 1;
    if (v188 >= v186)
      goto LABEL_625;
  }
  v562 = 0;
  while (2)
  {
    v189 = strlen(a6);
    if (v189 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v190 = v189;
    if (v189 >= 0x17)
    {
      v192 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v189 | 7) != 0x17)
        v192 = v189 | 7;
      v193 = v192 + 1;
      v191 = (__int128 *)operator new(v192 + 1);
      *((_QWORD *)&__dst + 1) = v190;
      v582 = v193 | 0x8000000000000000;
      *(_QWORD *)&__dst = v191;
      goto LABEL_374;
    }
    HIBYTE(v582) = v189;
    v191 = &__dst;
    if (v189)
LABEL_374:
      memcpy(v191, a6, v190);
    *((_BYTE *)v191 + v190) = 0;
    if (v582 >= 0)
      v194 = 22;
    else
      v194 = (v582 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v582 >= 0)
      v195 = HIBYTE(v582);
    else
      v195 = *((_QWORD *)&__dst + 1);
    if (v194 - v195 >= 9)
    {
      v200 = &__dst;
      if (v582 < 0)
        v200 = (__int128 *)__dst;
      v201 = (char *)v200 + v195;
      *(_QWORD *)v201 = *(_QWORD *)"/DesGenRM";
      v201[8] = 77;
      v202 = v195 + 9;
      if (SHIBYTE(v582) < 0)
        *((_QWORD *)&__dst + 1) = v195 + 9;
      else
        HIBYTE(v582) = v202 & 0x7F;
      v203 = (char *)v200 + v202;
    }
    else
    {
      v196 = v195 + 9;
      if (0x7FFFFFFFFFFFFFF6 - v194 < v195 + 9 - v194)
        sub_20E860B7C();
      if (v582 >= 0)
        v197 = &__dst;
      else
        v197 = (__int128 *)__dst;
      v198 = 0x7FFFFFFFFFFFFFF7;
      if (v194 < 0x3FFFFFFFFFFFFFF3)
      {
        v199 = 2 * v194;
        if (v196 > 2 * v194)
          v199 = v195 + 9;
        if (v199 >= 0x17)
        {
          v204 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
          v205 = v199 | 7;
          if (v205 == 23)
            v205 = v204;
          v198 = v205 + 1;
        }
        else
        {
          v198 = 23;
        }
      }
      v206 = (char *)operator new(v198);
      v207 = v206;
      if (v195)
        memmove(v206, v197, v195);
      v208 = &v207[v195];
      *(_QWORD *)v208 = *(_QWORD *)"/DesGenRM";
      v208[8] = 77;
      if (v194 != 22)
        operator delete(v197);
      *((_QWORD *)&__dst + 1) = v195 + 9;
      v582 = v198 | 0x8000000000000000;
      *(_QWORD *)&__dst = v207;
      v203 = &v207[v196];
    }
    *v203 = 0;
    v587 = __dst;
    v588 = v582;
    v582 = 0;
    __dst = 0uLL;
    v565 = 0;
    std::to_string(&v586, v562 + v187 * v188);
    __ptr = &v564;
    v572[0] = &v586;
    v572[1] = &v564;
    *(_QWORD *)&v573 = &v586;
    *((_QWORD *)&v573 + 1) = &v586;
    if (v565 == -1)
      sub_20E877AB8();
    p_ptr = (void **)&__ptr;
    ((void (*)(void ***, std::string *))off_24CA06FA0[v565])(&p_ptr, &v564);
    if (SHIBYTE(v586.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v586.__r_.__value_.__l.__data_);
    if (v565 == -1)
      sub_20E877AB8();
    __ptr = &v586;
    ((void (*)(void **__return_ptr, NSObject **, std::string *))off_24CA06FD0[v565])(&__p, &__ptr, &v564);
    if (v565 != -1)
      ((void (*)(NSObject **, std::string *))off_24CA06FB8[v565])(&__ptr, &v564);
    v209 = v185;
    v210 = v188;
    if ((v580 & 0x80u) == 0)
      v211 = &__p;
    else
      v211 = __p;
    if ((v580 & 0x80u) == 0)
      v212 = v580;
    else
      v212 = v579;
    if (v588 >= 0)
      v213 = 22;
    else
      v213 = (v588 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v588 >= 0)
      v214 = HIBYTE(v588);
    else
      v214 = *((_QWORD *)&v587 + 1);
    if (v213 - v214 >= v212)
    {
      if (v212)
      {
        if (v588 >= 0)
          v219 = &v587;
        else
          v219 = (__int128 *)v587;
        memmove((char *)v219 + v214, v211, v212);
        v220 = v214 + v212;
        if (SHIBYTE(v588) < 0)
          *((_QWORD *)&v587 + 1) = v214 + v212;
        else
          HIBYTE(v588) = v220 & 0x7F;
        v221 = (char *)v219 + v220;
        goto LABEL_448;
      }
    }
    else
    {
      v215 = v214 + v212;
      if (0x7FFFFFFFFFFFFFF6 - v213 < v214 + v212 - v213)
        sub_20E860B7C();
      if (v588 >= 0)
        v216 = &v587;
      else
        v216 = (__int128 *)v587;
      v217 = 0x7FFFFFFFFFFFFFF7;
      if (v213 < 0x3FFFFFFFFFFFFFF3)
      {
        v218 = 2 * v213;
        if (v215 > 2 * v213)
          v218 = v214 + v212;
        if (v218 >= 0x17)
        {
          v222 = (v218 & 0xFFFFFFFFFFFFFFF8) + 8;
          v223 = v218 | 7;
          if (v223 == 23)
            v223 = v222;
          v217 = v223 + 1;
        }
        else
        {
          v217 = 23;
        }
      }
      v224 = (char *)operator new(v217);
      v225 = v224;
      if (v214)
        memmove(v224, v216, v214);
      memcpy(&v225[v214], v211, v212);
      if (v213 != 22)
        operator delete(v216);
      *((_QWORD *)&v587 + 1) = v214 + v212;
      v588 = v217 | 0x8000000000000000;
      *(_QWORD *)&v587 = v225;
      v221 = &v225[v215];
LABEL_448:
      *v221 = 0;
    }
    v226 = v588;
    *(_QWORD *)&v584[16] = v588;
    *(_OWORD *)v584 = v587;
    v588 = 0;
    v587 = 0uLL;
    if (v584[23] >= 0)
      v227 = 22;
    else
      v227 = (v226 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v584[23] >= 0)
      v228 = HIBYTE(v226);
    else
      v228 = *(_QWORD *)&v584[8];
    if (v227 - v228 >= 8)
    {
      v233 = v584;
      if (v584[23] < 0)
        v233 = *(_BYTE **)v584;
      *(_QWORD *)&v233[v228] = 0x746C73722E74754FLL;
      v234 = v228 + 8;
      v188 = v210;
      if ((v584[23] & 0x80000000) != 0)
        *(_QWORD *)&v584[8] = v228 + 8;
      else
        v584[23] = v234 & 0x7F;
      v185 = v209;
      v235 = &v233[v234];
    }
    else
    {
      v229 = v228 + 8;
      if (0x7FFFFFFFFFFFFFF6 - v227 < v228 + 8 - v227)
        sub_20E860B7C();
      v188 = v210;
      if (v584[23] >= 0)
        v230 = v584;
      else
        v230 = *(_BYTE **)v584;
      v231 = 0x7FFFFFFFFFFFFFF7;
      v185 = v209;
      if (v227 < 0x3FFFFFFFFFFFFFF3)
      {
        v232 = 2 * v227;
        if (v229 > 2 * v227)
          v232 = v228 + 8;
        if (v232 >= 0x17)
        {
          v236 = (v232 & 0xFFFFFFFFFFFFFFF8) + 8;
          v237 = v232 | 7;
          if (v237 == 23)
            v237 = v236;
          v231 = v237 + 1;
        }
        else
        {
          v231 = 23;
        }
      }
      v238 = (char *)operator new(v231);
      v239 = v238;
      if (v228)
        memmove(v238, v230, v228);
      *(_QWORD *)&v239[v228] = 0x746C73722E74754FLL;
      if (v227 != 22)
        operator delete(v230);
      *(_QWORD *)&v584[8] = v228 + 8;
      *(_QWORD *)&v584[16] = v231 | 0x8000000000000000;
      *(_QWORD *)v584 = v239;
      v235 = &v239[v229];
    }
    *v235 = 0;
    v589[0] = *(_QWORD *)&v584[8];
    v240 = *(_QWORD *)v584;
    *(_QWORD *)((char *)v589 + 7) = *(_QWORD *)&v584[15];
    v241 = v584[23];
    memset(v584, 0, sizeof(v584));
    if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v585.__r_.__value_.__l.__data_);
      v585.__r_.__value_.__r.__words[0] = v240;
      v585.__r_.__value_.__l.__size_ = v589[0];
      *(std::string::size_type *)((char *)&v585.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v589 + 7);
      *((_BYTE *)&v585.__r_.__value_.__s + 23) = v241;
      if ((v584[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v584);
        if (((char)v580 & 0x80000000) == 0)
          goto LABEL_490;
      }
      else if (((char)v580 & 0x80000000) == 0)
      {
        goto LABEL_490;
      }
LABEL_481:
      operator delete(__p);
      if (SHIBYTE(v588) < 0)
        goto LABEL_482;
LABEL_491:
      if ((SHIBYTE(v582) & 0x80000000) == 0)
        goto LABEL_492;
LABEL_483:
      operator delete((void *)__dst);
      if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v242 = &v585;
      else
        v242 = (std::string *)v585.__r_.__value_.__r.__words[0];
      if (!v242)
        goto LABEL_624;
    }
    else
    {
      v585.__r_.__value_.__r.__words[0] = v240;
      v585.__r_.__value_.__l.__size_ = v589[0];
      *(std::string::size_type *)((char *)&v585.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v589 + 7);
      *((_BYTE *)&v585.__r_.__value_.__s + 23) = v241;
      if ((char)v580 < 0)
        goto LABEL_481;
LABEL_490:
      if ((SHIBYTE(v588) & 0x80000000) == 0)
        goto LABEL_491;
LABEL_482:
      operator delete((void *)v587);
      if (SHIBYTE(v582) < 0)
        goto LABEL_483;
LABEL_492:
      if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v242 = &v585;
      else
        v242 = (std::string *)v585.__r_.__value_.__r.__words[0];
      if (!v242)
        goto LABEL_624;
    }
    v243 = v185[3];
    v244 = v185[6];
    v245 = fopen((const char *)v242, "wb");
    if (!v245)
      goto LABEL_624;
    v246 = v562 + v243 * v188;
    v247 = v244 + 144 * v246;
    v250 = *(_QWORD *)(v247 + 48);
    v249 = (unint64_t *)(v247 + 48);
    v248 = v250;
    if (!v250 || (v251 = v244 + 144 * v246, v253 = *(_QWORD *)(v251 + 32), v252 = (uint64_t *)(v251 + 32), !v253))
    {
LABEL_366:
      fclose(v245);
      v187 = v185[3];
      if (++v562 >= v187)
      {
        v186 = v185[2];
        goto LABEL_510;
      }
      continue;
    }
    break;
  }
  v254 = 0;
  v255 = *(_QWORD *)(v244 + 144 * v246 + 88);
  v256 = 1;
  while (!v256)
  {
LABEL_500:
    ++v254;
    v255 += 2 * v252[1];
    if (v254 >= v248)
      goto LABEL_366;
  }
  v257 = 0;
  while (1)
  {
    LODWORD(__ptr) = 0;
    LODWORD(__ptr) = *(__int16 *)(v255 + 2 * v257);
    if (fwrite(&__ptr, 4uLL, 1uLL, v245) != 1)
      break;
    ++v257;
    v256 = *v252;
    if (v257 >= *v252)
    {
      v248 = *v249;
      goto LABEL_500;
    }
  }
  fclose(v245);
LABEL_624:
  v258 = 0;
LABEL_625:
  if ((SHIBYTE(v585.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_626:
    if ((v258 & 1) != 0)
      goto LABEL_627;
LABEL_521:
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v266 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v267 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v268 = v267 ? v267 + 16 : 0;
    if (!v266 && !v267)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 501;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v269 = (uint64_t *)(*(_QWORD *)v584 + 16);
    if (*(char *)(*(_QWORD *)v584 + 39) < 0)
    {
      v271 = *(_QWORD *)(*(_QWORD *)v584 + 16);
      v270 = *(_QWORD *)(*(_QWORD *)v584 + 24);
    }
    else
    {
      v270 = *(unsigned __int8 *)(*(_QWORD *)v584 + 39);
      v271 = *(_QWORD *)v584 + 16;
    }
    v585.__r_.__value_.__r.__words[0] = v271;
    v585.__r_.__value_.__l.__size_ = v270;
    v479 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v479 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v480 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v481 = byte_254A4A4F8;
    }
    else
    {
      v480 = *(_QWORD *)&byte_254A4A4F8[8];
      v481 = *(const char **)byte_254A4A4F8;
    }
    v586.__r_.__value_.__r.__words[0] = (std::string::size_type)v481;
    v586.__r_.__value_.__l.__size_ = v480;
    __ptr = os_log_create(v481, v585.__r_.__value_.__l.__data_);
    sub_20E86E5A8(v572, (uint64_t)&v586);
    sub_20E86E5A8(&v574, (uint64_t)&v585);
    v482 = __ptr;
    sub_20E86E44C((uint64_t)&__ptr);
    sub_20FD94114(v268, v269, v482, OS_LOG_TYPE_ERROR);
    if (v266)
    {
      sub_20E8C003C((uint64_t)&v564, "Error dumping response maps.");
      sub_20E863570((uint64_t)&v564);
    }
LABEL_1045:
    sub_20E863714((uint64_t)&v564);
    return 0;
  }
LABEL_520:
  operator delete(v585.__r_.__value_.__l.__data_);
  if ((v258 & 1) == 0)
    goto LABEL_521;
LABEL_627:
  v326 = *(_QWORD *)(a2 + 232);
  v327 = *(char ***)(v326 + 232);
  v328 = *(char ***)(v326 + 240);
  __ptr = 0;
  v572[0] = 0;
  v572[1] = 0;
  LOBYTE(v329) = 1;
  *(_QWORD *)&__dst = 1;
  if (v327 == v328)
  {
LABEL_669:
    if (SHIBYTE(v572[1]) < 0)
      goto LABEL_670;
    goto LABEL_671;
  }
  while (2)
  {
    v330 = strlen(a6);
    if (v330 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v331 = v330;
    if (v330 >= 0x17)
    {
      v333 = (v330 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v330 | 7) != 0x17)
        v333 = v330 | 7;
      v334 = v333 + 1;
      v332 = operator new(v333 + 1);
      v585.__r_.__value_.__l.__size_ = v331;
      v585.__r_.__value_.__r.__words[2] = v334 | 0x8000000000000000;
      v585.__r_.__value_.__r.__words[0] = (std::string::size_type)v332;
      goto LABEL_635;
    }
    *((_BYTE *)&v585.__r_.__value_.__s + 23) = v330;
    v332 = &v585;
    if (v330)
LABEL_635:
      memcpy(v332, a6, v331);
    *((_BYTE *)v332 + v331) = 0;
    v335 = std::string::append(&v585, "/DesGenKPC", 0xAuLL);
    v336 = *(_OWORD *)&v335->__r_.__value_.__l.__data_;
    v586.__r_.__value_.__r.__words[2] = v335->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v586.__r_.__value_.__l.__data_ = v336;
    v335->__r_.__value_.__l.__size_ = 0;
    v335->__r_.__value_.__r.__words[2] = 0;
    v335->__r_.__value_.__r.__words[0] = 0;
    sub_20E9F6B94((unint64_t *)&__dst);
    if (v584[23] >= 0)
      v337 = v584;
    else
      v337 = *(const std::string::value_type **)v584;
    if (v584[23] >= 0)
      v338 = v584[23];
    else
      v338 = *(_QWORD *)&v584[8];
    v339 = std::string::append(&v586, v337, v338);
    v340 = *(_OWORD *)&v339->__r_.__value_.__l.__data_;
    v564.__r_.__value_.__r.__words[2] = v339->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v564.__r_.__value_.__l.__data_ = v340;
    v339->__r_.__value_.__l.__size_ = 0;
    v339->__r_.__value_.__r.__words[2] = 0;
    v339->__r_.__value_.__r.__words[0] = 0;
    v341 = std::string::append(&v564, "Out.rslt", 8uLL);
    v342 = v341->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v587 = v341->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v587 + 7) = *(std::string::size_type *)((char *)&v341->__r_.__value_.__r.__words[1] + 7);
    v343 = HIBYTE(v341->__r_.__value_.__r.__words[2]);
    v341->__r_.__value_.__l.__size_ = 0;
    v341->__r_.__value_.__r.__words[2] = 0;
    v341->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v572[1]) < 0)
      operator delete(__ptr);
    __ptr = v342;
    v572[0] = (void *)v587;
    *(void **)((char *)v572 + 7) = *(void **)((char *)&v587 + 7);
    HIBYTE(v572[1]) = v343;
    if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v564.__r_.__value_.__l.__data_);
      if ((v584[23] & 0x80000000) != 0)
        goto LABEL_654;
LABEL_646:
      if ((SHIBYTE(v586.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_647;
LABEL_655:
      operator delete(v586.__r_.__value_.__l.__data_);
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_656;
LABEL_648:
      if (SHIBYTE(v572[1]) >= 0)
        v344 = (const char *)&__ptr;
      else
        v344 = (const char *)__ptr;
      if (!v344)
        goto LABEL_668;
    }
    else
    {
      if ((v584[23] & 0x80000000) == 0)
        goto LABEL_646;
LABEL_654:
      operator delete(*(void **)v584);
      if (SHIBYTE(v586.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_655;
LABEL_647:
      if ((SHIBYTE(v585.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_648;
LABEL_656:
      operator delete(v585.__r_.__value_.__l.__data_);
      if (SHIBYTE(v572[1]) >= 0)
        v344 = (const char *)&__ptr;
      else
        v344 = (const char *)__ptr;
      if (!v344)
        goto LABEL_668;
    }
    v329 = fopen(v344, "wb");
    if (!v329)
      goto LABEL_669;
    v345 = *v327;
    v346 = v327[1];
    if (*v327 != v346)
    {
      while (fwrite(v345, 8uLL, 1uLL, v329) == 1)
      {
        v345 += 8;
        if (v345 == v346)
          goto LABEL_664;
      }
      fclose(v329);
LABEL_668:
      LOBYTE(v329) = 0;
      goto LABEL_669;
    }
LABEL_664:
    *(_QWORD *)&__dst = __dst + 1;
    fclose(v329);
    v327 += 3;
    if (v327 != v328)
      continue;
    break;
  }
  LOBYTE(v329) = 1;
  if ((SHIBYTE(v572[1]) & 0x80000000) == 0)
    goto LABEL_671;
LABEL_670:
  operator delete(__ptr);
LABEL_671:
  if ((v329 & 1) == 0)
  {
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v367 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v368 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v369 = v368 ? v368 + 16 : 0;
    if (!v367 && !v368)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 507;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v370 = (uint64_t *)(*(_QWORD *)v584 + 16);
    if (*(char *)(*(_QWORD *)v584 + 39) < 0)
    {
      v372 = *(_QWORD *)(*(_QWORD *)v584 + 16);
      v371 = *(_QWORD *)(*(_QWORD *)v584 + 24);
    }
    else
    {
      v371 = *(unsigned __int8 *)(*(_QWORD *)v584 + 39);
      v372 = *(_QWORD *)v584 + 16;
    }
    v585.__r_.__value_.__r.__words[0] = v372;
    v585.__r_.__value_.__l.__size_ = v371;
    v489 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v489 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v490 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v491 = byte_254A4A4F8;
    }
    else
    {
      v490 = *(_QWORD *)&byte_254A4A4F8[8];
      v491 = *(const char **)byte_254A4A4F8;
    }
    v586.__r_.__value_.__r.__words[0] = (std::string::size_type)v491;
    v586.__r_.__value_.__l.__size_ = v490;
    __ptr = os_log_create(v491, v585.__r_.__value_.__l.__data_);
    sub_20E86E5A8(v572, (uint64_t)&v586);
    sub_20E86E5A8(&v574, (uint64_t)&v585);
    v492 = __ptr;
    sub_20E86E44C((uint64_t)&__ptr);
    sub_20FD94500(v369, v370, v492, OS_LOG_TYPE_ERROR);
    if (v367)
    {
      sub_20E8C003C((uint64_t)&v564, "Error dumping key point candidates.");
      sub_20E863570((uint64_t)&v564);
    }
    goto LABEL_1045;
  }
  v347 = *(char ***)(*(_QWORD *)a3 + 232);
  v348 = *(char ***)(*(_QWORD *)a3 + 240);
  __ptr = 0;
  v572[0] = 0;
  v572[1] = 0;
  LOBYTE(v349) = 1;
  *(_QWORD *)&__dst = 1;
  if (v347 == v348)
  {
LABEL_814:
    if (SHIBYTE(v572[1]) < 0)
      goto LABEL_815;
    goto LABEL_816;
  }
  while (2)
  {
    v350 = strlen(a6);
    if (v350 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v351 = v350;
    if (v350 >= 0x17)
    {
      v353 = (v350 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v350 | 7) != 0x17)
        v353 = v350 | 7;
      v354 = v353 + 1;
      v352 = operator new(v353 + 1);
      v585.__r_.__value_.__l.__size_ = v351;
      v585.__r_.__value_.__r.__words[2] = v354 | 0x8000000000000000;
      v585.__r_.__value_.__r.__words[0] = (std::string::size_type)v352;
      goto LABEL_680;
    }
    *((_BYTE *)&v585.__r_.__value_.__s + 23) = v350;
    v352 = &v585;
    if (v350)
LABEL_680:
      memcpy(v352, a6, v351);
    *((_BYTE *)v352 + v351) = 0;
    v355 = std::string::append(&v585, "/DesGenKP0Mem", 0xDuLL);
    v356 = *(_OWORD *)&v355->__r_.__value_.__l.__data_;
    v586.__r_.__value_.__r.__words[2] = v355->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v586.__r_.__value_.__l.__data_ = v356;
    v355->__r_.__value_.__l.__size_ = 0;
    v355->__r_.__value_.__r.__words[2] = 0;
    v355->__r_.__value_.__r.__words[0] = 0;
    sub_20E9F6B94((unint64_t *)&__dst);
    if (v584[23] >= 0)
      v357 = v584;
    else
      v357 = *(const std::string::value_type **)v584;
    if (v584[23] >= 0)
      v358 = v584[23];
    else
      v358 = *(_QWORD *)&v584[8];
    v359 = std::string::append(&v586, v357, v358);
    v360 = *(_OWORD *)&v359->__r_.__value_.__l.__data_;
    v564.__r_.__value_.__r.__words[2] = v359->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v564.__r_.__value_.__l.__data_ = v360;
    v359->__r_.__value_.__l.__size_ = 0;
    v359->__r_.__value_.__r.__words[2] = 0;
    v359->__r_.__value_.__r.__words[0] = 0;
    v361 = std::string::append(&v564, "Out.rslt", 8uLL);
    v362 = v361->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v587 = v361->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v587 + 7) = *(std::string::size_type *)((char *)&v361->__r_.__value_.__r.__words[1] + 7);
    v363 = HIBYTE(v361->__r_.__value_.__r.__words[2]);
    v361->__r_.__value_.__l.__size_ = 0;
    v361->__r_.__value_.__r.__words[2] = 0;
    v361->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v572[1]) < 0)
      operator delete(__ptr);
    __ptr = v362;
    v572[0] = (void *)v587;
    *(void **)((char *)v572 + 7) = *(void **)((char *)&v587 + 7);
    HIBYTE(v572[1]) = v363;
    if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v564.__r_.__value_.__l.__data_);
      if ((v584[23] & 0x80000000) != 0)
        goto LABEL_699;
LABEL_691:
      if ((SHIBYTE(v586.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_692;
LABEL_700:
      operator delete(v586.__r_.__value_.__l.__data_);
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_701;
LABEL_693:
      if (SHIBYTE(v572[1]) >= 0)
        v364 = (const char *)&__ptr;
      else
        v364 = (const char *)__ptr;
      if (!v364)
        goto LABEL_813;
    }
    else
    {
      if ((v584[23] & 0x80000000) == 0)
        goto LABEL_691;
LABEL_699:
      operator delete(*(void **)v584);
      if (SHIBYTE(v586.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_700;
LABEL_692:
      if ((SHIBYTE(v585.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_693;
LABEL_701:
      operator delete(v585.__r_.__value_.__l.__data_);
      if (SHIBYTE(v572[1]) >= 0)
        v364 = (const char *)&__ptr;
      else
        v364 = (const char *)__ptr;
      if (!v364)
        goto LABEL_813;
    }
    v349 = fopen(v364, "wb");
    if (!v349)
      goto LABEL_814;
    v365 = *v347;
    v366 = v347[1];
    if (*v347 != v366)
    {
      while (fwrite(v365, 1uLL, 8uLL, v349) == 8)
      {
        v365 += 8;
        if (v365 == v366)
          goto LABEL_709;
      }
      fclose(v349);
LABEL_813:
      LOBYTE(v349) = 0;
      goto LABEL_814;
    }
LABEL_709:
    *(_QWORD *)&__dst = __dst + 1;
    fclose(v349);
    v347 += 3;
    if (v347 != v348)
      continue;
    break;
  }
  LOBYTE(v349) = 1;
  if ((SHIBYTE(v572[1]) & 0x80000000) == 0)
    goto LABEL_816;
LABEL_815:
  operator delete(__ptr);
LABEL_816:
  if ((v349 & 1) == 0)
  {
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v424 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v425 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v426 = v425 ? v425 + 16 : 0;
    if (!v424 && !v425)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 513;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v427 = (uint64_t *)(*(_QWORD *)v584 + 16);
    if (*(char *)(*(_QWORD *)v584 + 39) < 0)
    {
      v429 = *(_QWORD *)(*(_QWORD *)v584 + 16);
      v428 = *(_QWORD *)(*(_QWORD *)v584 + 24);
    }
    else
    {
      v428 = *(unsigned __int8 *)(*(_QWORD *)v584 + 39);
      v429 = *(_QWORD *)v584 + 16;
    }
    v585.__r_.__value_.__r.__words[0] = v429;
    v585.__r_.__value_.__l.__size_ = v428;
    v499 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v499 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v500 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v501 = byte_254A4A4F8;
    }
    else
    {
      v500 = *(_QWORD *)&byte_254A4A4F8[8];
      v501 = *(const char **)byte_254A4A4F8;
    }
    v586.__r_.__value_.__r.__words[0] = (std::string::size_type)v501;
    v586.__r_.__value_.__l.__size_ = v500;
    __ptr = os_log_create(v501, v585.__r_.__value_.__l.__data_);
    sub_20E86E5A8(v572, (uint64_t)&v586);
    sub_20E86E5A8(&v574, (uint64_t)&v585);
    v502 = __ptr;
    sub_20E86E44C((uint64_t)&__ptr);
    sub_20FD948EC(v426, v427, v502, OS_LOG_TYPE_ERROR);
    if (v424)
    {
      sub_20E8C003C((uint64_t)&v564, "Error dumping Keypoints without Orientation information.");
      sub_20E863570((uint64_t)&v564);
    }
    goto LABEL_1045;
  }
  if (!sub_20FD91158(*(double ***)(a4 + 4600), *(double ***)(a4 + 4608), (double ***)(a4 + 4624), a6))
  {
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v473 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v474 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v475 = v474 ? v474 + 16 : 0;
    if (!v473 && !v474)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 521;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v476 = (uint64_t *)(*(_QWORD *)v584 + 16);
    if (*(char *)(*(_QWORD *)v584 + 39) < 0)
    {
      v478 = *(_QWORD *)(*(_QWORD *)v584 + 16);
      v477 = *(_QWORD *)(*(_QWORD *)v584 + 24);
    }
    else
    {
      v477 = *(unsigned __int8 *)(*(_QWORD *)v584 + 39);
      v478 = *(_QWORD *)v584 + 16;
    }
    v585.__r_.__value_.__r.__words[0] = v478;
    v585.__r_.__value_.__l.__size_ = v477;
    v509 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v509 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v510 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v511 = byte_254A4A4F8;
    }
    else
    {
      v510 = *(_QWORD *)&byte_254A4A4F8[8];
      v511 = *(const char **)byte_254A4A4F8;
    }
    v586.__r_.__value_.__r.__words[0] = (std::string::size_type)v511;
    v586.__r_.__value_.__l.__size_ = v510;
    __ptr = os_log_create(v511, v585.__r_.__value_.__l.__data_);
    sub_20E86E5A8(v572, (uint64_t)&v586);
    sub_20E86E5A8(&v574, (uint64_t)&v585);
    v512 = __ptr;
    sub_20E86E44C((uint64_t)&__ptr);
    sub_20FD94CD8(v475, v476, v512, OS_LOG_TYPE_ERROR);
    if (v473)
    {
      sub_20E8C003C((uint64_t)&v564, "Error dumping Orientation sample co-ords.");
      sub_20E863570((uint64_t)&v564);
    }
    goto LABEL_1045;
  }
  if ((sub_20FD92074((_QWORD *)(a4 + 4696), *(uint64_t **)(a4 + 4648), *(uint64_t **)(a4 + 4656), (uint64_t **)(a4 + 4672), a6) & 1) == 0)
  {
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v483 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v484 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v485 = v484 ? v484 + 16 : 0;
    if (!v483 && !v484)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 530;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v486 = (uint64_t *)(*(_QWORD *)v584 + 16);
    if (*(char *)(*(_QWORD *)v584 + 39) < 0)
    {
      v488 = *(_QWORD *)(*(_QWORD *)v584 + 16);
      v487 = *(_QWORD *)(*(_QWORD *)v584 + 24);
    }
    else
    {
      v487 = *(unsigned __int8 *)(*(_QWORD *)v584 + 39);
      v488 = *(_QWORD *)v584 + 16;
    }
    v585.__r_.__value_.__r.__words[0] = v488;
    v585.__r_.__value_.__l.__size_ = v487;
    v519 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v519 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v520 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v521 = byte_254A4A4F8;
    }
    else
    {
      v520 = *(_QWORD *)&byte_254A4A4F8[8];
      v521 = *(const char **)byte_254A4A4F8;
    }
    v586.__r_.__value_.__r.__words[0] = (std::string::size_type)v521;
    v586.__r_.__value_.__l.__size_ = v520;
    __ptr = os_log_create(v521, v585.__r_.__value_.__l.__data_);
    sub_20E86E5A8(v572, (uint64_t)&v586);
    sub_20E86E5A8(&v574, (uint64_t)&v585);
    v522 = __ptr;
    sub_20E86E44C((uint64_t)&__ptr);
    sub_20FD950C4(v485, v486, v522, OS_LOG_TYPE_ERROR);
    if (v483)
    {
      sub_20E8C003C((uint64_t)&v564, "Error dumping Descriptor sample co-ords.");
      sub_20E863570((uint64_t)&v564);
    }
    goto LABEL_1045;
  }
  if (!sub_20FD92B48(*(char ***)(a4 + 4552), *(char ***)(a4 + 4560), (char ***)(a4 + 4576), a6))
  {
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v493 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v494 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v495 = v494 ? v494 + 16 : 0;
    if (!v493 && !v494)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 538;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v496 = (uint64_t *)(*(_QWORD *)v584 + 16);
    if (*(char *)(*(_QWORD *)v584 + 39) < 0)
    {
      v498 = *(_QWORD *)(*(_QWORD *)v584 + 16);
      v497 = *(_QWORD *)(*(_QWORD *)v584 + 24);
    }
    else
    {
      v497 = *(unsigned __int8 *)(*(_QWORD *)v584 + 39);
      v498 = *(_QWORD *)v584 + 16;
    }
    v585.__r_.__value_.__r.__words[0] = v498;
    v585.__r_.__value_.__l.__size_ = v497;
    v529 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v529 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v530 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v531 = byte_254A4A4F8;
    }
    else
    {
      v530 = *(_QWORD *)&byte_254A4A4F8[8];
      v531 = *(const char **)byte_254A4A4F8;
    }
    v586.__r_.__value_.__r.__words[0] = (std::string::size_type)v531;
    v586.__r_.__value_.__l.__size_ = v530;
    __ptr = os_log_create(v531, v585.__r_.__value_.__l.__data_);
    sub_20E86E5A8(v572, (uint64_t)&v586);
    sub_20E86E5A8(&v574, (uint64_t)&v585);
    v532 = __ptr;
    sub_20E86E44C((uint64_t)&__ptr);
    sub_20FD954B0(v495, v496, v532, OS_LOG_TYPE_ERROR);
    if (v493)
    {
      sub_20E8C003C((uint64_t)&v564, "Error dumping Retina Samples.");
      sub_20E863570((uint64_t)&v564);
    }
    goto LABEL_1045;
  }
  if ((sub_20FD93304(*(char ***)(a4 + 4696), *(char ***)(a4 + 4704), a6) & 1) == 0)
  {
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v503 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v504 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v505 = v504 ? v504 + 16 : 0;
    if (!v503 && !v504)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 545;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v506 = (uint64_t *)(*(_QWORD *)v584 + 16);
    if (*(char *)(*(_QWORD *)v584 + 39) < 0)
    {
      v508 = *(_QWORD *)(*(_QWORD *)v584 + 16);
      v507 = *(_QWORD *)(*(_QWORD *)v584 + 24);
    }
    else
    {
      v507 = *(unsigned __int8 *)(*(_QWORD *)v584 + 39);
      v508 = *(_QWORD *)v584 + 16;
    }
    v585.__r_.__value_.__r.__words[0] = v508;
    v585.__r_.__value_.__l.__size_ = v507;
    v539 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v539 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v540 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v541 = byte_254A4A4F8;
    }
    else
    {
      v540 = *(_QWORD *)&byte_254A4A4F8[8];
      v541 = *(const char **)byte_254A4A4F8;
    }
    v586.__r_.__value_.__r.__words[0] = (std::string::size_type)v541;
    v586.__r_.__value_.__l.__size_ = v540;
    __ptr = os_log_create(v541, v585.__r_.__value_.__l.__data_);
    sub_20E86E5A8(v572, (uint64_t)&v586);
    sub_20E86E5A8(&v574, (uint64_t)&v585);
    v542 = __ptr;
    sub_20E86E44C((uint64_t)&__ptr);
    sub_20FD9589C(v505, v506, v542, OS_LOG_TYPE_ERROR);
    if (v503)
    {
      sub_20E8C003C((uint64_t)&v564, "Error dumping key points.");
      sub_20E863570((uint64_t)&v564);
    }
    goto LABEL_1045;
  }
  if (!sub_20FD93714(*(char ***)(a4 + 4720), *(char ***)(a4 + 4728), a6))
  {
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v513 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v514 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v515 = v514 ? v514 + 16 : 0;
    if (!v513 && !v514)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 552;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v516 = (uint64_t *)(*(_QWORD *)v584 + 16);
    if (*(char *)(*(_QWORD *)v584 + 39) < 0)
    {
      v518 = *(_QWORD *)(*(_QWORD *)v584 + 16);
      v517 = *(_QWORD *)(*(_QWORD *)v584 + 24);
    }
    else
    {
      v517 = *(unsigned __int8 *)(*(_QWORD *)v584 + 39);
      v518 = *(_QWORD *)v584 + 16;
    }
    v585.__r_.__value_.__r.__words[0] = v518;
    v585.__r_.__value_.__l.__size_ = v517;
    v543 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v543 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v544 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v545 = byte_254A4A4F8;
    }
    else
    {
      v544 = *(_QWORD *)&byte_254A4A4F8[8];
      v545 = *(const char **)byte_254A4A4F8;
    }
    v586.__r_.__value_.__r.__words[0] = (std::string::size_type)v545;
    v586.__r_.__value_.__l.__size_ = v544;
    __ptr = os_log_create(v545, v585.__r_.__value_.__l.__data_);
    sub_20E86E5A8(v572, (uint64_t)&v586);
    sub_20E86E5A8(&v574, (uint64_t)&v585);
    v546 = __ptr;
    sub_20E86E44C((uint64_t)&__ptr);
    sub_20FD95C88(v515, v516, v546, OS_LOG_TYPE_ERROR);
    if (v513)
    {
      sub_20E8C003C((uint64_t)&v564, "Error dumping Long Descriptors.");
      sub_20E863570((uint64_t)&v564);
    }
    goto LABEL_1045;
  }
  if (!sub_20FD93B04(*(char ***)(a4 + 4720), *(char ***)(a4 + 4728), a6))
  {
    sub_20FD91064(v584);
    if (**(int **)(*(_QWORD *)v584 + 56) > 5)
      return 0;
    v523 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v524 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v525 = v524 ? v524 + 16 : 0;
    if (!v523 && !v524)
      return 0;
    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
    v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v565 = 5;
    v566 = "unknown file";
    v567 = 559;
    v569 = 0;
    v570 = 0;
    v568 = "unknown function";
    v526 = (uint64_t *)(*(_QWORD *)v584 + 16);
    if (*(char *)(*(_QWORD *)v584 + 39) < 0)
    {
      v528 = *(_QWORD *)(*(_QWORD *)v584 + 16);
      v527 = *(_QWORD *)(*(_QWORD *)v584 + 24);
    }
    else
    {
      v527 = *(unsigned __int8 *)(*(_QWORD *)v584 + 39);
      v528 = *(_QWORD *)v584 + 16;
    }
    v585.__r_.__value_.__r.__words[0] = v528;
    v585.__r_.__value_.__l.__size_ = v527;
    v547 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v547 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__ptr);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
      if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
        operator delete(__ptr);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v548 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v549 = byte_254A4A4F8;
    }
    else
    {
      v548 = *(_QWORD *)&byte_254A4A4F8[8];
      v549 = *(const char **)byte_254A4A4F8;
    }
    v586.__r_.__value_.__r.__words[0] = (std::string::size_type)v549;
    v586.__r_.__value_.__l.__size_ = v548;
    __ptr = os_log_create(v549, v585.__r_.__value_.__l.__data_);
    sub_20E86E5A8(v572, (uint64_t)&v586);
    sub_20E86E5A8(&v574, (uint64_t)&v585);
    v550 = __ptr;
    sub_20E86E44C((uint64_t)&__ptr);
    sub_20FD96074(v525, v526, v550, OS_LOG_TYPE_ERROR);
    if (v523)
    {
      sub_20E8C003C((uint64_t)&v564, "Error dumping Short Descriptors.");
      sub_20E863570((uint64_t)&v564);
    }
    goto LABEL_1045;
  }
  if (sub_20FD93EF4(a5, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1[6] + 56) - *(_QWORD *)(a1[6] + 48)) >> 4), a6))
  {
    return 1;
  }
  sub_20FD91064(v584);
  if (**(int **)(*(_QWORD *)v584 + 56) <= 5)
  {
    v533 = *(unsigned __int8 *)(*(_QWORD *)v584 + 72);
    v534 = sub_20E8C31DC(*(uint64_t *)v584, "OSLogSurrogateAppender", 1, 0);
    v535 = v534 ? v534 + 16 : 0;
    if (v533 || v534)
    {
      v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
      v564.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v564.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      v565 = 5;
      v566 = "unknown file";
      v567 = 565;
      v569 = 0;
      v570 = 0;
      v568 = "unknown function";
      v536 = (uint64_t *)(*(_QWORD *)v584 + 16);
      if (*(char *)(*(_QWORD *)v584 + 39) < 0)
      {
        v538 = *(_QWORD *)(*(_QWORD *)v584 + 16);
        v537 = *(_QWORD *)(*(_QWORD *)v584 + 24);
      }
      else
      {
        v537 = *(unsigned __int8 *)(*(_QWORD *)v584 + 39);
        v538 = *(_QWORD *)v584 + 16;
      }
      v585.__r_.__value_.__r.__words[0] = v538;
      v585.__r_.__value_.__l.__size_ = v537;
      v551 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v551 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&__ptr);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__ptr);
        if ((_BYTE)v573 && SHIBYTE(v572[1]) < 0)
          operator delete(__ptr);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v552 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v553 = byte_254A4A4F8;
      }
      else
      {
        v552 = *(_QWORD *)&byte_254A4A4F8[8];
        v553 = *(const char **)byte_254A4A4F8;
      }
      v586.__r_.__value_.__r.__words[0] = (std::string::size_type)v553;
      v586.__r_.__value_.__l.__size_ = v552;
      __ptr = os_log_create(v553, v585.__r_.__value_.__l.__data_);
      sub_20E86E5A8(v572, (uint64_t)&v586);
      sub_20E86E5A8(&v574, (uint64_t)&v585);
      v554 = __ptr;
      sub_20E86E44C((uint64_t)&__ptr);
      sub_20FD96460(v535, v536, v554, OS_LOG_TYPE_ERROR);
      if (v533)
      {
        sub_20E8C003C((uint64_t)&v564, "Error dumping Histogram.");
        sub_20E863570((uint64_t)&v564);
      }
      goto LABEL_1045;
    }
  }
  return 0;
}

void sub_20FD90600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_20FD906A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD906B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *object,void *__p,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a44 && a43 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_20FD90D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  uint64_t v46;

  if (v45 < 0)
    operator delete(*(void **)(v46 - 224));
  if (a45 < 0)
  {
    operator delete(a40);
    if (*(char *)(v46 - 121) < 0)
    {
LABEL_7:
      operator delete(*(void **)(v46 - 144));
      if ((*(char *)(v46 - 233) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  else if (*(char *)(v46 - 121) < 0)
  {
    goto LABEL_7;
  }
  if ((*(char *)(v46 - 233) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v46 - 177) & 0x80000000) == 0)
LABEL_13:
      _Unwind_Resume(a1);
LABEL_12:
    operator delete(*(void **)(v46 - 200));
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(v46 - 256));
  if ((*(char *)(v46 - 177) & 0x80000000) == 0)
    goto LABEL_13;
  goto LABEL_12;
}

void sub_20FD90D8C()
{
  JUMPOUT(0x20FD90F30);
}

void sub_20FD90D94()
{
  uint64_t v0;

  if (*(char *)(v0 - 233) < 0)
    JUMPOUT(0x20FD90FE4);
  JUMPOUT(0x20FD90F64);
}

void sub_20FD90DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_20FD90DB4()
{
  JUMPOUT(0x20FD90F30);
}

void sub_20FD90DBC()
{
  uint64_t v0;

  if (*(char *)(v0 - 233) < 0)
    JUMPOUT(0x20FD90FE4);
  JUMPOUT(0x20FD90F64);
}

void sub_20FD90DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if ((*(_BYTE *)(v45 - 201) & 0x80) != 0)
    operator delete(*(void **)(v45 - 224));
  if (a45 < 0)
  {
    operator delete(a40);
    if (*(char *)(v45 - 121) < 0)
    {
LABEL_7:
      operator delete(*(void **)(v45 - 144));
      if ((*(char *)(v45 - 233) & 0x80000000) == 0)
      {
        if ((*(char *)(v45 - 177) & 0x80000000) == 0)
          JUMPOUT(0x20FD9105CLL);
        JUMPOUT(0x20FD91054);
      }
      JUMPOUT(0x20FD90FE4);
    }
  }
  else if (*(char *)(v45 - 121) < 0)
  {
    goto LABEL_7;
  }
  JUMPOUT(0x20FD90FDCLL);
}

void sub_20FD90E3C()
{
  uint64_t v0;

  if ((*(char *)(v0 - 201) & 0x80000000) == 0)
    JUMPOUT(0x20FD90E48);
  JUMPOUT(0x20FD90E10);
}

void sub_20FD90E6C()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    JUMPOUT(0x20FD90E50);
  JUMPOUT(0x20FD90E20);
}

void sub_20FD90E7C()
{
  uint64_t v0;

  if (*(char *)(v0 - 177) < 0)
    JUMPOUT(0x20FD90E28);
  JUMPOUT(0x20FD90E60);
}

void sub_20FD90E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FD90E9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_20FD90EB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_20FD90ED0()
{
  uint64_t v0;

  if (v0 < 0)
    JUMPOUT(0x20FD90F28);
  JUMPOUT(0x20FD90F30);
}

void sub_20FD90F74(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FD90F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_20FD90FA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_20FD90FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  sub_20E877A60((uint64_t)va);
  if ((*(char *)(v12 - 121) & 0x80000000) == 0)
    JUMPOUT(0x20FD90FDCLL);
  JUMPOUT(0x20FD90F54);
}

void sub_20FD90FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  FILE *v36;

  fclose(v36);
  if (a36 < 0)
  {
    operator delete(a31);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FD91018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  FILE *v36;

  fclose(v36);
  if (a36 < 0)
    JUMPOUT(0x20FD9102CLL);
  _Unwind_Resume(a1);
}

void sub_20FD91040(_Unwind_Exception *a1)
{
  FILE *v1;
  uint64_t v2;

  fclose(v1);
  if (*(char *)(v2 - 177) < 0)
    JUMPOUT(0x20FD91054);
  _Unwind_Resume(a1);
}

void sub_20FD91064(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C510);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C510))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C508);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C510);
  }
  *a1 = qword_254A6C508;
}

void sub_20FD91100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C510);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C510);
  _Unwind_Resume(a1);
}

BOOL sub_20FD91158(double **a1, double **a2, double ***a3, char *__s)
{
  double **v6;
  FILE *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *p_p;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  char v21;
  const char *v22;
  FILE *v23;
  double *v24;
  double *v25;
  _BOOL8 v26;
  double **v27;
  double **v28;
  FILE *v29;
  size_t v30;
  std::string::size_type v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  void *v42;
  char v43;
  const char *v44;
  FILE *v45;
  double *v46;
  double *v47;
  void *__p;
  std::string::size_type v51;
  unsigned __int8 v52;
  std::string __dst;
  std::string v54;
  std::string __ptr;
  unint64_t v56;
  void *v57;
  __int128 v58;
  void *v59;
  __int128 v60;
  _QWORD v61[5];

  v61[2] = *MEMORY[0x24BDAC8D0];
  v59 = 0;
  v60 = 0uLL;
  v57 = 0;
  v58 = 0uLL;
  v56 = 1;
  if (a1 != a2)
  {
    v6 = a1;
    v7 = 0;
    while (1)
    {
      v8 = strlen(__s);
      if (v8 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v9 = v8;
      if (v8 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
      p_dst = &__dst;
      if (v8)
        goto LABEL_11;
LABEL_12:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      v13 = std::string::append(&__dst, "/DesGenCoordXFirst", 0x12uLL);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      sub_20E9F6B94(&v56);
      if ((v52 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v52 & 0x80u) == 0)
        v16 = v52;
      else
        v16 = v51;
      v17 = std::string::append(&v54, p_p, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      __ptr.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&__ptr, "Out.rslt", 8uLL);
      v20 = (void *)v19->__r_.__value_.__r.__words[0];
      v61[0] = v19->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v60) < 0)
        operator delete(v59);
      v59 = v20;
      *(_QWORD *)&v60 = v61[0];
      *(_QWORD *)((char *)&v60 + 7) = *(_QWORD *)((char *)v61 + 7);
      HIBYTE(v60) = v21;
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__ptr.__r_.__value_.__l.__data_);
        if (((char)v52 & 0x80000000) == 0)
        {
LABEL_22:
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
          goto LABEL_31;
        }
      }
      else if (((char)v52 & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(__p);
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_23:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_32;
        goto LABEL_24;
      }
LABEL_31:
      operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_32:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (v60 >= 0)
          v22 = (const char *)&v59;
        else
          v22 = (const char *)v59;
        if (!v22)
        {
LABEL_80:
          v26 = 0;
          v23 = v7;
          goto LABEL_86;
        }
        goto LABEL_36;
      }
LABEL_24:
      if (v60 >= 0)
        v22 = (const char *)&v59;
      else
        v22 = (const char *)v59;
      if (!v22)
        goto LABEL_80;
LABEL_36:
      v23 = fopen(v22, "wb");
      if (!v23)
      {
        v26 = 0;
        if (v7)
          goto LABEL_87;
        goto LABEL_88;
      }
      if (v7)
        fclose(v7);
      v24 = *v6;
      v25 = v6[1];
      if (*v6 != v25)
      {
        do
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*v24, 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[1], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[2], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[3], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[4], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[5], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[6], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[7], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[8], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[9], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[10], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[11], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[12], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[13], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[14], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[15], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[16], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[17], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[18], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[19], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[20], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[21], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[22], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[23], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[24], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[25], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[26], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[27], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[28], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[29], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          v24 += 30;
        }
        while (v24 != v25);
      }
      ++v56;
      v6 += 3;
      v7 = v23;
      if (v6 == a2)
        goto LABEL_43;
    }
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
    memcpy(p_dst, __s, v9);
    goto LABEL_12;
  }
  v23 = 0;
LABEL_43:
  v26 = 1;
  v56 = 1;
  v28 = *a3;
  v27 = a3[1];
  if (*a3 == v27)
    goto LABEL_86;
  v29 = 0;
  while (1)
  {
    v30 = strlen(__s);
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v31 = v30;
    if (v30 >= 0x17)
    {
      v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v33 = v30 | 7;
      v34 = v33 + 1;
      v32 = (std::string *)operator new(v33 + 1);
      __dst.__r_.__value_.__l.__size_ = v31;
      __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
LABEL_53:
      memcpy(v32, __s, v31);
      goto LABEL_54;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30;
    v32 = &__dst;
    if (v30)
      goto LABEL_53;
LABEL_54:
    v32->__r_.__value_.__s.__data_[v31] = 0;
    v35 = std::string::append(&__dst, "/DesGenCoordYFirst", 0x12uLL);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    sub_20E9F6B94(&v56);
    if ((v52 & 0x80u) == 0)
      v37 = (const std::string::value_type *)&__p;
    else
      v37 = (const std::string::value_type *)__p;
    if ((v52 & 0x80u) == 0)
      v38 = v52;
    else
      v38 = v51;
    v39 = std::string::append(&v54, v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(&__ptr, "Out.rslt", 8uLL);
    v42 = (void *)v41->__r_.__value_.__r.__words[0];
    v61[0] = v41->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
    v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v58) < 0)
      operator delete(v57);
    v57 = v42;
    *(_QWORD *)&v58 = v61[0];
    *(_QWORD *)((char *)&v58 + 7) = *(_QWORD *)((char *)v61 + 7);
    HIBYTE(v58) = v43;
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if (((char)v52 & 0x80000000) == 0)
      {
LABEL_64:
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_78;
        goto LABEL_65;
      }
    }
    else if (((char)v52 & 0x80000000) == 0)
    {
      goto LABEL_64;
    }
    operator delete(__p);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_78:
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_66;
      goto LABEL_79;
    }
LABEL_65:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_66;
LABEL_79:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_66:
    if (v58 >= 0)
      v44 = (const char *)&v57;
    else
      v44 = (const char *)v57;
    v26 = v44 != 0;
    if (!v44)
    {
      v45 = v29;
LABEL_84:
      v29 = v45;
      if (!v45)
        goto LABEL_86;
LABEL_85:
      fclose(v29);
      goto LABEL_86;
    }
    v45 = fopen(v44, "wb");
    if (!v45)
      break;
    if (v29)
      fclose(v29);
    v46 = *v28;
    v47 = v28[1];
    if (*v28 != v47)
    {
      do
      {
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*v46, 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[1], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[2], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[3], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[4], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[5], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[6], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[7], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[8], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[9], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[10], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[11], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[12], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[13], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[14], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[15], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[16], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[17], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[18], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[19], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[20], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[21], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[22], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[23], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[24], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[25], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[26], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[27], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[28], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v46[29], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v45);
        v46 += 30;
      }
      while (v46 != v47);
    }
    ++v56;
    v28 += 3;
    v29 = v45;
    if (v28 == v27)
      goto LABEL_84;
  }
  v26 = 0;
  if (v29)
    goto LABEL_85;
LABEL_86:
  v7 = v23;
  if (v23)
LABEL_87:
    fclose(v7);
LABEL_88:
  if (SHIBYTE(v58) < 0)
  {
    operator delete(v57);
    if ((SHIBYTE(v60) & 0x80000000) == 0)
      return v26;
LABEL_92:
    operator delete(v59);
    return v26;
  }
  if (SHIBYTE(v60) < 0)
    goto LABEL_92;
  return v26;
}

void sub_20FD91E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  FILE *v43;
  FILE *v44;
  uint64_t v45;

  if (v44)
  {
    fclose(v44);
    if (!v43)
    {
LABEL_3:
      if ((a43 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (!v43)
  {
    goto LABEL_3;
  }
  fclose(v43);
  if ((a43 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v45 - 121) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(__p);
  if ((*(char *)(v45 - 121) & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v45 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD92074(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t **a4, char *__s)
{
  const char *v5;
  uint64_t *v6;
  FILE *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *p_p;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  char v21;
  const char *v22;
  FILE *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  double v29;
  uint64_t i;
  FILE *v31;
  size_t v32;
  std::string::size_type v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  __int128 v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  void *v44;
  char v45;
  const char *v46;
  FILE *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  double v53;
  uint64_t j;
  uint64_t v55;
  _BOOL4 v57;
  uint64_t *v59;
  uint64_t *v63;
  void *__p;
  std::string::size_type v65;
  unsigned __int8 v66;
  std::string __dst;
  std::string v68;
  std::string __ptr;
  unint64_t v70;
  void *v71;
  __int128 v72;
  void *v73;
  __int128 v74;
  _QWORD v75[5];

  v5 = __s;
  v75[2] = *MEMORY[0x24BDAC8D0];
  v73 = 0;
  v74 = 0uLL;
  v71 = 0;
  v72 = 0uLL;
  v70 = 1;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    while (1)
    {
      v8 = strlen(v5);
      if (v8 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v9 = v8;
      if (v8 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
      p_dst = &__dst;
      if (v8)
        goto LABEL_11;
LABEL_12:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      v13 = std::string::append(&__dst, "/DesGenCoordXSecond", 0x13uLL);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      sub_20E9F6B94(&v70);
      if ((v66 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v66 & 0x80u) == 0)
        v16 = v66;
      else
        v16 = v65;
      v17 = std::string::append(&v68, p_p, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      __ptr.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&__ptr, "Out.rslt", 8uLL);
      v20 = (void *)v19->__r_.__value_.__r.__words[0];
      v75[0] = v19->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v74) < 0)
        operator delete(v73);
      v73 = v20;
      *(_QWORD *)&v74 = v75[0];
      *(_QWORD *)((char *)&v74 + 7) = *(_QWORD *)((char *)v75 + 7);
      HIBYTE(v74) = v21;
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__ptr.__r_.__value_.__l.__data_);
        if (((char)v66 & 0x80000000) == 0)
        {
LABEL_22:
          if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
          goto LABEL_31;
        }
      }
      else if (((char)v66 & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(__p);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_23:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_32;
        goto LABEL_24;
      }
LABEL_31:
      operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_32:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (v74 >= 0)
          v22 = (const char *)&v73;
        else
          v22 = (const char *)v73;
        if (!v22)
        {
LABEL_87:
          v55 = 0;
          v23 = v7;
          goto LABEL_93;
        }
        goto LABEL_36;
      }
LABEL_24:
      if (v74 >= 0)
        v22 = (const char *)&v73;
      else
        v22 = (const char *)v73;
      if (!v22)
        goto LABEL_87;
LABEL_36:
      v23 = fopen(v22, "wb");
      if (!v23)
      {
        v55 = 0;
        if (v7)
          goto LABEL_94;
        goto LABEL_95;
      }
      if (v7)
        fclose(v7);
      v24 = v70;
      v25 = *v6;
      v26 = v6[1];
      if (*v6 != v26)
      {
        v27 = 0;
        v28 = (_QWORD *)(*a1 + 24 * v70 - 24);
        v29 = (double)(1 << ((v70 >> 1) + 6));
        do
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(floor((double)*(unsigned __int16 *)(*v28 + 8 * v27) / v29 * 64.0+ 0.5)* 0.015625, 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v23);
          for (i = 0; i != 336; i += 48)
          {
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v25 + i), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v23);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v25 + i + 8), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v23);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v25 + i + 16), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v23);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v25 + i + 24), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v23);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v25 + i + 32), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v23);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v25 + i + 40), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v23);
          }
          ++v27;
          v25 += 336;
        }
        while (v25 != v26);
        v24 = v70;
        v5 = __s;
      }
      v70 = v24 + 1;
      v6 += 3;
      v7 = v23;
      if (v6 == a3)
        goto LABEL_46;
    }
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
    memcpy(p_dst, v5, v9);
    goto LABEL_12;
  }
  v23 = 0;
LABEL_46:
  v70 = 1;
  v63 = *a4;
  v59 = a4[1];
  if (v63 == v59)
  {
    v55 = 1;
    goto LABEL_93;
  }
  v31 = 0;
  while (1)
  {
    v32 = strlen(v5);
    if (v32 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v33 = v32;
    if (v32 >= 0x17)
    {
      v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v35 = v32 | 7;
      v36 = v35 + 1;
      v34 = (std::string *)operator new(v35 + 1);
      __dst.__r_.__value_.__l.__size_ = v33;
      __dst.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
LABEL_56:
      memcpy(v34, v5, v33);
      goto LABEL_57;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32;
    v34 = &__dst;
    if (v32)
      goto LABEL_56;
LABEL_57:
    v34->__r_.__value_.__s.__data_[v33] = 0;
    v37 = std::string::append(&__dst, "/DesGenCoordYSecond", 0x13uLL);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    sub_20E9F6B94(&v70);
    if ((v66 & 0x80u) == 0)
      v39 = (const std::string::value_type *)&__p;
    else
      v39 = (const std::string::value_type *)__p;
    if ((v66 & 0x80u) == 0)
      v40 = v66;
    else
      v40 = v65;
    v41 = std::string::append(&v68, v39, v40);
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append(&__ptr, "Out.rslt", 8uLL);
    v44 = (void *)v43->__r_.__value_.__r.__words[0];
    v75[0] = v43->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 7);
    v45 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v72) < 0)
      operator delete(v71);
    v71 = v44;
    *(_QWORD *)&v72 = v75[0];
    *(_QWORD *)((char *)&v72 + 7) = *(_QWORD *)((char *)v75 + 7);
    HIBYTE(v72) = v45;
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if (((char)v66 & 0x80000000) == 0)
      {
LABEL_67:
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_84;
        goto LABEL_68;
      }
    }
    else if (((char)v66 & 0x80000000) == 0)
    {
      goto LABEL_67;
    }
    operator delete(__p);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_84:
      operator delete(v68.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_69;
      goto LABEL_85;
    }
LABEL_68:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
LABEL_85:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_69:
    if (v72 >= 0)
      v46 = (const char *)&v71;
    else
      v46 = (const char *)v71;
    v57 = v46 != 0;
    if (!v46)
    {
      v47 = v31;
LABEL_91:
      v31 = v47;
      v55 = v57;
      if (!v47)
        goto LABEL_93;
LABEL_92:
      fclose(v31);
      goto LABEL_93;
    }
    v47 = fopen(v46, "wb");
    if (!v47)
      break;
    if (v31)
      fclose(v31);
    v48 = v70;
    v49 = *v63;
    v50 = v63[1];
    if (*v63 != v50)
    {
      v51 = 0;
      v52 = (_QWORD *)(*a1 + 24 * v70 - 24);
      v53 = (double)(1 << ((v70 >> 1) + 6));
      do
      {
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(floor((double)*(unsigned __int16 *)(*v52 + 8 * v51 + 2) / v53 * 64.0+ 0.5)* 0.015625, 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v47);
        for (j = 0; j != 336; j += 48)
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v49 + j), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v47);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v49 + j + 8), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v47);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v49 + j + 16), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v47);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v49 + j + 24), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v47);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v49 + j + 32), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v47);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v49 + j + 40), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v47);
        }
        ++v51;
        v49 += 336;
      }
      while (v49 != v50);
      v48 = v70;
      v5 = __s;
    }
    v70 = v48 + 1;
    v31 = v47;
    v63 += 3;
    if (v63 == v59)
      goto LABEL_91;
  }
  v55 = 0;
  if (v31)
    goto LABEL_92;
LABEL_93:
  v7 = v23;
  if (v23)
LABEL_94:
    fclose(v7);
LABEL_95:
  if (SHIBYTE(v72) < 0)
  {
    operator delete(v71);
    if ((SHIBYTE(v74) & 0x80000000) == 0)
      return v55;
LABEL_99:
    operator delete(v73);
    return v55;
  }
  if (SHIBYTE(v74) < 0)
    goto LABEL_99;
  return v55;
}

void sub_20FD92958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  FILE *v47;
  FILE *v48;
  uint64_t v49;

  if (v48)
  {
    fclose(v48);
    if (!v47)
    {
LABEL_3:
      if (a47 < 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (!v47)
  {
    goto LABEL_3;
  }
  fclose(v47);
  if (a47 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((*(char *)(v49 - 137) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  if ((*(char *)(v49 - 137) & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(*(void **)(v49 - 160));
  _Unwind_Resume(a1);
}

BOOL sub_20FD92B48(char **a1, char **a2, char ***a3, char *__s)
{
  char **v6;
  FILE *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *p_p;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  char v21;
  const char *v22;
  FILE *v23;
  char *v24;
  char *v25;
  _BOOL8 v26;
  char **v27;
  char **v28;
  FILE *v29;
  size_t v30;
  std::string::size_type v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  void *v42;
  char v43;
  const char *v44;
  FILE *v45;
  char *v46;
  char *v47;
  void *__p;
  std::string::size_type v51;
  unsigned __int8 v52;
  std::string __dst;
  std::string v54;
  std::string v55;
  unint64_t v56;
  void *v57;
  __int128 v58;
  void *v59;
  __int128 v60;
  _QWORD v61[5];

  v61[2] = *MEMORY[0x24BDAC8D0];
  v59 = 0;
  v60 = 0uLL;
  v57 = 0;
  v58 = 0uLL;
  v56 = 1;
  if (a1 != a2)
  {
    v6 = a1;
    v7 = 0;
    while (1)
    {
      v8 = strlen(__s);
      if (v8 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v9 = v8;
      if (v8 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
      p_dst = &__dst;
      if (v8)
        goto LABEL_11;
LABEL_12:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      v13 = std::string::append(&__dst, "/DesGenRetinaFirst", 0x12uLL);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      sub_20E9F6B94(&v56);
      if ((v52 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v52 & 0x80u) == 0)
        v16 = v52;
      else
        v16 = v51;
      v17 = std::string::append(&v54, p_p, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v55, "Out.rslt", 8uLL);
      v20 = (void *)v19->__r_.__value_.__r.__words[0];
      v61[0] = v19->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v60) < 0)
        operator delete(v59);
      v59 = v20;
      *(_QWORD *)&v60 = v61[0];
      *(_QWORD *)((char *)&v60 + 7) = *(_QWORD *)((char *)v61 + 7);
      HIBYTE(v60) = v21;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v55.__r_.__value_.__l.__data_);
        if (((char)v52 & 0x80000000) == 0)
        {
LABEL_22:
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
          goto LABEL_31;
        }
      }
      else if (((char)v52 & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(__p);
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_23:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_32;
        goto LABEL_24;
      }
LABEL_31:
      operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_32:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (v60 >= 0)
          v22 = (const char *)&v59;
        else
          v22 = (const char *)v59;
        if (!v22)
        {
LABEL_80:
          v26 = 0;
          v23 = v7;
          goto LABEL_86;
        }
        goto LABEL_36;
      }
LABEL_24:
      if (v60 >= 0)
        v22 = (const char *)&v59;
      else
        v22 = (const char *)v59;
      if (!v22)
        goto LABEL_80;
LABEL_36:
      v23 = fopen(v22, "wb");
      if (!v23)
      {
        v26 = 0;
        if (v7)
          goto LABEL_87;
        goto LABEL_88;
      }
      if (v7)
        fclose(v7);
      v24 = *v6;
      v25 = v6[1];
      if (*v6 != v25)
      {
        do
        {
          fwrite(v24, 4uLL, 0x1EuLL, v23);
          v24 += 120;
        }
        while (v24 != v25);
      }
      ++v56;
      v6 += 3;
      v7 = v23;
      if (v6 == a2)
        goto LABEL_43;
    }
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
    memcpy(p_dst, __s, v9);
    goto LABEL_12;
  }
  v23 = 0;
LABEL_43:
  v26 = 1;
  v56 = 1;
  v28 = *a3;
  v27 = a3[1];
  if (*a3 == v27)
    goto LABEL_86;
  v29 = 0;
  while (1)
  {
    v30 = strlen(__s);
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v31 = v30;
    if (v30 >= 0x17)
    {
      v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v33 = v30 | 7;
      v34 = v33 + 1;
      v32 = (std::string *)operator new(v33 + 1);
      __dst.__r_.__value_.__l.__size_ = v31;
      __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
LABEL_53:
      memcpy(v32, __s, v31);
      goto LABEL_54;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30;
    v32 = &__dst;
    if (v30)
      goto LABEL_53;
LABEL_54:
    v32->__r_.__value_.__s.__data_[v31] = 0;
    v35 = std::string::append(&__dst, "/DesGenRetinaSecond", 0x13uLL);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    sub_20E9F6B94(&v56);
    if ((v52 & 0x80u) == 0)
      v37 = (const std::string::value_type *)&__p;
    else
      v37 = (const std::string::value_type *)__p;
    if ((v52 & 0x80u) == 0)
      v38 = v52;
    else
      v38 = v51;
    v39 = std::string::append(&v54, v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(&v55, "Out.rslt", 8uLL);
    v42 = (void *)v41->__r_.__value_.__r.__words[0];
    v61[0] = v41->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
    v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v58) < 0)
      operator delete(v57);
    v57 = v42;
    *(_QWORD *)&v58 = v61[0];
    *(_QWORD *)((char *)&v58 + 7) = *(_QWORD *)((char *)v61 + 7);
    HIBYTE(v58) = v43;
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v55.__r_.__value_.__l.__data_);
      if (((char)v52 & 0x80000000) == 0)
      {
LABEL_64:
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_78;
        goto LABEL_65;
      }
    }
    else if (((char)v52 & 0x80000000) == 0)
    {
      goto LABEL_64;
    }
    operator delete(__p);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_78:
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_66;
      goto LABEL_79;
    }
LABEL_65:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_66;
LABEL_79:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_66:
    if (v58 >= 0)
      v44 = (const char *)&v57;
    else
      v44 = (const char *)v57;
    v26 = v44 != 0;
    if (!v44)
    {
      v45 = v29;
LABEL_84:
      v29 = v45;
      if (!v45)
        goto LABEL_86;
LABEL_85:
      fclose(v29);
      goto LABEL_86;
    }
    v45 = fopen(v44, "wb");
    if (!v45)
      break;
    if (v29)
      fclose(v29);
    v46 = *v28;
    v47 = v28[1];
    if (*v28 != v47)
    {
      do
      {
        fwrite(v46, 4uLL, 0x2BuLL, v45);
        v46 += 172;
      }
      while (v46 != v47);
    }
    ++v56;
    v28 += 3;
    v29 = v45;
    if (v28 == v27)
      goto LABEL_84;
  }
  v26 = 0;
  if (v29)
    goto LABEL_85;
LABEL_86:
  v7 = v23;
  if (v23)
LABEL_87:
    fclose(v7);
LABEL_88:
  if (SHIBYTE(v58) < 0)
  {
    operator delete(v57);
    if ((SHIBYTE(v60) & 0x80000000) == 0)
      return v26;
LABEL_92:
    operator delete(v59);
    return v26;
  }
  if (SHIBYTE(v60) < 0)
    goto LABEL_92;
  return v26;
}

void sub_20FD9312C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  FILE *v43;
  FILE *v44;
  uint64_t v45;

  if (v44)
    fclose(v44);
  if (v43)
  {
    fclose(v43);
    if (a43 < 0)
    {
LABEL_9:
      operator delete(__p);
      if (*(char *)(v45 - 121) < 0)
      {
LABEL_10:
        operator delete(*(void **)(v45 - 144));
        _Unwind_Resume(exception_object);
      }
LABEL_5:
      _Unwind_Resume(exception_object);
    }
  }
  else if (a43 < 0)
  {
    goto LABEL_9;
  }
  if (*(char *)(v45 - 121) < 0)
    goto LABEL_10;
  goto LABEL_5;
}

uint64_t sub_20FD93304(char **a1, char **a2, char *__s)
{
  uint64_t v3;
  char **v6;
  size_t v7;
  std::string::size_type v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  void *v19;
  char v20;
  const char *p_p;
  FILE *v22;
  char *v23;
  char *v24;
  void *v26[2];
  unsigned __int8 v27;
  std::string __dst;
  std::string v29;
  std::string v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  _QWORD v34[5];

  v34[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v33 = 0uLL;
  v3 = 1;
  v31 = 1;
  if (a1 == a2)
  {
LABEL_43:
    if (SHIBYTE(v33) < 0)
      goto LABEL_44;
    return v3;
  }
  v6 = a1;
  do
  {
    v7 = strlen(__s);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v8 = v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v8;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
      memcpy(p_dst, __s, v8);
      goto LABEL_12;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7;
    p_dst = &__dst;
    if (v7)
      goto LABEL_11;
LABEL_12:
    p_dst->__r_.__value_.__s.__data_[v8] = 0;
    v12 = std::string::append(&__dst, "/DesGenKPMem", 0xCuLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_20E9F6B94(&v31);
    if ((v27 & 0x80u) == 0)
      v14 = v26;
    else
      v14 = (void **)v26[0];
    if ((v27 & 0x80u) == 0)
      v15 = v27;
    else
      v15 = (std::string::size_type)v26[1];
    v16 = std::string::append(&v29, (const std::string::value_type *)v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v30, "Out.rslt", 8uLL);
    v19 = (void *)v18->__r_.__value_.__r.__words[0];
    v34[0] = v18->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    __p = v19;
    *(_QWORD *)&v33 = v34[0];
    *(_QWORD *)((char *)&v33 + 7) = *(_QWORD *)((char *)v34 + 7);
    HIBYTE(v33) = v20;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if (((char)v27 & 0x80000000) == 0)
      {
LABEL_22:
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_31;
      }
    }
    else if (((char)v27 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v26[0]);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_32;
    }
LABEL_31:
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      if (v33 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      if (!p_p)
        goto LABEL_42;
      goto LABEL_36;
    }
LABEL_32:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v33 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    if (!p_p)
      goto LABEL_42;
LABEL_36:
    v22 = fopen(p_p, "wb");
    if (!v22)
      goto LABEL_42;
    v23 = *v6;
    v24 = v6[1];
    if (*v6 != v24)
    {
      while (fwrite(v23, 1uLL, 8uLL, v22) == 8)
      {
        v23 += 8;
        if (v23 == v24)
          goto LABEL_3;
      }
      fclose(v22);
LABEL_42:
      v3 = 0;
      goto LABEL_43;
    }
LABEL_3:
    ++v31;
    fclose(v22);
    v6 += 3;
  }
  while (v6 != a2);
  v3 = 1;
  if (SHIBYTE(v33) < 0)
LABEL_44:
    operator delete(__p);
  return v3;
}

void sub_20FD93618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if ((a40 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FD93714(char **a1, char **a2, char *__s)
{
  _BOOL8 v3;
  char **v6;
  FILE *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  char v21;
  const char *p_p;
  FILE *v23;
  char *v24;
  char *v25;
  void *v27[2];
  unsigned __int8 v28;
  std::string __dst;
  std::string v30;
  std::string v31;
  unint64_t v32;
  void *__p;
  __int128 v34;
  _QWORD v35[5];

  v35[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v34 = 0uLL;
  v3 = 1;
  v32 = 1;
  if (a1 == a2)
    goto LABEL_41;
  v6 = a1;
  v7 = 0;
  while (1)
  {
    v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
      memcpy(p_dst, __s, v9);
      goto LABEL_12;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8)
      goto LABEL_11;
LABEL_12:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    v13 = std::string::append(&__dst, "/DesGenDescLong", 0xFuLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20E9F6B94(&v32);
    if ((v28 & 0x80u) == 0)
      v15 = v27;
    else
      v15 = (void **)v27[0];
    if ((v28 & 0x80u) == 0)
      v16 = v28;
    else
      v16 = (std::string::size_type)v27[1];
    v17 = std::string::append(&v30, (const std::string::value_type *)v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v31, "Out.rslt", 8uLL);
    v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v35[0] = v19->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34) < 0)
      operator delete(__p);
    __p = v20;
    *(_QWORD *)&v34 = v35[0];
    *(_QWORD *)((char *)&v34 + 7) = *(_QWORD *)((char *)v35 + 7);
    HIBYTE(v34) = v21;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v31.__r_.__value_.__l.__data_);
      if (((char)v28 & 0x80000000) == 0)
      {
LABEL_22:
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_36;
        goto LABEL_23;
      }
    }
    else if (((char)v28 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v27[0]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_36:
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_37;
    }
LABEL_23:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_37:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
    if (v34 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v3 = p_p != 0;
    if (!p_p)
    {
      v23 = v7;
LABEL_39:
      v7 = v23;
      if (!v23)
        goto LABEL_41;
LABEL_40:
      fclose(v7);
      goto LABEL_41;
    }
    v23 = fopen(p_p, "wb");
    if (!v23)
      break;
    if (v7)
      fclose(v7);
    v24 = *v6;
    v25 = v6[1];
    if (*v6 != v25)
    {
      do
      {
        fwrite(v24, 4uLL, 0x10uLL, v23);
        v24 += 64;
      }
      while (v24 != v25);
    }
    ++v32;
    v6 += 3;
    v7 = v23;
    if (v6 == a2)
      goto LABEL_39;
  }
  v3 = 0;
  if (v7)
    goto LABEL_40;
LABEL_41:
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  return v3;
}

void sub_20FD93A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  FILE *v40;

  if (v40)
  {
    fclose(v40);
    if ((a40 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a40 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FD93B04(char **a1, char **a2, char *__s)
{
  _BOOL8 v3;
  char **v6;
  FILE *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  char v21;
  const char *p_p;
  FILE *v23;
  char *v24;
  char *v25;
  void *v27[2];
  unsigned __int8 v28;
  std::string __dst;
  std::string v30;
  std::string v31;
  unint64_t v32;
  void *__p;
  __int128 v34;
  _QWORD v35[5];

  v35[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v34 = 0uLL;
  v3 = 1;
  v32 = 1;
  if (a1 == a2)
    goto LABEL_41;
  v6 = a1;
  v7 = 0;
  while (1)
  {
    v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
      memcpy(p_dst, __s, v9);
      goto LABEL_12;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8)
      goto LABEL_11;
LABEL_12:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    v13 = std::string::append(&__dst, "/DesGenDescShort", 0x10uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20E9F6B94(&v32);
    if ((v28 & 0x80u) == 0)
      v15 = v27;
    else
      v15 = (void **)v27[0];
    if ((v28 & 0x80u) == 0)
      v16 = v28;
    else
      v16 = (std::string::size_type)v27[1];
    v17 = std::string::append(&v30, (const std::string::value_type *)v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v31, "Out.rslt", 8uLL);
    v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v35[0] = v19->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34) < 0)
      operator delete(__p);
    __p = v20;
    *(_QWORD *)&v34 = v35[0];
    *(_QWORD *)((char *)&v34 + 7) = *(_QWORD *)((char *)v35 + 7);
    HIBYTE(v34) = v21;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v31.__r_.__value_.__l.__data_);
      if (((char)v28 & 0x80000000) == 0)
      {
LABEL_22:
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_36;
        goto LABEL_23;
      }
    }
    else if (((char)v28 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v27[0]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_36:
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_37;
    }
LABEL_23:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_37:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
    if (v34 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v3 = p_p != 0;
    if (!p_p)
    {
      v23 = v7;
LABEL_39:
      v7 = v23;
      if (!v23)
        goto LABEL_41;
LABEL_40:
      fclose(v7);
      goto LABEL_41;
    }
    v23 = fopen(p_p, "wb");
    if (!v23)
      break;
    if (v7)
      fclose(v7);
    v24 = *v6;
    v25 = v6[1];
    if (*v6 != v25)
    {
      do
      {
        fwrite(v24, 4uLL, 8uLL, v23);
        v24 += 64;
      }
      while (v24 != v25);
    }
    ++v32;
    v6 += 3;
    v7 = v23;
    if (v6 == a2)
      goto LABEL_39;
  }
  v3 = 0;
  if (v7)
    goto LABEL_40;
LABEL_41:
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  return v3;
}

void sub_20FD93E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  FILE *v40;

  if (v40)
  {
    fclose(v40);
    if ((a40 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a40 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FD93EF4(const void **a1, uint64_t a2, char *__s)
{
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  char v13;
  void **v14;
  FILE *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  std::string __dst;
  void *__p[2];
  int64_t v22;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v11 = std::string::append(&__dst, "/DesGenHistogramOut.rslt", 0x18uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v13 = HIBYTE(v22);
    if (v22 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if (v14)
    {
LABEL_14:
      v15 = fopen((const char *)v14, "wb");
      v16 = v15 != 0;
      if (v15)
      {
        v17 = 64;
        do
        {
          LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
          fwrite(&__dst, 4uLL, 1uLL, v15);
          --v17;
        }
        while (v17);
        if ((unint64_t)(a2 - 1) >= 2)
        {
          v18 = a2 - 2;
          do
          {
            fwrite(*a1, 4uLL, 0x40uLL, v15);
            a1 += 3;
            --v18;
          }
          while (v18);
        }
      }
      if (v22 < 0)
        goto LABEL_21;
      goto LABEL_22;
    }
  }
  else
  {
    v13 = HIBYTE(v22);
    if (v22 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if (v14)
      goto LABEL_14;
  }
  v16 = 0;
  v15 = 0;
  if (v13 < 0)
LABEL_21:
    operator delete(__p[0]);
LABEL_22:
  if (v15)
    fclose(v15);
  return v16;
}

void sub_20FD940BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD94114(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FD944A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD944C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD944DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD94500(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FD94890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD948B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD948C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD948EC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FD94C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD94CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD94CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD94CD8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FD95068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD9508C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD950A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD950C4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FD95454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD95478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD9548C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD954B0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FD95840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD95864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD95878(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD9589C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FD95C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD95C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD95C64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD95C88(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FD96018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD9603C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD96050(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD96074(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FD96404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD96428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD9643C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD96460(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FD967F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD96814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD96828(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

__int128 *sub_20FD9684C(int64x2_t *a1, int64x2_t *a2)
{
  __int128 *v2;
  int64x2_t v3;
  int64x2_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (**v13)(_QWORD);
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void (***v18)(_QWORD);
  void (***v19)(_QWORD);
  void *v20;
  void (***v21)(_QWORD);
  void (***v22)(_QWORD);
  void (**v23)(_QWORD);
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  void (***v27)(_QWORD);
  void (***v28)(_QWORD);
  void *v29;
  void (***v30)(_QWORD);
  void (***v31)(_QWORD);
  void (**v32)(_QWORD);
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  vImagePixelCount v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count_vtbl *data;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  size_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  void *v52;
  uint64_t v53;
  uint64_t i;
  _QWORD *v55;
  uint64_t v56;
  uint64_t j;
  unint64_t v58;
  _OWORD *v59;
  __int128 v60;
  _OWORD *v61;
  _OWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  __int128 v68;
  char *v69;
  char *v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void **v79;
  _BYTE *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  unint64_t *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  char *v103;
  _BYTE *v104;
  _OWORD *v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  char *v111;
  char **v112;
  _BYTE *v113;
  _BYTE *v114;
  _QWORD *v115;
  char *v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t k;
  uint64_t v134;
  uint64_t m;
  size_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  _OWORD *v153;
  char *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  _QWORD *v166;
  char **v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  _BYTE *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  size_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  size_t v196;
  uint64_t v197;
  uint64_t n;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  char *v214;
  void (***v215)(char *);
  void (**v216)(char *);
  uint64_t v217;
  _QWORD *v218;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t *i64;
  uint64_t *v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  __int128 *v228;
  vImagePixelCount v229;
  uint64_t v230;
  _QWORD *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t height;
  uint64_t v235;
  char *v236;
  char *v237;
  _BYTE *v238;
  char *v239;
  unint64_t v240;
  uint64_t v241;
  size_t v242;
  char *v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  int64x2_t v254;
  uint64_t v255;
  size_t v256;
  char *v257;
  __int128 v258;
  void *__p;
  vImage_Buffer buf;
  _QWORD *v261;
  char *v262;
  __int128 v263;
  _QWORD *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;

  v2 = (__int128 *)a1;
  *a1 = (int64x2_t)xmmword_2103BF960;
  a1[1] = vdupq_n_s64(3uLL);
  a1[3].i64[0] = 0;
  i64 = a1[3].i64;
  a1[3].i64[1] = 0;
  v222 = &a1[3].i64[1];
  a1[4].i64[0] = 0;
  v224 = a1[4].i64;
  a1[2].i64[0] = 1;
  a1[4].i64[1] = (uint64_t)&off_24CA06E20;
  v221 = &a1[4].i64[1];
  a1[2].i16[4] = 0;
  a1[5].i8[0] = 0;
  a1[9].i8[8] = 0;
  *(int64x2_t *)((char *)&a1[5] + 8) = 0u;
  *(int64x2_t *)((char *)&a1[6] + 8) = 0u;
  *(int64x2_t *)((char *)&a1[7] + 8) = 0u;
  *(int64x2_t *)((char *)&a1[8] + 1) = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13].i64[0] = 0;
  v3 = *a2;
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  *a1 = v3;
  if ((sub_20FD9BC6C(a2->i64) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/GaussianPyramidGenerator.cpp", 34, (uint64_t)"config.IsValid()", 16, (uint64_t)"Invalid configuration", 21, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v5 = operator new();
  *(_OWORD *)v5 = xmmword_2103BF960;
  *(int64x2_t *)(v5 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v5 + 32) = 1;
  *(_QWORD *)(v5 + 40) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  v6 = (_QWORD *)*i64;
  *i64 = v5;
  v228 = v2;
  if (v6)
  {
    v7 = (void *)v6[9];
    if (v7)
    {
      v6[10] = v7;
      operator delete(v7);
    }
    v8 = (void (***)(_QWORD))v6[6];
    if (v8)
    {
      v9 = (void (***)(_QWORD))v6[7];
      v10 = (void *)v6[6];
      if (v9 != v8)
      {
        v11 = v9 - 18;
        v12 = v9 - 18;
        do
        {
          v13 = *v12;
          v12 -= 18;
          (*v13)(v11);
          v14 = v11 == v8;
          v11 = v12;
        }
        while (!v14);
        v10 = (void *)v6[6];
      }
      v6[7] = v8;
      operator delete(v10);
    }
    MEMORY[0x212BC6398](v6, 0x1020C4024B85F43);
    v2 = v228;
  }
  v15 = operator new();
  *(_OWORD *)v15 = xmmword_2103BF960;
  *(int64x2_t *)(v15 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v15 + 32) = 1;
  *(_QWORD *)(v15 + 40) = 0;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  v16 = (_QWORD *)*v222;
  *v222 = v15;
  if (v16)
  {
    v17 = (void *)v16[9];
    if (v17)
    {
      v16[10] = v17;
      operator delete(v17);
    }
    v18 = (void (***)(_QWORD))v16[6];
    if (v18)
    {
      v19 = (void (***)(_QWORD))v16[7];
      v20 = (void *)v16[6];
      if (v19 != v18)
      {
        v21 = v19 - 18;
        v22 = v19 - 18;
        do
        {
          v23 = *v22;
          v22 -= 18;
          (*v23)(v21);
          v14 = v21 == v18;
          v21 = v22;
        }
        while (!v14);
        v20 = (void *)v16[6];
      }
      v16[7] = v18;
      operator delete(v20);
    }
    MEMORY[0x212BC6398](v16, 0x1020C4024B85F43);
    v2 = v228;
  }
  v24 = operator new();
  *(_OWORD *)v24 = xmmword_2103BF960;
  *(int64x2_t *)(v24 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v24 + 32) = 1;
  *(_QWORD *)(v24 + 40) = 0;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  v25 = (_QWORD *)*v224;
  *v224 = v24;
  if (v25)
  {
    v26 = (void *)v25[9];
    if (v26)
    {
      v25[10] = v26;
      operator delete(v26);
    }
    v27 = (void (***)(_QWORD))v25[6];
    if (v27)
    {
      v28 = (void (***)(_QWORD))v25[7];
      v29 = (void *)v25[6];
      if (v28 != v27)
      {
        v30 = v28 - 18;
        v31 = v28 - 18;
        do
        {
          v32 = *v31;
          v31 -= 18;
          (*v32)(v30);
          v14 = v30 == v27;
          v30 = v31;
        }
        while (!v14);
        v29 = (void *)v25[6];
      }
      v25[7] = v27;
      operator delete(v29);
    }
    MEMORY[0x212BC6398](v25, 0x1020C4024B85F43);
    v2 = v228;
  }
  v33 = *((_QWORD *)v2 + 6);
  v34 = *v2;
  v35 = v2[1];
  *(_OWORD *)(v33 + 26) = *(__int128 *)((char *)v2 + 26);
  *(_OWORD *)v33 = v34;
  *(_OWORD *)(v33 + 16) = v35;
  sub_20FD715B8((vImagePixelCount *)v33);
  v36 = (_QWORD *)*((_QWORD *)v2 + 7);
  v37 = *v2;
  v38 = v2[1];
  *(_OWORD *)((char *)v36 + 26) = *(__int128 *)((char *)v2 + 26);
  *(_OWORD *)v36 = v37;
  *((_OWORD *)v36 + 1) = v38;
  v39 = v36[2];
  if (v39 && v36[3])
  {
    v231 = v36;
    v227 = v36 + 9;
    v225 = 0;
    v226 = v36 + 8;
    v40 = *v36;
    height = v36[1];
    v41 = 1;
    while (!v41)
    {
LABEL_40:
      v42 = *((unsigned __int8 *)v36 + 41);
      height = (height + v42) >> 1;
      v40 = (v40 + v42) >> 1;
      if (++v225 >= v39)
        goto LABEL_263;
    }
    v43 = 0;
    v229 = v40;
LABEL_44:
    vImageBuffer_Init(&buf, height, v40, 0x10u, 0);
    data = (std::__shared_weak_count_vtbl *)buf.data;
    v45 = (std::__shared_weak_count *)operator new();
    v230 = v43;
    v45->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA06FF8;
    v45->__shared_weak_owners_ = 0;
    v45[1].__vftable = data;
    v232 = v45;
    do
      v47 = __ldxr(p_shared_owners);
    while (__stxr(v47 + 1, p_shared_owners));
    v233 = (unint64_t *)&v45->__shared_owners_;
    v48 = buf.rowBytes >> 1;
    v49 = v36[4];
    __p = 0;
    if (v49 * v40 <= buf.rowBytes >> 1)
    {
      *(_QWORD *)&v258 = data;
      *((_QWORD *)&v258 + 1) = v45;
    }
    else
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
      v50 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v53 = qword_254A6DE40;
        for (i = qword_254A6DE48; v53 != i; v53 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v53)(*(_QWORD *)(v53 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
      }
      v51 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        abort();
      qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
      *(_QWORD *)&v258 = data;
      *((_QWORD *)&v258 + 1) = v232;
      v40 = v229;
    }
    v256 = v48;
    v255 = v49;
    LOBYTE(v257) = 0;
    *(_DWORD *)((char *)&v257 + 1) = (_DWORD)v261;
    HIDWORD(v257) = *(_DWORD *)((char *)&v261 + 3);
    if (height)
    {
      if (height >> 61)
        sub_20E867F44();
      v52 = operator new(8 * height);
      bzero(v52, 8 * height);
      v55 = v231;
      __p = v52;
      v56 = 0;
      for (j = 0; j != height; ++j)
      {
        *((_QWORD *)v52 + j) = v258 + v56;
        v56 += 2 * v48;
      }
    }
    else
    {
      v55 = v231;
    }
    v59 = (_OWORD *)v55[10];
    v58 = v55[11];
    if ((unint64_t)v59 >= v58)
    {
      v62 = (_OWORD *)*v227;
      v63 = ((uint64_t)v59 - *v227) >> 5;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 59)
        sub_20E867F44();
      v65 = v58 - (_QWORD)v62;
      if (v65 >> 4 > v64)
        v64 = v65 >> 4;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFE0)
        v66 = 0x7FFFFFFFFFFFFFFLL;
      else
        v66 = v64;
      if (v66)
      {
        if (v66 >> 59)
          goto LABEL_267;
        v67 = (char *)operator new(32 * v66);
      }
      else
      {
        v67 = 0;
      }
      v68 = *(_OWORD *)&buf.width;
      v69 = &v67[32 * v63];
      *(_OWORD *)v69 = *(_OWORD *)&buf.data;
      *((_OWORD *)v69 + 1) = v68;
      v70 = v69;
      if (v59 != v62)
      {
        do
        {
          v71 = *(v59 - 1);
          *((_OWORD *)v70 - 2) = *(v59 - 2);
          *((_OWORD *)v70 - 1) = v71;
          v70 -= 32;
          v59 -= 2;
        }
        while (v59 != v62);
        v59 = (_OWORD *)*v227;
      }
      v61 = v69 + 32;
      v55[9] = v70;
      v55[10] = v69 + 32;
      v55[11] = &v67[32 * v66];
      if (v59)
        operator delete(v59);
    }
    else
    {
      v60 = *(_OWORD *)&buf.width;
      *v59 = *(_OWORD *)&buf.data;
      v59[1] = v60;
      v61 = v59 + 2;
    }
    v55[10] = v61;
    v73 = v55[7];
    v72 = v55[8];
    if (v73 < v72)
    {
      *(_QWORD *)v73 = &off_24CA06E50;
      *(_BYTE *)(v73 + 8) = 0;
      *(_BYTE *)(v73 + 80) = 0;
      *(_OWORD *)(v73 + 88) = 0u;
      *(_OWORD *)(v73 + 16) = 0u;
      *(_OWORD *)(v73 + 32) = 0u;
      *(_OWORD *)(v73 + 48) = 0u;
      *(_OWORD *)(v73 + 57) = 0u;
      *(_OWORD *)(v73 + 104) = 0u;
      *(_OWORD *)(v73 + 120) = 0u;
      *(_QWORD *)(v73 + 136) = 0;
      if (v255 * v40 > v256)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
        v74 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v132 = qword_254A6DE40;
          for (k = qword_254A6DE48; v132 != k; v132 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v132)(*(_QWORD *)(v132 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
        }
        v75 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
      }
      v76 = *(std::__shared_weak_count **)(v73 + 96);
      *(_OWORD *)(v73 + 88) = v258;
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = (void **)(v73 + 120);
      v80 = *(_BYTE **)(v73 + 120);
      *(_BYTE *)(v73 + 8) = 0;
      *(_QWORD *)(v73 + 32) = v40;
      *(_QWORD *)(v73 + 40) = v256;
      *(_QWORD *)(v73 + 48) = height;
      *(_QWORD *)(v73 + 16) = v255;
      *(_QWORD *)(v73 + 24) = 0;
      *(_BYTE *)(v73 + 80) = 0;
      *(_QWORD *)(v73 + 64) = 2 * v255;
      *(_QWORD *)(v73 + 72) = v257;
      *(_QWORD *)(v73 + 56) = 2 * v255;
      v81 = *(char **)(v73 + 128);
      v82 = (v81 - v80) >> 3;
      v83 = height - v82;
      if (height <= v82)
      {
        v94 = v233;
        v36 = v231;
        if (height < v82)
          *(_QWORD *)(v73 + 128) = &v80[8 * height];
        if (height)
          goto LABEL_163;
      }
      else
      {
        v84 = *(_QWORD *)(v73 + 136);
        v36 = v231;
        if (v83 <= (v84 - (uint64_t)v81) >> 3)
        {
          v136 = 8 * v83;
          bzero(*(void **)(v73 + 128), v136);
          *(_QWORD *)(v73 + 128) = &v81[v136];
          v94 = v233;
        }
        else
        {
          if (height >> 61)
            sub_20E867F44();
          v85 = v84 - (_QWORD)v80;
          v86 = v85 >> 2;
          if (v85 >> 2 <= height)
            v86 = height;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
            v86 = 0x1FFFFFFFFFFFFFFFLL;
          if (v86 >> 61)
            sub_20E877A38();
          v87 = v86;
          v88 = (char *)operator new(8 * v86);
          v89 = 8 * v83;
          v243 = v88;
          v248 = 8 * v83;
          v90 = &v88[8 * v82];
          bzero(v90, v89);
          v91 = (char *)(v81 - v80);
          if (v81 == v80)
          {
            v94 = v233;
            *(_QWORD *)(v73 + 120) = v90;
            *(_QWORD *)(v73 + 128) = &v90[v248];
            *(_QWORD *)(v73 + 136) = &v243[8 * v87];
            v36 = v231;
            if (v81)
              goto LABEL_162;
          }
          else
          {
            v92 = v91 - 8;
            if ((unint64_t)(v91 - 8) < 0x58)
            {
              v93 = v90;
              v94 = v233;
              v95 = v243;
              v96 = v248;
              goto LABEL_160;
            }
            v95 = v243;
            v96 = v248;
            v93 = v90;
            v94 = v233;
            if ((unint64_t)(v80 - v243) < 0x20)
              goto LABEL_281;
            v137 = ((unint64_t)v92 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v139 = &v81[-v138];
            v93 = &v90[-v138];
            v140 = &v243[8 * v82 - 16];
            v141 = v81 - 16;
            v142 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v143 = *(_OWORD *)v141;
              *((_OWORD *)v140 - 1) = *((_OWORD *)v141 - 1);
              *(_OWORD *)v140 = v143;
              v140 -= 32;
              v141 -= 32;
              v142 -= 4;
            }
            while (v142);
            v81 = v139;
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_281:
              do
              {
LABEL_160:
                v144 = *((_QWORD *)v81 - 1);
                v81 -= 8;
                *((_QWORD *)v93 - 1) = v144;
                v93 -= 8;
              }
              while (v81 != v80);
            }
            v81 = (char *)*v79;
            *(_QWORD *)(v73 + 120) = v93;
            *(_QWORD *)(v73 + 128) = &v90[v96];
            *(_QWORD *)(v73 + 136) = &v95[8 * v87];
            v36 = v231;
            if (v81)
LABEL_162:
              operator delete(v81);
          }
        }
LABEL_163:
        v145 = 0;
        v146 = 0;
        do
        {
          *((_QWORD *)*v79 + v146++) = *(_QWORD *)(v73 + 88) + v145;
          v145 += 2 * v256;
        }
        while (height != v146);
      }
      v147 = v73 + 144;
      v36[7] = v147;
      v36[7] = v147;
      v148 = __p;
      if (!__p)
        goto LABEL_167;
LABEL_166:
      operator delete(v148);
      goto LABEL_167;
    }
    v97 = v55[6];
    v98 = 0x8E38E38E38E38E39 * ((uint64_t)(v73 - v97) >> 4);
    v99 = v98 + 1;
    if (v98 + 1 > 0x1C71C71C71C71C7)
      sub_20E867F44();
    v100 = 0x8E38E38E38E38E39 * ((uint64_t)(v72 - v97) >> 4);
    if (2 * v100 > v99)
      v99 = 2 * v100;
    if (v100 >= 0xE38E38E38E38E3)
      v101 = 0x1C71C71C71C71C7;
    else
      v101 = v99;
    v264 = v226;
    if (v101)
    {
      if (v101 > 0x1C71C71C71C71C7)
LABEL_267:
        sub_20E877A38();
      v102 = operator new(144 * v101);
    }
    else
    {
      v102 = 0;
    }
    v249 = v98;
    v103 = (char *)&v102[18 * v98];
    v261 = v102;
    v262 = v103;
    *(_QWORD *)v103 = &off_24CA06E50;
    v103[80] = 0;
    *((_OWORD *)v103 + 2) = 0u;
    *((_OWORD *)v103 + 3) = 0u;
    *(_OWORD *)(v103 + 57) = 0u;
    *(_OWORD *)(v103 + 104) = 0u;
    *(_OWORD *)(v103 + 120) = 0u;
    *((_QWORD *)v103 + 17) = 0;
    v103[8] = 0;
    v104 = v103 + 8;
    *((_OWORD *)v103 + 1) = 0u;
    v244 = v103 + 16;
    *(_OWORD *)(v103 + 88) = 0u;
    v105 = v103 + 88;
    *(_QWORD *)&v263 = v103;
    *((_QWORD *)&v263 + 1) = &v102[18 * v101];
    if (v255 * v40 > v256)
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
      v106 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v134 = qword_254A6DE40;
        for (m = qword_254A6DE48; v134 != m; v134 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v134)(*(_QWORD *)(v134 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
      }
      v107 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        abort();
      qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
    }
    v108 = (std::__shared_weak_count *)v102[18 * v249 + 12];
    *v105 = v258;
    if (v108)
    {
      v109 = (unint64_t *)&v108->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    v111 = (char *)&v102[18 * v249];
    v114 = (_BYTE *)*((_QWORD *)v111 + 15);
    v112 = (char **)(v111 + 120);
    v113 = v114;
    *v104 = 0;
    *(v112 - 12) = 0;
    *(v112 - 11) = (char *)v40;
    *(v112 - 10) = (char *)v256;
    *(v112 - 9) = (char *)height;
    *v244 = v255;
    *(v112 - 6) = v257;
    *((_BYTE *)v112 - 40) = 0;
    *(v112 - 8) = (char *)(2 * v255);
    *(v112 - 7) = (char *)(2 * v255);
    v115 = v112 + 1;
    v116 = v112[1];
    v117 = (char *)(v116 - v114);
    v118 = (v116 - v114) >> 3;
    v119 = height - v118;
    if (height <= v118)
    {
      if (height < v118)
        *v115 = &v113[8 * height];
      v94 = v233;
      if (!height)
        goto LABEL_179;
      goto LABEL_177;
    }
    v120 = (char *)&v102[18 * v249];
    v123 = *((_QWORD *)v120 + 17);
    v122 = v120 + 136;
    v121 = v123;
    if (v119 <= (v123 - (uint64_t)v116) >> 3)
    {
      bzero(v112[1], 8 * v119);
      *v115 = &v116[8 * v119];
      v94 = v233;
      goto LABEL_177;
    }
    if (height >> 61)
      sub_20E867F44();
    v245 = v122;
    v124 = v121 - (_QWORD)v113;
    v125 = v124 >> 2;
    if (v124 >> 2 <= height)
      v125 = height;
    if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
      v125 = 0x1FFFFFFFFFFFFFFFLL;
    if (v125 >> 61)
      sub_20E877A38();
    v240 = v125;
    v238 = operator new(8 * v125);
    v126 = &v238[8 * v118];
    v250 = 8 * v119;
    bzero(v126, 8 * v119);
    v127 = (char *)(v116 - v113);
    if (v116 == v113)
    {
      v94 = v233;
      *v112 = v126;
      *v115 = &v126[v250];
      *v245 = &v238[8 * v240];
      if (!v116)
      {
LABEL_177:
        v158 = 0;
        v159 = 0;
        do
        {
          *(_QWORD *)&(*v112)[8 * v159++] = *(_QWORD *)v105 + v158;
          v158 += 2 * v256;
        }
        while (height != v159);
LABEL_179:
        v160 = v263 + 144;
        *(_QWORD *)&v263 = v263 + 144;
        v161 = (char *)v231[7];
        v237 = (char *)v231[6];
        if (v161 == v237)
        {
          v231[6] = v262;
          v231[7] = v160;
          v231[8] = *((_QWORD *)&v263 + 1);
          goto LABEL_245;
        }
        v162 = 0;
        v163 = v262;
        while (1)
        {
          v164 = v163;
          *((_QWORD *)v163 - 18) = &off_24CA06E50;
          v165 = v163 - 144;
          v165[8] = 0;
          v165[80] = 0;
          *(_OWORD *)(v165 + 88) = 0u;
          v166 = v165 + 88;
          *((_OWORD *)v165 + 1) = 0u;
          *((_OWORD *)v165 + 2) = 0u;
          *((_OWORD *)v165 + 3) = 0u;
          *(_OWORD *)(v165 + 57) = 0u;
          *(_OWORD *)(v165 + 120) = 0u;
          v167 = (char **)(v165 + 120);
          *(_OWORD *)(v165 + 104) = 0u;
          *((_QWORD *)v165 + 17) = 0;
          v239 = v165;
          v241 = *((_QWORD *)v161 - 7);
          v265 = v241;
          v168 = (std::__shared_weak_count *)*((_QWORD *)v161 - 6);
          v266 = v168;
          if (v168)
          {
            v169 = (unint64_t *)&v168->__shared_owners_;
            do
              v170 = __ldxr(v169);
            while (__stxr(v170 + 1, v169));
          }
          v171 = *((_QWORD *)v161 - 14);
          v172 = *((_QWORD *)v161 - 12);
          v173 = *((_QWORD *)v161 - 15);
          v246 = *(v161 - 136);
          v251 = *((_QWORD *)v161 - 16);
          if (*(v161 - 136))
            v174 = *((_QWORD *)v161 - 14);
          else
            v174 = 0;
          v253 = *((_QWORD *)v161 - 13);
          if (v173 + *((_QWORD *)v161 - 16) * v171 + v174 > v253)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
            v235 = v173;
            v175 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v175 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v197 = qword_254A6DE40;
              for (n = qword_254A6DE48; v197 != n; v197 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v197)(*(_QWORD *)(v197 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
            }
            v176 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v173 = v235;
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
          }
          v265 = 0;
          v266 = 0;
          v177 = (std::__shared_weak_count *)*((_QWORD *)v164 - 6);
          *((_QWORD *)v164 - 7) = v241;
          *((_QWORD *)v164 - 6) = v168;
          if (v177)
          {
            v178 = (unint64_t *)&v177->__shared_owners_;
            do
              v179 = __ldaxr(v178);
            while (__stlxr(v179 - 1, v178));
            if (!v179)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
          *(v164 - 136) = v246;
          *((_QWORD *)v164 - 14) = v171;
          *((_QWORD *)v164 - 13) = v253;
          *((_QWORD *)v164 - 12) = v172;
          *((_QWORD *)v164 - 16) = v251;
          *((_QWORD *)v164 - 15) = v173;
          v180 = *((_QWORD *)v161 - 9);
          *(v164 - 64) = *(v161 - 64);
          *((_QWORD *)v164 - 9) = v180;
          v181 = v246 | (2 * v251);
          *((_QWORD *)v164 - 11) = v181 + v173;
          *((_QWORD *)v164 - 10) = v181;
          v183 = (_BYTE *)*((_QWORD *)v164 - 3);
          v182 = (char *)*((_QWORD *)v164 - 2);
          v184 = (v182 - v183) >> 3;
          v185 = v172 - v184;
          if (v172 <= v184)
          {
            if (v172 < v184)
              *((_QWORD *)v164 - 2) = &v183[8 * v172];
            v163 = v239;
            if (!v172)
              goto LABEL_230;
            goto LABEL_228;
          }
          v186 = *((_QWORD *)v164 - 1);
          if (v185 > (v186 - (uint64_t)v182) >> 3)
            break;
          bzero(*((void **)v164 - 2), 8 * v185);
          *((_QWORD *)v164 - 2) = &v182[8 * v185];
          v163 = v239;
LABEL_228:
          v207 = 0;
          v208 = 0;
          do
          {
            *(_QWORD *)&(*v167)[8 * v208++] = *v166 + v207;
            v207 += 2 * v253;
          }
          while (v172 != v208);
LABEL_230:
          v209 = v266;
          if (v266)
          {
            v210 = (unint64_t *)&v266->__shared_owners_;
            do
              v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
            }
          }
          v161 -= 144;
          v162 -= 144;
          if (v161 == v237)
          {
            v161 = (char *)v231[6];
            v212 = (char *)v231[7];
            v231[6] = v163;
            v213 = v263;
            *(_OWORD *)(v231 + 7) = v263;
            v160 = v213;
            if (v212 == v161)
            {
              v94 = v233;
              if (v161)
                goto LABEL_246;
            }
            else
            {
              v214 = v212 - 144;
              v215 = (void (***)(char *))(v212 - 144);
              v94 = v233;
              do
              {
                v216 = *v215;
                v215 -= 18;
                (*v216)(v214);
                v14 = v214 == v161;
                v214 = (char *)v215;
              }
              while (!v14);
LABEL_245:
              if (v161)
LABEL_246:
                operator delete(v161);
            }
            v36 = v231;
            v231[7] = v160;
            v148 = __p;
            if (__p)
              goto LABEL_166;
            do
LABEL_167:
              v149 = __ldaxr(v94);
            while (__stlxr(v149 - 1, v94));
            v2 = v228;
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
              std::__shared_weak_count::__release_weak(v232);
            }
            v40 = v229;
            v43 = v230 + 1;
            v41 = v36[3];
            if (v230 + 1 >= v41)
            {
              v39 = v36[2];
              goto LABEL_40;
            }
            goto LABEL_44;
          }
        }
        if (v172 >> 61)
          sub_20E867F44();
        v187 = v186 - (_QWORD)v183;
        v188 = v187 >> 2;
        if (v187 >> 2 <= v172)
          v188 = v172;
        if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8)
          v188 = 0x1FFFFFFFFFFFFFFFLL;
        if (v188 >> 61)
          sub_20E877A38();
        v247 = v188;
        v252 = (v182 - v183) >> 3;
        v189 = (char *)operator new(8 * v188);
        v190 = 8 * v185;
        v236 = v189;
        v191 = &v189[8 * v252];
        v242 = v190;
        bzero(v191, v190);
        v192 = (char *)(v182 - v183);
        if (v182 == v183)
        {
          v194 = v191;
          v195 = v236;
          v196 = v242;
          goto LABEL_226;
        }
        v193 = v192 - 8;
        if ((unint64_t)(v192 - 8) >= 0x58)
        {
          v195 = v236;
          v194 = v191;
          v196 = v242;
          if ((unint64_t)(v183 - v236) >= 0x20)
          {
            v199 = ((unint64_t)v193 >> 3) + 1;
            v200 = 8 * (v199 & 0x3FFFFFFFFFFFFFFCLL);
            v201 = &v182[-v200];
            v194 = &v191[-v200];
            v202 = &v236[8 * v252 - 16];
            v203 = v182 - 16;
            v204 = v199 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v205 = *(_OWORD *)v203;
              *((_OWORD *)v202 - 1) = *((_OWORD *)v203 - 1);
              *(_OWORD *)v202 = v205;
              v202 -= 32;
              v203 -= 32;
              v204 -= 4;
            }
            while (v204);
            v182 = v201;
            if (v199 == (v199 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_225;
          }
        }
        else
        {
          v194 = v191;
          v195 = v236;
          v196 = v242;
        }
        do
        {
          v206 = *((_QWORD *)v182 - 1);
          v182 -= 8;
          *((_QWORD *)v194 - 1) = v206;
          v194 -= 8;
        }
        while (v182 != v183);
LABEL_225:
        v182 = *v167;
LABEL_226:
        *((_QWORD *)v164 - 3) = v194;
        *((_QWORD *)v164 - 2) = &v191[v196];
        *((_QWORD *)v164 - 1) = &v195[8 * v247];
        v163 = v239;
        if (v182)
          operator delete(v182);
        goto LABEL_228;
      }
LABEL_176:
      operator delete(v116);
      goto LABEL_177;
    }
    v128 = v127 - 8;
    v94 = v233;
    if ((unint64_t)(v127 - 8) >= 0x58)
    {
      v130 = v238;
      v129 = &v238[8 * v118];
      v131 = v250;
      if ((unint64_t)(v116 - v117 - (_QWORD)v238) >= 0x20)
      {
        v150 = ((unint64_t)v128 >> 3) + 1;
        v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
        v152 = &v116[-v151];
        v129 = &v126[-v151];
        v153 = &v238[8 * v118 - 16];
        v154 = v116 - 16;
        v155 = v150 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v156 = *(_OWORD *)v154;
          *(v153 - 1) = *((_OWORD *)v154 - 1);
          *v153 = v156;
          v153 -= 2;
          v154 -= 32;
          v155 -= 4;
        }
        while (v155);
        v116 = v152;
        if (v150 == (v150 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_175:
          v116 = *v112;
          *v112 = v129;
          *v115 = &v126[v131];
          *v245 = &v130[8 * v240];
          if (!v116)
            goto LABEL_177;
          goto LABEL_176;
        }
      }
    }
    else
    {
      v129 = &v238[8 * v118];
      v130 = v238;
      v131 = v250;
    }
    do
    {
      v157 = *((_QWORD *)v116 - 1);
      v116 -= 8;
      *((_QWORD *)v129 - 1) = v157;
      v129 -= 8;
    }
    while (v116 != v113);
    goto LABEL_175;
  }
LABEL_263:
  v217 = a2[1].i64[0];
  v254 = a2[2];
  v218 = (_QWORD *)*v224;
  *(uint64x2_t *)v218 = vshrq_n_u64((uint64x2_t)vaddq_s64(*a2, vdupq_n_s64(1uLL)), 1uLL);
  v218[2] = v217 - 1;
  v218[3] = 1;
  *((_WORD *)v218 + 20) = v254.i16[4];
  v218[4] = v254.i64[0];
  sub_20FD715B8(v218);
  sub_20FD985C8(v221, *(_QWORD *)v2, *(_QWORD *)v2, 3uLL, 1, 0, 0);
  return v2;
}

void sub_20FD982B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  sub_20FD712D0(a12);
  sub_20FD9873C(a15);
  sub_20FD9873C(a13);
  sub_20FD9873C(a14);
  _Unwind_Resume(a1);
}

void sub_20FD982E4(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  free(v1);
  __cxa_rethrow();
}

void sub_20FD982F8()
{
  __cxa_end_catch();
  JUMPOUT(0x20FD985A0);
}

void sub_20FD9830C()
{
  JUMPOUT(0x20FD9856CLL);
}

void sub_20FD98468()
{
  JUMPOUT(0x20FD98470);
}

void sub_20FD98500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,unint64_t *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;

  sub_20E86665C(v46 - 112);
  v48 = *v44;
  if (*v44)
  {
    *(_QWORD *)(v45 - 16) = v48;
    operator delete(v48);
  }
  sub_20E8E5AE4(a33);
  if (v45 == a19)
  {
    v49 = a29;
    v50 = a30;
  }
  else
  {
    v50 = a30;
    do
    {
      (**(void (***)(uint64_t))(a19 + v43))(a19 + v43);
      v43 += 144;
    }
    while (v43);
    v49 = a29;
  }
  sub_20EDB6B64(v46 - 152);
  sub_20FD71140(&a43);
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  sub_20FD712D0(a12);
  sub_20FD9873C(a15);
  sub_20FD9873C(a13);
  sub_20FD9873C(a14);
  _Unwind_Resume(a1);
}

void sub_20FD985C8(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;

  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[2] = a5;
  v14 = operator new[]();
  *(_QWORD *)&v21 = v14;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24CA07048;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v14;
  *((_QWORD *)&v21 + 1) = v15;
  LOBYTE(v19) = 0;
  v20 = 0;
  sub_20EDB585C((uint64_t)a1, &v21, a2, a3, a4, a5, a6, a7, &v19);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20FD986F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD98704(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x212BC6368](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_20FD98728(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20FD9873C(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (**v9)(_QWORD);
  BOOL v10;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    v4 = (void (***)(_QWORD))v2[6];
    if (v4)
    {
      v5 = (void (***)(_QWORD))v2[7];
      v6 = (void *)v2[6];
      if (v5 != v4)
      {
        v7 = v5 - 18;
        v8 = v5 - 18;
        do
        {
          v9 = *v8;
          v8 -= 18;
          (*v9)(v7);
          v10 = v7 == v4;
          v7 = v8;
        }
        while (!v10);
        v6 = (void *)v2[6];
      }
      v2[7] = v4;
      operator delete(v6);
    }
    MEMORY[0x212BC6398](v2, 0x1020C4024B85F43);
  }
  return a1;
}

unint64_t sub_20FD987E8(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int8x16_t v22;
  unint64_t result;
  __int128 v24;
  __int16 v25;
  __int128 v26;
  __int16 v27;

  v27 = 0;
  v26 = xmmword_2103C02A6;
  v24 = xmmword_2103C02B8;
  v25 = 3;
  v13 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  sub_20FD98918(*(int8x16_t **)(a2 + 88), *(unsigned int **)(a1 + 160), *(_WORD **)(*(_QWORD *)(v12 + 48) + 88), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 40), *(_QWORD *)(a2 + 48), (unsigned __int16 *)&v26, 1.5131222e-306, a4, a5, a6, a7, a8, a9, a10);
  sub_20FD9E8BC(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 88), *(_BYTE **)(*(_QWORD *)(v13 + 48) + 88), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 32), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 40), *(_QWORD *)(*(_QWORD *)(v13 + 48) + 40), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 48));
  sub_20FD98918(*(int8x16_t **)(a2 + 88), *(unsigned int **)(a1 + 160), *(_WORD **)(*(_QWORD *)(v12 + 48) + 232), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 184), *(_QWORD *)(a2 + 48), (unsigned __int16 *)&v24, v15, v16, v17, v18, v19, v20, v21, v22);
  result = sub_20FD9E8BC(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 232), *(_BYTE **)(*(_QWORD *)(v13 + 48) + 232), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 176), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 184), *(_QWORD *)(*(_QWORD *)(v13 + 48) + 184), *(_QWORD *)(a2 + 48));
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) >= 2uLL)
    return sub_20FD99FD0(*(_QWORD *)(a2 + 88), *(unsigned int **)(a1 + 160), *(_QWORD *)(*(_QWORD *)(v14 + 48) + 88), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40), *(_DWORD *)(*(_QWORD *)(v14 + 48) + 40), *(_DWORD *)(a2 + 48), word_2103C02EE);
  return result;
}

uint64_t sub_20FD98918(int8x16_t *a1, unsigned int *a2, _WORD *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, int8x16_t a16)
{
  int32x4_t v16;
  int32x4_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  _WORD *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  int8x16_t *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t result;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int8x16_t *v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int8x16_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int8x16_t v66;
  unint64_t v67;
  int8x16_t *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  int32x4_t *v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  unint64_t v85;
  unsigned int *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  unsigned __int8 *v97;
  int8x16_t v98;
  int8x16_t v99;
  int32x4_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  int8x16_t *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  uint16x8_t v118;
  int8x16_t *v119;
  unint64_t v120;
  unsigned __int8 *v121;
  unint64_t v122;
  int8x16_t *v123;
  unsigned int *v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int8x16_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int8x16_t v140;
  uint32x4_t v141;
  uint32x4_t v142;
  uint8x16_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  unsigned int *v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  uint32x4_t v165;
  unint64_t v166;
  unsigned int *v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  int v178;
  unsigned __int8 *v179;
  int8x16_t v180;
  int8x16_t v181;
  int32x4_t v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unint64_t v188;
  int8x16_t *v189;
  unsigned __int8 *v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  unsigned __int8 *v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int16x8_t v199;
  uint16x8_t v200;
  int8x16_t *v201;
  unsigned __int8 *v202;
  unint64_t v203;
  unint64_t v204;
  int8x16_t *v205;
  unsigned int *v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int8x16_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int8x16_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int8x16_t v218;
  uint32x4_t v219;
  uint32x4_t v220;
  uint32x4_t v221;
  uint8x16_t v222;
  uint8x16_t v223;
  uint16x8_t v224;
  uint16x8_t v225;
  uint32x4_t v226;
  uint32x4_t v227;
  uint8x16_t v228;
  uint16x8_t v229;
  uint16x8_t v230;
  uint16x8_t v231;
  unint64_t v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  unsigned __int8 *v238;
  unsigned int *v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  uint32x4_t v248;
  uint16x8_t v249;
  uint32x4_t v250;
  uint32x4_t v251;
  unint64_t v252;
  unsigned int *v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  int v263;
  int v264;
  unsigned int v265;
  int v266;
  _WORD *v267;
  int8x16_t v268;
  int8x16_t v269;
  int32x4_t v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unint64_t v276;
  int8x16_t *v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  unsigned __int8 *v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  int32x4_t v285;
  int32x4_t v286;
  int16x8_t v287;
  int16x8_t v288;
  uint16x8_t v289;
  int8x16_t *v290;
  unsigned __int8 *v291;
  unint64_t v292;
  unint64_t v293;
  uint16x8_t v294;
  unsigned int *v295;
  int8x16_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int8x16_t v301;
  int32x4_t v302;
  int8x16_t v303;
  uint32x4_t v304;
  uint32x4_t v305;
  uint32x4_t v306;
  uint8x16_t v307;
  uint8x16_t v308;
  uint16x8_t v309;
  uint16x8_t v310;
  uint32x4_t v311;
  uint32x4_t v312;
  uint32x4_t v313;
  uint8x16_t v314;
  uint32x4_t v315;
  uint8x16_t v316;
  uint16x8_t v317;
  uint16x8_t v318;
  uint32x4_t v319;
  uint32x4_t v320;
  uint8x16_t v321;
  uint16x8_t v322;
  uint16x8_t v323;
  uint16x8_t v324;
  uint16x8_t v325;
  unint64_t v326;
  unsigned int *v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  uint32x4_t v332;
  uint16x8_t v333;
  uint32x4_t v334;
  uint32x4_t v335;
  uint16x8_t v336;
  uint32x4_t v337;
  uint32x4_t v338;
  unint64_t v339;
  unsigned int *v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  unsigned int v346;
  int v347;
  int v348;
  int v349;
  unsigned int v350;
  int v351;
  int v352;
  int v353;
  unsigned int v354;
  int v355;
  _WORD *v356;
  uint64_t v357;
  uint64_t v358;
  int8x16_t *v359;
  __int8 *v360;
  __int8 *v361;
  __int8 *v362;
  __int8 *v363;
  __int8 *v364;
  __int8 *v365;
  __int8 *v366;
  unsigned __int16 *v367;
  __int8 *v368;
  uint64_t v369;
  unsigned __int8 *v370;
  unsigned __int8 *v371;
  unsigned __int8 *v372;
  unsigned __int8 *v373;
  unsigned __int8 *v374;
  unsigned __int8 *v375;
  unsigned __int8 *v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  unsigned __int8 *v381;
  unsigned int v382;
  unint64_t v383;
  unsigned __int8 *v384;
  int16x8_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int16x8_t v388;
  uint16x8_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint32x4_t *v393;
  uint8x16_t v394;
  uint8x16_t v395;
  uint16x8_t v396;
  uint16x8_t v397;
  uint16x8_t v398;
  uint8x16_t v399;
  uint8x16_t v400;
  uint16x8_t v401;
  uint16x8_t v402;
  uint16x8_t v403;
  uint32x4_t v404;
  uint32x4_t v405;
  uint32x4_t v406;
  uint32x4_t v407;
  uint32x4_t v408;
  uint8x16_t v409;
  uint32x4_t v410;
  uint8x16_t v411;
  uint16x8_t v412;
  uint16x8_t v413;
  uint16x8_t v414;
  uint32x4_t v415;
  uint32x4_t v416;
  uint32x4_t v417;
  uint32x4_t v418;
  uint8x16_t v419;
  uint8x16_t v420;
  uint16x8_t v421;
  uint16x8_t v422;
  uint16x8_t v423;
  uint32x4_t v424;
  uint32x4_t v425;
  uint32x4_t v426;
  uint32x4_t v427;
  uint8x16_t v428;
  uint16x8_t v429;
  uint16x8_t v430;
  uint32x4_t *v431;
  uint16x8_t v432;
  uint16x8_t v433;
  uint16x8_t v434;
  uint16x8_t v435;
  uint32x4_t v436;
  uint32x4_t v437;
  uint32x4_t v438;
  uint16x8_t v439;
  uint16x8_t v440;
  uint32x4_t v441;
  uint32x4_t v442;
  uint16x8_t v443;
  uint16x8_t v444;
  uint32x4_t v445;
  uint32x4_t v446;
  uint16x8_t v447;
  unint64_t v448;
  unsigned int *v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  unsigned int v457;
  int v458;
  int v459;
  int v460;
  unsigned int v461;
  int v462;
  int v463;
  int v464;
  unsigned int v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  uint8x16_t *v469;
  unsigned __int8 *v470;
  uint8x16_t *v471;
  uint8x16_t *v472;
  uint8x16_t *v473;
  uint8x16_t *v474;
  uint8x16_t *v475;
  unint64_t v476;
  unint64_t v477;
  int v478;
  uint64_t v479;
  int8x16_t *v480;
  uint8x16_t *v481;
  uint8x16_t *v482;
  uint8x16_t *v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  unint64_t v489;
  int8x16_t *v490;
  unsigned __int8 *v491;
  unsigned __int8 *v492;
  unsigned __int8 *v493;
  uint8x16_t *v494;
  unsigned __int8 *v495;
  unsigned __int8 *v496;
  unsigned __int8 *v497;
  unsigned __int8 *v498;
  int16x8_t v499;
  int16x8_t v500;
  int16x8_t v501;
  int16x8_t v502;
  uint16x8_t v503;
  unint64_t v504;
  unint64_t v505;
  uint8x16_t *v506;
  uint8x16_t *v507;
  uint8x16_t *v508;
  uint8x16_t *v509;
  uint8x16_t *v510;
  uint8x16_t *v511;
  uint8x16_t *v512;
  uint8x16_t *v513;
  uint32x4_t *v514;
  uint8x16_t v515;
  uint8x16_t v516;
  uint8x16_t v517;
  uint16x8_t v518;
  uint16x8_t v519;
  uint8x16_t v520;
  uint8x16_t v521;
  uint8x16_t v522;
  uint16x8_t v523;
  uint16x8_t v524;
  uint16x8_t v525;
  uint16x8_t v526;
  uint32x4_t v527;
  uint32x4_t v528;
  uint32x4_t v529;
  uint32x4_t v530;
  uint32x4_t v531;
  uint32x4_t v532;
  uint8x16_t v533;
  uint8x16_t v534;
  uint8x16_t v535;
  uint16x8_t v536;
  uint16x8_t v537;
  uint16x8_t v538;
  uint32x4_t v539;
  uint32x4_t v540;
  uint32x4_t v541;
  uint8x16_t v542;
  uint8x16_t v543;
  uint32x4_t v544;
  uint8x16_t v545;
  uint16x8_t v546;
  uint16x8_t v547;
  uint16x8_t v548;
  uint32x4_t v549;
  uint32x4_t v550;
  uint32x4_t v551;
  uint32x4_t v552;
  uint8x16_t v553;
  uint16x8_t v554;
  uint16x8_t v555;
  uint8x16_t *v556;
  uint8x16_t *v557;
  uint8x16_t *v558;
  unint64_t v559;
  uint8x16_t *v560;
  uint8x16_t *v561;
  uint8x16_t *v562;
  uint8x16_t *v563;
  uint32x4_t *v564;
  uint16x8_t v565;
  uint16x8_t v566;
  uint16x8_t v567;
  uint16x8_t v568;
  uint32x4_t v569;
  uint32x4_t v570;
  uint32x4_t v571;
  uint16x8_t v572;
  uint16x8_t v573;
  uint32x4_t v574;
  uint32x4_t v575;
  uint16x8_t v576;
  uint16x8_t v577;
  uint32x4_t v578;
  uint32x4_t v579;
  uint16x8_t v580;
  unint64_t v581;
  unsigned int *v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  unsigned int v590;
  int v591;
  int v592;
  int v593;
  unsigned int v594;
  int v595;
  int v596;
  int v597;
  unsigned int v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  _WORD *v604;
  unint64_t v605;
  unint64_t v606;
  uint8x16_t *v607;
  uint64_t v608;
  _WORD *v609;
  _WORD *v610;
  _WORD *v611;
  unint64_t v612;
  uint64_t v615;
  uint8x16_t *v616;
  uint64_t v617;
  uint8x16_t *v618;
  uint64_t v620;
  uint8x16_t *v621;
  uint8x16_t *v623;
  unsigned __int8 *v624;
  uint64_t v625;
  uint8x16_t *v626;
  unint64_t v629;
  int8x16_t *v631;
  int8x16_t *v632;
  _QWORD v633[13];

  v18 = a8;
  v19 = a7;
  v20 = a4;
  v21 = a3;
  v22 = a2;
  v633[0] = a1;
  v23 = a7 * a6;
  v24 = (int)a5;
  v25 = a4;
  v26 = 2 * a6;
  v629 = a4;
  v600 = 2 * a6;
  v601 = (int)a5;
  if (!a4)
  {
    sub_20FD9B3B4(a3, a2, 0, a8);
    sub_20FD9B3B4((_WORD *)((char *)v21 + v26), v22, 0, v18);
    sub_20FD9B3B4((_WORD *)((char *)v21 + v26 + v26), v22, 0, v18);
    result = sub_20FD9B3B4((_WORD *)((char *)v21 + v26 + v26 + v26), v22, 0, v18);
    goto LABEL_64;
  }
  v615 = v23;
  v617 = v19;
  v27 = &a1->u8[(int)a5];
  v28 = &v27[(int)a5];
  v29 = &v28[(int)a5];
  v30 = &v29[(int)a5];
  v624 = &v30[(int)a5];
  v31 = *a8;
  v32 = a8[1];
  v33 = a8[2];
  v34 = a8[3];
  v35 = a8[4];
  if (a4 < 8uLL)
  {
    v36 = 0;
    v37 = a1;
    v38 = &v28[(int)a5 + (int)a5];
    v39 = &v28[(int)a5];
    v40 = &a1->u8[(int)a5 + (int)a5];
    v41 = &a1->u8[(int)a5];
    goto LABEL_16;
  }
  v43 = vdupq_n_s32(v31);
  v44 = vdupq_n_s32(v32);
  v45 = vdupq_n_s32(v33);
  v46 = vdupq_n_s32(v34);
  v47 = vdupq_n_s32(v35);
  if (a4 >= 0x10uLL)
  {
    v49 = a4 & 0xF;
    v36 = a4 - v49;
    a16.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    v50 = v36;
    v51 = a1;
    v52 = (int32x4_t *)a2;
    do
    {
      v53 = (int32x4_t)vqtbl1q_s8(*v51, (int8x16_t)xmmword_2102DB010);
      v16 = (int32x4_t)vqtbl1q_s8(*v51, (int8x16_t)xmmword_2102DB020);
      v54 = (int32x4_t)vqtbl1q_s8(*v51, (int8x16_t)xmmword_2102DB030);
      v55 = *(int8x16_t *)((char *)v51 + 4 * v24);
      v17 = (int32x4_t)vqtbl1q_s8(*v51, (int8x16_t)xmmword_2102DB040);
      v56 = *(int8x16_t *)((char *)v51 + 3 * v24);
      v57 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_2102DB040), v17), v43), vaddq_s32((int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_2102DB040), v17), v44);
      v58 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_2102DB030), v54), v43), vaddq_s32((int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_2102DB030), v54), v44);
      v59 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_2102DB020), v16), v43), vaddq_s32((int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_2102DB020), v16), v44);
      v60 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_2102DB010), v53), v43), vaddq_s32((int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_2102DB010), v53), v44);
      v61 = *(int8x16_t *)((char *)v51 + 2 * v24);
      v62 = (int32x4_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_2102DB040);
      v63 = vmlaq_s32(v60, vaddq_s32((int32x4_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_2102DB010), v53), v45);
      v64 = vmlaq_s32(v59, vaddq_s32((int32x4_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_2102DB020), v16), v45);
      v65 = vmlaq_s32(v58, vaddq_s32((int32x4_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_2102DB030), v54), v45);
      v66 = *(int8x16_t *)((char *)v51 + v24);
      v52[2] = vmlaq_s32(vmlaq_s32(v65, vaddq_s32((int32x4_t)vqtbl1q_s8(v66, (int8x16_t)xmmword_2102DB030), v54), v46), v47, v54);
      v52[3] = vmlaq_s32(vmlaq_s32(vmlaq_s32(v57, vaddq_s32(v62, v17), v45), vaddq_s32((int32x4_t)vqtbl1q_s8(v66, (int8x16_t)xmmword_2102DB040), v17), v46), v47, v17);
      *v52 = vmlaq_s32(vmlaq_s32(v63, vaddq_s32((int32x4_t)vqtbl1q_s8(v66, (int8x16_t)xmmword_2102DB010), v53), v46), v47, v53);
      v52[1] = vmlaq_s32(vmlaq_s32(v64, vaddq_s32((int32x4_t)vqtbl1q_s8(v66, (int8x16_t)xmmword_2102DB020), v16), v46), v47, v16);
      v52 += 4;
      ++v51;
      v50 -= 16;
    }
    while (v50);
    if (!v49)
      goto LABEL_18;
    if (v49 < 8)
    {
      v41 = &v27[v36];
      v40 = &v28[v36];
      v39 = &v29[v36];
      v38 = &v30[v36];
      v37 = (int8x16_t *)((char *)a1 + v36);
LABEL_16:
      v85 = v25 - v36;
      v86 = &v22[v36];
      do
      {
        v88 = v37->u8[0];
        v37 = (int8x16_t *)((char *)v37 + 1);
        v87 = v88;
        v89 = *v38++;
        v90 = (v89 + v87) * v31;
        v91 = *v39++;
        v92 = v90 + (v91 + v87) * v32;
        v93 = *v40++;
        v94 = v92 + (v93 + v87) * v33;
        v95 = *v41++;
        *v86++ = v94 + (v95 + v87) * v34 + v87 * v35;
        --v85;
      }
      while (v85);
      goto LABEL_18;
    }
    v48 = v25 - (v20 & 0xF);
    LOBYTE(v20) = a4;
  }
  else
  {
    v48 = 0;
  }
  v36 = v25 - (v20 & 7);
  v37 = (int8x16_t *)((char *)a1 + v36);
  v38 = &v30[v36];
  v39 = &v29[v36];
  v40 = &v28[v36];
  v41 = &v27[v36];
  v67 = v36;
  v68 = a1;
  v69 = &v28[v24 + v24];
  v70 = &v28[v24];
  v71 = v28;
  v72 = v27;
  v73 = (int32x4_t *)&v22[v48];
  do
  {
    a16.i64[0] = *(uint64_t *)((char *)v68->i64 + v48);
    v74 = (int32x4_t)vqtbl1q_s8(a16, (int8x16_t)xmmword_2102DB010);
    a16 = vqtbl1q_s8(a16, (int8x16_t)xmmword_2102DB020);
    v16.i64[0] = *(_QWORD *)&v69[v48];
    v75 = (int32x4_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_2102DB010);
    v17.i64[0] = *(_QWORD *)&v70[v48];
    v76 = (int32x4_t)vqtbl1q_s8((int8x16_t)v17, (int8x16_t)xmmword_2102DB010);
    v77 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v17, (int8x16_t)xmmword_2102DB020), (int32x4_t)a16);
    v78 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_2102DB020), (int32x4_t)a16), v43), v77, v44);
    v79 = vmlaq_s32(vmulq_s32(vaddq_s32(v75, v74), v43), vaddq_s32(v76, v74), v44);
    v77.i64[0] = *(_QWORD *)&v71[v48];
    v80 = (int32x4_t)vqtbl1q_s8((int8x16_t)v77, (int8x16_t)xmmword_2102DB020);
    v81 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v77, (int8x16_t)xmmword_2102DB010), v74);
    v82 = vmlaq_s32(v79, v81, v45);
    v83 = vmlaq_s32(v78, vaddq_s32(v80, (int32x4_t)a16), v45);
    v81.i64[0] = *(_QWORD *)&v72[v48];
    v84 = (int32x4_t)vqtbl1q_s8((int8x16_t)v81, (int8x16_t)xmmword_2102DB010);
    v17 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v81, (int8x16_t)xmmword_2102DB020), (int32x4_t)a16);
    v16 = vmlaq_s32(vmlaq_s32(v83, v17, v46), v47, (int32x4_t)a16);
    *v73 = vmlaq_s32(vmlaq_s32(v82, vaddq_s32(v84, v74), v46), v47, v74);
    v73[1] = v16;
    v73 += 2;
    v72 += 8;
    v71 += 8;
    v70 += 8;
    v69 += 8;
    v68 = (int8x16_t *)((char *)v68 + 8);
    v67 -= 8;
  }
  while (v48 != v67);
  v21 = a3;
  if ((v20 & 7) != 0)
    goto LABEL_16;
LABEL_18:
  v96 = v25;
  v97 = &v624[v601];
  sub_20FD9B3B4(v21, v22, a4, v18);
  v101 = *v18;
  v102 = v18[1];
  v103 = v18[2];
  v104 = v18[3];
  v105 = v18[4];
  if (v96 < 8)
  {
    v106 = 0;
    v107 = a1;
    v108 = v624;
    v109 = v30;
    v110 = v29;
    v111 = v28;
    v112 = v27;
    v113 = v601;
    v20 = a4;
    goto LABEL_31;
  }
  v114 = vdupq_n_s32(v101);
  v115 = vdupq_n_s32(v102);
  v116 = vdupq_n_s32(v103);
  v117 = vdupq_n_s32(v104);
  v118 = (uint16x8_t)vdupq_n_s16(v105);
  v119 = a1;
  if (v96 >= 0x10)
  {
    v20 = a4;
    v106 = v96 - (a4 & 0xF);
    v113 = v601;
    v98.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    v122 = v106;
    v123 = a1;
    v124 = v22;
    do
    {
      v125 = (int32x4_t)vqtbl1q_s8(*v123, (int8x16_t)xmmword_2102DB010);
      v126 = (int32x4_t)vqtbl1q_s8(*v123, (int8x16_t)xmmword_2102DB020);
      v127 = (int32x4_t)vqtbl1q_s8(*v123, (int8x16_t)xmmword_2102DB030);
      v128 = (int32x4_t)vqtbl1q_s8(*v123, (int8x16_t)xmmword_2102DB040);
      v129 = *(int8x16_t *)((char *)v123 + 5 * v601);
      v130 = *(int8x16_t *)((char *)v123 + 4 * v601);
      v131 = (int32x4_t)vqtbl1q_s8(v130, (int8x16_t)xmmword_2102DB010);
      v132 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_2102DB040), v128), v114), vaddq_s32((int32x4_t)vqtbl1q_s8(v130, (int8x16_t)xmmword_2102DB040), v128), v115);
      v133 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_2102DB030), v127), v114), vaddq_s32((int32x4_t)vqtbl1q_s8(v130, (int8x16_t)xmmword_2102DB030), v127), v115);
      v134 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_2102DB020), v126), v114), vaddq_s32((int32x4_t)vqtbl1q_s8(v130, (int8x16_t)xmmword_2102DB020), v126), v115);
      v135 = *(int8x16_t *)((char *)v123 + 3 * v601);
      v136 = vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_2102DB010), v125), v114), vaddq_s32(v131, v125), v115), vaddq_s32((int32x4_t)vqtbl1q_s8(v135, (int8x16_t)xmmword_2102DB010), v125), v116);
      v137 = vmlaq_s32(v134, vaddq_s32((int32x4_t)vqtbl1q_s8(v135, (int8x16_t)xmmword_2102DB020), v126), v116);
      v138 = vmlaq_s32(v133, vaddq_s32((int32x4_t)vqtbl1q_s8(v135, (int8x16_t)xmmword_2102DB030), v127), v116);
      v139 = vmlaq_s32(v132, vaddq_s32((int32x4_t)vqtbl1q_s8(v135, (int8x16_t)xmmword_2102DB040), v128), v116);
      v140 = *(int8x16_t *)((char *)v123 + 2 * v601);
      v141 = (uint32x4_t)vmlaq_s32(v137, vaddq_s32((int32x4_t)vqtbl1q_s8(v140, (int8x16_t)xmmword_2102DB020), v126), v117);
      v142 = (uint32x4_t)vmlaq_s32(v136, vaddq_s32((int32x4_t)vqtbl1q_s8(v140, (int8x16_t)xmmword_2102DB010), v125), v117);
      v143 = *(uint8x16_t *)((char *)v123 + v601);
      v144 = vmovl_high_u8(v143);
      v145 = vmovl_u8(*(uint8x8_t *)v143.i8);
      v99 = (int8x16_t)vmlal_u16(v142, *(uint16x4_t *)v118.i8, *(uint16x4_t *)v145.i8);
      v100 = (int32x4_t)vmlal_u16((uint32x4_t)vmlaq_s32(v138, vaddq_s32((int32x4_t)vqtbl1q_s8(v140, (int8x16_t)xmmword_2102DB030), v127), v117), *(uint16x4_t *)v118.i8, *(uint16x4_t *)v144.i8);
      *((int32x4_t *)v124 + 2) = v100;
      *((uint32x4_t *)v124 + 3) = vmlal_high_u16((uint32x4_t)vmlaq_s32(v139, vaddq_s32((int32x4_t)vqtbl1q_s8(v140, (int8x16_t)xmmword_2102DB040), v128), v117), v118, v144);
      *(int8x16_t *)v124 = v99;
      *((uint32x4_t *)v124 + 1) = vmlal_high_u16(v141, v118, v145);
      v124 += 16;
      ++v123;
      v122 -= 16;
    }
    while (v122);
    v121 = v624;
    if ((a4 & 0xF) == 0)
      goto LABEL_33;
    if ((a4 & 0xF) < 8uLL)
    {
      v112 = &v27[v106];
      v111 = &v28[v106];
      v110 = &v29[v106];
      v109 = &v30[v106];
      v108 = &v624[v106];
      v107 = (int8x16_t *)((char *)a1 + v106);
LABEL_31:
      v166 = v629 - v106;
      v167 = &v22[v106];
      do
      {
        v169 = v107->u8[0];
        v107 = (int8x16_t *)((char *)v107 + 1);
        v168 = v169;
        v170 = *v108++;
        v171 = (v170 + v168) * v101;
        v172 = *v109++;
        v173 = v171 + (v172 + v168) * v102;
        v174 = *v110++;
        v175 = v173 + (v174 + v168) * v103;
        v176 = *v111++;
        v177 = v175 + (v176 + v168) * v104;
        v178 = *v112++;
        *v167++ = v177 + v178 * v105;
        --v166;
      }
      while (v166);
      goto LABEL_33;
    }
    v120 = v106;
  }
  else
  {
    v120 = 0;
    v121 = v624;
    LOBYTE(v20) = a4;
  }
  v146 = v20 & 7;
  v106 = v629 - v146;
  v107 = (int8x16_t *)((char *)a1 + v106);
  v108 = &v121[v106];
  v109 = &v30[v106];
  v110 = &v29[v106];
  v111 = &v28[v106];
  v112 = &v27[v106];
  v147 = v106;
  v148 = v30;
  v149 = v29;
  v150 = v28;
  v151 = v27;
  v152 = &v22[v120];
  do
  {
    v98.i64[0] = *(uint64_t *)((char *)v119->i64 + v120);
    v153 = (int32x4_t)vqtbl1q_s8(v98, (int8x16_t)xmmword_2102DB010);
    v154 = (int32x4_t)vqtbl1q_s8(v98, (int8x16_t)xmmword_2102DB020);
    v99.i64[0] = *(_QWORD *)&v121[v120];
    v155 = (int32x4_t)vqtbl1q_s8(v99, (int8x16_t)xmmword_2102DB010);
    v100.i64[0] = *(_QWORD *)&v148[v120];
    v156 = (int32x4_t)vqtbl1q_s8((int8x16_t)v100, (int8x16_t)xmmword_2102DB010);
    v157 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v100, (int8x16_t)xmmword_2102DB020), v154);
    v158 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v99, (int8x16_t)xmmword_2102DB020), v154), v114), v157, v115);
    v159 = vmlaq_s32(vmulq_s32(vaddq_s32(v155, v153), v114), vaddq_s32(v156, v153), v115);
    v157.i64[0] = *(_QWORD *)&v149[v120];
    v160 = (int32x4_t)vqtbl1q_s8((int8x16_t)v157, (int8x16_t)xmmword_2102DB020);
    v161 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v157, (int8x16_t)xmmword_2102DB010), v153);
    v162 = vmlaq_s32(v159, v161, v116);
    v163 = vmlaq_s32(v158, vaddq_s32(v160, v154), v116);
    v161.i64[0] = *(_QWORD *)&v150[v120];
    v164 = (int32x4_t)vqtbl1q_s8((int8x16_t)v161, (int8x16_t)xmmword_2102DB010);
    v100 = (int32x4_t)vqtbl1q_s8((int8x16_t)v161, (int8x16_t)xmmword_2102DB020);
    v165 = (uint32x4_t)vmlaq_s32(v163, vaddq_s32(v100, v154), v117);
    v98 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v151[v120]);
    v99 = (int8x16_t)vmlal_high_u16(v165, v118, (uint16x8_t)v98);
    *(uint32x4_t *)v152 = vmlal_u16((uint32x4_t)vmlaq_s32(v162, vaddq_s32(v164, v153), v117), *(uint16x4_t *)v118.i8, *(uint16x4_t *)v98.i8);
    *((int8x16_t *)v152 + 1) = v99;
    v152 += 8;
    v151 += 8;
    v150 += 8;
    v149 += 8;
    v148 += 8;
    v121 += 8;
    v119 = (int8x16_t *)((char *)v119 + 8);
    v147 -= 8;
  }
  while (v120 != v147);
  v18 = a8;
  v20 = a4;
  v113 = v601;
  if (v146)
    goto LABEL_31;
LABEL_33:
  v179 = &v97[v113];
  v610 = &a3[a6];
  sub_20FD9B3B4(v610, v22, v20, v18);
  v183 = *v18;
  v184 = v18[1];
  v185 = v18[2];
  v186 = v18[3];
  v187 = v18[4];
  if (v629 < 8)
  {
    v188 = 0;
    v189 = a1;
    v190 = &v624[v601];
    v191 = v624;
    v192 = v30;
    v193 = v29;
    v194 = v28;
    v195 = v27;
    goto LABEL_46;
  }
  v196 = vdupq_n_s32(v183);
  v197 = vdupq_n_s32(v184);
  v198 = vdupq_n_s32(v185);
  v199 = (int16x8_t)vdupq_n_s32(v186);
  v200 = (uint16x8_t)vdupq_n_s16(v187);
  v201 = a1;
  v202 = v624;
  if (v629 >= 0x10)
  {
    v188 = v629 - (v20 & 0xF);
    v180.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    v181 = (int8x16_t)vuzp1q_s16(v199, v199);
    v204 = v188;
    v205 = a1;
    v206 = v22;
    do
    {
      v207 = (int32x4_t)vqtbl1q_s8(*v205, (int8x16_t)xmmword_2102DB010);
      v208 = (int32x4_t)vqtbl1q_s8(*v205, (int8x16_t)xmmword_2102DB020);
      v209 = (int32x4_t)vqtbl1q_s8(*v205, (int8x16_t)xmmword_2102DB030);
      v210 = *(int8x16_t *)((char *)v205 + 6 * v113);
      v211 = (int32x4_t)vqtbl1q_s8(*v205, (int8x16_t)xmmword_2102DB040);
      v212 = (int32x4_t)vqtbl1q_s8(v210, (int8x16_t)xmmword_2102DB010);
      v213 = *(int8x16_t *)((char *)v205 + 5 * v113);
      v214 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v210, (int8x16_t)xmmword_2102DB040), v211), v196), vaddq_s32((int32x4_t)vqtbl1q_s8(v213, (int8x16_t)xmmword_2102DB040), v211), v197);
      v215 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v210, (int8x16_t)xmmword_2102DB030), v209), v196), vaddq_s32((int32x4_t)vqtbl1q_s8(v213, (int8x16_t)xmmword_2102DB030), v209), v197);
      v216 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v210, (int8x16_t)xmmword_2102DB020), v208), v196), vaddq_s32((int32x4_t)vqtbl1q_s8(v213, (int8x16_t)xmmword_2102DB020), v208), v197);
      v217 = vmlaq_s32(vmulq_s32(vaddq_s32(v212, v207), v196), vaddq_s32((int32x4_t)vqtbl1q_s8(v213, (int8x16_t)xmmword_2102DB010), v207), v197);
      v218 = *(int8x16_t *)((char *)v205 + 4 * v113);
      v219 = (uint32x4_t)vmlaq_s32(v217, vaddq_s32((int32x4_t)vqtbl1q_s8(v218, (int8x16_t)xmmword_2102DB010), v207), v198);
      v220 = (uint32x4_t)vmlaq_s32(v216, vaddq_s32((int32x4_t)vqtbl1q_s8(v218, (int8x16_t)xmmword_2102DB020), v208), v198);
      v221 = (uint32x4_t)vmlaq_s32(v215, vaddq_s32((int32x4_t)vqtbl1q_s8(v218, (int8x16_t)xmmword_2102DB030), v209), v198);
      v222 = *(uint8x16_t *)((char *)v205 + v113);
      v223 = *(uint8x16_t *)((char *)v205 + 3 * v113);
      v224 = vaddl_u8(*(uint8x8_t *)v223.i8, *(uint8x8_t *)v222.i8);
      v225 = vaddl_high_u8(v223, v222);
      v226 = vmlal_high_u16((uint32x4_t)vmlaq_s32(v214, vaddq_s32((int32x4_t)vqtbl1q_s8(v218, (int8x16_t)xmmword_2102DB040), v211), v198), v225, (uint16x8_t)v181);
      v227 = vmlal_u16(v221, *(uint16x4_t *)v225.i8, *(uint16x4_t *)v181.i8);
      v228 = *(uint8x16_t *)((char *)v205 + 2 * v113);
      v229 = vmovl_high_u8(v228);
      v230 = vmovl_u8(*(uint8x8_t *)v228.i8);
      *((uint32x4_t *)v206 + 2) = vmlal_u16(v227, *(uint16x4_t *)v200.i8, *(uint16x4_t *)v229.i8);
      *((uint32x4_t *)v206 + 3) = vmlal_high_u16(v226, v200, v229);
      v182 = (int32x4_t)vmlal_high_u16(vmlal_high_u16(v220, v224, (uint16x8_t)v181), v200, v230);
      *(uint32x4_t *)v206 = vmlal_u16(vmlal_u16(v219, *(uint16x4_t *)v224.i8, *(uint16x4_t *)v181.i8), *(uint16x4_t *)v200.i8, *(uint16x4_t *)v230.i8);
      *((int32x4_t *)v206 + 1) = v182;
      v206 += 16;
      ++v205;
      v204 -= 16;
    }
    while (v204);
    if ((v20 & 0xF) == 0)
      goto LABEL_48;
    if ((v20 & 0xFu) < 8uLL)
    {
      v195 = &v27[v188];
      v194 = &v28[v188];
      v193 = &v29[v188];
      v192 = &v30[v188];
      v191 = &v624[v188];
      v190 = &v97[v188];
      v189 = (int8x16_t *)((char *)a1 + v188);
LABEL_46:
      v252 = v629 - v188;
      v253 = &v22[v188];
      do
      {
        v255 = v189->u8[0];
        v189 = (int8x16_t *)((char *)v189 + 1);
        v254 = v255;
        v256 = *v190++;
        v257 = (v256 + v254) * v183;
        v258 = *v191++;
        v259 = v257 + (v258 + v254) * v184;
        v260 = *v192++;
        v261 = v259 + (v260 + v254) * v185;
        v263 = *v195++;
        v262 = v263;
        v264 = *v193++;
        v265 = v261 + (v264 + v262) * v186;
        v266 = *v194++;
        *v253++ = v265 + v266 * v187;
        --v252;
      }
      while (v252);
      goto LABEL_48;
    }
    v203 = v629 - (v20 & 0xF);
    v201 = a1;
    v202 = v624;
  }
  else
  {
    v203 = 0;
  }
  v608 = v20 & 7;
  v188 = v629 - v608;
  v189 = (int8x16_t *)((char *)v201 + v188);
  v190 = &v97[v188];
  v191 = &v202[v188];
  v192 = &v30[v188];
  v193 = &v29[v188];
  v194 = &v28[v188];
  v195 = &v27[v188];
  v231 = (uint16x8_t)vuzp1q_s16(v199, v199);
  v232 = v188;
  v233 = &v624[v601];
  v234 = v202;
  v235 = v30;
  v236 = v29;
  v237 = v28;
  v238 = v27;
  v239 = &a2[v203];
  do
  {
    v180.i64[0] = *(uint64_t *)((char *)v201->i64 + v203);
    v240 = (int32x4_t)vqtbl1q_s8(v180, (int8x16_t)xmmword_2102DB010);
    v241 = (int32x4_t)vqtbl1q_s8(v180, (int8x16_t)xmmword_2102DB020);
    v181.i64[0] = *(_QWORD *)&v233[v203];
    v242 = (int32x4_t)vqtbl1q_s8(v181, (int8x16_t)xmmword_2102DB010);
    v182.i64[0] = *(_QWORD *)&v234[v203];
    v243 = (int32x4_t)vqtbl1q_s8((int8x16_t)v182, (int8x16_t)xmmword_2102DB010);
    v244 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v182, (int8x16_t)xmmword_2102DB020), v241);
    v245 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v181, (int8x16_t)xmmword_2102DB020), v241), v196), v244, v197);
    v246 = vmlaq_s32(vmulq_s32(vaddq_s32(v242, v240), v196), vaddq_s32(v243, v240), v197);
    v244.i64[0] = *(_QWORD *)&v235[v203];
    v247 = (int32x4_t)vqtbl1q_s8((int8x16_t)v244, (int8x16_t)xmmword_2102DB020);
    v182 = (int32x4_t)vqtbl1q_s8((int8x16_t)v244, (int8x16_t)xmmword_2102DB010);
    v248 = (uint32x4_t)vmlaq_s32(v245, vaddq_s32(v247, v241), v198);
    v249 = vaddl_u8(*(uint8x8_t *)&v236[v203], *(uint8x8_t *)&v238[v203]);
    v250 = vmlal_high_u16(v248, v249, v231);
    v251 = vmlal_u16((uint32x4_t)vmlaq_s32(v246, vaddq_s32(v182, v240), v198), *(uint16x4_t *)v249.i8, *(uint16x4_t *)v231.i8);
    v180 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v237[v203]);
    v181 = (int8x16_t)vmlal_high_u16(v250, v200, (uint16x8_t)v180);
    *(uint32x4_t *)v239 = vmlal_u16(v251, *(uint16x4_t *)v200.i8, *(uint16x4_t *)v180.i8);
    *((int8x16_t *)v239 + 1) = v181;
    v239 += 8;
    v238 += 8;
    v237 += 8;
    v236 += 8;
    v235 += 8;
    v234 += 8;
    v233 += 8;
    v201 = (int8x16_t *)((char *)v201 + 8);
    v232 -= 8;
  }
  while (v203 != v232);
  v18 = a8;
  v20 = a4;
  v22 = a2;
  if (v608)
    goto LABEL_46;
LABEL_48:
  v267 = &v610[a6];
  sub_20FD9B3B4(v267, v22, v20, v18);
  v271 = *v18;
  v272 = v18[1];
  v273 = v18[2];
  v274 = v18[3];
  v275 = v18[4];
  if (v629 < 8)
  {
    v276 = 0;
    v277 = a1;
    v278 = v27;
    v279 = v179;
    v280 = &v624[v601];
    v281 = v624;
    v282 = v30;
    v283 = v29;
    v284 = v28;
    goto LABEL_61;
  }
  v285 = vdupq_n_s32(v271);
  v286 = vdupq_n_s32(v272);
  v287 = (int16x8_t)vdupq_n_s32(v273);
  v288 = (int16x8_t)vdupq_n_s32(v274);
  v289 = (uint16x8_t)vdupq_n_s16(v275);
  v290 = a1;
  v291 = v624;
  if (v629 < 0x10)
  {
    v611 = &v610[a6];
    v292 = 0;
LABEL_58:
    v276 = v629 - (v20 & 7);
    v277 = (int8x16_t *)((char *)a1 + v276);
    v278 = &v27[v276];
    v279 = &v179[v276];
    v280 = &v97[v276];
    v281 = &v624[v276];
    v282 = &v30[v276];
    v283 = &v29[v276];
    v284 = &v28[v276];
    v324 = (uint16x8_t)vuzp1q_s16(v287, v287);
    v325 = (uint16x8_t)vuzp1q_s16(v288, v288);
    v326 = v276;
    v327 = &v22[v292];
    do
    {
      v268.i64[0] = *(uint64_t *)((char *)v290->i64 + v292);
      v328 = (int32x4_t)vqtbl1q_s8(v268, (int8x16_t)xmmword_2102DB010);
      v329 = (int32x4_t)vqtbl1q_s8(v268, (int8x16_t)xmmword_2102DB020);
      v269.i64[0] = *(_QWORD *)&v179[v292];
      v330 = (int32x4_t)vqtbl1q_s8(v269, (int8x16_t)xmmword_2102DB010);
      v270.i64[0] = *(_QWORD *)&v97[v292];
      v331 = (int32x4_t)vqtbl1q_s8((int8x16_t)v270, (int8x16_t)xmmword_2102DB010);
      v270 = (int32x4_t)vqtbl1q_s8((int8x16_t)v270, (int8x16_t)xmmword_2102DB020);
      v332 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v269, (int8x16_t)xmmword_2102DB020), v329), v285), vaddq_s32(v270, v329), v286);
      v333 = vaddl_u8(*(uint8x8_t *)&v291[v292], *(uint8x8_t *)&v27[v292]);
      v334 = vmlal_u16((uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32(v330, v328), v285), vaddq_s32(v331, v328), v286), *(uint16x4_t *)v333.i8, *(uint16x4_t *)v324.i8);
      v335 = vmlal_high_u16(v332, v333, v324);
      v336 = vaddl_u8(*(uint8x8_t *)&v30[v292], *(uint8x8_t *)&v28[v292]);
      v337 = vmlal_high_u16(v335, v336, v325);
      v338 = vmlal_u16(v334, *(uint16x4_t *)v336.i8, *(uint16x4_t *)v325.i8);
      v268 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v29[v292]);
      v269 = (int8x16_t)vmlal_high_u16(v337, v289, (uint16x8_t)v268);
      *(uint32x4_t *)v327 = vmlal_u16(v338, *(uint16x4_t *)v289.i8, *(uint16x4_t *)v268.i8);
      *((int8x16_t *)v327 + 1) = v269;
      v327 += 8;
      v28 += 8;
      v29 += 8;
      v30 += 8;
      v291 += 8;
      v97 += 8;
      v179 += 8;
      v27 += 8;
      v290 = (int8x16_t *)((char *)v290 + 8);
      v326 -= 8;
    }
    while (v292 != v326);
    v267 = v611;
    if ((v20 & 7) == 0)
      goto LABEL_63;
    goto LABEL_61;
  }
  v293 = 0;
  v276 = v629 - (v20 & 0xF);
  v268.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
  v269 = (int8x16_t)vuzp1q_s16(v287, v287);
  v294 = (uint16x8_t)vuzp1q_s16(v288, v288);
  v295 = v22;
  do
  {
    v296 = a1[v293 / 0x10];
    v297 = (int32x4_t)vqtbl1q_s8(v296, (int8x16_t)xmmword_2102DB010);
    v298 = (int32x4_t)vqtbl1q_s8(v296, (int8x16_t)xmmword_2102DB020);
    v299 = (int32x4_t)vqtbl1q_s8(v296, (int8x16_t)xmmword_2102DB030);
    v300 = (int32x4_t)vqtbl1q_s8(v296, (int8x16_t)xmmword_2102DB040);
    v301 = *(int8x16_t *)&v179[v293];
    v302 = vaddq_s32((int32x4_t)vqtbl1q_s8(v301, (int8x16_t)xmmword_2102DB040), v300);
    v303 = *(int8x16_t *)&v97[v293];
    v304 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v301, (int8x16_t)xmmword_2102DB030), v299), v285), vaddq_s32((int32x4_t)vqtbl1q_s8(v303, (int8x16_t)xmmword_2102DB030), v299), v286);
    v305 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v301, (int8x16_t)xmmword_2102DB020), v298), v285), vaddq_s32((int32x4_t)vqtbl1q_s8(v303, (int8x16_t)xmmword_2102DB020), v298), v286);
    v306 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v301, (int8x16_t)xmmword_2102DB010), v297), v285), vaddq_s32((int32x4_t)vqtbl1q_s8(v303, (int8x16_t)xmmword_2102DB010), v297), v286);
    v307 = *(uint8x16_t *)&v27[v293];
    v308 = *(uint8x16_t *)&v624[v293];
    v309 = vaddl_high_u8(v308, v307);
    v310 = vaddl_u8(*(uint8x8_t *)v308.i8, *(uint8x8_t *)v307.i8);
    v311 = vmlal_u16(v306, *(uint16x4_t *)v310.i8, *(uint16x4_t *)v269.i8);
    v312 = vmlal_high_u16(v305, v310, (uint16x8_t)v269);
    v313 = vmlal_u16(v304, *(uint16x4_t *)v309.i8, *(uint16x4_t *)v269.i8);
    v314 = *(uint8x16_t *)&v28[v293];
    v315 = vmlal_high_u16((uint32x4_t)vmlaq_s32(vmulq_s32(v302, v285), vaddq_s32((int32x4_t)vqtbl1q_s8(v303, (int8x16_t)xmmword_2102DB040), v300), v286), v309, (uint16x8_t)v269);
    v316 = *(uint8x16_t *)&v30[v293];
    v317 = vaddl_u8(*(uint8x8_t *)v316.i8, *(uint8x8_t *)v314.i8);
    v318 = vaddl_high_u8(v316, v314);
    v319 = vmlal_high_u16(v315, v318, v294);
    v320 = vmlal_u16(v313, *(uint16x4_t *)v318.i8, *(uint16x4_t *)v294.i8);
    v321 = *(uint8x16_t *)&v29[v293];
    v322 = vmovl_high_u8(v321);
    v323 = vmovl_u8(*(uint8x8_t *)v321.i8);
    v270 = (int32x4_t)vmlal_u16(vmlal_u16(v311, *(uint16x4_t *)v317.i8, *(uint16x4_t *)v294.i8), *(uint16x4_t *)v289.i8, *(uint16x4_t *)v323.i8);
    *((uint32x4_t *)v295 + 2) = vmlal_u16(v320, *(uint16x4_t *)v289.i8, *(uint16x4_t *)v322.i8);
    *((uint32x4_t *)v295 + 3) = vmlal_high_u16(v319, v289, v322);
    *(int32x4_t *)v295 = v270;
    *((uint32x4_t *)v295 + 1) = vmlal_high_u16(vmlal_high_u16(v312, v317, v294), v289, v323);
    v295 += 16;
    v293 += 16;
  }
  while (v276 != v293);
  if ((v20 & 0xF) == 0)
    goto LABEL_63;
  if ((v20 & 0xFu) >= 8uLL)
  {
    v611 = &v610[a6];
    v292 = v629 - (v20 & 0xF);
    goto LABEL_58;
  }
  v284 = &v28[v276];
  v283 = &v29[v276];
  v282 = &v30[v276];
  v281 = &v624[v276];
  v280 = &v97[v276];
  v279 = &v179[v276];
  v278 = &v27[v276];
  v277 = (int8x16_t *)((char *)a1 + v276);
LABEL_61:
  v339 = v629 - v276;
  v340 = &v22[v276];
  do
  {
    v342 = v277->u8[0];
    v277 = (int8x16_t *)((char *)v277 + 1);
    v341 = v342;
    v343 = *v279++;
    v344 = (v343 + v341) * v271;
    v345 = *v280++;
    v346 = v344 + (v345 + v341) * v272;
    v348 = *v278++;
    v347 = v348;
    v349 = *v281++;
    v350 = v346 + (v349 + v347) * v273;
    v352 = *v284++;
    v351 = v352;
    v353 = *v282++;
    v354 = v350 + (v353 + v351) * v274;
    v355 = *v283++;
    *v340++ = v354 + v355 * v275;
    --v339;
  }
  while (v339);
LABEL_63:
  result = sub_20FD9B3B4(&v267[a6], v22, v20, v18);
  v26 = v600;
  v19 = v617;
  v21 = a3;
  v23 = v615;
LABEL_64:
  v604 = &v21[v23];
  v356 = (_WORD *)((char *)&v21[v26] + v26 + v26);
  v357 = v19 - 4;
  if ((unint64_t)(v19 - 4) < 5)
  {
    v367 = v18;
    v359 = a1;
  }
  else
  {
    if (v20)
    {
      v358 = a5;
      v359 = a1;
      v603 = v20 & 0xF;
      v605 = v629 - v603;
      v602 = v20 & 7;
      v360 = &a1->i8[3 * a5];
      v361 = &a1->i8[4 * a5];
      v362 = &a1->i8[5 * a5];
      v363 = &a1->i8[6 * a5];
      v364 = &a1->i8[7 * a5];
      v365 = &a1->i8[8 * a5];
      v366 = &a1->i8[2 * a5];
      v367 = v18;
      v368 = &a1->i8[a5];
      v369 = 4;
      v620 = v357;
      while (1)
      {
        v370 = &v359->u8[v358];
        v371 = (unsigned __int8 *)v359 + 8 * a5;
        v372 = (unsigned __int8 *)v359 + 7 * a5;
        v373 = (unsigned __int8 *)v359 + 6 * a5;
        v374 = (unsigned __int8 *)v359 + 5 * a5;
        v375 = (unsigned __int8 *)v359 + 4 * a5;
        v376 = (unsigned __int8 *)v359 + 3 * a5;
        v377 = *v367;
        v378 = v367[1];
        v379 = v367[2];
        v380 = v367[3];
        v381 = (unsigned __int8 *)v359 + 2 * a5;
        v382 = v367[4];
        v631 = (int8x16_t *)v370;
        v625 = v369;
        if (v629 >= 8)
        {
          v385 = (int16x8_t)vdupq_n_s32(v377);
          v386 = (int16x8_t)vdupq_n_s32(v378);
          v387 = (int16x8_t)vdupq_n_s32(v379);
          v388 = (int16x8_t)vdupq_n_s32(v380);
          v389 = (uint16x8_t)vdupq_n_s16(v382);
          v390 = v629 - v602;
          if (v629 < 0x10)
          {
            v391 = 0;
LABEL_77:
            v384 = &v359->u8[v390];
            v370 += v390;
            v381 += v390;
            v371 += v390;
            v372 += v390;
            v373 += v390;
            v374 += v390;
            v375 += v390;
            v376 += v390;
            v431 = (uint32x4_t *)&a2[v391];
            do
            {
              v432 = vaddl_u8(*(uint8x8_t *)&v365[v391], *(uint8x8_t *)&v359->i8[v391]);
              v433 = (uint16x8_t)vuzp1q_s16(v385, v385);
              v434 = vaddl_u8(*(uint8x8_t *)&v364[v391], *(uint8x8_t *)&v368[v391]);
              v435 = (uint16x8_t)vuzp1q_s16(v386, v386);
              v436 = vmull_u16(*(uint16x4_t *)v434.i8, *(uint16x4_t *)v435.i8);
              v437 = vmlal_high_u16(vmull_high_u16(v434, v435), v432, v433);
              v438 = vmlal_u16(v436, *(uint16x4_t *)v432.i8, *(uint16x4_t *)v433.i8);
              v439 = vaddl_u8(*(uint8x8_t *)&v363[v391], *(uint8x8_t *)&v366[v391]);
              v440 = (uint16x8_t)vuzp1q_s16(v387, v387);
              v441 = vmlal_u16(v438, *(uint16x4_t *)v439.i8, *(uint16x4_t *)v440.i8);
              v442 = vmlal_high_u16(v437, v439, v440);
              v443 = vaddl_u8(*(uint8x8_t *)&v362[v391], *(uint8x8_t *)&v360[v391]);
              v444 = (uint16x8_t)vuzp1q_s16(v388, v388);
              v445 = vmlal_high_u16(v442, v443, v444);
              v446 = vmlal_u16(v441, *(uint16x4_t *)v443.i8, *(uint16x4_t *)v444.i8);
              v447 = vmovl_u8(*(uint8x8_t *)&v361[v391]);
              *v431 = vmlal_u16(v446, *(uint16x4_t *)v389.i8, *(uint16x4_t *)v447.i8);
              v431[1] = vmlal_high_u16(v445, v389, v447);
              v431 += 2;
              v391 += 8;
            }
            while (v390 != v391);
            v383 = v390;
            if (!v602)
              goto LABEL_67;
            goto LABEL_80;
          }
          v392 = 0;
          v393 = (uint32x4_t *)a2;
          do
          {
            v394 = (uint8x16_t)v359[v392 / 0x10];
            v395 = *(uint8x16_t *)&v365[v392];
            v396 = vaddl_high_u8(v395, v394);
            v397 = vaddl_u8(*(uint8x8_t *)v395.i8, *(uint8x8_t *)v394.i8);
            v398 = (uint16x8_t)vuzp1q_s16(v385, v385);
            v399 = *(uint8x16_t *)&v368[v392];
            v400 = *(uint8x16_t *)&v364[v392];
            v401 = vaddl_u8(*(uint8x8_t *)v400.i8, *(uint8x8_t *)v399.i8);
            v402 = vaddl_high_u8(v400, v399);
            v403 = (uint16x8_t)vuzp1q_s16(v386, v386);
            v404 = vmull_u16(*(uint16x4_t *)v402.i8, *(uint16x4_t *)v403.i8);
            v405 = vmull_u16(*(uint16x4_t *)v401.i8, *(uint16x4_t *)v403.i8);
            v406 = vmlal_high_u16(vmull_high_u16(v401, v403), v397, v398);
            v407 = vmlal_high_u16(vmull_high_u16(v402, v403), v396, v398);
            v408 = vmlal_u16(v405, *(uint16x4_t *)v397.i8, *(uint16x4_t *)v398.i8);
            v409 = *(uint8x16_t *)&v366[v392];
            v410 = vmlal_u16(v404, *(uint16x4_t *)v396.i8, *(uint16x4_t *)v398.i8);
            v411 = *(uint8x16_t *)&v363[v392];
            v412 = vaddl_u8(*(uint8x8_t *)v411.i8, *(uint8x8_t *)v409.i8);
            v413 = vaddl_high_u8(v411, v409);
            v414 = (uint16x8_t)vuzp1q_s16(v387, v387);
            v415 = vmlal_u16(v410, *(uint16x4_t *)v413.i8, *(uint16x4_t *)v414.i8);
            v416 = vmlal_u16(v408, *(uint16x4_t *)v412.i8, *(uint16x4_t *)v414.i8);
            v417 = vmlal_high_u16(v407, v413, v414);
            v418 = vmlal_high_u16(v406, v412, v414);
            v419 = *(uint8x16_t *)&v360[v392];
            v420 = *(uint8x16_t *)&v362[v392];
            v421 = vaddl_high_u8(v420, v419);
            v422 = vaddl_u8(*(uint8x8_t *)v420.i8, *(uint8x8_t *)v419.i8);
            v423 = (uint16x8_t)vuzp1q_s16(v388, v388);
            v424 = vmlal_high_u16(v418, v422, v423);
            v425 = vmlal_high_u16(v417, v421, v423);
            v426 = vmlal_u16(v416, *(uint16x4_t *)v422.i8, *(uint16x4_t *)v423.i8);
            v427 = vmlal_u16(v415, *(uint16x4_t *)v421.i8, *(uint16x4_t *)v423.i8);
            v428 = *(uint8x16_t *)&v361[v392];
            v429 = vmovl_u8(*(uint8x8_t *)v428.i8);
            v430 = vmovl_high_u8(v428);
            *v393 = vmlal_u16(v426, *(uint16x4_t *)v389.i8, *(uint16x4_t *)v429.i8);
            v393[1] = vmlal_high_u16(v424, v389, v429);
            v393[2] = vmlal_u16(v427, *(uint16x4_t *)v389.i8, *(uint16x4_t *)v430.i8);
            v393[3] = vmlal_high_u16(v425, v389, v430);
            v392 += 16;
            v393 += 4;
          }
          while (v605 != v392);
          if (!v603)
            goto LABEL_67;
          v390 = v629 - v602;
          v391 = v629 - v603;
          v370 = (unsigned __int8 *)v631;
          if (v603 >= 8)
            goto LABEL_77;
          v376 += v605;
          v375 += v605;
          v374 += v605;
          v373 += v605;
          v372 += v605;
          v371 += v605;
          v381 += v605;
          v370 = &v631->u8[v605];
          v384 = &v359->u8[v605];
          v383 = v629 - v603;
        }
        else
        {
          v383 = 0;
          v384 = (unsigned __int8 *)v359;
        }
LABEL_80:
        v448 = v629 - v383;
        v449 = &a2[v383];
        do
        {
          v451 = *v384++;
          v450 = v451;
          v452 = *v371++;
          v453 = (v452 + v450) * v377;
          v455 = *v370++;
          v454 = v455;
          v456 = *v372++;
          v457 = v453 + (v456 + v454) * v378;
          v459 = *v381++;
          v458 = v459;
          v460 = *v373++;
          v461 = v457 + (v460 + v458) * v379;
          v463 = *v376++;
          v462 = v463;
          v464 = *v374++;
          v465 = v461 + (v464 + v462) * v380;
          v466 = *v375++;
          *v449++ = v465 + v466 * v382;
          --v448;
        }
        while (v448);
LABEL_67:
        v367 = a8;
        result = sub_20FD9B3B4(v356, a2, a4, a8);
        v356 += a6;
        v369 = v625 + 1;
        v358 = a5;
        v360 += a5;
        v361 += a5;
        v362 += a5;
        v363 += a5;
        v364 += a5;
        v365 += a5;
        v366 += a5;
        v368 += a5;
        v359 = v631;
        if (v625 + 1 == v620)
          goto LABEL_87;
      }
    }
    v467 = v19 - 8;
    v468 = v467;
    do
    {
      result = sub_20FD9B3B4(v356, v22, 0, v18);
      v356 = (_WORD *)((char *)v356 + v26);
      --v468;
    }
    while (v468);
    v359 = (int8x16_t *)((char *)a1 + v467 * a5);
    v367 = v18;
  }
LABEL_87:
  v469 = (uint8x16_t *)&v359->i8[v601];
  v633[0] = v359;
  v633[1] = (char *)v359 + v601;
  v470 = &v359->u8[v601 + v601];
  v471 = (uint8x16_t *)&v470[v601];
  v626 = (uint8x16_t *)v470;
  v633[2] = v470;
  v633[3] = &v470[v601];
  v472 = (uint8x16_t *)&v470[v601 + v601];
  v473 = (uint8x16_t *)((char *)v472 + v601);
  v633[4] = v472;
  v633[5] = (char *)v472 + v601;
  v474 = (uint8x16_t *)((char *)v472 + v601 + v601);
  v475 = (uint8x16_t *)((char *)v474 + v601);
  v633[6] = v474;
  v633[7] = (char *)v474 + v601;
  v633[8] = (char *)v474 + v601;
  v633[9] = (char *)v474 + v601;
  v633[10] = (char *)v474 + v601;
  v633[11] = (char *)v474 + v601;
  v476 = (unint64_t)v604;
  v477 = v629;
  v478 = a4;
  if (v356 < v604)
  {
    if (a4)
    {
      v479 = 0;
      v606 = v629 - (a4 & 0xF);
      v612 = v629 - (a4 & 7);
      while (1)
      {
        v480 = v359;
        v481 = v469;
        v469 = v626;
        v482 = v471;
        v483 = v475;
        v475 = (uint8x16_t *)v633[v479 + 8];
        v484 = *v367;
        v485 = v367[1];
        v486 = v367[2];
        v487 = v367[3];
        v488 = v367[4];
        v632 = (int8x16_t *)v481;
        v623 = v472;
        v626 = v482;
        v618 = v474;
        v621 = v473;
        v616 = v483;
        if (v477 >= 8)
        {
          v499 = (int16x8_t)vdupq_n_s32(v484);
          v500 = (int16x8_t)vdupq_n_s32(v485);
          v501 = (int16x8_t)vdupq_n_s32(v486);
          v502 = (int16x8_t)vdupq_n_s32(v487);
          v503 = (uint16x8_t)vdupq_n_s16(v488);
          if (v477 < 0x10)
          {
            v504 = 0;
LABEL_100:
            v607 = v469;
            v609 = v356;
            v490 = (int8x16_t *)((char *)v480 + v612);
            v491 = &v481->u8[v612];
            v492 = &v469->u8[v612];
            v493 = &v475->u8[v612];
            v494 = (uint8x16_t *)((char *)v483 + v612);
            v556 = v483;
            v495 = &v474->u8[v612];
            v496 = &v473->u8[v612];
            v557 = v474;
            v497 = &v472->u8[v612];
            v498 = &v482->u8[v612];
            v558 = v472;
            v559 = v629 - (a4 & 7);
            v560 = v473;
            v561 = v469;
            v562 = v475;
            v563 = v482;
            v564 = (uint32x4_t *)&a2[v504];
            do
            {
              v565 = vaddl_u8(*(uint8x8_t *)&v562->i8[v504], *(uint8x8_t *)&v480->i8[v504]);
              v566 = (uint16x8_t)vuzp1q_s16(v499, v499);
              v567 = vaddl_u8(*(uint8x8_t *)&v556->i8[v504], *(uint8x8_t *)&v481->i8[v504]);
              v568 = (uint16x8_t)vuzp1q_s16(v500, v500);
              v569 = vmull_u16(*(uint16x4_t *)v567.i8, *(uint16x4_t *)v568.i8);
              v570 = vmlal_high_u16(vmull_high_u16(v567, v568), v565, v566);
              v571 = vmlal_u16(v569, *(uint16x4_t *)v565.i8, *(uint16x4_t *)v566.i8);
              v572 = vaddl_u8(*(uint8x8_t *)&v557->i8[v504], *(uint8x8_t *)&v561->i8[v504]);
              v573 = (uint16x8_t)vuzp1q_s16(v501, v501);
              v574 = vmlal_u16(v571, *(uint16x4_t *)v572.i8, *(uint16x4_t *)v573.i8);
              v575 = vmlal_high_u16(v570, v572, v573);
              v576 = vaddl_u8(*(uint8x8_t *)&v560->i8[v504], *(uint8x8_t *)&v563->i8[v504]);
              v577 = (uint16x8_t)vuzp1q_s16(v502, v502);
              v578 = vmlal_high_u16(v575, v576, v577);
              v579 = vmlal_u16(v574, *(uint16x4_t *)v576.i8, *(uint16x4_t *)v577.i8);
              v580 = vmovl_u8(*(uint8x8_t *)&v558->i8[v504]);
              *v564 = vmlal_u16(v579, *(uint16x4_t *)v503.i8, *(uint16x4_t *)v580.i8);
              v564[1] = vmlal_high_u16(v578, v503, v580);
              v564 += 2;
              v563 = (uint8x16_t *)((char *)v563 + 8);
              v558 = (uint8x16_t *)((char *)v558 + 8);
              v560 = (uint8x16_t *)((char *)v560 + 8);
              v557 = (uint8x16_t *)((char *)v557 + 8);
              v556 = (uint8x16_t *)((char *)v556 + 8);
              v562 = (uint8x16_t *)((char *)v562 + 8);
              v561 = (uint8x16_t *)((char *)v561 + 8);
              v481 = (uint8x16_t *)((char *)v481 + 8);
              v480 = (int8x16_t *)((char *)v480 + 8);
              v559 -= 8;
            }
            while (v504 != v559);
            v489 = v629 - (a4 & 7);
            v367 = a8;
            v478 = a4;
            v477 = v629;
            v476 = (unint64_t)v604;
            v469 = v607;
            v356 = v609;
            if ((a4 & 7) == 0)
              goto LABEL_90;
            goto LABEL_103;
          }
          v505 = v629 - (a4 & 0xF);
          v506 = (uint8x16_t *)v359;
          v507 = v481;
          v508 = v469;
          v509 = (uint8x16_t *)v633[v479 + 8];
          v510 = v474;
          v511 = v473;
          v512 = v472;
          v513 = v482;
          v514 = (uint32x4_t *)a2;
          do
          {
            v515 = *v506++;
            v516 = v515;
            v517 = *v509++;
            v518 = vaddl_high_u8(v517, v516);
            v519 = vaddl_u8(*(uint8x8_t *)v517.i8, *(uint8x8_t *)v516.i8);
            v520 = *v507++;
            v521 = v520;
            v522 = *v483++;
            v523 = (uint16x8_t)vuzp1q_s16(v499, v499);
            v524 = vaddl_u8(*(uint8x8_t *)v522.i8, *(uint8x8_t *)v521.i8);
            v525 = vaddl_high_u8(v522, v521);
            v526 = (uint16x8_t)vuzp1q_s16(v500, v500);
            v527 = vmull_u16(*(uint16x4_t *)v525.i8, *(uint16x4_t *)v526.i8);
            v528 = vmull_u16(*(uint16x4_t *)v524.i8, *(uint16x4_t *)v526.i8);
            v529 = vmlal_high_u16(vmull_high_u16(v524, v526), v519, v523);
            v530 = vmlal_high_u16(vmull_high_u16(v525, v526), v518, v523);
            v531 = vmlal_u16(v528, *(uint16x4_t *)v519.i8, *(uint16x4_t *)v523.i8);
            v532 = vmlal_u16(v527, *(uint16x4_t *)v518.i8, *(uint16x4_t *)v523.i8);
            v533 = *v508++;
            v534 = v533;
            v535 = *v510++;
            v536 = vaddl_u8(*(uint8x8_t *)v535.i8, *(uint8x8_t *)v534.i8);
            v537 = vaddl_high_u8(v535, v534);
            v538 = (uint16x8_t)vuzp1q_s16(v501, v501);
            v539 = vmlal_u16(v532, *(uint16x4_t *)v537.i8, *(uint16x4_t *)v538.i8);
            v540 = vmlal_u16(v531, *(uint16x4_t *)v536.i8, *(uint16x4_t *)v538.i8);
            v541 = vmlal_high_u16(v530, v537, v538);
            v542 = *v513++;
            v543 = v542;
            v544 = vmlal_high_u16(v529, v536, v538);
            v545 = *v511++;
            v546 = vaddl_high_u8(v545, v543);
            v547 = vaddl_u8(*(uint8x8_t *)v545.i8, *(uint8x8_t *)v543.i8);
            v548 = (uint16x8_t)vuzp1q_s16(v502, v502);
            v549 = vmlal_high_u16(v544, v547, v548);
            v550 = vmlal_high_u16(v541, v546, v548);
            v551 = vmlal_u16(v540, *(uint16x4_t *)v547.i8, *(uint16x4_t *)v548.i8);
            v552 = vmlal_u16(v539, *(uint16x4_t *)v546.i8, *(uint16x4_t *)v548.i8);
            v553 = *v512++;
            v554 = vmovl_u8(*(uint8x8_t *)v553.i8);
            v555 = vmovl_high_u8(v553);
            *v514 = vmlal_u16(v551, *(uint16x4_t *)v503.i8, *(uint16x4_t *)v554.i8);
            v514[1] = vmlal_high_u16(v549, v503, v554);
            v514[2] = vmlal_u16(v552, *(uint16x4_t *)v503.i8, *(uint16x4_t *)v555.i8);
            v514[3] = vmlal_high_u16(v550, v503, v555);
            v514 += 4;
            v505 -= 16;
          }
          while (v505);
          if ((a4 & 0xF) == 0)
            goto LABEL_90;
          v504 = v629 - (a4 & 0xF);
          v472 = v623;
          v474 = v618;
          v483 = v616;
          if ((a4 & 0xF) >= 8uLL)
            goto LABEL_100;
          v489 = v629 - (a4 & 0xF);
          v498 = &v482->u8[v606];
          v497 = &v623->u8[v606];
          v496 = &v473->u8[v606];
          v495 = &v618->u8[v606];
          v494 = (uint8x16_t *)((char *)v616 + v606);
          v493 = &v475->u8[v606];
          v492 = &v469->u8[v606];
          v491 = &v481->u8[v606];
          v490 = (int8x16_t *)((char *)v480 + v606);
        }
        else
        {
          v489 = 0;
          v490 = v359;
          v491 = (unsigned __int8 *)v481;
          v492 = (unsigned __int8 *)v469;
          v493 = (unsigned __int8 *)v633[v479 + 8];
          v494 = v483;
          v495 = (unsigned __int8 *)v474;
          v496 = (unsigned __int8 *)v473;
          v497 = (unsigned __int8 *)v472;
          v498 = (unsigned __int8 *)v482;
        }
LABEL_103:
        v581 = v477 - v489;
        v582 = &a2[v489];
        do
        {
          v584 = v490->u8[0];
          v490 = (int8x16_t *)((char *)v490 + 1);
          v583 = v584;
          v585 = *v493++;
          v586 = (v585 + v583) * v484;
          v588 = *v491++;
          v587 = v588;
          v589 = v494->u8[0];
          v494 = (uint8x16_t *)((char *)v494 + 1);
          v590 = v586 + (v589 + v587) * v485;
          v592 = *v492++;
          v591 = v592;
          v593 = *v495++;
          v594 = v590 + (v593 + v591) * v486;
          v596 = *v498++;
          v595 = v596;
          v597 = *v496++;
          v598 = v594 + (v597 + v595) * v487;
          v599 = *v497++;
          *v582++ = v598 + v599 * v488;
          --v581;
        }
        while (v581);
LABEL_90:
        ++v479;
        result = sub_20FD9B3B4(v356, a2, v478, v367);
        v356 += a6;
        v359 = v632;
        v472 = v621;
        v471 = v623;
        v474 = v616;
        v473 = v618;
        if ((unint64_t)v356 >= v476)
          return result;
      }
    }
    do
    {
      result = sub_20FD9B3B4(v356, a2, 0, v367);
      v356 = (_WORD *)((char *)v356 + v600);
    }
    while (v356 < v604);
  }
  return result;
}

unint64_t sub_20FD99FD0(unint64_t result, unsigned int *a2, unint64_t a3, int a4, unsigned int a5, unsigned int a6, int a7, const __int16 *a8)
{
  int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int16x8_t v26;
  uint32x4_t *v27;
  const char *v28;
  uint16x8_t v29;
  uint16x8_t v30;
  int32x4_t v31;
  const char *v32;
  unsigned __int128 v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  uint32x4_t *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int16x8_t v48;
  uint32x4_t *v49;
  const char *v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int32x4_t v53;
  const char *v54;
  unsigned __int128 v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v64;
  BOOL v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  const __int16 *v70;
  uint16x4_t v71;
  unsigned int *v72;
  int32x4_t v73;
  uint16x4_t v74;
  int32x4_t v75;
  _QWORD *v76;
  int32x4_t *v77;
  uint64_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  uint32x4_t v84;
  uint64_t v85;
  _BYTE *v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int32x4_t v101;
  int8x16_t *v102;
  unint64_t v103;
  unsigned int *v104;
  unsigned __int8 *v105;
  unsigned int v106;
  unsigned int v107;
  uint32x4_t *v108;
  uint16x8_t v109;
  uint64_t v110;
  BOOL v111;
  const char *v112;
  uint32x4_t *v113;
  int16x8_t v114;
  unint64_t v115;
  const char *v116;
  unsigned __int128 v117;
  uint16x8_t v118;
  uint16x8_t v119;
  uint16x8_t v120;
  uint16x8_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int *v126;
  unsigned __int8 *v127;
  uint32x4_t *v128;
  uint64_t v129;
  BOOL v130;
  const char *v131;
  uint32x4_t *v132;
  int16x8_t v133;
  unint64_t v134;
  const char *v135;
  unsigned __int128 v136;
  uint16x8_t v137;
  uint16x8_t v138;
  uint16x8_t v139;
  uint16x8_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int *v145;
  unsigned int *v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unint64_t v152;
  BOOL v154;
  BOOL v156;
  BOOL v158;
  BOOL v159;
  uint64_t v160;
  const __int16 *v161;
  uint16x4_t v162;
  uint16x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t *v166;
  int32x4_t *v167;
  int32x4_t *v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  uint64_t v177;
  const __int16 *v178;
  uint16x4_t v179;
  int32x4_t v180;
  uint16x4_t v181;
  int32x4_t v182;
  int32x4_t *v183;
  int32x4_t *v184;
  int32x4_t *v185;
  unsigned int *v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  uint32x4_t *v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  BOOL v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  int16x8_t v201;
  uint32x4_t *v202;
  const char *v203;
  uint16x8_t v204;
  uint16x8_t v205;
  int32x4_t v206;
  const char *v207;
  unsigned __int128 v208;
  uint16x8_t v209;
  uint16x8_t v210;
  uint16x8_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  int *v216;
  unsigned int *v217;
  uint64_t v218;
  _BYTE *v219;
  int v220;
  int v221;
  int v222;
  unint64_t v223;
  BOOL v225;
  BOOL v227;
  BOOL v228;
  uint64_t v229;
  const __int16 *v230;
  uint16x4_t v231;
  int32x4_t v232;
  uint16x4_t v233;
  int32x4_t v234;
  _QWORD *v235;
  int32x4_t *v236;
  int32x4_t *v237;
  uint64_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  uint32x4_t v246;
  const __int16 *v247;
  uint16x4_t v248;
  int32x4_t v249;
  uint16x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  uint64_t v253;
  int32x4_t *v254;
  int8x16_t *v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  const __int16 *v260;
  uint16x4_t v261;
  int32x4_t v262;
  uint16x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  uint64_t v266;
  int32x4_t *v267;
  int32x4_t *v268;
  int8x16_t *v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  uint64_t v274;
  int v275;
  unsigned int v276;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unsigned __int16 *v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unsigned int v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  _QWORD v294[4];
  int8x16x2_t v295;
  int8x16x2_t v296;
  int8x16x2_t v297;
  int8x16x2_t v298;
  int8x16x2_t v299;
  int8x16x2_t v300;
  int8x16x2_t v301;
  int8x16x2_t v302;
  int8x16x4_t v303;
  int8x16x4_t v304;
  int8x16x4_t v305;

  v10 = a4;
  v11 = result;
  v12 = a4 + 1;
  v13 = (a4 + 1) >> 1;
  v14 = &a2[v13];
  v294[0] = a2;
  v294[1] = v14;
  v15 = &a2[(a4 + 1) & 0xFFFFFFFE];
  v294[2] = v15;
  v16 = *(unsigned __int16 *)a8;
  v17 = *((unsigned __int16 *)a8 + 1);
  *a2 = (v17 * *(unsigned __int8 *)result + 2 * *(unsigned __int8 *)(result + 1) * v16 + 256) >> 9;
  v18 = (uint32x4_t *)(a2 + 1);
  v19 = (a4 - 1);
  if (v19 < 3)
  {
    v37 = 2 * v16;
    if (a4 == 3)
LABEL_19:
      v18->i32[0] = (*(unsigned __int8 *)(result + v19) * v17
                   + v37 * *(unsigned __int8 *)(result + (a4 - 2))
                   + 256) >> 9;
  }
  else
  {
    v20 = v19 - 3;
    if (v19 - 3 >= 0x20
      && ((unint64_t)v18 < (v20 & 0xFFFFFFFFFFFFFFFELL) + result + 4
        ? (v21 = result + 1 >= (unint64_t)&a2[(v20 >> 1) + 2])
        : (v21 = 1),
          v21))
    {
      v22 = (v20 >> 1) + 1;
      v23 = v22 & 0xF;
      if ((v22 & 0xF) == 0)
        v23 = 16;
      v24 = v22 - v23;
      v25 = 2 * v24 + 2;
      v26 = (int16x8_t)vdupq_n_s32(v16);
      v27 = (uint32x4_t *)((char *)v18 + 4 * v24);
      v28 = (const char *)(result + 2);
      v29 = (uint16x8_t)vuzp1q_s16(v26, v26);
      v30 = (uint16x8_t)vdupq_n_s16(v17);
      v31.i64[0] = 0x10000000100;
      v31.i64[1] = 0x10000000100;
      do
      {
        v32 = v28 - 1;
        v33 = (unsigned __int128)vld2q_s8(v32);
        v296 = vld2q_s8(v28);
        v28 += 32;
        v34 = vaddl_high_u8((uint8x16_t)v296.val[1], (uint8x16_t)v33);
        v35 = vaddl_u8(*(uint8x8_t *)v296.val[1].i8, *(uint8x8_t *)&v33);
        v36 = vmovl_u8(*(uint8x8_t *)v296.val[0].i8);
        v296.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v296.val[0]);
        v18[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v296.val[0].i8), *(uint16x4_t *)v34.i8, *(uint16x4_t *)v29.i8), v31), 9uLL);
        v18[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v30, (uint16x8_t)v296.val[0]), v34, v29), v31), 9uLL);
        *v18 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v36.i8), *(uint16x4_t *)v35.i8, *(uint16x4_t *)v29.i8), v31), 9uLL);
        v18[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v30, v36), v35, v29), v31), 9uLL);
        v18 += 4;
        v24 -= 16;
      }
      while (v24);
      v18 = v27;
    }
    else
    {
      v25 = 2;
    }
    v38 = 0;
    do
    {
      v18->i32[0] = ((*(unsigned __int8 *)(result + ((v25 + v38) | 1)) + *(unsigned __int8 *)(result + v25 + v38 - 1))
                   * v16
                   + *(unsigned __int8 *)(result + v25 + v38) * v17
                   + 256) >> 9;
      v18 = (uint32x4_t *)((char *)v18 + 4);
      v38 += 2;
    }
    while (v25 + v38 < v19);
    v39 = v25 + v38;
    v37 = 2 * v16;
    if (v39 == (_DWORD)v19)
      goto LABEL_19;
  }
  v40 = (unsigned __int8 *)(result + a5);
  *v14 = (*v40 * v17 + v37 * v40[1] + 256) >> 9;
  v41 = (uint32x4_t *)(v14 + 1);
  if (v19 < 3)
  {
    if (a4 == 3)
LABEL_35:
      v41->i32[0] = (v40[v19] * v17 + v37 * v40[a4 - 2] + 256) >> 9;
  }
  else
  {
    v42 = v19 - 3;
    if (v19 - 3 >= 0x20
      && ((v43 = (unsigned __int8 *)(a5 + result), v41 >= (uint32x4_t *)&v43[(v42 & 0xFFFFFFFFFFFFFFFELL) + 4])
       || v43 + 1 >= (unsigned __int8 *)&a2[v13 + 2 + (v42 >> 1)]))
    {
      v45 = (v42 >> 1) + 1;
      v46 = v45 & 0xF;
      if ((v45 & 0xF) == 0)
        v46 = 16;
      v47 = v45 - v46;
      v44 = 2 * v47 + 2;
      v48 = (int16x8_t)vdupq_n_s32(v16);
      v49 = (uint32x4_t *)((char *)v41 + 4 * v47);
      v50 = (const char *)(v43 + 2);
      v51 = (uint16x8_t)vuzp1q_s16(v48, v48);
      v52 = (uint16x8_t)vdupq_n_s16(v17);
      v53.i64[0] = 0x10000000100;
      v53.i64[1] = 0x10000000100;
      do
      {
        v54 = v50 - 1;
        v55 = (unsigned __int128)vld2q_s8(v54);
        v297 = vld2q_s8(v50);
        v50 += 32;
        v56 = vaddl_high_u8((uint8x16_t)v297.val[1], (uint8x16_t)v55);
        v57 = vaddl_u8(*(uint8x8_t *)v297.val[1].i8, *(uint8x8_t *)&v55);
        v58 = vmovl_u8(*(uint8x8_t *)v297.val[0].i8);
        v297.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v297.val[0]);
        v41[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v52.i8, *(uint16x4_t *)v297.val[0].i8), *(uint16x4_t *)v56.i8, *(uint16x4_t *)v51.i8), v53), 9uLL);
        v41[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v52, (uint16x8_t)v297.val[0]), v56, v51), v53), 9uLL);
        *v41 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v52.i8, *(uint16x4_t *)v58.i8), *(uint16x4_t *)v57.i8, *(uint16x4_t *)v51.i8), v53), 9uLL);
        v41[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v52, v58), v57, v51), v53), 9uLL);
        v41 += 4;
        v47 -= 16;
      }
      while (v47);
      v41 = v49;
    }
    else
    {
      v44 = 2;
    }
    v59 = 0;
    v60 = &v40[v44];
    do
    {
      result = v60[v59];
      v41->i32[0] = ((v40[(v44 + v59) | 1] + v60[v59 - 1]) * v16 + (_DWORD)result * v17 + 256) >> 9;
      v41 = (uint32x4_t *)((char *)v41 + 4);
      v59 += 2;
    }
    while (v44 + v59 < v19);
    if ((_DWORD)v44 + (_DWORD)v59 == (_DWORD)v19)
      goto LABEL_35;
  }
  if (v12 < 2)
    goto LABEL_66;
  if (v12 < 0x10)
  {
    v61 = 0;
LABEL_63:
    v72 = a2;
    goto LABEL_64;
  }
  v61 = 0;
  v62 = a3 + v13;
  v64 = (unint64_t)&a2[2 * v13] > a3 && (unint64_t)v14 < v62;
  v66 = (unint64_t)(a8 + 2) > a3 && v62 > (unint64_t)a8;
  v67 = v62 > (unint64_t)a2 && (unint64_t)v14 > a3;
  if (v67 || v64 || v66)
    goto LABEL_63;
  v68 = 4 * v13;
  if (v12 >= 0x20)
  {
    v247 = a8;
    v248 = (uint16x4_t)vld1_dup_s16(v247++);
    v61 = v13 & 0x7FFFFFF0;
    v249 = (int32x4_t)vmovl_u16(v248);
    v250 = (uint16x4_t)vld1_dup_s16(v247);
    v251 = (int32x4_t)vmovl_u16(v250);
    v252.i64[0] = 0x10000000100;
    v252.i64[1] = 0x10000000100;
    v253 = v61;
    v254 = (int32x4_t *)a2;
    v255 = (int8x16_t *)a3;
    do
    {
      v256 = vmulq_s32(*(int32x4_t *)((char *)&v254[3] + v68), v249);
      v257 = vmulq_s32(*(int32x4_t *)((char *)v254 + 4 * v13), v249);
      v258 = vmulq_s32(*(int32x4_t *)((char *)&v254[1] + v68), v249);
      v259 = vmulq_s32(*(int32x4_t *)((char *)&v254[2] + v68), v249);
      v304.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v259, v259), v254[2], v251), v252), 9uLL);
      v304.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v258, v258), v254[1], v251), v252), 9uLL);
      v304.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v257, v257), *v254, v251), v252), 9uLL);
      v304.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v256, v256), v254[3], v251), v252), 9uLL);
      *v255++ = vqtbl4q_s8(v304, (int8x16_t)xmmword_210378410);
      v254 += 4;
      v253 -= 16;
    }
    while (v253);
    if (v61 == v13)
      goto LABEL_66;
    if ((v13 & 8) == 0)
    {
      v72 = &a2[v61];
      v14 += v61;
LABEL_64:
      v85 = v13 - v61;
      v86 = (_BYTE *)(a3 + v61);
      do
      {
        v87 = *v14++;
        v88 = v87 * *(unsigned __int16 *)a8;
        v89 = *v72++;
        *v86++ = (v89 * *((unsigned __int16 *)a8 + 1) + 2 * v88 + 256) >> 9;
        --v85;
      }
      while (v85);
      goto LABEL_66;
    }
  }
  else
  {
    v61 = 0;
  }
  v69 = v61;
  v61 = v13 & 0x7FFFFFF8;
  v70 = a8;
  v71 = (uint16x4_t)vld1_dup_s16(v70++);
  v14 += v61;
  v72 = &a2[v61];
  v73 = (int32x4_t)vmovl_u16(v71);
  v74 = (uint16x4_t)vld1_dup_s16(v70);
  v75 = (int32x4_t)vmovl_u16(v74);
  v76 = (_QWORD *)(a3 + v69);
  v77 = (int32x4_t *)&a2[v69];
  v78 = v69 - v61;
  v79.i64[0] = 0x10000000100;
  v79.i64[1] = 0x10000000100;
  do
  {
    v80 = vmulq_s32(*(int32x4_t *)((char *)v77 + 4 * v13), v73);
    v81 = vmulq_s32(*(int32x4_t *)((char *)&v77[1] + v68), v73);
    v83 = *v77;
    v82 = v77[1];
    v77 += 2;
    v84 = (uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v80, v80), v83, v75), v79);
    v301.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v81, v81), v82, v75), v79), 9uLL);
    v301.val[0] = (int8x16_t)vshrq_n_u32(v84, 9uLL);
    *v76++ = vqtbl2q_s8(v301, (int8x16_t)xmmword_2102DB000).u64[0];
    v78 += 8;
  }
  while (v78);
  if (v61 != v13)
    goto LABEL_64;
LABEL_66:
  v90 = a6;
  v91 = a3 + a6;
  v293 = (a7 - 1);
  if (v293 < 3)
  {
    v103 = 2;
    if (a7 != 3)
      return result;
LABEL_154:
    if (v91 >= a3 + ((a7 + 1) >> 1) * a6)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ImageProcessing/include/VIO/ImageProcessing/ConvolutionsFixedPoint.h", 846, (uint64_t)"dst < dst_end", 13, (uint64_t)"Invalid destination pointer", 27, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
    }
    v186 = (unsigned int *)v294[v103];
    v187 = v293 * a5;
    v188 = v11 + v187;
    v189 = *(unsigned __int16 *)a8;
    v190 = *((unsigned __int16 *)a8 + 1);
    *v186 = (v190 * *(unsigned __int8 *)(v11 + v187) + 2 * *(unsigned __int8 *)(v11 + v187 + 1) * v189 + 256) >> 9;
    v191 = (uint32x4_t *)(v186 + 1);
    if (v19 < 3)
    {
      if ((_DWORD)v19 == 2)
LABEL_174:
        v191->i32[0] = (*(unsigned __int8 *)(v188 + v19) * v190
                      + 2 * v189 * *(unsigned __int8 *)(v188 + (v10 - 2))
                      + 256) >> 9;
    }
    else
    {
      v192 = v19 - 3;
      if (v19 - 3 >= 0x20
        && ((v193 = v192 >> 1,
             v194 = v187 + v11,
             v195 = v187 + v11 + 1,
             (unint64_t)v191 < v194 + (v192 & 0xFFFFFFFFFFFFFFFELL) + 4)
          ? (v196 = v195 >= (unint64_t)&v186[(v192 >> 1) + 2])
          : (v196 = 1),
            v196))
      {
        v197 = v193 + 1;
        v198 = (v193 + 1) & 0xF;
        if (!v198)
          v198 = 16;
        v199 = v197 - v198;
        v200 = 2 * v199 + 2;
        v201 = (int16x8_t)vdupq_n_s32(v189);
        v202 = (uint32x4_t *)((char *)v191 + 4 * v199);
        v203 = (const char *)(v194 + 2);
        v204 = (uint16x8_t)vuzp1q_s16(v201, v201);
        v205 = (uint16x8_t)vdupq_n_s16(v190);
        v206.i64[0] = 0x10000000100;
        v206.i64[1] = 0x10000000100;
        do
        {
          v207 = v203 - 1;
          v208 = (unsigned __int128)vld2q_s8(v207);
          v300 = vld2q_s8(v203);
          v203 += 32;
          v209 = vaddl_high_u8((uint8x16_t)v300.val[1], (uint8x16_t)v208);
          v210 = vaddl_u8(*(uint8x8_t *)v300.val[1].i8, *(uint8x8_t *)&v208);
          v211 = vmovl_u8(*(uint8x8_t *)v300.val[0].i8);
          v300.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v300.val[0]);
          v191[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v205.i8, *(uint16x4_t *)v300.val[0].i8), *(uint16x4_t *)v209.i8, *(uint16x4_t *)v204.i8), v206), 9uLL);
          v191[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v205, (uint16x8_t)v300.val[0]), v209, v204), v206), 9uLL);
          *v191 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v205.i8, *(uint16x4_t *)v211.i8), *(uint16x4_t *)v210.i8, *(uint16x4_t *)v204.i8), v206), 9uLL);
          v191[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v205, v211), v210, v204), v206), 9uLL);
          v191 += 4;
          v199 -= 16;
        }
        while (v199);
        v191 = v202;
      }
      else
      {
        v200 = 2;
      }
      v212 = 0;
      v213 = v188 + v200;
      do
      {
        result = *(unsigned __int8 *)(v213 + v212 - 1);
        v191->i32[0] = ((*(unsigned __int8 *)(v188 + ((v200 + v212) | 1)) + (_DWORD)result) * v189
                      + *(unsigned __int8 *)(v213 + v212) * v190
                      + 256) >> 9;
        v191 = (uint32x4_t *)((char *)v191 + 4);
        v212 += 2;
      }
      while (v200 + v212 < v19);
      if ((_DWORD)v200 + (_DWORD)v212 == (_DWORD)v19)
        goto LABEL_174;
    }
    if (v12 < 2)
      return result;
    v214 = v294[(v103 + 2) % 3];
    if (v12 < 0x10)
    {
      v215 = 0;
LABEL_178:
      v216 = (int *)v294[(v103 + 2) % 3];
      v217 = v186;
      goto LABEL_179;
    }
    v215 = 0;
    v223 = v91 + v13;
    v225 = v91 < (unint64_t)(a8 + 2) && v223 > (unint64_t)a8;
    v227 = v91 < (unint64_t)&v186[v13] && (unint64_t)v186 < v223;
    v228 = v214 >= v223 || v91 >= v214 + 4 * v13;
    if (!v228 || v225 || v227)
      goto LABEL_178;
    if (v12 >= 0x20)
    {
      v260 = a8;
      v261 = (uint16x4_t)vld1_dup_s16(v260++);
      v215 = v13 & 0x7FFFFFF0;
      v262 = (int32x4_t)vmovl_u16(v261);
      v263 = (uint16x4_t)vld1_dup_s16(v260);
      v264 = (int32x4_t)vmovl_u16(v263);
      v265.i64[0] = 0x10000000100;
      v265.i64[1] = 0x10000000100;
      v266 = v215;
      v267 = (int32x4_t *)v294[(v103 + 2) % 3];
      v268 = (int32x4_t *)v186;
      v269 = (int8x16_t *)v91;
      do
      {
        v270 = vmulq_s32(v267[3], v262);
        v271 = vmulq_s32(v267[2], v262);
        v272 = vmulq_s32(*v267, v262);
        v273 = vmulq_s32(v267[1], v262);
        v305.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v273, v273), v268[1], v264), v265), 9uLL);
        v305.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v272, v272), *v268, v264), v265), 9uLL);
        v305.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v271, v271), v268[2], v264), v265), 9uLL);
        v305.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v270, v270), v268[3], v264), v265), 9uLL);
        *v269++ = vqtbl4q_s8(v305, (int8x16_t)xmmword_210378410);
        v268 += 4;
        v267 += 4;
        v266 -= 16;
      }
      while (v266);
      if (v215 == v13)
        return result;
      if ((v13 & 8) == 0)
      {
        v217 = &v186[v215];
        v216 = (int *)(v214 + 4 * v215);
        goto LABEL_179;
      }
    }
    else
    {
      v215 = 0;
    }
    v229 = v215;
    v215 = v13 & 0x7FFFFFF8;
    v216 = (int *)(v214 + 4 * v215);
    v217 = &v186[v215];
    v230 = a8;
    v231 = (uint16x4_t)vld1_dup_s16(v230++);
    v232 = (int32x4_t)vmovl_u16(v231);
    v233 = (uint16x4_t)vld1_dup_s16(v230);
    v234 = (int32x4_t)vmovl_u16(v233);
    v235 = (_QWORD *)(v91 + v229);
    v236 = (int32x4_t *)&v186[v229];
    v237 = (int32x4_t *)(v214 + 4 * v229);
    v238 = v229 - v215;
    v239.i64[0] = 0x10000000100;
    v239.i64[1] = 0x10000000100;
    do
    {
      v241 = *v237;
      v240 = v237[1];
      v237 += 2;
      v242 = vmulq_s32(v241, v232);
      v243 = vmulq_s32(v240, v232);
      v245 = *v236;
      v244 = v236[1];
      v236 += 2;
      v246 = (uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v242, v242), v245, v234), v239);
      v302.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v243, v243), v244, v234), v239), 9uLL);
      v302.val[0] = (int8x16_t)vshrq_n_u32(v246, 9uLL);
      *v235++ = vqtbl2q_s8(v302, (int8x16_t)xmmword_2102DB000).u64[0];
      v238 += 8;
    }
    while (v238);
    if (v215 == v13)
      return result;
LABEL_179:
    v218 = v13 - v215;
    v219 = (_BYTE *)(v91 + v215);
    do
    {
      v220 = *v216++;
      v221 = v220 * *(unsigned __int16 *)a8;
      v222 = *v217++;
      *v219++ = (v222 * *((unsigned __int16 *)a8 + 1) + 2 * v221 + 256) >> 9;
      --v218;
    }
    while (v218);
    return result;
  }
  v275 = a7;
  v276 = a6;
  v92 = 0;
  v292 = (a4 - 2);
  v285 = v13 + a6;
  v283 = (unsigned __int16 *)(a8 + 2);
  v284 = v13;
  v289 = ((2 * (v19 - 3)) & 0xFFFFFFFFFFFFFFFCLL) + 8;
  v288 = v11 + 1;
  v93 = 2 * a5;
  v94 = 3 * a5;
  v287 = ((v19 - 3) & 0xFFFFFFFFFFFFFFFELL) + v11 + 4;
  v291 = v19 - 3;
  v95 = ((v19 - 3) >> 1) + 1;
  v96 = v95 & 0xF;
  if ((v95 & 0xF) == 0)
    v96 = 16;
  v97 = v95 - v96;
  v281 = 2 * v97 + 2;
  v282 = v97;
  v280 = 4 * v97;
  v98 = v13 & 0x7FFFFFF0;
  v274 = v98;
  v99 = v13 & 0x7FFFFFF8;
  v278 = v99;
  v279 = v11 + 2;
  v100 = 2;
  v101.i64[0] = 0x10000000100;
  v101.i64[1] = 0x10000000100;
  v102 = (int8x16_t *)&unk_210378000;
  LODWORD(result) = 2 * a5;
  v103 = 2;
  v290 = a4 + 1;
  do
  {
    v104 = v15;
    v105 = (unsigned __int8 *)(v11 + v100 * a5);
    v106 = *(unsigned __int16 *)a8;
    v107 = *((unsigned __int16 *)a8 + 1);
    *v104 = (v107 * *v105 + 2 * v105[1] * v106 + 256) >> 9;
    v108 = (uint32x4_t *)(v104 + 1);
    v109 = (uint16x8_t)vdupq_n_s16(v107);
    if (v19 < 3)
    {
      if ((_DWORD)v19 != 2)
        goto LABEL_82;
    }
    else
    {
      if (v291 >= 0x20
        && ((v110 = (v93 + v93 * v92), (unint64_t)v108 < v287 + v110)
          ? (v111 = v288 + v110 >= (unint64_t)v104 + v289)
          : (v111 = 1),
            v111))
      {
        v112 = (const char *)(v279 + result);
        v113 = (uint32x4_t *)((char *)v108 + v280);
        v114 = (int16x8_t)vdupq_n_s32(v106);
        v115 = v282;
        do
        {
          v116 = v112 - 1;
          v117 = (unsigned __int128)vld2q_s8(v116);
          v298 = vld2q_s8(v112);
          v112 += 32;
          v118 = vaddl_high_u8((uint8x16_t)v298.val[1], (uint8x16_t)v117);
          v119 = vaddl_u8(*(uint8x8_t *)v298.val[1].i8, *(uint8x8_t *)&v117);
          v120 = (uint16x8_t)vuzp1q_s16(v114, v114);
          v121 = vmovl_u8(*(uint8x8_t *)v298.val[0].i8);
          v298.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v298.val[0]);
          v108[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v109.i8, *(uint16x4_t *)v298.val[0].i8), *(uint16x4_t *)v118.i8, *(uint16x4_t *)v120.i8), v101), 9uLL);
          v108[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v109, (uint16x8_t)v298.val[0]), v118, v120), v101), 9uLL);
          *v108 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v109.i8, *(uint16x4_t *)v121.i8), *(uint16x4_t *)v119.i8, *(uint16x4_t *)v120.i8), v101), 9uLL);
          v108[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v109, v121), v119, v120), v101), 9uLL);
          v108 += 4;
          v115 -= 16;
        }
        while (v115);
        v122 = v281;
        v108 = v113;
      }
      else
      {
        v122 = 2;
      }
      v124 = 0;
      do
      {
        v108->i32[0] = ((v105[(v122 + v124) | 1] + *(unsigned __int8 *)(v11 + result + v122 + v124 - 1))
                      * v106
                      + *(unsigned __int8 *)(v11 + result + v122 + v124) * v107
                      + 256) >> 9;
        v108 = (uint32x4_t *)((char *)v108 + 4);
        v124 += 2;
      }
      while (v122 + v124 < v19);
      v102 = (int8x16_t *)&unk_210378000;
      if ((_DWORD)v122 + (_DWORD)v124 != (_DWORD)v19)
      {
LABEL_82:
        v123 = 2 * v106;
        goto LABEL_88;
      }
    }
    v123 = 2 * v106;
    v108->i32[0] = (v105[v19] * v107 + 2 * v106 * v105[v292] + 256) >> 9;
LABEL_88:
    if (v103 == 2)
      v125 = 0;
    else
      v125 = v103 + 1;
    v126 = (unsigned int *)v294[v125];
    v127 = (unsigned __int8 *)(v11 + (v100 | 1) * a5);
    *v126 = (*v127 * v107 + v123 * v127[1] + 256) >> 9;
    v128 = (uint32x4_t *)(v126 + 1);
    if (v19 < 3)
    {
      if ((_DWORD)v19 == 2)
        goto LABEL_107;
    }
    else
    {
      if (v291 >= 0x20
        && ((v129 = 3 * a5 + v93 * (_DWORD)v92, (unint64_t)v128 < v287 + v129)
          ? (v130 = v288 + v129 >= (unint64_t)v126 + v289)
          : (v130 = 1),
            v130))
      {
        v131 = (const char *)(v279 + v94);
        v132 = (uint32x4_t *)((char *)v128 + v280);
        v133 = (int16x8_t)vdupq_n_s32(v106);
        v134 = v282;
        do
        {
          v135 = v131 - 1;
          v136 = (unsigned __int128)vld2q_s8(v135);
          v299 = vld2q_s8(v131);
          v131 += 32;
          v137 = vaddl_high_u8((uint8x16_t)v299.val[1], (uint8x16_t)v136);
          v138 = vaddl_u8(*(uint8x8_t *)v299.val[1].i8, *(uint8x8_t *)&v136);
          v139 = (uint16x8_t)vuzp1q_s16(v133, v133);
          v140 = vmovl_u8(*(uint8x8_t *)v299.val[0].i8);
          v299.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v299.val[0]);
          v128[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v109.i8, *(uint16x4_t *)v299.val[0].i8), *(uint16x4_t *)v137.i8, *(uint16x4_t *)v139.i8), v101), 9uLL);
          v128[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v109, (uint16x8_t)v299.val[0]), v137, v139), v101), 9uLL);
          *v128 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v109.i8, *(uint16x4_t *)v140.i8), *(uint16x4_t *)v138.i8, *(uint16x4_t *)v139.i8), v101), 9uLL);
          v128[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v109, v140), v138, v139), v101), 9uLL);
          v128 += 4;
          v134 -= 16;
        }
        while (v134);
        v141 = v281;
        v128 = v132;
      }
      else
      {
        v141 = 2;
      }
      v142 = 0;
      do
      {
        v128->i32[0] = ((v127[(v141 + v142) | 1] + *(unsigned __int8 *)(v11 + v94 + v141 + v142 - 1)) * v106
                      + *(unsigned __int8 *)(v11 + v94 + v141 + v142) * v107
                      + 256) >> 9;
        v128 = (uint32x4_t *)((char *)v128 + 4);
        v142 += 2;
      }
      while (v141 + v142 < v19);
      v12 = v290;
      v102 = (int8x16_t *)&unk_210378000;
      if ((_DWORD)v141 + (_DWORD)v142 == (_DWORD)v19)
LABEL_107:
        v128->i32[0] = (v127[v19] * v107 + v123 * v127[v292] + 256) >> 9;
    }
    v103 = (v103 + 2) % 3;
    v15 = (unsigned int *)v294[v103];
    if (v12 < 2)
      goto LABEL_70;
    if (v12 < 0x10)
    {
      v143 = 0;
LABEL_111:
      v144 = (unsigned int *)v294[v103];
      v145 = v104;
      v146 = v126;
      do
      {
LABEL_112:
        v148 = *v144++;
        v147 = v148;
        v149 = *v146++;
        v150 = v149 + v147;
        v151 = *v145++;
        *(_BYTE *)(v91 + v143++) = (v151 * *((unsigned __int16 *)a8 + 1)
                                  + v150 * *(unsigned __int16 *)a8
                                  + 256) >> 9;
      }
      while (v13 != v143);
      goto LABEL_70;
    }
    v143 = 0;
    v152 = a3 + v285 + v92 * v90;
    v154 = v91 < (unint64_t)&v126[v284] && (unint64_t)v126 < v152;
    v156 = v91 < (unint64_t)v283 && v152 > (unint64_t)a8;
    v158 = v91 < (unint64_t)&v104[v284] && (unint64_t)v104 < v152;
    v159 = (unint64_t)v15 >= v152 || v91 >= (unint64_t)&v15[v284];
    if (!v159 || v154 || v156 || v158)
      goto LABEL_111;
    if (v12 >= 0x20)
    {
      v177 = 0;
      v178 = a8;
      v179 = (uint16x4_t)vld1_dup_s16(v178++);
      v180 = (int32x4_t)vmovl_u16(v179);
      v181 = (uint16x4_t)vld1_dup_s16(v178);
      v182 = (int32x4_t)vmovl_u16(v181);
      v183 = (int32x4_t *)v294[v103];
      v184 = (int32x4_t *)v104;
      v185 = (int32x4_t *)v126;
      do
      {
        v303.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v184[2], v182), vaddq_s32(v185[2], v183[2]), v180), v101), 9uLL);
        v303.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v184[1], v182), vaddq_s32(v185[1], v183[1]), v180), v101), 9uLL);
        v303.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(*v184, v182), vaddq_s32(*v185, *v183), v180), v101), 9uLL);
        v303.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v184[3], v182), vaddq_s32(v185[3], v183[3]), v180), v101), 9uLL);
        *(int8x16_t *)(v91 + v177) = vqtbl4q_s8(v303, v102[65]);
        v177 += 16;
        v185 += 4;
        v184 += 4;
        v183 += 4;
      }
      while (v98 != v177);
      if (v98 == v13)
        goto LABEL_70;
      v160 = v13 & 0x7FFFFFF0;
      if ((v13 & 8) == 0)
      {
        v146 = &v126[v274];
        v145 = &v104[v274];
        v144 = &v15[v274];
        v143 = v13 & 0x7FFFFFF0;
        goto LABEL_112;
      }
    }
    else
    {
      v160 = 0;
    }
    v144 = &v15[v278];
    v145 = &v104[v278];
    v146 = &v126[v278];
    v161 = a8;
    v162 = (uint16x4_t)vld1_dup_s16(v161++);
    v163 = (uint16x4_t)vld1_dup_s16(v161);
    v164 = (int32x4_t)vmovl_u16(v162);
    v165 = (int32x4_t)vmovl_u16(v163);
    v166 = (int32x4_t *)&v126[v160];
    v167 = (int32x4_t *)&v104[v160];
    v168 = (int32x4_t *)&v15[v160];
    do
    {
      v169 = *v168;
      v170 = v168[1];
      v168 += 2;
      v171 = *v166;
      v172 = v166[1];
      v166 += 2;
      v173 = vaddq_s32(v172, v170);
      v174 = vaddq_s32(v171, v169);
      v176 = *v167;
      v175 = v167[1];
      v167 += 2;
      v295.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v175, v165), v173, v164), v101), 9uLL);
      v295.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v176, v165), v174, v164), v101), 9uLL);
      *(_QWORD *)(v91 + v160) = vqtbl2q_s8(v295, (int8x16_t)xmmword_2102DB000).u64[0];
      v160 += 8;
    }
    while (v99 != v160);
    v143 = v13 & 0x7FFFFFF8;
    if (v99 != v13)
      goto LABEL_112;
LABEL_70:
    v100 += 2;
    v91 += v90;
    ++v92;
    result = (result + v93);
    v94 += v93;
  }
  while (v100 < v293);
  a6 = v276;
  v10 = a4;
  a7 = v275;
  if ((_DWORD)v100 == (_DWORD)v293)
    goto LABEL_154;
  return result;
}

unint64_t *sub_20FD9B088(unint64_t *result, double a2, double a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  double v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int8x16_t v26;
  unint64_t v27;
  __int128 v28;
  __int16 v29;
  __int128 v30;
  __int16 v31;

  v31 = 0;
  v30 = xmmword_2103C02CA;
  v29 = 2;
  v9 = 1.60212244e-306;
  v28 = xmmword_2103C02DC;
  v10 = (_QWORD *)result[6];
  if (v10[2] >= 2uLL)
  {
    v11 = result;
    v12 = 0;
    v13 = *result;
    v14 = result[1];
    v15 = 1;
    v17 = result[7];
    v16 = result[8];
    do
    {
      v14 = (v14 + 1) >> 1;
      v13 = (v13 + 1) >> 1;
      v18 = 144 * v10[3] * v15;
      sub_20FD98918(*(int8x16_t **)(*(_QWORD *)(v16 + 48) + v12 + 88), (unsigned int *)v11[20], *(_WORD **)(*(_QWORD *)(v17 + 48) + v18 + 88), v13, *(_QWORD *)(*(_QWORD *)(v16 + 48) + v12 + 40), *(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 40), v14, (unsigned __int16 *)&v30, v9, a3, a4, a5, a6, a7, a8, a9);
      sub_20FD9E8BC(*(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 88), *(_BYTE **)(v10[6] + v18 + 88), v13, *(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 40), *(_QWORD *)(v10[6] + v18 + 40), v14);
      v18 += 144;
      sub_20FD98918(*(int8x16_t **)(*(_QWORD *)(v16 + 48) + v12 + 88), (unsigned int *)v11[20], *(_WORD **)(*(_QWORD *)(v17 + 48) + v18 + 88), v13, *(_QWORD *)(*(_QWORD *)(v16 + 48) + v12 + 40), *(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 40), v14, (unsigned __int16 *)&v28, v19, v20, v21, v22, v23, v24, v25, v26);
      result = (unint64_t *)sub_20FD9E8BC(*(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 88), *(_BYTE **)(v10[6] + v18 + 88), v13, *(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 40), *(_QWORD *)(v10[6] + v18 + 40), v14);
      v27 = v10[2];
      if (v15 < v27 - 1)
      {
        result = (unint64_t *)sub_20FD99FD0(*(_QWORD *)(*(_QWORD *)(v16 + 48) + v12 + 88), (unsigned int *)v11[20], *(_QWORD *)(*(_QWORD *)(v16 + 48) + v12 + 232), v13, *(_DWORD *)(*(_QWORD *)(v16 + 48) + v12 + 40), *(_DWORD *)(*(_QWORD *)(v16 + 48) + v12 + 184), v14, word_2103C02EE);
        v27 = v10[2];
      }
      ++v15;
      v12 += 144;
    }
    while (v15 < v27);
  }
  return result;
}

void sub_20FD9B260(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FD9B284(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

uint64_t sub_20FD9B28C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20FD9B300(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD9B324(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x212BC6368);
  return result;
}

uint64_t sub_20FD9B344(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3vio8cv_types12ArrayDeleterIjEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIjEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3vio8cv_types12ArrayDeleterIjEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIjEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20FD9B3B4(_WORD *a1, unsigned int *a2, int a3, unsigned __int16 *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int16x8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int16x8_t *v32;
  int32x4_t v33;
  unsigned int *v34;
  int32x4_t v35;
  unsigned int *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t result;
  unsigned int v55;
  unsigned int v56;

  v4 = *a2;
  v5 = a2[1];
  v7 = a2[4];
  v6 = a2[5];
  v8 = *a4;
  v9 = a2[2];
  v10 = a2[3];
  v11 = a4[1];
  v12 = a4[2];
  v13 = a4[3];
  v14 = a4[4];
  *a1 = ((v10 + *a2) * v11 + (v7 + *a2) * v8 + (v9 + *a2) * v12 + (v5 + *a2) * v13 + *a2 * v14 + 512) >> 10;
  a1[1] = ((v10 + v4) * v12 + (v7 + v4) * v11 + (v9 + v4) * v13 + v5 * v14 + (v6 + v4) * v8 + 512) >> 10;
  v15 = a2[7];
  v16 = a2[6] + v4;
  a1[2] = ((v5 + v10) * v13 + (v7 + v4) * v12 + v9 * v14 + (v6 + v4) * v11 + v16 * v8 + 512) >> 10;
  v17 = (int16x8_t *)(a1 + 4);
  a1[3] = (v10 * v14 + (v9 + v7) * v13 + (v6 + v5) * v12 + v16 * v11 + (v15 + v4) * v8 + 512) >> 10;
  v18 = (a3 - 4);
  if (v18 >= 5)
  {
    v19 = v18 - 4;
    if ((unint64_t)(v18 - 4) >= 8)
    {
      v21 = v18 - 5;
      v20 = 4;
      if ((v18 - 5) <= 0xFFFFFFF9
        && (v21 & 0xFFFFFFF8) != 0xFFFFFFF8
        && v21 <= 0xFFFFFFF8
        && !HIDWORD(v21))
      {
        v22 = 0;
        v23 = v19 & 0xFFFFFFFFFFFFFFF8;
        v20 = v19 & 0xFFFFFFFFFFFFFFF8 | 4;
        v24 = vdupq_n_s32(v7);
        v25 = vdupq_n_s32(v10);
        v26 = (int8x16_t)vdupq_n_s32(v9);
        v27 = (int8x16_t)vdupq_n_s32(v5);
        v28 = (int8x16_t)vdupq_n_s32(v4);
        v29 = vdupq_n_s32(v8);
        v30 = vdupq_n_s32(v11);
        v31 = vdupq_n_s32(v12);
        v32 = (int16x8_t *)((char *)v17 + 2 * (v19 & 0xFFFFFFFFFFFFFFF8));
        v33 = vdupq_n_s32(v13);
        v34 = a2 + 5;
        v35 = vdupq_n_s32(v14);
        do
        {
          v36 = &a2[v22 & 0xFFFFFFF8];
          v37 = vuzp2q_s32(vuzp2q_s32(v25, v24), v25);
          v38 = (int32x4_t)vextq_s8(v26, (int8x16_t)v37, 0xCuLL);
          v39 = (int32x4_t)vextq_s8(v27, (int8x16_t)v38, 0xCuLL);
          v40 = (int32x4_t)vextq_s8(v28, (int8x16_t)v39, 0xCuLL);
          v28 = *(int8x16_t *)v34;
          v41 = (int32x4_t)vextq_s8((int8x16_t)v24, *(int8x16_t *)v34, 0xCuLL);
          v24 = *((int32x4_t *)v34 + 1);
          v42 = (int32x4_t)vextq_s8(*(int8x16_t *)v34, (int8x16_t)v24, 0xCuLL);
          v37.i64[1] = *(_QWORD *)v34;
          v43 = (int32x4_t)vextq_s8(*(int8x16_t *)v34, (int8x16_t)v24, 8uLL);
          v44 = (int32x4_t)vextq_s8(*(int8x16_t *)v34, (int8x16_t)v24, 4uLL);
          v38.i32[3] = *(_OWORD *)v34;
          *v17++ = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(*(int32x4_t *)&a2[(v22 + 8) & 0xFFFFFFF8], v40), v29), v41, v35), vaddq_s32(*(int32x4_t *)(v36 + 7), v39), v30), vaddq_s32(*(int32x4_t *)(v36 + 6), v38), v31), vaddq_s32(*(int32x4_t *)v34, v37), v33), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(
                             vmulq_s32(vaddq_s32(*(int32x4_t *)&a2[((v22 + 8) & 0xFFFFFFF8) + 4], v41), v29),
                             v42,
                             v35),
                           vaddq_s32(*(int32x4_t *)(v36 + 11), *(int32x4_t *)v34),
                           v30),
                         vaddq_s32(*(int32x4_t *)(v36 + 10), v44),
                         v31),
                       vaddq_s32(v24, v43),
                       v33),
                     0xAuLL);
          v34 += 8;
          v22 += 8;
          v25 = v42;
          v26 = (int8x16_t)v43;
          v27 = (int8x16_t)v44;
        }
        while (v23 != v22);
        if (v19 == v23)
          goto LABEL_15;
        v7 = v24.u32[3];
        v10 = v24.u32[2];
        v9 = v24.u32[1];
        v5 = v24.i32[0];
        v17 = v32;
        v4 = v28.u32[3];
      }
    }
    else
    {
      v20 = 4;
    }
    v32 = v17;
    do
    {
      v45 = a2[(v20 + 4)] + v4;
      v46 = a2[(v20 + 3)] + v5;
      v4 = v5;
      v5 = v9;
      v9 = v10;
      v10 = v7;
      v7 = a2[v20 + 1];
      v32->i16[0] = (v45 * v8 + v10 * v14 + v46 * v11 + (a2[(v20 + 2)] + v5) * v12 + (v7 + v9) * v13 + 512) >> 10;
      v32 = (int16x8_t *)((char *)v32 + 2);
      ++v20;
    }
    while (v18 != v20);
LABEL_15:
    v7 = a2[v18];
    v17 = v32;
    goto LABEL_16;
  }
  LODWORD(v18) = 4;
LABEL_16:
  v47 = a2[(v18 + 3)];
  v48 = (v47 + a2[(v18 - 4)]) * v8;
  v49 = a2[(v18 - 3)] + v47;
  v50 = a2[(v18 - 2)];
  v51 = a2[(v18 + 2)];
  v52 = a2[(v18 - 1)];
  v53 = a2[(v18 + 1)];
  v17->i16[0] = (v48 + v7 * v14 + v49 * v11 + (v51 + v50) * v12 + (v53 + v52) * v13 + 512) >> 10;
  result = ((v50 + v47) * v11 + v49 * v8 + (v51 + v7) * v13 + (v52 + v47) * v12 + v53 * v14 + 512) >> 10;
  v17->i16[1] = result;
  v55 = v47 + v7;
  v56 = v53 + v47;
  v17->i16[2] = ((v50 + v47) * v8 + v55 * v12 + v51 * v14 + (v52 + v47) * v11 + v56 * v13 + 512) >> 10;
  v17->i16[3] = (v55 * v11 + v47 * v14 + (v51 + v47) * v13 + (v52 + v47) * v8 + v56 * v12 + 512) >> 10;
  return result;
}

void sub_20FD9B76C(unsigned int a1@<W0>, unsigned int a2@<W1>, unsigned int **a3@<X8>)
{
  unsigned int *v6;
  unsigned int *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  char *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int *v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  unsigned int *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int *v40;
  char *v41;
  int64_t v42;
  unint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  unsigned int *v48;
  uint64_t v49;
  __int128 v50;
  unsigned int v51;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned int *)operator new(0x14uLL);
  v7 = v6 + 5;
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 5;
  v8 = operator new(0x14uLL);
  v9 = v8;
  v10 = 0;
  v8[4] = 16;
  *(_OWORD *)v8 = xmmword_2103C0458;
  if (a1 - 160 <= 0x1E0 && a2 - 160 < 0x1F61)
  {
    v10 = 1;
    *v6 = 1;
    a3[1] = v6 + 1;
  }
  if ((a1 >> 1) - 160 > 0x1E0)
  {
    v12 = 4;
  }
  else
  {
    if ((a2 >> 1) - 160 > 0x1F60)
    {
      v12 = 4;
      v11 = &v6[v10];
      if (a1 / 4 - 160 > 0x1E0)
        goto LABEL_22;
      goto LABEL_12;
    }
    v6[v10++] = 2;
    v11 = &v6[v10];
    a3[1] = v11;
    v12 = v8[2];
    if (!v12)
      goto LABEL_22;
  }
  v11 = &v6[v10];
  if (a1 / v12 - 160 > 0x1E0)
    goto LABEL_22;
LABEL_12:
  if (a2 / v12 - 160 <= 0x1F60)
  {
    if (v10 >= 5)
    {
      v14 = (char *)operator new(0x28uLL);
      v7 = (unsigned int *)(v14 + 40);
      v15 = (unsigned int *)&v14[4 * v10];
      *v15 = v12;
      v13 = v15 + 1;
      *(v15 - 1) = *(v11 - 1);
      v16 = v15 - 1;
      if (v11 - 1 != v6)
      {
        *(v15 - 2) = *(v11 - 2);
        v16 = v15 - 2;
        if (v11 - 2 != v6)
        {
          *(v15 - 3) = *(v11 - 3);
          v16 = v15 - 3;
          if (v11 - 3 != v6)
          {
            *(v15 - 4) = *(v11 - 4);
            v16 = v15 - 4;
            if (v11 - 4 != v6)
            {
              *(v15 - 5) = *(v11 - 5);
              v16 = v15 - 5;
            }
          }
        }
      }
      *a3 = v16;
      a3[1] = v13;
      a3[2] = v7;
      operator delete(v6);
      v6 = v16;
      v11 = v13;
    }
    else
    {
      *v11++ = v12;
      v13 = v11;
    }
    a3[1] = v13;
  }
LABEL_22:
  v17 = v9[3];
  if (v17 && a1 / v17 - 160 <= 0x1E0 && a2 / v17 - 160 <= 0x1F60)
  {
    if (v11 < v7)
    {
      *v11++ = v17;
      v18 = v11;
LABEL_47:
      a3[1] = v18;
      goto LABEL_48;
    }
    v19 = (char *)v11 - (char *)v6;
    v20 = v11 - v6;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62)
      goto LABEL_75;
    if (((char *)v7 - (char *)v6) >> 1 > v21)
      v21 = ((char *)v7 - (char *)v6) >> 1;
    if ((unint64_t)((char *)v7 - (char *)v6) >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
    {
      if (v22 >> 62)
        goto LABEL_76;
      v23 = operator new(4 * v22);
      v19 = (char *)v11 - (char *)v6;
    }
    else
    {
      v23 = 0;
    }
    v24 = (unsigned int *)&v23[4 * v20];
    v7 = (unsigned int *)&v23[4 * v22];
    *v24 = v17;
    v18 = v24 + 1;
    if (v11 != v6)
    {
      v25 = (char *)v11 - (char *)v6 - 4;
      if (v25 >= 0x2C)
      {
        if ((unint64_t)((char *)v11 - v23 - v19) >= 0x20)
        {
          v27 = (v25 >> 2) + 1;
          v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
          v26 = &v11[v28 / 0xFFFFFFFFFFFFFFFCLL];
          v24 = (unsigned int *)((char *)v24 - v28);
          v29 = &v23[4 * (v11 - v6) - 16];
          v30 = v11 - 4;
          v31 = v27 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v32 = *(_OWORD *)v30;
            *(v29 - 1) = *((_OWORD *)v30 - 1);
            *v29 = v32;
            v29 -= 2;
            v30 -= 8;
            v31 -= 8;
          }
          while (v31);
          if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_46;
        }
        else
        {
          v26 = v11;
        }
      }
      else
      {
        v26 = v11;
      }
      do
      {
        v33 = *--v26;
        *--v24 = v33;
      }
      while (v26 != v6);
    }
LABEL_46:
    *a3 = v24;
    a3[1] = v18;
    a3[2] = v7;
    operator delete(v6);
    v6 = v24;
    v11 = v18;
    goto LABEL_47;
  }
LABEL_48:
  v34 = v9[4];
  if (v34 && a1 / v34 - 160 <= 0x1E0 && a2 / v34 - 160 <= 0x1F60)
  {
    if (v11 < v7)
    {
      *v11 = v34;
      v35 = (uint64_t)(v11 + 1);
LABEL_73:
      a3[1] = (unsigned int *)v35;
      goto LABEL_74;
    }
    v36 = v11 - v6;
    v37 = v36 + 1;
    if (!((unint64_t)(v36 + 1) >> 62))
    {
      if (((char *)v7 - (char *)v6) >> 1 > v37)
        v37 = ((char *)v7 - (char *)v6) >> 1;
      if ((unint64_t)((char *)v7 - (char *)v6) >= 0x7FFFFFFFFFFFFFFCLL)
        v38 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (!v38)
      {
        v39 = 0;
        v40 = (unsigned int *)(4 * v36);
        v41 = 0;
        *(_DWORD *)(4 * v36) = v34;
        v35 = 4 * v36 + 4;
        v42 = (char *)v11 - (char *)v6;
        if (v11 == v6)
          goto LABEL_72;
        goto LABEL_64;
      }
      if (!(v38 >> 62))
      {
        v39 = operator new(4 * v38);
        v40 = (unsigned int *)&v39[4 * v36];
        v41 = &v39[4 * v38];
        *v40 = v34;
        v35 = (uint64_t)(v40 + 1);
        v42 = (char *)v11 - (char *)v6;
        if (v11 == v6)
          goto LABEL_72;
LABEL_64:
        v43 = v42 - 4;
        if (v43 >= 0x2C)
        {
          if ((unint64_t)((char *)v6 - v39) >= 0x20)
          {
            v45 = (v43 >> 2) + 1;
            v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
            v44 = &v11[v46 / 0xFFFFFFFFFFFFFFFCLL];
            v40 = (unsigned int *)((char *)v40 - v46);
            v47 = &v39[4 * v36 - 16];
            v48 = v11 - 4;
            v49 = v45 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              *v47 = v50;
              v47 -= 2;
              v48 -= 8;
              v49 -= 8;
            }
            while (v49);
            if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_72;
          }
          else
          {
            v44 = v11;
          }
        }
        else
        {
          v44 = v11;
        }
        do
        {
          v51 = *--v44;
          *--v40 = v51;
        }
        while (v44 != v6);
LABEL_72:
        *a3 = v40;
        a3[1] = (unsigned int *)v35;
        a3[2] = (unsigned int *)v41;
        operator delete(v6);
        goto LABEL_73;
      }
LABEL_76:
      sub_20E877A38();
    }
LABEL_75:
    sub_20E867F44();
  }
LABEL_74:
  operator delete(v9);
}

void sub_20FD9BC38(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  operator delete(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FD9BC6C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t *v7;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  const char *v22;
  size_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  const char *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  unsigned __int8 v39;
  const char *v40;
  size_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *p_p;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  size_t v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  int v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  char *v94;
  unsigned __int8 v95;
  const char *v96;
  size_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  size_t v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  char *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  int v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  void *v140;
  unint64_t *v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  char *v148;
  unsigned __int8 v149;
  const char *v150;
  size_t v151;
  _BYTE *v152;
  unint64_t v153;
  const char *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  size_t v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  char *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  void *v198;
  unint64_t *v199;
  unsigned __int8 v200;
  uint64_t v201;
  const char *v202;
  NSObject *v203;
  unsigned __int8 v204;
  uint64_t v205;
  const char *v206;
  NSObject *v207;
  unsigned __int8 v208;
  uint64_t v209;
  const char *v210;
  NSObject *v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v220;
  int v221;
  const char *v222;
  int v223;
  const char *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  uint64_t v227;
  char *category;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE object[24];
  __int128 v233;
  void *__p;
  size_t v235;
  unint64_t v236;
  char v237;
  uint64_t v238;

  v238 = *MEMORY[0x24BDAC8D0];
  if (a1[4] != 1)
  {
    sub_20FD9DA4C(&v227);
    if (**(int **)(v227 + 56) > 4)
      return 0;
    v9 = *(unsigned __int8 *)(v227 + 72);
    v10 = sub_20E8C31DC(v227, "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (!v9 && v10 == 0)
      return 0;
    v214 = v9;
    v218 = &v227;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v220 = std::chrono::system_clock::now().__d_.__rep_;
    v221 = 4;
    v222 = "unknown file";
    v223 = 68;
    v225 = 0;
    v226 = 0;
    v224 = "unknown function";
    v13 = v227;
    v14 = (const char *)(v227 + 16);
    v212 = v227 + 16;
    if (*(char *)(v227 + 39) < 0)
    {
      v14 = *(const char **)(v227 + 16);
      v15 = *(_QWORD *)(v227 + 24);
      v39 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v39 & 1) != 0)
        goto LABEL_46;
    }
    else
    {
      v15 = *(unsigned __int8 *)(v227 + 39);
      v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v16 & 1) != 0)
        goto LABEL_46;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v233 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_46:
    if (byte_254A4A50F >= 0)
      v40 = (const char *)&xmmword_254A4A4F8;
    else
      v40 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v41 = byte_254A4A50F;
    else
      v41 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    *(_QWORD *)object = os_log_create(v40, v14);
    v42 = &object[8];
    if (v41 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v41 >= 0x17)
    {
      v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17)
        v43 = v41 | 7;
      v44 = v43 + 1;
      v42 = operator new(v43 + 1);
      *(_QWORD *)&object[16] = v41;
      *(_QWORD *)&v233 = v44 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v42;
    }
    else
    {
      BYTE7(v233) = v41;
      if (!v41)
      {
LABEL_60:
        v42[v41] = 0;
        BYTE8(v233) = 1;
        p_p = &__p;
        if (v15 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v15 >= 0x17)
        {
          v46 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v46 = v15 | 7;
          v47 = v46 + 1;
          p_p = operator new(v46 + 1);
          v235 = v15;
          v236 = v47 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v236) = v15;
          if (!v15)
            goto LABEL_68;
        }
        memmove(p_p, v14, v15);
LABEL_68:
        *((_BYTE *)p_p + v15) = 0;
        v237 = 1;
        v48 = *(NSObject **)object;
        if (SHIBYTE(v236) < 0)
          operator delete(__p);
        if (BYTE8(v233) && SBYTE7(v233) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v11 && *(_QWORD *)(v11 + 24))
        {
          v49 = _os_log_pack_size();
          v50 = (std::__shared_weak_count_vtbl *)operator new(v49, (std::align_val_t)8uLL);
          v51 = (std::__shared_weak_count *)operator new();
          v52 = v51;
          v51->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v51->__shared_owners_;
          v51->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v51->__shared_weak_owners_ = 0;
          v51[1].__vftable = v50;
          *(_QWORD *)object = v50;
          *(_QWORD *)&object[8] = v50;
          *(_QWORD *)&object[16] = v51;
          do
            v54 = __ldxr(p_shared_owners);
          while (__stxr(v54 + 1, p_shared_owners));
          v233 = 0uLL;
          __p = 0;
          do
            v55 = __ldaxr(p_shared_owners);
          while (__stlxr(v55 - 1, p_shared_owners));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v52);
          }
          v56 = *(_QWORD *)object;
          v57 = _os_log_pack_fill();
          v58 = a1[4];
          *(_DWORD *)v57 = 134217984;
          *(_QWORD *)(v57 + 4) = v58;
          v59 = operator new();
          v60 = *(unsigned __int8 *)(v13 + 39);
          v61 = v212;
          if ((v60 & 0x80u) != 0)
          {
            v61 = *(_QWORD *)(v13 + 16);
            v60 = *(_QWORD *)(v13 + 24);
          }
          *(_QWORD *)v59 = v56;
          *(_OWORD *)(v59 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v59 + 24) = v233;
          v233 = 0uLL;
          *(_QWORD *)(v59 + 40) = v61;
          *(_QWORD *)(v59 + 48) = v60;
          *(_BYTE *)(v59 + 56) = 16;
          category = 0;
          v230 = v59;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v230);
          v62 = v230;
          v230 = 0;
          if (v62)
          {
            v63 = *(std::__shared_weak_count **)(v62 + 32);
            if (v63)
            {
              v64 = (unint64_t *)&v63->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            v66 = *(std::__shared_weak_count **)(v62 + 16);
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            MEMORY[0x212BC6398](v62, 0x10F0C40B62ED6C6);
            v69 = category;
            category = 0;
            if (v69)
            {
              v70 = (std::__shared_weak_count *)*((_QWORD *)v69 + 4);
              if (v70)
              {
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (!v72)
                {
                  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                  std::__shared_weak_count::__release_weak(v70);
                }
              }
              v73 = (std::__shared_weak_count *)*((_QWORD *)v69 + 2);
              if (v73)
              {
                v74 = (unint64_t *)&v73->__shared_owners_;
                do
                  v75 = __ldaxr(v74);
                while (__stlxr(v75 - 1, v74));
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
              MEMORY[0x212BC6398](v69, 0x10F0C40B62ED6C6);
            }
          }
          v76 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
          v77 = v214;
          if (*((_QWORD *)&v233 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v80 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v81 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
        }
        else
        {
          os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
          v83 = a1[4];
          *(_DWORD *)object = 134217984;
          *(_QWORD *)&object[4] = v83;
          v84 = (void *)_os_log_send_and_compose_impl();
          v77 = v214;
          if (v84)
            free(v84);
        }
        if (v77)
        {
          sub_20E8C003C((uint64_t)&v218, "Channels per pixel supported is 1, configured value %lu", a1[4]);
          sub_20E863570((uint64_t)&v218);
        }
        sub_20E863570((uint64_t)&v218);
        v85 = v226;
        if (!v226)
          return 0;
        v86 = (unint64_t *)&v226->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
LABEL_309:
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
        return 0;
      }
    }
    memmove(v42, v40, v41);
    goto LABEL_60;
  }
  if (a1[3] != 2)
  {
    sub_20FD9DA4C(&v227);
    if (**(int **)(v227 + 56) > 4)
      return 0;
    v17 = *(unsigned __int8 *)(v227 + 72);
    v18 = sub_20E8C31DC(v227, "OSLogSurrogateAppender", 1, 0);
    v19 = v18;
    if (!v17 && v18 == 0)
      return 0;
    v215 = v17;
    v218 = &v227;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v220 = std::chrono::system_clock::now().__d_.__rep_;
    v221 = 4;
    v222 = "unknown file";
    v223 = 73;
    v225 = 0;
    v226 = 0;
    v224 = "unknown function";
    v21 = v227;
    v22 = (const char *)(v227 + 16);
    v213 = v227 + 16;
    if (*(char *)(v227 + 39) < 0)
    {
      v22 = *(const char **)(v227 + 16);
      v23 = *(_QWORD *)(v227 + 24);
    }
    else
    {
      v23 = *(unsigned __int8 *)(v227 + 39);
    }
    v95 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v233 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A50F >= 0)
      v96 = (const char *)&xmmword_254A4A4F8;
    else
      v96 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v97 = byte_254A4A50F;
    else
      v97 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    *(_QWORD *)object = os_log_create(v96, v22);
    v98 = &object[8];
    if (v97 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v97 >= 0x17)
    {
      v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v97 | 7) != 0x17)
        v99 = v97 | 7;
      v100 = v99 + 1;
      v98 = operator new(v99 + 1);
      *(_QWORD *)&object[16] = v97;
      *(_QWORD *)&v233 = v100 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v98;
    }
    else
    {
      BYTE7(v233) = v97;
      if (!v97)
      {
LABEL_151:
        v98[v97] = 0;
        BYTE8(v233) = 1;
        v101 = &__p;
        if (v23 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v23 >= 0x17)
        {
          v102 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v102 = v23 | 7;
          v103 = v102 + 1;
          v101 = operator new(v102 + 1);
          v235 = v23;
          v236 = v103 | 0x8000000000000000;
          __p = v101;
        }
        else
        {
          HIBYTE(v236) = v23;
          if (!v23)
            goto LABEL_159;
        }
        memmove(v101, v22, v23);
LABEL_159:
        *((_BYTE *)v101 + v23) = 0;
        v237 = 1;
        v104 = *(NSObject **)object;
        if (SHIBYTE(v236) < 0)
          operator delete(__p);
        if (BYTE8(v233) && SBYTE7(v233) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v19 && *(_QWORD *)(v19 + 24))
        {
          v105 = _os_log_pack_size();
          v106 = (std::__shared_weak_count_vtbl *)operator new(v105, (std::align_val_t)8uLL);
          v107 = (std::__shared_weak_count *)operator new();
          v108 = v107;
          v107->__shared_owners_ = 0;
          v109 = (unint64_t *)&v107->__shared_owners_;
          v107->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v107->__shared_weak_owners_ = 0;
          v107[1].__vftable = v106;
          *(_QWORD *)object = v106;
          *(_QWORD *)&object[8] = v106;
          *(_QWORD *)&object[16] = v107;
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
          v233 = 0uLL;
          __p = 0;
          do
            v111 = __ldaxr(v109);
          while (__stlxr(v111 - 1, v109));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v108);
          }
          v112 = *(_QWORD *)object;
          v113 = _os_log_pack_fill();
          v114 = a1[3];
          *(_DWORD *)v113 = 134217984;
          *(_QWORD *)(v113 + 4) = v114;
          v115 = operator new();
          v116 = *(unsigned __int8 *)(v21 + 39);
          v117 = v213;
          if ((v116 & 0x80u) != 0)
          {
            v117 = *(_QWORD *)(v21 + 16);
            v116 = *(_QWORD *)(v21 + 24);
          }
          *(_QWORD *)v115 = v112;
          *(_OWORD *)(v115 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v115 + 24) = v233;
          v233 = 0uLL;
          *(_QWORD *)(v115 + 40) = v117;
          *(_QWORD *)(v115 + 48) = v116;
          *(_BYTE *)(v115 + 56) = 16;
          category = 0;
          v230 = v115;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), &v230);
          v118 = v230;
          v230 = 0;
          if (v118)
          {
            v119 = *(std::__shared_weak_count **)(v118 + 32);
            if (v119)
            {
              v120 = (unint64_t *)&v119->__shared_owners_;
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
            v122 = *(std::__shared_weak_count **)(v118 + 16);
            if (v122)
            {
              v123 = (unint64_t *)&v122->__shared_owners_;
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            MEMORY[0x212BC6398](v118, 0x10F0C40B62ED6C6);
            v125 = category;
            category = 0;
            if (v125)
            {
              v126 = (std::__shared_weak_count *)*((_QWORD *)v125 + 4);
              if (v126)
              {
                v127 = (unint64_t *)&v126->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                if (!v128)
                {
                  ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                  std::__shared_weak_count::__release_weak(v126);
                }
              }
              v129 = (std::__shared_weak_count *)*((_QWORD *)v125 + 2);
              if (v129)
              {
                v130 = (unint64_t *)&v129->__shared_owners_;
                do
                  v131 = __ldaxr(v130);
                while (__stlxr(v131 - 1, v130));
                if (!v131)
                {
                  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                  std::__shared_weak_count::__release_weak(v129);
                }
              }
              MEMORY[0x212BC6398](v125, 0x10F0C40B62ED6C6);
            }
          }
          v132 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
          v133 = v215;
          if (*((_QWORD *)&v233 + 1))
          {
            v134 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          v136 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v137 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
        }
        else
        {
          os_log_type_enabled(v104, OS_LOG_TYPE_ERROR);
          v139 = a1[3];
          *(_DWORD *)object = 134217984;
          *(_QWORD *)&object[4] = v139;
          v140 = (void *)_os_log_send_and_compose_impl();
          v133 = v215;
          if (v140)
            free(v140);
        }
        if (v133)
        {
          sub_20E8C003C((uint64_t)&v218, "Number of scales per octave supported is 2, configured value %lu", a1[3]);
          sub_20E863570((uint64_t)&v218);
        }
        sub_20E863570((uint64_t)&v218);
        v85 = v226;
        if (!v226)
          return 0;
        v141 = (unint64_t *)&v226->__shared_owners_;
        do
          v87 = __ldaxr(v141);
        while (__stlxr(v87 - 1, v141));
        goto LABEL_309;
      }
    }
    memmove(v98, v96, v97);
    goto LABEL_151;
  }
  v2 = *a1;
  v3 = a1[1];
  v227 = v2;
  v217 = v3;
  if ((v2 - 160) >= 0x1E1)
  {
    sub_20FD9DA4C(&v216);
    if (**(int **)(v216 + 56) > 4)
      return 0;
    v24 = *(unsigned __int8 *)(v216 + 72);
    v25 = sub_20E8C31DC(v216, "OSLogSurrogateAppender", 1, 0);
    v26 = v25;
    if (!v24 && v25 == 0)
      return 0;
    v218 = &v216;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v220 = std::chrono::system_clock::now().__d_.__rep_;
    v221 = 4;
    v222 = "unknown file";
    v223 = 82;
    v225 = 0;
    v226 = 0;
    v224 = "unknown function";
    v28 = *v218;
    v29 = *v218 + 16;
    if (*(char *)(*v218 + 39) < 0)
    {
      v31 = *(const char **)(v28 + 16);
      v30 = *(_QWORD *)(v28 + 24);
    }
    else
    {
      v30 = *(unsigned __int8 *)(*v218 + 39);
      v31 = (const char *)(*v218 + 16);
    }
    v149 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v149 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v233 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A50F >= 0)
      v150 = (const char *)&xmmword_254A4A4F8;
    else
      v150 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v151 = byte_254A4A50F;
    else
      v151 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    *(_QWORD *)object = os_log_create(v150, v31);
    v152 = &object[8];
    if (v151 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v151 >= 0x17)
    {
      v153 = v26;
      v154 = v31;
      v155 = v28;
      v156 = v24;
      v157 = v29;
      v158 = (v151 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v151 | 7) != 0x17)
        v158 = v151 | 7;
      v159 = v158 + 1;
      v152 = operator new(v158 + 1);
      *(_QWORD *)&object[16] = v151;
      *(_QWORD *)&v233 = v159 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v152;
      v29 = v157;
      v24 = v156;
      v28 = v155;
      v31 = v154;
      v26 = v153;
    }
    else
    {
      BYTE7(v233) = v151;
      if (!v151)
      {
LABEL_241:
        v152[v151] = 0;
        BYTE8(v233) = 1;
        v160 = &__p;
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v30 >= 0x17)
        {
          v161 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17)
            v161 = v30 | 7;
          v162 = v161 + 1;
          v160 = operator new(v161 + 1);
          v235 = v30;
          v236 = v162 | 0x8000000000000000;
          __p = v160;
        }
        else
        {
          HIBYTE(v236) = v30;
          if (!v30)
            goto LABEL_249;
        }
        memmove(v160, v31, v30);
LABEL_249:
        *((_BYTE *)v160 + v30) = 0;
        v237 = 1;
        v163 = *(NSObject **)object;
        if (SHIBYTE(v236) < 0)
          operator delete(__p);
        if (BYTE8(v233) && SBYTE7(v233) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v26 && *(_QWORD *)(v26 + 24))
        {
          v164 = _os_log_pack_size();
          v165 = (std::__shared_weak_count_vtbl *)operator new(v164, (std::align_val_t)8uLL);
          v166 = (std::__shared_weak_count *)operator new();
          v167 = v166;
          v166->__shared_owners_ = 0;
          v168 = (unint64_t *)&v166->__shared_owners_;
          v166->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v166->__shared_weak_owners_ = 0;
          v166[1].__vftable = v165;
          *(_QWORD *)object = v165;
          *(_QWORD *)&object[8] = v165;
          *(_QWORD *)&object[16] = v166;
          do
            v169 = __ldxr(v168);
          while (__stxr(v169 + 1, v168));
          v233 = 0uLL;
          __p = 0;
          do
            v170 = __ldaxr(v168);
          while (__stlxr(v170 - 1, v168));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v167);
          }
          v171 = *(_QWORD *)object;
          v172 = _os_log_pack_fill();
          v173 = v227;
          v174 = v217;
          *(_DWORD *)v172 = 134218240;
          *(_QWORD *)(v172 + 4) = v173;
          *(_WORD *)(v172 + 12) = 2048;
          *(_QWORD *)(v172 + 14) = v174;
          v175 = operator new();
          v176 = *(unsigned __int8 *)(v28 + 39);
          if ((v176 & 0x80u) == 0)
            v177 = v29;
          else
            v177 = *(_QWORD *)(v28 + 16);
          if ((v176 & 0x80u) != 0)
            v176 = *(_QWORD *)(v28 + 24);
          *(_QWORD *)v175 = v171;
          *(_OWORD *)(v175 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v175 + 24) = v233;
          v233 = 0uLL;
          *(_QWORD *)(v175 + 40) = v177;
          *(_QWORD *)(v175 + 48) = v176;
          *(_BYTE *)(v175 + 56) = 16;
          category = 0;
          v230 = v175;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), &v230);
          v178 = v230;
          v230 = 0;
          if (v178)
          {
            v179 = *(std::__shared_weak_count **)(v178 + 32);
            if (v179)
            {
              v180 = (unint64_t *)&v179->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
            v182 = *(std::__shared_weak_count **)(v178 + 16);
            if (v182)
            {
              v183 = (unint64_t *)&v182->__shared_owners_;
              do
                v184 = __ldaxr(v183);
              while (__stlxr(v184 - 1, v183));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
            }
            MEMORY[0x212BC6398](v178, 0x10F0C40B62ED6C6);
            v185 = category;
            category = 0;
            if (v185)
            {
              v186 = (std::__shared_weak_count *)*((_QWORD *)v185 + 4);
              if (v186)
              {
                v187 = (unint64_t *)&v186->__shared_owners_;
                do
                  v188 = __ldaxr(v187);
                while (__stlxr(v188 - 1, v187));
                if (!v188)
                {
                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                  std::__shared_weak_count::__release_weak(v186);
                }
              }
              v189 = (std::__shared_weak_count *)*((_QWORD *)v185 + 2);
              if (v189)
              {
                v190 = (unint64_t *)&v189->__shared_owners_;
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (!v191)
                {
                  ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                  std::__shared_weak_count::__release_weak(v189);
                }
              }
              MEMORY[0x212BC6398](v185, 0x10F0C40B62ED6C6);
            }
          }
          v192 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
          if (*((_QWORD *)&v233 + 1))
          {
            v193 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
            do
              v194 = __ldaxr(v193);
            while (__stlxr(v194 - 1, v193));
            if (!v194)
            {
              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
              std::__shared_weak_count::__release_weak(v192);
            }
          }
          v195 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v196 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
        }
        else
        {
          os_log_type_enabled(v163, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 134218240;
          *(_QWORD *)&object[4] = v227;
          *(_WORD *)&object[12] = 2048;
          *(_QWORD *)&object[14] = v217;
          v198 = (void *)_os_log_send_and_compose_impl();
          if (v198)
            free(v198);
        }
        if (v24)
        {
          sub_20E8C003C((uint64_t)&v218, "Width must be between 160 and 640, configured dimension %lux%lu", v227, v217);
          sub_20E863570((uint64_t)&v218);
        }
        sub_20E863570((uint64_t)&v218);
        v85 = v226;
        if (!v226)
          return 0;
        v199 = (unint64_t *)&v226->__shared_owners_;
        do
          v87 = __ldaxr(v199);
        while (__stlxr(v87 - 1, v199));
        goto LABEL_309;
      }
    }
    memmove(v152, v150, v151);
    goto LABEL_241;
  }
  if ((v3 - 160) >= 0x1F61)
  {
    sub_20FD9DA4C(&v216);
    if (**(int **)(v216 + 56) > 4)
      return 0;
    v32 = *(unsigned __int8 *)(v216 + 72);
    v33 = sub_20E8C31DC(v216, "OSLogSurrogateAppender", 1, 0);
    v34 = v33 ? v33 + 16 : 0;
    if (!v32 && !v33)
      return 0;
    v218 = &v216;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v220 = std::chrono::system_clock::now().__d_.__rep_;
    v221 = 4;
    v222 = "unknown file";
    v223 = 88;
    v225 = 0;
    v226 = 0;
    v224 = "unknown function";
    v35 = *v218;
    v36 = (uint64_t *)(*v218 + 16);
    if (*(char *)(*v218 + 39) < 0)
    {
      v38 = *(char **)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
    }
    else
    {
      v37 = *(unsigned __int8 *)(*v218 + 39);
      v38 = (char *)(*v218 + 16);
    }
    category = v38;
    v229 = v37;
    v200 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v200 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v233 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v201 = byte_254A4A50F;
    if (byte_254A4A50F >= 0)
    {
      v202 = (const char *)&xmmword_254A4A4F8;
    }
    else
    {
      v201 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      v202 = (const char *)xmmword_254A4A4F8;
    }
    v230 = (uint64_t)v202;
    v231 = v201;
    *(_QWORD *)object = os_log_create(v202, category);
    sub_20E86E5A8(&object[8], (uint64_t)&v230);
    sub_20E86E5A8(&__p, (uint64_t)&category);
    v203 = *(NSObject **)object;
    sub_20E86E44C((uint64_t)object);
    sub_20FD9DB40(v34, v36, v203, OS_LOG_TYPE_ERROR, &v227, &v217);
    if (v32)
    {
      sub_20E8C003C((uint64_t)&v218, "Height must be between supported is 160 and 8192, configured dimension %lux%lu", v227, v217);
      sub_20E863570((uint64_t)&v218);
    }
  }
  else
  {
    v5 = v2 < 0x141 || v3 < 0x141;
    v6 = 4;
    if (!v5)
      v6 = 5;
    v7 = a1 + 2;
    if (a1[2] == v6)
      return 1;
    if (v5)
    {
      sub_20FD9DA4C(&v216);
      if (**(int **)(v216 + 56) > 4)
        return 0;
      v88 = *(unsigned __int8 *)(v216 + 72);
      v89 = sub_20E8C31DC(v216, "OSLogSurrogateAppender", 1, 0);
      v90 = v89 ? v89 + 16 : 0;
      if (!v88 && !v89)
        return 0;
      v218 = &v216;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v220 = std::chrono::system_clock::now().__d_.__rep_;
      v221 = 4;
      v222 = "unknown file";
      v223 = 97;
      v225 = 0;
      v226 = 0;
      v224 = "unknown function";
      v91 = *v218;
      v92 = (uint64_t *)(*v218 + 16);
      if (*(char *)(*v218 + 39) < 0)
      {
        v94 = *(char **)(v91 + 16);
        v93 = *(_QWORD *)(v91 + 24);
      }
      else
      {
        v93 = *(unsigned __int8 *)(*v218 + 39);
        v94 = (char *)(*v218 + 16);
      }
      category = v94;
      v229 = v93;
      v204 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v233 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v205 = byte_254A4A50F;
      if (byte_254A4A50F >= 0)
      {
        v206 = (const char *)&xmmword_254A4A4F8;
      }
      else
      {
        v205 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
        v206 = (const char *)xmmword_254A4A4F8;
      }
      v230 = (uint64_t)v206;
      v231 = v205;
      *(_QWORD *)object = os_log_create(v206, category);
      sub_20E86E5A8(&object[8], (uint64_t)&v230);
      sub_20E86E5A8(&__p, (uint64_t)&category);
      v207 = *(NSObject **)object;
      sub_20E86E44C((uint64_t)object);
      sub_20FD9DFAC(v90, v92, v207, OS_LOG_TYPE_ERROR, &v227, &v217, v7);
      if (v88)
      {
        sub_20E8C003C((uint64_t)&v218, "num_octaves for dimension <= 320 should be 4, configured dimension %lux%lu num_octaves %lu", v227, v217, *v7);
        sub_20E863570((uint64_t)&v218);
      }
    }
    else
    {
      sub_20FD9DA4C(&v216);
      if (**(int **)(v216 + 56) > 4)
        return 0;
      v142 = *(unsigned __int8 *)(v216 + 72);
      v143 = sub_20E8C31DC(v216, "OSLogSurrogateAppender", 1, 0);
      v144 = v143 ? v143 + 16 : 0;
      if (!v142 && !v143)
        return 0;
      v218 = &v216;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v220 = std::chrono::system_clock::now().__d_.__rep_;
      v221 = 4;
      v222 = "unknown file";
      v223 = 102;
      v225 = 0;
      v226 = 0;
      v224 = "unknown function";
      v145 = *v218;
      v146 = (uint64_t *)(*v218 + 16);
      if (*(char *)(*v218 + 39) < 0)
      {
        v148 = *(char **)(v145 + 16);
        v147 = *(_QWORD *)(v145 + 24);
      }
      else
      {
        v147 = *(unsigned __int8 *)(*v218 + 39);
        v148 = (char *)(*v218 + 16);
      }
      category = v148;
      v229 = v147;
      v208 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v233 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v209 = byte_254A4A50F;
      if (byte_254A4A50F >= 0)
      {
        v210 = (const char *)&xmmword_254A4A4F8;
      }
      else
      {
        v209 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
        v210 = (const char *)xmmword_254A4A4F8;
      }
      v230 = (uint64_t)v210;
      v231 = v209;
      *(_QWORD *)object = os_log_create(v210, category);
      sub_20E86E5A8(&object[8], (uint64_t)&v230);
      sub_20E86E5A8(&__p, (uint64_t)&category);
      v211 = *(NSObject **)object;
      sub_20E86E44C((uint64_t)object);
      sub_20FD9E434(v144, v146, v211, OS_LOG_TYPE_ERROR, &v227, &v217, v7);
      if (v142)
      {
        sub_20E8C003C((uint64_t)&v218, "num_octaves for dimension > 320 should be 5, configured dimension %lux%lu num_octaves %lu", v227, v217, *v7);
        sub_20E863570((uint64_t)&v218);
      }
    }
  }
  sub_20E863714((uint64_t)&v218);
  return 0;
}

void sub_20FD9D6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20FD9D724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD9D738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD9D74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *object,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a38 && a37 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20FD9DA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20FD9DA4C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C520);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C520))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C518);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C520);
  }
  *a1 = qword_254A6C518;
}

void sub_20FD9DAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C520);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C520);
  _Unwind_Resume(a1);
}

void sub_20FD9DB40(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, uint64_t *a6)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[24];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v14 = v13;
    v13->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)v42 = v12;
    *(_QWORD *)&v42[8] = v12;
    *(_QWORD *)&v42[16] = v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v43 = 0uLL;
    v44 = 0;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
    }
    v18 = *(_QWORD *)v42;
    v19 = _os_log_pack_fill();
    v20 = *a5;
    v21 = *a6;
    *(_DWORD *)v19 = 134218240;
    *(_QWORD *)(v19 + 4) = v20;
    *(_WORD *)(v19 + 12) = 2048;
    *(_QWORD *)(v19 + 14) = v21;
    v22 = operator new();
    v23 = *((unsigned __int8 *)a2 + 23);
    if ((v23 & 0x80u) == 0)
      v24 = a2;
    else
      v24 = (uint64_t *)*a2;
    if ((v23 & 0x80u) != 0)
      v23 = a2[1];
    *(_QWORD *)v22 = v18;
    *(_OWORD *)(v22 + 8) = *(_OWORD *)&v42[8];
    *(_OWORD *)&v42[8] = 0uLL;
    *(_OWORD *)(v22 + 24) = v43;
    v43 = 0uLL;
    *(_QWORD *)(v22 + 40) = v24;
    *(_QWORD *)(v22 + 48) = v23;
    *(_BYTE *)(v22 + 56) = type;
    v41 = v22;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v41);
    v25 = v41;
    v41 = 0;
    if (v25)
    {
      v26 = *(std::__shared_weak_count **)(v25 + 32);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = *(std::__shared_weak_count **)(v25 + 16);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      MEMORY[0x212BC6398](v25, 0x10F0C40B62ED6C6);
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = *(std::__shared_weak_count **)&v42[16];
    if (*(_QWORD *)&v42[16])
    {
      v36 = (unint64_t *)(*(_QWORD *)&v42[16] + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v38 = *a5;
    v39 = *a6;
    *(_DWORD *)v42 = 134218240;
    *(_QWORD *)&v42[4] = v38;
    *(_WORD *)&v42[12] = 2048;
    *(_QWORD *)&v42[14] = v39;
    v40 = (void *)_os_log_send_and_compose_impl();
    if (v40)
      free(v40);
  }
}

void sub_20FD9DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FD9DF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD9DF88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD9DFAC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  size_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[24];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v13 = _os_log_pack_size();
    v14 = (std::__shared_weak_count_vtbl *)operator new(v13, (std::align_val_t)8uLL);
    v15 = (std::__shared_weak_count *)operator new();
    v16 = v15;
    v15->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v15->__shared_weak_owners_ = 0;
    v15[1].__vftable = v14;
    *(_QWORD *)v46 = v14;
    *(_QWORD *)&v46[8] = v14;
    *(_QWORD *)&v46[16] = v15;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v47 = 0uLL;
    v48 = 0;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
    }
    v20 = *(_QWORD *)v46;
    v21 = _os_log_pack_fill();
    v22 = *a5;
    v23 = *a6;
    v24 = *a7;
    *(_DWORD *)v21 = 134218496;
    *(_QWORD *)(v21 + 4) = v22;
    *(_WORD *)(v21 + 12) = 2048;
    *(_QWORD *)(v21 + 14) = v23;
    *(_WORD *)(v21 + 22) = 2048;
    *(_QWORD *)(v21 + 24) = v24;
    v25 = operator new();
    v26 = *((unsigned __int8 *)a2 + 23);
    if ((v26 & 0x80u) == 0)
      v27 = a2;
    else
      v27 = (uint64_t *)*a2;
    if ((v26 & 0x80u) != 0)
      v26 = a2[1];
    *(_QWORD *)v25 = v20;
    *(_OWORD *)(v25 + 8) = *(_OWORD *)&v46[8];
    *(_OWORD *)&v46[8] = 0uLL;
    *(_OWORD *)(v25 + 24) = v47;
    v47 = 0uLL;
    *(_QWORD *)(v25 + 40) = v27;
    *(_QWORD *)(v25 + 48) = v26;
    *(_BYTE *)(v25 + 56) = type;
    v45 = v25;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v45);
    v28 = v45;
    v45 = 0;
    if (v28)
    {
      v29 = *(std::__shared_weak_count **)(v28 + 32);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = *(std::__shared_weak_count **)(v28 + 16);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      MEMORY[0x212BC6398](v28, 0x10F0C40B62ED6C6);
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = *(std::__shared_weak_count **)&v46[16];
    if (*(_QWORD *)&v46[16])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v46[16] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v41 = *a5;
    v42 = *a6;
    v43 = *a7;
    *(_DWORD *)v46 = 134218496;
    *(_QWORD *)&v46[4] = v41;
    *(_WORD *)&v46[12] = 2048;
    *(_QWORD *)&v46[14] = v42;
    *(_WORD *)&v46[22] = 2048;
    *(_QWORD *)&v47 = v43;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }
}

void sub_20FD9E3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FD9E3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD9E410(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FD9E434(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  size_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[24];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v13 = _os_log_pack_size();
    v14 = (std::__shared_weak_count_vtbl *)operator new(v13, (std::align_val_t)8uLL);
    v15 = (std::__shared_weak_count *)operator new();
    v16 = v15;
    v15->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v15->__shared_weak_owners_ = 0;
    v15[1].__vftable = v14;
    *(_QWORD *)v46 = v14;
    *(_QWORD *)&v46[8] = v14;
    *(_QWORD *)&v46[16] = v15;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v47 = 0uLL;
    v48 = 0;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
    }
    v20 = *(_QWORD *)v46;
    v21 = _os_log_pack_fill();
    v22 = *a5;
    v23 = *a6;
    v24 = *a7;
    *(_DWORD *)v21 = 134218496;
    *(_QWORD *)(v21 + 4) = v22;
    *(_WORD *)(v21 + 12) = 2048;
    *(_QWORD *)(v21 + 14) = v23;
    *(_WORD *)(v21 + 22) = 2048;
    *(_QWORD *)(v21 + 24) = v24;
    v25 = operator new();
    v26 = *((unsigned __int8 *)a2 + 23);
    if ((v26 & 0x80u) == 0)
      v27 = a2;
    else
      v27 = (uint64_t *)*a2;
    if ((v26 & 0x80u) != 0)
      v26 = a2[1];
    *(_QWORD *)v25 = v20;
    *(_OWORD *)(v25 + 8) = *(_OWORD *)&v46[8];
    *(_OWORD *)&v46[8] = 0uLL;
    *(_OWORD *)(v25 + 24) = v47;
    v47 = 0uLL;
    *(_QWORD *)(v25 + 40) = v27;
    *(_QWORD *)(v25 + 48) = v26;
    *(_BYTE *)(v25 + 56) = type;
    v45 = v25;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v45);
    v28 = v45;
    v45 = 0;
    if (v28)
    {
      v29 = *(std::__shared_weak_count **)(v28 + 32);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = *(std::__shared_weak_count **)(v28 + 16);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      MEMORY[0x212BC6398](v28, 0x10F0C40B62ED6C6);
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = *(std::__shared_weak_count **)&v46[16];
    if (*(_QWORD *)&v46[16])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v46[16] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v41 = *a5;
    v42 = *a6;
    v43 = *a7;
    *(_DWORD *)v46 = 134218496;
    *(_QWORD *)&v46[4] = v41;
    *(_WORD *)&v46[12] = 2048;
    *(_QWORD *)&v46[14] = v42;
    *(_WORD *)&v46[22] = 2048;
    *(_QWORD *)&v47 = v43;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }
}

void sub_20FD9E860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FD9E884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD9E898(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD9E8BC(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v21;
  unsigned __int16 *v22;
  _BYTE *v23;

  if (a3 && a6)
  {
    v7 = (unsigned __int16 *)result;
    v8 = 0;
    do
    {
      v21 = v8;
      v22 = v7;
      v9 = &v7[a3];
      v23 = a2;
      do
      {
        v10 = *v7;
        if (v10 >= 0xFF01)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/GaussianPyramidGeneratorUtils.cpp", 38, (uint64_t)"v <= 65280", 10, (uint64_t)"overflow detected resulting in invalid result", 45, (void (*)(void **))sub_21023DDB0);
          v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v14 = qword_254A6DE40;
            v13 = qword_254A6DE48;
            while (v14 != v13)
            {
              v16 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v14;
              v15 = *(_QWORD *)(v14 + 8);
              v14 += 16;
              v16(v15, "v <= 65280", 10, "overflow detected resulting in invalid result", 45);
            }
          }
          v12 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          result = qword_254A6DE58(unk_254A6DE60, "v <= 65280", 10, "overflow detected resulting in invalid result", 45);
        }
        *a2++ = (unsigned __int16)(v10 + 128) >> 8;
        ++v7;
      }
      while (v7 != v9);
      v8 = v21 + 1;
      v7 = &v22[a4];
      a2 = &v23[a5];
    }
    while (v21 + 1 != a6);
  }
  return result;
}

uint64_t sub_20FD9EACC(uint64_t a1, __int128 *a2)
{
  int *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v3 = (int *)(a1 + 8);
  *(_OWORD *)(a1 + 48) = xmmword_2103C0490;
  *(_OWORD *)(a1 + 64) = unk_2103C04A0;
  *(_OWORD *)(a1 + 16) = xmmword_2103C0470;
  *(_OWORD *)(a1 + 32) = unk_2103C0480;
  *(_OWORD *)(a1 + 80) = xmmword_2103C04B0;
  *(_OWORD *)(a1 + 96) = xmmword_2103C04C0;
  *(_OWORD *)(a1 + 144) = xmmword_2103C04F0;
  *(_OWORD *)(a1 + 160) = unk_2103C0500;
  *(_OWORD *)(a1 + 112) = unk_2103C04D0;
  *(_OWORD *)(a1 + 128) = xmmword_2103C04E0;
  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(a1 + 40) = a2[2];
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  *(_OWORD *)(a1 + 104) = a2[6];
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[9];
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  v12 = (uint64_t *)operator new();
  sub_20FD9F948(v12, (unint64_t *)(a1 + 16), (_OWORD *)(a1 + 96), *v3);
  v13 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v12;
  if (v13)
  {
    v14 = v13[29];
    if (v14)
    {
      v15 = v13[30];
      v16 = (void *)v13[29];
      if (v15 != v14)
      {
        v17 = v13[30];
        do
        {
          v19 = *(void **)(v17 - 24);
          v17 -= 24;
          v18 = v19;
          if (v19)
          {
            *(_QWORD *)(v15 - 16) = v18;
            operator delete(v18);
          }
          v15 = v17;
        }
        while (v17 != v14);
        v16 = (void *)v13[29];
      }
      v13[30] = v14;
      operator delete(v16);
    }
    v20 = (void *)v13[24];
    if (v20)
    {
      v13[25] = v20;
      operator delete(v20);
    }
    MEMORY[0x212BC6398](v13, 0x1030C40F7CA4485);
  }
  return a1;
}

void sub_20FD9EC30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v2, 0x1030C40F7CA4485);
  sub_20FD9EC70(v1);
  _Unwind_Resume(a1);
}

void sub_20FD9EC5C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FD9EC70(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FD9EC70(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[29];
    if (v3)
    {
      v4 = v2[30];
      v5 = (void *)v2[29];
      if (v4 != v3)
      {
        v6 = v2[30];
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = (void *)v2[29];
      }
      v2[30] = v3;
      operator delete(v5);
    }
    v9 = (void *)v2[24];
    if (v9)
    {
      v2[25] = v9;
      operator delete(v9);
    }
    MEMORY[0x212BC6398](v2, 0x1030C40F7CA4485);
  }
  return a1;
}

void sub_20FD9ED18(uint64_t **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  BOOL v64;
  signed int v66;
  int32x4_t v67;
  uint64_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  __int32 v90;
  unint64_t v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  unint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  unint64_t *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  _OWORD *v128;
  unint64_t *v129;
  uint64_t v130;
  __int128 v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t *v135;
  unint64_t v136;
  int v138;
  unint64_t v140;
  _QWORD *v142;
  unint64_t v143;
  _DWORD *v144;
  uint64_t *v145;
  unint64_t v146;
  _QWORD *v148;
  _DWORD v149[13];
  int v150;
  int32x2_t v151;
  int v152;
  _QWORD v153[4];
  int v154;
  double v155[2];
  int32x2_t v156;
  __int128 v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = (uint64_t *)(a2 + 48);
  v10 = *a1;
  v10[21] = 0;
  v10[22] = 0;
  v11 = v10[1];
  if (v11 <= 1)
    v11 = 1;
  v10[23] = v11 - 1;
  v12 = (void *)v10[24];
  v13 = v10[25] - (_QWORD)v12;
  if (v13 >= 1)
    bzero(v12, 8 * (((unint64_t)v13 >> 3) - ((unint64_t)v13 > 7)) + 8);
  v10[27] = 0;
  v10[28] = 0;
  v14 = *v10;
  if (*v10)
  {
    v15 = v10[29];
    if (v14 == 1)
    {
      v16 = 0;
LABEL_11:
      v20 = v14 - v16;
      v21 = (_QWORD *)(v15 + 24 * v16 + 8);
      do
      {
        *v21 = *(v21 - 1);
        v21 += 3;
        --v20;
      }
      while (v20);
      goto LABEL_13;
    }
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    v17 = (uint64_t *)(v15 + 24);
    v18 = v14 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v19 = *v17;
      *(v17 - 2) = *(v17 - 3);
      v17[1] = v19;
      v17 += 6;
      v18 -= 2;
    }
    while (v18);
    if (v14 != v16)
      goto LABEL_11;
  }
LABEL_13:
  if ((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) > 0)
    bzero(*(void **)a6, 4 * (((*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2) - (*(_QWORD *)(a6 + 8) - *(_QWORD *)a6 > 3uLL)) + 4);
  v22 = *(void **)(a6 + 24);
  v23 = *(_QWORD *)(a6 + 32) - (_QWORD)v22;
  if (v23 >= 1)
    bzero(v22, 4 * (((unint64_t)v23 >> 2) - ((unint64_t)v23 > 3)) + 4);
  v24 = *(void **)(a6 + 48);
  v25 = *(_QWORD *)(a6 + 56) - (_QWORD)v24;
  if (v25 >= 1)
    bzero(v24, 4 * (((unint64_t)v25 >> 2) - ((unint64_t)v25 > 3)) + 4);
  v26 = *(void **)(a6 + 72);
  v27 = *(_QWORD *)(a6 + 80) - (_QWORD)v26;
  if (v27 >= 1)
    bzero(v26, 4 * (((unint64_t)v27 >> 2) - ((unint64_t)v27 > 3)) + 4);
  v28 = *(void **)(a6 + 96);
  v29 = *(_QWORD *)(a6 + 104) - (_QWORD)v28;
  if (v29 >= 1)
    bzero(v28, 4 * (((unint64_t)v29 >> 2) - ((unint64_t)v29 > 3)) + 4);
  v30 = *(void **)(a6 + 120);
  v31 = *(_QWORD *)(a6 + 128) - (_QWORD)v30;
  if (v31 >= 1)
    bzero(v30, 4 * (((unint64_t)v31 >> 2) - ((unint64_t)v31 > 3)) + 4);
  v32 = v8 - v7;
  v33 = *(void **)(a6 + 144);
  v34 = *(_QWORD *)(a6 + 152) - (_QWORD)v33;
  if (v34 >= 1)
    bzero(v33, 4 * (((unint64_t)v34 >> 2) - ((unint64_t)v34 > 3)) + 4);
  v35 = v32 >> 4;
  v36 = *(void **)(a6 + 168);
  v37 = *(_QWORD *)(a6 + 176) - (_QWORD)v36;
  if (v37 >= 1)
    bzero(v36, 4 * (((unint64_t)v37 >> 2) - ((unint64_t)v37 > 3)) + 4);
  v38 = 954437177 * v35;
  v39 = *(void **)(a6 + 192);
  v40 = *(_QWORD *)(a6 + 200) - (_QWORD)v39;
  if (v40 >= 1)
    bzero(v39, 4 * (((unint64_t)v40 >> 2) - ((unint64_t)v40 > 3)) + 4);
  v145 = v9;
  v41 = *(void **)(a6 + 216);
  v42 = *(_QWORD *)(a6 + 224) - (_QWORD)v41;
  if (v42 >= 1)
    bzero(v41, 4 * (((unint64_t)v42 >> 2) - ((unint64_t)v42 > 3)) + 4);
  if (v38 > 2)
  {
    v43 = 1;
    while (1)
    {
      v44 = v43 - 1;
      v148 = (_QWORD *)(*a3 + 24 * (v43 - 1));
      v45 = v148[1] - *v148;
      if (v45)
        break;
LABEL_35:
      if (++v43 == v38 - 1)
        return;
    }
    v46 = 0;
    v140 = *(_QWORD *)(a5 + 8 * v44);
    v47 = v45 >> 3;
    v143 = v43 - 1;
    v144 = &v149[18 * (v43 & 1)];
    v142 = (_QWORD *)(a6 + 24 * v44);
    v48 = (double)(16 << (v43 >> 1));
    if (v47 <= 1)
      v47 = 1;
    v146 = v47;
    v138 = 64 << (v43 >> 1);
    while (1)
    {
      v51 = (*a1)[29];
      v52 = *(_QWORD *)(*v148 + 8 * v46);
      v53 = (v52 >> 23) & 0xF;
      if (v43 != v53)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KPValidatorAndRefiner.cpp", 131, (uint64_t)"scale == kp_scale", 17, (uint64_t)"scale mismatch", 14, (void (*)(void **))sub_21023DDB0);
        v54 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v55 = qword_254A6DE40;
          v56 = qword_254A6DE48;
          while (v55 != v56)
          {
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v55)(*(_QWORD *)(v55 + 8), "scale == kp_scale", 17, "scale mismatch", 14);
            v55 += 16;
          }
        }
        v57 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "scale == kp_scale", 17, "scale mismatch", 14);
      }
      v58 = (unsigned __int16)(v52 & 0x3FF) >> (v53 >> 1);
      if (!v58)
        goto LABEL_43;
      v59 = ((v52 >> 10) & 0x1FFF) >> (v53 >> 1);
      v60 = *v145 + 144 * v43;
      v61 = *(_DWORD *)(v60 + 48);
      v62 = *(_DWORD *)(v60 + 32) - 1;
      v63 = v61 - 1;
      v64 = !(_DWORD)v59 || v62 <= v58;
      if (v64 || v63 <= (int)v59)
        goto LABEL_43;
      v66 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(*v145 + 144 * v43 + 120) + 8 * v59)
                       + 2 * v58);
      sub_20FD9FDE0(v58, v59, v43, v145, v149);
      if (v150 != v66
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KPValidatorAndRefiner.cpp", 57, (uint64_t)"score == res_map_cube[1][1][1]", 30, (uint64_t)"score mismatch", 14, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v67 = *(int32x4_t *)(v144 + 5);
      v68 = v52 & 0x80000000000;
      if ((v52 & 0x80000000000) != 0)
      {
        v71 = (int32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 0xCuLL);
        v72.i32[0] = v144[1];
        v72.i32[1] = *v144;
        v72.i32[2] = v144[2];
        v71.i32[0] = HIDWORD(*(_QWORD *)(v144 + 3));
        v72.i32[3] = *(_QWORD *)(v144 + 3);
        v73 = vdupq_n_s32(v66);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgeq_s32(v73, v72), (int16x8_t)vcgeq_s32(v73, v71)))) & 1) != 0
          || v67.i32[3] <= v66)
        {
          goto LABEL_43;
        }
      }
      else
      {
        v69.i32[0] = *v144;
        v69.i32[1] = v144[2];
        v69.i64[1] = *(_QWORD *)(v144 + 3);
        v70 = vdupq_n_s32(v66);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgeq_s32(v69, v70), (int16x8_t)vcgeq_s32(v67, v70)))) & 1) != 0
          || v144[1] >= v66)
        {
          goto LABEL_43;
        }
      }
      LODWORD(v74) = (int)(v52 >> 11) >> 16;
      if ((v74 & 0x80000000) == 0)
        v74 = v74;
      else
        v74 = -(int)v74;
      v75 = v74 >> 5;
      if (v74 >> 5 >= 0x3F)
        v75 = 63;
      ++*(_DWORD *)(*v142 + 4 * v75);
      if (*(_QWORD *)(a4 + 8 * v143) > v74
        || v140 <= (uint64_t)(*(_QWORD *)(v51 + 24 * v143 + 8) - *(_QWORD *)(v51 + 24 * v143)) >> 3)
      {
        goto LABEL_43;
      }
      sub_20FDA056C(v149, (uint64_t)v153, &v151);
      if (!v154)
        break;
      *(_QWORD *)&v76 = v153[0];
      *((_QWORD *)&v76 + 1) = *(_QWORD *)((char *)&v153[1] + 4);
      v157 = v76;
      v156 = v151;
      if (sub_20FD9FB70((int *)&v157, (int *)&v156, v155))
      {
        v78 = v155[0];
        v77 = v155[1];
        v79 = sub_20E8A9B64(16, (double)v154);
        sub_20E8A9BB0(v79);
        v81 = v80;
        v82 = sub_20E8A9B64(16, (double)v152);
        v83 = sub_20E8A9B64(16, v81 * v82);
        v84 = 0;
        v85 = llround(v78 * v48);
        v86 = llround(v77 * v48);
        if (v85 <= -2048)
          v85 = -2048;
        if (v85 >= 2047)
          v85 = 2047;
        if (v86 <= -2048)
          v86 = -2048;
        if (v86 >= 2047)
          v86 = 2047;
        if (v85 >= 0)
          v87 = v85;
        else
          v87 = -v85;
        if (v86 >= 0)
          v88 = v86;
        else
          v88 = -v86;
        if (v87 > v138 || v88 > v138)
          goto LABEL_104;
        v89 = llround(v83 * 4.0);
        if (v89 <= -15)
          v89 = -15;
        if (v89 >= 15)
          v89 = 15;
        v90 = 32
            - (v151.i32[1] * (v86 >> (v43 >> 1))
             + 4 * v89 * v152
             + v151.i32[0] * (v85 >> (v43 >> 1)));
        v91 = (unsigned __int16)(v85 + (v58 << ((v43 >> 1) + 6))) | ((unsigned __int16)(v86 + ((_DWORD)v59 << ((v43 >> 1) + 6))) << 16) | ((unint64_t)(v89 + 16 * v43) << 40);
        v92 = v150 + (v90 >> 6);
        if (v92 < 0)
          v92 = -v92;
        v136 = v91 | ((unint64_t)(v92 & 0x7FFF) << 48) | (v68 << 20);
        v84 = 1;
        v93 = *a1;
        v94 = v43 - 1;
        if ((*a1)[28] >= v143)
        {
LABEL_111:
          v97 = v93[27];
          if (v97 < v59)
            goto LABEL_112;
          goto LABEL_108;
        }
      }
      else
      {
        v84 = 0;
        v93 = *a1;
        v94 = v43 - 1;
        if ((*a1)[28] >= v143)
          goto LABEL_111;
      }
LABEL_105:
      v93[28] = v94;
      v95 = (void *)v93[24];
      v96 = v93[25] - (_QWORD)v95;
      if (v96 >= 1)
      {
        bzero(v95, 8 * (((unint64_t)v96 >> 3) - ((unint64_t)v96 > 7)) + 8);
        v94 = v43 - 1;
      }
      v97 = 0;
      v93[27] = 0;
      v93[22] = 0;
      v93[23] = 0;
      v93[21] = 0;
      if (v59)
      {
LABEL_112:
        v98 = v93[21];
        v99 = v93[22];
        v100 = v94;
        v102 = v93[23];
        v101 = v93[24];
        v93[27] = v97 + 1;
        v93[22] = v99 + v98;
        v93[23] = v102 + 1;
        *(_QWORD *)(v101 + 8 * v102) = v98;
        v103 = v93[22];
        v104 = v93[23] % (unint64_t)v93[v100 + 1];
        v93[23] = v104;
        v93[21] = 0;
        v105 = v103 - *(_QWORD *)(v101 + 8 * v104);
        v93[22] = v105;
        v106 = v93[27];
        if (v106 >= v59)
        {
          v50 = 0;
          if (v105 >= v93[v143 + 11])
            goto LABEL_43;
        }
        else
        {
          do
          {
            v93[27] = v106 + 1;
            v93[22] = v105;
            v93[23] = v104 + 1;
            *(_QWORD *)(v101 + 8 * v104) = 0;
            v107 = v93[22];
            v104 = v93[23] % (unint64_t)v93[v143 + 1];
            v93[23] = v104;
            v93[21] = 0;
            v105 = v107 - *(_QWORD *)(v101 + 8 * v104);
            v93[22] = v105;
            v106 = v93[27];
          }
          while (v106 < v59);
          v50 = 0;
          if (v105 >= v93[v143 + 11])
            goto LABEL_43;
        }
        goto LABEL_117;
      }
LABEL_108:
      v50 = v93[21];
      if (v93[22] + v50 >= (unint64_t)v93[v94 + 11])
        goto LABEL_43;
LABEL_117:
      if (!v84)
        goto LABEL_42;
      v108 = (_QWORD *)(v93[29] + 24 * v143);
      v109 = v108 + 1;
      v110 = (unint64_t *)v108[1];
      v112 = v108 + 2;
      v111 = v108[2];
      if ((unint64_t)v110 < v111)
      {
        *v110 = v136;
        v49 = (uint64_t)(v110 + 1);
        goto LABEL_41;
      }
      v135 = v108 + 1;
      v113 = (unint64_t *)*v108;
      v114 = (uint64_t)v110 - *v108;
      v115 = v114 >> 3;
      v116 = (v114 >> 3) + 1;
      if (v116 >> 61)
        sub_20E867F44();
      v117 = v111 - (_QWORD)v113;
      if (v117 >> 2 > v116)
        v116 = v117 >> 2;
      if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
        v118 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v118 = v116;
      if (v118)
      {
        v133 = (char *)v110 - *v108;
        v134 = v114 >> 3;
        if (v118 >> 61)
          sub_20E877A38();
        v119 = v93[29] + 24 * v143;
        v120 = v118;
        v121 = operator new(8 * v118);
        v108 = (_QWORD *)v119;
        v118 = v120;
        v114 = (uint64_t)v133;
        v115 = v134;
        v122 = (unint64_t *)&v121[8 * v134];
        *v122 = v136;
        v49 = (uint64_t)(v122 + 1);
        v123 = (char *)((char *)v110 - (char *)v113);
        if (v110 == v113)
        {
LABEL_131:
          v109 = v135;
          *v108 = v122;
          *v135 = v49;
          *v112 = &v121[8 * v118];
          if (!v110)
            goto LABEL_41;
LABEL_139:
          operator delete(v110);
          goto LABEL_41;
        }
      }
      else
      {
        v121 = 0;
        v122 = (unint64_t *)(8 * v115);
        *(_QWORD *)(8 * v115) = v136;
        v49 = 8 * v115 + 8;
        v123 = (char *)((char *)v110 - (char *)v113);
        if (v110 == v113)
          goto LABEL_131;
      }
      v124 = (unint64_t)(v123 - 8);
      if (v124 < 0x58)
      {
        v109 = v135;
        do
        {
LABEL_137:
          v132 = *--v110;
          *--v122 = v132;
        }
        while (v110 != v113);
        goto LABEL_138;
      }
      v109 = v135;
      if ((unint64_t)((char *)v110 - v121 - v114) < 0x20)
        goto LABEL_137;
      v125 = (v124 >> 3) + 1;
      v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
      v127 = &v110[v126 / 0xFFFFFFFFFFFFFFF8];
      v122 = (unint64_t *)((char *)v122 - v126);
      v128 = &v121[8 * v115 - 16];
      v129 = v110 - 2;
      v130 = v125 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v131 = *(_OWORD *)v129;
        *(v128 - 1) = *((_OWORD *)v129 - 1);
        *v128 = v131;
        v128 -= 2;
        v129 -= 4;
        v130 -= 4;
      }
      while (v130);
      v110 = v127;
      if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_137;
LABEL_138:
      v110 = (unint64_t *)*v108;
      *v108 = v122;
      *v109 = v49;
      *v112 = &v121[8 * v118];
      if (v110)
        goto LABEL_139;
LABEL_41:
      *v109 = v49;
      v50 = v93[21];
LABEL_42:
      v93[21] = v50 + 1;
LABEL_43:
      if (++v46 == v146)
        goto LABEL_35;
    }
    v84 = 0;
LABEL_104:
    v93 = *a1;
    v94 = v43 - 1;
    if ((*a1)[28] >= v143)
      goto LABEL_111;
    goto LABEL_105;
  }
}

uint64_t *sub_20FD9F948(uint64_t *a1, unint64_t *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;

  *a1 = 10;
  *(_OWORD *)(a1 + 29) = 0u;
  v5 = (uint64_t)(a1 + 29);
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)(a1 + 27) = 0u;
  a1[31] = 0;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a2;
  v6 = *((_OWORD *)a2 + 1);
  v7 = *((_OWORD *)a2 + 2);
  v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 9) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 7) = v8;
  *(_OWORD *)(a1 + 5) = v7;
  *(_OWORD *)(a1 + 3) = v6;
  v9 = a3[1];
  v10 = a3[2];
  v11 = a3[3];
  *(_OWORD *)(a1 + 19) = a3[4];
  *(_OWORD *)(a1 + 17) = v11;
  *(_OWORD *)(a1 + 15) = v10;
  *(_OWORD *)(a1 + 13) = v9;
  *(_OWORD *)(a1 + 11) = *a3;
  v12 = a4 - 2;
  *a1 = a4 - 2;
  v13 = *a2;
  v14 = a2[1];
  if (*a2 <= v14)
    v13 = a2[1];
  v15 = 8 * (*a2 < v14);
  v16 = a2[2];
  v17 = a2[3];
  v18 = v13 >= v16;
  if (v13 <= v16)
    v13 = a2[2];
  if (!v18)
    v15 = 16;
  v19 = v13 >= v17;
  if (v13 <= v17)
    v13 = a2[3];
  if (!v19)
    v15 = 24;
  v20 = a2[4];
  v21 = a2[5];
  v22 = v13 >= v20;
  if (v13 <= v20)
    v13 = a2[4];
  if (!v22)
    v15 = 32;
  v23 = v13 >= v21;
  if (v13 <= v21)
    v13 = a2[5];
  if (!v23)
    v15 = 40;
  v24 = a2[6];
  v25 = a2[7];
  v26 = v13 >= v24;
  if (v13 <= v24)
    v13 = a2[6];
  if (!v26)
    v15 = 48;
  v27 = v13 >= v25;
  if (v13 <= v25)
    v13 = a2[7];
  if (!v27)
    v15 = 56;
  v28 = a2[8];
  v29 = v13 >= v28;
  if (v13 <= v28)
    v13 = a2[8];
  if (!v29)
    v15 = 64;
  v18 = v13 >= a2[9];
  v30 = 72;
  if (v18)
    v30 = v15;
  v31 = *(unint64_t *)((char *)a2 + v30);
  v41 = 0;
  if (v31)
  {
    sub_20F4F5E74((uint64_t)(a1 + 24), v31, &v41);
    v12 = *a1;
    v33 = a1[29];
    v32 = a1[30];
  }
  else
  {
    v33 = 0;
    v32 = 0;
  }
  v34 = a1[1];
  if (v34 <= 1)
    v34 = 1;
  a1[23] = v34 - 1;
  v35 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v33) >> 3);
  if (v12 > v35)
  {
    sub_20F0B7BF8(v5, v12 - v35);
    return a1;
  }
  if (v12 >= v35)
    return a1;
  v37 = v33 + 24 * v12;
  if (v32 != v37)
  {
    v38 = v32;
    do
    {
      v40 = *(void **)(v38 - 24);
      v38 -= 24;
      v39 = v40;
      if (v40)
      {
        *(_QWORD *)(v32 - 16) = v39;
        operator delete(v39);
      }
      v32 = v38;
    }
    while (v38 != v37);
  }
  a1[30] = v37;
  return a1;
}

void sub_20FD9FB48(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  sub_20E9DD680(v2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 200) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

BOOL sub_20FD9FB70(int *a1, int *a2, double *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  double v23;

  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3] * *a1;
  if (v8 + 0x40000000 < 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KPValidatorAndRefinerUtils.cpp", 48, (uint64_t)"i1 < (1 << 30) && i1 >= -(1 << 30)", 34, (uint64_t)"It is expected that a11*a22 is s31", 34, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_16;
  }
  v9 = v7 * v6;
  if (v9 + 0x40000000 < 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KPValidatorAndRefinerUtils.cpp", 49, (uint64_t)"i2 < (1 << 30) && i2 >= -(1 << 30)", 34, (uint64_t)"It is expected that a12*a21 is s31", 34, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_16;
  }
  if (v8 != v9)
  {
    v10 = sub_20E8A9B64(16, (double)(v8 - v9));
    sub_20E8A9BB0(v10);
    v12 = v11;
    v13 = a1[1];
    v14 = a2[1];
    v15 = a1[3] * *a2;
    if (v15 + 0x40000000 >= 0
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KPValidatorAndRefinerUtils.cpp", 48, (uint64_t)"i1 < (1 << 30) && i1 >= -(1 << 30)", 34, (uint64_t)"It is expected that a11*a22 is s31", 34, (void (*)(void **))sub_21023DDB0))
    {
      v16 = v14 * v13;
      if (v16 + 0x40000000 >= 0
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KPValidatorAndRefinerUtils.cpp", 49, (uint64_t)"i2 < (1 << 30) && i2 >= -(1 << 30)", 34, (uint64_t)"It is expected that a12*a21 is s31", 34, (void (*)(void **))sub_21023DDB0))
      {
        v17 = sub_20E8A9B64(16, (double)(v15 - v16));
        v18 = *a1;
        v19 = a1[2];
        v20 = *a2;
        v21 = a2[1] * v18;
        if (v21 + 0x40000000 >= 0
          || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KPValidatorAndRefinerUtils.cpp", 48, (uint64_t)"i1 < (1 << 30) && i1 >= -(1 << 30)", 34, (uint64_t)"It is expected that a11*a22 is s31", 34, (void (*)(void **))sub_21023DDB0))
        {
          v22 = v19 * v20;
          if (v22 + 0x40000000 >= 0
            || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KPValidatorAndRefinerUtils.cpp", 49, (uint64_t)"i2 < (1 << 30) && i2 >= -(1 << 30)", 34, (uint64_t)"It is expected that a12*a21 is s31", 34, (void (*)(void **))sub_21023DDB0))
          {
            v23 = sub_20E8A9B64(16, (double)(v21 - v22));
            *a3 = sub_20E8A9B64(16, v12 * v17);
            a3[1] = sub_20E8A9B64(16, v12 * v23);
            return v8 != v9;
          }
        }
      }
    }
LABEL_16:
    abort();
  }
  return v8 != v9;
}

uint64_t sub_20FD9FDE0(int a1, int a2, int a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t result;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  _DWORD *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;

  v5 = *a4;
  v6 = *a4 + 144 * a3;
  v7 = *(_QWORD *)(v6 - 56);
  v8 = *(_QWORD *)(v6 + 88);
  v9 = *(_QWORD *)(v6 + 232);
  v10 = *(_DWORD *)(v6 + 40);
  v11 = a1 - 1;
  v12 = a2 - 1;
  if ((a3 & 1) != 0)
  {
    v58 = (_DWORD *)(v5 + 144 * (a3 + 1));
    v59 = v58[10];
    v60 = v58[8] - 1;
    v61 = v58[12] - 1;
    v62 = v12 * v10;
    v63 = v12 >> 1;
    if (v61 < v12 >> 1)
      v63 = v61;
    if (v61 >= v63 + 1)
      v64 = v63 + 1;
    else
      v64 = v61;
    v65 = v9 + 2 * v63 * v59;
    v66 = v9 + 2 * v64 * v59;
    v67 = v10 * a2;
    v68 = a2 >> 1;
    if (v61 < a2 >> 1)
      v68 = v61;
    if (v61 >= v68 + 1)
      v69 = v68 + 1;
    else
      v69 = v61;
    v70 = v68 * v59;
    v71 = v69 * v59;
    v72 = a2 + 1;
    if (v61 >= (a2 + 1) >> 1)
      v73 = (a2 + 1) >> 1;
    else
      v73 = v61;
    if (v61 >= v73 + 1)
      v74 = v73 + 1;
    else
      v74 = v61;
    v75 = v11 >> 1;
    if (v60 < v11 >> 1)
      v75 = v60;
    if (v60 >= v75 + 1)
      v76 = v75 + 1;
    else
      v76 = v60;
    v77 = 2 * (v11 + v62);
    v78 = *(__int16 *)(v7 + v77);
    v79 = *(__int16 *)(v8 + v77);
    v80 = v11 & 1;
    *a5 = v78;
    a5[9] = v79;
    if ((v11 & 1 & v12) != 0)
    {
      v81 = (*(__int16 *)(v65 + 2 * v75)
           + *(__int16 *)(v65 + 2 * v76)
           + *(__int16 *)(v66 + 2 * v75)
           + *(__int16 *)(v66 + 2 * v76)
           + 2) >> 2;
      goto LABEL_46;
    }
    if ((v12 & 1) != 0 || (v11 & 1) == 0)
    {
      v81 = *(__int16 *)(v65 + 2 * v75);
      if ((v12 & 1) == 0 || (v11 & 1) != 0)
      {
LABEL_46:
        v83 = v73 * v59;
        v84 = v74 * v59;
        v85 = v9 + 2 * v70;
        v86 = v9 + 2 * v71;
        v87 = v72 * v10;
        v88 = 2 * (v11 + v67);
        v89 = *(__int16 *)(v7 + v88);
        a5[18] = v81;
        a5[3] = v89;
        a5[12] = *(__int16 *)(v8 + v88);
        if ((v80 & a2) != 0)
        {
          v90 = (*(__int16 *)(v85 + 2 * v75)
               + *(__int16 *)(v85 + 2 * v76)
               + *(__int16 *)(v86 + 2 * v75)
               + *(__int16 *)(v86 + 2 * v76)
               + 2) >> 2;
          goto LABEL_55;
        }
        if ((a2 & 1) != 0 || (v11 & 1) == 0)
        {
          v90 = *(__int16 *)(v85 + 2 * v75);
          if ((a2 & 1) == 0 || (v11 & 1) != 0)
          {
LABEL_55:
            v92 = v9 + 2 * v83;
            v93 = v9 + 2 * v84;
            v94 = 2 * (v11 + v87);
            v95 = *(__int16 *)(v7 + v94);
            a5[21] = v90;
            a5[6] = v95;
            a5[15] = *(__int16 *)(v8 + v94);
            if ((v80 & v72) != 0)
            {
              v96 = (*(__int16 *)(v92 + 2 * v75)
                   + *(__int16 *)(v92 + 2 * v76)
                   + *(__int16 *)(v93 + 2 * v75)
                   + *(__int16 *)(v93 + 2 * v76)
                   + 2) >> 2;
              goto LABEL_64;
            }
            if ((v72 & 1) != 0 || !v80)
            {
              v96 = *(__int16 *)(v92 + 2 * v75);
              if ((v72 & 1) == 0 || v80)
              {
LABEL_64:
                a5[24] = v96;
                v98 = a1 >> 1;
                if (v60 < a1 >> 1)
                  v98 = v60;
                if (v60 >= v98 + 1)
                  v99 = v98 + 1;
                else
                  v99 = v60;
                v100 = 2 * (v62 + a1);
                v101 = *(__int16 *)(v7 + v100);
                v102 = *(__int16 *)(v8 + v100);
                v103 = a1 & 1;
                a5[1] = v101;
                a5[10] = v102;
                if ((a1 & 1 & v12) != 0)
                {
                  v104 = (*(__int16 *)(v65 + 2 * v98)
                        + *(__int16 *)(v65 + 2 * v99)
                        + *(__int16 *)(v66 + 2 * v98)
                        + *(__int16 *)(v66 + 2 * v99)
                        + 2) >> 2;
                  goto LABEL_78;
                }
                if ((v12 & 1) != 0 || (a1 & 1) == 0)
                {
                  v104 = *(__int16 *)(v65 + 2 * v98);
                  if ((v12 & 1) == 0 || (a1 & 1) != 0)
                  {
LABEL_78:
                    v106 = 2 * (v67 + a1);
                    v107 = *(__int16 *)(v7 + v106);
                    a5[19] = v104;
                    a5[4] = v107;
                    a5[13] = *(__int16 *)(v8 + v106);
                    if ((v103 & a2) != 0)
                    {
                      v108 = (*(__int16 *)(v85 + 2 * v98)
                            + *(__int16 *)(v85 + 2 * v99)
                            + *(__int16 *)(v86 + 2 * v98)
                            + *(__int16 *)(v86 + 2 * v99)
                            + 2) >> 2;
                      goto LABEL_87;
                    }
                    if ((a2 & 1) != 0 || (a1 & 1) == 0)
                    {
                      v108 = *(__int16 *)(v85 + 2 * v98);
                      if ((a2 & 1) == 0 || (a1 & 1) != 0)
                      {
LABEL_87:
                        v110 = 2 * (v87 + a1);
                        v111 = *(__int16 *)(v7 + v110);
                        a5[22] = v108;
                        a5[7] = v111;
                        a5[16] = *(__int16 *)(v8 + v110);
                        if ((v103 & v72) != 0)
                        {
                          v112 = (*(__int16 *)(v92 + 2 * v98)
                                + *(__int16 *)(v92 + 2 * v99)
                                + *(__int16 *)(v93 + 2 * v98)
                                + *(__int16 *)(v93 + 2 * v99)
                                + 2) >> 2;
                          goto LABEL_96;
                        }
                        if ((v72 & 1) != 0 || (a1 & 1) == 0)
                        {
                          v112 = *(__int16 *)(v92 + 2 * v98);
                          if ((v72 & 1) == 0 || (a1 & 1) != 0)
                          {
LABEL_96:
                            a5[25] = v112;
                            v114 = a1 + 1;
                            v115 = (a1 + 1) >> 1;
                            if (v60 < v115)
                              v115 = v60;
                            if (v60 >= v115 + 1)
                              v116 = v115 + 1;
                            else
                              v116 = v60;
                            v117 = v115;
                            result = v116;
                            v118 = 2 * (v114 + v62);
                            v119 = *(__int16 *)(v7 + v118);
                            v120 = *(__int16 *)(v8 + v118);
                            v121 = v114 & 1;
                            a5[2] = v119;
                            a5[11] = v120;
                            if ((v114 & 1 & v12) != 0)
                            {
                              v122 = (*(__int16 *)(v65 + 2 * v117)
                                    + *(__int16 *)(v65 + 2 * result)
                                    + *(__int16 *)(v66 + 2 * v117)
                                    + *(__int16 *)(v66 + 2 * result)
                                    + 2) >> 2;
                              goto LABEL_110;
                            }
                            if ((v12 & 1) != 0 || (v114 & 1) == 0)
                            {
                              v122 = *(__int16 *)(v65 + 2 * v117);
                              if ((v12 & 1) == 0 || (v114 & 1) != 0)
                              {
LABEL_110:
                                v124 = 2 * (v114 + v67);
                                v125 = *(__int16 *)(v7 + v124);
                                a5[20] = v122;
                                a5[5] = v125;
                                a5[14] = *(__int16 *)(v8 + v124);
                                if ((v121 & a2) != 0)
                                {
                                  v126 = (*(__int16 *)(v85 + 2 * v117)
                                        + *(__int16 *)(v85 + 2 * result)
                                        + *(__int16 *)(v86 + 2 * v117)
                                        + *(__int16 *)(v86 + 2 * result)
                                        + 2) >> 2;
                                  goto LABEL_119;
                                }
                                if ((a2 & 1) != 0 || (v114 & 1) == 0)
                                {
                                  v126 = *(__int16 *)(v85 + 2 * v117);
                                  if ((a2 & 1) == 0 || (v114 & 1) != 0)
                                  {
LABEL_119:
                                    v128 = 2 * (v114 + v87);
                                    v129 = *(__int16 *)(v7 + v128);
                                    a5[23] = v126;
                                    a5[8] = v129;
                                    a5[17] = *(__int16 *)(v8 + v128);
                                    if ((v121 & v72) != 0)
                                    {
                                      v57 = (*(__int16 *)(v92 + 2 * v117)
                                           + *(__int16 *)(v92 + 2 * result)
                                           + *(__int16 *)(v93 + 2 * v117)
                                           + *(__int16 *)(v93 + 2 * result)
                                           + 2) >> 2;
                                      goto LABEL_128;
                                    }
                                    if ((v72 & 1) != 0 || (v114 & 1) == 0)
                                    {
                                      v57 = *(__int16 *)(v92 + 2 * v117);
                                      if ((v72 & 1) == 0 || (v114 & 1) != 0)
                                        goto LABEL_128;
                                      v130 = *(__int16 *)(v93 + 2 * v117);
                                    }
                                    else
                                    {
                                      v57 = *(__int16 *)(v92 + 2 * v117);
                                      v130 = *(__int16 *)(v92 + 2 * result);
                                    }
                                    v57 = (v57 + v130 + 1) >> 1;
                                    goto LABEL_128;
                                  }
                                  v127 = *(__int16 *)(v86 + 2 * v117);
                                }
                                else
                                {
                                  v126 = *(__int16 *)(v85 + 2 * v117);
                                  v127 = *(__int16 *)(v85 + 2 * result);
                                }
                                v126 = (v126 + v127 + 1) >> 1;
                                goto LABEL_119;
                              }
                              v123 = v122 + *(__int16 *)(v66 + 2 * v117);
                            }
                            else
                            {
                              v123 = *(__int16 *)(v65 + 2 * v117) + *(__int16 *)(v65 + 2 * result);
                            }
                            v122 = (v123 + 1) >> 1;
                            goto LABEL_110;
                          }
                          v113 = v112 + *(__int16 *)(v93 + 2 * v98);
                        }
                        else
                        {
                          v113 = *(__int16 *)(v92 + 2 * v98) + *(__int16 *)(v92 + 2 * v99);
                        }
                        v112 = (v113 + 1) >> 1;
                        goto LABEL_96;
                      }
                      v109 = *(__int16 *)(v86 + 2 * v98);
                    }
                    else
                    {
                      v108 = *(__int16 *)(v85 + 2 * v98);
                      v109 = *(__int16 *)(v85 + 2 * v99);
                    }
                    v108 = (v108 + v109 + 1) >> 1;
                    goto LABEL_87;
                  }
                  v105 = *(__int16 *)(v66 + 2 * v98);
                }
                else
                {
                  v104 = *(__int16 *)(v65 + 2 * v98);
                  v105 = *(__int16 *)(v65 + 2 * v99);
                }
                v104 = (v104 + v105 + 1) >> 1;
                goto LABEL_78;
              }
              v97 = *(__int16 *)(v93 + 2 * v75);
            }
            else
            {
              v96 = *(__int16 *)(v92 + 2 * v75);
              v97 = *(__int16 *)(v92 + 2 * v76);
            }
            v96 = (v96 + v97 + 1) >> 1;
            goto LABEL_64;
          }
          v91 = v90 + *(__int16 *)(v86 + 2 * v75);
        }
        else
        {
          v91 = *(__int16 *)(v85 + 2 * v75) + *(__int16 *)(v85 + 2 * v76);
        }
        v90 = (v91 + 1) >> 1;
        goto LABEL_55;
      }
      v82 = *(__int16 *)(v66 + 2 * v75);
    }
    else
    {
      v81 = *(__int16 *)(v65 + 2 * v75);
      v82 = *(__int16 *)(v65 + 2 * v76);
    }
    v81 = (v81 + v82 + 1) >> 1;
    goto LABEL_46;
  }
  v13 = (_QWORD *)(v5 + 144 * (a3 - 1));
  v14 = v13[5];
  v15 = v13[4] - 1;
  v16 = v13[6] - 1;
  v17 = 2 * v12;
  if (v16 < v17)
    v17 = v16;
  v18 = v17 * v14;
  if (v15 >= 2 * v11)
    v19 = 2 * v11;
  else
    v19 = v15;
  v20 = *(__int16 *)(v7 + 2 * (v18 + v19));
  v21 = v12 * v10;
  v22 = 2 * (v21 + v11);
  v23 = *(__int16 *)(v8 + v22);
  v24 = *(__int16 *)(v9 + v22);
  v25 = 2 * a2;
  if (v16 < v25)
    v25 = v16;
  v26 = v25 * v14;
  v27 = *(__int16 *)(v7 + 2 * (v26 + v19));
  v28 = v10 * a2;
  v29 = 2 * (v10 * a2 + v11);
  v30 = *(__int16 *)(v8 + v29);
  v31 = *(__int16 *)(v9 + v29);
  v32 = a2 + 1;
  if (v16 >= 2 * v32)
    v16 = 2 * v32;
  v33 = v16 * v14;
  v34 = *(__int16 *)(v7 + 2 * (v33 + v19));
  v35 = v32 * v10;
  v36 = 2 * (v35 + v11);
  v37 = *(__int16 *)(v8 + v36);
  v38 = *(__int16 *)(v9 + v36);
  v39 = 2 * a1;
  if (v15 < v39)
    v39 = v15;
  v40 = *(__int16 *)(v7 + 2 * (v18 + v39));
  *a5 = v20;
  a5[1] = v40;
  v41 = 2 * (v21 + a1);
  v42 = *(__int16 *)(v8 + v41);
  LODWORD(v41) = *(__int16 *)(v9 + v41);
  a5[18] = v24;
  a5[19] = v41;
  v43 = *(__int16 *)(v7 + 2 * (v26 + v39));
  v44 = 2 * (v28 + a1);
  v45 = *(__int16 *)(v8 + v44);
  v46 = *(__int16 *)(v7 + 2 * (v33 + v39));
  a5[12] = v30;
  a5[13] = v45;
  v47 = 2 * (v35 + a1);
  v48 = *(__int16 *)(v9 + v47);
  a5[6] = v34;
  a5[7] = v46;
  a5[24] = v38;
  a5[25] = v48;
  result = (a1 + 1);
  if (v15 >= 2 * (int)result)
    v15 = 2 * (int)result;
  v50 = *(__int16 *)(v9 + v44);
  v51 = *(__int16 *)(v8 + v47);
  a5[2] = *(__int16 *)(v7 + 2 * (v18 + v15));
  a5[3] = v27;
  v52 = 2 * (v21 + (int)result);
  v53 = *(__int16 *)(v8 + v52);
  a5[10] = v42;
  a5[11] = v53;
  a5[20] = *(__int16 *)(v9 + v52);
  a5[21] = v31;
  LODWORD(v52) = *(__int16 *)(v7 + 2 * (v26 + v15));
  a5[4] = v43;
  a5[5] = v52;
  v54 = 2 * (v28 + (int)result);
  a5[14] = *(__int16 *)(v8 + v54);
  a5[15] = v37;
  LODWORD(v54) = *(__int16 *)(v9 + v54);
  a5[22] = v50;
  a5[23] = v54;
  a5[8] = *(__int16 *)(v7 + 2 * (v33 + v15));
  a5[9] = v23;
  v55 = 2 * (v35 + (int)result);
  v56 = *(__int16 *)(v8 + v55);
  a5[16] = v51;
  a5[17] = v56;
  v57 = *(__int16 *)(v9 + v55);
LABEL_128:
  a5[26] = v57;
  return result;
}

double sub_20FDA056C(_DWORD *a1, uint64_t a2, int32x2_t *a3)
{
  __int32 *v3;
  int v4;
  int v5;
  int v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int8x16_t v10;

  a3->i32[0] = (a1[14] - a1[12] + 1) >> 1;
  a3->i32[1] = (a1[16] - a1[10] + 1) >> 1;
  a3[1].i32[0] = (a1[22] - a1[4] + 1) >> 1;
  *(_DWORD *)a2 = (a1[14] + a1[12] - 2 * a1[13] + 2) >> 2;
  *(_DWORD *)(a2 + 16) = (a1[16] + a1[10] - 2 * a1[13] + 2) >> 2;
  *(_DWORD *)(a2 + 32) = (a1[4] + a1[22] - 2 * a1[13] + 2) >> 2;
  v3 = (__int32 *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = (a1[9] + a1[17] - (a1[11] + a1[15]) + 8) >> 4;
  *(_DWORD *)(a2 + 24) = (a1[3] + a1[23] - (a1[5] + a1[21]) + 8) >> 4;
  *(_DWORD *)(a2 + 20) = (a1[1] + a1[25] - (a1[7] + a1[19]) + 8) >> 4;
  *a3 = vneg_s32(vmin_s32(vmax_s32(*a3, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL));
  v4 = a3[1].i32[0];
  if (v4 <= -32768)
    v4 = -32768;
  if (v4 >= 0x7FFF)
    v4 = 0x7FFF;
  a3[1].i32[0] = -v4;
  v5 = *(_DWORD *)a2;
  if (*(int *)a2 <= -32768)
    v5 = -32768;
  if (v5 >= 0x7FFF)
    v5 = 0x7FFF;
  *(_DWORD *)a2 = v5;
  v6 = *(_DWORD *)(a2 + 32);
  if (v6 <= -32768)
    v6 = -32768;
  if (v6 >= 0x7FFF)
    v6 = 0x7FFF;
  v7.i32[0] = *(_DWORD *)(a2 + 24);
  v7.i32[1] = *v3;
  v7.i64[1] = *(_QWORD *)(a2 + 16);
  v8.i64[0] = 0x7F0000007FLL;
  v8.i64[1] = 0x7F0000007FLL;
  v9 = vmaxq_s32(v7, v8);
  v7.i64[0] = 0x7F0000007FLL;
  v7.i64[1] = 0x7F0000007FLL;
  v10 = (int8x16_t)vminq_s32(v9, v7);
  *v3 = v10.i32[1];
  *(_DWORD *)(a2 + 32) = v6;
  *(int8x16_t *)(a2 + 8) = v10;
  v10.i32[1] = vextq_s8(v10, v10, 8uLL).i32[1];
  *(_QWORD *)(a2 + 24) = v10.i64[0];
  return *(double *)v10.i64;
}

uint64_t sub_20FDA0734(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  int64x2_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[26];

  *(int64x2_t *)a1 = vdupq_n_s64(0x280uLL);
  *(_QWORD *)(a1 + 16) = 0x90000002DLL;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(1uLL);
  *(_OWORD *)(a1 + 40) = xmmword_2102DB6E0;
  *(_BYTE *)(a1 + 56) = 0;
  strcpy((char *)(a1 + 64), "/tmp/");
  *(_WORD *)(a1 + 87) = 261;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = sub_20FDA115C;
  *(_QWORD *)(a1 + 112) = 6;
  v4 = a1 + 280;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = a1 + 528;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)a1 = v5;
  if ((__int128 *)a1 != a2)
  {
    if (*((char *)a2 + 87) < 0)
    {
      sub_20E867BF8((_QWORD *)(a1 + 64), *((void **)a2 + 8), *((_QWORD *)a2 + 9));
    }
    else
    {
      v8 = a2[4];
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *(_OWORD *)(a1 + 64) = v8;
    }
  }
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  if ((sub_20FDA18C4(a2) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 51, (uint64_t)"config.IsValid()", 16, (uint64_t)"Invalid configuration", 21, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = 4;
  if (*(_DWORD *)a1 >= 0x141u)
    v9 = 5;
  *(_QWORD *)(a1 + 112) = v9;
  v10 = (_OWORD *)operator new();
  *v10 = 0u;
  v10[1] = 0u;
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v10;
  if (v11)
    (*(void (**)(uint64_t))(a1 + 104))(v11);
  *(_QWORD *)(a1 + 104) = sub_20FDA115C;
  *(_WORD *)&v58[24] = 256;
  v57 = *(_OWORD *)a1;
  *(_QWORD *)v58 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)&v58[8] = xmmword_2103BE4C0;
  v12 = (int64x2_t *)operator new();
  sub_20FD9684C(v12, (int64x2_t *)&v57);
  v13 = *(uint64_t ***)(a1 + 96);
  v14 = *v13;
  *v13 = (uint64_t *)v12;
  if (v14)
  {
    v15 = sub_20FDA121C(v14);
    MEMORY[0x212BC6398](v15, 0x10B0C40BBFE04D6);
  }
  v49 = xmmword_2103C0538;
  v50 = unk_2103C0548;
  v47 = xmmword_2103C0518;
  v48 = unk_2103C0528;
  v53 = unk_2103C0578;
  v54 = xmmword_2103C0588;
  v55 = unk_2103C0598;
  v56 = xmmword_2103C05A8;
  v51 = xmmword_2103C0558;
  v52 = xmmword_2103C0568;
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)&v58[10];
  v43 = v57;
  v44[0] = *(_OWORD *)v58;
  v45 = 2097168;
  v46 = *(_QWORD *)(a1 + 16);
  v16 = operator new();
  sub_20FDA91B8(v16, &v43);
  v17 = *(_QWORD *)(a1 + 96);
  v18 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = v16;
  if (v18)
  {
    v19 = sub_20FDA1458(v18);
    MEMORY[0x212BC6398](v19, 0x1020C4064840F60);
  }
  v34 = unk_2103C05C8;
  v35 = xmmword_2103C05D8;
  v36 = unk_2103C05E8;
  v37 = xmmword_2103C05F8;
  v33 = xmmword_2103C05B8;
  v38 = xmmword_2103C0608;
  v39 = unk_2103C0618;
  v40 = xmmword_2103C0628;
  v41 = unk_2103C0638;
  v42 = xmmword_2103C0648;
  v32 = 2 * *(_DWORD *)(a1 + 112);
  v20 = operator new();
  sub_20FD9EACC(v20, (__int128 *)&v32);
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD **)(v21 + 16);
  *(_QWORD *)(v21 + 16) = v20;
  if (v22)
    sub_20FDA1584(v22);
  v23 = 2 * *(_DWORD *)(a1 + 112);
  v31 = v23;
  v24 = (int *)operator new();
  sub_20FDA5110(v24, &v31);
  v25 = *(_QWORD *)(a1 + 96);
  v26 = *(_QWORD *)(v25 + 24);
  *(_QWORD *)(v25 + 24) = v24;
  if (v26)
  {
    sub_20FDA163C((void **)(v26 + 4552));
    MEMORY[0x212BC6398](v26, 0x1020C4059C13B03);
  }
  v27 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 120) = v27;
  v28 = *(unsigned int *)(a1 + 16);
  *(_QWORD *)(a1 + 208) = v28;
  *(_QWORD *)(a1 + 216) = v28;
  *(_QWORD *)(a1 + 224) = v28;
  *(_QWORD *)(a1 + 232) = v28;
  *(_QWORD *)(a1 + 240) = v28;
  *(_QWORD *)(a1 + 248) = v28;
  *(_QWORD *)(a1 + 256) = v28;
  *(_QWORD *)(a1 + 264) = v28;
  *(_QWORD *)(a1 + 272) = v28;
  *(_QWORD *)(a1 + 128) = v27;
  *(_QWORD *)(a1 + 136) = v27;
  *(_QWORD *)(a1 + 144) = v27;
  *(_QWORD *)(a1 + 152) = v27;
  *(_QWORD *)(a1 + 160) = v27;
  *(_QWORD *)(a1 + 168) = v27;
  *(_QWORD *)(a1 + 176) = v27;
  *(_QWORD *)(a1 + 184) = v27;
  *(_QWORD *)(a1 + 192) = v27;
  *(_QWORD *)(a1 + 200) = v28;
  if (*(_BYTE *)(a1 + 88))
    sub_20FDA2980(v27, v23, (_QWORD *)(a1 + 120));
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
  v30 = 0;
  sub_20EDB9AB0(v4, 0x40uLL, (const float *)&v30);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a1 + 304);
  v30 = 0;
  sub_20EDB9AB0(a1 + 304, 0x40uLL, (const float *)&v30);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a1 + 328);
  v30 = 0;
  sub_20EDB9AB0(a1 + 328, 0x40uLL, (const float *)&v30);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 352);
  v30 = 0;
  sub_20EDB9AB0(a1 + 352, 0x40uLL, (const float *)&v30);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a1 + 376);
  v30 = 0;
  sub_20EDB9AB0(a1 + 376, 0x40uLL, (const float *)&v30);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 400);
  v30 = 0;
  sub_20EDB9AB0(a1 + 400, 0x40uLL, (const float *)&v30);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 424);
  v30 = 0;
  sub_20EDB9AB0(a1 + 424, 0x40uLL, (const float *)&v30);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 448);
  v30 = 0;
  sub_20EDB9AB0(a1 + 448, 0x40uLL, (const float *)&v30);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
  v30 = 0;
  sub_20EDB9AB0(a1 + 472, 0x40uLL, (const float *)&v30);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 496);
  v30 = 0;
  sub_20EDB9AB0(a1 + 496, 0x40uLL, (const float *)&v30);
  return a1;
}

void sub_20FDA0C74(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v5;

  sub_20FD42964(v1 + 520, *(_QWORD **)(v1 + 528));
  sub_20F89E908(v3);
  v5 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v5)
    (*(void (**)(void))(v1 + 104))();
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_20FDA0D6C(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  unint64_t v15;
  unint64_t *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int8x16_t v24;
  unsigned __int16 *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t **v38;
  BOOL v39;
  unsigned int v40;
  uint64_t **v41;
  uint64_t **v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char **v58;

  v15 = HIDWORD(a3);
  a4[1] = *a4;
  v16 = **(unint64_t ***)(a1 + 96);
  sub_20FD987E8((uint64_t)v16, a2, a5, a6, a7, a8, a9, a10, a11, a12);
  sub_20FD9B088(v16, v17, v18, v19, v20, v21, v22, v23, v24);
  v25 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 96) + 8);
  sub_20FDA9834(v25, *(_QWORD **)(**(_QWORD **)(a1 + 96) + 56));
  sub_20FDA9F60((uint64_t)v25);
  v26 = (uint64_t **)(a1 + 528);
  v27 = *(uint64_t **)(a1 + 528);
  if (!v27)
    goto LABEL_12;
  v28 = (uint64_t **)(a1 + 528);
  v29 = *(uint64_t **)(a1 + 528);
  do
  {
    while (1)
    {
      v30 = *((_DWORD *)v29 + 8);
      if (v30 >= a3 && (v30 != (_DWORD)a3 || *((_DWORD *)v29 + 9) >= v15))
        break;
      v29 = (uint64_t *)v29[1];
      if (!v29)
        goto LABEL_8;
    }
    v28 = (uint64_t **)v29;
    v29 = (uint64_t *)*v29;
  }
  while (v29);
LABEL_8:
  if (v28 == v26)
  {
LABEL_12:
    v34 = a1 + 280;
    v28 = (uint64_t **)(a1 + 528);
  }
  else
  {
    v31 = *((_DWORD *)v28 + 8);
    v32 = *((_DWORD *)v28 + 9);
    if (v31 == (_DWORD)a3 && v32 == (_DWORD)v15)
      goto LABEL_11;
    v34 = a1 + 280;
    if (v31 <= a3)
    {
      if (v31 != (_DWORD)a3)
      {
        if (v31 < a3)
          goto LABEL_48;
        goto LABEL_11;
      }
      if (v32 <= v15)
      {
        if (v32 < v15)
        {
LABEL_48:
          v42 = v28 + 1;
          v45 = v28[1];
          if (v45)
          {
            do
            {
              v42 = (uint64_t **)v45;
              v45 = (uint64_t *)*v45;
              v28 = v42;
              v46 = v42;
            }
            while (v45);
          }
          else
          {
            v46 = v28;
            do
            {
              v47 = (uint64_t *)v46;
              v46 = (uint64_t **)v46[2];
            }
            while (*v46 != v47);
          }
          if (v46 == v26
            || (v48 = *((_DWORD *)v46 + 8), v48 > a3)
            || v48 == (_DWORD)a3 && *((_DWORD *)v46 + 9) > v15)
          {
LABEL_68:
            v33 = (uint64_t *)operator new(0x118uLL);
            v33[4] = a3;
            sub_20F8ECF48(v33 + 5, v34);
            *v33 = 0;
            v33[1] = 0;
            v33[2] = (uint64_t)v28;
            *v42 = v33;
            v51 = **(_QWORD **)(a1 + 520);
            v52 = v33;
            if (v51)
            {
              *(_QWORD *)(a1 + 520) = v51;
              v52 = *v42;
            }
            sub_20E868578(*(uint64_t **)(a1 + 528), v52);
            ++*(_QWORD *)(a1 + 536);
            goto LABEL_71;
          }
          while (1)
          {
            v28 = (uint64_t **)v27;
            v49 = *((_DWORD *)v27 + 8);
            if (v49 > a3)
              goto LABEL_58;
            if (v49 != (_DWORD)a3)
            {
              if (v49 >= a3)
                break;
              goto LABEL_65;
            }
            v50 = *((_DWORD *)v28 + 9);
            if (v50 > v15)
            {
LABEL_58:
              v27 = *v28;
              if (!*v28)
                goto LABEL_67;
            }
            else
            {
              if (v50 >= v15)
                break;
LABEL_65:
              v27 = v28[1];
              if (!v27)
                goto LABEL_46;
            }
          }
        }
LABEL_11:
        v33 = (uint64_t *)v28;
        goto LABEL_71;
      }
    }
  }
  v35 = *v28;
  v36 = v28;
  if (*(uint64_t ***)(a1 + 520) != v28)
  {
    if (v35)
    {
      v37 = *v28;
      do
      {
        v36 = (uint64_t **)v37;
        v37 = (uint64_t *)v37[1];
      }
      while (v37);
    }
    else
    {
      v38 = v28;
      do
      {
        v36 = (uint64_t **)v38[2];
        v39 = *v36 == (uint64_t *)v38;
        v38 = v36;
      }
      while (v39);
    }
    v40 = *((_DWORD *)v36 + 8);
    if (v40 >= a3 && (v40 != (_DWORD)a3 || *((_DWORD *)v36 + 9) >= v15))
    {
      if (!v27)
      {
        v42 = (uint64_t **)(a1 + 528);
        v28 = (uint64_t **)(a1 + 528);
        goto LABEL_68;
      }
      while (1)
      {
        v28 = (uint64_t **)v27;
        v43 = *((_DWORD *)v27 + 8);
        if (v43 > a3)
          goto LABEL_38;
        if (v43 != (_DWORD)a3)
        {
          if (v43 >= a3)
            goto LABEL_11;
          goto LABEL_45;
        }
        v44 = *((_DWORD *)v28 + 9);
        if (v44 > v15)
        {
LABEL_38:
          v27 = *v28;
          if (!*v28)
          {
LABEL_67:
            v42 = v28;
            goto LABEL_68;
          }
        }
        else
        {
          if (v44 >= v15)
            goto LABEL_11;
LABEL_45:
          v27 = v28[1];
          if (!v27)
          {
LABEL_46:
            v42 = v28 + 1;
            goto LABEL_68;
          }
        }
      }
    }
  }
  if (v35)
    v41 = v36;
  else
    v41 = v28;
  if (v35)
    v42 = v36 + 1;
  else
    v42 = v28;
  v33 = *v42;
  if (!*v42)
  {
    v28 = v41;
    goto LABEL_68;
  }
LABEL_71:
  sub_20FD9ED18(*(uint64_t ***)(*(_QWORD *)(a1 + 96) + 16), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 224), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 232) + 232), a1 + 200, a1 + 120, (uint64_t)(v33 + 5));
  sub_20FDA64C0(*(int **)(*(_QWORD *)(a1 + 96) + 24), (_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 96) + 16) + 232), *(_QWORD *)(**(_QWORD **)(a1 + 96) + 48), a4);
  if (*(_BYTE *)(a1 + 88))
    sub_20FDA2B7C(a1 + 120, (uint64_t)(v33 + 5), 2 * *(_QWORD *)(a1 + 112), *(_DWORD *)(a1 + 16), a1 + 200);
  if (*(_BYTE *)(a1 + 56))
  {
    v53 = *(_QWORD *)(a1 + 96);
    v54 = *(_QWORD **)v53;
    v55 = *(_QWORD *)(v53 + 8);
    v56 = *(_QWORD *)(v53 + 16);
    v57 = *(_QWORD *)(v53 + 24);
    v58 = (char **)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
    {
      if ((sub_20FD8BEF8(v54, v55, v56, v57, (const void **)v33 + 5, *v58) & 1) != 0)
        return;
    }
    else if ((sub_20FD8BEF8(v54, v55, v56, v57, (const void **)v33 + 5, (char *)v58) & 1) != 0)
    {
      return;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 145, (uint64_t)"DumpDebugInfo(*pImpl_->gaussian_pyr_generator_, *pImpl_->res_map_and_kpc_generator_, *pImpl_->kp_validator_and_refiner_, *pImpl_->kp_to_descriptor_, histogram_per_scale, config_.dump_path.c_str())", 196, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
}

void sub_20FDA1148(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDA115C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = 0;
    if (v2)
    {
      sub_20FDA163C((void **)(v2 + 4552));
      MEMORY[0x212BC6398](v2, 0x1020C4059C13B03);
    }
    v3 = *(_QWORD **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (v3)
      sub_20FDA1584(v3);
    v4 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v4)
    {
      v5 = sub_20FDA1458(v4);
      MEMORY[0x212BC6398](v5, 0x1020C4064840F60);
    }
    v6 = *(_QWORD **)v1;
    *(_QWORD *)v1 = 0;
    if (v6)
    {
      v7 = sub_20FDA121C(v6);
      MEMORY[0x212BC6398](v7, 0x10B0C40BBFE04D6);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

_QWORD *sub_20FDA121C(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void *v13;
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void (**v16)(_QWORD);
  BOOL v17;
  _QWORD *v18;
  void *v19;
  void (***v20)(_QWORD);
  void (***v21)(_QWORD);
  void *v22;
  void (***v23)(_QWORD);
  void (***v24)(_QWORD);
  void (**v25)(_QWORD);
  _QWORD *v26;
  void *v27;
  void (***v28)(_QWORD);
  void (***v29)(_QWORD);
  void *v30;
  void (***v31)(_QWORD);
  void (***v32)(_QWORD);
  void (**v33)(_QWORD);

  a1[9] = &off_24CA06E20;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[23];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[21];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[21];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (_QWORD *)a1[8];
  a1[8] = 0;
  if (v9)
  {
    v10 = (void *)v9[9];
    if (v10)
    {
      v9[10] = v10;
      operator delete(v10);
    }
    v11 = (void (***)(_QWORD))v9[6];
    if (v11)
    {
      v12 = (void (***)(_QWORD))v9[7];
      v13 = (void *)v9[6];
      if (v12 != v11)
      {
        v14 = v12 - 18;
        v15 = v12 - 18;
        do
        {
          v16 = *v15;
          v15 -= 18;
          (*v16)(v14);
          v17 = v14 == v11;
          v14 = v15;
        }
        while (!v17);
        v13 = (void *)v9[6];
      }
      v9[7] = v11;
      operator delete(v13);
    }
    MEMORY[0x212BC6398](v9, 0x1020C4024B85F43);
  }
  v18 = (_QWORD *)a1[7];
  a1[7] = 0;
  if (v18)
  {
    v19 = (void *)v18[9];
    if (v19)
    {
      v18[10] = v19;
      operator delete(v19);
    }
    v20 = (void (***)(_QWORD))v18[6];
    if (v20)
    {
      v21 = (void (***)(_QWORD))v18[7];
      v22 = (void *)v18[6];
      if (v21 != v20)
      {
        v23 = v21 - 18;
        v24 = v21 - 18;
        do
        {
          v25 = *v24;
          v24 -= 18;
          (*v25)(v23);
          v17 = v23 == v20;
          v23 = v24;
        }
        while (!v17);
        v22 = (void *)v18[6];
      }
      v18[7] = v20;
      operator delete(v22);
    }
    MEMORY[0x212BC6398](v18, 0x1020C4024B85F43);
  }
  v26 = (_QWORD *)a1[6];
  a1[6] = 0;
  if (v26)
  {
    v27 = (void *)v26[9];
    if (v27)
    {
      v26[10] = v27;
      operator delete(v27);
    }
    v28 = (void (***)(_QWORD))v26[6];
    if (v28)
    {
      v29 = (void (***)(_QWORD))v26[7];
      v30 = (void *)v26[6];
      if (v29 != v28)
      {
        v31 = v29 - 18;
        v32 = v29 - 18;
        do
        {
          v33 = *v32;
          v32 -= 18;
          (*v33)(v31);
          v17 = v31 == v28;
          v31 = v32;
        }
        while (!v17);
        v30 = (void *)v26[6];
      }
      v26[7] = v28;
      operator delete(v30);
    }
    MEMORY[0x212BC6398](v26, 0x1020C4024B85F43);
  }
  return a1;
}

uint64_t sub_20FDA1458(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void *v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (**v17)(_QWORD);
  BOOL v18;

  v2 = *(_QWORD **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v2)
  {
    v3 = v2[29];
    if (v3)
    {
      v4 = v2[30];
      v5 = (void *)v2[29];
      if (v4 != v3)
      {
        v6 = v2[30];
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = (void *)v2[29];
      }
      v2[30] = v3;
      operator delete(v5);
    }
    v9 = (void *)v2[24];
    if (v9)
    {
      v2[25] = v9;
      operator delete(v9);
    }
    MEMORY[0x212BC6398](v2, 0x1030C40F7CA4485);
  }
  v10 = *(_QWORD **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v10)
  {
    v11 = (void *)v10[9];
    if (v11)
    {
      v10[10] = v11;
      operator delete(v11);
    }
    v12 = (void (***)(_QWORD))v10[6];
    if (v12)
    {
      v13 = (void (***)(_QWORD))v10[7];
      v14 = (void *)v10[6];
      if (v13 != v12)
      {
        v15 = v13 - 18;
        v16 = v13 - 18;
        do
        {
          v17 = *v16;
          v16 -= 18;
          (*v17)(v15);
          v18 = v15 == v12;
          v15 = v16;
        }
        while (!v18);
        v14 = (void *)v10[6];
      }
      v10[7] = v12;
      operator delete(v14);
    }
    MEMORY[0x212BC6398](v10, 0x1020C4024B85F43);
  }
  return a1;
}

void sub_20FDA1584(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (_QWORD *)*a1;
  *a1 = 0;
  if (v1)
  {
    v2 = v1[29];
    if (v2)
    {
      v3 = v1[30];
      v4 = (void *)v1[29];
      if (v3 != v2)
      {
        v5 = v1[30];
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = (void *)v1[29];
      }
      v1[30] = v2;
      operator delete(v4);
    }
    v8 = (void *)v1[24];
    if (v8)
    {
      v1[25] = v8;
      operator delete(v8);
    }
    MEMORY[0x212BC6398](v1, 0x1030C40F7CA4485);
  }
  JUMPOUT(0x212BC6398);
}

void **sub_20FDA163C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  char *v20;
  char *v21;
  void *v22;
  char *v23;
  void *v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  char *v29;
  void *v30;
  void *v31;
  char *v32;
  char *v33;
  void *v34;
  char *v35;
  void *v36;
  void *v37;
  char *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  void *v43;
  char *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;

  v2 = (char *)a1[21];
  if (v2)
  {
    v3 = (char *)a1[22];
    v4 = a1[21];
    if (v3 != v2)
    {
      v5 = (char *)a1[22];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = a1[21];
    }
    a1[22] = v2;
    operator delete(v4);
  }
  v8 = (char *)a1[18];
  if (v8)
  {
    v9 = (char *)a1[19];
    v10 = a1[18];
    if (v9 != v8)
    {
      v11 = (char *)a1[19];
      do
      {
        v13 = (void *)*((_QWORD *)v11 - 3);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *((_QWORD *)v9 - 2) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = a1[18];
    }
    a1[19] = v8;
    operator delete(v10);
  }
  v14 = (char *)a1[15];
  if (v14)
  {
    v15 = (char *)a1[16];
    v16 = a1[15];
    if (v15 != v14)
    {
      v17 = (char *)a1[16];
      do
      {
        v19 = (void *)*((_QWORD *)v17 - 3);
        v17 -= 24;
        v18 = v19;
        if (v19)
        {
          *((_QWORD *)v15 - 2) = v18;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = a1[15];
    }
    a1[16] = v14;
    operator delete(v16);
  }
  v20 = (char *)a1[12];
  if (v20)
  {
    v21 = (char *)a1[13];
    v22 = a1[12];
    if (v21 != v20)
    {
      v23 = (char *)a1[13];
      do
      {
        v25 = (void *)*((_QWORD *)v23 - 3);
        v23 -= 24;
        v24 = v25;
        if (v25)
        {
          *((_QWORD *)v21 - 2) = v24;
          operator delete(v24);
        }
        v21 = v23;
      }
      while (v23 != v20);
      v22 = a1[12];
    }
    a1[13] = v20;
    operator delete(v22);
  }
  v26 = (char *)a1[9];
  if (v26)
  {
    v27 = (char *)a1[10];
    v28 = a1[9];
    if (v27 != v26)
    {
      v29 = (char *)a1[10];
      do
      {
        v31 = (void *)*((_QWORD *)v29 - 3);
        v29 -= 24;
        v30 = v31;
        if (v31)
        {
          *((_QWORD *)v27 - 2) = v30;
          operator delete(v30);
        }
        v27 = v29;
      }
      while (v29 != v26);
      v28 = a1[9];
    }
    a1[10] = v26;
    operator delete(v28);
  }
  v32 = (char *)a1[6];
  if (v32)
  {
    v33 = (char *)a1[7];
    v34 = a1[6];
    if (v33 != v32)
    {
      v35 = (char *)a1[7];
      do
      {
        v37 = (void *)*((_QWORD *)v35 - 3);
        v35 -= 24;
        v36 = v37;
        if (v37)
        {
          *((_QWORD *)v33 - 2) = v36;
          operator delete(v36);
        }
        v33 = v35;
      }
      while (v35 != v32);
      v34 = a1[6];
    }
    a1[7] = v32;
    operator delete(v34);
  }
  v38 = (char *)a1[3];
  if (v38)
  {
    v39 = (char *)a1[4];
    v40 = a1[3];
    if (v39 != v38)
    {
      v41 = (char *)a1[4];
      do
      {
        v43 = (void *)*((_QWORD *)v41 - 3);
        v41 -= 24;
        v42 = v43;
        if (v43)
        {
          *((_QWORD *)v39 - 2) = v42;
          operator delete(v42);
        }
        v39 = v41;
      }
      while (v41 != v38);
      v40 = a1[3];
    }
    a1[4] = v38;
    operator delete(v40);
  }
  v44 = (char *)*a1;
  if (*a1)
  {
    v45 = (char *)a1[1];
    v46 = *a1;
    if (v45 != v44)
    {
      v47 = (char *)a1[1];
      do
      {
        v49 = (void *)*((_QWORD *)v47 - 3);
        v47 -= 24;
        v48 = v49;
        if (v49)
        {
          *((_QWORD *)v45 - 2) = v48;
          operator delete(v48);
        }
        v45 = v47;
      }
      while (v47 != v44);
      v46 = *a1;
    }
    a1[1] = v44;
    operator delete(v46);
  }
  return a1;
}

uint64_t sub_20FDA18C4(_QWORD *a1)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  size_t v16;
  const char *v17;
  unsigned __int8 v18;
  const char *v19;
  size_t v20;
  _BYTE *v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *p_p;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  size_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unsigned __int8 v72;
  const char *v73;
  size_t v74;
  _BYTE *v75;
  unint64_t v76;
  const char *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  size_t v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  unint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v128;
  int v129;
  const char *v130;
  int v131;
  const char *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE object[24];
  __int128 v139;
  void *__p;
  size_t v141;
  unint64_t v142;
  char v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)a1 - 160) >= 0x1E1)
  {
    sub_20FDA288C(&v135);
    if (**(int **)(v135 + 56) > 4)
      return 0;
    v3 = *(unsigned __int8 *)(v135 + 72);
    v4 = sub_20E8C31DC(v135, "OSLogSurrogateAppender", 1, 0);
    v5 = v4;
    if (!v3 && v4 == 0)
      return 0;
    v126 = &v135;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v128 = std::chrono::system_clock::now().__d_.__rep_;
    v129 = 4;
    v130 = "unknown file";
    v131 = 32;
    v133 = 0;
    v134 = 0;
    v132 = "unknown function";
    v7 = v135;
    if (*(char *)(v135 + 39) < 0)
    {
      v9 = *(const char **)(v135 + 16);
      v8 = *(_QWORD *)(v135 + 24);
      v124 = *v126 + 16;
      v18 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v18 & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      v8 = *(unsigned __int8 *)(v135 + 39);
      v9 = (const char *)(*v126 + 16);
      v124 = (uint64_t)v9;
      v10 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v10 & 1) != 0)
        goto LABEL_20;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v139 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_20:
    if (byte_254A4A50F >= 0)
      v19 = (const char *)&xmmword_254A4A4F8;
    else
      v19 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v20 = byte_254A4A50F;
    else
      v20 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    *(_QWORD *)object = os_log_create(v19, v9);
    v21 = &object[8];
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v20 >= 0x17)
    {
      v22 = v5;
      v23 = v9;
      v24 = v7;
      v25 = v3;
      v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v26 = v20 | 7;
      v27 = v26 + 1;
      v21 = operator new(v26 + 1);
      *(_QWORD *)&object[16] = v20;
      *(_QWORD *)&v139 = v27 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v21;
      v3 = v25;
      v7 = v24;
      v9 = v23;
      v5 = v22;
    }
    else
    {
      BYTE7(v139) = v20;
      if (!v20)
      {
LABEL_34:
        v21[v20] = 0;
        BYTE8(v139) = 1;
        p_p = &__p;
        if (v8 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v8 >= 0x17)
        {
          v29 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v8 | 7) != 0x17)
            v29 = v8 | 7;
          v30 = v29 + 1;
          p_p = operator new(v29 + 1);
          v141 = v8;
          v142 = v30 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v142) = v8;
          if (!v8)
            goto LABEL_42;
        }
        memmove(p_p, v9, v8);
LABEL_42:
        *((_BYTE *)p_p + v8) = 0;
        v143 = 1;
        v31 = *(NSObject **)object;
        if (SHIBYTE(v142) < 0)
          operator delete(__p);
        if (BYTE8(v139) && SBYTE7(v139) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v5 && *(_QWORD *)(v5 + 24))
        {
          v32 = _os_log_pack_size();
          v33 = (std::__shared_weak_count_vtbl *)operator new(v32, (std::align_val_t)8uLL);
          v34 = (std::__shared_weak_count *)operator new();
          v35 = v34;
          v34->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v34->__shared_weak_owners_ = 0;
          v34[1].__vftable = v33;
          *(_QWORD *)object = v33;
          *(_QWORD *)&object[8] = v33;
          *(_QWORD *)&object[16] = v34;
          do
            v37 = __ldxr(p_shared_owners);
          while (__stxr(v37 + 1, p_shared_owners));
          v139 = 0uLL;
          __p = 0;
          do
            v38 = __ldaxr(p_shared_owners);
          while (__stlxr(v38 - 1, p_shared_owners));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v35);
          }
          v39 = *(_QWORD *)object;
          v40 = _os_log_pack_fill();
          v41 = *a1;
          v42 = a1[1];
          *(_DWORD *)v40 = 134218240;
          *(_QWORD *)(v40 + 4) = v41;
          *(_WORD *)(v40 + 12) = 2048;
          *(_QWORD *)(v40 + 14) = v42;
          v43 = operator new();
          v44 = *(unsigned __int8 *)(v7 + 39);
          v45 = v124;
          if ((v44 & 0x80u) != 0)
          {
            v45 = *(_QWORD *)(v7 + 16);
            v44 = *(_QWORD *)(v7 + 24);
          }
          *(_QWORD *)v43 = v39;
          *(_OWORD *)(v43 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v43 + 24) = v139;
          v139 = 0uLL;
          *(_QWORD *)(v43 + 40) = v45;
          *(_QWORD *)(v43 + 48) = v44;
          *(_BYTE *)(v43 + 56) = 16;
          v136 = 0;
          v137 = v43;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), &v137);
          v46 = v137;
          v137 = 0;
          if (v46)
          {
            v47 = *(std::__shared_weak_count **)(v46 + 32);
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = *(std::__shared_weak_count **)(v46 + 16);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            MEMORY[0x212BC6398](v46, 0x10F0C40B62ED6C6);
            v53 = v136;
            v136 = 0;
            if (v53)
            {
              v54 = *(std::__shared_weak_count **)(v53 + 32);
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v57 = *(std::__shared_weak_count **)(v53 + 16);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              MEMORY[0x212BC6398](v53, 0x10F0C40B62ED6C6);
            }
          }
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          if (*((_QWORD *)&v139 + 1))
          {
            v61 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v63 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v64 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
        }
        else
        {
          os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
          v66 = *a1;
          v67 = a1[1];
          *(_DWORD *)object = 134218240;
          *(_QWORD *)&object[4] = v66;
          *(_WORD *)&object[12] = 2048;
          *(_QWORD *)&object[14] = v67;
          v68 = (void *)_os_log_send_and_compose_impl();
          if (v68)
            free(v68);
        }
        if (v3)
        {
          sub_20E8C003C((uint64_t)&v126, "Width must be between 160 and 640, configured dimension %lux%lu", *a1, a1[1]);
          sub_20E863570((uint64_t)&v126);
        }
        sub_20E863570((uint64_t)&v126);
        v69 = v134;
        if (!v134)
          return 0;
        v70 = (unint64_t *)&v134->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
LABEL_181:
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
        return 0;
      }
    }
    memmove(v21, v19, v20);
    goto LABEL_34;
  }
  if ((*((_DWORD *)a1 + 2) - 160) < 0x1F61)
    return 1;
  sub_20FDA288C(&v135);
  if (**(int **)(v135 + 56) <= 4)
  {
    v11 = *(unsigned __int8 *)(v135 + 72);
    v12 = sub_20E8C31DC(v135, "OSLogSurrogateAppender", 1, 0);
    v13 = v12;
    if (v11 || v12 != 0)
    {
      v126 = &v135;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v128 = std::chrono::system_clock::now().__d_.__rep_;
      v129 = 4;
      v130 = "unknown file";
      v131 = 38;
      v133 = 0;
      v134 = 0;
      v132 = "unknown function";
      v15 = v135;
      if (*(char *)(v135 + 39) < 0)
      {
        v17 = *(const char **)(v135 + 16);
        v16 = *(_QWORD *)(v135 + 24);
      }
      else
      {
        v16 = *(unsigned __int8 *)(v135 + 39);
        v17 = (const char *)(*v126 + 16);
      }
      v125 = *v126 + 16;
      v72 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v139 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A50F >= 0)
        v73 = (const char *)&xmmword_254A4A4F8;
      else
        v73 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v74 = byte_254A4A50F;
      else
        v74 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      *(_QWORD *)object = os_log_create(v73, v17);
      v75 = &object[8];
      if (v74 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v74 >= 0x17)
      {
        v76 = v13;
        v77 = v17;
        v78 = v15;
        v79 = v11;
        v80 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v74 | 7) != 0x17)
          v80 = v74 | 7;
        v81 = v80 + 1;
        v75 = operator new(v80 + 1);
        *(_QWORD *)&object[16] = v74;
        *(_QWORD *)&v139 = v81 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v75;
        v11 = v79;
        v15 = v78;
        v17 = v77;
        v13 = v76;
      }
      else
      {
        BYTE7(v139) = v74;
        if (!v74)
        {
LABEL_116:
          v75[v74] = 0;
          BYTE8(v139) = 1;
          v82 = &__p;
          if (v16 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v16 >= 0x17)
          {
            v83 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17)
              v83 = v16 | 7;
            v84 = v83 + 1;
            v82 = operator new(v83 + 1);
            v141 = v16;
            v142 = v84 | 0x8000000000000000;
            __p = v82;
          }
          else
          {
            HIBYTE(v142) = v16;
            if (!v16)
              goto LABEL_124;
          }
          memmove(v82, v17, v16);
LABEL_124:
          *((_BYTE *)v82 + v16) = 0;
          v143 = 1;
          v85 = *(NSObject **)object;
          if (SHIBYTE(v142) < 0)
            operator delete(__p);
          if (BYTE8(v139) && SBYTE7(v139) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v13 && *(_QWORD *)(v13 + 24))
          {
            v86 = _os_log_pack_size();
            v87 = (std::__shared_weak_count_vtbl *)operator new(v86, (std::align_val_t)8uLL);
            v88 = (std::__shared_weak_count *)operator new();
            v89 = v88;
            v88->__shared_owners_ = 0;
            v90 = (unint64_t *)&v88->__shared_owners_;
            v88->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v88->__shared_weak_owners_ = 0;
            v88[1].__vftable = v87;
            *(_QWORD *)object = v87;
            *(_QWORD *)&object[8] = v87;
            *(_QWORD *)&object[16] = v88;
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
            v139 = 0uLL;
            __p = 0;
            do
              v92 = __ldaxr(v90);
            while (__stlxr(v92 - 1, v90));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v89);
            }
            v93 = *(_QWORD *)object;
            v94 = _os_log_pack_fill();
            v95 = *a1;
            v96 = a1[1];
            *(_DWORD *)v94 = 134218240;
            *(_QWORD *)(v94 + 4) = v95;
            *(_WORD *)(v94 + 12) = 2048;
            *(_QWORD *)(v94 + 14) = v96;
            v97 = operator new();
            v98 = *(unsigned __int8 *)(v15 + 39);
            v99 = v125;
            if ((v98 & 0x80u) != 0)
            {
              v99 = *(_QWORD *)(v15 + 16);
              v98 = *(_QWORD *)(v15 + 24);
            }
            *(_QWORD *)v97 = v93;
            *(_OWORD *)(v97 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v97 + 24) = v139;
            v139 = 0uLL;
            *(_QWORD *)(v97 + 40) = v99;
            *(_QWORD *)(v97 + 48) = v98;
            *(_BYTE *)(v97 + 56) = 16;
            v136 = 0;
            v137 = v97;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), &v137);
            v100 = v137;
            v137 = 0;
            if (v100)
            {
              v101 = *(std::__shared_weak_count **)(v100 + 32);
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              v104 = *(std::__shared_weak_count **)(v100 + 16);
              if (v104)
              {
                v105 = (unint64_t *)&v104->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              MEMORY[0x212BC6398](v100, 0x10F0C40B62ED6C6);
              v107 = v136;
              v136 = 0;
              if (v107)
              {
                v108 = *(std::__shared_weak_count **)(v107 + 32);
                if (v108)
                {
                  v109 = (unint64_t *)&v108->__shared_owners_;
                  do
                    v110 = __ldaxr(v109);
                  while (__stlxr(v110 - 1, v109));
                  if (!v110)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                }
                v111 = *(std::__shared_weak_count **)(v107 + 16);
                if (v111)
                {
                  v112 = (unint64_t *)&v111->__shared_owners_;
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  if (!v113)
                  {
                    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                    std::__shared_weak_count::__release_weak(v111);
                  }
                }
                MEMORY[0x212BC6398](v107, 0x10F0C40B62ED6C6);
              }
            }
            v114 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
            if (*((_QWORD *)&v139 + 1))
            {
              v115 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            v117 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v118 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
          }
          else
          {
            os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
            v120 = *a1;
            v121 = a1[1];
            *(_DWORD *)object = 134218240;
            *(_QWORD *)&object[4] = v120;
            *(_WORD *)&object[12] = 2048;
            *(_QWORD *)&object[14] = v121;
            v122 = (void *)_os_log_send_and_compose_impl();
            if (v122)
              free(v122);
          }
          if (v11)
          {
            sub_20E8C003C((uint64_t)&v126, "Height must be between supported is 160 and 8192, configured dimension %lux%lu", *a1, a1[1]);
            sub_20E863570((uint64_t)&v126);
          }
          sub_20E863570((uint64_t)&v126);
          v69 = v134;
          if (!v134)
            return 0;
          v123 = (unint64_t *)&v134->__shared_owners_;
          do
            v71 = __ldaxr(v123);
          while (__stlxr(v71 - 1, v123));
          goto LABEL_181;
        }
      }
      memmove(v75, v73, v74);
      goto LABEL_116;
    }
  }
  return 0;
}

void sub_20FDA26C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20FDA2710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDA27A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDA27C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDA27D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a32 && a31 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20FDA286C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FDA287C()
{
  JUMPOUT(0x20FDA2884);
}

void sub_20FDA288C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C530);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C530))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C528);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C530);
  }
  *a1 = qword_254A6C528;
}

void sub_20FDA2928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C530);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C530);
  _Unwind_Resume(a1);
}

float sub_20FDA2980(unint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int8x16_t *v13;
  unint64_t v14;
  unint64_t v15;
  float result;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  __int128 v21;

  v21 = 0u;
  v17 = 0u;
  v18 = 0;
  v19[0] = xmmword_2103C0660;
  v19[1] = xmmword_2103A4D70;
  v20 = 10;
  v6 = a2 - 2;
  if (a2 <= 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 42, (uint64_t)"num_scales > 2", 14, (uint64_t)"Number of scales should be > 2", 30, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_17;
  }
  if (v6 >= 0xB)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 44, (uint64_t)"num_scales_minus2 <= kMaxNumOfScalesMinus2", 42, (uint64_t)"Number of scales minus 2 should be less than or equal to max expected", 69, (void (*)(void **))sub_21023DDB0))
    {
      v7 = a2 - 3;
      a3[9] = 0;
      *(_OWORD *)(a3 + 7) = 0u;
      *(_OWORD *)(a3 + 5) = 0u;
      *(_OWORD *)(a3 + 3) = 0u;
      goto LABEL_8;
    }
LABEL_17:
    abort();
  }
  v7 = a2 - 3;
  a3[9] = 0;
  *(_OWORD *)(a3 + 7) = 0u;
  *(_OWORD *)(a3 + 5) = 0u;
  *(_OWORD *)(a3 + 3) = 0u;
  if (a2 - 3 < 3)
    goto LABEL_16;
LABEL_8:
  memcpy(a3 + 3, v19, 8 * a2 - 40);
  v8 = v7 - 1;
  if (v7 - 1 >= 2)
    v8 = 2;
  v9 = v7 - v8;
  if (v7 - v8 < 4)
  {
    v10 = v7;
    do
LABEL_15:
      a1 -= *((_QWORD *)&v17 + v10--);
    while (v10 > 2);
    goto LABEL_16;
  }
  v10 = v7 - (v9 & 0xFFFFFFFFFFFFFFFCLL);
  v11 = 0uLL;
  v12 = (int64x2_t)a1;
  v13 = (int8x16_t *)((char *)&v17 + 8 * v7 - 8);
  v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v12 = vsubq_s64(v12, (int64x2_t)vextq_s8(*v13, *v13, 8uLL));
    v11 = vsubq_s64(v11, (int64x2_t)vextq_s8(v13[-1], v13[-1], 8uLL));
    v13 -= 2;
    v14 -= 4;
  }
  while (v14);
  a1 = vaddvq_s64(vaddq_s64(v11, v12));
  if (v9 != (v9 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_15;
LABEL_16:
  v15 = (unint64_t)(float)((float)a1 * 0.21);
  a3[2] = v15;
  result = (float)a1 * 0.25;
  *a3 = a1 - ((unint64_t)result + v15);
  a3[1] = (unint64_t)result;
  return result;
}

void sub_20FDA2B7C(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v6 = a3 - 2;
  if (a3 <= 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 102, (uint64_t)"num_scales > 2", 14, (uint64_t)"Number of scales should be > 2", 30, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_28;
  }
  if (v6 >= 0xB)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 104, (uint64_t)"num_scales_minus2 <= kMaxNumOfScalesMinus2", 42, (uint64_t)"Number of scales minus 2 should be less than or equal to max expected", 69, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_28;
    }
    goto LABEL_7;
  }
  if (v6)
  {
LABEL_7:
    v7 = 0;
    v8 = a4;
    v9 = a4 >> 5;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 8 * v7);
      v11 = *(_QWORD *)(a2 + 24 * v7 + 8);
      v12 = *(const void **)(a2 + 24 * v7);
      v13 = v11 - (_QWORD)v12;
      if (v11 - (uint64_t)v12 < 0)
        sub_20E867F44();
      v14 = v13 >> 2;
      v15 = (char *)operator new(v11 - (_QWORD)v12);
      memcpy(v15, v12, v13);
      v16 = &v15[4 * (v13 >> 2) - 4];
      if (v16 != v15)
      {
        v17 = *(_DWORD *)v16;
        v18 = 4 * v14;
        v19 = v15 - 8;
        do
        {
          v17 += *(_DWORD *)&v19[v18];
          *(_DWORD *)&v19[v18] = v17;
          v18 -= 4;
        }
        while (v18 != 4);
      }
      v20 = (unint64_t)(float)((float)v10 * 0.8);
      if (v14 <= v9)
        v21 = v14 - 1;
      else
        v21 = v9;
      v22 = v8;
      if (*(unsigned int *)&v15[4 * v21] >= v20)
      {
        v23 = 32 * (v21 + 1);
        if (v21 + 1 >= v14)
        {
LABEL_22:
          v22 = v23 - 32 * v20 / *(unsigned int *)v16;
        }
        else
        {
          v24 = &v15[4 * v21 + 4];
          v25 = ~v21 + v14;
          while (1)
          {
            v26 = *(unsigned int *)v24;
            v27 = v20 - v26;
            if (v20 > v26)
              break;
            v23 += 32;
            v24 += 4;
            if (!--v25)
            {
              v23 = 8 * v13;
              goto LABEL_22;
            }
          }
          v28 = (*((_DWORD *)v24 - 1) - v26);
          if (v23 - 32 * v27 / v28 <= v8)
            v22 = v8;
          else
            v22 = v23 - 32 * v27 / v28;
        }
      }
      *(_QWORD *)(a5 + 8 * v7) = v22;
      operator delete(v15);
      if (*(_QWORD *)(a5 + 8 * v7) < v8
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 109, (uint64_t)"laplacian_threshold[k] >= min_score", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      if (++v7 == v6)
        return;
    }
LABEL_28:
    abort();
  }
}

void sub_20FDA2DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDA2E10(_QWORD *a1, int a2, int a3, int a4, int a5, unint64_t a6, unint64_t a7)
{
  int v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  unint64_t v20;
  float v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  float v25;
  uint64_t *v26;
  float v27;
  uint64_t *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  float **v60;
  float *v61;
  float *v62;
  uint64_t v63;
  float *v64;
  unint64_t v65;
  unint64_t v66;
  float *v67;
  float *v68;
  float v69;
  float v70;
  float v71;
  int v72;
  int v73;
  float v74;
  float v75;
  float *v76;
  float *v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  float *v82;
  float v83;
  float v84;
  int v85;
  float *v86;
  float *v87;
  int v88;
  float v89;
  int v90;
  int v91;
  float *v92;
  int v93;
  float v94;
  int v95;
  float v96;
  float v97;
  float *v98;
  float v99;
  float *v100;
  float v101;
  float v102;
  int v103;
  int v104;
  float v105;
  float v106;
  float v107;
  float *v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  int v116;
  float *v117;
  float v118;
  float v119;
  float *v120;
  float *v121;
  float *v122;
  float v123;
  float v124;
  int v125;
  int v126;
  float v127;
  float v128;
  int v129;
  float v130;
  uint64_t i;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  char *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char *v147;
  _BYTE *v148;
  unint64_t v149;
  char *v150;
  char *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  void *v155;
  void *v156;
  char *v157;
  char *v158;
  void *v159;
  void *v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  _QWORD *v166;
  __int128 v167;
  char *v168;
  char *__p;
  char *v170;

  v12 = a2;
  if ((a2 != 1 || a3 != 1)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp", 43, (uint64_t)"(num_buckets_x == 1 && num_buckets_y == 1)", 42, (uint64_t)"num_buckets x and y should be 1, other settings are currently not supported", 75, (void (*)(void **))sub_21023DDB0)|| (v161 = a5, a4 <= 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp", 44, (uint64_t)"num_buckets_scale >= 1", 22, (uint64_t)"num of buckets scale should be >= 1", 35, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v164 = a3 * v12;
  v14 = a3 * v12 * a4;
  v15 = v14;
  __p = 0;
  v170 = 0;
  if (v14)
  {
    if (v14 < 0)
      sub_20E867F44();
    __p = (char *)operator new(24 * v14);
    bzero(__p, 24 * ((24 * v15 - 24) / 0x18uLL) + 24);
    v170 = &__p[24 * ((24 * v15 - 24) / 0x18uLL) + 24];
  }
  v163 = v15;
  v166 = a1;
  v16 = a1[1] - *a1;
  if (v16)
  {
    v17 = 0;
    v18 = (float)a6 / (float)v12;
    v19 = (float)a7;
    v20 = 0x8E38E38E38E38E39 * (v16 >> 3);
    v21 = v19 / (float)a3;
    v162 = v12;
    do
    {
      while (1)
      {
        v22 = (unint64_t *)(*v166 + 72 * v17);
        v23 = *v22;
        v24 = vcvtms_s32_f32((float)((float)(unsigned __int16)*v22 / v18) * 0.015625)
            + vcvtms_s32_f32((float)((float)WORD1(*v22) / v21) * 0.015625) * v12;
        if (v24)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp", 62, (uint64_t)"bin_index == 0", 14, (uint64_t)"bin index should always be 0", 28, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v23 = *v22;
        }
        v25 = (float)((float)BYTE5(v23) * 0.0625) * 0.25;
        if (v25 > (float)(a4 - 1))
          v25 = (float)(a4 - 1);
        v26 = (uint64_t *)&__p[24 * (v24 + v164 * vcvtms_s32_f32(v25))];
        v27 = (float)(HIWORD(v23) & 0x7FFF);
        v28 = v26 + 1;
        v29 = (char *)v26[1];
        v30 = v26[2];
        if ((unint64_t)v29 >= v30)
          break;
        *(float *)v29 = v27;
        *((_DWORD *)v29 + 1) = v17;
        *v28 = (uint64_t)(v29 + 8);
        if (++v17 == v20)
          goto LABEL_40;
      }
      v31 = v20;
      v32 = (_BYTE *)*v26;
      v33 = (uint64_t)&v29[-*v26];
      v34 = v33 >> 3;
      v35 = (v33 >> 3) + 1;
      if (v35 >> 61)
        sub_20E867F44();
      v36 = v30 - (_QWORD)v32;
      if (v36 >> 2 > v35)
        v35 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 61)
          sub_20E877A38();
        v38 = operator new(8 * v37);
        v39 = (uint64_t)&v38[8 * v34];
        *(float *)v39 = v27;
        *(_DWORD *)(v39 + 4) = v17;
        v40 = (char *)(v29 - v32);
        if (v29 != v32)
        {
LABEL_27:
          v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) < 0x58)
          {
            v42 = v39;
            v20 = v31;
            goto LABEL_35;
          }
          v43 = v29 - &v38[v33];
          v42 = v39;
          v20 = v31;
          if (v43 < 0x20)
            goto LABEL_193;
          v44 = ((unint64_t)v41 >> 3) + 1;
          v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v29[-v45];
          v42 = v39 - v45;
          v47 = &v38[8 * v34 - 16];
          v48 = v29 - 16;
          v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 4;
          }
          while (v49);
          v29 = v46;
          if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_193:
            do
            {
LABEL_35:
              v51 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *(_QWORD *)(v42 - 8) = v51;
              v42 -= 8;
            }
            while (v29 != v32);
          }
          v29 = (char *)*v26;
          goto LABEL_37;
        }
      }
      else
      {
        v38 = 0;
        v39 = 8 * v34;
        *(float *)v39 = v27;
        *(_DWORD *)(v39 + 4) = v17;
        v40 = (char *)(v29 - v32);
        if (v29 != v32)
          goto LABEL_27;
      }
      v42 = v39;
      v20 = v31;
LABEL_37:
      *v26 = v42;
      v52 = v39 + 8;
      *v28 = v39 + 8;
      v26[2] = (uint64_t)&v38[8 * v37];
      v12 = v162;
      if (v29)
        operator delete(v29);
      *v28 = v52;
      ++v17;
    }
    while (v17 != v20);
  }
LABEL_40:
  v167 = 0uLL;
  v168 = 0;
  v53 = (int)v163 * (uint64_t)(v161 / (int)v163);
  if (v53)
  {
    if (v53 > 0x38E38E38E38E38ELL)
      sub_20E867F44();
    v54 = (char *)operator new(72 * v53);
    v55 = &v54[72 * v53];
    *(_QWORD *)&v167 = v54;
    *((_QWORD *)&v167 + 1) = v54;
    v168 = v55;
    v56 = v166;
  }
  else
  {
    v55 = 0;
    v54 = 0;
    v56 = v166;
  }
  v57 = 0;
  v58 = (char *)*((_QWORD *)&v167 + 1);
  v59 = v54;
  do
  {
    v165 = v57;
    v60 = (float **)&__p[24 * v57];
    v61 = *v60;
    v62 = v60[1];
    if (((char *)v62 - (char *)*v60) >> 3 >= (unint64_t)(v161 / (int)v163))
      v63 = v161 / (int)v163;
    else
      v63 = ((char *)v62 - (char *)*v60) >> 3;
    v64 = &v61[2 * v63];
    if (v64 == v62)
      goto LABEL_137;
    while (1)
    {
      v65 = ((char *)v62 - (char *)v61) >> 3;
      if (v65 < 2)
        goto LABEL_137;
      if (v65 == 3)
      {
        v111 = v61[2];
        v112 = *v61;
        v113 = *(v62 - 2);
        if (v111 <= *v61)
        {
          if (v113 > v111)
          {
            v61[2] = v113;
            *(v62 - 2) = v111;
            v126 = *((_DWORD *)v61 + 3);
            v61[3] = *(v62 - 1);
            *((_DWORD *)v62 - 1) = v126;
            v127 = v61[2];
            v128 = *v61;
            if (v127 > *v61)
            {
              *v61 = v127;
              v61[2] = v128;
              v129 = *((_DWORD *)v61 + 1);
              v61[1] = v61[3];
              *((_DWORD *)v61 + 3) = v129;
            }
          }
          goto LABEL_137;
        }
        if (v113 <= v111)
        {
          *v61 = v111;
          v61[2] = v112;
          v116 = *((_DWORD *)v61 + 1);
          v61[1] = v61[3];
          *((_DWORD *)v61 + 3) = v116;
          v130 = *(v62 - 2);
          if (v130 <= v112)
            goto LABEL_137;
          v61[2] = v130;
          *(v62 - 2) = v112;
          v61[3] = *(v62 - 1);
LABEL_120:
          *((_DWORD *)v62 - 1) = v116;
          goto LABEL_137;
        }
        *v61 = v113;
        *(v62 - 2) = v112;
LABEL_119:
        v116 = *((_DWORD *)v61 + 1);
        v61[1] = *(v62 - 1);
        goto LABEL_120;
      }
      if (v65 == 2)
      {
        v114 = *(v62 - 2);
        v115 = *v61;
        if (v114 <= *v61)
          goto LABEL_137;
        *v61 = v114;
        *(v62 - 2) = v115;
        goto LABEL_119;
      }
      if ((char *)v62 - (char *)v61 <= 63)
      {
        while (v61 != v62 - 2)
        {
          v117 = v61;
          v61 += 2;
          if (v117 != v62 && v61 != v62)
          {
            v118 = *v117;
            v119 = *v117;
            v120 = v61;
            v121 = v117;
            v122 = v61;
            do
            {
              v123 = *v122;
              v122 += 2;
              v124 = v123;
              if (v123 > v119)
              {
                v119 = v124;
                v121 = v120;
              }
              v120 = v122;
            }
            while (v122 != v62);
            if (v121 != v117)
            {
              *v117 = *v121;
              *v121 = v118;
              v125 = *((_DWORD *)v117 + 1);
              v117[1] = v121[1];
              *((_DWORD *)v121 + 1) = v125;
            }
          }
        }
        goto LABEL_137;
      }
      v66 = v65 >> 1;
      v67 = &v61[2 * (v65 >> 1)];
      v68 = v62 - 2;
      v69 = *(v62 - 2);
      v70 = *v67;
      v71 = *v61;
      if (*v67 > *v61)
        break;
      if (v69 <= v70)
      {
        v73 = 0;
        v74 = *v61;
        v75 = *v67;
        if (*v61 > *v67)
          goto LABEL_56;
      }
      else
      {
        *v67 = v69;
        *(v62 - 2) = v70;
        v86 = &v61[2 * v66];
        v88 = *((_DWORD *)v86 + 1);
        v87 = v86 + 1;
        *v87 = *(v62 - 1);
        *((_DWORD *)v62 - 1) = v88;
        v89 = *v61;
        if (*v67 <= *v61)
          goto LABEL_96;
        *v61 = *v67;
        *v67 = v89;
        v90 = *((_DWORD *)v61 + 1);
        v61[1] = *v87;
        *(_DWORD *)v87 = v90;
        v73 = 2;
        v74 = *v61;
        v75 = *v67;
        if (*v61 > *v67)
          goto LABEL_56;
      }
LABEL_74:
      v76 = v62 - 2;
      while (1)
      {
        v76 -= 2;
        if (v76 == v61)
          break;
        if (*v76 > v75)
        {
          *v61 = *v76;
          *v76 = v74;
          v93 = *((_DWORD *)v61 + 1);
          v61[1] = v76[1];
          *((_DWORD *)v76 + 1) = v93;
          ++v73;
          v77 = v61 + 2;
          if (v61 + 2 < v76)
            goto LABEL_57;
          goto LABEL_78;
        }
      }
      v98 = v61 + 2;
      if (v74 <= *v68)
      {
        if (v98 == v68)
          goto LABEL_137;
        while (1)
        {
          v99 = *v98;
          if (v74 > *v98)
            break;
          v98 += 2;
          if (v98 == v68)
            goto LABEL_137;
        }
        *v98 = *v68;
        *(v62 - 2) = v99;
        v103 = *((_DWORD *)v98 + 1);
        v98[1] = *(v62 - 1);
        *((_DWORD *)v62 - 1) = v103;
        v98 += 2;
      }
      if (v98 == v68)
        goto LABEL_137;
      while (1)
      {
        v105 = *v61;
        do
        {
          v106 = *v98;
          v98 += 2;
          v107 = v106;
        }
        while (v105 <= v106);
        v108 = v98 - 2;
        do
        {
          v109 = *(v68 - 2);
          v68 -= 2;
          v110 = v109;
        }
        while (v105 > v109);
        if (v108 >= v68)
          break;
        *(v98 - 2) = v110;
        *v68 = v107;
        v104 = *((_DWORD *)v98 - 1);
        *(v98 - 1) = v68[1];
        *((_DWORD *)v68 + 1) = v104;
      }
      v61 = v98 - 2;
      if (v108 > v64)
        goto LABEL_137;
LABEL_112:
      if (v62 == v64)
        goto LABEL_137;
    }
    if (v69 > v70)
    {
      *v61 = v69;
      *(v62 - 2) = v71;
      v72 = *((_DWORD *)v61 + 1);
      v61[1] = *(v62 - 1);
      *((_DWORD *)v62 - 1) = v72;
      v73 = 1;
      v74 = *v61;
      v75 = *v67;
      if (*v61 > *v67)
        goto LABEL_56;
      goto LABEL_74;
    }
    *v61 = v70;
    *v67 = v71;
    v91 = *((_DWORD *)v61 + 1);
    v92 = &v61[2 * v66 + 1];
    v61[1] = *v92;
    *(_DWORD *)v92 = v91;
    if (*v68 > v71)
    {
      *v67 = *v68;
      *(v62 - 2) = v71;
      *v92 = *(v62 - 1);
      *((_DWORD *)v62 - 1) = v91;
      v73 = 2;
      v74 = *v61;
      v75 = *v67;
      if (*v61 > *v67)
        goto LABEL_56;
      goto LABEL_74;
    }
LABEL_96:
    v73 = 1;
    v74 = *v61;
    v75 = *v67;
    if (*v61 <= *v67)
      goto LABEL_74;
LABEL_56:
    v76 = v62 - 2;
    v77 = v61 + 2;
    if (v61 + 2 >= v62 - 2)
    {
LABEL_78:
      v82 = v77;
    }
    else
    {
LABEL_57:
      v78 = v77;
      while (1)
      {
        v79 = *v67;
        do
        {
          v80 = *v78;
          v78 += 2;
          v81 = v80;
        }
        while (v80 > v79);
        v82 = v78 - 2;
        do
        {
          v83 = *(v76 - 2);
          v76 -= 2;
          v84 = v83;
        }
        while (v83 <= v79);
        if (v82 >= v76)
          break;
        *(v78 - 2) = v84;
        *v76 = v81;
        v85 = *((_DWORD *)v78 - 1);
        *(v78 - 1) = v76[1];
        *((_DWORD *)v76 + 1) = v85;
        ++v73;
        if (v82 == v67)
          v67 = v76;
      }
    }
    if (v82 != v67)
    {
      v94 = *v82;
      if (*v67 > *v82)
      {
        *v82 = *v67;
        *v67 = v94;
        v95 = *((_DWORD *)v82 + 1);
        v82[1] = v67[1];
        *((_DWORD *)v67 + 1) = v95;
        ++v73;
      }
    }
    if (v82 == v64)
      goto LABEL_137;
    if (v73)
    {
LABEL_84:
      if (v82 <= v64)
        v61 = v82 + 2;
      else
        v62 = v82;
      goto LABEL_112;
    }
    if (v82 <= v64)
    {
      v100 = v82 + 2;
      while (v100 != v62)
      {
        v101 = *v100;
        v102 = *(v100 - 2);
        v100 += 2;
        if (v101 > v102)
          goto LABEL_84;
      }
    }
    else
    {
      while (v77 != v82)
      {
        v96 = *v77;
        v97 = *(v77 - 2);
        v77 += 2;
        if (v96 > v97)
          goto LABEL_84;
      }
    }
LABEL_137:
    if (v63)
    {
      for (i = 0; i != v63; ++i)
      {
        while (1)
        {
          v135 = *v56 + 72 * SLODWORD((*v60)[2 * i + 1]);
          if (v59 >= v55)
            break;
          *(_OWORD *)v59 = *(_OWORD *)v135;
          v132 = *(_OWORD *)(v135 + 16);
          v133 = *(_OWORD *)(v135 + 32);
          v134 = *(_OWORD *)(v135 + 48);
          *((_QWORD *)v59 + 8) = *(_QWORD *)(v135 + 64);
          *((_OWORD *)v59 + 2) = v133;
          *((_OWORD *)v59 + 3) = v134;
          *((_OWORD *)v59 + 1) = v132;
          v58 = v59 + 72;
          ++i;
          v59 += 72;
          if (i == v63)
            goto LABEL_44;
        }
        v136 = 0x8E38E38E38E38E39 * ((v59 - v54) >> 3) + 1;
        if (v136 > 0x38E38E38E38E38ELL)
          sub_20E867F44();
        if (0x1C71C71C71C71C72 * ((v55 - v54) >> 3) > v136)
          v136 = 0x1C71C71C71C71C72 * ((v55 - v54) >> 3);
        if (0x8E38E38E38E38E39 * ((v55 - v54) >> 3) >= 0x1C71C71C71C71C7)
          v137 = 0x38E38E38E38E38ELL;
        else
          v137 = v136;
        if (v137)
        {
          if (v137 > 0x38E38E38E38E38ELL)
            sub_20E877A38();
          v138 = (char *)operator new(72 * v137);
        }
        else
        {
          v138 = 0;
        }
        v139 = &v138[8 * ((v59 - v54) >> 3)];
        *(_OWORD *)v139 = *(_OWORD *)v135;
        v140 = *(_OWORD *)(v135 + 16);
        v141 = *(_OWORD *)(v135 + 32);
        v142 = *(_OWORD *)(v135 + 48);
        *((_QWORD *)v139 + 8) = *(_QWORD *)(v135 + 64);
        *((_OWORD *)v139 + 2) = v141;
        *((_OWORD *)v139 + 3) = v142;
        *((_OWORD *)v139 + 1) = v140;
        if (v59 == v54)
        {
          v147 = &v138[8 * ((v59 - v54) >> 3)];
          v55 = &v138[72 * v137];
          v58 = v139 + 72;
          *(_QWORD *)&v167 = v147;
          v168 = v55;
          if (!v54)
            goto LABEL_156;
        }
        else
        {
          v143 = &v138[8 * ((v59 - v54) >> 3)];
          do
          {
            *(_OWORD *)(v143 - 72) = *(_OWORD *)(v59 - 72);
            v144 = *(_OWORD *)(v59 - 56);
            v145 = *(_OWORD *)(v59 - 40);
            v146 = *(_OWORD *)(v59 - 24);
            v147 = v143 - 72;
            *((_QWORD *)v143 - 1) = *((_QWORD *)v59 - 1);
            *(_OWORD *)(v143 - 24) = v146;
            *(_OWORD *)(v143 - 40) = v145;
            *(_OWORD *)(v143 - 56) = v144;
            v59 -= 72;
            v143 -= 72;
          }
          while (v59 != v54);
          v55 = &v138[72 * v137];
          v58 = v139 + 72;
          *(_QWORD *)&v167 = v147;
          v168 = v55;
          if (!v54)
            goto LABEL_156;
        }
        operator delete(v54);
LABEL_156:
        v54 = v147;
        v56 = v166;
        v59 = v58;
      }
    }
LABEL_44:
    v57 = v165 + 1;
  }
  while (v165 + 1 != v163);
  *((_QWORD *)&v167 + 1) = v58;
  v148 = (_BYTE *)v167;
  v149 = 0x8E38E38E38E38E39 * ((uint64_t)&v59[-v167] >> 3);
  if (0x8E38E38E38E38E39 * ((uint64_t)&v55[-v167] >> 3) <= v149)
    goto LABEL_171;
  if (v59 == (char *)v167)
  {
    *(_QWORD *)&v167 = 8 * ((uint64_t)&v59[-v167] >> 3);
    *((_QWORD *)&v167 + 1) = 8 * ((v59 - v148) >> 3);
    v168 = (char *)*((_QWORD *)&v167 + 1);
    if (!v148)
      goto LABEL_171;
    goto LABEL_170;
  }
  if (v149 > 0x38E38E38E38E38ELL)
    sub_20E877A38();
  v150 = (char *)operator new((size_t)&v59[-v167]);
  v151 = &v150[8 * ((uint64_t)&v59[-v167] >> 3)];
  do
  {
    *(_OWORD *)(v151 - 72) = *(_OWORD *)(v59 - 72);
    v152 = *(_OWORD *)(v59 - 56);
    v153 = *(_OWORD *)(v59 - 40);
    v154 = *(_OWORD *)(v59 - 24);
    *((_QWORD *)v151 - 1) = *((_QWORD *)v59 - 1);
    *(_OWORD *)(v151 - 24) = v154;
    *(_OWORD *)(v151 - 40) = v153;
    *(_OWORD *)(v151 - 56) = v152;
    v151 -= 72;
    v59 -= 72;
  }
  while (v59 != (char *)v167);
  *(_QWORD *)&v167 = v151;
  *((_QWORD *)&v167 + 1) = &v150[72 * v149];
  v168 = (char *)*((_QWORD *)&v167 + 1);
  if (v148)
LABEL_170:
    operator delete(v148);
LABEL_171:
  v155 = (void *)*v166;
  if (*v166)
  {
    v166[1] = v155;
    operator delete(v155);
    *v166 = 0;
    v166[1] = 0;
    v166[2] = 0;
  }
  *(_OWORD *)v166 = v167;
  v166[2] = v168;
  v156 = __p;
  if (__p)
  {
    v157 = v170;
    if (v170 != __p)
    {
      v158 = v170;
      do
      {
        v160 = (void *)*((_QWORD *)v158 - 3);
        v158 -= 24;
        v159 = v160;
        if (v160)
        {
          *((_QWORD *)v157 - 2) = v159;
          operator delete(v159);
        }
        v157 = v158;
      }
      while (v158 != __p);
      v156 = __p;
    }
    operator delete(v156);
  }
}

void sub_20FDA3B50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20FDA3A2CLL);
}

void sub_20FDA3B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  sub_20E9DD680(&a18);
  _Unwind_Resume(a1);
}

unint64_t sub_20FDA3C3C(unint64_t result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  char v23;
  BOOL v24;
  char v25;
  BOOL v26;
  char v27;
  BOOL v28;
  BOOL v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  char v50;
  BOOL v51;
  char v52;
  BOOL v53;
  char v54;
  BOOL v55;
  char v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  char v70;
  BOOL v71;
  char v72;
  BOOL v73;
  char v74;
  BOOL v75;
  BOOL v76;
  char v77;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  char v104;
  BOOL v105;
  char v106;
  BOOL v107;
  char v108;
  BOOL v109;
  BOOL v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    v8 = a2 - 72;
    v7 = *((_QWORD *)a2 - 9);
    v9 = *(_QWORD *)result;
    v10 = -1;
    if (BYTE5(v7) >= (unint64_t)((unsigned __int16)WORD2(*(_QWORD *)result) >> 8))
      v10 = 1;
    if (BYTE5(v7) == (unint64_t)((unsigned __int16)WORD2(*(_QWORD *)result) >> 8))
    {
      v11 = (unsigned __int16)*((_QWORD *)a2 - 9);
      v12 = HIWORD(v7) & 0x7FFF;
      v13 = BYTE4(v7);
      v14 = v7 >> 63;
      v15 = (unsigned __int16)*(_QWORD *)result;
      v16 = HIWORD(v9) & 0x7FFF;
      v17 = BYTE4(v9);
      v18 = v9 >> 63;
      v19 = v9 >> 16;
      v20 = WORD1(v7);
      v21 = v14 >= v18;
      v22 = v14 == v18;
      v23 = -1;
      if (v21)
        v23 = 1;
      if (v22)
        v23 = 0;
      v21 = v13 >= v17;
      v24 = v13 == v17;
      v25 = -1;
      if (v21)
        v25 = 1;
      if (v24)
        v25 = v23;
      v21 = v12 >= v16;
      v26 = v12 == v16;
      v27 = -1;
      if (v21)
        v27 = 1;
      if (v26)
        v27 = v25;
      v21 = v11 >= v15;
      v28 = v11 == v15;
      v10 = -1;
      if (v21)
        v10 = 1;
      if (v28)
        v10 = v27;
      v21 = v20 >= (unsigned __int16)v19;
      v29 = v20 == (unsigned __int16)v19;
      v30 = -1;
      if (v21)
        v30 = 1;
      if (!v29)
        v10 = v30;
    }
    if (v10 < 0)
    {
      v129 = *(_OWORD *)(result + 32);
      v131 = *(_OWORD *)(result + 48);
      v133 = *(_QWORD *)(result + 64);
      v125 = *(_OWORD *)result;
      v127 = *(_OWORD *)(result + 16);
      *(_OWORD *)result = *(_OWORD *)v8;
      v32 = *(_OWORD *)(a2 - 40);
      v31 = *(_OWORD *)(a2 - 24);
      v33 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(result + 64) = *((_QWORD *)a2 - 1);
      *(_OWORD *)(result + 32) = v32;
      *(_OWORD *)(result + 48) = v31;
      *(_OWORD *)(result + 16) = v33;
      *((_QWORD *)a2 - 1) = v133;
      *(_OWORD *)(a2 - 40) = v129;
      *(_OWORD *)(a2 - 24) = v131;
      *(_OWORD *)v8 = v125;
      *(_OWORD *)(a2 - 56) = v127;
    }
    return result;
  }
  if ((uint64_t)a3 <= 128)
  {
    if ((char *)result == a2)
      return result;
    v35 = (_QWORD *)(result + 72);
    if ((char *)(result + 72) == a2)
      return result;
    v36 = 0;
    v37 = result;
    while (1)
    {
      v39 = v35;
      v40 = *v35;
      result = *(_QWORD *)v37;
      v41 = HIWORD(v40) & 0x7FFF;
      v42 = v40 >> 63;
      if (BYTE5(v40) >= (unint64_t)((unsigned __int16)WORD2(*(_QWORD *)v37) >> 8))
        v43 = 1;
      else
        v43 = -1;
      if (BYTE5(v40) == (unint64_t)((unsigned __int16)WORD2(*(_QWORD *)v37) >> 8))
      {
        v44 = (unsigned __int16)*(_QWORD *)v37;
        v45 = HIWORD(result) & 0x7FFF;
        v46 = BYTE4(result);
        v47 = result >> 63;
        v48 = result >> 16;
        v49 = v42 == v47;
        if (v42 >= v47)
          v50 = 1;
        else
          v50 = -1;
        if (v49)
          v50 = 0;
        v51 = BYTE4(v40) == v46;
        if (BYTE4(v40) >= v46)
          v52 = 1;
        else
          v52 = -1;
        if (v51)
          v52 = v50;
        v53 = v41 == v45;
        if (v41 >= v45)
          v54 = 1;
        else
          v54 = -1;
        if (v53)
          v54 = v52;
        v55 = (unsigned __int16)v40 == v44;
        if ((unsigned __int16)v40 >= v44)
          v56 = 1;
        else
          v56 = -1;
        if (v55)
          v56 = v54;
        v57 = WORD1(v40) == (unint64_t)(unsigned __int16)v48;
        if (WORD1(v40) >= (unint64_t)(unsigned __int16)v48)
          result = 1;
        else
          result = 255;
        if (!v57)
          v56 = result;
        if (v56 < 0)
        {
LABEL_78:
          v126 = *(_OWORD *)(v37 + 80);
          v128 = *(_OWORD *)(v37 + 96);
          v130 = *(_OWORD *)(v37 + 112);
          v132 = *(_OWORD *)(v37 + 128);
          result = WORD1(v40);
          v58 = v36;
          do
          {
            v59 = v6 + v58;
            v60 = *(_OWORD *)(v6 + v58);
            *(_OWORD *)(v59 + 88) = *(_OWORD *)(v6 + v58 + 16);
            v61 = *(_OWORD *)(v6 + v58 + 48);
            *(_OWORD *)(v59 + 104) = *(_OWORD *)(v6 + v58 + 32);
            *(_OWORD *)(v59 + 120) = v61;
            *(_QWORD *)(v59 + 136) = *(_QWORD *)(v6 + v58 + 64);
            *(_OWORD *)(v59 + 72) = v60;
            if (!v58)
            {
              v38 = v6;
              goto LABEL_41;
            }
            v62 = *(_QWORD *)(v59 - 72);
            if (BYTE5(v40) >= (unint64_t)BYTE5(v62))
              v63 = 1;
            else
              v63 = -1;
            if (BYTE5(v40) == (unint64_t)BYTE5(v62))
            {
              v64 = (unsigned __int16)v62;
              v65 = HIWORD(v62) & 0x7FFF;
              v66 = BYTE4(v62);
              v67 = v62 >> 63;
              v68 = v62 >> 16;
              v69 = v42 == v67;
              if (v42 >= v67)
                v70 = 1;
              else
                v70 = -1;
              if (v69)
                v70 = 0;
              v71 = BYTE4(v40) == v66;
              if (BYTE4(v40) >= v66)
                v72 = 1;
              else
                v72 = -1;
              if (v71)
                v72 = v70;
              v73 = v41 == v65;
              if (v41 >= v65)
                v74 = 1;
              else
                v74 = -1;
              if (v73)
                v74 = v72;
              v75 = (unsigned __int16)v40 == v64;
              if ((unsigned __int16)v40 >= v64)
                v63 = 1;
              else
                v63 = -1;
              if (v75)
                v63 = v74;
              v76 = WORD1(v40) == (unint64_t)(unsigned __int16)v68;
              if (WORD1(v40) >= (unint64_t)(unsigned __int16)v68)
                v77 = 1;
              else
                v77 = -1;
              if (!v76)
                v63 = v77;
            }
            v58 -= 72;
          }
          while (v63 < 0);
          v38 = v6 + v58 + 72;
LABEL_41:
          *(_QWORD *)v38 = v40;
          *(_OWORD *)(v38 + 8) = v126;
          *(_OWORD *)(v38 + 24) = v128;
          *(_OWORD *)(v38 + 40) = v130;
          *(_OWORD *)(v38 + 56) = v132;
        }
      }
      else if (v43 < 0)
      {
        goto LABEL_78;
      }
      v35 = v39 + 9;
      v36 += 72;
      v37 = (unint64_t)v39;
      if (v39 + 9 == (_QWORD *)a2)
        return result;
    }
  }
  v79 = a4;
  v80 = a3 >> 1;
  v81 = result + 72 * (a3 >> 1);
  v82 = a3 >> 1;
  if ((uint64_t)a3 <= a5)
  {
    sub_20FDA41A8(result, v81, v82, a4);
    v83 = &v79[9 * v80];
    result = sub_20FDA41A8(v6 + 72 * (a3 >> 1), (uint64_t)a2, a3 - (a3 >> 1), v83);
    v84 = &v79[9 * a3];
    v85 = v83;
    while (v85 != v84)
    {
      v89 = *v85;
      v90 = *v79;
      v91 = ((unsigned __int16)WORD2(*v85) >> 8);
      v92 = v91 == ((unsigned __int16)WORD2(*v79) >> 8);
      if (v91 >= ((unsigned __int16)WORD2(*v79) >> 8))
        v93 = 1;
      else
        v93 = -1;
      if (v92)
      {
        v94 = (unsigned __int16)*v85;
        v95 = HIWORD(v89) & 0x7FFF;
        v96 = BYTE4(v89);
        v97 = v89 >> 63;
        v98 = (unsigned __int16)*v79;
        result = HIWORD(v90) & 0x7FFF;
        v99 = BYTE4(v90);
        v100 = v90 >> 63;
        v101 = v90 >> 16;
        v102 = WORD1(v89);
        v103 = v97 == v100;
        if (v97 >= v100)
          v104 = 1;
        else
          v104 = -1;
        if (v103)
          v104 = 0;
        v105 = v96 == v99;
        if (v96 >= v99)
          v106 = 1;
        else
          v106 = -1;
        if (v105)
          v106 = v104;
        v107 = v95 == result;
        if (v95 >= result)
          v108 = 1;
        else
          v108 = -1;
        if (v107)
          v108 = v106;
        v109 = v94 == v98;
        if (v94 >= v98)
          v93 = 1;
        else
          v93 = -1;
        if (v109)
          v93 = v108;
        v110 = v102 == (unsigned __int16)v101;
        if (v102 >= (unsigned __int16)v101)
          v111 = 1;
        else
          v111 = -1;
        if (!v110)
          v93 = v111;
      }
      if (v93 < 0)
      {
        *(_OWORD *)v6 = *(_OWORD *)v85;
        v112 = *((_OWORD *)v85 + 1);
        v113 = *((_OWORD *)v85 + 2);
        v114 = *((_OWORD *)v85 + 3);
        *(_QWORD *)(v6 + 64) = v85[8];
        *(_OWORD *)(v6 + 32) = v113;
        *(_OWORD *)(v6 + 48) = v114;
        *(_OWORD *)(v6 + 16) = v112;
        v85 += 9;
        v6 += 72;
        if (v79 == v83)
        {
LABEL_155:
          if (v85 != v84)
          {
            v115 = 0;
            do
            {
              v116 = v6 + v115 * 8;
              *(_OWORD *)v116 = *(_OWORD *)&v85[v115];
              v117 = *(_OWORD *)&v85[v115 + 2];
              v118 = *(_OWORD *)&v85[v115 + 4];
              v119 = *(_OWORD *)&v85[v115 + 6];
              *(_QWORD *)(v116 + 64) = v85[v115 + 8];
              *(_OWORD *)(v116 + 32) = v118;
              *(_OWORD *)(v116 + 48) = v119;
              *(_OWORD *)(v116 + 16) = v117;
              v115 += 9;
            }
            while (&v85[v115] != v84);
          }
          return result;
        }
      }
      else
      {
        *(_OWORD *)v6 = *(_OWORD *)v79;
        v86 = *((_OWORD *)v79 + 1);
        v87 = *((_OWORD *)v79 + 2);
        v88 = *((_OWORD *)v79 + 3);
        *(_QWORD *)(v6 + 64) = v79[8];
        *(_OWORD *)(v6 + 32) = v87;
        *(_OWORD *)(v6 + 48) = v88;
        *(_OWORD *)(v6 + 16) = v86;
        v79 += 9;
        v6 += 72;
        if (v79 == v83)
          goto LABEL_155;
      }
    }
    if (v79 != v83)
    {
      v120 = 0;
      do
      {
        v121 = v6 + v120 * 8;
        *(_OWORD *)v121 = *(_OWORD *)&v79[v120];
        v122 = *(_OWORD *)&v79[v120 + 2];
        v123 = *(_OWORD *)&v79[v120 + 4];
        v124 = *(_OWORD *)&v79[v120 + 6];
        *(_QWORD *)(v121 + 64) = v79[v120 + 8];
        *(_OWORD *)(v121 + 32) = v123;
        *(_OWORD *)(v121 + 48) = v124;
        *(_OWORD *)(v121 + 16) = v122;
        v120 += 9;
      }
      while (&v79[v120] != v83);
    }
  }
  else
  {
    sub_20FDA3C3C(result, v81, v82, a4, a5);
    sub_20FDA3C3C(v6 + 72 * (a3 >> 1), a2, a3 - (a3 >> 1), v79, a5);
    return sub_20FDA4704(v6, (char *)(v6 + 72 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v79, a5);
  }
  return result;
}

unint64_t sub_20FDA41A8(unint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26;
  char v27;
  BOOL v28;
  char v29;
  BOOL v30;
  char v31;
  BOOL v32;
  BOOL v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  BOOL v70;
  char v71;
  BOOL v72;
  char v73;
  BOOL v74;
  BOOL v75;
  char v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  BOOL v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  char v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  BOOL v122;
  char v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  BOOL v133;
  char v134;
  BOOL v135;
  char v136;
  BOOL v137;
  char v138;
  BOOL v139;
  BOOL v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  unint64_t v145;
  uint64_t *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  unint64_t v150;
  uint64_t *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;

  if (a3)
  {
    v4 = a4;
    v7 = result;
    if (a3 == 2)
    {
      v12 = (_OWORD *)(a2 - 72);
      v11 = *(_QWORD *)(a2 - 72);
      v13 = *(_QWORD *)result;
      v14 = -1;
      if (BYTE5(v11) >= (unint64_t)((unsigned __int16)WORD2(*(_QWORD *)result) >> 8))
        v14 = 1;
      if (BYTE5(v11) == (unint64_t)((unsigned __int16)WORD2(*(_QWORD *)result) >> 8))
      {
        v15 = (unsigned __int16)*(_QWORD *)(a2 - 72);
        v16 = HIWORD(v11) & 0x7FFF;
        v17 = BYTE4(v11);
        v18 = v11 >> 63;
        v19 = (unsigned __int16)*(_QWORD *)result;
        v20 = HIWORD(v13) & 0x7FFF;
        v21 = BYTE4(v13);
        v22 = v13 >> 63;
        v23 = v13 >> 16;
        v24 = WORD1(v11);
        v25 = v18 >= v22;
        v26 = v18 == v22;
        v27 = -1;
        if (v25)
          v27 = 1;
        if (v26)
          v27 = 0;
        v25 = v17 >= v21;
        v28 = v17 == v21;
        v29 = -1;
        if (v25)
          v29 = 1;
        if (v28)
          v29 = v27;
        v25 = v16 >= v20;
        v30 = v16 == v20;
        v31 = -1;
        if (v25)
          v31 = 1;
        if (v30)
          v31 = v29;
        v25 = v15 >= v19;
        v32 = v15 == v19;
        v14 = -1;
        if (v25)
          v14 = 1;
        if (v32)
          v14 = v31;
        v25 = v24 >= (unsigned __int16)v23;
        v33 = v24 == (unsigned __int16)v23;
        v34 = -1;
        if (v25)
          v34 = 1;
        if (!v33)
          v14 = v34;
      }
      if (v14 < 0)
      {
        *(_OWORD *)a4 = *v12;
        v106 = *(_OWORD *)(a2 - 56);
        v107 = *(_OWORD *)(a2 - 40);
        v108 = *(_OWORD *)(a2 - 24);
        a4[8] = *(_QWORD *)(a2 - 8);
        *((_OWORD *)a4 + 2) = v107;
        *((_OWORD *)a4 + 3) = v108;
        *((_OWORD *)a4 + 1) = v106;
        v110 = *(_OWORD *)(result + 32);
        v109 = *(_OWORD *)(result + 48);
        v111 = *(_OWORD *)(result + 16);
        a4[17] = *(_QWORD *)(result + 64);
        *(_OWORD *)(a4 + 13) = v110;
        *(_OWORD *)(a4 + 15) = v109;
        *(_OWORD *)(a4 + 11) = v111;
        v41 = *(_OWORD *)result;
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)result;
        v35 = *(_OWORD *)(result + 16);
        v36 = *(_OWORD *)(result + 32);
        v37 = *(_OWORD *)(result + 48);
        a4[8] = *(_QWORD *)(result + 64);
        *((_OWORD *)a4 + 2) = v36;
        *((_OWORD *)a4 + 3) = v37;
        *((_OWORD *)a4 + 1) = v35;
        v39 = *(_OWORD *)(a2 - 40);
        v38 = *(_OWORD *)(a2 - 24);
        v40 = *(_OWORD *)(a2 - 56);
        a4[17] = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a4 + 13) = v39;
        *(_OWORD *)(a4 + 15) = v38;
        *(_OWORD *)(a4 + 11) = v40;
        v41 = *v12;
      }
      *(_OWORD *)(a4 + 9) = v41;
    }
    else if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
      v8 = *(_OWORD *)(result + 16);
      v9 = *(_OWORD *)(result + 32);
      v10 = *(_OWORD *)(result + 48);
      a4[8] = *(_QWORD *)(result + 64);
      *((_OWORD *)a4 + 2) = v9;
      *((_OWORD *)a4 + 3) = v10;
      *((_OWORD *)a4 + 1) = v8;
    }
    else if ((uint64_t)a3 > 8)
    {
      v112 = a3 >> 1;
      v113 = 72 * (a3 >> 1);
      v114 = result + v113;
      sub_20FDA3C3C(result, result + v113, a3 >> 1, a4, a3 >> 1);
      result = sub_20FDA3C3C(v7 + v113, a2, a3 - v112, &v4[(unint64_t)v113 / 8], a3 - v112);
      v115 = v7 + v113;
      while (v115 != a2)
      {
        v119 = *(_QWORD *)v115;
        v120 = *(_QWORD *)v7;
        v121 = ((unsigned __int16)WORD2(*(_QWORD *)v115) >> 8);
        v122 = v121 == ((unsigned __int16)WORD2(*(_QWORD *)v7) >> 8);
        if (v121 >= ((unsigned __int16)WORD2(*(_QWORD *)v7) >> 8))
          v123 = 1;
        else
          v123 = -1;
        if (v122)
        {
          v124 = (unsigned __int16)*(_QWORD *)v115;
          v125 = HIWORD(v119) & 0x7FFF;
          v126 = BYTE4(v119);
          v127 = v119 >> 63;
          v128 = (unsigned __int16)*(_QWORD *)v7;
          v129 = HIWORD(v120) & 0x7FFF;
          result = BYTE4(v120);
          v130 = v120 >> 63;
          v131 = v120 >> 16;
          v132 = WORD1(v119);
          v133 = v127 == v130;
          if (v127 >= v130)
            v134 = 1;
          else
            v134 = -1;
          if (v133)
            v134 = 0;
          v135 = v126 == result;
          if (v126 >= result)
            v136 = 1;
          else
            v136 = -1;
          if (v135)
            v136 = v134;
          v137 = v125 == v129;
          if (v125 >= v129)
            v138 = 1;
          else
            v138 = -1;
          if (v137)
            v138 = v136;
          v139 = v124 == v128;
          if (v124 >= v128)
            v123 = 1;
          else
            v123 = -1;
          if (v139)
            v123 = v138;
          v140 = v132 == (unsigned __int16)v131;
          if (v132 >= (unsigned __int16)v131)
            v141 = 1;
          else
            v141 = -1;
          if (!v140)
            v123 = v141;
        }
        if (v123 < 0)
        {
          *(_OWORD *)v4 = *(_OWORD *)v115;
          v142 = *(_OWORD *)(v115 + 16);
          v143 = *(_OWORD *)(v115 + 32);
          v144 = *(_OWORD *)(v115 + 48);
          v4[8] = *(_QWORD *)(v115 + 64);
          *((_OWORD *)v4 + 2) = v143;
          *((_OWORD *)v4 + 3) = v144;
          *((_OWORD *)v4 + 1) = v142;
          v115 += 72;
          v4 += 9;
          if (v7 == v114)
          {
LABEL_157:
            if (v115 != a2)
            {
              v145 = 0;
              do
              {
                v146 = &v4[v145 / 8];
                *(_OWORD *)v146 = *(_OWORD *)(v115 + v145);
                v147 = *(_OWORD *)(v115 + v145 + 16);
                v148 = *(_OWORD *)(v115 + v145 + 32);
                v149 = *(_OWORD *)(v115 + v145 + 48);
                v146[8] = *(_QWORD *)(v115 + v145 + 64);
                *((_OWORD *)v146 + 2) = v148;
                *((_OWORD *)v146 + 3) = v149;
                *((_OWORD *)v146 + 1) = v147;
                v145 += 72;
              }
              while (v115 + v145 != a2);
            }
            return result;
          }
        }
        else
        {
          *(_OWORD *)v4 = *(_OWORD *)v7;
          v116 = *(_OWORD *)(v7 + 16);
          v117 = *(_OWORD *)(v7 + 32);
          v118 = *(_OWORD *)(v7 + 48);
          v4[8] = *(_QWORD *)(v7 + 64);
          *((_OWORD *)v4 + 2) = v117;
          *((_OWORD *)v4 + 3) = v118;
          *((_OWORD *)v4 + 1) = v116;
          v7 += 72;
          v4 += 9;
          if (v7 == v114)
            goto LABEL_157;
        }
      }
      if (v7 != v114)
      {
        v150 = 0;
        do
        {
          v151 = &v4[v150 / 8];
          *(_OWORD *)v151 = *(_OWORD *)(v7 + v150);
          v152 = *(_OWORD *)(v7 + v150 + 16);
          v153 = *(_OWORD *)(v7 + v150 + 32);
          v154 = *(_OWORD *)(v7 + v150 + 48);
          v151[8] = *(_QWORD *)(v7 + v150 + 64);
          *((_OWORD *)v151 + 2) = v153;
          *((_OWORD *)v151 + 3) = v154;
          *((_OWORD *)v151 + 1) = v152;
          v150 += 72;
        }
        while (v7 + v150 != v114);
      }
    }
    else if (result != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
      v42 = *(_OWORD *)(result + 16);
      v43 = *(_OWORD *)(result + 32);
      v44 = *(_OWORD *)(result + 48);
      a4[8] = *(_QWORD *)(result + 64);
      *((_OWORD *)a4 + 2) = v43;
      *((_OWORD *)a4 + 3) = v44;
      *((_OWORD *)a4 + 1) = v42;
      v45 = result + 72;
      if (result + 72 != a2)
      {
        v46 = 0;
        v47 = a4;
        do
        {
          v52 = v47;
          v54 = *v47;
          v47 += 9;
          v53 = v54;
          v55 = *(_QWORD *)v45;
          v56 = ((unsigned __int16)WORD2(*(_QWORD *)v45) >> 8);
          v57 = v56 == BYTE5(v54);
          if (v56 >= BYTE5(v54))
            v58 = 1;
          else
            v58 = -1;
          if (v57)
          {
            v59 = (unsigned __int16)*(_QWORD *)v45;
            v60 = HIWORD(v55) & 0x7FFF;
            v61 = BYTE4(v55);
            v62 = v55 >> 63;
            v63 = (unsigned __int16)v53;
            v64 = HIWORD(v53) & 0x7FFF;
            v65 = BYTE4(v53);
            v66 = v53 >> 63;
            v67 = v53 >> 16;
            v68 = WORD1(v55);
            v69 = v62 == v66;
            if (v62 >= v66)
              result = 1;
            else
              result = 255;
            if (v69)
              result = 0;
            v70 = v61 == v65;
            if (v61 >= v65)
              v71 = 1;
            else
              v71 = -1;
            if (v70)
              v71 = result;
            v72 = v60 == v64;
            if (v60 >= v64)
              v73 = 1;
            else
              v73 = -1;
            if (v72)
              v73 = v71;
            v74 = v59 == v63;
            if (v59 >= v63)
              v58 = 1;
            else
              v58 = -1;
            if (v74)
              v58 = v73;
            v75 = v68 == (unsigned __int16)v67;
            if (v68 >= (unsigned __int16)v67)
              v76 = 1;
            else
              v76 = -1;
            if (!v75)
              v58 = v76;
          }
          v48 = v47;
          if (v58 < 0)
          {
            v77 = *((_OWORD *)v52 + 3);
            *((_OWORD *)v47 + 2) = *((_OWORD *)v52 + 2);
            *((_OWORD *)v47 + 3) = v77;
            v47[8] = v52[8];
            v78 = *((_OWORD *)v52 + 1);
            *(_OWORD *)v47 = *(_OWORD *)v52;
            *((_OWORD *)v47 + 1) = v78;
            v48 = v4;
            if (v52 != v4)
            {
              v79 = v46;
              do
              {
                v80 = (uint64_t)v4 + v79;
                v81 = *(uint64_t *)((char *)v4 + v79 - 72);
                v82 = *(_QWORD *)v45;
                v83 = ((unsigned __int16)WORD2(*(_QWORD *)v45) >> 8);
                result = v81 >> 40;
                v84 = v83 == BYTE5(v81);
                if (v83 >= BYTE5(v81))
                  v85 = 1;
                else
                  v85 = -1;
                if (v84)
                {
                  v86 = (unsigned __int16)*(_QWORD *)v45;
                  v87 = HIWORD(v82) & 0x7FFF;
                  v88 = BYTE4(v82);
                  v89 = v82 >> 63;
                  v90 = (unsigned __int16)*(uint64_t *)((char *)v4 + v79 - 72);
                  v91 = HIWORD(v81) & 0x7FFF;
                  v92 = BYTE4(v81);
                  v93 = v81 >> 63;
                  v94 = v81 >> 16;
                  v95 = WORD1(v82);
                  v96 = v89 == v93;
                  if (v89 >= v93)
                    v97 = 1;
                  else
                    v97 = 255;
                  if (v96)
                    v97 = 0;
                  v98 = v88 == v92;
                  if (v88 >= v92)
                    v99 = 1;
                  else
                    v99 = 255;
                  if (v98)
                    v99 = v97;
                  v100 = v87 == v91;
                  if (v87 >= v91)
                    result = 1;
                  else
                    result = 255;
                  if (v100)
                    result = v99;
                  v101 = v86 == v90;
                  if (v86 >= v90)
                    v85 = 1;
                  else
                    v85 = -1;
                  if (v101)
                    v85 = result;
                  v102 = v95 == (unsigned __int16)v94;
                  if (v95 >= (unsigned __int16)v94)
                    v103 = 1;
                  else
                    v103 = -1;
                  if (!v102)
                    v85 = v103;
                }
                if ((v85 & 0x80) == 0)
                {
                  v48 = (uint64_t *)((char *)v4 + v79);
                  goto LABEL_44;
                }
                v104 = *(_OWORD *)((char *)v4 + v79 - 24);
                *(_OWORD *)(v80 + 32) = *(_OWORD *)((char *)v4 + v79 - 40);
                *(_OWORD *)(v80 + 48) = v104;
                *(_QWORD *)(v80 + 64) = *(uint64_t *)((char *)v4 + v79 - 8);
                v105 = *(_OWORD *)((char *)v4 + v79 - 56);
                *(_OWORD *)v80 = *(_OWORD *)((char *)v4 + v79 - 72);
                *(_OWORD *)(v80 + 16) = v105;
                v79 -= 72;
              }
              while (v79);
              v48 = v4;
            }
          }
LABEL_44:
          *(_OWORD *)v48 = *(_OWORD *)v45;
          v49 = *(_OWORD *)(v45 + 16);
          v50 = *(_OWORD *)(v45 + 32);
          v51 = *(_OWORD *)(v45 + 48);
          v48[8] = *(_QWORD *)(v45 + 64);
          *((_OWORD *)v48 + 2) = v50;
          *((_OWORD *)v48 + 3) = v51;
          *((_OWORD *)v48 + 1) = v49;
          v45 += 72;
          v46 += 72;
        }
        while (v45 != a2);
      }
    }
  }
  return result;
}

unint64_t sub_20FDA4704(unint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  char v28;
  BOOL v29;
  char v30;
  BOOL v31;
  BOOL v32;
  char v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  char v59;
  BOOL v60;
  char v61;
  BOOL v62;
  char v63;
  BOOL v64;
  BOOL v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  BOOL v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  char v89;
  BOOL v90;
  char v91;
  BOOL v92;
  char v93;
  BOOL v94;
  BOOL v95;
  char v96;
  uint64_t v97;
  char *v98;
  char *v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  BOOL v120;
  char v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  char *v138;
  char *v139;
  char *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unint64_t v144;
  unint64_t v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  BOOL v157;
  BOOL v158;
  char v159;
  BOOL v160;
  char v161;
  BOOL v162;
  BOOL v163;
  char v164;
  uint64_t v165;
  char *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  char *v170;
  char *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  BOOL v178;
  char v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  BOOL v189;
  char v190;
  BOOL v191;
  char v192;
  BOOL v193;
  char v194;
  BOOL v195;
  BOOL v196;
  char v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  char *v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  unint64_t v205;
  char *v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;

  if (!a5)
    return result;
  v10 = (char *)result;
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return result;
    v11 = 0;
    v12 = ((unsigned __int16)WORD2(*(_QWORD *)a2) >> 8);
    v13 = HIWORD(*(_QWORD *)a2) & 0x7FFFLL;
    v14 = (unsigned __int16)*(_QWORD *)a2;
    v15 = BYTE4(*(_QWORD *)a2);
    v16 = *(_QWORD *)a2 >> 63;
    v17 = WORD1(*(_QWORD *)a2);
    v18 = -a4;
    while (1)
    {
      v19 = *(_QWORD *)&v10[v11];
      if (v12 >= BYTE5(v19))
        v20 = 1;
      else
        v20 = -1;
      if (v12 == BYTE5(v19))
      {
        v21 = (unsigned __int16)*(_QWORD *)&v10[v11];
        v22 = HIWORD(v19) & 0x7FFF;
        v23 = BYTE4(v19);
        v24 = v19 >> 63;
        v25 = v19 >> 16;
        v26 = v16 == v24;
        if (v16 >= v24)
          result = 1;
        else
          result = 255;
        if (v26)
          result = 0;
        v27 = v15 == v23;
        if (v15 >= v23)
          v28 = 1;
        else
          v28 = -1;
        if (v27)
          v28 = result;
        v29 = v13 == v22;
        if (v13 >= v22)
          v30 = 1;
        else
          v30 = -1;
        if (v29)
          v30 = v28;
        v31 = v14 == v21;
        if (v14 >= v21)
          v20 = 1;
        else
          v20 = -1;
        if (v31)
          v20 = v30;
        v32 = v17 == (unsigned __int16)v25;
        if (v17 >= (unsigned __int16)v25)
          v33 = 1;
        else
          v33 = -1;
        if (!v32)
          v20 = v33;
      }
      if (v20 < 0)
        break;
      v11 += 72;
      if (__CFADD__(v18++, 1))
        return result;
    }
    v35 = -v18;
    v219 = &v10[v11];
    if (-v18 >= a5)
    {
      if (v18 == -1)
      {
        v201 = &v10[v11];
        v224 = *(_OWORD *)&v10[v11];
        v244 = *(_QWORD *)&v10[v11 + 64];
        v234 = *(_OWORD *)&v10[v11 + 32];
        v239 = *(_OWORD *)&v10[v11 + 48];
        v229 = *(_OWORD *)&v10[v11 + 16];
        v203 = *((_OWORD *)a2 + 2);
        v202 = *((_OWORD *)a2 + 3);
        v204 = *((_OWORD *)a2 + 1);
        *((_QWORD *)v201 + 8) = *((_QWORD *)a2 + 8);
        *((_OWORD *)v201 + 2) = v203;
        *((_OWORD *)v201 + 3) = v202;
        *((_OWORD *)v201 + 1) = v204;
        *(_OWORD *)v201 = *(_OWORD *)a2;
        *((_OWORD *)a2 + 2) = v234;
        *((_OWORD *)a2 + 3) = v239;
        *((_QWORD *)a2 + 8) = v244;
        *(_OWORD *)a2 = v224;
        *((_OWORD *)a2 + 1) = v229;
        return result;
      }
      if (v18 > 0)
        v35 = 1 - v18;
      v67 = v35 >> 1;
      v39 = &v10[72 * (v35 >> 1) + v11];
      v38 = a2;
      if (a2 != a3)
      {
        v68 = v35 >> 1;
        v69 = ((unsigned __int16)WORD2(*(_QWORD *)v39) >> 8);
        v70 = 0x8E38E38E38E38E39 * ((a3 - a2) >> 3);
        v71 = HIWORD(*(_QWORD *)v39) & 0x7FFFLL;
        v72 = (unsigned __int16)*(_QWORD *)v39;
        v73 = BYTE4(*(_QWORD *)v39);
        v74 = *(_QWORD *)v39 >> 63;
        v75 = WORD1(*(_QWORD *)v39);
        v38 = a2;
        do
        {
          v77 = v70 >> 1;
          v78 = &v38[72 * (v70 >> 1)];
          v79 = *(_QWORD *)v78;
          v80 = ((unsigned __int16)WORD2(*(_QWORD *)v78) >> 8);
          v81 = v80 == v69;
          if (v80 >= v69)
            v82 = 1;
          else
            v82 = -1;
          if (v81)
          {
            v83 = (unsigned __int16)*(_QWORD *)v78;
            v84 = HIWORD(v79) & 0x7FFF;
            v85 = BYTE4(v79);
            v86 = v79 >> 63;
            v87 = WORD1(v79);
            v88 = v86 == v74;
            if (v86 >= v74)
              v89 = 1;
            else
              v89 = -1;
            if (v88)
              v89 = 0;
            v90 = v85 == v73;
            if (v85 >= v73)
              v91 = 1;
            else
              v91 = -1;
            if (v90)
              v91 = v89;
            v92 = v84 == v71;
            if (v84 >= v71)
              v93 = 1;
            else
              v93 = -1;
            if (v92)
              v93 = v91;
            v94 = v83 == v72;
            if (v83 >= v72)
              v82 = 1;
            else
              v82 = -1;
            if (v94)
              v82 = v93;
            v95 = v87 == v75;
            if (v87 >= v75)
              v96 = 1;
            else
              v96 = -1;
            if (!v95)
              v82 = v96;
          }
          v76 = v78 + 72;
          v70 += ~v77;
          if (v82 < 0)
            v38 = v76;
          else
            v70 = v77;
        }
        while (v70);
        v67 = v68;
      }
      v37 = 0x8E38E38E38E38E39 * ((v38 - a2) >> 3);
      if (v39 != a2)
      {
LABEL_131:
        v97 = v38 - a2;
        if (v38 == a2)
        {
          a2 = v39;
        }
        else
        {
          v98 = v39 + 72;
          if (v39 + 72 == a2)
          {
            v221 = *(_OWORD *)v39;
            v241 = *((_QWORD *)v39 + 8);
            v231 = *((_OWORD *)v39 + 2);
            v236 = *((_OWORD *)v39 + 3);
            v226 = *((_OWORD *)v39 + 1);
            v215 = a5;
            v217 = a6;
            v210 = a7;
            v211 = v67;
            v213 = v37;
            memmove(v39, a2, v38 - a2);
            v67 = v211;
            v37 = v213;
            a5 = v215;
            a6 = v217;
            a7 = v210;
            a2 = &v39[v97];
            *(_OWORD *)a2 = v221;
            *((_QWORD *)a2 + 8) = v241;
            *((_OWORD *)a2 + 2) = v231;
            *((_OWORD *)a2 + 3) = v236;
            *((_OWORD *)a2 + 1) = v226;
          }
          else
          {
            v99 = a2 + 72;
            if (a2 + 72 == v38)
            {
              a2 = v39 + 72;
              v222 = *(_OWORD *)(v38 - 72);
              v242 = *((_QWORD *)v38 - 1);
              v232 = *(_OWORD *)(v38 - 40);
              v237 = *(_OWORD *)(v38 - 24);
              v227 = *(_OWORD *)(v38 - 56);
              if (v38 - 72 != v39)
              {
                v216 = a5;
                v218 = a6;
                v212 = v67;
                v104 = a7;
                v214 = v37;
                memmove(v39 + 72, v39, v38 - 72 - v39);
                v67 = v212;
                v37 = v214;
                a5 = v216;
                a6 = v218;
                a7 = v104;
                a2 = v39 + 72;
              }
              *(_OWORD *)v39 = v222;
              *((_QWORD *)v39 + 8) = v242;
              *((_OWORD *)v39 + 2) = v232;
              *((_OWORD *)v39 + 3) = v237;
              *((_OWORD *)v39 + 1) = v227;
            }
            else
            {
              v100 = 0x8E38E38E38E38E39 * ((a2 - v39) >> 3);
              if (v100 == 0x8E38E38E38E38E39 * (v97 >> 3))
              {
                do
                {
                  v220 = *(_OWORD *)(v98 - 72);
                  v240 = *((_QWORD *)v98 - 1);
                  v230 = *(_OWORD *)(v98 - 40);
                  v235 = *(_OWORD *)(v98 - 24);
                  v225 = *(_OWORD *)(v98 - 56);
                  v101 = *(_OWORD *)(v99 - 40);
                  v102 = *(_OWORD *)(v99 - 24);
                  v103 = *((_QWORD *)v99 - 1);
                  *(_OWORD *)(v98 - 56) = *(_OWORD *)(v99 - 56);
                  *((_QWORD *)v98 - 1) = v103;
                  *(_OWORD *)(v98 - 24) = v102;
                  *(_OWORD *)(v98 - 40) = v101;
                  *(_OWORD *)(v98 - 72) = *(_OWORD *)(v99 - 72);
                  *(_OWORD *)(v99 - 56) = v225;
                  *(_OWORD *)(v99 - 40) = v230;
                  *(_OWORD *)(v99 - 24) = v235;
                  *((_QWORD *)v99 - 1) = v240;
                  *(_OWORD *)(v99 - 72) = v220;
                  if (v98 == a2)
                    break;
                  v98 += 72;
                  v26 = v99 == v38;
                  v99 += 72;
                }
                while (!v26);
              }
              else
              {
                v105 = 0x8E38E38E38E38E39 * (v97 >> 3);
                v106 = 0x8E38E38E38E38E39 * ((a2 - v39) >> 3);
                do
                {
                  v107 = v106;
                  v106 = v105;
                  v105 = v107 % v105;
                }
                while (v105);
                if (v106)
                {
                  v108 = &v39[72 * v106];
                  do
                  {
                    v223 = *(_OWORD *)(v108 - 72);
                    v109 = *(_OWORD *)(v108 - 56);
                    v110 = *(_OWORD *)(v108 - 40);
                    v111 = *(_OWORD *)(v108 - 24);
                    v112 = *((_QWORD *)v108 - 1);
                    v108 -= 72;
                    v243 = v112;
                    v233 = v110;
                    v238 = v111;
                    v228 = v109;
                    v113 = &v108[8 * ((a2 - v39) >> 3)];
                    v114 = v108;
                    do
                    {
                      v115 = v113;
                      *(_OWORD *)v114 = *(_OWORD *)v113;
                      v116 = *((_OWORD *)v113 + 1);
                      v117 = *((_OWORD *)v113 + 2);
                      v118 = *((_OWORD *)v113 + 3);
                      *((_QWORD *)v114 + 8) = *((_QWORD *)v113 + 8);
                      *((_OWORD *)v114 + 2) = v117;
                      *((_OWORD *)v114 + 3) = v118;
                      *((_OWORD *)v114 + 1) = v116;
                      v119 = 0x8E38E38E38E38E39 * ((v38 - v113) >> 3);
                      v113 += 8 * ((a2 - v39) >> 3);
                      v120 = __OFSUB__(v100, v119);
                      v122 = v100 - v119;
                      v121 = (v122 < 0) ^ v120;
                      v123 = &v39[72 * v122];
                      if (!v121)
                        v113 = v123;
                      v114 = v115;
                    }
                    while (v113 != v108);
                    *(_OWORD *)v115 = v223;
                    *((_QWORD *)v115 + 8) = v243;
                    *((_OWORD *)v115 + 2) = v233;
                    *((_OWORD *)v115 + 3) = v238;
                    *((_OWORD *)v115 + 1) = v228;
                  }
                  while (v108 != v39);
                }
                a2 = &v39[8 * (v97 >> 3)];
              }
            }
          }
        }
        goto LABEL_157;
      }
    }
    else
    {
      if (a5 >= 0)
        v36 = a5;
      else
        v36 = a5 + 1;
      v37 = v36 >> 1;
      v38 = &a2[72 * (v36 >> 1)];
      v39 = a2;
      if (a2 - v10 != v11)
      {
        v40 = v36 >> 1;
        v41 = ((unsigned __int16)WORD2(*(_QWORD *)v38) >> 8);
        v42 = 0x8E38E38E38E38E39 * ((a2 - v10 - v11) >> 3);
        v43 = (unsigned __int16)*(_QWORD *)v38;
        v44 = HIWORD(*(_QWORD *)v38) & 0x7FFFLL;
        v45 = BYTE4(*(_QWORD *)v38);
        v46 = *(_QWORD *)v38 >> 63;
        v47 = WORD1(*(_QWORD *)v38);
        v39 = &v10[v11];
        do
        {
          v49 = v42 >> 1;
          v50 = &v39[72 * (v42 >> 1)];
          v51 = *(_QWORD *)v50;
          if (v41 >= ((unsigned __int16)WORD2(*(_QWORD *)v50) >> 8))
            v52 = 1;
          else
            v52 = -1;
          if (v41 == ((unsigned __int16)WORD2(*(_QWORD *)v50) >> 8))
          {
            v53 = (unsigned __int16)*(_QWORD *)v50;
            v54 = HIWORD(v51) & 0x7FFF;
            v55 = BYTE4(v51);
            v56 = v51 >> 63;
            v57 = v51 >> 16;
            v58 = v46 == v56;
            if (v46 >= v56)
              v59 = 1;
            else
              v59 = -1;
            if (v58)
              v59 = 0;
            v60 = v45 == v55;
            if (v45 >= v55)
              v61 = 1;
            else
              v61 = -1;
            if (v60)
              v61 = v59;
            v62 = v44 == v54;
            if (v44 >= v54)
              v63 = 1;
            else
              v63 = -1;
            if (v62)
              v63 = v61;
            v64 = v43 == v53;
            if (v43 >= v53)
              v52 = 1;
            else
              v52 = -1;
            if (v64)
              v52 = v63;
            v65 = v47 == (unsigned __int16)v57;
            if (v47 >= (unsigned __int16)v57)
              v66 = 1;
            else
              v66 = -1;
            if (!v65)
              v52 = v66;
          }
          v48 = v50 + 72;
          v42 += ~v49;
          if (v52 < 0)
            v42 = v49;
          else
            v39 = v48;
        }
        while (v42);
        v37 = v40;
      }
      v67 = 0x8E38E38E38E38E39 * ((v39 - v10 - v11) >> 3);
      if (v39 != a2)
        goto LABEL_131;
    }
    a2 = v38;
LABEL_157:
    a4 = -(v67 + v18);
    v124 = a5 - v37;
    if (v67 + v37 >= a5 - (v67 + v37) - v18)
    {
      v128 = a2;
      v129 = -(v67 + v18);
      v130 = a6;
      v131 = a7;
      v132 = v37;
      a4 = v67;
      result = sub_20FDA4704(a2, v38, a3, v129, a5 - v37);
      a2 = v39;
      a3 = v128;
      v10 = v219;
      a5 = v132;
      a6 = v130;
      a7 = v131;
      if (!v132)
        return result;
    }
    else
    {
      v125 = &v10[v11];
      v126 = a6;
      v10 = a2;
      v127 = a7;
      result = sub_20FDA4704(v125, v39, a2, v67, v37);
      a2 = v38;
      a5 = v124;
      a6 = v126;
      a7 = v127;
      if (!v124)
        return result;
    }
  }
  if (a4 <= a5)
  {
    if (v10 != a2)
    {
      v165 = 0;
      do
      {
        v166 = &a6[v165];
        *(_OWORD *)v166 = *(_OWORD *)&v10[v165];
        v167 = *(_OWORD *)&v10[v165 + 16];
        v168 = *(_OWORD *)&v10[v165 + 32];
        v169 = *(_OWORD *)&v10[v165 + 48];
        *((_QWORD *)v166 + 8) = *(_QWORD *)&v10[v165 + 64];
        *((_OWORD *)v166 + 2) = v168;
        *((_OWORD *)v166 + 3) = v169;
        *((_OWORD *)v166 + 1) = v167;
        v165 += 72;
      }
      while (&v10[v165] != a2);
      if (v165)
      {
        v170 = &a6[v165];
        v171 = a6;
        while (a2 != a3)
        {
          v175 = *(_QWORD *)a2;
          v176 = *(_QWORD *)v171;
          v177 = ((unsigned __int16)WORD2(*(_QWORD *)a2) >> 8);
          v178 = v177 == ((unsigned __int16)WORD2(*(_QWORD *)v171) >> 8);
          if (v177 >= ((unsigned __int16)WORD2(*(_QWORD *)v171) >> 8))
            v179 = 1;
          else
            v179 = -1;
          if (v178)
          {
            v180 = (unsigned __int16)*(_QWORD *)a2;
            v181 = HIWORD(v175) & 0x7FFF;
            v182 = BYTE4(v175);
            v183 = v175 >> 63;
            v184 = (unsigned __int16)*(_QWORD *)v171;
            result = HIWORD(v176) & 0x7FFF;
            v185 = BYTE4(v176);
            v186 = v176 >> 63;
            v187 = v176 >> 16;
            v188 = WORD1(v175);
            v189 = v183 == v186;
            if (v183 >= v186)
              v190 = 1;
            else
              v190 = -1;
            if (v189)
              v190 = 0;
            v191 = v182 == v185;
            if (v182 >= v185)
              v192 = 1;
            else
              v192 = -1;
            if (v191)
              v192 = v190;
            v193 = v181 == result;
            if (v181 >= result)
              v194 = 1;
            else
              v194 = -1;
            if (v193)
              v194 = v192;
            v195 = v180 == v184;
            if (v180 >= v184)
              v179 = 1;
            else
              v179 = -1;
            if (v195)
              v179 = v194;
            v196 = v188 == (unsigned __int16)v187;
            if (v188 >= (unsigned __int16)v187)
              v197 = 1;
            else
              v197 = -1;
            if (!v196)
              v179 = v197;
          }
          if (v179 < 0)
          {
            *(_OWORD *)v10 = *(_OWORD *)a2;
            v198 = *((_OWORD *)a2 + 1);
            v199 = *((_OWORD *)a2 + 2);
            v200 = *((_OWORD *)a2 + 3);
            *((_QWORD *)v10 + 8) = *((_QWORD *)a2 + 8);
            *((_OWORD *)v10 + 2) = v199;
            *((_OWORD *)v10 + 3) = v200;
            *((_OWORD *)v10 + 1) = v198;
            a2 += 72;
            v10 += 72;
            if (v170 == v171)
              return result;
          }
          else
          {
            *(_OWORD *)v10 = *(_OWORD *)v171;
            v172 = *((_OWORD *)v171 + 1);
            v173 = *((_OWORD *)v171 + 2);
            v174 = *((_OWORD *)v171 + 3);
            *((_QWORD *)v10 + 8) = *((_QWORD *)v171 + 8);
            *((_OWORD *)v10 + 2) = v173;
            *((_OWORD *)v10 + 3) = v174;
            *((_OWORD *)v10 + 1) = v172;
            v171 += 72;
            v10 += 72;
            if (v170 == v171)
              return result;
          }
        }
        return (unint64_t)memmove(v10, v171, a6 - v171 + v165);
      }
    }
  }
  else if (a3 != a2)
  {
    v133 = 0;
    do
    {
      v134 = &a6[v133];
      *(_OWORD *)v134 = *(_OWORD *)&a2[v133];
      v135 = *(_OWORD *)&a2[v133 + 16];
      v136 = *(_OWORD *)&a2[v133 + 32];
      v137 = *(_OWORD *)&a2[v133 + 48];
      *((_QWORD *)v134 + 8) = *(_QWORD *)&a2[v133 + 64];
      *((_OWORD *)v134 + 2) = v136;
      *((_OWORD *)v134 + 3) = v137;
      *((_OWORD *)v134 + 1) = v135;
      v133 += 72;
    }
    while (&a2[v133] != a3);
    if (v133)
    {
      v138 = &a6[v133];
      v139 = a3 - 72;
      while (a2 != v10)
      {
        v144 = *((_QWORD *)a2 - 9);
        v145 = *((_QWORD *)v138 - 9);
        if (BYTE5(v145) >= (unint64_t)BYTE5(v144))
          v146 = 1;
        else
          v146 = -1;
        if (BYTE5(v145) == (unint64_t)BYTE5(v144))
        {
          v147 = (unsigned __int16)*((_QWORD *)v138 - 9);
          v148 = HIWORD(v145) & 0x7FFF;
          v149 = BYTE4(v145);
          v150 = v145 >> 63;
          v151 = (unsigned __int16)*((_QWORD *)a2 - 9);
          v152 = HIWORD(v144) & 0x7FFF;
          v153 = BYTE4(v144);
          v154 = v144 >> 63;
          v155 = v144 >> 16;
          v156 = WORD1(v145);
          v157 = v150 == v154;
          if (v150 >= v154)
            result = 1;
          else
            result = 255;
          if (v157)
            result = 0;
          v158 = v149 == v153;
          if (v149 >= v153)
            v159 = 1;
          else
            v159 = -1;
          if (v158)
            v159 = result;
          v160 = v148 == v152;
          if (v148 >= v152)
            v161 = 1;
          else
            v161 = -1;
          if (v160)
            v161 = v159;
          v162 = v147 == v151;
          if (v147 >= v151)
            v146 = 1;
          else
            v146 = -1;
          if (v162)
            v146 = v161;
          v163 = v156 == (unsigned __int16)v155;
          if (v156 >= (unsigned __int16)v155)
            v164 = 1;
          else
            v164 = -1;
          if (!v163)
            v146 = v164;
        }
        if (v146 < 0)
          v140 = a2 - 72;
        else
          v140 = v138 - 72;
        if (v146 < 0)
          a2 -= 72;
        else
          v138 -= 72;
        *(_OWORD *)v139 = *(_OWORD *)v140;
        v141 = *((_OWORD *)v140 + 1);
        v142 = *((_OWORD *)v140 + 2);
        v143 = *((_OWORD *)v140 + 3);
        *((_QWORD *)v139 + 8) = *((_QWORD *)v140 + 8);
        *((_OWORD *)v139 + 2) = v142;
        *((_OWORD *)v139 + 3) = v143;
        *((_OWORD *)v139 + 1) = v141;
        v139 -= 72;
        if (v138 == a6)
          return result;
      }
      v205 = 0;
      do
      {
        v206 = &v139[v205];
        *(_OWORD *)v206 = *(_OWORD *)&v138[v205 - 72];
        v207 = *(_OWORD *)&v138[v205 - 56];
        v208 = *(_OWORD *)&v138[v205 - 40];
        v209 = *(_OWORD *)&v138[v205 - 24];
        *((_QWORD *)v206 + 8) = *(_QWORD *)&v138[v205 - 8];
        *((_OWORD *)v206 + 2) = v208;
        *((_OWORD *)v206 + 3) = v209;
        *((_OWORD *)v206 + 1) = v207;
        v205 -= 72;
      }
      while (&v138[v205] != a6);
    }
  }
  return result;
}

int *sub_20FDA5110(int *a1, int *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;
  char *v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  size_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  size_t v106;
  char *v107;
  __int128 v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  void *v116;

  v4 = a1 + 626;
  *a1 = 0;
  v5 = a1 + 114;
  bzero(a1 + 114, 0x10C0uLL);
  *a1 = *a2;
  *(_OWORD *)(a1 + 2) = xmmword_2103C0E08;
  *(_OWORD *)(a1 + 6) = unk_2103C0E18;
  *(_OWORD *)(a1 + 10) = xmmword_2103C0E28;
  *(_OWORD *)(a1 + 14) = xmmword_2103C0670;
  *(_OWORD *)(a1 + 18) = xmmword_2103C0680;
  *(int64x2_t *)(a1 + 22) = vdupq_n_s64(0xBFE6A00000000000);
  *(int64x2_t *)(a1 + 26) = vdupq_n_s64(0x3FE6A00000000000uLL);
  *(_OWORD *)(a1 + 30) = xmmword_2103C0690;
  *(_OWORD *)(a1 + 34) = xmmword_2103C06A0;
  *(_OWORD *)(a1 + 38) = xmmword_2103C0E38;
  *(_OWORD *)(a1 + 42) = unk_2103C0E48;
  *(_OWORD *)(a1 + 46) = xmmword_2103C0E58;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  *v4 = xmmword_2103B2FE0;
  v4[1] = xmmword_2103B2FF0;
  v4[2] = xmmword_2103B3000;
  v4[3] = xmmword_2103C06B0;
  v4[4] = xmmword_2103C06C0;
  v4[5] = xmmword_2103C06D0;
  v4[6] = xmmword_2103C06E0;
  v4[7] = xmmword_2103C06F0;
  v4[8] = xmmword_2103C0700;
  v4[9] = xmmword_2103C0710;
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  v4[10] = xmmword_2103C0720;
  v4[11] = xmmword_2103C0730;
  *((_OWORD *)a1 + 39) = v6;
  *((_OWORD *)a1 + 40) = xmmword_2103C0740;
  v4[12] = xmmword_2103C0750;
  v4[13] = xmmword_2103C0770;
  *((_OWORD *)a1 + 41) = xmmword_2103C0760;
  *((_OWORD *)a1 + 42) = xmmword_2103C0780;
  v4[14] = xmmword_2103C0790;
  v4[15] = xmmword_2103C07A0;
  v4[16] = xmmword_2103C07B0;
  v4[17] = xmmword_2103C07D0;
  *((_OWORD *)a1 + 46) = xmmword_2103C07E0;
  v4[18] = xmmword_2103C07F0;
  v4[19] = xmmword_2103C0810;
  v4[20] = xmmword_2103C0830;
  v4[21] = xmmword_2103C0850;
  *((_OWORD *)a1 + 48) = xmmword_2103C0820;
  *((_OWORD *)a1 + 49) = xmmword_2103C0840;
  *((_OWORD *)a1 + 50) = xmmword_2103C0860;
  v4[22] = xmmword_2103C06D0;
  v4[23] = xmmword_2103C06D0;
  *((_OWORD *)a1 + 51) = xmmword_2103C0870;
  *((_OWORD *)a1 + 52) = xmmword_2103C0880;
  v4[24] = xmmword_2103C0890;
  v4[25] = xmmword_2103C08B0;
  *(_QWORD *)&v7 = 0x1900000019;
  *((_QWORD *)&v7 + 1) = 0x1900000019;
  *((_OWORD *)a1 + 53) = xmmword_2103C08A0;
  *((_OWORD *)a1 + 54) = v7;
  v4[26] = xmmword_2103C08C0;
  v4[27] = xmmword_2103C08E0;
  v4[28] = xmmword_2103C0900;
  v4[29] = xmmword_2103C0920;
  *(_QWORD *)&v8 = 0x1F0000001FLL;
  *((_QWORD *)&v8 + 1) = 0x1F0000001FLL;
  *((_OWORD *)a1 + 57) = xmmword_2103C0910;
  *((_OWORD *)a1 + 58) = v8;
  v4[30] = xmmword_2103C0930;
  v4[31] = xmmword_2103C0940;
  v4[32] = xmmword_2103C0960;
  v4[33] = xmmword_2103C0980;
  *((_OWORD *)a1 + 61) = xmmword_2103C0970;
  *((_OWORD *)a1 + 62) = xmmword_2103C0990;
  v4[34] = xmmword_2103C09A0;
  v4[35] = xmmword_2103C09C0;
  *((_OWORD *)a1 + 63) = xmmword_2103C09B0;
  *((_OWORD *)a1 + 64) = xmmword_2103C09D0;
  *((_OWORD *)a1 + 65) = xmmword_2103C09F0;
  v4[36] = xmmword_2103C09E0;
  v4[37] = xmmword_2103B4930;
  *((_OWORD *)a1 + 66) = xmmword_2103C0A00;
  *(_QWORD *)&v9 = 0x200000002;
  *((_QWORD *)&v9 + 1) = 0x200000002;
  *((_OWORD *)a1 + 67) = v9;
  v4[38] = xmmword_2103C0A10;
  v4[39] = xmmword_2103C0A20;
  *((_OWORD *)a1 + 68) = xmmword_2103C0760;
  *((_OWORD *)a1 + 69) = xmmword_2103C0A30;
  v4[40] = xmmword_2103B4930;
  v4[41] = xmmword_2103C0A10;
  *(_QWORD *)&v10 = 0x400000004;
  *((_QWORD *)&v10 + 1) = 0x400000004;
  *((_OWORD *)a1 + 70) = v10;
  *((_OWORD *)a1 + 71) = xmmword_2103C0A40;
  v4[42] = xmmword_2103C0A20;
  v4[43] = xmmword_2103B4930;
  *((_OWORD *)a1 + 72) = xmmword_2103C0A50;
  *(_QWORD *)&v10 = 0x600000006;
  *((_QWORD *)&v10 + 1) = 0x600000006;
  *((_OWORD *)a1 + 73) = v10;
  v4[44] = xmmword_2103C0A10;
  v4[45] = xmmword_2103B3070;
  v4[46] = xmmword_2103C07F0;
  v4[47] = xmmword_2103C0A80;
  v4[48] = xmmword_2103C0A90;
  v4[49] = xmmword_2103C07F0;
  v4[50] = xmmword_2103C0A80;
  v4[51] = xmmword_2103C0A90;
  v4[52] = xmmword_2103C07F0;
  v4[53] = xmmword_2103C0A80;
  v4[54] = xmmword_2103C0AD0;
  v4[55] = xmmword_2103C0AF0;
  v4[56] = xmmword_2103C0B00;
  v4[57] = xmmword_2103C0B10;
  v4[58] = xmmword_2103C0AF0;
  v4[59] = xmmword_2103C0B00;
  v4[60] = xmmword_2103C0B10;
  v4[61] = xmmword_2103C0AF0;
  v4[62] = xmmword_2103C0B00;
  v4[63] = xmmword_2103C0B60;
  v4[64] = xmmword_2103C0B80;
  v4[65] = xmmword_2103C0BA0;
  v4[66] = xmmword_2103C0BB0;
  v4[67] = xmmword_2103C0B80;
  v4[68] = xmmword_2103C0BA0;
  v4[69] = xmmword_2103C0BB0;
  v4[70] = xmmword_2103C0B80;
  v4[71] = xmmword_2103C0BA0;
  v4[72] = xmmword_2103C0C00;
  v4[73] = xmmword_2103C0C20;
  v4[74] = xmmword_2103C0C40;
  v4[75] = xmmword_2103C0C50;
  v4[76] = xmmword_2103C0C20;
  v4[77] = xmmword_2103C0C40;
  v4[78] = xmmword_2103C0C50;
  v4[79] = xmmword_2103C0C20;
  v4[80] = xmmword_2103C0C40;
  v4[81] = xmmword_2103C0C90;
  v4[82] = xmmword_2103C0980;
  v4[83] = xmmword_2103C0CC0;
  v4[84] = xmmword_2103C0CD0;
  v4[85] = xmmword_2103C0980;
  v4[86] = xmmword_2103C0CC0;
  v4[87] = xmmword_2103C0CD0;
  v4[88] = xmmword_2103C0980;
  v4[89] = xmmword_2103C0CC0;
  a1[477] = 1;
  a1[989] = 13;
  a1[478] = 2;
  a1[990] = 14;
  a1[991] = 15;
  a1[480] = 4;
  a1[992] = 16;
  a1[481] = 5;
  a1[993] = 17;
  a1[482] = 6;
  a1[994] = 18;
  a1[483] = 1;
  a1[995] = 16;
  a1[484] = 2;
  a1[996] = 17;
  a1[997] = 18;
  a1[486] = 4;
  a1[998] = 13;
  a1[487] = 5;
  a1[999] = 14;
  a1[488] = 6;
  a1[1000] = 15;
  a1[489] = 1;
  a1[490] = 2;
  a1[492] = 4;
  a1[493] = 5;
  a1[494] = 6;
  a1[495] = 1;
  a1[496] = 2;
  a1[498] = 4;
  a1[499] = 5;
  a1[500] = 6;
  a1[501] = 1;
  a1[502] = 2;
  a1[507] = 1;
  a1[508] = 2;
  a1[504] = 4;
  a1[510] = 4;
  a1[1016] = 40;
  a1[505] = 5;
  a1[511] = 5;
  a1[1017] = 41;
  a1[506] = 6;
  a1[1018] = 42;
  a1[1019] = 40;
  a1[1020] = 41;
  a1[509] = 3;
  a1[1021] = 42;
  a1[1022] = 37;
  a1[1023] = 38;
  a1[512] = 6;
  a1[1024] = 39;
  a1[513] = 7;
  a1[519] = 7;
  a1[525] = 7;
  a1[531] = 7;
  a1[514] = 8;
  a1[520] = 8;
  a1[526] = 8;
  a1[532] = 8;
  a1[515] = 9;
  a1[521] = 9;
  a1[527] = 9;
  a1[533] = 9;
  a1[516] = 10;
  a1[522] = 10;
  a1[528] = 10;
  a1[534] = 10;
  a1[517] = 11;
  a1[523] = 11;
  a1[529] = 11;
  a1[535] = 11;
  a1[518] = 12;
  a1[524] = 12;
  a1[530] = 12;
  a1[536] = 12;
  a1[1025] = 19;
  a1[537] = 13;
  a1[543] = 13;
  a1[549] = 13;
  a1[555] = 13;
  a1[1026] = 20;
  a1[538] = 14;
  a1[544] = 14;
  a1[550] = 14;
  a1[556] = 14;
  a1[1027] = 21;
  a1[539] = 15;
  a1[545] = 15;
  a1[551] = 15;
  a1[557] = 15;
  a1[1028] = 22;
  a1[540] = 16;
  a1[546] = 16;
  a1[552] = 16;
  a1[558] = 16;
  a1[1029] = 23;
  a1[541] = 17;
  a1[547] = 17;
  a1[553] = 17;
  a1[559] = 17;
  a1[1030] = 24;
  a1[1031] = 22;
  a1[1032] = 23;
  a1[1033] = 24;
  a1[1034] = 19;
  a1[1035] = 20;
  a1[1036] = 21;
  a1[542] = 18;
  a1[548] = 18;
  a1[554] = 18;
  a1[560] = 18;
  a1[1037] = 31;
  a1[561] = 19;
  a1[567] = 19;
  a1[1040] = 34;
  a1[1043] = 34;
  a1[1076] = 34;
  a1[1079] = 34;
  a1[1038] = 32;
  a1[562] = 20;
  a1[568] = 20;
  a1[1041] = 35;
  a1[1044] = 35;
  a1[1077] = 35;
  a1[1080] = 35;
  a1[1039] = 33;
  a1[563] = 21;
  a1[569] = 21;
  a1[476] = 36;
  a1[1042] = 36;
  a1[1045] = 36;
  a1[1078] = 36;
  a1[1081] = 36;
  a1[564] = 22;
  a1[570] = 22;
  a1[1001] = 25;
  a1[1046] = 31;
  a1[1073] = 31;
  a1[1082] = 31;
  a1[1047] = 32;
  a1[565] = 23;
  a1[571] = 23;
  a1[1048] = 33;
  a1[1049] = 25;
  a1[1050] = 26;
  a1[1074] = 32;
  a1[1083] = 32;
  a1[566] = 24;
  a1[572] = 24;
  a1[1051] = 27;
  a1[1075] = 33;
  a1[1084] = 33;
  a1[1010] = 25;
  a1[1052] = 28;
  a1[1053] = 29;
  a1[1054] = 30;
  a1[1058] = 25;
  a1[573] = 25;
  a1[579] = 25;
  a1[1055] = 28;
  a1[1056] = 29;
  a1[1057] = 30;
  a1[1064] = 40;
  a1[1067] = 40;
  a1[1088] = 40;
  a1[1091] = 40;
  a1[1059] = 26;
  a1[1060] = 27;
  a1[1002] = 26;
  a1[1011] = 26;
  a1[1061] = 37;
  a1[1062] = 38;
  a1[1063] = 39;
  a1[574] = 26;
  a1[580] = 26;
  a1[1065] = 41;
  a1[1068] = 41;
  a1[1089] = 41;
  a1[1092] = 41;
  a1[1066] = 42;
  a1[1003] = 27;
  a1[1012] = 27;
  a1[575] = 27;
  a1[581] = 27;
  *((_OWORD *)a1 + 74) = xmmword_2103C0A60;
  *(_QWORD *)&v10 = 0x800000008;
  *((_QWORD *)&v10 + 1) = 0x800000008;
  *((_OWORD *)a1 + 44) = v10;
  *((_OWORD *)a1 + 45) = xmmword_2103C07C0;
  *((_OWORD *)a1 + 47) = xmmword_2103C0800;
  *((_OWORD *)a1 + 75) = xmmword_2103C0A70;
  *(_QWORD *)&v11 = 0x700000007;
  *((_QWORD *)&v11 + 1) = 0x700000007;
  a1[1069] = 42;
  *((_OWORD *)a1 + 43) = v11;
  *((_OWORD *)a1 + 76) = v10;
  *((_OWORD *)a1 + 77) = xmmword_2103C0AA0;
  *((_OWORD *)a1 + 78) = xmmword_2103C07C0;
  *(_QWORD *)&v12 = 0xA0000000ALL;
  *((_QWORD *)&v12 + 1) = 0xA0000000ALL;
  a1[1070] = 37;
  *((_OWORD *)a1 + 79) = v12;
  *((_OWORD *)a1 + 80) = xmmword_2103C0AB0;
  *((_OWORD *)a1 + 81) = xmmword_2103C0AC0;
  *(_QWORD *)&v12 = 0xC0000000CLL;
  *((_QWORD *)&v12 + 1) = 0xC0000000CLL;
  *((_OWORD *)a1 + 82) = v12;
  a1[1071] = 38;
  *((_OWORD *)a1 + 83) = xmmword_2103C0AE0;
  *((_OWORD *)a1 + 84) = xmmword_2103C0800;
  *(_QWORD *)&v12 = 0xE0000000ELL;
  *((_QWORD *)&v12 + 1) = 0xE0000000ELL;
  *((_OWORD *)a1 + 85) = v12;
  *((_OWORD *)a1 + 86) = xmmword_2103C0B20;
  a1[1072] = 39;
  *((_OWORD *)a1 + 87) = xmmword_2103C0B30;
  *(_QWORD *)&v12 = 0x1000000010;
  *((_QWORD *)&v12 + 1) = 0x1000000010;
  *((_OWORD *)a1 + 88) = v12;
  *((_OWORD *)a1 + 89) = xmmword_2103C0B40;
  *((_OWORD *)a1 + 90) = xmmword_2103C0B50;
  *(_QWORD *)&v12 = 0x1200000012;
  *((_QWORD *)&v12 + 1) = 0x1200000012;
  *((_OWORD *)a1 + 91) = v12;
  *((_OWORD *)a1 + 92) = xmmword_2103C0B70;
  *((_OWORD *)a1 + 93) = xmmword_2103C0B90;
  *(_QWORD *)&v12 = 0x1400000014;
  *((_QWORD *)&v12 + 1) = 0x1400000014;
  *((_OWORD *)a1 + 94) = v12;
  *((_OWORD *)a1 + 95) = xmmword_2103C0BC0;
  *((_OWORD *)a1 + 96) = xmmword_2103C0BD0;
  *(_QWORD *)&v12 = 0x1600000016;
  *((_QWORD *)&v12 + 1) = 0x1600000016;
  *((_OWORD *)a1 + 97) = v12;
  *((_OWORD *)a1 + 98) = xmmword_2103C0BE0;
  *((_OWORD *)a1 + 99) = xmmword_2103C0BF0;
  *(_QWORD *)&v12 = 0x1800000018;
  *((_QWORD *)&v12 + 1) = 0x1800000018;
  *((_OWORD *)a1 + 100) = v12;
  *((_OWORD *)a1 + 101) = xmmword_2103C0C10;
  *((_QWORD *)a1 + 77) = 0;
  *((_OWORD *)a1 + 55) = xmmword_2103C08D0;
  *((_OWORD *)a1 + 56) = xmmword_2103C08F0;
  *((_OWORD *)a1 + 102) = xmmword_2103C0C30;
  *(_QWORD *)&v12 = 0x1A0000001ALL;
  *((_QWORD *)&v12 + 1) = 0x1A0000001ALL;
  *((_OWORD *)a1 + 103) = v12;
  *(_QWORD *)&v12 = 0x2000000020;
  *((_QWORD *)&v12 + 1) = 0x2000000020;
  *((_OWORD *)a1 + 59) = v12;
  *((_OWORD *)a1 + 60) = xmmword_2103C0950;
  *((_OWORD *)a1 + 104) = xmmword_2103C08F0;
  *((_OWORD *)a1 + 105) = xmmword_2103C0C60;
  *(_QWORD *)&v6 = 0x1C0000001CLL;
  *((_QWORD *)&v6 + 1) = 0x1C0000001CLL;
  *((_OWORD *)a1 + 106) = v6;
  *((_OWORD *)a1 + 107) = xmmword_2103C0C70;
  *((_OWORD *)a1 + 108) = xmmword_2103C0C80;
  *(_QWORD *)&v6 = 0x1E0000001ELL;
  *((_QWORD *)&v6 + 1) = 0x1E0000001ELL;
  *((_OWORD *)a1 + 109) = v6;
  *((_OWORD *)a1 + 110) = xmmword_2103C0CA0;
  *((_OWORD *)a1 + 111) = xmmword_2103C0CB0;
  *((_OWORD *)a1 + 112) = v12;
  *((_OWORD *)a1 + 113) = xmmword_2103C0CE0;
  *((_OWORD *)a1 + 114) = xmmword_2103C0950;
  *(_QWORD *)&v12 = 0x2200000022;
  *((_QWORD *)&v12 + 1) = 0x2200000022;
  *((_OWORD *)a1 + 115) = v12;
  *((_OWORD *)a1 + 116) = xmmword_2103C0CF0;
  *((_OWORD *)a1 + 117) = xmmword_2103C0D00;
  *(_QWORD *)&v12 = 0x2400000024;
  *((_QWORD *)&v12 + 1) = 0x2400000024;
  *((_OWORD *)a1 + 118) = v12;
  *((_QWORD *)a1 + 493) = 0x2900000028;
  a1[988] = 42;
  a1[479] = 3;
  a1[485] = 3;
  a1[1004] = 28;
  a1[1005] = 29;
  a1[1006] = 30;
  a1[1007] = 28;
  a1[1085] = 37;
  a1[1086] = 38;
  a1[1087] = 39;
  a1[576] = 28;
  a1[1008] = 29;
  a1[1009] = 30;
  a1[1013] = 37;
  a1[577] = 29;
  a1[578] = 30;
  a1[1090] = 42;
  a1[1014] = 38;
  a1[1015] = 39;
  a1[1093] = 42;
  a1[582] = 28;
  a1[1094] = 37;
  a1[583] = 29;
  a1[1095] = 38;
  a1[584] = 30;
  a1[1096] = 39;
  *(_OWORD *)(a1 + 50) = xmmword_2103C0D10;
  *(_OWORD *)(a1 + 54) = xmmword_2103C0D20;
  *(_OWORD *)(a1 + 58) = xmmword_2103C0D30;
  *(_OWORD *)(a1 + 62) = xmmword_2103C0D40;
  *((_QWORD *)a1 + 33) = 0x3FF3070000000000;
  *((_OWORD *)a1 + 17) = xmmword_2103C0D50;
  *((_OWORD *)a1 + 18) = xmmword_2103C0D60;
  *((_OWORD *)a1 + 19) = xmmword_2103C0D70;
  *((_OWORD *)a1 + 20) = xmmword_2103C0D80;
  *((_OWORD *)a1 + 21) = xmmword_2103C0D90;
  *((_OWORD *)a1 + 22) = xmmword_2103C0DA0;
  *((_OWORD *)a1 + 23) = xmmword_2103C0DB0;
  *((_OWORD *)a1 + 24) = xmmword_2103C0DC0;
  v13 = (_QWORD *)*((_QWORD *)a1 + 570);
  *((_OWORD *)a1 + 25) = xmmword_2103C0DD0;
  *((_OWORD *)a1 + 26) = xmmword_2103C0DE0;
  *((_OWORD *)a1 + 27) = xmmword_2103C0DF0;
  *((_QWORD *)a1 + 56) = 0x3FFF500000000000;
  v14 = *a1;
  v15 = v14 - 2;
  v16 = (_QWORD *)*((_QWORD *)a1 + 569);
  a1[491] = 3;
  a1[497] = 3;
  v17 = 0xAAAAAAAAAAAAAAABLL * (v13 - v16);
  a1[503] = 3;
  v18 = v14 - 2 - v17;
  if (v14 - 2 <= v17)
  {
    if (v14 - 2 < v17)
    {
      v33 = &v16[3 * v15];
      if (v13 != v33)
      {
        v34 = v13;
        do
        {
          v36 = (void *)*(v34 - 3);
          v34 -= 3;
          v35 = v36;
          if (v36)
          {
            *(v13 - 2) = v35;
            operator delete(v35);
          }
          v13 = v34;
        }
        while (v34 != v33);
      }
      *((_QWORD *)a1 + 570) = v33;
    }
  }
  else
  {
    v19 = *((_QWORD *)a1 + 571);
    if (0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)v13) >> 3) >= v18)
    {
      bzero(v13, 24 * ((24 * v18 - 24) / 0x18) + 24);
      *((_QWORD *)a1 + 570) = &v13[3 * ((24 * v18 - 24) / 0x18) + 3];
    }
    else
    {
      if ((int)v14 <= 1)
        sub_20E867F44();
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)v16) >> 3);
      v21 = 2 * v20;
      if (2 * v20 <= v15)
        v21 = v14 - 2;
      if (v20 >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      if (v22 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_128;
      v23 = (char *)operator new(24 * v22);
      v24 = &v23[8 * (v13 - v16)];
      v25 = &v23[24 * v22];
      v26 = 24 * ((24 * v18 - 24) / 0x18) + 24;
      bzero(v24, v26);
      v27 = &v24[v26];
      if (v13 == v16)
      {
        *((_QWORD *)a1 + 569) = v24;
        *((_QWORD *)a1 + 570) = v27;
        *((_QWORD *)a1 + 571) = v25;
      }
      else
      {
        do
        {
          v28 = *(_OWORD *)(v13 - 3);
          v13 -= 3;
          *(_OWORD *)(v24 - 24) = v28;
          v24 -= 24;
          *((_QWORD *)v24 + 2) = v13[2];
          *v13 = 0;
          v13[1] = 0;
          v13[2] = 0;
        }
        while (v13 != v16);
        v13 = (_QWORD *)*((_QWORD *)a1 + 569);
        v29 = (_QWORD *)*((_QWORD *)a1 + 570);
        *((_QWORD *)a1 + 569) = v24;
        *((_QWORD *)a1 + 570) = v27;
        *((_QWORD *)a1 + 571) = v25;
        if (v29 != v13)
        {
          v30 = v29;
          do
          {
            v32 = (void *)*(v30 - 3);
            v30 -= 3;
            v31 = v32;
            if (v32)
            {
              *(v29 - 2) = v31;
              operator delete(v31);
            }
            v29 = v30;
          }
          while (v30 != v13);
        }
      }
      if (v13)
        operator delete(v13);
    }
  }
  v37 = (_QWORD *)*((_QWORD *)a1 + 573);
  v38 = (_QWORD *)*((_QWORD *)a1 + 572);
  v39 = 0xAAAAAAAAAAAAAAABLL * (v37 - v38);
  v40 = v15 - v39;
  if (v15 <= v39)
  {
    if (v15 < v39)
    {
      v56 = &v38[3 * v15];
      if (v37 != v56)
      {
        v57 = (_QWORD *)*((_QWORD *)a1 + 573);
        do
        {
          v59 = (void *)*(v57 - 3);
          v57 -= 3;
          v58 = v59;
          if (v59)
          {
            *(v37 - 2) = v58;
            operator delete(v58);
          }
          v37 = v57;
        }
        while (v57 != v56);
      }
      *((_QWORD *)a1 + 573) = v56;
    }
  }
  else
  {
    v41 = *((_QWORD *)a1 + 574);
    if (0xAAAAAAAAAAAAAAABLL * ((v41 - (uint64_t)v37) >> 3) >= v40)
    {
      bzero(*((void **)a1 + 573), 24 * ((24 * v40 - 24) / 0x18) + 24);
      *((_QWORD *)a1 + 573) = &v37[3 * ((24 * v40 - 24) / 0x18) + 3];
    }
    else
    {
      if ((int)v14 <= 1)
        sub_20E867F44();
      v42 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (uint64_t)v38) >> 3);
      v43 = 2 * v42;
      if (2 * v42 <= v15)
        v43 = v14 - 2;
      if (v42 >= 0x555555555555555)
        v44 = 0xAAAAAAAAAAAAAAALL;
      else
        v44 = v43;
      if (v44 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_128;
      v45 = (char *)operator new(24 * v44);
      v46 = &v45[8 * (v37 - v38)];
      v47 = &v45[24 * v44];
      v48 = 24 * ((24 * v40 - 24) / 0x18) + 24;
      bzero(v46, v48);
      v49 = &v46[v48];
      if (v37 == v38)
      {
        *((_QWORD *)a1 + 572) = v46;
        *((_QWORD *)a1 + 573) = v49;
        *((_QWORD *)a1 + 574) = v47;
      }
      else
      {
        do
        {
          v50 = v46;
          *((_QWORD *)v46 - 2) = 0;
          *((_QWORD *)v46 - 1) = 0;
          v51 = *(_OWORD *)(v37 - 3);
          v37 -= 3;
          *(_OWORD *)(v46 - 24) = v51;
          v46 -= 24;
          *((_QWORD *)v50 - 1) = v37[2];
          *v37 = 0;
          v37[1] = 0;
          v37[2] = 0;
        }
        while (v37 != v38);
        v37 = (_QWORD *)*((_QWORD *)a1 + 572);
        v52 = (_QWORD *)*((_QWORD *)a1 + 573);
        *((_QWORD *)a1 + 572) = v46;
        *((_QWORD *)a1 + 573) = v49;
        *((_QWORD *)a1 + 574) = v47;
        if (v52 != v37)
        {
          v53 = v52;
          do
          {
            v55 = (void *)*(v53 - 3);
            v53 -= 3;
            v54 = v55;
            if (v55)
            {
              *(v52 - 2) = v54;
              operator delete(v54);
            }
            v52 = v53;
          }
          while (v53 != v37);
        }
      }
      if (v37)
        operator delete(v37);
    }
  }
  v60 = *((_QWORD *)a1 + 576);
  v61 = *((_QWORD *)a1 + 575);
  v62 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v61) >> 3);
  if (v15 <= v62)
  {
    if (v15 < v62)
    {
      v63 = v61 + 24 * v15;
      if (v60 != v63)
      {
        v64 = *((_QWORD *)a1 + 576);
        do
        {
          v66 = *(void **)(v64 - 24);
          v64 -= 24;
          v65 = v66;
          if (v66)
          {
            *(_QWORD *)(v60 - 16) = v65;
            operator delete(v65);
          }
          v60 = v64;
        }
        while (v64 != v63);
      }
      *((_QWORD *)a1 + 576) = v63;
    }
  }
  else
  {
    sub_20F411E58((uint64_t)(a1 + 1150), v15 - v62);
  }
  v67 = *((_QWORD *)a1 + 579);
  v68 = *((_QWORD *)a1 + 578);
  v69 = 0xAAAAAAAAAAAAAAABLL * ((v67 - v68) >> 3);
  if (v15 <= v69)
  {
    if (v15 < v69)
    {
      v70 = v68 + 24 * v15;
      if (v67 != v70)
      {
        v71 = *((_QWORD *)a1 + 579);
        do
        {
          v73 = *(void **)(v71 - 24);
          v71 -= 24;
          v72 = v73;
          if (v73)
          {
            *(_QWORD *)(v67 - 16) = v72;
            operator delete(v72);
          }
          v67 = v71;
        }
        while (v71 != v70);
      }
      *((_QWORD *)a1 + 579) = v70;
    }
  }
  else
  {
    sub_20F411E58((uint64_t)(a1 + 1156), v15 - v69);
  }
  v74 = *((_QWORD *)a1 + 582);
  v75 = *((_QWORD *)a1 + 581);
  v76 = 0xAAAAAAAAAAAAAAABLL * ((v74 - v75) >> 3);
  if (v15 <= v76)
  {
    if (v15 < v76)
    {
      v77 = v75 + 24 * v15;
      if (v74 != v77)
      {
        v78 = *((_QWORD *)a1 + 582);
        do
        {
          v80 = *(void **)(v78 - 24);
          v78 -= 24;
          v79 = v80;
          if (v80)
          {
            *(_QWORD *)(v74 - 16) = v79;
            operator delete(v79);
          }
          v74 = v78;
        }
        while (v78 != v77);
      }
      *((_QWORD *)a1 + 582) = v77;
    }
  }
  else
  {
    sub_20F411E58((uint64_t)(a1 + 1162), v15 - v76);
  }
  v81 = *((_QWORD *)a1 + 585);
  v82 = *((_QWORD *)a1 + 584);
  v83 = 0xAAAAAAAAAAAAAAABLL * ((v81 - v82) >> 3);
  if (v15 <= v83)
  {
    if (v15 < v83)
    {
      v84 = v82 + 24 * v15;
      if (v81 != v84)
      {
        v85 = *((_QWORD *)a1 + 585);
        do
        {
          v87 = *(void **)(v85 - 24);
          v85 -= 24;
          v86 = v87;
          if (v87)
          {
            *(_QWORD *)(v81 - 16) = v86;
            operator delete(v86);
          }
          v81 = v85;
        }
        while (v85 != v84);
      }
      *((_QWORD *)a1 + 585) = v84;
    }
  }
  else
  {
    sub_20F411E58((uint64_t)(a1 + 1168), v15 - v83);
  }
  v88 = *((_QWORD *)a1 + 588);
  v89 = *((_QWORD *)a1 + 587);
  v90 = 0xAAAAAAAAAAAAAAABLL * ((v88 - v89) >> 3);
  if (v15 <= v90)
  {
    if (v15 < v90)
    {
      v91 = v89 + 24 * v15;
      if (v88 != v91)
      {
        v92 = *((_QWORD *)a1 + 588);
        do
        {
          v94 = *(void **)(v92 - 24);
          v92 -= 24;
          v93 = v94;
          if (v94)
          {
            *(_QWORD *)(v88 - 16) = v93;
            operator delete(v93);
          }
          v88 = v92;
        }
        while (v92 != v91);
      }
      *((_QWORD *)a1 + 588) = v91;
    }
  }
  else
  {
    sub_20F0B7BF8((uint64_t)(a1 + 1174), v15 - v90);
  }
  v95 = (_QWORD *)*((_QWORD *)a1 + 591);
  v96 = (_QWORD *)*((_QWORD *)a1 + 590);
  v97 = 0xAAAAAAAAAAAAAAABLL * (v95 - v96);
  v98 = v15 - v97;
  if (v15 > v97)
  {
    v99 = *((_QWORD *)a1 + 592);
    if (0xAAAAAAAAAAAAAAABLL * ((v99 - (uint64_t)v95) >> 3) >= v98)
    {
      bzero(*((void **)a1 + 591), 24 * ((24 * v98 - 24) / 0x18) + 24);
      *((_QWORD *)a1 + 591) = &v95[3 * ((24 * v98 - 24) / 0x18) + 3];
      return a1;
    }
    if ((int)v14 <= 1)
      sub_20E867F44();
    v100 = 0xAAAAAAAAAAAAAAABLL * ((v99 - (uint64_t)v96) >> 3);
    v101 = 2 * v100;
    if (2 * v100 <= v15)
      v101 = v14 - 2;
    if (v100 >= 0x555555555555555)
      v102 = 0xAAAAAAAAAAAAAAALL;
    else
      v102 = v101;
    if (v102 <= 0xAAAAAAAAAAAAAAALL)
    {
      v103 = (char *)operator new(24 * v102);
      v104 = &v103[8 * (v95 - v96)];
      v105 = &v103[24 * v102];
      v106 = 24 * ((24 * v98 - 24) / 0x18) + 24;
      bzero(v104, v106);
      v107 = &v104[v106];
      if (v95 == v96)
      {
        *((_QWORD *)a1 + 590) = v104;
        *((_QWORD *)a1 + 591) = v107;
        *((_QWORD *)a1 + 592) = v105;
      }
      else
      {
        do
        {
          v108 = *(_OWORD *)(v95 - 3);
          v95 -= 3;
          *(_OWORD *)(v104 - 24) = v108;
          v104 -= 24;
          *((_QWORD *)v104 + 2) = v95[2];
          *v95 = 0;
          v95[1] = 0;
          v95[2] = 0;
        }
        while (v95 != v96);
        v95 = (_QWORD *)*((_QWORD *)a1 + 590);
        v109 = (_QWORD *)*((_QWORD *)a1 + 591);
        *((_QWORD *)a1 + 590) = v104;
        *((_QWORD *)a1 + 591) = v107;
        *((_QWORD *)a1 + 592) = v105;
        if (v109 != v95)
        {
          v110 = v109;
          do
          {
            v112 = (void *)*(v110 - 3);
            v110 -= 3;
            v111 = v112;
            if (v112)
            {
              *(v109 - 2) = v111;
              operator delete(v111);
            }
            v109 = v110;
          }
          while (v110 != v95);
        }
      }
      if (v95)
        operator delete(v95);
      return a1;
    }
LABEL_128:
    sub_20E877A38();
  }
  if (v15 < v97)
  {
    v113 = &v96[3 * v15];
    if (v95 != v113)
    {
      v114 = (_QWORD *)*((_QWORD *)a1 + 591);
      do
      {
        v116 = (void *)*(v114 - 3);
        v114 -= 3;
        v115 = v116;
        if (v116)
        {
          *(v95 - 2) = v115;
          operator delete(v115);
        }
        v95 = v114;
      }
      while (v114 != v113);
    }
    *((_QWORD *)a1 + 591) = v113;
  }
  return a1;
}

void sub_20FDA64AC(_Unwind_Exception *a1)
{
  void **v1;

  sub_20FDA163C(v1);
  _Unwind_Resume(a1);
}

void sub_20FDA64C0(int *a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  int *v37;
  int *v38;
  int *v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  _OWORD *v56;
  unint64_t v57;
  int v58;
  signed int v59;
  int v60;
  int v61;
  int v62;
  int32x2_t v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  signed int v69;
  int v70;
  char v71;
  char v72;
  uint64_t v73;
  char v74;
  int v75;
  double v76;
  int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  double v88;
  double v89;
  uint64_t v90;
  float64x2_t *v91;
  int8x16_t *v92;
  float64x2_t *v93;
  int8x16_t *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  int8x16_t v112;
  int8x16_t v113;
  float64x2_t v114;
  int8x16_t v115;
  float64x2_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  float64x2_t v122;
  _QWORD *v123;
  _QWORD *v124;
  _OWORD *v125;
  unint64_t v126;
  _QWORD *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _OWORD *v135;
  _OWORD *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  __int128 v141;
  char *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  char *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _QWORD *v161;
  _QWORD *v162;
  _OWORD *v163;
  unint64_t v164;
  _QWORD *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  _OWORD *v173;
  _OWORD *v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  __int128 v179;
  char *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  char *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  double *v203;
  double *v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  double v209;
  double v210;
  int v211;
  int v212;
  double v213;
  double v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  double v223;
  int v224;
  uint64_t v225;
  double v226;
  double v227;
  uint64_t v228;
  double v229;
  double v230;
  int v231;
  double v232;
  int v233;
  int v234;
  int v235;
  double v236;
  int v237;
  int v238;
  double v239;
  int v240;
  int v241;
  double v242;
  double v243;
  double v244;
  uint64_t v245;
  double v246;
  uint64_t v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  int v255;
  double v256;
  double v257;
  double v258;
  double v259;
  int v260;
  double v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  double v267;
  int v268;
  double v269;
  unint64_t v270;
  uint64_t v271;
  double v272;
  double v273;
  double v274;
  double v275;
  uint64_t v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  int v282;
  int v283;
  double v284;
  int v285;
  int v286;
  int v287;
  double v288;
  int v289;
  int v290;
  double v291;
  double v292;
  double v293;
  int v294;
  double v295;
  uint64_t v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  uint64_t v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  int v311;
  double v312;
  double v313;
  double v314;
  double v315;
  int v316;
  double v317;
  int v318;
  int v319;
  int v320;
  double v321;
  int v322;
  int v323;
  double v324;
  double v325;
  double v326;
  uint64_t v327;
  double v328;
  double v329;
  double v330;
  int v331;
  double v332;
  double v333;
  double v334;
  uint64_t v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  int v343;
  int v344;
  double v345;
  double v346;
  int v347;
  int v348;
  int v349;
  double v350;
  double v351;
  uint64_t v352;
  double v353;
  uint64_t v354;
  char v355;
  double v356;
  double v357;
  int v358;
  double v359;
  uint64_t v360;
  unint64_t v361;
  unsigned int v362;
  double v363;
  unsigned int *v364;
  char **v365;
  _QWORD *v366;
  char *v367;
  unint64_t v368;
  _QWORD *v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  char *v373;
  char *v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  char *v379;
  __int128 v380;
  char *v381;
  __int128 v382;
  __int128 v383;
  char *v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  int32x4_t v391;
  int32x4_t v392;
  int v393;
  int v394;
  int v395;
  unsigned __int32 v396;
  int v397;
  int v398;
  double v399;
  double v400;
  double v401;
  double v402;
  int *v403;
  double v404;
  double v405;
  double v406;
  double v407;
  unsigned int v408;
  unsigned __int8 v409;
  unsigned __int8 v410;
  signed int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  double v416;
  double v417;
  double v418;
  int v419;
  int v420;
  uint64_t v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  double v429;
  uint64_t v430;
  unint64_t v431;
  double v432;
  uint64_t v433;
  double v434;
  unint64_t v435;
  int32x4_t v436;
  int v437;
  signed int v438;
  uint64_t v439;
  double v440;
  double v441;
  int v442;
  uint64_t v443;
  int v444;
  double v445;
  double v446;
  double v447;
  uint64_t v448;
  uint64_t v449;
  double v450;
  double v451;
  double v452;
  uint64_t v453;
  double v454;
  double v455;
  float64x2_t v456;
  double v457;
  float64x2_t v458;
  int8x16_t *v459;
  int8x16_t *v460;
  uint64_t v461;
  float64x2_t *v462;
  float64x2_t *v463;
  double v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  _QWORD *v493;
  _QWORD *v494;
  char *v495;
  unint64_t v496;
  _QWORD *v497;
  int *v498;
  int *v499;
  char *v500;
  char *v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  char *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  void (*v510)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  char *v511;
  char *v512;
  _QWORD *v513;
  _QWORD *v514;
  char *v515;
  unint64_t v516;
  _QWORD *v517;
  int *v518;
  double v519;
  double v520;
  double v521;
  double v522;
  double v523;
  char *v524;
  char *v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  char *v530;
  char *v531;
  char *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  _DWORD *v536;
  double *v537;
  uint64_t v538;
  double v539;
  int v540;
  uint64_t v541;
  int v542;
  int v543;
  int v544;
  double v545;
  double v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  double v554;
  int v555;
  uint64_t v556;
  double v557;
  double v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  double v562;
  double v563;
  double *v564;
  double v565;
  double v566;
  int v567;
  int v568;
  double v569;
  int v570;
  int v571;
  int v572;
  double v573;
  int v574;
  int v575;
  double v576;
  double v577;
  double v578;
  int v579;
  double v580;
  uint64_t v581;
  double v582;
  double v583;
  double v584;
  uint64_t v585;
  double v586;
  double v587;
  double v588;
  double v589;
  int v590;
  double v591;
  double v592;
  double v593;
  double v594;
  int v595;
  double v596;
  double v597;
  int v598;
  int v599;
  int v600;
  double v601;
  int v602;
  int v603;
  double v604;
  int v605;
  double v606;
  unint64_t v607;
  uint64_t v608;
  double v609;
  unint64_t v610;
  double v611;
  double v612;
  double v613;
  uint64_t v614;
  double v615;
  double v616;
  double v617;
  double v618;
  double v619;
  double v620;
  double v621;
  int v622;
  double v623;
  double v624;
  int v625;
  int v626;
  int v627;
  double v628;
  int v629;
  int v630;
  double v631;
  int v632;
  int v633;
  double v634;
  double v635;
  double v636;
  uint64_t v637;
  double v638;
  double v639;
  unint64_t v640;
  double v641;
  double v642;
  unint64_t v643;
  double v644;
  uint64_t v645;
  double v646;
  double v647;
  double v648;
  int v649;
  double v650;
  double v651;
  double v652;
  int v653;
  double v654;
  int v655;
  int v656;
  int v657;
  double v658;
  int v659;
  int v660;
  double v661;
  uint64_t v662;
  double v663;
  double v664;
  double v665;
  double v666;
  int v667;
  double v668;
  double v669;
  double v670;
  double v671;
  uint64_t v672;
  double v673;
  double v674;
  double v675;
  double v676;
  double v677;
  double v678;
  int v679;
  double v680;
  int v681;
  int v682;
  int v683;
  double v684;
  int v685;
  double v686;
  double v687;
  double v688;
  uint64_t v689;
  double v690;
  double v691;
  unint64_t v692;
  double v693;
  double v694;
  double v695;
  double v696;
  int v697;
  double v698;
  uint64_t v699;
  unsigned int v700;
  double v701;
  _QWORD *v702;
  _OWORD *v703;
  _QWORD *v704;
  unint64_t v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  char *v711;
  _OWORD *v712;
  unint64_t v713;
  unint64_t v714;
  unint64_t v715;
  unint64_t v716;
  char *v717;
  __int128 v718;
  char *v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  _OWORD *v724;
  unint64_t v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  uint64_t v734;
  _BYTE *v735;
  int *v736;
  char *v737;
  __int128 v738;
  __int128 v739;
  char *v740;
  char *v741;
  unint64_t v742;
  unint64_t v743;
  unint64_t v744;
  char *v745;
  char *v746;
  __int128 v747;
  __int128 v748;
  char *v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  unint64_t **v753;
  unint64_t *v754;
  uint64_t *v755;
  unint64_t v756;
  _QWORD *v757;
  uint64_t v758;
  unint64_t *v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  uint64_t v763;
  unint64_t v764;
  _BYTE *v765;
  unint64_t *v766;
  char *v767;
  unint64_t v768;
  unint64_t v769;
  uint64_t v770;
  uint64_t v771;
  unint64_t *v772;
  _OWORD *v773;
  unint64_t *v774;
  uint64_t v775;
  __int128 v776;
  unint64_t v777;
  char **v778;
  _QWORD *v779;
  char *v780;
  unint64_t v781;
  char *v782;
  uint64_t v783;
  unint64_t v784;
  uint64_t v785;
  unint64_t v786;
  char *v787;
  char *v788;
  __int128 v789;
  __int128 v790;
  char *v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  uint64_t v795;
  uint64_t v796;
  unint64_t v797;
  unint64_t v798;
  _QWORD *v799;
  void **v800;
  _QWORD *v801;
  uint64_t v802;
  double v803;
  signed int v804;
  uint64_t v805;
  int v806;
  unint64_t v807;
  unint64_t v808;
  int *v809;
  int *v810;
  int *v811;
  void **v812;
  uint64_t v813;
  uint64_t v814;
  int32x4_t v815;
  int v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  uint64_t v824;
  unint64_t v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  _OWORD v835[2];
  __int128 v836;
  __int128 v837;
  __int128 v838;
  _OWORD v839[2];
  __int128 v840;
  __int128 v841;
  uint64_t v842;
  int v843;
  int v844;
  int32x4_t v845;
  signed int v846;
  _OWORD v847[21];
  _OWORD __src[21];
  uint64_t v849;

  v5 = a2;
  v6 = a1;
  v849 = *MEMORY[0x24BDAC8D0];
  v842 = 0;
  v840 = 0u;
  v841 = 0u;
  memset(v839, 0, sizeof(v839));
  v837 = 0u;
  v838 = 0u;
  v836 = 0u;
  v834 = 0u;
  memset(v835, 0, 28);
  v832 = 0u;
  v833 = 0u;
  v830 = 0u;
  v831 = 0u;
  v828 = 0u;
  v829 = 0u;
  v826 = 0u;
  v827 = 0u;
  v7 = *a1;
  v8 = v7 - 2;
  if ((_DWORD)v7 == 2)
  {
    a4[1] = *a4;
    v812 = (void **)(a4 + 1);
    v801 = a4 + 2;
    goto LABEL_15;
  }
  v9 = *a2;
  if ((_DWORD)v7 == 3)
  {
    v10 = 0;
    v11 = 0;
LABEL_8:
    v20 = v7 - v11 - 2;
    v21 = (_QWORD *)(v9 + 24 * v11 + 8);
    do
    {
      v10 += (uint64_t)(*v21 - *(v21 - 1)) >> 3;
      v21 += 3;
      --v20;
    }
    while (v20);
    goto LABEL_10;
  }
  v12 = 0;
  v13 = 0;
  v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
  v14 = (uint64_t *)(v9 + 24);
  v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v17 = *(v14 - 3);
    v16 = *(v14 - 2);
    v19 = *v14;
    v18 = v14[1];
    v14 += 6;
    v12 += (v16 - v17) >> 3;
    v13 += (v18 - v19) >> 3;
    v15 -= 2;
  }
  while (v15);
  v10 = v13 + v12;
  if (v11 != v8)
    goto LABEL_8;
LABEL_10:
  v22 = (void *)*a4;
  a4[1] = *a4;
  v812 = (void **)(a4 + 1);
  v801 = a4 + 2;
  if (0x8E38E38E38E38E39 * ((uint64_t)(a4[2] - (_QWORD)v22) >> 3) < v10)
  {
    if (v10 > 0x38E38E38E38E38ELL)
      sub_20E867F44();
    v23 = 72 * v10;
    v24 = (char *)operator new(72 * v10);
    *a4 = v24;
    a4[1] = v24;
    a4[2] = &v24[v23];
    if (v22)
      operator delete(v22);
    v6 = a1;
  }
LABEL_15:
  v800 = (void **)a4;
  v25 = *((_QWORD *)v6 + 587);
  v26 = *((_QWORD *)v6 + 588) - v25;
  if (v26)
  {
    v27 = v26 / 24;
    if (v27 <= 1)
      v27 = 1;
    v28 = (_QWORD *)(*((_QWORD *)v6 + 569) + 8);
    v29 = (_QWORD *)(*((_QWORD *)v6 + 590) + 8);
    v30 = (_QWORD *)(*((_QWORD *)v6 + 572) + 8);
    v31 = (_QWORD *)(v25 + 8);
    v32 = (_QWORD *)(*((_QWORD *)v6 + 575) + 8);
    v33 = (_QWORD *)(*((_QWORD *)v6 + 584) + 8);
    v34 = (_QWORD *)(*((_QWORD *)v6 + 578) + 8);
    v35 = (_QWORD *)(*((_QWORD *)v6 + 581) + 8);
    do
    {
      *v28 = *(v28 - 1);
      v28 += 3;
      *v30 = *(v30 - 1);
      v30 += 3;
      *v32 = *(v32 - 1);
      v32 += 3;
      *v34 = *(v34 - 1);
      v34 += 3;
      *v35 = *(v35 - 1);
      v35 += 3;
      *v33 = *(v33 - 1);
      v33 += 3;
      *v31 = *(v31 - 1);
      v31 += 3;
      *v29 = *(v29 - 1);
      v29 += 3;
      --v27;
    }
    while (v27);
  }
  v36 = *v6;
  if ((*v6 - 3) <= 0xFFFFFFFD)
  {
    v37 = v6 + 50;
    v38 = v6 + 2;
    v39 = v6 + 26;
    v40 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v41 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
    v42 = (float64x2_t)vdupq_n_s64(0x4050000000000000uLL);
    v43 = (float64x2_t)vdupq_n_s64(0x3F90000000000000uLL);
    __asm { FMOV            V27.2D, #0.5 }
    v49 = 1;
    v822 = v41;
    v823 = v40;
    v820 = v43;
    v821 = v42;
    v819 = _Q27;
    v799 = v5;
    v810 = v6 + 2;
    v811 = v6 + 50;
    v809 = v6 + 26;
    while (1)
    {
      v50 = v49 - 1;
      v51 = *(_QWORD *)(*v5 + 24 * (v49 - 1) + 8) - *(_QWORD *)(*v5 + 24 * (v49 - 1));
      if (v51)
        break;
LABEL_23:
      if (++v49 >= (unint64_t)(v36 - 1))
        return;
    }
    v52 = 0;
    v53 = v51 >> 3;
    if ((unint64_t)(v51 >> 3) <= 1)
      v53 = 1;
    v802 = v53;
    v818 = v49 - 1;
    v804 = v49 + 1;
    v803 = (double)(1 << ((int)v49 >> 1));
    v815 = vdupq_n_s32(v49);
    v813 = v49 - 1;
    v814 = v49;
    while (1)
    {
      v57 = *(_QWORD *)(*(_QWORD *)(*v5 + 24 * v50) + 8 * v52);
      v58 = BYTE5(v57) >> 4;
      v59 = *v6 - 1;
      if (v58 >= (int)v49)
      {
        if (v59 >= (int)v49)
          v61 = v49;
        else
          v61 = *v6 - 1;
        v63 = (int32x2_t)0x300000002;
        v60 = 4;
        v62 = v804;
      }
      else
      {
        v60 = 3;
        v61 = v49;
        v62 = v49;
        v63 = (int32x2_t)0x200000001;
      }
      v805 = v52;
      v64 = 0;
      v65 = (double)(unsigned __int16)*(_QWORD *)(*(_QWORD *)(*v5 + 24 * v50) + 8 * v52) * 0.015625;
      v66 = (double)WORD1(v57) * 0.015625;
      v67 = *(_QWORD *)(a3 + 48);
      v824 = *(_QWORD *)(*(_QWORD *)(*v5 + 24 * v50) + 8 * v52);
      v68 = (v57 >> 40) & 0xF;
      v807 = v57 >> 40;
      if (v59 < v62)
        v62 = *v6 - 1;
      v843 = v61;
      v844 = v62;
      *(int32x2_t *)v845.i8 = vmin_s32(vdup_n_s32(v59), vadd_s32(v63, *(int32x2_t *)v815.i8));
      v69 = v60 + v49;
      if (v59 >= v69)
        v59 = v69;
      v845.i32[2] = v59;
      v70 = BYTE5(v57) >> 4;
      v806 = v70;
      v71 = 16 * v58;
      v72 = 1;
      v73 = 1;
      v74 = 16 * v58;
      do
      {
        v75 = *(&v843 + v64);
        v76 = *(double *)&v37[2 * (v74 & 0x10 | v68)];
        v72 ^= 1u;
        v77 = 1 << (v75 >> 1);
        v78 = floor(v65 / (double)v77 * 128.0 + 0.5) * 0.0078125;
        v79 = (double)(1 << (((v70 + v64) >> 1) - (v75 >> 1) + 1));
        v80 = floor(v66 / (double)v77 * 128.0 + 0.5) * 0.0078125;
        v81 = floor(v78 - v76 * v79);
        v82 = v67 + 144 * v75;
        v83 = ceil(v76 * v79 + v78);
        v84 = (double)(unint64_t)(*(_QWORD *)(v82 + 32) - 1);
        v85 = floor(v80 - v76 * v79);
        v86 = ceil(v76 * v79 + v80);
        v87 = *(_QWORD *)(v82 + 48) - 1;
        if (v81 >= 0.0)
          v88 = v81;
        else
          v88 = 0.0;
        v89 = (double)(unint64_t)v87;
        v90 = (16 * (v72 & 1)) & 0xDF | (32 * (v72 & 1));
        v91 = (float64x2_t *)((char *)v38 + v90);
        v92 = (int8x16_t *)&__src[v73];
        v93 = (float64x2_t *)((char *)v39 + v90);
        v94 = (int8x16_t *)&v847[v73];
        if (v83 > v84)
          v83 = v84;
        v95 = vmulq_n_f64(vmulq_n_f64(*v93, v76), v79);
        v96 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vmulq_n_f64(vmulq_n_f64(*v91, v76), v79), v40), _Q27)), v41);
        if (v85 < 0.0)
          v85 = 0.0;
        v97 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v78, 0);
        v98 = vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(v97, v96), v42), _Q27));
        v99 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v83, 0);
        v100 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v88, 0);
        if (v86 > v89)
          v86 = v89;
        v101 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v80, 0);
        v102 = vmulq_f64(v98, v43);
        v103 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(v101, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(v95, v40), _Q27)), v41)), v42), _Q27)), v43);
        v104 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v86, 0);
        v105 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v85, 0);
        v106 = vmulq_n_f64(vmulq_n_f64(v91[1], v76), v79);
        v107 = vmulq_n_f64(vmulq_n_f64(v93[1], v76), v79);
        v108 = vmulq_n_f64(vmulq_n_f64(v91[2], v76), v79);
        v109 = vmulq_n_f64(vmulq_n_f64(v93[2], v76), v79);
        v110 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(v97, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(v106, v40), _Q27)), v41)), v42), _Q27)), v43);
        v111 = vaddq_f64(v97, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(v108, v40), _Q27)), v41));
        v112 = vbslq_s8((int8x16_t)vcgtq_f64(v100, v110), (int8x16_t)v100, (int8x16_t)v110);
        v113 = vbslq_s8((int8x16_t)vcgtq_f64(v102, v99), (int8x16_t)v99, vbslq_s8((int8x16_t)vcgtq_f64(v100, v102), (int8x16_t)v100, (int8x16_t)v102));
        v114 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(v101, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(v107, v40), _Q27)), v41)), v42), _Q27)), v43);
        v115 = vbslq_s8((int8x16_t)vcgtq_f64(v110, v99), (int8x16_t)v99, v112);
        v116 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(v111, v42), _Q27)), v43);
        v117 = (int8x16_t)vcgtq_f64(v100, v116);
        v118 = vbslq_s8((int8x16_t)vcgtq_f64(v103, v104), (int8x16_t)v104, vbslq_s8((int8x16_t)vcgtq_f64(v105, v103), (int8x16_t)v105, (int8x16_t)v103));
        v119 = vbslq_s8(v117, (int8x16_t)v100, (int8x16_t)v116);
        v120 = vbslq_s8((int8x16_t)vcgtq_f64(v105, v114), (int8x16_t)v105, (int8x16_t)v114);
        v121 = (int8x16_t)vcgtq_f64(v114, v104);
        v92[-1] = v113;
        *v92 = v115;
        v92[1] = vbslq_s8((int8x16_t)vcgtq_f64(v116, v99), (int8x16_t)v99, v119);
        v122 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(v101, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(v109, v40), _Q27)), v41)), v42), _Q27)), v43);
        v94[-1] = v118;
        *v94 = vbslq_s8(v121, (int8x16_t)v104, v120);
        v94[1] = vbslq_s8((int8x16_t)vcgtq_f64(v122, v104), (int8x16_t)v104, vbslq_s8((int8x16_t)vcgtq_f64(v105, v122), (int8x16_t)v105, (int8x16_t)v122));
        ++v64;
        v74 += 16;
        v73 += 3;
      }
      while (v64 != 5);
      v123 = (_QWORD *)(*((_QWORD *)v6 + 575) + 24 * v818);
      v124 = v123 + 1;
      v125 = (_OWORD *)v123[1];
      v127 = v123 + 2;
      v126 = v123[2];
      if ((unint64_t)v125 >= v126)
      {
        v136 = (_OWORD *)*v123;
        v137 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v125 - *v123) >> 4);
        v138 = v137 + 1;
        if (v137 + 1 > 0x111111111111111)
          goto LABEL_369;
        v139 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v126 - (_QWORD)v136) >> 4);
        if (2 * v139 > v138)
          v138 = 2 * v139;
        if (v139 >= 0x88888888888888)
          v138 = 0x111111111111111;
        v797 = v138;
        if (v138)
        {
          v795 = *((_QWORD *)v6 + 575) + 24 * v818;
          if (v138 > 0x111111111111111)
            goto LABEL_368;
          v140 = (char *)operator new(240 * v138);
          v123 = (_QWORD *)v795;
        }
        else
        {
          v140 = 0;
        }
        v141 = __src[13];
        v142 = &v140[240 * v137];
        *((_OWORD *)v142 + 12) = __src[12];
        *((_OWORD *)v142 + 13) = v141;
        *((_OWORD *)v142 + 14) = __src[14];
        v143 = __src[9];
        *((_OWORD *)v142 + 8) = __src[8];
        *((_OWORD *)v142 + 9) = v143;
        v144 = __src[11];
        *((_OWORD *)v142 + 10) = __src[10];
        *((_OWORD *)v142 + 11) = v144;
        v145 = __src[5];
        *((_OWORD *)v142 + 4) = __src[4];
        *((_OWORD *)v142 + 5) = v145;
        v146 = __src[7];
        *((_OWORD *)v142 + 6) = __src[6];
        *((_OWORD *)v142 + 7) = v146;
        v147 = __src[1];
        *(_OWORD *)v142 = __src[0];
        *((_OWORD *)v142 + 1) = v147;
        v148 = __src[3];
        *((_OWORD *)v142 + 2) = __src[2];
        *((_OWORD *)v142 + 3) = v148;
        v149 = v142;
        if (v125 != v136)
        {
          do
          {
            v150 = *(v125 - 15);
            v151 = *(v125 - 13);
            *((_OWORD *)v149 - 14) = *(v125 - 14);
            *((_OWORD *)v149 - 13) = v151;
            *((_OWORD *)v149 - 15) = v150;
            v152 = *(v125 - 12);
            v153 = *(v125 - 11);
            v154 = *(v125 - 9);
            *((_OWORD *)v149 - 10) = *(v125 - 10);
            *((_OWORD *)v149 - 9) = v154;
            *((_OWORD *)v149 - 12) = v152;
            *((_OWORD *)v149 - 11) = v153;
            v155 = *(v125 - 8);
            v156 = *(v125 - 7);
            v157 = *(v125 - 5);
            *((_OWORD *)v149 - 6) = *(v125 - 6);
            *((_OWORD *)v149 - 5) = v157;
            *((_OWORD *)v149 - 8) = v155;
            *((_OWORD *)v149 - 7) = v156;
            v158 = *(v125 - 4);
            v159 = *(v125 - 3);
            v160 = *(v125 - 1);
            *((_OWORD *)v149 - 2) = *(v125 - 2);
            *((_OWORD *)v149 - 1) = v160;
            *((_OWORD *)v149 - 4) = v158;
            *((_OWORD *)v149 - 3) = v159;
            v149 -= 240;
            v125 -= 15;
          }
          while (v125 != v136);
          v125 = (_OWORD *)*v123;
        }
        *v123 = v149;
        v135 = v142 + 240;
        *v124 = v142 + 240;
        *v127 = &v140[240 * v797];
        if (v125)
          operator delete(v125);
      }
      else
      {
        v128 = __src[13];
        v125[12] = __src[12];
        v125[13] = v128;
        v125[14] = __src[14];
        v129 = __src[9];
        v125[8] = __src[8];
        v125[9] = v129;
        v130 = __src[11];
        v125[10] = __src[10];
        v125[11] = v130;
        v131 = __src[5];
        v125[4] = __src[4];
        v125[5] = v131;
        v132 = __src[7];
        v125[6] = __src[6];
        v125[7] = v132;
        v133 = __src[1];
        *v125 = __src[0];
        v125[1] = v133;
        v134 = __src[3];
        v125[2] = __src[2];
        v125[3] = v134;
        v135 = v125 + 15;
      }
      *v124 = v135;
      v161 = (_QWORD *)(*((_QWORD *)v6 + 578) + 24 * v818);
      v162 = v161 + 1;
      v163 = (_OWORD *)v161[1];
      v165 = v161 + 2;
      v164 = v161[2];
      if ((unint64_t)v163 >= v164)
      {
        v174 = (_OWORD *)*v161;
        v175 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v163 - *v161) >> 4);
        v176 = v175 + 1;
        if (v175 + 1 > 0x111111111111111)
LABEL_369:
          sub_20E867F44();
        v177 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v164 - (_QWORD)v174) >> 4);
        if (2 * v177 > v176)
          v176 = 2 * v177;
        if (v177 >= 0x88888888888888)
          v176 = 0x111111111111111;
        v798 = v176;
        if (v176)
        {
          v796 = *((_QWORD *)v6 + 578) + 24 * v818;
          if (v176 > 0x111111111111111)
            goto LABEL_368;
          v178 = (char *)operator new(240 * v176);
          v161 = (_QWORD *)v796;
        }
        else
        {
          v178 = 0;
        }
        v179 = v847[13];
        v180 = &v178[240 * v175];
        *((_OWORD *)v180 + 12) = v847[12];
        *((_OWORD *)v180 + 13) = v179;
        *((_OWORD *)v180 + 14) = v847[14];
        v181 = v847[9];
        *((_OWORD *)v180 + 8) = v847[8];
        *((_OWORD *)v180 + 9) = v181;
        v182 = v847[11];
        *((_OWORD *)v180 + 10) = v847[10];
        *((_OWORD *)v180 + 11) = v182;
        v183 = v847[5];
        *((_OWORD *)v180 + 4) = v847[4];
        *((_OWORD *)v180 + 5) = v183;
        v184 = v847[7];
        *((_OWORD *)v180 + 6) = v847[6];
        *((_OWORD *)v180 + 7) = v184;
        v185 = v847[1];
        *(_OWORD *)v180 = v847[0];
        *((_OWORD *)v180 + 1) = v185;
        v186 = v847[3];
        *((_OWORD *)v180 + 2) = v847[2];
        *((_OWORD *)v180 + 3) = v186;
        v187 = v180;
        if (v163 != v174)
        {
          do
          {
            v188 = *(v163 - 15);
            v189 = *(v163 - 13);
            *((_OWORD *)v187 - 14) = *(v163 - 14);
            *((_OWORD *)v187 - 13) = v189;
            *((_OWORD *)v187 - 15) = v188;
            v190 = *(v163 - 12);
            v191 = *(v163 - 11);
            v192 = *(v163 - 9);
            *((_OWORD *)v187 - 10) = *(v163 - 10);
            *((_OWORD *)v187 - 9) = v192;
            *((_OWORD *)v187 - 12) = v190;
            *((_OWORD *)v187 - 11) = v191;
            v193 = *(v163 - 8);
            v194 = *(v163 - 7);
            v195 = *(v163 - 5);
            *((_OWORD *)v187 - 6) = *(v163 - 6);
            *((_OWORD *)v187 - 5) = v195;
            *((_OWORD *)v187 - 8) = v193;
            *((_OWORD *)v187 - 7) = v194;
            v196 = *(v163 - 4);
            v197 = *(v163 - 3);
            v198 = *(v163 - 1);
            *((_OWORD *)v187 - 2) = *(v163 - 2);
            *((_OWORD *)v187 - 1) = v198;
            *((_OWORD *)v187 - 4) = v196;
            *((_OWORD *)v187 - 3) = v197;
            v187 -= 240;
            v163 -= 15;
          }
          while (v163 != v174);
          v163 = (_OWORD *)*v161;
        }
        *v161 = v187;
        v173 = v180 + 240;
        *v162 = v180 + 240;
        *v165 = &v178[240 * v798];
        if (v163)
          operator delete(v163);
      }
      else
      {
        v166 = v847[13];
        v163[12] = v847[12];
        v163[13] = v166;
        v163[14] = v847[14];
        v167 = v847[9];
        v163[8] = v847[8];
        v163[9] = v167;
        v168 = v847[11];
        v163[10] = v847[10];
        v163[11] = v168;
        v169 = v847[5];
        v163[4] = v847[4];
        v163[5] = v169;
        v170 = v847[7];
        v163[6] = v847[6];
        v163[7] = v170;
        v171 = v847[1];
        *v163 = v847[0];
        v163[1] = v171;
        v172 = v847[3];
        v163[2] = v847[2];
        v163[3] = v172;
        v173 = v163 + 15;
      }
      v199 = 0;
      v200 = 0;
      v201 = 0;
      *v162 = v173;
      v202 = *(_QWORD *)(a3 + 48);
      do
      {
        v203 = (double *)&__src[v200];
        v204 = (double *)&v847[v200];
        v205 = v202 + 144 * *(int *)((char *)&v843 + v199);
        v206 = *(_DWORD *)(v205 + 32);
        v207 = *(_DWORD *)(v205 + 48);
        v208 = *(_QWORD *)(v205 + 88);
        v209 = *(double *)&__src[v200];
        v210 = *((double *)&__src[v200] + 1);
        v211 = *(_DWORD *)(v205 + 40);
        v212 = vcvtmd_s64_f64(v209);
        v214 = *(double *)&v847[v200];
        v213 = *((double *)&v847[v200] + 1);
        v215 = v206 - 1;
        v216 = vcvtmd_s64_f64(v214);
        v217 = v212 + 1;
        v218 = v216 + 1;
        v219 = v212 & ~(v212 >> 31);
        v220 = v207 - 1;
        if (v215 < v219)
          v219 = v215;
        v221 = v216 & ~(v216 >> 31);
        v222 = v217 & ~(v217 >> 31);
        if (v220 < v221)
          v221 = v220;
        if (v215 < v222)
          v222 = v215;
        v223 = (double)v217;
        if (v220 >= (v218 & ~(v218 >> 31)))
          v224 = v218 & ~(v218 >> 31);
        else
          v224 = v220;
        v225 = v221 * v211;
        v226 = v223 - v209;
        v227 = v209 - (double)v212;
        LOBYTE(v99.f64[0]) = *(_BYTE *)(v208 + v225 + v219);
        v113.i8[0] = *(_BYTE *)(v208 + v225 + v222);
        v228 = v224 * v211;
        v229 = (double)v218 - v214;
        v119.i8[0] = *(_BYTE *)(v208 + v228 + v219);
        v230 = (double)v216;
        v231 = vcvtmd_s64_f64(v210);
        v115.i8[0] = *(_BYTE *)(v208 + v228 + v222);
        v232 = v214 - v230;
        v233 = vcvtmd_s64_f64(v213);
        v234 = v231 + 1;
        v235 = v233 + 1;
        v236 = (double)*(unint64_t *)&v99.f64[0];
        v237 = v231 & ~(v231 >> 31);
        if (v215 < v237)
          v237 = v215;
        v238 = v233 & ~(v233 >> 31);
        v239 = (double)v113.u64[0];
        if (v220 < v238)
          v238 = v220;
        v240 = v234 & ~(v234 >> 31);
        if (v215 < v240)
          v240 = v215;
        v241 = v235 & ~(v235 >> 31);
        v242 = v226 * v236;
        if (v220 < v241)
          v241 = v220;
        v243 = (double)v234;
        v244 = v227 * v239;
        v245 = v238 * v211;
        v112.i8[0] = *(_BYTE *)(v208 + v245 + v237);
        v246 = v243 - v210;
        LOBYTE(v40.f64[0]) = *(_BYTE *)(v208 + v245 + v240);
        v247 = v241 * v211;
        v248 = v226 * (double)v119.u64[0];
        v121.i8[0] = *(_BYTE *)(v208 + v247 + v237);
        v117.i8[0] = *(_BYTE *)(v208 + v247 + v240);
        v249 = v227 * (double)v115.u64[0];
        v250 = v210 - (double)v231;
        v251 = (double)v233;
        v252 = (double)v112.u64[0];
        v253 = v203[2];
        v254 = v203[3];
        v255 = vcvtmd_s64_f64(v253);
        v256 = v246 * v252;
        v257 = (double)v235 - v213;
        v259 = v204[2];
        v258 = v204[3];
        v260 = vcvtmd_s64_f64(v259);
        v40.f64[0] = v250 * (double)*(unint64_t *)&v40.f64[0];
        v261 = v213 - v251;
        v262 = v255 + 1;
        v263 = v260 + 1;
        v264 = v255 & ~(v255 >> 31);
        *(double *)v121.i64 = (double)v121.u64[0];
        if (v215 < v264)
          v264 = v215;
        v265 = v260 & ~(v260 >> 31);
        if (v220 < v265)
          v265 = v220;
        v266 = v262 & ~(v262 >> 31);
        v267 = (double)v117.u64[0];
        if (v215 < v266)
          v266 = v215;
        v268 = v263 & ~(v263 >> 31);
        if (v220 < v268)
          v268 = v220;
        v269 = v242 + v244;
        *(double *)&v270 = (double)v262;
        v271 = v265 * v211;
        v272 = v246 * *(double *)v121.i64;
        LOBYTE(v244) = *(_BYTE *)(v208 + v271 + v264);
        v273 = v250 * v267;
        v274 = *(double *)&v270 - v253;
        LOBYTE(v270) = *(_BYTE *)(v208 + v271 + v266);
        v275 = v253 - (double)v255;
        v276 = v268 * v211;
        v277 = v248 + v249;
        LOBYTE(v249) = *(_BYTE *)(v208 + v276 + v264);
        LOBYTE(v250) = *(_BYTE *)(v208 + v276 + v266);
        v278 = v274 * (double)*(unint64_t *)&v244;
        v279 = (double)v263 - v259;
        v280 = v275 * (double)v270;
        v281 = v259 - (double)v260;
        v282 = vcvtmd_s64_f64(v254);
        v283 = vcvtmd_s64_f64(v258);
        v284 = (double)*(unint64_t *)&v249;
        v285 = v282 + 1;
        v286 = v283 + 1;
        v287 = v282 & ~(v282 >> 31);
        if (v215 < v287)
          v287 = v215;
        v288 = (double)*(unint64_t *)&v250;
        v289 = v283 & ~(v283 >> 31);
        if (v220 < v289)
          v289 = v220;
        v290 = v285 & ~(v285 >> 31);
        v291 = v40.f64[0] + v256;
        if (v215 < v290)
          v290 = v215;
        v292 = (double)v285;
        v293 = v229 * v269;
        if (v220 >= (v286 & ~(v286 >> 31)))
          v294 = v286 & ~(v286 >> 31);
        else
          v294 = v220;
        v295 = v292 - v254;
        v296 = v289 * v211;
        v297 = v274 * v284;
        LOBYTE(v269) = *(_BYTE *)(v208 + v296 + v287);
        v298 = v275 * v288;
        v299 = (double)*(unint64_t *)&v269;
        LOBYTE(v269) = *(_BYTE *)(v208 + v296 + v290);
        v300 = v272 + v273;
        v301 = v254 - (double)v282;
        v302 = (double)*(unint64_t *)&v269;
        v303 = v294 * v211;
        v304 = v232 * v277;
        LOBYTE(v232) = *(_BYTE *)(v208 + v303 + v287);
        LOBYTE(v273) = *(_BYTE *)(v208 + v303 + v290);
        v305 = v295 * v299;
        v306 = v301 * v302;
        v307 = (double)*(unint64_t *)&v232;
        v308 = (double)v286 - v258;
        v309 = v203[4];
        v310 = v203[5];
        v311 = vcvtmd_s64_f64(v309);
        v312 = (double)*(unint64_t *)&v273;
        v313 = v258 - (double)v283;
        v315 = v204[4];
        v314 = v204[5];
        v316 = vcvtmd_s64_f64(v315);
        v317 = v280 + v278;
        v318 = v311 + 1;
        v319 = v316 + 1;
        v320 = v311 & ~(v311 >> 31);
        if (v215 < v320)
          v320 = v215;
        v321 = v257 * v291;
        v322 = v316 & ~(v316 >> 31);
        if (v220 < v322)
          v322 = v220;
        v323 = v318 & ~(v318 >> 31);
        v324 = v295 * v307;
        if (v215 < v323)
          v323 = v215;
        v325 = v301 * v312;
        v326 = (double)v318 - v309;
        v327 = v322 * v211;
        v328 = v297 + v298;
        v329 = v309 - (double)v311;
        v330 = v261 * v300;
        if (v220 >= (v319 & ~(v319 >> 31)))
          v331 = v319 & ~(v319 >> 31);
        else
          v331 = v220;
        LOBYTE(v301) = *(_BYTE *)(v208 + v327 + v320);
        v332 = v326 * (double)*(unint64_t *)&v301;
        v333 = v293 + v304;
        LOBYTE(v304) = *(_BYTE *)(v208 + v327 + v323);
        v334 = v329 * (double)*(unint64_t *)&v304;
        v40.f64[0] = v306 + v305;
        v335 = v331 * v211;
        LOBYTE(v306) = *(_BYTE *)(v208 + v335 + v320);
        v336 = v279 * v317;
        v337 = v326 * (double)*(unint64_t *)&v306;
        LOBYTE(v326) = *(_BYTE *)(v208 + v335 + v323);
        v338 = v324 + v325;
        v339 = v329 * (double)*(unint64_t *)&v326;
        v340 = (double)v316;
        v341 = v281 * v328;
        v342 = (double)v319 - v315;
        v343 = vcvtmd_s64_f64(v310);
        v344 = vcvtmd_s64_f64(v314);
        v345 = v321 + v330;
        v346 = v315 - v340;
        v347 = v343 + 1;
        v348 = v343 & ~(v343 >> 31);
        if (v215 < v348)
          v348 = v215;
        *(double *)v121.i64 = v334 + v332;
        v349 = v344 & ~(v344 >> 31);
        if (v220 < v349)
          v349 = v220;
        v350 = v308 * v40.f64[0];
        if (v215 >= (v347 & ~(v347 >> 31)))
          v215 = v347 & ~(v347 >> 31);
        *(double *)v117.i64 = (double)v347 - v310;
        v351 = v337 + v339;
        v352 = v349 * v211;
        *(double *)v119.i64 = v313 * v338;
        *(double *)v115.i64 = v310 - (double)v343;
        LOBYTE(v332) = *(_BYTE *)(v208 + v352 + v348);
        *(double *)v112.i64 = *(double *)v117.i64 * (double)*(unint64_t *)&v332;
        v353 = v336 + v341;
        v354 = v215;
        v355 = *(_BYTE *)(v208 + v352 + v215);
        v356 = v342 * *(double *)v121.i64;
        v99.f64[0] = *(double *)v115.i64 * (double)*(unint64_t *)&v336 + *(double *)v112.i64;
        v357 = v333 * 16.0 + 0.5;
        v358 = v344 + 1;
        v359 = v346 * v351;
        if (v220 >= (v358 & ~(v358 >> 31)))
          v220 = v358 & ~(v358 >> 31);
        v360 = v220 * v211;
        LOBYTE(v351) = *(_BYTE *)(v208 + v360 + v348);
        *(double *)&v361 = (double)*(unint64_t *)&v351;
        v362 = vcvtmd_s64_f64(v357);
        v363 = *(double *)v117.i64 * *(double *)&v361;
        LOBYTE(v361) = *(_BYTE *)(v208 + v360 + v354);
        *(double *)v113.i64 = *(double *)v115.i64 * (double)v361;
        v364 = (unsigned int *)((char *)&v836 + v201);
        *v364 = v362;
        v364[1] = vcvtmd_s64_f64(v345 * 16.0 + 0.5);
        v364[2] = vcvtmd_s64_f64(v353 * 16.0 + 0.5);
        v364[3] = vcvtmd_s64_f64((v350 + *(double *)v119.i64) * 16.0 + 0.5);
        v364[4] = vcvtmd_s64_f64((v356 + v359) * 16.0 + 0.5);
        v364[5] = vcvtmd_s64_f64((((double)v358 - v314) * v99.f64[0] + (v314 - (double)v344) * (v363 + *(double *)v113.i64)) * 16.0+ 0.5);
        v201 += 24;
        v200 += 3;
        v199 += 4;
      }
      while (v201 != 120);
      v365 = (char **)(*((_QWORD *)v6 + 569) + 24 * v50);
      v366 = v365 + 1;
      v367 = v365[1];
      v369 = v365 + 2;
      v368 = (unint64_t)v365[2];
      if ((unint64_t)v367 >= v368)
      {
        v374 = *v365;
        v375 = 0xEEEEEEEEEEEEEEEFLL * ((v367 - *v365) >> 3);
        v376 = v375 + 1;
        if (v375 + 1 > 0x222222222222222)
          sub_20E867F44();
        v377 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v368 - (_QWORD)v374) >> 3);
        if (2 * v377 > v376)
          v376 = 2 * v377;
        if (v377 >= 0x111111111111111)
          v378 = 0x222222222222222;
        else
          v378 = v376;
        if (v378)
        {
          if (v378 > 0x222222222222222)
            goto LABEL_368;
          v379 = (char *)operator new(120 * v378);
        }
        else
        {
          v379 = 0;
        }
        v380 = v840;
        v381 = &v379[120 * v375];
        *((_OWORD *)v381 + 4) = v839[1];
        *((_OWORD *)v381 + 5) = v380;
        *((_OWORD *)v381 + 6) = v841;
        *((_QWORD *)v381 + 14) = v842;
        v382 = v837;
        *(_OWORD *)v381 = v836;
        *((_OWORD *)v381 + 1) = v382;
        v383 = v839[0];
        *((_OWORD *)v381 + 2) = v838;
        *((_OWORD *)v381 + 3) = v383;
        v384 = v381;
        if (v367 != v374)
        {
          do
          {
            v385 = *(_OWORD *)(v367 - 120);
            v386 = *(_OWORD *)(v367 - 104);
            v387 = *(_OWORD *)(v367 - 88);
            *(_OWORD *)(v384 - 72) = *(_OWORD *)(v367 - 72);
            *(_OWORD *)(v384 - 88) = v387;
            *(_OWORD *)(v384 - 104) = v386;
            *(_OWORD *)(v384 - 120) = v385;
            v388 = *(_OWORD *)(v367 - 56);
            v389 = *(_OWORD *)(v367 - 40);
            v390 = *(_OWORD *)(v367 - 24);
            *((_QWORD *)v384 - 1) = *((_QWORD *)v367 - 1);
            *(_OWORD *)(v384 - 24) = v390;
            *(_OWORD *)(v384 - 40) = v389;
            *(_OWORD *)(v384 - 56) = v388;
            v384 -= 120;
            v367 -= 120;
          }
          while (v367 != v374);
          v367 = *v365;
        }
        *v365 = v384;
        v373 = v381 + 120;
        *v366 = v381 + 120;
        *v369 = &v379[120 * v378];
        if (v367)
          operator delete(v367);
      }
      else
      {
        v370 = v840;
        *((_OWORD *)v367 + 4) = v839[1];
        *((_OWORD *)v367 + 5) = v370;
        *((_OWORD *)v367 + 6) = v841;
        *((_QWORD *)v367 + 14) = v842;
        v371 = v837;
        *(_OWORD *)v367 = v836;
        *((_OWORD *)v367 + 1) = v371;
        v372 = v839[0];
        v373 = v367 + 120;
        *((_OWORD *)v367 + 2) = v838;
        *((_OWORD *)v367 + 3) = v372;
      }
      *v366 = v373;
      v391.i64[0] = v836;
      v391.u64[1] = (unint64_t)vrev64_s32(*(int32x2_t *)&v839[0]);
      v392.i64[0] = __PAIR64__(HIDWORD(v836), v837);
      v392.i64[1] = *(_QWORD *)((char *)v839 + 12);
      v393 = 1550
           * (v838
            + HIDWORD(v837)
            - (DWORD2(v838)
             + HIDWORD(v838))
            + HIDWORD(v839[1])
            + v840
            - (DWORD2(v840)
             + HIDWORD(v840)))
           + 512;
      v394 = 1941 * (DWORD1(v838) + DWORD1(v840) - (DWORD2(v837) + DWORD2(v839[1]))) + 512;
      v395 = 1550 * (vaddvq_s32(vsubq_s32(v391, v392)) + DWORD1(v841) + v841 - (HIDWORD(v841) + v842)) + 512;
      v396 = vadd_s32(*(int32x2_t *)&v839[0], vdup_lane_s32(*(int32x2_t *)((char *)v839 + 12), 1)).u32[0];
      v397 = HIDWORD(v836)
           + DWORD1(v836)
           - (v836
            + v837)
           + DWORD1(v839[0])
           + HIDWORD(v839[0])
           + DWORD1(v841)
           - (v396
            + v841)
           + (v393 >> 10)
           + HIDWORD(v841)
           - v842
           + ((1941 * (DWORD2(v836) + DWORD2(v839[0]) - (DWORD1(v837) + DWORD1(v839[1]) + HIDWORD(v842)) + DWORD2(v841))
             + 512) >> 10);
      v398 = HIDWORD(v837)
           - (v838
            + DWORD2(v838))
           + HIDWORD(v838)
           + HIDWORD(v839[1])
           - (v840
            + DWORD2(v840))
           + HIDWORD(v840)
           + (v394 >> 10)
           + (v395 >> 10);
      v399 = 0.0;
      v400 = 0.0;
      if (v398 | v397)
        v400 = (double)(int)sub_20E8A9980(HIDWORD(v837)- ((int)v838+ DWORD2(v838))+ HIDWORD(v838)+ HIDWORD(v839[1])- ((int)v840+ DWORD2(v840))+ HIDWORD(v840)+ (v394 >> 10)+ (v395 >> 10), HIDWORD(v836)+ DWORD1(v836)- (v836+ v837)+ DWORD1(v839[0])+ HIDWORD(v839[0])+ DWORD1(v841)- (v396+ v841)
                            + (v393 >> 10)
                            + HIDWORD(v841)
                            - v842
                            + ((1941
                              * (DWORD2(v836)
                               + DWORD2(v839[0])
                               - (DWORD1(v837)
                                + DWORD1(v839[1])
                                + HIDWORD(v842))
                               + DWORD2(v841))
                              + 512) >> 10));
      v401 = sub_20E8A9B64(13, (double)(v397 * (uint64_t)v397 + v398 * (uint64_t)v398));
      v402 = 1.0;
      v403 = a1;
      if (v398 | v397)
      {
        v404 = sub_20E8A9AC0(v401);
        v405 = sub_20E8A9B64(13, (double)v397);
        v406 = sub_20E8A9B64(13, (double)v398);
        v402 = sub_20E8A9B64(13, v404 * v405);
        v407 = sub_20E8A9B64(13, v404 * v406);
        v403 = a1;
        v399 = v407;
      }
      v408 = (int)v400;
      if ((int)v400 >= 0x1000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/KeyPointToDescriptor.cpp", 170, (uint64_t)"orientation >= 0 && orientation < 256", 37, (uint64_t)"orientation overflow", 20, (void (*)(void **))sub_21023DDB0);
        v409 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v409 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v507 = qword_254A6DE40;
          v508 = qword_254A6DE48;
          while (v507 != v508)
          {
            v510 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v507;
            v509 = *(_QWORD *)(v507 + 8);
            v507 += 16;
            v510(v509, "orientation >= 0 && orientation < 256", 37, "orientation overflow", 20);
          }
        }
        v410 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v410 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "orientation >= 0 && orientation < 256", 37, "orientation overflow", 20);
        v403 = a1;
        v408 = (int)v400;
      }
      v411 = *v403 - 1;
      if (v411 >= (int)v814)
        v412 = v814;
      else
        v412 = *v403 - 1;
      v413 = *(_QWORD *)(a3 + 48);
      v414 = v413 + 144 * v412;
      v415 = 0x4050000000000000;
      v416 = floor(floor(v65 / v803 * 128.0 + 0.5) * 0.0078125 * 64.0 + 0.5) * 0.015625;
      v417 = v66 / v803;
      v418 = floor(floor(v66 / v803 * 128.0 + 0.5) * 0.0078125 * 64.0 + 0.5) * 0.015625;
      v419 = *(_DWORD *)(v414 + 32) - 1;
      v420 = *(_DWORD *)(v414 + 48) - 1;
      v421 = *(_QWORD *)(v414 + 88);
      v422 = vcvtmd_s64_f64(v416);
      v423 = *(_DWORD *)(v414 + 40);
      v424 = vcvtmd_s64_f64(v418);
      v425 = v422 + 1;
      v426 = v424 + 1;
      v427 = v422 & ~(v422 >> 31);
      if (v419 < v427)
        v427 = v419;
      v428 = v424 & ~(v424 >> 31);
      if (v420 < v428)
        v428 = v420;
      if (v419 >= (v425 & ~(v425 >> 31)))
        v419 = v425 & ~(v425 >> 31);
      if (v420 >= (v426 & ~(v426 >> 31)))
        v420 = v426 & ~(v426 >> 31);
      v429 = (double)v425 - v416;
      v430 = v428 * v423;
      LOBYTE(v415) = *(_BYTE *)(v421 + v430 + v427);
      *(double *)&v431 = (double)v422;
      v432 = v416 - (double)v422;
      LOBYTE(v431) = *(_BYTE *)(v421 + v430 + v419);
      v433 = v420 * v423;
      LOBYTE(v417) = *(_BYTE *)(v421 + v433 + v427);
      v434 = v429 * (double)v415 + v432 * (double)v431;
      *(double *)&v435 = (double)*(unint64_t *)&v417;
      LOBYTE(v435) = *(_BYTE *)(v421 + v433 + v419);
      LODWORD(v826) = vcvtmd_s64_f64((((double)v426 - v418) * v434+ (v418 - (double)v424) * (v429 * (double)*(unint64_t *)&v417 + v432 * (double)v435))* 16.0+ 0.5);
      if (v806 >= (int)v814)
      {
        if (v411 >= v804)
          v438 = v804;
        else
          v438 = v411;
        v436 = (int32x4_t)xmmword_2103B3010;
        v437 = 6;
      }
      else
      {
        v436 = (int32x4_t)xmmword_2103B2FE0;
        v437 = 5;
        v438 = v412;
        v412 = v814;
      }
      v439 = 0;
      v825 = v824 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)(v408 >> 4) << 32);
      v440 = floor(v402 * 256.0 + 0.5) * 0.00390625;
      v441 = floor(v399 * 256.0 + 0.5) * 0.00390625;
      v843 = v412;
      v844 = v438;
      v845 = vminq_s32(vdupq_n_s32(v411), vaddq_s32(v436, v815));
      if (v411 >= v437 + (int)v814)
        v411 = v437 + v814;
      v846 = v411;
      v442 = 1;
      v443 = 1;
      do
      {
        v444 = *(&v843 + v439);
        v445 = (double)(1 << (v444 >> 1));
        v446 = *(double *)&v811[2 * (v71 & 0x10 | v68)];
        v447 = (double)(1 << ((((v807 >> 4) + v439) >> 1) - (v444 >> 1) + 1));
        *(double *)&v448 = floor(v66 / v445 * 128.0 + 0.5) * 0.0078125;
        v449 = v413 + 144 * v444;
        v450 = floor(*(double *)&v448 - v446 * v447);
        v451 = (double)(unint64_t)(*(_QWORD *)(v449 + 48) - 1);
        v452 = ceil(v446 * v447 + *(double *)&v448);
        *(double *)&v453 = floor(v65 / v445 * 128.0 + 0.5) * 0.0078125;
        v454 = floor(*(double *)&v453 - v446 * v447);
        v455 = (double)(unint64_t)(*(_QWORD *)(v449 + 32) - 1);
        v456 = (float64x2_t)vdupq_lane_s64(v448, 0);
        v457 = ceil(v446 * v447 + *(double *)&v453);
        v458 = (float64x2_t)vdupq_lane_s64(v453, 0);
        v459 = (int8x16_t *)&v847[v443];
        v460 = (int8x16_t *)&__src[v443];
        v442 ^= 1u;
        v461 = (16 * (v442 & 1)) & 0xDF | (32 * (v442 & 1));
        v462 = (float64x2_t *)((char *)v809 + v461);
        v463 = (float64x2_t *)((char *)v810 + v461);
        if (v450 >= 0.0)
          v464 = v450;
        else
          v464 = 0.0;
        v465 = vmulq_n_f64(*v463, v446);
        v466 = vmulq_n_f64(*v462, v446);
        v467 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v464, 0);
        v468 = vmulq_n_f64(vmulq_n_f64(v466, v441), v447);
        v469 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vmulq_n_f64(vmulq_n_f64(v465, v440), v447), v823), v819)), v822);
        if (v452 <= v451)
          v451 = v452;
        v470 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v451, 0);
        v471 = vmulq_f64(vaddq_f64(v458, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vsubq_f64(v469, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(v468, v823), v819)), v822)), v823), v819)), v822)), v821);
        v472 = vmulq_n_f64(vmulq_n_f64(v465, v441), v447);
        v473 = vmulq_n_f64(v466, v440);
        if (v454 < 0.0)
          v454 = 0.0;
        v474 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(v472, v823), v819)), v822);
        v475 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v454, 0);
        v476 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(v474, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vmulq_n_f64(v473, v447), v823), v819)), v822)), v823), v819)), v822);
        v477 = vaddq_f64(v471, v819);
        v478 = vmulq_n_f64(v463[1], v446);
        v479 = vaddq_f64(vmulq_f64(vaddq_f64(v456, v476), v821), v819);
        v480 = vmulq_n_f64(v462[1], v446);
        v481 = vmulq_n_f64(vmulq_n_f64(v480, v441), v447);
        v482 = vaddq_f64(vmulq_f64(vmulq_n_f64(vmulq_n_f64(v478, v440), v447), v823), v819);
        if (v457 <= v455)
          v455 = v457;
        v483 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v455, 0);
        v484 = vaddq_f64(vmulq_f64(vaddq_f64(v458, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vsubq_f64(vmulq_f64(vrndmq_f64(v482), v822), vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(v481, v823), v819)), v822)), v823), v819)), v822)), v821), v819);
        v485 = vmulq_f64(vrndmq_f64(v477), v820);
        v486 = vmulq_n_f64(v463[2], v446);
        v487 = vmulq_f64(vrndmq_f64(v479), v820);
        v488 = vmulq_n_f64(v462[2], v446);
        v489 = vmulq_f64(vrndmq_f64(v484), v820);
        v490 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(v456, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vmulq_n_f64(vmulq_n_f64(v478, v441), v447), v823), v819)), v822), vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vmulq_n_f64(vmulq_n_f64(v480, v440), v447), v823), v819)), v822)), v823), v819)), v822)),
                       v821),
                     v819)),
                 v820);
        v491 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(v458, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vsubq_f64(vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vmulq_n_f64(vmulq_n_f64(v486, v440), v447), v823), v819)), v822), vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vmulq_n_f64(vmulq_n_f64(v488, v441), v447), v823), v819)), v822)), v823), v819)), v822)),
                       v821),
                     v819)),
                 v820);
        v460[-1] = vbslq_s8((int8x16_t)vcgtq_f64(v485, v483), (int8x16_t)v483, vbslq_s8((int8x16_t)vcgtq_f64(v475, v485), (int8x16_t)v475, (int8x16_t)v485));
        *v460 = vbslq_s8((int8x16_t)vcgtq_f64(v489, v483), (int8x16_t)v483, vbslq_s8((int8x16_t)vcgtq_f64(v475, v489), (int8x16_t)v475, (int8x16_t)v489));
        v492 = vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(v456, vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vaddq_f64(vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vmulq_n_f64(vmulq_n_f64(v486, v441), v447), v823), v819)), v822), vmulq_f64(vrndmq_f64(vaddq_f64(vmulq_f64(vmulq_n_f64(vmulq_n_f64(v488, v440), v447), v823), v819)), v822)), v823), v819)), v822)),
                       v821),
                     v819)),
                 v820);
        v459[-1] = vbslq_s8((int8x16_t)vcgtq_f64(v487, v470), (int8x16_t)v470, vbslq_s8((int8x16_t)vcgtq_f64(v467, v487), (int8x16_t)v467, (int8x16_t)v487));
        *v459 = vbslq_s8((int8x16_t)vcgtq_f64(v490, v470), (int8x16_t)v470, vbslq_s8((int8x16_t)vcgtq_f64(v467, v490), (int8x16_t)v467, (int8x16_t)v490));
        v460[1] = vbslq_s8((int8x16_t)vcgtq_f64(v491, v483), (int8x16_t)v483, vbslq_s8((int8x16_t)vcgtq_f64(v475, v491), (int8x16_t)v475, (int8x16_t)v491));
        v459[1] = vbslq_s8((int8x16_t)vcgtq_f64(v492, v470), (int8x16_t)v470, vbslq_s8((int8x16_t)vcgtq_f64(v467, v492), (int8x16_t)v467, (int8x16_t)v492));
        ++v439;
        v71 += 16;
        v443 += 3;
      }
      while (v439 != 7);
      v493 = (_QWORD *)(*((_QWORD *)v403 + 581) + 24 * v818);
      v494 = v493 + 1;
      v495 = (char *)v493[1];
      v497 = v493 + 2;
      v496 = v493[2];
      if ((unint64_t)v495 >= v496)
      {
        v501 = (char *)*v493;
        v502 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&v495[-*v493] >> 4);
        v503 = v502 + 1;
        if (v502 + 1 > 0xC30C30C30C30C3)
          goto LABEL_370;
        v504 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v496 - (_QWORD)v501) >> 4);
        if (2 * v504 > v503)
          v503 = 2 * v504;
        if (v504 >= 0x61861861861861)
          v505 = 0xC30C30C30C30C3;
        else
          v505 = v503;
        if (v505)
        {
          if (v505 > 0xC30C30C30C30C3)
            goto LABEL_368;
          v506 = (char *)operator new(336 * v505);
        }
        else
        {
          v506 = 0;
        }
        v511 = &v506[336 * v502];
        memcpy(v511, __src, 0x150uLL);
        v512 = v511;
        if (v495 != v501)
        {
          do
          {
            v495 -= 336;
            v512 -= 336;
            memcpy(v512, v495, 0x150uLL);
          }
          while (v495 != v501);
          v495 = (char *)*v493;
        }
        *v493 = v512;
        v500 = v511 + 336;
        *v494 = v511 + 336;
        *v497 = &v506[336 * v505];
        v499 = a1;
        if (v495)
        {
          operator delete(v495);
          v499 = a1;
        }
      }
      else
      {
        v498 = v403;
        memcpy(v495, __src, 0x150uLL);
        v499 = v498;
        v500 = v495 + 336;
      }
      *v494 = v500;
      v513 = (_QWORD *)(*((_QWORD *)v499 + 584) + 24 * v818);
      v514 = v513 + 1;
      v515 = (char *)v513[1];
      v517 = v513 + 2;
      v516 = v513[2];
      if ((unint64_t)v515 >= v516)
      {
        v525 = (char *)*v513;
        v526 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&v515[-*v513] >> 4);
        v527 = v526 + 1;
        if (v526 + 1 > 0xC30C30C30C30C3)
LABEL_370:
          sub_20E867F44();
        v528 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v516 - (_QWORD)v525) >> 4);
        if (2 * v528 > v527)
          v527 = 2 * v528;
        if (v528 >= 0x61861861861861)
          v529 = 0xC30C30C30C30C3;
        else
          v529 = v527;
        if (v529)
        {
          if (v529 > 0xC30C30C30C30C3)
            goto LABEL_368;
          v530 = (char *)operator new(336 * v529);
        }
        else
        {
          v530 = 0;
        }
        v531 = &v530[336 * v526];
        memcpy(v531, v847, 0x150uLL);
        v532 = v531;
        if (v515 != v525)
        {
          do
          {
            v515 -= 336;
            v532 -= 336;
            memcpy(v532, v515, 0x150uLL);
          }
          while (v515 != v525);
          v515 = (char *)*v513;
        }
        *v513 = v532;
        v524 = v531 + 336;
        *v514 = v531 + 336;
        *v517 = &v530[336 * v529];
        v6 = a1;
        v50 = v813;
        if (v515)
          operator delete(v515);
      }
      else
      {
        v518 = v499;
        memcpy(v515, v847, 0x150uLL);
        v6 = v518;
        v524 = v515 + 336;
        v50 = v813;
      }
      v533 = 0;
      v534 = 0;
      *v514 = v524;
      v535 = *(_QWORD *)(a3 + 48);
      v536 = (_DWORD *)((unint64_t)&v826 | 0xC);
      do
      {
        v537 = (double *)&v847[v534];
        v538 = v535 + 144 * *(int *)((char *)&v843 + v533);
        v539 = *(double *)&__src[v534];
        v540 = *(_DWORD *)(v538 + 48);
        v541 = *(_QWORD *)(v538 + 88);
        v542 = *(_DWORD *)(v538 + 32) - 1;
        v543 = *(_DWORD *)(v538 + 40);
        v544 = vcvtmd_s64_f64(v539);
        v545 = *(double *)&v847[v534];
        v546 = *((double *)&v847[v534] + 1);
        v547 = v540 - 1;
        v548 = vcvtmd_s64_f64(v545);
        v549 = v544 + 1;
        v550 = v548 + 1;
        v551 = v544 & ~(v544 >> 31);
        if (v542 < v551)
          v551 = v542;
        v552 = v548 & ~(v548 >> 31);
        if (v547 < v552)
          v552 = v547;
        v553 = v549 & ~(v549 >> 31);
        if (v542 < v553)
          v553 = v542;
        v554 = (double)v549;
        if (v547 >= (v550 & ~(v550 >> 31)))
          v555 = v550 & ~(v550 >> 31);
        else
          v555 = v547;
        v556 = v552 * v543;
        v557 = v554 - v539;
        v558 = v539 - (double)v544;
        LOBYTE(v519) = *(_BYTE *)(v541 + v556 + v551);
        LOBYTE(v520) = *(_BYTE *)(v541 + v556 + v553);
        v559 = v555 * v543;
        v560 = v559 + v551;
        v561 = v559 + v553;
        LOBYTE(v521) = *(_BYTE *)(v541 + v560);
        v562 = (double)v550 - v545;
        v563 = v545 - (double)v548;
        v564 = (double *)&__src[v534 + 1] + 1;
        v565 = *((double *)&__src[v534] + 1);
        v566 = *(double *)&__src[v534 + 1];
        LOBYTE(v522) = *(_BYTE *)(v541 + v561);
        v567 = vcvtmd_s64_f64(v565);
        v568 = vcvtmd_s64_f64(v546);
        v569 = (double)*(unint64_t *)&v519;
        v570 = v567 + 1;
        v571 = v568 + 1;
        v572 = v567 & ~(v567 >> 31);
        if (v542 < v572)
          v572 = v542;
        v573 = (double)*(unint64_t *)&v520;
        v574 = v568 & ~(v568 >> 31);
        if (v547 < v574)
          v574 = v547;
        v575 = v570 & ~(v570 >> 31);
        v576 = v557 * v569;
        if (v542 < v575)
          v575 = v542;
        v577 = (double)v570;
        v578 = v558 * v573;
        if (v547 >= (v571 & ~(v571 >> 31)))
          v579 = v571 & ~(v571 >> 31);
        else
          v579 = v547;
        v580 = v577 - v565;
        v581 = v574 * v543;
        v582 = (double)*(unint64_t *)&v521;
        LOBYTE(v521) = *(_BYTE *)(v541 + v581 + v572);
        v587 = (double)*(unint64_t *)&v522;
        v583 = v565 - (double)v567;
        LOBYTE(v565) = *(_BYTE *)(v541 + v581 + v575);
        v584 = v557 * v582;
        v585 = v579 * v543;
        LOBYTE(v523) = *(_BYTE *)(v541 + v585 + v572);
        v586 = v558 * v587;
        LOBYTE(v587) = *(_BYTE *)(v541 + v585 + v575);
        v588 = (double)*(unint64_t *)&v565;
        v589 = (double)v568;
        v590 = vcvtmd_s64_f64(v566);
        v591 = v580 * (double)*(unint64_t *)&v521;
        v592 = (double)v571 - v546;
        v593 = v537[2];
        v594 = v537[3];
        v595 = vcvtmd_s64_f64(v593);
        v596 = v583 * v588;
        v597 = v546 - v589;
        v598 = v590 + 1;
        v599 = v595 + 1;
        v600 = v590 & ~(v590 >> 31);
        v601 = (double)*(unint64_t *)&v523;
        if (v542 < v600)
          v600 = v542;
        v602 = v595 & ~(v595 >> 31);
        if (v547 < v602)
          v602 = v547;
        v603 = v598 & ~(v598 >> 31);
        v604 = (double)*(unint64_t *)&v587;
        if (v542 < v603)
          v603 = v542;
        v605 = v599 & ~(v599 >> 31);
        if (v547 < v605)
          v605 = v547;
        v606 = v576 + v578;
        *(double *)&v607 = (double)v598;
        v608 = v602 * v543;
        v609 = v580 * v601;
        LOBYTE(v580) = *(_BYTE *)(v541 + v608 + v600);
        *(double *)&v610 = (double)v590;
        v611 = v583 * v604;
        v612 = *(double *)&v607 - v566;
        LOBYTE(v607) = *(_BYTE *)(v541 + v608 + v603);
        v613 = v566 - (double)v590;
        v614 = v605 * v543;
        v615 = v584 + v586;
        LOBYTE(v584) = *(_BYTE *)(v541 + v614 + v600);
        LOBYTE(v610) = *(_BYTE *)(v541 + v614 + v603);
        v616 = v612 * (double)*(unint64_t *)&v580;
        v617 = v613 * (double)v607;
        v618 = (double)*(unint64_t *)&v584;
        v619 = (double)v599 - v593;
        v621 = *v564;
        v620 = v564[1];
        v622 = vcvtmd_s64_f64(*v564);
        v623 = (double)v610;
        v624 = v593 - (double)v595;
        v625 = vcvtmd_s64_f64(v594);
        v626 = v622 + 1;
        v627 = v625 + 1;
        v628 = v596 + v591;
        v629 = v622 & ~(v622 >> 31);
        if (v542 < v629)
          v629 = v542;
        v630 = v625 & ~(v625 >> 31);
        v631 = v562 * v606;
        if (v547 < v630)
          v630 = v547;
        v632 = v626 & ~(v626 >> 31);
        if (v542 < v632)
          v632 = v542;
        v633 = v627 & ~(v627 >> 31);
        v634 = v612 * v618;
        if (v547 < v633)
          v633 = v547;
        v635 = (double)v626;
        v636 = v613 * v623;
        v637 = v630 * v543;
        LOBYTE(v596) = *(_BYTE *)(v541 + v637 + v629);
        v638 = v609 + v611;
        v639 = v635 - v621;
        *(double *)&v640 = (double)*(unint64_t *)&v596;
        v641 = v621 - (double)v622;
        v642 = v563 * v615;
        LOBYTE(v563) = *(_BYTE *)(v541 + v637 + v632);
        *(double *)&v643 = (double)*(unint64_t *)&v563;
        v644 = v639 * *(double *)&v640;
        v645 = v633 * v543;
        LOBYTE(v640) = *(_BYTE *)(v541 + v645 + v629);
        v646 = v641 * *(double *)&v643;
        LOBYTE(v643) = *(_BYTE *)(v541 + v645 + v632);
        v647 = (double)v640;
        v648 = (double)v627 - v594;
        v649 = vcvtmd_s64_f64(v620);
        v650 = (double)v643;
        v651 = v594 - (double)v625;
        v652 = v537[4];
        v521 = v537[5];
        v653 = vcvtmd_s64_f64(v652);
        v654 = v617 + v616;
        v655 = v649 + 1;
        v656 = v653 + 1;
        v657 = v649 & ~(v649 >> 31);
        if (v542 < v657)
          v657 = v542;
        v658 = v592 * v628;
        v659 = v653 & ~(v653 >> 31);
        if (v547 < v659)
          v659 = v547;
        v660 = v655 & ~(v655 >> 31);
        if (v542 < v660)
          v660 = v542;
        v661 = (double)v655 - v620;
        v662 = v659 * v543;
        v663 = v634 + v636;
        v664 = (double)v649;
        v665 = v620 - (double)v649;
        v666 = v597 * v638;
        if (v547 >= (v656 & ~(v656 >> 31)))
          v667 = v656 & ~(v656 >> 31);
        else
          v667 = v547;
        LOBYTE(v664) = *(_BYTE *)(v541 + v662 + v657);
        v668 = v661 * (double)*(unint64_t *)&v664;
        v669 = v631 + v642;
        LOBYTE(v642) = *(_BYTE *)(v541 + v662 + v660);
        v670 = v665 * (double)*(unint64_t *)&v642;
        v671 = v646 + v644;
        v672 = v667 * v543;
        LOBYTE(v638) = *(_BYTE *)(v541 + v672 + v657);
        v673 = v619 * v654;
        v674 = v661 * (double)*(unint64_t *)&v638;
        LOBYTE(v661) = *(_BYTE *)(v541 + v672 + v660);
        v675 = v665 * (double)*(unint64_t *)&v661;
        v676 = v624 * v663;
        v677 = (double)v656 - v652;
        v678 = v652 - (double)v653;
        v523 = v564[2];
        v679 = vcvtmd_s64_f64(v523);
        v680 = v658 + v666;
        v681 = vcvtmd_s64_f64(v521);
        v682 = v679 + 1;
        v683 = v679 & ~(v679 >> 31);
        v684 = v670 + v668;
        if (v542 < v683)
          v683 = v542;
        v685 = v681 & ~(v681 >> 31);
        if (v547 < v685)
          v685 = v547;
        v686 = v648 * v671;
        if (v542 >= (v682 & ~(v682 >> 31)))
          v542 = v682 & ~(v682 >> 31);
        v687 = (double)v682;
        v688 = v674 + v675;
        v689 = v685 * v543;
        LOBYTE(v675) = *(_BYTE *)(v541 + v689 + v683);
        v690 = v651 * (v639 * v647 + v641 * v650);
        v519 = v687 - v523;
        v691 = (v687 - v523) * (double)*(unint64_t *)&v675;
        *(double *)&v692 = (double)v679;
        v693 = v673 + v676;
        v520 = v523 - (double)v679;
        LOBYTE(v692) = *(_BYTE *)(v541 + v689 + v542);
        v694 = v677 * v684;
        v522 = v520 * (double)v692 + v691;
        v695 = v669 * 16.0 + 0.5;
        v696 = v678 * v688;
        v697 = v681 + 1;
        if (v547 >= (v697 & ~(v697 >> 31)))
          v547 = v697 & ~(v697 >> 31);
        v698 = v686 + v690;
        v699 = v547 * v543;
        LOBYTE(v686) = *(_BYTE *)(v541 + v699 + v683);
        v700 = vcvtmd_s64_f64(v695);
        v701 = v519 * (double)*(unint64_t *)&v686;
        LOBYTE(v686) = *(_BYTE *)(v541 + v699 + v542);
        *(v536 - 2) = v700;
        *(v536 - 1) = vcvtmd_s64_f64(v680 * 16.0 + 0.5);
        *v536 = vcvtmd_s64_f64(v693 * 16.0 + 0.5);
        v536[1] = vcvtmd_s64_f64(v698 * 16.0 + 0.5);
        v536[2] = vcvtmd_s64_f64((v694 + v696) * 16.0 + 0.5);
        v536[3] = vcvtmd_s64_f64((((double)v697 - v521) * v522+ (v521 - (double)v681) * (v701 + v520 * (double)*(unint64_t *)&v686))* 16.0+ 0.5);
        v534 += 3;
        v536 += 6;
        v533 += 4;
      }
      while (v534 != 21);
      v702 = (_QWORD *)(*((_QWORD *)v6 + 572) + 24 * v50);
      v704 = v702 + 1;
      v703 = (_OWORD *)v702[1];
      v705 = v702[2];
      if ((unint64_t)v703 >= v705)
      {
        v712 = (_OWORD *)*v702;
        v713 = 0x82FA0BE82FA0BE83 * (((uint64_t)v703 - *v702) >> 2);
        v714 = v713 + 1;
        v41 = v822;
        v40 = v823;
        v43 = v820;
        v42 = v821;
        _Q27 = v819;
        if (v713 + 1 > 0x17D05F417D05F41)
          sub_20E867F44();
        v715 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v705 - (_QWORD)v712) >> 2);
        if (2 * v715 > v714)
          v714 = 2 * v715;
        if (v715 >= 0xBE82FA0BE82FA0)
          v716 = 0x17D05F417D05F41;
        else
          v716 = v714;
        v808 = v716;
        if (v716)
        {
          if (v716 > 0x17D05F417D05F41)
            goto LABEL_368;
          v717 = (char *)operator new(172 * v716);
          v41 = v822;
          v40 = v823;
          v43 = v820;
          v42 = v821;
          _Q27 = v819;
        }
        else
        {
          v717 = 0;
        }
        v718 = v835[0];
        v719 = &v717[172 * v713];
        *((_OWORD *)v719 + 8) = v834;
        *((_OWORD *)v719 + 9) = v718;
        *(_OWORD *)(v719 + 156) = *(_OWORD *)((char *)v835 + 12);
        v720 = v831;
        *((_OWORD *)v719 + 4) = v830;
        *((_OWORD *)v719 + 5) = v720;
        v721 = v833;
        *((_OWORD *)v719 + 6) = v832;
        *((_OWORD *)v719 + 7) = v721;
        v722 = v827;
        *(_OWORD *)v719 = v826;
        *((_OWORD *)v719 + 1) = v722;
        v723 = v829;
        *((_OWORD *)v719 + 2) = v828;
        *((_OWORD *)v719 + 3) = v723;
        v724 = v719;
        if (v703 == v712)
        {
          v725 = v808;
        }
        else
        {
          v725 = v808;
          do
          {
            v726 = *(_OWORD *)((char *)v703 - 172);
            v727 = *(_OWORD *)((char *)v703 - 156);
            *(_OWORD *)((char *)v724 - 140) = *(_OWORD *)((char *)v703 - 140);
            *(_OWORD *)((char *)v724 - 156) = v727;
            *(_OWORD *)((char *)v724 - 172) = v726;
            v728 = *(_OWORD *)((char *)v703 - 124);
            v729 = *(_OWORD *)((char *)v703 - 108);
            v730 = *(_OWORD *)((char *)v703 - 92);
            *(_OWORD *)((char *)v724 - 76) = *(_OWORD *)((char *)v703 - 76);
            *(_OWORD *)((char *)v724 - 92) = v730;
            *(_OWORD *)((char *)v724 - 108) = v729;
            *(_OWORD *)((char *)v724 - 124) = v728;
            v731 = *(_OWORD *)((char *)v703 - 60);
            v732 = *(_OWORD *)((char *)v703 - 44);
            v733 = *(_OWORD *)((char *)v703 - 28);
            *(v724 - 1) = *(v703 - 1);
            *(_OWORD *)((char *)v724 - 28) = v733;
            *(_OWORD *)((char *)v724 - 44) = v732;
            *(_OWORD *)((char *)v724 - 60) = v731;
            v724 = (_OWORD *)((char *)v724 - 172);
            v703 = (_OWORD *)((char *)v703 - 172);
          }
          while (v703 != v712);
          v703 = (_OWORD *)*v702;
        }
        *v702 = v724;
        v711 = v719 + 172;
        *v704 = v719 + 172;
        v702[2] = &v717[172 * v725];
        if (v703)
        {
          operator delete(v703);
          _Q27 = v819;
          v43 = v820;
          v42 = v821;
          v41 = v822;
          v40 = v823;
        }
      }
      else
      {
        v706 = v835[0];
        v703[8] = v834;
        v703[9] = v706;
        *(_OWORD *)((char *)v703 + 156) = *(_OWORD *)((char *)v835 + 12);
        v707 = v831;
        v703[4] = v830;
        v703[5] = v707;
        v708 = v833;
        v703[6] = v832;
        v703[7] = v708;
        v709 = v827;
        *v703 = v826;
        v703[1] = v709;
        v710 = v829;
        v703[2] = v828;
        v703[3] = v710;
        v711 = (char *)v703 + 172;
        v41 = v822;
        v40 = v823;
        v43 = v820;
        v42 = v821;
        _Q27 = v819;
      }
      v734 = 0;
      *v704 = v711;
      v735 = __src;
      memset(__src, 0, 64);
      do
      {
        v736 = &v6[v734];
        *v735++ |= (*((_DWORD *)&v826 + v6[v734 + 114]) < *((_DWORD *)&v826 + v6[v734 + 626])) | (2
                                                                                                * (*((_DWORD *)&v826 + v736[115]) < *((_DWORD *)&v826 + v736[627]))) | (4 * (*((_DWORD *)&v826 + v736[116]) < *((_DWORD *)&v826 + v736[628]))) | (8 * (*((_DWORD *)&v826 + v736[117]) < *((_DWORD *)&v826 + v736[629]))) | (16 * (*((_DWORD *)&v826 + v736[118]) < *((_DWORD *)&v826 + v736[630]))) | (32 * (*((_DWORD *)&v826 + v736[119]) < *((_DWORD *)&v826 + v736[631]))) | ((*((_DWORD *)&v826 + v736[120]) < *((_DWORD *)&v826 + v736[632])) << 6) | ((*((_DWORD *)&v826 + v736[121]) < *((_DWORD *)&v826 + v736[633])) << 7);
        v734 += 8;
      }
      while (v734 != 512);
      v737 = (char *)*v812;
      if ((unint64_t)*v812 < *v801)
      {
        *(_QWORD *)v737 = v825;
        v738 = __src[1];
        *(_OWORD *)(v737 + 8) = __src[0];
        *(_OWORD *)(v737 + 24) = v738;
        v739 = __src[3];
        *(_OWORD *)(v737 + 40) = __src[2];
        *(_OWORD *)(v737 + 56) = v739;
        v740 = v737 + 72;
        goto LABEL_321;
      }
      v741 = (char *)*v800;
      v742 = 0x8E38E38E38E38E39 * ((v737 - (_BYTE *)*v800) >> 3);
      v743 = v742 + 1;
      if (v742 + 1 > 0x38E38E38E38E38ELL)
        sub_20E867F44();
      if (0x1C71C71C71C71C72 * ((uint64_t)(*v801 - (_QWORD)v741) >> 3) > v743)
        v743 = 0x1C71C71C71C71C72 * ((uint64_t)(*v801 - (_QWORD)v741) >> 3);
      if (0x8E38E38E38E38E39 * ((uint64_t)(*v801 - (_QWORD)v741) >> 3) >= 0x1C71C71C71C71C7)
        v744 = 0x38E38E38E38E38ELL;
      else
        v744 = v743;
      if (v744)
      {
        if (v744 > 0x38E38E38E38E38ELL)
          goto LABEL_368;
        v745 = (char *)operator new(72 * v744);
        v41 = v822;
        v40 = v823;
        v43 = v820;
        v42 = v821;
        _Q27 = v819;
      }
      else
      {
        v745 = 0;
      }
      v746 = &v745[72 * v742];
      *(_QWORD *)v746 = v825;
      v747 = __src[1];
      *(_OWORD *)(v746 + 8) = __src[0];
      *(_OWORD *)(v746 + 24) = v747;
      v748 = __src[3];
      *(_OWORD *)(v746 + 40) = __src[2];
      *(_OWORD *)(v746 + 56) = v748;
      v749 = v746;
      if (v737 == v741)
      {
        v740 = v746 + 72;
        *v800 = v746;
        v800[1] = v746 + 72;
        v800[2] = &v745[72 * v744];
        if (v737)
          goto LABEL_320;
      }
      else
      {
        do
        {
          *(_OWORD *)(v749 - 72) = *(_OWORD *)(v737 - 72);
          v750 = *(_OWORD *)(v737 - 56);
          v751 = *(_OWORD *)(v737 - 40);
          v752 = *(_OWORD *)(v737 - 24);
          *((_QWORD *)v749 - 1) = *((_QWORD *)v737 - 1);
          *(_OWORD *)(v749 - 24) = v752;
          *(_OWORD *)(v749 - 40) = v751;
          *(_OWORD *)(v749 - 56) = v750;
          v749 -= 72;
          v737 -= 72;
        }
        while (v737 != v741);
        v737 = (char *)*v800;
        v740 = v746 + 72;
        *v800 = v749;
        v800[1] = v746 + 72;
        v800[2] = &v745[72 * v744];
        if (v737)
        {
LABEL_320:
          operator delete(v737);
          _Q27 = v819;
          v43 = v820;
          v42 = v821;
          v41 = v822;
          v40 = v823;
        }
      }
LABEL_321:
      *v812 = v740;
      v753 = (unint64_t **)(*((_QWORD *)v6 + 587) + 24 * v50);
      v755 = (uint64_t *)(v753 + 1);
      v754 = v753[1];
      v757 = v753 + 2;
      v756 = (unint64_t)v753[2];
      if ((unint64_t)v754 < v756)
      {
        *v754 = v825;
        v758 = (uint64_t)(v754 + 1);
        goto LABEL_346;
      }
      v759 = *v753;
      v760 = (char *)v754 - (char *)*v753;
      v761 = v760 >> 3;
      v762 = (v760 >> 3) + 1;
      if (v762 >> 61)
        sub_20E867F44();
      v763 = v756 - (_QWORD)v759;
      if (v763 >> 2 > v762)
        v762 = v763 >> 2;
      if ((unint64_t)v763 >= 0x7FFFFFFFFFFFFFF8)
        v764 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v764 = v762;
      if (v764)
      {
        if (v764 >> 61)
          goto LABEL_368;
        v765 = operator new(8 * v764);
        v41 = v822;
        v40 = v823;
        v43 = v820;
        v42 = v821;
        _Q27 = v819;
        v766 = (unint64_t *)&v765[8 * v761];
        *v766 = v825;
        v758 = (uint64_t)(v766 + 1);
        v767 = (char *)((char *)v754 - (char *)v759);
        if (v754 == v759)
        {
LABEL_337:
          v6 = a1;
          v50 = v813;
          *v753 = v766;
          *v755 = v758;
          *v757 = &v765[8 * v764];
          if (!v754)
            goto LABEL_346;
LABEL_345:
          operator delete(v754);
          _Q27 = v819;
          v43 = v820;
          v42 = v821;
          v41 = v822;
          v40 = v823;
          goto LABEL_346;
        }
      }
      else
      {
        v765 = 0;
        v766 = (unint64_t *)(8 * v761);
        *(_QWORD *)(8 * v761) = v825;
        v758 = 8 * v761 + 8;
        v767 = (char *)((char *)v754 - (char *)v759);
        if (v754 == v759)
          goto LABEL_337;
      }
      v768 = (unint64_t)(v767 - 8);
      if (v768 < 0x58)
      {
        v6 = a1;
        v50 = v813;
        do
        {
LABEL_343:
          v777 = *--v754;
          *--v766 = v777;
        }
        while (v754 != v759);
        goto LABEL_344;
      }
      v769 = (char *)v754 - v765 - v760;
      v6 = a1;
      v50 = v813;
      if (v769 < 0x20)
        goto LABEL_343;
      v770 = (v768 >> 3) + 1;
      v771 = 8 * (v770 & 0x3FFFFFFFFFFFFFFCLL);
      v772 = &v754[v771 / 0xFFFFFFFFFFFFFFF8];
      v766 = (unint64_t *)((char *)v766 - v771);
      v773 = &v765[8 * v761 - 16];
      v774 = v754 - 2;
      v775 = v770 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v776 = *(_OWORD *)v774;
        *(v773 - 1) = *((_OWORD *)v774 - 1);
        *v773 = v776;
        v773 -= 2;
        v774 -= 4;
        v775 -= 4;
      }
      while (v775);
      v754 = v772;
      if (v770 != (v770 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_343;
LABEL_344:
      v754 = *v753;
      *v753 = v766;
      *v755 = v758;
      *v757 = &v765[8 * v764];
      if (v754)
        goto LABEL_345;
LABEL_346:
      *v755 = v758;
      v778 = (char **)(*((_QWORD *)v6 + 590) + 24 * v50);
      v779 = v778 + 1;
      v780 = v778[1];
      v781 = (unint64_t)v778[2];
      if ((unint64_t)v780 < v781)
      {
        v54 = __src[1];
        *(_OWORD *)v780 = __src[0];
        *((_OWORD *)v780 + 1) = v54;
        v55 = __src[3];
        *((_OWORD *)v780 + 2) = __src[2];
        *((_OWORD *)v780 + 3) = v55;
        v56 = v780 + 64;
        v5 = v799;
      }
      else
      {
        v782 = *v778;
        v783 = (v780 - *v778) >> 6;
        v784 = v783 + 1;
        if ((unint64_t)(v783 + 1) >> 58)
          sub_20ED343A8();
        v785 = v781 - (_QWORD)v782;
        if (v785 >> 5 > v784)
          v784 = v785 >> 5;
        if ((unint64_t)v785 >= 0x7FFFFFFFFFFFFFC0)
          v786 = 0x3FFFFFFFFFFFFFFLL;
        else
          v786 = v784;
        if (v786)
        {
          if (v786 >> 58)
LABEL_368:
            sub_20E877A38();
          v787 = (char *)operator new(v786 << 6);
          v41 = v822;
          v40 = v823;
          v43 = v820;
          v42 = v821;
          _Q27 = v819;
        }
        else
        {
          v787 = 0;
        }
        v788 = &v787[64 * v783];
        v789 = __src[1];
        *(_OWORD *)v788 = __src[0];
        *((_OWORD *)v788 + 1) = v789;
        v790 = __src[3];
        *((_OWORD *)v788 + 2) = __src[2];
        *((_OWORD *)v788 + 3) = v790;
        v791 = v788;
        if (v780 != v782)
        {
          do
          {
            v792 = *((_OWORD *)v780 - 4);
            v793 = *((_OWORD *)v780 - 3);
            v794 = *((_OWORD *)v780 - 1);
            *((_OWORD *)v791 - 2) = *((_OWORD *)v780 - 2);
            *((_OWORD *)v791 - 1) = v794;
            *((_OWORD *)v791 - 4) = v792;
            *((_OWORD *)v791 - 3) = v793;
            v791 -= 64;
            v780 -= 64;
          }
          while (v780 != v782);
          v780 = *v778;
        }
        *v778 = v791;
        v56 = v788 + 64;
        *v779 = v788 + 64;
        v778[2] = &v787[64 * v786];
        if (v780)
        {
          operator delete(v780);
          _Q27 = v819;
          v43 = v820;
          v42 = v821;
          v41 = v822;
          v40 = v823;
        }
        v5 = v799;
        v6 = a1;
        v50 = v813;
      }
      *v779 = v56;
      v52 = v805 + 1;
      v38 = v810;
      v37 = v811;
      v39 = v809;
      v49 = v814;
      if (v805 + 1 == v802)
      {
        v36 = *v6;
        goto LABEL_23;
      }
    }
  }
}

uint64_t sub_20FDA91B8(uint64_t a1, __int128 *a2)
{
  uint64_t *v4;
  unint64_t **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void (***v19)(_QWORD);
  void (***v20)(_QWORD);
  void *v21;
  unint64_t **v22;
  void (***v23)(_QWORD);
  void (***v24)(_QWORD);
  void (**v25)(_QWORD);
  BOOL v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  char *v75;
  void *v76;
  void *v77;
  char *v78;
  char *v79;
  void *v80;
  void *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  unint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  unint64_t **v91;
  uint64_t v92;

  *(_OWORD *)a1 = xmmword_2103BF960;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 2097168;
  *(_QWORD *)(a1 + 52) = 0x90000002DLL;
  *(_OWORD *)(a1 + 96) = xmmword_2103C0E88;
  *(_OWORD *)(a1 + 112) = unk_2103C0E98;
  *(_OWORD *)(a1 + 64) = xmmword_2103C0E68;
  *(_OWORD *)(a1 + 80) = unk_2103C0E78;
  *(_OWORD *)(a1 + 128) = xmmword_2103C0EA8;
  *(_OWORD *)(a1 + 144) = xmmword_2103C0EB8;
  *(_OWORD *)(a1 + 192) = unk_2103C0EE8;
  *(_OWORD *)(a1 + 208) = xmmword_2103C0EF8;
  *(_OWORD *)(a1 + 160) = unk_2103C0EC8;
  *(_OWORD *)(a1 + 176) = xmmword_2103C0ED8;
  *(_QWORD *)(a1 + 224) = 0;
  v4 = (uint64_t *)(a1 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v5 = (unint64_t **)(a1 + 232);
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  v10 = a2[6];
  v11 = a2[7];
  v12 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v11;
  v13 = a2[10];
  v14 = a2[11];
  v15 = a2[13];
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v14;
  if ((sub_20FDAAD10((uint64_t *)a2) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/ResponseMapAndKPCGenerator.cpp", 36, (uint64_t)"IsResponseMapAndKPCGeneratorConfigValid(config)", 47, (uint64_t)"Invalid configuration", 21, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = operator new();
  *(_OWORD *)v16 = xmmword_2103BF960;
  *(int64x2_t *)(v16 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v16 + 32) = 1;
  *(_QWORD *)(v16 + 40) = 0;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  v17 = (_QWORD *)*v4;
  *v4 = v16;
  if (v17)
  {
    v18 = (void *)v17[9];
    if (v18)
    {
      v17[10] = v18;
      operator delete(v18);
    }
    v19 = (void (***)(_QWORD))v17[6];
    if (v19)
    {
      v20 = (void (***)(_QWORD))v17[7];
      v21 = (void *)v17[6];
      if (v20 != v19)
      {
        v22 = v5;
        v23 = v20 - 18;
        v24 = v20 - 18;
        do
        {
          v25 = *v24;
          v24 -= 18;
          (*v25)(v23);
          v26 = v23 == v19;
          v23 = v24;
        }
        while (!v26);
        v21 = (void *)v17[6];
        v5 = v22;
      }
      v17[7] = v19;
      operator delete(v21);
    }
    MEMORY[0x212BC6398](v17, 0x1020C4024B85F43);
    v16 = *v4;
  }
  v27 = *a2;
  v28 = a2[1];
  *(_OWORD *)(v16 + 26) = *(__int128 *)((char *)a2 + 26);
  *(_OWORD *)v16 = v27;
  *(_OWORD *)(v16 + 16) = v28;
  sub_20FD72F38((vImagePixelCount *)v16);
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *(_QWORD *)(a1 + 24);
  v31 = operator new();
  v32 = (unint64_t *)v31;
  *(_OWORD *)(v31 + 232) = 0u;
  *(_OWORD *)(v31 + 216) = 0u;
  *(_OWORD *)(v31 + 200) = 0u;
  *(_OWORD *)(v31 + 184) = 0u;
  *(_OWORD *)(v31 + 168) = 0u;
  v33 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v31 + 24) = *(_OWORD *)(a1 + 80);
  v34 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v31 + 40) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v31 + 56) = v34;
  *(_OWORD *)(v31 + 72) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v31 + 8) = v33;
  v35 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v31 + 88) = *(_OWORD *)(a1 + 144);
  v36 = *(_OWORD *)(a1 + 176);
  v37 = *(_OWORD *)(a1 + 192);
  v38 = *(_OWORD *)(a1 + 208);
  v39 = v30 * v29 - 2;
  v40 = *(_QWORD *)(a1 + 64);
  v41 = *(_QWORD *)(a1 + 72);
  v42 = v40 >= v41;
  if (v40 <= v41)
    v40 = *(_QWORD *)(a1 + 72);
  v43 = 64;
  if (!v42)
    v43 = 72;
  v44 = *(_QWORD *)(a1 + 80);
  v45 = *(_QWORD *)(a1 + 88);
  v46 = v40 >= v44;
  if (v40 <= v44)
    v40 = *(_QWORD *)(a1 + 80);
  if (!v46)
    v43 = 80;
  v47 = v40 >= v45;
  if (v40 <= v45)
    v40 = *(_QWORD *)(a1 + 88);
  if (!v47)
    v43 = 88;
  v48 = *(_QWORD *)(a1 + 96);
  v49 = *(_QWORD *)(a1 + 104);
  v50 = v40 >= v48;
  if (v40 <= v48)
    v40 = *(_QWORD *)(a1 + 96);
  if (!v50)
    v43 = 96;
  v51 = v40 >= v49;
  if (v40 <= v49)
    v40 = *(_QWORD *)(a1 + 104);
  if (!v51)
    v43 = 104;
  v52 = *(_QWORD *)(a1 + 112);
  v53 = *(_QWORD *)(a1 + 120);
  v54 = v40 >= v52;
  if (v40 <= v52)
    v40 = *(_QWORD *)(a1 + 112);
  if (!v54)
    v43 = 112;
  v55 = v40 >= v53;
  if (v40 <= v53)
    v40 = *(_QWORD *)(a1 + 120);
  if (!v55)
    v43 = 120;
  v56 = *(_QWORD *)(a1 + 128);
  v57 = *(_QWORD *)(a1 + 136);
  v58 = v40 >= v56;
  if (v40 <= v56)
    v40 = *(_QWORD *)(a1 + 128);
  if (!v58)
    v43 = 128;
  *(_QWORD *)(v31 + 248) = 0;
  *(_OWORD *)(v31 + 152) = v38;
  *(_OWORD *)(v31 + 136) = v37;
  *(_OWORD *)(v31 + 120) = v36;
  *(_OWORD *)(v31 + 104) = v35;
  *(_QWORD *)v31 = v39;
  v42 = v40 >= v57;
  v59 = 136;
  if (v42)
    v59 = v43;
  v60 = *(_QWORD *)(a1 + v59);
  v92 = 0;
  if (v60)
  {
    sub_20F4F5E74(v31 + 192, v60, &v92);
    v39 = *v32;
    v61 = (char *)v32[29];
    v62 = (char *)v32[30];
  }
  else
  {
    v61 = 0;
    v62 = 0;
  }
  v63 = v32[1];
  if (v63 <= 1)
    v63 = 1;
  v32[23] = v63 - 1;
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v61) >> 3);
  v65 = v39 - v64;
  if (v39 <= v64)
  {
    if (v39 < v64)
    {
      v78 = &v61[24 * v39];
      if (v62 != v78)
      {
        v79 = v62;
        do
        {
          v81 = (void *)*((_QWORD *)v79 - 3);
          v79 -= 24;
          v80 = v81;
          if (v81)
          {
            *((_QWORD *)v62 - 2) = v80;
            operator delete(v80);
          }
          v62 = v79;
        }
        while (v79 != v78);
      }
      v32[30] = (unint64_t)v78;
    }
  }
  else
  {
    v66 = v32[31];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)v62) >> 3) >= v65)
    {
      bzero(v62, 24 * ((24 * v65 - 24) / 0x18) + 24);
      v32[30] = (unint64_t)&v62[24 * ((24 * v65 - 24) / 0x18) + 24];
    }
    else
    {
      v91 = v5;
      if (v39 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)v61) >> 3);
      if (2 * v67 > v39)
        v39 = 2 * v67;
      if (v67 >= 0x555555555555555)
        v68 = 0xAAAAAAAAAAAAAAALL;
      else
        v68 = v39;
      if (v68 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v69 = (char *)operator new(24 * v68);
      v70 = &v69[8 * ((v62 - v61) >> 3)];
      v71 = &v69[24 * v68];
      bzero(v70, 24 * ((24 * v65 - 24) / 0x18) + 24);
      v72 = &v70[24 * ((24 * v65 - 24) / 0x18) + 24];
      if (v62 == v61)
      {
        v32[29] = (unint64_t)v70;
        v32[30] = (unint64_t)v72;
        v32[31] = (unint64_t)v71;
        v5 = v91;
      }
      else
      {
        v5 = v91;
        do
        {
          v73 = *(_OWORD *)(v62 - 24);
          v62 -= 24;
          *(_OWORD *)(v70 - 24) = v73;
          v70 -= 24;
          *((_QWORD *)v70 + 2) = *((_QWORD *)v62 + 2);
          *(_QWORD *)v62 = 0;
          *((_QWORD *)v62 + 1) = 0;
          *((_QWORD *)v62 + 2) = 0;
        }
        while (v62 != v61);
        v61 = (char *)v32[29];
        v74 = (char *)v32[30];
        v32[29] = (unint64_t)v70;
        v32[30] = (unint64_t)v72;
        v32[31] = (unint64_t)v71;
        if (v74 != v61)
        {
          v75 = v74;
          do
          {
            v77 = (void *)*((_QWORD *)v75 - 3);
            v75 -= 24;
            v76 = v77;
            if (v77)
            {
              *((_QWORD *)v74 - 2) = v76;
              operator delete(v76);
            }
            v74 = v75;
          }
          while (v75 != v61);
        }
      }
      if (v61)
        operator delete(v61);
    }
  }
  v82 = *v5;
  *v5 = v32;
  if (v82)
  {
    v83 = v82[29];
    if (v83)
    {
      v84 = v82[30];
      v85 = (void *)v82[29];
      if (v84 != v83)
      {
        v86 = v82[30];
        do
        {
          v88 = *(void **)(v86 - 24);
          v86 -= 24;
          v87 = v88;
          if (v88)
          {
            *(_QWORD *)(v84 - 16) = v87;
            operator delete(v87);
          }
          v84 = v86;
        }
        while (v86 != v83);
        v85 = (void *)v82[29];
      }
      v82[30] = v83;
      operator delete(v85);
    }
    v89 = (void *)v82[24];
    if (v89)
    {
      v82[25] = (unint64_t)v89;
      operator delete(v89);
    }
    MEMORY[0x212BC6398](v82, 0x1030C40F7CA4485);
  }
  return a1;
}

void sub_20FDA97B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void *v7;

  sub_20E9DD680(v4);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 200) = v7;
    operator delete(v7);
  }
  MEMORY[0x212BC6398](v3, 0x1030C40F7CA4485);
  sub_20FD9EC70(v1);
  sub_20FD9873C(v2);
  _Unwind_Resume(a1);
}

void sub_20FDA980C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_20FD9EC70(v1);
  sub_20FD9873C(v2);
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_20FDA9834(unsigned __int16 *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x4_t v26;
  int8x16_t v27;
  uint64_t v28;
  __int32 v29;
  int v30;
  unsigned int v31;
  __int16 v32;
  _WORD *v33;
  unsigned __int16 *v34;
  int v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  __int16 *v42;
  unsigned __int16 *v43;
  int v44;
  unsigned __int16 v45;
  _WORD *v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  unsigned int v61;
  int v62;
  __int32 v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  uint64_t v73;
  __int16 *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  __int16 *v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  int32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int32 v91;
  int v92;
  unsigned int v93;
  __int16 v94;
  unsigned __int16 *v95;
  int v96;
  unsigned __int16 *v97;
  unsigned __int16 *v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  __int16 *v103;
  unsigned __int16 *v104;
  int v105;
  unsigned __int16 v106;
  _WORD *v107;
  unint64_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  unsigned int v124;
  int v125;
  __int32 v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  __int16 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  unsigned __int16 *v140;
  int v141;
  unint64_t v142;
  int32x4_t v143;
  int32x4_t v144;
  unint64_t v145;
  unint64_t v146;
  _WORD *v147;
  _WORD *v148;
  _WORD *v149;

  v140 = result;
  if (a2[2])
  {
    v2 = 0;
    v138 = *((_QWORD *)result + 28);
    v139 = a2;
    v3 = *(_QWORD *)result;
    v4 = *((_QWORD *)result + 1);
    v143 = vdupq_n_s32(0x7FFF6Fu);
    v144 = vdupq_n_s32(0xFF7FFF70);
    while (1)
    {
      v137 = v2;
      v134 = a2[3] * v2;
      v7 = a2[6] + 144 * v134;
      v8 = *(_WORD **)(v7 + 88);
      v9 = *(_QWORD *)(v138 + 48) + 144 * v134;
      v10 = *(__int16 **)(v9 + 88);
      v11 = *(_QWORD *)(v7 + 40);
      v12 = *(_QWORD *)(v9 + 40);
      v13 = v140[24];
      v147 = v8;
      v148 = v8;
      v133 = v11;
      v149 = &v8[v11];
      v14 = v3;
      sub_20FDAAA28((uint64_t)&v147, v10, 0, v3, v13);
      v136 = v4;
      v15 = v4 - 1;
      v16 = &v10[v12];
      v142 = v14;
      if (v15 >= 2)
      {
        v17 = v133;
        v18 = v14 - 1;
        LOWORD(v19) = *v8;
        v145 = (v14 - 3);
        v20 = 2 * ((v145 + 1) & 0x1FFFFFFF8);
        v141 = (v14 - 2) & 0xFFFFFFF8 | 1;
        v21 = vdupq_n_s32(v13);
        v22 = 2 * v12;
        v23 = (uint64_t)&v8[2 * v133 + 1];
        v24 = (uint64_t)&v8[v133 + 1];
        v25 = 1;
        v26.i64[0] = 0x1000000010;
        v26.i64[1] = 0x1000000010;
        v27.i64[0] = 0x8000800080008000;
        v27.i64[1] = 0x8000800080008000;
        v28 = v133;
        while (1)
        {
          v33 = &v8[v17];
          v34 = &v8[2 * v133];
          v36 = &v8[v17 + 1];
          v35 = *v36;
          v38 = *v34;
          v37 = v34 + 1;
          v39 = v35 + (unsigned __int16)v19;
          v19 = (unsigned __int16)v8[v133];
          v40 = (v39 - 3 * v19 + v38) * v13;
          v41 = (((v40 + 16) >> 5) + 4) >> 3;
          if (v40 > 8388463)
            LOWORD(v41) = 0x7FFF;
          if (v40 < -8388752)
            LOWORD(v41) = 0x8000;
          *v16 = v41;
          v42 = v16 + 1;
          v43 = v8 + 1;
          if (v18 >= 2)
            break;
          v29 = v19;
LABEL_8:
          v30 = (v29 + v35 - 4 * v35 + *v43 + *v37) * v13;
          v31 = (((v30 + 16) >> 5) + 4) >> 3;
          if (v30 > 8388463)
            LOWORD(v31) = 0x7FFF;
          if (v30 >= -8388752)
            v32 = v31;
          else
            v32 = 0x8000;
          *v42 = v32;
          ++v25;
          v16 = (__int16 *)((char *)v16 + v22);
          v23 += v17 * 2;
          v24 += v17 * 2;
          v8 = v33;
          if (v25 == v15)
            goto LABEL_35;
        }
        if (v145 >= 7)
        {
          v47 = 0;
          v43 = (unsigned __int16 *)((char *)v43 + v20);
          v36 = (unsigned __int16 *)((char *)v36 + v20);
          v37 = (unsigned __int16 *)((char *)v37 + v20);
          v42 = (__int16 *)((char *)v42 + v20);
          v48 = (int8x16_t)vdupq_n_s16(v19);
          v46 = &v33[(unint64_t)v20 / 2];
          do
          {
            v49 = v48;
            v48 = *(int8x16_t *)(v24 + v47);
            v50 = (uint16x8_t)vextq_s8(v49, v48, 0xEuLL);
            v51 = *(uint16x8_t *)(v24 + v47 + 2);
            v52 = *(uint16x8_t *)&v8[v47 / 2 + 1];
            v53 = *(uint16x8_t *)(v23 + v47);
            v54 = (int32x4_t)vaddl_high_u16(v51, v50);
            v55 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8);
            v56 = vmulq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vsubq_s32(v54, (int32x4_t)vshll_high_n_u16((uint16x8_t)v48, 2uLL)), v52), v53), v21);
            v57 = vmulq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)vsubq_s32(v55, (int32x4_t)vshll_n_u16(*(uint16x4_t *)v48.i8, 2uLL)), *(uint16x4_t *)v52.i8), *(uint16x4_t *)v53.i8), v21);
            v58 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v57, v26), 5uLL);
            v59 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v144, v57), (int16x8_t)vcgtq_s32(v144, v56));
            v60 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v143), (int16x8_t)vcgtq_s32(v56, v143));
            *(int8x16_t *)&v16[v47 / 2 + 1] = vbslq_s8(v59, v27, vorrq_s8((int8x16_t)(*(_OWORD *)&v60 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vbicq_s8((int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32(v58, 3uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v56, v26), 5uLL), 3uLL), v60)));
            v47 += 16;
          }
          while (((2 * (v145 + 1)) & 0x3FFFFFFF0) != v47);
          if (v145 + 1 == ((v145 + 1) & 0x1FFFFFFF8))
          {
            v29 = vmovl_high_u16(*(uint16x8_t *)&v48).i32[3];
LABEL_33:
            v28 = v133;
            v35 = *v36;
            goto LABEL_8;
          }
          v45 = v48.u16[7];
          v44 = v141;
        }
        else
        {
          v44 = 1;
          v45 = v19;
          v46 = &v8[v17];
        }
        v61 = v18 - v44;
        do
        {
          v62 = (unsigned __int16)v46[2];
          v46 = v36;
          v63 = *v36++;
          v29 = v63;
          v65 = *v43++;
          v64 = v65;
          v66 = *v37++;
          v67 = (v62 + v45 - 4 * v29 + v64 + v66) * v13;
          v68 = (((v67 + 16) >> 5) + 4) >> 3;
          if (v67 > 8388463)
            LOWORD(v68) = 0x7FFF;
          if (v67 >= -8388752)
            v69 = v68;
          else
            v69 = 0x8000;
          *v42++ = v69;
          v45 = v29;
          --v61;
        }
        while (v61);
        goto LABEL_33;
      }
      v33 = v8;
      v28 = v133;
LABEL_35:
      v147 = v33;
      v148 = &v33[v28];
      v149 = v148;
      sub_20FDAAA28((uint64_t)&v147, v16, 0, v142, v13);
      v70 = 144 * v134 + 144;
      v71 = v139[6] + v70;
      v72 = *(_WORD **)(v71 + 88);
      v73 = *(_QWORD *)(v138 + 48) + v70;
      v74 = *(__int16 **)(v73 + 88);
      v75 = *(_QWORD *)(v71 + 40);
      v76 = v15;
      v77 = *(_QWORD *)(v73 + 40);
      v78 = v140[25];
      v147 = v72;
      v148 = v72;
      v135 = v75;
      v149 = &v72[v75];
      sub_20FDAAA28((uint64_t)&v147, v74, 0, v142, v78);
      v79 = v77;
      v80 = &v74[v77];
      if (v76 >= 2)
        break;
      v5 = v72;
      v6 = v135;
LABEL_4:
      v147 = v5;
      v148 = &v5[v6];
      v149 = v148;
      result = sub_20FDAAA28((uint64_t)&v147, v80, 0, v142, v78);
      v3 = (v142 + 1) >> 1;
      v4 = (v136 + 1) >> 1;
      v2 = v137 + 1;
      a2 = v139;
      if ((unint64_t)(v137 + 1) >= v139[2])
        return result;
    }
    v81 = v76;
    v82 = v135;
    v83 = v142 - 1;
    LOWORD(v84) = *v72;
    v146 = (v142 - 3);
    v85 = 2 * ((v146 + 1) & 0x1FFFFFFF8);
    v86 = vdupq_n_s32(v78);
    v87 = 2 * v79;
    v88 = (uint64_t)&v72[2 * v135 + 1];
    v89 = (uint64_t)&v72[v135 + 1];
    v90 = 1;
    v6 = v135;
    while (1)
    {
      v5 = &v72[v82];
      v95 = &v72[2 * v135];
      v97 = &v72[v82 + 1];
      v96 = *v97;
      v99 = *v95;
      v98 = v95 + 1;
      v100 = v96 + (unsigned __int16)v84;
      v84 = (unsigned __int16)v72[v135];
      v101 = (v100 - 3 * v84 + v99) * v78;
      v102 = (((v101 + 16) >> 5) + 4) >> 3;
      if (v101 > 8388463)
        LOWORD(v102) = 0x7FFF;
      if (v101 < -8388752)
        LOWORD(v102) = 0x8000;
      *v80 = v102;
      v103 = v80 + 1;
      v104 = v72 + 1;
      if (v83 >= 2)
        break;
      v91 = v84;
LABEL_38:
      v92 = (v91 + v96 - 4 * v96 + *v104 + *v98) * v78;
      v93 = (((v92 + 16) >> 5) + 4) >> 3;
      if (v92 > 8388463)
        LOWORD(v93) = 0x7FFF;
      if (v92 >= -8388752)
        v94 = v93;
      else
        v94 = 0x8000;
      *v103 = v94;
      ++v90;
      v80 = (__int16 *)((char *)v80 + v87);
      v88 += v82 * 2;
      v89 += v82 * 2;
      v72 = v5;
      if (v90 == v81)
        goto LABEL_4;
    }
    if (v146 >= 7)
    {
      v108 = 0;
      v104 = (unsigned __int16 *)((char *)v104 + v85);
      v97 = (unsigned __int16 *)((char *)v97 + v85);
      v98 = (unsigned __int16 *)((char *)v98 + v85);
      v103 = (__int16 *)((char *)v103 + v85);
      v109 = (int8x16_t)vdupq_n_s16(v84);
      v107 = &v5[(unint64_t)v85 / 2];
      v110.i64[0] = 0x1000000010;
      v110.i64[1] = 0x1000000010;
      v111.i64[0] = 0x8000800080008000;
      v111.i64[1] = 0x8000800080008000;
      do
      {
        v112 = v109;
        v109 = *(int8x16_t *)(v89 + v108);
        v113 = (uint16x8_t)vextq_s8(v112, v109, 0xEuLL);
        v114 = *(uint16x8_t *)(v89 + v108 + 2);
        v115 = *(uint16x8_t *)&v72[v108 / 2 + 1];
        v116 = *(uint16x8_t *)(v88 + v108);
        v117 = (int32x4_t)vaddl_high_u16(v114, v113);
        v118 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v114.i8, *(uint16x4_t *)v113.i8);
        v119 = vmulq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vsubq_s32(v117, (int32x4_t)vshll_high_n_u16((uint16x8_t)v109, 2uLL)), v115), v116), v86);
        v120 = vmulq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)vsubq_s32(v118, (int32x4_t)vshll_n_u16(*(uint16x4_t *)v109.i8, 2uLL)), *(uint16x4_t *)v115.i8), *(uint16x4_t *)v116.i8), v86);
        v121 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v120, v110), 5uLL);
        v122 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v144, v120), (int16x8_t)vcgtq_s32(v144, v119));
        v123 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v120, v143), (int16x8_t)vcgtq_s32(v119, v143));
        *(int8x16_t *)&v80[v108 / 2 + 1] = vbslq_s8(v122, v111, vorrq_s8((int8x16_t)(*(_OWORD *)&v123 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vbicq_s8((int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32(v121, 3uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v119, v110), 5uLL), 3uLL), v123)));
        v108 += 16;
      }
      while (((2 * (v146 + 1)) & 0x3FFFFFFF0) != v108);
      if (v146 + 1 == ((v146 + 1) & 0x1FFFFFFF8))
      {
        v91 = vmovl_high_u16(*(uint16x8_t *)&v109).i32[3];
LABEL_63:
        v6 = v135;
        v96 = *v97;
        goto LABEL_38;
      }
      v106 = v109.u16[7];
      v105 = (v142 - 2) & 0xFFFFFFF8 | 1;
    }
    else
    {
      v105 = 1;
      v106 = v84;
      v107 = &v72[v82];
    }
    v124 = v83 - v105;
    do
    {
      v125 = (unsigned __int16)v107[2];
      v107 = v97;
      v126 = *v97++;
      v91 = v126;
      v128 = *v104++;
      v127 = v128;
      v129 = *v98++;
      v130 = (v125 + v106 - 4 * v91 + v127 + v129) * v78;
      v131 = (((v130 + 16) >> 5) + 4) >> 3;
      if (v130 > 8388463)
        LOWORD(v131) = 0x7FFF;
      if (v130 >= -8388752)
        v132 = v131;
      else
        v132 = 0x8000;
      *v103++ = v132;
      v106 = v91;
      --v124;
    }
    while (v124);
    goto LABEL_63;
  }
  return result;
}

void sub_20FDA9F60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t *v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  unint64_t *v71;
  int64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  char *v104;
  char *v105;
  char *v106;

  v82 = *(_QWORD *)(a1 + 224);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v4 = *(_QWORD *)(a1 + 8) * *(_QWORD *)a1;
  if (!v4)
  {
    v5 = 0;
    goto LABEL_8;
  }
  if (v4 >> 61)
    goto LABEL_105;
  v5 = (uint64_t *)operator new(8 * v4);
  v101 = v5;
  v102 = v5;
  v103 = &v5[v4];
  v6 = 8 * v4;
  if (8 * v4 >= 0x20)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      v7 = (unint64_t)(v6 >> 3) >> 2;
      v104 = (char *)operator new(8 * v7);
      v105 = v104;
      v106 = &v104[8 * v7];
      goto LABEL_8;
    }
LABEL_105:
    sub_20E92CED8();
  }
LABEL_8:
  v83 = v3 * v2;
  v8 = *(uint64_t **)(a1 + 232);
  v8[21] = 0;
  v8[22] = 0;
  v9 = v8[1];
  if (v9 <= 1)
    v9 = 1;
  v8[23] = v9 - 1;
  v10 = (void *)v8[24];
  v11 = v8[25] - (_QWORD)v10;
  if (v11 >= 1)
    bzero(v10, 8 * (((unint64_t)v11 >> 3) - ((unint64_t)v11 > 7)) + 8);
  v8[27] = 0;
  v8[28] = 0;
  v12 = *v8;
  if (*v8)
  {
    v13 = v8[29];
    if (v12 == 1)
    {
      v14 = 0;
LABEL_18:
      v18 = v12 - v14;
      v19 = (_QWORD *)(v13 + 24 * v14 + 8);
      do
      {
        *v19 = *(v19 - 1);
        v19 += 3;
        --v18;
      }
      while (v18);
      goto LABEL_20;
    }
    v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v15 = (uint64_t *)(v13 + 24);
    v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v17 = *v15;
      *(v15 - 2) = *(v15 - 3);
      v15[1] = v17;
      v15 += 6;
      v16 -= 2;
    }
    while (v16);
    if (v12 != v14)
      goto LABEL_18;
  }
LABEL_20:
  if (v83)
  {
    v20 = 0;
    v21 = v83 - 1;
    while (1)
    {
      v22 = *(_QWORD *)(v82 + 48);
      v23 = v22 + 144 * v20;
      v25 = *(_QWORD *)(v23 + 32);
      v24 = (_DWORD *)(v23 + 32);
      v89 = v20 | 1;
      if (v25 != *(_QWORD *)(v22 + 144 * (v20 | 1) + 32)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/ResponseMapAndKPCGenerator.cpp", 103, (uint64_t)"lap_scale0.width() == lap_scale1.width()", 40, (uint64_t)"image width mismatch", 20, (void (*)(void **))sub_21023DDB0))
      {
LABEL_104:
        abort();
      }
      v26 = v22 + 144 * v20;
      v29 = *(_QWORD *)(v26 + 48);
      v28 = (uint64_t *)(v26 + 48);
      LODWORD(v27) = v29;
      if (v29 != *(_QWORD *)(v22 + 144 * v89 + 48))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Hardware/src/ResponseMapAndKPCGenerator.cpp", 104, (uint64_t)"lap_scale0.height() == lap_scale1.height()", 42, (uint64_t)"image height mismatch", 21, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_104;
        }
        v27 = *v28;
      }
      v84 = (v27 - 1);
      v95 = v20 >> 1;
      v96 = (*v24 - 1);
      if ((int)v84 >= 2 && *v24 - 1 >= 2)
        break;
LABEL_33:
      if (v20)
      {
        v31 = (uint64_t *)v104;
        v32 = (uint64_t *)v105;
        if (v104 != v105)
        {
          do
          {
            sub_20FDAA788(*(_QWORD **)(a1 + 232), *v31, v20 - 1, ((*v31 >> 10) & 0x1FFF) >> v95);
            ++v31;
          }
          while (v31 != v32);
        }
      }
      v5 = v101;
      if (v89 != v21)
      {
        v33 = v102;
        if (v101 != v102)
        {
          do
          {
            sub_20FDAA788(*(_QWORD **)(a1 + 232), *v5, v20, ((*v5 >> 10) & 0x1FFF) >> v95);
            ++v5;
          }
          while (v5 != v33);
          v5 = v101;
        }
      }
      v105 = v104;
      v102 = v5;
      v20 += 2;
      if (v20 >= v83)
        goto LABEL_95;
    }
    v90 = (_QWORD *)(v22 + 144 * v20 + 120);
    v86 = v20;
    v87 = (_QWORD *)(v22 + 144 * v89 + 120);
    v88 = ((_DWORD)v20 << 23) & 0x7000000;
    v34 = 1;
LABEL_41:
    v35 = 8 * v34 - 8;
    v36 = *(_QWORD *)(*v90 + v35);
    v37 = *(_QWORD *)(*v90 + 8 * v34);
    v85 = v34 + 1;
    v38 = 8 * (v34 + 1);
    v99 = *(_QWORD *)(*v90 + v38);
    v97 = *(_QWORD *)(*v87 + 8 * v34);
    v98 = *(_QWORD *)(*v87 + v35);
    v39 = *(_QWORD *)(*v87 + v38);
    v40 = 1;
    v94 = (((_DWORD)v34 << v95) & 0x1FFF) << 10;
    v41 = v89;
    v92 = v36;
    v93 = v34;
    v91 = v37;
    while (1)
    {
      v100 = 0;
      if (v20)
      {
        if (sub_20FDAC960(v36, v37, v99, v98, v97, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), (char *)&v100))
          break;
      }
LABEL_71:
      if (v41 == v21
        || !sub_20FDAC960(v98, v97, v39, v36, v37, v99, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), (char *)&v100))
      {
        goto LABEL_44;
      }
      v63 = ((v89 & 0xF) << 23) | v94 | ((_DWORD)v40 << v95) & 0x3FF | ((unint64_t)v100 << 43) | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*v87 + 8 * v34) + 2 * v40) << 27);
      v64 = (char *)v102;
      if (v102 >= v103)
      {
        v65 = v101;
        v66 = v102 - v101;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 61)
          sub_20E92CED8();
        v68 = (char *)v103 - (char *)v101;
        if (((char *)v103 - (char *)v101) >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          if (v69 >> 61)
            sub_20E877A38();
          v70 = operator new(8 * v69);
          v71 = (unint64_t *)&v70[8 * v66];
          *v71 = v63;
          v42 = (uint64_t)(v71 + 1);
          v72 = v64 - (char *)v65;
          if (v64 != (char *)v65)
          {
LABEL_83:
            v73 = v72 - 8;
            if (v73 < 0x58)
            {
              v20 = v86;
              goto LABEL_91;
            }
            v20 = v86;
            if ((unint64_t)((char *)v65 - v70) < 0x20)
              goto LABEL_108;
            v74 = (v73 >> 3) + 1;
            v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
            v76 = &v64[-v75];
            v71 = (unint64_t *)((char *)v71 - v75);
            v77 = &v70[8 * v66 - 16];
            v78 = v64 - 16;
            v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v80 = *(_OWORD *)v78;
              *(v77 - 1) = *((_OWORD *)v78 - 1);
              *v77 = v80;
              v77 -= 2;
              v78 -= 32;
              v79 -= 4;
            }
            while (v79);
            v64 = v76;
            if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_108:
              do
              {
LABEL_91:
                v81 = *((_QWORD *)v64 - 1);
                v64 -= 8;
                *--v71 = v81;
              }
              while (v64 != (char *)v65);
            }
LABEL_92:
            v101 = (uint64_t *)v71;
            v102 = (uint64_t *)v42;
            v103 = (uint64_t *)&v70[8 * v69];
            if (v65)
              operator delete(v65);
            v21 = v83 - 1;
            v41 = v89;
            goto LABEL_43;
          }
        }
        else
        {
          v70 = 0;
          v71 = (unint64_t *)(8 * v66);
          *(_QWORD *)(8 * v66) = v63;
          v42 = 8 * v66 + 8;
          v72 = v64 - (char *)v65;
          if (v64 != (char *)v65)
            goto LABEL_83;
        }
        v20 = v86;
        goto LABEL_92;
      }
      *v102 = v63;
      v42 = (uint64_t)(v64 + 8);
LABEL_43:
      v102 = (uint64_t *)v42;
      v36 = v92;
      v34 = v93;
      v37 = v91;
LABEL_44:
      if (++v40 == v96)
      {
        v34 = v85;
        if (v85 == v84)
          goto LABEL_33;
        goto LABEL_41;
      }
    }
    v43 = v88 | v94 | ((_DWORD)v40 << v95) & 0x3FFu | ((unint64_t)v100 << 43) | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*v90 + 8 * v34) + 2 * v40) << 27);
    v44 = v105;
    if (v105 < v106)
    {
      *(_QWORD *)v105 = v43;
      v45 = (uint64_t)(v44 + 8);
LABEL_70:
      v105 = (char *)v45;
      v36 = v92;
      v34 = v93;
      v37 = v91;
      goto LABEL_71;
    }
    v46 = v104;
    v47 = (v105 - v104) >> 3;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61)
      sub_20E92CED8();
    v49 = v106 - v104;
    if ((v106 - v104) >> 2 > v48)
      v48 = v49 >> 2;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v50 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 61)
        sub_20E877A38();
      v51 = operator new(8 * v50);
      v52 = (unint64_t *)&v51[8 * v47];
      *v52 = v43;
      v45 = (uint64_t)(v52 + 1);
      v53 = v44 - v46;
      if (v44 != v46)
        goto LABEL_58;
    }
    else
    {
      v51 = 0;
      v52 = (unint64_t *)(8 * v47);
      *(_QWORD *)(8 * v47) = v43;
      v45 = 8 * v47 + 8;
      v53 = v44 - v46;
      if (v44 != v46)
      {
LABEL_58:
        v54 = v53 - 8;
        if (v54 >= 0x58)
        {
          v20 = v86;
          if ((unint64_t)(v46 - v51) >= 0x20)
          {
            v55 = (v54 >> 3) + 1;
            v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
            v57 = &v44[-v56];
            v52 = (unint64_t *)((char *)v52 - v56);
            v58 = &v51[8 * v47 - 16];
            v59 = v44 - 16;
            v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v61 = *(_OWORD *)v59;
              *(v58 - 1) = *((_OWORD *)v59 - 1);
              *v58 = v61;
              v58 -= 2;
              v59 -= 32;
              v60 -= 4;
            }
            while (v60);
            v44 = v57;
            if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_67;
          }
        }
        else
        {
          v20 = v86;
        }
        do
        {
          v62 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          *--v52 = v62;
        }
        while (v44 != v46);
LABEL_67:
        v104 = (char *)v52;
        v105 = (char *)v45;
        v106 = &v51[8 * v50];
        if (v46)
          operator delete(v46);
        v21 = v83 - 1;
        v41 = v89;
        goto LABEL_70;
      }
    }
    v20 = v86;
    goto LABEL_67;
  }
LABEL_95:
  if (v5)
  {
    v102 = v5;
    operator delete(v5);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
}

void sub_20FDAA728(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
    v4 = *(void **)(v1 - 112);
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(void **)(v1 - 112);
    if (!v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 - 104) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void sub_20FDAA788(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  if (a1[28] >= a3)
  {
    v10 = a1[27];
    if (v10 >= a4)
      goto LABEL_5;
LABEL_8:
    v12 = a1[21];
    v13 = a1[22];
    v15 = a1[23];
    v14 = a1[24];
    a1[27] = v10 + 1;
    a1[22] = v12 + v13;
    a1[23] = v15 + 1;
    *(_QWORD *)(v14 + 8 * v15) = v12;
    while (1)
    {
      v16 = a1[22];
      v17 = a1[23] % a1[a3 + 1];
      a1[23] = v17;
      a1[21] = 0;
      v18 = v16 - *(_QWORD *)(v14 + 8 * v17);
      a1[22] = v18;
      v19 = a1[27];
      if (v19 >= a4)
        break;
      a1[27] = v19 + 1;
      a1[22] = v18;
      a1[23] = v17 + 1;
      *(_QWORD *)(v14 + 8 * v17) = 0;
    }
    v11 = 0;
    if (v18 >= a1[a3 + 11])
      return;
    goto LABEL_12;
  }
  a1[28] = a3;
  v8 = (void *)a1[24];
  v9 = a1[25] - (_QWORD)v8;
  if (v9 >= 1)
    bzero(v8, 8 * (((unint64_t)v9 >> 3) - ((unint64_t)v9 > 7)) + 8);
  v10 = 0;
  a1[27] = 0;
  a1[22] = 0;
  a1[23] = 0;
  a1[21] = 0;
  if (a4)
    goto LABEL_8;
LABEL_5:
  v11 = a1[21];
  if ((unint64_t)(a1[22] + v11) >= a1[a3 + 11])
    return;
LABEL_12:
  v20 = a1[29] + 24 * a3;
  v21 = (_QWORD *)(v20 + 8);
  v22 = *(char **)(v20 + 8);
  v23 = *(_QWORD *)(v20 + 16);
  if ((unint64_t)v22 >= v23)
  {
    v43 = a2;
    v25 = *(char **)v20;
    v26 = (uint64_t)&v22[-*(_QWORD *)v20];
    v27 = v26 >> 3;
    v28 = (v26 >> 3) + 1;
    if (v28 >> 61)
      sub_20E92CED8();
    v29 = v23 - (_QWORD)v25;
    if (v29 >> 2 > v28)
      v28 = v29 >> 2;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      if (v30 >> 61)
        sub_20E877A38();
      v31 = operator new(8 * v30);
    }
    else
    {
      v31 = 0;
    }
    v32 = &v31[8 * v27];
    v33 = &v31[8 * v30];
    *v32 = v43;
    v24 = v32 + 1;
    if (v22 != v25)
    {
      v34 = v22 - v25 - 8;
      if (v34 < 0x58)
        goto LABEL_39;
      if ((unint64_t)(v22 - v31 - v26) < 0x20)
        goto LABEL_39;
      v35 = (v34 >> 3) + 1;
      v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
      v37 = &v22[-v36];
      v32 = (_QWORD *)((char *)v32 - v36);
      v38 = &v31[8 * v27 - 16];
      v39 = v22 - 16;
      v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *v38 = v41;
        v38 -= 2;
        v39 -= 32;
        v40 -= 4;
      }
      while (v40);
      v22 = v37;
      if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          v42 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v32 = v42;
        }
        while (v22 != v25);
      }
    }
    *(_QWORD *)v20 = v32;
    *v21 = v24;
    *(_QWORD *)(v20 + 16) = v33;
    if (v25)
    {
      operator delete(v25);
      v11 = a1[21];
    }
  }
  else
  {
    *(_QWORD *)v22 = a2;
    v24 = v22 + 8;
  }
  *v21 = v24;
  a1[21] = v11 + 1;
}

unsigned __int16 *sub_20FDAAA28(uint64_t a1, __int16 *a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned __int16 *result;
  int v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unsigned int v13;
  uint16x8_t *v14;
  int v15;
  unsigned int v16;
  __int16 v17;
  int8x16_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t *v23;
  unint64_t v24;
  int8x16_t *v25;
  BOOL v27;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  int8x16_t *v34;
  unsigned __int16 *v35;
  int8x16_t v36;
  int32x4_t v37;
  uint16x8_t *v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  uint64_t v43;
  int8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int16x8_t v56;
  int8x16_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  __int16 v67;
  int v68;
  unsigned int v69;
  __int16 v70;

  v5 = *(unsigned __int16 **)(a1 + 8 * a3);
  if (a3 + 1 <= 2)
    v6 = a3 + 1;
  else
    v6 = 0;
  v7 = *(unsigned __int16 **)(a1 + 8 * v6);
  v8 = a3 + 2;
  if (a3 != 0 && a3 < 0xFFFFFFFE)
    v8 = a3 - 1;
  result = *(unsigned __int16 **)(a1 + 8 * v8);
  v11 = v7 + 1;
  v10 = v7[1];
  v12 = v5 + 1;
  v13 = *v7;
  v14 = (uint16x8_t *)(result + 1);
  v15 = (-3 * v13 + v10 + *v5 + *result) * a5;
  v16 = (((v15 + 16) >> 5) + 4) >> 3;
  if (v15 > 8388463)
    LOWORD(v16) = 0x7FFF;
  if (v15 >= -8388752)
    v17 = v16;
  else
    v17 = 0x8000;
  *a2 = v17;
  v18 = (int8x16_t *)(a2 + 1);
  if ((a4 - 1) >= 2)
  {
    v19 = (a4 - 3);
    if (v19 >= 7)
    {
      v21 = (a4 - 3);
      v22 = v21 * 2 + 4;
      v23 = (uint16x8_t *)&a2[v21 + 2];
      v24 = (unint64_t)&v7[v21 + 3];
      v25 = (int8x16_t *)((char *)result + v22);
      v27 = v18 < (int8x16_t *)((char *)v5 + v22) && v12 < (unsigned __int16 *)v23;
      v29 = v18 < v25 && v14 < v23;
      v30 = v11 >= (unsigned __int16 *)v23 || (unint64_t)v18 >= v24;
      v20 = 1;
      if (v30 && !v27 && !v29)
      {
        v31 = v19 + 1;
        v32 = v31 & 0x1FFFFFFF8;
        v33 = &v12[v32];
        v11 = (unsigned __int16 *)((char *)v11 + v32 * 2);
        result = &v14->u16[v32];
        v34 = (int8x16_t *)((char *)v18 + v32 * 2);
        v35 = &v7[v32];
        v20 = v31 & 0xFFFFFFF8 | 1;
        v36 = (int8x16_t)vdupq_n_s16(v13);
        v37 = vdupq_n_s32(a5);
        v38 = (uint16x8_t *)(v7 + 2);
        v39 = vdupq_n_s32(0xFF7FFF70);
        v40.i64[0] = 0x1000000010;
        v40.i64[1] = 0x1000000010;
        v41 = vdupq_n_s32(0x7FFF6Fu);
        v42.i64[0] = 0x8000800080008000;
        v42.i64[1] = 0x8000800080008000;
        v43 = v31 & 0x1FFFFFFF8;
        do
        {
          v44 = v36;
          v36 = *(int8x16_t *)((char *)&v38[-1] + 14);
          v45 = *v38++;
          v46 = v45;
          v47 = (uint16x8_t)vextq_s8(v44, v36, 0xEuLL);
          v48 = *(uint16x8_t *)v12;
          v12 += 8;
          v49 = v48;
          v50 = *v14++;
          v51 = (int32x4_t)vaddl_high_u16(v46, v47);
          v52 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v47.i8);
          v53 = vmulq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vsubq_s32(v51, (int32x4_t)vshll_high_n_u16((uint16x8_t)v36, 2uLL)), v49), v50), v37);
          v54 = vmulq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)vsubq_s32(v52, (int32x4_t)vshll_n_u16(*(uint16x4_t *)v36.i8, 2uLL)), *(uint16x4_t *)v49.i8), *(uint16x4_t *)v50.i8), v37);
          v55 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v54, v40), 5uLL);
          v56 = (int16x8_t)vcgtq_s32(v39, v54);
          v57 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v54, v41), (int16x8_t)vcgtq_s32(v53, v41));
          *v18++ = vbslq_s8((int8x16_t)vuzp1q_s16(v56, (int16x8_t)vcgtq_s32(v39, v53)), v42, vorrq_s8((int8x16_t)(*(_OWORD *)&v57 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vbicq_s8((int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32(v55, 3uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v53, v40), 5uLL), 3uLL), v57)));
          v43 -= 8;
        }
        while (v43);
        if (v31 == (v31 & 0x1FFFFFFF8))
        {
          v13 = vmovl_high_u16(*(uint16x8_t *)&v36).u32[3];
LABEL_46:
          v10 = *v11;
          v18 = v34;
          v14 = (uint16x8_t *)result;
          v12 = v33;
          goto LABEL_47;
        }
        LOWORD(v13) = v36.i16[7];
        v12 = v33;
        v14 = (uint16x8_t *)result;
        v18 = v34;
        v7 = v35;
      }
    }
    else
    {
      v20 = 1;
    }
    v58 = ~v20 + a4;
    v33 = v12;
    result = (unsigned __int16 *)v14;
    v34 = v18;
    do
    {
      v59 = v7[2];
      v7 = v11;
      v61 = *v11++;
      v60 = v61;
      v63 = *v33++;
      v62 = v63;
      v64 = *result++;
      v65 = (v59 + (unsigned __int16)v13 - 4 * v60 + v62 + v64) * a5;
      v66 = (((v65 + 16) >> 5) + 4) >> 3;
      if (v65 > 8388463)
        LOWORD(v66) = 0x7FFF;
      if (v65 >= -8388752)
        v67 = v66;
      else
        v67 = 0x8000;
      v34->i16[0] = v67;
      v34 = (int8x16_t *)((char *)v34 + 2);
      LOWORD(v13) = v60;
      --v58;
    }
    while (v58);
    v13 = v60;
    goto LABEL_46;
  }
LABEL_47:
  v68 = (v13 + v10 - 4 * v10 + *v12 + v14->u16[0]) * a5;
  if (v68 <= 8388463)
    v69 = (((v68 + 16) >> 5) + 4) >> 3;
  else
    LOWORD(v69) = 0x7FFF;
  if (v68 >= -8388752)
    v70 = v69;
  else
    v70 = 0x8000;
  v18->i16[0] = v70;
  return result;
}

uint64_t sub_20FDAAD10(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  size_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  const char *v16;
  size_t v17;
  unsigned __int8 v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  const char *v24;
  size_t v25;
  uint64_t result;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  void *p_p;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  size_t v43;
  std::__shared_weak_count_vtbl *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  int v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unsigned __int8 v82;
  const char *v83;
  size_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  size_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  char *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  int v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  unint64_t *v128;
  unsigned __int8 v129;
  const char *v130;
  size_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  size_t v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  char *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  int v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  unint64_t *v177;
  int v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  char *v183;
  unsigned __int8 v184;
  uint64_t v185;
  const char *v186;
  NSObject *v187;
  unsigned __int8 v188;
  uint64_t v189;
  const char *v190;
  NSObject *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  uint64_t *v198;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v200;
  int v201;
  const char *v202;
  int v203;
  const char *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  char *category;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE object[24];
  __int128 v213;
  void *__p;
  size_t v215;
  unint64_t v216;
  char v217;
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  if (a1[4] != 1)
  {
    sub_20FDAC86C(&v207);
    if (**(int **)(v207 + 56) > 4)
      return 0;
    v11 = *(unsigned __int8 *)(v207 + 72);
    v12 = sub_20E8C31DC(v207, "OSLogSurrogateAppender", 1, 0);
    v13 = v12;
    if (!v11 && v12 == 0)
      return 0;
    v196 = v11;
    v198 = &v207;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v200 = std::chrono::system_clock::now().__d_.__rep_;
    v201 = 4;
    v202 = "unknown file";
    v203 = 34;
    v205 = 0;
    v206 = 0;
    v204 = "unknown function";
    v15 = v207;
    v16 = (const char *)(v207 + 16);
    v193 = v207 + 16;
    if (*(char *)(v207 + 39) < 0)
    {
      v16 = *(const char **)(v207 + 16);
      v17 = *(_QWORD *)(v207 + 24);
      v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v33 & 1) != 0)
        goto LABEL_42;
    }
    else
    {
      v17 = *(unsigned __int8 *)(v207 + 39);
      v18 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v18 & 1) != 0)
        goto LABEL_42;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v213 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_42:
    if (byte_254A4A50F >= 0)
      v34 = (const char *)&xmmword_254A4A4F8;
    else
      v34 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v35 = byte_254A4A50F;
    else
      v35 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    *(_QWORD *)object = os_log_create(v34, v16);
    v36 = &object[8];
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v35 >= 0x17)
    {
      v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v37 = v35 | 7;
      v38 = v37 + 1;
      v36 = operator new(v37 + 1);
      *(_QWORD *)&object[16] = v35;
      *(_QWORD *)&v213 = v38 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v36;
    }
    else
    {
      BYTE7(v213) = v35;
      if (!v35)
      {
LABEL_56:
        v36[v35] = 0;
        BYTE8(v213) = 1;
        p_p = &__p;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v17 >= 0x17)
        {
          v40 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v40 = v17 | 7;
          v41 = v40 + 1;
          p_p = operator new(v40 + 1);
          v215 = v17;
          v216 = v41 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v216) = v17;
          if (!v17)
            goto LABEL_64;
        }
        memmove(p_p, v16, v17);
LABEL_64:
        *((_BYTE *)p_p + v17) = 0;
        v217 = 1;
        v42 = *(NSObject **)object;
        if (SHIBYTE(v216) < 0)
          operator delete(__p);
        if (BYTE8(v213) && SBYTE7(v213) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v13 && *(_QWORD *)(v13 + 24))
        {
          v43 = _os_log_pack_size();
          v44 = (std::__shared_weak_count_vtbl *)operator new(v43, (std::align_val_t)8uLL);
          v45 = (std::__shared_weak_count *)operator new();
          v46 = v45;
          v45->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v45->__shared_weak_owners_ = 0;
          v45[1].__vftable = v44;
          *(_QWORD *)object = v44;
          *(_QWORD *)&object[8] = v44;
          *(_QWORD *)&object[16] = v45;
          do
            v48 = __ldxr(p_shared_owners);
          while (__stxr(v48 + 1, p_shared_owners));
          v213 = 0uLL;
          __p = 0;
          do
            v49 = __ldaxr(p_shared_owners);
          while (__stlxr(v49 - 1, p_shared_owners));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v46);
          }
          v50 = *(_QWORD *)object;
          v51 = _os_log_pack_fill();
          v52 = a1[4];
          *(_DWORD *)v51 = 134217984;
          *(_QWORD *)(v51 + 4) = v52;
          v53 = operator new();
          v54 = *(unsigned __int8 *)(v15 + 39);
          v55 = v193;
          if ((v54 & 0x80u) != 0)
          {
            v55 = *(_QWORD *)(v15 + 16);
            v54 = *(_QWORD *)(v15 + 24);
          }
          *(_QWORD *)v53 = v50;
          *(_OWORD *)(v53 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v53 + 24) = v213;
          v213 = 0uLL;
          *(_QWORD *)(v53 + 40) = v55;
          *(_QWORD *)(v53 + 48) = v54;
          *(_BYTE *)(v53 + 56) = 16;
          category = 0;
          v210 = v53;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), &v210);
          v56 = v210;
          v210 = 0;
          if (v56)
          {
            v57 = *(std::__shared_weak_count **)(v56 + 32);
            if (v57)
            {
              v58 = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v60 = *(std::__shared_weak_count **)(v56 + 16);
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            MEMORY[0x212BC6398](v56, 0x10F0C40B62ED6C6);
            v63 = category;
            category = 0;
            if (v63)
            {
              v64 = (std::__shared_weak_count *)*((_QWORD *)v63 + 4);
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              v67 = (std::__shared_weak_count *)*((_QWORD *)v63 + 2);
              if (v67)
              {
                v68 = (unint64_t *)&v67->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
            }
          }
          v70 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
          v71 = v196;
          if (*((_QWORD *)&v213 + 1))
          {
            v72 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          v74 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v75 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
        }
        else
        {
          os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
          v77 = a1[4];
          *(_DWORD *)object = 134217984;
          *(_QWORD *)&object[4] = v77;
          v78 = (void *)_os_log_send_and_compose_impl();
          v71 = v196;
          if (v78)
            free(v78);
        }
        if (v71)
        {
          sub_20E8C003C((uint64_t)&v198, "Channels per pixel supported is 1, configured value %lu", a1[4]);
          sub_20E863570((uint64_t)&v198);
        }
        sub_20E863570((uint64_t)&v198);
        v79 = v206;
        if (!v206)
          return 0;
        v80 = (unint64_t *)&v206->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
LABEL_285:
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
        return 0;
      }
    }
    memmove(v36, v34, v35);
    goto LABEL_56;
  }
  if (a1[3] != 2)
  {
    sub_20FDAC86C(&v207);
    if (**(int **)(v207 + 56) > 4)
      return 0;
    v19 = *(unsigned __int8 *)(v207 + 72);
    v20 = sub_20E8C31DC(v207, "OSLogSurrogateAppender", 1, 0);
    v21 = v20;
    if (!v19 && v20 == 0)
      return 0;
    v197 = v19;
    v198 = &v207;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v200 = std::chrono::system_clock::now().__d_.__rep_;
    v201 = 4;
    v202 = "unknown file";
    v203 = 40;
    v205 = 0;
    v206 = 0;
    v204 = "unknown function";
    v23 = v207;
    v24 = (const char *)(v207 + 16);
    v194 = v207 + 16;
    if (*(char *)(v207 + 39) < 0)
    {
      v24 = *(const char **)(v207 + 16);
      v25 = *(_QWORD *)(v207 + 24);
    }
    else
    {
      v25 = *(unsigned __int8 *)(v207 + 39);
    }
    v82 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v213 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A50F >= 0)
      v83 = (const char *)&xmmword_254A4A4F8;
    else
      v83 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v84 = byte_254A4A50F;
    else
      v84 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    *(_QWORD *)object = os_log_create(v83, v24);
    v85 = &object[8];
    if (v84 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v84 >= 0x17)
    {
      v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v84 | 7) != 0x17)
        v86 = v84 | 7;
      v87 = v86 + 1;
      v85 = operator new(v86 + 1);
      *(_QWORD *)&object[16] = v84;
      *(_QWORD *)&v213 = v87 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v85;
    }
    else
    {
      BYTE7(v213) = v84;
      if (!v84)
      {
LABEL_138:
        v85[v84] = 0;
        BYTE8(v213) = 1;
        v88 = &__p;
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v25 >= 0x17)
        {
          v89 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v89 = v25 | 7;
          v90 = v89 + 1;
          v88 = operator new(v89 + 1);
          v215 = v25;
          v216 = v90 | 0x8000000000000000;
          __p = v88;
        }
        else
        {
          HIBYTE(v216) = v25;
          if (!v25)
            goto LABEL_146;
        }
        memmove(v88, v24, v25);
LABEL_146:
        *((_BYTE *)v88 + v25) = 0;
        v217 = 1;
        v91 = *(NSObject **)object;
        if (SHIBYTE(v216) < 0)
          operator delete(__p);
        if (BYTE8(v213) && SBYTE7(v213) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v21 && *(_QWORD *)(v21 + 24))
        {
          v92 = _os_log_pack_size();
          v93 = (std::__shared_weak_count_vtbl *)operator new(v92, (std::align_val_t)8uLL);
          v94 = (std::__shared_weak_count *)operator new();
          v95 = v94;
          v94->__shared_owners_ = 0;
          v96 = (unint64_t *)&v94->__shared_owners_;
          v94->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v94->__shared_weak_owners_ = 0;
          v94[1].__vftable = v93;
          *(_QWORD *)object = v93;
          *(_QWORD *)&object[8] = v93;
          *(_QWORD *)&object[16] = v94;
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
          v213 = 0uLL;
          __p = 0;
          do
            v98 = __ldaxr(v96);
          while (__stlxr(v98 - 1, v96));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v95);
          }
          v99 = *(_QWORD *)object;
          v100 = _os_log_pack_fill();
          v101 = a1[3];
          *(_DWORD *)v100 = 134217984;
          *(_QWORD *)(v100 + 4) = v101;
          v102 = operator new();
          v103 = *(unsigned __int8 *)(v23 + 39);
          v104 = v194;
          if ((v103 & 0x80u) != 0)
          {
            v104 = *(_QWORD *)(v23 + 16);
            v103 = *(_QWORD *)(v23 + 24);
          }
          *(_QWORD *)v102 = v99;
          *(_OWORD *)(v102 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v102 + 24) = v213;
          v213 = 0uLL;
          *(_QWORD *)(v102 + 40) = v104;
          *(_QWORD *)(v102 + 48) = v103;
          *(_BYTE *)(v102 + 56) = 16;
          category = 0;
          v210 = v102;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), &v210);
          v105 = v210;
          v210 = 0;
          if (v105)
          {
            v106 = *(std::__shared_weak_count **)(v105 + 32);
            if (v106)
            {
              v107 = (unint64_t *)&v106->__shared_owners_;
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            v109 = *(std::__shared_weak_count **)(v105 + 16);
            if (v109)
            {
              v110 = (unint64_t *)&v109->__shared_owners_;
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 - 1, v110));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                std::__shared_weak_count::__release_weak(v109);
              }
            }
            MEMORY[0x212BC6398](v105, 0x10F0C40B62ED6C6);
            v112 = category;
            category = 0;
            if (v112)
            {
              v113 = (std::__shared_weak_count *)*((_QWORD *)v112 + 4);
              if (v113)
              {
                v114 = (unint64_t *)&v113->__shared_owners_;
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              v116 = (std::__shared_weak_count *)*((_QWORD *)v112 + 2);
              if (v116)
              {
                v117 = (unint64_t *)&v116->__shared_owners_;
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              MEMORY[0x212BC6398](v112, 0x10F0C40B62ED6C6);
            }
          }
          v119 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
          v120 = v197;
          if (*((_QWORD *)&v213 + 1))
          {
            v121 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          v123 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v124 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
        }
        else
        {
          os_log_type_enabled(v91, OS_LOG_TYPE_ERROR);
          v126 = a1[3];
          *(_DWORD *)object = 134217984;
          *(_QWORD *)&object[4] = v126;
          v127 = (void *)_os_log_send_and_compose_impl();
          v120 = v197;
          if (v127)
            free(v127);
        }
        if (v120)
        {
          sub_20E8C003C((uint64_t)&v198, "Number of scales per octave supported is 2, configured value %lu", a1[3]);
          sub_20E863570((uint64_t)&v198);
        }
        sub_20E863570((uint64_t)&v198);
        v79 = v206;
        if (!v206)
          return 0;
        v128 = (unint64_t *)&v206->__shared_owners_;
        do
          v81 = __ldaxr(v128);
        while (__stlxr(v81 - 1, v128));
        goto LABEL_285;
      }
    }
    memmove(v85, v83, v84);
    goto LABEL_138;
  }
  v2 = *a1;
  if ((unint64_t)*a1 < 0xA0 || (v3 = a1[1], v3 <= 0x9F))
  {
    sub_20FDAC86C(&v207);
    if (**(int **)(v207 + 56) > 4)
      return 0;
    v4 = *(unsigned __int8 *)(v207 + 72);
    v5 = sub_20E8C31DC(v207, "OSLogSurrogateAppender", 1, 0);
    v6 = v5;
    if (!v4 && v5 == 0)
      return 0;
    v195 = v4;
    v198 = &v207;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v200 = std::chrono::system_clock::now().__d_.__rep_;
    v201 = 4;
    v202 = "unknown file";
    v203 = 46;
    v205 = 0;
    v206 = 0;
    v204 = "unknown function";
    v8 = v207;
    v9 = (const char *)(v207 + 16);
    v192 = v207 + 16;
    if (*(char *)(v207 + 39) < 0)
    {
      v9 = *(const char **)(v207 + 16);
      v10 = *(_QWORD *)(v207 + 24);
    }
    else
    {
      v10 = *(unsigned __int8 *)(v207 + 39);
    }
    v129 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v213 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A50F >= 0)
      v130 = (const char *)&xmmword_254A4A4F8;
    else
      v130 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v131 = byte_254A4A50F;
    else
      v131 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    *(_QWORD *)object = os_log_create(v130, v9);
    v132 = &object[8];
    if (v131 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v131 >= 0x17)
    {
      v133 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v131 | 7) != 0x17)
        v133 = v131 | 7;
      v134 = v133 + 1;
      v132 = operator new(v133 + 1);
      *(_QWORD *)&object[16] = v131;
      *(_QWORD *)&v213 = v134 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v132;
    }
    else
    {
      BYTE7(v213) = v131;
      if (!v131)
      {
LABEL_220:
        v132[v131] = 0;
        BYTE8(v213) = 1;
        v135 = &__p;
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v10 >= 0x17)
        {
          v136 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v136 = v10 | 7;
          v137 = v136 + 1;
          v135 = operator new(v136 + 1);
          v215 = v10;
          v216 = v137 | 0x8000000000000000;
          __p = v135;
        }
        else
        {
          HIBYTE(v216) = v10;
          if (!v10)
            goto LABEL_228;
        }
        memmove(v135, v9, v10);
LABEL_228:
        *((_BYTE *)v135 + v10) = 0;
        v217 = 1;
        v138 = *(NSObject **)object;
        if (SHIBYTE(v216) < 0)
          operator delete(__p);
        if (BYTE8(v213) && SBYTE7(v213) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v6 && *(_QWORD *)(v6 + 24))
        {
          v139 = _os_log_pack_size();
          v140 = (std::__shared_weak_count_vtbl *)operator new(v139, (std::align_val_t)8uLL);
          v141 = (std::__shared_weak_count *)operator new();
          v142 = v141;
          v141->__shared_owners_ = 0;
          v143 = (unint64_t *)&v141->__shared_owners_;
          v141->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v141->__shared_weak_owners_ = 0;
          v141[1].__vftable = v140;
          *(_QWORD *)object = v140;
          *(_QWORD *)&object[8] = v140;
          *(_QWORD *)&object[16] = v141;
          do
            v144 = __ldxr(v143);
          while (__stxr(v144 + 1, v143));
          v213 = 0uLL;
          __p = 0;
          do
            v145 = __ldaxr(v143);
          while (__stlxr(v145 - 1, v143));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v142);
          }
          v146 = *(_QWORD *)object;
          v147 = _os_log_pack_fill();
          v148 = *a1;
          v149 = a1[1];
          *(_DWORD *)v147 = 134218240;
          *(_QWORD *)(v147 + 4) = v148;
          *(_WORD *)(v147 + 12) = 2048;
          *(_QWORD *)(v147 + 14) = v149;
          v150 = operator new();
          v151 = *(unsigned __int8 *)(v8 + 39);
          v152 = v192;
          if ((v151 & 0x80u) != 0)
          {
            v152 = *(_QWORD *)(v8 + 16);
            v151 = *(_QWORD *)(v8 + 24);
          }
          *(_QWORD *)v150 = v146;
          *(_OWORD *)(v150 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v150 + 24) = v213;
          v213 = 0uLL;
          *(_QWORD *)(v150 + 40) = v152;
          *(_QWORD *)(v150 + 48) = v151;
          *(_BYTE *)(v150 + 56) = 16;
          category = 0;
          v210 = v150;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v210);
          v153 = v210;
          v210 = 0;
          if (v153)
          {
            v154 = *(std::__shared_weak_count **)(v153 + 32);
            if (v154)
            {
              v155 = (unint64_t *)&v154->__shared_owners_;
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }
            v157 = *(std::__shared_weak_count **)(v153 + 16);
            if (v157)
            {
              v158 = (unint64_t *)&v157->__shared_owners_;
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 - 1, v158));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
            MEMORY[0x212BC6398](v153, 0x10F0C40B62ED6C6);
            v160 = category;
            category = 0;
            if (v160)
            {
              v161 = (std::__shared_weak_count *)*((_QWORD *)v160 + 4);
              if (v161)
              {
                v162 = (unint64_t *)&v161->__shared_owners_;
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 - 1, v162));
                if (!v163)
                {
                  ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                  std::__shared_weak_count::__release_weak(v161);
                }
              }
              v164 = (std::__shared_weak_count *)*((_QWORD *)v160 + 2);
              if (v164)
              {
                v165 = (unint64_t *)&v164->__shared_owners_;
                do
                  v166 = __ldaxr(v165);
                while (__stlxr(v166 - 1, v165));
                if (!v166)
                {
                  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                  std::__shared_weak_count::__release_weak(v164);
                }
              }
              MEMORY[0x212BC6398](v160, 0x10F0C40B62ED6C6);
            }
          }
          v167 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
          v168 = v195;
          if (*((_QWORD *)&v213 + 1))
          {
            v169 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
          v171 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v172 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v173 = __ldaxr(v172);
            while (__stlxr(v173 - 1, v172));
            if (!v173)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
          }
        }
        else
        {
          os_log_type_enabled(v138, OS_LOG_TYPE_ERROR);
          v174 = *a1;
          v175 = a1[1];
          *(_DWORD *)object = 134218240;
          *(_QWORD *)&object[4] = v174;
          *(_WORD *)&object[12] = 2048;
          *(_QWORD *)&object[14] = v175;
          v176 = (void *)_os_log_send_and_compose_impl();
          v168 = v195;
          if (v176)
            free(v176);
        }
        if (v168)
        {
          sub_20E8C003C((uint64_t)&v198, "Min dimensions supported is 160x160, configured dimension %lux%lu", *a1, a1[1]);
          sub_20E863570((uint64_t)&v198);
        }
        sub_20E863570((uint64_t)&v198);
        v79 = v206;
        if (!v206)
          return 0;
        v177 = (unint64_t *)&v206->__shared_owners_;
        do
          v81 = __ldaxr(v177);
        while (__stlxr(v81 - 1, v177));
        goto LABEL_285;
      }
    }
    memmove(v132, v130, v131);
    goto LABEL_220;
  }
  if ((v2 < 0x141 || v3 <= 0x140) && a1[2] != 4)
  {
    sub_20FDAC86C(&v207);
    if (**(int **)(v207 + 56) > 4)
      return 0;
    v178 = *(unsigned __int8 *)(v207 + 72);
    v179 = sub_20E8C31DC(v207, "OSLogSurrogateAppender", 1, 0);
    v180 = v179 ? v179 + 16 : 0;
    if (!v178 && !v179)
      return 0;
    v198 = &v207;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v200 = std::chrono::system_clock::now().__d_.__rep_;
    v201 = 4;
    v202 = "unknown file";
    v203 = 55;
    v205 = 0;
    v206 = 0;
    v204 = "unknown function";
    v181 = (uint64_t *)(v207 + 16);
    if (*(char *)(v207 + 39) < 0)
    {
      v183 = *(char **)(v207 + 16);
      v182 = *(_QWORD *)(v207 + 24);
    }
    else
    {
      v182 = *(unsigned __int8 *)(v207 + 39);
      v183 = (char *)(v207 + 16);
    }
    category = v183;
    v209 = v182;
    v184 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v184 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v213 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v185 = byte_254A4A50F;
    if (byte_254A4A50F >= 0)
    {
      v186 = (const char *)&xmmword_254A4A4F8;
    }
    else
    {
      v185 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      v186 = (const char *)xmmword_254A4A4F8;
    }
    v210 = (uint64_t)v186;
    v211 = v185;
    *(_QWORD *)object = os_log_create(v186, category);
    sub_20E86E5A8(&object[8], (uint64_t)&v210);
    sub_20E86E5A8(&__p, (uint64_t)&category);
    v187 = *(NSObject **)object;
    sub_20E86E44C((uint64_t)object);
    sub_20FDACBD8(v180, v181, v187, OS_LOG_TYPE_ERROR, a1, a1 + 1, a1 + 2);
    if (v178)
    {
      sub_20E8C003C((uint64_t)&v198, "num_octaves for dimension <= 320 should be 4, configured dimension %lux%lu num_octaves %lu", *a1, a1[1], a1[2]);
      sub_20E863570((uint64_t)&v198);
    }
LABEL_311:
    sub_20E863714((uint64_t)&v198);
    return 0;
  }
  result = 1;
  if (v2 >= 0x141 && v3 >= 0x141 && a1[2] != 5)
  {
    sub_20FDAC86C(&v207);
    if (**(int **)(v207 + 56) > 4)
      return 0;
    v27 = *(unsigned __int8 *)(v207 + 72);
    v28 = sub_20E8C31DC(v207, "OSLogSurrogateAppender", 1, 0);
    v29 = v28 ? v28 + 16 : 0;
    if (!v27 && !v28)
      return 0;
    v198 = &v207;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v200 = std::chrono::system_clock::now().__d_.__rep_;
    v201 = 4;
    v202 = "unknown file";
    v203 = 64;
    v205 = 0;
    v206 = 0;
    v204 = "unknown function";
    v30 = (uint64_t *)(v207 + 16);
    if (*(char *)(v207 + 39) < 0)
    {
      v32 = *(char **)(v207 + 16);
      v31 = *(_QWORD *)(v207 + 24);
    }
    else
    {
      v31 = *(unsigned __int8 *)(v207 + 39);
      v32 = (char *)(v207 + 16);
    }
    category = v32;
    v209 = v31;
    v188 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v188 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v213 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v189 = byte_254A4A50F;
    if (byte_254A4A50F >= 0)
    {
      v190 = (const char *)&xmmword_254A4A4F8;
    }
    else
    {
      v189 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      v190 = (const char *)xmmword_254A4A4F8;
    }
    v210 = (uint64_t)v190;
    v211 = v189;
    *(_QWORD *)object = os_log_create(v190, category);
    sub_20E86E5A8(&object[8], (uint64_t)&v210);
    sub_20E86E5A8(&__p, (uint64_t)&category);
    v191 = *(NSObject **)object;
    sub_20E86E44C((uint64_t)object);
    sub_20FDAD060(v29, v30, v191, OS_LOG_TYPE_ERROR, a1, a1 + 1, a1 + 2);
    if (v27)
    {
      sub_20E8C003C((uint64_t)&v198, "num_octaves for dimension > 320 should be 5, configured dimension %lux%lu num_octaves %lu", *a1, a1[1], a1[2]);
      sub_20E863570((uint64_t)&v198);
    }
    goto LABEL_311;
  }
  return result;
}

void sub_20FDAC550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FDAC5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDAC5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a36 && a35 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FDAC85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20FDAC86C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C540);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C540))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C538);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C540);
  }
  *a1 = qword_254A6C538;
}

void sub_20FDAC908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C540);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C540);
  _Unwind_Resume(a1);
}

BOOL sub_20FDAC960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, __int16 a8, unsigned __int16 a9, char *a10)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v20;
  int v21;
  BOOL v23;
  _BOOL8 result;
  int v27;
  int v28;
  int v29;
  char v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;

  v10 = *(__int16 *)(a2 + 2 * a7);
  if (v10 >= 0)
    v11 = *(__int16 *)(a2 + 2 * a7);
  else
    v11 = -v10;
  if (v11 <= a8)
    return 0;
  v12 = a7;
  *a10 = 0;
  v13 = a7 - 1;
  v14 = *(__int16 *)(a1 + 2 * v13);
  v15 = *(__int16 *)(a1 + 2 * a7);
  v16 = a7 + 1;
  v17 = *(__int16 *)(a1 + 2 * v16);
  if (v14 < v10 && v15 < v10 && v17 < v10)
  {
    v20 = *(__int16 *)(a2 + 2 * v13);
    v21 = *(__int16 *)(a2 + 2 * v16);
    if (v20 < v10 && v21 < v10)
    {
      v27 = *(__int16 *)(a3 + 2 * v13);
      if (v27 < v10)
      {
        v28 = *(__int16 *)(a3 + 2 * v12);
        if (v28 < v10)
        {
          v29 = *(__int16 *)(a3 + 2 * v16);
          if (v29 < v10
            && *(__int16 *)(a4 + 2 * v13) < v10
            && *(__int16 *)(a4 + 2 * v12) < v10
            && *(__int16 *)(a4 + 2 * v16) < v10
            && *(__int16 *)(a5 + 2 * v13) < v10
            && *(__int16 *)(a5 + 2 * v12) < v10
            && *(__int16 *)(a5 + 2 * v16) < v10
            && *(__int16 *)(a6 + 2 * v13) < v10
            && *(__int16 *)(a6 + 2 * v12) < v10
            && *(__int16 *)(a6 + 2 * v16) < v10)
          {
            v30 = 0;
            goto LABEL_56;
          }
        }
      }
    }
  }
  v23 = v14 <= v10 || v15 <= v10;
  if (v23 || v17 <= v10)
    return 0;
  v20 = *(__int16 *)(a2 + 2 * v13);
  v21 = *(__int16 *)(a2 + 2 * v16);
  result = 0;
  if (v20 <= v10 || v21 <= v10)
    return result;
  v27 = *(__int16 *)(a3 + 2 * v13);
  if (v27 <= v10)
    return result;
  v28 = *(__int16 *)(a3 + 2 * v12);
  if (v28 <= v10)
    return result;
  v29 = *(__int16 *)(a3 + 2 * v16);
  if (v29 <= v10)
    return result;
  result = 0;
  if (*(__int16 *)(a4 + 2 * v13) <= v10)
    return result;
  if (*(__int16 *)(a4 + 2 * v12) <= v10)
    return result;
  if (*(__int16 *)(a4 + 2 * v16) <= v10)
    return result;
  result = 0;
  if (*(__int16 *)(a5 + 2 * v13) <= v10)
    return result;
  if (*(__int16 *)(a5 + 2 * v12) <= v10)
    return result;
  if (*(__int16 *)(a5 + 2 * v16) <= v10)
    return result;
  result = 0;
  if (*(__int16 *)(a6 + 2 * v13) <= v10 || *(__int16 *)(a6 + 2 * v12) <= v10 || *(__int16 *)(a6 + 2 * v16) <= v10)
    return result;
  v30 = 1;
LABEL_56:
  *a10 = v30;
  v31 = 2 * v10;
  v32 = v21 - v31 + v20;
  v33 = v15 - v31 + v28;
  v34 = v14 + v29 - (v17 + v27);
  v35 = v32 >> 4;
  v36 = v33 >> 4;
  if (v32 >> 4 <= -2047)
    v35 = -2047;
  if (v32 >= 0x8000)
    v35 = 2047;
  if (v36 <= -2047)
    v36 = -2047;
  if (v33 >= 0x8000)
    v37 = 2047;
  else
    v37 = v36;
  if (v34 >> 4 <= -2047)
    v38 = -2047;
  else
    v38 = v34 >> 4;
  if (v34 >= 0x8000)
    v39 = 2047;
  else
    v39 = v38;
  return fabs((double)(uint64_t)(v35 * (uint64_t)v37 - ((unint64_t)(v39 * (uint64_t)v39 + 8) >> 4))) * (double)a9 > (double)((v35 + (uint64_t)v37) * (v35 + (uint64_t)v37));
}

void sub_20FDACBD8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  size_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[24];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v13 = _os_log_pack_size();
    v14 = (std::__shared_weak_count_vtbl *)operator new(v13, (std::align_val_t)8uLL);
    v15 = (std::__shared_weak_count *)operator new();
    v16 = v15;
    v15->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v15->__shared_weak_owners_ = 0;
    v15[1].__vftable = v14;
    *(_QWORD *)v46 = v14;
    *(_QWORD *)&v46[8] = v14;
    *(_QWORD *)&v46[16] = v15;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v47 = 0uLL;
    v48 = 0;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
    }
    v20 = *(_QWORD *)v46;
    v21 = _os_log_pack_fill();
    v22 = *a5;
    v23 = *a6;
    v24 = *a7;
    *(_DWORD *)v21 = 134218496;
    *(_QWORD *)(v21 + 4) = v22;
    *(_WORD *)(v21 + 12) = 2048;
    *(_QWORD *)(v21 + 14) = v23;
    *(_WORD *)(v21 + 22) = 2048;
    *(_QWORD *)(v21 + 24) = v24;
    v25 = operator new();
    v26 = *((unsigned __int8 *)a2 + 23);
    if ((v26 & 0x80u) == 0)
      v27 = a2;
    else
      v27 = (uint64_t *)*a2;
    if ((v26 & 0x80u) != 0)
      v26 = a2[1];
    *(_QWORD *)v25 = v20;
    *(_OWORD *)(v25 + 8) = *(_OWORD *)&v46[8];
    *(_OWORD *)&v46[8] = 0uLL;
    *(_OWORD *)(v25 + 24) = v47;
    v47 = 0uLL;
    *(_QWORD *)(v25 + 40) = v27;
    *(_QWORD *)(v25 + 48) = v26;
    *(_BYTE *)(v25 + 56) = type;
    v45 = v25;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v45);
    v28 = v45;
    v45 = 0;
    if (v28)
    {
      v29 = *(std::__shared_weak_count **)(v28 + 32);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = *(std::__shared_weak_count **)(v28 + 16);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      MEMORY[0x212BC6398](v28, 0x10F0C40B62ED6C6);
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = *(std::__shared_weak_count **)&v46[16];
    if (*(_QWORD *)&v46[16])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v46[16] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v41 = *a5;
    v42 = *a6;
    v43 = *a7;
    *(_DWORD *)v46 = 134218496;
    *(_QWORD *)&v46[4] = v41;
    *(_WORD *)&v46[12] = 2048;
    *(_QWORD *)&v46[14] = v42;
    *(_WORD *)&v46[22] = 2048;
    *(_QWORD *)&v47 = v43;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }
}

void sub_20FDAD004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FDAD028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDAD03C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FDAD060(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  size_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[24];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v13 = _os_log_pack_size();
    v14 = (std::__shared_weak_count_vtbl *)operator new(v13, (std::align_val_t)8uLL);
    v15 = (std::__shared_weak_count *)operator new();
    v16 = v15;
    v15->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v15->__shared_weak_owners_ = 0;
    v15[1].__vftable = v14;
    *(_QWORD *)v46 = v14;
    *(_QWORD *)&v46[8] = v14;
    *(_QWORD *)&v46[16] = v15;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v47 = 0uLL;
    v48 = 0;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
    }
    v20 = *(_QWORD *)v46;
    v21 = _os_log_pack_fill();
    v22 = *a5;
    v23 = *a6;
    v24 = *a7;
    *(_DWORD *)v21 = 134218496;
    *(_QWORD *)(v21 + 4) = v22;
    *(_WORD *)(v21 + 12) = 2048;
    *(_QWORD *)(v21 + 14) = v23;
    *(_WORD *)(v21 + 22) = 2048;
    *(_QWORD *)(v21 + 24) = v24;
    v25 = operator new();
    v26 = *((unsigned __int8 *)a2 + 23);
    if ((v26 & 0x80u) == 0)
      v27 = a2;
    else
      v27 = (uint64_t *)*a2;
    if ((v26 & 0x80u) != 0)
      v26 = a2[1];
    *(_QWORD *)v25 = v20;
    *(_OWORD *)(v25 + 8) = *(_OWORD *)&v46[8];
    *(_OWORD *)&v46[8] = 0uLL;
    *(_OWORD *)(v25 + 24) = v47;
    v47 = 0uLL;
    *(_QWORD *)(v25 + 40) = v27;
    *(_QWORD *)(v25 + 48) = v26;
    *(_BYTE *)(v25 + 56) = type;
    v45 = v25;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v45);
    v28 = v45;
    v45 = 0;
    if (v28)
    {
      v29 = *(std::__shared_weak_count **)(v28 + 32);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = *(std::__shared_weak_count **)(v28 + 16);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      MEMORY[0x212BC6398](v28, 0x10F0C40B62ED6C6);
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = *(std::__shared_weak_count **)&v46[16];
    if (*(_QWORD *)&v46[16])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v46[16] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v41 = *a5;
    v42 = *a6;
    v43 = *a7;
    *(_DWORD *)v46 = 134218496;
    *(_QWORD *)&v46[4] = v41;
    *(_WORD *)&v46[12] = 2048;
    *(_QWORD *)&v46[14] = v42;
    *(_WORD *)&v46[22] = 2048;
    *(_QWORD *)&v47 = v43;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }
}

void sub_20FDAD48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20FDAD4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDAD4C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FDAD4E8(uint64_t a1, uint64_t a2, uint64_t a3, int64x2_t a4, int64x2_t a5)
{
  double v6;
  double v7;
  float64x2_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  float64x2_t v28;
  float64x2_t v34;
  double v35;
  char v36;
  int v37;
  int v38;
  uint64_t *v39;
  unsigned __int8 v40;
  char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  __uint64_t v54[2];
  void *v55[3];
  char v56;
  void *v57;
  char v58;
  char v59;
  void *v60;
  char v61;
  char v62;
  void *v63;
  char v64;
  void *__p;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 80))
  {
    a5.i64[0] = *(_QWORD *)(a2 + 24);
    a4.i64[0] = *(_QWORD *)(a2 + 56);
    if (*(double *)a5.i64 != 0.0)
    {
      v6 = 0.0 - *(double *)a5.i64;
      if (*(double *)a5.i64 >= 0.0)
        v6 = *(double *)(a2 + 24);
      if (v6 > 0.0000001)
        goto LABEL_10;
    }
    if (*(double *)a4.i64 != 0.0)
    {
      v7 = 0.0 - *(double *)a4.i64;
      if (*(double *)a4.i64 >= 0.0)
        v7 = *(double *)(a2 + 56);
      if (v7 > 0.0000001)
      {
LABEL_10:
        v8 = (float64x2_t)vzip1q_s64(a5, a4);
        v9 = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
        v10 = *(unsigned int *)(a2 + 244);
        if ((_DWORD)v10)
        {
          v11 = *(_DWORD *)(a2 + 324);
          v12 = *(_QWORD *)(a2 + 304);
          v13 = *(_DWORD *)(a2 + 320) * (*(_DWORD *)(a2 + 240) - 1);
          if ((_DWORD)v10 == 1)
          {
            v14 = 0;
            v15 = 0;
            v16 = 0;
          }
          else
          {
            v15 = 0;
            v14 = 0;
            v17 = __CFADD__(v13, v10 - 1);
            if (v11 != 1 || v17)
            {
              v16 = 0;
            }
            else
            {
              v18 = (unint64_t)(v10 - 1) >> 32;
              v16 = 0;
              if (!v18)
              {
                v19 = 0;
                v20 = 0;
                v21 = 0;
                v22 = 0;
                v14 = v10 & 0xFFFFFFFE;
                do
                {
                  LODWORD(v18) = v18
                               + *(unsigned __int8 *)(a3 + *(unsigned __int8 *)(v12 + (v19 & 0xFFFFFFFE)));
                  v20 += *(unsigned __int8 *)(a3 + *(unsigned __int8 *)(v12 + (v19 + 1)));
                  v21 += *(unsigned __int8 *)(a3 + *(unsigned __int8 *)(v12 + (v13 + v19)));
                  v22 += *(unsigned __int8 *)(a3 + *(unsigned __int8 *)(v12 + (v13 + v19 + 1)));
                  v19 += 2;
                }
                while (v14 != v19);
                v16 = v22 + v21;
                v15 = v20 + v18;
                if (v14 == v10)
                  goto LABEL_27;
              }
            }
          }
          v23 = v10 - v14;
          v24 = v11 * v14;
          do
          {
            v15 += *(unsigned __int8 *)(a3 + *(unsigned __int8 *)(v12 + v24));
            v16 += *(unsigned __int8 *)(a3 + *(unsigned __int8 *)(v12 + v13 + v24));
            v24 += v11;
            --v23;
          }
          while (v23);
        }
        else
        {
          v16 = 0;
          v15 = 0;
        }
LABEL_27:
        v25 = (float)(*(float *)a1 * (float)v10);
        *(_QWORD *)&v8.f64[1] = v9;
        _Q1 = (int8x16_t)vmulq_n_f64(v8, 1.0 / sqrt(vmulq_f64(v8, v8).f64[0] + *(double *)a4.i64 * *(double *)a4.i64));
        _Q2 = *(float64x2_t *)(a1 + 64);
        v28 = (float64x2_t)vextq_s8(_Q1, _Q1, 8uLL);
        _Q1.i64[0] = _Q1.i64[1];
        __asm { FMLA            D0, D1, V2.D[1]; __x }
        v34 = vmulq_f64(_Q2, v28);
        v35 = acos(_D0) * dbl_2103C0F10[vsubq_f64(v34, (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1)).f64[0] > 0.0];
        if (v15 >= v25 == v16 >= v25)
          goto LABEL_34;
        if (v15 >= v25 && *(double *)(a1 + 48) - v35 < *(double *)(a1 + 8))
        {
          v36 = 0;
          v37 = 1;
          goto LABEL_35;
        }
        if (v16 < v25 || v35 - *(double *)(a1 + 56) >= *(double *)(a1 + 8))
        {
LABEL_34:
          v37 = 0;
          v36 = 1;
        }
        else
        {
          v36 = 0;
          v37 = 2;
        }
LABEL_35:
        if (*(_BYTE *)(a1 + 40))
        {
          v38 = *(unsigned __int8 *)(a1 + 24);
          if (v38 == 1)
          {
            if (v37 == 2)
            {
              *(_BYTE *)(a1 + 40) = 0;
              v53 = sub_210219C18();
              sub_20FDAE248((uint64_t)v53, 0xEEEEB0B5B2B2EEEELL);
            }
            else if (v37 == 1)
            {
              if (v35 > *(double *)(a1 + 32))
              {
                *(_BYTE *)(a1 + 24) = 1;
                *(double *)(a1 + 32) = v35;
                *(_BYTE *)(a1 + 40) = 1;
                v51 = sub_210219C18();
                sub_20FDADF94((uint64_t)v51, 0xEEEEB0B5B2B2EEEELL);
              }
            }
            else if (v35 > *(double *)(a1 + 32))
            {
              *(_BYTE *)(a1 + 40) = 0;
              v49 = sub_210219C18();
              sub_20FDADCE0((uint64_t)v49, 0xEEEEB0B5B2B2EEEELL);
            }
          }
          else if (v38 == 2)
          {
            if (v37 == 2)
            {
              if (v35 < *(double *)(a1 + 32))
              {
                *(_BYTE *)(a1 + 24) = 2;
                *(double *)(a1 + 32) = v35;
                *(_BYTE *)(a1 + 40) = 1;
                v52 = sub_210219C18();
                sub_20FDAEA64((uint64_t)v52, 0xEEEEB0B5B2B2EEEELL);
              }
            }
            else if (v37 == 1)
            {
              *(_BYTE *)(a1 + 40) = 0;
              v50 = sub_210219C18();
              sub_20FDAE7B0((uint64_t)v50, 0xEEEEB0B5B2B2EEEELL);
            }
            else if (v35 < *(double *)(a1 + 32))
            {
              *(_BYTE *)(a1 + 40) = 0;
              v48 = sub_210219C18();
              sub_20FDAE4FC((uint64_t)v48, 0xEEEEB0B5B2B2EEEELL);
            }
          }
          else if (!*(_BYTE *)(a1 + 24))
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SemanticsProcessing/src/SemanticsExtrapolation.cpp", 72, (uint64_t)"", 0, (uint64_t)"ExtrapolateDirection::None found in opt_extrapolated_frame_.", 60, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          return;
        }
        if ((v36 & 1) != 0)
          return;
        *(_BYTE *)(a1 + 24) = v37;
        *(double *)(a1 + 32) = v35;
        *(_BYTE *)(a1 + 40) = 1;
        v39 = sub_210219C18();
        v40 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
          goto LABEL_75;
        LODWORD(v55[0]) = 67109120;
        HIDWORD(v55[0]) = v37;
        v42 = (char *)_os_log_send_and_compose_impl();
        v43 = strlen(v42);
        v54[0] = 0;
        pthread_threadid_np(0, v54);
        v44 = v54[0];
        timespec_get((timespec *)v54, 1);
        sub_210219E20(v55, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v39 + 1), (__int128 *)(v39 + 5), "SemEx:New:%d", 0xCuLL, v42, v43, v44, v54);
        std::mutex::lock(&stru_254A5A410);
        v45 = qword_254A5A458;
        for (i = unk_254A5A460; v45 != i; v45 += 40)
        {
          v47 = *(_QWORD *)(v45 + 32);
          if (!v47)
            sub_20E86D37C();
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v47 + 48))(v47, v55);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v66 < 0)
        {
          operator delete(__p);
          if ((v64 & 0x80000000) == 0)
          {
LABEL_48:
            if (!v62)
            {
LABEL_68:
              if (v59 && v58 < 0)
                operator delete(v57);
              if (v56 < 0)
                operator delete(v55[1]);
              if (v42)
                free(v42);
LABEL_75:
              if (os_signpost_enabled((os_log_t)*v39))
              {
                LODWORD(v55[0]) = 67109120;
                HIDWORD(v55[0]) = v37;
                _os_signpost_emit_unreliably_with_name_impl();
              }
              return;
            }
LABEL_66:
            if (v61 < 0)
              operator delete(v60);
            goto LABEL_68;
          }
        }
        else if ((v64 & 0x80000000) == 0)
        {
          goto LABEL_48;
        }
        operator delete(v63);
        if (!v62)
          goto LABEL_68;
        goto LABEL_66;
      }
    }
  }
}

void sub_20FDADCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20FDADCE0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v8 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "SemEx:LeftCovered", 0x11uLL, v6, v7, v8, v24);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20FDADF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20FDADF94(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v8 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "SemEx:LeftUpdated", 0x11uLL, v6, v7, v8, v24);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20FDAE208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20FDAE248(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v8 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "SemEx:ResetLeftToRight", 0x16uLL, v6, v7, v8, v24);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20FDAE4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20FDAE4FC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v8 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "SemEx:RightCovered", 0x12uLL, v6, v7, v8, v24);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20FDAE770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20FDAE7B0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v8 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "SemEx:ResetRightToLeft", 0x16uLL, v6, v7, v8, v24);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20FDAEA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20FDAEA64(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v8 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "SemEx:RightUpdated", 0x12uLL, v6, v7, v8, v24);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20FDAECD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20FDAED18(uint64_t a1, float64x2_t *a2)
{
  double v3;
  double v4;
  int8x16_t v12;
  float64x2_t v14;
  float64x2_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  uint64_t *v25;
  unsigned __int8 v26;
  char *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  int8x16_t v34;
  void *v35[3];
  char v36;
  void *v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  void *v43;
  char v44;
  void *__p;
  char v46;
  __uint64_t v47[2];

  v3 = a2[4].f64[0];
  if (v3 != 0.0)
  {
    if (v3 < 0.0)
      v3 = 0.0 - v3;
    if (v3 > 0.0000001)
      goto LABEL_49;
  }
  v4 = a2[4].f64[1];
  if (v4 != 0.0)
  {
    if (v4 < 0.0)
      v4 = 0.0 - v4;
    if (v4 > 0.0000001)
    {
LABEL_49:
      _Q0 = a2[4];
      _D2 = a2[4].f64[1];
      __asm { FMLA            D1, D2, V0.D[1] }
      v12 = (int8x16_t)vmulq_n_f64(_Q0, 1.0 / sqrt(_D1));
      if (!*(_BYTE *)(a1 + 80))
      {
        *(int8x16_t *)(a1 + 64) = v12;
        *(_BYTE *)(a1 + 80) = 1;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        return;
      }
      _Q1 = *(float64x2_t *)(a1 + 64);
      v14 = (float64x2_t)vextq_s8(v12, v12, 8uLL);
      v34 = v12;
      _D3 = v12.i64[1];
      __asm { FMLA            D0, D3, V1.D[1]; __x }
      v17 = vmulq_f64(v14, _Q1);
      v18 = acos(_D0) * dbl_2103C0F10[vsubq_f64(v17, (float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1)).f64[0] > 0.0];
      v19 = *(double *)(a1 + 48);
      if (v18 > v19)
      {
        *(double *)(a1 + 48) = v18;
        v19 = v18;
      }
      v20 = *(double *)(a1 + 56);
      if (v18 < v20)
      {
        *(double *)(a1 + 56) = v18;
        v20 = v18;
      }
      *(int8x16_t *)(a1 + 64) = v34;
      v21 = v19 - v18;
      v22 = v20 - v18;
      *(double *)(a1 + 48) = v21;
      *(double *)(a1 + 56) = v22;
      if (*(_BYTE *)(a1 + 40))
      {
        v23 = *(double *)(a1 + 32) - v18;
        *(double *)(a1 + 32) = v23;
        v24 = *(unsigned __int8 *)(a1 + 24);
        if (v24 == 2)
        {
          if (v23 - v22 <= *(double *)(a1 + 8))
            return;
LABEL_22:
          *(_BYTE *)(a1 + 40) = 0;
          v25 = sub_210219C18();
          v26 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
            goto LABEL_42;
          LOWORD(v35[0]) = 0;
          v28 = (char *)_os_log_send_and_compose_impl();
          v29 = strlen(v28);
          v47[0] = 0;
          pthread_threadid_np(0, v47);
          v30 = v47[0];
          timespec_get((timespec *)v47, 1);
          sub_210219E20(v35, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v25 + 1), (__int128 *)(v25 + 5), "SemEx:ResetFromCoverage", 0x17uLL, v28, v29, v30, v47);
          std::mutex::lock(&stru_254A5A410);
          v31 = qword_254A5A458;
          for (i = unk_254A5A460; v31 != i; v31 += 40)
          {
            v33 = *(_QWORD *)(v31 + 32);
            if (!v33)
              sub_20E86D37C();
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v33 + 48))(v33, v35);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v46 < 0)
          {
            operator delete(__p);
            if ((v44 & 0x80000000) == 0)
            {
LABEL_29:
              if (!v42)
              {
LABEL_35:
                if (v39 && v38 < 0)
                  operator delete(v37);
                if (v36 < 0)
                  operator delete(v35[1]);
                if (v28)
                  free(v28);
LABEL_42:
                if (os_signpost_enabled((os_log_t)*v25))
                {
                  LOWORD(v35[0]) = 0;
                  _os_signpost_emit_unreliably_with_name_impl();
                }
                return;
              }
LABEL_33:
              if (v41 < 0)
                operator delete(v40);
              goto LABEL_35;
            }
          }
          else if ((v44 & 0x80000000) == 0)
          {
            goto LABEL_29;
          }
          operator delete(v43);
          if (!v42)
            goto LABEL_35;
          goto LABEL_33;
        }
        if (v24 == 1 && v21 - v23 > *(double *)(a1 + 8))
          goto LABEL_22;
      }
    }
  }
}

void sub_20FDAF0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FDAF12C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  __int128 v9;

  __p = operator new(0x28uLL);
  v9 = xmmword_2102DBA80;
  strcpy((char *)__p, "SemanticsExtrapolation parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EF4E784((float *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsExtrapolationConfig.min_pixel_percentage_on_edge_for_obj_presence", v4, "Min percetage of masked pixels on the left or right most columns to consider extrapolation.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsExtrapolationConfig.max_angle_to_coverage_boundary_to_consider_extrapolation_deg", v5, "Max frame to angular coverage edge to consider for extrapolation.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  return sub_20E8B2F9C((uint64_t *)&__p, "SemanticsExtrapolationConfig.min_angle_from_frame_to_extrapolate_deg", v6, "Min angle from extrapolation frame to considerred to be extrapolation region.");
}

void sub_20FDAF238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDAF27C(uint64_t a1, float32x2_t **a2, uint64_t a3, float a4)
{
  float32x2_t *v7;
  float64x2_t v22;
  float32x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t v27;
  float64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  float64x2_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a3;
  v7 = *a2;
  _Q1 = vcvtq_f64_f32(*(float32x2_t *)((char *)*a2 + 116));
  v30 = (int64x2_t)vcvtq_f64_f32(*(float32x2_t *)((char *)*a2 + 108));
  v31 = _Q1;
  v29 = (int64x2_t)vcvtq_f64_f32(*(float32x2_t *)((char *)v7 + 124));
  v28 = vcvtq_f64_f32(*(float32x2_t *)((char *)v7 + 140));
  v27 = vcvtq_f64_f32(*(float32x2_t *)((char *)v7 + 156));
  _Q3.f64[0] = _Q1.f64[0];
  _D4 = *(_OWORD *)&vcvtq_f64_f32(*(float32x2_t *)((char *)v7 + 148));
  _Q5 = (float64x2_t)vzip1q_s64(v30, v29);
  _Q0 = (float64x2_t)vzip2q_s64(v30, v29);
  *(_QWORD *)&_Q3.f64[1] = *(_OWORD *)&vcvtq_f64_f32(*(float32x2_t *)((char *)v7 + 132));
  *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vcvtq_f64_f32(*(float32x2_t *)((char *)v7 + 164));
  _V6.D[1] = v27.f64[1];
  _D17 = v28.f64[1];
  __asm
  {
    FMLS            D7, D17, V6.D[1]
    FMLS            D7, D4, V1.D[0]
  }
  *(float64x2_t *)(a1 + 40) = _Q0;
  *(_OWORD *)(a1 + 56) = *(unint64_t *)&v28.f64[1];
  *(float64x2_t *)(a1 + 8) = _Q5;
  *(_OWORD *)(a1 + 24) = *(unint64_t *)&v28.f64[0];
  *(float64x2_t *)(a1 + 72) = _Q3;
  *(_OWORD *)(a1 + 88) = _D4;
  *(float64x2_t *)(a1 + 104) = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(_Q5, vnegq_f64(v27).f64[0]), _Q0, v27, 1), _Q3, _Q1.f64[0], 0);
  *(_QWORD *)(a1 + 120) = _D7;
  *(_QWORD *)(a1 + 128) = 0x3FF0000000000000;
  _Q0.f64[0] = *(float64_t *)(a1 + 24);
  _Q3.f64[0] = *(float64_t *)(a1 + 88);
  _Q5.f64[0] = *(float64_t *)(a1 + 120);
  _Q6 = *(float64x2_t *)(a1 + 104);
  _Q0.f64[1] = *(float64_t *)(a1 + 56);
  v22 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a1 + 40)), vnegq_f64(_Q6).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a1 + 40)), _Q6, 1), _Q0, _Q5.f64[0], 0);
  _Q1.f64[0] = *(float64_t *)(a1 + 80);
  __asm
  {
    FMLS            D0, D1, V6.D[1]
    FMLS            D0, D3, V5.D[0]
  }
  *(float64x2_t *)(a1 + 136) = v22;
  *(float64_t *)(a1 + 152) = _Q0.f64[0];
  v23 = *a2;
  *(float64x2_t *)(a1 + 160) = vcvtq_f64_f32((*a2)[9]);
  *(float64x2_t *)(a1 + 176) = vcvtq_f64_f32(v23[10]);
  *(float64x2_t *)(a1 + 192) = vcvtq_f64_f32(v23[11]);
  *(float64x2_t *)(a1 + 208) = vcvtq_f64_f32(v23[12]);
  *(double *)(a1 + 224) = v23[13].f32[0];
  *(float32x2_t *)(a1 + 232) = v23[22];
  *(_DWORD *)(a1 + 240) = sub_21015D950((uint64_t)v23);
  *(_DWORD *)(a1 + 244) = sub_21015DBD0((uint64_t)*a2);
  *(float *)(a1 + 248) = a4;
  v24 = (uint64_t)*a2;
  *(_QWORD *)(a1 + 256) = &off_24CA1A9A0;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  v25 = (uint64_t)*a2;
  *(_QWORD *)(a1 + 280) = &off_24CA1A9A0;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(v25 + 32);
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  sub_21015BC90(a1 + 256, v30.i64);
  *(int64x2_t *)(a1 + 304) = v30;
  *(float64_t *)(a1 + 320) = v31.f64[0];
  sub_21015C09C(a1 + 280, v30.i64);
  *(float64_t *)(a1 + 344) = v31.f64[0];
  *(int64x2_t *)(a1 + 328) = v30;
  return a1;
}

void sub_20FDAF4F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_21015D41C(v2);
  sub_21015D41C(v1);
  _Unwind_Resume(a1);
}

void sub_20FDAF518(int8x8_t *a1, unint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int8x8_t v13;
  int8x8_t *v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD **v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __uint64_t v29[2];
  __int128 v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  void *__p;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v4 = sub_210219C18();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v30) = 134217984;
    *(_QWORD *)((char *)&v30 + 4) = a2;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v29[0] = 0;
    pthread_threadid_np(0, v29);
    v9 = v29[0];
    timespec_get((timespec *)v29, 1);
    sub_210219E20(&v30, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "SemKfSet:DID:%llu", 0x11uLL, v7, v8, v9, v29);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 48))(v12, &v30);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v42 < 0)
    {
      operator delete(__p);
      if ((v40 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v38)
        {
LABEL_14:
          if (v35 && v34 < 0)
            operator delete(v33);
          if (v32 < 0)
            operator delete(*((void **)&v30 + 1));
          if (v7)
            free(v7);
          goto LABEL_21;
        }
LABEL_12:
        if (v37 < 0)
          operator delete(v36);
        goto LABEL_14;
      }
    }
    else if ((v40 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v39);
    if (!v38)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    LODWORD(v30) = 134217984;
    *(_QWORD *)((char *)&v30 + 4) = a2;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v13 = a1[7];
  if (v13)
  {
    v14 = a1 + 6;
    v15 = (uint8x8_t)vcnt_s8(v13);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = a2;
      if (*(_QWORD *)&v13 <= a2)
        v16 = a2 % *(_QWORD *)&v13;
    }
    else
    {
      v16 = (*(_QWORD *)&v13 - 1) & a2;
    }
    v17 = *(_QWORD ***)(*(_QWORD *)v14 + 8 * v16);
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        if (v15.u32[0] < 2uLL)
        {
          v19 = *(_QWORD *)&v13 - 1;
          while (1)
          {
            v21 = v18[1];
            if (v21 == a2)
            {
              if (v18[2] == a2)
                goto LABEL_44;
            }
            else if ((v21 & v19) != v16)
            {
              return;
            }
            v18 = (_QWORD *)*v18;
            if (!v18)
              return;
          }
        }
        do
        {
          v20 = v18[1];
          if (v20 == a2)
          {
            if (v18[2] == a2)
            {
LABEL_44:
              sub_20EF9C994((uint64_t)&v30, v14, v18);
              v22 = (_QWORD *)v30;
              *(_QWORD *)&v30 = 0;
              if (v22)
              {
                if (v31)
                {
                  v22[38] = &off_24CA1A9A0;
                  v23 = (std::__shared_weak_count *)v22[40];
                  if (v23)
                  {
                    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
                    do
                      v25 = __ldaxr(p_shared_owners);
                    while (__stlxr(v25 - 1, p_shared_owners));
                    if (!v25)
                    {
                      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                      std::__shared_weak_count::__release_weak(v23);
                    }
                  }
                  v22[35] = &off_24CA1A9A0;
                  v26 = (std::__shared_weak_count *)v22[37];
                  if (v26)
                  {
                    v27 = (unint64_t *)&v26->__shared_owners_;
                    do
                      v28 = __ldaxr(v27);
                    while (__stlxr(v28 - 1, v27));
                    if (!v28)
                    {
                      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                      std::__shared_weak_count::__release_weak(v26);
                    }
                  }
                }
                operator delete(v22);
              }
              return;
            }
          }
          else
          {
            if (v20 >= *(_QWORD *)&v13)
              v20 %= *(_QWORD *)&v13;
            if (v20 != v16)
              return;
          }
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
    }
  }
}

void sub_20FDAF958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
LABEL_7:
  if (a34 < 0)
    operator delete(a29);
LABEL_9:
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (!v47)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  free(v47);
  _Unwind_Resume(exception_object);
}

void sub_20FDAFA14(uint64_t a1@<X0>, float32x2_t **a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  float32x2_t **v5;
  uint64_t v6;
  float32x2_t *v8;
  float v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v15;
  float64x2_t v16;
  int8x16_t v17;
  float64x2_t v19;
  float v27;
  double *v28;
  void *v29;
  int64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  unint64_t *v62;
  int64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  char **v74;
  char *v75;
  char *v76;
  uint64_t *v77;
  _QWORD *v78;
  double v79;
  uint64_t v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  _BYTE *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  _QWORD *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  float32x2_t **v112;
  char **v113;
  char *v114;
  double *v115;
  uint64_t v116;
  char *v117;
  void *v118[2];
  __int128 v119;
  float64x2_t v120;
  __int128 v121;
  float64x2_t v122;
  __int128 v123;
  float64x2_t v124;
  uint64_t v125;
  uint64_t v126;
  void *__p;
  char *v128;
  char *v129;
  void *v130;
  double *v131;
  uint64_t v132;
  float64x2_t v133;
  float64x2_t v134;
  int64x2_t v135;
  float64x2_t v136;
  int64x2_t v137;
  float64x2_t v138;
  int64x2_t v139;
  float64x2_t v140;
  uint64_t v141;

  v5 = a2;
  v6 = a1;
  v141 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  if ((*a2)[32].i8[0])
  {
    v9 = v8[31].f32[1];
    if (v9 < *(float *)(a1 + 8))
    {
LABEL_3:
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      return;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SemanticsProcessing/src/SemanticsKeyframeSet.cpp", 92, (uint64_t)"frame->opt_coverage_.has_value()", 32, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = *v5;
    v9 = (*v5)[31].f32[1];
    if (v9 < *(float *)(v6 + 8))
      goto LABEL_3;
  }
  v113 = a4;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v10 = vcvtq_f64_f32(*(float32x2_t *)((char *)v8 + 116));
  v139 = (int64x2_t)vcvtq_f64_f32(*(float32x2_t *)((char *)v8 + 108));
  v140 = v10;
  v11 = vcvtq_f64_f32(*(float32x2_t *)((char *)v8 + 132));
  v137 = (int64x2_t)vcvtq_f64_f32(*(float32x2_t *)((char *)v8 + 124));
  v138 = v11;
  v12 = vcvtq_f64_f32(*(float32x2_t *)((char *)v8 + 148));
  v135 = (int64x2_t)vcvtq_f64_f32(*(float32x2_t *)((char *)v8 + 140));
  v136 = v12;
  v13 = vcvtq_f64_f32(*(float32x2_t *)((char *)v8 + 164));
  v133 = vcvtq_f64_f32(*(float32x2_t *)((char *)v8 + 156));
  v134 = v13;
  v13.f64[0] = v10.f64[0];
  _D5 = v12.f64[0];
  v15 = (float64x2_t)vzip1q_s64(v139, v137);
  v16 = (float64x2_t)vzip2q_s64(v139, v137);
  v13.f64[1] = v11.f64[0];
  v17 = vextq_s8((int8x16_t)v16, (int8x16_t)vdupq_laneq_s64(v135, 1), 8uLL);
  _D7 = v134.f64[0];
  v19 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v15, vnegq_f64(v133).f64[0]), v16, v133, 1), v13, v134.f64[0], 0);
  _D18 = v135.i64[1];
  __asm
  {
    FMLS            D16, D18, V3.D[1]
    FMLS            D16, D5, V7.D[0]
  }
  *(_QWORD *)&v16.f64[1] = v17.i64[0];
  *(float64x2_t *)v118 = v15;
  v119 = v135.u64[0];
  v120 = v16;
  v121 = v17.u64[1];
  v122 = v13;
  v123 = *(unint64_t *)&v12.f64[0];
  v124 = v19;
  v125 = _D16;
  v126 = 0x3FF0000000000000;
  v110 = (_QWORD *)(v6 + 48);
  sub_20FDB3C68(v6 + 48, (uint64_t)v118, (double **)&v130, (char **)&__p, *(double *)(v6 + 16), *(double *)(v6 + 24));
  v111 = a3;
  v112 = v5;
  v27 = (*v5)[31].f32[1];
  v28 = (double *)v130;
  v115 = v131;
  v29 = __p;
  v140.f64[0] = 0.0;
  v139 = 0uLL;
  if (__p == v128)
  {
    v74 = a4;
    goto LABEL_75;
  }
  v118[0] = 0;
  v118[1] = 0;
  *(_QWORD *)&v119 = 0;
  v30 = v128 - (_BYTE *)__p;
  if (v128 - (_BYTE *)__p < 0)
    sub_20E867F44();
  v31 = (char *)operator new(v128 - (_BYTE *)__p);
  v118[0] = v31;
  *(_QWORD *)&v119 = &v31[8 * (v30 >> 3)];
  memcpy(v31, v29, v30);
  v32 = 0;
  v114 = 0;
  v33 = 0;
  v116 = v6;
  v117 = &v31[8 * (v30 >> 3)];
  v118[1] = v117;
  v128 = (char *)v29;
  do
  {
    if (fabs(*v28) < *(double *)(v6 + 40))
    {
      v34 = *(unint64_t **)v31;
      if (*(float *)(*(_QWORD *)v31 + 248) < v27)
      {
        v35 = *v34;
        if (v33 < v114)
        {
          *(_QWORD *)v33 = v35;
          v36 = (uint64_t)(v33 + 8);
LABEL_53:
          v33 = (char *)v36;
          sub_20FDAF518((int8x8_t *)v6, *v34);
          goto LABEL_54;
        }
        v57 = (v33 - v32) >> 3;
        v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 61)
        {
          v139.i64[1] = (uint64_t)v33;
          *(_QWORD *)&v140.f64[0] = v114;
          v139.i64[0] = (uint64_t)v32;
          sub_20E92CED8();
        }
        if ((v114 - v32) >> 2 > v58)
          v58 = (v114 - v32) >> 2;
        if ((unint64_t)(v114 - v32) >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v59 = v58;
        if (v59)
        {
          if (v59 >> 61)
          {
            v139.i64[1] = (uint64_t)v33;
            *(_QWORD *)&v140.f64[0] = v114;
            v139.i64[0] = (uint64_t)v32;
            sub_20E877A38();
          }
          v60 = v59;
          v61 = operator new(8 * v59);
          v59 = v60;
          v62 = (unint64_t *)&v61[8 * v57];
          *v62 = v35;
          v36 = (uint64_t)(v62 + 1);
          v63 = v33 - v32;
          if (v33 == v32)
            goto LABEL_50;
        }
        else
        {
          v61 = 0;
          v62 = (unint64_t *)(8 * v57);
          *(_QWORD *)(8 * v57) = v35;
          v36 = 8 * v57 + 8;
          v63 = v33 - v32;
          if (v33 == v32)
            goto LABEL_50;
        }
        v64 = v63 - 8;
        if (v64 >= 0x168)
        {
          v67 = (v33 - 8 - v32) & 0xFFFFFFFFFFFFFFF8;
          if (&v61[v33 - v32 - 8 - v67] > &v61[v33 - v32 - 8])
          {
            v65 = v33;
          }
          else if (&v33[-v67 - 8] > v33 - 8)
          {
            v65 = v33;
          }
          else if ((unint64_t)(v32 - v61) >= 0x20)
          {
            v68 = (v64 >> 3) + 1;
            v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
            v65 = &v33[-v69];
            v62 = (unint64_t *)((char *)v62 - v69);
            v70 = &v61[8 * v57 - 16];
            v71 = v33 - 16;
            v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v73 = *(_OWORD *)v71;
              *(v70 - 1) = *((_OWORD *)v71 - 1);
              *v70 = v73;
              v70 -= 2;
              v71 -= 32;
              v72 -= 4;
            }
            while (v72);
            if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_50;
          }
          else
          {
            v65 = v33;
          }
        }
        else
        {
          v65 = v33;
        }
        do
        {
          v66 = *((_QWORD *)v65 - 1);
          v65 -= 8;
          *--v62 = v66;
        }
        while (v65 != v32);
LABEL_50:
        v114 = &v61[8 * v59];
        if (v32)
        {
          operator delete(v32);
          v34 = *(unint64_t **)v31;
        }
        v32 = (char *)v62;
        v6 = v116;
        goto LABEL_53;
      }
    }
    v37 = v128;
    if (v128 >= v129)
    {
      v39 = __p;
      v40 = v128 - (_BYTE *)__p;
      v41 = (v128 - (_BYTE *)__p) >> 3;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 61)
      {
        v139.i64[1] = (uint64_t)v33;
        *(_QWORD *)&v140.f64[0] = v114;
        v139.i64[0] = (uint64_t)v32;
        sub_20E867F44();
      }
      v43 = v129 - (_BYTE *)__p;
      if ((v129 - (_BYTE *)__p) >> 2 > v42)
        v42 = v43 >> 2;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 >> 61)
        {
          v139.i64[1] = (uint64_t)v33;
          *(_QWORD *)&v140.f64[0] = v114;
          v139.i64[0] = (uint64_t)v32;
          sub_20E877A38();
        }
        v45 = operator new(8 * v44);
        v46 = &v45[8 * v41];
        *v46 = *(_QWORD *)v31;
        v38 = (uint64_t)(v46 + 1);
        v47 = v37 - v39;
        if (v37 != v39)
        {
LABEL_24:
          v48 = v47 - 8;
          if (v48 < 0x58)
            goto LABEL_141;
          if ((unint64_t)(v37 - v45 - v40) < 0x20)
            goto LABEL_141;
          v49 = (v48 >> 3) + 1;
          v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          v51 = &v37[-v50];
          v46 = (_QWORD *)((char *)v46 - v50);
          v52 = &v45[8 * v41 - 16];
          v53 = (__int128 *)(v37 - 16);
          v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v55 = *v53;
            *(v52 - 1) = *(v53 - 1);
            *v52 = v55;
            v52 -= 2;
            v53 -= 2;
            v54 -= 4;
          }
          while (v54);
          v37 = v51;
          if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_141:
            do
            {
              v56 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *--v46 = v56;
            }
            while (v37 != v39);
          }
          v37 = __p;
          __p = v46;
          v128 = (char *)v38;
          v129 = &v45[8 * v44];
          if (!v37)
            goto LABEL_35;
LABEL_34:
          operator delete(v37);
          goto LABEL_35;
        }
      }
      else
      {
        v45 = 0;
        v46 = (_QWORD *)(8 * v41);
        *(_QWORD *)(8 * v41) = *(_QWORD *)v31;
        v38 = 8 * v41 + 8;
        v47 = v37 - v39;
        if (v37 != v39)
          goto LABEL_24;
      }
      __p = v46;
      v128 = (char *)v38;
      v129 = &v45[8 * v44];
      if (v37)
        goto LABEL_34;
    }
    else
    {
      *(_QWORD *)v128 = *(_QWORD *)v31;
      v38 = (uint64_t)(v37 + 8);
    }
LABEL_35:
    v128 = (char *)v38;
    v6 = v116;
LABEL_54:
    v31 += 8;
    ++v28;
  }
  while (v31 != v117 || v28 != v115);
  v74 = v113;
  v139.i64[1] = (uint64_t)v33;
  *(_QWORD *)&v140.f64[0] = v114;
  v139.i64[0] = (uint64_t)v32;
  v5 = v112;
  if (v118[0])
  {
    operator delete(v118[0]);
    v33 = (char *)v139.i64[1];
    v32 = (char *)v139.i64[0];
  }
  if (v32 == v33 && (v75 = (char *)__p, __p != v128))
  {
    while (*(double *)(v6 + 32) + *(float *)(*(_QWORD *)v75 + 248) <= v9)
    {
      v75 += 8;
      if (v75 == v128)
        goto LABEL_75;
    }
    *(_OWORD *)v113 = 0u;
    *((_OWORD *)v113 + 1) = 0u;
    if (v33)
    {
LABEL_102:
      v139.i64[1] = (uint64_t)v33;
      operator delete(v33);
    }
  }
  else
  {
LABEL_75:
    v76 = sub_20FDB0414(v6, v5, v111, LODWORD(v9) | 0x100000000);
    if (*(_QWORD *)(v6 + 72) <= *(_QWORD *)v6)
      goto LABEL_97;
    v77 = *(uint64_t **)(v6 + 64);
    if (!v77)
      goto LABEL_97;
    v78 = 0;
    v79 = 1.79769313e308;
    do
    {
      if (*((double *)v77 + 32) < v79)
      {
        v78 = v77;
        v79 = *((double *)v77 + 32);
      }
      v77 = (uint64_t *)*v77;
    }
    while (v77);
    if (v78)
    {
      v80 = v78[3];
      sub_20EF9C994((uint64_t)v118, v110, v78);
      v81 = v118[0];
      v118[0] = 0;
      if (v81)
      {
        if ((_BYTE)v119)
        {
          v81[38] = &off_24CA1A9A0;
          v82 = (std::__shared_weak_count *)v81[40];
          if (v82)
          {
            p_shared_owners = (unint64_t *)&v82->__shared_owners_;
            do
              v84 = __ldaxr(p_shared_owners);
            while (__stlxr(v84 - 1, p_shared_owners));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          v81[35] = &off_24CA1A9A0;
          v85 = (std::__shared_weak_count *)v81[37];
          if (v85)
          {
            v86 = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
        }
        operator delete(v81);
      }
      v88 = v139.i64[1];
      if (v139.i64[1] >= *(_QWORD *)&v140.f64[0])
      {
        v93 = (_BYTE *)v139.i64[0];
        v94 = (v139.i64[1] - v139.i64[0]) >> 3;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 61)
          sub_20E92CED8();
        v96 = *(_QWORD *)&v140.f64[0] - v139.i64[0];
        if ((*(_QWORD *)&v140.f64[0] - v139.i64[0]) >> 2 > v95)
          v95 = v96 >> 2;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        if (v97)
        {
          if (v97 >> 61)
            sub_20E877A38();
          v98 = operator new(8 * v97);
        }
        else
        {
          v98 = 0;
        }
        v99 = &v98[8 * v94];
        v100 = &v98[8 * v97];
        *v99 = v80;
        v33 = (char *)(v99 + 1);
        if ((_BYTE *)v88 != v93)
        {
          v101 = v88 - (_QWORD)v93 - 8;
          if (v101 < 0x58)
            goto LABEL_142;
          if ((unint64_t)(v93 - v98) < 0x20)
            goto LABEL_142;
          v102 = (v101 >> 3) + 1;
          v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
          v104 = v88 - v103;
          v99 = (_QWORD *)((char *)v99 - v103);
          v105 = &v98[8 * v94 - 16];
          v106 = (__int128 *)(v88 - 16);
          v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v108 = *v106;
            *(v105 - 1) = *(v106 - 1);
            *v105 = v108;
            v105 -= 2;
            v106 -= 2;
            v107 -= 4;
          }
          while (v107);
          v88 = v104;
          if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_142:
            do
            {
              v109 = *(_QWORD *)(v88 - 8);
              v88 -= 8;
              *--v99 = v109;
            }
            while ((_BYTE *)v88 != v93);
          }
        }
        v139.i64[0] = (uint64_t)v99;
        v139.i64[1] = (uint64_t)v33;
        *(_QWORD *)&v140.f64[0] = v100;
        if (v93)
          operator delete(v93);
        v139.i64[1] = (uint64_t)v33;
      }
      else
      {
        *(_QWORD *)v139.i64[1] = v80;
        v33 = (char *)(v88 + 8);
        v139.i64[1] = v88 + 8;
      }
    }
    else
    {
LABEL_97:
      v33 = (char *)v139.i64[1];
    }
    *v74 = v76;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = 0;
    v89 = (void *)v139.i64[0];
    v90 = (int64_t)&v33[-v139.i64[0]];
    if (v33 != (char *)v139.i64[0])
    {
      if (v90 < 0)
        sub_20E92CED8();
      v91 = (char *)operator new((size_t)&v33[-v139.i64[0]]);
      v74[1] = v91;
      v92 = &v91[8 * (v90 >> 3)];
      v74[3] = v92;
      memcpy(v91, v89, v90);
      v74[2] = v92;
      v33 = (char *)v89;
    }
    if (v33)
      goto LABEL_102;
  }
  if (__p)
  {
    v128 = (char *)__p;
    operator delete(__p);
  }
  if (v130)
  {
    v131 = (double *)v130;
    operator delete(v130);
  }
}

void sub_20FDB0350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;
  void *v41;

  v39 = *(void **)(v37 - 144);
  if (v39)
  {
    *(_QWORD *)(v37 - 136) = v39;
    operator delete(v39);
    v40 = __p;
    if (!__p)
    {
LABEL_3:
      v41 = a36;
      if (!a36)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v40 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v40);
  v41 = a36;
  if (!a36)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v41);
  _Unwind_Resume(exception_object);
}

char *sub_20FDB0414(uint64_t a1, float32x2_t **a2, uint64_t a3, uint64_t a4)
{
  float v5;
  uint64_t *v6;
  __int128 v7;
  char *v8;
  char v9;
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t (**v44)();
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  uint64_t (**v67)();
  __int128 v68;
  uint64_t (**v69)();
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v5 = *(float *)&a4;
  v6 = (uint64_t *)(a1 + 48);
  if ((a4 & 0xFF00000000) == 0)
    v5 = 1.1755e-38;
  sub_20FDAF27C((uint64_t)&v24, a2, a3, v5);
  v49[0] = a3;
  v49[1] = v24;
  v54 = v29;
  v55 = v30;
  v56 = v31;
  v57 = v32;
  v50 = v25;
  v51 = v26;
  v52 = v27;
  v53 = v28;
  v58 = v33;
  v60 = v35;
  v59 = v34;
  v64 = v39;
  v63 = v38;
  v62 = v37;
  v61 = v36;
  v66 = v41;
  v65 = v40;
  v67 = &off_24CA1A9A0;
  v68 = v43;
  v43 = 0uLL;
  v69 = &off_24CA1A9A0;
  v7 = v45;
  v45 = 0uLL;
  v72 = v47;
  v73 = v48;
  v70 = v7;
  v71 = v46;
  v8 = sub_20FDB19C4(v6, v49, (uint64_t)v49);
  v10 = v9;
  v69 = &off_24CA1A9A0;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v67 = &off_24CA1A9A0;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v44 = &off_24CA1A9A0;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v42 = &off_24CA1A9A0;
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (!*((_QWORD *)&v43 + 1))
    goto LABEL_22;
  v21 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v10)
      return v8 + 24;
  }
  else
  {
LABEL_22:
    if (v10)
      return v8 + 24;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SemanticsProcessing/src/SemanticsKeyframeSet.cpp", 159, (uint64_t)"ok", 2, (uint64_t)"AddKeyframe: Keyframe could not be added.", 41, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return v8 + 24;
}

void sub_20FDB06D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_21015D41C(v2);
  sub_21015D41C(v1);
  sub_21015D41C((_QWORD *)(v3 + 280));
  sub_21015D41C((_QWORD *)(v3 + 256));
  _Unwind_Resume(a1);
}

uint8x8_t sub_20FDB06FC(int8x8_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint8x8_t result;
  int8x8_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  __int128 v24;
  __int128 v25;
  float64x2_t v31;
  __uint64_t v36[2];
  int v37;
  _QWORD v38[3];
  char v39;
  void *v40;
  char v41;
  char v42;
  void *v43;
  char v44;
  char v45;
  void *v46;
  char v47;
  void *__p;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v6 = sub_210219C18();
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v37 = 134217984;
    v38[0] = a2;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v36[0] = 0;
    pthread_threadid_np(0, v36);
    v11 = v36[0];
    timespec_get((timespec *)v36, 1);
    sub_210219E20(&v37, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "SemKfSet:UID:%llu", 0x11uLL, v9, v10, v11, v36);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v37);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v49 < 0)
    {
      operator delete(__p);
      if ((v47 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v45)
        {
LABEL_14:
          if (v42 && v41 < 0)
            operator delete(v40);
          if (v39 < 0)
            operator delete(*(void **)((char *)v38 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v44 < 0)
          operator delete(v43);
        goto LABEL_14;
      }
    }
    else if ((v47 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v46);
    if (!v45)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    v37 = 134217984;
    v38[0] = a2;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v16 = a1[7];
  if (v16)
  {
    result = (uint8x8_t)vcnt_s8(v16);
    result.i16[0] = vaddlv_u8(result);
    if (result.u32[0] > 1uLL)
    {
      v17 = a2;
      if (*(_QWORD *)&v16 <= a2)
        v17 = a2 % *(_QWORD *)&v16;
    }
    else
    {
      v17 = (*(_QWORD *)&v16 - 1) & a2;
    }
    v18 = *(uint64_t ***)(*(_QWORD *)&a1[6] + 8 * v17);
    if (v18)
    {
      v19 = *v18;
      if (v19)
      {
        if (result.u32[0] < 2uLL)
        {
          v20 = *(_QWORD *)&v16 - 1;
          while (1)
          {
            v22 = v19[1];
            if (v22 == a2)
            {
              if (v19[2] == a2)
                goto LABEL_44;
            }
            else if ((v22 & v20) != v17)
            {
              return result;
            }
            v19 = (uint64_t *)*v19;
            if (!v19)
              return result;
          }
        }
        do
        {
          v21 = v19[1];
          if (v21 == a2)
          {
            if (v19[2] == a2)
            {
LABEL_44:
              v23 = *(int64x2_t *)a3;
              v24 = *(_OWORD *)(a3 + 16);
              v25 = *(_OWORD *)(a3 + 48);
              *((_OWORD *)v19 + 4) = *(_OWORD *)(a3 + 32);
              *((_OWORD *)v19 + 5) = v25;
              *((int64x2_t *)v19 + 2) = v23;
              *((_OWORD *)v19 + 3) = v24;
              _Q0 = *(float64x2_t *)(a3 + 64);
              _Q1 = *(_OWORD *)(a3 + 80);
              _Q3 = *(_OWORD *)(a3 + 112);
              *((_OWORD *)v19 + 8) = *(_OWORD *)(a3 + 96);
              *((_OWORD *)v19 + 9) = _Q3;
              *((float64x2_t *)v19 + 6) = _Q0;
              *((_OWORD *)v19 + 7) = _Q1;
              _Q0.f64[0] = *(float64_t *)(a3 + 16);
              *(_QWORD *)&_Q3 = *(_QWORD *)(a3 + 80);
              _D5 = *(double *)(a3 + 112);
              _Q6 = *(float64x2_t *)(a3 + 96);
              _Q0.f64[1] = *(float64_t *)(a3 + 48);
              v31 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a3, *(int64x2_t *)(a3 + 32)), vnegq_f64(_Q6).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, *(int64x2_t *)(a3 + 32)), _Q6, 1), _Q0, _D5, 0);
              *(_QWORD *)&_Q1 = *(_QWORD *)(a3 + 72);
              __asm
              {
                FMLS            D0, D1, V6.D[1]
                FMLS            D0, D3, V5.D[0]
              }
              *((float64x2_t *)v19 + 10) = v31;
              v19[22] = (uint64_t)result;
              return result;
            }
          }
          else
          {
            if (v21 >= *(_QWORD *)&v16)
              v21 %= *(_QWORD *)&v16;
            if (v21 != v17)
              return result;
          }
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

void sub_20FDB0B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
LABEL_7:
  if (a34 < 0)
    operator delete(a29);
LABEL_9:
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (!v47)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  free(v47);
  _Unwind_Resume(exception_object);
}

void sub_20FDB0BC8(uint64_t a1, _QWORD *a2)
{
  CVPixelBufferPoolRef *v4;
  uint64_t v5;
  const void *v6;
  std::__shared_weak_count_vtbl **v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count_vtbl **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl **v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count_vtbl **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t (**v110)();
  uint64_t *v111;
  std::__shared_weak_count *v112;
  uint64_t (**v113)();
  _QWORD *v114;
  std::__shared_weak_count *v115;
  uint64_t (**v116)();
  __int128 v117;
  uint64_t (**v118)();
  _QWORD *v119;
  std::__shared_weak_count *v120;
  _BYTE v121[24];
  unsigned int v122;
  size_t v123;
  __int128 v124;
  int v125;
  std::__shared_weak_count_vtbl **valuePtr;
  __int128 v127;

  v125 = 16;
  v4 = *(CVPixelBufferPoolRef **)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  if (v4)
  {
    if (v5)
      goto LABEL_41;
    goto LABEL_5;
  }
  if (v5)
  {
LABEL_5:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SemanticsProcessing/src/SemanticsKeyframeSet.cpp", 177, (uint64_t)"!semantics_buffer_pool_ && !confidence_buffer_pool_", 51, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  v127 = 0uLL;
  valuePtr = (std::__shared_weak_count_vtbl **)&v127;
  sub_20EA65D20(&valuePtr, v121);
  v124 = *(_OWORD *)v121;
  sub_20E866BE0((uint64_t)&valuePtr, (char *)v127);
  v6 = (const void *)*MEMORY[0x24BDC56E0];
  valuePtr = 0;
  sub_21015B424((uint64_t)&v124, v6, &valuePtr);
  *(_QWORD *)v121 = sub_21015D950((uint64_t)a2);
  v123 = sub_21015DBD0((uint64_t)a2);
  v122 = sub_21015BE44((uint64_t)a2);
  sub_20FDB1788(&valuePtr, (uint64_t)&v124, (uint64_t *)v121, (uint64_t *)&v123, &v125, &v122, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SemanticsProcessing/src/SemanticsKeyframeSet.cpp:185");
  v7 = valuePtr;
  valuePtr = 0;
  v8 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v7;
  if (v8)
  {
    v9 = *(std::__shared_weak_count **)(v8 + 8);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    MEMORY[0x212BC6398](v8, 0xA0C40BD48D6D6);
    v12 = valuePtr;
    valuePtr = 0;
    if (v12)
    {
      v13 = (std::__shared_weak_count *)v12[1];
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      MEMORY[0x212BC6398](v12, 0xA0C40BD48D6D6);
    }
  }
  *(_QWORD *)v121 = sub_21015D950((uint64_t)(a2 + 3));
  v123 = sub_21015DBD0((uint64_t)(a2 + 3));
  v122 = sub_21015BE44((uint64_t)(a2 + 3));
  sub_20FDB1788(&valuePtr, (uint64_t)&v124, (uint64_t *)v121, (uint64_t *)&v123, &v125, &v122, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SemanticsProcessing/src/SemanticsKeyframeSet.cpp:188");
  v16 = valuePtr;
  valuePtr = 0;
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  if (v17)
  {
    v18 = *(std::__shared_weak_count **)(v17 + 8);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    MEMORY[0x212BC6398](v17, 0xA0C40BD48D6D6);
    v21 = valuePtr;
    valuePtr = 0;
    if (v21)
    {
      v22 = (std::__shared_weak_count *)v21[1];
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v21, 0xA0C40BD48D6D6);
    }
  }
  if ((!*(_QWORD *)(a1 + 88) || !*(_QWORD *)(a1 + 96))
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SemanticsProcessing/src/SemanticsKeyframeSet.cpp", 190, (uint64_t)"semantics_buffer_pool_ && confidence_buffer_pool_", 49, (uint64_t)"Semantics Processing: Failed to construct apple_util::PixelBufferPool", 69, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v4 = *(CVPixelBufferPoolRef **)(a1 + 88);
LABEL_41:
  sub_210105A14(v4, (uint64_t)&valuePtr);
  sub_210105A14(*(CVPixelBufferPoolRef **)(a1 + 96), (uint64_t)v121);
  v28 = (_QWORD *)a2[1];
  v29 = (std::__shared_weak_count *)a2[2];
  v119 = v28;
  v120 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v28 = v119;
  }
  v118 = &off_24CA1A9C0;
  if (v28)
  {
    v33 = *v28;
    v32 = (std::__shared_weak_count *)v28[1];
    if (!v32)
      goto LABEL_51;
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (v36)
    {
LABEL_51:
      if (!v33)
        goto LABEL_53;
      goto LABEL_52;
    }
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    if (v33)
LABEL_52:
      sub_2101613B8((uint64_t)v119);
  }
LABEL_53:
  v37 = (uint64_t *)v127;
  v117 = v127;
  if (*((_QWORD *)&v127 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    v37 = (uint64_t *)v117;
  }
  v116 = &off_24CA1A9E0;
  if (v37)
  {
    v41 = *v37;
    v40 = (std::__shared_weak_count *)v37[1];
    if (!v40)
      goto LABEL_63;
    v42 = (unint64_t *)&v40->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 - 1, v42));
    if (v44)
    {
LABEL_63:
      if (!v41)
        goto LABEL_65;
      goto LABEL_64;
    }
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (v41)
LABEL_64:
      sub_2101614A8(v117);
  }
LABEL_65:
  sub_21015EE68((uint64_t)&v118, (uint64_t)&v116);
  if ((_QWORD)v117)
  {
    v46 = *(_QWORD *)v117;
    v45 = *(std::__shared_weak_count **)(v117 + 8);
    if (v45)
    {
      v47 = (unint64_t *)&v45->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      do
        v49 = __ldaxr(v47);
      while (__stlxr(v49 - 1, v47));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
        if (!v46)
          goto LABEL_73;
        goto LABEL_72;
      }
    }
    if (v46)
LABEL_72:
      sub_210161684(v117);
  }
LABEL_73:
  v116 = &off_24CA1A9A0;
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (!*((_QWORD *)&v117 + 1))
    goto LABEL_77;
  v51 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    v53 = v119;
    if (!v119)
      goto LABEL_85;
  }
  else
  {
LABEL_77:
    v53 = v119;
    if (!v119)
      goto LABEL_85;
  }
  v55 = *v53;
  v54 = (std::__shared_weak_count *)v53[1];
  if (v54)
  {
    v56 = (unint64_t *)&v54->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    do
      v58 = __ldaxr(v56);
    while (__stlxr(v58 - 1, v56));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
      if (!v55)
        goto LABEL_85;
      goto LABEL_84;
    }
  }
  if (v55)
LABEL_84:
    sub_210161594((uint64_t)v119);
LABEL_85:
  v118 = &off_24CA1A9A0;
  v59 = v120;
  if (v120)
  {
    v60 = (unint64_t *)&v120->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = (_QWORD *)a2[4];
  v63 = (std::__shared_weak_count *)a2[5];
  v114 = v62;
  v115 = v63;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    v62 = v114;
  }
  v113 = &off_24CA1A9C0;
  if (v62)
  {
    v67 = *v62;
    v66 = (std::__shared_weak_count *)v62[1];
    if (!v66)
      goto LABEL_100;
    v68 = (unint64_t *)&v66->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    do
      v70 = __ldaxr(v68);
    while (__stlxr(v70 - 1, v68));
    if (v70)
    {
LABEL_100:
      if (!v67)
        goto LABEL_102;
      goto LABEL_101;
    }
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    if (v67)
LABEL_101:
      sub_2101613B8((uint64_t)v114);
  }
LABEL_102:
  v71 = *(uint64_t **)&v121[8];
  v111 = *(uint64_t **)&v121[8];
  v112 = *(std::__shared_weak_count **)&v121[16];
  if (*(_QWORD *)&v121[16])
  {
    v72 = (unint64_t *)(*(_QWORD *)&v121[16] + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    v71 = v111;
  }
  v110 = &off_24CA1A9E0;
  if (v71)
  {
    v75 = *v71;
    v74 = (std::__shared_weak_count *)v71[1];
    if (!v74)
      goto LABEL_112;
    v76 = (unint64_t *)&v74->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
    do
      v78 = __ldaxr(v76);
    while (__stlxr(v78 - 1, v76));
    if (v78)
    {
LABEL_112:
      if (!v75)
        goto LABEL_114;
      goto LABEL_113;
    }
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
    if (v75)
LABEL_113:
      sub_2101614A8((uint64_t)v111);
  }
LABEL_114:
  sub_21015EE68((uint64_t)&v113, (uint64_t)&v110);
  if (v111)
  {
    v80 = *v111;
    v79 = (std::__shared_weak_count *)v111[1];
    if (v79)
    {
      v81 = (unint64_t *)&v79->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
      do
        v83 = __ldaxr(v81);
      while (__stlxr(v83 - 1, v81));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
        if (!v80)
          goto LABEL_122;
        goto LABEL_121;
      }
    }
    if (v80)
LABEL_121:
      sub_210161684((uint64_t)v111);
  }
LABEL_122:
  v110 = &off_24CA1A9A0;
  v84 = v112;
  if (!v112)
    goto LABEL_126;
  v85 = (unint64_t *)&v112->__shared_owners_;
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v86 - 1, v85));
  if (!v86)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
    v87 = v114;
    if (!v114)
      goto LABEL_134;
  }
  else
  {
LABEL_126:
    v87 = v114;
    if (!v114)
      goto LABEL_134;
  }
  v89 = *v87;
  v88 = (std::__shared_weak_count *)v87[1];
  if (v88)
  {
    v90 = (unint64_t *)&v88->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    do
      v92 = __ldaxr(v90);
    while (__stlxr(v92 - 1, v90));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
      if (!v89)
        goto LABEL_134;
      goto LABEL_133;
    }
  }
  if (v89)
LABEL_133:
    sub_210161594((uint64_t)v114);
LABEL_134:
  v113 = &off_24CA1A9A0;
  v93 = v115;
  if (v115)
  {
    v94 = (unint64_t *)&v115->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v127;
  v127 = 0uLL;
  v97 = (std::__shared_weak_count *)a2[2];
  *(_OWORD *)(a2 + 1) = v96;
  if (v97)
  {
    v98 = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = *(_OWORD *)&v121[8];
  *(_QWORD *)&v121[8] = 0;
  *(_QWORD *)&v121[16] = 0;
  v101 = (std::__shared_weak_count *)a2[5];
  *((_OWORD *)a2 + 2) = v100;
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  *(_QWORD *)v121 = &off_24CA1A9A0;
  v104 = *(std::__shared_weak_count **)&v121[16];
  if (*(_QWORD *)&v121[16])
  {
    v105 = (unint64_t *)(*(_QWORD *)&v121[16] + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  valuePtr = (std::__shared_weak_count_vtbl **)&off_24CA1A9A0;
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
}

void sub_20FDB155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  sub_21015CB94((uint64_t *)va);
  sub_21015D41C((uint64_t *)va1);
  sub_21015D41C((_QWORD *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_20FDB174C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_21015D41C((_QWORD *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_20FDB1760(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20FDB1774(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20FDB1788(std::__shared_weak_count_vtbl ***a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5, unsigned int *a6, const char *a7)
{
  std::__shared_weak_count_vtbl **v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  size_t v18;
  void *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void *__dst[2];
  unint64_t v25;

  v13 = (std::__shared_weak_count_vtbl **)operator new();
  v14 = *a3;
  v15 = *a4;
  v16 = *a5;
  v17 = *a6;
  v18 = strlen(a7);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = (void **)operator new(v21 + 1);
    __dst[1] = v19;
    v25 = v22 | 0x8000000000000000;
    __dst[0] = v20;
    goto LABEL_8;
  }
  HIBYTE(v25) = v18;
  v20 = __dst;
  if (v18)
LABEL_8:
    memcpy(v20, a7, (size_t)v19);
  *((_BYTE *)v19 + (_QWORD)v20) = 0;
  sub_210105910(v13, a2, v14, v15, v16, v17, (uint64_t *)__dst);
  *a1 = v13;
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
}

void sub_20FDB18C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x212BC6398](v15, 0xA0C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDB1900(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v2[38] = &off_24CA1A9A0;
      v3 = (std::__shared_weak_count *)v2[40];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v2[35] = &off_24CA1A9A0;
      v6 = (std::__shared_weak_count *)v2[37];
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_20FDB19C4(uint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  size_t v35;
  size_t v36;
  size_t v37;
  _QWORD *i;
  size_t v39;
  uint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;

  v6 = *a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == v6)
            {
              if (*((_QWORD *)v10 + 2) == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_QWORD *)v10 + 2) == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v13 = a1 + 2;
  v10 = (char *)operator new(0x178uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_QWORD *)v10 + 22) = *(_QWORD *)(a3 + 160);
  *((_QWORD *)v10 + 31) = *(_QWORD *)(a3 + 232);
  *((_DWORD *)v10 + 68) = *(_DWORD *)(a3 + 256);
  *((_QWORD *)v10 + 35) = &off_24CA1A9A0;
  v14 = *(_QWORD *)(a3 + 296);
  v15 = *(_QWORD *)(a3 + 304);
  *((_QWORD *)v10 + 38) = &off_24CA1A9A0;
  *((_QWORD *)v10 + 39) = v14;
  v16 = *(_OWORD *)(a3 + 112);
  *((_OWORD *)v10 + 7) = *(_OWORD *)(a3 + 96);
  *((_OWORD *)v10 + 8) = v16;
  v17 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v10 + 2) = v17;
  v18 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v10 + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v10 + 4) = v18;
  v19 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v10 + 5) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)v10 + 6) = v19;
  v20 = *(_OWORD *)(a3 + 144);
  *((_OWORD *)v10 + 9) = *(_OWORD *)(a3 + 128);
  *((_OWORD *)v10 + 10) = v20;
  *(_OWORD *)(v10 + 200) = *(_OWORD *)(a3 + 184);
  *(_OWORD *)(v10 + 216) = *(_OWORD *)(a3 + 200);
  *(_OWORD *)(v10 + 232) = *(_OWORD *)(a3 + 216);
  *(_OWORD *)(v10 + 184) = *(_OWORD *)(a3 + 168);
  *((_OWORD *)v10 + 16) = *(_OWORD *)(a3 + 240);
  *((_OWORD *)v10 + 18) = *(_OWORD *)(a3 + 272);
  *(_QWORD *)(a3 + 272) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *((_QWORD *)v10 + 40) = v15;
  *(_QWORD *)(a3 + 296) = 0;
  *(_QWORD *)(a3 + 304) = 0;
  v21 = *(_OWORD *)(a3 + 344);
  v22 = *(_OWORD *)(a3 + 312);
  *(_OWORD *)(v10 + 344) = *(_OWORD *)(a3 + 328);
  *(_OWORD *)(v10 + 360) = v21;
  *(_OWORD *)(v10 + 328) = v22;
  v23 = (float)(unint64_t)(a1[3] + 1);
  v24 = *((float *)a1 + 8);
  if (!v7 || (float)(v24 * (float)v7) < v23)
  {
    v27 = v7 < 3 || (v7 & (v7 - 1)) != 0;
    v28 = v27 | (2 * v7);
    v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v7 = a1[1];
    if (prime > v7)
    {
LABEL_38:
      if (prime >> 61)
        sub_20E877A38();
      v31 = operator new(8 * prime);
      v32 = (void *)*a1;
      *a1 = (uint64_t)v31;
      if (v32)
        operator delete(v32);
      v33 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v33++) = 0;
      while (prime != v33);
      v34 = (_QWORD *)*v13;
      if (!*v13)
        goto LABEL_70;
      v35 = v34[1];
      v36 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v37 = v35 & v36;
        *(_QWORD *)(*a1 + 8 * v37) = v13;
        for (i = (_QWORD *)*v34; *v34; i = (_QWORD *)*v34)
        {
          v39 = i[1] & v36;
          if (v39 == v37)
          {
            v34 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v39))
          {
            *v34 = *i;
            v40 = 8 * v39;
            *i = **(_QWORD **)(*a1 + v40);
            **(_QWORD **)(*a1 + v40) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v39) = v34;
            v34 = i;
            v37 = v39;
          }
        }
        goto LABEL_70;
      }
      if (v35 >= prime)
        v35 %= prime;
      *(_QWORD *)(*a1 + 8 * v35) = v13;
      v44 = (_QWORD *)*v34;
      if (!*v34)
      {
LABEL_70:
        v7 = prime;
        v47 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_71;
        goto LABEL_86;
      }
      while (1)
      {
        v46 = v44[1];
        if (v46 >= prime)
          v46 %= prime;
        if (v46 == v35)
          goto LABEL_64;
        if (*(_QWORD *)(*a1 + 8 * v46))
        {
          *v34 = *v44;
          v45 = 8 * v46;
          *v44 = **(_QWORD **)(*a1 + v45);
          **(_QWORD **)(*a1 + v45) = v44;
          v44 = v34;
LABEL_64:
          v34 = v44;
          v44 = (_QWORD *)*v44;
          if (!v44)
            goto LABEL_70;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v46) = v34;
          v34 = v44;
          v44 = (_QWORD *)*v44;
          v35 = v46;
          if (!v44)
            goto LABEL_70;
        }
      }
    }
    if (prime < v7)
    {
      v41 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < v7)
      {
        if (!prime)
        {
          v48 = (void *)*a1;
          *a1 = 0;
          if (v48)
            operator delete(v48);
          v7 = 0;
          a1[1] = 0;
          v47 = -1;
          goto LABEL_86;
        }
        goto LABEL_38;
      }
      v7 = a1[1];
    }
    v47 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_71:
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v25 = *a1;
        v26 = *(_QWORD **)(*a1 + 8 * (v6 % v7));
        if (v26)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v25 = *a1;
        v26 = *(_QWORD **)(*a1 + 8 * v6);
        if (v26)
          goto LABEL_26;
      }
      goto LABEL_87;
    }
LABEL_86:
    v3 = v47 & v6;
    v25 = *a1;
    v26 = *(_QWORD **)(*a1 + 8 * (v47 & v6));
    if (v26)
      goto LABEL_26;
    goto LABEL_87;
  }
  v25 = *a1;
  v26 = *(_QWORD **)(*a1 + 8 * v3);
  if (v26)
  {
LABEL_26:
    *(_QWORD *)v10 = *v26;
LABEL_93:
    *v26 = v10;
    goto LABEL_94;
  }
LABEL_87:
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v25 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v49 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v49 >= v7)
        v49 %= v7;
    }
    else
    {
      v49 &= v7 - 1;
    }
    v26 = (_QWORD *)(*a1 + 8 * v49);
    goto LABEL_93;
  }
LABEL_94:
  ++a1[3];
  return v10;
}

void sub_20FDB1F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDB1900((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FDB1F34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  __int128 v12;

  __p = operator new(0x20uLL);
  v12 = xmmword_2102DBFF0;
  strcpy((char *)__p, "SemanticsKeyframeSet parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA1CB0((unint64_t *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsKeyframeSetConfig.max_size", v4, "Maximum number of keyframes.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EF4E784((float *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsKeyframeSetConfig.min_coverage", v5, "Minimum coverage required.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsKeyframeSetConfig.max_nearby_kf_dist_sq_m", v6, "Maximum distance squared to be consider nearby frame.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsKeyframeSetConfig.max_nearby_kf_ang_deg", v7, "Maximum angle to be consider nearby frame.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsKeyframeSetConfig.min_coverage_margin_to_add", v8, "Minimum coverage margin to add redundant keyframe.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 40));
  return sub_20E8B2F9C((uint64_t *)&__p, "SemanticsKeyframeSetConfig.max_replace_kf_ang_diff_deg", v9, "Max angle to replace nearby keyframes. (degree).");
}

void sub_20FDB20D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

void sub_20FDB2130(uint64_t a1, float32x2_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t v11;
  char *v12;
  size_t v13;
  __darwin_time_t tv_sec;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  int64x2_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned __int8 v35;
  char *v37;
  size_t v38;
  __darwin_time_t v39;
  uint64_t v40;
  uint64_t k;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned __int8 v46;
  char *v48;
  size_t v49;
  __darwin_time_t v50;
  uint64_t v51;
  uint64_t m;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  void *v57;
  uint64_t *v58;
  timespec v59;
  __int128 v60;
  char v61;
  void *v62;
  char v63;
  char v64;
  void *v65;
  char v66;
  char v67;
  void *v68;
  char v69;
  void *__p;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 9))
  {
    if (*(_QWORD *)(a1 + 256))
    {
      v18 = *(_QWORD **)(a1 + 248);
      while (v18)
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
        v19[38] = &off_24CA1A9A0;
        v20 = (std::__shared_weak_count *)v19[40];
        if (!v20)
          goto LABEL_26;
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          v19[35] = &off_24CA1A9A0;
          v23 = (std::__shared_weak_count *)v19[37];
          if (v23)
          {
LABEL_27:
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
        else
        {
LABEL_26:
          v19[35] = &off_24CA1A9A0;
          v23 = (std::__shared_weak_count *)v19[37];
          if (v23)
            goto LABEL_27;
        }
        operator delete(v19);
      }
      *(_QWORD *)(a1 + 248) = 0;
      v26 = *(_QWORD *)(a1 + 240);
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * i) = 0;
      }
      *(_QWORD *)(a1 + 256) = 0;
    }
    sub_20FDB0414(a1 + 184, a2, *(_QWORD *)(a1 + 288), 0);
    return;
  }
  if (*(_BYTE *)(a1 + 24)
    && (sub_21015D950((uint64_t)*a2) != 160 || sub_21015DBD0((uint64_t)*a2) != 128)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SemanticsProcessing/src/SemanticsManager.cpp", 43, (uint64_t)"SemanticsManagerConfig::keyframe_width == frame->semantics_.Width() && SemanticsManagerConfig::keyframe_height == frame->semantics_.Height()", 140, (uint64_t)"Erosion of target class is expecting a different image size.", 60, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20FDAFA14(a1 + 184, a2, *(_QWORD *)(a1 + 288), &v56);
  if (v56)
  {
    *(_QWORD *)&v60 = *(_QWORD *)(a1 + 288);
    v7 = *(_QWORD *)(a3 + 24);
    if (!v7)
      sub_20E86D37C();
    if (!(*(unsigned int (**)(uint64_t, __int128 *, char *))(*(_QWORD *)v7 + 48))(v7, &v60, v56 + 8))
    {
      sub_20FDAF518((int8x8_t *)(a1 + 184), *(_QWORD *)(a1 + 288));
      goto LABEL_53;
    }
    v8 = sub_210219C18();
    v9 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_50;
    v11 = *(_QWORD *)(a1 + 288);
    LODWORD(v60) = 134217984;
    *(_QWORD *)((char *)&v60 + 4) = v11;
    v12 = (char *)_os_log_send_and_compose_impl();
    v13 = strlen(v12);
    v59.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v59);
    tv_sec = v59.tv_sec;
    timespec_get(&v59, 1);
    sub_210219E20(&v60, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v8 + 1), (__int128 *)(v8 + 5), "SemM:ASF:NID:%llu", 0x11uLL, v12, v13, tv_sec, &v59);
    std::mutex::lock(&stru_254A5A410);
    v15 = qword_254A5A458;
    for (j = unk_254A5A460; v15 != j; v15 += 40)
    {
      v17 = *(_QWORD *)(v15 + 32);
      if (!v17)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 48))(v17, &v60);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v71 < 0)
    {
      operator delete(__p);
      if ((v69 & 0x80000000) == 0)
      {
LABEL_16:
        if (!v67)
        {
LABEL_43:
          if (v64 && v63 < 0)
            operator delete(v62);
          if (v61 < 0)
            operator delete(*((void **)&v60 + 1));
          if (v12)
            free(v12);
LABEL_50:
          if (os_signpost_enabled((os_log_t)*v8))
          {
            v30 = *(_QWORD *)(a1 + 288);
            LODWORD(v60) = 134217984;
            *(_QWORD *)((char *)&v60 + 4) = v30;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          ++*(_QWORD *)(a1 + 288);
          sub_20FDAD4E8(a1 + 296, (uint64_t)v56, a1 + 80, v28, v29);
          goto LABEL_53;
        }
LABEL_41:
        if (v66 < 0)
          operator delete(v65);
        goto LABEL_43;
      }
    }
    else if ((v69 & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v68);
    if (!v67)
      goto LABEL_43;
    goto LABEL_41;
  }
LABEL_53:
  v54 = a1;
  v32 = (uint64_t *)v57;
  v31 = v58;
  if (v57 != v58)
  {
    do
    {
      v33 = *v32;
      v34 = sub_210219C18();
      v35 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_73;
      LODWORD(v60) = 134217984;
      *(_QWORD *)((char *)&v60 + 4) = v33;
      v37 = (char *)_os_log_send_and_compose_impl();
      v38 = strlen(v37);
      v59.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v59);
      v39 = v59.tv_sec;
      timespec_get(&v59, 1);
      sub_210219E20(&v60, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v34 + 1), (__int128 *)(v34 + 5), "SemM:ASF:DID:%llu", 0x11uLL, v37, v38, v39, &v59);
      std::mutex::lock(&stru_254A5A410);
      v40 = qword_254A5A458;
      for (k = unk_254A5A460; v40 != k; v40 += 40)
      {
        v42 = *(_QWORD *)(v40 + 32);
        if (!v42)
          sub_20E86D37C();
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v42 + 48))(v42, &v60);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v71 < 0)
      {
        operator delete(__p);
        if (v69 < 0)
        {
LABEL_64:
          operator delete(v68);
          if (!v67)
            goto LABEL_67;
          goto LABEL_65;
        }
      }
      else if (v69 < 0)
      {
        goto LABEL_64;
      }
      if (!v67)
        goto LABEL_67;
LABEL_65:
      if (v66 < 0)
        operator delete(v65);
LABEL_67:
      if (v64 && v63 < 0)
        operator delete(v62);
      if (v61 < 0)
      {
        operator delete(*((void **)&v60 + 1));
        if (!v37)
          goto LABEL_73;
LABEL_72:
        free(v37);
        goto LABEL_73;
      }
      if (v37)
        goto LABEL_72;
LABEL_73:
      if (os_signpost_enabled((os_log_t)*v34))
      {
        LODWORD(v60) = 134217984;
        *(_QWORD *)((char *)&v60 + 4) = v33;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      *(_QWORD *)&v60 = v33;
      v43 = *(_QWORD *)(a4 + 24);
      if (!v43)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v43 + 48))(v43, &v60);
      ++v32;
    }
    while (v32 != v31);
  }
  v44 = sub_210219C18();
  v45 = *(_QWORD *)(v54 + 256);
  v46 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (!atomic_load(&qword_254A5A450))
    goto LABEL_102;
  LODWORD(v60) = 134217984;
  *(_QWORD *)((char *)&v60 + 4) = v45;
  v48 = (char *)_os_log_send_and_compose_impl();
  v49 = strlen(v48);
  v59.tv_sec = 0;
  pthread_threadid_np(0, (__uint64_t *)&v59);
  v50 = v59.tv_sec;
  timespec_get(&v59, 1);
  sub_210219E20(&v60, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v44 + 1), (__int128 *)(v44 + 5), "SemM:ASF:NumKFs:%lu", 0x13uLL, v48, v49, v50, &v59);
  std::mutex::lock(&stru_254A5A410);
  v51 = qword_254A5A458;
  for (m = unk_254A5A460; v51 != m; v51 += 40)
  {
    v53 = *(_QWORD *)(v51 + 32);
    if (!v53)
      sub_20E86D37C();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v53 + 48))(v53, &v60);
  }
  std::mutex::unlock(&stru_254A5A410);
  if ((v71 & 0x80000000) == 0)
  {
    if ((v69 & 0x80000000) == 0)
      goto LABEL_89;
LABEL_92:
    operator delete(v68);
    if (!v67)
      goto LABEL_95;
LABEL_93:
    if (v66 < 0)
      operator delete(v65);
    goto LABEL_95;
  }
  operator delete(__p);
  if (v69 < 0)
    goto LABEL_92;
LABEL_89:
  if (v67)
    goto LABEL_93;
LABEL_95:
  if (v64 && v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(*((void **)&v60 + 1));
  if (v48)
    free(v48);
LABEL_102:
  if (os_signpost_enabled((os_log_t)*v44))
  {
    LODWORD(v60) = 134217984;
    *(_QWORD *)((char *)&v60 + 4) = v45;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (v57)
  {
    v58 = (uint64_t *)v57;
    operator delete(v57);
  }
}

void sub_20FDB2B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  sub_20E96E218((uint64_t)&a23);
  if (v23)
    free(v23);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20FDB2C04(uint64_t a1, int64x2_t *a2, uint64_t **a3, uint64_t a4, float64x2_t *a5, int a6, float64x2_t _Q0, double a8, float64x2_t a9, float64x2_t _Q3, float64x2_t a11, double a12, double a13, float64x2_t a14)
{
  float64x2_t v14;
  float64x2_t v15;
  int v19;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  double v36;
  _BOOL8 result;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int8x16_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  uint64_t v49;
  int8x16_t v50;
  double v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  signed int v56;
  signed int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  double v67;
  int8x16_t v69;
  double v70;
  double v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  int8x8_t v75;
  int32x2_t v76;
  uint64_t v77;
  int8x16_t v78;
  float64x2_t v79;
  float64x2_t v80;
  double v81;
  uint64_t v82;
  int8x16_t v83;
  double v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  int32x2_t v88;
  double v89;

  if (!*(_BYTE *)(a1 + 336))
    goto LABEL_10;
  v19 = *(unsigned __int8 *)(a1 + 320);
  if (!*(_BYTE *)(a1 + 320))
    goto LABEL_10;
  a11.f64[0] = *(float64_t *)(a4 + 112);
  v22 = *(float64x2_t *)(a4 + 96);
  a9.f64[0] = a5[1].f64[0];
  v89 = a11.f64[0];
  *(_QWORD *)&v22.f64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  _Q0 = vsubq_f64(*a5, v22);
  v24.f64[0] = *(float64_t *)(a4 + 16);
  v24.f64[1] = *(float64_t *)(a4 + 48);
  _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a4, *(int64x2_t *)(a4 + 32)), _Q0.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a4, *(int64x2_t *)(a4 + 32)), _Q0, 1), v24, vsubq_f64(a9, a11).f64[0]);
  _D2 = _Q1.f64[1];
  __asm { FMLA            D0, D2, V1.D[1] }
  _Q1 = (int8x16_t)vmulq_n_f64(_Q1, 1.0 / sqrt(_Q0.f64[0]));
  _Q2 = *(float64x2_t *)(a1 + 360);
  v33 = (float64x2_t)vextq_s8(_Q1, _Q1, 8uLL);
  _Q1.i64[0] = _Q1.i64[1];
  __asm { FMLA            D0, D1, V2.D[1]; __x }
  v34 = vmulq_f64(v33, _Q2);
  _Q0.f64[0] = acos(_Q0.f64[0])
             * dbl_2103C0F10[vsubq_f64(v34, (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1)).f64[0] > 0.0];
  v35 = *(double *)(a1 + 328);
  v36 = *(double *)(a1 + 312);
  if (v19 == 1)
  {
    if (_Q0.f64[0] <= v35 + v36)
      goto LABEL_10;
LABEL_7:
    if (!a6)
      return 1;
    _Q1 = *a2;
    _D3 = *(_QWORD *)(a4 + 48);
    __asm { FMLA            D2, D3, V1.D[1] }
    if (v89 + _D2 + *(double *)(a4 + 80) * *(double *)a2[1].i64 > *(double *)(a1 + 176))
      return 1;
    goto LABEL_10;
  }
  if (_Q0.f64[0] < v35 - v36)
    goto LABEL_7;
LABEL_10:
  if (!*(_QWORD *)(a1 + 256))
    return 0;
  if (*(_BYTE *)(a1 + 9))
  {
    v41 = a1 + 80;
    v42 = *a3;
    v43 = a3[1];
    if (*(_BYTE *)(a1 + 24))
    {
      if (*a3 != v43)
      {
        v44 = a2[1].i64[0];
        v45 = *(int8x16_t *)a2;
        v46 = (float64x2_t)vdupq_laneq_s64(*a2, 1);
        v47 = (float64x2_t)vdupq_lane_s64(v44, 0);
        *(_QWORD *)&v48 = vextq_s8(v45, v45, 8uLL).u64[0];
        while (1)
        {
          v49 = *v42;
          a14.f64[0] = *(double *)(*v42 + 24) * *(double *)v45.i64
                     + *(double *)(*v42 + 56) * v48
                     + *(double *)(*v42 + 88) * *(double *)&v44;
          v14.f64[0] = *(float64_t *)(*v42 + 120);
          a14 = vaddq_f64(a14, v14);
          if (a14.f64[0] >= 0.0)
          {
            v50 = (int8x16_t)vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(v49 + 8), *(double *)v45.i64), v46, *(float64x2_t *)(v49 + 40)), v47, *(float64x2_t *)(v49 + 72)), *(float64x2_t *)(v49 + 104));
            v14 = (float64x2_t)vextq_s8(v50, v50, 8uLL);
            v51 = *(double *)(v49 + 176) * *(double *)v50.i64
                + *(double *)(v49 + 200) * v14.f64[0]
                + *(double *)(v49 + 224) * a14.f64[0];
            if (fabs(v51) >= 0.000001)
            {
              v52 = *(float64x2_t *)(v49 + 160);
              v53 = *(float64x2_t *)(v49 + 184);
              v54 = *(float64x2_t *)(v49 + 208);
              *(_QWORD *)&v54.f64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
              *(_QWORD *)&v53.f64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
              *(_QWORD *)&v52.f64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
              v55 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v52, *(double *)v50.i64), v53, v14.f64[0]), v54, a14.f64[0]);
              v56 = llround(1.0 / v51 * v55.f64[0]);
              if ((v56 & 0x80000000) == 0 && *(_DWORD *)(v49 + 240) > v56)
              {
                v57 = llround(vmuld_lane_f64(1.0 / v51, v55, 1));
                if ((v57 & 0x80000000) == 0 && *(_DWORD *)(v49 + 244) > v57)
                {
                  v58 = v57;
                  v59 = v56;
                  v60 = *(_DWORD *)(v49 + 320);
                  v61 = *(_DWORD *)(v49 + 324);
                  v62 = v60 * v59 + v61 * v57;
                  v63 = *(_QWORD *)(v49 + 304);
                  v64 = *(unsigned __int8 *)(v63 + v62);
                  v65 = qword_2103C0F20[128 * v59 + v58];
                  if ((_DWORD)v64 == *(unsigned __int8 *)(v63
                                                         + v65 * v60
                                                         + BYTE1(v65) * v61)
                    && (_DWORD)v64 == *(unsigned __int8 *)(v63 + BYTE3(v65) * v61 + BYTE2(v65) * v60)
                    && (_DWORD)v64 == *(unsigned __int8 *)(v63 + BYTE4(v65) * v60 + BYTE5(v65) * v61)
                    && (_DWORD)v64 == *(unsigned __int8 *)(v63 + v61 * HIBYTE(v65) + BYTE6(v65) * v60)
                    && *(_BYTE *)(v41 + v64))
                  {
                    break;
                  }
                }
              }
            }
          }
          if (++v42 == v43)
            return 0;
        }
        return 1;
      }
    }
    else if (*a3 != v43)
    {
      v77 = a2[1].i64[0];
      v78 = *(int8x16_t *)a2;
      v79 = (float64x2_t)vdupq_laneq_s64(*a2, 1);
      v80 = (float64x2_t)vdupq_lane_s64(v77, 0);
      *(_QWORD *)&v81 = vextq_s8(v78, v78, 8uLL).u64[0];
      while (1)
      {
        v82 = *v42;
        v14.f64[0] = *(double *)(*v42 + 24) * *(double *)v78.i64
                   + *(double *)(*v42 + 56) * v81
                   + *(double *)(*v42 + 88) * *(double *)&v77;
        v15.f64[0] = *(float64_t *)(*v42 + 120);
        v14 = vaddq_f64(v14, v15);
        if (v14.f64[0] >= 0.0)
        {
          v83 = (int8x16_t)vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(v82 + 8), *(double *)v78.i64), v79, *(float64x2_t *)(v82 + 40)), v80, *(float64x2_t *)(v82 + 72)), *(float64x2_t *)(v82 + 104));
          v15 = (float64x2_t)vextq_s8(v83, v83, 8uLL);
          v84 = *(double *)(v82 + 176) * *(double *)v83.i64
              + *(double *)(v82 + 200) * v15.f64[0]
              + *(double *)(v82 + 224) * v14.f64[0];
          if (fabs(v84) >= 0.000001)
          {
            v85 = *(float64x2_t *)(v82 + 160);
            v86 = *(float64x2_t *)(v82 + 184);
            v87 = *(float64x2_t *)(v82 + 208);
            *(_QWORD *)&v87.f64[1] = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
            *(_QWORD *)&v86.f64[1] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u64[0];
            *(_QWORD *)&v85.f64[1] = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u64[0];
            v14 = (float64x2_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v85, *(double *)v83.i64), v86, v15.f64[0]), v87, v14.f64[0]), 1.0 / v84)));
            *(int32x2_t *)&v14.f64[0] = vmovn_s64((int64x2_t)v14);
            if ((LODWORD(v14.f64[0]) & 0x80000000) == 0
              && *(_DWORD *)(v82 + 240) > SLODWORD(v14.f64[0])
              && (HIDWORD(v14.f64[0]) & 0x80000000) == 0
              && *(_DWORD *)(v82 + 244) > SHIDWORD(v14.f64[0]))
            {
              v88 = vmul_s32(*(int32x2_t *)(v82 + 320), (int32x2_t)vand_s8(*(int8x8_t *)&v14.f64[0], (int8x8_t)0xFF000000FFLL));
              if (*(_BYTE *)(v41
                            + *(unsigned __int8 *)(*(_QWORD *)(v82 + 304) + vadd_s32(vdup_lane_s32(v88, 1), v88).u32[0])))
                break;
            }
          }
        }
        if (++v42 == v43)
          return 0;
      }
      return 1;
    }
    return 0;
  }
  v66 = *(_QWORD *)(a1 + 248);
  _Q3.f64[0] = *(float64_t *)(v66 + 80);
  v67 = *(double *)a2[1].i64;
  _Q2 = *(float64x2_t *)a2;
  __asm { FMLA            D0, D3, V2.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + *(double *)(v66 + 112) * v67;
  _Q3.f64[0] = *(float64_t *)(v66 + 144);
  _Q0.f64[0] = vaddq_f64(_Q0, _Q3).f64[0];
  if (_Q0.f64[0] < 0.0)
    return 0;
  v69 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v66 + 32), _Q2.f64[0]), *(float64x2_t *)(v66 + 64), _Q2, 1), *(float64x2_t *)(v66 + 96), v67), *(float64x2_t *)(v66 + 128));
  v70 = *(double *)vextq_s8(v69, v69, 8uLL).i64;
  v71 = *(double *)(v66 + 200) * *(double *)v69.i64 + *(double *)(v66 + 224) * v70 + *(double *)(v66 + 248) * _Q0.f64[0];
  if (fabs(v71) < 0.000001)
    return 0;
  v72 = *(float64x2_t *)(v66 + 184);
  v73 = *(float64x2_t *)(v66 + 208);
  v74 = *(float64x2_t *)(v66 + 232);
  *(_QWORD *)&v74.f64[1] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
  *(_QWORD *)&v73.f64[1] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
  *(_QWORD *)&v72.f64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
  v75 = (int8x8_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v72, *(double *)v69.i64), v73, v70), v74, _Q0.f64[0]), 1.0 / v71))));
  if (v75.i32[0] < 0)
    return 0;
  result = 0;
  if (*(_DWORD *)(v66 + 264) > v75.i32[0] && (v75.i32[1] & 0x80000000) == 0)
  {
    if (*(_DWORD *)(v66 + 268) > v75.i32[1])
    {
      v76 = vmul_s32(*(int32x2_t *)(v66 + 344), (int32x2_t)vand_s8(v75, (int8x8_t)0xFF000000FFLL));
      return *(_BYTE *)(a1
                      + *(unsigned __int8 *)(*(_QWORD *)(v66 + 328) + vadd_s32(vdup_lane_s32(v76, 1), v76).u32[0])
                      + 80) != 0;
    }
    return 0;
  }
  return result;
}

void sub_20FDB31D4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;

  if (*(_QWORD *)(a1 + 256))
  {
    v2 = *(_QWORD **)(a1 + 248);
    while (v2)
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      v3[38] = &off_24CA1A9A0;
      v4 = (std::__shared_weak_count *)v3[40];
      if (!v4)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
        v3[35] = &off_24CA1A9A0;
        v7 = (std::__shared_weak_count *)v3[37];
        if (v7)
        {
LABEL_10:
          v8 = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
      else
      {
LABEL_9:
        v3[35] = &off_24CA1A9A0;
        v7 = (std::__shared_weak_count *)v3[37];
        if (v7)
          goto LABEL_10;
      }
      operator delete(v3);
    }
    *(_QWORD *)(a1 + 248) = 0;
    v10 = *(_QWORD *)(a1 + 240);
    if (v10)
    {
      for (i = 0; i != v10; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 256) = 0;
  }
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  if (*(_BYTE *)(a1 + 336))
    *(_BYTE *)(a1 + 336) = 0;
  if (*(_BYTE *)(a1 + 376))
    *(_BYTE *)(a1 + 376) = 0;
}

_QWORD *sub_20FDB3304(_QWORD *a1)
{
  *a1 = &off_24CA07098;
  sub_20FDB33F0(a1 + 23);
  return a1;
}

void sub_20FDB3334(_QWORD *a1)
{
  *a1 = &off_24CA07098;
  sub_20FDB33F0(a1 + 23);
  JUMPOUT(0x212BC6398);
}

void sub_20FDB3374(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  sub_20FDB3C68(a1 + 232, a2, 0, a3, a4, a5);
}

uint8x8_t sub_20FDB3380(int8x8_t *a1, unint64_t a2, uint64_t a3)
{
  return sub_20FDB06FC(a1 + 23, a2, a3);
}

void sub_20FDB3388(int8x8_t *a1, unint64_t a2)
{
  sub_20FDAF518(a1 + 23, a2);
}

float sub_20FDB3390(uint64_t a1, uint64_t *a2)
{
  _BYTE v3[27];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3[0] = 0;
  v3[26] = 0;
  return sub_20FDB3784(a2, a1 + 80, (uint64_t)v3);
}

_QWORD *sub_20FDB33F0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;

  v2 = a1[12];
  a1[12] = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x212BC6398](v2, 0xA0C40BD48D6D6);
  }
  v6 = a1[11];
  a1[11] = 0;
  if (v6)
  {
    v7 = *(std::__shared_weak_count **)(v6 + 8);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    MEMORY[0x212BC6398](v6, 0xA0C40BD48D6D6);
  }
  v10 = (_QWORD *)a1[8];
  while (v10)
  {
    v11 = v10;
    v10 = (_QWORD *)*v10;
    v11[38] = &off_24CA1A9A0;
    v12 = (std::__shared_weak_count *)v11[40];
    if (!v12)
      goto LABEL_22;
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v11[35] = &off_24CA1A9A0;
      v15 = (std::__shared_weak_count *)v11[37];
      if (v15)
      {
LABEL_23:
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
LABEL_22:
      v11[35] = &off_24CA1A9A0;
      v15 = (std::__shared_weak_count *)v11[37];
      if (v15)
        goto LABEL_23;
    }
    operator delete(v11);
  }
  v18 = (void *)a1[6];
  a1[6] = 0;
  if (v18)
    operator delete(v18);
  return a1;
}

uint64_t sub_20FDB359C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  __int128 v10;

  __p = operator new(0x20uLL);
  v10 = xmmword_2102DCC80;
  strcpy((char *)__p, "SemanticsManager parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsManagerConfig.enable_semantics", v4, "Enable semantics manager.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsManagerConfig.enable_semantics_keyframing", v5, "Enable semantics keyframing.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsManagerConfig.enable_semantics_erosion", v6, "Enable semantics erosion.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 168));
  sub_20E8B2F9C((uint64_t *)&__p, "SemanticsManagerConfig.max_track_depth_to_ignore_extrapolation", v7, "Max track depth from camera to ignore semantics extrapolation.");
  sub_20FDB1F34(a1 + 24, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20FDAF12C(a1 + 144, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20FDB371C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

float sub_20FDB3784(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v9;
  unsigned int v10;
  __int16 *v11;
  unsigned __int8 *v12;
  BOOL v13;
  char v14;
  float result;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned __int8 v22;
  float v24;
  unsigned __int8 v29;
  float v30;
  uint64_t v33;
  unsigned __int8 v34;
  float v35;
  unsigned __int8 v38;
  float v39;
  float v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  float v52;
  float v55;
  unsigned __int8 *v57;
  float v59;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  float v64;
  unsigned __int8 *v67;
  float v69;
  float v72;
  uint64_t v74[3];

  v6 = sub_21015D618(*a1);
  sub_21015BC90(*a1, v74);
  v7 = (unsigned __int8 *)v74[0];
  if ((_DWORD)v6)
    _ZF = HIDWORD(v6) == 0;
  else
    _ZF = 1;
  if (_ZF)
    v9 = 0;
  else
    v9 = v6;
  if (v9 <= 0x100000000)
    v10 = 0;
  else
    v10 = v9;
  if (HIDWORD(v9) * v10 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0)|| (sub_21015C09C(*a1 + 24, v74), v11 = (__int16 *)v74[0], sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))|| (sub_21015BC90(*a1 + 48, v74), v12 = (unsigned __int8 *)v74[0],
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0)))
    {
      abort();
    }
  }
  else
  {
    sub_21015C09C(*a1 + 24, v74);
    v11 = (__int16 *)v74[0];
    sub_21015BC90(*a1 + 48, v74);
    v12 = (unsigned __int8 *)v74[0];
  }
  if ((_DWORD)v9)
    v13 = HIDWORD(v9) == 0;
  else
    v13 = 1;
  v14 = v13;
  result = 0.0;
  if (!*(_BYTE *)(a3 + 26))
  {
    if ((v14 & 1) != 0)
      return result;
    v43 = v9 != 0;
    v44 = v9 - 1;
    v45 = HIDWORD(v9) - 1;
    if (HIDWORD(v9) != 1)
    {
      v46 = v10 + v10 * (unint64_t)(HIDWORD(v9) - 2);
      if ((_DWORD)v9 == 1)
      {
        v67 = v7;
        do
        {
          _H3 = *v11;
          if (*(_BYTE *)(a2 + *v67))
            v69 = 1.0;
          else
            v69 = 0.0;
          __asm { FCVT            S3, H3 }
          result = result + (float)(_S3 * v69);
          v67 += v10;
          v11 += v10;
          --v45;
        }
        while (v45);
        v7 += v46;
LABEL_96:
        _H1 = *v11;
        v72 = 0.0;
        if (*(_BYTE *)(a2 + *v7))
          v72 = 1.0;
        __asm { FCVT            S1, H1 }
        v42 = _S1 * v72;
        return result + v42;
      }
      v47 = 0;
      v48 = v7;
      do
      {
        v49 = 0;
        v50 = v9 - 1;
        do
        {
          _H3 = v11[v49];
          if (*(_BYTE *)(a2 + v48[v49]))
            v52 = 1.0;
          else
            v52 = 0.0;
          __asm { FCVT            S3, H3 }
          result = result + (float)(_S3 * v52);
          v49 += v43;
          --v50;
        }
        while (v50);
        _H3 = v11[v49];
        if (*(_BYTE *)(a2 + v48[v49]))
          v55 = 1.0;
        else
          v55 = 0.0;
        __asm { FCVT            S3, H3 }
        result = result + (float)(_S3 * v55);
        v48 += v10;
        v11 += v10;
        ++v47;
      }
      while (v47 != v45);
      v7 += v46;
    }
    if ((_DWORD)v9 != 1)
    {
      v57 = v7;
      do
      {
        _H3 = *v11;
        if (*(_BYTE *)(a2 + *v57))
          v59 = 1.0;
        else
          v59 = 0.0;
        __asm { FCVT            S3, H3 }
        result = result + (float)(_S3 * v59);
        v57 += v43;
        v11 += v43;
        --v44;
      }
      while (v44);
      if ((_DWORD)v9)
        v61 = (v9 - 2) + 1;
      else
        v61 = 0;
      v7 += v61;
    }
    goto LABEL_96;
  }
  if ((v14 & 1) != 0)
    return result;
  v16 = v9 != 0;
  v17 = v9 - 1;
  v18 = HIDWORD(v9) - 1;
  if (HIDWORD(v9) == 1)
    goto LABEL_41;
  if ((_DWORD)v9 != 1)
  {
    v19 = 0;
    do
    {
      v20 = 0;
      v21 = v9 - 1;
      do
      {
        if (*(_BYTE *)(a3 + v12[v20]))
          v22 = v7[v20];
        else
          v22 = 0;
        v7[v20] = v22;
        _H3 = v11[v20];
        if (*(_BYTE *)(a2 + v22))
          v24 = 1.0;
        else
          v24 = 0.0;
        __asm { FCVT            S3, H3 }
        result = result + (float)(_S3 * v24);
        v20 += v16;
        --v21;
      }
      while (v21);
      if (*(_BYTE *)(a3 + v12[v20]))
        v29 = v7[v20];
      else
        v29 = 0;
      v7[v20] = v29;
      if (*(_BYTE *)(a2 + v29))
        v30 = 1.0;
      else
        v30 = 0.0;
      _H4 = v11[v20];
      __asm { FCVT            S4, H4 }
      result = result + (float)(_S4 * v30);
      v7 += v10;
      v11 += v10;
      v12 += v10;
      ++v19;
    }
    while (v19 != v18);
LABEL_41:
    if ((_DWORD)v9 != 1)
    {
      v33 = 0;
      do
      {
        if (*(_BYTE *)(a3 + v12[v33]))
          v34 = v7[v33];
        else
          v34 = 0;
        v7[v33] = v34;
        if (*(_BYTE *)(a2 + v34))
          v35 = 1.0;
        else
          v35 = 0.0;
        _H4 = *v11;
        __asm { FCVT            S4, H4 }
        result = result + (float)(_S4 * v35);
        v33 += v16;
        v11 += v16;
        --v17;
      }
      while (v17);
      v7 += v33;
      v12 += v33;
    }
    goto LABEL_51;
  }
  v62 = 0;
  do
  {
    if (*(_BYTE *)(a3 + v12[v62]))
      v63 = v7[v62];
    else
      v63 = 0;
    v7[v62] = v63;
    if (*(_BYTE *)(a2 + v63))
      v64 = 1.0;
    else
      v64 = 0.0;
    _H4 = *v11;
    __asm { FCVT            S4, H4 }
    result = result + (float)(_S4 * v64);
    v62 += v10;
    v11 += v10;
    --v18;
  }
  while (v18);
  v7 += v62;
  v12 += v62;
LABEL_51:
  if (*(_BYTE *)(a3 + *v12))
    v38 = *v7;
  else
    v38 = 0;
  *v7 = v38;
  v39 = 0.0;
  if (*(_BYTE *)(a2 + v38))
    v39 = 1.0;
  _H2 = *v11;
  __asm { FCVT            S2, H2 }
  v42 = _S2 * v39;
  return result + v42;
}

void sub_20FDB3C68(uint64_t a1@<X0>, uint64_t a2@<X1>, double **a3@<X2>, char **a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  float64x2_t *v6;
  double **v7;
  char *v12;
  float64x2_t v17;
  int8x16_t v18;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v29;
  float64x2_t v31;
  double v32;
  double v34;
  double v36;
  float64x2_t v37;
  float64x2_t v40;
  double v46;
  uint64_t *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  double *v62;
  uint64_t v63;
  double *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  double *v71;
  int64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float64x2_t *v76;
  float64x2_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  uint64_t v86;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  float64x2_t v94;
  uint64_t v95;
  float64x2_t v96;
  double v97;
  __int128 v98;
  double v99;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v6 = *(float64x2_t **)(a1 + 16);
  if (v6)
  {
    v7 = a3;
    v12 = 0;
    _Q0.f64[0] = *(float64_t *)(a2 + 16);
    _D3 = *(_QWORD *)(a2 + 80);
    _D5 = *(double *)(a2 + 112);
    _Q6 = *(float64x2_t *)(a2 + 96);
    v17 = vnegq_f64(_Q6);
    _Q0.f64[1] = *(float64_t *)(a2 + 48);
    v18 = (int8x16_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 32)), v17.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 32)), _Q6, 1), _Q0, _D5, 0);
    _Q1 = vmulq_f64(*(float64x2_t *)(a2 + 64), v17);
    _Q0.f64[0] = *(float64_t *)(a2 + 72);
    __asm { FMLS            D1, D0, V6.D[1] }
    _Q0 = (float64x2_t)vextq_s8(v18, v18, 8uLL);
    v18.i64[1] = *(_QWORD *)&_Q0.f64[0];
    __asm { FMLS            D1, D3, V5.D[0] }
    v88 = _Q1;
    v89 = (float64x2_t)v18;
    do
    {
      _Q0.f64[0] = v6[11].f64[0];
      v91 = _Q0;
      v90 = v6[10];
      v26.f64[1] = v6[10].f64[1];
      v26.f64[0] = v6[3].f64[0];
      v27 = v6[2];
      _D2 = v6[5].f64[0];
      v29 = v6[4];
      _D4 = v6[7].f64[0];
      v31 = v6[6];
      _Q6.f64[0] = *(float64_t *)(a2 + 16);
      v32 = *(double *)(a2 + 48);
      _Q17 = *(float64x2_t *)(a2 + 32);
      v34 = *(double *)(a2 + 80);
      _Q19 = *(float64x2_t *)(a2 + 64);
      v36 = vmlad_n_f64(vmlad_n_f64(v26.f64[0] * *(double *)a2, _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v37 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v27, *(float64x2_t *)a2, 1), v29, _Q17, 1), v31, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v92 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v27, *(double *)a2), v29, _Q17.f64[0]), v31, _Q19.f64[0]);
      v93 = v36;
      v94 = v37;
      v95 = _D7;
      v96 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v27, _Q6.f64[0]), v29, v32), v31, v34);
      v97 = vmulq_f64(v26, _Q6).f64[0] + _D2 * v32 + _D4 * v34;
      v98 = 0uLL;
      v99 = 0.0;
      sub_20E9733B8(&v92, (double *)&v98);
      v40 = v90;
      *(_QWORD *)&v40.f64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
      _Q0 = vsubq_f64(v89, v40);
      *(_QWORD *)&v40.f64[0] = *(_OWORD *)&vsubq_f64(v88, v91);
      _D3 = _Q0.f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      if (vmlad_n_f64(_D2, v40.f64[0], v40.f64[0]) >= a5)
        goto LABEL_3;
      _V1.D[1] = *((_QWORD *)&v98 + 1);
      _D3 = *((_QWORD *)&v98 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      v46 = sqrt(_D2 + v99 * v99) * 180.0 / 3.14159265;
      if (v46 >= a6)
      {
LABEL_3:
        v25 = (uint64_t)v12;
        goto LABEL_4;
      }
      v47 = (uint64_t *)&v6[1].f64[1];
      v48 = (unint64_t)a4[2];
      if ((unint64_t)v12 < v48)
      {
        *(_QWORD *)v12 = v47;
        v25 = (uint64_t)(v12 + 8);
        goto LABEL_23;
      }
      v49 = *a4;
      v50 = v12 - *a4;
      v51 = v50 >> 3;
      v52 = (v50 >> 3) + 1;
      if (v52 >> 61)
        sub_20E867F44();
      v53 = v48 - (_QWORD)v49;
      if (v53 >> 2 > v52)
        v52 = v53 >> 2;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (v54)
      {
        if (v54 >> 61)
          sub_20E877A38();
        v55 = operator new(8 * v54);
        v56 = &v55[8 * v51];
        *(_QWORD *)v56 = v47;
        v25 = (uint64_t)(v56 + 8);
        v57 = (char *)(v12 - v49);
        if (v12 != v49)
        {
LABEL_18:
          v58 = (unint64_t)(v57 - 8);
          if (v58 < 0x168
            || (v73 = (v12 - 8 - v49) & 0xFFFFFFFFFFFFFFF8, &v55[v50 - 8 - v73] > &v55[v50 - 8])
            || &v12[-v73 - 8] > v12 - 8
            || (unint64_t)(v12 - v55 - v50) < 0x20)
          {
            v59 = v12;
            v7 = a3;
          }
          else
          {
            v74 = (v58 >> 3) + 1;
            v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v12[-v75];
            v56 -= v75;
            v76 = (float64x2_t *)&v55[8 * v51 - 16];
            v77 = (float64x2_t *)(v12 - 16);
            v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
            v7 = a3;
            do
            {
              _Q0 = *v77;
              v76[-1] = v77[-1];
              *v76 = _Q0;
              v76 -= 2;
              v77 -= 2;
              v78 -= 4;
            }
            while (v78);
            if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_21:
              v12 = *a4;
              *a4 = v56;
              a4[1] = (char *)v25;
              a4[2] = &v55[8 * v54];
              if (!v12)
                goto LABEL_23;
LABEL_22:
              operator delete(v12);
              goto LABEL_23;
            }
          }
          do
          {
            v60 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *((_QWORD *)v56 - 1) = v60;
            v56 -= 8;
          }
          while (v59 != v49);
          goto LABEL_21;
        }
      }
      else
      {
        v55 = 0;
        v56 = (char *)(8 * v51);
        *(_QWORD *)(8 * v51) = v47;
        v25 = 8 * v51 + 8;
        v57 = (char *)(v12 - v49);
        if (v12 != v49)
          goto LABEL_18;
      }
      v7 = a3;
      *a4 = v56;
      a4[1] = (char *)v25;
      a4[2] = &v55[8 * v54];
      if (v12)
        goto LABEL_22;
LABEL_23:
      a4[1] = (char *)v25;
      if (v7)
      {
        v62 = v7[1];
        v61 = (unint64_t)v7[2];
        if ((unint64_t)v62 < v61)
        {
          *v62 = v46;
          v63 = (uint64_t)(v62 + 1);
LABEL_55:
          v7[1] = (double *)v63;
          goto LABEL_4;
        }
        v64 = *v7;
        v65 = (char *)v62 - (char *)*v7;
        v66 = v65 >> 3;
        v67 = (v65 >> 3) + 1;
        if (v67 >> 61)
          sub_20E867F44();
        v68 = v61 - (_QWORD)v64;
        if (v68 >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          if (v69 >> 61)
            sub_20E877A38();
          v70 = operator new(8 * v69);
          v71 = (double *)&v70[8 * v66];
          *v71 = v46;
          v63 = (uint64_t)(v71 + 1);
          v72 = (char *)v62 - (char *)v64;
          if (v62 == v64)
            goto LABEL_53;
LABEL_47:
          v79 = v72 - 8;
          if (v79 < 0x58)
            goto LABEL_63;
          if ((unint64_t)((char *)v62 - v70 - v65) < 0x20)
            goto LABEL_63;
          v80 = (v79 >> 3) + 1;
          v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
          v82 = &v62[v81 / 0xFFFFFFFFFFFFFFF8];
          v71 = (double *)((char *)v71 - v81);
          v83 = (float64x2_t *)&v70[8 * v66 - 16];
          v84 = (float64x2_t *)(v62 - 2);
          v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            _Q0 = *v84;
            v83[-1] = v84[-1];
            *v83 = _Q0;
            v83 -= 2;
            v84 -= 2;
            v85 -= 4;
          }
          while (v85);
          v62 = v82;
          if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_63:
            do
            {
              v86 = *((_QWORD *)v62-- - 1);
              *((_QWORD *)v71-- - 1) = v86;
            }
            while (v62 != v64);
          }
        }
        else
        {
          v70 = 0;
          v71 = (double *)(8 * v66);
          *(double *)(8 * v66) = v46;
          v63 = 8 * v66 + 8;
          v72 = (char *)v62 - (char *)v64;
          if (v62 != v64)
            goto LABEL_47;
        }
LABEL_53:
        v7 = a3;
        *a3 = v71;
        a3[1] = (double *)v63;
        a3[2] = (double *)&v70[8 * v69];
        if (v64)
          operator delete(v64);
        goto LABEL_55;
      }
LABEL_4:
      v6 = *(float64x2_t **)&v6->f64[0];
      v12 = (char *)v25;
    }
    while (v6);
  }
}

void sub_20FDB4150(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDB417C(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, float64x2_t a6, double a7, float64x2_t a8, double a9, double a10, float64x2_t a11, double a12, float64x2_t a13)
{
  double *v13;
  uint64_t v16;
  double v17;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23[2];
  double **v24;
  double **v25;
  double **v26;
  double *v27;

  v27 = a3;
  v13 = *(double **)a5;
  if (**(double **)a5 < *a3)
    return 0;
  v16 = *(_QWORD *)(a5 + 8);
  a6.f64[0] = *(float64_t *)(v16 - 8);
  v17 = *(double *)(a4 - 32);
  if (a6.f64[0] > v17)
    return 0;
  v25 = &v27;
  v26 = &v27;
  v20 = (a4 - (uint64_t)a3) >> 5;
  v24 = (double **)a5;
  v21 = (v16 - (uint64_t)v13) >> 3;
  v22 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  if (v21 <= v22)
  {
    if (v21 < v22)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 32 * v21;
  }
  else
  {
    sub_20EAF5F94((char **)a2, v21 - v22);
    v21 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3;
  }
  v23[0] = (_QWORD *)a2;
  v23[1] = (_QWORD *)a5;
  sub_20FDB48EC(a1, &v26, (uint64_t **)&v25, v20, &v24, v23, v21, a6, v17, a8, a9, a10, a11, a12, a13);
  return 1;
}

uint64_t sub_20FDB4284(uint64_t a1, uint64_t a2, uint64_t **a3, _QWORD *a4, uint64_t a5, float64x2_t a6, double a7, float64x2_t a8, double a9, double a10, float64x2_t a11, float64x2_t a12, float64x2_t a13)
{
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float64x2_t v37;
  float64x2_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v52;
  float64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float64x2_t *v61;
  float64x2_t *v62;
  double *v63;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  float64x2_t v71;
  float64x2_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  double v79;
  double v80;
  unint64_t v81;
  double v82;
  uint64_t v83;
  float64x2_t v84;
  unint64_t v85;
  uint64_t v86;
  float64x2_t v87;
  unint64_t v88;
  uint64_t v89;
  float64x2_t v90;
  uint64_t v91;
  int8x16_t v92;
  float64x2_t v93;
  unint64_t v94;
  float64x2_t v95;
  float64x2_t v96;
  int8x16_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  double *v111;
  float64x2_t *v112;
  double v113;

  v17 = a3[2];
  if (**(double **)a5 < *(double *)(**a3 + 32 * (((unint64_t)v17 + (*a3)[3]) % (((*a3)[1] - **a3) >> 5))))
    return 0;
  v20 = *(_QWORD *)(a5 + 8);
  v21 = a4[2];
  if (*(double *)(v20 - 8) > *(double *)(*(_QWORD *)*a4
                                        + 32
                                        * ((v21 + *(_QWORD *)(*a4 + 24) - 1)
                                         % (unint64_t)((uint64_t)(*(_QWORD *)(*a4 + 8) - *(_QWORD *)*a4) >> 5))))
    return 0;
  v25 = *(_QWORD *)(*a4 + 40);
  if (!*((_BYTE *)a4 + 8))
  {
    if (v17 || v21 || *((_BYTE *)a3 + 8))
    {
      if (!v21 && *((_BYTE *)a3 + 8))
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_13:
    v25 = 0;
    goto LABEL_17;
  }
  if (*((_BYTE *)a3 + 8))
    goto LABEL_13;
  if (v17)
  {
LABEL_16:
    v25 = (uint64_t)v17 - v21;
    goto LABEL_17;
  }
  v25 = -v25;
LABEL_17:
  v26 = -v25;
  v27 = (v20 - *(_QWORD *)a5) >> 3;
  v28 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  if (v27 <= v28)
  {
    if (v27 < v28)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 32 * v27;
  }
  else
  {
    sub_20EAF5F94((char **)a2, v27 - v28);
    v27 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (v25)
    sub_20E93D8FC(a1, -v25);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = (uint64_t *)(a1 + 24);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 32) - v29) >> 3);
  if (v26 <= v31)
  {
    if (v26 < v31)
      *(_QWORD *)(a1 + 32) = v29 - 24 * v25;
  }
  else
  {
    sub_20F11D1A8((void **)(a1 + 24), v26 - v31);
    v29 = *v30;
  }
  v32 = (unint64_t)a3[2] + (*a3)[3];
  v33 = **a3;
  v34 = ((*a3)[1] - v33) >> 5;
  v35 = v33 + 32 * ((v32 + 1) % v34);
  a6.f64[0] = *(float64_t *)(v35 + 24);
  v36 = v33 + 32 * (v32 % v34);
  a8.f64[0] = *(float64_t *)(v36 + 24);
  v50 = *(float64x2_t *)(v36 + 8);
  v37 = vsubq_f64(a6, a8);
  __asm { FMOV            V0.2D, #3.0 }
  v43 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v35 + 8), v50), _Q0);
  *(float64x2_t *)v29 = v43;
  *(_QWORD *)(v29 + 16) = *(_OWORD *)&vmulq_f64(v37, _Q0);
  v44 = (char *)a3[2];
  v45 = (*a3)[3];
  v46 = **a3;
  v47 = ((*a3)[1] - v46) >> 5;
  v48 = v46 + 32 * ((unint64_t)&v44[~v25 + v45] % v47);
  v43.f64[0] = *(float64_t *)(v48 + 24);
  v49 = v46 + 32 * ((unint64_t)&v44[v45 - v25 - 2] % v47);
  v50.f64[0] = *(float64_t *)(v49 + 24);
  v51 = *(float64x2_t *)(v49 + 8);
  v52 = *(_QWORD *)(a1 + 32);
  v53 = vmulq_f64(vsubq_f64(v43, v50), _Q0);
  *(float64x2_t *)(v52 - 24) = vmulq_f64(vsubq_f64(*(float64x2_t *)(v48 + 8), v51), _Q0);
  *(float64_t *)(v52 - 8) = v53.f64[0];
  if (v26 >= 3)
  {
    v54 = 2;
    v55 = 24;
    do
    {
      v56 = **a3;
      v57 = (unint64_t)a3[2] + v54 + (*a3)[3];
      v58 = ((*a3)[1] - v56) >> 5;
      v59 = v56 + 32 * (v57 % v58);
      v53.f64[0] = *(float64_t *)(v59 + 24);
      v60 = v56 + 32 * ((v57 - 2) % v58);
      v50.f64[0] = *(float64_t *)(v60 + 24);
      v51 = *(float64x2_t *)(v60 + 8);
      v61 = (float64x2_t *)(*v30 + v55);
      v53 = vmulq_f64(vsubq_f64(v53, v50), _Q0);
      *v61 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v59 + 8), v51), _Q0);
      v61[1].f64[0] = v53.f64[0];
      ++v54;
      v55 += 24;
    }
    while (v26 != v54);
  }
  v62 = *(float64x2_t **)(a1 + 24);
  v63 = *(double **)a1;
  **(_QWORD **)a1 = 0x3FE0000000000000;
  v53.f64[0] = v62[1].f64[0];
  __asm { FMOV            V3.2D, #0.5 }
  v65 = vmulq_f64(v53, _Q3);
  *v62 = vmulq_f64(*v62, _Q3);
  v62[1].f64[0] = v65.f64[0];
  if (v26 >= 2)
  {
    if (v25 == -2)
      v109 = 2.0;
    else
      v109 = 4.0;
    v51.f64[0] = v109 - *v63;
    if (v51.f64[0] == 0.0)
      return 1;
    v110 = 0;
    v111 = v63 + 1;
    v112 = (float64x2_t *)((char *)v62 + 24);
    while (1)
    {
      v51.f64[0] = 1.0 / v51.f64[0];
      v111[v110] = v51.f64[0];
      a11.f64[0] = v112[-1].f64[1];
      a13.f64[0] = v112[1].f64[0];
      a12 = vsubq_f64(*v112, *(float64x2_t *)((char *)v112 - 24));
      a11 = vmulq_f64(v51, vsubq_f64(a13, a11));
      v51 = vmulq_n_f64(a12, v51.f64[0]);
      *v112 = v51;
      v112[1].f64[0] = a11.f64[0];
      if (v26 - 2 == v110)
        break;
      if (v26 - 3 == v110)
        v113 = 2.0;
      else
        v113 = 4.0;
      v51.f64[0] = v113 - v111[v110++];
      v112 = (float64x2_t *)((char *)v112 + 24);
      if (v51.f64[0] == 0.0)
      {
        if (v110 + 1 >= v26)
          goto LABEL_34;
        return 1;
      }
    }
  }
  if (v25 != -1)
  {
    v66 = (float64x2_t *)((char *)v62 + 24 * ~v25);
    v67 = *v66;
    v65.f64[0] = v66[1].f64[0];
    v68 = (float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL);
    v69 = (uint64_t)&v62[-3] - 24 * v25;
    v70 = -v25;
    do
    {
      v51.f64[0] = v63[v70 - 2];
      v67.f64[1] = v68.f64[0];
      v71 = vmulq_n_f64(v67, v51.f64[0]);
      v72 = vmulq_f64(v65, v51);
      v68.f64[0] = *(float64_t *)(v69 + 16);
      v51 = *(float64x2_t *)v69;
      v65 = vsubq_f64(v68, v72);
      v67 = vsubq_f64(*(float64x2_t *)v69, v71);
      v68 = (float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL);
      *(float64x2_t *)v69 = v67;
      *(float64_t *)(v69 + 16) = v65.f64[0];
      --v70;
      v69 -= 24;
    }
    while (v70 != 1);
  }
LABEL_34:
  result = 1;
  if (**(double **)a5 >= *(double *)(**a3 + 32 * (((unint64_t)a3[2] + (*a3)[3]) % (((*a3)[1] - **a3) >> 5)))
    && v26 >= 2
    && v27)
  {
    v73 = 0;
    v74 = 1;
    do
    {
      v75 = (char *)a3[2] + (*a3)[3];
      v76 = **a3;
      v77 = ((*a3)[1] - v76) >> 5;
      v78 = (unint64_t)&v75[v74] % v77;
      v79 = *(double *)(v76 + 32 * v78);
      v80 = *(double *)(*(_QWORD *)a5 + 8 * v73);
      if (v80 <= v79)
      {
        v81 = (unint64_t)&v75[v74 - 1] % v77;
        v82 = *(double *)(v76 + 32 * v81);
        v83 = v76 + 32 * v81;
        v84 = *(float64x2_t *)(v83 + 8);
        a12.f64[0] = *(float64_t *)(v83 + 24);
        v85 = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
        v86 = *v30 + 24 * (v74 - 1);
        v87 = *(float64x2_t *)v86;
        v13.f64[0] = *(float64_t *)(v86 + 16);
        v88 = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
        v89 = v76 + 32 * v78;
        v90 = *(float64x2_t *)(v89 + 8);
        v14.f64[0] = *(float64_t *)(v89 + 24);
        v91 = *v30 + 24 * v74;
        v15.f64[0] = *(float64_t *)(v91 + 16);
        v92 = (int8x16_t)vsubq_f64(vsubq_f64(vmulq_f64(vsubq_f64(v90, v84), _Q0), vaddq_f64(v87, v87)), *(float64x2_t *)v91);
        v93 = vsubq_f64(vsubq_f64(vmulq_f64(vsubq_f64(v14, a12), _Q0), vaddq_f64(v13, v13)), v15);
        v94 = vextq_s8(v92, v92, 8uLL).u64[0];
        v95 = vsubq_f64(a12, v14);
        v96 = vsubq_f64(v84, v90);
        v97 = (int8x16_t)vaddq_f64(*(float64x2_t *)v91, vaddq_f64(*(float64x2_t *)v86, vaddq_f64(v96, v96)));
        v14 = vaddq_f64(v15, vaddq_f64(v13, vaddq_f64(v95, v95)));
        v98 = vextq_s8(v97, v97, 8uLL).u64[0];
        v99 = v73 + 1;
        v100 = 32 * v73;
        do
        {
          v73 = v99;
          v15.f64[0] = (v80 - v82) / (v79 - v82);
          v101.f64[0] = v87.f64[0];
          *(_QWORD *)&v101.f64[1] = v88;
          v102.f64[0] = v84.f64[0];
          *(_QWORD *)&v102.f64[1] = v85;
          v16.f64[0] = v15.f64[0] * v15.f64[0];
          v103 = vaddq_f64(v102, vmulq_n_f64(v101, v15.f64[0]));
          v104 = vaddq_f64(a12, vmulq_f64(v13, v15));
          *(_QWORD *)&v102.f64[0] = v92.i64[0];
          *(_QWORD *)&v102.f64[1] = v94;
          v105 = vmulq_n_f64(v102, v15.f64[0] * v15.f64[0]);
          v15.f64[0] = v15.f64[0] * (v15.f64[0] * v15.f64[0]);
          v106 = vaddq_f64(v103, v105);
          *(_QWORD *)&v105.f64[0] = v97.i64[0];
          *(_QWORD *)&v105.f64[1] = v98;
          v107 = vmulq_n_f64(v105, v15.f64[0]);
          v15 = vmulq_f64(v14, v15);
          v108 = *(_QWORD *)a2 + v100;
          *(double *)v108 = v80;
          *(float64x2_t *)(v108 + 8) = vaddq_f64(v106, v107);
          *(_QWORD *)(v108 + 24) = *(_OWORD *)&vaddq_f64(vaddq_f64(v104, vmulq_f64(v93, v16)), v15);
          if (v73 >= v27)
            break;
          v80 = *(double *)(*(_QWORD *)a5 + 8 * v73);
          v99 = v73 + 1;
          v100 += 32;
        }
        while (v80 <= v79);
      }
      ++v74;
    }
    while (v74 < v26 && v73 < v27);
  }
  return result;
}

BOOL sub_20FDB48EC(uint64_t a1, double ***a2, uint64_t **a3, unint64_t a4, double ***a5, _QWORD **a6, unint64_t a7, float64x2_t a8, double a9, float64x2_t a10, double a11, double a12, float64x2_t a13, double a14, float64x2_t a15)
{
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float64x2_t v40;
  float64x2_t v41;
  uint64_t v42;
  float64x2_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float64x2_t v48;
  float64x2_t *v49;
  float64x2_t *v50;
  double *v51;
  float64x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  unint64_t i;
  float64x2_t v59;
  float64x2_t v60;
  unint64_t v61;
  unint64_t v62;
  double *v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  float64x2_t v68;
  unint64_t v69;
  uint64_t v70;
  float64x2_t v71;
  unint64_t v72;
  uint64_t v73;
  float64x2_t v74;
  uint64_t v75;
  int8x16_t v76;
  float64x2_t v77;
  unint64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  int8x16_t v81;
  unint64_t v82;
  uint64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  uint64_t v91;
  unint64_t v92;
  double v94;
  uint64_t v95;
  double *v96;
  float64x2_t *v97;
  double v98;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (a4)
    sub_20E93D8FC(a1, a4);
  v26 = *(_QWORD *)(a1 + 24);
  v27 = (uint64_t *)(a1 + 24);
  v28 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 32) - v26) >> 3);
  if (a4 <= v28)
  {
    if (a4 < v28)
      *(_QWORD *)(a1 + 32) = v26 + 24 * a4;
  }
  else
  {
    sub_20F11D1A8((void **)(a1 + 24), a4 - v28);
    v26 = *v27;
  }
  v29 = **a3;
  a8.f64[0] = *(float64_t *)(v29 + 56);
  a10.f64[0] = *(float64_t *)(v29 + 24);
  v40 = *(float64x2_t *)(v29 + 8);
  v30 = vsubq_f64(a8, a10);
  __asm { FMOV            V0.2D, #3.0 }
  v36 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v29 + 40), v40), _Q0);
  *(float64x2_t *)v26 = v36;
  *(_QWORD *)(v26 + 16) = *(_OWORD *)&vmulq_f64(v30, _Q0);
  v37 = **a3;
  v38 = v37 + 32 * (a4 - 1);
  v36.f64[0] = *(float64_t *)(v38 + 24);
  v39 = v37 + 32 * a4;
  v40.f64[0] = *(float64_t *)(v39 - 40);
  v41 = *(float64x2_t *)(v39 - 56);
  v42 = *(_QWORD *)(a1 + 32);
  v43 = vmulq_f64(vsubq_f64(v36, v40), _Q0);
  *(float64x2_t *)(v42 - 24) = vmulq_f64(vsubq_f64(*(float64x2_t *)(v38 + 8), v41), _Q0);
  *(float64_t *)(v42 - 8) = v43.f64[0];
  if (a4 >= 3)
  {
    v44 = 0;
    v45 = a4 - 2;
    v46 = 24;
    do
    {
      v47 = **a3 + v44;
      v43.f64[0] = *(float64_t *)(v47 + 88);
      v40.f64[0] = *(float64_t *)(v47 + 24);
      v41 = *(float64x2_t *)(v47 + 8);
      v48 = vsubq_f64(*(float64x2_t *)(v47 + 72), v41);
      v49 = (float64x2_t *)(*v27 + v46);
      v43 = vmulq_f64(vsubq_f64(v43, v40), _Q0);
      *v49 = vmulq_f64(v48, _Q0);
      v49[1].f64[0] = v43.f64[0];
      v46 += 24;
      v44 += 32;
      --v45;
    }
    while (v45);
  }
  v50 = *(float64x2_t **)(a1 + 24);
  v51 = *(double **)a1;
  **(_QWORD **)a1 = 0x3FE0000000000000;
  v43.f64[0] = v50[1].f64[0];
  __asm { FMOV            V3.2D, #0.5 }
  v53 = vmulq_f64(v43, _Q3);
  *v50 = vmulq_f64(*v50, _Q3);
  v50[1].f64[0] = v53.f64[0];
  if (a4 >= 2)
  {
    if (a4 == 2)
      v94 = 2.0;
    else
      v94 = 4.0;
    v41.f64[0] = v94 - *v51;
    if (v41.f64[0] == 0.0)
      return 0;
    v95 = 0;
    v96 = v51 + 1;
    v97 = (float64x2_t *)((char *)v50 + 24);
    while (1)
    {
      v41.f64[0] = 1.0 / v41.f64[0];
      v96[v95] = v41.f64[0];
      a13.f64[0] = v97[-1].f64[1];
      a15.f64[0] = v97[1].f64[0];
      a13 = vmulq_f64(v41, vsubq_f64(a15, a13));
      v41 = vmulq_n_f64(vsubq_f64(*v97, *(float64x2_t *)((char *)v97 - 24)), v41.f64[0]);
      *v97 = v41;
      v97[1].f64[0] = a13.f64[0];
      if (a4 - 2 == v95)
        break;
      if (a4 - 3 == v95)
        v98 = 2.0;
      else
        v98 = 4.0;
      v41.f64[0] = v98 - v96[v95++];
      v97 = (float64x2_t *)((char *)v97 + 24);
      if (v41.f64[0] == 0.0)
      {
        if (v95 + 1 >= a4)
          goto LABEL_14;
        return 0;
      }
    }
  }
  if (a4 != 1)
  {
    v54 = (float64x2_t *)((char *)v50 + 24 * a4 - 24);
    v55 = *v54;
    v53.f64[0] = v54[1].f64[0];
    v56 = (float64x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL);
    v57 = (uint64_t)&v50[-3] + 24 * a4;
    for (i = a4; i != 1; --i)
    {
      v41.f64[0] = v51[i - 2];
      v55.f64[1] = v56.f64[0];
      v59 = vmulq_n_f64(v55, v41.f64[0]);
      v60 = vmulq_f64(v53, v41);
      v56.f64[0] = *(float64_t *)(v57 + 16);
      v41 = *(float64x2_t *)v57;
      v53 = vsubq_f64(v56, v60);
      v55 = vsubq_f64(*(float64x2_t *)v57, v59);
      v56 = (float64x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL);
      *(float64x2_t *)v57 = v55;
      *(float64_t *)(v57 + 16) = v53.f64[0];
      v57 -= 24;
    }
  }
LABEL_14:
  if (***a5 < ***a2)
    return 0;
  v61 = 0;
  if (a4 >= 2 && a7)
  {
    v61 = 0;
    v62 = 1;
    do
    {
      v63 = **a2;
      v64 = v63[4 * v62];
      a15.f64[0] = (**a5)[v61];
      if (a15.f64[0] <= v64)
      {
        v65 = v63[4 * v62 - 4];
        v66 = **a3;
        v67 = v66 + 32 * (v62 - 1);
        v68 = *(float64x2_t *)(v67 + 8);
        a13.f64[0] = *(float64_t *)(v67 + 24);
        v69 = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u64[0];
        v70 = *v27 + 24 * (v62 - 1);
        v71 = *(float64x2_t *)v70;
        v15.f64[0] = *(float64_t *)(v70 + 16);
        v72 = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
        v73 = v66 + 32 * v62;
        v74 = *(float64x2_t *)(v73 + 8);
        v16.f64[0] = *(float64_t *)(v73 + 24);
        v75 = *v27 + 24 * v62;
        v17.f64[0] = *(float64_t *)(v75 + 16);
        v76 = (int8x16_t)vsubq_f64(vsubq_f64(vmulq_f64(vsubq_f64(v74, v68), _Q0), vaddq_f64(v71, v71)), *(float64x2_t *)v75);
        v77 = vsubq_f64(vsubq_f64(vmulq_f64(vsubq_f64(v16, a13), _Q0), vaddq_f64(v15, v15)), v17);
        v78 = vextq_s8(v76, v76, 8uLL).u64[0];
        v79 = vsubq_f64(a13, v16);
        v80 = vsubq_f64(v68, v74);
        v81 = (int8x16_t)vaddq_f64(*(float64x2_t *)v75, vaddq_f64(*(float64x2_t *)v70, vaddq_f64(v80, v80)));
        v16 = vaddq_f64(v17, vaddq_f64(v15, vaddq_f64(v79, v79)));
        v82 = vextq_s8(v81, v81, 8uLL).u64[0];
        v83 = 32 * v61;
        do
        {
          a15.f64[0] = (a15.f64[0] - v65) / (v64 - v65);
          v84.f64[0] = v71.f64[0];
          *(_QWORD *)&v84.f64[1] = v72;
          v18.f64[0] = a15.f64[0] * a15.f64[0];
          v85.f64[0] = v68.f64[0];
          *(_QWORD *)&v85.f64[1] = v69;
          v86 = vaddq_f64(v85, vmulq_n_f64(v84, a15.f64[0]));
          v87 = vaddq_f64(a13, vmulq_f64(v15, a15));
          *(_QWORD *)&v85.f64[0] = v76.i64[0];
          *(_QWORD *)&v85.f64[1] = v78;
          v88 = vmulq_n_f64(v85, a15.f64[0] * a15.f64[0]);
          a15.f64[0] = a15.f64[0] * (a15.f64[0] * a15.f64[0]);
          v89 = vaddq_f64(v87, vmulq_f64(v77, v18));
          *(_QWORD *)&v90.f64[0] = v81.i64[0];
          *(_QWORD *)&v90.f64[1] = v82;
          v18 = vmulq_n_f64(v90, a15.f64[0]);
          a15 = vaddq_f64(v89, vmulq_f64(v16, a15));
          v91 = **a6 + v83;
          *(_QWORD *)v91 = *(_QWORD *)(*a6[1] + 8 * v61);
          *(float64x2_t *)(v91 + 8) = vaddq_f64(vaddq_f64(v86, v88), v18);
          *(float64_t *)(v91 + 24) = a15.f64[0];
          v92 = v61 + 1;
          if (v61 + 1 >= a7)
            break;
          a15.f64[0] = (**a5)[v61 + 1];
          v83 += 32;
          ++v61;
        }
        while (a15.f64[0] <= v64);
        v61 = v92;
      }
      ++v62;
    }
    while (v62 < a4 && v61 < a7);
  }
  return v61 == a7;
}

uint64_t sub_20FDB4D88(uint64_t a1, uint64_t a2, uint64_t **a3, _QWORD *a4, uint64_t **a5, _QWORD *a6, double **a7, float64x2_t a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15)
{
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  uint64_t *v22;
  uint64_t *v24;
  double *v26;
  double v27;
  uint64_t v28;
  uint64_t v31;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  float64x2_t *v39;
  float64x2_t **v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float64x2_t v57;
  uint64_t v58;
  float64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float64x2_t *v67;
  unint64_t v68;
  float64x2_t *v69;
  double *v70;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  float64x2_t v77;
  float64x2_t v78;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  double v87;
  double v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  float64x2_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  float64x2_t v96;
  uint64_t v97;
  int8x16_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  int8x16_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  uint64_t v113;
  double v114;
  double *v115;
  double *v116;
  float64x2_t *v117;
  unint64_t v118;
  float64x2_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float64x2_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  float64x2_t v132;
  uint64_t v133;
  float64x2_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float64x2_t *v142;
  float64x2_t *v143;
  double *v144;
  float64x2_t v145;
  float64x2_t *v146;
  float64x2_t v147;
  float64x2_t v148;
  uint64_t v149;
  uint64_t v150;
  float64x2_t v151;
  float64x2_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  double v160;
  unint64_t v161;
  double v162;
  uint64_t v163;
  float64x2_t v164;
  unint64_t v165;
  uint64_t v166;
  float64x2_t v167;
  unint64_t v168;
  uint64_t v169;
  float64x2_t v170;
  uint64_t v171;
  int8x16_t v172;
  float64x2_t v173;
  unint64_t v174;
  float64x2_t v175;
  float64x2_t v176;
  int8x16_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t *v187;
  double v188;
  uint64_t v189;
  double *v190;
  float64x2_t *v191;
  double v192;
  uint64_t v193;
  double *v194;
  float64x2_t *v195;
  double v196;
  float64x2_t v197;
  float64x2_t v198;
  uint64_t v199;

  v21 = **a7;
  v22 = a3[2];
  if (v21 < *(double *)(**a3 + 32 * (((unint64_t)v22 + (*a3)[3]) % (((*a3)[1] - **a3) >> 5))))
    return 0;
  v24 = a5[2];
  if (v21 < *(double *)(**a5 + 32 * (((unint64_t)v24 + (*a5)[3]) % (((*a5)[1] - **a5) >> 5))))
    return 0;
  v26 = a7[1];
  v27 = *(v26 - 1);
  v28 = a4[2];
  if (v27 > *(double *)(*(_QWORD *)*a4
                       + 32
                       * ((v28 + *(_QWORD *)(*a4 + 24) - 1)
                        % (unint64_t)((uint64_t)(*(_QWORD *)(*a4 + 8) - *(_QWORD *)*a4) >> 5))))
    return 0;
  v31 = a6[2];
  if (v27 > *(double *)(*(_QWORD *)*a6
                       + 32
                       * ((v31 + *(_QWORD *)(*a6 + 24) - 1)
                        % (unint64_t)((uint64_t)(*(_QWORD *)(*a6 + 8) - *(_QWORD *)*a6) >> 5))))
    return 0;
  v34 = *(_QWORD *)(*a4 + 40);
  if (*((_BYTE *)a4 + 8))
  {
    if (!*((_BYTE *)a3 + 8))
    {
      if (!v22)
      {
        v34 = -v34;
        goto LABEL_18;
      }
      goto LABEL_17;
    }
LABEL_14:
    v34 = 0;
    goto LABEL_18;
  }
  if (!v22 && !v28 && !*((_BYTE *)a3 + 8))
    goto LABEL_14;
  if (v28 || !*((_BYTE *)a3 + 8))
LABEL_17:
    v34 = (uint64_t)v22 - v28;
LABEL_18:
  v35 = *(_QWORD *)(*a6 + 40);
  if (*((_BYTE *)a6 + 8))
  {
    if (!*((_BYTE *)a5 + 8))
    {
      if (!v24)
      {
        v35 = -v35;
        goto LABEL_29;
      }
      goto LABEL_28;
    }
LABEL_25:
    v35 = 0;
    goto LABEL_29;
  }
  if (!v24 && !v31 && !*((_BYTE *)a5 + 8))
    goto LABEL_25;
  if (v31 || !*((_BYTE *)a5 + 8))
LABEL_28:
    v35 = (uint64_t)v24 - v31;
LABEL_29:
  v199 = v35;
  v36 = -v34;
  v37 = v26 - *a7;
  v38 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v37 <= v38)
  {
    if (v37 < v38)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 56 * v37;
  }
  else
  {
    sub_20F01F51C((char **)a2, v37 - v38);
    v37 = a7[1] - *a7;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (v34)
    sub_20E93D8FC(a1, -v34);
  v39 = *(float64x2_t **)(a1 + 24);
  v40 = (float64x2_t **)(a1 + 24);
  v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v39) >> 3);
  if (v36 <= v41)
  {
    if (v36 < v41)
      *(_QWORD *)(a1 + 32) = (char *)v39 - 24 * v34;
  }
  else
  {
    sub_20F11D1A8((void **)(a1 + 24), v36 - v41);
    v39 = *v40;
  }
  v42 = (unint64_t)a3[2] + (*a3)[3];
  v43 = **a3;
  v44 = ((*a3)[1] - v43) >> 5;
  v45 = v43 + 32 * ((v42 + 1) % v44);
  a8.f64[0] = *(float64_t *)(v45 + 24);
  v46 = v43 + 32 * (v42 % v44);
  a10.f64[0] = *(float64_t *)(v46 + 24);
  __asm { FMOV            V30.2D, #3.0 }
  v50 = vmulq_f64(vsubq_f64(a8, a10), _Q30);
  *v39 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v45 + 8), *(float64x2_t *)(v46 + 8)), _Q30);
  v39[1].f64[0] = v50.f64[0];
  v51 = (char *)a3[2];
  v52 = (*a3)[3];
  v53 = **a3;
  v54 = ((*a3)[1] - v53) >> 5;
  v55 = v53 + 32 * ((unint64_t)&v51[~v34 + v52] % v54);
  v50.f64[0] = *(float64_t *)(v55 + 24);
  v56 = v53 + 32 * ((unint64_t)&v51[v52 - v34 - 2] % v54);
  a10.f64[0] = *(float64_t *)(v56 + 24);
  v57 = *(float64x2_t *)(v56 + 8);
  v58 = *(_QWORD *)(a1 + 32);
  v59 = vmulq_f64(vsubq_f64(v50, a10), _Q30);
  *(float64x2_t *)(v58 - 24) = vmulq_f64(vsubq_f64(*(float64x2_t *)(v55 + 8), v57), _Q30);
  *(float64_t *)(v58 - 8) = v59.f64[0];
  if (v36 >= 3)
  {
    v60 = 2;
    v61 = 24;
    do
    {
      v62 = **a3;
      v63 = (unint64_t)a3[2] + v60 + (*a3)[3];
      v64 = ((*a3)[1] - v62) >> 5;
      v65 = v62 + 32 * (v63 % v64);
      v59.f64[0] = *(float64_t *)(v65 + 24);
      v66 = v62 + 32 * ((v63 - 2) % v64);
      a10.f64[0] = *(float64_t *)(v66 + 24);
      v57 = *(float64x2_t *)(v66 + 8);
      v67 = (float64x2_t *)((char *)*v40 + v61);
      v59 = vmulq_f64(vsubq_f64(v59, a10), _Q30);
      *v67 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v65 + 8), v57), _Q30);
      v67[1].f64[0] = v59.f64[0];
      ++v60;
      v61 += 24;
    }
    while (v36 != v60);
  }
  v68 = -v199;
  v69 = *(float64x2_t **)(a1 + 24);
  v70 = *(double **)a1;
  **(_QWORD **)a1 = 0x3FE0000000000000;
  v59.f64[0] = v69[1].f64[0];
  __asm { FMOV            V2.2D, #0.5 }
  v72 = vmulq_f64(v59, _Q2);
  v197 = _Q2;
  *v69 = vmulq_f64(*v69, _Q2);
  v69[1].f64[0] = v72.f64[0];
  if (v36 < 2)
  {
LABEL_43:
    if (v34 != -1)
    {
      v73 = (float64x2_t *)((char *)v69 + 24 * ~v34);
      v74 = *v73;
      v72.f64[0] = v73[1].f64[0];
      _Q2 = (float64x2_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL);
      v75 = (uint64_t)&v69[-3] - 24 * v34;
      v76 = -v34;
      do
      {
        v57.f64[0] = v70[v76 - 2];
        v74.f64[1] = _Q2.f64[0];
        v77 = vmulq_n_f64(v74, v57.f64[0]);
        v78 = vmulq_f64(v72, v57);
        _Q2.f64[0] = *(float64_t *)(v75 + 16);
        v57 = *(float64x2_t *)v75;
        v72 = vsubq_f64(_Q2, v78);
        v74 = vsubq_f64(*(float64x2_t *)v75, v77);
        _Q2 = (float64x2_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL);
        *(float64x2_t *)v75 = v74;
        *(float64_t *)(v75 + 16) = v72.f64[0];
        --v76;
        v75 -= 24;
      }
      while (v76 != 1);
    }
LABEL_46:
    if (**a7 >= *(double *)(**a3 + 32 * (((unint64_t)a3[2] + (*a3)[3]) % (((*a3)[1] - **a3) >> 5)))
      && v36 >= 2
      && v37 != 0)
    {
      v81 = 0;
      v82 = 1;
      do
      {
        v83 = (char *)a3[2] + (*a3)[3];
        v84 = **a3;
        v85 = ((*a3)[1] - v84) >> 5;
        v86 = (unint64_t)&v83[v82] % v85;
        v87 = *(double *)(v84 + 32 * v86);
        v88 = (*a7)[v81];
        if (v88 <= v87)
        {
          v89 = (unint64_t)&v83[v82 - 1] % v85;
          v90 = *(double *)(v84 + 32 * v89);
          v91 = v84 + 32 * v89;
          v92 = *(float64x2_t *)(v91 + 8);
          a13.f64[0] = *(float64_t *)(v91 + 24);
          a14 = (float64x2_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL);
          v93 = (uint64_t)&(*v40)[-1] + 24 * v82 - 8;
          a15 = *(float64x2_t *)v93;
          v15.f64[0] = *(float64_t *)(v93 + 16);
          v94 = vextq_s8((int8x16_t)a15, (int8x16_t)a15, 8uLL).u64[0];
          v95 = v84 + 32 * v86;
          v96 = *(float64x2_t *)(v95 + 8);
          v17.f64[0] = *(float64_t *)(v95 + 24);
          v97 = (uint64_t)*v40 + 24 * v82;
          v18.f64[0] = *(float64_t *)(v97 + 16);
          v98 = (int8x16_t)vsubq_f64(vsubq_f64(vmulq_f64(vsubq_f64(v96, v92), _Q30), vaddq_f64(a15, a15)), *(float64x2_t *)v97);
          v99 = vsubq_f64(vsubq_f64(vmulq_f64(vsubq_f64(v17, a13), _Q30), vaddq_f64(v15, v15)), v18);
          v16 = (float64x2_t)vextq_s8(v98, v98, 8uLL);
          v100 = vsubq_f64(a13, v17);
          v101 = vsubq_f64(v92, v96);
          v102 = (int8x16_t)vaddq_f64(*(float64x2_t *)v97, vaddq_f64(*(float64x2_t *)v93, vaddq_f64(v101, v101)));
          v17 = vaddq_f64(v18, vaddq_f64(v15, vaddq_f64(v100, v100)));
          v103 = vextq_s8(v102, v102, 8uLL).u64[0];
          v104 = v81 + 1;
          v105 = 56 * v81;
          do
          {
            v81 = v104;
            v18.f64[0] = (v88 - v90) / (v87 - v90);
            v106.f64[0] = a15.f64[0];
            *(_QWORD *)&v106.f64[1] = v94;
            v107.f64[0] = v92.f64[0];
            v107.f64[1] = a14.f64[0];
            v20.f64[0] = v18.f64[0] * v18.f64[0];
            v108 = vaddq_f64(v107, vmulq_n_f64(v106, v18.f64[0]));
            v109 = vaddq_f64(a13, vmulq_f64(v15, v18));
            *(_QWORD *)&v107.f64[0] = v98.i64[0];
            v107.f64[1] = v16.f64[0];
            v110 = vmulq_n_f64(v107, v18.f64[0] * v18.f64[0]);
            v18.f64[0] = v18.f64[0] * (v18.f64[0] * v18.f64[0]);
            v111 = vaddq_f64(v108, v110);
            *(_QWORD *)&v110.f64[0] = v102.i64[0];
            *(_QWORD *)&v110.f64[1] = v103;
            v112 = vmulq_n_f64(v110, v18.f64[0]);
            v18 = vmulq_f64(v17, v18);
            v19 = vaddq_f64(v111, v112);
            v113 = *(_QWORD *)a2 + v105;
            *(double *)v113 = v88;
            *(float64x2_t *)(v113 + 8) = v19;
            *(_QWORD *)(v113 + 24) = *(_OWORD *)&vaddq_f64(vaddq_f64(v109, vmulq_f64(v99, v20)), v18);
            if (v81 >= v37)
              break;
            v88 = (*a7)[v81];
            v104 = v81 + 1;
            v105 += 56;
          }
          while (v88 <= v87);
        }
        ++v82;
      }
      while (v82 < v36 && v81 < v37);
    }
    goto LABEL_65;
  }
  if (v34 == -2)
    v114 = 2.0;
  else
    v114 = 4.0;
  v57.f64[0] = v114 - *v70;
  if (v57.f64[0] != 0.0)
  {
    v189 = 0;
    v190 = v70 + 1;
    v191 = (float64x2_t *)((char *)v69 + 24);
    while (1)
    {
      v57.f64[0] = 1.0 / v57.f64[0];
      v190[v189] = v57.f64[0];
      a12.f64[0] = v191[-1].f64[1];
      a14.f64[0] = v191[1].f64[0];
      a15 = *v191;
      a13 = vsubq_f64(*v191, *(float64x2_t *)((char *)v191 - 24));
      a12 = vmulq_f64(v57, vsubq_f64(a14, a12));
      v57 = vmulq_n_f64(a13, v57.f64[0]);
      *v191 = v57;
      v191[1].f64[0] = a12.f64[0];
      if (v36 - 2 == v189)
        goto LABEL_43;
      if (v36 - 3 == v189)
        v192 = 2.0;
      else
        v192 = 4.0;
      v57.f64[0] = v192 - v190[v189++];
      v191 = (float64x2_t *)((char *)v191 + 24);
      if (v57.f64[0] == 0.0)
      {
        if (v189 + 1 >= v36)
          goto LABEL_46;
        break;
      }
    }
  }
LABEL_65:
  v116 = *a7;
  v115 = a7[1];
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  v198 = _Q30;
  if (v199)
  {
    sub_20E93D8FC(a1, -v199);
    _Q30 = v198;
  }
  v117 = *(float64x2_t **)(a1 + 24);
  v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v117) >> 3);
  if (v68 <= v118)
  {
    if (v68 < v118)
      *(_QWORD *)(a1 + 32) = (char *)v117 - 24 * v199;
  }
  else
  {
    sub_20F11D1A8((void **)(a1 + 24), v68 - v118);
    _Q30 = v198;
    v117 = *v40;
  }
  v119.f64[1] = v197.f64[1];
  v120 = (unint64_t)a5[2] + (*a5)[3];
  v121 = **a5;
  v122 = ((*a5)[1] - v121) >> 5;
  v123 = v121 + 32 * ((v120 + 1) % v122);
  v72.f64[0] = *(float64_t *)(v123 + 24);
  v124 = v121 + 32 * (v120 % v122);
  _Q2.f64[0] = *(float64_t *)(v124 + 24);
  v125 = vmulq_f64(vsubq_f64(v72, _Q2), _Q30);
  *v117 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v123 + 8), *(float64x2_t *)(v124 + 8)), _Q30);
  v117[1].f64[0] = v125.f64[0];
  v126 = a5[2];
  v127 = (*a5)[3];
  v128 = **a5;
  v129 = ((*a5)[1] - v128) >> 5;
  v130 = v128 + 32 * (((unint64_t)v126 + ~v199 + v127) % v129);
  v125.f64[0] = *(float64_t *)(v130 + 24);
  v131 = v128 + 32 * (((unint64_t)v126 + v127 - v199 - 2) % v129);
  _Q2.f64[0] = *(float64_t *)(v131 + 24);
  v132 = *(float64x2_t *)(v131 + 8);
  v133 = *(_QWORD *)(a1 + 32);
  v134 = vmulq_f64(vsubq_f64(v125, _Q2), _Q30);
  *(float64x2_t *)(v133 - 24) = vmulq_f64(vsubq_f64(*(float64x2_t *)(v130 + 8), v132), _Q30);
  *(float64_t *)(v133 - 8) = v134.f64[0];
  if (v68 >= 3)
  {
    v135 = 2;
    v136 = 24;
    do
    {
      v137 = **a5;
      v138 = (unint64_t)a5[2] + v135 + (*a5)[3];
      v139 = ((*a5)[1] - v137) >> 5;
      v140 = v137 + 32 * (v138 % v139);
      v134.f64[0] = *(float64_t *)(v140 + 24);
      v141 = v137 + 32 * ((v138 - 2) % v139);
      _Q2.f64[0] = *(float64_t *)(v141 + 24);
      v132 = *(float64x2_t *)(v141 + 8);
      v142 = (float64x2_t *)((char *)*v40 + v136);
      v134 = vmulq_f64(vsubq_f64(v134, _Q2), _Q30);
      *v142 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v140 + 8), v132), _Q30);
      v142[1].f64[0] = v134.f64[0];
      ++v135;
      v136 += 24;
    }
    while (v68 != v135);
  }
  v143 = *(float64x2_t **)(a1 + 24);
  v144 = *(double **)a1;
  **(_QWORD **)a1 = 0x3FE0000000000000;
  v134.f64[0] = v143[1].f64[0];
  v145 = vmulq_f64(v134, v197);
  *v143 = vmulq_f64(*v143, v197);
  v143[1].f64[0] = v145.f64[0];
  if (v68 >= 2)
  {
    if (v199 == -2)
      v188 = 2.0;
    else
      v188 = 4.0;
    v132.f64[0] = v188 - *v144;
    if (v132.f64[0] == 0.0)
      return 1;
    v193 = 0;
    v194 = v144 + 1;
    v195 = (float64x2_t *)((char *)v143 + 24);
    while (1)
    {
      v132.f64[0] = 1.0 / v132.f64[0];
      v194[v193] = v132.f64[0];
      v119.f64[0] = v195[-1].f64[1];
      a14.f64[0] = v195[1].f64[0];
      a15 = *v195;
      v119 = vmulq_f64(v132, vsubq_f64(a14, v119));
      v132 = vmulq_n_f64(vsubq_f64(*v195, *(float64x2_t *)((char *)v195 - 24)), v132.f64[0]);
      *v195 = v132;
      v195[1].f64[0] = v119.f64[0];
      if (v68 - 2 == v193)
        break;
      if (v68 - 3 == v193)
        v196 = 2.0;
      else
        v196 = 4.0;
      v132.f64[0] = v196 - v194[v193++];
      v195 = (float64x2_t *)((char *)v195 + 24);
      if (v132.f64[0] == 0.0)
      {
        if (v193 + 1 >= v68)
          goto LABEL_78;
        return 1;
      }
    }
  }
  if (v199 != -1)
  {
    v146 = (float64x2_t *)((char *)v143 + 24 * ~v199);
    v147 = *v146;
    v145.f64[0] = v146[1].f64[0];
    v148 = (float64x2_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL);
    v149 = (uint64_t)&v143[-3] - 24 * v199;
    v150 = -v199;
    do
    {
      v132.f64[0] = v144[v150 - 2];
      v147.f64[1] = v148.f64[0];
      v151 = vmulq_n_f64(v147, v132.f64[0]);
      v152 = vmulq_f64(v145, v132);
      v148.f64[0] = *(float64_t *)(v149 + 16);
      v132 = *(float64x2_t *)v149;
      v145 = vsubq_f64(v148, v152);
      v147 = vsubq_f64(*(float64x2_t *)v149, v151);
      v148 = (float64x2_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL);
      *(float64x2_t *)v149 = v147;
      *(float64_t *)(v149 + 16) = v145.f64[0];
      --v150;
      v149 -= 24;
    }
    while (v150 != 1);
  }
LABEL_78:
  result = 1;
  if (**a7 >= *(double *)(**a5 + 32 * (((unint64_t)a5[2] + (*a5)[3]) % (((*a5)[1] - **a5) >> 5)))
    && v68 >= 2
    && v115 != v116)
  {
    v153 = 0;
    v154 = v115 - v116;
    v155 = 1;
    do
    {
      v156 = (char *)a5[2] + (*a5)[3];
      v157 = **a5;
      v158 = ((*a5)[1] - v157) >> 5;
      v159 = (unint64_t)&v156[v155] % v158;
      v160 = *(double *)(v157 + 32 * v159);
      v16.f64[0] = (*a7)[v153];
      if (v16.f64[0] <= v160)
      {
        v161 = (unint64_t)&v156[v155 - 1] % v158;
        v162 = *(double *)(v157 + 32 * v161);
        v163 = v157 + 32 * v161;
        v164 = *(float64x2_t *)(v163 + 8);
        v119.f64[0] = *(float64_t *)(v163 + 24);
        v165 = vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL).u64[0];
        v166 = (uint64_t)&(*v40)[-1] + 24 * v155 - 8;
        v167 = *(float64x2_t *)v166;
        a15.f64[0] = *(float64_t *)(v166 + 16);
        v168 = vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u64[0];
        v169 = v157 + 32 * v159;
        v170 = *(float64x2_t *)(v169 + 8);
        v17.f64[0] = *(float64_t *)(v169 + 24);
        v171 = (uint64_t)*v40 + 24 * v155;
        v18.f64[0] = *(float64_t *)(v171 + 16);
        v172 = (int8x16_t)vsubq_f64(vsubq_f64(vmulq_f64(vsubq_f64(v170, v164), _Q30), vaddq_f64(v167, v167)), *(float64x2_t *)v171);
        v173 = vsubq_f64(vsubq_f64(vmulq_f64(vsubq_f64(v17, v119), _Q30), vaddq_f64(a15, a15)), v18);
        v174 = vextq_s8(v172, v172, 8uLL).u64[0];
        v175 = vsubq_f64(v119, v17);
        v176 = vsubq_f64(v164, v170);
        v177 = (int8x16_t)vaddq_f64(*(float64x2_t *)v171, vaddq_f64(*(float64x2_t *)v166, vaddq_f64(v176, v176)));
        v17 = vaddq_f64(v18, vaddq_f64(a15, vaddq_f64(v175, v175)));
        v178 = vextq_s8(v177, v177, 8uLL).u64[0];
        v179 = v153 + 1;
        v180 = 56 * v153 + 32;
        do
        {
          v153 = v179;
          v16.f64[0] = (v16.f64[0] - v162) / (v160 - v162);
          v181.f64[0] = v167.f64[0];
          *(_QWORD *)&v181.f64[1] = v168;
          v19.f64[0] = v16.f64[0] * v16.f64[0];
          v182.f64[0] = v164.f64[0];
          *(_QWORD *)&v182.f64[1] = v165;
          v183 = vaddq_f64(v182, vmulq_n_f64(v181, v16.f64[0]));
          *(_QWORD *)&v182.f64[0] = v172.i64[0];
          *(_QWORD *)&v182.f64[1] = v174;
          v184 = vaddq_f64(v119, vmulq_f64(a15, v16));
          v185 = vmulq_n_f64(v182, v16.f64[0] * v16.f64[0]);
          v16.f64[0] = v16.f64[0] * (v16.f64[0] * v16.f64[0]);
          v18 = vaddq_f64(v184, vmulq_f64(v173, v19));
          *(_QWORD *)&v186.f64[0] = v177.i64[0];
          *(_QWORD *)&v186.f64[1] = v178;
          v19 = vmulq_n_f64(v186, v16.f64[0]);
          v16 = vaddq_f64(v18, vmulq_f64(v17, v16));
          v187 = (float64x2_t *)(*(_QWORD *)a2 + v180);
          *v187 = vaddq_f64(vaddq_f64(v183, v185), v19);
          v187[1].f64[0] = v16.f64[0];
          if (v153 >= v154)
            break;
          v16.f64[0] = (*a7)[v153];
          v179 = v153 + 1;
          v180 += 56;
        }
        while (v16.f64[0] <= v160);
      }
      ++v155;
      result = 1;
    }
    while (v155 < v68 && v153 < v154);
  }
  return result;
}

float64_t sub_20FDB59B0@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float64x2_t a5@<Q0>, float64x2_t a6@<Q2>)
{
  uint64_t v11;
  uint64_t v12;
  int8x16_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float64x2_t v19;
  __int128 v20;
  double v23;
  double v24;
  double v25;
  double v26;
  int8x16_t v32;
  double v33;
  double v36;
  double v37;
  double v38;
  __double2 v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float64x2_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  float64x2_t v56;
  double v57;
  double v58;
  double v59;
  float64x2_t v60;
  double v61;
  float64x2_t v62;
  double v63;
  double v65;
  float64x2_t v66;
  double v68;
  double v70;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v89;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64_t result;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  double v104;
  double v105;
  uint64_t v106;
  double v107;
  unint64_t v108;
  int8x16_t v109;
  float64x2_t v110;
  float64_t v111;
  float64_t v112;
  float64x2_t v113;
  double v114;
  unint64_t v115;
  float64x2_t v116;
  unint64_t v117;
  float64x2_t v118;
  int8x16_t v119;
  float64x2_t v120;
  float64_t v121;
  double v122;
  double v123;
  double v124;
  float64x2_t v125;

  v125 = a5;
  v11 = a1 + 272;
  a5.f64[0] = *(float64_t *)(a3 + 88);
  a6.f64[0] = *(float64_t *)(a1 + 1320);
  v12 = *(_OWORD *)&vsubq_f64(a5, a6);
  _Q14 = vsubq_f64(*(float64x2_t *)(a3 + 72), *(float64x2_t *)(a1 + 1304));
  a5.f64[0] = *(float64_t *)(a3 + 136);
  v113 = a5;
  v14 = *(int8x16_t *)(a3 + 120);
  v112 = *(double *)(a3 + 120);
  v15 = vextq_s8(v14, v14, 8uLL).u64[0];
  v14.i64[0] = *(_QWORD *)(a1 + 1344);
  v110 = (float64x2_t)v14;
  v111 = *(double *)&v15;
  v109 = *(int8x16_t *)(a1 + 1328);
  v108 = vextq_s8(v109, v109, 8uLL).u64[0];
  v16 = *(_OWORD *)(a3 + 80);
  v17 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a4 + 112) = v17;
  *(_OWORD *)(a4 + 128) = *(_OWORD *)(a3 + 128);
  v18 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a4 + 48) = v18;
  v19 = *(float64x2_t *)(a3 + 48);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a4 + 80) = v16;
  v20 = *(_OWORD *)(a3 + 16);
  _Q2 = *(int8x16_t *)a3;
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(_OWORD *)(a4 + 16) = v20;
  v123 = *(double *)(a3 + 16);
  v121 = *(double *)_Q2.i64;
  v117 = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
  v122 = *(double *)(a3 + 40);
  v119 = *(int8x16_t *)(a3 + 24);
  v115 = vextq_s8(v119, v119, 8uLL).u64[0];
  v124 = *(double *)(a3 + 64);
  _Q0 = (float64x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL);
  v120 = _Q0;
  v23 = *(double *)(a1 + 48);
  v24 = *(double *)(a1 + 56);
  v25 = *(double *)(a1 + 64);
  v26 = *(double *)(a1 + 72);
  _Q2.i64[0] = *(_QWORD *)(a1 + 192);
  v118 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q14, 1);
  v116 = (float64x2_t)vdupq_lane_s64(v12, 0);
  _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 152), _Q14.f64[0]), *(float64x2_t *)(a1 + 176), _Q14, 1), *(float64x2_t *)(a1 + 200), *(double *)&v12);
  *(_QWORD *)&v114 = vextq_s8((int8x16_t)_Q14, (int8x16_t)_Q14, 8uLL).u64[0];
  __asm { FMLA            D0, D2, V14.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *(double *)(a1 + 216), *(double *)&v12);
  v32 = (int8x16_t)vnegq_f64(_Q1);
  *(_QWORD *)&v33 = vextq_s8(v32, v32, 8uLL).u64[0];
  _Q2.i64[0] = v32.i64[1];
  __asm { FMLS            D4, D2, V1.D[1] }
  *(_QWORD *)&v107 = *(_OWORD *)&vnegq_f64(_Q0);
  __asm { FMLS            D4, D3, V0.D[0] }
  if (_D4 >= 0.0000002635)
  {
    v38 = sqrt(_D4);
    v106 = v32.i64[0];
    v104 = _D4;
    v105 = v33;
    v39 = __sincos_stret(v38);
    _Q1.f64[0] = v39.__cosval;
    v33 = v105;
    v32.i64[0] = v106;
    v37 = v39.__sinval / v38;
    v36 = 1.0 / v104 * (1.0 - v39.__cosval);
  }
  else
  {
    v36 = 0.5 - _D4 * (_D4 / -720.0 + 0.0416666667);
    v37 = 1.0 - _D4 * (0.166666667 - _D4 * (_D4 / -5040.0 + 0.00833333333));
    _Q1.f64[0] = 1.0 - _D4 * v36;
  }
  v40 = v23 * v23 - v24 * v24;
  v41 = *(double *)v32.i64 * v36;
  v42 = v33 * (*(double *)v32.i64 * v36);
  v43.f64[0] = v42 - v107 * v37;
  v44.f64[0] = _Q1.f64[0] + *(double *)v32.i64 * (*(double *)v32.i64 * v36);
  v44.f64[1] = v42 + v107 * v37;
  v45 = *(double *)v32.i64 * v37;
  v46 = v33 * v37;
  v43.f64[1] = _Q1.f64[0] + v33 * (v33 * v36);
  v47 = v23 * v23 + v24 * v24 - v25 * v25 - v26 * v26;
  v48 = v24 * v25 - v23 * v26 + v24 * v25 - v23 * v26;
  v49 = v107 * v41;
  v50 = v107 * (v33 * v36);
  v51 = vmlaq_n_f64(vmulq_n_f64(v44, v47), v43, v48);
  v52 = v107 * v41 - v33 * v37;
  v53 = v52 * v47 + (v45 + v50) * v48;
  v54 = v24 * v25 + v23 * v26 + v24 * v25 + v23 * v26;
  v55 = v40 + v25 * v25 - v26 * v26;
  v56 = vmlaq_n_f64(vmulq_n_f64(v44, v54), v43, v55);
  v57 = v52 * v54 + (v45 + v50) * v55;
  v58 = v24 * v26 - v23 * v25 + v24 * v26 - v23 * v25;
  v59 = v23 * v24 + v25 * v26 + v23 * v24 + v25 * v26;
  v60 = vmlaq_n_f64(vmulq_n_f64(v44, v58), v43, v59);
  v61 = v52 * v58 + (v45 + v50) * v59;
  *(_QWORD *)&v44.f64[0] = v109.i64[0];
  *(_QWORD *)&v44.f64[1] = v108;
  v62.f64[0] = v112;
  v62.f64[1] = v111;
  v63 = v40 - v25 * v25 + v26 * v26;
  _Q5 = vsubq_f64(v62, v44);
  v44.f64[1] = v110.f64[1];
  *(_QWORD *)&v65 = *(_OWORD *)&vsubq_f64(v113, v110);
  v44.f64[0] = _Q1.f64[0] + v107 * (v107 * v36);
  v66.f64[0] = v46 + v49;
  v66.f64[1] = v50 - v45;
  _Q1.f64[0] = v23 * v25 + v24 * v26 + v23 * v25 + v24 * v26;
  _Q2 = vmlaq_n_f64(v51, v66, _Q1.f64[0]);
  _Q1.f64[0] = v53 + v44.f64[0] * _Q1.f64[0];
  v68 = v25 * v26 - v23 * v24 + v25 * v26 - v23 * v24;
  _Q3 = vmlaq_n_f64(v56, v66, v68);
  v70 = v57 + v44.f64[0] * v68;
  _Q0 = vmlaq_n_f64(v60, v66, v63);
  _Q18 = *(float64x2_t *)(v11 + 264);
  v73 = v61 + v44.f64[0] * v63;
  v74.f64[0] = v121;
  *(_QWORD *)&v74.f64[1] = v117;
  *(_QWORD *)&v75.f64[0] = v119.i64[0];
  *(_QWORD *)&v75.f64[1] = v115;
  v76 = vmlaq_n_f64(vmulq_n_f64(v74, _Q2.f64[0]), v75, _Q3.f64[0]);
  v44.f64[0] = *(double *)(v11 + 40) * _Q14.f64[0]
             + *(double *)(v11 + 64) * v114
             + *(double *)(v11 + 88) * *(double *)&v12;
  v77 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(v11 + 240), _Q14.f64[0]), v118, _Q18), v116, *(float64x2_t *)(v11 + 288));
  _Q22 = *(float64x2_t *)(a1 + 248);
  v79 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 224), _Q5.f64[0]), _Q22, _Q5, 1);
  _Q22.f64[0] = *(float64_t *)(a1 + 264);
  __asm { FMLA            D18, D22, V5.D[1] }
  _Q22.f64[0] = *(double *)(v11 + 256) * _Q14.f64[0]
              + *(double *)(v11 + 280) * v114
              + *(double *)(v11 + 304) * *(double *)&v12;
  v80 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v11 + 168), _Q5.f64[0]), *(float64x2_t *)(v11 + 192), _Q5, 1);
  _D25 = *(_QWORD *)(v11 + 208);
  __asm { FMLA            D23, D25, V5.D[1] }
  _D27 = v122;
  _Q5.f64[0] = vmlad_n_f64(v123 * _Q2.f64[0], v122, _Q3.f64[0]);
  v83 = vmlaq_laneq_f64(vmulq_laneq_f64(v74, _Q2, 1), v75, _Q3, 1);
  __asm { FMLA            D2, D27, V3.D[1] }
  v84 = vmlaq_n_f64(vmulq_n_f64(v74, _Q1.f64[0]), v75, v70);
  _Q1.f64[0] = v123 * _Q1.f64[0] + v122 * v70;
  _Q21 = vmlaq_n_f64(v79, *(float64x2_t *)v11, v65);
  _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], *(double *)(v11 + 16), v65);
  _Q6 = vaddq_f64(vaddq_f64(*(float64x2_t *)(a1 + 24), vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(v11 + 24), _Q14.f64[0]), v118, *(float64x2_t *)(v11 + 48)), v116, *(float64x2_t *)(v11 + 72))), _Q21);
  _Q19 = *(float64x2_t *)(v11 + 216);
  _Q24 = vmlaq_n_f64(v80, _Q19, v65);
  _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], *(double *)(v11 + 232), v65);
  v89 = vmlaq_laneq_f64(vmulq_n_f64(v74, _Q6.f64[0]), v75, _Q6, 1);
  __asm { FMLA            D19, D27, V6.D[1] }
  _Q6 = vaddq_f64(vaddq_f64(*(float64x2_t *)a1, v77), _Q24);
  v91 = vmlaq_laneq_f64(vmulq_n_f64(v74, _Q6.f64[0]), v75, _Q6, 1);
  __asm { FMLA            D21, D27, V6.D[1] }
  _Q6.f64[1] = v120.f64[1];
  v19.f64[1] = v120.f64[0];
  v92 = vmlaq_n_f64(v76, v19, _Q0.f64[0]);
  _Q24.f64[0] = v124;
  _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v124, _Q0.f64[0]);
  v93 = vmlaq_laneq_f64(v83, v19, _Q0, 1);
  __asm { FMLA            D2, D24, V0.D[1] }
  v94 = vmlaq_n_f64(v84, v19, v73);
  result = _Q1.f64[0] + v124 * v73;
  _Q1.f64[0] = *(float64_t *)(a1 + 40);
  v96 = vaddq_f64(vaddq_f64(_Q1, v44), _Q18);
  v97 = vmlaq_n_f64(v89, v19, v96.f64[0]);
  _Q19.f64[0] = vmlad_n_f64(_Q19.f64[0], v124, v96.f64[0]);
  v96.f64[0] = *(float64_t *)(a1 + 16);
  *(_QWORD *)&v96.f64[0] = *(_OWORD *)&vaddq_f64(vaddq_f64(v96, _Q22), _Q23);
  v98 = vmlaq_n_f64(v91, v19, v96.f64[0]);
  _Q6.f64[0] = *(float64_t *)(a3 + 112);
  _Q21.f64[0] = vmlad_n_f64(_Q21.f64[0], v124, v96.f64[0]);
  v99 = *(float64x2_t *)(a3 + 96);
  v100 = vaddq_f64(_Q6, _Q19);
  _Q18.f64[0] = *(float64_t *)(a3 + 160);
  _Q19.f64[0] = a2[1].f64[0];
  v101 = vmlsq_lane_f64(vaddq_f64(v99, v97), *a2, v125.f64[0], 0);
  v102 = vmlaq_n_f64(vaddq_f64(*(float64x2_t *)(a3 + 144), v98), v99, v125.f64[0]);
  v99.f64[0] = v125.f64[0] * v125.f64[0] * 0.5;
  v103 = vmlsq_lane_f64(v102, *a2, v99.f64[0], 0);
  *(float64x2_t *)a4 = v92;
  *(float64_t *)(a4 + 16) = _Q5.f64[0];
  *(float64_t *)(a4 + 40) = _Q2.f64[0];
  *(float64x2_t *)(a4 + 24) = v93;
  *(float64_t *)(a4 + 64) = result;
  *(float64x2_t *)(a4 + 48) = v94;
  *(float64x2_t *)(a4 + 96) = v101;
  *(_QWORD *)(a4 + 112) = *(_OWORD *)&vmlsq_f64(v100, v125, _Q19);
  *(_QWORD *)(a4 + 160) = *(_OWORD *)&vmlsq_f64(vmlaq_f64(vaddq_f64(_Q18, _Q21), v125, _Q6), v99, _Q19);
  *(float64x2_t *)(a4 + 144) = v103;
  return result;
}

void sub_20FDB5F50(unint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7)
{
  int v14;
  float64x2_t v15;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v24;
  double v25;
  double v26;
  float v27;
  int v28;
  double v29;
  double v31;
  double v34;
  float64x2_t v36;
  double v38;
  double v41;
  float64_t v42;
  int8x16_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  int8x16_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  float64x2_t v59;
  double v60;
  float64x2_t v61;
  double v62;

  v14 = *(_DWORD *)(a5 + 992);
  if (v14 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102C741A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_23;
    }
    v14 = *(_DWORD *)(a5 + 992);
  }
  if (!v14)
    goto LABEL_22;
  if (v14 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102C741A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_23;
    }
    v14 = *(_DWORD *)(a5 + 992);
  }
  if (!v14)
    goto LABEL_22;
  v15.f64[0] = *((float64_t *)a3 + 2);
  _Q0 = *a3;
  v17 = *(int64x2_t *)((char *)a3 + 24);
  v54 = *((double *)a3 + 8);
  v53 = (int8x16_t)a3[3];
  v51 = *(float64x2_t *)(a2 + 24);
  v52 = *(float64x2_t *)a2;
  v49 = *(double *)(a2 + 16);
  v50 = *(float64x2_t *)(a2 + 48);
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a2, *(double *)a3), v51, *(float64x2_t *)a3, 1), v50, v15.f64[0]);
  v47 = *(double *)(a2 + 64);
  v48 = *(double *)(a2 + 40);
  __asm { FMLA            D1, D6, V0.D[1] }
  v45 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v17);
  v46 = *((double *)a3 + 5);
  v43 = (int8x16_t)v17;
  v44 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v17);
  v42 = v18.f64[1];
  v15.f64[1] = v46;
  v55 = v15;
  v41 = _D1 + v47 * v15.f64[0];
  v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v18.f64[0]), v44, v18, 1), v15, v41);
  v56 = v24;
  if (a7)
  {
    v25 = atan2(-v24.f64[1], v24.f64[0]);
    v24 = v56;
    v26 = 0.0;
    if (v25 < 0.0)
      v26 = 6.28318531;
    v27 = v25 + v26;
    *a7 = v27;
  }
  v28 = *(_DWORD *)(a5 + 992);
  if (v28 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102C741A, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_23;
    }
    v28 = *(_DWORD *)(a5 + 992);
    v24 = v56;
  }
  if (!v28)
    goto LABEL_22;
  if (v28 != -1)
    goto LABEL_20;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102C741A, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_23:
    abort();
  }
  v28 = *(_DWORD *)(a5 + 992);
  v24 = v56;
LABEL_20:
  if (!v28)
  {
LABEL_22:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102C741A, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v29 = (*(double *)(a5 + 144) + *(double *)(a5 + 144)) * 0.0174532925;
  _V4.D[1] = v42;
  v31 = *(double *)vextq_s8(v43, v43, 8uLL).i64;
  _D2 = *(double *)vextq_s8(v53, v53, 8uLL).i64;
  __asm { FMLA            D3, D2, V4.D[1] }
  v34 = v49 * *(double *)v43.i64 + v48 * v31 + v47 * v46;
  _Q5 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v52, *(double *)v43.i64), v51, v31), v50, v46);
  v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, _Q5.f64[0]), v44, _Q5, 1), v55, v34);
  __asm { FMLA            D6, D2, V5.D[1] }
  v38 = _D6 + v54 * v34;
  _Q5.f64[0] = v49 * *(double *)v53.i64 + v48 * _D2 + v47 * v54;
  _Q6 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v52, *(double *)v53.i64), v51, _D2), v50, v54);
  __asm { FMLA            D16, D2, V6.D[1] }
  v57 = v24;
  v58 = _D3 + v54 * v41;
  v59 = v36;
  v60 = v38;
  v61 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, _Q6.f64[0]), v44, _Q6, 1), v55, _Q5.f64[0]);
  v62 = _D16 + v54 * _Q5.f64[0];
  sub_20EB86618(a4, (__int128 *)a5, (uint64_t)&v57, a6, (double)a1 / v29);
}

uint64_t *sub_20FDB6568@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  __int128 v10;

  __p = operator new(0x28uLL);
  v10 = xmmword_2102E0950;
  strcpy((char *)__p, "AbruptStopMotionIndicator parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "AbruptStopMotionIndicatorConfig.min_gyro_norm_to_trigger_fast_rotation_deg", v4, "Minimum rotation rate in degree to transition from normal condition to fast rotation condition.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "AbruptStopMotionIndicatorConfig.min_gyro_norm_to_maintain_fast_rotation_deg", v5, "Minimum rotation rate in degree to maintain in fast rotation condition before triggering transition from fast rotation to abrupt stop condition.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "AbruptStopMotionIndicatorConfig.lag_ba_counts_to_reset_fast_rotation_flag", v6, "Number of BA iterations before transition from fast rotation condition to abrupt stop condition.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DCF0((unsigned int *)(a1 + 20));
  return sub_20E8B2F9C((uint64_t *)&__p, "AbruptStopMotionIndicatorConfig.lag_ba_counts_to_reset_abrupt_stop_flag", v7, "Number of BA iterations before transition from abrupt stop condition to normal condition.");
}

void sub_20FDB66AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDB66F8(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 96) = a1 + 56;
  *(_OWORD *)(a1 + 104) = xmmword_2103E8F50;
  *(_QWORD *)(a1 + 160) = a1 + 120;
  *(_OWORD *)(a1 + 168) = xmmword_2103E8F50;
  *(_QWORD *)(a1 + 224) = a1 + 184;
  *(_OWORD *)(a1 + 232) = xmmword_2103E8F50;
  *(_QWORD *)(a1 + 384) = a1 + 248;
  *(_OWORD *)(a1 + 392) = xmmword_2103E8F60;
  *(_QWORD *)(a1 + 408) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  switch(*a2)
  {
    case 0:
      *(_OWORD *)(a1 + 248) = xmmword_2103E9290;
      *(_QWORD *)(a1 + 264) = 0xC02361D3892CC3E1;
      *(_OWORD *)(a1 + 272) = xmmword_2103E92A0;
      *(_OWORD *)(a1 + 288) = xmmword_2103E92B0;
      *(_OWORD *)(a1 + 304) = xmmword_2103E92C0;
      *(_OWORD *)(a1 + 320) = xmmword_2103E92D0;
      *(_OWORD *)(a1 + 336) = xmmword_2103E92E0;
      *(_OWORD *)(a1 + 352) = xmmword_2103E92F0;
      *(_OWORD *)(a1 + 368) = xmmword_2103E9300;
      *(_OWORD *)(a1 + 56) = xmmword_2103E9310;
      *(_OWORD *)(a1 + 72) = xmmword_2103E9320;
      *(_QWORD *)(a1 + 88) = 0x3F45B84D593DC775;
      *(_OWORD *)(a1 + 120) = xmmword_2103E9330;
      *(_OWORD *)(a1 + 136) = xmmword_2103E9340;
      v3 = 0x3F6A47A148936FD1;
      goto LABEL_5;
    case 1:
      *(_OWORD *)(a1 + 248) = xmmword_2103E91D0;
      *(_QWORD *)(a1 + 264) = 0xC02D525447682A8ALL;
      *(_OWORD *)(a1 + 272) = xmmword_2103E91E0;
      *(_OWORD *)(a1 + 288) = xmmword_2103E91F0;
      *(_OWORD *)(a1 + 304) = xmmword_2103E9200;
      *(_OWORD *)(a1 + 320) = xmmword_2103E9210;
      *(_OWORD *)(a1 + 336) = xmmword_2103E9220;
      *(_OWORD *)(a1 + 352) = xmmword_2103E9230;
      *(_OWORD *)(a1 + 368) = xmmword_2103E9240;
      *(_QWORD *)(a1 + 400) = 17;
      *(_OWORD *)(a1 + 56) = xmmword_2103E9250;
      *(_OWORD *)(a1 + 72) = xmmword_2103E9260;
      *(_QWORD *)(a1 + 88) = 0x3F4246E879516EA3;
      *(_QWORD *)(a1 + 112) = 5;
      *(_OWORD *)(a1 + 120) = xmmword_2103E9270;
      *(_OWORD *)(a1 + 136) = xmmword_2103E9280;
      *(_QWORD *)(a1 + 152) = 0x3F67F31938DF7FE6;
      *(_QWORD *)(a1 + 176) = 5;
      *(_OWORD *)(a1 + 184) = xmmword_2103E9030;
      *(_OWORD *)(a1 + 200) = xmmword_2103E9040;
      *(_QWORD *)(a1 + 216) = 0x3FF0000000000000;
      *(_QWORD *)(a1 + 240) = 5;
      break;
    case 2:
      *(_OWORD *)(a1 + 248) = xmmword_2103E9110;
      *(_QWORD *)(a1 + 264) = 0xC036984FFAC4667DLL;
      *(_OWORD *)(a1 + 272) = xmmword_2103E9120;
      *(_OWORD *)(a1 + 288) = xmmword_2103E9130;
      *(_OWORD *)(a1 + 304) = xmmword_2103E9140;
      *(_OWORD *)(a1 + 320) = xmmword_2103E9150;
      *(_OWORD *)(a1 + 336) = xmmword_2103E9160;
      *(_OWORD *)(a1 + 352) = xmmword_2103E9170;
      *(_OWORD *)(a1 + 368) = xmmword_2103E9180;
      *(_OWORD *)(a1 + 56) = xmmword_2103E9190;
      *(_OWORD *)(a1 + 72) = xmmword_2103E91A0;
      *(_QWORD *)(a1 + 88) = 0x3F55DD4533902A83;
      *(_OWORD *)(a1 + 120) = xmmword_2103E91B0;
      *(_OWORD *)(a1 + 136) = xmmword_2103E91C0;
      v3 = 0x3F73C8DC663704A6;
LABEL_5:
      *(_QWORD *)(a1 + 152) = v3;
      *(_OWORD *)(a1 + 184) = xmmword_2103E9030;
      *(_QWORD *)(a1 + 112) = 5;
      *(_QWORD *)(a1 + 176) = 5;
      *(_OWORD *)(a1 + 200) = xmmword_2103E9040;
      *(_QWORD *)(a1 + 240) = 5;
      v4 = 0x3FF0000000000000;
      *(_QWORD *)(a1 + 216) = 0x3FF0000000000000;
      goto LABEL_8;
    case 3:
      *(_OWORD *)(a1 + 248) = xmmword_2103E9050;
      *(_QWORD *)(a1 + 264) = 0xC00F80DA411DA578;
      *(_OWORD *)(a1 + 272) = xmmword_2103E9060;
      *(_OWORD *)(a1 + 288) = xmmword_2103E9070;
      *(_OWORD *)(a1 + 304) = xmmword_2103E9080;
      *(_OWORD *)(a1 + 320) = xmmword_2103E9090;
      *(_OWORD *)(a1 + 336) = xmmword_2103E90A0;
      *(_OWORD *)(a1 + 352) = xmmword_2103E90B0;
      *(_OWORD *)(a1 + 368) = xmmword_2103E90C0;
      *(_OWORD *)(a1 + 56) = xmmword_2103E90D0;
      *(_OWORD *)(a1 + 72) = xmmword_2103E90E0;
      *(_QWORD *)(a1 + 88) = 0x3F4E4DD8F405B84FLL;
      *(_OWORD *)(a1 + 120) = xmmword_2103E90F0;
      *(_OWORD *)(a1 + 136) = xmmword_2103E9100;
      *(_QWORD *)(a1 + 152) = 0x3F6F9B2E08749B39;
      *(_OWORD *)(a1 + 184) = xmmword_2103E9030;
      *(_QWORD *)(a1 + 216) = 0x3FF0000000000000;
      *(_QWORD *)(a1 + 112) = 5;
      *(_QWORD *)(a1 + 176) = 5;
      *(_OWORD *)(a1 + 200) = xmmword_2103E9040;
      *(_QWORD *)(a1 + 240) = 5;
      v4 = 0x3FD6666666666666;
      goto LABEL_8;
    case 4:
      *(_OWORD *)(a1 + 248) = xmmword_2103E8F70;
      *(_QWORD *)(a1 + 264) = 0xC01766DAB19371DCLL;
      *(_OWORD *)(a1 + 272) = xmmword_2103E8F80;
      *(_OWORD *)(a1 + 288) = xmmword_2103E8F90;
      *(_OWORD *)(a1 + 304) = xmmword_2103E8FA0;
      *(_OWORD *)(a1 + 320) = xmmword_2103E8FB0;
      *(_OWORD *)(a1 + 336) = xmmword_2103E8FC0;
      *(_OWORD *)(a1 + 352) = xmmword_2103E8FD0;
      *(_OWORD *)(a1 + 368) = xmmword_2103E8FE0;
      *(_OWORD *)(a1 + 56) = xmmword_2103E8FF0;
      *(_OWORD *)(a1 + 72) = xmmword_2103E9000;
      *(_QWORD *)(a1 + 88) = 0x3F4E79F2407D46F2;
      *(_OWORD *)(a1 + 120) = xmmword_2103E9010;
      *(_OWORD *)(a1 + 136) = xmmword_2103E9020;
      *(_QWORD *)(a1 + 152) = 0x3F6EF483BCF0D135;
      *(_OWORD *)(a1 + 184) = xmmword_2103E9030;
      *(_QWORD *)(a1 + 216) = 0x3FF0000000000000;
      *(_QWORD *)(a1 + 112) = 5;
      *(_QWORD *)(a1 + 176) = 5;
      *(_OWORD *)(a1 + 200) = xmmword_2103E9040;
      *(_QWORD *)(a1 + 240) = 5;
      v4 = 0x3FD8000000000000;
LABEL_8:
      *(_QWORD *)(a1 + 400) = 17;
      *(_QWORD *)(a1 + 408) = v4;
      break;
    default:
      break;
  }
  sub_20F11D04C((_QWORD *)(a1 + 8), 0x1EuLL);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (*(_QWORD *)(a1 + 16) - v8) >> 3;
  v10 = 30;
  do
  {
    while (1)
    {
      *(_QWORD *)(v8 + 8 * v6) = 0xC024000000000000;
      v11 = v6 + 1;
      v12 = v11 >= v9 ? v9 : 0;
      if (v7 == v9)
        break;
      *(_QWORD *)(a1 + 48) = ++v7;
      v6 = v11 - v12;
      if (!--v10)
        goto LABEL_19;
    }
    v13 = v5 + 1;
    if (v13 >= v9)
      v14 = v9;
    else
      v14 = 0;
    v5 = v13 - v14;
    *(_QWORD *)(a1 + 32) = v5;
    v7 = v9;
    v6 = v11 - v12;
    --v10;
  }
  while (v10);
LABEL_19:
  *(_QWORD *)(a1 + 40) = v6;
  return a1;
}

void sub_20FDB6CEC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_20F03A628(v2);
  sub_20FDB6D08(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDB6D08(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v12;
  void *v14;

  v2 = a1 + 31;
  a1[50] = 0;
  v3 = (_QWORD *)a1[48];
  if (v3 == v2 || v3 == 0)
  {
    a1[30] = 0;
    v5 = (_QWORD *)a1[28];
    if (v5 != a1 + 23 && v5 != 0)
    {
LABEL_22:
      MEMORY[0x212BC6368]();
      a1[22] = 0;
      v12 = (_QWORD *)a1[20];
      if (v12 != a1 + 15 && v12 != 0)
        goto LABEL_26;
LABEL_16:
      a1[14] = 0;
      v9 = (_QWORD *)a1[12];
      if (v9 == a1 + 7)
        goto LABEL_29;
      goto LABEL_27;
    }
  }
  else
  {
    MEMORY[0x212BC6368]();
    a1[30] = 0;
    v10 = (_QWORD *)a1[28];
    if (v10 != a1 + 23 && v10 != 0)
      goto LABEL_22;
  }
  a1[22] = 0;
  v7 = (_QWORD *)a1[20];
  if (v7 == a1 + 15 || v7 == 0)
    goto LABEL_16;
LABEL_26:
  MEMORY[0x212BC6368]();
  a1[14] = 0;
  v9 = (_QWORD *)a1[12];
  if (v9 == a1 + 7)
    goto LABEL_29;
LABEL_27:
  if (v9)
    MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
LABEL_29:
  v14 = (void *)a1[1];
  if (v14)
  {
    a1[2] = v14;
    operator delete(v14);
  }
  return a1;
}

double sub_20FDB6E30(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  size_t v9;
  _BOOL4 v10;
  BOOL v11;
  int v13;
  int v14;
  _QWORD *v16;
  _QWORD *v17;
  double v18;
  _OWORD *v19;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  double v38;
  _BYTE v40[40];
  _BYTE *v41;
  __int128 v42;

  v4 = *(unsigned int *)(a1 + 112);
  v41 = v40;
  v42 = xmmword_2103E8F50;
  if (v4 < 6)
  {
    v6 = v40;
    if (!v4)
      goto LABEL_13;
  }
  else
  {
    v5 = 10;
    if (v4 > 0xA)
      v5 = v4;
    *(_QWORD *)&v42 = v5;
    v6 = (_QWORD *)operator new[]();
    if (v41 != v40 && v41 != 0)
      MEMORY[0x212BC6368]();
    v41 = v6;
    v8 = *((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      *((_QWORD *)&v42 + 1) += v4;
      v9 = v4;
      memmove(&v6[v9], v6, 8 * v8);
      bzero(v6, v9 * 8);
      goto LABEL_13;
    }
  }
  bzero(v6, 8 * v4);
  *((_QWORD *)&v42 + 1) = v4;
LABEL_13:
  v10 = 0;
  if (*((_BYTE *)a2 + 441))
    v11 = *((_BYTE *)a2 + 169) == 0;
  else
    v11 = 0;
  v13 = v11 || *((_DWORD *)a2 + 45) < 3u;
  v14 = *((unsigned __int8 *)a2 + 168);
  if (!*((_BYTE *)a2 + 168) && *((double *)a2 + 6) > 0.01 && *((_BYTE *)a2 + 440) != 0)
  {
    if ((*((_DWORD *)a2 + 74) & 7) != 3)
    {
      if ((v13 & 1) != 0)
        goto LABEL_30;
      goto LABEL_32;
    }
    v10 = *((double *)a2 + 10) < 1.0;
  }
  if (((v13 | v10) & 1) != 0)
  {
LABEL_30:
    v16 = *(_QWORD **)(a1 + 224);
    *v6 = *v16;
    v6[1] = v16[1];
    v6[2] = v16[2];
    goto LABEL_34;
  }
LABEL_32:
  *v6 = *((_QWORD *)a2 + 2);
  v6[1] = *((_QWORD *)a2 + 3);
  v6[2] = *(_QWORD *)a2;
  v17 = (_QWORD *)*((_QWORD *)a2 + 52);
  if (v17 != *((_QWORD **)a2 + 53))
    goto LABEL_35;
  v16 = *(_QWORD **)(a1 + 224);
LABEL_34:
  v17 = v16 + 3;
LABEL_35:
  v6[3] = *v17;
  v18 = *((double *)a2 + 6);
  if (!v14)
    v18 = 0.0;
  *((double *)v6 + 4) = v18;
  sub_20FDB9078(a1, (uint64_t)v40);
  v19 = (_OWORD *)(a1 + 416);
  if (!*(_BYTE *)(a1 + 872))
  {
    *(_QWORD *)(a1 + 864) = 0;
    *(_OWORD *)(a1 + 832) = 0u;
    *(_OWORD *)(a1 + 848) = 0u;
    *(_OWORD *)(a1 + 800) = 0u;
    *(_OWORD *)(a1 + 816) = 0u;
    *(_OWORD *)(a1 + 768) = 0u;
    *(_OWORD *)(a1 + 784) = 0u;
    *(_OWORD *)(a1 + 736) = 0u;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_OWORD *)(a1 + 704) = 0u;
    *(_OWORD *)(a1 + 720) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 688) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 608) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
    *(_OWORD *)(a1 + 576) = 0u;
    *(_OWORD *)(a1 + 592) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
    *(_OWORD *)(a1 + 560) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *v19 = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 528) = _Q1;
    *(_QWORD *)(a1 + 544) = -1;
    *(_OWORD *)(a1 + 552) = 0u;
    *(_OWORD *)(a1 + 568) = 0u;
    *(_QWORD *)(a1 + 582) = 0;
    *(_QWORD *)(a1 + 592) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    *(_QWORD *)(a1 + 600) = 0;
    *(_QWORD *)(a1 + 613) = 0;
    *(_BYTE *)(a1 + 632) = 1;
    *(_OWORD *)(a1 + 640) = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_QWORD *)(a1 + 672) = 0;
    *(_DWORD *)(a1 + 680) = 1065353216;
    *(_QWORD *)(a1 + 704) = 0;
    *(_QWORD *)(a1 + 696) = 0;
    *(_DWORD *)(a1 + 712) = 0;
    *(_DWORD *)(a1 + 744) = 0;
    *(_QWORD *)(a1 + 728) = 0;
    *(_QWORD *)(a1 + 736) = 0;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_OWORD *)(a1 + 768) = 0u;
    *(_DWORD *)(a1 + 784) = 1065353216;
    *(_OWORD *)(a1 + 792) = 0u;
    *(_OWORD *)(a1 + 808) = 0u;
    *(_DWORD *)(a1 + 824) = 1065353216;
    *(_QWORD *)(a1 + 848) = 0;
    *(_QWORD *)(a1 + 832) = 0;
    *(_QWORD *)(a1 + 840) = 0;
    *(_WORD *)(a1 + 856) = 0;
    *(_BYTE *)(a1 + 872) = 1;
  }
  v23 = *a2;
  v24 = a2[2];
  *(_OWORD *)(a1 + 432) = a2[1];
  *(_OWORD *)(a1 + 448) = v24;
  *v19 = v23;
  v25 = a2[3];
  v26 = a2[4];
  v27 = a2[6];
  *(_OWORD *)(a1 + 496) = a2[5];
  *(_OWORD *)(a1 + 512) = v27;
  *(_OWORD *)(a1 + 464) = v25;
  *(_OWORD *)(a1 + 480) = v26;
  v28 = a2[7];
  v29 = a2[8];
  v30 = a2[10];
  *(_OWORD *)(a1 + 560) = a2[9];
  *(_OWORD *)(a1 + 576) = v30;
  *(_OWORD *)(a1 + 528) = v28;
  *(_OWORD *)(a1 + 544) = v29;
  v31 = a2[11];
  v32 = a2[12];
  v33 = a2[13];
  *(_QWORD *)(a1 + 640) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 608) = v32;
  *(_OWORD *)(a1 + 624) = v33;
  *(_OWORD *)(a1 + 592) = v31;
  sub_20EB0F138(a1 + 648, (uint64_t *)a2 + 29);
  v34 = a2[17];
  v35 = a2[18];
  v36 = a2[19];
  *(_OWORD *)(a1 + 732) = *(__int128 *)((char *)a2 + 316);
  *(_OWORD *)(a1 + 704) = v35;
  *(_OWORD *)(a1 + 720) = v36;
  *(_OWORD *)(a1 + 688) = v34;
  sub_20EB0F04C(a1 + 752, (uint64_t *)a2 + 42);
  sub_20EB0F04C(a1 + 792, (uint64_t *)a2 + 47);
  v37 = *(void **)(a1 + 832);
  if (v37)
  {
    *(_QWORD *)(a1 + 840) = v37;
    operator delete(v37);
    *(_QWORD *)(a1 + 832) = 0;
    *(_QWORD *)(a1 + 840) = 0;
    *(_QWORD *)(a1 + 848) = 0;
  }
  *(_OWORD *)(a1 + 832) = a2[26];
  *(_QWORD *)(a1 + 848) = *((_QWORD *)a2 + 54);
  *((_QWORD *)a2 + 53) = 0;
  *((_QWORD *)a2 + 54) = 0;
  *((_QWORD *)a2 + 52) = 0;
  *(_WORD *)(a1 + 856) = *((_WORD *)a2 + 220);
  v38 = *(double *)a1;
  *(_QWORD *)(a1 + 864) = *(_QWORD *)a1;
  *((_QWORD *)&v42 + 1) = 0;
  if (v41 != v40 && v41)
    MEMORY[0x212BC6368]();
  return v38;
}

void sub_20FDB71EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16)
{
  if (a14 != &a9 && a14 != 0)
    MEMORY[0x212BC6368]();
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDB723C(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned int a5, int a6, double a7)
{
  unsigned int v7;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  size_t v30;
  void **v31;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  const char *v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  _BYTE *v45;
  uint64_t v46;
  const char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  size_t v60;
  size_t v61;
  _QWORD *v62;
  void *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  const char *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  const char *v118;
  int v119;
  _QWORD v120[3];
  int v121;
  const char *v122;
  int v123;
  const char *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void *__dst[2];
  int64_t v128;
  _QWORD v129[2];
  _QWORD v130[3];
  const void *v131;
  uint64_t v132;
  const void *v133;
  unint64_t v134;
  void *__p;
  char v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  char *v143;
  std::__shared_weak_count *v144;
  _QWORD *v145;
  __int128 v146;
  _BYTE v147[24];
  __int128 v148;
  void *v149[2];
  unint64_t v150;
  char v151;
  _QWORD v152[5];

  v152[2] = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(a1 + 192);
  v9 = *(_DWORD *)(a1 + 196) < a3 && v7 < a2;
  if ((double)a5 * a7 <= (double)v7)
    v9 = 0;
  v10 = a6 * a4 > a5 || v9;
  sub_20FDB7FAC(&v140);
  if (**(int **)(v140 + 56) <= 2)
  {
    v11 = *(unsigned __int8 *)(v140 + 72);
    v12 = sub_20E8C31DC(v140, "OSLogSurrogateAppender", 1, 0);
    v119 = v11;
    if (v11 || v12 != 0)
    {
      v14 = v12;
      sub_20E863438((uint64_t)v129);
      v15 = sub_20E86A980(v130, (uint64_t)"[HealthHeuristics]", 18);
      sub_20E86A980(v15, (uint64_t)" Num_ftrs: ", 11);
      v16 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v16, (uint64_t)" Num cams: ", 11);
      v17 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v17, (uint64_t)" front_latest_state_inlier: ", 28);
      v18 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v18, (uint64_t)"(", 1);
      v19 = (_QWORD *)std::ostream::operator<<();
      v20 = sub_20E86A980(v19, (uint64_t)")", 1);
      sub_20E86A980(v20, (uint64_t)" map_latest_state_inlier: ", 26);
      v21 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v21, (uint64_t)"(", 1);
      v22 = (_QWORD *)std::ostream::operator<<();
      v23 = sub_20E86A980(v22, (uint64_t)")", 1);
      sub_20E86A980(v23, (uint64_t)" recall:", 8);
      v24 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v24, (uint64_t)" Insufficient: ", 15);
      v25 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v25, (uint64_t)"[", 1);
      v26 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v26, (uint64_t)"|", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v27, (uint64_t)"|", 1);
      v28 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v28, (uint64_t)"|", 1);
      v29 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v29, (uint64_t)"]", 1);
      if ((v138 & 0x10) != 0)
      {
        v32 = v137;
        if (v137 < v134)
        {
          v137 = v134;
          v32 = v134;
        }
        v33 = v133;
        v30 = v32 - (_QWORD)v133;
        if (v32 - (unint64_t)v133 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_75;
      }
      else
      {
        if ((v138 & 8) == 0)
        {
          v30 = 0;
          HIBYTE(v128) = 0;
          v31 = __dst;
          goto LABEL_30;
        }
        v33 = v131;
        v30 = v132 - (_QWORD)v131;
        if ((unint64_t)(v132 - (_QWORD)v131) > 0x7FFFFFFFFFFFFFF7)
LABEL_75:
          sub_20E860B7C();
      }
      if (v30 >= 0x17)
      {
        v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v34 = v30 | 7;
        v35 = v34 + 1;
        v31 = (void **)operator new(v34 + 1);
        __dst[1] = (void *)v30;
        v128 = v35 | 0x8000000000000000;
        __dst[0] = v31;
      }
      else
      {
        HIBYTE(v128) = v30;
        v31 = __dst;
        if (!v30)
        {
LABEL_30:
          *((_BYTE *)v31 + v30) = 0;
          v120[0] = &v140;
          v120[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v120[2] = std::chrono::system_clock::now().__d_.__rep_;
          v121 = 2;
          v122 = "unknown file";
          v123 = 91;
          v125 = 0;
          v126 = 0;
          v124 = "unknown function";
          if (v128 >= 0)
            v36 = (const char *)__dst;
          else
            v36 = (const char *)__dst[0];
          v37 = *(_QWORD *)v120[0];
          v38 = *(_QWORD *)v120[0] + 16;
          if (*(char *)(*(_QWORD *)v120[0] + 39) < 0)
          {
            v40 = *(const char **)(v37 + 16);
            v39 = *(_QWORD *)(v37 + 24);
            v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v42 & 1) != 0)
              goto LABEL_37;
          }
          else
          {
            v39 = *(unsigned __int8 *)(*(_QWORD *)v120[0] + 39);
            v40 = (const char *)(*(_QWORD *)v120[0] + 16);
            v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v41 & 1) != 0)
              goto LABEL_37;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v147);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v147);
            if ((_BYTE)v148 && (v147[23] & 0x80000000) != 0)
              operator delete(*(void **)v147);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_37:
          if (byte_254A4A4F8[23] >= 0)
            v43 = byte_254A4A4F8;
          else
            v43 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v44 = byte_254A4A4F8[23];
          else
            v44 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v147 = os_log_create(v43, v40);
          v45 = &v147[8];
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v44 >= 0x17)
          {
            v118 = v40;
            v46 = v37;
            v47 = v36;
            v48 = v14;
            v49 = v10;
            v50 = v38;
            v51 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v51 = v44 | 7;
            v52 = v51 + 1;
            v45 = operator new(v51 + 1);
            *(_QWORD *)&v147[16] = v44;
            *(_QWORD *)&v148 = v52 | 0x8000000000000000;
            *(_QWORD *)&v147[8] = v45;
            v38 = v50;
            v10 = v49;
            v14 = v48;
            v36 = v47;
            v37 = v46;
            v40 = v118;
          }
          else
          {
            BYTE7(v148) = v44;
            if (!v44)
            {
LABEL_51:
              v45[v44] = 0;
              BYTE8(v148) = 1;
              v53 = v149;
              if (v39 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v39 >= 0x17)
              {
                v55 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v39 | 7) != 0x17)
                  v55 = v39 | 7;
                v56 = v55 + 1;
                v53 = (void **)operator new(v55 + 1);
                v149[1] = (void *)v39;
                v150 = v56 | 0x8000000000000000;
                v149[0] = v53;
              }
              else
              {
                HIBYTE(v150) = v39;
                if (!v39)
                {
                  LOBYTE(v149[0]) = 0;
                  v151 = 1;
                  v54 = *(NSObject **)v147;
                  if ((SHIBYTE(v150) & 0x80000000) == 0)
                    goto LABEL_55;
                  goto LABEL_61;
                }
              }
              memmove(v53, v40, v39);
              *((_BYTE *)v53 + v39) = 0;
              v151 = 1;
              v54 = *(NSObject **)v147;
              if ((SHIBYTE(v150) & 0x80000000) == 0)
              {
LABEL_55:
                if (!BYTE8(v148))
                  goto LABEL_64;
                goto LABEL_62;
              }
LABEL_61:
              operator delete(v149[0]);
              if (!BYTE8(v148))
                goto LABEL_64;
LABEL_62:
              if (SBYTE7(v148) < 0)
                operator delete(*(void **)&v147[8]);
LABEL_64:
              if (*(_QWORD *)v147)
                os_release(*(void **)v147);
              if (!v14 || !*(_QWORD *)(v14 + 24))
              {
                os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)v147 = 136315138;
                *(_QWORD *)&v147[4] = v36;
                v63 = (void *)_os_log_send_and_compose_impl();
                v64 = v119;
                if (v63)
                  free(v63);
                goto LABEL_140;
              }
              v57 = _os_log_pack_size();
              v58 = (std::__shared_weak_count_vtbl *)operator new(v57, (std::align_val_t)8uLL);
              v59 = (std::__shared_weak_count *)operator new();
              v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v59->__shared_owners_ = 0;
              v59->__shared_weak_owners_ = 0;
              v59[1].__vftable = v58;
              *(_QWORD *)&v141 = v58;
              *((_QWORD *)&v141 + 1) = v58;
              v143 = 0;
              v144 = 0;
              v142 = v59;
              v60 = strlen(v36);
              if (v60 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v61 = v60;
              if (v60 >= 0x17)
              {
                v65 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v60 | 7) != 0x17)
                  v65 = v60 | 7;
                v66 = v65 + 1;
                v62 = operator new(v65 + 1);
                *(_QWORD *)&v146 = v61;
                *((_QWORD *)&v146 + 1) = v66 | 0x8000000000000000;
                v145 = v62;
              }
              else
              {
                HIBYTE(v146) = v60;
                v62 = &v145;
                if (!v60)
                {
LABEL_80:
                  *((_BYTE *)v62 + v61) = 0;
                  v67 = v145;
                  v152[0] = v146;
                  *(_QWORD *)((char *)v152 + 7) = *(_QWORD *)((char *)&v146 + 7);
                  v68 = HIBYTE(v146);
                  v69 = operator new(0x38uLL);
                  v69[1] = 0;
                  v69[2] = 0;
                  v69[3] = off_24C9ABC20;
                  *v69 = &off_24C9ABBD0;
                  v70 = v152[0];
                  v69[4] = v67;
                  v69[5] = v70;
                  *(_QWORD *)((char *)v69 + 47) = *(_QWORD *)((char *)v152 + 7);
                  *((_BYTE *)v69 + 55) = v68;
                  v152[0] = 0;
                  *(_QWORD *)((char *)v152 + 7) = 0;
                  v71 = v144;
                  v143 = (char *)(v69 + 3);
                  v144 = (std::__shared_weak_count *)v69;
                  if (v71)
                  {
                    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
                    do
                      v73 = __ldaxr(p_shared_owners);
                    while (__stlxr(v73 - 1, p_shared_owners));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                  }
                  *(_OWORD *)v147 = v141;
                  v74 = v143;
                  *(_QWORD *)&v147[16] = v142;
                  if (v142)
                  {
                    v75 = (unint64_t *)&v142->__shared_owners_;
                    do
                      v76 = __ldxr(v75);
                    while (__stxr(v76 + 1, v75));
                  }
                  v77 = v144;
                  *(_QWORD *)&v148 = v74;
                  *((_QWORD *)&v148 + 1) = v144;
                  if (v144)
                  {
                    v78 = (unint64_t *)&v144->__shared_owners_;
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                    v149[0] = v74;
                    do
                      v80 = __ldaxr(v78);
                    while (__stlxr(v80 - 1, v78));
                    if (!v80)
                    {
                      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                      std::__shared_weak_count::__release_weak(v77);
                    }
                  }
                  else
                  {
                    v149[0] = v74;
                  }
                  v81 = v142;
                  if (v142)
                  {
                    v82 = (unint64_t *)&v142->__shared_owners_;
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    if (!v83)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  v84 = *(_QWORD *)v147;
                  if (*((char *)v149[0] + 31) >= 0)
                    v85 = (char *)v149[0] + 8;
                  else
                    v85 = (char *)*((_QWORD *)v149[0] + 1);
                  v86 = _os_log_pack_fill();
                  *(_DWORD *)v86 = 136315138;
                  *(_QWORD *)(v86 + 4) = v85;
                  v87 = operator new();
                  v88 = *(unsigned __int8 *)(v37 + 39);
                  v89 = *(_QWORD *)(v37 + 16);
                  v90 = *(_QWORD *)(v37 + 24);
                  v91 = v148;
                  *(_OWORD *)(v87 + 8) = *(_OWORD *)&v147[8];
                  if ((v88 & 0x80u) != 0)
                    v88 = v90;
                  else
                    v89 = v38;
                  *(_QWORD *)v87 = v84;
                  *(_QWORD *)&v147[8] = 0;
                  *(_QWORD *)&v147[16] = 0;
                  *(_OWORD *)(v87 + 24) = v91;
                  v148 = 0uLL;
                  *(_QWORD *)(v87 + 40) = v89;
                  *(_QWORD *)(v87 + 48) = v88;
                  *(_BYTE *)(v87 + 56) = 2;
                  v145 = 0;
                  *(_QWORD *)&v141 = v87;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v141);
                  v92 = v141;
                  *(_QWORD *)&v141 = 0;
                  if (v92)
                  {
                    v93 = *(std::__shared_weak_count **)(v92 + 32);
                    if (v93)
                    {
                      v94 = (unint64_t *)&v93->__shared_owners_;
                      do
                        v95 = __ldaxr(v94);
                      while (__stlxr(v95 - 1, v94));
                      if (!v95)
                      {
                        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                    }
                    v96 = *(std::__shared_weak_count **)(v92 + 16);
                    if (v96)
                    {
                      v97 = (unint64_t *)&v96->__shared_owners_;
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v98 - 1, v97));
                      if (!v98)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }
                    MEMORY[0x212BC6398](v92, 0x10F0C40B62ED6C6);
                    v99 = v145;
                    v145 = 0;
                    if (v99)
                    {
                      v100 = (std::__shared_weak_count *)v99[4];
                      if (v100)
                      {
                        v101 = (unint64_t *)&v100->__shared_owners_;
                        do
                          v102 = __ldaxr(v101);
                        while (__stlxr(v102 - 1, v101));
                        if (!v102)
                        {
                          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                          std::__shared_weak_count::__release_weak(v100);
                        }
                      }
                      v103 = (std::__shared_weak_count *)v99[2];
                      if (v103)
                      {
                        v104 = (unint64_t *)&v103->__shared_owners_;
                        do
                          v105 = __ldaxr(v104);
                        while (__stlxr(v105 - 1, v104));
                        if (!v105)
                        {
                          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                          std::__shared_weak_count::__release_weak(v103);
                        }
                      }
                      MEMORY[0x212BC6398](v99, 0x10F0C40B62ED6C6);
                    }
                  }
                  v106 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
                  v64 = v119;
                  if (*((_QWORD *)&v148 + 1))
                  {
                    v107 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                    do
                      v108 = __ldaxr(v107);
                    while (__stlxr(v108 - 1, v107));
                    if (!v108)
                    {
                      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                      std::__shared_weak_count::__release_weak(v106);
                    }
                  }
                  v109 = *(std::__shared_weak_count **)&v147[16];
                  if (*(_QWORD *)&v147[16])
                  {
                    v110 = (unint64_t *)(*(_QWORD *)&v147[16] + 8);
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                      std::__shared_weak_count::__release_weak(v109);
                    }
                  }
LABEL_140:
                  if (v64)
                  {
                    v112 = (const char *)__dst;
                    if (v128 < 0)
                      v112 = (const char *)__dst[0];
                    sub_20E8C003C((uint64_t)v120, "%s", v112);
                    sub_20E863570((uint64_t)v120);
                  }
                  sub_20E863570((uint64_t)v120);
                  v113 = v126;
                  if (v126)
                  {
                    v114 = (unint64_t *)&v126->__shared_owners_;
                    do
                      v115 = __ldaxr(v114);
                    while (__stlxr(v115 - 1, v114));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                      std::__shared_weak_count::__release_weak(v113);
                    }
                  }
                  if (SHIBYTE(v128) < 0)
                    operator delete(__dst[0]);
                  v129[0] = *MEMORY[0x24BEDB7F0];
                  v116 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)((char *)v129 + *(_QWORD *)(v129[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  v130[0] = v116;
                  v130[1] = MEMORY[0x24BEDB848] + 16;
                  if (v136 < 0)
                    operator delete(__p);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v139);
                  return v10;
                }
              }
              memcpy(v62, v36, v61);
              goto LABEL_80;
            }
          }
          memmove(v45, v43, v44);
          goto LABEL_51;
        }
      }
      memmove(v31, v33, v30);
      goto LABEL_30;
    }
  }
  return v10;
}

void sub_20FDB7E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  if (*(_BYTE *)(v5 - 200) && *(char *)(v5 - 201) < 0)
    operator delete(*(void **)(v5 - 224));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)va1);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20FDB7FAC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C550);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C550))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6C548);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6C550);
  }
  *a1 = qword_254A6C548;
}

void sub_20FDB8048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6C550);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6C550);
  _Unwind_Resume(a1);
}

BOOL sub_20FDB80A0(uint64_t a1, unsigned int a2, unsigned int **a3, double a4)
{
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  int v31;
  unsigned int *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  float v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  size_t v51;
  void **v52;
  unint64_t v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  size_t v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  const char *v63;
  size_t v64;
  _BYTE *v65;
  uint64_t v66;
  unsigned int v67;
  const char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  size_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  size_t v80;
  size_t v81;
  _QWORD *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char v87;
  _QWORD *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  const char *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  std::logic_error *exception;
  const char *v138;
  const char *v139;
  unint64_t v140;
  _QWORD v141[3];
  int v142;
  const char *v143;
  int v144;
  const char *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void *__dst[2];
  int64_t v149;
  _QWORD v150[2];
  _QWORD v151[3];
  const void *v152;
  uint64_t v153;
  const void *v154;
  unint64_t v155;
  void *__p;
  char v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  std::__shared_weak_count *v163;
  char *v164;
  std::__shared_weak_count *v165;
  _QWORD *v166;
  __int128 v167;
  _BYTE v168[24];
  __int128 v169;
  void *v170[2];
  unint64_t v171;
  char v172;
  _QWORD v173[5];

  v173[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  v5 = a3[1];
  if (*a3 == v5)
    return 0;
  v6 = *(_QWORD *)(a1 + 384);
  if (!v6)
    goto LABEL_189;
  v9 = *(_QWORD *)(a1 + 376);
  v10 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
    v11 = 0;
    v12 = 0;
    v13 = v6 + 0xFFFFFFFF;
    v14 = *a3;
    while (1)
    {
      v15 = *v14;
      v16 = *(uint64_t **)(v9 + 8 * (v13 & v15));
      if (!v16)
        break;
      do
      {
        while (1)
        {
          v16 = (uint64_t *)*v16;
          if (!v16)
            goto LABEL_189;
          v17 = v16[1];
          if (v17 == v15)
            break;
          if ((v17 & v10) != (v13 & v15))
            goto LABEL_189;
        }
      }
      while (*((_DWORD *)v16 + 4) != (_DWORD)v15);
      v18 = *((_DWORD *)v16 + 5);
      v19 = v4;
      v20 = ((char *)v5 - (char *)v4) >> 3;
      do
      {
        v21 = v20 >> 1;
        v22 = &v19[2 * (v20 >> 1)];
        v24 = *v22;
        v23 = v22 + 2;
        v20 += ~(v20 >> 1);
        if (v24 < v15)
          v19 = v23;
        else
          v20 = v21;
      }
      while (v20);
      if (v19 == v5 || *v19 != (_DWORD)v15)
        goto LABEL_190;
      v11 += v18;
      v12 += v19[1];
      v14 += 2;
      if (v14 == v5)
        goto LABEL_40;
    }
LABEL_189:
    sub_20E89FD20("unordered_map::at: key not found");
  }
  v11 = 0;
  v12 = 0;
  v26 = *a3;
  do
  {
    v27 = *v26;
    v28 = v27;
    if (v6 <= v27)
      v28 = v27 % v6;
    v29 = *(uint64_t **)(v9 + 8 * v28);
    if (!v29)
      goto LABEL_189;
    do
    {
      while (1)
      {
        v29 = (uint64_t *)*v29;
        if (!v29)
          goto LABEL_189;
        v30 = v29[1];
        if (v30 == v27)
          break;
        if (v30 >= v6)
          v30 %= v6;
        if (v30 != v28)
          goto LABEL_189;
      }
    }
    while (*((_DWORD *)v29 + 4) != (_DWORD)v27);
    v31 = *((_DWORD *)v29 + 5);
    v32 = *a3;
    v33 = ((char *)v5 - (char *)v4) >> 3;
    do
    {
      v34 = v33 >> 1;
      v35 = &v32[2 * (v33 >> 1)];
      v37 = *v35;
      v36 = v35 + 2;
      v33 += ~(v33 >> 1);
      if (v37 < v27)
        v32 = v36;
      else
        v33 = v34;
    }
    while (v33);
    if (v32 == v5 || *v32 != (_DWORD)v27)
    {
LABEL_190:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E89FD70(exception, "key not found in map");
      __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
    }
    v11 += v31;
    v12 += v32[1];
    v26 += 2;
  }
  while (v26 != v5);
LABEL_40:
  if (v12)
    v38 = (float)v12;
  else
    v38 = 1.0;
  sub_20FDB7FAC(&v161);
  if (**(int **)(v161 + 56) <= 2)
  {
    v39 = *(unsigned __int8 *)(v161 + 72);
    v40 = sub_20E8C31DC(v161, "OSLogSurrogateAppender", 1, 0);
    v41 = v40;
    if (v39 || v40)
    {
      sub_20E863438((uint64_t)v150);
      v42 = sub_20E86A980(v151, (uint64_t)"[HealthHeuristics]", 18);
      sub_20E86A980(v42, (uint64_t)" Summation of Stereo_ftr_cnt: ", 30);
      v43 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v43, (uint64_t)" inlier_cnt: ", 13);
      v44 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v44, (uint64_t)"(", 1);
      v45 = (_QWORD *)std::ostream::operator<<();
      v46 = sub_20E86A980(v45, (uint64_t)")", 1);
      sub_20E86A980(v46, (uint64_t)" recall:", 8);
      v47 = (_QWORD *)std::ostream::operator<<();
      v48 = sub_20E86A980(v47, (uint64_t)" Insufficient: ", 15);
      sub_20E86A980(v48, (uint64_t)"[", 1);
      v49 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v49, (uint64_t)"|", 1);
      v50 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v50, (uint64_t)"]", 1);
      if ((v159 & 0x10) != 0)
      {
        v53 = v158;
        if (v158 < v155)
        {
          v158 = v155;
          v53 = v155;
        }
        v54 = v154;
        v51 = v53 - (_QWORD)v154;
        if (v53 - (unint64_t)v154 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_104;
      }
      else
      {
        if ((v159 & 8) == 0)
        {
          v51 = 0;
          HIBYTE(v149) = 0;
          v52 = __dst;
          goto LABEL_59;
        }
        v54 = v152;
        v51 = v153 - (_QWORD)v152;
        if ((unint64_t)(v153 - (_QWORD)v152) > 0x7FFFFFFFFFFFFFF7)
LABEL_104:
          sub_20E860B7C();
      }
      if (v51 >= 0x17)
      {
        v55 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v55 = v51 | 7;
        v56 = v55 + 1;
        v52 = (void **)operator new(v55 + 1);
        __dst[1] = (void *)v51;
        v149 = v56 | 0x8000000000000000;
        __dst[0] = v52;
      }
      else
      {
        HIBYTE(v149) = v51;
        v52 = __dst;
        if (!v51)
        {
LABEL_59:
          *((_BYTE *)v52 + v51) = 0;
          v141[0] = &v161;
          v141[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v141[2] = std::chrono::system_clock::now().__d_.__rep_;
          v142 = 2;
          v143 = "unknown file";
          v144 = 136;
          v146 = 0;
          v147 = 0;
          v145 = "unknown function";
          if (v149 >= 0)
            v57 = (const char *)__dst;
          else
            v57 = (const char *)__dst[0];
          v58 = *(_QWORD *)v141[0];
          v59 = (const char *)(*(_QWORD *)v141[0] + 16);
          v139 = v59;
          if (*(char *)(*(_QWORD *)v141[0] + 39) < 0)
          {
            v59 = *(const char **)(v58 + 16);
            v60 = *(_QWORD *)(v58 + 24);
            v140 = v41;
            v62 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v62 & 1) != 0)
              goto LABEL_66;
          }
          else
          {
            v60 = *(unsigned __int8 *)(*(_QWORD *)v141[0] + 39);
            v140 = v41;
            v61 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v61 & 1) != 0)
              goto LABEL_66;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v168);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v168);
            if ((_BYTE)v169 && (v168[23] & 0x80000000) != 0)
              operator delete(*(void **)v168);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_66:
          if (byte_254A4A4F8[23] >= 0)
            v63 = byte_254A4A4F8;
          else
            v63 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v64 = byte_254A4A4F8[23];
          else
            v64 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v168 = os_log_create(v63, v59);
          v65 = &v168[8];
          if (v64 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v64 >= 0x17)
          {
            v138 = v59;
            v66 = v58;
            v67 = a2;
            v68 = v57;
            v69 = v39;
            v70 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v64 | 7) != 0x17)
              v70 = v64 | 7;
            v71 = v70 + 1;
            v65 = operator new(v70 + 1);
            *(_QWORD *)&v168[16] = v64;
            *(_QWORD *)&v169 = v71 | 0x8000000000000000;
            *(_QWORD *)&v168[8] = v65;
            v39 = v69;
            v57 = v68;
            a2 = v67;
            v58 = v66;
            v59 = v138;
          }
          else
          {
            BYTE7(v169) = v64;
            if (!v64)
            {
LABEL_80:
              v65[v64] = 0;
              BYTE8(v169) = 1;
              v72 = v170;
              if (v60 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v60 >= 0x17)
              {
                v74 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v60 | 7) != 0x17)
                  v74 = v60 | 7;
                v75 = v74 + 1;
                v72 = (void **)operator new(v74 + 1);
                v170[1] = (void *)v60;
                v171 = v75 | 0x8000000000000000;
                v170[0] = v72;
                v73 = v140;
              }
              else
              {
                HIBYTE(v171) = v60;
                v73 = v140;
                if (!v60)
                {
LABEL_88:
                  *((_BYTE *)v72 + v60) = 0;
                  v172 = 1;
                  v76 = *(NSObject **)v168;
                  if (SHIBYTE(v171) < 0)
                    operator delete(v170[0]);
                  if (BYTE8(v169) && SBYTE7(v169) < 0)
                    operator delete(*(void **)&v168[8]);
                  if (*(_QWORD *)v168)
                    os_release(*(void **)v168);
                  if (!v73 || !*(_QWORD *)(v73 + 24))
                  {
                    os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v168 = 136315138;
                    *(_QWORD *)&v168[4] = v57;
                    v83 = (void *)_os_log_send_and_compose_impl();
                    if (v83)
                      free(v83);
                    goto LABEL_169;
                  }
                  v77 = _os_log_pack_size();
                  v78 = (std::__shared_weak_count_vtbl *)operator new(v77, (std::align_val_t)8uLL);
                  v79 = (std::__shared_weak_count *)operator new();
                  v79->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v79->__shared_owners_ = 0;
                  v79->__shared_weak_owners_ = 0;
                  v79[1].__vftable = v78;
                  *(_QWORD *)&v162 = v78;
                  *((_QWORD *)&v162 + 1) = v78;
                  v164 = 0;
                  v165 = 0;
                  v163 = v79;
                  v80 = strlen(v57);
                  if (v80 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v81 = v80;
                  if (v80 >= 0x17)
                  {
                    v84 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v80 | 7) != 0x17)
                      v84 = v80 | 7;
                    v85 = v84 + 1;
                    v82 = operator new(v84 + 1);
                    *(_QWORD *)&v167 = v81;
                    *((_QWORD *)&v167 + 1) = v85 | 0x8000000000000000;
                    v166 = v82;
                    v73 = v140;
                  }
                  else
                  {
                    HIBYTE(v167) = v80;
                    v82 = &v166;
                    if (!v80)
                    {
LABEL_109:
                      *((_BYTE *)v82 + v81) = 0;
                      v86 = v166;
                      v173[0] = v167;
                      *(_QWORD *)((char *)v173 + 7) = *(_QWORD *)((char *)&v167 + 7);
                      v87 = HIBYTE(v167);
                      v88 = operator new(0x38uLL);
                      v88[1] = 0;
                      v88[2] = 0;
                      v88[3] = off_24C9ABC20;
                      *v88 = &off_24C9ABBD0;
                      v89 = v173[0];
                      v88[4] = v86;
                      v88[5] = v89;
                      *(_QWORD *)((char *)v88 + 47) = *(_QWORD *)((char *)v173 + 7);
                      *((_BYTE *)v88 + 55) = v87;
                      v173[0] = 0;
                      *(_QWORD *)((char *)v173 + 7) = 0;
                      v90 = v165;
                      v164 = (char *)(v88 + 3);
                      v165 = (std::__shared_weak_count *)v88;
                      if (v90)
                      {
                        p_shared_owners = (unint64_t *)&v90->__shared_owners_;
                        do
                          v92 = __ldaxr(p_shared_owners);
                        while (__stlxr(v92 - 1, p_shared_owners));
                        if (!v92)
                        {
                          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                          std::__shared_weak_count::__release_weak(v90);
                        }
                      }
                      *(_OWORD *)v168 = v162;
                      v93 = v164;
                      *(_QWORD *)&v168[16] = v163;
                      if (v163)
                      {
                        v94 = (unint64_t *)&v163->__shared_owners_;
                        do
                          v95 = __ldxr(v94);
                        while (__stxr(v95 + 1, v94));
                      }
                      v96 = v165;
                      *(_QWORD *)&v169 = v93;
                      *((_QWORD *)&v169 + 1) = v165;
                      if (v165)
                      {
                        v97 = (unint64_t *)&v165->__shared_owners_;
                        do
                          v98 = __ldxr(v97);
                        while (__stxr(v98 + 1, v97));
                        v170[0] = v93;
                        do
                          v99 = __ldaxr(v97);
                        while (__stlxr(v99 - 1, v97));
                        if (!v99)
                        {
                          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                          std::__shared_weak_count::__release_weak(v96);
                        }
                      }
                      else
                      {
                        v170[0] = v93;
                      }
                      v100 = v163;
                      if (v163)
                      {
                        v101 = (unint64_t *)&v163->__shared_owners_;
                        do
                          v102 = __ldaxr(v101);
                        while (__stlxr(v102 - 1, v101));
                        if (!v102)
                        {
                          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                          std::__shared_weak_count::__release_weak(v100);
                        }
                      }
                      v103 = *(_QWORD *)v168;
                      if (*((char *)v170[0] + 31) >= 0)
                        v104 = (char *)v170[0] + 8;
                      else
                        v104 = (char *)*((_QWORD *)v170[0] + 1);
                      v105 = _os_log_pack_fill();
                      *(_DWORD *)v105 = 136315138;
                      *(_QWORD *)(v105 + 4) = v104;
                      v106 = operator new();
                      v107 = *(unsigned __int8 *)(v58 + 39);
                      v108 = *(const char **)(v58 + 16);
                      v109 = *(_QWORD *)(v58 + 24);
                      v110 = v169;
                      *(_OWORD *)(v106 + 8) = *(_OWORD *)&v168[8];
                      if ((v107 & 0x80u) != 0)
                        v107 = v109;
                      else
                        v108 = v139;
                      *(_QWORD *)v106 = v103;
                      *(_QWORD *)&v168[8] = 0;
                      *(_QWORD *)&v168[16] = 0;
                      *(_OWORD *)(v106 + 24) = v110;
                      v169 = 0uLL;
                      *(_QWORD *)(v106 + 40) = v108;
                      *(_QWORD *)(v106 + 48) = v107;
                      *(_BYTE *)(v106 + 56) = 2;
                      v166 = 0;
                      *(_QWORD *)&v162 = v106;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v73 + 24) + 40))(*(_QWORD *)(v73 + 24), &v162);
                      v111 = v162;
                      *(_QWORD *)&v162 = 0;
                      if (v111)
                      {
                        v112 = *(std::__shared_weak_count **)(v111 + 32);
                        if (v112)
                        {
                          v113 = (unint64_t *)&v112->__shared_owners_;
                          do
                            v114 = __ldaxr(v113);
                          while (__stlxr(v114 - 1, v113));
                          if (!v114)
                          {
                            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                            std::__shared_weak_count::__release_weak(v112);
                          }
                        }
                        v115 = *(std::__shared_weak_count **)(v111 + 16);
                        if (v115)
                        {
                          v116 = (unint64_t *)&v115->__shared_owners_;
                          do
                            v117 = __ldaxr(v116);
                          while (__stlxr(v117 - 1, v116));
                          if (!v117)
                          {
                            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                            std::__shared_weak_count::__release_weak(v115);
                          }
                        }
                        MEMORY[0x212BC6398](v111, 0x10F0C40B62ED6C6);
                        v118 = v166;
                        v166 = 0;
                        if (v118)
                        {
                          v119 = (std::__shared_weak_count *)v118[4];
                          if (v119)
                          {
                            v120 = (unint64_t *)&v119->__shared_owners_;
                            do
                              v121 = __ldaxr(v120);
                            while (__stlxr(v121 - 1, v120));
                            if (!v121)
                            {
                              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                              std::__shared_weak_count::__release_weak(v119);
                            }
                          }
                          v122 = (std::__shared_weak_count *)v118[2];
                          if (v122)
                          {
                            v123 = (unint64_t *)&v122->__shared_owners_;
                            do
                              v124 = __ldaxr(v123);
                            while (__stlxr(v124 - 1, v123));
                            if (!v124)
                            {
                              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                              std::__shared_weak_count::__release_weak(v122);
                            }
                          }
                          MEMORY[0x212BC6398](v118, 0x10F0C40B62ED6C6);
                        }
                      }
                      v125 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
                      if (*((_QWORD *)&v169 + 1))
                      {
                        v126 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
                        do
                          v127 = __ldaxr(v126);
                        while (__stlxr(v127 - 1, v126));
                        if (!v127)
                        {
                          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                          std::__shared_weak_count::__release_weak(v125);
                        }
                      }
                      v128 = *(std::__shared_weak_count **)&v168[16];
                      if (*(_QWORD *)&v168[16])
                      {
                        v129 = (unint64_t *)(*(_QWORD *)&v168[16] + 8);
                        do
                          v130 = __ldaxr(v129);
                        while (__stlxr(v130 - 1, v129));
                        if (!v130)
                        {
                          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                          std::__shared_weak_count::__release_weak(v128);
                        }
                      }
LABEL_169:
                      if (v39)
                      {
                        v131 = (const char *)__dst;
                        if (v149 < 0)
                          v131 = (const char *)__dst[0];
                        sub_20E8C003C((uint64_t)v141, "%s", v131);
                        sub_20E863570((uint64_t)v141);
                      }
                      sub_20E863570((uint64_t)v141);
                      v132 = v147;
                      if (v147)
                      {
                        v133 = (unint64_t *)&v147->__shared_owners_;
                        do
                          v134 = __ldaxr(v133);
                        while (__stlxr(v134 - 1, v133));
                        if (!v134)
                        {
                          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                          std::__shared_weak_count::__release_weak(v132);
                        }
                      }
                      if (SHIBYTE(v149) < 0)
                        operator delete(__dst[0]);
                      v150[0] = *MEMORY[0x24BEDB7F0];
                      v135 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)((char *)v150 + *(_QWORD *)(v150[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      v151[0] = v135;
                      v151[1] = MEMORY[0x24BEDB848] + 16;
                      if (v157 < 0)
                        operator delete(__p);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v160);
                      return (float)((float)v11 / v38) < a4 && v11 < a2;
                    }
                  }
                  memcpy(v82, v57, v81);
                  goto LABEL_109;
                }
              }
              memmove(v72, v59, v60);
              goto LABEL_88;
            }
          }
          memmove(v65, v63, v64);
          goto LABEL_80;
        }
      }
      memmove(v52, v54, v51);
      goto LABEL_59;
    }
  }
  return (float)((float)v11 / v38) < a4 && v11 < a2;
}

void sub_20FDB8DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (*(_BYTE *)(v30 - 200) && *(char *)(v30 - 201) < 0)
    operator delete(*(void **)(v30 - 224));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  if (a29 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a30);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_20FDB8F3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20FDB8F50(uint64_t a1, unsigned int a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL8 result;
  unsigned int v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v5 = *(_QWORD *)(a1 + 384);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 376);
      v7 = v5 - 1;
      if ((v5 & (v5 - 1)) != 0)
      {
        while (1)
        {
          v17 = *v3;
          v18 = v17;
          if (v5 <= v17)
            v18 = v17 % v5;
          v19 = *(uint64_t **)(v6 + 8 * v18);
          if (!v19)
            break;
          do
          {
            while (1)
            {
              v19 = (uint64_t *)*v19;
              if (!v19)
                goto LABEL_33;
              v20 = v19[1];
              if (v20 == v17)
                break;
              if (v20 >= v5)
                v20 %= v5;
              if (v20 != v18)
                goto LABEL_33;
            }
          }
          while (*((_DWORD *)v19 + 4) != (_DWORD)v17);
          v15 = *((_DWORD *)v19 + 5);
          result = v15 < a2;
          v3 += 2;
          if (v15 < a2 || v3 == v4)
            return result;
        }
      }
      else
      {
        v8 = v5 + 0xFFFFFFFF;
        while (1)
        {
          v9 = *v3;
          v10 = *(uint64_t **)(v6 + 8 * (v8 & v9));
          if (!v10)
            break;
          do
          {
            while (1)
            {
              v10 = (uint64_t *)*v10;
              if (!v10)
                goto LABEL_33;
              v11 = v10[1];
              if (v11 == v9)
                break;
              if ((v11 & v7) != (v8 & v9))
                goto LABEL_33;
            }
          }
          while (*((_DWORD *)v10 + 4) != (_DWORD)v9);
          v12 = *((_DWORD *)v10 + 5);
          result = v12 < a2;
          v3 += 2;
          if (v12 < a2 || v3 == v4)
            return result;
        }
      }
    }
LABEL_33:
    sub_20E89FD20("unordered_map::at: key not found");
  }
  return 0;
}

long double sub_20FDB9078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  float64x2_t *v4;
  float64x2_t *v5;
  uint64_t v6;
  float64x2_t *v7;
  uint64_t v8;
  double *v9;
  double v10;
  float64x2_t *v11;
  BOOL v13;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t v19;
  unint64_t v20;
  uint64_t v21;
  double *v22;
  double *v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  float64x2_t *v32;
  uint64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  long double result;
  float64x2_t *v61;
  float64x2_t v63;
  float64x2_t __x;
  long double v65;
  float64x2_t v66;
  float64x2_t v67;

  v2 = a1;
  v3 = *(unsigned int *)(a1 + 112);
  if (!*(_DWORD *)(a1 + 112))
  {
    v9 = *(double **)(a1 + 384);
    v10 = *v9;
    goto LABEL_28;
  }
  v4 = *(float64x2_t **)(a2 + 40);
  v5 = *(float64x2_t **)(a1 + 96);
  v6 = v3;
  v7 = *(float64x2_t **)(a1 + 160);
  if (v3 >= 8)
  {
    v8 = 0;
    v11 = (float64x2_t *)((char *)v4 + v6 * 8);
    v13 = v4 < (float64x2_t *)((char *)v7 + v6 * 8) && v7 < v11;
    if ((v5 >= v11 || v4 >= (float64x2_t *)((char *)v5 + v6 * 8)) && !v13)
    {
      v8 = v3 & 0xFFFFFFFC;
      v15 = v4 + 1;
      v16 = v5 + 1;
      v17 = v7 + 1;
      v18 = v8;
      do
      {
        v19 = vdivq_f64(vsubq_f64(*v15, *v16), *v17);
        v15[-1] = vdivq_f64(vsubq_f64(v15[-1], v16[-1]), v17[-1]);
        *v15 = v19;
        v15 += 2;
        v16 += 2;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
      if ((v3 & 3) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v8 = 0;
  }
  v20 = v3 - v8;
  v21 = v8;
  v22 = &v7->f64[v21];
  v23 = &v5->f64[v21];
  v24 = &v4->f64[v21];
  do
  {
    v25 = *v23++;
    v26 = *v24 - v25;
    v27 = *v22++;
    *v24++ = v26 / v27;
    --v20;
  }
  while (v20);
LABEL_22:
  v9 = *(double **)(a1 + 384);
  v28 = &v9[v6];
  v29 = &v9[v6 + v6];
  v10 = v29[v3];
  if (v3 >= 4)
  {
    v61 = v4;
    v31 = 0;
    v30 = v3 & 0xFFFFFFFC;
    v32 = v4 + 1;
    __asm { FMOV            V0.2D, #1.0 }
    v63 = _Q0;
    v37 = v30;
    do
    {
      __x = vnegq_f64(vaddq_f64(vmulq_f64(*(float64x2_t *)&v9[v31 / 8], v32[v31 / 0x10 - 1]), *(float64x2_t *)&v9[v3 + v31 / 8]));
      v67 = vnegq_f64(vaddq_f64(vmulq_f64(*(float64x2_t *)&v9[v31 / 8 + 2], v32[v31 / 0x10]), *(float64x2_t *)&v9[v3 + 2 + v31 / 8]));
      v65 = exp(__x.f64[1]);
      v38.f64[0] = exp(__x.f64[0]);
      v38.f64[1] = v65;
      v66 = v38;
      __x.f64[0] = exp(v67.f64[1]);
      v39.f64[0] = exp(v67.f64[0]);
      v39.f64[1] = __x.f64[0];
      v40 = vmulq_f64(*(float64x2_t *)&v29[v31 / 8], vdivq_f64(v63, vaddq_f64(v66, v63)));
      v41 = vmulq_f64(*(float64x2_t *)&v29[v31 / 8 + 2], vdivq_f64(v63, vaddq_f64(v39, v63)));
      v10 = v10 + v40.f64[0] + v40.f64[1] + v41.f64[0] + v41.f64[1];
      v31 += 32;
      v37 -= 4;
    }
    while (v37);
    v4 = v61;
    v2 = a1;
    if ((v3 & 3) == 0)
      goto LABEL_28;
  }
  else
  {
    v30 = 0;
  }
  do
  {
    v10 = v10 + v29[v30] * (1.0 / (exp(-(v9[v30] * v4->f64[v30] + v28[v30])) + 1.0));
    ++v30;
  }
  while (v3 != v30);
LABEL_28:
  v42 = exp(-(v9[*(_QWORD *)(v2 + 400) - 1] * v9[*(_QWORD *)(v2 + 400) - 1]));
  v43 = *(_QWORD *)(v2 + 48);
  v44 = *(_QWORD *)(v2 + 8);
  if (v43)
  {
    v45 = *(_QWORD *)(v2 + 32);
    v46 = (*(_QWORD *)(v2 + 16) - v44) >> 3;
    v47 = *(_QWORD *)(v2 + 48);
    do
    {
      *(double *)(v44 + 8 * (v45 % v46)) = v42 * *(double *)(v44 + 8 * (v45 % v46));
      ++v45;
      --v47;
    }
    while (v47);
  }
  else
  {
    v46 = (*(_QWORD *)(v2 + 16) - v44) >> 3;
  }
  v48 = *(_QWORD *)(v2 + 40);
  *(double *)(v44 + 8 * v48) = v10;
  v49 = v48 + 1;
  if (v49 >= v46)
    v50 = v46;
  else
    v50 = 0;
  *(_QWORD *)(v2 + 40) = v49 - v50;
  if (v43 != v46)
  {
    *(_QWORD *)(v2 + 48) = ++v43;
    if (v43)
      goto LABEL_41;
LABEL_44:
    v54 = 0.0;
    goto LABEL_50;
  }
  v51 = *(_QWORD *)(v2 + 32) + 1;
  if (v51 >= v43)
    v52 = v43;
  else
    v52 = 0;
  *(_QWORD *)(v2 + 32) = v51 - v52;
  if (!v43)
    goto LABEL_44;
LABEL_41:
  if (v43 == 1)
  {
    v53 = 0;
    v54 = 0.0;
LABEL_48:
    v57 = v43 - v53;
    v58 = v53 + *(_QWORD *)(v2 + 32);
    do
    {
      v54 = v54 + *(double *)(v44 + 8 * (v58 % v46));
      ++v58;
      --v57;
    }
    while (v57);
    goto LABEL_50;
  }
  v53 = v43 & 0xFFFFFFFFFFFFFFFELL;
  v54 = 0.0;
  v55 = v43 & 0xFFFFFFFFFFFFFFFELL;
  v56 = *(_QWORD *)(v2 + 32);
  do
  {
    v54 = v54 + *(double *)(v44 + 8 * (v56 % v46)) + *(double *)(v44 + 8 * ((v56 + 1) % v46));
    v56 += 2;
    v55 -= 2;
  }
  while (v55);
  if (v43 != v53)
    goto LABEL_48;
LABEL_50:
  v59 = (double)v43;
  if (!v43)
    v59 = 1.0;
  result = 10.0 / (exp(*(double *)(v2 + 408) * (-v54 / v59)) + 1.0);
  *(long double *)v2 = result;
  return result;
}

uint64_t *sub_20FDB947C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  __int128 v14;

  __p = operator new(0x28uLL);
  v14 = xmmword_2102DCA10;
  strcpy((char *)__p, "IMUPreintegrationEnabler parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DCF0((unsigned int *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUPreintegrationEnablerConfig.min_num_frames_to_enable_preint_factor", v4, " Maximum number of frames needed before enabling preintegration factor");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "IMUPreintegrationEnablerConfig.maximum_converged_camera_to_imu_time_offset_std", v5, " Maximum camera to imu time-offset std. allowed before declaring converged. Unit (sec).");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUPreintegrationEnablerConfig.num_frames_to_disable_preint_factor", v6, "Number of frames needed to disable preintegration factor to re-enable IMU intrinsics caliibration if needed.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DCF0((unsigned int *)(a1 + 52));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUPreintegrationEnablerConfig.num_frames_to_compute_angular_speed_avg", v7, "Number of frame to compute average angular speed.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUPreintegrationEnablerConfig.maximum_converged_gyro_scale_axis_std", v8, "Maximum gyro scale standard deviation per axis to claim it is converged. Unit less.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUPreintegrationEnablerConfig.minimum_angular_speed_to_force_disable_preint_factor_rad_s", v9, "Minimum angular speed needed to disable preintegration factor to re-enable gyro scale calibration. Unit [rad/s]..");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUPreintegrationEnablerConfig.angular_speed_per_axis_for_observable_gyro_scale_rad_s", v10, "Required angular speed needed for gyro scale to be observable. Unit [rad/s].");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 24));
  return sub_20E8B2F9C((uint64_t *)&__p, "IMUPreintegrationEnablerConfig.minimum_angular_speed_to_check_gyro_scale_convergence_rad_s", v11, "Minimum angular speed required to check gyro scale convergence. If any axis is not converged, then IMU preintegration will be disabled to re-enable gyro scale calibration. Unit [rad/s].");
}

void sub_20FDB9680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

double sub_20FDB96EC(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  double result;
  uint64_t v16;
  __int128 v17;

  if (a2 != (uint64_t)(a1[1] - *a1) >> 3)
  {
    v2 = a2;
    if (a2)
    {
      v16 = 0;
      v17 = 0uLL;
      sub_20EAC9ECC((uint64_t)&v16, a2);
      v4 = v16;
      v5 = a1[5];
      v6 = v5 > v2;
      if (v5 < v2)
        v2 = a1[5];
      if (v6)
      {
        v7 = 0;
        v8 = (_QWORD *)*a1;
        v9 = (uint64_t)(a1[1] - *a1) >> 3;
        do
        {
          do
          {
            v10 = v7;
            *(_QWORD *)(v4 + 8 * v7) = v8[(v7 + a1[3]) % v9];
            ++v7;
          }
          while (v2 - 1 != v10);
        }
        while (v7 == a1[5]);
      }
      else if (v5)
      {
        v11 = 0;
        v12 = (_QWORD *)*a1;
        v13 = (uint64_t)(a1[1] - *a1) >> 3;
        do
        {
          *(_QWORD *)(v4 + 8 * v11) = v12[(v11 + a1[3]) % v13];
          ++v11;
        }
        while (v11 != a1[5]);
      }
      v14 = (_QWORD *)*a1;
      if (*a1)
      {
        a1[1] = v14;
        operator delete(v14);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        v4 = v16;
      }
      *a1 = v4;
      result = *(double *)&v17;
      *(_OWORD *)(a1 + 1) = v17;
      a1[3] = 0;
      a1[4] = v2 % ((*(_QWORD *)&result - v4) >> 3);
      a1[5] = v2;
    }
    else
    {
      a1[1] = *a1;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
  return result;
}

void sub_20FDB9838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20FDB9854(char **a1, unint64_t a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  double result;
  char *v20;
  __int128 v21;

  if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3) != a2)
  {
    v2 = a2;
    if (a2)
    {
      v20 = 0;
      v21 = 0uLL;
      sub_20F01F51C(&v20, a2);
      v4 = v20;
      v5 = a1[5];
      v6 = (unint64_t)v5 > v2;
      if ((unint64_t)v5 < v2)
        v2 = (unint64_t)a1[5];
      if (v6)
      {
        v7 = 1;
        v8 = v20;
        do
        {
          do
          {
            v9 = v7;
            v10 = (unint64_t)&(*a1)[56
                                         * ((unint64_t)&a1[3][v7 - 1]
                                          % (0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3)))];
            *(_QWORD *)v8 = *(_QWORD *)v10;
            v11 = *(_OWORD *)(v10 + 8);
            *((_QWORD *)v8 + 3) = *(_QWORD *)(v10 + 24);
            *(_OWORD *)(v8 + 8) = v11;
            v12 = *(_OWORD *)(v10 + 32);
            *((_QWORD *)v8 + 6) = *(_QWORD *)(v10 + 48);
            *((_OWORD *)v8 + 2) = v12;
            v7 = v9 + 1;
            v8 += 56;
          }
          while (v2 != v9);
        }
        while ((char *)v9 == a1[5]);
      }
      else if (v5)
      {
        v13 = 0;
        v14 = v20;
        do
        {
          v15 = (unint64_t)&(*a1)[56
                                       * ((unint64_t)&a1[3][(_QWORD)v13]
                                        % (0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3)))];
          *(_QWORD *)v14 = *(_QWORD *)v15;
          v16 = *(_OWORD *)(v15 + 8);
          *((_QWORD *)v14 + 3) = *(_QWORD *)(v15 + 24);
          *(_OWORD *)(v14 + 8) = v16;
          v17 = *(_OWORD *)(v15 + 32);
          *((_QWORD *)v14 + 6) = *(_QWORD *)(v15 + 48);
          *((_OWORD *)v14 + 2) = v17;
          ++v13;
          v14 += 56;
        }
        while (v13 != a1[5]);
      }
      v18 = *a1;
      if (*a1)
      {
        a1[1] = v18;
        operator delete(v18);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        v4 = v20;
      }
      *a1 = v4;
      result = *(double *)&v21;
      *(_OWORD *)(a1 + 1) = v21;
      a1[3] = 0;
      a1[4] = (char *)(v2 % (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&result - (_QWORD)v4) >> 3)));
      a1[5] = (char *)v2;
    }
    else
    {
      a1[1] = *a1;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
  return result;
}

void sub_20FDB9A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDB9A70(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  BOOL v50;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  void *__p[2];
  _OWORD v93[2];
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  __int128 v97;

  v5 = *(_QWORD *)(a2 + 104);
  if (!v5)
  {
    v20 = *(_QWORD *)(a1 + 96);
    if (v20 > a3)
      sub_20FDBA25C((uint64_t *)a1, v20 - a3);
    return;
  }
  v7 = (_OWORD *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 96);
  if (v8 <= a3)
  {
    v21 = *(_QWORD *)(a1 + 96);
    if (v21 + v8 > a3)
    {
      sub_20FDBA25C((uint64_t *)a1, v8 + ~a3 + v21);
      v5 = *(_QWORD *)(a2 + 104);
      if (!v5)
        return;
    }
    v22 = *(_QWORD *)(a1 + 104);
    if (!v22)
    {
      if (a1 != a2)
      {
        sub_20EE62A1C((char **)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
        v61 = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = v61;
        sub_20E86811C((_QWORD *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
      }
      v62 = *(_OWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = v62;
      *(_OWORD *)(a1 + 96) = *v7;
      return;
    }
    v23 = *(_QWORD *)(a1 + 48);
    v24 = *(_QWORD *)v7;
    v25 = *(_QWORD *)(a1 + 96) + v24 - 1;
    v26 = v5 + v22 - 1;
    *(_QWORD *)(a1 + 96) = v25;
    *(_QWORD *)(a1 + 104) = v26;
    if (v25 > (*(_QWORD *)(a1 + 56) - v23) >> 3)
      sub_20FDB96EC((_QWORD *)(a1 + 48), v25);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3) < v26)
      sub_20FDB9854((char **)a1, v26);
    if (v5 != 1)
    {
      v27 = *(_QWORD *)(a1 + 32);
      v28 = *(_QWORD *)a1;
      for (i = 1; i != v5; ++i)
      {
        while (1)
        {
          v30 = *(_QWORD *)a2
              + 56
              * ((i + *(_QWORD *)(a2 + 24))
               % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)));
          v31 = v28 + 56 * v27;
          v32 = *(_QWORD *)v30;
          v33 = *(_QWORD *)(v30 + 24);
          v34 = *(_OWORD *)(v30 + 8);
          *(_OWORD *)__p = *(_OWORD *)(v30 + 32);
          v35 = *(_OWORD *)__p;
          v36 = *(_QWORD *)(v30 + 48);
          *(_QWORD *)v31 = v32;
          *(_OWORD *)(v31 + 8) = v34;
          *(_QWORD *)(v31 + 24) = v33;
          *(_OWORD *)(v31 + 32) = v35;
          *(_QWORD *)(v31 + 48) = v36;
          v28 = *(_QWORD *)a1;
          v37 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
          v38 = *(_QWORD *)(a1 + 40);
          v39 = *(_QWORD *)(a1 + 32) + 1;
          v40 = v39 >= v37 ? 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3) : 0;
          v27 = v39 - v40;
          *(_QWORD *)(a1 + 32) = v27;
          if (v38 == v37)
            break;
          *(_QWORD *)(a1 + 40) = v38 + 1;
          if (v5 == ++i)
            goto LABEL_35;
        }
        v41 = *(_QWORD *)(a1 + 24) + 1;
        if (v41 < v37)
          v37 = 0;
        *(_QWORD *)(a1 + 24) = v41 - v37;
      }
    }
LABEL_35:
    if (v24 == 1)
      return;
    v42 = *(_QWORD *)(a2 + 48);
    v43 = (*(_QWORD *)(a2 + 56) - v42) >> 3;
    v44 = 1;
    while (1)
    {
      v45 = *(_QWORD *)(a2 + 40);
      v46 = v44 + *(_QWORD *)(a2 + 72);
      v47 = *(_QWORD *)(v42 + 8 * ((v46 - 1) % v43));
      if (v44 == *(_QWORD *)(a2 + 96))
      {
        if (v47 != v45)
          goto LABEL_43;
      }
      else
      {
        v48 = *(_QWORD *)(v42 + 8 * (v46 % v43)) + 1;
        if (v48 == v45)
        {
          if (v47 != v45)
          {
LABEL_43:
            v48 = *(_QWORD *)(a2 + 40);
            if (!v47)
            {
              v45 = -v45;
              v49 = *(_QWORD *)(a1 + 80);
              if (!v49)
                goto LABEL_61;
              goto LABEL_59;
            }
LABEL_57:
            v45 = v47 - v48;
LABEL_58:
            v49 = *(_QWORD *)(a1 + 80);
            if (!v49)
              goto LABEL_61;
            goto LABEL_59;
          }
        }
        else
        {
          if (v48)
            v50 = 1;
          else
            v50 = v47 == v45;
          if (v50 || v47 != 0)
          {
            if (v48)
              v52 = 0;
            else
              v52 = v47 == v45;
            if (!v52)
              goto LABEL_57;
            goto LABEL_58;
          }
        }
      }
      v45 = 0;
      v49 = *(_QWORD *)(a1 + 80);
      if (!v49)
      {
LABEL_61:
        v53 = *(_QWORD *)(a1 + 48);
        v54 = (*(_QWORD *)(a1 + 56) - v53) >> 3;
        v55 = v54;
        goto LABEL_62;
      }
LABEL_59:
      v53 = *(_QWORD *)(a1 + 48);
      v54 = (*(_QWORD *)(a1 + 56) - v53) >> 3;
      v55 = v49;
LABEL_62:
      *(_QWORD *)(v53 + 8 * v49) = *(_QWORD *)(v53 + 8 * v55 - 8) + ~v45;
      v56 = *(_QWORD *)(a1 + 88);
      v57 = *(_QWORD *)(a1 + 80) + 1;
      if (v57 >= v54)
        v58 = v54;
      else
        v58 = 0;
      *(_QWORD *)(a1 + 80) = v57 - v58;
      if (v56 == v54)
      {
        v59 = *(_QWORD *)(a1 + 72) + 1;
        if (v59 < v54)
          v54 = 0;
        *(_QWORD *)(a1 + 72) = v59 - v54;
        if (v24 == ++v44)
          return;
      }
      else
      {
        *(_QWORD *)(a1 + 88) = v56 + 1;
        if (v24 == ++v44)
          return;
      }
    }
  }
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = (*(_QWORD *)(a2 + 56) - v10) >> 3;
  v13 = *(_QWORD *)(v10 + 8 * ((v9 + v8 - a3) % v12));
  v14 = *(_QWORD *)(v10 + 8 * ((v9 + v8 - 1) % v12)) + 1;
  v15 = v13 == v11;
  v91 = v8 - a3;
  if (v14 == v11)
  {
    if (v13 == v11)
    {
      v60 = 0;
      v15 = 1;
    }
    else
    {
      v15 = 0;
      if (v13)
      {
        v19 = *(_QWORD *)(a2 + 40);
        goto LABEL_78;
      }
      v60 = -v11;
    }
    v19 = *(_QWORD *)(a2 + 40);
  }
  else
  {
    if (*(_QWORD *)(v10 + 8 * ((v9 + v8 - 1) % v12)) == -1 && v13 != v11 && v13 == 0)
    {
      v15 = 0;
      v19 = 0;
      v60 = 0;
      goto LABEL_82;
    }
    if (*(_QWORD *)(v10 + 8 * ((v9 + v8 - 1) % v12)) != -1 || v13 != v11)
    {
      v19 = *(_QWORD *)(v10 + 8 * ((v9 + v8 - 1) % v12)) + 1;
LABEL_78:
      v60 = v13 - v19;
      goto LABEL_82;
    }
    v19 = 0;
    v60 = *(_QWORD *)(a2 + 40);
  }
LABEL_82:
  v63 = -v60;
  memset(v95, 0, sizeof(v95));
  v94 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v93, 0, sizeof(v93));
  *(_QWORD *)&v96 = a3;
  *((_QWORD *)&v96 + 1) = -v60;
  if (!a3)
  {
    if (!v60)
      goto LABEL_87;
    goto LABEL_86;
  }
  sub_20FDB96EC(&v94, a3);
  if (0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3) < v63)
LABEL_86:
    sub_20FDB9854((char **)__p, v63);
LABEL_87:
  memset((char *)v95 + 8, 0, 24);
  memset((char *)v93 + 8, 0, 24);
  if ((_QWORD)v96)
  {
    v64 = v94;
    *(_QWORD *)v94 = 0;
    v65 = (*((_QWORD *)&v94 + 1) - v64) >> 3;
    if (*(_QWORD *)&v95[1] + 1 >= v65)
      v66 = v65;
    else
      v66 = 0;
    *(_QWORD *)&v95[1] = *(_QWORD *)&v95[1] + 1 - v66;
    if (*((_QWORD *)&v95[1] + 1) == v65)
    {
      if (*((_QWORD *)&v95[0] + 1) + 1 < v65)
        v65 = 0;
      *((_QWORD *)&v95[0] + 1) = *((_QWORD *)&v95[0] + 1) + 1 - v65;
    }
    else
    {
      ++*((_QWORD *)&v95[1] + 1);
    }
  }
  while (v15)
  {
    if (v14 == v11)
      goto LABEL_111;
LABEL_104:
    v67 = *(_QWORD *)a2
        + 56
        * ((v13 + *(_QWORD *)(a2 + 24))
         % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)));
    v68 = (char *)__p[0] + 56 * *(_QWORD *)&v93[1];
    v69 = *(_QWORD *)v67;
    v70 = *(_QWORD *)(v67 + 24);
    v71 = *(_OWORD *)(v67 + 8);
    v97 = *(_OWORD *)(v67 + 32);
    v72 = v97;
    v73 = *(_QWORD *)(v67 + 48);
    *(_QWORD *)v68 = v69;
    *(_OWORD *)(v68 + 8) = v71;
    *((_QWORD *)v68 + 3) = v70;
    *((_OWORD *)v68 + 2) = v72;
    *((_QWORD *)v68 + 6) = v73;
    v74 = 0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3);
    if (*(_QWORD *)&v93[1] + 1 >= v74)
      v75 = 0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3);
    else
      v75 = 0;
    *(_QWORD *)&v93[1] = *(_QWORD *)&v93[1] + 1 - v75;
    if (*((_QWORD *)&v93[1] + 1) == v74)
    {
      if (*((_QWORD *)&v93[0] + 1) + 1 < v74)
        v74 = 0;
      *((_QWORD *)&v93[0] + 1) = *((_QWORD *)&v93[0] + 1) + 1 - v74;
    }
    else
    {
      ++*((_QWORD *)&v93[1] + 1);
    }
    v15 = ++v13 == *(_QWORD *)(a2 + 40);
  }
  if (v14 == v11 || v19 != v13)
    goto LABEL_104;
LABEL_111:
  if (a3)
  {
    v76 = *(_QWORD *)(a2 + 48);
    v77 = (*(_QWORD *)(a2 + 56) - v76) >> 3;
    v78 = *(_QWORD *)(v76 + 8 * ((*(_QWORD *)(a2 + 72) + v91) % v77));
    v79 = v94;
    v80 = (uint64_t)(*((_QWORD *)&v94 + 1) - v94) >> 3;
    v81 = *(_QWORD *)&v95[1];
    v82 = -(uint64_t)a3;
    do
    {
      while (1)
      {
        *(_QWORD *)(v79 + 8 * v81) = *(_QWORD *)(v76 + 8 * ((v8 + v82 + *(_QWORD *)(a2 + 72)) % v77)) - v78;
        v84 = *(_QWORD *)&v95[1] + 1 >= v80 ? v80 : 0;
        v81 = *(_QWORD *)&v95[1] + 1 - v84;
        *(_QWORD *)&v95[1] = v81;
        if (*((_QWORD *)&v95[1] + 1) == v80)
          break;
        ++*((_QWORD *)&v95[1] + 1);
        v83 = __CFADD__(v82++, 1);
        if (v83)
          goto LABEL_123;
      }
      if (*((_QWORD *)&v95[0] + 1) + 1 >= v80)
        v85 = v80;
      else
        v85 = 0;
      *((_QWORD *)&v95[0] + 1) = *((_QWORD *)&v95[0] + 1) + 1 - v85;
      v83 = __CFADD__(v82++, 1);
    }
    while (!v83);
  }
LABEL_123:
  v86 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v86;
    operator delete(v86);
  }
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&v93[0];
  __p[0] = 0;
  __p[1] = 0;
  v87 = *(_OWORD *)((char *)v93 + 8);
  v93[0] = 0uLL;
  *(_OWORD *)(a1 + 24) = v87;
  v88 = *((_QWORD *)&v93[1] + 1);
  v93[1] = 0uLL;
  *(_QWORD *)(a1 + 40) = v88;
  v89 = *(void **)(a1 + 48);
  if (v89)
  {
    *(_QWORD *)(a1 + 56) = v89;
    operator delete(v89);
    v89 = __p[0];
  }
  *(_OWORD *)(a1 + 48) = v94;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)&v95[0];
  memset(v95, 0, 24);
  v94 = 0uLL;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)((char *)v95 + 8);
  v90 = *((_QWORD *)&v95[1] + 1);
  *((_QWORD *)&v95[1] + 1) = 0;
  *(_QWORD *)(a1 + 88) = v90;
  *(_OWORD *)(a1 + 96) = v96;
  if (v89)
  {
    __p[1] = v89;
    operator delete(v89);
  }
}

void sub_20FDBA248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20EBCBAD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FDBA25C(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a2)
    return result;
  if (result[12] == a2)
  {
    result[3] = 0;
    result[4] = 0;
    result[5] = 0;
    *(_OWORD *)(result + 9) = 0u;
    *(_OWORD *)(result + 11) = 0u;
    result[13] = 0;
    return result;
  }
  v2 = result[9];
  v3 = result[6];
  v4 = result[5];
  v5 = (result[7] - v3) >> 3;
  v6 = *(_QWORD *)(v3 + 8 * (v2 % v5));
  v7 = *(_QWORD *)(v3 + 8 * ((v2 + a2) % v5));
  if (v7 != v4)
  {
    if (v7)
      v8 = 1;
    else
      v8 = v6 == v4;
    if (v8 || v6 != 0)
    {
      if (v7)
        v10 = 0;
      else
        v10 = v6 == v4;
      if (v10)
      {
LABEL_21:
        if (!v4)
          goto LABEL_29;
LABEL_22:
        v11 = result[3];
        v12 = *result;
        v13 = v4;
        do
        {
          v14 = v12 + 56 * v11;
          *(_QWORD *)v14 = 0xBFF0000000000000;
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 24) = 0;
          *(_OWORD *)(v14 + 32) = 0uLL;
          *(_QWORD *)(v14 + 48) = 0;
          v12 = *result;
          v15 = 0x6DB6DB6DB6DB6DB7 * ((result[1] - *result) >> 3);
          v16 = result[3] + 1;
          if (v16 < v15)
            v15 = 0;
          v11 = v16 - v15;
          result[3] = v11;
          --result[5];
        }
        while (!__CFADD__(v13++, 1));
        v3 = result[6];
        v2 = result[9];
        v5 = (result[7] - v3) >> 3;
        goto LABEL_29;
      }
LABEL_20:
      v4 = v6 - v7;
      goto LABEL_21;
    }
LABEL_28:
    v4 = 0;
    goto LABEL_29;
  }
  if (v6 == v4)
    goto LABEL_28;
  if (v6)
    goto LABEL_20;
  v4 = -v4;
  if (v4)
    goto LABEL_22;
LABEL_29:
  v18 = a2;
  do
  {
    *(_QWORD *)(v3 + 8 * v2) = 0;
    v19 = result[9] + 1;
    if (v19 >= v5)
      v20 = v5;
    else
      v20 = 0;
    v2 = v19 - v20;
    result[9] = v2;
    v21 = result[11] - 1;
    result[11] = v21;
    --v18;
  }
  while (v18);
  if (v21)
  {
    v22 = 0;
    v23 = *(_QWORD *)(v3 + 8 * (v2 % v5));
    do
    {
      v24 = 8 * ((v22 + result[9]) % v5);
      *(_QWORD *)(v3 + v24) -= v23;
      ++v22;
    }
    while (v22 != result[11]);
  }
  v25 = result[13] + v4;
  result[12] -= a2;
  result[13] = v25;
  return result;
}

uint64_t sub_20FDBA438(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    v2 = *(_QWORD *)(result + 96);
    if (v2 == a2)
    {
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_OWORD *)(result + 72) = 0u;
      *(_OWORD *)(result + 88) = 0u;
      *(_QWORD *)(result + 104) = 0;
      return result;
    }
    v3 = v2 - 1;
    v4 = *(_QWORD *)(result + 72);
    v5 = v2 - 1 - a2 + v4;
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_QWORD *)(result + 40);
    v8 = (*(_QWORD *)(result + 56) - v6) >> 3;
    v9 = *(_QWORD *)(v6 + 8 * (v5 % v8));
    v10 = *(_QWORD *)(v6 + 8 * ((v4 + v3) % v8));
    if (v10 == v7)
    {
      if (v9 != v7)
      {
        if (!v9)
        {
          v7 = -v7;
          goto LABEL_20;
        }
        goto LABEL_19;
      }
    }
    else
    {
      if (v10)
        v11 = 1;
      else
        v11 = v9 == v7;
      if (v11 || v9 != 0)
      {
        if (v10)
          v13 = 0;
        else
          v13 = v9 == v7;
        if (v13)
        {
LABEL_20:
          if (v7)
          {
            v14 = *(_QWORD *)(result + 32);
            v15 = v7;
            do
            {
              if (!v14)
                v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
              v18 = *(_QWORD *)result + 56 * v14;
              *(_QWORD *)(v18 - 56) = 0xBFF0000000000000;
              *(_QWORD *)(v18 - 48) = 0;
              *(_QWORD *)(v18 - 40) = 0;
              *(_QWORD *)(v18 - 32) = 0;
              *(_OWORD *)(v18 - 24) = 0uLL;
              *(_QWORD *)(v18 - 8) = 0;
              v19 = *(_QWORD *)(result + 32);
              if (!v19)
                v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
              v14 = v19 - 1;
              v16 = *(_QWORD *)(result + 40) - 1;
              *(_QWORD *)(result + 32) = v14;
              *(_QWORD *)(result + 40) = v16;
            }
            while (!__CFADD__(v15++, 1));
          }
          goto LABEL_28;
        }
LABEL_19:
        v7 = v9 - v10;
        goto LABEL_20;
      }
    }
    v7 = 0;
LABEL_28:
    v20 = *(_QWORD *)(result + 80);
    v21 = a2;
    while (1)
    {
      if (v20)
      {
        v23 = *(_QWORD *)(result + 48);
        *(_QWORD *)(v23 + 8 * v20 - 8) = 0;
        v24 = *(_QWORD *)(result + 80);
        if (!v24)
          goto LABEL_34;
      }
      else
      {
        v23 = *(_QWORD *)(result + 48);
        *(_QWORD *)(v23 + 8 * ((*(_QWORD *)(result + 56) - v23) >> 3) - 8) = 0;
        v24 = *(_QWORD *)(result + 80);
        if (!v24)
LABEL_34:
          v24 = (*(_QWORD *)(result + 56) - v23) >> 3;
      }
      v20 = v24 - 1;
      v22 = *(_QWORD *)(result + 88) - 1;
      *(_QWORD *)(result + 80) = v20;
      *(_QWORD *)(result + 88) = v22;
      if (!--v21)
      {
        v25 = *(_QWORD *)(result + 104) + v7;
        *(_QWORD *)(result + 96) -= a2;
        *(_QWORD *)(result + 104) = v25;
        return result;
      }
    }
  }
  return result;
}

uint64_t *sub_20FDBA614@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p;
  __int128 v24;

  __p = operator new(0x30uLL);
  v24 = xmmword_2102DC970;
  strcpy((char *)__p, "PlaneBasedPointTrackOutlierRejection parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v24) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.enable_rejection", v4, "Enable moving screen rejection, requires stereo rejection to be enabled.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.plane_fit_max_num_hypotheses", v5, "Maximum number of RANSAC hypotheses.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA1CB0((unint64_t *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.plane_fit_max_trials", v6, "Maximum number of trials.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA1CB0((unint64_t *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.plane_fit_chunk_size", v7, "The sample size for each trial.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA1CB0((unint64_t *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.plane_fit_min_num_inliers", v8, "Minimum inlier points to be on the plane.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.plane_fit_min_inlier_ratio", v9, "Minimum inlier ratio.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.plane_fit_max_inlier_dist_m", v10, "Maximum point to plane distance for inlier points.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.plane_fit_eigen_val_ratio_thresh", v11, "Ratio of the smallest to the the second smallest eigen values.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.plane_fit_max_orthogonal_vector_delta_cos", v12, "Maximum offset between plane and gravity direction.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.max_valid_avg_inlier_to_centroid_dist_m", v13, "Maximum inliers to centroid mean distance to be a valid plane.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.min_valid_plane_centroid_to_cam_dist_m", v14, "Minimum centroid to primary camera distance to be a avlid plane.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EA9DB90((double *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.max_outlier_pt_to_plane_dist_m", v15, "Maximum distance to plane for outliers.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EA9DB90((double *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.max_outlier_to_centroid_mean_dist_multiplier", v16, "Maximum multiples of avg inlier points to centroid dist for outliers.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EA9DB90((double *)(a1 + 112));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.max_outlier_to_centroid_nsp_range_multiplier_sq", v17, "Maximum multiples of inlier points to centroid average dist on NSP for oulier points.");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EAA14D8((_BYTE *)(a1 + 120));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.enable_plane_persistence", v18, "Enable plane persistence.");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EA9DB90((double *)(a1 + 128));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.min_inlier_ratio_to_persist_plane", v19, "Minimum inlier ratio to enable persistence.");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EAA1CB0((unint64_t *)(a1 + 136));
  sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.min_num_inlier_to_persist_plane", v20, "Minimum inlier points to enable persistence.");
  __p = (void *)nullsub_1(a2);
  v21 = sub_20EA9DB90((double *)(a1 + 144));
  return sub_20E8B2F9C((uint64_t *)&__p, "PlaneBasedPointTrackOutlierRejectionConfig.persist_duration_s", v21, "Persistence duration.");
}

void sub_20FDBA9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FDBAAB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  __int128 v9;

  __p = operator new(0x28uLL);
  v9 = xmmword_2102E0950;
  strcpy((char *)__p, "PropagatedPoseAccumulator parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA1CB0((unint64_t *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "PropagatedPoseAccumulatorConfig.accumulation_size", v4, "Propagated pose accumulation size");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "PropagatedPoseAccumulatorConfig.num_prev_states_to_start_accumulation", v5, "Number of states from the latest state to start the first pose accumulation.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 24));
  return sub_20E8B2F9C((uint64_t *)&__p, "PropagatedPoseAccumulatorConfig.enabled", v6, "Flag to enabled propagated pose accumulator.");
}

void sub_20FDBABC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

void sub_20FDBAC08(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double v4;
  float64x2_t v5;
  double v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  double v11;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  double v24;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  float64x2_t v38;
  float64x2_t v39;
  double v41;
  float64x2_t v43;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;

  v4 = *(double *)(a2 + 176);
  v5 = *(float64x2_t *)(a2 + 160);
  v6 = *(double *)(a2 + 200);
  v7 = *(float64x2_t *)(a2 + 184);
  v8 = *(double *)(a2 + 224);
  v9 = *(float64x2_t *)(a2 + 208);
  _Q17 = *(float64x2_t *)(a2 + 232);
  v11 = *(double *)(a2 + 272);
  _Q19 = *(float64x2_t *)(a2 + 256);
  v13 = *(double *)(a2 + 296);
  _Q1 = *(float64x2_t *)(a2 + 280);
  v15 = *(double *)(a2 + 120);
  v16 = *(double *)(a2 + 144);
  v17 = *(double *)(a2 + 152);
  v19 = *(double *)(a2 + 128);
  v18 = *(double *)(a2 + 136);
  v20 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v5, *(double *)(a2 + 112)), (float64x2_t)0, v7), (float64x2_t)0, v9);
  v21 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v5, v18), v7, v15), (float64x2_t)0, v9);
  _D21 = v4 * v18 + v6 * v15 + v8 * 0.0;
  _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v5, v16), v7, v17), v9, v19);
  v24 = v4 * v16 + v6 * v17 + v8 * v19;
  v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, _Q17.f64[0]), v21, _Q17, 1), _Q3, *(double *)(a2 + 248));
  __asm { FMLA            D4, D21, V17.D[1] }
  v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, _Q19.f64[0]), v21, _Q19, 1), _Q3, v11);
  __asm { FMLA            D4, D21, V19.D[1] }
  _D9 = _D4 + v24 * v11;
  v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, _Q1.f64[0]), v21, _Q1, 1), _Q3, v13);
  __asm { FMLA            D3, D21, V1.D[1] }
  v32 = _Q3.f64[0] + v24 * v13;
  v33 = a3[1];
  v34 = *a3 + 56;
  if (*a3 != v33 - 56)
    goto LABEL_3;
  while (v34 != v33)
  {
    do
    {
LABEL_3:
      v35 = v34;
      v36 = *(double *)(v34 - 32);
      _Q3 = *(float64x2_t *)(v34 - 48);
      v38.f64[1] = v47.f64[1];
      v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, _Q3.f64[0]), v46, _Q3, 1), v45, v36);
      __asm { FMLA            D5, D9, V3.D[1] }
      _Q3.f64[0] = _D5 + v32 * v36;
      v41 = *(double *)(v34 + 24);
      _Q6 = *(float64x2_t *)(v34 + 8);
      v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, _Q6.f64[0]), v46, _Q6, 1), v45, v41);
      __asm { FMLA            D7, D9, V6.D[1] }
      v38.f64[0] = _D7 + v32 * v41;
      sub_20FDBB660(a1, *(double *)(v34 - 56), v39, *(float64_t *)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).i64, _Q3, *(double *)v34, v43, *(float64_t *)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).i64, v38);
      v34 = v35 + 56;
    }
    while (v35 != v33 - 56);
  }
}

void sub_20FDBADB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  float64x2_t v15;
  float64x2_t v17;
  double v18;
  double v19;
  double v21;
  double v23;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  double v40;
  double v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  uint64_t v69;
  uint64_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  uint64_t v78;
  float64x2_t v79;
  double v80;
  float64x2_t v81;
  double v82;
  uint64_t v83;
  float64x2_t v84;
  double v85;
  float64x2_t v86;
  double v87;
  __int128 v88;
  uint64_t v89;

  v3 = *(double *)(a2 + 72);
  v4 = *(double *)(a2 + 96);
  v5 = *(double *)(a2 + 104);
  v7 = *(double *)(a2 + 80);
  v6 = *(double *)(a2 + 88);
  v8 = *(double *)(a2 + 176);
  v9 = *(float64x2_t *)(a2 + 160);
  v10 = *(double *)(a2 + 200);
  v11 = *(float64x2_t *)(a2 + 184);
  v12 = *(double *)(a2 + 224);
  v13 = *(float64x2_t *)(a2 + 208);
  _Q22 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v9, *(double *)(a2 + 64)), (float64x2_t)0, v11), (float64x2_t)0, v13);
  v15 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v9, v6), v11, v3), (float64x2_t)0, v13);
  _D25 = v8 * v6 + v10 * v3 + v12 * 0.0;
  v17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v9, v4), v11, v5), v13, v7);
  v18 = v8 * v4 + v10 * v5 + v12 * v7;
  v19 = *(double *)(a2 + 248);
  _Q21 = *(float64x2_t *)(a2 + 232);
  v21 = *(double *)(a2 + 272);
  _Q18 = *(float64x2_t *)(a2 + 256);
  v23 = *(double *)(a2 + 296);
  _Q7 = *(float64x2_t *)(a2 + 280);
  v76 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q22, _Q21.f64[0]), v15, _Q21, 1), v17, v19);
  __asm { FMLA            D28, D25, V21.D[1] }
  v75 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q22, _Q18.f64[0]), v15, _Q18, 1), v17, v21);
  __asm { FMLA            D28, D25, V18.D[1] }
  _D9 = _D28 + v18 * v21;
  v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q22, _Q7.f64[0]), v15, _Q7, 1), v17, v23);
  __asm { FMLA            D22, D25, V7.D[1] }
  v32 = _Q22.f64[0] + v18 * v23;
  v33 = *(double *)(a2 + 120);
  v15.f64[0] = *(float64_t *)(a2 + 144);
  v34 = *(double *)(a2 + 152);
  v35 = *(double *)(a2 + 128);
  v17.f64[0] = *(float64_t *)(a2 + 136);
  v36 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v9, *(double *)(a2 + 112)), (float64x2_t)0, v11), (float64x2_t)0, v13);
  v37 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v9, v17.f64[0]), v11, v33), (float64x2_t)0, v13);
  _D17 = v8 * v17.f64[0] + v10 * v33 + v12 * 0.0;
  v39 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v9, v15.f64[0]), v11, v34), v13, v35);
  v40 = v8 * v15.f64[0] + v10 * v34 + v12 * v35;
  v73 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, _Q21.f64[0]), v37, _Q21, 1), v39, v19);
  __asm { FMLA            D1, D17, V21.D[1] }
  v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, _Q18.f64[0]), v37, _Q18, 1), v39, v21);
  __asm { FMLA            D1, D17, V18.D[1] }
  _D12 = _D1 + v40 * v21;
  v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, _Q7.f64[0]), v37, _Q7, 1), v39, v23);
  __asm { FMLA            D1, D17, V7.D[1] }
  v45 = _D1 + v40 * v23;
  v88 = *(_OWORD *)(a2 + 32);
  v89 = *(_QWORD *)(a2 + 48);
  v46 = *(_QWORD **)a3;
  v47 = *(_BYTE *)(a3 + 8);
  v70 = *(_QWORD *)(a3 + 40);
  v48 = v70 - 1;
  v49 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 40);
  v50 = *(_QWORD *)(a3 + 16) + 1;
  v51 = v50 == *(_QWORD *)(*(_QWORD *)a3 + 40);
  v52 = *(unsigned __int8 *)(a3 + 32);
  while (1)
  {
    if (v47)
    {
      if (v48 != v49)
        goto LABEL_3;
    }
    else if (v48 == v49 || v70 != v50)
    {
      goto LABEL_3;
    }
    if (!v51)
      break;
    if (v52)
      return;
LABEL_3:
    v53 = v50 + v46[3];
    v54 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v46[1] - *v46) >> 3);
    v55 = *v46 + 56 * ((v53 - 1) % v54);
    v56 = *v46 + 56 * (v53 % v54);
    v83 = *(_QWORD *)v55;
    v57 = *(float64x2_t *)(v55 + 8);
    v85 = *(double *)(v55 + 24);
    v84 = v57;
    v58 = *(float64x2_t *)(v55 + 32);
    v87 = *(double *)(v55 + 48);
    v86 = v58;
    v78 = *(_QWORD *)v56;
    v59 = *(float64x2_t *)(v56 + 8);
    v80 = *(double *)(v56 + 24);
    v79 = v59;
    v60 = *(float64x2_t *)(v56 + 32);
    v82 = *(double *)(v56 + 48);
    v81 = v60;
    v60.f64[0] = *(float64_t *)(v55 + 24);
    _Q1 = *(float64x2_t *)(v55 + 8);
    __asm { FMLA            D3, D12, V1.D[1] }
    v84 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, _Q1.f64[0]), v72, _Q1, 1), v71, v60.f64[0]);
    v85 = _D3 + v45 * v60.f64[0];
    v60.f64[0] = *(float64_t *)(v55 + 48);
    _Q1 = *(float64x2_t *)(v55 + 32);
    __asm { FMLA            D3, D9, V1.D[1] }
    v86 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, _Q1.f64[0]), v75, _Q1, 1), v74, v60.f64[0]);
    v87 = _D3 + v32 * v60.f64[0];
    v60.f64[0] = *(float64_t *)(v56 + 24);
    _Q1 = *(float64x2_t *)(v56 + 8);
    __asm { FMLA            D3, D12, V1.D[1] }
    v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, _Q1.f64[0]), v72, _Q1, 1), v71, v60.f64[0]);
    v80 = _D3 + v45 * v60.f64[0];
    v60.f64[0] = *(float64_t *)(v56 + 48);
    _Q1 = *(float64x2_t *)(v56 + 32);
    __asm { FMLA            D3, D9, V1.D[1] }
    v81 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v76, _Q1.f64[0]), v75, _Q1, 1), v74, v60.f64[0]);
    v82 = _D3 + v32 * v60.f64[0];
    sub_20F4BA308(a1, (uint64_t)&v88, (uint64_t)&v83, (uint64_t)&v78);
    v69 = v46[5];
    v47 = v50++ == v69;
    v51 = v50 == v69;
  }
  if (v52 || v70 != v50)
    goto LABEL_3;
}

void sub_20FDBB1B0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  double v16;
  double v18;
  double v20;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v31;
  double v32;
  double v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v45;
  double v46;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v58;
  double v61;
  double v64;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  uint64_t v73;
  float64x2_t v74;
  double v75;
  float64x2_t v76;
  double v77;
  uint64_t v78;
  float64x2_t v79;
  double v80;
  float64x2_t v81;
  double v82;
  __int128 v83;
  uint64_t v84;

  v4 = *(double *)(a2 + 64);
  v5 = *(double *)(a2 + 72);
  v7 = *(double *)(a2 + 96);
  v6 = *(double *)(a2 + 104);
  v9 = *(double *)(a2 + 80);
  v8 = *(double *)(a2 + 88);
  v10 = *(double *)(a2 + 176);
  v11 = *(float64x2_t *)(a2 + 160);
  v12 = *(double *)(a2 + 200);
  v13 = *(float64x2_t *)(a2 + 184);
  v14 = *(double *)(a2 + 224);
  v15 = *(float64x2_t *)(a2 + 208);
  v16 = *(double *)(a2 + 248);
  _Q5 = *(float64x2_t *)(a2 + 232);
  v18 = *(double *)(a2 + 272);
  _Q3 = *(float64x2_t *)(a2 + 256);
  v20 = *(double *)(a2 + 296);
  _Q1 = *(float64x2_t *)(a2 + 280);
  v23 = *(double *)(a2 + 112);
  v22 = *(double *)(a2 + 120);
  v25 = *(double *)(a2 + 144);
  v24 = *(double *)(a2 + 152);
  v26 = *(double *)(a2 + 128);
  v27 = *(double *)(a2 + 136);
  v83 = *(_OWORD *)(a2 + 32);
  v84 = *(_QWORD *)(a2 + 48);
  if (*a3 != 1)
  {
    v28 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v11, v4), (float64x2_t)0, v13), (float64x2_t)0, v15);
    v29 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v11, v8), v13, v5), (float64x2_t)0, v15);
    _D31 = v10 * v8 + v12 * v5 + v14 * 0.0;
    v31 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v11, v7), v13, v6), v15, v9);
    v32 = v10 * v7 + v12 * v6 + v14 * v9;
    v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, _Q5.f64[0]), v29, _Q5, 1), v31, v16);
    __asm { FMLA            D29, D31, V5.D[1] }
    v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, _Q3.f64[0]), v29, _Q3, 1), v31, v18);
    __asm { FMLA            D29, D31, V3.D[1] }
    _D9 = _D29 + v32 * v18;
    v70 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, _Q1.f64[0]), v29, _Q1, 1), v31, v20);
    __asm { FMLA            D29, D31, V1.D[1] }
    v41 = _D29 + v32 * v20;
    v42 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v11, v23), (float64x2_t)0, v13), (float64x2_t)0, v15);
    v43 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v11, v27), v13, v22), (float64x2_t)0, v15);
    _D23 = v10 * v27 + v12 * v22 + v14 * 0.0;
    v45 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v11, v25), v13, v24), v15, v26);
    v46 = v10 * v25 + v12 * v24 + v14 * v26;
    v69 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, _Q5.f64[0]), v43, _Q5, 1), v45, v16);
    __asm { FMLA            D7, D23, V5.D[1] }
    v68 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, _Q3.f64[0]), v43, _Q3, 1), v45, v18);
    __asm { FMLA            D4, D23, V3.D[1] }
    _D12 = _D4 + v46 * v18;
    v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, _Q1.f64[0]), v43, _Q1, 1), v45, v20);
    __asm { FMLA            D2, D23, V1.D[1] }
    v51 = _D2 + v46 * v20;
    v52 = a3[1] + 56;
    v53 = 56 * *a3 - 112;
    do
    {
      v54 = v53;
      v78 = *(_QWORD *)(v52 - 56);
      v73 = *(_QWORD *)v52;
      v55 = *(double *)(v52 - 32);
      _Q1 = *(float64x2_t *)(v52 - 48);
      __asm { FMLA            D3, D12, V1.D[1] }
      v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, _Q1.f64[0]), v68, _Q1, 1), v67, v55);
      v80 = _D3 + v51 * v55;
      v58 = *(double *)(v52 - 8);
      _Q1 = *(float64x2_t *)(v52 - 24);
      __asm { FMLA            D3, D9, V1.D[1] }
      v81 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, _Q1.f64[0]), v71, _Q1, 1), v70, v58);
      v82 = _D3 + v41 * v58;
      v61 = *(double *)(v52 + 24);
      _Q1 = *(float64x2_t *)(v52 + 8);
      __asm { FMLA            D3, D12, V1.D[1] }
      v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, _Q1.f64[0]), v68, _Q1, 1), v67, v61);
      v75 = _D3 + v51 * v61;
      v64 = *(double *)(v52 + 48);
      _Q1 = *(float64x2_t *)(v52 + 32);
      __asm { FMLA            D3, D9, V1.D[1] }
      v76 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, _Q1.f64[0]), v71, _Q1, 1), v70, v64);
      v77 = _D3 + v41 * v64;
      sub_20F4BA308(a1, (uint64_t)&v83, (uint64_t)&v78, (uint64_t)&v73);
      v52 += 56;
      v53 = v54 - 56;
    }
    while (v54);
  }
}

void sub_20FDBB4A4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double v4;
  float64x2_t v5;
  double v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  double v11;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v23;
  double v24;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  float64x2_t v41;
  float64x2_t v42;
  double v44;
  float64x2_t v45;
  float64x2_t v47;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;

  v4 = *(double *)(a2 + 176);
  v5 = *(float64x2_t *)(a2 + 160);
  v6 = *(double *)(a2 + 200);
  v7 = *(float64x2_t *)(a2 + 184);
  v8 = *(double *)(a2 + 224);
  v9 = *(float64x2_t *)(a2 + 208);
  _Q5 = *(float64x2_t *)(a2 + 232);
  v11 = *(double *)(a2 + 272);
  _Q3 = *(float64x2_t *)(a2 + 256);
  v13 = *(double *)(a2 + 296);
  _Q1 = *(float64x2_t *)(a2 + 280);
  v15 = *(double *)(a2 + 120);
  v17 = *(double *)(a2 + 144);
  v16 = *(double *)(a2 + 152);
  v18 = *(double *)(a2 + 128);
  v19 = *(double *)(a2 + 136);
  if (*a3 != 1)
  {
    v20 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v5, *(double *)(a2 + 112)), (float64x2_t)0, v7), (float64x2_t)0, v9);
    v21 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v5, v19), v7, v15), (float64x2_t)0, v9);
    _D23 = v4 * v19 + v6 * v15 + v8 * 0.0;
    v23 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v5, v17), v7, v16), v9, v18);
    v24 = v4 * v17 + v6 * v16 + v8 * v18;
    v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, _Q5.f64[0]), v21, _Q5, 1), v23, *(double *)(a2 + 248));
    __asm { FMLA            D7, D23, V5.D[1] }
    v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, _Q3.f64[0]), v21, _Q3, 1), v23, v11);
    __asm { FMLA            D4, D23, V3.D[1] }
    _D9 = _D4 + v24 * v11;
    v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, _Q1.f64[0]), v21, _Q1, 1), v23, v13);
    __asm { FMLA            D2, D23, V1.D[1] }
    v33 = _D2 + v24 * v13;
    v34 = 56 * *a3 - 112;
    v35 = a3[1] + 64;
    do
    {
      v36 = v34;
      v37 = *(double *)(v35 - 64);
      v38 = *(double *)(v35 - 8);
      v39 = *(double *)(v35 - 40);
      _Q3 = *(float64x2_t *)(v35 - 56);
      v41.f64[1] = v51.f64[1];
      v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q3.f64[0]), v50, _Q3, 1), v49, v39);
      __asm { FMLA            D5, D9, V3.D[1] }
      _Q3.f64[0] = _D5 + v33 * v39;
      v44 = *(double *)(v35 + 16);
      v45 = *(float64x2_t *)v35;
      v35 += 56;
      _V6.D[1] = v45.f64[1];
      v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, v45.f64[0]), v50, v45, 1), v49, v44);
      __asm { FMLA            D7, D9, V6.D[1] }
      v41.f64[0] = _D7 + v33 * v44;
      sub_20FDBB660(a1, v37, v42, *(float64_t *)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).i64, _Q3, v38, v47, *(float64_t *)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).i64, v41);
      v34 = v36 - 56;
    }
    while (v36);
  }
}

float64x2_t sub_20FDBB660(uint64_t a1, double a2, float64x2_t a3, float64_t a4, float64x2_t a5, double a6, float64x2_t a7, float64_t a8, float64x2_t a9)
{
  double v10;
  float64x2_t v11;
  int8x16_t v12;
  float64x2_t v13;
  int8x16_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t v34;
  double v35;
  float64x2_t v41;
  unint64_t v43;
  double v46;
  double cosval;
  __double2 v48;
  double v49;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v82;
  float64x2_t v83;
  int8x16_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t result;
  unint64_t v100;
  float64x2_t v101;
  float64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  float64_t v106;
  float64x2_t v107;
  float64_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64_t v111;
  float64x2_t v112;

  v10 = *(double *)(a1 + 64);
  v12 = *(int8x16_t *)(a1 + 32);
  v11 = *(float64x2_t *)(a1 + 48);
  v14 = *(int8x16_t *)a1;
  v13 = *(float64x2_t *)(a1 + 16);
  *(_QWORD *)&v15.f64[0] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
  *(_QWORD *)&v16.f64[0] = vextq_s8(v12, v12, 8uLL).u64[0];
  *(_QWORD *)&v17.f64[0] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
  *(_QWORD *)&v18.f64[0] = vextq_s8(v14, v14, 8uLL).u64[0];
  if (v10 >= 0.0)
  {
    if (*(double *)v14.i64 >= -*(double *)v12.i64)
    {
      v16.f64[1] = *(float64_t *)(a1 + 48);
      v15.f64[1] = *(float64_t *)(a1 + 16);
      v23 = vsubq_f64(v16, v15);
      v24.f64[0] = v18.f64[0] - v17.f64[0];
      v25 = v10 + 1.0 + *(double *)v14.i64 + *(double *)v12.i64;
      v26 = v25;
    }
    else
    {
      v11.f64[1] = v16.f64[0];
      v13.f64[1] = v15.f64[0];
      v23 = vaddq_f64(v11, v13);
      v24.f64[0] = v10 + 1.0 - (*(double *)v14.i64 + *(double *)v12.i64);
      v25 = v18.f64[0] - v17.f64[0];
      v26 = v24.f64[0];
    }
  }
  else
  {
    v19 = 1.0 - v10;
    if (*(double *)v14.i64 <= *(double *)v12.i64)
    {
      v18.f64[1] = v19;
      v17.f64[1] = *(double *)v12.i64 - *(double *)v14.i64;
      v23 = vaddq_f64(v18, v17);
      v24.f64[0] = v16.f64[0] + v15.f64[0];
      v25 = v11.f64[0] - v13.f64[0];
      v26 = v23.f64[1];
    }
    else
    {
      v20 = *(double *)v14.i64 - *(double *)v12.i64;
      v21.f64[1] = v17.f64[0];
      v22.f64[1] = v18.f64[0];
      v22.f64[0] = v19;
      v21.f64[0] = v20;
      v23 = vaddq_f64(v22, v21);
      v24.f64[0] = v11.f64[0] + v13.f64[0];
      v25 = v16.f64[0] - v15.f64[0];
      v26 = v23.f64[0];
    }
  }
  v13.f64[0] = *(float64_t *)(a1 + 88);
  v27 = *(float64x2_t *)(a1 + 72);
  v28 = vsubq_f64(a5, v13);
  a3.f64[1] = a4;
  v29 = vsubq_f64(a3, v27);
  v30 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v31 = vsubq_f64(a9, v13);
  a7.f64[1] = a8;
  v32 = vsubq_f64(a7, v27);
  v33 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  v34 = vsubq_f64(v32, v29);
  v35 = a6 - a2;
  __asm { FMOV            V26.2D, #0.5 }
  v41 = vmlaq_f64(v28, vsubq_f64(v31, v28), _Q26);
  _Q7 = vmlaq_f64(v29, v34, _Q26);
  v43 = vextq_s8((int8x16_t)_Q7, (int8x16_t)_Q7, 8uLL).u64[0];
  _D1 = _Q7.f64[1];
  __asm { FMLA            D0, D1, V7.D[1] }
  v46 = sqrt(vmlad_n_f64(_D0, v41.f64[0], v41.f64[0]));
  if (v46 >= 0.01)
  {
    v111 = v28.f64[0];
    v112 = _Q26;
    v109 = v32;
    v110 = v23;
    v107 = v29;
    v108 = v24.f64[0];
    v105 = v25;
    v106 = v31.f64[0];
    v103 = v33;
    v104 = v30;
    v101 = v41;
    v102 = _Q7.f64[0];
    v100 = v43;
    v48 = __sincos_stret(v35 * v46 * 0.5);
    cosval = v48.__cosval;
    v43 = v100;
    v41 = v101;
    _Q7.f64[0] = v102;
    v33 = v103;
    v30 = v104;
    v25 = v105;
    v31.f64[0] = v106;
    v29 = v107;
    v24.f64[0] = v108;
    v32 = v109;
    v23 = v110;
    v28.f64[0] = v111;
    _Q26 = v112;
    v34.f64[0] = v48.__sinval / v46;
  }
  else
  {
    v34.f64[0] = v35 * 0.5;
    cosval = 1.0;
  }
  v24.f64[1] = v25;
  v49 = 0.5 / sqrt(v26);
  _Q3 = vmulq_n_f64(v24, v49);
  _Q4 = vmulq_n_f64(v23, v49);
  *(_QWORD *)&_Q7.f64[1] = v43;
  *(_QWORD *)&v52.f64[0] = *(_OWORD *)&vmulq_f64(v41, v34);
  v52.f64[1] = cosval;
  v53.f64[0] = v29.f64[0];
  *(_QWORD *)&v53.f64[1] = v30;
  v54 = vmulq_n_f64(_Q7, v34.f64[0]);
  v34.f64[0] = 0.0;
  v55.f64[0] = v28.f64[0];
  v56.f64[0] = v32.f64[0];
  *(_QWORD *)&v56.f64[1] = v33;
  v57.f64[0] = v31.f64[0];
  v58 = (float64x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)*(unint64_t *)&v28.f64[0], 8uLL);
  v59.f64[0] = v29.f64[0];
  v59.f64[1] = vnegq_f64(v53).f64[1];
  v55.f64[1] = v29.f64[0];
  v60 = (float64x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)*(unint64_t *)&v31.f64[0], 8uLL);
  v57.f64[1] = v32.f64[0];
  v61.f64[0] = v32.f64[0];
  v61.f64[1] = v31.f64[0];
  v62 = vmulq_f64(v58, v57);
  v63 = vmulq_f64(v58, v61);
  v64 = vmulq_f64(v55, v60);
  v65 = vsubq_f64(vsubq_f64(vmulq_laneq_f64(v59, v56, 1), v63), vmulq_f64((float64x2_t)vextq_s8((int8x16_t)0, (int8x16_t)v29, 8uLL), v57));
  v66 = vsubq_f64(vsubq_f64(v62, v64), vmulq_f64(v56, (float64x2_t)0));
  v56.f64[1] = vnegq_f64(v56).f64[1];
  v67 = vmulq_laneq_f64(v56, v53, 1);
  v68 = vmulq_f64(v53, (float64x2_t)0);
  v53.f64[1] = v28.f64[0];
  v69 = vsubq_f64(vsubq_f64(v67, vmulq_f64(v53, v60)), vmulq_f64((float64x2_t)vextq_s8((int8x16_t)0, (int8x16_t)v32, 8uLL), v55));
  v67.f64[0] = v35 * (v35 * 0.0208333333);
  v70 = vaddq_f64(vmulq_n_f64(vsubq_f64(v66, vsubq_f64(vsubq_f64(v64, v62), v68)), v67.f64[0]), v54);
  v71 = vaddq_f64(vmulq_n_f64(vsubq_f64(v65, v69), v67.f64[0]), v52);
  v69.f64[0] = v71.f64[1];
  v72 = vnegq_f64(_Q4);
  v73 = (float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)v72, 8uLL);
  v74 = (float64x2_t)vzip1q_s64((int64x2_t)v70, (int64x2_t)v71);
  v75 = (float64x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v71, 8uLL);
  v71.f64[1] = v70.f64[0];
  v76 = vmulq_n_f64(_Q4, v69.f64[0]);
  v77 = vmulq_n_f64(_Q3, v69.f64[0]);
  v78 = (float64x2_t)vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q3, 8uLL);
  v79 = vmlaq_laneq_f64(v76, v70, _Q3, 1);
  _Q3.f64[1] = _Q4.f64[0];
  _Q4.f64[1] = v72.f64[1];
  _Q6 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_f64(v77, v73, v71), _Q4, v70, 1), v78, v74);
  _Q20 = vmlsq_f64(vmlaq_f64(v79, v78, v71), _Q3, v75);
  _Q4.f64[0] = _Q20.f64[1];
  __asm { FMLA            D3, D4, V20.D[1] }
  _Q4.f64[0] = _Q6.f64[1];
  __asm { FMLA            D3, D4, V6.D[1] }
  _Q3.f64[0] = 1.0 / sqrt(_Q3.f64[0]);
  v82 = vmulq_n_f64(_Q20, _Q3.f64[0]);
  v83 = vmulq_n_f64(_Q6, _Q3.f64[0]);
  v84 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v34, (float64x2_t)vdupq_laneq_s64((int64x2_t)v83, 1)).i64[0], 0);
  v85 = (float64x2_t)vbslq_s8(v84, (int8x16_t)vnegq_f64(v83), (int8x16_t)v83);
  v86 = (float64x2_t)vbslq_s8(v84, (int8x16_t)vnegq_f64(v82), (int8x16_t)v82);
  v71.f64[0] = vmuld_n_f64(v86.f64[0], v86.f64[0]);
  v82.f64[0] = vmuld_lane_f64(v86.f64[1], v86, 1);
  v87 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v86.f64[0], 0);
  v87.f64[0] = v82.f64[0];
  v72.f64[1] = v86.f64[1];
  v72.f64[0] = vmuld_n_f64(v85.f64[0], v85.f64[0]);
  v88 = vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v86, (int8x16_t)v85, 8uLL), v85, 1);
  v89 = vmulq_n_f64(v86, v86.f64[0]);
  v75.f64[0] = v86.f64[0];
  v75.f64[1] = v85.f64[1];
  v90 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v85.f64[0], 0);
  v85.f64[1] = v86.f64[0];
  v86.f64[0] = v71.f64[0];
  v91 = vaddq_f64(v87, v72);
  v90.f64[0] = v72.f64[0];
  v92 = vaddq_f64(v86, v90);
  v93 = vmulq_f64(v86, v90);
  v94 = vmulq_f64(v75, v85);
  v95 = vaddq_f64(v88, v89);
  v89.f64[0] = v94.f64[0];
  *(_QWORD *)&v91.f64[0] = *(_OWORD *)&vsubq_f64(_Q26, v91);
  v91.f64[1] = v95.f64[1];
  v96 = vsubq_f64(v93, v94);
  v97 = vaddq_f64(v94, v93);
  *(_QWORD *)&v75.f64[0] = *(_OWORD *)&vaddq_f64(v88, v94);
  v94.f64[0] = 0.5;
  v98 = vsubq_f64(v89, v88);
  *(_QWORD *)&v94.f64[0] = *(_OWORD *)&vsubq_f64(v94, v92);
  v94.f64[1] = v97.f64[1];
  v96.f64[0] = v75.f64[0];
  *(double *)(a1 + 64) = 0.5 - (v71.f64[0] + v82.f64[0]) + 0.5 - (v71.f64[0] + v82.f64[0]);
  *(float64x2_t *)(a1 + 32) = vaddq_f64(v94, v94);
  *(float64x2_t *)(a1 + 48) = vaddq_f64(v96, v96);
  result = vaddq_f64(v98, v98);
  *(float64x2_t *)a1 = vaddq_f64(v91, v91);
  *(float64x2_t *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return result;
}

uint64_t sub_20FDBBA84(uint64_t a1)
{
  double *i;
  double v3;
  double v4;
  double v5;
  double v6;
  void *__p[2];
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;

  v14 = 0u;
  v15 = 0u;
  v16 = 733226700;
  kdebug_trace();
  if (*(_DWORD *)(a1 + 72) >= *(_DWORD *)a1)
  {
    for (i = *(double **)(a1 + 48); i; i = *(double **)i)
    {
      __p[0] = 0;
      __p[1] = 0;
      v9 = 0;
      v3 = 0.0;
      v4 = 0.0;
      if (*((_BYTE *)i + 64))
        v4 = i[7];
      v5 = i[5];
      v10 = v5 - v4;
      i[7] = v5;
      *((_BYTE *)i + 64) = 1;
      if (*((_BYTE *)i + 80))
        v3 = i[9];
      v6 = i[6];
      v11 = v6 - v3;
      i[9] = v6;
      *((_BYTE *)i + 80) = 1;
      v12 = *((_QWORD *)i + 11);
      v13 = *((_OWORD *)i + 6);
      i[11] = 0.0;
      i[12] = 0.0;
      i[13] = 0.0;
      if (__p != (void **)(i + 2))
      {
        if (*((char *)i + 39) < 0)
        {
          sub_20E867BF8(__p, *((void **)i + 2), *((_QWORD *)i + 3));
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)i + 1);
          v9 = *((_QWORD *)i + 4);
        }
      }
      sub_20FDC2344((_QWORD *)(a1 + 8), (uint64_t)__p);
      if (SHIBYTE(v9) < 0)
        operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 72) = 0;
  }
  return kdebug_trace();
}

void sub_20FDBBBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  sub_20E8E69C4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDBBC20(uint64_t a1, unsigned __int8 *a2, double a3)
{
  unint64_t v3;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t **v38;
  uint64_t *v39;
  char v40;
  void *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void **v46;
  void **v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  const void **v51;
  void **v52;
  char *v53;
  _QWORD *v54;
  _BYTE *v55;
  __int128 v56;
  __int128 v57;
  float v58;
  float v59;
  _QWORD *v60;
  _QWORD *v61;
  _BOOL8 v62;
  unint64_t v63;
  unint64_t v64;
  size_t prime;
  void *v66;
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  size_t v70;
  size_t v71;
  size_t v72;
  _QWORD *i;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint8x8_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unint64_t v86;
  void *__p[2];
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v94;
  __int128 v95;
  __int128 v96;
  int v97;
  _QWORD v98[2];
  char v99;

  v95 = 0u;
  v96 = 0u;
  v97 = 733226700;
  kdebug_trace();
  v7 = (char)a2[23];
  if (v7 >= 0)
    v8 = (uint64_t *)a2;
  else
    v8 = *(uint64_t **)a2;
  if (v7 >= 0)
    v9 = a2[23];
  else
    v9 = *((_QWORD *)a2 + 1);
  v10 = sub_20E8D177C((uint64_t)__p, v8, v9);
  v11 = *(int8x8_t *)(a1 + 40);
  if (!*(_QWORD *)&v11)
    goto LABEL_60;
  v12 = v10;
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = v10;
    if (v10 >= *(_QWORD *)&v11)
      v14 = v10 % *(_QWORD *)&v11;
  }
  else
  {
    v14 = (*(_QWORD *)&v11 - 1) & v10;
  }
  v15 = *(uint64_t ***)(*(_QWORD *)(a1 + 32) + 8 * v14);
  if (!v15)
    goto LABEL_60;
  v16 = *v15;
  if (!*v15)
    goto LABEL_60;
  v17 = a2[23];
  if ((v17 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  if ((v17 & 0x80u) == 0)
    v18 = a2;
  else
    v18 = *(unsigned __int8 **)a2;
  if (v13.u32[0] < 2uLL)
  {
    v19 = *(_QWORD *)&v11 - 1;
    while (1)
    {
      v24 = v16[1];
      if (v24 == v12)
      {
        v25 = *((unsigned __int8 *)v16 + 39);
        if ((v25 & 0x80u) == 0)
          v26 = *((unsigned __int8 *)v16 + 39);
        else
          v26 = v16[3];
        if (v26 == v3)
        {
          if ((v25 & 0x80) != 0)
          {
            if (!memcmp((const void *)v16[2], v18, v16[3]))
              goto LABEL_55;
          }
          else
          {
            if (!*((_BYTE *)v16 + 39))
              goto LABEL_55;
            v27 = 0;
            while (*((unsigned __int8 *)v16 + v27 + 16) == v18[v27])
            {
              if (v25 == ++v27)
                goto LABEL_54;
            }
          }
        }
      }
      else if ((v24 & v19) != v14)
      {
        goto LABEL_60;
      }
      v16 = (uint64_t *)*v16;
      if (!v16)
        goto LABEL_60;
    }
  }
  while (1)
  {
    v20 = v16[1];
    if (v20 == v12)
      break;
    if (v20 >= *(_QWORD *)&v11)
      v20 %= *(_QWORD *)&v11;
    if (v20 != v14)
      goto LABEL_60;
LABEL_23:
    v16 = (uint64_t *)*v16;
    if (!v16)
      goto LABEL_60;
  }
  v21 = *((unsigned __int8 *)v16 + 39);
  if ((v21 & 0x80u) == 0)
    v22 = *((unsigned __int8 *)v16 + 39);
  else
    v22 = v16[3];
  if (v22 != v3)
    goto LABEL_23;
  if ((v21 & 0x80) != 0)
  {
    if (!memcmp((const void *)v16[2], v18, v16[3]))
      goto LABEL_55;
    goto LABEL_23;
  }
  if (!*((_BYTE *)v16 + 39))
    goto LABEL_55;
  v23 = 0;
  do
  {
    if (*((unsigned __int8 *)v16 + v23 + 16) != v18[v23])
      goto LABEL_23;
    ++v23;
  }
  while (v21 != v23);
LABEL_54:
  if (v16)
  {
LABEL_55:
    v28 = *((double *)v16 + 5);
    v29 = *((double *)v16 + 6);
    if (v28 < a3)
      v28 = a3;
    if (v29 > a3)
      v29 = a3;
    *((double *)v16 + 5) = v28;
    *((double *)v16 + 6) = v29;
    v30 = *((double *)v16 + 12) + a3;
    v31 = a3 * a3 + *((double *)v16 + 13);
    ++v16[11];
    *((double *)v16 + 12) = v30;
    *((double *)v16 + 13) = v31;
    return kdebug_trace();
  }
LABEL_60:
  if ((char)a2[23] < 0)
  {
    sub_20E860C04(__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v89 = *((_QWORD *)a2 + 2);
  }
  *(double *)&v90 = a3;
  *((double *)&v90 + 1) = a3;
  LOBYTE(v91) = 0;
  BYTE8(v91) = 0;
  LOBYTE(v92) = 0;
  BYTE8(v92) = 0;
  *(_QWORD *)&v93 = 1;
  *((double *)&v93 + 1) = a3;
  v94 = a3 * a3;
  if (v89 >= 0)
    v32 = (uint64_t *)__p;
  else
    v32 = (uint64_t *)__p[0];
  if (v89 >= 0)
    v33 = HIBYTE(v89);
  else
    v33 = (unint64_t)__p[1];
  v34 = sub_20E8D177C((uint64_t)v98, v32, v33);
  v35 = v34;
  v36 = *(_QWORD *)(a1 + 40);
  if (v36)
  {
    v37 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
    v37.i16[0] = vaddlv_u8(v37);
    if (v37.u32[0] > 1uLL)
    {
      v3 = v34;
      if (v34 >= v36)
        v3 = v34 % v36;
    }
    else
    {
      v3 = (v36 - 1) & v34;
    }
    v38 = *(uint64_t ***)(*(_QWORD *)(a1 + 32) + 8 * v3);
    if (v38)
    {
      v39 = *v38;
      if (*v38)
      {
        v40 = HIBYTE(v89);
        if (v89 >= 0)
          v41 = (void *)HIBYTE(v89);
        else
          v41 = __p[1];
        if (v89 >= 0)
          v42 = __p;
        else
          v42 = (void **)__p[0];
        if (v37.u32[0] < 2uLL)
        {
          while (1)
          {
            v43 = v39[1];
            if (v43 == v35)
            {
              v44 = *((unsigned __int8 *)v39 + 39);
              if ((v44 & 0x80u) == 0)
                v45 = (void *)*((unsigned __int8 *)v39 + 39);
              else
                v45 = (void *)v39[3];
              if (v45 == v41)
              {
                v46 = (const void **)(v39 + 2);
                if ((v44 & 0x80) != 0)
                {
                  if (!memcmp(*v46, v42, v39[3]))
                    goto LABEL_190;
                }
                else
                {
                  if (!*((_BYTE *)v39 + 39))
                    goto LABEL_190;
                  v47 = v42;
                  while (*(unsigned __int8 *)v46 == *(unsigned __int8 *)v47)
                  {
                    v46 = (const void **)((char *)v46 + 1);
                    v47 = (void **)((char *)v47 + 1);
                    if (!--v44)
                      goto LABEL_190;
                  }
                }
              }
            }
            else if ((v43 & (v36 - 1)) != v3)
            {
              goto LABEL_117;
            }
            v39 = (uint64_t *)*v39;
            if (!v39)
              goto LABEL_117;
          }
        }
        do
        {
          v48 = v39[1];
          if (v48 == v35)
          {
            v49 = *((unsigned __int8 *)v39 + 39);
            if ((v49 & 0x80u) == 0)
              v50 = (void *)*((unsigned __int8 *)v39 + 39);
            else
              v50 = (void *)v39[3];
            if (v50 == v41)
            {
              v51 = (const void **)(v39 + 2);
              if ((v49 & 0x80) != 0)
              {
                if (!memcmp(*v51, v42, v39[3]))
                  goto LABEL_190;
              }
              else
              {
                if (!*((_BYTE *)v39 + 39))
                  goto LABEL_190;
                v52 = v42;
                while (*(unsigned __int8 *)v51 == *(unsigned __int8 *)v52)
                {
                  v51 = (const void **)((char *)v51 + 1);
                  v52 = (void **)((char *)v52 + 1);
                  if (!--v49)
                    goto LABEL_190;
                }
              }
            }
          }
          else
          {
            if (v48 >= v36)
              v48 %= v36;
            if (v48 != v3)
              break;
          }
          v39 = (uint64_t *)*v39;
        }
        while (v39);
      }
    }
  }
LABEL_117:
  v53 = (char *)operator new(0x70uLL);
  v54 = (_QWORD *)(a1 + 48);
  v98[0] = v53;
  v98[1] = a1 + 48;
  v99 = 0;
  *(_QWORD *)v53 = 0;
  *((_QWORD *)v53 + 1) = v35;
  v55 = v53 + 16;
  if (SHIBYTE(v89) < 0)
  {
    sub_20E860C04(v55, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v55 = *(_OWORD *)__p;
    *((_QWORD *)v53 + 4) = v89;
  }
  v56 = v90;
  *(_OWORD *)(v53 + 56) = v91;
  v57 = v93;
  *(_OWORD *)(v53 + 72) = v92;
  *(_OWORD *)(v53 + 88) = v57;
  *((double *)v53 + 13) = v94;
  *(_OWORD *)(v53 + 40) = v56;
  v99 = 1;
  v58 = (float)(unint64_t)(*(_QWORD *)(a1 + 56) + 1);
  v59 = *(float *)(a1 + 64);
  if (!v36 || (float)(v59 * (float)v36) < v58)
  {
    v62 = 1;
    if (v36 >= 3)
      v62 = (v36 & (v36 - 1)) != 0;
    v63 = v62 | (2 * v36);
    v64 = vcvtps_u32_f32(v58 / v59);
    if (v63 <= v64)
      prime = v64;
    else
      prime = v63;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(_QWORD *)(a1 + 40);
    if (prime > v36)
    {
LABEL_134:
      if (prime >> 61)
        sub_20E877A38();
      v66 = operator new(8 * prime);
      v67 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v66;
      if (v67)
        operator delete(v67);
      v68 = 0;
      *(_QWORD *)(a1 + 40) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v68++) = 0;
      while (prime != v68);
      v69 = (_QWORD *)*v54;
      if (!*v54)
        goto LABEL_166;
      v70 = v69[1];
      v71 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v72 = v70 & v71;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v72) = v54;
        for (i = (_QWORD *)*v69; *v69; i = (_QWORD *)*v69)
        {
          v74 = i[1] & v71;
          if (v74 == v72)
          {
            v69 = i;
          }
          else
          {
            v75 = *(_QWORD *)(a1 + 32);
            if (*(_QWORD *)(v75 + 8 * v74))
            {
              *v69 = *i;
              v76 = 8 * v74;
              *i = **(_QWORD **)(*(_QWORD *)(a1 + 32) + v76);
              **(_QWORD **)(*(_QWORD *)(a1 + 32) + v76) = i;
            }
            else
            {
              *(_QWORD *)(v75 + 8 * v74) = v69;
              v69 = i;
              v72 = v74;
            }
          }
        }
        goto LABEL_166;
      }
      if (v70 >= prime)
        v70 %= prime;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v70) = v54;
      v80 = (_QWORD *)*v69;
      if (!*v69)
      {
LABEL_166:
        v36 = prime;
        v84 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_167;
        goto LABEL_182;
      }
      while (1)
      {
        v82 = v80[1];
        if (v82 >= prime)
          v82 %= prime;
        if (v82 == v70)
          goto LABEL_160;
        v83 = *(_QWORD *)(a1 + 32);
        if (*(_QWORD *)(v83 + 8 * v82))
        {
          *v69 = *v80;
          v81 = 8 * v82;
          *v80 = **(_QWORD **)(*(_QWORD *)(a1 + 32) + v81);
          **(_QWORD **)(*(_QWORD *)(a1 + 32) + v81) = v80;
          v80 = v69;
LABEL_160:
          v69 = v80;
          v80 = (_QWORD *)*v80;
          if (!v80)
            goto LABEL_166;
        }
        else
        {
          *(_QWORD *)(v83 + 8 * v82) = v69;
          v69 = v80;
          v80 = (_QWORD *)*v80;
          v70 = v82;
          if (!v80)
            goto LABEL_166;
        }
      }
    }
    if (prime < v36)
    {
      v77 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 56) / *(float *)(a1 + 64));
      if (v36 < 3 || (v78 = (uint8x8_t)vcnt_s8((int8x8_t)v36), v78.i16[0] = vaddlv_u8(v78), v78.u32[0] > 1uLL))
      {
        v77 = std::__next_prime(v77);
      }
      else
      {
        v79 = 1 << -(char)__clz(v77 - 1);
        if (v77 >= 2)
          v77 = v79;
      }
      if (prime <= v77)
        prime = v77;
      if (prime < v36)
      {
        if (!prime)
        {
          v85 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = 0;
          if (v85)
            operator delete(v85);
          v36 = 0;
          *(_QWORD *)(a1 + 40) = 0;
          v84 = -1;
          goto LABEL_182;
        }
        goto LABEL_134;
      }
      v36 = *(_QWORD *)(a1 + 40);
    }
    v84 = v36 - 1;
    if ((v36 & (v36 - 1)) != 0)
    {
LABEL_167:
      if (v35 >= v36)
      {
        v3 = v35 % v36;
        v60 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * (v35 % v36));
        v61 = (_QWORD *)v98[0];
        if (!v60)
          goto LABEL_183;
      }
      else
      {
        v3 = v35;
        v60 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v35);
        v61 = (_QWORD *)v98[0];
        if (!v60)
          goto LABEL_183;
      }
LABEL_123:
      *v61 = *v60;
      *v60 = v98[0];
      goto LABEL_189;
    }
LABEL_182:
    v3 = v84 & v35;
    v60 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * (v84 & v35));
    v61 = (_QWORD *)v98[0];
    if (!v60)
      goto LABEL_183;
    goto LABEL_123;
  }
  v60 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v3);
  v61 = (_QWORD *)v98[0];
  if (v60)
    goto LABEL_123;
LABEL_183:
  *v61 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v98[0];
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3) = v54;
  if (*(_QWORD *)v98[0])
  {
    v86 = *(_QWORD *)(*(_QWORD *)v98[0] + 8);
    if ((v36 & (v36 - 1)) != 0)
    {
      if (v86 >= v36)
        v86 %= v36;
    }
    else
    {
      v86 &= v36 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v86) = v98[0];
  }
LABEL_189:
  ++*(_QWORD *)(a1 + 56);
  v40 = HIBYTE(v89);
LABEL_190:
  if (v40 < 0)
    operator delete(__p[0]);
  return kdebug_trace();
}

void sub_20FDBC4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_20E8D7B80((uint64_t *)(v24 - 128));
  if (a14 < 0)
    operator delete(__p);
  sub_20E8E69C4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDBC520(uint64_t a1)
{
  return atomic_load((unsigned __int16 *)(a1 + 8));
}

uint64_t sub_20FDBC52C(uint64_t a1)
{
  return atomic_load((unsigned __int16 *)(a1 + 10));
}

uint64_t sub_20FDBC538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = (__int128 *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v7 = *v6;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v7;
  }
  v8 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x65636E6174736E69;
  *(_QWORD *)(a1 + 112) = 6580575;
  *(_BYTE *)(a1 + 127) = 11;
  *(_QWORD *)(a1 + 128) = 0;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 72), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v9 = *v6;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)v6 + 2);
    *(_OWORD *)(a1 + 72) = v9;
  }
  *(_BYTE *)(a1 + 96) = 1;
  return a1;
}

void sub_20FDBC62C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  sub_20EF6F7C0(v4);
  sub_20E86665C(v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_20FDBC658(uint64_t a1@<X0>, std::string::size_type a2@<X1>, std::string::size_type a3@<X8>)
{
  unsigned int v6;
  std::string v7;
  std::string __p;
  char v9;
  void *v10[2];
  char v11;

  v6 = atomic_load((unint64_t *)(a1 + 128));
  __p.__r_.__value_.__s.__data_[0] = 0;
  v9 = 0;
  strcpy((char *)v10, "on_instance_id");
  HIBYTE(v10[1]) = 0;
  v11 = 14;
  std::to_string(&v7, v6);
  if (v9)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v7;
  }
  else
  {
    __p = v7;
    v9 = 1;
  }
  *(_BYTE *)(a3 + 120) = 1;
  v7.__r_.__value_.__r.__words[0] = a3;
  v7.__r_.__value_.__l.__size_ = a2;
  sub_20FDBC78C((uint64_t *)&v7, (uint64_t)&__p);
  sub_20FDBC78C((uint64_t *)&v7, a1 + 72);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v9)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20FDBC75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EF6F7C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDBC770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E89ED1C(v5);
  sub_20EF6F7C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDBC78C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void **v5;
  const char *v6;
  const char *v7;
  const char *v8[2];
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = *a1;
  if (*(_BYTE *)(v3 + 120))
  {
    sub_20E89EDB0(v3);
    v5 = (void **)a1[1];
    v6 = *(const char **)(a2 + 32);
    v7 = (const char *)*(unsigned __int8 *)(a2 + 55);
    if ((char)v7 < 0)
      v7 = *(const char **)(a2 + 40);
    else
      v6 = (const char *)(a2 + 32);
    v8[0] = v6;
    v8[1] = v7;
    if (*(_BYTE *)(a2 + 24))
      sub_20FDBCA0C(v5, v8, (char *)a2, (uint64_t)&v9);
    else
      v19 = 1;
    sub_20FDBC8A8(*a1, &v9);
    if (!v19)
    {
      if (v18)
      {
        if (v17)
        {
          if (v16 < 0)
            operator delete(__p);
          if (v14 < 0)
            operator delete(v13);
        }
        if (v12)
        {
          if (v11 < 0)
            operator delete(v10);
        }
      }
    }
  }
}

void sub_20FDBC87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E89ED1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDBC894()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDBC8A8(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  LOBYTE(v5) = 0;
  v16 = *((_BYTE *)a2 + 120);
  if (!v16)
  {
    v5 = *a2;
    LOBYTE(__p[0]) = 0;
    v15 = 0;
    if (*((_BYTE *)a2 + 112))
    {
      v8 = 0;
      if (*((_BYTE *)a2 + 40))
      {
        *(_OWORD *)__p = a2[1];
        v7 = *((_QWORD *)a2 + 4);
        *((_QWORD *)a2 + 3) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *((_QWORD *)a2 + 2) = 0;
        v8 = 1;
      }
      LOBYTE(v9) = 0;
      v14 = 0;
      if (*((_BYTE *)a2 + 104))
      {
        v3 = *((_QWORD *)a2 + 9);
        v10 = *((_QWORD *)a2 + 8);
        v9 = a2[3];
        *((_QWORD *)a2 + 7) = 0;
        *((_QWORD *)a2 + 8) = 0;
        *((_QWORD *)a2 + 6) = 0;
        v11 = v3;
        *(_OWORD *)v12 = a2[5];
        v13 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a2 + 10) = 0;
        *((_QWORD *)a2 + 11) = 0;
        *((_QWORD *)a2 + 12) = 0;
        v14 = 1;
      }
      v15 = 1;
    }
  }
  sub_20FDBCCE8((uint64_t)&v5, a1);
  if (v16 || !v15)
    return a1;
  if (v14)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v10) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_18:
      operator delete((void *)v9);
      if (!v8)
        return a1;
      goto LABEL_15;
    }
    operator delete(v12[0]);
    if (SHIBYTE(v10) < 0)
      goto LABEL_18;
  }
LABEL_14:
  if (!v8)
    return a1;
LABEL_15:
  if ((SHIBYTE(v7) & 0x80000000) == 0)
    return a1;
  operator delete(__p[0]);
  return a1;
}

void sub_20FDBCA0C(void **a1@<X0>, const char **a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  int v9;
  uint64_t v10;
  std::string v11;
  std::string __dst;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD v31[2];
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  if (v8)
  {
    if (xpc_dictionary_get_value(v8, *a2))
      goto LABEL_3;
LABEL_7:
    sub_20FDC5698(a1, a2, a3);
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!xpc_dictionary_get_value(*a1, *a2))
    goto LABEL_7;
LABEL_3:
  v31[0] = "Key already contained in the dictionary: ";
  v31[1] = 41;
  v32 = *(_OWORD *)a2;
  sub_20E8778D4((uint64_t)v31, (uint64_t)&v33, 0, 0, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__dst, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    __dst = v11;
  v13 = 1;
  LOBYTE(v14) = 0;
  v18 = 0;
  v19 = 1;
  sub_20E89F2F8(0x16u, (__int128 *)&__dst, (uint64_t)&v20);
  *(_OWORD *)a4 = v20;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v9 = v23;
    if (v23)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v29)
    {
      v10 = v26;
      *(_QWORD *)(a4 + 64) = v25;
      *(_OWORD *)(a4 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a4 + 72) = v10;
      *(_OWORD *)(a4 + 80) = v27;
      *(_QWORD *)(a4 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v9 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
    if (!v19)
      goto LABEL_26;
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v19)
      goto LABEL_26;
  }
  if (!v18)
    goto LABEL_23;
  if (v17 < 0)
  {
    operator delete(v16);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_23:
      if (v13)
        goto LABEL_24;
      goto LABEL_26;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v14);
  if (v13)
  {
LABEL_24:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_26:
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20FDBCCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDBCCE8(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  BOOL v7;
  void **v10;
  int v11;
  void *v12;
  int v13;
  uint64_t v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  void *v21;
  __int128 v22;
  _BYTE v23[15];
  _BYTE v24[15];
  _BYTE v25[15];

  if (*(_BYTE *)(a1 + 120))
    v7 = *(_BYTE *)(a2 + 120) == 0;
  else
    v7 = 1;
  if (!v7)
    return;
  if (!*(_BYTE *)(a1 + 120))
  {
    if (*(_BYTE *)(a2 + 120))
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 112) = 0;
      if (*(_BYTE *)(a1 + 112))
      {
        v15 = (void **)(a1 + 16);
        *(_BYTE *)(a2 + 40) = 0;
        if (*(_BYTE *)(a1 + 40))
        {
          v16 = *(_OWORD *)v15;
          *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
          *(_OWORD *)(a2 + 16) = v16;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *v15 = 0;
          *(_BYTE *)(a2 + 40) = 1;
        }
        *(_BYTE *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 104) = 0;
        if (*(_BYTE *)(a1 + 104))
        {
          v17 = *(_OWORD *)(a1 + 48);
          *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
          *(_OWORD *)(a2 + 48) = v17;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
          v18 = *(_OWORD *)(a1 + 80);
          *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
          *(_OWORD *)(a2 + 80) = v18;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        *(_BYTE *)(a2 + 112) = 1;
        if (*(_BYTE *)(a1 + 112))
        {
          if (*(_BYTE *)(a1 + 104))
          {
            if (*(char *)(a1 + 103) < 0)
              operator delete(*(void **)(a1 + 80));
            if (*(char *)(a1 + 71) < 0)
              operator delete(*(void **)(a1 + 48));
          }
          if (*(_BYTE *)(a1 + 40) && *(char *)(a1 + 39) < 0)
            operator delete(*v15);
        }
      }
      v19 = *(_BYTE *)(a1 + 120);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      goto LABEL_31;
    }
LABEL_29:
    sub_20FDBD040((__int128 *)a1, (__int128 *)a2);
    return;
  }
  if (*(_BYTE *)(a2 + 120))
    goto LABEL_29;
  v22 = *(_OWORD *)a2;
  if (!*(_BYTE *)(a2 + 112))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v19 = 1;
LABEL_31:
    *(_BYTE *)(a2 + 120) = v19;
    return;
  }
  v10 = (void **)(a2 + 16);
  v11 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    v12 = *(void **)(a2 + 16);
    *(_QWORD *)v25 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)&v25[7] = *(_QWORD *)(a2 + 31);
    v2 = *(_BYTE *)(a2 + 39);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *v10 = 0;
    v13 = *(unsigned __int8 *)(a2 + 104);
    if (*(_BYTE *)(a2 + 104))
      goto LABEL_11;
  }
  else
  {
    v12 = 0;
    v13 = *(unsigned __int8 *)(a2 + 104);
    if (*(_BYTE *)(a2 + 104))
    {
LABEL_11:
      v14 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)v24 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)&v24[7] = *(_QWORD *)(a2 + 63);
      v5 = *(_BYTE *)(a2 + 71);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      v6 = *(_QWORD *)(a2 + 72);
      v3 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)v23 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)&v23[7] = *(_QWORD *)(a2 + 95);
      v4 = *(_BYTE *)(a2 + 103);
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      if (!v11)
        goto LABEL_37;
      goto LABEL_35;
    }
  }
  v14 = 0;
  if (!v11)
    goto LABEL_37;
LABEL_35:
  if (*(char *)(a2 + 39) < 0)
  {
    v21 = v12;
    operator delete(*v10);
    v12 = v21;
    *(_OWORD *)a1 = v22;
    *(_BYTE *)(a1 + 112) = 0;
LABEL_38:
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)v25;
    *(_QWORD *)(a1 + 31) = *(_QWORD *)&v25[7];
    *(_BYTE *)(a1 + 39) = v2;
    *(_BYTE *)(a1 + 40) = 1;
    v12 = 0;
    v2 = 0;
    goto LABEL_39;
  }
LABEL_37:
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (v11)
    goto LABEL_38;
LABEL_39:
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v13)
  {
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)v24;
    *(_QWORD *)(a1 + 63) = *(_QWORD *)&v24[7];
    *(_BYTE *)(a1 + 71) = v5;
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)v23;
    *(_QWORD *)(a1 + 95) = *(_QWORD *)&v23[7];
    *(_BYTE *)(a1 + 103) = v4;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 1;
  v20 = *(_BYTE *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a2 + 120) = v20;
  if (v11)
  {
    if (v2 < 0)
      operator delete(v12);
  }
}

void sub_20FDBD040(__int128 *a1, __int128 *a2)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 __p;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  char v15;

  v5 = *a1;
  v3 = a1 + 1;
  LOBYTE(__p) = 0;
  v15 = 0;
  if (*((_BYTE *)a1 + 112))
  {
    v8 = 0;
    if (*((_BYTE *)a1 + 40))
    {
      __p = *v3;
      v7 = *((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *(_QWORD *)v3 = 0;
      v8 = 1;
    }
    LOBYTE(v9) = 0;
    v14 = 0;
    if (*((_BYTE *)a1 + 104))
    {
      v4 = *((_QWORD *)a1 + 9);
      v10 = *((_QWORD *)a1 + 8);
      v9 = a1[3];
      *((_QWORD *)a1 + 7) = 0;
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 6) = 0;
      v11 = v4;
      *(_OWORD *)v12 = a1[5];
      v13 = *((_QWORD *)a1 + 12);
      *((_QWORD *)a1 + 10) = 0;
      *((_QWORD *)a1 + 11) = 0;
      *((_QWORD *)a1 + 12) = 0;
      v14 = 1;
    }
    v15 = 1;
  }
  *a1 = *a2;
  sub_20FD03AA4((uint64_t)(a1 + 1), a2 + 1);
  *a2 = v5;
  sub_20FD03AA4((uint64_t)(a2 + 1), &__p);
  if (v15)
  {
    if (!v14)
      goto LABEL_11;
    if (SHIBYTE(v13) < 0)
    {
      operator delete(v12[0]);
      if ((SHIBYTE(v10) & 0x80000000) == 0)
      {
LABEL_11:
        if (!v8)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v10) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete((void *)v9);
    if (!v8)
      return;
LABEL_12:
    if (SHIBYTE(v7) < 0)
      operator delete((void *)__p);
  }
}

void sub_20FDBD1A8(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  void *v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  char v13;
  char v14;
  char v15;

  *(_BYTE *)(a3 + 120) = 1;
  v4 = *a1;
  if (v4)
  {
    sub_20FDC44D0(v4, a2, (uint64_t)&v5);
    sub_20FDBC8A8(a3, &v5);
    if (!v15)
    {
      if (v14)
      {
        if (v13)
        {
          if (v12 < 0)
            operator delete(__p);
          if (v10 < 0)
            operator delete(v9);
        }
        if (v8)
        {
          if (v7 < 0)
            operator delete(v6);
        }
      }
    }
  }
}

void sub_20FDBD250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E89ED1C((uint64_t)&a9);
  sub_20E89ED1C(v9);
  _Unwind_Resume(a1);
}

void sub_20FDBD26C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E89ED1C(v1);
  _Unwind_Resume(a1);
}

void sub_20FDBD280(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12[2];
  const char *v13[2];
  __int128 v14;
  void *v15;
  char v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  char v22;
  char v23;
  char v24;

  *(_BYTE *)(a3 + 120) = 1;
  v12[0] = a3;
  v12[1] = (uint64_t)a2;
  v6 = *(_QWORD *)a1;
  if (!v6)
  {
    v7 = a1 + 72;
    v8 = a1 + 112;
    v9 = a1 + 152;
LABEL_6:
    sub_20E89EDB0(a3);
    v10 = *(const char **)(a1 + 48);
    v11 = (const char *)*(unsigned __int8 *)(a1 + 71);
    if ((char)v11 < 0)
      v11 = *(const char **)(a1 + 56);
    else
      v10 = (const char *)(a1 + 48);
    v13[0] = v10;
    v13[1] = v11;
    if (*(_BYTE *)(a1 + 40))
      sub_20FDBCA0C(a2, v13, (char *)(a1 + 16), (uint64_t)&v14);
    else
      v24 = 1;
    sub_20FDBC8A8(a3, &v14);
    if (!v24 && v23)
    {
      if (v22)
      {
        if (v21 < 0)
          operator delete(__p);
        if (v19 < 0)
          operator delete(v18);
      }
      if (v17 && v16 < 0)
        operator delete(v15);
    }
    goto LABEL_13;
  }
  sub_20FDC44D0(v6, a2, (uint64_t)&v14);
  sub_20FDBC8A8(a3, &v14);
  if (!v24 && v23)
  {
    if (v22)
    {
      if (v21 < 0)
        operator delete(__p);
      if (v19 < 0)
        operator delete(v18);
    }
    if (v17 && v16 < 0)
      operator delete(v15);
  }
  v7 = a1 + 72;
  v8 = a1 + 112;
  v9 = a1 + 152;
  if (*(_BYTE *)(a3 + 120))
    goto LABEL_6;
LABEL_13:
  sub_20FDBD4D0(v12, v7);
  sub_20FDBD4D0(v12, v8);
  sub_20FDBD4D0(v12, v9);
}

void sub_20FDBD438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E89ED1C((uint64_t)va);
  sub_20E89ED1C(v5);
  _Unwind_Resume(a1);
}

void sub_20FDBD454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  sub_20E89ED1C(v43);
  _Unwind_Resume(a1);
}

void sub_20FDBD4D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void **v5;
  const char *v6;
  const char *v7;
  const char *v8[2];
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = *a1;
  if (*(_BYTE *)(v3 + 120))
  {
    sub_20E89EDB0(v3);
    v5 = (void **)a1[1];
    v6 = *(const char **)(a2 + 16);
    v7 = (const char *)*(unsigned __int8 *)(a2 + 39);
    if ((char)v7 < 0)
      v7 = *(const char **)(a2 + 24);
    else
      v6 = (const char *)(a2 + 16);
    v8[0] = v6;
    v8[1] = v7;
    if (*(_BYTE *)(a2 + 8))
      sub_20FDBD5D4(v5, v8, (double *)a2, (uint64_t)&v9);
    else
      v19 = 1;
    sub_20FDBC8A8(*a1, &v9);
    if (!v19)
    {
      if (v18)
      {
        if (v17)
        {
          if (v16 < 0)
            operator delete(__p);
          if (v14 < 0)
            operator delete(v13);
        }
        if (v12)
        {
          if (v11 < 0)
            operator delete(v10);
        }
      }
    }
  }
}

void sub_20FDBD5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E89ED1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDBD5D4(void **a1@<X0>, const char **a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  int v9;
  uint64_t v10;
  std::string v11;
  std::string __dst;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD v31[2];
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  if (v8)
  {
    if (xpc_dictionary_get_value(v8, *a2))
      goto LABEL_3;
LABEL_7:
    sub_20FDC5458(a1, a2, a3);
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!xpc_dictionary_get_value(*a1, *a2))
    goto LABEL_7;
LABEL_3:
  v31[0] = "Key already contained in the dictionary: ";
  v31[1] = 41;
  v32 = *(_OWORD *)a2;
  sub_20E8778D4((uint64_t)v31, (uint64_t)&v33, 0, 0, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__dst, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    __dst = v11;
  v13 = 1;
  LOBYTE(v14) = 0;
  v18 = 0;
  v19 = 1;
  sub_20E89F2F8(0x16u, (__int128 *)&__dst, (uint64_t)&v20);
  *(_OWORD *)a4 = v20;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v9 = v23;
    if (v23)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v29)
    {
      v10 = v26;
      *(_QWORD *)(a4 + 64) = v25;
      *(_OWORD *)(a4 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a4 + 72) = v10;
      *(_OWORD *)(a4 + 80) = v27;
      *(_QWORD *)(a4 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v9 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
    if (!v19)
      goto LABEL_26;
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v19)
      goto LABEL_26;
  }
  if (!v18)
    goto LABEL_23;
  if (v17 < 0)
  {
    operator delete(v16);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_23:
      if (v13)
        goto LABEL_24;
      goto LABEL_26;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v14);
  if (v13)
  {
LABEL_24:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_26:
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20FDBD878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDBD8B0(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17[2];

  *(_BYTE *)(a3 + 120) = 1;
  v17[0] = a3;
  v17[1] = (uint64_t)a2;
  v5 = *a1;
  if (v5)
  {
    sub_20FDC44D0(v5, a2, (uint64_t)&v6);
    sub_20FDBC8A8(a3, &v6);
    if (!v16)
    {
      if (v15)
      {
        if (v14)
        {
          if (v13 < 0)
            operator delete(__p);
          if (v11 < 0)
            operator delete(v10);
        }
        if (v9 && v8 < 0)
          operator delete(v7);
      }
    }
  }
  sub_20FDBD9B0(v17, (uint64_t)(a1 + 2));
  sub_20FDBD9B0(v17, (uint64_t)(a1 + 7));
}

void sub_20FDBD96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E89ED1C((uint64_t)&a9);
  sub_20E89ED1C(v9);
  _Unwind_Resume(a1);
}

void sub_20FDBD988(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E89ED1C(v1);
  _Unwind_Resume(a1);
}

void sub_20FDBD99C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E89ED1C(v1);
  _Unwind_Resume(a1);
}

void sub_20FDBD9B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void **v5;
  const char *v6;
  const char *v7;
  const char *v8[2];
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = *a1;
  if (*(_BYTE *)(v3 + 120))
  {
    sub_20E89EDB0(v3);
    v5 = (void **)a1[1];
    v6 = *(const char **)(a2 + 16);
    v7 = (const char *)*(unsigned __int8 *)(a2 + 39);
    if ((char)v7 < 0)
      v7 = *(const char **)(a2 + 24);
    else
      v6 = (const char *)(a2 + 16);
    v8[0] = v6;
    v8[1] = v7;
    if (*(_BYTE *)(a2 + 8))
      sub_20FDBD5D4(v5, v8, (double *)a2, (uint64_t)&v9);
    else
      v19 = 1;
    sub_20FDBC8A8(*a1, &v9);
    if (!v19)
    {
      if (v18)
      {
        if (v17)
        {
          if (v16 < 0)
            operator delete(__p);
          if (v14 < 0)
            operator delete(v13);
        }
        if (v12)
        {
          if (v11 < 0)
            operator delete(v10);
        }
      }
    }
  }
}

void sub_20FDBDAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E89ED1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDBDAB4(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9[2];
  const char *v10[2];
  __int128 v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  char v19;
  char v20;
  char v21;

  *(_BYTE *)(a3 + 120) = 1;
  v9[0] = a3;
  v9[1] = (uint64_t)a2;
  v6 = *(_QWORD *)a1;
  if (v6)
  {
    sub_20FDC44D0(v6, a2, (uint64_t)&v11);
    sub_20FDBC8A8(a3, &v11);
    if (!v21)
    {
      if (v20)
      {
        if (v19)
        {
          if (v18 < 0)
            operator delete(__p);
          if (v16 < 0)
            operator delete(v15);
        }
        if (v14 && v13 < 0)
          operator delete(v12);
      }
    }
  }
  sub_20FDBDCFC(v9, a1 + 16);
  sub_20FDBDCFC(v9, a1 + 56);
  sub_20FDBDCFC(v9, a1 + 96);
  sub_20FDBDCFC(v9, a1 + 136);
  if (*(_BYTE *)(a3 + 120))
  {
    sub_20E89EDB0(a3);
    v7 = *(const char **)(a1 + 192);
    v8 = (const char *)*(unsigned __int8 *)(a1 + 215);
    if ((char)v8 < 0)
      v8 = *(const char **)(a1 + 200);
    else
      v7 = (const char *)(a1 + 192);
    v10[0] = v7;
    v10[1] = v8;
    if (*(_BYTE *)(a1 + 184))
      sub_20FDBD5D4(a2, v10, (double *)(a1 + 176), (uint64_t)&v11);
    else
      v21 = 1;
    sub_20FDBC8A8(a3, &v11);
    if (!v21)
    {
      if (v20)
      {
        if (v19)
        {
          if (v18 < 0)
            operator delete(__p);
          if (v16 < 0)
            operator delete(v15);
        }
        if (v14)
        {
          if (v13 < 0)
            operator delete(v12);
        }
      }
    }
  }
}

void sub_20FDBDC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (!(_BYTE)a41 && (_BYTE)a37)
  {
    if (a35)
    {
      if (a34 < 0)
        operator delete(__p);
      if (a27 < 0)
        operator delete(a22);
    }
    if (a21)
    {
      if (a20 < 0)
      {
        operator delete(a15);
        sub_20E89ED1C(v43);
        _Unwind_Resume(a1);
      }
    }
  }
  sub_20E89ED1C(v43);
  _Unwind_Resume(a1);
}

void sub_20FDBDCFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void **v5;
  const char *v6;
  const char *v7;
  const char *v8[2];
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = *a1;
  if (*(_BYTE *)(v3 + 120))
  {
    sub_20E89EDB0(v3);
    v5 = (void **)a1[1];
    v6 = *(const char **)(a2 + 16);
    v7 = (const char *)*(unsigned __int8 *)(a2 + 39);
    if ((char)v7 < 0)
      v7 = *(const char **)(a2 + 24);
    else
      v6 = (const char *)(a2 + 16);
    v8[0] = v6;
    v8[1] = v7;
    if (*(_BYTE *)(a2 + 8))
      sub_20FDBDE00(v5, v8, (uint64_t *)a2, (uint64_t)&v9);
    else
      v19 = 1;
    sub_20FDBC8A8(*a1, &v9);
    if (!v19)
    {
      if (v18)
      {
        if (v17)
        {
          if (v16 < 0)
            operator delete(__p);
          if (v14 < 0)
            operator delete(v13);
        }
        if (v12)
        {
          if (v11 < 0)
            operator delete(v10);
        }
      }
    }
  }
}

void sub_20FDBDDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E89ED1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDBDE00(void **a1@<X0>, const char **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  int v9;
  uint64_t v10;
  std::string v11;
  std::string __dst;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD v31[2];
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  if (v8)
  {
    if (xpc_dictionary_get_value(v8, *a2))
      goto LABEL_3;
LABEL_7:
    sub_20FDC5218(a1, a2, a3);
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!xpc_dictionary_get_value(*a1, *a2))
    goto LABEL_7;
LABEL_3:
  v31[0] = "Key already contained in the dictionary: ";
  v31[1] = 41;
  v32 = *(_OWORD *)a2;
  sub_20E8778D4((uint64_t)v31, (uint64_t)&v33, 0, 0, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__dst, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    __dst = v11;
  v13 = 1;
  LOBYTE(v14) = 0;
  v18 = 0;
  v19 = 1;
  sub_20E89F2F8(0x16u, (__int128 *)&__dst, (uint64_t)&v20);
  *(_OWORD *)a4 = v20;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v9 = v23;
    if (v23)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v29)
    {
      v10 = v26;
      *(_QWORD *)(a4 + 64) = v25;
      *(_OWORD *)(a4 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a4 + 72) = v10;
      *(_OWORD *)(a4 + 80) = v27;
      *(_QWORD *)(a4 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v9 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
    if (!v19)
      goto LABEL_26;
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v19)
      goto LABEL_26;
  }
  if (!v18)
    goto LABEL_23;
  if (v17 < 0)
  {
    operator delete(v16);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_23:
      if (v13)
        goto LABEL_24;
      goto LABEL_26;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v14);
  if (v13)
  {
LABEL_24:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_26:
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20FDBE0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDBE0DC(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12[2];
  const char *v13[2];
  __int128 v14;
  void *v15;
  char v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  char v22;
  char v23;
  char v24;

  *(_BYTE *)(a3 + 120) = 1;
  v12[0] = a3;
  v12[1] = (uint64_t)a2;
  v6 = *(_QWORD *)a1;
  if (!v6)
  {
    v7 = a1 + 72;
    v8 = a1 + 112;
    v9 = a1 + 152;
LABEL_6:
    sub_20E89EDB0(a3);
    v10 = *(const char **)(a1 + 48);
    v11 = (const char *)*(unsigned __int8 *)(a1 + 71);
    if ((char)v11 < 0)
      v11 = *(const char **)(a1 + 56);
    else
      v10 = (const char *)(a1 + 48);
    v13[0] = v10;
    v13[1] = v11;
    if (*(_BYTE *)(a1 + 40))
      sub_20FDBCA0C(a2, v13, (char *)(a1 + 16), (uint64_t)&v14);
    else
      v24 = 1;
    sub_20FDBC8A8(a3, &v14);
    if (!v24 && v23)
    {
      if (v22)
      {
        if (v21 < 0)
          operator delete(__p);
        if (v19 < 0)
          operator delete(v18);
      }
      if (v17 && v16 < 0)
        operator delete(v15);
    }
    goto LABEL_13;
  }
  sub_20FDC44D0(v6, a2, (uint64_t)&v14);
  sub_20FDBC8A8(a3, &v14);
  if (!v24 && v23)
  {
    if (v22)
    {
      if (v21 < 0)
        operator delete(__p);
      if (v19 < 0)
        operator delete(v18);
    }
    if (v17 && v16 < 0)
      operator delete(v15);
  }
  v7 = a1 + 72;
  v8 = a1 + 112;
  v9 = a1 + 152;
  if (*(_BYTE *)(a3 + 120))
    goto LABEL_6;
LABEL_13:
  sub_20FDBE32C(v12, v7);
  sub_20FDBE32C(v12, v8);
  sub_20FDBE32C(v12, v9);
}

void sub_20FDBE294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E89ED1C((uint64_t)va);
  sub_20E89ED1C(v5);
  _Unwind_Resume(a1);
}

void sub_20FDBE2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  sub_20E89ED1C(v43);
  _Unwind_Resume(a1);
}

void sub_20FDBE32C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void **v5;
  const char *v6;
  const char *v7;
  const char *v8[2];
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = *a1;
  if (*(_BYTE *)(v3 + 120))
  {
    sub_20E89EDB0(v3);
    v5 = (void **)a1[1];
    v6 = *(const char **)(a2 + 16);
    v7 = (const char *)*(unsigned __int8 *)(a2 + 39);
    if ((char)v7 < 0)
      v7 = *(const char **)(a2 + 24);
    else
      v6 = (const char *)(a2 + 16);
    v8[0] = v6;
    v8[1] = v7;
    if (*(_BYTE *)(a2 + 8))
      sub_20FDBD5D4(v5, v8, (double *)a2, (uint64_t)&v9);
    else
      v19 = 1;
    sub_20FDBC8A8(*a1, &v9);
    if (!v19)
    {
      if (v18)
      {
        if (v17)
        {
          if (v16 < 0)
            operator delete(__p);
          if (v14 < 0)
            operator delete(v13);
        }
        if (v12)
        {
          if (v11 < 0)
            operator delete(v10);
        }
      }
    }
  }
}

void sub_20FDBE41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E89ED1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDBE430(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *(void ***)(a1 + 48);
    if (v4)
    {
      do
      {
        v14 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v14;
      }
      while (v14);
    }
    v5 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v5)
      operator delete(v5);
    v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_BYTE *)(a1 + 80) = 0;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_QWORD *)(a1 + 40);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v12 %= v13;
    }
    else
    {
      v12 &= v13 - 1;
    }
    *(_QWORD *)(v9 + 8 * v12) = a1 + 48;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 1;
  return a1;
}

double sub_20FDBE57C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double result;
  uint64_t v9;

  if (*((_BYTE *)a1 + 112))
  {
    a1 = sub_20F04BEB4(a1);
    *((_BYTE *)a1 + 112) = 0;
  }
  *a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  a1[1] = v3;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(_QWORD *)(a2 + 24);
  a1[3] = v4;
  v5 = *(_QWORD *)(a2 + 32);
  a1[4] = v5;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 40);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = a1[2];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v6 %= v7;
    }
    else
    {
      v6 &= v7 - 1;
    }
    *(_QWORD *)(v3 + 8 * v6) = a1 + 3;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
  a1[8] = 0;
  result = 0.0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 72) = 0u;
  v9 = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  a1[12] = v9;
  *((_DWORD *)a1 + 26) = *(_DWORD *)(a2 + 104);
  *((_BYTE *)a1 + 112) = 1;
  return result;
}

double sub_20FDBE67C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  double result;
  unint64_t v13;
  __int128 __dst;
  unint64_t v15;

  v3 = *(unsigned __int8 *)(a1 + 31);
  if (*(char *)(a1 + 31) < 0)
  {
    v4 = *(_QWORD *)(a1 + 16) - 1;
    if ((v4 & 0x80000000) != 0)
    {
LABEL_15:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
  }
  else
  {
    v4 = (v3 - 1);
    if ((int)v3 - 1 < 0)
      goto LABEL_15;
  }
  v5 = (_QWORD *)(a1 + 8);
  while ((v3 & 0x80) == 0)
  {
    if (*((_BYTE *)v5 + v4) == 45)
    {
      if (v4 < v3)
      {
        v7 = v4 + 1;
        v8 = ~v4 + v3;
        if (v8 < 0x7FFFFFFFFFFFFFF8)
          goto LABEL_12;
LABEL_23:
        sub_20E860B7C();
      }
LABEL_24:
      sub_20E89FD0C();
    }
LABEL_7:
    if ((uint64_t)v4-- < 1)
      goto LABEL_15;
  }
  if (*(_BYTE *)(*v5 + v4) != 45)
    goto LABEL_7;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 <= v4)
    goto LABEL_24;
  v7 = v4 + 1;
  v8 = ~v4 + v13;
  v5 = (_QWORD *)*v5;
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_23;
LABEL_12:
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v15 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v15) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_19:
    memmove(p_dst, (char *)v5 + v7, v8);
  *((_BYTE *)p_dst + v8) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t *sub_20FDBE7F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  __int128 v13;

  __p = operator new(0x20uLL);
  v13 = xmmword_2102DBF70;
  strcpy((char *)__p, "CoreAnalyticsConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "CoreAnalyticsConfig.enable", v4, "Enable CoreAnalytics for SLAM.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  sub_20E8B2F9C((uint64_t *)&__p, "CoreAnalyticsConfig.enable_relocalization", v5, "Enable CoreAnalytics for Relocalization.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EB8894C(a1 + 8);
  sub_20E8B2F9C((uint64_t *)&__p, "CoreAnalyticsConfig.analytics_session_id", v6, "The SessionID to use when identifying a session for analytics. This ID is not used anywhere else to prevent people from correlating this (potentially sensitive) analytics data with any other data.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DCF0((unsigned int *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "CoreAnalyticsConfig.slow_context_event_time_period_s", v7, "The number of seconds between the emitting of Slow Context SLAM telemetry.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DCF0((unsigned int *)(a1 + 36));
  sub_20E8B2F9C((uint64_t *)&__p, "CoreAnalyticsConfig.fast_context_event_time_period_s", v8, "The number of seconds between the emitting of Fast Context SLAM telemetry.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DCF0((unsigned int *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "CoreAnalyticsConfig.weak_stationary_detection_time_interval_s", v9, "The time interval (in seconds) for which weak stationary-ness should be detected.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 48));
}

void sub_20FDBE9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDBEA28(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = off_24CA07150;
  v2 = (_QWORD *)operator new();
  sub_210220838((uint64_t)v2, "CoreAnalyticsQueue", 0x200uLL, 0);
  *v2 = &off_24CA1E9F0;
  v2[1] = &unk_24CA1EA38;
  a1[1] = &off_24C9B1898;
  v3 = (_QWORD *)operator new();
  *v3 = &off_24CA1E9A8;
  v3[1] = v2 + 1;
  a1[2] = v3;
  return a1;
}

void sub_20FDBEACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20FDBEAE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B3C4045502B94);
  _Unwind_Resume(a1);
}

void sub_20FDBEB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v15, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
  }
  sub_20FDBEECC(&v17, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  if (SHIBYTE(v16) < 0)
  {
    sub_20E860C04(__p, v15[0], (unint64_t)v15[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v15;
    v20 = v16;
  }
  sub_20FDBEECC(&v21, v17, v18);
  v24 = 0;
  v5 = (char *)operator new(0x30uLL);
  v6 = v5;
  *(_QWORD *)v5 = off_24CA071F0;
  if (SHIBYTE(v20) < 0)
  {
    sub_20E860C04(v5 + 8, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)(v5 + 8) = *(_OWORD *)__p;
    *((_QWORD *)v5 + 3) = v20;
  }
  sub_20FDBEECC((_QWORD *)v6 + 4, v21, v22);
  v24 = v6;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8, v23);
  v7 = v24;
  if (v24 == v23)
  {
    v8 = 4;
    v7 = v23;
    goto LABEL_14;
  }
  if (v24)
  {
    v8 = 5;
LABEL_14:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = v22;
  if (!v22)
    goto LABEL_19;
  p_shared_owners = &v22->__shared_owners_;
  do
    v11 = __ldaxr((unint64_t *)p_shared_owners);
  while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
  if (v11)
  {
LABEL_19:
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_20;
LABEL_23:
    operator delete(__p[0]);
    v12 = v18;
    if (!v18)
      goto LABEL_27;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (SHIBYTE(v20) < 0)
    goto LABEL_23;
LABEL_20:
  v12 = v18;
  if (!v18)
    goto LABEL_27;
LABEL_24:
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_27:
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v16) < 0)
LABEL_28:
    operator delete(v15[0]);
}

void sub_20FDBED28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  void *v22;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  operator delete(v22);
  v24 = a22;
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (a20 < 0)
    operator delete(__p);
  sub_20E8CADF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDBEE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDBEE1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

void sub_20FDBEE6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FDBEECC(_QWORD *a1, void *a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20FDBEFD0(&v16, a2);
  v6 = v17;
  *a1 = v16;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = v17;
    if (v17)
    {
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  if (!a3)
    return a1;
  v12 = (unint64_t *)&a3->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
  std::__shared_weak_count::__release_weak(a3);
  return a1;
}

void sub_20FDBEFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDBEFD0(_QWORD *a1, xpc_object_t object)
{
  _QWORD *v4;

  if (object)
    xpc_retain(object);
  *a1 = object;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA071A0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = object;
  a1[1] = v4;
  return a1;
}

void sub_20FDBF030(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    xpc_release(v1);
  __cxa_rethrow();
}

void sub_20FDBF048(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20FDBF060(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FDBF084(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    xpc_release(v1);
}

uint64_t sub_20FDBF0A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3xpc3PtrC1EPvEUlS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3xpc3PtrC1EPvEUlS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3xpc3PtrC1EPvEUlS3_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3xpc3PtrC1EPvEUlS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20FDBF114(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24CA071F0;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20FDBF1A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24CA071F0;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
      JUMPOUT(0x212BC6398);
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

char *sub_20FDBF230(uint64_t a1)
{
  char *v2;
  char *v3;

  v2 = (char *)operator new(0x30uLL);
  v3 = v2;
  *(_QWORD *)v2 = off_24CA071F0;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(v2 + 8, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  sub_20FDBEECC((_QWORD *)v3 + 4, *(void **)(a1 + 32), *(std::__shared_weak_count **)(a1 + 40));
  return v3;
}

void sub_20FDBF2AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20FDBF2C0(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[31] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDBF2E4(uint64_t a1, _QWORD *a2)
{
  _BYTE *v4;
  __int128 v5;

  *a2 = off_24CA071F0;
  v4 = a2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(v4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)v4 = v5;
  }
  return sub_20FDBEECC(a2 + 4, *(void **)(a1 + 32), *(std::__shared_weak_count **)(a1 + 40));
}

void sub_20FDBF354(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_20FDBF370(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(*(void **)(a1 + 8));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_8;
}

void sub_20FDBF3E4(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 5);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((__p[31] & 0x80000000) == 0)
        goto LABEL_6;
LABEL_9:
      operator delete(*((void **)__p + 1));
      operator delete(__p);
      return;
    }
  }
  if (__p[31] < 0)
    goto LABEL_9;
LABEL_6:
  operator delete(__p);
}

uint64_t sub_20FDBF464()
{
  return analytics_send_event();
}

uint64_t sub_20FDBF494(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio9analytics17RealCoreAnalytics9SendEventERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS"
                     "3_9allocatorIcEEEERKNS_3kit3xpc13DictionaryRefEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio9analytics17RealCoreAnalytics9SendEventERKNSt3__112basic_stringIcNS3_11char_t"
                                "raitsIcEENS3_9allocatorIcEEEERKNS_3kit3xpc13DictionaryRefEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio9analytics17RealCoreAnalytics9SendEventERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKNS_3kit3xpc13DictionaryRefEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio9analytics17RealCoreAnalytics9SendEventERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKNS_3kit3xpc13DictionaryRefEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FDBF500()
{
  return &unk_24CA07250;
}

void sub_20FDBF50C(void (****a1)(_QWORD, xpc_object_t *, xpc_object_t *), unsigned int *a2)
{
  std::__shared_weak_count_vtbl *empty;
  std::__shared_weak_count_vtbl *v5;
  xpc_object_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  xpc_object_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const char **v20;
  const char *v21;
  std::__shared_weak_count_vtbl *v22;
  xpc_object_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  xpc_object_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  xpc_object_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  xpc_object_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count_vtbl *v42;
  xpc_object_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count_vtbl *v47;
  xpc_object_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  xpc_object_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count_vtbl *v57;
  xpc_object_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count_vtbl *v62;
  xpc_object_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  const char **v67;
  const char *v68;
  std::__shared_weak_count_vtbl *v69;
  xpc_object_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  xpc_object_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count_vtbl *v79;
  xpc_object_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void (***v84)(_QWORD, xpc_object_t *, xpc_object_t *);
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t *v89;
  const char **v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  size_t v94;
  int v95;
  size_t v96;
  void **v97;
  unint64_t v98;
  unint64_t v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  unsigned int *v108;
  int v109;
  unsigned __int8 v110;
  int v112;
  void *v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int *v120;
  int v121;
  char *v122;
  size_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t i;
  uint64_t v127;
  std::__shared_weak_count *v128;
  int v129;
  void *v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  unint64_t *p_shared_owners;
  unint64_t v138;
  void **v139;
  const char **v140;
  void *v141[2];
  char v142;
  xpc_object_t xdict;
  std::__shared_weak_count *v144;
  __uint64_t v145[2];
  int v146;
  void *__dst[2];
  unint64_t v148;
  xpc_object_t *p_value;
  xpc_object_t value;
  void *v151[2];
  _BYTE v152[20];
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  _BYTE v157[10];
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  __int16 v162;
  void *__p;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  _BYTE v167[14];
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  char v172;
  uint64_t v173;

  v173 = *MEMORY[0x24BDAC8D0];
  if (*a1)
  {
    empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
    sub_20FDC5110((std::__shared_weak_count_vtbl **)&xdict, empty, 0);
    v5 = (std::__shared_weak_count_vtbl *)xpc_int64_create(*a2);
    sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v5, 0);
    v6 = xdict;
    if (!xdict)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v6 = xdict;
    }
    xpc_dictionary_set_value(v6, "num_updates", value);
    v7 = (std::__shared_weak_count *)v151[0];
    if (v151[0])
    {
      v8 = (unint64_t *)((char *)v151[0] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count_vtbl *)xpc_double_create(*((double *)a2 + 1));
    sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v10, 0);
    v11 = xdict;
    if (!xdict)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v11 = xdict;
    }
    xpc_dictionary_set_value(v11, "duration_sec", value);
    v12 = (std::__shared_weak_count *)v151[0];
    if (v151[0])
    {
      v13 = (unint64_t *)((char *)v151[0] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count_vtbl *)xpc_int64_create(a2[4]);
    sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v15, 0);
    v16 = xdict;
    if (!xdict)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v16 = xdict;
    }
    xpc_dictionary_set_value(v16, "camera_source_id", value);
    v17 = (std::__shared_weak_count *)v151[0];
    if (!v151[0])
      goto LABEL_25;
    v18 = (unint64_t *)((char *)v151[0] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = (const char **)(a2 + 6);
      if ((*((char *)a2 + 47) & 0x80000000) == 0)
        goto LABEL_26;
    }
    else
    {
LABEL_25:
      v20 = (const char **)(a2 + 6);
      if ((*((char *)a2 + 47) & 0x80000000) == 0)
      {
LABEL_26:
        v21 = (const char *)v20;
        goto LABEL_29;
      }
    }
    v21 = *v20;
    if (!*v20)
    {
      v22 = (std::__shared_weak_count_vtbl *)xpc_null_create();
LABEL_30:
      sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v22, 0);
      v23 = xdict;
      if (!xdict)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v23 = xdict;
      }
      xpc_dictionary_set_value(v23, "reason", value);
      v24 = (std::__shared_weak_count *)v151[0];
      if (v151[0])
      {
        v25 = (unint64_t *)((char *)v151[0] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count_vtbl *)xpc_int64_create((int)a2[12]);
      sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v27, 0);
      v28 = xdict;
      if (!xdict)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v28 = xdict;
      }
      xpc_dictionary_set_value(v28, "algorithm", value);
      v29 = (std::__shared_weak_count *)v151[0];
      if (v151[0])
      {
        v30 = (unint64_t *)((char *)v151[0] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count_vtbl *)xpc_double_create(*((double *)a2 + 7));
      sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v32, 0);
      v33 = xdict;
      if (!xdict)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v33 = xdict;
      }
      xpc_dictionary_set_value(v33, "delta_camera_to_imu_rotation_x", value);
      v34 = (std::__shared_weak_count *)v151[0];
      if (v151[0])
      {
        v35 = (unint64_t *)((char *)v151[0] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count_vtbl *)xpc_double_create(*((double *)a2 + 8));
      sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v37, 0);
      v38 = xdict;
      if (!xdict)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v38 = xdict;
      }
      xpc_dictionary_set_value(v38, "delta_camera_to_imu_rotation_y", value);
      v39 = (std::__shared_weak_count *)v151[0];
      if (v151[0])
      {
        v40 = (unint64_t *)((char *)v151[0] + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = (std::__shared_weak_count_vtbl *)xpc_double_create(*((double *)a2 + 9));
      sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v42, 0);
      v43 = xdict;
      if (!xdict)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v43 = xdict;
      }
      xpc_dictionary_set_value(v43, "delta_camera_to_imu_rotation_z", value);
      v44 = (std::__shared_weak_count *)v151[0];
      if (!v151[0])
        goto LABEL_69;
      v45 = (unint64_t *)((char *)v151[0] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        if (!*((_BYTE *)a2 + 112))
          goto LABEL_103;
      }
      else
      {
LABEL_69:
        if (!*((_BYTE *)a2 + 112))
          goto LABEL_103;
      }
      v47 = (std::__shared_weak_count_vtbl *)xpc_double_create(*((double *)a2 + 10));
      sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v47, 0);
      v48 = xdict;
      if (!xdict)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v48 = xdict;
      }
      xpc_dictionary_set_value(v48, "delta_camera_focal_length_x", value);
      v49 = (std::__shared_weak_count *)v151[0];
      if (v151[0])
      {
        v50 = (unint64_t *)((char *)v151[0] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = (std::__shared_weak_count_vtbl *)xpc_double_create(*((double *)a2 + 11));
      sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v52, 0);
      v53 = xdict;
      if (!xdict)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v53 = xdict;
      }
      xpc_dictionary_set_value(v53, "delta_camera_focal_length_y", value);
      v54 = (std::__shared_weak_count *)v151[0];
      if (v151[0])
      {
        v55 = (unint64_t *)((char *)v151[0] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (std::__shared_weak_count_vtbl *)xpc_double_create(*((double *)a2 + 12));
      sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v57, 0);
      v58 = xdict;
      if (!xdict)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v58 = xdict;
      }
      xpc_dictionary_set_value(v58, "delta_camera_principal_point_x", value);
      v59 = (std::__shared_weak_count *)v151[0];
      if (v151[0])
      {
        v60 = (unint64_t *)((char *)v151[0] + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v62 = (std::__shared_weak_count_vtbl *)xpc_double_create(*((double *)a2 + 13));
      sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v62, 0);
      v63 = xdict;
      if (!xdict)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v63 = xdict;
      }
      xpc_dictionary_set_value(v63, "delta_camera_principal_point_y", value);
      v64 = (std::__shared_weak_count *)v151[0];
      if (v151[0])
      {
        v65 = (unint64_t *)((char *)v151[0] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
LABEL_103:
      v67 = (const char **)(a2 + 30);
      if (*((char *)a2 + 143) < 0)
      {
        v68 = *v67;
        if (!*v67)
        {
          v69 = (std::__shared_weak_count_vtbl *)xpc_null_create();
LABEL_107:
          sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v69, 0);
          v70 = xdict;
          if (!xdict)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v70 = xdict;
          }
          xpc_dictionary_set_value(v70, "session_id", value);
          v71 = (std::__shared_weak_count *)v151[0];
          if (v151[0])
          {
            v72 = (unint64_t *)((char *)v151[0] + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v74 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*((_BYTE *)a2 + 144));
          sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v74, 0);
          v75 = xdict;
          if (!xdict)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v75 = xdict;
          }
          xpc_dictionary_set_value(v75, "is_device_worn", value);
          v76 = (std::__shared_weak_count *)v151[0];
          if (v151[0])
          {
            v77 = (unint64_t *)((char *)v151[0] + 8);
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v79 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*((_BYTE *)a2 + 145));
          sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v79, 0);
          v80 = xdict;
          if (!xdict)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v80 = xdict;
          }
          xpc_dictionary_set_value(v80, "is_indoor", value);
          v81 = (std::__shared_weak_count *)v151[0];
          if (!v151[0])
            goto LABEL_130;
          v82 = (unint64_t *)((char *)v151[0] + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
            if (!*((_BYTE *)a2 + 152))
            {
LABEL_132:
              v84 = *a1;
              value = operator new(0x30uLL);
              *(_OWORD *)v151 = xmmword_2102DBF00;
              strcpy((char *)value, "com.apple.AppleCV3D.infield.calibration.update");
              (**v84)(v84, &value, &xdict);
              if (SHIBYTE(v151[1]) < 0)
              {
                operator delete(value);
                if (*((_BYTE *)a2 + 112))
                  goto LABEL_134;
              }
              else if (*((_BYTE *)a2 + 112))
              {
LABEL_134:
                v85 = *((_QWORD *)a2 + 10);
                v86 = *((_QWORD *)a2 + 11);
                v87 = (void *)*((_QWORD *)a2 + 12);
                v88 = *((_QWORD *)a2 + 13);
                goto LABEL_137;
              }
              v85 = 0;
              v86 = 0;
              v87 = 0;
              v88 = 0;
LABEL_137:
              v89 = sub_210219C18();
              if (*((char *)a2 + 47) >= 0)
                v90 = v20;
              else
                v90 = (const char **)*((_QWORD *)a2 + 3);
              v146 = 0;
              v91 = operator new();
              *(_QWORD *)(v91 + 272) = 0;
              *(_OWORD *)(v91 + 240) = 0u;
              *(_OWORD *)(v91 + 256) = 0u;
              *(_OWORD *)(v91 + 208) = 0u;
              *(_OWORD *)(v91 + 224) = 0u;
              *(_OWORD *)(v91 + 176) = 0u;
              *(_OWORD *)(v91 + 192) = 0u;
              *(_OWORD *)(v91 + 144) = 0u;
              *(_OWORD *)(v91 + 160) = 0u;
              *(_OWORD *)(v91 + 112) = 0u;
              *(_OWORD *)(v91 + 128) = 0u;
              *(_OWORD *)(v91 + 80) = 0u;
              *(_OWORD *)(v91 + 96) = 0u;
              *(_OWORD *)(v91 + 48) = 0u;
              *(_OWORD *)(v91 + 64) = 0u;
              *(_OWORD *)(v91 + 16) = 0u;
              *(_OWORD *)(v91 + 32) = 0u;
              *(_OWORD *)v91 = 0u;
              sub_20E863438(v91);
              value = (xpc_object_t)v91;
              v92 = (int)a2[12];
              if (v92 >= 4)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Analytics/src/InfieldCalibrationCoreAnalytics.cpp", 47, (uint64_t)"", 0, (uint64_t)"Unsupported IC event algorithm", 30, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              v93 = off_24CA072A8[v92];
              v94 = strlen(v93);
              sub_20E86A980((_QWORD *)(v91 + 16), (uint64_t)v93, v94);
              v95 = *(_DWORD *)(v91 + 120);
              if ((v95 & 0x10) != 0)
              {
                v98 = *(_QWORD *)(v91 + 112);
                v99 = *(_QWORD *)(v91 + 72);
                if (v98 < v99)
                {
                  *(_QWORD *)(v91 + 112) = v99;
                  v98 = v99;
                }
                v100 = *(const void **)(v91 + 64);
                v96 = v98 - (_QWORD)v100;
                if (v98 - (unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
                  goto LABEL_183;
              }
              else
              {
                if ((v95 & 8) == 0)
                {
                  v96 = 0;
                  HIBYTE(v148) = 0;
                  v97 = __dst;
                  goto LABEL_154;
                }
                v100 = *(const void **)(v91 + 40);
                v96 = *(_QWORD *)(v91 + 56) - (_QWORD)v100;
                if (v96 >= 0x7FFFFFFFFFFFFFF8)
LABEL_183:
                  sub_20E860B7C();
              }
              if (v96 >= 0x17)
              {
                v101 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v96 | 7) != 0x17)
                  v101 = v96 | 7;
                v102 = v101 + 1;
                v97 = (void **)operator new(v101 + 1);
                __dst[1] = (void *)v96;
                v148 = v102 | 0x8000000000000000;
                __dst[0] = v97;
              }
              else
              {
                HIBYTE(v148) = v96;
                v97 = __dst;
                if (!v96)
                {
LABEL_154:
                  *((_BYTE *)v97 + v96) = 0;
                  v103 = (char *)value;
                  if (value)
                  {
                    v104 = MEMORY[0x24BEDB7F0];
                    v105 = *MEMORY[0x24BEDB7F0];
                    *(_QWORD *)value = *MEMORY[0x24BEDB7F0];
                    v106 = *(_QWORD *)(v104 + 72);
                    *(_QWORD *)&v103[*(_QWORD *)(v105 - 24)] = *(_QWORD *)(v104 + 64);
                    *((_QWORD *)v103 + 3) = MEMORY[0x24BEDB848] + 16;
                    *((_QWORD *)v103 + 2) = v106;
                    if (v103[111] < 0)
                      operator delete(*((void **)v103 + 11));
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v103 + 128);
                    MEMORY[0x212BC6398](v103, 0x10B2C40EED050F3);
                  }
                  value = v145;
                  v151[0] = __dst;
                  v151[1] = v145;
                  *(_QWORD *)v152 = __dst;
                  *(_QWORD *)&v152[8] = __dst;
                  if (v146 == -1)
                    sub_20E877AB8();
                  p_value = &value;
                  ((void (*)(xpc_object_t **, __uint64_t *))off_24CA07260[v146])(&p_value, v145);
                  if (SHIBYTE(v148) < 0)
                    operator delete(__dst[0]);
                  if (v146 == -1)
                    sub_20E877AB8();
                  value = __dst;
                  ((void (*)(void **__return_ptr, xpc_object_t *, __uint64_t *))off_24CA07290[v146])(v141, &value, v145);
                  if (v146 != -1)
                    ((void (*)(xpc_object_t *, __uint64_t *))off_24CA07278[v146])(&value, v145);
                  if (v142 >= 0)
                    v107 = v141;
                  else
                    v107 = (void **)v141[0];
                  if (*((char *)a2 + 143) >= 0)
                    v108 = a2 + 30;
                  else
                    v108 = (unsigned int *)*((_QWORD *)a2 + 15);
                  if (*((_BYTE *)a2 + 152))
                    v109 = a2[37];
                  else
                    v109 = -1;
                  v110 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                  if ((v110 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                  {
                    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DDD0);
                  }
                  if (!atomic_load(&qword_254A5A450))
                  {
LABEL_197:
                    if (os_signpost_enabled((os_log_t)*v89))
                    {
                      v129 = *a2;
                      v130 = (void *)*((_QWORD *)a2 + 1);
                      v131 = a2[4];
                      v132 = *((_QWORD *)a2 + 7);
                      v133 = *((_QWORD *)a2 + 8);
                      v134 = *((_QWORD *)a2 + 9);
                      v135 = *((unsigned __int8 *)a2 + 144);
                      v136 = *((unsigned __int8 *)a2 + 145);
                      LODWORD(value) = 67112962;
                      HIDWORD(value) = v129;
                      LOWORD(v151[0]) = 2048;
                      *(void **)((char *)v151 + 2) = v130;
                      WORD1(v151[1]) = 1024;
                      HIDWORD(v151[1]) = v131;
                      *(_WORD *)v152 = 2082;
                      *(_QWORD *)&v152[2] = v90;
                      *(_WORD *)&v152[10] = 2082;
                      *(_QWORD *)&v152[12] = v107;
                      v153 = 2048;
                      v154 = v132;
                      v155 = 2048;
                      v156 = v133;
                      *(_WORD *)v157 = 2048;
                      *(_QWORD *)&v157[2] = v134;
                      v158 = 2048;
                      v159 = v85;
                      v160 = 2048;
                      v161 = v86;
                      v162 = 2048;
                      __p = v87;
                      v164 = 2048;
                      v165 = v88;
                      v166 = 2082;
                      *(_QWORD *)v167 = v108;
                      *(_WORD *)&v167[8] = 1024;
                      *(_DWORD *)&v167[10] = v135;
                      v168 = 1024;
                      v169 = v136;
                      v170 = 1024;
                      v171 = v109;
                      _os_signpost_emit_unreliably_with_name_impl();
                      if ((v142 & 0x80000000) == 0)
                      {
LABEL_199:
                        v128 = v144;
                        if (!v144)
                          return;
LABEL_203:
                        p_shared_owners = (unint64_t *)&v128->__shared_owners_;
                        do
                          v138 = __ldaxr(p_shared_owners);
                        while (__stlxr(v138 - 1, p_shared_owners));
                        if (!v138)
                        {
                          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                          std::__shared_weak_count::__release_weak(v128);
                        }
                        return;
                      }
                    }
                    else if ((v142 & 0x80000000) == 0)
                    {
                      goto LABEL_199;
                    }
                    operator delete(v141[0]);
                    v128 = v144;
                    if (!v144)
                      return;
                    goto LABEL_203;
                  }
                  v112 = *a2;
                  v113 = (void *)*((_QWORD *)a2 + 1);
                  v114 = a2[4];
                  v115 = *((_QWORD *)a2 + 7);
                  v116 = *((_QWORD *)a2 + 8);
                  v117 = *((_QWORD *)a2 + 9);
                  v118 = *((unsigned __int8 *)a2 + 144);
                  v119 = *((unsigned __int8 *)a2 + 145);
                  LODWORD(value) = 67112962;
                  HIDWORD(value) = v112;
                  LOWORD(v151[0]) = 2048;
                  *(void **)((char *)v151 + 2) = v113;
                  WORD1(v151[1]) = 1024;
                  HIDWORD(v151[1]) = v114;
                  *(_WORD *)v152 = 2082;
                  v139 = v107;
                  v140 = v90;
                  *(_QWORD *)&v152[2] = v90;
                  *(_WORD *)&v152[10] = 2082;
                  *(_QWORD *)&v152[12] = v107;
                  v153 = 2048;
                  v154 = v115;
                  v155 = 2048;
                  v156 = v116;
                  *(_WORD *)v157 = 2048;
                  *(_QWORD *)&v157[2] = v117;
                  v158 = 2048;
                  v159 = v85;
                  v160 = 2048;
                  v161 = v86;
                  v162 = 2048;
                  __p = v87;
                  v164 = 2048;
                  v165 = v88;
                  v166 = 2082;
                  v120 = v108;
                  *(_QWORD *)v167 = v108;
                  *(_WORD *)&v167[8] = 1024;
                  *(_DWORD *)&v167[10] = v118;
                  v168 = 1024;
                  v169 = v119;
                  v170 = 1024;
                  v121 = v109;
                  v171 = v109;
                  v122 = (char *)_os_log_send_and_compose_impl();
                  v123 = strlen(v122);
                  v145[0] = 0;
                  pthread_threadid_np(0, v145);
                  v124 = v145[0];
                  timespec_get((timespec *)v145, 1);
                  sub_210219E20(&value, 0xEEEEB0B5B2B2EEEELL, "CCDAnalytics", 0xCuLL, (__int128 *)(v89 + 1), (__int128 *)(v89 + 5), "num_updates=%d, duration_sec=%f, camera_source_id=%d, reason=%{public}s, algorithm=%{public}s, delta_camera_to_imu_rotation=[%f, %f, %f], delta_camera_intrinsics=[%f, %f, %f, %f], session_id=%{public}s, is_device_worn=%{BOOL}d, is_indoor=%{BOOL}d, reference_frame_id=%d", 0x10DuLL, v122, v123, v124, v145);
                  std::mutex::lock(&stru_254A5A410);
                  v125 = qword_254A5A458;
                  for (i = unk_254A5A460; v125 != i; v125 += 40)
                  {
                    v127 = *(_QWORD *)(v125 + 32);
                    if (!v127)
                      sub_20E86D37C();
                    (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v127 + 48))(v127, &value);
                  }
                  std::mutex::unlock(&stru_254A5A410);
                  if (v172 < 0)
                  {
                    operator delete(*(void **)&v167[4]);
                    v90 = v140;
                    v109 = v121;
                    if ((v167[3] & 0x80000000) == 0)
                    {
LABEL_180:
                      v108 = v120;
                      if (!BYTE2(v161))
                      {
LABEL_190:
                        v107 = v139;
                        if ((_BYTE)v156 && SHIBYTE(v155) < 0)
                          operator delete(*(void **)&v152[8]);
                        if ((v152[7] & 0x80000000) != 0)
                          operator delete(v151[0]);
                        if (v122)
                          free(v122);
                        goto LABEL_197;
                      }
LABEL_188:
                      if (SBYTE1(v161) < 0)
                        operator delete(*(void **)v157);
                      goto LABEL_190;
                    }
                  }
                  else
                  {
                    v90 = v140;
                    v109 = v121;
                    if ((v167[3] & 0x80000000) == 0)
                      goto LABEL_180;
                  }
                  operator delete(__p);
                  v108 = v120;
                  if (!BYTE2(v161))
                    goto LABEL_190;
                  goto LABEL_188;
                }
              }
              memmove(v97, v100, v96);
              goto LABEL_154;
            }
          }
          else
          {
LABEL_130:
            if (!*((_BYTE *)a2 + 152))
              goto LABEL_132;
          }
          value = "reference_frame_id";
          v151[0] = (void *)18;
          v145[0] = a2[37];
          sub_20FDC5218(&xdict, (const char **)&value, v145);
          goto LABEL_132;
        }
      }
      else
      {
        v68 = (const char *)(a2 + 30);
      }
      v69 = (std::__shared_weak_count_vtbl *)xpc_string_create(v68);
      goto LABEL_107;
    }
LABEL_29:
    v22 = (std::__shared_weak_count_vtbl *)xpc_string_create(v21);
    goto LABEL_30;
  }
}

void sub_20FDC07E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;

  sub_20E96E218((uint64_t)&a35);
  if (v40)
    free(v40);
  if (a21 < 0)
    operator delete(__p);
  sub_20E86665C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20FDC0990(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *object, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20FDBEFD0(&v12, object);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = object;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA071A0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = object;
    v13 = v5;
    *a1 = object;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20FDC0A6C(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    xpc_release(v1);
  __cxa_rethrow();
}

void sub_20FDC0A84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20FDC0A98(uint64_t a1, const char *a2, uint64_t a3, void (***a4)(_QWORD, _BYTE *, xpc_object_t *))
{
  std::__shared_weak_count_vtbl *empty;
  const char *p_string;
  std::__shared_weak_count_vtbl *v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const char *v14;
  std::__shared_weak_count_vtbl *v15;
  xpc_object_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  xpc_object_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  xpc_object_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  xpc_object_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  xpc_object_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  xpc_object_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count_vtbl *v45;
  xpc_object_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count_vtbl *v50;
  xpc_object_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count_vtbl *v55;
  xpc_object_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  xpc_object_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  xpc_object_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count_vtbl *v70;
  xpc_object_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  xpc_object_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  xpc_object_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  xpc_object_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  xpc_object_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  xpc_object_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  xpc_object_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  double v105;
  std::__shared_weak_count_vtbl *v106;
  xpc_object_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  xpc_object_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  double v116;
  std::__shared_weak_count_vtbl *v117;
  xpc_object_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  xpc_object_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  char *string;
  std::__shared_weak_count *v131;
  char v132;
  xpc_object_t value;
  std::__shared_weak_count *v134;
  xpc_object_t xdict;
  std::__shared_weak_count *v136;
  _BYTE __p[24];
  int v138;
  char v139;
  char *v140;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_20FDC5110((std::__shared_weak_count_vtbl **)&xdict, empty, 0);
  v138 = 0;
  sub_20F2368E0((uint64_t)&v140, (uint64_t)__p, (char *)a3);
  if (v138 == -1)
    sub_20E877AB8();
  v140 = &v139;
  ((void (*)(char **__return_ptr, char **, _BYTE *))off_24CA072E0[v138])(&string, &v140, __p);
  if (v138 != -1)
    ((void (*)(char **, _BYTE *))off_24CA072C8[v138])(&v140, __p);
  if ((v132 & 0x80000000) == 0)
  {
    p_string = (const char *)&string;
LABEL_7:
    v9 = (std::__shared_weak_count_vtbl *)xpc_string_create(p_string);
    goto LABEL_8;
  }
  p_string = string;
  if (string)
    goto LABEL_7;
  v9 = (std::__shared_weak_count_vtbl *)xpc_null_create();
LABEL_8:
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v9, 0);
  v10 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v10 = xdict;
  }
  xpc_dictionary_set_value(v10, "DescriptorType", value);
  v11 = v134;
  if (!v134)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v134->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
LABEL_15:
    if ((v132 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v132 < 0)
LABEL_16:
    operator delete(string);
LABEL_17:
  v138 = 0;
  sub_20F235F90((uint64_t)&v140, (uint64_t)__p, (unsigned __int8 *)(a3 + 17));
  if (v138 == -1)
    sub_20E877AB8();
  v140 = &v139;
  ((void (*)(char **__return_ptr, char **, _BYTE *))off_24CA072E0[v138])(&string, &v140, __p);
  if (v138 != -1)
    ((void (*)(char **, _BYTE *))off_24CA072C8[v138])(&v140, __p);
  if ((v132 & 0x80000000) == 0)
  {
    v14 = (const char *)&string;
LABEL_23:
    v15 = (std::__shared_weak_count_vtbl *)xpc_string_create(v14);
    goto LABEL_24;
  }
  v14 = string;
  if (string)
    goto LABEL_23;
  v15 = (std::__shared_weak_count_vtbl *)xpc_null_create();
LABEL_24:
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v15, 0);
  v16 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v16 = xdict;
  }
  xpc_dictionary_set_value(v16, "FailureCause", value);
  v17 = v134;
  if (!v134)
    goto LABEL_31;
  v18 = (unint64_t *)&v134->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_31:
    if ((v132 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (v132 < 0)
LABEL_32:
    operator delete(string);
LABEL_33:
  v20 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 16));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v20, 0);
  v21 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v21 = xdict;
  }
  xpc_dictionary_set_value(v21, "MultiFrame_Succeeded", *(xpc_object_t *)__p);
  v22 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(*(_QWORD *)(a3 + 8));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v25, 0);
  v26 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v26 = xdict;
  }
  xpc_dictionary_set_value(v26, "MultiFrame_Triggered", *(xpc_object_t *)__p);
  v27 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 2));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v30, 0);
  v31 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v31 = xdict;
  }
  xpc_dictionary_set_value(v31, "PnP_RANSAC_Succeeded", *(xpc_object_t *)__p);
  v32 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v33 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 64));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v35, 0);
  v36 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v36 = xdict;
  }
  xpc_dictionary_set_value(v36, "ReLocalizationSucceeded", *(xpc_object_t *)__p);
  v37 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v38 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 1));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v40, 0);
  v41 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v41 = xdict;
  }
  xpc_dictionary_set_value(v41, "WeakKeyFrame", *(xpc_object_t *)__p);
  v42 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v43 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 18));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v45, 0);
  v46 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v46 = xdict;
  }
  xpc_dictionary_set_value(v46, "DeviceInUse", *(xpc_object_t *)__p);
  v47 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v48 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 65));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v50, 0);
  v51 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v51 = xdict;
  }
  xpc_dictionary_set_value(v51, "IsFirstLocalization", *(xpc_object_t *)__p);
  v52 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v53 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a3 + 24));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v55, 0);
  v56 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v56 = xdict;
  }
  xpc_dictionary_set_value(v56, "TimeToLocalization", *(xpc_object_t *)__p);
  v57 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v58 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 32));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v60, 0);
  v61 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v61 = xdict;
  }
  xpc_dictionary_set_value(v61, "MapWasLoaded", *(xpc_object_t *)__p);
  v62 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v63 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a3 + 40));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v65, 0);
  v66 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v66 = xdict;
  }
  xpc_dictionary_set_value(v66, "TimeToLoadMap", *(xpc_object_t *)__p);
  v67 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_112;
  v68 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_120;
  }
  else
  {
LABEL_112:
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_120;
  }
  a2 = *(const char **)a2;
  if (!a2)
  {
    v70 = (std::__shared_weak_count_vtbl *)xpc_null_create();
    goto LABEL_121;
  }
LABEL_120:
  v70 = (std::__shared_weak_count_vtbl *)xpc_string_create(a2);
LABEL_121:
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v70, 0);
  v71 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v71 = xdict;
  }
  xpc_dictionary_set_value(v71, "SessionID", *(xpc_object_t *)__p);
  v72 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v73 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a3 + 48));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v75, 0);
  v76 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v76 = xdict;
  }
  xpc_dictionary_set_value(v76, "MapQueryDayDiff", *(xpc_object_t *)__p);
  v77 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v78 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a3 + 56));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v80, 0);
  v81 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v81 = xdict;
  }
  xpc_dictionary_set_value(v81, "MapQueryHourDiff", *(xpc_object_t *)__p);
  v82 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v83 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 66));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v85, 0);
  v86 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v86 = xdict;
  }
  xpc_dictionary_set_value(v86, "IsFirstLocalizationInSession", *(xpc_object_t *)__p);
  v87 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v88 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(*(_QWORD *)(a3 + 72));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v90, 0);
  v91 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v91 = xdict;
  }
  xpc_dictionary_set_value(v91, "NumberOfAccumulatedAttempts", *(xpc_object_t *)__p);
  v92 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v93 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a3 + 88));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v95, 0);
  v96 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v96 = xdict;
  }
  xpc_dictionary_set_value(v96, "LuxLevel", *(xpc_object_t *)__p);
  v97 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v98 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 80));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v100, 0);
  v101 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v101 = xdict;
  }
  xpc_dictionary_set_value(v101, "LocationEnabled", *(xpc_object_t *)__p);
  v102 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_176;
  v103 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v104 = __ldaxr(v103);
  while (__stlxr(v104 - 1, v103));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
    if (!*(_BYTE *)(a3 + 97))
      goto LABEL_196;
  }
  else
  {
LABEL_176:
    if (!*(_BYTE *)(a3 + 97))
      goto LABEL_196;
  }
  v105 = 1.0;
  if (!*(_BYTE *)(a3 + 96))
    v105 = 0.0;
  v106 = (std::__shared_weak_count_vtbl *)xpc_double_create(v105);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v106, 0);
  v107 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v107 = xdict;
  }
  xpc_dictionary_set_value(v107, "TimeToGetLocation", *(xpc_object_t *)__p);
  v108 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v109 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 96));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v111, 0);
  v112 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v112 = xdict;
  }
  xpc_dictionary_set_value(v112, "PrewittOn", *(xpc_object_t *)__p);
  v113 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v114 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
LABEL_196:
  v116 = *(double *)(a3 + 88);
  if (v116 < 0.0)
    goto LABEL_216;
  if (v116 >= 2.7)
  {
    if (v116 >= 15.0)
    {
      if (v116 >= 30.0)
      {
        if (v116 >= 100.0)
        {
          __p[23] = 11;
          strcpy(__p, "NominalHigh");
        }
        else
        {
          __p[23] = 13;
          strcpy(__p, "NominalMedium");
        }
      }
      else
      {
        __p[23] = 10;
        strcpy(__p, "NominalLow");
      }
    }
    else
    {
      __p[23] = 14;
      strcpy(__p, "ChallengingLow");
    }
  }
  else
  {
    __p[23] = 12;
    strcpy(__p, "Unacceptable");
  }
  v117 = (std::__shared_weak_count_vtbl *)xpc_string_create(__p);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&string, v117, 0);
  v118 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v118 = xdict;
  }
  xpc_dictionary_set_value(v118, "IlluminationLevel", string);
  v119 = v131;
  if (!v131)
    goto LABEL_215;
  v120 = (unint64_t *)&v131->__shared_owners_;
  do
    v121 = __ldaxr(v120);
  while (__stlxr(v121 - 1, v120));
  if (v121)
  {
LABEL_215:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_216;
LABEL_226:
    operator delete(*(void **)__p);
    if (!*(_BYTE *)(a3 + 99))
      goto LABEL_227;
    goto LABEL_217;
  }
  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
  std::__shared_weak_count::__release_weak(v119);
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_226;
LABEL_216:
  if (!*(_BYTE *)(a3 + 99))
    goto LABEL_227;
LABEL_217:
  v122 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*(_BYTE *)(a3 + 98));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)__p, v122, 0);
  v123 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v123 = xdict;
  }
  xpc_dictionary_set_value(v123, "IsIndoor", *(xpc_object_t *)__p);
  v124 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v125 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
LABEL_227:
  *(_QWORD *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DC970;
  strcpy(*(char **)__p, "com.apple.AppleCV3D.SLAM.ReLocalization.Attempt");
  (**a4)(a4, __p, &xdict);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    v127 = v136;
    if (!v136)
      return;
  }
  else
  {
    v127 = v136;
    if (!v136)
      return;
  }
  v128 = (unint64_t *)&v127->__shared_owners_;
  do
    v129 = __ldaxr(v128);
  while (__stlxr(v129 - 1, v128));
  if (!v129)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
}

void sub_20FDC1D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20E86665C((uint64_t)&a10);
  if (a22 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20FDC1E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_20E86665C((uint64_t)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20FDC1E6CLL);
}

void sub_20FDC202C(_QWORD *a1, const char *a2)
{
  std::__shared_weak_count_vtbl *empty;
  uint64_t v5;
  const char *v6;
  std::__shared_weak_count_vtbl *v7;
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***v17)(_QWORD, xpc_object_t *, xpc_object_t *);
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  xpc_object_t value;
  __int128 v22;
  xpc_object_t xdict;
  std::__shared_weak_count *v24;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_20FDC5110((std::__shared_weak_count_vtbl **)&xdict, empty, 0);
  v5 = *a1;
  if (!*(_BYTE *)(*a1 + 96))
    sub_20E866B34();
  v6 = (const char *)(v5 + 72);
  if (*(char *)(v5 + 95) < 0 && (v6 = *(const char **)v6) == 0)
    v7 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  else
    v7 = (std::__shared_weak_count_vtbl *)xpc_string_create(v6);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v7, 0);
  v8 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = xdict;
  }
  xpc_dictionary_set_value(v8, "session_id", value);
  v9 = (std::__shared_weak_count *)v22;
  if (!(_QWORD)v22)
    goto LABEL_12;
  v10 = (unint64_t *)(v22 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_16;
  }
  else
  {
LABEL_12:
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_16;
  }
  a2 = *(const char **)a2;
  if (!a2)
  {
    v12 = (std::__shared_weak_count_vtbl *)xpc_null_create();
    goto LABEL_17;
  }
LABEL_16:
  v12 = (std::__shared_weak_count_vtbl *)xpc_string_create(a2);
LABEL_17:
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v12, 0);
  v13 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v13 = xdict;
  }
  xpc_dictionary_set_value(v13, "slam_error", value);
  v14 = (std::__shared_weak_count *)v22;
  if ((_QWORD)v22)
  {
    v15 = (unint64_t *)(v22 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (void (***)(_QWORD, xpc_object_t *, xpc_object_t *))a1[2];
  value = operator new(0x28uLL);
  v22 = xmmword_2102E0950;
  strcpy((char *)value, "com.apple.AppleCV3D.SLAM.Errors.Test");
  (**v17)(v17, &value, &xdict);
  if (SHIBYTE(v22) < 0)
    operator delete(value);
  v18 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20FDC22C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20FDC2344(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count_vtbl *empty;
  uint64_t v5;
  const char *v6;
  std::__shared_weak_count_vtbl *v7;
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const char *v12;
  std::__shared_weak_count_vtbl *v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count_vtbl *v18;
  xpc_object_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  xpc_object_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  xpc_object_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  xpc_object_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  xpc_object_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void (***v43)(_QWORD, xpc_object_t *, xpc_object_t *);
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  xpc_object_t value;
  __int128 v48;
  xpc_object_t xdict;
  std::__shared_weak_count *v50;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_20FDC5110((std::__shared_weak_count_vtbl **)&xdict, empty, 0);
  v5 = *a1;
  if (!*(_BYTE *)(*a1 + 96))
    sub_20E866B34();
  v6 = (const char *)(v5 + 72);
  if (*(char *)(v5 + 95) < 0 && (v6 = *(const char **)v6) == 0)
    v7 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  else
    v7 = (std::__shared_weak_count_vtbl *)xpc_string_create(v6);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v7, 0);
  v8 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = xdict;
  }
  xpc_dictionary_set_value(v8, "session_id", value);
  v9 = (std::__shared_weak_count *)v48;
  if (!(_QWORD)v48)
    goto LABEL_12;
  v10 = (unint64_t *)(v48 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (const char *)a2;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_16;
  }
  else
  {
LABEL_12:
    v12 = (const char *)a2;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_16;
  }
  v12 = *(const char **)a2;
  if (!*(_QWORD *)a2)
  {
    v13 = (std::__shared_weak_count_vtbl *)xpc_null_create();
    goto LABEL_17;
  }
LABEL_16:
  v13 = (std::__shared_weak_count_vtbl *)xpc_string_create(v12);
LABEL_17:
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v13, 0);
  v14 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v14 = xdict;
  }
  xpc_dictionary_set_value(v14, "metric_name", value);
  v15 = (std::__shared_weak_count *)v48;
  if ((_QWORD)v48)
  {
    v16 = (unint64_t *)(v48 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a2 + 24));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v18, 0);
  v19 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v19 = xdict;
  }
  xpc_dictionary_set_value(v19, "max_diff", value);
  v20 = (std::__shared_weak_count *)v48;
  if ((_QWORD)v48)
  {
    v21 = (unint64_t *)(v48 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a2 + 32));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v23, 0);
  v24 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v24 = xdict;
  }
  xpc_dictionary_set_value(v24, "min_diff", value);
  v25 = (std::__shared_weak_count *)v48;
  if ((_QWORD)v48)
  {
    v26 = (unint64_t *)(v48 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count_vtbl *)xpc_int64_create(*(_QWORD *)(a2 + 40));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v28, 0);
  v29 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v29 = xdict;
  }
  xpc_dictionary_set_value(v29, "data_point_count", value);
  v30 = (std::__shared_weak_count *)v48;
  if ((_QWORD)v48)
  {
    v31 = (unint64_t *)(v48 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a2 + 48));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v33, 0);
  v34 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v34 = xdict;
  }
  xpc_dictionary_set_value(v34, "sum", value);
  v35 = (std::__shared_weak_count *)v48;
  if ((_QWORD)v48)
  {
    v36 = (unint64_t *)(v48 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a2 + 56));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v38, 0);
  v39 = xdict;
  if (!xdict)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v39 = xdict;
  }
  xpc_dictionary_set_value(v39, "sum_sq", value);
  v40 = (std::__shared_weak_count *)v48;
  if ((_QWORD)v48)
  {
    v41 = (unint64_t *)(v48 + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (void (***)(_QWORD, xpc_object_t *, xpc_object_t *))a1[2];
  value = operator new(0x28uLL);
  v48 = xmmword_2102DC280;
  strcpy((char *)value, "com.apple.AppleCV3D.SLAM.Metrics");
  (**v43)(v43, &value, &xdict);
  if (SHIBYTE(v48) < 0)
    operator delete(value);
  v44 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_20FDC291C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20FDC2988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDC299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDC29B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDC29C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDC29D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDC29EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDC2A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDC2A14(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count_vtbl *empty;
  uint64_t v5;
  const char *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const char *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  void (***v29)(_QWORD, xpc_object_t *, std::__shared_weak_count_vtbl **);
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  xpc_object_t value;
  __int128 v34;
  void *v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  const void *v40[2];
  char v41;
  void *v42[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  const void *v47[2];
  char v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  const void *v54[4];
  __int128 __p;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  const void *v60[2];
  char v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  const void *v67[2];
  char v68;
  __int128 __dst;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  const void *v74[2];
  char v75;
  std::__shared_weak_count_vtbl **v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_20FDC5110(&v77, empty, 0);
  v5 = *a1;
  if (!*(_BYTE *)(*a1 + 96))
    sub_20E866B34();
  v6 = (const char *)(v5 + 72);
  if (*(char *)(v5 + 95) < 0 && (v6 = *(const char **)v6) == 0)
    v7 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  else
    v7 = (std::__shared_weak_count_vtbl *)xpc_string_create(v6);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v7, 0);
  v8 = v77;
  if (!v77)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = v77;
  }
  xpc_dictionary_set_value(v8, "instance_id", value);
  v9 = (std::__shared_weak_count *)v34;
  if (!(_QWORD)v34)
    goto LABEL_12;
  v10 = (unint64_t *)(v34 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (const char *)a2;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_16;
  }
  else
  {
LABEL_12:
    v12 = (const char *)a2;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_16;
  }
  v12 = *(const char **)a2;
  if (!*(_QWORD *)a2)
  {
    v13 = (std::__shared_weak_count_vtbl *)xpc_null_create();
    goto LABEL_17;
  }
LABEL_16:
  v13 = (std::__shared_weak_count_vtbl *)xpc_string_create(v12);
LABEL_17:
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v13, 0);
  v14 = v77;
  if (!v77)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v14 = v77;
  }
  xpc_dictionary_set_value(v14, "reinit_id", value);
  v15 = (std::__shared_weak_count *)v34;
  if (!(_QWORD)v34)
    goto LABEL_24;
  v16 = (unint64_t *)(v34 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (const char *)(a2 + 24);
    if ((*(char *)(a2 + 47) & 0x80000000) == 0)
      goto LABEL_28;
  }
  else
  {
LABEL_24:
    v18 = (const char *)(a2 + 24);
    if ((*(char *)(a2 + 47) & 0x80000000) == 0)
      goto LABEL_28;
  }
  v18 = *(const char **)v18;
  if (!v18)
  {
    v19 = (std::__shared_weak_count_vtbl *)xpc_null_create();
    goto LABEL_29;
  }
LABEL_28:
  v19 = (std::__shared_weak_count_vtbl *)xpc_string_create(v18);
LABEL_29:
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v19, 0);
  v20 = v77;
  if (!v77)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v20 = v77;
  }
  xpc_dictionary_set_value(v20, "reinit_reason", value);
  v21 = (std::__shared_weak_count *)v34;
  if ((_QWORD)v34)
  {
    v22 = (unint64_t *)(v34 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v76 = &v77;
  v75 = 11;
  strcpy((char *)v74, "num_dcam_fp");
  if (*(char *)(a2 + 71) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 48);
    v70 = *(_QWORD *)(a2 + 64);
  }
  v71 = *(_OWORD *)(a2 + 72);
  v72 = *(_OWORD *)(a2 + 88);
  v73 = *(_QWORD *)(a2 + 104);
  sub_20FDC325C((void ***)&v76, v74, (uint64_t)&__dst);
  if (SHIBYTE(v70) < 0)
    operator delete((void *)__dst);
  v24 = *(char *)(a2 + 135);
  v68 = 11;
  strcpy((char *)v67, "num_scam_fp");
  if (v24 < 0)
  {
    sub_20E860C04(&v62, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v62 = *(_OWORD *)(a2 + 112);
    v63 = *(_QWORD *)(a2 + 128);
  }
  v64 = *(_OWORD *)(a2 + 136);
  v65 = *(_OWORD *)(a2 + 152);
  v66 = *(_QWORD *)(a2 + 168);
  sub_20FDC325C((void ***)&v76, v67, (uint64_t)&v62);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
  v25 = *(char *)(a2 + 199);
  v61 = 10;
  strcpy((char *)v60, "num_tracks");
  if (v25 < 0)
  {
    sub_20E860C04(&__p, *(void **)(a2 + 176), *(_QWORD *)(a2 + 184));
  }
  else
  {
    __p = *(_OWORD *)(a2 + 176);
    v56 = *(_QWORD *)(a2 + 192);
  }
  v57 = *(_OWORD *)(a2 + 200);
  v58 = *(_OWORD *)(a2 + 216);
  v59 = *(_QWORD *)(a2 + 232);
  sub_20FDC325C((void ***)&v76, v60, (uint64_t)&__p);
  if (SHIBYTE(v56) < 0)
    operator delete((void *)__p);
  v26 = *(char *)(a2 + 263);
  HIBYTE(v54[2]) = 17;
  strcpy((char *)v54, "num_inlier_tracks");
  if (v26 < 0)
  {
    sub_20E860C04(&v49, *(void **)(a2 + 240), *(_QWORD *)(a2 + 248));
  }
  else
  {
    v49 = *(_OWORD *)(a2 + 240);
    v50 = *(_QWORD *)(a2 + 256);
  }
  v53 = *(_QWORD *)(a2 + 296);
  v51 = *(_OWORD *)(a2 + 264);
  v52 = *(_OWORD *)(a2 + 280);
  sub_20FDC325C((void ***)&v76, v54, (uint64_t)&v49);
  if (SHIBYTE(v50) < 0)
    operator delete((void *)v49);
  v27 = *(char *)(a2 + 327);
  v48 = 9;
  strcpy((char *)v47, "lux_level");
  if (v27 < 0)
  {
    sub_20E860C04(v42, *(void **)(a2 + 304), *(_QWORD *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)v42 = *(_OWORD *)(a2 + 304);
    v43 = *(_QWORD *)(a2 + 320);
  }
  v46 = *(_QWORD *)(a2 + 360);
  v44 = *(_OWORD *)(a2 + 328);
  v45 = *(_OWORD *)(a2 + 344);
  sub_20FDC325C((void ***)&v76, v47, (uint64_t)v42);
  if (SHIBYTE(v43) < 0)
    operator delete(v42[0]);
  v28 = *(char *)(a2 + 391);
  v41 = 13;
  strcpy((char *)v40, "device_in_use");
  if (v28 < 0)
  {
    sub_20E860C04(v35, *(void **)(a2 + 368), *(_QWORD *)(a2 + 376));
  }
  else
  {
    *(_OWORD *)v35 = *(_OWORD *)(a2 + 368);
    v36 = *(_QWORD *)(a2 + 384);
  }
  v39 = *(_QWORD *)(a2 + 424);
  v37 = *(_OWORD *)(a2 + 392);
  v38 = *(_OWORD *)(a2 + 408);
  sub_20FDC325C((void ***)&v76, v40, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
  v29 = (void (***)(_QWORD, xpc_object_t *, std::__shared_weak_count_vtbl **))a1[2];
  value = operator new(0x20uLL);
  v34 = xmmword_2102DBFF0;
  strcpy((char *)value, "com.apple.AppleCV3D.SLAM.Reinit");
  (**v29)(v29, &value, &v77);
  if (SHIBYTE(v34) < 0)
    operator delete(value);
  v30 = v78;
  if (v78)
  {
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_20FDC30D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20FDC30E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20FDC30FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20FDC3110(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20FDC3124(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20FDC3138(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20FDC314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    sub_20E86665C(v15 - 64);
    _Unwind_Resume(a1);
  }
  sub_20E86665C(v15 - 64);
  _Unwind_Resume(a1);
}

void sub_20FDC325C(void ***a1, const void **a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  void **v9;
  std::string::value_type *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const void *v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  std::__shared_weak_count_vtbl *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  int v23;
  size_t v24;
  unint64_t v25;
  void **v26;
  std::string::value_type *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  const void *v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  std::__shared_weak_count_vtbl *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  size_t v41;
  unint64_t v42;
  void **v43;
  std::string::value_type *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  const void *v48;
  std::string *v49;
  __int128 v50;
  void **v51;
  uint64_t v52;
  double v53;
  std::__shared_weak_count_vtbl *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  size_t v60;
  unint64_t v61;
  void **v62;
  std::string::value_type *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  const void *v67;
  std::string *v68;
  __int128 v69;
  void **v70;
  uint64_t v71;
  double v72;
  std::__shared_weak_count_vtbl *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  xpc_object_t value;
  std::__shared_weak_count *v79;
  std::string v80;
  void *__p[2];
  int64_t v82;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 9;
  if (v4 + 9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_124;
  v9 = *a1;
  if (v5 >= 0x17)
  {
    v11 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v11 = v5 | 7;
    v12 = v11 + 1;
    v13 = (char *)operator new(v11 + 1);
    v80.__r_.__value_.__l.__size_ = v4 + 9;
    v80.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    v10 = v13 + 9;
    v13[8] = 95;
    *(_QWORD *)v13 = *(_QWORD *)"windowed_";
  }
  else
  {
    *(_OWORD *)&v80.__r_.__value_.__r.__words[1] = 0uLL;
    *((_BYTE *)&v80.__r_.__value_.__s + 23) = v4 + 9;
    v10 = &v80.__r_.__value_.__s.__data_[9];
    v80.__r_.__value_.__s.__data_[8] = 95;
    v80.__r_.__value_.__r.__words[0] = *(_QWORD *)"windowed_";
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v14 = a2;
  else
    v14 = *a2;
  memmove(v10, v14, v4);
LABEL_15:
  v10[v4] = 0;
  v15 = std::string::append(&v80, "_min", 4uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v82 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v82 >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  v18 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a3 + 32));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v18, 0);
  v19 = *v9;
  if (!*v9)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v19 = *v9;
  }
  xpc_dictionary_set_value(v19, (const char *)v17, value);
  v20 = v79;
  if (!v79)
    goto LABEL_25;
  p_shared_owners = (unint64_t *)&v79->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (v22)
  {
LABEL_25:
    if ((SHIBYTE(v82) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_113:
    operator delete(__p[0]);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_114;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(v82) < 0)
    goto LABEL_113;
LABEL_26:
  if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_27;
LABEL_114:
  operator delete(v80.__r_.__value_.__l.__data_);
LABEL_27:
  v23 = *((char *)a2 + 23);
  if (v23 >= 0)
    v24 = *((unsigned __int8 *)a2 + 23);
  else
    v24 = (size_t)a2[1];
  v25 = v24 + 9;
  if (v24 + 9 > 0x7FFFFFFFFFFFFFF7)
LABEL_124:
    sub_20E860B7C();
  v26 = *a1;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v30 = (char *)operator new(v28 + 1);
    v80.__r_.__value_.__l.__size_ = v24 + 9;
    v80.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    v27 = v30 + 9;
    v30[8] = 95;
    *(_QWORD *)v30 = *(_QWORD *)"windowed_";
  }
  else
  {
    *(_OWORD *)&v80.__r_.__value_.__r.__words[1] = 0uLL;
    *((_BYTE *)&v80.__r_.__value_.__s + 23) = v24 + 9;
    v27 = &v80.__r_.__value_.__s.__data_[9];
    v80.__r_.__value_.__s.__data_[8] = 95;
    v80.__r_.__value_.__r.__words[0] = *(_QWORD *)"windowed_";
    if (!v24)
      goto LABEL_41;
  }
  if (v23 >= 0)
    v31 = a2;
  else
    v31 = *a2;
  memmove(v27, v31, v24);
LABEL_41:
  v27[v24] = 0;
  v32 = std::string::append(&v80, "_max", 4uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v82 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (v82 >= 0)
    v34 = __p;
  else
    v34 = (void **)__p[0];
  v35 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a3 + 24));
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v35, 0);
  v36 = *v26;
  if (!*v26)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v36 = *v26;
  }
  xpc_dictionary_set_value(v36, (const char *)v34, value);
  v37 = v79;
  if (!v79)
    goto LABEL_51;
  v38 = (unint64_t *)&v79->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_51:
    if ((SHIBYTE(v82) & 0x80000000) == 0)
      goto LABEL_52;
LABEL_116:
    operator delete(__p[0]);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_117;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  if (SHIBYTE(v82) < 0)
    goto LABEL_116;
LABEL_52:
  if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_53;
LABEL_117:
  operator delete(v80.__r_.__value_.__l.__data_);
LABEL_53:
  v40 = *((char *)a2 + 23);
  if (v40 >= 0)
    v41 = *((unsigned __int8 *)a2 + 23);
  else
    v41 = (size_t)a2[1];
  v42 = v41 + 9;
  if (v41 + 9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_124;
  v43 = *a1;
  if (v42 >= 0x17)
  {
    v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17)
      v45 = v42 | 7;
    v46 = v45 + 1;
    v47 = (char *)operator new(v45 + 1);
    v80.__r_.__value_.__l.__size_ = v41 + 9;
    v80.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    v44 = v47 + 9;
    v47[8] = 95;
    *(_QWORD *)v47 = *(_QWORD *)"windowed_";
  }
  else
  {
    *(_OWORD *)&v80.__r_.__value_.__r.__words[1] = 0uLL;
    *((_BYTE *)&v80.__r_.__value_.__s + 23) = v41 + 9;
    v44 = &v80.__r_.__value_.__s.__data_[9];
    v80.__r_.__value_.__s.__data_[8] = 95;
    v80.__r_.__value_.__r.__words[0] = *(_QWORD *)"windowed_";
    if (!v41)
      goto LABEL_67;
  }
  if (v40 >= 0)
    v48 = a2;
  else
    v48 = *a2;
  memmove(v44, v48, v41);
LABEL_67:
  v44[v41] = 0;
  v49 = std::string::append(&v80, "_mean", 5uLL);
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v82 = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (v82 >= 0)
    v51 = __p;
  else
    v51 = (void **)__p[0];
  v52 = *(_QWORD *)(a3 + 40);
  if (v52 < 1)
    v53 = -1.0;
  else
    v53 = *(double *)(a3 + 48) / (double)v52;
  v54 = (std::__shared_weak_count_vtbl *)xpc_double_create(v53);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v54, 0);
  v55 = *v43;
  if (!*v43)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v55 = *v43;
  }
  xpc_dictionary_set_value(v55, (const char *)v51, value);
  v56 = v79;
  if (!v79)
    goto LABEL_80;
  v57 = (unint64_t *)&v79->__shared_owners_;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (v58)
  {
LABEL_80:
    if ((SHIBYTE(v82) & 0x80000000) == 0)
      goto LABEL_81;
LABEL_119:
    operator delete(__p[0]);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_120;
  }
  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
  std::__shared_weak_count::__release_weak(v56);
  if (SHIBYTE(v82) < 0)
    goto LABEL_119;
LABEL_81:
  if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_82;
LABEL_120:
  operator delete(v80.__r_.__value_.__l.__data_);
LABEL_82:
  v59 = *((char *)a2 + 23);
  if (v59 >= 0)
    v60 = *((unsigned __int8 *)a2 + 23);
  else
    v60 = (size_t)a2[1];
  v61 = v60 + 9;
  if (v60 + 9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_124;
  v62 = *a1;
  if (v61 >= 0x17)
  {
    v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v64 = v61 | 7;
    v65 = v64 + 1;
    v66 = (char *)operator new(v64 + 1);
    v80.__r_.__value_.__l.__size_ = v60 + 9;
    v80.__r_.__value_.__r.__words[2] = v65 | 0x8000000000000000;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
    v63 = v66 + 9;
    v66[8] = 95;
    *(_QWORD *)v66 = *(_QWORD *)"windowed_";
  }
  else
  {
    *(_OWORD *)&v80.__r_.__value_.__r.__words[1] = 0uLL;
    *((_BYTE *)&v80.__r_.__value_.__s + 23) = v60 + 9;
    v63 = &v80.__r_.__value_.__s.__data_[9];
    v80.__r_.__value_.__s.__data_[8] = 95;
    v80.__r_.__value_.__r.__words[0] = *(_QWORD *)"windowed_";
    if (!v60)
      goto LABEL_96;
  }
  if (v59 >= 0)
    v67 = a2;
  else
    v67 = *a2;
  memmove(v63, v67, v60);
LABEL_96:
  v63[v60] = 0;
  v68 = std::string::append(&v80, "_variance", 9uLL);
  v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v82 = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  if (v82 >= 0)
    v70 = __p;
  else
    v70 = (void **)__p[0];
  v71 = *(_QWORD *)(a3 + 40);
  if (v71 < 1)
    v72 = -1.0;
  else
    v72 = *(double *)(a3 + 56) / (double)v71 - *(double *)(a3 + 48) / (double)v71 * (*(double *)(a3 + 48) / (double)v71);
  v73 = (std::__shared_weak_count_vtbl *)xpc_double_create(v72);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v73, 0);
  v74 = *v62;
  if (!*v62)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v74 = *v62;
  }
  xpc_dictionary_set_value(v74, (const char *)v70, value);
  v75 = v79;
  if (!v79)
    goto LABEL_109;
  v76 = (unint64_t *)&v79->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
    if ((SHIBYTE(v82) & 0x80000000) == 0)
    {
LABEL_110:
      if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_123:
      operator delete(v80.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
LABEL_109:
    if ((SHIBYTE(v82) & 0x80000000) == 0)
      goto LABEL_110;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_123;
}

void sub_20FDC3A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDC3AB0(uint64_t *a1, const void *a2, size_t a3, uint64_t a4)
{
  std::__shared_weak_count_vtbl *empty;
  void (***v9)(_QWORD, void **, void **);
  void **v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  void *__dst[2];
  unint64_t v21;
  char v22;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_20FDC5110((std::__shared_weak_count_vtbl **)&v18, empty, 0);
  sub_20FDC44D0(a4, &v18, (uint64_t)__dst);
  if (!v22)
  {
    v16 = sub_20ED3C7D0((uint64_t)__dst);
    sub_20E9F5CE8(v16);
  }
  sub_20FDBC658(*a1, (std::string::size_type)&v18, (std::string::size_type)__dst);
  if (!v22)
  {
    v17 = sub_20ED3C7D0((uint64_t)__dst);
    sub_20E9F5CE8(v17);
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void (***)(_QWORD, void **, void **))a1[2];
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    v10 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)a3;
    v21 = v12 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_10;
  }
  HIBYTE(v21) = a3;
  v10 = __dst;
  if (a3)
LABEL_10:
    memmove(v10, a2, a3);
  *((_BYTE *)v10 + a3) = 0;
  (**v9)(v9, __dst, &v18);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FDC3C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDC3CB0(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count_vtbl *empty;
  void (***v5)(_QWORD, void **, void **);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  void *__p;
  __int128 v14;
  char v15;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_20FDC5110((std::__shared_weak_count_vtbl **)&v11, empty, 0);
  sub_20FDBE0DC(a2, &v11, (uint64_t)&__p);
  if (!v15)
  {
    v9 = sub_20ED3C7D0((uint64_t)&__p);
    sub_20E9F5CE8(v9);
  }
  sub_20FDBC658(*a1, (std::string::size_type)&v11, (std::string::size_type)&__p);
  if (!v15)
  {
    v10 = sub_20ED3C7D0((uint64_t)&__p);
    sub_20E9F5CE8(v10);
  }
  v5 = (void (***)(_QWORD, void **, void **))a1[2];
  __p = operator new(0x30uLL);
  v14 = xmmword_2102DCA00;
  strcpy((char *)__p, "com.apple.AppleCV3D.SLAM.Reinitialization");
  (**v5)(v5, &__p, &v11);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FDC3DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDC3E50(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count_vtbl *empty;
  void (***v5)(_QWORD, void **, void **);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  void *__p;
  __int128 v14;
  char v15;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_20FDC5110((std::__shared_weak_count_vtbl **)&v11, empty, 0);
  sub_20FDBD280(a2, &v11, (uint64_t)&__p);
  if (!v15)
  {
    v9 = sub_20ED3C7D0((uint64_t)&__p);
    sub_20E9F5CE8(v9);
  }
  sub_20FDBC658(*a1, (std::string::size_type)&v11, (std::string::size_type)&__p);
  if (!v15)
  {
    v10 = sub_20ED3C7D0((uint64_t)&__p);
    sub_20E9F5CE8(v10);
  }
  v5 = (void (***)(_QWORD, void **, void **))a1[2];
  __p = operator new(0x28uLL);
  v14 = xmmword_2102E0950;
  strcpy((char *)__p, "com.apple.AppleCV3D.SLAM.LoopClosure");
  (**v5)(v5, &__p, &v11);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FDC3F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDC3FF4(uint64_t *a1, uint64_t *a2)
{
  std::__shared_weak_count_vtbl *empty;
  void (***v5)(_QWORD, void **, void **);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  void *__p;
  __int128 v14;
  char v15;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_20FDC5110((std::__shared_weak_count_vtbl **)&v11, empty, 0);
  sub_20FDBD8B0(a2, &v11, (uint64_t)&__p);
  if (!v15)
  {
    v9 = sub_20ED3C7D0((uint64_t)&__p);
    sub_20E9F5CE8(v9);
  }
  sub_20FDBC658(*a1, (std::string::size_type)&v11, (std::string::size_type)&__p);
  if (!v15)
  {
    v10 = sub_20ED3C7D0((uint64_t)&__p);
    sub_20E9F5CE8(v10);
  }
  v5 = (void (***)(_QWORD, void **, void **))a1[2];
  __p = operator new(0x28uLL);
  v14 = xmmword_2102DC8F0;
  strcpy((char *)__p, "com.apple.AppleCV3D.SLAM.MapLoaded");
  (**v5)(v5, &__p, &v11);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FDC4128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDC4194(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count_vtbl *empty;
  void (***v5)(_QWORD, void **, void **);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  void *__p;
  __int128 v14;
  char v15;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_20FDC5110((std::__shared_weak_count_vtbl **)&v11, empty, 0);
  sub_20FDBDAB4(a2, &v11, (uint64_t)&__p);
  if (!v15)
  {
    v9 = sub_20ED3C7D0((uint64_t)&__p);
    sub_20E9F5CE8(v9);
  }
  sub_20FDBC658(*a1, (std::string::size_type)&v11, (std::string::size_type)&__p);
  if (!v15)
  {
    v10 = sub_20ED3C7D0((uint64_t)&__p);
    sub_20E9F5CE8(v10);
  }
  v5 = (void (***)(_QWORD, void **, void **))a1[2];
  __p = operator new(0x28uLL);
  v14 = xmmword_2102DBA80;
  strcpy((char *)__p, "com.apple.AppleCV3D.SLAM.MapSaved");
  (**v5)(v5, &__p, &v11);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FDC42C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDC4330(uint64_t *a1, uint64_t *a2)
{
  std::__shared_weak_count_vtbl *empty;
  void (***v5)(_QWORD, void **, void **);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  void *__p;
  __int128 v14;
  char v15;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_20FDC5110((std::__shared_weak_count_vtbl **)&v11, empty, 0);
  sub_20FDBD1A8(a2, &v11, (uint64_t)&__p);
  if (!v15)
  {
    v9 = sub_20ED3C7D0((uint64_t)&__p);
    sub_20E9F5CE8(v9);
  }
  sub_20FDBC658(*a1, (std::string::size_type)&v11, (std::string::size_type)&__p);
  if (!v15)
  {
    v10 = sub_20ED3C7D0((uint64_t)&__p);
    sub_20E9F5CE8(v10);
  }
  v5 = (void (***)(_QWORD, void **, void **))a1[2];
  __p = operator new(0x28uLL);
  v14 = xmmword_2102DC8F0;
  strcpy((char *)__p, "com.apple.AppleCV3D.SLAM.DoffEvent");
  (**v5)(v5, &__p, &v11);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FDC4464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E86665C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDC44D0(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10[2];
  char *key[2];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  std::string v24;
  std::string __dst;
  char v26;
  void *v27;
  char v28;
  void *__p;
  char v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD v44[2];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a3 + 120) = 1;
  v10[0] = a3;
  v10[1] = (uint64_t)a2;
  sub_20FDC4994(v10, a1);
  if (!*(_BYTE *)(a3 + 120))
    goto LABEL_39;
  sub_20E89EDB0(a3);
  v6 = *(char *)(a1 + 79);
  if (v6 >= 0)
    v7 = (char *)(a1 + 56);
  else
    v7 = *(char **)(a1 + 56);
  if (v6 >= 0)
    v8 = (char *)*(unsigned __int8 *)(a1 + 79);
  else
    v8 = *(char **)(a1 + 64);
  key[0] = v7;
  key[1] = v8;
  if (*(_BYTE *)(a1 + 48))
  {
    v9 = *a2;
    if (!*a2)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v9 = *a2;
      v7 = key[0];
    }
    if (xpc_dictionary_get_value(v9, v7))
    {
      v44[0] = "Key already contained in the dictionary: ";
      v44[1] = 41;
      v45 = *(_OWORD *)key;
      sub_20E8778D4((uint64_t)v44, (uint64_t)&v46, 0, 0, &v24);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(&__dst, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      else
        __dst = v24;
      v26 = 1;
      LOBYTE(v27) = 0;
      v31 = 0;
      v32 = 1;
      sub_20E89F2F8(0x16u, (__int128 *)&__dst, (uint64_t)&v33);
      v12 = v33;
      LOBYTE(v13) = 0;
      v22 = 0;
      if (v43)
      {
        v15 = 0;
        if (v36)
        {
          v13 = v34;
          v14 = v35;
          v35 = 0;
          v34 = 0uLL;
          v15 = 1;
        }
        LOBYTE(v16) = 0;
        v21 = 0;
        if (v42)
        {
          v17 = v38;
          v16 = v37;
          v37 = 0uLL;
          v18 = v39;
          *(_OWORD *)v19 = v40;
          v20 = v41;
          v38 = 0;
          v40 = 0uLL;
          v41 = 0;
          v21 = 1;
        }
        v22 = 1;
        v23 = 0;
        if (v36 && SHIBYTE(v35) < 0)
          operator delete((void *)v34);
      }
      else
      {
        v23 = 0;
      }
      if (v32)
      {
        if (v31)
        {
          if (v30 < 0)
            operator delete(__p);
          if (v28 < 0)
            operator delete(v27);
        }
        if (v26 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      goto LABEL_38;
    }
    sub_20FDC5338(a2, (const char **)key, (int64_t *)(a1 + 40));
  }
  v23 = 1;
LABEL_38:
  sub_20FDBC8A8(a3, &v12);
  if (!v23 && v22)
  {
    if (v21)
    {
      if (SHIBYTE(v20) < 0)
        operator delete(v19[0]);
      if (SHIBYTE(v17) < 0)
        operator delete((void *)v16);
    }
    if (v15 && SHIBYTE(v14) < 0)
      operator delete((void *)v13);
  }
LABEL_39:
  sub_20FDC4A98(v10, a1 + 80);
  sub_20FDC4E08(v10, a1 + 112);
  sub_20FDC4E08(v10, a1 + 168);
  sub_20FDC4A98(v10, a1 + 224);
  sub_20FDC4A98(v10, a1 + 256);
  sub_20FDC4F0C(v10, a1 + 288);
  sub_20FDC4F0C(v10, a1 + 328);
  sub_20FDC4F0C(v10, a1 + 368);
  sub_20FDC4A98(v10, a1 + 408);
  sub_20FDC4994(v10, a1 + 440);
  sub_20FDC4A98(v10, a1 + 480);
  sub_20FDC4994(v10, a1 + 512);
  sub_20FDC4994(v10, a1 + 552);
  sub_20FDC4994(v10, a1 + 592);
  sub_20FDC4994(v10, a1 + 632);
  sub_20FDC4994(v10, a1 + 672);
  sub_20FDC4A98(v10, a1 + 712);
  sub_20FDC4A98(v10, a1 + 744);
  sub_20FDC4994(v10, a1 + 776);
}

void sub_20FDC48E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  uint64_t v51;

  if (a50 < 0)
  {
    operator delete(__p);
    sub_20E89ED1C(v51);
    _Unwind_Resume(a1);
  }
  sub_20E89ED1C(v51);
  _Unwind_Resume(a1);
}

void sub_20FDC4994(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void **v5;
  const char *v6;
  const char *v7;
  const char *v8[2];
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = *a1;
  if (*(_BYTE *)(v3 + 120))
  {
    sub_20E89EDB0(v3);
    v5 = (void **)a1[1];
    v6 = *(const char **)(a2 + 16);
    v7 = (const char *)*(unsigned __int8 *)(a2 + 39);
    if ((char)v7 < 0)
      v7 = *(const char **)(a2 + 24);
    else
      v6 = (const char *)(a2 + 16);
    v8[0] = v6;
    v8[1] = v7;
    if (*(_BYTE *)(a2 + 8))
      sub_20FDBD5D4(v5, v8, (double *)a2, (uint64_t)&v9);
    else
      v19 = 1;
    sub_20FDBC8A8(*a1, &v9);
    if (!v19)
    {
      if (v18)
      {
        if (v17)
        {
          if (v16 < 0)
            operator delete(__p);
          if (v14 < 0)
            operator delete(v13);
        }
        if (v12)
        {
          if (v11 < 0)
            operator delete(v10);
        }
      }
    }
  }
}

void sub_20FDC4A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E89ED1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDC4A98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  xpc_object_t *v5;
  int v6;
  const char *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  std::string v22;
  std::string __dst;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  _QWORD v42[2];
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (!*(_BYTE *)(v3 + 120))
    return;
  sub_20E89EDB0(v3);
  v5 = (xpc_object_t *)a1[1];
  v6 = *(char *)(a2 + 31);
  if (v6 >= 0)
    v7 = (const char *)(a2 + 8);
  else
    v7 = *(const char **)(a2 + 8);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 31);
  else
    v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v9 = v7;
  *((_QWORD *)&v9 + 1) = v8;
  if (*(_BYTE *)(a2 + 1))
  {
    if (*v5)
    {
      if (xpc_dictionary_get_value(*v5, v7))
      {
LABEL_11:
        v42[0] = "Key already contained in the dictionary: ";
        v42[1] = 41;
        v43 = v9;
        sub_20E8778D4((uint64_t)v42, (uint64_t)&v44, 0, 0, &v22);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          sub_20E860C04(&__dst, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        else
          __dst = v22;
        v24 = 1;
        LOBYTE(v25) = 0;
        v29 = 0;
        v30 = 1;
        sub_20E89F2F8(0x16u, (__int128 *)&__dst, (uint64_t)&v31);
        v10 = v31;
        LOBYTE(v11) = 0;
        v20 = 0;
        if (v41)
        {
          v13 = 0;
          if (v34)
          {
            v11 = v32;
            v12 = v33;
            v33 = 0;
            v32 = 0uLL;
            v13 = 1;
          }
          LOBYTE(v14) = 0;
          v19 = 0;
          if (v40)
          {
            v15 = v36;
            v14 = v35;
            v35 = 0uLL;
            v16 = v37;
            *(_OWORD *)v17 = v38;
            v18 = v39;
            v36 = 0;
            v38 = 0uLL;
            v39 = 0;
            v19 = 1;
          }
          v20 = 1;
          v21 = 0;
          if (v34 && SHIBYTE(v33) < 0)
            operator delete((void *)v32);
        }
        else
        {
          v21 = 0;
        }
        if (v30)
        {
          if (v29)
          {
            if (v28 < 0)
              operator delete(__p);
            if (v26 < 0)
              operator delete(v25);
          }
          if (v24 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        goto LABEL_38;
      }
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (xpc_dictionary_get_value(*v5, v7))
        goto LABEL_11;
    }
    sub_20FDC5578(v5, (const char **)&v9, (BOOL *)a2);
  }
  v21 = 1;
LABEL_38:
  sub_20FDBC8A8(*a1, &v10);
  if (!v21 && v20)
  {
    if (v19)
    {
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      if (SHIBYTE(v15) < 0)
        operator delete((void *)v14);
    }
    if (v13)
    {
      if (SHIBYTE(v12) < 0)
        operator delete((void *)v11);
    }
  }
}

void sub_20FDC4DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDC4DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E89ED1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDC4E08(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void **v5;
  const char *v6;
  const char *v7;
  const char *v8[2];
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = *a1;
  if (*(_BYTE *)(v3 + 120))
  {
    sub_20E89EDB0(v3);
    v5 = (void **)a1[1];
    v6 = *(const char **)(a2 + 32);
    v7 = (const char *)*(unsigned __int8 *)(a2 + 55);
    if ((char)v7 < 0)
      v7 = *(const char **)(a2 + 40);
    else
      v6 = (const char *)(a2 + 32);
    v8[0] = v6;
    v8[1] = v7;
    if (*(_BYTE *)(a2 + 24))
      sub_20FDBCA0C(v5, v8, (char *)a2, (uint64_t)&v9);
    else
      v19 = 1;
    sub_20FDBC8A8(*a1, &v9);
    if (!v19)
    {
      if (v18)
      {
        if (v17)
        {
          if (v16 < 0)
            operator delete(__p);
          if (v14 < 0)
            operator delete(v13);
        }
        if (v12)
        {
          if (v11 < 0)
            operator delete(v10);
        }
      }
    }
  }
}

void sub_20FDC4EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E89ED1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDC4F0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void **v5;
  const char *v6;
  const char *v7;
  const char *v8[2];
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = *a1;
  if (*(_BYTE *)(v3 + 120))
  {
    sub_20E89EDB0(v3);
    v5 = (void **)a1[1];
    v6 = *(const char **)(a2 + 16);
    v7 = (const char *)*(unsigned __int8 *)(a2 + 39);
    if ((char)v7 < 0)
      v7 = *(const char **)(a2 + 24);
    else
      v6 = (const char *)(a2 + 16);
    v8[0] = v6;
    v8[1] = v7;
    if (*(_BYTE *)(a2 + 8))
      sub_20FDBDE00(v5, v8, (uint64_t *)a2, (uint64_t)&v9);
    else
      v19 = 1;
    sub_20FDBC8A8(*a1, &v9);
    if (!v19)
    {
      if (v18)
      {
        if (v17)
        {
          if (v16 < 0)
            operator delete(__p);
          if (v14 < 0)
            operator delete(v13);
        }
        if (v12)
        {
          if (v11 < 0)
            operator delete(v10);
        }
      }
    }
  }
}

void sub_20FDC4FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E89ED1C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDC5010(_QWORD *a1, int a2)
{
  _QWORD *result;
  const char *v4;
  const char *v5;

  switch(a2)
  {
    case 0:
      sub_20E86A980(a1, (uint64_t)"None", 4);
      return a1;
    case 1:
      sub_20E86A980(a1, (uint64_t)"KeyframeSampling", 16);
      return a1;
    case 2:
      v4 = "PnPPoseEstimation";
      goto LABEL_8;
    case 3:
      v5 = "CovarianceComputation";
      goto LABEL_10;
    case 4:
      v4 = "VerificationCheck";
LABEL_8:
      sub_20E86A980(a1, (uint64_t)v4, 17);
      return a1;
    case 5:
      v5 = "AllKeyframesDiscarded";
LABEL_10:
      sub_20E86A980(a1, (uint64_t)v5, 21);
      result = a1;
      break;
    default:
      sub_20E86A980(a1, (uint64_t)"Unknown", 7);
      result = a1;
      break;
  }
  return result;
}

std::__shared_weak_count_vtbl **sub_20FDC5110(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *object, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20FDBEFD0(&v12, object);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = object;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA071A0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = object;
    v13 = v5;
    *a1 = object;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20FDC51EC(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    xpc_release(v1);
  __cxa_rethrow();
}

void sub_20FDC5204(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20FDC5218(void **a1, const char **a2, uint64_t *a3)
{
  std::__shared_weak_count_vtbl *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  xpc_object_t value;
  std::__shared_weak_count *v11;

  v5 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(*a3);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v5, 0);
  v6 = *a1;
  if (!*a1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  xpc_dictionary_set_value(v6, *a2, value);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FDC52F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDC5338(void **a1, const char **a2, int64_t *a3)
{
  std::__shared_weak_count_vtbl *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  xpc_object_t value;
  std::__shared_weak_count *v11;

  v5 = (std::__shared_weak_count_vtbl *)xpc_int64_create(*a3);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v5, 0);
  v6 = *a1;
  if (!*a1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  xpc_dictionary_set_value(v6, *a2, value);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FDC5414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDC5458(void **a1, const char **a2, double *a3)
{
  std::__shared_weak_count_vtbl *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  xpc_object_t value;
  std::__shared_weak_count *v11;

  v5 = (std::__shared_weak_count_vtbl *)xpc_double_create(*a3);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v5, 0);
  v6 = *a1;
  if (!*a1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  xpc_dictionary_set_value(v6, *a2, value);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FDC5534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDC5578(void **a1, const char **a2, BOOL *a3)
{
  std::__shared_weak_count_vtbl *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  xpc_object_t value;
  std::__shared_weak_count *v11;

  v5 = (std::__shared_weak_count_vtbl *)xpc_BOOL_create(*a3);
  sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v5, 0);
  v6 = *a1;
  if (!*a1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  xpc_dictionary_set_value(v6, *a2, value);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FDC5654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDC5698(void **a1, const char **a2, char *string)
{
  std::__shared_weak_count_vtbl *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  xpc_object_t value;
  std::__shared_weak_count *v12;

  if (string[23] < 0 && (string = *(char **)string) == 0)
  {
    v10 = (std::__shared_weak_count_vtbl *)xpc_null_create();
    sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v10, 0);
    v6 = *a1;
    if (*a1)
      goto LABEL_6;
  }
  else
  {
    v5 = (std::__shared_weak_count_vtbl *)xpc_string_create(string);
    sub_20FDC0990((std::__shared_weak_count_vtbl **)&value, v5, 0);
    v6 = *a1;
    if (*a1)
      goto LABEL_6;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v6 = *a1;
LABEL_6:
  xpc_dictionary_set_value(v6, *a2, value);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FDC57A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20FDC57E8(float32x2_t **a1, float *a2, char a3, float a4)
{
  float32x2_t *v4;
  float32x2_t *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  _BOOL8 result;
  float32x2_t v28;
  uint64_t v29;
  float32x2_t v30;
  uint64_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float v35;
  BOOL v36;
  char v37;
  double v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  double v45;
  double v46;
  char v47;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5 - *a1;
  switch(v6)
  {
    case 0:
      return 0;
    case 2:
      if ((a3 & 1) != 0)
        return 0;
      v16 = *v4;
      v17 = v4[1];
      v18 = vsub_f32(v17, *v4);
      LODWORD(v19) = HIDWORD(*(unint64_t *)v4);
      v20 = *a2;
      v21 = a2[1];
      v22 = v17.f32[1];
      v23 = (float)((float)((float)(v19 - v21) * v18.f32[0])
                  - (float)((float)(v17.f32[1] - v19) * (float)(COERCE_FLOAT(*v4) - *a2)))
          / sqrtf(vmla_lane_f32(vmul_f32(v18, v18), (float32x2_t)vdup_lane_s32((int32x2_t)v18, 1), v18, 1).f32[0]);
      v24 = v23 == 0.0;
      if (v23 < 0.0)
        v23 = 0.0 - v23;
      if (!v24 && v23 > a4)
        return 0;
      if (v16.f32[0] == v20)
      {
        if ((float)(v19 - a4) <= v21 && v21 <= (float)(v17.f32[1] + a4))
          return 1;
        v20 = a2[1];
        if ((float)(v19 + a4) < v21)
          return 0;
      }
      else
      {
        v22 = v17.f32[0];
        if ((float)(v16.f32[0] - a4) <= v20 && v20 <= (float)(v17.f32[0] + a4))
          return 1;
        if ((float)(v16.f32[0] + a4) < v20)
          return 0;
      }
      return v20 >= (float)(v22 - a4);
    case 1:
      if ((a3 & 1) == 0)
      {
        v7 = *a2;
        v8 = v4->f32[0];
        if (*a2 == v4->f32[0])
          goto LABEL_9;
        v9 = v7 - v8;
        v10 = v8 - v7;
        if (*a2 >= v4->f32[0])
          v10 = v9;
        if (v10 <= a4)
        {
LABEL_9:
          v11 = a2[1];
          v12 = v4->f32[1];
          v13 = v11 < v12;
          if (v11 == v12)
            return 1;
          v14 = v11 - v12;
          v15 = v12 - v11;
          if (!v13)
            v15 = v14;
          if (v15 <= a4)
            return 1;
        }
      }
      return 0;
  }
  if (v5 == v4)
    return 1;
  v28 = *(float32x2_t *)a2;
  v29 = v5 - *a1;
  v30 = v4[v6 - 1];
  if ((a3 & 1) != 0)
  {
    v31 = v29 - 1;
    do
    {
      v32 = v30;
      v33 = *v4++;
      v30 = v33;
      v34 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v32, v28)), vsub_f32(v33, v32));
      LODWORD(v35) = vsub_f32(v34, (float32x2_t)vdup_lane_s32((int32x2_t)v34, 1)).u32[0];
      v36 = v31-- != 0;
      v37 = v36;
      result = v35 < 0.0;
    }
    while (v35 < 0.0 && (v37 & 1) != 0);
  }
  else
  {
    v38 = a4;
    v39 = v29 - 1;
    do
    {
      v40 = v30;
      v41 = *v4++;
      v30 = v41;
      v42 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v40, v28));
      v43 = vsub_f32(v41, v40);
      v44 = vmul_f32(v42, v43);
      v45 = vsub_f32(v44, (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1)).f32[0];
      v46 = v38 * sqrtf(vmla_lane_f32(vmul_f32(v43, v43), (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1), v43, 1).f32[0]);
      v36 = v39-- != 0;
      v47 = v36;
      result = v46 >= v45;
    }
    while (v46 >= v45 && (v47 & 1) != 0);
  }
  return result;
}

void sub_20FDC59E8(unint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float *v4;
  float32x2_t *v5;
  float32x2_t *v6;
  uint64_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float *v10;
  uint64_t v11;
  float32x2_t *v12;
  float v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float32x2_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  float32x2_t *i;
  float32x2_t v31;
  char *v32;
  float32x2_t v33;
  __int32 v34;
  float32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  float32x2_t *v38;
  float32x2_t *v39;
  float32x2_t *v40;
  float32x2_t *v41;
  float32x2_t v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float v46;
  float v47;
  float v48;
  __int32 v49;
  float v50;
  BOOL v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float32x2_t *v56;
  unint64_t v57;
  float32x2_t *v58;
  float32x2_t *v59;
  float32x2_t v60;
  float32x2_t *v61;
  unint64_t v62;
  float32x2_t v63;
  float32x2_t *v64;
  float32x2_t v65;
  float v66;
  float32x2_t v67;
  float32x2_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  float32x2_t *v75;
  uint64_t v76;
  int64_t v77;
  unint64_t v78;
  float32x2_t *v79;
  float32x2_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  float32x2_t *v85;
  uint64_t v86;
  __int128 v87;
  float32x2_t *v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t *v91;
  float32x2_t v92;

  if (!a1)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v4 = (float *)a2;
  v5 = a2;
  if (a1 != 1)
  {
    v6 = a2 + 1;
    v7 = 8 * a1 - 8;
    v5 = a2;
    do
    {
      v8 = v5;
      v9 = vsub_f32(*v6, *v5);
      if (v9.f32[0] <= 0.0)
      {
        v5 = v6;
        if (v9.f32[0] >= 0.0)
        {
          if (v9.f32[1] >= 0.0)
            v5 = v8;
          else
            v5 = v6;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if (a1 > 0x1555555555555555)
      sub_20E867F44();
  }
  v10 = (float *)&a2[a1];
  v92 = *v5;
  v11 = 12 * a1;
  v12 = (float32x2_t *)operator new(12 * a1);
  v13 = v92.f32[0];
  v14 = v12;
  v15 = (float32x2_t *)((char *)v12 + v11);
  v16 = v12;
  v91 = (float32x2_t *)v4;
  do
  {
    while (1)
    {
      v18 = *v4;
      v17 = v4[1];
      if (v13 != *v4)
      {
        v19 = v13 - v18;
        v20 = v18 - v13;
        if (v13 < *v4)
          v19 = v18 - v13;
        if (v19 > 0.000001)
        {
          v21 = v17 - v92.f32[1];
          goto LABEL_24;
        }
      }
      v22 = v92.f32[1] < v17;
      if (v92.f32[1] != v17)
      {
        v23 = v92.f32[1] - v17;
        v21 = v17 - v92.f32[1];
        if (v22)
          v23 = v21;
        if (v23 > 0.000001)
          break;
      }
      v24 = -3.4028e38;
      v25 = *(float32x2_t *)v4;
      if (v16 >= v15)
        goto LABEL_27;
LABEL_13:
      *v16 = v25;
      v16[1].f32[0] = v24;
      v16 = (float32x2_t *)((char *)v16 + 12);
      v4 += 2;
      if (v4 == v10)
        goto LABEL_39;
    }
    v20 = v18 - v13;
LABEL_24:
    v24 = atan2f(v21, v20);
    v13 = v92.f32[0];
    v25 = *(float32x2_t *)v4;
    if (v16 < v15)
      goto LABEL_13;
LABEL_27:
    v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v14) >> 2) + 1;
    if (v26 > 0x1555555555555555)
      sub_20E867F44();
    if (0x5555555555555556 * (((char *)v15 - (char *)v14) >> 2) > v26)
      v26 = 0x5555555555555556 * (((char *)v15 - (char *)v14) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v27 = 0x1555555555555555;
    else
      v27 = v26;
    if (v27 > 0x1555555555555555)
      sub_20E877A38();
    v28 = (char *)operator new(12 * v27);
    v29 = &v28[4 * (((char *)v16 - (char *)v14) >> 2)];
    *(float32x2_t *)v29 = v25;
    *((float *)v29 + 2) = v24;
    for (i = (float32x2_t *)v29; v16 != v14; i[1].i32[0] = v16[1].i32[0])
    {
      v31 = *(float32x2_t *)((char *)v16 - 12);
      v16 = (float32x2_t *)((char *)v16 - 12);
      *(float32x2_t *)((char *)i - 12) = v31;
      i = (float32x2_t *)((char *)i - 12);
    }
    v15 = (float32x2_t *)&v28[12 * v27];
    v16 = (float32x2_t *)(v29 + 12);
    if (v14)
      operator delete(v14);
    v14 = i;
    v13 = v92.f32[0];
    v4 += 2;
  }
  while (v4 != v10);
LABEL_39:
  if (v5 != v91)
  {
    v32 = (char *)v14 + 12 * (v5 - v91);
    v33 = *v14;
    v34 = v14[1].i32[0];
    *v14 = *(float32x2_t *)v32;
    v14[1].i32[0] = *((_DWORD *)v32 + 2);
    *(float32x2_t *)v32 = v33;
    *((_DWORD *)v32 + 2) = v34;
  }
  v35 = (float32x2_t *)((char *)v14 + 12);
  v36 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)&v14[1].i32[1]) >> 2));
  if (v16 == (float32x2_t *)&v14[1].i32[1])
    v37 = 0;
  else
    v37 = v36;
  sub_20FDC6B64((float *)&v14[1] + 1, (float *)v16, v37, 1);
  v38 = v14;
  if (v16 != v35)
  {
    v38 = v14;
    do
    {
      v39 = v35;
      v40 = (float32x2_t *)((char *)v35 + 12);
      if (&v35[1].i32[1] == (__int32 *)v16)
      {
        v35 = v16;
        v47 = v39->f32[0];
        v46 = v39->f32[1];
        v48 = v39->f32[0];
        v49 = v39[1].i32[0];
        v50 = v38->f32[0];
        v51 = v38->f32[0] < v39->f32[0];
        if (v38->f32[0] == v39->f32[0])
          goto LABEL_65;
      }
      else
      {
        v35 = (float32x2_t *)((char *)v35 + 12);
        while ((float)(v35[1].f32[0] - v39[1].f32[0]) <= 0.000004)
        {
          v35 = (float32x2_t *)((char *)v35 + 12);
          if (v35 == v16)
          {
            v35 = v16;
            break;
          }
        }
        if (v39 != v35 && v40 != v35)
        {
          v41 = v40;
          do
          {
            v42 = vsub_f32(*v39, v92);
            v43 = vmla_lane_f32(vmul_f32(v42, v42), (float32x2_t)vdup_lane_s32((int32x2_t)v42, 1), v42, 1).f32[0];
            v44 = *v41;
            v41 = (float32x2_t *)((char *)v41 + 12);
            v45 = vsub_f32(v44, v92);
            if (v43 < vmla_lane_f32(vmul_f32(v45, v45), (float32x2_t)vdup_lane_s32((int32x2_t)v45, 1), v45, 1).f32[0])
              v39 = v40;
            v40 = v41;
          }
          while (v41 != v35);
        }
        v47 = v39->f32[0];
        v46 = v39->f32[1];
        v48 = v39->f32[0];
        v49 = v39[1].i32[0];
        v50 = v38->f32[0];
        v51 = v38->f32[0] < v39->f32[0];
        if (v38->f32[0] == v39->f32[0])
        {
LABEL_65:
          v54 = v38->f32[1];
          if (v54 == v46)
            continue;
          v55 = v46 - v54;
          if (v54 >= v46)
            v55 = v54 - v46;
          if (v55 <= 0.000001)
            continue;
          goto LABEL_46;
        }
      }
      v52 = v50 - v48;
      v53 = v48 - v50;
      if (!v51)
        v53 = v52;
      if (v53 <= 0.000001)
        goto LABEL_65;
LABEL_46:
      v38[1].f32[1] = v47;
      v38[2].f32[0] = v46;
      v38 = (float32x2_t *)((char *)v38 + 12);
      v38[1].i32[0] = v49;
    }
    while (v35 != v16);
  }
  v56 = (float32x2_t *)((char *)v38 + 12);
  if (v56 == v16)
  {
    v56 = v16;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v16 == v14)
      goto LABEL_118;
  }
  else
  {
    v16 = v56;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v56 == v14)
      goto LABEL_118;
  }
  v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v14) >> 2);
  if (v57 >> 61)
    sub_20E969238();
  v58 = (float32x2_t *)operator new(0x5555555555555558 * (((char *)v56 - (char *)v14) >> 2));
  *(_QWORD *)a3 = v58;
  *(_QWORD *)(a3 + 8) = v58;
  *(_QWORD *)(a3 + 16) = &v58[v57];
  v59 = v14;
  while (1)
  {
LABEL_75:
    v61 = *(float32x2_t **)a3;
    v62 = (unint64_t)v58 - *(_QWORD *)a3;
    if (v62 >= 9)
    {
      v63 = *v59;
      v64 = v58 - 1;
      while (1)
      {
        v65 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v63, *v64)), vsub_f32(*v64, v64[-1]));
        v66 = vsub_f32(v65, (float32x2_t)vdup_lane_s32((int32x2_t)v65, 1)).f32[0];
        if (v66 > 0.0)
          break;
        if (v66 < 0.0
          || (v67 = vsub_f32(*v64, v64[-1]),
              v68 = vsub_f32(*v59, *v64),
              vmla_lane_f32(vmul_f32(v67, v68), (float32x2_t)vdup_lane_s32((int32x2_t)v68, 1), v67, 1).f32[0] >= 0.0))
        {
          *(_QWORD *)(a3 + 8) = v64--;
          v62 -= 8;
          --v58;
          if (v62 > 8)
            continue;
        }
        v58 = v64 + 1;
        break;
      }
    }
    v69 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v58 >= v69)
      break;
    v60 = *v59;
    v59 = (float32x2_t *)((char *)v59 + 12);
    *v58++ = v60;
    *(_QWORD *)(a3 + 8) = v58;
    if (v59 == v16)
      goto LABEL_112;
  }
  v70 = v58 - v61;
  v71 = v70 + 1;
  if ((unint64_t)(v70 + 1) >> 61)
    sub_20E969238();
  v72 = v69 - (_QWORD)v61;
  if (v72 >> 2 > v71)
    v71 = v72 >> 2;
  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
    v73 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v73 = v71;
  if (v73)
  {
    if (v73 >> 61)
      sub_20E877A38();
    v74 = operator new(8 * v73);
    v75 = (float32x2_t *)&v74[8 * v70];
    *v75 = *v59;
    v76 = (uint64_t)&v75[1];
    v77 = (char *)v58 - (char *)v61;
    if (v58 == v61)
    {
LABEL_92:
      *(_QWORD *)a3 = v75;
      *(_QWORD *)(a3 + 8) = v76;
      *(_QWORD *)(a3 + 16) = &v74[8 * v73];
      if (v61)
        goto LABEL_93;
      goto LABEL_94;
    }
  }
  else
  {
    v74 = 0;
    v75 = (float32x2_t *)(8 * v70);
    *(float32x2_t *)(8 * v70) = *v59;
    v76 = 8 * v70 + 8;
    v77 = (char *)v58 - (char *)v61;
    if (v58 == v61)
      goto LABEL_92;
  }
  v78 = v77 - 8;
  if (v78 < 0x168)
  {
    v79 = v58;
    goto LABEL_99;
  }
  v81 = ((char *)&v58[-1] - (char *)v61) & 0xFFFFFFFFFFFFFFF8;
  if (&v74[(char *)v58 - (char *)v61 - 8 - v81] > &v74[(char *)v58 - (char *)v61 - 8])
  {
    v79 = v58;
    goto LABEL_99;
  }
  if ((float32x2_t *)((char *)&v58[-1] - v81) > &v58[-1])
  {
    v79 = v58;
    goto LABEL_99;
  }
  if ((unint64_t)((char *)v61 - v74) < 0x20)
  {
    v79 = v58;
    goto LABEL_99;
  }
  v82 = (v78 >> 3) + 1;
  v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
  v79 = &v58[v83 / 0xFFFFFFFFFFFFFFF8];
  v75 = (float32x2_t *)((char *)v75 - v83);
  v84 = &v74[8 * v70 - 16];
  v85 = v58 - 2;
  v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v87 = *(_OWORD *)v85->f32;
    *(v84 - 1) = *(_OWORD *)v85[-2].f32;
    *v84 = v87;
    v84 -= 2;
    v85 -= 4;
    v86 -= 4;
  }
  while (v86);
  if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
  {
    do
    {
LABEL_99:
      v80 = v79[-1];
      --v79;
      v75[-1] = v80;
      --v75;
    }
    while (v79 != v61);
  }
  v61 = *(float32x2_t **)a3;
  *(_QWORD *)a3 = v75;
  *(_QWORD *)(a3 + 8) = v76;
  *(_QWORD *)(a3 + 16) = &v74[8 * v73];
  if (v61)
LABEL_93:
    operator delete(v61);
LABEL_94:
  v58 = (float32x2_t *)v76;
  *(_QWORD *)(a3 + 8) = v76;
  v59 = (float32x2_t *)((char *)v59 + 12);
  if (v59 != v16)
    goto LABEL_75;
LABEL_112:
  if ((unint64_t)v58 - *(_QWORD *)a3 > 0x18)
  {
    v89 = v58[-1];
    v88 = v58 - 1;
    v90 = vmul_f32(vsub_f32(v89, v88[-1]), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(**(float32x2_t **)a3, v89)));
    if (vsub_f32(v90, (float32x2_t)vdup_lane_s32((int32x2_t)v90, 1)).f32[0] <= 0.0)
      *(_QWORD *)(a3 + 8) = v88;
  }
LABEL_118:
  if (v14)
    operator delete(v14);
}

void sub_20FDC61B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  if (v2)
    operator delete(v2);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FDC6204(float64x2_t **a1, double *a2, char a3, double a4)
{
  float64x2_t *v4;
  float64x2_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  double v19;
  double v20;
  double v21;
  double v22;
  double v27;
  _BOOL8 result;
  float64x2_t v32;
  float64x2_t v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int8x16_t v37;
  float64x2_t v38;
  double v39;
  char v40;
  float64x2_t v41;
  float64x2_t v42;
  int8x16_t v43;
  float64x2_t v45;
  double v46;
  double v49;
  char v50;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5 - *a1;
  switch(v6)
  {
    case 0:
      return 0;
    case 2:
      if ((a3 & 1) != 0)
        return 0;
      v17 = *v4;
      v16 = v4[1];
      _Q7 = vsubq_f64(v16, *v4);
      v19 = v4->f64[1];
      v21 = *a2;
      v20 = a2[1];
      v22 = v4[1].f64[1];
      _D18 = _Q7.f64[1];
      __asm { FMLA            D17, D18, V7.D[1] }
      v27 = ((v19 - v20) * _Q7.f64[0] - (v22 - v19) * (v4->f64[0] - *a2)) / sqrt(_D17);
      _ZF = v27 == 0.0;
      if (v27 < 0.0)
        v27 = 0.0 - v27;
      if (!_ZF && v27 > a4)
        return 0;
      if (v17.f64[0] == v21)
      {
        if (v19 - a4 <= v20 && v20 <= v22 + a4)
          return 1;
        if (v19 + a4 < v20)
          return 0;
      }
      else
      {
        if (v17.f64[0] - a4 <= v21 && v21 <= v16.f64[0] + a4)
          return 1;
        v22 = v4[1].f64[0];
        v20 = *a2;
        if (v17.f64[0] + a4 < v21)
          return 0;
      }
      return v20 >= v22 - a4;
    case 1:
      if ((a3 & 1) == 0)
      {
        v7 = *a2;
        v8 = v4->f64[0];
        if (*a2 == v4->f64[0])
          goto LABEL_9;
        v9 = v7 - v8;
        v10 = v8 - v7;
        if (*a2 >= v4->f64[0])
          v10 = v9;
        if (v10 <= a4)
        {
LABEL_9:
          v11 = a2[1];
          v12 = v4->f64[1];
          _NF = v11 < v12;
          if (v11 == v12)
            return 1;
          v14 = v11 - v12;
          v15 = v12 - v11;
          if (!_NF)
            v15 = v14;
          if (v15 <= a4)
            return 1;
        }
      }
      return 0;
  }
  if (v5 == v4)
    return 1;
  v32 = *(float64x2_t *)a2;
  v33 = v4[v6 - 1];
  v34 = v5 - *a1 - 1;
  if ((a3 & 1) != 0)
  {
    do
    {
      v35 = v33;
      v36 = *v4++;
      v33 = v36;
      v37 = (int8x16_t)vsubq_f64(v35, v32);
      v38 = vmulq_f64((float64x2_t)vextq_s8(v37, v37, 8uLL), vsubq_f64(v36, v35));
      *(_QWORD *)&v39 = *(_OWORD *)&vsubq_f64(v38, (float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1));
      _CF = v34-- != 0;
      v40 = _CF;
      result = v39 < 0.0;
    }
    while (v39 < 0.0 && (v40 & 1) != 0);
  }
  else
  {
    do
    {
      v41 = v33;
      v42 = *v4++;
      v33 = v42;
      v43 = (int8x16_t)vsubq_f64(v41, v32);
      _Q3 = vsubq_f64(v42, v41);
      v45 = vmulq_f64((float64x2_t)vextq_s8(v43, v43, 8uLL), _Q3);
      *(_QWORD *)&v46 = *(_OWORD *)&vsubq_f64(v45, (float64x2_t)vdupq_laneq_s64((int64x2_t)v45, 1));
      _D6 = _Q3.f64[1];
      __asm { FMLA            D5, D6, V3.D[1] }
      v49 = sqrt(_D5) * a4;
      _CF = v34-- != 0;
      v50 = _CF;
      result = v46 <= v49;
    }
    while (v46 <= v49 && (v50 & 1) != 0);
  }
  return result;
}

void sub_20FDC63F0(unint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  double *v4;
  float64x2_t *v5;
  float64x2_t *v6;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  double *f64;
  uint64_t v11;
  char *v12;
  double v13;
  char *v14;
  char *v15;
  float64x2_t *v16;
  float64x2_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24;
  long double v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  float64x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  double *v37;
  float64x2_t *v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t v46;
  double v49;
  __int128 v50;
  double v51;
  BOOL v52;
  double v53;
  double v54;
  double v55;
  BOOL v56;
  double v57;
  double v58;
  double *v59;
  unint64_t v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t *v63;
  unint64_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  int8x16_t v67;
  float64x2_t v68;
  double v69;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  float64x2_t *v79;
  uint64_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  int8x16_t v83;
  float64x2_t v84;
  float64x2_t *v85;
  float64x2_t v86;
  __int128 v87;

  if (!a1)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v4 = (double *)a2;
  v5 = a2;
  if (a1 != 1)
  {
    v6 = a2 + 1;
    v7 = 16 * a1 - 16;
    v5 = a2;
    do
    {
      v8 = v5;
      v9 = vsubq_f64(*v6, *v5);
      if (v9.f64[0] <= 0.0)
      {
        v5 = v6;
        if (v9.f64[0] >= 0.0)
        {
          if (v9.f64[1] >= 0.0)
            v5 = v8;
          else
            v5 = v6;
        }
      }
      ++v6;
      v7 -= 16;
    }
    while (v7);
    if (a1 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
  }
  f64 = a2[a1].f64;
  v86 = *v5;
  v11 = 24 * a1;
  v12 = (char *)operator new(24 * a1);
  v13 = v86.f64[0];
  v14 = v12;
  v15 = &v12[v11];
  v16 = (float64x2_t *)v12;
  v85 = (float64x2_t *)v4;
  do
  {
    while (1)
    {
      v19 = *v4;
      v18 = v4[1];
      if (v13 != *v4)
      {
        v20 = v13 - v19;
        v21 = v19 - v13;
        if (v13 < *v4)
          v20 = v19 - v13;
        if (v20 > 0.00000001)
        {
          v22 = v18 - v86.f64[1];
          goto LABEL_24;
        }
      }
      _NF = v86.f64[1] < v18;
      if (v86.f64[1] != v18)
      {
        v24 = v86.f64[1] - v18;
        v22 = v18 - v86.f64[1];
        if (_NF)
          v24 = v22;
        if (v24 > 0.00000001)
          break;
      }
      v25 = -1.79769313e308;
      if (v16 >= (float64x2_t *)v15)
        goto LABEL_27;
LABEL_13:
      v17 = *(float64x2_t *)v4;
      v4 += 2;
      *v16 = v17;
      v16[1].f64[0] = v25;
      v16 = (float64x2_t *)((char *)v16 + 24);
      if (v4 == f64)
        goto LABEL_43;
    }
    v21 = v19 - v13;
LABEL_24:
    v25 = atan2(v22, v21);
    v13 = v86.f64[0];
    if (v16 < (float64x2_t *)v15)
      goto LABEL_13;
LABEL_27:
    v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - v14) >> 3) + 1;
    if (v26 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    if (0x5555555555555556 * ((v15 - v14) >> 3) > v26)
      v26 = 0x5555555555555556 * ((v15 - v14) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3) >= 0x555555555555555)
      v27 = 0xAAAAAAAAAAAAAAALL;
    else
      v27 = v26;
    if (v27 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v28 = (char *)operator new(24 * v27);
    v29 = &v28[8 * (((char *)v16 - v14) >> 3)];
    *(_OWORD *)v29 = *(_OWORD *)v4;
    *((long double *)v29 + 2) = v25;
    if (v16 == (float64x2_t *)v14)
    {
      v31 = &v28[8 * (((char *)v16 - v14) >> 3)];
      v15 = &v28[24 * v27];
      v16 = (float64x2_t *)(v29 + 24);
      if (v14)
        goto LABEL_38;
    }
    else
    {
      v30 = &v28[8 * (((char *)v16 - v14) >> 3)];
      do
      {
        v31 = v30 - 24;
        *(float64x2_t *)(v30 - 24) = *(float64x2_t *)((char *)v16 - 24);
        *((_QWORD *)v30 - 1) = *(_QWORD *)&v16[-1].f64[1];
        v16 = (float64x2_t *)((char *)v16 - 24);
        v30 -= 24;
      }
      while (v16 != (float64x2_t *)v14);
      v15 = &v28[24 * v27];
      v16 = (float64x2_t *)(v29 + 24);
      if (v14)
LABEL_38:
        operator delete(v14);
    }
    v14 = v31;
    v13 = v86.f64[0];
    v4 += 2;
  }
  while (v4 != f64);
LABEL_43:
  if (v5 != v85)
  {
    v32 = &v14[24 * (v5 - v85)];
    v87 = *(_OWORD *)v14;
    v33 = *((_QWORD *)v14 + 2);
    *(_OWORD *)v14 = *(_OWORD *)v32;
    *((_QWORD *)v14 + 2) = *((_QWORD *)v32 + 2);
    *(_OWORD *)v32 = v87;
    *((_QWORD *)v32 + 2) = v33;
  }
  v34 = (float64x2_t *)(v14 + 24);
  v35 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (v14 + 24)) >> 3));
  if (v16 == (float64x2_t *)(v14 + 24))
    v36 = 0;
  else
    v36 = v35;
  sub_20FDC7C28((double *)v14 + 3, v16->f64, v36, 1);
  v37 = (double *)v14;
  if (v16 != v34)
  {
    v37 = (double *)v14;
    do
    {
      v38 = v34;
      v39 = (float64x2_t *)((char *)v34 + 24);
      if ((float64x2_t *)&v34[1].f64[1] == v16)
      {
        v34 = v16;
        v49 = v38->f64[0];
        v50 = *(__int128 *)((char *)v38 + 8);
        v51 = *v37;
        v52 = *v37 < v38->f64[0];
        if (*v37 == v38->f64[0])
          goto LABEL_69;
      }
      else
      {
        v34 = (float64x2_t *)((char *)v34 + 24);
        while (v34[1].f64[0] - v38[1].f64[0] <= 0.00000004)
        {
          v34 = (float64x2_t *)((char *)v34 + 24);
          if (v34 == v16)
          {
            v34 = v16;
            break;
          }
        }
        if (v38 != v34 && v39 != v34)
        {
          v40 = v39;
          do
          {
            _D3 = vsubq_f64(*v38, v86).f64[1];
            __asm { FMLA            D2, D3, V1.D[1] }
            v46 = *v40;
            v40 = (float64x2_t *)((char *)v40 + 24);
            _D4 = vsubq_f64(v46, v86).f64[1];
            __asm { FMLA            D3, D4, V1.D[1] }
            if (_D2 < _D3)
              v38 = v39;
            v39 = v40;
          }
          while (v40 != v34);
        }
        v49 = v38->f64[0];
        v50 = *(__int128 *)((char *)v38 + 8);
        v51 = *v37;
        v52 = *v37 < v38->f64[0];
        if (*v37 == v38->f64[0])
        {
LABEL_69:
          v55 = v37[1];
          v56 = v55 < *(double *)&v50;
          if (v55 == *(double *)&v50)
            continue;
          v57 = v55 - *(double *)&v50;
          v58 = *(double *)&v50 - v55;
          if (!v56)
            v58 = v57;
          if (v58 <= 0.00000001)
            continue;
          goto LABEL_50;
        }
      }
      v53 = v51 - v49;
      v54 = v49 - v51;
      if (!v52)
        v54 = v53;
      if (v54 <= 0.00000001)
        goto LABEL_69;
LABEL_50:
      v37[3] = v49;
      v37 += 3;
      *(_OWORD *)(v37 + 1) = v50;
    }
    while (v34 != v16);
  }
  v59 = v37 + 3;
  if (v59 == (double *)v16)
  {
    v59 = (double *)v16;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v16 == (float64x2_t *)v14)
      goto LABEL_109;
  }
  else
  {
    v16 = (float64x2_t *)v59;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v59 == (double *)v14)
      goto LABEL_109;
  }
  v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - v14) >> 3);
  if (v60 >> 60)
    sub_20E867F44();
  v61 = (float64x2_t *)operator new(0xAAAAAAAAAAAAAAB0 * (((char *)v59 - v14) >> 3));
  *(_QWORD *)a3 = v61;
  *(_QWORD *)(a3 + 8) = v61;
  *(_QWORD *)(a3 + 16) = &v61[v60];
  v62 = (float64x2_t *)v14;
  while (2)
  {
    v63 = *(float64x2_t **)a3;
    v64 = (unint64_t)v61 - *(_QWORD *)a3;
    if (v64 >= 0x11)
    {
      v65 = *v62;
      v66 = v61 - 1;
      while (1)
      {
        v67 = (int8x16_t)vsubq_f64(v65, *v66);
        v68 = vmulq_f64((float64x2_t)vextq_s8(v67, v67, 8uLL), vsubq_f64(*v66, v66[-1]));
        v69 = vsubq_f64(v68, (float64x2_t)vdupq_laneq_s64((int64x2_t)v68, 1)).f64[0];
        if (v69 > 0.0)
          break;
        if (v69 < 0.0)
          goto LABEL_120;
        _Q2 = vsubq_f64(*v66, v66[-1]);
        _D1 = vsubq_f64(*v62, *v66).f64[1];
        __asm { FMLA            D3, D1, V2.D[1] }
        if (_D3 >= 0.0)
        {
LABEL_120:
          *(_QWORD *)(a3 + 8) = v66--;
          v64 -= 16;
          --v61;
          if (v64 > 0x10)
            continue;
        }
        v61 = v66 + 1;
        break;
      }
    }
    v73 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v61 < v73)
    {
      *v61++ = *v62;
      goto LABEL_79;
    }
    v74 = v61 - v63;
    v75 = v74 + 1;
    if ((unint64_t)(v74 + 1) >> 60)
      sub_20E867F44();
    v76 = v73 - (_QWORD)v63;
    if (v76 >> 3 > v75)
      v75 = v76 >> 3;
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
      v77 = 0xFFFFFFFFFFFFFFFLL;
    else
      v77 = v75;
    if (v77)
    {
      if (v77 >> 60)
        sub_20E877A38();
      v78 = (char *)operator new(16 * v77);
      v79 = (float64x2_t *)&v78[16 * v74];
      *v79 = *v62;
      v80 = (uint64_t)v79;
      if (v61 == v63)
      {
LABEL_97:
        v61 = v79 + 1;
        *(_QWORD *)a3 = v80;
        *(_QWORD *)(a3 + 8) = v79 + 1;
        *(_QWORD *)(a3 + 16) = &v78[16 * v77];
        if (!v63)
          goto LABEL_79;
LABEL_102:
        operator delete(v63);
        goto LABEL_79;
      }
    }
    else
    {
      v78 = 0;
      v79 = (float64x2_t *)(16 * v74);
      *(float64x2_t *)(16 * v74) = *v62;
      v80 = 16 * v74;
      if (v61 == v63)
        goto LABEL_97;
    }
    do
    {
      *(float64x2_t *)(v80 - 16) = v61[-1];
      v80 -= 16;
      --v61;
    }
    while (v61 != v63);
    v63 = *(float64x2_t **)a3;
    v61 = v79 + 1;
    *(_QWORD *)a3 = v80;
    *(_QWORD *)(a3 + 8) = v79 + 1;
    *(_QWORD *)(a3 + 16) = &v78[16 * v77];
    if (v63)
      goto LABEL_102;
LABEL_79:
    *(_QWORD *)(a3 + 8) = v61;
    v62 = (float64x2_t *)((char *)v62 + 24);
    if (v62 != v16)
      continue;
    break;
  }
  if ((unint64_t)v61 - *(_QWORD *)a3 > 0x30)
  {
    v82 = v61[-1];
    v81 = v61 - 1;
    v83 = (int8x16_t)vsubq_f64(*(float64x2_t *)*(_QWORD *)a3, v82);
    v84 = vmulq_f64(vsubq_f64(v82, v81[-1]), (float64x2_t)vextq_s8(v83, v83, 8uLL));
    if (vsubq_f64(v84, (float64x2_t)vdupq_laneq_s64((int64x2_t)v84, 1)).f64[0] <= 0.0)
      *(_QWORD *)(a3 + 8) = v81;
  }
LABEL_109:
  if (v14)
    operator delete(v14);
}

void sub_20FDC6B18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  if (v2)
    operator delete(v2);
  _Unwind_Resume(exception_object);
}

float *sub_20FDC6B64(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  float *v58;
  float *v59;
  float *v60;
  float v61;
  float *v62;
  float v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  float v67;
  float v68;
  BOOL v69;
  float *v70;
  float v71;
  float *v72;
  float v73;
  float *v74;
  float *v75;
  float v76;
  uint64_t v77;
  int v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  float *v95;
  BOOL v97;
  uint64_t v98;
  float *v99;
  uint64_t v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int64_t v106;
  int64_t v107;
  BOOL v108;
  uint64_t v109;
  float *v110;
  float *v111;
  float v112;
  uint64_t v113;
  float *v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  float *v121;
  float *v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  float *v127;
  uint64_t v128;
  float *v129;
  uint64_t v130;
  float v131;
  float v132;
  uint64_t v133;
  float *v134;
  float v135;
  float v136;
  uint64_t v137;
  float *v138;
  float *v139;
  int v140;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - v8);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v81 = v8[2];
        if (*(a2 - 1) < v81)
        {
          v82 = *(_QWORD *)v8;
          goto LABEL_104;
        }
        return result;
      case 3:
        v83 = v8[5];
        v81 = v8[2];
        v84 = *(a2 - 1);
        if (v83 < v81)
        {
          v82 = *(_QWORD *)v8;
          if (v84 >= v83)
          {
            *(_QWORD *)v8 = *(_QWORD *)(v8 + 3);
            v8[2] = v83;
            *(_QWORD *)(v8 + 3) = v82;
            v8[5] = v81;
            if (*(a2 - 1) >= v81)
              return result;
            *(_QWORD *)(v8 + 3) = *(_QWORD *)(a2 - 3);
            v8[5] = *(a2 - 1);
          }
          else
          {
LABEL_104:
            *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
            v8[2] = *(a2 - 1);
          }
          *(_QWORD *)(a2 - 3) = v82;
          *(a2 - 1) = v81;
          return result;
        }
        if (v84 < v83)
        {
          v130 = *(_QWORD *)(v8 + 3);
          *(_QWORD *)(v8 + 3) = *(_QWORD *)(a2 - 3);
          v8[5] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v130;
          *(a2 - 1) = v83;
          v131 = v8[5];
          v132 = v8[2];
          if (v131 < v132)
          {
            v133 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)(v8 + 3);
            v8[2] = v131;
            *(_QWORD *)(v8 + 3) = v133;
            v8[5] = v132;
          }
        }
        return result;
      case 4:
        return sub_20FDC7AD4(v8, v8 + 3, v8 + 6, a2 - 3);
      case 5:
        result = sub_20FDC7AD4(v8, v8 + 3, v8 + 6, v8 + 9);
        v85 = v8[11];
        if (*(a2 - 1) < v85)
        {
          v86 = *(_QWORD *)(v8 + 9);
          *(_QWORD *)(v8 + 9) = *(_QWORD *)(a2 - 3);
          v8[11] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v86;
          *(a2 - 1) = v85;
          v87 = v8[11];
          v88 = v8[8];
          if (v87 < v88)
          {
            v89 = *((_QWORD *)v8 + 3);
            v90 = *(_QWORD *)(v8 + 9);
            *((_QWORD *)v8 + 3) = v90;
            v8[8] = v87;
            *(_QWORD *)(v8 + 9) = v89;
            v8[11] = v88;
            v91 = v8[5];
            if (v87 < v91)
            {
              v92 = *(_QWORD *)(v8 + 3);
              *(_QWORD *)(v8 + 3) = v90;
              v8[5] = v87;
              *((_QWORD *)v8 + 3) = v92;
              v8[8] = v91;
              v93 = v8[2];
              if (v87 < v93)
              {
                v94 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v90;
                v8[2] = v87;
                *(_QWORD *)(v8 + 3) = v94;
                v8[5] = v93;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 287)
        {
          v95 = v8 + 3;
          v97 = v8 == a2 || v95 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v97)
            {
              v98 = 0;
              v99 = v8;
              do
              {
                v101 = v99[5];
                v102 = v99[2];
                v99 = v95;
                if (v101 < v102)
                {
                  v103 = *(_QWORD *)v95;
                  v104 = v98;
                  do
                  {
                    v105 = (char *)v8 + v104;
                    *(_QWORD *)(v105 + 12) = *(_QWORD *)((char *)v8 + v104);
                    *((float *)v105 + 5) = *(float *)((char *)v8 + v104 + 8);
                    if (!v104)
                    {
                      v100 = (uint64_t)v8;
                      goto LABEL_122;
                    }
                    v104 -= 12;
                  }
                  while (v101 < *((float *)v105 - 1));
                  v100 = (uint64_t)v8 + v104 + 12;
LABEL_122:
                  *(_QWORD *)v100 = v103;
                  *(float *)(v100 + 8) = v101;
                }
                v95 = v99 + 3;
                v98 += 12;
              }
              while (v99 + 3 != a2);
            }
          }
          else if (!v97)
          {
            v134 = v8 + 5;
            do
            {
              v135 = v7[5];
              v136 = v7[2];
              v7 = v95;
              if (v135 < v136)
              {
                v137 = *(_QWORD *)v95;
                v138 = v134;
                do
                {
                  v139 = v138;
                  *((_QWORD *)v138 - 1) = *(_QWORD *)(v138 - 5);
                  v140 = *((_DWORD *)v138 - 3);
                  v138 -= 3;
                  *(_DWORD *)v139 = v140;
                }
                while (v135 < *(v139 - 6));
                *((_QWORD *)v138 - 1) = v137;
                *v138 = v135;
              }
              v95 = v7 + 3;
              v134 += 3;
            }
            while (v7 + 3 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v106 = (unint64_t)(v10 - 2) >> 1;
          v107 = v106;
          do
          {
            if (v106 >= v107)
            {
              v109 = (2 * v107) | 1;
              v110 = &v8[3 * v109];
              if (2 * v107 + 2 < v10 && v110[2] < v110[5])
              {
                v110 += 3;
                v109 = 2 * v107 + 2;
              }
              v111 = &v8[3 * v107];
              v112 = v111[2];
              if (v110[2] >= v112)
              {
                v113 = *(_QWORD *)v111;
                do
                {
                  v114 = v111;
                  v111 = v110;
                  *(_QWORD *)v114 = *(_QWORD *)v110;
                  v114[2] = v110[2];
                  if (v106 < v109)
                    break;
                  v115 = 2 * v109;
                  v109 = (2 * v109) | 1;
                  v110 = &v8[3 * v109];
                  v116 = v115 + 2;
                  if (v116 < v10 && v110[2] < v110[5])
                  {
                    v110 += 3;
                    v109 = v116;
                  }
                }
                while (v110[2] >= v112);
                *(_QWORD *)v111 = v113;
                v111[2] = v112;
              }
            }
            v108 = v107-- <= 0;
          }
          while (!v108);
          v117 = v9 / 0xCuLL;
          while (2)
          {
            v118 = 0;
            v119 = *(_QWORD *)v8;
            v120 = v8[2];
            v121 = v8;
            do
            {
              v122 = v121;
              v121 += 3 * v118 + 3;
              v123 = 2 * v118;
              v118 = (2 * v118) | 1;
              v124 = v123 + 2;
              if (v124 < v117 && v121[2] < v121[5])
              {
                v121 += 3;
                v118 = v124;
              }
              *(_QWORD *)v122 = *(_QWORD *)v121;
              v122[2] = v121[2];
            }
            while (v118 <= (uint64_t)((unint64_t)(v117 - 2) >> 1));
            if (v121 != a2 - 3)
            {
              *(_QWORD *)v121 = *(_QWORD *)(a2 - 3);
              v121[2] = *(a2 - 1);
              *(_QWORD *)(a2 - 3) = v119;
              *(a2 - 1) = v120;
              v125 = (char *)v121 - (char *)v8 + 12;
              if (v125 >= 13)
              {
                v126 = (v125 / 0xCuLL - 2) >> 1;
                v127 = &v8[3 * v126];
                v120 = v121[2];
                if (v127[2] < v120)
                {
                  v128 = *(_QWORD *)v121;
                  do
                  {
                    v129 = v121;
                    v121 = v127;
                    *(_QWORD *)v129 = *(_QWORD *)v127;
                    v129[2] = v127[2];
                    if (!v126)
                      break;
                    v126 = (v126 - 1) >> 1;
                    v127 = &v8[3 * v126];
                  }
                  while (v127[2] < v120);
                  *(_QWORD *)v121 = v128;
LABEL_146:
                  v121[2] = v120;
                }
              }
              a2 -= 3;
              v108 = v117-- <= 2;
              if (v108)
                return result;
              continue;
            }
            break;
          }
          *(_QWORD *)v121 = v119;
          goto LABEL_146;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[3 * ((unint64_t)v10 >> 1)];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 < 0x601)
        {
          v17 = v8[2];
          v18 = v12[2];
          if (v17 >= v18)
          {
            if (v13 < v17)
            {
              v24 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
              v8[2] = *(a2 - 1);
              *(_QWORD *)(a2 - 3) = v24;
              *(a2 - 1) = v17;
              v25 = v8[2];
              v26 = v12[2];
              if (v25 < v26)
              {
                v27 = *(_QWORD *)v12;
                *(_QWORD *)v12 = *(_QWORD *)v8;
                v12[2] = v25;
                *(_QWORD *)v8 = v27;
                v8[2] = v26;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_QWORD *)v12;
            if (v13 >= v17)
            {
              *(_QWORD *)v12 = *(_QWORD *)v8;
              v12[2] = v17;
              *(_QWORD *)v8 = v19;
              v8[2] = v18;
              if (*(a2 - 1) >= v18)
                goto LABEL_32;
              *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
              v8[2] = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v12 = *(_QWORD *)(a2 - 3);
              v12[2] = *(a2 - 1);
            }
            *(_QWORD *)(a2 - 3) = v19;
            *(a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v38 = v8[2];
          v37 = *(_QWORD *)v8;
          if (*(v8 - 1) < v38)
            goto LABEL_58;
          if (v38 >= *(a2 - 1))
          {
            v72 = v8 + 3;
            do
            {
              v8 = v72;
              if (v72 >= a2)
                break;
              v73 = v72[2];
              v72 += 3;
            }
            while (v38 >= v73);
          }
          else
          {
            v70 = v8;
            do
            {
              v8 = v70 + 3;
              v71 = v70[5];
              v70 += 3;
            }
            while (v38 >= v71);
          }
          v74 = a2;
          if (v8 < a2)
          {
            v75 = a2;
            do
            {
              v74 = v75 - 3;
              v76 = *(v75 - 1);
              v75 -= 3;
            }
            while (v38 < v76);
          }
          while (v8 < v74)
          {
            v77 = *(_QWORD *)v8;
            v78 = *((_DWORD *)v8 + 2);
            *(_QWORD *)v8 = *(_QWORD *)v74;
            v8[2] = v74[2];
            *(_QWORD *)v74 = v77;
            *((_DWORD *)v74 + 2) = v78;
            do
            {
              v79 = v8[5];
              v8 += 3;
            }
            while (v38 >= v79);
            do
            {
              v80 = *(v74 - 1);
              v74 -= 3;
            }
            while (v38 < v80);
          }
          if (v8 - 3 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 3);
            v7[2] = *(v8 - 1);
          }
          a4 = 0;
          *(_QWORD *)(v8 - 3) = v37;
          *(v8 - 1) = v38;
          continue;
        }
        v14 = v12[2];
        v15 = v8[2];
        if (v14 >= v15)
        {
          if (v13 < v14)
          {
            v20 = *(_QWORD *)v12;
            *(_QWORD *)v12 = *(_QWORD *)(a2 - 3);
            v12[2] = *(a2 - 1);
            *(_QWORD *)(a2 - 3) = v20;
            *(a2 - 1) = v14;
            v21 = v12[2];
            v22 = v8[2];
            if (v21 < v22)
            {
              v23 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)v12;
              v8[2] = v21;
              *(_QWORD *)v12 = v23;
              v12[2] = v22;
            }
          }
        }
        else
        {
          v16 = *(_QWORD *)v8;
          if (v13 < v14)
          {
            *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
            v8[2] = *(a2 - 1);
            goto LABEL_22;
          }
          *(_QWORD *)v8 = *(_QWORD *)v12;
          v8[2] = v14;
          *(_QWORD *)v12 = v16;
          v12[2] = v15;
          if (*(a2 - 1) < v15)
          {
            *(_QWORD *)v12 = *(_QWORD *)(a2 - 3);
            v12[2] = *(a2 - 1);
LABEL_22:
            *(_QWORD *)(a2 - 3) = v16;
            *(a2 - 1) = v15;
          }
        }
        v28 = &v8[3 * v11];
        v29 = v28 - 3;
        v30 = *(v28 - 1);
        v31 = v8[5];
        v32 = *(a2 - 4);
        if (v30 >= v31)
        {
          if (v32 < v30)
          {
            v34 = *(_QWORD *)v29;
            *(_QWORD *)v29 = *((_QWORD *)a2 - 3);
            v29[2] = *(a2 - 4);
            *((_QWORD *)a2 - 3) = v34;
            *(a2 - 4) = v30;
            v35 = v8[5];
            if (v29[2] < v35)
            {
              v36 = *(_QWORD *)(v8 + 3);
              *(_QWORD *)(v8 + 3) = *(_QWORD *)v29;
              v8[5] = v29[2];
              *(_QWORD *)v29 = v36;
              v29[2] = v35;
            }
          }
        }
        else
        {
          v33 = *(_QWORD *)(v8 + 3);
          if (v32 < v30)
          {
            *(_QWORD *)(v8 + 3) = *((_QWORD *)a2 - 3);
            v8[5] = *(a2 - 4);
            goto LABEL_36;
          }
          *(_QWORD *)(v8 + 3) = *(_QWORD *)v29;
          v8[5] = v29[2];
          *(_QWORD *)v29 = v33;
          v29[2] = v31;
          if (*(a2 - 4) < v31)
          {
            *(_QWORD *)v29 = *((_QWORD *)a2 - 3);
            v29[2] = *(a2 - 4);
LABEL_36:
            *((_QWORD *)a2 - 3) = v33;
            *(a2 - 4) = v31;
          }
        }
        v39 = &v8[3 * v11];
        v40 = v39 + 3;
        v41 = v39[5];
        v42 = v8[8];
        v43 = *(a2 - 7);
        if (v41 >= v42)
        {
          if (v43 < v41)
          {
            v45 = *(_QWORD *)v40;
            *(_QWORD *)v40 = *(_QWORD *)(a2 - 9);
            v40[2] = *(a2 - 7);
            *(_QWORD *)(a2 - 9) = v45;
            *(a2 - 7) = v41;
            v46 = v8[8];
            if (v40[2] < v46)
            {
              v47 = *((_QWORD *)v8 + 3);
              *((_QWORD *)v8 + 3) = *(_QWORD *)v40;
              v8[8] = v40[2];
              *(_QWORD *)v40 = v47;
              v40[2] = v46;
            }
          }
        }
        else
        {
          v44 = *((_QWORD *)v8 + 3);
          if (v43 < v41)
          {
            *((_QWORD *)v8 + 3) = *(_QWORD *)(a2 - 9);
            v8[8] = *(a2 - 7);
            goto LABEL_45;
          }
          *((_QWORD *)v8 + 3) = *(_QWORD *)v40;
          v8[8] = v40[2];
          *(_QWORD *)v40 = v44;
          v40[2] = v42;
          if (*(a2 - 7) < v42)
          {
            *(_QWORD *)v40 = *(_QWORD *)(a2 - 9);
            v40[2] = *(a2 - 7);
LABEL_45:
            *(_QWORD *)(a2 - 9) = v44;
            *(a2 - 7) = v42;
          }
        }
        v48 = v12[2];
        v49 = v29[2];
        v50 = v40[2];
        if (v48 >= v49)
        {
          v51 = *(_QWORD *)v12;
          if (v50 >= v48)
          {
            v49 = v12[2];
          }
          else
          {
            v52 = *(_QWORD *)v40;
            *(_QWORD *)v12 = *(_QWORD *)v40;
            v12[2] = v50;
            *(_QWORD *)v40 = v51;
            v40[2] = v48;
            if (v50 >= v49)
            {
              v49 = v50;
              v51 = v52;
            }
            else
            {
              v51 = *(_QWORD *)v29;
              *(_QWORD *)v29 = v52;
              v29[2] = v50;
              *(_QWORD *)v12 = v51;
              v12[2] = v49;
            }
          }
        }
        else
        {
          v51 = *(_QWORD *)v29;
          if (v50 >= v48)
          {
            *(_QWORD *)v29 = *(_QWORD *)v12;
            v29[2] = v48;
            *(_QWORD *)v12 = v51;
            v12[2] = v49;
            if (v50 < v49)
            {
              v53 = *(_QWORD *)v40;
              *(_QWORD *)v12 = *(_QWORD *)v40;
              v12[2] = v50;
              *(_QWORD *)v40 = v51;
              v40[2] = v49;
              v49 = v50;
              v51 = v53;
            }
          }
          else
          {
            *(_QWORD *)v29 = *(_QWORD *)v40;
            v29[2] = v50;
            *(_QWORD *)v40 = v51;
            v40[2] = v49;
            v51 = *(_QWORD *)v12;
            v49 = v48;
          }
        }
        v54 = *(_QWORD *)v8;
        v55 = v8[2];
        *(_QWORD *)v8 = v51;
        v8[2] = v49;
        *(_QWORD *)v12 = v54;
        v8[3 * v11 + 2] = v55;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v37 = *(_QWORD *)v8;
        v38 = v8[2];
LABEL_58:
        v56 = 0;
        do
        {
          v57 = v8[v56 + 5];
          v56 += 3;
        }
        while (v57 < v38);
        v58 = &v8[v56];
        v59 = a2;
        if (v56 == 3)
        {
          v62 = a2;
          while (v58 < v62)
          {
            v60 = v62 - 3;
            v63 = *(v62 - 1);
            v62 -= 3;
            if (v63 < v38)
              goto LABEL_66;
          }
          v60 = v62;
          v8 = v58;
        }
        else
        {
          do
          {
            v60 = v59 - 3;
            v61 = *(v59 - 1);
            v59 -= 3;
          }
          while (v61 >= v38);
LABEL_66:
          v8 = v58;
          if (v58 < v60)
          {
            v64 = (unint64_t)v60;
            do
            {
              v65 = *(_QWORD *)v8;
              v66 = *((_DWORD *)v8 + 2);
              *(_QWORD *)v8 = *(_QWORD *)v64;
              v8[2] = *(float *)(v64 + 8);
              *(_QWORD *)v64 = v65;
              *(_DWORD *)(v64 + 8) = v66;
              do
              {
                v67 = v8[5];
                v8 += 3;
              }
              while (v67 < v38);
              do
              {
                v68 = *(float *)(v64 - 4);
                v64 -= 12;
              }
              while (v68 >= v38);
            }
            while ((unint64_t)v8 < v64);
          }
        }
        if (v8 - 3 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 3);
          v7[2] = *(v8 - 1);
        }
        *(_QWORD *)(v8 - 3) = v37;
        *(v8 - 1) = v38;
        if (v58 < v60)
        {
LABEL_77:
          result = (float *)sub_20FDC6B64(v7, v8 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v69 = sub_20FDC7738(v7, v8 - 3);
        result = (float *)sub_20FDC7738(v8, a2);
        if (!(_DWORD)result)
        {
          if (v69)
            continue;
          goto LABEL_77;
        }
        a2 = v8 - 3;
        if (!v69)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_20FDC7738(float *a1, float *a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  int v34;
  float *v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a1[2];
      if (*(a2 - 1) < v6)
      {
        v7 = *(_QWORD *)a1;
        goto LABEL_7;
      }
      return result;
    case 3uLL:
      v8 = a1[5];
      v6 = a1[2];
      v9 = *(a2 - 1);
      if (v8 >= v6)
      {
        if (v9 < v8)
        {
          v25 = *(_QWORD *)(a1 + 3);
          *(_QWORD *)(a1 + 3) = *(_QWORD *)(a2 - 3);
          a1[5] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v25;
          *(a2 - 1) = v8;
          v26 = a1[5];
          v27 = a1[2];
          if (v26 < v27)
          {
            v28 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)(a1 + 3);
            a1[2] = v26;
            *(_QWORD *)(a1 + 3) = v28;
            a1[5] = v27;
          }
        }
      }
      else
      {
        v7 = *(_QWORD *)a1;
        if (v9 >= v8)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 3);
          a1[2] = v8;
          *(_QWORD *)(a1 + 3) = v7;
          a1[5] = v6;
          if (*(a2 - 1) < v6)
          {
            *(_QWORD *)(a1 + 3) = *(_QWORD *)(a2 - 3);
            a1[5] = *(a2 - 1);
            *(_QWORD *)(a2 - 3) = v7;
            *(a2 - 1) = v6;
          }
        }
        else
        {
LABEL_7:
          *(_QWORD *)a1 = *(_QWORD *)(a2 - 3);
          a1[2] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v7;
          *(a2 - 1) = v6;
        }
      }
      return result;
    case 4uLL:
      sub_20FDC7AD4(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20FDC7AD4(a1, a1 + 3, a1 + 6, a1 + 9);
      v15 = a1[11];
      if (*(a2 - 1) >= v15)
        return 1;
      v16 = *(_QWORD *)(a1 + 9);
      *(_QWORD *)(a1 + 9) = *(_QWORD *)(a2 - 3);
      a1[11] = *(a2 - 1);
      *(_QWORD *)(a2 - 3) = v16;
      *(a2 - 1) = v15;
      v17 = a1[11];
      v18 = a1[8];
      if (v17 >= v18)
        return 1;
      v19 = *((_QWORD *)a1 + 3);
      v20 = *(_QWORD *)(a1 + 9);
      *((_QWORD *)a1 + 3) = v20;
      a1[8] = v17;
      *(_QWORD *)(a1 + 9) = v19;
      a1[11] = v18;
      v21 = a1[5];
      if (v17 >= v21)
        return 1;
      v22 = *(_QWORD *)(a1 + 3);
      *(_QWORD *)(a1 + 3) = v20;
      a1[5] = v17;
      *((_QWORD *)a1 + 3) = v22;
      a1[8] = v21;
      v23 = a1[2];
      if (v17 >= v23)
        return 1;
      v24 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v20;
      a1[2] = v17;
      *(_QWORD *)(a1 + 3) = v24;
      a1[5] = v23;
      return 1;
    default:
      v10 = a1[8];
      v11 = a1 + 5;
      v12 = a1[5];
      v13 = a1[2];
      if (v12 < v13)
      {
        v14 = *(_QWORD *)a1;
        if (v10 >= v12)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 3);
          a1[2] = v12;
          *(_QWORD *)(a1 + 3) = v14;
          a1[5] = v13;
          if (v10 >= v13)
            goto LABEL_30;
          *(_QWORD *)(a1 + 3) = *((_QWORD *)a1 + 3);
          a1[5] = v10;
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 3);
          a1[2] = v10;
        }
        *((_QWORD *)a1 + 3) = v14;
        v11 = a1 + 8;
        goto LABEL_29;
      }
      if (v10 < v12)
      {
        v29 = *(_QWORD *)(a1 + 3);
        v30 = *((_QWORD *)a1 + 3);
        *(_QWORD *)(a1 + 3) = v30;
        a1[5] = v10;
        *((_QWORD *)a1 + 3) = v29;
        a1[8] = v12;
        if (v10 < v13)
        {
          v31 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v30;
          a1[2] = v10;
          *(_QWORD *)(a1 + 3) = v31;
LABEL_29:
          *v11 = v13;
        }
      }
LABEL_30:
      v32 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      v35 = a1 + 6;
      while (1)
      {
        v36 = v32[2];
        if (v36 < v35[2])
          break;
LABEL_39:
        v35 = v32;
        v33 += 12;
        v32 += 3;
        if (v32 == a2)
          return 1;
      }
      v37 = *(_QWORD *)v32;
      v38 = v33;
      do
      {
        v39 = (char *)a1 + v38;
        *(_QWORD *)(v39 + 36) = *(_QWORD *)((char *)a1 + v38 + 24);
        *((float *)v39 + 11) = *(float *)((char *)a1 + v38 + 32);
        if (v38 == -24)
        {
          *(_QWORD *)a1 = v37;
          a1[2] = v36;
          if (++v34 != 8)
            goto LABEL_39;
          return v32 + 3 == a2;
        }
        v38 -= 12;
      }
      while (v36 < *((float *)v39 + 5));
      v40 = (char *)a1 + v38;
      *(_QWORD *)(v40 + 36) = v37;
      *((float *)v40 + 11) = v36;
      if (++v34 != 8)
        goto LABEL_39;
      return v32 + 3 == a2;
  }
}

float *sub_20FDC7AD4(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v4 = a2[2];
  v5 = result[2];
  v6 = a3[2];
  if (v4 >= v5)
  {
    if (v6 < v4)
    {
      v8 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = a3[2];
      *(_QWORD *)a3 = v8;
      a3[2] = v4;
      v9 = result[2];
      v6 = v4;
      if (a2[2] < v9)
      {
        v10 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = a2[2];
        *(_QWORD *)a2 = v10;
        a2[2] = v9;
        v6 = a3[2];
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)result;
    if (v6 < v4)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      result[2] = a3[2];
LABEL_9:
      *(_QWORD *)a3 = v7;
      a3[2] = v5;
      v6 = v5;
      goto LABEL_10;
    }
    *(_QWORD *)result = *(_QWORD *)a2;
    result[2] = a2[2];
    *(_QWORD *)a2 = v7;
    a2[2] = v5;
    v6 = a3[2];
    if (v6 < v5)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = a3[2];
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4[2] < v6)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = a4[2];
    *(_QWORD *)a4 = v11;
    a4[2] = v6;
    v12 = a2[2];
    if (a3[2] < v12)
    {
      v13 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = a3[2];
      *(_QWORD *)a3 = v13;
      a3[2] = v12;
      v14 = result[2];
      if (a2[2] < v14)
      {
        v15 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = a2[2];
        *(_QWORD *)a2 = v15;
        a2[2] = v14;
      }
    }
  }
  return result;
}

double *sub_20FDC7C28(double *result, double *a2, uint64_t a3, char a4)
{
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __int128 *v22;
  double *v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __int128 *v30;
  double *v31;
  __int128 *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  double v44;
  double *v45;
  double *v46;
  double *v47;
  double v48;
  double *v49;
  double v50;
  unint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double *v55;
  BOOL v56;
  double v57;
  double *v58;
  double v59;
  double *v60;
  double v61;
  double *v62;
  double *v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double *v68;
  double v69;
  __int128 *v70;
  double v71;
  double v72;
  __int128 *v73;
  __int128 *v74;
  __int128 *v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double *v80;
  BOOL v82;
  uint64_t v83;
  double *v84;
  uint64_t v85;
  double *v86;
  double v87;
  uint64_t v88;
  char *v89;
  int64_t v90;
  int64_t v91;
  BOOL v92;
  uint64_t v93;
  double *v94;
  double *v95;
  double v96;
  double *v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  __int128 v101;
  uint64_t v102;
  double *v103;
  double v104;
  double *v105;
  double *v106;
  uint64_t v107;
  int64_t v108;
  uint64_t v109;
  unint64_t v110;
  double *v111;
  double *v112;
  double *v113;
  double *v114;
  double v115;
  double *v116;
  double *v117;
  uint64_t v118;
  double *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;

  v7 = result;
LABEL_2:
  v8 = a2 - 3;
  v119 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 1) < v10[2])
        {
          v147 = *(_OWORD *)v10;
          v69 = v10[2];
          *(_OWORD *)v10 = *(_OWORD *)(a2 - 3);
          v10[2] = *(a2 - 1);
          *(_OWORD *)(a2 - 3) = v147;
          goto LABEL_172;
        }
        return result;
      case 3:
        v70 = (__int128 *)(v10 + 3);
        v71 = v10[5];
        v69 = v10[2];
        v72 = *(a2 - 1);
        if (v71 >= v69)
        {
          if (v72 < v71)
          {
            v156 = *v70;
            *v70 = *(_OWORD *)v8;
            v10[5] = *(a2 - 1);
            *(_OWORD *)v8 = v156;
            *(a2 - 1) = v71;
            v79 = v10[2];
            if (v10[5] < v79)
            {
              v157 = *(_OWORD *)v10;
              *(_OWORD *)v10 = *v70;
              v10[2] = v10[5];
              *v70 = v157;
              goto LABEL_161;
            }
          }
        }
        else
        {
          if (v72 >= v71)
          {
            v159 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *v70;
            v10[2] = v10[5];
            *v70 = v159;
            v10[5] = v69;
            if (*(a2 - 1) >= v69)
              return result;
            v148 = *v70;
            *v70 = *(_OWORD *)v8;
            v10[5] = *(a2 - 1);
          }
          else
          {
            v148 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v8;
            v10[2] = *(a2 - 1);
          }
          *(_OWORD *)v8 = v148;
LABEL_172:
          *(a2 - 1) = v69;
        }
        return result;
      case 4:
        return sub_20FDC8E2C(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        v73 = (__int128 *)(v10 + 3);
        v74 = (__int128 *)(v10 + 6);
        v75 = (__int128 *)(v10 + 9);
        result = sub_20FDC8E2C(v10, v10 + 3, v10 + 6, v10 + 9);
        v76 = v10[11];
        if (*(a2 - 1) < v76)
        {
          v149 = *v75;
          *v75 = *(_OWORD *)(a2 - 3);
          v10[11] = *(a2 - 1);
          *(_OWORD *)(a2 - 3) = v149;
          *(a2 - 1) = v76;
          v77 = v10[8];
          if (v10[11] < v77)
          {
            v150 = *v74;
            *v74 = *v75;
            v10[8] = v10[11];
            *v75 = v150;
            v10[11] = v77;
            v78 = v10[5];
            if (v10[8] < v78)
            {
              v151 = *v73;
              *v73 = *v74;
              v10[5] = v10[8];
              *v74 = v151;
              v10[8] = v78;
              v79 = v10[2];
              if (v10[5] < v79)
              {
                v152 = *(_OWORD *)v10;
                *(_OWORD *)v10 = *v73;
                v10[2] = v10[5];
                *v73 = v152;
LABEL_161:
                v10[5] = v79;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 575)
        {
          v80 = v10 + 3;
          v82 = v10 == a2 || v80 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v82)
            {
              v83 = 0;
              v84 = v10;
              do
              {
                v86 = v80;
                if (v84[5] < v84[2])
                {
                  v153 = *(_OWORD *)v80;
                  v87 = v84[5];
                  v88 = v83;
                  do
                  {
                    v89 = (char *)v10 + v88;
                    *(_OWORD *)(v89 + 24) = *(_OWORD *)((char *)v10 + v88);
                    *((double *)v89 + 5) = *(double *)((char *)v10 + v88 + 16);
                    if (!v88)
                    {
                      v85 = (uint64_t)v10;
                      goto LABEL_120;
                    }
                    v88 -= 24;
                  }
                  while (v87 < *((double *)v89 - 1));
                  v85 = (uint64_t)v10 + v88 + 24;
LABEL_120:
                  *(_OWORD *)v85 = v153;
                  *(double *)(v85 + 16) = v87;
                }
                v80 = v86 + 3;
                v83 += 24;
                v84 = v86;
              }
              while (v86 + 3 != a2);
            }
          }
          else if (!v82)
          {
            v113 = v10 + 5;
            do
            {
              v114 = v80;
              if (v7[5] < v7[2])
              {
                v158 = *(_OWORD *)v80;
                v115 = v7[5];
                v116 = v113;
                do
                {
                  v117 = v116;
                  *((_OWORD *)v116 - 1) = *(_OWORD *)(v116 - 5);
                  v118 = *((_QWORD *)v116 - 3);
                  v116 -= 3;
                  *(_QWORD *)v117 = v118;
                }
                while (v115 < *(v117 - 6));
                *((_OWORD *)v116 - 1) = v158;
                *v116 = v115;
              }
              v80 = v114 + 3;
              v113 += 3;
              v7 = v114;
            }
            while (v114 + 3 != a2);
          }
          return result;
        }
        if (a3)
        {
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *(a2 - 1);
          if ((unint64_t)v11 < 0xC01)
          {
            v18 = v10[2];
            v19 = v14[2];
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                v127 = *(_OWORD *)v10;
                *(_OWORD *)v10 = *(_OWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_OWORD *)v8 = v127;
                *(a2 - 1) = v18;
                v21 = v14[2];
                if (v10[2] < v21)
                {
                  v128 = *(_OWORD *)v14;
                  *(_OWORD *)v14 = *(_OWORD *)v10;
                  v14[2] = v10[2];
                  *(_OWORD *)v10 = v128;
                  v10[2] = v21;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_56;
                }
              }
            }
            else
            {
              if (v15 >= v18)
              {
                v133 = *(_OWORD *)v14;
                *(_OWORD *)v14 = *(_OWORD *)v10;
                v14[2] = v10[2];
                *(_OWORD *)v10 = v133;
                v10[2] = v19;
                if (*(a2 - 1) >= v19)
                  goto LABEL_32;
                v124 = *(_OWORD *)v10;
                *(_OWORD *)v10 = *(_OWORD *)v8;
                v10[2] = *(a2 - 1);
              }
              else
              {
                v124 = *(_OWORD *)v14;
                *(_OWORD *)v14 = *(_OWORD *)v8;
                v14[2] = *(a2 - 1);
              }
              *(_OWORD *)v8 = v124;
              *(a2 - 1) = v19;
            }
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_56:
            v29 = v10[2];
            if (*(v10 - 1) < v29)
              goto LABEL_57;
            v121 = *(_OWORD *)v10;
            v57 = v10[2];
            if (v57 >= *(a2 - 1))
            {
              v60 = v10 + 3;
              do
              {
                v10 = v60;
                if (v60 >= a2)
                  break;
                v61 = v60[2];
                v60 += 3;
              }
              while (v57 >= v61);
            }
            else
            {
              v58 = v10;
              do
              {
                v10 = v58 + 3;
                v59 = v58[5];
                v58 += 3;
              }
              while (v57 >= v59);
            }
            v62 = a2;
            if (v10 < a2)
            {
              v63 = a2;
              do
              {
                v62 = v63 - 3;
                v64 = *(v63 - 1);
                v63 -= 3;
              }
              while (v57 < v64);
            }
            while (v10 < v62)
            {
              v146 = *(_OWORD *)v10;
              v65 = *((_QWORD *)v10 + 2);
              *(_OWORD *)v10 = *(_OWORD *)v62;
              v10[2] = v62[2];
              *(_OWORD *)v62 = v146;
              *((_QWORD *)v62 + 2) = v65;
              do
              {
                v66 = v10[5];
                v10 += 3;
              }
              while (v57 >= v66);
              do
              {
                v67 = *(v62 - 1);
                v62 -= 3;
              }
              while (v57 < v67);
            }
            v68 = v10 - 3;
            if (v10 - 3 != v7)
            {
              *(_OWORD *)v7 = *(_OWORD *)v68;
              v7[2] = *(v10 - 1);
            }
            a4 = 0;
            *(_OWORD *)v68 = v121;
            *(v10 - 1) = v57;
            continue;
          }
          v16 = v14[2];
          v17 = v10[2];
          if (v16 >= v17)
          {
            if (v15 < v16)
            {
              v125 = *(_OWORD *)v14;
              *(_OWORD *)v14 = *(_OWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_OWORD *)v8 = v125;
              *(a2 - 1) = v16;
              v20 = v10[2];
              if (v14[2] < v20)
              {
                v126 = *(_OWORD *)v10;
                *(_OWORD *)v10 = *(_OWORD *)v14;
                v10[2] = v14[2];
                *(_OWORD *)v14 = v126;
                v14[2] = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              v129 = *(_OWORD *)v10;
              *(_OWORD *)v10 = *(_OWORD *)v14;
              v10[2] = v14[2];
              *(_OWORD *)v14 = v129;
              v14[2] = v17;
              if (*(a2 - 1) >= v17)
                goto LABEL_23;
              v123 = *(_OWORD *)v14;
              *(_OWORD *)v14 = *(_OWORD *)v8;
              v14[2] = *(a2 - 1);
            }
            else
            {
              v123 = *(_OWORD *)v10;
              *(_OWORD *)v10 = *(_OWORD *)v8;
              v10[2] = *(a2 - 1);
            }
            *(_OWORD *)v8 = v123;
            *(a2 - 1) = v17;
          }
LABEL_23:
          v22 = (__int128 *)(v10 + 3);
          v23 = &v10[3 * v13];
          v24 = v23 - 3;
          v25 = *(v23 - 1);
          v26 = v10[5];
          v27 = *(a2 - 4);
          if (v25 >= v26)
          {
            if (v27 < v25)
            {
              v131 = *(_OWORD *)v24;
              *(_OWORD *)v24 = *(_OWORD *)v119;
              *(v23 - 1) = *(a2 - 4);
              *(_OWORD *)v119 = v131;
              *(a2 - 4) = v25;
              v28 = v10[5];
              if (*(v23 - 1) < v28)
              {
                v132 = *v22;
                *v22 = *(_OWORD *)v24;
                v10[5] = *(v23 - 1);
                *(_OWORD *)v24 = v132;
                *(v23 - 1) = v28;
              }
            }
          }
          else
          {
            if (v27 >= v25)
            {
              v134 = *v22;
              *v22 = *(_OWORD *)v24;
              v10[5] = *(v23 - 1);
              *(_OWORD *)v24 = v134;
              *(v23 - 1) = v26;
              if (*(a2 - 4) >= v26)
                goto LABEL_37;
              v135 = *(_OWORD *)v24;
              *(_OWORD *)v24 = *(_OWORD *)v119;
              *(v23 - 1) = *(a2 - 4);
              *(_OWORD *)v119 = v135;
            }
            else
            {
              v130 = *v22;
              *v22 = *(_OWORD *)v119;
              v10[5] = *(a2 - 4);
              *(_OWORD *)v119 = v130;
            }
            *(a2 - 4) = v26;
          }
LABEL_37:
          v30 = (__int128 *)(v10 + 6);
          v31 = &v10[3 * v13];
          v32 = (__int128 *)(v31 + 3);
          v33 = v31[5];
          v34 = v10[8];
          v35 = *(a2 - 7);
          if (v33 >= v34)
          {
            if (v35 < v33)
            {
              v137 = *v32;
              *v32 = *(_OWORD *)v9;
              v31[5] = *(a2 - 7);
              *(_OWORD *)v9 = v137;
              *(a2 - 7) = v33;
              v36 = v10[8];
              if (v31[5] < v36)
              {
                v138 = *v30;
                *v30 = *v32;
                v10[8] = v31[5];
                *v32 = v138;
                v31[5] = v36;
              }
            }
          }
          else
          {
            if (v35 >= v33)
            {
              v139 = *v30;
              *v30 = *v32;
              v10[8] = v31[5];
              *v32 = v139;
              v31[5] = v34;
              if (*(a2 - 7) >= v34)
                goto LABEL_46;
              v136 = *v32;
              *v32 = *(_OWORD *)v9;
              v31[5] = *(a2 - 7);
            }
            else
            {
              v136 = *v30;
              *v30 = *(_OWORD *)v9;
              v10[8] = *(a2 - 7);
            }
            *(_OWORD *)v9 = v136;
            *(a2 - 7) = v34;
          }
LABEL_46:
          v37 = v14[2];
          v38 = v24[2];
          v39 = v31[5];
          if (v37 >= v38)
          {
            if (v39 < v37)
            {
              v141 = *(_OWORD *)v14;
              *(_OWORD *)v14 = *v32;
              v14[2] = v31[5];
              *v32 = v141;
              v31[5] = v37;
              v40 = v24[2];
              if (v14[2] < v40)
              {
                v142 = *(_OWORD *)v24;
                *(_OWORD *)v24 = *(_OWORD *)v14;
                v24[2] = v14[2];
                *(_OWORD *)v14 = v142;
                v14[2] = v40;
              }
            }
          }
          else
          {
            if (v39 >= v37)
            {
              v143 = *(_OWORD *)v24;
              *(_OWORD *)v24 = *(_OWORD *)v14;
              v24[2] = v14[2];
              *(_OWORD *)v14 = v143;
              v14[2] = v38;
              if (v31[5] >= v38)
                goto LABEL_55;
              v140 = *(_OWORD *)v14;
              *(_OWORD *)v14 = *v32;
              v14[2] = v31[5];
            }
            else
            {
              v140 = *(_OWORD *)v24;
              *(_OWORD *)v24 = *v32;
              v24[2] = v31[5];
            }
            *v32 = v140;
            v31[5] = v38;
          }
LABEL_55:
          v144 = *(_OWORD *)v10;
          v41 = *((_QWORD *)v10 + 2);
          *(_OWORD *)v10 = *(_OWORD *)v14;
          v42 = &v10[3 * v13];
          v10[2] = v42[2];
          *(_OWORD *)v14 = v144;
          *((_QWORD *)v42 + 2) = v41;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_56;
LABEL_33:
          v29 = v10[2];
LABEL_57:
          v43 = 0;
          v120 = *(_OWORD *)v10;
          do
          {
            v44 = v10[v43 + 5];
            v43 += 3;
          }
          while (v44 < v29);
          v45 = &v10[v43];
          v46 = a2;
          if (v43 == 3)
          {
            v49 = a2;
            while (v45 < v49)
            {
              v47 = v49 - 3;
              v50 = *(v49 - 1);
              v49 -= 3;
              if (v50 < v29)
                goto LABEL_65;
            }
            v47 = v49;
            v10 = v45;
          }
          else
          {
            do
            {
              v47 = v46 - 3;
              v48 = *(v46 - 1);
              v46 -= 3;
            }
            while (v48 >= v29);
LABEL_65:
            v10 = v45;
            if (v45 < v47)
            {
              v51 = (unint64_t)v47;
              do
              {
                v145 = *(_OWORD *)v10;
                v52 = *((_QWORD *)v10 + 2);
                *(_OWORD *)v10 = *(_OWORD *)v51;
                v10[2] = *(double *)(v51 + 16);
                *(_OWORD *)v51 = v145;
                *(_QWORD *)(v51 + 16) = v52;
                do
                {
                  v53 = v10[5];
                  v10 += 3;
                }
                while (v53 < v29);
                do
                {
                  v54 = *(double *)(v51 - 8);
                  v51 -= 24;
                }
                while (v54 >= v29);
              }
              while ((unint64_t)v10 < v51);
            }
          }
          v55 = v10 - 3;
          if (v10 - 3 != v7)
          {
            *(_OWORD *)v7 = *(_OWORD *)v55;
            v7[2] = *(v10 - 1);
          }
          *(_OWORD *)v55 = v120;
          *(v10 - 1) = v29;
          if (v45 < v47)
            goto LABEL_76;
          v56 = sub_20FDC8A1C(v7, v10 - 3);
          result = (double *)sub_20FDC8A1C(v10, a2);
          if (!(_DWORD)result)
          {
            if (v56)
              continue;
LABEL_76:
            result = (double *)sub_20FDC7C28(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v56)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
        {
          v90 = (unint64_t)(v12 - 2) >> 1;
          v91 = v90;
          do
          {
            if (v90 >= v91)
            {
              v93 = (2 * v91) | 1;
              v94 = &v10[3 * v93];
              if (2 * v91 + 2 < v12 && v94[2] < v94[5])
              {
                v94 += 3;
                v93 = 2 * v91 + 2;
              }
              v95 = &v10[3 * v91];
              v96 = v95[2];
              if (v94[2] >= v96)
              {
                v154 = *(_OWORD *)v95;
                do
                {
                  v97 = v95;
                  v95 = v94;
                  *(_OWORD *)v97 = *(_OWORD *)v94;
                  v97[2] = v94[2];
                  if (v90 < v93)
                    break;
                  v98 = 2 * v93;
                  v93 = (2 * v93) | 1;
                  v94 = &v10[3 * v93];
                  v99 = v98 + 2;
                  if (v99 < v12 && v94[2] < v94[5])
                  {
                    v94 += 3;
                    v93 = v99;
                  }
                }
                while (v94[2] >= v96);
                *(_OWORD *)v95 = v154;
                v95[2] = v96;
              }
            }
            v92 = v91-- <= 0;
          }
          while (!v92);
          v100 = v11 / 0x18uLL;
          do
          {
            v102 = 0;
            v103 = a2;
            v122 = *(_OWORD *)v10;
            v104 = v10[2];
            v105 = v10;
            do
            {
              v106 = v105;
              v105 += 3 * v102 + 3;
              v107 = 2 * v102;
              v102 = (2 * v102) | 1;
              v108 = v107 + 2;
              if (v108 < v100 && v105[2] < v105[5])
              {
                v105 += 3;
                v102 = v108;
              }
              *(_OWORD *)v106 = *(_OWORD *)v105;
              v106[2] = v105[2];
            }
            while (v102 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
            a2 -= 3;
            if (v105 == v103 - 3)
            {
              v101 = v122;
            }
            else
            {
              *(_OWORD *)v105 = *(_OWORD *)a2;
              v105[2] = *(v103 - 1);
              *(_OWORD *)a2 = v122;
              *(v103 - 1) = v104;
              v109 = (char *)v105 - (char *)v10 + 24;
              if (v109 < 25)
                goto LABEL_145;
              v110 = (v109 / 0x18uLL - 2) >> 1;
              v111 = &v10[3 * v110];
              v104 = v105[2];
              if (v111[2] >= v104)
                goto LABEL_145;
              v155 = *(_OWORD *)v105;
              do
              {
                v112 = v105;
                v105 = v111;
                *(_OWORD *)v112 = *(_OWORD *)v111;
                v112[2] = v111[2];
                if (!v110)
                  break;
                v110 = (v110 - 1) >> 1;
                v111 = &v10[3 * v110];
              }
              while (v111[2] < v104);
              v101 = v155;
            }
            *(_OWORD *)v105 = v101;
            v105[2] = v104;
LABEL_145:
            v92 = v100-- <= 2;
          }
          while (!v92);
        }
        return result;
    }
  }
}

BOOL sub_20FDC8A1C(double *a1, double *a2)
{
  unint64_t v4;
  _BOOL8 result;
  double v6;
  __int128 v7;
  __int128 *v8;
  double *v9;
  double v10;
  double v11;
  __int128 v12;
  double *v13;
  __int128 *v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  double v22;
  __int128 v23;
  double v24;
  double v25;
  __int128 v26;
  double v27;
  __int128 v28;
  double v29;
  __int128 v30;
  __int128 v31;
  double v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  double *v39;
  uint64_t v40;
  int v41;
  double v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a1[2];
      if (*(a2 - 1) < v6)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 3);
        a1[2] = *(a2 - 1);
        *(_OWORD *)(a2 - 3) = v7;
        goto LABEL_25;
      }
      return result;
    case 3uLL:
      v8 = (__int128 *)(a1 + 3);
      v9 = a2 - 3;
      v10 = a1[5];
      v6 = a1[2];
      v11 = *(a2 - 1);
      if (v10 >= v6)
      {
        if (v11 < v10)
        {
          v31 = *v8;
          *v8 = *(_OWORD *)v9;
          a1[5] = *(a2 - 1);
          *(_OWORD *)v9 = v31;
          *(a2 - 1) = v10;
          v32 = a1[5];
          v33 = a1[2];
          if (v32 < v33)
          {
            v34 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v8;
            a1[2] = v32;
            *v8 = v34;
            a1[5] = v33;
          }
        }
      }
      else
      {
        if (v11 >= v10)
        {
          v37 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v8;
          a1[2] = v10;
          *v8 = v37;
          a1[5] = v6;
          if (*(a2 - 1) >= v6)
            return result;
          v12 = *v8;
          *v8 = *(_OWORD *)v9;
          a1[5] = *(a2 - 1);
        }
        else
        {
          v12 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v9;
          a1[2] = *(a2 - 1);
        }
        *(_OWORD *)v9 = v12;
LABEL_25:
        *(a2 - 1) = v6;
      }
      return result;
    case 4uLL:
      sub_20FDC8E2C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      v19 = (__int128 *)(a1 + 3);
      v20 = (__int128 *)(a1 + 6);
      v21 = (__int128 *)(a1 + 9);
      sub_20FDC8E2C(a1, a1 + 3, a1 + 6, a1 + 9);
      v22 = a1[11];
      if (*(a2 - 1) < v22)
      {
        v23 = *v21;
        *v21 = *(_OWORD *)(a2 - 3);
        a1[11] = *(a2 - 1);
        *(_OWORD *)(a2 - 3) = v23;
        *(a2 - 1) = v22;
        v24 = a1[11];
        v25 = a1[8];
        if (v24 < v25)
        {
          v26 = *v20;
          *v20 = *v21;
          a1[8] = v24;
          *v21 = v26;
          a1[11] = v25;
          v27 = a1[5];
          if (v24 < v27)
          {
            v28 = *v19;
            *v19 = *v20;
            a1[5] = v24;
            *v20 = v28;
            a1[8] = v27;
            v29 = a1[2];
            if (v24 < v29)
            {
              v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              a1[2] = v24;
              *v19 = v30;
              a1[5] = v29;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 6;
      v14 = (__int128 *)(a1 + 3);
      v15 = a1[5];
      v16 = a1[2];
      v17 = a1[8];
      if (v15 >= v16)
      {
        if (v17 < v15)
        {
          v35 = *v14;
          *v14 = *(_OWORD *)v13;
          a1[5] = v17;
          *(_OWORD *)v13 = v35;
          a1[8] = v15;
          if (v17 < v16)
          {
            v36 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v14;
            a1[2] = v17;
            *v14 = v36;
            a1[5] = v16;
          }
        }
      }
      else
      {
        if (v17 >= v15)
        {
          v38 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v14;
          a1[2] = v15;
          *v14 = v38;
          a1[5] = v16;
          if (v17 >= v16)
            goto LABEL_30;
          v18 = *v14;
          *v14 = *(_OWORD *)v13;
          a1[5] = v17;
        }
        else
        {
          v18 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          a1[2] = v17;
        }
        *(_OWORD *)v13 = v18;
        a1[8] = v16;
      }
LABEL_30:
      v39 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v40 = 0;
      v41 = 0;
      break;
  }
  while (1)
  {
    v42 = v39[2];
    if (v42 < v13[2])
      break;
LABEL_33:
    v13 = v39;
    v40 += 24;
    v39 += 3;
    if (v39 == a2)
      return 1;
  }
  v46 = *(_OWORD *)v39;
  v43 = v40;
  do
  {
    v44 = (char *)a1 + v43;
    *(_OWORD *)(v44 + 72) = *(_OWORD *)((char *)a1 + v43 + 48);
    *((double *)v44 + 11) = *(double *)((char *)a1 + v43 + 64);
    if (v43 == -48)
    {
      *(_OWORD *)a1 = v46;
      a1[2] = v42;
      if (++v41 != 8)
        goto LABEL_33;
      return v39 + 3 == a2;
    }
    v43 -= 24;
  }
  while (v42 < *((double *)v44 + 5));
  v45 = (char *)a1 + v43;
  *(_OWORD *)(v45 + 72) = v46;
  *((double *)v45 + 11) = v42;
  if (++v41 != 8)
    goto LABEL_33;
  return v39 + 3 == a2;
}

double *sub_20FDC8E2C(double *result, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  __int128 v7;
  __int128 v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  __int128 v14;
  double v15;
  __int128 v16;

  v4 = a2[2];
  v5 = result[2];
  v6 = a3[2];
  if (v4 >= v5)
  {
    if (v6 < v4)
    {
      v8 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = a3[2];
      *(_OWORD *)a3 = v8;
      a3[2] = v4;
      v9 = result[2];
      v6 = v4;
      if (a2[2] < v9)
      {
        v10 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)a2;
        result[2] = a2[2];
        *(_OWORD *)a2 = v10;
        a2[2] = v9;
        v6 = a3[2];
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      v7 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
      result[2] = a3[2];
LABEL_9:
      *(_OWORD *)a3 = v7;
      a3[2] = v5;
      v6 = v5;
      goto LABEL_10;
    }
    v11 = *(_OWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = a2[2];
    *(_OWORD *)a2 = v11;
    a2[2] = v5;
    v6 = a3[2];
    if (v6 < v5)
    {
      v7 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = a3[2];
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4[2] < v6)
  {
    v12 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = a4[2];
    *(_OWORD *)a4 = v12;
    a4[2] = v6;
    v13 = a2[2];
    if (a3[2] < v13)
    {
      v14 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = a3[2];
      *(_OWORD *)a3 = v14;
      a3[2] = v13;
      v15 = result[2];
      if (a2[2] < v15)
      {
        v16 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)a2;
        result[2] = a2[2];
        *(_OWORD *)a2 = v16;
        a2[2] = v15;
      }
    }
  }
  return result;
}

void sub_20FDC8F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, char a6, uint64_t a7, char a8)
{
  char *v13;
  char *v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  std::mutex **v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::mutex *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  unsigned __int8 v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  _OWORD *v77;
  int v78;
  _OWORD *v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _OWORD *v97;
  uint64_t v98;
  _OWORD *v99;
  void **v100;
  void **v101;
  __int128 v102;
  size_t v103;
  void **v104;
  char v105;
  __int128 v106;
  void *v107;
  size_t v108;
  void **v109;
  char v110;
  __int128 v111;
  void *v112;
  size_t v113;
  void **v114;
  char v115;
  __int128 v116;
  void *v117;
  size_t v118;
  void **v119;
  char v120;
  __int128 v121;
  void *v122;
  size_t v123;
  void **v124;
  char v125;
  __int128 v126;
  void *v127;
  size_t v128;
  __int128 v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  std::chrono::steady_clock::time_point v133;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v134;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v135;
  std::chrono::steady_clock::time_point v136;
  std::chrono::system_clock::time_point v137;
  _BYTE *v138;
  int v139;
  uint64_t v140;
  char v141;
  void *v142;
  char v143;
  __int128 v144;
  std::__shared_weak_count *v145;
  void *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  std::mutex *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  void *v173[2];
  char v174;
  char v175;
  void *v176;
  char v177;
  void *v178;
  char v179;
  char v180;
  char v181;
  void *v182[2];
  char v183;
  char v184;
  void *v185;
  char v186;
  void *v187;
  char v188;
  char v189;
  char v190;
  void *v191[2];
  char v192;
  char v193;
  void *v194;
  char v195;
  void *v196;
  char v197;
  char v198;
  char v199;
  __int128 v200;
  _QWORD v201[2];
  _BYTE __p[32];
  __int128 v203;
  __int128 v204;
  __int128 v205;
  void *v206[3];
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  char v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  std::unique_lock<std::mutex> __lk;
  void *v223[2];
  char v224;
  unsigned __int8 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  char v231;
  char v232;
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  v13 = (char *)operator new(0x4B8uLL);
  *(_OWORD *)(v13 + 8) = 0u;
  *(_QWORD *)v13 = &off_24CA07788;
  v14 = v13 + 64;
  bzero(v13 + 64, 0x468uLL);
  *((_QWORD *)v13 + 3) = &off_24CA07308;
  v15 = v13 + 24;
  *((_QWORD *)v13 + 4) = &unk_24CA07370;
  *((_QWORD *)v13 + 5) = &unk_24CA073A8;
  v13[104] = 0;
  v13[144] = 0;
  v13[176] = 0;
  v13[472] = 0;
  v13[712] = 0;
  v13[752] = 0;
  v13[64] = 0;
  *((_QWORD *)v13 + 101) = 850045863;
  *((_OWORD *)v13 + 51) = 0u;
  *((_OWORD *)v13 + 52) = 0u;
  *((_OWORD *)v13 + 53) = 0u;
  *((_QWORD *)v13 + 108) = 0;
  *((_QWORD *)v13 + 109) = 1018212795;
  *((_OWORD *)v13 + 55) = 0u;
  *((_OWORD *)v13 + 56) = 0u;
  *((_QWORD *)v13 + 114) = 0;
  v13[1128] = 0;
  v13[1184] = 0;
  *(_OWORD *)(v13 + 1192) = 0u;
  *((_QWORD *)v13 + 145) = 0;
  *(_OWORD *)(v13 + 1144) = 0u;
  v13[1168] = 0;
  v16 = (unint64_t *)(v13 + 16);
  *(_QWORD *)&v200 = v13 + 24;
  *((_QWORD *)&v200 + 1) = v13;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  *((_QWORD *)v13 + 6) = v15;
  *((_QWORD *)v13 + 7) = v13;
  v19 = a5;
  v18 = a2;
  if (*(_BYTE *)(a3 + 32))
  {
    v20 = *(_QWORD *)(a3 + 24);
    if (v20)
    {
      if (v20 == a3)
      {
        *((_QWORD *)v13 + 11) = v14;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)a3 + 24))(a3, v14);
        goto LABEL_9;
      }
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
    *((_QWORD *)v13 + 11) = v20;
LABEL_9:
    v13[96] = 1;
    v15 = (char *)v200;
  }
  v21 = v15 + 80;
  if (v15[112] == *(_BYTE *)(a4 + 32))
  {
    if (!v15[112])
      goto LABEL_43;
    v22 = *(_QWORD *)(a4 + 24);
    if (v22)
    {
      if (v22 == a4)
      {
        *(_QWORD *)&__p[24] = __p;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, __p);
LABEL_28:
        if (__p != v21)
        {
          v26 = *(_QWORD *)&__p[24];
          v27 = (_BYTE *)*((_QWORD *)v15 + 13);
          if (*(_BYTE **)&__p[24] == __p)
          {
            if (v27 == v21)
            {
              (*(void (**)(_BYTE *, std::unique_lock<std::mutex> *))(*(_QWORD *)__p + 24))(__p, &__lk);
              (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
              *(_QWORD *)&__p[24] = 0;
              (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)v15 + 13) + 24))(*((_QWORD *)v15 + 13), __p);
              (*(void (**)(_QWORD))(**((_QWORD **)v15 + 13) + 32))(*((_QWORD *)v15 + 13));
              *((_QWORD *)v15 + 13) = 0;
              *(_QWORD *)&__p[24] = __p;
              (*(void (**)(std::unique_lock<std::mutex> *, char *))&__lk.__m_->__m_.__opaque[16])(&__lk, v15 + 80);
              (*(void (**)(std::unique_lock<std::mutex> *))&__lk.__m_->__m_.__opaque[24])(&__lk);
              *((_QWORD *)v15 + 13) = v21;
              v28 = *(_QWORD **)&__p[24];
              if (*(_BYTE **)&__p[24] == __p)
                goto LABEL_32;
            }
            else
            {
              (*(void (**)(_BYTE *, char *))(*(_QWORD *)__p + 24))(__p, v15 + 80);
              (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
              *(_QWORD *)&__p[24] = *((_QWORD *)v15 + 13);
              v30 = *(_BYTE **)&__p[24];
              *((_QWORD *)v15 + 13) = v21;
              v28 = v30;
              if (v30 == __p)
                goto LABEL_32;
            }
            goto LABEL_38;
          }
          if (v27 != v21)
          {
            *(_QWORD *)&__p[24] = *((_QWORD *)v15 + 13);
            *((_QWORD *)v15 + 13) = v26;
            v28 = v27;
            if (v27 == __p)
            {
LABEL_32:
              v29 = 4;
              v28 = __p;
LABEL_40:
              (*(void (**)(void))(*v28 + 8 * v29))();
              goto LABEL_43;
            }
LABEL_38:
            if (!v28)
              goto LABEL_43;
            v29 = 5;
            goto LABEL_40;
          }
          (*(void (**)(char *, _BYTE *))(*(_QWORD *)v21 + 24))(v15 + 80, __p);
          (*(void (**)(_QWORD))(**((_QWORD **)v15 + 13) + 32))(*((_QWORD *)v15 + 13));
          *((_QWORD *)v15 + 13) = *(_QWORD *)&__p[24];
          *(_QWORD *)&__p[24] = __p;
        }
        v28 = *(_QWORD **)&__p[24];
        if (*(_BYTE **)&__p[24] == __p)
          goto LABEL_32;
        goto LABEL_38;
      }
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    }
    *(_QWORD *)&__p[24] = v22;
    goto LABEL_28;
  }
  if (v15[112])
  {
    v23 = (_BYTE *)*((_QWORD *)v15 + 13);
    if (v23 == v21)
    {
      v24 = 4;
    }
    else
    {
      if (!v23)
      {
LABEL_26:
        v15[112] = 0;
        goto LABEL_43;
      }
      v24 = 5;
      v21 = (_BYTE *)*((_QWORD *)v15 + 13);
    }
    (*(void (**)(_BYTE *))(*(_QWORD *)v21 + 8 * v24))(v21);
    goto LABEL_26;
  }
  v25 = *(_QWORD *)(a4 + 24);
  if (v25)
  {
    if (v25 == a4)
    {
      *((_QWORD *)v15 + 13) = v21;
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24), v15 + 80);
      goto LABEL_42;
    }
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  }
  *((_QWORD *)v15 + 13) = v25;
LABEL_42:
  v15[112] = 1;
LABEL_43:
  *(_BYTE *)(v200 + 1112) = 0;
  v31 = operator new();
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  v32 = (std::mutex **)(v31 + 32);
  *(_QWORD *)(v31 + 48) = 0;
  *(_OWORD *)v31 = 0u;
  if (a8)
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a7 + 96))(__p, a7);
    v33 = *(_QWORD *)__p;
    v34 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v35 = (unint64_t *)(*(_QWORD *)&__p[8] + 16);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = *(std::__shared_weak_count **)(v31 + 8);
    *(_QWORD *)v31 = v33;
    *(_QWORD *)(v31 + 8) = v34;
    if (v37)
    {
      std::__shared_weak_count::__release_weak(v37);
      v34 = *(std::__shared_weak_count **)&__p[8];
    }
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a7 + 80))(__p, a7);
    v40 = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v41 = *(std::__shared_weak_count **)(v31 + 48);
    *(_OWORD *)(v31 + 40) = v40;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v45 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      goto LABEL_81;
    }
  }
  else
  {
    v47 = operator new(0x28uLL);
    v47[1] = 0;
    v47[2] = 0;
    *v47 = &off_24CA07738;
    *(_QWORD *)&__lk.__owns_ = 0;
    v223[0] = 0;
    __lk.__m_ = 0;
    __p[0] = 0;
    __p[24] = 0;
    sub_20FF20DA0(v47 + 3, 1, (uint64_t)&__lk, (uint64_t *)__p);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (__lk.__m_)
    {
      *(_QWORD *)&__lk.__owns_ = __lk.__m_;
      operator delete(__lk.__m_);
    }
    v48 = *(std::__shared_weak_count **)(v31 + 24);
    *(_QWORD *)(v31 + 16) = v47 + 3;
    *(_QWORD *)(v31 + 24) = v47;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = operator new();
    *(_QWORD *)v51 = 850045863;
    *(_OWORD *)(v51 + 8) = 0u;
    *(_OWORD *)(v51 + 24) = 0u;
    *(_OWORD *)(v51 + 40) = 0u;
    *(_QWORD *)(v51 + 56) = 0;
    v52 = *v32;
    *v32 = (std::mutex *)v51;
    if (v52)
    {
      std::mutex::~mutex(v52);
      MEMORY[0x212BC6398]();
    }
    v54 = *(_QWORD *)(v31 + 16);
    v53 = *(_QWORD *)(v31 + 24);
    if (v53)
    {
      v55 = (unint64_t *)(v53 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v44 = *(std::__shared_weak_count **)(v31 + 48);
    *(_QWORD *)(v31 + 40) = v54;
    *(_QWORD *)(v31 + 48) = v53;
    if (v44)
    {
      v57 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v57);
      while (__stlxr(v46 - 1, v57));
LABEL_81:
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  v58 = *(_QWORD **)(v200 + 1120);
  *(_QWORD *)(v200 + 1120) = v31;
  if (v58)
    sub_20FDD0110(v58);
  v59 = atomic_load((unsigned __int8 *)&qword_254A6C558);
  if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C558))
  {
    sub_20E8965F4();
    __cxa_atexit((void (*)(void *))sub_20E896798, &qword_254A6C560, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C558);
    v19 = a5;
    v18 = a2;
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)qword_254A6C560;
  sub_20E893368((unsigned int *)__p, (uint64_t *)&__lk);
  v60 = ((unint64_t)__p[12] << 32) | ((unint64_t)__p[13] << 40) | *(_DWORD *)&__p[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&__p[12] << 32) & 0xFF00000000000000 | ((unint64_t)__p[14] << 48) | __p[8] & 0x3F | 0x80;
  v61 = v200;
  *(_QWORD *)(v200 + 1128) = (*(unsigned int *)__p | ((unint64_t)__p[4] << 32) | ((unint64_t)__p[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)__p[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&__p[4]) & 0xF | 0x40u) << 48);
  *(_QWORD *)(v61 + 1136) = v60;
  if (*(_BYTE *)(v18 + 40))
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v200;
    *(_QWORD *)&__lk.__owns_ = v18;
    v201[0] = &off_24CA074F8;
    v201[1] = &__lk;
    sub_210235BBC((uint64_t)v201, (uint64_t)__p);
    if (!BYTE8(v208))
      goto LABEL_276;
    v61 = v200;
  }
  v62 = v18 + 72;
  v63 = (_BYTE *)(v61 + 688);
  if (*(unsigned __int8 *)(v61 + 720) != *(unsigned __int8 *)(v18 + 104))
  {
    if (*(_BYTE *)(v61 + 720))
    {
      v66 = *(_BYTE **)(v61 + 712);
      if (v66 == v63)
      {
        v67 = 4;
      }
      else
      {
        if (!v66)
          goto LABEL_106;
        v67 = 5;
        v63 = *(_BYTE **)(v61 + 712);
      }
      (*(void (**)(_BYTE *))(*(_QWORD *)v63 + 8 * v67))(v63);
LABEL_106:
      *(_BYTE *)(v61 + 720) = 0;
      if (!a6)
        goto LABEL_107;
      goto LABEL_130;
    }
    v68 = *(_QWORD *)(v18 + 96);
    if (v68)
    {
      if (v68 == v62)
      {
        *(_QWORD *)(v61 + 712) = v63;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v18 + 96) + 24))(*(_QWORD *)(v18 + 96), v61 + 688);
        goto LABEL_128;
      }
      v69 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v68 + 16))(*(_QWORD *)(v18 + 96));
    }
    else
    {
      v69 = 0;
    }
    *(_QWORD *)(v61 + 712) = v69;
LABEL_128:
    *(_BYTE *)(v61 + 720) = 1;
LABEL_129:
    if (!a6)
      goto LABEL_107;
    goto LABEL_130;
  }
  if (!*(_BYTE *)(v61 + 720))
    goto LABEL_129;
  v64 = *(_QWORD *)(v18 + 96);
  if (!v64)
  {
    v65 = 0;
    goto LABEL_103;
  }
  if (v64 != v62)
  {
    v65 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v64 + 16))(*(_QWORD *)(v18 + 96));
LABEL_103:
    *(_QWORD *)&__p[24] = v65;
    goto LABEL_111;
  }
  *(_QWORD *)&__p[24] = __p;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 24))(v62, __p);
LABEL_111:
  if (__p == v63)
    goto LABEL_123;
  v72 = *(_QWORD *)&__p[24];
  v73 = *(_BYTE **)(v61 + 712);
  if (*(_BYTE **)&__p[24] == __p)
  {
    if (v73 == v63)
    {
      (*(void (**)(_BYTE *, std::unique_lock<std::mutex> *))(*(_QWORD *)__p + 24))(__p, &__lk);
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
      *(_QWORD *)&__p[24] = 0;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v61 + 712) + 24))(*(_QWORD *)(v61 + 712), __p);
      (*(void (**)(_QWORD))(**(_QWORD **)(v61 + 712) + 32))(*(_QWORD *)(v61 + 712));
      *(_QWORD *)(v61 + 712) = 0;
      *(_QWORD *)&__p[24] = __p;
      (*(void (**)(std::unique_lock<std::mutex> *, uint64_t))&__lk.__m_->__m_.__opaque[16])(&__lk, v61 + 688);
      (*(void (**)(std::unique_lock<std::mutex> *))&__lk.__m_->__m_.__opaque[24])(&__lk);
      *(_QWORD *)(v61 + 712) = v63;
      v74 = *(_BYTE **)&__p[24];
      if (*(_BYTE **)&__p[24] != __p)
        goto LABEL_124;
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)__p + 24))(__p, v61 + 688);
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
      *(_QWORD *)&__p[24] = *(_QWORD *)(v61 + 712);
      v75 = *(_BYTE **)&__p[24];
      *(_QWORD *)(v61 + 712) = v63;
      v74 = v75;
      if (v75 != __p)
        goto LABEL_124;
    }
LABEL_115:
    (*(void (**)(void))(*(_QWORD *)__p + 32))();
    if (!a6)
      goto LABEL_107;
    goto LABEL_130;
  }
  if (v73 == v63)
  {
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v63 + 24))(v61 + 688, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v61 + 712) + 32))(*(_QWORD *)(v61 + 712));
    *(_QWORD *)(v61 + 712) = *(_QWORD *)&__p[24];
    *(_QWORD *)&__p[24] = __p;
LABEL_123:
    v74 = *(_BYTE **)&__p[24];
    if (*(_BYTE **)&__p[24] != __p)
      goto LABEL_124;
    goto LABEL_115;
  }
  *(_QWORD *)&__p[24] = *(_QWORD *)(v61 + 712);
  *(_QWORD *)(v61 + 712) = v72;
  v74 = v73;
  if (v73 == __p)
    goto LABEL_115;
LABEL_124:
  if (!v74)
    goto LABEL_129;
  (*(void (**)(_BYTE *))(*(_QWORD *)v74 + 40))(v74);
  if (!a6)
  {
LABEL_107:
    v70 = *(unsigned __int8 *)(v18 + 48);
    v71 = v200;
    *(_BYTE *)(v200 + 896) = v70;
    if (v70 < 3)
    {
      if (!*(_BYTE *)(v18 + 40))
        goto LABEL_329;
      goto LABEL_259;
    }
LABEL_249:
    sub_20E89F6D4(v191, "Invalid sync type value");
    v199 = 1;
    sub_21022F9AC((uint64_t)v191, (uint64_t)__p);
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if ((_BYTE)v208)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v131 = BYTE8(v203);
      if (BYTE8(v203))
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)&__p[16];
        *(_QWORD *)(a1 + 32) = v203;
        *(_QWORD *)&__p[24] = 0;
        *(_QWORD *)&v203 = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if ((_BYTE)v207)
      {
        v132 = *((_QWORD *)&v205 + 1);
        *(_QWORD *)(a1 + 64) = v205;
        *(_OWORD *)(a1 + 48) = v204;
        v204 = 0uLL;
        *(_QWORD *)(a1 + 72) = v132;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v206;
        *(void **)(a1 + 96) = v206[2];
        *(_QWORD *)&v205 = 0;
        memset(v206, 0, sizeof(v206));
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v131 && SBYTE7(v203) < 0)
        operator delete(*(void **)&__p[16]);
      if (!v199)
        goto LABEL_399;
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
      if (!v199)
        goto LABEL_399;
    }
    if (v198)
    {
      if (v197 < 0)
        operator delete(v196);
      if (v195 < 0)
        operator delete(v194);
    }
    if (v193 && v192 < 0)
    {
      operator delete(v191[0]);
      v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
      if (!*((_QWORD *)&v200 + 1))
        return;
      goto LABEL_400;
    }
    goto LABEL_399;
  }
LABEL_130:
  sub_20FF38364(v19, v200, (uint64_t)__p);
  v76 = v200;
  v77 = (_OWORD *)(v200 + 392);
  v78 = *(unsigned __int8 *)(v200 + 440);
  *(_BYTE *)(v200 + 152) = __p[0];
  v79 = (_OWORD *)(v76 + 160);
  if (v78)
  {
    sub_20FDD055C((uint64_t)v79, (uint64_t)&__p[8]);
    v80 = v219;
    v219 = 0uLL;
    v81 = *(std::__shared_weak_count **)(v76 + 400);
    *v77 = v80;
    if (v81)
      std::__shared_weak_count::__release_weak(v81);
    v82 = v220;
    v220 = 0uLL;
    v83 = *(std::__shared_weak_count **)(v76 + 416);
    v77[1] = v82;
    if (v83)
      std::__shared_weak_count::__release_weak(v83);
    v84 = v221;
    v221 = 0uLL;
    v85 = *(std::__shared_weak_count **)(v76 + 432);
    v77[2] = v84;
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
  else
  {
    *v79 = *(_OWORD *)&__p[8];
    v88 = *(_DWORD *)&__p[24];
    *(_BYTE *)(v76 + 184) = 0;
    *(_DWORD *)(v76 + 176) = v88;
    *(_BYTE *)(v76 + 208) = 0;
    if (BYTE8(v204))
    {
      *(_OWORD *)(v76 + 184) = v203;
      *(_QWORD *)(v76 + 200) = v204;
      *(_QWORD *)&v204 = 0;
      v203 = 0uLL;
      *(_BYTE *)(v76 + 208) = 1;
    }
    *(_BYTE *)(v76 + 216) = 0;
    *(_BYTE *)(v76 + 360) = 0;
    if (v216)
    {
      v89 = v207;
      *(void **)(v76 + 232) = v206[0];
      *(_OWORD *)(v76 + 216) = v205;
      v205 = 0uLL;
      v90 = *(_OWORD *)&v206[1];
      v206[0] = 0;
      v206[1] = 0;
      *(_QWORD *)(v76 + 256) = v89;
      v91 = v211;
      *(_QWORD *)(v76 + 280) = v209;
      *(_QWORD *)(v76 + 304) = v91;
      v92 = v215;
      *(_QWORD *)(v76 + 328) = v213;
      *(_OWORD *)(v76 + 240) = v90;
      v206[2] = 0;
      v207 = 0;
      *(_OWORD *)(v76 + 264) = v208;
      v208 = 0uLL;
      *(_OWORD *)(v76 + 288) = v210;
      v209 = 0;
      v210 = 0uLL;
      v211 = 0;
      *(_OWORD *)(v76 + 312) = v212;
      v212 = 0uLL;
      v93 = v214;
      *(_QWORD *)(v76 + 352) = v92;
      *(_OWORD *)(v76 + 336) = v93;
      v213 = 0;
      v214 = 0uLL;
      v215 = 0;
      *(_BYTE *)(v76 + 360) = 1;
    }
    *(_OWORD *)(v76 + 368) = v217;
    *(_QWORD *)(v76 + 384) = v218;
    *v77 = v219;
    v219 = 0uLL;
    v77[1] = v220;
    v220 = 0uLL;
    v77[2] = v221;
    v221 = 0uLL;
    *(_BYTE *)(v76 + 440) = 1;
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
  if (*((_QWORD *)&v221 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (*((_QWORD *)&v220 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v220 + 1));
  if (*((_QWORD *)&v219 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v219 + 1));
  if (!v216)
    goto LABEL_161;
  if (SHIBYTE(v215) < 0)
  {
    operator delete((void *)v214);
    if ((SHIBYTE(v213) & 0x80000000) == 0)
    {
LABEL_157:
      if ((SHIBYTE(v211) & 0x80000000) == 0)
        goto LABEL_158;
      goto LABEL_176;
    }
  }
  else if ((SHIBYTE(v213) & 0x80000000) == 0)
  {
    goto LABEL_157;
  }
  operator delete((void *)v212);
  if ((SHIBYTE(v211) & 0x80000000) == 0)
  {
LABEL_158:
    if ((SHIBYTE(v209) & 0x80000000) == 0)
      goto LABEL_159;
LABEL_177:
    operator delete((void *)v208);
    if ((SHIBYTE(v207) & 0x80000000) == 0)
    {
LABEL_160:
      if ((SHIBYTE(v206[0]) & 0x80000000) == 0)
        goto LABEL_161;
LABEL_179:
      operator delete((void *)v205);
      if (!BYTE8(v204))
        goto LABEL_164;
      goto LABEL_162;
    }
    goto LABEL_178;
  }
LABEL_176:
  operator delete((void *)v210);
  if (SHIBYTE(v209) < 0)
    goto LABEL_177;
LABEL_159:
  if ((SHIBYTE(v207) & 0x80000000) == 0)
    goto LABEL_160;
LABEL_178:
  operator delete(v206[1]);
  if (SHIBYTE(v206[0]) < 0)
    goto LABEL_179;
LABEL_161:
  if (!BYTE8(v204))
    goto LABEL_164;
LABEL_162:
  if (SBYTE7(v204) < 0)
    operator delete((void *)v203);
LABEL_164:
  v97 = v19 + 5;
  v98 = v200;
  v99 = (_OWORD *)(v200 + 448);
  if (*(_BYTE *)(v200 + 680))
  {
    *v99 = *v97;
    *(_DWORD *)(v98 + 464) = *((_DWORD *)v19 + 14);
    sub_20E869118(v98 + 472, v19 + 8);
    v100 = (void **)(v98 + 504);
    v101 = (void **)(v19 + 12);
    if (*(unsigned __int8 *)(v98 + 648) == *((unsigned __int8 *)v19 + 240))
    {
      if (*(_BYTE *)(v98 + 648) && v100 != v101)
      {
        if (*(char *)(v98 + 527) < 0)
        {
          if (*((char *)v19 + 119) >= 0)
          {
            v103 = *((unsigned __int8 *)v19 + 119);
          }
          else
          {
            v101 = (void **)v19[12];
            v103 = v19[13];
          }
          sub_20E867CBC(v100, v101, v103);
        }
        else if ((*((_BYTE *)v19 + 119) & 0x80) != 0)
        {
          sub_20E867BF8(v100, (void *)v19[12], v19[13]);
        }
        else
        {
          v102 = *(_OWORD *)v101;
          *(_QWORD *)(v98 + 520) = v19[14];
          *(_OWORD *)v100 = v102;
        }
        v104 = (void **)(v98 + 528);
        v105 = *((_BYTE *)v19 + 143);
        if (*(char *)(v98 + 551) < 0)
        {
          if (v105 >= 0)
            v107 = v19 + 15;
          else
            v107 = (void *)v19[15];
          if (v105 >= 0)
            v108 = *((unsigned __int8 *)v19 + 143);
          else
            v108 = v19[16];
          sub_20E867CBC(v104, v107, v108);
        }
        else if ((*((_BYTE *)v19 + 143) & 0x80) != 0)
        {
          sub_20E867BF8(v104, (void *)v19[15], v19[16]);
        }
        else
        {
          v106 = *(_OWORD *)(v19 + 15);
          *(_QWORD *)(v98 + 544) = v19[17];
          *(_OWORD *)v104 = v106;
        }
        v109 = (void **)(v98 + 552);
        v110 = *((_BYTE *)v19 + 167);
        if (*(char *)(v98 + 575) < 0)
        {
          if (v110 >= 0)
            v112 = v19 + 18;
          else
            v112 = (void *)v19[18];
          if (v110 >= 0)
            v113 = *((unsigned __int8 *)v19 + 167);
          else
            v113 = v19[19];
          sub_20E867CBC(v109, v112, v113);
        }
        else if ((*((_BYTE *)v19 + 167) & 0x80) != 0)
        {
          sub_20E867BF8(v109, (void *)v19[18], v19[19]);
        }
        else
        {
          v111 = *((_OWORD *)v19 + 9);
          *(_QWORD *)(v98 + 568) = v19[20];
          *(_OWORD *)v109 = v111;
        }
        v114 = (void **)(v98 + 576);
        v115 = *((_BYTE *)v19 + 191);
        if (*(char *)(v98 + 599) < 0)
        {
          if (v115 >= 0)
            v117 = v19 + 21;
          else
            v117 = (void *)v19[21];
          if (v115 >= 0)
            v118 = *((unsigned __int8 *)v19 + 191);
          else
            v118 = v19[22];
          sub_20E867CBC(v114, v117, v118);
        }
        else if ((*((_BYTE *)v19 + 191) & 0x80) != 0)
        {
          sub_20E867BF8(v114, (void *)v19[21], v19[22]);
        }
        else
        {
          v116 = *(_OWORD *)(v19 + 21);
          *(_QWORD *)(v98 + 592) = v19[23];
          *(_OWORD *)v114 = v116;
        }
        v119 = (void **)(v98 + 600);
        v120 = *((_BYTE *)v19 + 215);
        if (*(char *)(v98 + 623) < 0)
        {
          if (v120 >= 0)
            v122 = v19 + 24;
          else
            v122 = (void *)v19[24];
          if (v120 >= 0)
            v123 = *((unsigned __int8 *)v19 + 215);
          else
            v123 = v19[25];
          sub_20E867CBC(v119, v122, v123);
        }
        else if ((*((_BYTE *)v19 + 215) & 0x80) != 0)
        {
          sub_20E867BF8(v119, (void *)v19[24], v19[25]);
        }
        else
        {
          v121 = *((_OWORD *)v19 + 12);
          *(_QWORD *)(v98 + 616) = v19[26];
          *(_OWORD *)v119 = v121;
        }
        v124 = (void **)(v98 + 624);
        v125 = *((_BYTE *)v19 + 239);
        if (*(char *)(v98 + 647) < 0)
        {
          if (v125 >= 0)
            v127 = v19 + 27;
          else
            v127 = (void *)v19[27];
          if (v125 >= 0)
            v128 = *((unsigned __int8 *)v19 + 239);
          else
            v128 = v19[28];
          sub_20E867CBC(v124, v127, v128);
        }
        else if ((*((_BYTE *)v19 + 239) & 0x80) != 0)
        {
          sub_20E867BF8(v124, (void *)v19[27], v19[28]);
        }
        else
        {
          v126 = *(_OWORD *)(v19 + 27);
          *(_QWORD *)(v98 + 640) = v19[29];
          *(_OWORD *)v124 = v126;
        }
      }
    }
    else if (*(_BYTE *)(v98 + 648))
    {
      sub_20FDD0860((uint64_t)v100);
    }
    else
    {
      sub_20FCF4B4C((char *)v100, (__int128 *)v101);
      *(_BYTE *)(v98 + 648) = 1;
    }
    v129 = *(_OWORD *)(v19 + 31);
    *(_QWORD *)(v98 + 672) = v19[33];
    *(_OWORD *)(v98 + 656) = v129;
  }
  else
  {
    sub_20FDD0914((uint64_t)v99, (uint64_t)v97);
    *(_BYTE *)(v98 + 680) = 1;
  }
  sub_20FF37D44(v200 + 152, 1, (uint64_t)__p);
  if (!BYTE8(v208))
  {
LABEL_276:
    __lk = *(std::unique_lock<std::mutex> *)__p;
    v138 = sub_20E89EFE4(v223, (__int128 *)&__p[16]);
    *(std::unique_lock<std::mutex> *)a1 = __lk;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v232)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v139 = v225;
      if (v225)
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v138;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)v138 + 2);
        *((_QWORD *)v138 + 1) = 0;
        *((_QWORD *)v138 + 2) = 0;
        *(_QWORD *)v138 = 0;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if (v231)
      {
        v140 = v228;
        *(_QWORD *)(a1 + 64) = v227;
        *(_OWORD *)(a1 + 48) = v226;
        v226 = 0uLL;
        *(_QWORD *)(a1 + 72) = v140;
        *(_OWORD *)(a1 + 80) = v229;
        *(_QWORD *)(a1 + 96) = v230;
        v227 = 0;
        v229 = 0uLL;
        v230 = 0;
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v139 && v224 < 0)
        operator delete(v223[0]);
      if (BYTE8(v208))
        goto LABEL_399;
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
      if (BYTE8(v208))
        goto LABEL_399;
    }
    if ((_BYTE)v208)
    {
      if ((_BYTE)v207)
      {
        if (SHIBYTE(v206[2]) < 0)
          operator delete(v206[0]);
        if (SBYTE7(v205) < 0)
          operator delete((void *)v204);
      }
      if (BYTE8(v203) && SBYTE7(v203) < 0)
      {
        operator delete(*(void **)&__p[16]);
        v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
        if (!*((_QWORD *)&v200 + 1))
          return;
        goto LABEL_400;
      }
    }
    goto LABEL_399;
  }
  v130 = *(unsigned __int8 *)(v18 + 48);
  v71 = v200;
  *(_BYTE *)(v200 + 896) = v130;
  if (v130 > 2)
    goto LABEL_249;
LABEL_259:
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v71 + 784);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v71 + 784));
  v133.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
  while (!*(_BYTE *)(v71 + 776))
  {
    if (v133.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_)
    {
LABEL_286:
      if (!*(_BYTE *)(v71 + 776))
      {
        v143 = 0;
        goto LABEL_326;
      }
      break;
    }
    v136.__d_.__rep_ = v133.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v136.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v137.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v137.__d_.__rep_)
      {
        v134 = 0;
        goto LABEL_261;
      }
      if (v137.__d_.__rep_ < 1)
      {
        if ((unint64_t)v137.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v134 = 0x8000000000000000;
          goto LABEL_261;
        }
      }
      else if ((unint64_t)v137.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v134 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v136.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_275:
          v135.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_262;
        }
LABEL_261:
        v135.__d_.__rep_ = v134 + v136.__d_.__rep_;
LABEL_262:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v71 + 848), &__lk, v135);
        std::chrono::steady_clock::now();
        goto LABEL_263;
      }
      v134 = 1000 * v137.__d_.__rep_;
      if (1000 * v137.__d_.__rep_ > (v136.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        goto LABEL_275;
      goto LABEL_261;
    }
LABEL_263:
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v133.__d_.__rep_)
      goto LABEL_286;
  }
  if (*(_BYTE *)(v18 + 48) != 2)
  {
LABEL_325:
    v143 = 1;
    goto LABEL_326;
  }
  if (!*(_BYTE *)(v71 + 768))
  {
    if (*(_BYTE *)(v71 + 1104))
    {
      std::condition_variable::~condition_variable((std::condition_variable *)(v71 + 1056));
      v146 = *(void **)(v71 + 1032);
      if (v146)
      {
        *(_QWORD *)(v71 + 1040) = v146;
        operator delete(v146);
      }
      std::mutex::~mutex((std::mutex *)(v71 + 968));
      *(_BYTE *)(v71 + 1104) = 0;
    }
    goto LABEL_325;
  }
  v141 = 2;
  if (*(_BYTE *)(v71 + 744) && !*(_QWORD *)(v71 + 736))
  {
    if (*(_BYTE *)(v71 + 760))
      v141 = 2;
    else
      v141 = 1;
  }
  if (*(_BYTE *)(v71 + 1104))
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(v71 + 1056));
    v142 = *(void **)(v71 + 1032);
    if (v142)
    {
      *(_QWORD *)(v71 + 1040) = v142;
      operator delete(v142);
    }
    std::mutex::~mutex((std::mutex *)(v71 + 968));
  }
  *(_BYTE *)(v71 + 904) = v141;
  *(_BYTE *)(v71 + 912) = 0;
  *(_BYTE *)(v71 + 920) = 0;
  *(_BYTE *)(v71 + 928) = 0;
  *(_BYTE *)(v71 + 936) = 0;
  *(_BYTE *)(v71 + 944) = 0;
  *(_BYTE *)(v71 + 952) = 0;
  *(_OWORD *)(v71 + 960) = xmmword_2103E9640;
  *(_OWORD *)(v71 + 976) = 0u;
  *(_OWORD *)(v71 + 992) = 0u;
  *(_OWORD *)(v71 + 1008) = 0u;
  *(_OWORD *)(v71 + 1024) = 0u;
  *(_OWORD *)(v71 + 1040) = 0u;
  *(_QWORD *)(v71 + 1056) = 1018212795;
  *(_QWORD *)(v71 + 1096) = 0;
  *(_OWORD *)(v71 + 1064) = 0u;
  *(_OWORD *)(v71 + 1080) = 0u;
  v143 = 1;
  *(_BYTE *)(v71 + 1104) = 1;
  v144 = *(_OWORD *)(v71 + 744);
  *(_OWORD *)__p = *(_OWORD *)(v71 + 728);
  *(_OWORD *)&__p[16] = v144;
  *(_QWORD *)&v203 = *(_QWORD *)(v71 + 760);
  sub_20FF1A58C(v71 + 904, (__int128 *)__p);
LABEL_326:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if ((v143 & 1) == 0)
  {
    v149 = v200;
    if (*(_BYTE *)(v200 + 1104))
    {
      std::condition_variable::~condition_variable((std::condition_variable *)(v200 + 1056));
      v150 = *(void **)(v149 + 1032);
      if (v150)
      {
        *(_QWORD *)(v149 + 1040) = v150;
        operator delete(v150);
      }
      std::mutex::~mutex((std::mutex *)(v149 + 968));
      *(_BYTE *)(v149 + 1104) = 0;
    }
    sub_20E89F6D4(v182, "Client received no configuration from server after connection. This might mean the server could be outdated. Make sure to update VisualLogger server to protocol version 1.3.0+ (or same or newer version as the client).");
    v190 = 1;
    sub_20FDCABE4(0xCu, (__int128 *)v182, (uint64_t)__p);
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if ((_BYTE)v208)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v151 = BYTE8(v203);
      if (BYTE8(v203))
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)&__p[16];
        *(_QWORD *)(a1 + 32) = v203;
        *(_QWORD *)&__p[24] = 0;
        *(_QWORD *)&v203 = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if ((_BYTE)v207)
      {
        v152 = *((_QWORD *)&v205 + 1);
        *(_QWORD *)(a1 + 64) = v205;
        *(_OWORD *)(a1 + 48) = v204;
        v204 = 0uLL;
        *(_QWORD *)(a1 + 72) = v152;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v206;
        *(void **)(a1 + 96) = v206[2];
        *(_QWORD *)&v205 = 0;
        memset(v206, 0, sizeof(v206));
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v151 && SBYTE7(v203) < 0)
        operator delete(*(void **)&__p[16]);
      if (!v190)
        goto LABEL_399;
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
      if (!v190)
        goto LABEL_399;
    }
    if (v189)
    {
      if (v188 < 0)
        operator delete(v187);
      if (v186 < 0)
        operator delete(v185);
    }
    if (v184 && v183 < 0)
    {
      operator delete(v182[0]);
      v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
      if (!*((_QWORD *)&v200 + 1))
        return;
      goto LABEL_400;
    }
    goto LABEL_399;
  }
LABEL_329:
  if (!*(_BYTE *)(v18 + 50) || *(_BYTE *)(v18 + 48) == 2)
  {
    v153 = v200;
    if (*(_BYTE *)(v200 + 776) && !*(_BYTE *)(v18 + 50) && *(_BYTE *)(v200 + 768))
    {
      sub_20FDCAD5C((uint64_t)__p, v200, 0, 0);
      if (!BYTE8(v208))
      {
        sub_20ED3C7D0((uint64_t)__p);
        __lk = *(std::unique_lock<std::mutex> *)__p;
        sub_20E89EFE4(v223, (__int128 *)&__p[16]);
        sub_20FDCAA88(a1, (uint64_t)&__lk);
        sub_20E89EF58((uint64_t)&__lk);
        sub_20E89ED1C((uint64_t)__p);
        v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
        if (*((_QWORD *)&v200 + 1))
          goto LABEL_400;
        return;
      }
      sub_20E89ED1C((uint64_t)__p);
      v153 = v200;
    }
    v154 = *(_QWORD *)(v153 + 1120);
    v155 = *(std::mutex **)(v154 + 32);
    if (v155)
    {
      std::mutex::lock(*(std::mutex **)(v154 + 32));
      v157 = *(_QWORD *)(v154 + 40);
      v156 = *(_QWORD *)(v154 + 48);
      *(_QWORD *)__p = v157;
      *(_QWORD *)&__p[8] = v156;
      if (v156)
      {
        v158 = (unint64_t *)(v156 + 8);
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
      }
      std::mutex::unlock(v155);
      v153 = v200;
    }
    else
    {
      v157 = *(_QWORD *)(v154 + 40);
      v160 = *(_QWORD *)(v154 + 48);
      *(_QWORD *)__p = v157;
      *(_QWORD *)&__p[8] = v160;
      if (v160)
      {
        v161 = (unint64_t *)(v160 + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
      }
    }
    if (v153)
      v163 = v153 + 16;
    else
      v163 = 0;
    v164 = *(_QWORD *)(v157 + 8);
    if (!v164)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v164 = *(_QWORD *)(v157 + 8);
    }
    sub_20FF205CC(v164, v163);
    v165 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v166 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    *(_OWORD *)a1 = v200;
    v200 = 0uLL;
    *(_BYTE *)(a1 + 120) = 1;
    goto LABEL_399;
  }
  sub_20E89F6D4(v173, "When syncing is disabled, the first sync point must not be deferred");
  v181 = 1;
  sub_21022F9AC((uint64_t)v173, (uint64_t)__p);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if ((_BYTE)v208)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v147 = BYTE8(v203);
    if (BYTE8(v203))
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)&__p[16];
      *(_QWORD *)(a1 + 32) = v203;
      *(_QWORD *)&__p[24] = 0;
      *(_QWORD *)&v203 = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if ((_BYTE)v207)
    {
      v148 = *((_QWORD *)&v205 + 1);
      *(_QWORD *)(a1 + 64) = v205;
      *(_OWORD *)(a1 + 48) = v204;
      v204 = 0uLL;
      *(_QWORD *)(a1 + 72) = v148;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v206;
      *(void **)(a1 + 96) = v206[2];
      *(_QWORD *)&v205 = 0;
      memset(v206, 0, sizeof(v206));
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v147 && SBYTE7(v203) < 0)
      operator delete(*(void **)&__p[16]);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (!v181)
    goto LABEL_399;
  if (v180)
  {
    if (v179 < 0)
      operator delete(v178);
    if (v177 < 0)
      operator delete(v176);
  }
  if (!v175 || (v174 & 0x80000000) == 0)
  {
LABEL_399:
    v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
    if (*((_QWORD *)&v200 + 1))
      goto LABEL_400;
    return;
  }
  operator delete(v173[0]);
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
  if (!*((_QWORD *)&v200 + 1))
    return;
LABEL_400:
  v168 = (unint64_t *)&v145->__shared_owners_;
  do
    v169 = __ldaxr(v168);
  while (__stlxr(v169 - 1, v168));
  if (!v169)
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
  }
}

void sub_20FDCA91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  __cxa_guard_abort(&qword_254A6C558);
  sub_20E86665C((uint64_t)&a51);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDCAA88(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(result + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      v2 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(result + 16) = v2;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(result + 40) = 1;
    }
    *(_BYTE *)(result + 48) = 0;
    *(_BYTE *)(result + 104) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      v3 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 48) = v3;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
      v4 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(result + 80) = v4;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(result + 104) = 1;
    }
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 120) = 0;
  return result;
}

uint64_t sub_20FDCAB38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 264);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 264);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  sub_20FCF4D74(a1 + 64);
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_20FDCABE4(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_20E89EFE4(v7, a2);
  sub_20FDD0A04((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_20FDCAD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E89F09C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDCAD5C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  std::mutex *v7;
  std::string::size_type v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  char v18;
  __int128 v19;
  _BYTE v20[28];
  int v21;
  __int128 v22;
  __int128 __p;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  _OWORD v33[2];
  int v34;
  char v35;
  _QWORD v36[4];
  __int128 v37;
  __int128 v38;
  char v39;
  unsigned __int8 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  _QWORD v49[2];
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v21 = 9;
  LOBYTE(v22) = 0;
  v32 = 0;
  v7 = (std::mutex *)(a2 + 904);
  LOBYTE(v19) = 0;
  v20[16] = 0;
  *(_DWORD *)&v20[24] = 0;
  v18 = 1;
  v8 = a2 + 152;
  while (1)
  {
    if (*(_BYTE *)(a2 + 896) == 2)
    {
      sub_20FF1A17C(v7, (uint64_t)&v37);
      v19 = v37;
      *(_OWORD *)v20 = v38;
      if (v20[16])
        goto LABEL_9;
    }
    else
    {
      LOBYTE(v19) = 0;
      *((_QWORD *)&v19 + 1) = 0;
      *(_QWORD *)v20 = 0;
      v20[8] = 1;
      if (v20[16])
      {
LABEL_9:
        if (!*(_BYTE *)(a2 + 440))
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    v20[16] = 1;
    if (!*(_BYTE *)(a2 + 440))
      goto LABEL_13;
LABEL_12:
    v33[0] = v19;
    v33[1] = *(_OWORD *)v20;
    v34 = 1;
    v35 = 1;
    sub_20FF37A34(v8, (uint64_t)v33, (uint64_t)&v37);
    if (v48)
      goto LABEL_13;
    sub_20FDCBB4C((uint64_t)&v21, (uint64_t)&v37);
    v18 = 0;
    if (v48 || !v47)
      goto LABEL_13;
    if (!v46)
    {
LABEL_24:
      if (!v40)
        goto LABEL_13;
      goto LABEL_25;
    }
    if (SHIBYTE(v45) < 0)
    {
      operator delete((void *)v44);
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_24;
    }
    else if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete((void *)v41);
    if (!v40)
      goto LABEL_13;
LABEL_25:
    if (v39 < 0)
      operator delete((void *)v38);
LABEL_13:
    if (!*(_BYTE *)(a2 + 144))
      goto LABEL_15;
    v36[0] = a2;
    v36[1] = &v19;
    v36[2] = &v21;
    v36[3] = &v18;
    v49[0] = &off_24CA075C8;
    v49[1] = v36;
    sub_210235BBC((uint64_t)v49, (uint64_t)&v37);
    if (v48)
      goto LABEL_15;
    sub_20FDCBB4C((uint64_t)&v21, (uint64_t)&v37);
    if (v48 || !v47)
      goto LABEL_15;
    if (v46)
    {
      if (SHIBYTE(v45) < 0)
      {
        operator delete((void *)v44);
        if (SHIBYTE(v42) < 0)
        {
LABEL_39:
          operator delete((void *)v41);
          if (!v40)
            goto LABEL_15;
          goto LABEL_33;
        }
      }
      else if (SHIBYTE(v42) < 0)
      {
        goto LABEL_39;
      }
    }
    if (!v40)
      goto LABEL_15;
LABEL_33:
    if (v39 < 0)
      operator delete((void *)v38);
LABEL_15:
    if (v19 != 1)
      break;
    v50[0] = &off_24CA07678;
    v50[1] = a2;
    v51 = v50;
    v11 = sub_20FF1A338((uint64_t)v7, (uint64_t)v50, a3, a4);
    v9 = v51;
    if (v51 == v50)
    {
      v9 = v50;
      v10 = 4;
    }
    else
    {
      if (!v51)
        goto LABEL_4;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_4:
    *(_DWORD *)&v20[24] = v11 ^ 1;
    v18 = v11;
    if ((v11 & 1) == 0)
      goto LABEL_42;
  }
  v18 = 0;
LABEL_42:
  if (!v32)
  {
    v16 = *(_OWORD *)v20;
    *(_OWORD *)a1 = v19;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 28) = *(_OWORD *)&v20[12];
    *(_BYTE *)(a1 + 120) = 1;
    return;
  }
  if (*(_BYTE *)(a2 + 112))
  {
    v12 = *(_QWORD *)(a2 + 104);
    if (!v12)
      sub_20E86D37C();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 48))(v12, &v22);
  }
  v37 = v22;
  v13 = sub_20E89EFE4(&v38, &__p);
  *(_OWORD *)a1 = v37;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v47)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v14 = v40;
    if (v40)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v13;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v13 + 2);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v46)
    {
      v15 = v43;
      *(_QWORD *)(a1 + 64) = v42;
      *(_OWORD *)(a1 + 48) = v41;
      v42 = 0;
      v41 = 0uLL;
      *(_QWORD *)(a1 + 72) = v15;
      *(_OWORD *)(a1 + 80) = v44;
      *(_QWORD *)(a1 + 96) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v14 && v39 < 0)
      operator delete((void *)v38);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v32 && v31)
  {
    if (!v30)
      goto LABEL_61;
    if ((v29 & 0x80000000) == 0)
    {
      if ((v27 & 0x80000000) == 0)
        goto LABEL_61;
LABEL_66:
      operator delete(v26);
      if (!v25)
        return;
LABEL_62:
      if (v24 < 0)
        operator delete((void *)__p);
      return;
    }
    operator delete(v28);
    if (v27 < 0)
      goto LABEL_66;
LABEL_61:
    if (v25)
      goto LABEL_62;
  }
}

void sub_20FDCB1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20FDCBFF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDCB264(uint64_t a1)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::mutex *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v41;
  void *v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  char v49;
  char v50;
  char v51;

  *(_QWORD *)a1 = &off_24CA07308;
  *(_QWORD *)(a1 + 8) = &unk_24CA07370;
  *(_QWORD *)(a1 + 16) = &unk_24CA073A8;
  v2 = a1 + 16;
  v3 = *(std::__shared_weak_count **)(a1 + 1176);
  *(_OWORD *)(a1 + 1168) = 0u;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(_QWORD **)(a1 + 1120);
    v7 = (std::mutex *)v6[4];
    if (v7)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v6 = *(_QWORD **)(a1 + 1120);
    v7 = (std::mutex *)v6[4];
    if (v7)
    {
LABEL_6:
      std::mutex::lock(v7);
      v9 = v6[5];
      v8 = (std::__shared_weak_count *)v6[6];
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      std::mutex::unlock(v7);
      goto LABEL_14;
    }
  }
  v9 = v6[5];
  v8 = (std::__shared_weak_count *)v6[6];
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
LABEL_14:
  v14 = *(_QWORD **)(v9 + 8);
  if (!v14)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v14 = *(_QWORD **)(v9 + 8);
  }
  sub_20FF2091C(v14, v2);
  if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v17 = *(std::__shared_weak_count **)(a1 + 136);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 144) = 0;
  }
  if (*(_BYTE *)(a1 + 440))
  {
    sub_20FF37D44(a1 + 152, 2, (uint64_t)&v41);
    if (!v51)
    {
      if (v50)
      {
        if (v49)
        {
          if (v48 < 0)
            operator delete(__p);
          if (v46 < 0)
            operator delete(v45);
        }
        if (v44 && v43 < 0)
          operator delete(v42);
      }
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 1176);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*(_BYTE *)(a1 + 1160))
    sub_21021A3F8(a1 + 1144);
  v23 = *(_QWORD **)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = 0;
  if (v23)
    sub_20FDD0110(v23);
  if (*(_BYTE *)(a1 + 1104))
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1056));
    v24 = *(void **)(a1 + 1032);
    if (v24)
    {
      *(_QWORD *)(a1 + 1040) = v24;
      operator delete(v24);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 968));
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 848));
  std::mutex::~mutex((std::mutex *)(a1 + 784));
  if (*(_BYTE *)(a1 + 720))
  {
    v25 = *(_QWORD **)(a1 + 712);
    if (v25 == (_QWORD *)(a1 + 688))
    {
      v26 = 4;
      v25 = (_QWORD *)(a1 + 688);
      goto LABEL_49;
    }
    if (v25)
    {
      v26 = 5;
LABEL_49:
      (*(void (**)(void))(*v25 + 8 * v26))();
    }
  }
  if (*(_BYTE *)(a1 + 680))
  {
    sub_20FCF4D74(a1 + 504);
    if (*(_BYTE *)(a1 + 496))
    {
      if (*(char *)(a1 + 495) < 0)
        operator delete(*(void **)(a1 + 472));
    }
  }
  if (*(_BYTE *)(a1 + 440))
  {
    v27 = *(std::__shared_weak_count **)(a1 + 432);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = *(std::__shared_weak_count **)(a1 + 416);
    if (v30)
      std::__shared_weak_count::__release_weak(v30);
    v31 = *(std::__shared_weak_count **)(a1 + 400);
    if (v31)
      std::__shared_weak_count::__release_weak(v31);
    sub_20FCF4D74(a1 + 216);
    if (*(_BYTE *)(a1 + 208) && *(char *)(a1 + 207) < 0)
      operator delete(*(void **)(a1 + 184));
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v32 = *(std::__shared_weak_count **)(a1 + 136);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v35 = *(_QWORD **)(a1 + 104);
    if (v35 == (_QWORD *)(a1 + 80))
    {
      v36 = 4;
      v35 = (_QWORD *)(a1 + 80);
    }
    else
    {
      if (!v35)
        goto LABEL_79;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
LABEL_79:
  if (!*(_BYTE *)(a1 + 72))
    goto LABEL_85;
  v37 = *(_QWORD **)(a1 + 64);
  if (v37 == (_QWORD *)(a1 + 40))
  {
    v38 = 4;
    v37 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v37)
      goto LABEL_85;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_85:
  v39 = *(std::__shared_weak_count **)(a1 + 32);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  return a1;
}

uint64_t sub_20FDCB6BC(uint64_t a1)
{
  return sub_20FDCB264(a1 - 8);
}

uint64_t sub_20FDCB6C4(uint64_t a1)
{
  return sub_20FDCB264(a1 - 16);
}

void sub_20FDCB6CC(uint64_t a1)
{
  sub_20FDCB264(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FDCB6F0(uint64_t a1)
{
  sub_20FDCB264(a1 - 8);
  JUMPOUT(0x212BC6398);
}

void sub_20FDCB718(uint64_t a1)
{
  sub_20FDCB264(a1 - 16);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDCB740(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_20FDCB748(uint64_t a1)
{
  return a1 + 1128;
}

void sub_20FDCB750(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  void ***v23;
  int *v24;
  __int128 v25;
  void *__p;
  char v27;
  unsigned __int8 v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  uint64_t (**v37)();
  uint64_t *v38;

  v10 = 9;
  LOBYTE(v11) = 0;
  v21 = 0;
  if (*(_BYTE *)(a1 + 440))
  {
    sub_20FF37724(a1 + 152, a2, (uint64_t)&v25);
    if (!v36)
    {
      sub_20FDCBB4C((uint64_t)&v10, (uint64_t)&v25);
      if (!v36)
      {
        if (v35)
        {
          if (v34)
          {
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            if (SHIBYTE(v30) < 0)
              operator delete(v29[0]);
          }
          if (v28 && v27 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 720))
  {
    v22 = a1;
    v23 = a2;
    v24 = &v10;
    v37 = &off_24CA077D8;
    v38 = &v22;
    sub_210235BBC((uint64_t)&v37, (uint64_t)&v25);
    if (!v36)
    {
      sub_20FDCBB4C((uint64_t)&v10, (uint64_t)&v25);
      if (!v36)
      {
        if (v35)
        {
          if (v34)
          {
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            if (SHIBYTE(v30) < 0)
              operator delete(v29[0]);
          }
          if (v28 && v27 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v22 = a1;
    v23 = a2;
    v24 = &v10;
    v37 = &off_24CA07818;
    v38 = &v22;
    sub_210235BBC((uint64_t)&v37, (uint64_t)&v25);
    if (!v36)
    {
      sub_20FDCBB4C((uint64_t)&v10, (uint64_t)&v25);
      if (!v36)
      {
        if (v35)
        {
          if (v34)
          {
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            if (SHIBYTE(v30) < 0)
              operator delete(v29[0]);
          }
          if (v28 && v27 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (!v21)
  {
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v6 = *(_QWORD *)(a1 + 104);
    if (!v6)
      sub_20E86D37C();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 48))(v6, &v11);
  }
  v25 = v11;
  v7 = sub_20E89EFE4(&__p, &v12);
  *(_OWORD *)a3 = v25;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v35)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v8 = v28;
    if (v28)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v7;
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v34)
    {
      v9 = v31;
      *(_QWORD *)(a3 + 64) = v30;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v29;
      v29[0] = 0;
      v29[1] = 0;
      *(_QWORD *)(a3 + 72) = v9;
      *(_OWORD *)(a3 + 80) = *(_OWORD *)v32;
      *(_QWORD *)(a3 + 96) = v33;
      v30 = 0;
      v32[0] = 0;
      v32[1] = 0;
      v33 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v8 && v27 < 0)
      operator delete(__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (v21 && v20)
  {
    if (!v19)
      goto LABEL_30;
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_30:
        if (!v14)
          return;
LABEL_31:
        if (v13 < 0)
          operator delete((void *)v12);
        return;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(v15);
    if (!v14)
      return;
    goto LABEL_31;
  }
}

void sub_20FDCBAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E89ED1C((uint64_t)&a29);
  sub_20FDCBFF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDCBAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDCBFF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDCBB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDCBFF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDCBB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDCBFF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDCBB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDCBFF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDCBB4C(uint64_t a1, uint64_t a2)
{
  char *v4;
  void **v5;
  int v6;
  _OWORD *v7;
  int v8;
  _OWORD *v9;
  unsigned int v10;
  int v11;
  _OWORD *v12;
  int v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::string v20;
  __int128 v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 __p;
  uint64_t v32;
  char v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  char v39;
  unsigned __int8 v40;

  v4 = (char *)(a1 + 8);
  if (*(_BYTE *)(a1 + 128))
    goto LABEL_2;
  v10 = *(_DWORD *)a1;
  LOBYTE(v21) = 0;
  v29 = 0;
  sub_20FDD0A04((uint64_t)&v30, v10, &v21);
  v11 = *(unsigned __int8 *)(a1 + 128);
  *(_OWORD *)v4 = v30;
  v12 = (_OWORD *)(a1 + 24);
  if (!v11)
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    v16 = v40;
    if (v40)
    {
      *(_BYTE *)(a1 + 48) = 0;
      if (v33)
      {
        *v12 = __p;
        *(_QWORD *)(a1 + 40) = v32;
        v32 = 0;
        __p = 0uLL;
        *(_BYTE *)(a1 + 48) = 1;
      }
      *(_BYTE *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v39)
      {
        v17 = v36;
        *(_QWORD *)(a1 + 72) = v35;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)v34;
        v34[0] = 0;
        v34[1] = 0;
        *(_QWORD *)(a1 + 80) = v17;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)v37;
        *(_QWORD *)(a1 + 104) = v38;
        v35 = 0;
        v37[0] = 0;
        v37[1] = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 112) = 1;
      }
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 1;
    if (!v16)
      goto LABEL_49;
    goto LABEL_41;
  }
  sub_20FD03AA4((uint64_t)v12, &__p);
  if (v40)
  {
LABEL_41:
    if (v39)
    {
      if (SHIBYTE(v38) < 0)
        operator delete(v37[0]);
      if (SHIBYTE(v35) < 0)
        operator delete(v34[0]);
    }
    if (v33 && SHIBYTE(v32) < 0)
      operator delete((void *)__p);
  }
LABEL_49:
  if (v29)
  {
    if (v28)
    {
      if (v27 < 0)
        operator delete(v26);
      if (v25 < 0)
        operator delete(v24);
    }
    if (v23 && v22 < 0)
      operator delete((void *)v21);
  }
LABEL_2:
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a1 + 16) || *(_DWORD *)a2 != *(_DWORD *)v4)
  {
    sub_2102341F0(a2, &v20);
    sub_2102350FC(v4, (void **)&v20.__r_.__value_.__l.__data_, (uint64_t)&v30);
    v8 = *(unsigned __int8 *)(a1 + 128);
    *(_OWORD *)v4 = v30;
    v9 = (_OWORD *)(a1 + 24);
    if (v8)
    {
      sub_20FD03AA4((uint64_t)v9, &__p);
      if (!v40)
        goto LABEL_30;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 120) = 0;
      v13 = v40;
      if (v40)
      {
        *(_BYTE *)(a1 + 48) = 0;
        if (v33)
        {
          *v9 = __p;
          *(_QWORD *)(a1 + 40) = v32;
          v32 = 0;
          __p = 0uLL;
          *(_BYTE *)(a1 + 48) = 1;
        }
        *(_BYTE *)(a1 + 56) = 0;
        *(_BYTE *)(a1 + 112) = 0;
        if (v39)
        {
          v14 = v36;
          *(_QWORD *)(a1 + 72) = v35;
          *(_OWORD *)(a1 + 56) = *(_OWORD *)v34;
          v34[0] = 0;
          v34[1] = 0;
          *(_QWORD *)(a1 + 80) = v14;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)v37;
          *(_QWORD *)(a1 + 104) = v38;
          v35 = 0;
          v37[0] = 0;
          v37[1] = 0;
          v38 = 0;
          *(_BYTE *)(a1 + 112) = 1;
        }
        *(_BYTE *)(a1 + 120) = 1;
      }
      *(_BYTE *)(a1 + 128) = 1;
      if (!v13)
      {
LABEL_30:
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (void *)v20.__r_.__value_.__r.__words[0];
LABEL_33:
          operator delete(v15);
          return;
        }
        return;
      }
    }
    if (!v39)
      goto LABEL_27;
    if (SHIBYTE(v38) < 0)
    {
      operator delete(v37[0]);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_27:
        if (!v33)
          goto LABEL_30;
LABEL_28:
        if (SHIBYTE(v32) < 0)
          operator delete((void *)__p);
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v34[0]);
    if (!v33)
      goto LABEL_30;
    goto LABEL_28;
  }
  if (*(_BYTE *)(a2 + 112))
    v5 = (void **)(a2 + 16);
  else
    v5 = (void **)&unk_210422988;
  if (!*((_BYTE *)v5 + 24))
    return;
  sub_2102350FC(v4, v5, (uint64_t)&v30);
  v6 = *(unsigned __int8 *)(a1 + 128);
  *(_OWORD *)v4 = v30;
  v7 = (_OWORD *)(a1 + 24);
  if (v6)
  {
    sub_20FD03AA4((uint64_t)v7, &__p);
    if (!v40)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    v18 = v40;
    if (v40)
    {
      *(_BYTE *)(a1 + 48) = 0;
      if (v33)
      {
        *v7 = __p;
        *(_QWORD *)(a1 + 40) = v32;
        v32 = 0;
        __p = 0uLL;
        *(_BYTE *)(a1 + 48) = 1;
      }
      *(_BYTE *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v39)
      {
        v19 = v36;
        *(_QWORD *)(a1 + 72) = v35;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)v34;
        v34[0] = 0;
        v34[1] = 0;
        *(_QWORD *)(a1 + 80) = v19;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)v37;
        *(_QWORD *)(a1 + 104) = v38;
        v35 = 0;
        v37[0] = 0;
        v37[1] = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 112) = 1;
      }
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 1;
    if (!v18)
      return;
  }
  if (v39)
  {
    if (SHIBYTE(v38) < 0)
      operator delete(v37[0]);
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (v33 && SHIBYTE(v32) < 0)
  {
    v15 = (void *)__p;
    goto LABEL_33;
  }
}

void sub_20FDCBFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E89F09C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDCBFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDCBFF8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 120))
    return a1;
  if (*(_BYTE *)(a1 + 112))
  {
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_10:
      operator delete(*(void **)(a1 + 56));
      if (!*(_BYTE *)(a1 + 48))
        return a1;
      goto LABEL_7;
    }
    operator delete(*(void **)(a1 + 88));
    if (*(char *)(a1 + 79) < 0)
      goto LABEL_10;
  }
LABEL_6:
  if (!*(_BYTE *)(a1 + 48))
    return a1;
LABEL_7:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20FDCC08C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  char v11;
  unsigned __int8 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  char v39;
  char v40;

  if (!*(_BYTE *)(a1 + 896))
  {
    LOBYTE(v32) = 0;
    v40 = 0;
    sub_20FDCABE4(0xBu, &v32, (uint64_t)&v20);
    *(_OWORD *)a2 = v20;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v30)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v4 = v23;
      if (v23)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v22;
        v22 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v29)
      {
        v5 = v26;
        *(_QWORD *)(a2 + 64) = v25;
        *(_OWORD *)(a2 + 48) = v24;
        v24 = 0uLL;
        *(_QWORD *)(a2 + 72) = v5;
        *(_OWORD *)(a2 + 80) = v27;
        *(_QWORD *)(a2 + 96) = v28;
        v25 = 0;
        v27 = 0uLL;
        v28 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v4 && SHIBYTE(v22) < 0)
        operator delete((void *)__p);
      if (!v40)
        return;
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v40)
        return;
    }
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
    }
    if (v34 && v33 < 0)
      operator delete((void *)v32);
    return;
  }
  if (!*(_BYTE *)(a1 + 1104))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    goto LABEL_16;
  }
  sub_20FDCAD5C((uint64_t)&v20, a1, 0, 0);
  if (v31)
  {
    v3 = __p;
    *(_OWORD *)a2 = v20;
    *(_OWORD *)(a2 + 16) = v3;
    *(_QWORD *)(a2 + 32) = v22;
LABEL_16:
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  v9 = v20;
  v6 = sub_20E89EFE4(&v10, &__p);
  *(_OWORD *)a2 = v9;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v19)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v7 = v12;
    if (v12)
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)v6;
      *(_QWORD *)(a2 + 32) = *((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v18)
    {
      v8 = v15;
      *(_QWORD *)(a2 + 64) = v14;
      *(_OWORD *)(a2 + 48) = v13;
      v13 = 0uLL;
      *(_QWORD *)(a2 + 72) = v8;
      *(_OWORD *)(a2 + 80) = v16;
      *(_QWORD *)(a2 + 96) = v17;
      v14 = 0;
      v16 = 0uLL;
      v17 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v7 && v11 < 0)
      operator delete(v10);
  }
  else
  {
    *(_BYTE *)(a2 + 120) = 0;
  }
  if (!v31 && v30)
  {
    if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      if (SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v23)
    {
      if (SHIBYTE(v22) < 0)
        operator delete((void *)__p);
    }
  }
}

void sub_20FDCC3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20E89ED1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDCC3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E89F09C(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_20FDCC3CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 __p;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;

  if (*(_BYTE *)(a1 + 896))
  {
    if (*(_BYTE *)(a1 + 1104))
    {
      sub_20FDCAD5C(a3, a1, a2, 1);
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_DWORD *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 120) = 1;
    }
    return;
  }
  LOBYTE(v6) = 0;
  v14 = 0;
  sub_20FDCABE4(0xBu, &v6, (uint64_t)&v15);
  *(_OWORD *)a3 = v15;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v25)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v14)
      return;
    goto LABEL_16;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v4 = v18;
  if (v18)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v17;
    v17 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v24)
  {
    v5 = v21;
    *(_QWORD *)(a3 + 64) = v20;
    *(_OWORD *)(a3 + 48) = v19;
    v19 = 0uLL;
    *(_QWORD *)(a3 + 72) = v5;
    *(_OWORD *)(a3 + 80) = v22;
    *(_QWORD *)(a3 + 96) = v23;
    v20 = 0;
    v22 = 0uLL;
    v23 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v4 && SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (v14)
  {
LABEL_16:
    if (v13)
    {
      if (v12 < 0)
        operator delete(v11);
      if (v10 < 0)
        operator delete(v9);
    }
    if (v8 && v7 < 0)
      operator delete((void *)v6);
  }
}

void sub_20FDCC598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E89F09C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDCC5AC(_BYTE *a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  char v4;
  char v5;
  char v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  char **v19;
  char *v20;
  int v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  unsigned __int8 v33;
  _QWORD v34[3];
  __int128 v35;
  void *__p;
  char v37;
  unsigned __int8 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  _QWORD v48[2];
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v7 = a1;
  v51 = *MEMORY[0x24BDAC8D0];
  v22 = 9;
  LOBYTE(v23) = 0;
  v33 = 0;
  v8 = a2 + 1;
  v9 = a2[1];
  v19 = (char **)*a2;
  v20 = (char *)v9;
  if (a2[2])
  {
    *(_QWORD *)(v9 + 16) = &v20;
    *a2 = v8;
    *v8 = 0;
    a2[2] = 0;
    if (!a1[440])
      goto LABEL_7;
  }
  else
  {
    v19 = &v20;
    if (!a1[440])
      goto LABEL_7;
  }
  sub_20FF38054((std::string::size_type)(a1 + 152), &v19, (uint64_t)&v35);
  if (!v47)
  {
    sub_20FDCBB4C((uint64_t)&v22, (uint64_t)&v35);
    if (!v47)
    {
      if (v46)
      {
        if (v45)
        {
          if (SHIBYTE(v44) < 0)
            operator delete(v42);
          if (SHIBYTE(v41) < 0)
            operator delete(v39);
        }
        if (v38 && v37 < 0)
          operator delete(__p);
      }
    }
  }
LABEL_7:
  if (v7[144])
  {
    v34[0] = v7;
    v34[1] = &v19;
    v34[2] = &v22;
    v48[0] = &off_24CA07858;
    v48[1] = v34;
    sub_210235BBC((uint64_t)v48, (uint64_t)&v35);
    if (!v47)
    {
      sub_20FDCBB4C((uint64_t)&v22, (uint64_t)&v35);
      if (!v47)
      {
        if (v46)
        {
          if (v45)
          {
            if (SHIBYTE(v44) < 0)
              operator delete(v42);
            if (SHIBYTE(v41) < 0)
              operator delete(v39);
          }
          if (v38 && v37 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (v7[112])
  {
    v10 = (_BYTE *)*((_QWORD *)v7 + 13);
    if (v10)
    {
      if (v10 == v7 + 80)
      {
        v50 = v49;
        (*(void (**)(_BYTE *, _BYTE *))(*((_QWORD *)v7 + 10) + 24))(v7 + 80, v49);
        v11 = v50;
        v12 = v33;
        if (v33)
        {
LABEL_16:
          if (!v11)
            sub_20E86D37C();
          (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v11 + 48))(v11, &v23);
          v35 = v23;
          v13 = sub_20E89EFE4(&__p, &v24);
          if (!v46)
          {
            v17 = 0;
            v16 = 0;
            v7 = 0;
            v15 = 0;
            goto LABEL_30;
          }
          v14 = v38;
          if (v38)
          {
            v7 = __p;
            v4 = v37;
            *v13 = 0;
            v13[1] = 0;
            v15 = 1;
            v13[2] = 0;
            if (v45)
              goto LABEL_20;
          }
          else
          {
            v7 = 0;
            v15 = 0;
            if (v45)
            {
LABEL_20:
              v2 = v39;
              v5 = HIBYTE(v41);
              v39 = 0;
              v40 = 0;
              v3 = v42;
              v6 = HIBYTE(v44);
              v41 = 0;
              v42 = 0;
              v43 = 0;
              v16 = 1;
              v44 = 0;
              v17 = 1;
              if (!v14)
                goto LABEL_30;
              goto LABEL_28;
            }
          }
          v16 = 0;
          v2 = 0;
          v17 = 1;
          if (!v14)
            goto LABEL_30;
LABEL_28:
          if (v37 < 0)
            operator delete(__p);
LABEL_30:
          v11 = v50;
          if (v50 != v49)
            goto LABEL_31;
          goto LABEL_24;
        }
LABEL_23:
        v17 = 0;
        v16 = 0;
        v15 = 0;
        if (v11 != v49)
        {
LABEL_31:
          if (!v11)
          {
LABEL_34:
            if (!v12 || !v17)
              goto LABEL_42;
            if (!v16)
              goto LABEL_39;
            if (v6 < 0)
            {
              operator delete(v3);
              if ((v5 & 0x80) == 0)
              {
LABEL_39:
                if (!v15)
                  goto LABEL_42;
                goto LABEL_40;
              }
            }
            else if ((v5 & 0x80) == 0)
            {
              goto LABEL_39;
            }
            operator delete(v2);
            if (!v15)
              goto LABEL_42;
LABEL_40:
            if (v4 < 0)
              operator delete(v7);
            goto LABEL_42;
          }
          v18 = 5;
LABEL_33:
          (*(void (**)(void))(*(_QWORD *)v11 + 8 * v18))();
          goto LABEL_34;
        }
LABEL_24:
        v18 = 4;
        v11 = v49;
        goto LABEL_33;
      }
      v11 = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 16))(*((_QWORD *)v7 + 13));
    }
    else
    {
      v11 = 0;
    }
    v50 = v11;
    v12 = v33;
    if (v33)
      goto LABEL_16;
    goto LABEL_23;
  }
LABEL_42:
  sub_20E866BE0((uint64_t)&v19, v20);
  if (v33 && v32)
  {
    if (!v31)
      goto LABEL_47;
    if (v30 < 0)
    {
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_47:
        if (!v26)
          return;
LABEL_48:
        if (v25 < 0)
          operator delete((void *)v24);
        return;
      }
    }
    else if ((v28 & 0x80000000) == 0)
    {
      goto LABEL_47;
    }
    operator delete(v27);
    if (!v26)
      return;
    goto LABEL_48;
  }
}

void sub_20FDCC9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E89ED1C((uint64_t)&a33);
  sub_20E866BE0((uint64_t)&a10, a11);
  sub_20FDCBFF8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20FDCCA38(uint64_t a1, _QWORD *a2)
{
  sub_20FDCC5AC((_BYTE *)(a1 - 16), a2);
}

void sub_20FDCCA40(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *p_p;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  char v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  BOOL v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  char v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  char v51;
  uint64_t v52;
  __int128 *p_s1;
  __int128 *v54;
  uint64_t v55;
  const void *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  BOOL v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  char v73;
  uint64_t v74;
  __int128 *v75;
  __int128 *v76;
  uint64_t v77;
  const void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  unint64_t *v83;
  unint64_t v84;
  std::string::size_type v85;
  std::__shared_weak_count *size;
  unint64_t *v87;
  unint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  std::mutex *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _BOOL4 v98;
  char v99;
  uint64_t v100;
  __int128 *v101;
  __int128 *v102;
  uint64_t v103;
  const void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  const void **v128;
  unsigned __int8 *v129;
  uint64_t v130;
  std::mutex *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  std::string::size_type v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *p_shared_weak_owners;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  std::string::size_type v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  std::mutex *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  std::string::size_type v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  unint64_t *v169;
  unint64_t v170;
  char *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::mutex *v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  int v188;
  char *v189;
  size_t v190;
  unint64_t *v191;
  unint64_t v192;
  std::string::size_type v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  BOOL v199;
  uint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  const void **v209;
  unsigned __int8 *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  const void **v215;
  unsigned __int8 *v216;
  uint64_t v217;
  int v218;
  int v219;
  int v220;
  int v221;
  BOOL v223;
  _BOOL4 v224;
  _QWORD *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  char v229;
  unint64_t v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  uint64_t v234;
  int64_t v235;
  int v236;
  _QWORD *v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unint64_t v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  unsigned __int8 *v245;
  uint64_t v246;
  int64_t v247;
  int v248;
  int v249;
  unsigned int v250;
  std::recursive_mutex ***v251;
  std::recursive_mutex *v252;
  std::recursive_mutex **v253;
  std::recursive_mutex **v254;
  unsigned int v255;
  uint64_t v256;
  std::recursive_mutex ***v257;
  std::recursive_mutex **v258;
  std::recursive_mutex *v259;
  std::recursive_mutex **v260;
  uint64_t *v261;
  char v262;
  BOOL v263;
  std::recursive_mutex **v264;
  std::recursive_mutex **v265;
  std::recursive_mutex ***v266;
  std::recursive_mutex **v267;
  uint64_t *v268;
  std::recursive_mutex ***v269;
  std::recursive_mutex **v270;
  uint64_t *v271;
  std::recursive_mutex *v272;
  std::recursive_mutex **v273;
  uint64_t *v274;
  char v275;
  std::recursive_mutex **v276;
  uint64_t *v277;
  std::recursive_mutex **v278;
  uint64_t *v279;
  BOOL v280;
  std::recursive_mutex ***v281;
  __int128 v282;
  uint64_t v283;
  _QWORD *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::recursive_mutex ***v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::recursive_mutex ***v298;
  __int128 v299;
  uint64_t v300;
  _QWORD *v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::string::size_type v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::recursive_mutex ***v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t *v318;
  char *v319;
  char *v320;
  void *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  std::string::size_type v331;
  std::__shared_weak_count *v332;
  std::condition_variable *v333;
  _OWORD *v334;
  std::mutex *v335;
  uint64_t v336;
  std::string v337;
  std::string __dst;
  char v339;
  void *v340;
  char v341;
  void *v342;
  char v343;
  char v344;
  char v345;
  __int128 __p;
  __int128 v347;
  uint64_t v348;
  unsigned __int8 v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  char v355;
  char v356;
  char v357;
  uint64_t v358;
  std::__shared_weak_count *v359;
  void *v360[2];
  char v361;
  char v362;
  void *v363;
  char v364;
  void *v365;
  char v366;
  char v367;
  char v368;
  void *v369;
  char *v370;
  unint64_t v371;
  __int128 __s1;
  __int128 v373;
  void *v374;
  unsigned __int8 v375;
  __int128 v376;
  void *v377;
  uint64_t v378;
  __int128 v379;
  uint64_t v380;
  char v381;
  char v382;
  std::string::size_type v383;
  std::string::size_type v384;
  std::string::size_type v385;
  std::__shared_weak_count *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390[3];

  v4 = a3;
  v369 = 0;
  v370 = 0;
  v371 = 0;
  v6 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
LABEL_644:
    if (!*(_BYTE *)(a1 + 72)
      || v369 == v370
      || (*(_QWORD *)&__s1 = a1,
          *((_QWORD *)&__s1 + 1) = &v369,
          v337.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA076F8,
          v337.__r_.__value_.__l.__size_ = (std::string::size_type)&__s1,
          sub_210235BBC((uint64_t)&v337, (uint64_t)&__p),
          v357))
    {
      *(_BYTE *)(v4 + 120) = 1;
    }
    else
    {
      sub_2102341F0((uint64_t)&__p, &v337);
      if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
        sub_20E860C04(&__dst, v337.__r_.__value_.__l.__data_, v337.__r_.__value_.__l.__size_);
      else
        __dst = v337;
      v339 = 1;
      LOBYTE(v340) = 0;
      v344 = 0;
      v345 = 1;
      sub_20FDCABE4(8u, (__int128 *)&__dst, (uint64_t)&__s1);
      *(_OWORD *)v4 = __s1;
      *(_BYTE *)(v4 + 16) = 0;
      *(_BYTE *)(v4 + 112) = 0;
      if (v382)
      {
        *(_BYTE *)(v4 + 40) = 0;
        v327 = v375;
        if (v375)
        {
          *(_OWORD *)(v4 + 16) = v373;
          *(_QWORD *)(v4 + 32) = v374;
          v374 = 0;
          v373 = 0uLL;
          *(_BYTE *)(v4 + 40) = 1;
        }
        *(_BYTE *)(v4 + 48) = 0;
        *(_BYTE *)(v4 + 104) = 0;
        if (v381)
        {
          v328 = v378;
          *(_QWORD *)(v4 + 64) = v377;
          *(_OWORD *)(v4 + 48) = v376;
          v376 = 0uLL;
          *(_QWORD *)(v4 + 72) = v328;
          *(_OWORD *)(v4 + 80) = v379;
          *(_QWORD *)(v4 + 96) = v380;
          v377 = 0;
          v379 = 0uLL;
          v380 = 0;
          *(_BYTE *)(v4 + 104) = 1;
        }
        *(_BYTE *)(v4 + 112) = 1;
        *(_BYTE *)(v4 + 120) = 0;
        if (v327 && SHIBYTE(v374) < 0)
          operator delete((void *)v373);
      }
      else
      {
        *(_BYTE *)(v4 + 120) = 0;
      }
      if (v345)
      {
        if (v344)
        {
          if (v343 < 0)
            operator delete(v342);
          if (v341 < 0)
            operator delete(v340);
        }
        if (v339 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v337.__r_.__value_.__l.__data_);
      if (!v357 && v356)
      {
        if (v355)
        {
          if (SHIBYTE(v354) < 0)
            operator delete((void *)v353);
          if (SHIBYTE(v351) < 0)
            operator delete((void *)v350);
        }
        if (v349 && SHIBYTE(v348) < 0)
          operator delete((void *)v347);
      }
    }
    goto LABEL_648;
  }
  v334 = (_OWORD *)(a1 + 728);
  v335 = (std::mutex *)(a1 + 784);
  v333 = (std::condition_variable *)(a1 + 848);
  v329 = a1 + 904;
  v336 = a2[1];
LABEL_6:
  v8 = *(_QWORD *)(v6 + 8);
  if (!v8)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = *(_QWORD *)(v6 + 8);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v8 + 48))(&__p);
  v9 = BYTE7(v347);
  if (SBYTE7(v347) < 0)
    v9 = *((_QWORD *)&__p + 1);
  if (v9 == 8)
  {
    p_p = (__int128 *)__p;
    if ((SBYTE7(v347) & 0x80u) == 0)
      p_p = &__p;
    v11 = *(_QWORD *)"cv3d.net" == *(_QWORD *)p_p;
    if ((SBYTE7(v347) & 0x80000000) == 0)
    {
LABEL_15:
      if (!v11)
        goto LABEL_31;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = 0;
    if ((SBYTE7(v347) & 0x80000000) == 0)
      goto LABEL_15;
  }
  operator delete((void *)__p);
  if (!v11)
  {
LABEL_31:
    v19 = v370;
    if ((unint64_t)v370 >= v371)
      goto LABEL_3;
    *(_QWORD *)v370 = &off_24CA0C0E8;
    *((_QWORD *)v19 + 1) = *(_QWORD *)(v6 + 8);
    v20 = *(_QWORD *)(v6 + 16);
    *((_QWORD *)v19 + 2) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
LABEL_35:
    v7 = v19 + 24;
    goto LABEL_4;
  }
LABEL_16:
  v12 = *(_QWORD *)(v6 + 8);
  if (!v12)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v12 = *(_QWORD *)(v6 + 8);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v12 + 48))(&__s1);
  v13 = 0;
  strcpy((char *)&__p, "cv3d.net");
  BYTE7(v347) = 8;
  DWORD2(v347) = 2;
  LOBYTE(v348) = 1;
  v14 = BYTE7(v373);
  if ((SBYTE7(v373) & 0x80u) == 0)
    v15 = BYTE7(v373);
  else
    v15 = *((_QWORD *)&__s1 + 1);
  if (v15 != 8)
  {
LABEL_39:
    if (v14 < 0)
      goto LABEL_88;
LABEL_40:
    if (v13)
      goto LABEL_41;
LABEL_89:
    v49 = *(_QWORD *)(v6 + 8);
    if (!v49)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v49 = *(_QWORD *)(v6 + 8);
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v49 + 48))(&__s1);
    v50 = 0;
    strcpy((char *)&__p, "cv3d.net");
    BYTE7(v347) = 8;
    DWORD2(v347) = 5;
    LOBYTE(v348) = 1;
    v51 = BYTE7(v373);
    if ((SBYTE7(v373) & 0x80u) == 0)
      v52 = BYTE7(v373);
    else
      v52 = *((_QWORD *)&__s1 + 1);
    if (v52 == 8)
    {
      if ((BYTE7(v373) & 0x80) != 0)
      {
        if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
        {
          operator delete((void *)__s1);
          goto LABEL_132;
        }
      }
      else if (BYTE7(v373))
      {
        p_s1 = &__s1;
        v54 = &__p;
        v55 = BYTE7(v373);
        while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v54)
        {
          p_s1 = (__int128 *)((char *)p_s1 + 1);
          v54 = (__int128 *)((char *)v54 + 1);
          if (!--v55)
            goto LABEL_104;
        }
        v50 = 0;
        if ((BYTE7(v373) & 0x80) != 0)
        {
LABEL_131:
          operator delete((void *)__s1);
          if (v50)
          {
LABEL_107:
            v56 = *(const void **)(v6 + 8);
            v57 = *(std::__shared_weak_count **)(v6 + 16);
            if (v57)
            {
              p_shared_owners = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldxr(p_shared_owners);
              while (__stxr(v59 + 1, p_shared_owners));
            }
            if (v56)
            {
              v60 = __dynamic_cast(v56, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA07B10, 0) != 0;
              if (!v57)
                goto LABEL_117;
            }
            else
            {
              v60 = 0;
              if (!v57)
                goto LABEL_117;
            }
            v61 = (unint64_t *)&v57->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (v62)
            {
LABEL_117:
              if (v60)
                goto LABEL_118;
LABEL_123:
              v63 = 0;
              v64 = 0;
              __p = 0uLL;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
              if (!v60)
                goto LABEL_123;
LABEL_118:
              v64 = *(_QWORD *)(v6 + 8);
              v63 = *(std::__shared_weak_count **)(v6 + 16);
              if (v63)
              {
                v65 = (unint64_t *)&v63->__shared_owners_;
                do
                  v66 = __ldxr(v65);
                while (__stxr(v66 + 1, v65));
              }
              *(_QWORD *)&__p = v64;
              *((_QWORD *)&__p + 1) = v63;
            }
            std::mutex::lock(v335);
            if (!*(_BYTE *)(a1 + 776))
            {
              v334[1] = 0u;
              v334[2] = 0u;
              *v334 = 0u;
              *(_BYTE *)(a1 + 776) = 1;
            }
            v67 = *(_OWORD *)(v64 + 8);
            v68 = *(_OWORD *)(v64 + 24);
            *(_OWORD *)((char *)v334 + 25) = *(_OWORD *)(v64 + 33);
            *v334 = v67;
            v334[1] = v68;
            std::condition_variable::notify_all(v333);
            std::mutex::unlock(v335);
            if (v63)
            {
              v69 = (unint64_t *)&v63->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
LABEL_642:
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            goto LABEL_5;
          }
LABEL_132:
          v71 = *(_QWORD *)(v6 + 8);
          if (!v71)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v71 = *(_QWORD *)(v6 + 8);
          }
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v71 + 48))(&__s1);
          v72 = 0;
          strcpy((char *)&__p, "cv3d.net");
          BYTE7(v347) = 8;
          DWORD2(v347) = 3;
          LOBYTE(v348) = 1;
          v73 = BYTE7(v373);
          if ((SBYTE7(v373) & 0x80u) == 0)
            v74 = BYTE7(v373);
          else
            v74 = *((_QWORD *)&__s1 + 1);
          if (v74 == 8)
          {
            if ((BYTE7(v373) & 0x80) != 0)
            {
              if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
              {
                operator delete((void *)__s1);
                goto LABEL_191;
              }
            }
            else if (BYTE7(v373))
            {
              v75 = &__s1;
              v76 = &__p;
              v77 = BYTE7(v373);
              while (*(unsigned __int8 *)v75 == *(unsigned __int8 *)v76)
              {
                v75 = (__int128 *)((char *)v75 + 1);
                v76 = (__int128 *)((char *)v76 + 1);
                if (!--v77)
                  goto LABEL_147;
              }
              v72 = 0;
              if ((BYTE7(v373) & 0x80) != 0)
              {
LABEL_190:
                operator delete((void *)__s1);
                if (v72)
                {
LABEL_150:
                  v78 = *(const void **)(v6 + 8);
                  v79 = *(std::__shared_weak_count **)(v6 + 16);
                  if (v79)
                  {
                    v80 = (unint64_t *)&v79->__shared_owners_;
                    do
                      v81 = __ldxr(v80);
                    while (__stxr(v81 + 1, v80));
                  }
                  if (v78)
                  {
                    v82 = __dynamic_cast(v78, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA07A60, 0) != 0;
                    if (!v79)
                      goto LABEL_160;
                  }
                  else
                  {
                    v82 = 0;
                    if (!v79)
                      goto LABEL_160;
                  }
                  v83 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                    std::__shared_weak_count::__release_weak(v79);
                    if (!v82)
                      goto LABEL_183;
LABEL_161:
                    v85 = *(_QWORD *)(v6 + 8);
                    size = *(std::__shared_weak_count **)(v6 + 16);
                    if (size)
                    {
                      v87 = (unint64_t *)&size->__shared_owners_;
                      do
                        v88 = __ldxr(v87);
                      while (__stxr(v88 + 1, v87));
                    }
                    v337.__r_.__value_.__r.__words[0] = v85;
                    v337.__r_.__value_.__l.__size_ = (std::string::size_type)size;
                    if (*(_BYTE *)(a1 + 1112))
                      goto LABEL_165;
LABEL_184:
                    v91 = *(_QWORD *)(a1 + 1120);
                    v92 = *(std::mutex **)(v91 + 32);
                    if (v92)
                    {
                      std::mutex::lock(*(std::mutex **)(v91 + 32));
                      v94 = *(_QWORD *)(v91 + 40);
                      v93 = *(std::__shared_weak_count **)(v91 + 48);
                      *(_QWORD *)&__p = v94;
                      *((_QWORD *)&__p + 1) = v93;
                      if (v93)
                      {
                        v95 = (unint64_t *)&v93->__shared_owners_;
                        do
                          v96 = __ldxr(v95);
                        while (__stxr(v96 + 1, v95));
                      }
                      std::mutex::unlock(v92);
                    }
                    else
                    {
                      v94 = *(_QWORD *)(v91 + 40);
                      v93 = *(std::__shared_weak_count **)(v91 + 48);
                      *(_QWORD *)&__p = v94;
                      *((_QWORD *)&__p + 1) = v93;
                      if (v93)
                      {
                        v115 = (unint64_t *)&v93->__shared_owners_;
                        do
                          v116 = __ldxr(v115);
                        while (__stxr(v116 + 1, v115));
                      }
                    }
                    v117 = *(_QWORD *)(v94 + 8);
                    if (!v117)
                    {
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
                      {
                        abort();
                      }
                      v117 = *(_QWORD *)(v94 + 8);
                    }
                    sub_20FF20A40(v117, (_QWORD *)(v85 + 8));
                    if (v93)
                    {
                      v118 = (unint64_t *)&v93->__shared_owners_;
                      do
                        v119 = __ldaxr(v118);
                      while (__stlxr(v119 - 1, v118));
                      if (!v119)
                      {
                        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                    }
                    size = (std::__shared_weak_count *)v337.__r_.__value_.__l.__size_;
                    goto LABEL_237;
                  }
LABEL_160:
                  if (v82)
                    goto LABEL_161;
LABEL_183:
                  size = 0;
                  v85 = 0;
                  *(_OWORD *)&v337.__r_.__value_.__l.__data_ = 0uLL;
                  if (!*(_BYTE *)(a1 + 1112))
                    goto LABEL_184;
LABEL_165:
                  v89 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
                  sub_20FF02670(v89, (uint64_t)&__s1);
                  __p = __s1;
                  sub_20E89EFE4(&v347, &v373);
                  if (*(_BYTE *)(a1 + 112))
                  {
                    v90 = *(_QWORD *)(a1 + 104);
                    if (!v90)
                      sub_20E86D37C();
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v90 + 48))(v90, &__p);
                  }
                  if (!v356)
                    goto LABEL_175;
                  if (!v355)
                    goto LABEL_172;
                  if ((SHIBYTE(v354) & 0x80000000) == 0)
                  {
                    if ((SHIBYTE(v351) & 0x80000000) == 0)
                      goto LABEL_172;
LABEL_273:
                    operator delete((void *)v350);
                    if (!v349)
                      goto LABEL_175;
LABEL_173:
                    if (SHIBYTE(v348) < 0)
                      operator delete((void *)v347);
                    goto LABEL_175;
                  }
                  operator delete((void *)v353);
                  if (SHIBYTE(v351) < 0)
                    goto LABEL_273;
LABEL_172:
                  if (v349)
                    goto LABEL_173;
LABEL_175:
                  if (v382)
                  {
                    if (!v381)
                      goto LABEL_179;
                    if ((SHIBYTE(v380) & 0x80000000) == 0)
                    {
                      if ((SHIBYTE(v377) & 0x80000000) == 0)
                        goto LABEL_179;
LABEL_276:
                      operator delete((void *)v376);
                      if (!v375)
                        goto LABEL_237;
LABEL_180:
                      if (SHIBYTE(v374) < 0)
                        operator delete((void *)v373);
                      goto LABEL_237;
                    }
                    operator delete((void *)v379);
                    if (SHIBYTE(v377) < 0)
                      goto LABEL_276;
LABEL_179:
                    if (v375)
                      goto LABEL_180;
                  }
LABEL_237:
                  if (size)
                  {
                    v120 = (unint64_t *)&size->__shared_owners_;
                    do
                      v121 = __ldaxr(v120);
                    while (__stlxr(v121 - 1, v120));
                    if (!v121)
                    {
                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                      std::__shared_weak_count::__release_weak(size);
                    }
                  }
                  v5 = v336;
                  goto LABEL_5;
                }
LABEL_191:
                v97 = *(_QWORD *)(v6 + 8);
                if (!v97)
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                  {
                    abort();
                  }
                  v97 = *(_QWORD *)(v6 + 8);
                }
                (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v97 + 48))(&__s1);
                v98 = 0;
                strcpy((char *)&__p, "cv3d.net");
                BYTE7(v347) = 8;
                DWORD2(v347) = 4;
                LOBYTE(v348) = 1;
                v99 = BYTE7(v373);
                if ((SBYTE7(v373) & 0x80u) == 0)
                  v100 = BYTE7(v373);
                else
                  v100 = *((_QWORD *)&__s1 + 1);
                if (v100 == 8)
                {
                  if ((BYTE7(v373) & 0x80) != 0)
                  {
                    if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
                    {
                      operator delete((void *)__s1);
LABEL_266:
                      v19 = v370;
                      if ((unint64_t)v370 < v371)
                      {
                        *(_QWORD *)v370 = &off_24CA0C0E8;
                        *((_QWORD *)v19 + 1) = *(_QWORD *)(v6 + 8);
                        v135 = *(_QWORD *)(v6 + 16);
                        *((_QWORD *)v19 + 2) = v135;
                        if (v135)
                        {
                          v136 = (unint64_t *)(v135 + 8);
                          do
                            v137 = __ldxr(v136);
                          while (__stxr(v137 + 1, v136));
                        }
                        goto LABEL_35;
                      }
LABEL_3:
                      v7 = sub_20FDD2C8C((char **)&v369, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
LABEL_4:
                      v370 = v7;
                      goto LABEL_5;
                    }
                  }
                  else if (BYTE7(v373))
                  {
                    v101 = &__s1;
                    v102 = &__p;
                    v103 = BYTE7(v373);
                    while (*(unsigned __int8 *)v101 == *(unsigned __int8 *)v102)
                    {
                      v101 = (__int128 *)((char *)v101 + 1);
                      v102 = (__int128 *)((char *)v102 + 1);
                      if (!--v103)
                        goto LABEL_206;
                    }
                    v98 = 0;
                    if ((BYTE7(v373) & 0x80) != 0)
                    {
LABEL_265:
                      operator delete((void *)__s1);
                      if (!v98)
                        goto LABEL_266;
LABEL_209:
                      v104 = *(const void **)(v6 + 8);
                      v105 = *(std::__shared_weak_count **)(v6 + 16);
                      if (v105)
                      {
                        v106 = (unint64_t *)&v105->__shared_owners_;
                        do
                          v107 = __ldxr(v106);
                        while (__stxr(v107 + 1, v106));
                      }
                      if (v104)
                      {
                        v108 = __dynamic_cast(v104, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA07AE0, 0) != 0;
                        if (!v105)
                          goto LABEL_219;
                      }
                      else
                      {
                        v108 = 0;
                        if (!v105)
                          goto LABEL_219;
                      }
                      v109 = (unint64_t *)&v105->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                        if (v108)
                        {
LABEL_220:
                          v112 = *(_QWORD *)(v6 + 8);
                          v111 = *(std::__shared_weak_count **)(v6 + 16);
                          if (v111)
                          {
                            v113 = (unint64_t *)&v111->__shared_owners_;
                            do
                              v114 = __ldxr(v113);
                            while (__stxr(v114 + 1, v113));
                          }
                          v358 = v112;
                          v359 = v111;
                          if (!*(_BYTE *)(v112 + 56))
                            goto LABEL_394;
LABEL_245:
                          v122 = *(_QWORD *)(a1 + 1168);
                          if (v122)
                          {
                            v123 = *(unsigned __int8 *)(v122 + 71);
                            v124 = *(_QWORD *)(v122 + 56);
                            if ((v123 & 0x80u) == 0)
                              v125 = *(unsigned __int8 *)(v122 + 71);
                            else
                              v125 = *(_QWORD *)(v122 + 56);
                            v126 = *(unsigned __int8 *)(v112 + 55);
                            v127 = (char)v126;
                            if ((v126 & 0x80u) != 0)
                              v126 = *(_QWORD *)(v112 + 40);
                            if (v125 == v126)
                            {
                              v128 = (const void **)(v122 + 48);
                              if (v127 >= 0)
                                v129 = (unsigned __int8 *)(v112 + 32);
                              else
                                v129 = *(unsigned __int8 **)(v112 + 32);
                              if ((v123 & 0x80) != 0)
                              {
                                if (!memcmp(*v128, v129, v124))
                                  goto LABEL_394;
                              }
                              else
                              {
                                if (!(_DWORD)v123)
                                  goto LABEL_394;
                                while (*(unsigned __int8 *)v128 == *v129)
                                {
                                  v128 = (const void **)((char *)v128 + 1);
                                  ++v129;
                                  if (!--v123)
                                    goto LABEL_394;
                                }
                              }
                            }
                            sub_20E89F6D4(&__s1, "Received a different target destination context during 'update enabled loggers' command. Retargeting of visualized textual log messages is not yet implemented. Command ignored.");
                            LOBYTE(v380) = 1;
                            sub_20E89F600((uint64_t)&__p, 0x16u, &__s1);
                            if (*(_BYTE *)(a1 + 112))
                            {
                              v140 = *(_QWORD *)(a1 + 104);
                              if (!v140)
                                sub_20E86D37C();
                              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v140 + 48))(v140, &__p);
                            }
                            if (v356)
                            {
                              if (v355)
                              {
                                if (SHIBYTE(v354) < 0)
                                  operator delete((void *)v353);
                                if (SHIBYTE(v351) < 0)
                                  operator delete((void *)v350);
                              }
                              if (v349 && SHIBYTE(v348) < 0)
                                operator delete((void *)v347);
                            }
                            if ((_BYTE)v380)
                            {
                              if (BYTE8(v379))
                              {
                                if (SBYTE7(v379) < 0)
                                  operator delete(v377);
                                if (SBYTE7(v376) < 0)
                                  operator delete(v374);
                              }
                              if (BYTE8(v373) && SBYTE7(v373) < 0)
                                operator delete((void *)__s1);
                            }
LABEL_394:
                            v193 = *(_QWORD *)(a1 + 1168);
                            v194 = *(std::__shared_weak_count **)(a1 + 1176);
                            v383 = v193;
                            v384 = (std::string::size_type)v194;
                            if (v194)
                            {
                              v195 = (unint64_t *)&v194->__shared_owners_;
                              do
                                v196 = __ldxr(v195);
                              while (__stxr(v196 + 1, v195));
                            }
                            v197 = *(_QWORD *)(v112 + 8);
                            v198 = *(_QWORD *)(v112 + 16);
                            v332 = v194;
                            if (v197 == v198)
                            {
                              if (*(_BYTE *)(a1 + 1160))
                                v199 = v193 == 0;
                              else
                                v199 = 1;
                              v4 = a3;
                              v5 = v336;
                              if (!v199)
                                goto LABEL_558;
                              goto LABEL_634;
                            }
                            while (1)
                            {
                              if (!*(_BYTE *)(a1 + 1160))
                              {
                                sub_21021A874((uint64_t *)&__p);
                                v200 = __p;
                                if (*(_BYTE *)(a1 + 1160))
                                {
                                  v201 = *((_QWORD *)&__p + 1);
                                  __p = 0uLL;
                                  *(_QWORD *)(a1 + 1144) = v200;
                                  v202 = *(std::__shared_weak_count **)(a1 + 1152);
                                  *(_QWORD *)(a1 + 1152) = v201;
                                  if (v202)
                                  {
                                    v203 = (unint64_t *)&v202->__shared_owners_;
                                    do
                                      v204 = __ldaxr(v203);
                                    while (__stlxr(v204 - 1, v203));
                                    if (!v204)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                                      std::__shared_weak_count::__release_weak(v202);
                                    }
                                  }
                                }
                                else
                                {
                                  *(_OWORD *)(a1 + 1144) = __p;
                                  __p = 0uLL;
                                  *(_BYTE *)(a1 + 1160) = 1;
                                }
                                sub_21021A3F8((uint64_t)&__p);
                              }
                              sub_21021D468(v390);
                              v205 = *(unsigned __int8 *)(v390[0] + 39);
                              if ((v205 & 0x80u) == 0)
                                v206 = *(unsigned __int8 *)(v390[0] + 39);
                              else
                                v206 = *(_QWORD *)(v390[0] + 24);
                              v207 = *(unsigned __int8 *)(v197 + 23);
                              v208 = (char)v207;
                              if ((v207 & 0x80u) != 0)
                                v207 = *(_QWORD *)(v197 + 8);
                              if (v206 == v207)
                              {
                                v209 = (const void **)(v390[0] + 16);
                                if (v208 >= 0)
                                  v210 = (unsigned __int8 *)v197;
                                else
                                  v210 = *(unsigned __int8 **)v197;
                                if ((v205 & 0x80) != 0)
                                {
                                  if (!memcmp(*v209, v210, *(_QWORD *)(v390[0] + 24)))
                                    goto LABEL_449;
                                }
                                else
                                {
                                  if (!*(_BYTE *)(v390[0] + 39))
                                    goto LABEL_449;
                                  while (*(unsigned __int8 *)v209 == *v210)
                                  {
                                    v209 = (const void **)((char *)v209 + 1);
                                    ++v210;
                                    if (!--v205)
                                      goto LABEL_449;
                                  }
                                }
                              }
                              sub_21021D55C(&v389);
                              v211 = *(unsigned __int8 *)(v389 + 39);
                              if ((v211 & 0x80u) == 0)
                                v212 = *(unsigned __int8 *)(v389 + 39);
                              else
                                v212 = *(_QWORD *)(v389 + 24);
                              v213 = *(unsigned __int8 *)(v197 + 23);
                              v214 = (char)v213;
                              if ((v213 & 0x80u) != 0)
                                v213 = *(_QWORD *)(v197 + 8);
                              if (v212 == v213)
                              {
                                v215 = (const void **)(v389 + 16);
                                if (v214 >= 0)
                                  v216 = (unsigned __int8 *)v197;
                                else
                                  v216 = *(unsigned __int8 **)v197;
                                if ((v211 & 0x80) != 0)
                                {
                                  v224 = memcmp(*v215, v216, *(_QWORD *)(v389 + 24)) == 0;
                                }
                                else
                                {
                                  if (!*(_BYTE *)(v389 + 39))
                                  {
LABEL_449:
                                    v224 = 1;
                                    goto LABEL_452;
                                  }
                                  v217 = v211 - 1;
                                  do
                                  {
                                    v219 = *(unsigned __int8 *)v215;
                                    v215 = (const void **)((char *)v215 + 1);
                                    v218 = v219;
                                    v221 = *v216++;
                                    v220 = v221;
                                    v223 = v217-- != 0;
                                    v224 = v218 == v220;
                                  }
                                  while (v218 == v220 && v223);
                                }
                              }
                              else
                              {
                                v224 = 0;
                              }
LABEL_452:
                              sub_21021D468(&v388);
                              v225 = (_QWORD *)(v388 + 16);
                              v226 = *(unsigned __int8 *)(v388 + 39);
                              v227 = *(_QWORD *)(v388 + 24);
                              if ((v226 & 0x80u) == 0)
                                v228 = *(unsigned __int8 *)(v388 + 39);
                              else
                                v228 = *(_QWORD *)(v388 + 24);
                              v229 = *(_BYTE *)(v197 + 23);
                              if (v229 >= 0)
                                v230 = *(unsigned __int8 *)(v197 + 23);
                              else
                                v230 = *(_QWORD *)(v197 + 8);
                              if (v229 >= 0)
                                v231 = (unsigned __int8 *)v197;
                              else
                                v231 = *(unsigned __int8 **)v197;
                              if (v228 != v230)
                                goto LABEL_468;
                              if ((v226 & 0x80) == 0)
                              {
                                if (!*(_BYTE *)(v388 + 39))
                                  goto LABEL_504;
                                v232 = v231;
                                v233 = (unsigned __int8 *)(v388 + 16);
                                v234 = *(unsigned __int8 *)(v388 + 39);
                                while (*v233 == *v232)
                                {
                                  ++v233;
                                  ++v232;
                                  if (!--v234)
                                    goto LABEL_504;
                                }
LABEL_468:
                                if ((v226 & 0x80) != 0)
                                {
                                  v225 = (_QWORD *)*v225;
                                  v235 = *(_QWORD *)(v388 + 24);
                                }
                                else
                                {
                                  v235 = *(unsigned __int8 *)(v388 + 39);
                                }
                                goto LABEL_472;
                              }
                              v225 = (_QWORD *)*v225;
                              v236 = memcmp(v225, v231, *(_QWORD *)(v388 + 24));
                              v235 = v227;
                              if (!v236)
                                goto LABEL_504;
LABEL_472:
                              if (v235 > (uint64_t)v230 || memcmp(v231, v225, v235))
                                goto LABEL_474;
                              if ((v226 & 0x80) != 0)
                              {
                                if (v230 <= v227)
                                  goto LABEL_474;
                              }
                              else
                              {
                                v227 = v226;
                                if (v230 <= v226)
                                  goto LABEL_474;
                              }
                              if (v231[v227] == 46)
                              {
LABEL_504:
                                v249 = 0;
                                v250 = *(_DWORD *)(v197 + 24);
                                if (!v224)
                                  goto LABEL_524;
                                goto LABEL_505;
                              }
LABEL_474:
                              sub_21021D55C(&v387);
                              v237 = (_QWORD *)(v387 + 16);
                              v238 = *(unsigned __int8 *)(v387 + 39);
                              v239 = *(_QWORD *)(v387 + 24);
                              if ((v238 & 0x80u) == 0)
                                v240 = *(unsigned __int8 *)(v387 + 39);
                              else
                                v240 = *(_QWORD *)(v387 + 24);
                              v241 = *(_BYTE *)(v197 + 23);
                              if (v241 >= 0)
                                v242 = *(unsigned __int8 *)(v197 + 23);
                              else
                                v242 = *(_QWORD *)(v197 + 8);
                              if (v241 >= 0)
                                v243 = (unsigned __int8 *)v197;
                              else
                                v243 = *(unsigned __int8 **)v197;
                              if (v240 != v242)
                                goto LABEL_490;
                              if ((v238 & 0x80) != 0)
                              {
                                v237 = (_QWORD *)*v237;
                                v248 = memcmp(v237, v243, *(_QWORD *)(v387 + 24));
                                v247 = v239;
                                if (v248)
                                  goto LABEL_497;
                              }
                              else if (*(_BYTE *)(v387 + 39))
                              {
                                v244 = v243;
                                v245 = (unsigned __int8 *)(v387 + 16);
                                v246 = *(unsigned __int8 *)(v387 + 39);
                                while (*v245 == *v244)
                                {
                                  ++v245;
                                  ++v244;
                                  if (!--v246)
                                    goto LABEL_523;
                                }
LABEL_490:
                                if ((v238 & 0x80) != 0)
                                {
                                  v237 = (_QWORD *)*v237;
                                  v247 = *(_QWORD *)(v387 + 24);
                                }
                                else
                                {
                                  v247 = *(unsigned __int8 *)(v387 + 39);
                                }
LABEL_497:
                                if (v247 > (uint64_t)v242 || memcmp(v243, v237, v247))
                                  goto LABEL_406;
                                if ((v238 & 0x80) != 0)
                                {
                                  if (v242 <= v239)
                                    goto LABEL_406;
                                }
                                else
                                {
                                  v239 = v238;
                                  if (v242 <= v238)
                                    goto LABEL_406;
                                }
                                if (v243[v239] != 46)
                                  goto LABEL_406;
                              }
LABEL_523:
                              v249 = 1;
                              v250 = *(_DWORD *)(v197 + 24);
                              if (!v224)
                              {
LABEL_524:
                                v256 = 0x100000001;
                                switch(v250)
                                {
                                  case 0u:
                                    v266 = *(std::recursive_mutex ****)(a1 + 1144);
                                    if (v249)
                                    {
                                      v252 = **v266;
                                      std::recursive_mutex::lock(v252);
                                      v267 = *v266;
                                      if (*((_DWORD *)*v266 + 28) == 2)
                                      {
                                        v268 = (uint64_t *)v267[10];
                                        *(_QWORD *)&__p = v267[12];
                                        sub_21021C3D8(v268, (uint64_t)&__p, v197, 0x100000006);
                                      }
                                    }
                                    else
                                    {
                                      v252 = **v266;
                                      std::recursive_mutex::lock(v252);
                                      v278 = *v266;
                                      if (*((_DWORD *)*v266 + 29) == 2)
                                      {
                                        v279 = (uint64_t *)v278[10];
                                        *(_QWORD *)&__p = v278[13];
                                        sub_21021C3D8(v279, (uint64_t)&__p, v197, 0x100000006);
                                      }
                                    }
                                    goto LABEL_405;
                                  case 1u:
                                    v269 = *(std::recursive_mutex ****)(a1 + 1144);
                                    if (v249)
                                    {
                                      v252 = **v269;
                                      std::recursive_mutex::lock(v252);
                                      v270 = *v269;
                                      if (*((_DWORD *)*v269 + 28) == 2)
                                      {
                                        v271 = (uint64_t *)v270[10];
                                        *(_QWORD *)&__p = v270[12];
                                        sub_21021C3D8(v271, (uint64_t)&__p, v197, 0);
                                      }
                                    }
                                    else
                                    {
                                      v252 = **v269;
                                      std::recursive_mutex::lock(v252);
                                      v276 = *v269;
                                      if (*((_DWORD *)*v269 + 29) == 2)
                                      {
                                        v277 = (uint64_t *)v276[10];
                                        *(_QWORD *)&__p = v276[13];
                                        sub_21021C3D8(v277, (uint64_t)&__p, v197, 0);
                                      }
                                    }
                                    goto LABEL_405;
                                  case 2u:
                                    goto LABEL_538;
                                  case 3u:
                                    v256 = 0x100000002;
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                    if (!v249)
                                      goto LABEL_512;
                                    goto LABEL_539;
                                  case 4u:
                                    v256 = 0x100000003;
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                    if (!v249)
                                      goto LABEL_512;
                                    goto LABEL_539;
                                  case 5u:
                                    v256 = 0x100000004;
LABEL_538:
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                    if (v249)
                                      goto LABEL_539;
                                    goto LABEL_512;
                                  case 6u:
                                    v256 = 0x100000005;
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                    if (!v249)
                                      goto LABEL_512;
                                    goto LABEL_539;
                                  case 7u:
                                    v256 = 0x100000006;
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                    if (!v249)
                                      goto LABEL_512;
                                    goto LABEL_539;
                                  default:
                                    goto LABEL_713;
                                }
                              }
LABEL_505:
                              if (v250 > 1)
                              {
                                v255 = v250 - 2;
                                if (v255 >= 6)
                                {
LABEL_713:
                                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/Client.cpp", 663, (uint64_t)"", 0, (uint64_t)"invalid argument", 16, (void (*)(void **))sub_21023DDB0);
LABEL_714:
                                  abort();
                                }
                                v256 = v255 + 0x100000001;
                                v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                v258 = *v257;
                                if (v249)
                                {
LABEL_539:
                                  if (*((_DWORD *)v258 + 28) != 2)
                                  {
                                    sub_21021B940(v257, 6);
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                  }
                                  v272 = *v258;
                                  std::recursive_mutex::lock(*v258);
                                  v273 = *v257;
                                  if (*((_DWORD *)*v257 + 28) != 2)
                                  {
                                    std::recursive_mutex::unlock(v272);
LABEL_545:
                                    v263 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/Client.cpp", 702, (uint64_t)"ret == elog::APILogging::Available()", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
LABEL_546:
                                    if (v263)
                                      goto LABEL_714;
                                    goto LABEL_406;
                                  }
                                  v274 = (uint64_t *)v273[10];
                                  *(_QWORD *)&__p = v273[12];
                                  v275 = sub_21021C3D8(v274, (uint64_t)&__p, v197, v256);
                                  std::recursive_mutex::unlock(v272);
                                  if ((v275 & 1) == 0)
                                    goto LABEL_545;
                                }
                                else
                                {
LABEL_512:
                                  if (*((_DWORD *)v258 + 29) != 2)
                                  {
                                    sub_21021BBA4(v257, 6);
                                    v257 = *(std::recursive_mutex ****)(a1 + 1144);
                                    v258 = *v257;
                                  }
                                  v259 = *v258;
                                  std::recursive_mutex::lock(*v258);
                                  v260 = *v257;
                                  if (*((_DWORD *)*v257 + 29) != 2)
                                  {
                                    std::recursive_mutex::unlock(v259);
LABEL_518:
                                    v263 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/Client.cpp", 708, (uint64_t)"ret == elog::APILogging::InternalAvailable()", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                                    goto LABEL_546;
                                  }
                                  v261 = (uint64_t *)v260[10];
                                  *(_QWORD *)&__p = v260[13];
                                  v262 = sub_21021C3D8(v261, (uint64_t)&__p, v197, v256);
                                  std::recursive_mutex::unlock(v259);
                                  if ((v262 & 1) == 0)
                                    goto LABEL_518;
                                }
                              }
                              else
                              {
                                v251 = *(std::recursive_mutex ****)(a1 + 1144);
                                if (v249)
                                {
                                  v252 = **v251;
                                  std::recursive_mutex::lock(v252);
                                  v253 = *v251;
                                  *(_QWORD *)&__p = (*v251)[10];
                                  v337.__r_.__value_.__r.__words[0] = (std::string::size_type)v253[12];
                                  sub_21021C1A0((uint64_t **)&__p, (uint64_t *)&v337);
                                  v254 = *v251;
                                  if (*((_BYTE *)*v251 + 124))
                                    *((_BYTE *)v254 + 124) = 0;
                                  *((_DWORD *)v254 + 28) = 1;
                                }
                                else
                                {
                                  v252 = **v251;
                                  std::recursive_mutex::lock(v252);
                                  v264 = *v251;
                                  *(_QWORD *)&__p = (*v251)[10];
                                  v337.__r_.__value_.__r.__words[0] = (std::string::size_type)v264[13];
                                  sub_21021C254((uint64_t **)&__p, (uint64_t *)&v337);
                                  v265 = *v251;
                                  if (*((_BYTE *)*v251 + 132))
                                    *((_BYTE *)v265 + 132) = 0;
                                  *((_DWORD *)v265 + 29) = 1;
                                }
LABEL_405:
                                std::recursive_mutex::unlock(v252);
                              }
LABEL_406:
                              v197 += 32;
                              if (v197 == v198)
                              {
                                v193 = v383;
                                if (*(_BYTE *)(a1 + 1160))
                                  v280 = v383 == 0;
                                else
                                  v280 = 1;
                                v4 = a3;
                                v5 = v336;
                                if (!v280)
                                {
LABEL_558:
                                  v281 = *(std::recursive_mutex ****)(a1 + 1144);
                                  if (*((_DWORD *)*v281 + 28) != 2)
                                    goto LABEL_596;
                                  sub_21021C7A4(v281, &__p);
                                  v282 = __p;
                                  if ((_QWORD)__p == *((_QWORD *)&__p + 1))
                                  {
                                    if ((_QWORD)__p)
                                    {
                                      *((_QWORD *)&__p + 1) = __p;
                                      operator delete((void *)__p);
                                    }
                                    goto LABEL_579;
                                  }
                                  v283 = *((_QWORD *)&__p + 1);
                                  v284 = (_QWORD *)__p;
                                  while (*v284 != v193)
                                  {
                                    v284 += 2;
                                    if (v284 == *((_QWORD **)&__p + 1))
                                    {
                                      v284 = (_QWORD *)*((_QWORD *)&__p + 1);
                                      break;
                                    }
                                  }
                                  if ((_QWORD)__p)
                                  {
                                    do
                                    {
                                      v285 = *(std::__shared_weak_count **)(v283 - 8);
                                      if (v285)
                                      {
                                        v286 = (unint64_t *)&v285->__shared_owners_;
                                        do
                                          v287 = __ldaxr(v286);
                                        while (__stlxr(v287 - 1, v286));
                                        if (!v287)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                                          std::__shared_weak_count::__release_weak(v285);
                                        }
                                      }
                                      v283 -= 16;
                                    }
                                    while (v283 != (_QWORD)v282);
                                    *((_QWORD *)&__p + 1) = v282;
                                    operator delete((void *)__p);
                                    v199 = v284 == *((_QWORD **)&v282 + 1);
                                    v5 = v336;
                                    if (v199)
                                    {
                                      v193 = v383;
                                      goto LABEL_579;
                                    }
                                  }
                                  else
                                  {
                                    v199 = v284 == *((_QWORD **)&__p + 1);
                                    v5 = v336;
                                    if (!v199)
                                      goto LABEL_596;
LABEL_579:
                                    v288 = (std::__shared_weak_count *)v384;
                                    v337.__r_.__value_.__r.__words[0] = v193;
                                    v337.__r_.__value_.__l.__size_ = v384;
                                    if (v384)
                                    {
                                      v289 = (unint64_t *)(v384 + 8);
                                      do
                                        v290 = __ldxr(v289);
                                      while (__stxr(v290 + 1, v289));
                                      v291 = *(std::recursive_mutex ****)(a1 + 1144);
                                      *((_QWORD *)&__p + 1) = v288;
                                      do
                                        v292 = __ldxr(v289);
                                      while (__stxr(v292 + 1, v289));
                                    }
                                    else
                                    {
                                      v291 = *(std::recursive_mutex ****)(a1 + 1144);
                                      *((_QWORD *)&__p + 1) = 0;
                                    }
                                    *(_QWORD *)&__p = v193;
                                    sub_21021C5D4(v291, (uint64_t *)&__p);
                                    if (v288)
                                    {
                                      v293 = (unint64_t *)&v288->__shared_owners_;
                                      do
                                        v294 = __ldaxr(v293);
                                      while (__stlxr(v294 - 1, v293));
                                      if (!v294)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                                        std::__shared_weak_count::__release_weak(v288);
                                      }
                                    }
                                    v295 = (std::__shared_weak_count *)v337.__r_.__value_.__l.__size_;
                                    if (v337.__r_.__value_.__l.__size_)
                                    {
                                      v296 = (unint64_t *)(v337.__r_.__value_.__l.__size_ + 8);
                                      do
                                        v297 = __ldaxr(v296);
                                      while (__stlxr(v297 - 1, v296));
                                      if (!v297)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                                        std::__shared_weak_count::__release_weak(v295);
                                      }
                                    }
                                  }
LABEL_596:
                                  v298 = *(std::recursive_mutex ****)(a1 + 1144);
                                  if (*((_DWORD *)*v298 + 29) == 2)
                                  {
                                    sub_21021C8C0(v298, &__p);
                                    v299 = __p;
                                    if ((_QWORD)__p == *((_QWORD *)&__p + 1))
                                    {
                                      if ((_QWORD)__p)
                                      {
                                        *((_QWORD *)&__p + 1) = __p;
                                        operator delete((void *)__p);
                                      }
                                      goto LABEL_617;
                                    }
                                    v300 = *((_QWORD *)&__p + 1);
                                    v301 = (_QWORD *)__p;
                                    while (*v301 != v383)
                                    {
                                      v301 += 2;
                                      if (v301 == *((_QWORD **)&__p + 1))
                                      {
                                        v301 = (_QWORD *)*((_QWORD *)&__p + 1);
                                        break;
                                      }
                                    }
                                    if ((_QWORD)__p)
                                    {
                                      do
                                      {
                                        v302 = *(std::__shared_weak_count **)(v300 - 8);
                                        if (v302)
                                        {
                                          v303 = (unint64_t *)&v302->__shared_owners_;
                                          do
                                            v304 = __ldaxr(v303);
                                          while (__stlxr(v304 - 1, v303));
                                          if (!v304)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                                            std::__shared_weak_count::__release_weak(v302);
                                          }
                                        }
                                        v300 -= 16;
                                      }
                                      while (v300 != (_QWORD)v299);
                                      *((_QWORD *)&__p + 1) = v299;
                                      operator delete((void *)__p);
                                      v199 = v301 == *((_QWORD **)&v299 + 1);
                                      v5 = v336;
                                      if (v199)
                                        goto LABEL_617;
                                    }
                                    else
                                    {
                                      v199 = v301 == *((_QWORD **)&__p + 1);
                                      v5 = v336;
                                      if (!v199)
                                        goto LABEL_634;
LABEL_617:
                                      v305 = v383;
                                      v306 = (std::__shared_weak_count *)v384;
                                      v385 = v383;
                                      v386 = (std::__shared_weak_count *)v384;
                                      if (v384)
                                      {
                                        v307 = (unint64_t *)(v384 + 8);
                                        do
                                          v308 = __ldxr(v307);
                                        while (__stxr(v308 + 1, v307));
                                        v309 = *(std::recursive_mutex ****)(a1 + 1144);
                                        *((_QWORD *)&__p + 1) = v306;
                                        do
                                          v310 = __ldxr(v307);
                                        while (__stxr(v310 + 1, v307));
                                      }
                                      else
                                      {
                                        v309 = *(std::recursive_mutex ****)(a1 + 1144);
                                        *((_QWORD *)&__p + 1) = 0;
                                      }
                                      *(_QWORD *)&__p = v305;
                                      sub_21021C6BC(v309, (uint64_t *)&__p);
                                      if (v306)
                                      {
                                        v311 = (unint64_t *)&v306->__shared_owners_;
                                        do
                                          v312 = __ldaxr(v311);
                                        while (__stlxr(v312 - 1, v311));
                                        if (!v312)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                                          std::__shared_weak_count::__release_weak(v306);
                                        }
                                      }
                                      v313 = v386;
                                      if (v386)
                                      {
                                        v314 = (unint64_t *)&v386->__shared_owners_;
                                        do
                                          v315 = __ldaxr(v314);
                                        while (__stlxr(v315 - 1, v314));
                                        if (!v315)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                                          std::__shared_weak_count::__release_weak(v313);
                                        }
                                      }
                                    }
                                  }
                                }
LABEL_634:
                                if (v332)
                                {
                                  v316 = (unint64_t *)&v332->__shared_owners_;
                                  do
                                    v317 = __ldaxr(v316);
                                  while (__stlxr(v317 - 1, v316));
                                  if (!v317)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                                    std::__shared_weak_count::__release_weak(v332);
                                  }
                                }
                                v63 = v359;
                                if (v359)
                                {
                                  v318 = (unint64_t *)&v359->__shared_owners_;
                                  do
                                    v70 = __ldaxr(v318);
                                  while (__stlxr(v70 - 1, v318));
                                  goto LABEL_642;
                                }
LABEL_5:
                                v6 += 24;
                                if (v6 == v5)
                                  goto LABEL_644;
                                goto LABEL_6;
                              }
                            }
                          }
                          v130 = *(_QWORD *)(a1 + 1120);
                          v131 = *(std::mutex **)(v130 + 32);
                          if (!v131)
                          {
                            v138 = *(std::__shared_weak_count **)(v130 + 8);
                            if (!v138 || (v139 = std::__shared_weak_count::lock(v138)) == 0)
                            {
                              v146 = 0;
                              v147 = *(std::__shared_weak_count **)(a1 + 32);
                              if (v147)
                                goto LABEL_317;
                              goto LABEL_329;
                            }
                            v133 = v139;
                            v134 = *(_QWORD *)v130;
LABEL_306:
                            if (v134)
                            {
                              v331 = v134;
                              if (v133)
                              {
                                v141 = (unint64_t *)&v133->__shared_owners_;
                                do
                                  v142 = __ldxr(v141);
                                while (__stxr(v142 + 1, v141));
                                p_shared_weak_owners = (unint64_t *)&v133->__shared_weak_owners_;
                                do
                                  v144 = __ldxr(p_shared_weak_owners);
                                while (__stxr(v144 + 1, p_shared_weak_owners));
                                do
                                  v145 = __ldaxr(v141);
                                while (__stlxr(v145 - 1, v141));
                                if (!v145)
                                {
                                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                                  std::__shared_weak_count::__release_weak(v133);
                                }
                                v146 = v133;
                                goto LABEL_333;
                              }
                              goto LABEL_337;
                            }
                            v146 = v133;
                            v147 = *(std::__shared_weak_count **)(a1 + 32);
                            if (v147)
                            {
LABEL_317:
                              v148 = *(_QWORD *)(a1 + 24);
                              v149 = (unint64_t *)&v147->__shared_weak_owners_;
                              do
                                v150 = __ldxr(v149);
                              while (__stxr(v150 + 1, v149));
                              v151 = std::__shared_weak_count::lock(v147);
                              v133 = v151;
                              if (v151)
                              {
                                v152 = v148 + 8;
                                if (!v148)
                                  v152 = 0;
                                v331 = v152;
                                v153 = (unint64_t *)&v151->__shared_weak_owners_;
                                do
                                  v154 = __ldxr(v153);
                                while (__stxr(v154 + 1, v153));
                                std::__shared_weak_count::__release_weak(v147);
                                v155 = (unint64_t *)&v133->__shared_owners_;
                                do
                                  v156 = __ldaxr(v155);
                                while (__stlxr(v156 - 1, v155));
                                if (v156)
                                {
LABEL_332:
                                  if (v146)
                                  {
LABEL_333:
                                    v157 = (unint64_t *)&v146->__shared_owners_;
                                    do
                                      v158 = __ldaxr(v157);
                                    while (__stlxr(v158 - 1, v157));
                                    if (!v158)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                                      std::__shared_weak_count::__release_weak(v146);
                                    }
                                  }
LABEL_337:
                                  v159 = *(_QWORD *)(a1 + 1120);
                                  v160 = *(std::mutex **)(v159 + 32);
                                  if (v160)
                                  {
                                    v161 = v112 + 32;
                                    std::mutex::lock(*(std::mutex **)(v159 + 32));
                                    v163 = *(_QWORD *)(v159 + 40);
                                    v162 = *(std::__shared_weak_count **)(v159 + 48);
                                    v383 = v163;
                                    v384 = (std::string::size_type)v162;
                                    if (v162)
                                    {
                                      v164 = (unint64_t *)&v162->__shared_owners_;
                                      do
                                        v165 = __ldxr(v164);
                                      while (__stxr(v165 + 1, v164));
                                    }
                                    std::mutex::unlock(v160);
                                  }
                                  else
                                  {
                                    v161 = v112 + 32;
                                    v163 = *(_QWORD *)(v159 + 40);
                                    v162 = *(std::__shared_weak_count **)(v159 + 48);
                                    v383 = v163;
                                    v384 = (std::string::size_type)v162;
                                    if (v162)
                                    {
                                      v166 = (unint64_t *)&v162->__shared_owners_;
                                      do
                                        v167 = __ldxr(v166);
                                      while (__stxr(v167 + 1, v166));
                                    }
                                  }
                                  v168 = operator new(0x70uLL);
                                  v168[1] = 0;
                                  v168[2] = 0;
                                  *v168 = &off_24CA07898;
                                  *(_QWORD *)&__s1 = v163;
                                  *((_QWORD *)&__s1 + 1) = v162;
                                  v383 = 0;
                                  v384 = 0;
                                  v337.__r_.__value_.__r.__words[0] = v331;
                                  v337.__r_.__value_.__l.__size_ = (std::string::size_type)v133;
                                  if (v133)
                                  {
                                    v169 = (unint64_t *)&v133->__shared_weak_owners_;
                                    do
                                      v170 = __ldxr(v169);
                                    while (__stxr(v170 + 1, v169));
                                  }
                                  LOBYTE(__p) = 0;
                                  BYTE8(v347) = 0;
                                  v171 = (char *)v161;
                                  if (*(_BYTE *)(v112 + 56))
                                  {
                                    if (*(char *)(v112 + 55) < 0)
                                    {
                                      sub_20E860C04(&__p, *(void **)(v112 + 32), *(_QWORD *)(v112 + 40));
                                    }
                                    else
                                    {
                                      __p = *(_OWORD *)v161;
                                      *(_QWORD *)&v347 = *(_QWORD *)(v161 + 16);
                                    }
                                    BYTE8(v347) = 1;
                                  }
                                  v385 = 0;
                                  v386 = 0;
                                  sub_20FEFE6EC((uint64_t)(v168 + 3), &__s1, &v337, &__p, &v385);
                                  if (BYTE8(v347) && SBYTE7(v347) < 0)
                                    operator delete((void *)__p);
                                  if (v133)
                                    std::__shared_weak_count::__release_weak(v133);
                                  if (v162)
                                  {
                                    v172 = (unint64_t *)&v162->__shared_owners_;
                                    do
                                      v173 = __ldaxr(v172);
                                    while (__stlxr(v173 - 1, v172));
                                    if (!v173)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                                      std::__shared_weak_count::__release_weak(v162);
                                    }
                                  }
                                  *(_QWORD *)(a1 + 1168) = v168 + 3;
                                  v174 = *(std::__shared_weak_count **)(a1 + 1176);
                                  *(_QWORD *)(a1 + 1176) = v168;
                                  if (v174)
                                  {
                                    v175 = (unint64_t *)&v174->__shared_owners_;
                                    do
                                      v176 = __ldaxr(v175);
                                    while (__stlxr(v176 - 1, v175));
                                    if (!v176)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                                      std::__shared_weak_count::__release_weak(v174);
                                    }
                                  }
                                  v177 = (std::__shared_weak_count *)v384;
                                  if (v384)
                                  {
                                    v178 = (unint64_t *)(v384 + 8);
                                    do
                                      v179 = __ldaxr(v178);
                                    while (__stlxr(v179 - 1, v178));
                                    if (!v179)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                                      std::__shared_weak_count::__release_weak(v177);
                                    }
                                  }
                                  v180 = *(_QWORD *)(a1 + 1120);
                                  v181 = *(std::mutex **)(v180 + 32);
                                  if (v181)
                                  {
                                    std::mutex::lock(*(std::mutex **)(v180 + 32));
                                    v183 = *(_QWORD *)(v180 + 40);
                                    v182 = *(std::__shared_weak_count **)(v180 + 48);
                                    *(_QWORD *)&__p = v183;
                                    *((_QWORD *)&__p + 1) = v182;
                                    if (v182)
                                    {
                                      v184 = (unint64_t *)&v182->__shared_owners_;
                                      do
                                        v185 = __ldxr(v184);
                                      while (__stxr(v185 + 1, v184));
                                    }
                                    std::mutex::unlock(v181);
                                  }
                                  else
                                  {
                                    v183 = *(_QWORD *)(v180 + 40);
                                    v182 = *(std::__shared_weak_count **)(v180 + 48);
                                    *(_QWORD *)&__p = v183;
                                    *((_QWORD *)&__p + 1) = v182;
                                    if (v182)
                                    {
                                      v186 = (unint64_t *)&v182->__shared_owners_;
                                      do
                                        v187 = __ldxr(v186);
                                      while (__stxr(v187 + 1, v186));
                                    }
                                  }
                                  v188 = *(char *)(v112 + 55);
                                  if (v188 >= 0)
                                    v189 = v171;
                                  else
                                    v189 = *(char **)(v112 + 32);
                                  if (v188 >= 0)
                                    v190 = *(unsigned __int8 *)(v112 + 55);
                                  else
                                    v190 = *(_QWORD *)(v112 + 40);
                                  sub_20FF21918(v183, v189, v190, 1);
                                  if (v182)
                                  {
                                    v191 = (unint64_t *)&v182->__shared_owners_;
                                    do
                                      v192 = __ldaxr(v191);
                                    while (__stlxr(v192 - 1, v191));
                                    if (!v192)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                                      std::__shared_weak_count::__release_weak(v182);
                                    }
                                  }
                                  if (v133)
                                    std::__shared_weak_count::__release_weak(v133);
                                  goto LABEL_394;
                                }
                                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                                v147 = v133;
                              }
                              else
                              {
                                v331 = 0;
                              }
                              std::__shared_weak_count::__release_weak(v147);
                              goto LABEL_332;
                            }
LABEL_329:
                            v331 = 0;
                            v133 = 0;
                            goto LABEL_332;
                          }
                          std::mutex::lock(*(std::mutex **)(v130 + 32));
                          v132 = *(std::__shared_weak_count **)(v130 + 8);
                          if (v132)
                          {
                            v133 = std::__shared_weak_count::lock(v132);
                            if (v133)
                            {
                              v134 = *(_QWORD *)v130;
LABEL_305:
                              std::mutex::unlock(v131);
                              goto LABEL_306;
                            }
                          }
                          else
                          {
                            v133 = 0;
                          }
                          v134 = 0;
                          goto LABEL_305;
                        }
LABEL_244:
                        v112 = 0;
                        v358 = 0;
                        v359 = 0;
                        if (!MEMORY[0x38])
                          goto LABEL_394;
                        goto LABEL_245;
                      }
LABEL_219:
                      if (v108)
                        goto LABEL_220;
                      goto LABEL_244;
                    }
LABEL_208:
                    if (!v98)
                      goto LABEL_266;
                    goto LABEL_209;
                  }
LABEL_206:
                  v98 = DWORD2(v373) == 4;
                }
                if (v99 < 0)
                  goto LABEL_265;
                goto LABEL_208;
              }
LABEL_149:
              if (v72)
                goto LABEL_150;
              goto LABEL_191;
            }
LABEL_147:
            v72 = DWORD2(v373) == 3;
          }
          if (v73 < 0)
            goto LABEL_190;
          goto LABEL_149;
        }
LABEL_106:
        if (v50)
          goto LABEL_107;
        goto LABEL_132;
      }
LABEL_104:
      v50 = DWORD2(v373) == 5;
    }
    if (v51 < 0)
      goto LABEL_131;
    goto LABEL_106;
  }
  if ((BYTE7(v373) & 0x80) != 0)
  {
    if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
    {
      operator delete((void *)__s1);
      goto LABEL_89;
    }
    goto LABEL_38;
  }
  if (!BYTE7(v373))
  {
LABEL_38:
    v13 = DWORD2(v373) == 2;
    goto LABEL_39;
  }
  v16 = &__s1;
  v17 = &__p;
  v18 = BYTE7(v373);
  while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v17)
  {
    v16 = (__int128 *)((char *)v16 + 1);
    v17 = (__int128 *)((char *)v17 + 1);
    if (!--v18)
      goto LABEL_38;
  }
  v13 = 0;
  if ((BYTE7(v373) & 0x80) == 0)
    goto LABEL_40;
LABEL_88:
  operator delete((void *)__s1);
  if (!v13)
    goto LABEL_89;
LABEL_41:
  v23 = *(const void **)(v6 + 8);
  v24 = *(std::__shared_weak_count **)(v6 + 16);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (v23)
  {
    v27 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA07990, 0) != 0;
    if (!v24)
      goto LABEL_51;
  }
  else
  {
    v27 = 0;
    if (!v24)
      goto LABEL_51;
  }
  v28 = (unint64_t *)&v24->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_51:
    if (v27)
      goto LABEL_52;
LABEL_60:
    v31 = 0;
    v30 = 0;
    __s1 = 0uLL;
    if (!MEMORY[0x38])
      goto LABEL_61;
LABEL_56:
    if (*(_DWORD *)(v30 + 48))
    {
      v34 = 1;
      v35 = 1;
      if (!v31)
        goto LABEL_79;
LABEL_75:
      v44 = (unint64_t *)&v31->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 1104))
      {
        v43 = *(_OWORD *)(v30 + 8);
        v42 = v30 + 8;
        __p = v43;
        v347 = *(_OWORD *)(v42 + 16);
        v348 = *(_QWORD *)(v42 + 32);
        sub_20FF1A58C(v329, &__p);
      }
      v34 = 0;
      v35 = 0;
      if (v31)
        goto LABEL_75;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v27)
      goto LABEL_60;
LABEL_52:
    v30 = *(_QWORD *)(v6 + 8);
    v31 = *(std::__shared_weak_count **)(v6 + 16);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    *(_QWORD *)&__s1 = v30;
    *((_QWORD *)&__s1 + 1) = v31;
    if (*(_BYTE *)(v30 + 56))
      goto LABEL_56;
LABEL_61:
    if (*(_BYTE *)(a1 + 440))
    {
      v37 = *(_QWORD *)(a1 + 424);
      v36 = *(std::__shared_weak_count **)(a1 + 432);
      *(_QWORD *)&__p = v37;
      *((_QWORD *)&__p + 1) = v36;
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      std::mutex::lock((std::mutex *)(v37 + 8));
      ++*(_QWORD *)v37;
      std::condition_variable::notify_all((std::condition_variable *)(v37 + 72));
      std::mutex::unlock((std::mutex *)(v37 + 8));
      if (v36)
      {
        v40 = (unint64_t *)&v36->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    v35 = 0;
    v34 = 1;
    if (v31)
      goto LABEL_75;
  }
LABEL_79:
  if ((v35 & 1) == 0)
  {
    v5 = v336;
    if (!v34)
      goto LABEL_5;
    v19 = v370;
    if ((unint64_t)v370 < v371)
    {
      *(_QWORD *)v370 = &off_24CA0C0E8;
      *((_QWORD *)v19 + 1) = *(_QWORD *)(v6 + 8);
      v46 = *(_QWORD *)(v6 + 16);
      *((_QWORD *)v19 + 2) = v46;
      if (v46)
      {
        v47 = (unint64_t *)(v46 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      goto LABEL_35;
    }
    goto LABEL_3;
  }
  sub_20E89F6D4(v360, "Client received invalid sync command from server.");
  v368 = 1;
  sub_20FDCABE4(8u, (__int128 *)v360, (uint64_t)&__p);
  *(_OWORD *)v4 = __p;
  *(_BYTE *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (v356)
  {
    *(_BYTE *)(v4 + 40) = 0;
    v325 = v349;
    if (v349)
    {
      *(_OWORD *)(v4 + 16) = v347;
      *(_QWORD *)(v4 + 32) = v348;
      v348 = 0;
      v347 = 0uLL;
      *(_BYTE *)(v4 + 40) = 1;
    }
    *(_BYTE *)(v4 + 48) = 0;
    *(_BYTE *)(v4 + 104) = 0;
    if (v355)
    {
      v326 = v352;
      *(_QWORD *)(v4 + 64) = v351;
      *(_OWORD *)(v4 + 48) = v350;
      v350 = 0uLL;
      *(_QWORD *)(v4 + 72) = v326;
      *(_OWORD *)(v4 + 80) = v353;
      *(_QWORD *)(v4 + 96) = v354;
      v351 = 0;
      v353 = 0uLL;
      v354 = 0;
      *(_BYTE *)(v4 + 104) = 1;
    }
    *(_BYTE *)(v4 + 112) = 1;
    *(_BYTE *)(v4 + 120) = 0;
    if (v325 && SHIBYTE(v348) < 0)
      operator delete((void *)v347);
  }
  else
  {
    *(_BYTE *)(v4 + 120) = 0;
  }
  if (v368)
  {
    if (v367)
    {
      if (v366 < 0)
        operator delete(v365);
      if (v364 < 0)
        operator delete(v363);
    }
    if (v362 && v361 < 0)
      operator delete(v360[0]);
  }
LABEL_648:
  v319 = (char *)v369;
  if (v369)
  {
    v320 = v370;
    v321 = v369;
    if (v370 != v369)
    {
      do
      {
        v322 = (std::__shared_weak_count *)*((_QWORD *)v320 - 1);
        if (v322)
        {
          v323 = (unint64_t *)&v322->__shared_owners_;
          do
            v324 = __ldaxr(v323);
          while (__stlxr(v324 - 1, v323));
          if (!v324)
          {
            ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
            std::__shared_weak_count::__release_weak(v322);
          }
        }
        v320 -= 24;
      }
      while (v320 != v319);
      v321 = v369;
    }
    v370 = v319;
    operator delete(v321);
  }
}

void sub_20FDCED48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  char a72;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  void *v76;

  if (a41 && a40 < 0)
    operator delete(__p);
  if (v72)
    std::__shared_weak_count::__release_weak(v72);
  sub_20E86665C((uint64_t)&a72);
  std::__shared_weak_count::~__shared_weak_count(v73);
  operator delete(v76);
  sub_20E86665C(v74 - 160);
  if (v72)
  {
    std::__shared_weak_count::__release_weak(v72);
    sub_20E86665C((uint64_t)&a55);
    sub_20EF76610(&a70);
    _Unwind_Resume(a1);
  }
  sub_20E86665C((uint64_t)&a55);
  sub_20EF76610(&a70);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDCF11C(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 32))(v3);
  if (v12 || !v11)
    return a1 + 8;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1 + 8;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1 + 8;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1 + 8;
  operator delete(v3[2]);
  return a1 + 8;
}

uint64_t sub_20FDCF1CC(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v3, a1 - 8);
  if (v12 || !v11)
    return a1;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1;
  operator delete(v3[2]);
  return a1;
}

void sub_20FDCF27C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::mutex *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::mutex *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  __int128 v63;
  char v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  char v70;
  char v71;
  __int128 v72;
  void *v73;
  char v74;
  char v75;
  void *v76;
  char v77;
  void *__p;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v82, a2);
  if (!v82)
    goto LABEL_111;
  v3 = *(uint64_t **)(a1 + 1120);
  v4 = (std::mutex *)v3[4];
  if (v4)
  {
    std::mutex::lock((std::mutex *)v3[4]);
    v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        v7 = *v3;
        std::mutex::unlock(v4);
        if (v7)
          goto LABEL_6;
      }
      else
      {
        std::mutex::unlock(v4);
      }
    }
    else
    {
      v6 = 0;
      std::mutex::unlock(v4);
    }
    goto LABEL_14;
  }
  v10 = (std::__shared_weak_count *)v3[1];
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v6 = v11;
      if (*v3)
      {
LABEL_6:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        goto LABEL_109;
      }
LABEL_14:
      v12 = *(unsigned __int8 *)(a1 + 1112);
      if (v6)
      {
        v13 = (unint64_t *)&v6->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v12)
        goto LABEL_111;
      goto LABEL_22;
    }
  }
  if (*(_BYTE *)(a1 + 1112))
    goto LABEL_111;
LABEL_22:
  sub_20FF02388((unsigned __int8 *)(a1 + 1128), (uint64_t)&v62);
  v72 = v62;
  sub_20E89EFE4(&v73, &v63);
  if (*(_BYTE *)(a1 + 112))
  {
    v15 = *(_QWORD *)(a1 + 104);
    if (!v15)
      sub_20E86D37C();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 48))(v15, &v72);
  }
  if (v81)
  {
    if (v80)
    {
      if (v79 < 0)
        operator delete(__p);
      if (v77 < 0)
        operator delete(v76);
    }
    if (v75 && v74 < 0)
      operator delete(v73);
  }
  if (v71)
  {
    if (v70)
    {
      if (v69 < 0)
        operator delete(v68);
      if (v67 < 0)
        operator delete(v66);
    }
    if (v65 && v64 < 0)
      operator delete((void *)v63);
  }
  v16 = *(uint64_t **)(a1 + 1120);
  v6 = v83;
  v60 = v82;
  v61 = v83;
  if (v83)
  {
    v17 = (unint64_t *)&v83->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v16[1];
  if (v19)
  {
    v20 = std::__shared_weak_count::lock(v19);
    if (v20)
    {
      v21 = v20;
      v22 = *v16;
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v21);
      }
      if (v22
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/Client.cpp", 66, (uint64_t)"!controlled_visuallogger.lock()", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_117;
      }
    }
  }
  if (!v16[2]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/Client.cpp", 67, (uint64_t)"owned_contexts", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_117;
  }
  v25 = (std::mutex *)v16[4];
  if (v25)
    goto LABEL_59;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/Client.cpp", 68, (uint64_t)"mutex", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_117:
    abort();
  }
  v25 = (std::mutex *)v16[4];
LABEL_59:
  std::mutex::lock(v25);
  v27 = v16[5];
  v26 = v16[6];
  *(_QWORD *)&v62 = v27;
  *((_QWORD *)&v62 + 1) = v26;
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = v16[5];
  }
  else
  {
    v30 = v27;
  }
  sub_20FF21E84(v30, (uint64_t)&v72);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v60 + 80))(&v84, v60);
  if (v84 != v27)
  {
    v31 = v16[5];
    v32 = *(_QWORD **)(v31 + 8);
    if (!v32)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_118;
      }
      v32 = *(_QWORD **)(v31 + 8);
    }
    sub_20FF2091C(v32, a1 + 16);
    v33 = v84;
    v34 = *(_QWORD *)(v84 + 8);
    if (!v34)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_118;
      }
      v34 = *(_QWORD *)(v33 + 8);
    }
    sub_20FF20A40(v34, &v72);
  }
  if (v61)
  {
    p_shared_weak_owners = (unint64_t *)&v61->__shared_weak_owners_;
    do
      v36 = __ldxr(p_shared_weak_owners);
    while (__stxr(v36 + 1, p_shared_weak_owners));
  }
  v37 = (std::__shared_weak_count *)v16[1];
  *v16 = v60;
  v16[1] = (uint64_t)v61;
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  v39 = v84;
  v38 = v85;
  if (v85)
  {
    v40 = (unint64_t *)&v85->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = (std::__shared_weak_count *)v16[6];
  v16[5] = v39;
  v16[6] = (uint64_t)v38;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v84 != (_QWORD)v62)
  {
    v45 = v16[5];
    v46 = *(_QWORD *)(v45 + 8);
    if (v46)
    {
LABEL_90:
      sub_20FF205CC(v46, a1 + 16);
      goto LABEL_91;
    }
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)&unk_2102CCBA3, 0, (void (*)(void **))sub_21023DDB0))
    {
      v46 = *(_QWORD *)(v45 + 8);
      goto LABEL_90;
    }
LABEL_118:
    abort();
  }
LABEL_91:
  v47 = (std::__shared_weak_count *)v16[3];
  v16[2] = 0;
  v16[3] = 0;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v85;
  if (v85)
  {
    v51 = (unint64_t *)&v85->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  sub_20E866BE0((uint64_t)&v72, *((char **)&v72 + 1));
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  std::mutex::unlock(v25);
  if (v6)
  {
    v56 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(v56);
    while (__stlxr(v9 - 1, v56));
LABEL_109:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_111:
  v57 = v83;
  if (v83)
  {
    v58 = (unint64_t *)&v83->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_20FDCF8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28)
{
  std::mutex *v28;
  uint64_t v29;

  sub_20E866BE0((uint64_t)&a27, a28);
  sub_20E86665C((uint64_t)&a12);
  std::mutex::unlock(v28);
  sub_20E86665C((uint64_t)&a10);
  sub_20E86665C(v29 - 96);
  _Unwind_Resume(a1);
}

void sub_20FDCF9A0(uint64_t a1, uint64_t a2)
{
  sub_20FDCF27C(a1 - 8, a2);
}

uint64_t sub_20FDCF9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD v21[7];
  char v22;
  _BYTE v23[24];
  _BYTE *v24;
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24CA073E0;
  *(_QWORD *)(a1 + 8) = &unk_24CA07440;
  v26[0] = 0;
  v28 = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    v11 = *(_QWORD *)(a3 + 24);
    if (v11)
    {
      if (v11 == a3)
      {
        v27 = v26;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a3 + 24))(a3, v26);
      }
      else
      {
        v27 = *(_BYTE **)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
      }
    }
    else
    {
      v27 = 0;
    }
    v28 = 1;
  }
  v23[0] = 0;
  v25 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v12 = *(_QWORD *)(a4 + 24);
    if (v12)
    {
      if (v12 == a4)
      {
        v24 = v23;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v23);
      }
      else
      {
        v24 = *(_BYTE **)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
      }
    }
    else
    {
      v24 = 0;
    }
    v25 = 1;
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v13 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8);
    v14 = 1;
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  sub_20FDC8F90((uint64_t)v21, a2, (uint64_t)v26, (uint64_t)v23, v13, v14, a5, a6);
  if (!v22)
  {
    sub_20ED3C7D0((uint64_t)v21);
    sub_20E9F5CE8((uint64_t)v21);
  }
  *(_OWORD *)(a1 + 16) = v21[0];
  v21[0] = 0uLL;
  if (v25)
  {
    v16 = v24;
    if (v24 == v23)
    {
      v17 = 4;
      v16 = v23;
    }
    else
    {
      if (!v24)
        goto LABEL_25;
      v17 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v16 + 8 * v17))(v16, v15);
  }
LABEL_25:
  if (v28)
  {
    v18 = v27;
    if (v27 == v26)
    {
      v19 = 4;
      v18 = v26;
      goto LABEL_30;
    }
    if (v27)
    {
      v19 = 5;
LABEL_30:
      (*(void (**)(_QWORD *, uint64_t))(*v18 + 8 * v19))(v18, v15);
    }
  }
  return a1;
}

void sub_20FDCFBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FDCFC68(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_24CA073E0;
  a1[1] = &unk_24CA07440;
  v2 = (std::__shared_weak_count *)a1[3];
  a1[2] = 0;
  a1[3] = 0;
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20FDCFD1C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(a1 - 1) = &off_24CA073E0;
  v1 = (std::__shared_weak_count *)a1[2];
  *a1 = &unk_24CA07440;
  a1[1] = 0;
  a1[2] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v5 = (std::__shared_weak_count *)a1[2];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_20FDCFDCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_24CA073E0;
  a1[1] = &unk_24CA07440;
  v2 = (std::__shared_weak_count *)a1[3];
  a1[2] = 0;
  a1[3] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    v5 = (std::__shared_weak_count *)a1[3];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20FDCFE80(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(a1 - 1) = &off_24CA073E0;
  v1 = (std::__shared_weak_count *)a1[2];
  *a1 = &unk_24CA07440;
  a1[1] = 0;
  a1[2] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v5 = (std::__shared_weak_count *)a1[2];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDCFF44(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) + 8;
}

uint64_t sub_20FDCFF50(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20FDCFF60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20FDCFF70(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20FDCFF80(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20FDCFF90(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 16) + 32))(v3);
  if (v12 || !v11)
    return a1 + 8;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1 + 8;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1 + 8;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1 + 8;
  operator delete(v3[2]);
  return a1 + 8;
}

uint64_t sub_20FDD0044(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(v3);
  if (v12 || !v11)
    return a1;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1;
  operator delete(v3[2]);
  return a1;
}

void sub_20FDD00F8(uint64_t a1, uint64_t a2)
{
  sub_20FDCF27C(*(_QWORD *)(a1 + 16), a2);
}

void sub_20FDD0100(uint64_t a1, uint64_t a2)
{
  sub_20FDCF27C(*(_QWORD *)(a1 + 8), a2);
}

void sub_20FDD0110(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::mutex *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::mutex *)a1[4];
    a1[4] = 0;
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (std::mutex *)a1[4];
    a1[4] = 0;
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[3];
      if (!v6)
        goto LABEL_11;
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v9 = (std::__shared_weak_count *)a1[1];
        if (!v9)
          goto LABEL_17;
      }
      else
      {
LABEL_11:
        v9 = (std::__shared_weak_count *)a1[1];
        if (!v9)
          goto LABEL_17;
      }
      std::__shared_weak_count::__release_weak(v9);
LABEL_17:
      JUMPOUT(0x212BC6398);
    }
  }
  std::mutex::~mutex(v5);
  MEMORY[0x212BC6398]();
  goto LABEL_7;
}

void sub_20FDD0200()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FDD0214(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19[2];
  _QWORD v20[3];
  _QWORD *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t ***)(a1 + 8);
  v2 = (uint64_t)v1[1];
  v3 = *(_DWORD *)(v2 + 32);
  v15 = *(_OWORD *)(v2 + 112);
  v16 = *(_QWORD *)(v2 + 128);
  v4 = **v1;
  v20[0] = &off_24CA07538;
  v20[1] = v4;
  v21 = v20;
  v22 = 1;
  v19[0] = 0;
  v19[1] = 0;
  *(_QWORD *)&v18 = v4;
  *((_QWORD *)&v18 + 1) = 1;
  v17 = v3;
  v5 = operator new(0x110uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24CA0CEC0;
  v6 = v5 + 3;
  sub_20FF2E6B8((uint64_t)(v5 + 3), &v17, v2, v19, &v15, &v18, (uint64_t)v20);
  v9 = **v1;
  if (*(_BYTE *)(v9 + 144))
  {
    v10 = *(std::__shared_weak_count **)(v9 + 136);
    *(_QWORD *)(v9 + 128) = v6;
    *(_QWORD *)(v9 + 136) = v5;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    *(_QWORD *)(v9 + 120) = &off_24CA0CF20;
    *(_QWORD *)(v9 + 128) = v6;
    *(_QWORD *)(v9 + 136) = v5;
    *(_BYTE *)(v9 + 144) = 1;
  }
  if (v22)
  {
    v13 = v21;
    if (v21 == v20)
    {
      v14 = 4;
      v13 = v20;
    }
    else
    {
      if (!v21)
        return;
      v14 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v7, v8);
  }
}

void sub_20FDD0394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;
  char *v24;
  uint64_t v25;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  if (a21)
  {
    v24 = a20;
    if (a20 == &a17)
    {
      v25 = 4;
      v24 = &a17;
    }
    else
    {
      if (!a20)
        goto LABEL_7;
      v25 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
  }
LABEL_7:
  _Unwind_Resume(a1);
}

void sub_20FDD03F0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FDD0404(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA07538;
  result[1] = v3;
  return result;
}

uint64_t sub_20FDD0438(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA07538;
  a2[1] = v2;
  return result;
}

void sub_20FDD0454(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  char v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  char v10;
  char v11;
  char v12;

  sub_20FDCCA40(*(_QWORD *)(a1 + 8), a2, (uint64_t)&v2);
  if (!v12 && v11)
  {
    if (!v10)
      goto LABEL_7;
    if (v9 < 0)
    {
      operator delete(__p);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_7:
        if (!v5)
          return;
        goto LABEL_8;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(v6);
    if (!v5)
      return;
LABEL_8:
    if (v4 < 0)
      operator delete(v3);
  }
}

uint64_t sub_20FDD04E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit3viz6Client4Impl15CommandReceiverE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit3viz6Client4Impl15CommandReceiverE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit3viz6Client4Impl15CommandReceiverE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit3viz6Client4Impl15CommandReceiverE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FDD0550()
{
  return &unk_24CA075A8;
}

uint64_t sub_20FDD055C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = a1 + 24;
  v5 = (__int128 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      v10 = *v5;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)v4 = v10;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)v5 = 0;
      *(_BYTE *)(a1 + 48) = 1;
      v7 = a1 + 56;
      v8 = a2 + 56;
      v9 = *(unsigned __int8 *)(a1 + 200);
      if (v9 == *(unsigned __int8 *)(a2 + 200))
        goto LABEL_12;
LABEL_15:
      if (v9)
      {
        sub_20FDD0860(v7);
      }
      else
      {
        v11 = *(_OWORD *)v8;
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
        *(_OWORD *)v7 = v11;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = 0;
        v12 = *(_OWORD *)(a2 + 80);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = v12;
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
        *(_QWORD *)(a2 + 80) = 0;
        v13 = *(_OWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = v13;
        *(_QWORD *)(a2 + 112) = 0;
        *(_QWORD *)(a2 + 120) = 0;
        *(_QWORD *)(a2 + 104) = 0;
        v14 = *(_OWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = v14;
        *(_QWORD *)(a2 + 128) = 0;
        *(_QWORD *)(a2 + 136) = 0;
        *(_QWORD *)(a2 + 144) = 0;
        v15 = *(_OWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = v15;
        *(_QWORD *)(a2 + 152) = 0;
        *(_QWORD *)(a2 + 160) = 0;
        *(_QWORD *)(a2 + 168) = 0;
        v16 = *(_OWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 176) = v16;
        *(_QWORD *)(a2 + 176) = 0;
        *(_QWORD *)(a2 + 184) = 0;
        *(_QWORD *)(a2 + 192) = 0;
        *(_BYTE *)(a1 + 200) = 1;
      }
      goto LABEL_18;
    }
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)v4);
    *(_BYTE *)(a1 + 48) = 0;
LABEL_11:
    v7 = a1 + 56;
    v8 = a2 + 56;
    v9 = *(unsigned __int8 *)(a1 + 200);
    if (v9 == *(unsigned __int8 *)(a2 + 200))
      goto LABEL_12;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_11;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)v4);
  v6 = *v5;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v4 = v6;
  *(_BYTE *)(a2 + 47) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  v7 = a1 + 56;
  v8 = a2 + 56;
  v9 = *(unsigned __int8 *)(a1 + 200);
  if (v9 != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_15;
LABEL_12:
  if (v9)
    sub_20FDD0720(v7, (__int128 *)v8);
LABEL_18:
  v17 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v17;
  return a1;
}

uint64_t sub_20FDD0720(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v11);
  v12 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)v11 = v12;
  *((_BYTE *)a2 + 119) = 0;
  *((_BYTE *)a2 + 96) = 0;
  v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v13);
  v14 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)v13 = v14;
  *((_BYTE *)a2 + 143) = 0;
  *((_BYTE *)a2 + 120) = 0;
  return a1;
}

void sub_20FDD0860(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0)
    {
      operator delete(*(void **)(a1 + 120));
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a1 + 95) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
LABEL_8:
        *(_BYTE *)(a1 + 144) = 0;
        return;
      }
LABEL_15:
      operator delete(*(void **)a1);
      goto LABEL_8;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
}

uint64_t sub_20FDD0914(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    sub_20FCF4B4C((char *)(a1 + 56), (__int128 *)(a2 + 56));
    *(_BYTE *)(a1 + 200) = 1;
  }
  v6 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v6;
  return a1;
}

void sub_20FDD09D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDD0A04(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  __int128 *v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DC30);
  if ((v4 & 1) == 0)
  {
    v10 = a3;
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_254A6DC30);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A57688, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DC30);
      a2 = v9;
      a3 = v10;
    }
  }
  v5 = a2;
  sub_20E89EFE4(__dst, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_254A57688;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v20)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v12;
    __dst[1] = 0;
    v12 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v19)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  v6 = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v18;
  __p[1] = 0;
  v18 = 0;
  v15 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v14[0]);
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_13;
LABEL_8:
  if (!v13)
    return a1;
LABEL_14:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

void sub_20FDD0BB4()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FDD0BC8(uint64_t a1)
{
  uint64_t *v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23[2];
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;
  _BYTE v34[16];
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  char v42;
  char v43;
  char v44;

  v1 = *(uint64_t **)(a1 + 8);
  v3 = *v1;
  v2 = (__int128 *)v1[1];
  v4 = v2[1];
  v23[0] = *v2;
  v23[1] = v4;
  v24 = 1;
  v25 = 1;
  sub_20FDD0F04(v23, &v26);
  v5 = (std::__shared_weak_count *)operator new(0x50uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA078E8;
  v5[1].__vftable = 0;
  *(_WORD *)((char *)&v5[1].__shared_weak_owners_ + 7) = 0;
  LOBYTE(v5[3].__vftable) = 0;
  v7 = v27;
  v8 = v28;
  v27 = 0;
  v28 = 0;
  v29 = v5 + 1;
  v30 = v5;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v31 = &off_24CA0C0E8;
  v32 = v7;
  v33 = v8;
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_20FF2328C(*(_QWORD *)(v3 + 128), (uint64_t)&v29);
  v44 = 1;
  v14 = v33;
  if (v33)
  {
    v15 = (unint64_t *)&v33->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v30;
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v28;
  if (!v28)
    goto LABEL_26;
  v21 = (unint64_t *)&v28->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v44)
      return;
  }
  else
  {
LABEL_26:
    if (v44)
      return;
  }
  sub_20FDCBB4C(v1[2], (uint64_t)v34);
  *(_BYTE *)v1[3] = 0;
  if (!v44 && v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(__p);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37)
    {
      if (v36 < 0)
        operator delete(v35);
    }
  }
}

void sub_20FDD0E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,int a52,__int16 a53,char a54,char a55)
{
  if (!(_BYTE)a53 && (_BYTE)a49)
  {
    if (a47)
    {
      if (a46 < 0)
        operator delete(__p);
      if (a39 < 0)
        operator delete(a34);
    }
    if (a33)
    {
      if (a32 < 0)
      {
        operator delete(a27);
        _Unwind_Resume(exception_object);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDD0F04@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = mach_continuous_time();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
  {
    mach_timebase_info((mach_timebase_info_t)&v13);
    LODWORD(v12) = DWORD1(v13);
    LODWORD(v11) = v13;
    *(double *)&qword_254A6D7C0 = (double)v11 / (double)v12;
    __cxa_guard_release(&qword_254A6D7C8);
  }
  v17[0] = llround(*(double *)&qword_254A6D7C0 * (double)v4);
  v17[1] = 2;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v6 = a1[1];
  v13 = *a1;
  v14 = v6;
  v15 = a1[2];
  v16 = *((_QWORD *)a1 + 6);
  v7 = operator new();
  *(_QWORD *)v7 = &off_24CA079B8;
  v8 = v14;
  *(_OWORD *)(v7 + 8) = v13;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v15;
  *(_QWORD *)(v7 + 56) = v16;
  sub_20EB09F3C(v7 + 64, (uint64_t)v17);
  *(_QWORD *)v7 = &off_24CA07938;
  *a2 = &off_24CA0C0E8;
  a2[1] = v7;
  v9 = (_QWORD *)operator new();
  *v9 = &off_24CA0C1E0;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v7;
  a2[2] = v9;
  return sub_20EB0580C((uint64_t)v17);
}

void sub_20FDD10B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D7C8);
  _Unwind_Resume(a1);
}

void sub_20FDD10CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_20EB0580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD10F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x212BC6398](v9, 0x10B3C40A30D6217);
  sub_20EB0580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD111C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20EB0580C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDD1130(_QWORD *a1)
{
  *a1 = &off_24CA079B8;
  sub_20EB0580C((uint64_t)(a1 + 8));
  return a1;
}

void sub_20FDD1160(_QWORD *a1)
{
  *a1 = &off_24CA079B8;
  sub_20EB0580C((uint64_t)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDD11A0(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20FDD11A8(uint64_t a1, void *lpsrc)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  BOOL v9;
  char v11;
  char *v12;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA07978, 0);
  if (!v4)
    return 0;
  if ((void *)a1 == lpsrc)
    return 1;
  v5 = (*(_BYTE *)(a1 + 56) != 0) == (v4[56] != 0);
  if (*(_BYTE *)(a1 + 56) && v4[56])
  {
    v6 = *(unsigned int *)(a1 + 48);
    v7 = *((_DWORD *)v4 + 12);
    v8 = v7 == v6;
    v9 = v7 == -1;
    LODWORD(v5) = v7 == -1;
    if (v9)
      v8 = 0;
    if ((_DWORD)v6 == -1)
      v5 = v5;
    else
      v5 = v8;
    if ((_DWORD)v6 != -1 && v8)
    {
      v12 = &v11;
      return ((uint64_t (*)(char **, uint64_t, _BYTE *))off_24CA07658[v6])(&v12, a1 + 8, v4 + 8);
    }
  }
  return v5;
}

void sub_20FDD12A8(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FDD23F4();
  sub_20FDD135C(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FDD1340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDD135C(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55238);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55238))
  {
    v4 = sub_20FDD20FC();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A55220, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A55230 = *(_QWORD *)(v9 - 8);
      xmmword_254A55220 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55220, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55238);
  }
  return sub_20FDD28D8(&xmmword_254A55220, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_20FDD146C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A55238);
  _Unwind_Resume(a1);
}

void sub_20FDD148C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55238);
  _Unwind_Resume(a1);
}

void sub_20FDD14A4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 2;
}

double sub_20FDD14D0@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_20FF30D40(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

_QWORD *sub_20FDD1504(_QWORD *a1)
{
  *a1 = &off_24CA079B8;
  sub_20EB0580C((uint64_t)(a1 + 8));
  return a1;
}

void sub_20FDD1534(_QWORD *a1)
{
  *a1 = &off_24CA079B8;
  sub_20EB0580C((uint64_t)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDD1574(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FDD1B98();
  return sub_20FDD16C8(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 64, (uint64_t)"}");
}

uint64_t sub_20FDD15CC(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FDD18F4((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA07640[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA075F8[v3])(v5, v2);
  return result;
}

void sub_20FDD1664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA075F8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FDD169C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FDD16C8(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FDD18F4((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA07610[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA07610[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA07640[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA075F8[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FDD1864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD187C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD1890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD18A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD18B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD18CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD18E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD18F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20FF19770((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA07628[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FDD1B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FDD1B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDD1B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20FDD1B98()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A550B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A550B8))
    return &xmmword_254A550A0;
  v2 = sub_20FDD1C74();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A550A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A550B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A550A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A550A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A550B8);
  return &xmmword_254A550A0;
}

void sub_20FDD1C5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A550B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FDD1C74()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A550D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A550D8))
    return &stru_254A550C0;
  sub_20FDD1F18((uint64_t)__p);
  sub_20FDD1D64((char *)__p, &stru_254A550C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A550C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A550D8);
  return &stru_254A550C0;
}

void sub_20FDD1D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A550D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A550D8);
  _Unwind_Resume(a1);
}

void sub_20FDD1D64(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FDD20FC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FDD1EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FDD1F18(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55158);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55158))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::Sync>]", qword_254A55140);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55140, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55158);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55178);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55178))
  {
    v5 = sub_20E8A2354(qword_254A55140, "<", 0);
    sub_20E89FC08(qword_254A55140, 0, v5, qword_254A55160);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55160, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55178);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55198);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55198))
  {
    sub_21023CD84((uint64_t)qword_254A55160, (uint64_t)&xmmword_254A55180);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55180, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55198);
  }
  if (byte_254A55197 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55180, *((unint64_t *)&xmmword_254A55180 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55180;
    *(_QWORD *)(a1 + 16) = unk_254A55190;
  }
}

void sub_20FDD20B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55198);
  _Unwind_Resume(a1);
}

void sub_20FDD20CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55178);
  _Unwind_Resume(a1);
}

void sub_20FDD20E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55158);
  _Unwind_Resume(a1);
}

__int128 *sub_20FDD20FC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A550F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A550F8))
    return &xmmword_254A550E0;
  v2 = (char *)sub_20FDD21D8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A550E0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A550F0 = *((_QWORD *)v2 + 2);
    xmmword_254A550E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A550E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A550F8);
  return &xmmword_254A550E0;
}

void sub_20FDD21C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A550F8);
  _Unwind_Resume(a1);
}

void *sub_20FDD21D8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55118);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55118))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::Sync]", qword_254A55100);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55100, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55118);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55138);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55138))
    return &unk_254A55120;
  sub_21023CD84((uint64_t)qword_254A55100, (uint64_t)&unk_254A55120);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55120, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55138);
  return &unk_254A55120;
}

void sub_20FDD22C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55138);
  _Unwind_Resume(a1);
}

void sub_20FDD22E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55118);
  _Unwind_Resume(a1);
}

BOOL sub_20FDD22F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  _BOOL8 result;

  if (*(_QWORD *)a2 != *(_QWORD *)a3)
    return 0;
  v3 = *(unsigned __int8 *)(a3 + 16);
  if (*(_BYTE *)(a2 + 16))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if ((*(_BYTE *)(a2 + 16) != 0) == (v3 != 0))
      goto LABEL_10;
    return 0;
  }
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a3 + 8))
    return 0;
LABEL_10:
  result = (*(_BYTE *)(a2 + 32) != 0) == (*(_BYTE *)(a3 + 32) != 0);
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(_BYTE *)(a3 + 32))
      return *(_QWORD *)(a2 + 24) == *(_QWORD *)(a3 + 24);
  }
  return result;
}

BOOL sub_20FDD2388(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v3;

  if (*a2 != *a3 || *((_QWORD *)a2 + 1) != *((_QWORD *)a3 + 1))
    return 0;
  if (a2[24])
    v3 = a3[24] == 0;
  else
    v3 = 1;
  if (v3)
    return (a2[24] != 0) == (a3[24] != 0);
  else
    return *((_QWORD *)a2 + 2) == *((_QWORD *)a3 + 2);
}

std::string *sub_20FDD23F4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A551B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A551B8))
  {
    sub_20E8610C0(v11, "viz::PackageData");
    v2 = sub_20FDD20FC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_20FDD26DC();
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_20EB0B518();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_20E877C80(v10, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v11, (uint64_t *)v10, &stru_254A551A0, v8, v9);
    sub_20E89FB98(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A551A0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A551B8);
        return &stru_254A551A0;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_254A551A0;
}

void sub_20FDD2600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_254A551B8);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20FDD26B4()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20FDD2690);
  }
}

__int128 *sub_20FDD26DC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A551D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A551D8))
    return &xmmword_254A551C0;
  v2 = (char *)sub_20FDD27B8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A551C0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A551D0 = *((_QWORD *)v2 + 2);
    xmmword_254A551C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A551C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A551D8);
  return &xmmword_254A551C0;
}

void sub_20FDD27A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A551D8);
  _Unwind_Resume(a1);
}

void *sub_20FDD27B8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A551F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A551F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::NetworkPackage]", qword_254A551E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A551E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A551F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55218);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55218))
    return &unk_254A55200;
  sub_21023CD84((uint64_t)qword_254A551E0, (uint64_t)&unk_254A55200);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55200, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55218);
  return &unk_254A55200;
}

void sub_20FDD28A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55218);
  _Unwind_Resume(a1);
}

void sub_20FDD28C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A551F8);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDD28D8(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FDD18F4((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA07610[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA07640[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA075F8[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FDD2A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD2A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD2A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD2A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD2A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD2A80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA078E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FDD2A90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA078E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FDD2AC0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 72) || (*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_6;
}

void sub_20FDD2B1C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FDD2B30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA07678;
  result[1] = v3;
  return result;
}

uint64_t sub_20FDD2B64(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA07678;
  a2[1] = v2;
  return result;
}

uint64_t sub_20FDD2B80(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 440))
  {
    v2 = *(std::__shared_weak_count **)(v1 + 400);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)(v1 + 392);
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (v7)
        {
          if (v5)
          {
LABEL_8:
            v8 = 0;
            goto LABEL_11;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v4);
          if (v5)
            goto LABEL_8;
        }
      }
    }
  }
  v8 = 1;
LABEL_11:
  if (*(_BYTE *)(v1 + 144))
    return 0;
  else
    return v8;
}

uint64_t sub_20FDD2C14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl10000"
                     "00000EEEEEEEENK3$_0clEvEUlvE0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioI"
                                "Ll1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20FDD2C80()
{
  return &unk_24CA076D8;
}

char *sub_20FDD2C8C(char **a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  if (v7 > 0xAAAAAAAAAAAAAAALL)
    sub_20E877A38();
  v10 = 24 * v7;
  v11 = (char *)operator new(24 * v7);
  v12 = &v11[24 * v6];
  *(_QWORD *)v12 = &off_24CA0C0E8;
  *((_QWORD *)v12 + 1) = a2;
  *((_QWORD *)v12 + 2) = a3;
  if (a3)
  {
    v13 = (unint64_t *)(a3 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v4 = *a1;
    v5 = a1[1];
  }
  v15 = &v11[v10];
  v16 = v12 + 24;
  if (v5 == v4)
  {
    *a1 = v12;
    a1[1] = v16;
    a1[2] = v15;
  }
  else
  {
    do
    {
      *((_QWORD *)v12 - 3) = &off_24CA0C0E8;
      v12 -= 24;
      *(_OWORD *)(v12 + 8) = *((_OWORD *)v5 - 1);
      *((_QWORD *)v5 - 2) = 0;
      *((_QWORD *)v5 - 1) = 0;
      v5 -= 24;
    }
    while (v5 != v4);
    v4 = *a1;
    v17 = a1[1];
    *a1 = v12;
    a1[1] = v16;
    a1[2] = v15;
    while (v17 != v4)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 24;
    }
  }
  if (v4)
    operator delete(v4);
  return v16;
}

void sub_20FDD2E1C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDD2E30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(*v1 + 64);
  if (!v2)
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, v1[1]);
}

uint64_t sub_20FDD2E60(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_11;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_11:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_12:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FDD2F3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA07738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FDD2F4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA07738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDD2F7C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20FDD2F8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA07788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FDD2F9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA07788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDD2FCC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20FDD2FE0()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FDD2FF4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23[4];
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  char v30;
  char v31;
  char v32;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *v1;
  v3 = (uint64_t *)v1[1];
  v4 = (std::__shared_weak_count *)v3[1];
  v18 = *v3;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  v20 = &off_24CA0C0E8;
  v21 = v8;
  v22 = v7;
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(v2 + 712);
  if (!v11)
    sub_20E86D37C();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v23, v11, &v18);
  v12 = v22;
  if (!v22)
    goto LABEL_12;
  v13 = (unint64_t *)&v22->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = v19;
    if (!v19)
      goto LABEL_16;
  }
  else
  {
LABEL_12:
    v15 = v19;
    if (!v19)
      goto LABEL_16;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v32)
      return;
    goto LABEL_17;
  }
LABEL_16:
  if (v32)
    return;
LABEL_17:
  sub_20FDCBB4C(v1[2], (uint64_t)v23);
  if (!v32 && v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(__p);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25)
    {
      if (v24 < 0)
        operator delete(v23[2]);
    }
  }
}

void sub_20FDD318C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45)
{
  if (!(_BYTE)a43 && (_BYTE)a39)
  {
    if (a37)
    {
      if (a36 < 0)
        operator delete(__p);
      if (a29 < 0)
        operator delete(a24);
    }
    if (a23)
    {
      if (a22 < 0)
      {
        operator delete(a17);
        _Unwind_Resume(exception_object);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDD323C()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FDD3250(uint64_t a1)
{
  sub_20FF2328C(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 128), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

void sub_20FDD3264()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FDD3278(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;
  _BYTE v29[16];
  void *v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  char v37;
  char v38;
  char v39;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *v1;
  sub_20FDD3594((_QWORD *)v1[1], &v21);
  v3 = (std::__shared_weak_count *)operator new(0x50uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA078E8;
  v3[1].__vftable = 0;
  *(_WORD *)((char *)&v3[1].__shared_weak_owners_ + 7) = 0;
  LOBYTE(v3[3].__vftable) = 0;
  v5 = v22;
  v6 = v23;
  v22 = 0;
  v23 = 0;
  v24 = v3 + 1;
  v25 = v3;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v26 = &off_24CA0C0E8;
  v27 = v5;
  v28 = v6;
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 - 1, v8));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_20FF2328C(*(_QWORD *)(v2 + 128), (uint64_t)&v24);
  v39 = 1;
  v12 = v28;
  if (v28)
  {
    v13 = (unint64_t *)&v28->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v23;
  if (!v23)
    goto LABEL_26;
  v19 = (unint64_t *)&v23->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v39)
      return;
  }
  else
  {
LABEL_26:
    if (v39)
      return;
  }
  sub_20FDCBB4C(v1[2], (uint64_t)v29);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (v36 < 0)
        operator delete(__p);
      if (v34 < 0)
        operator delete(v33);
    }
    if (v32)
    {
      if (v31 < 0)
        operator delete(v30);
    }
  }
}

void sub_20FDD34C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  if (!(_BYTE)a45 && (_BYTE)a41)
  {
    if (a39)
    {
      if (a38 < 0)
        operator delete(__p);
      if (a31 < 0)
        operator delete(a26);
    }
    if (a25)
    {
      if (a24 < 0)
      {
        operator delete(a19);
        _Unwind_Resume(exception_object);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDD3594@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t v7;
  unint64_t v8;
  mach_timebase_info info;
  _QWORD v10[2];
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = mach_continuous_time();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
  {
    mach_timebase_info(&info);
    LODWORD(v7) = info.numer;
    LODWORD(v8) = info.denom;
    *(double *)&qword_254A6D7C0 = (double)v7 / (double)v8;
    __cxa_guard_release(&qword_254A6D7C8);
  }
  v10[0] = llround(*(double *)&qword_254A6D7C0 * (double)v4);
  v10[1] = 2;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_20FDD36D8(a1, (uint64_t)v10, a2);
  return sub_20EB0580C((uint64_t)v10);
}

void sub_20FDD36AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D7C8);
  _Unwind_Resume(a1);
}

void sub_20FDD36C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20EB0580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD36D8(_QWORD *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char **v13;
  char *v14;
  uint64_t v15;

  v5 = a1 + 1;
  v6 = a1[1];
  v13 = (char **)*a1;
  v14 = (char *)v6;
  v15 = a1[2];
  if (v15)
  {
    *(_QWORD *)(v6 + 16) = &v14;
    *a1 = v5;
    *v5 = 0;
    a1[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  v7 = (_QWORD *)operator new();
  v8 = v7;
  v9 = v14;
  v7[1] = v13;
  *v7 = &off_24CA07A88;
  v7[2] = v9;
  v10 = v7 + 2;
  v11 = v15;
  v7[3] = v15;
  if (v11)
  {
    *((_QWORD *)v9 + 2) = v10;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v7[1] = v10;
  }
  sub_20EB09F3C((uint64_t)(v7 + 4), a2);
  *v8 = &off_24CA07A08;
  *a3 = &off_24CA0C0E8;
  a3[1] = v8;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24CA0C1E0;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v8;
  a3[2] = v12;
  sub_20E866BE0((uint64_t)&v13, v14);
}

void sub_20FDD3800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FDD3828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_20E866BE0(v12, *(char **)(v11 + 16));
  MEMORY[0x212BC6398](v11, 0x10B3C407C1CE13ALL);
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FDD3864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDD387C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24CA07A88;
  sub_20EB0580C(a1 + 32);
  sub_20E866BE0(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

void sub_20FDD38B8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24CA07A88;
  sub_20EB0580C(a1 + 32);
  sub_20E866BE0(a1 + 8, *(char **)(a1 + 16));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDD3904(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20FDD390C(char *a1, char *lpsrc)
{
  uint64_t result;
  _QWORD *v5;
  char *v6;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA07A48, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = (_QWORD *)(result + 8);
      v6 = a1 + 8;
      return sub_20FDD4A28((uint64_t)&v6, &v5);
    }
  }
  return result;
}

void sub_20FDD3990(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FDD4B94();
  sub_20FDD3A44(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FDD3A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDD3A44(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55378);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55378))
  {
    v4 = sub_20FDD482C();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A55360, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A55370 = *(_QWORD *)(v9 - 8);
      xmmword_254A55360 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55360, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55378);
  }
  return sub_20FDD4E7C(&xmmword_254A55360, (uint64_t)"{", (_QWORD *)(a1 + 8), (uint64_t)"}");
}

void sub_20FDD3B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A55378);
  _Unwind_Resume(a1);
}

void sub_20FDD3B74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55378);
  _Unwind_Resume(a1);
}

void sub_20FDD3B8C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 3;
}

double sub_20FDD3BB8@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_20FF30FEC(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_20FDD3BEC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24CA07A88;
  sub_20EB0580C(a1 + 32);
  sub_20E866BE0(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

void sub_20FDD3C28(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24CA07A88;
  sub_20EB0580C(a1 + 32);
  sub_20E866BE0(a1 + 8, *(char **)(a1 + 16));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDD3C74(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FDD42C8();
  return sub_20FDD3DC8(v2, (uint64_t)"{", (_QWORD *)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20FDD3CCC(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FDD3FF4((uint64_t)v5, (uint64_t)v2, (_QWORD *)(a1 + 8));
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA07640[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA075F8[v3])(v5, v2);
  return result;
}

void sub_20FDD3D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA075F8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FDD3D9C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FDD3DC8(__int128 *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FDD3FF4((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA07610[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA07610[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA07640[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA075F8[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FDD3F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD3F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD3F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD3FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD3FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD3FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD3FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD3FF4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  unint64_t v20;
  _QWORD *v21[5];
  _QWORD *v22;
  char v23;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v22 = (_QWORD *)v5;
  v21[0] = (_QWORD *)(v5 + 16);
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  sub_20FF1BE48((uint64_t)&v23, v21, a3);
  sub_20E86A980(v21[0], (uint64_t)"}", 1);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __p;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    __p[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __p[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __p;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v22;
  if (v22)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *v22 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    v14[3] = MEMORY[0x24BEDB848] + 16;
    v14[2] = v17;
    if (*((char *)v14 + 111) < 0)
      operator delete((void *)v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 16);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = (_QWORD *)a2;
  v21[1] = __p;
  v21[2] = (_QWORD *)a2;
  v21[3] = __p;
  v21[4] = __p;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA07628[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_20FDD4274(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FDD4298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDD42B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20FDD42C8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55258);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55258))
    return &xmmword_254A55240;
  v2 = sub_20FDD43A4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A55240, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A55250 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A55240 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55240, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55258);
  return &xmmword_254A55240;
}

void sub_20FDD438C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55258);
  _Unwind_Resume(a1);
}

std::string *sub_20FDD43A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55278);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55278))
    return &stru_254A55260;
  sub_20FDD4648((uint64_t)__p);
  sub_20FDD4494((char *)__p, &stru_254A55260);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55260, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55278);
  return &stru_254A55260;
}

void sub_20FDD4454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A55278);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A55278);
  _Unwind_Resume(a1);
}

void sub_20FDD4494(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FDD482C();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FDD45F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FDD4648(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A552F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A552F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::UpdateEnabledContexts>]", qword_254A552E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A552E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A552F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55318);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55318))
  {
    v5 = sub_20E8A2354(qword_254A552E0, "<", 0);
    sub_20E89FC08(qword_254A552E0, 0, v5, qword_254A55300);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55300, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55318);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55338);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55338))
  {
    sub_21023CD84((uint64_t)qword_254A55300, (uint64_t)&xmmword_254A55320);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55320, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55338);
  }
  if (byte_254A55337 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55320, *((unint64_t *)&xmmword_254A55320 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55320;
    *(_QWORD *)(a1 + 16) = unk_254A55330;
  }
}

void sub_20FDD47E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55338);
  _Unwind_Resume(a1);
}

void sub_20FDD47FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55318);
  _Unwind_Resume(a1);
}

void sub_20FDD4814(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A552F8);
  _Unwind_Resume(a1);
}

__int128 *sub_20FDD482C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55298);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55298))
    return &xmmword_254A55280;
  v2 = (char *)sub_20FDD4908();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A55280, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A55290 = *((_QWORD *)v2 + 2);
    xmmword_254A55280 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55280, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55298);
  return &xmmword_254A55280;
}

void sub_20FDD48F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55298);
  _Unwind_Resume(a1);
}

void *sub_20FDD4908()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A552B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A552B8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateEnabledContexts]", qword_254A552A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A552A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A552B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A552D8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A552D8))
    return &unk_254A552C0;
  sub_21023CD84((uint64_t)qword_254A552A0, (uint64_t)&unk_254A552C0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A552C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A552D8);
  return &unk_254A552C0;
}

void sub_20FDD49F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A552D8);
  _Unwind_Resume(a1);
}

void sub_20FDD4A10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A552B8);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDD4A28(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void **v11;
  unsigned __int8 *v12;
  uint64_t result;
  _BOOL4 v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) != (*a2)[2])
    return 0;
  v5 = (_QWORD *)*v2;
  v3 = v2 + 1;
  v4 = v5;
  if (v5 != v3)
  {
    v6 = (_QWORD *)**a2;
    while (1)
    {
      v7 = *((unsigned __int8 *)v4 + 55);
      if ((v7 & 0x80u) == 0)
        v8 = *((unsigned __int8 *)v4 + 55);
      else
        v8 = v4[5];
      v9 = *((unsigned __int8 *)v6 + 55);
      v10 = (char)v9;
      if ((v9 & 0x80u) != 0)
        v9 = v6[5];
      if (v8 != v9)
        return 0;
      v11 = (const void **)(v4 + 4);
      if (v10 >= 0)
        v12 = (unsigned __int8 *)(v6 + 4);
      else
        v12 = (unsigned __int8 *)v6[4];
      if ((v7 & 0x80) != 0)
      {
        v14 = memcmp(*v11, v12, v4[5]) == 0;
        result = 0;
        if (!v14)
          return result;
      }
      else
      {
        if (*((_BYTE *)v4 + 55))
        {
          while (*(unsigned __int8 *)v11 == *v12)
          {
            v11 = (const void **)((char *)v11 + 1);
            ++v12;
            if (!--v7)
              goto LABEL_17;
          }
          return 0;
        }
LABEL_17:
        result = 0;
      }
      if (*((unsigned __int8 *)v4 + 56) != *((unsigned __int8 *)v6 + 56))
        return result;
      v15 = (_QWORD *)v4[1];
      v16 = v4;
      if (v15)
      {
        do
        {
          v4 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v16[2];
          v17 = *v4 == (_QWORD)v16;
          v16 = v4;
        }
        while (!v17);
      }
      v18 = (_QWORD *)v6[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v6[2];
          v17 = *v19 == (_QWORD)v6;
          v6 = v19;
        }
        while (!v17);
      }
      v6 = v19;
      if (v4 == v3)
        return 1;
    }
  }
  return 1;
}

std::string *sub_20FDD4B94()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A55358);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55358))
  {
    sub_20E8610C0(v11, "viz::PackageData");
    v2 = sub_20FDD482C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_20FDD26DC();
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_20EB0BD38();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_20E877C80(v10, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v11, (uint64_t *)v10, &stru_254A55340, v8, v9);
    sub_20E89FB98(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55340, &dword_20E81F000);
        __cxa_guard_release(&qword_254A55358);
        return &stru_254A55340;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_254A55340;
}

void sub_20FDD4DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_254A55358);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20FDD4E54()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20FDD4E30);
  }
}

uint64_t sub_20FDD4E7C(__int128 *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FDD3FF4((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA07610[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA07640[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA075F8[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FDD4FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD4FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD4FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD4FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5024(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA07898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FDD5034(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA07898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDD5064(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20FDD5074(_QWORD *a1, _BYTE *a2)
{
  const char *v2;
  uint64_t v3;

  switch(*a2)
  {
    case 0:
      v2 = "NotSyncing";
      v3 = 10;
      break;
    case 1:
      v2 = "Waiting";
      v3 = 7;
      break;
    case 2:
      v2 = "Proceeding";
      v3 = 10;
      break;
    case 3:
      v2 = "ProceedingConditionally";
      v3 = 23;
      break;
    default:
      sub_20E86A980(a1, (uint64_t)"invalid sync status (", 21);
      a1 = (_QWORD *)std::ostream::operator<<();
      v2 = ")";
      v3 = 1;
      break;
  }
  return sub_20E86A980(a1, (uint64_t)v2, v3);
}

_QWORD *sub_20FDD5138(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA07C30;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FDD51B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA07C30;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDD5228(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20FDD5230(uint64_t *a1, uint64_t *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA07C08, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_21009B19C(a1[1], *(_QWORD *)(result + 8));
  }
  return result;
}

void sub_20FDD5294(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  int64x2_t v7;
  int8x16_t v8;
  void *v9[3];
  void *v10[2];
  char v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  __int128 v16;
  std::string::size_type v17;
  void *v18[2];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A6C578);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254A6C578))
    goto LABEL_2;
  sub_20E8610C0(v10, "viz::PackageData");
  v3 = sub_20FDD66D0();
  if (*((char *)v3 + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    v13 = *((_QWORD *)v3 + 2);
    *(_OWORD *)__p = v4;
  }
  *(_OWORD *)v14 = *(_OWORD *)"viz::Package";
  v15 = 0xC00000000000000;
  v5 = sub_20FDD68CC();
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v16, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v17 = v5->__r_.__value_.__r.__words[2];
    v16 = v6;
  }
  *(_OWORD *)v18 = *(_OWORD *)"void";
  v19 = 0x400000000000000;
  sub_20E877C80(v9, (uint64_t)__p, 4uLL);
  sub_21023CE38((char *)v10, (uint64_t *)v9, &stru_254A6C588, v7, v8);
  sub_20E89FB98(v9);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete((void *)v16);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_21:
    operator delete(__p[0]);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_22:
    operator delete(v10[0]);
    goto LABEL_17;
  }
LABEL_20:
  operator delete(v14[0]);
  if (SHIBYTE(v13) < 0)
    goto LABEL_21;
LABEL_16:
  if (v11 < 0)
    goto LABEL_22;
LABEL_17:
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A6C588, &dword_20E81F000);
  __cxa_guard_release(&qword_254A6C578);
LABEL_2:
  sub_20FDD55D4(a1);
  sub_20EB0B80C((__int128 *)&stru_254A6C588, (uint64_t)"{", (uint64_t)__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_20FDD54C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A6C578);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A6C578);
  _Unwind_Resume(a1);
}

void sub_20FDD55AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDD55D4(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  void ***p_dst;
  const char *v13;
  __int128 *v14;
  const char *v15;
  const char *v16;
  void **p_p_dst;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6C580);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C580))
  {
    v4 = sub_20FDD66D0();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&p_dst);
    if (*(v13 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A6C5A0, *((void **)v13 - 3), *((_QWORD *)v13 - 2));
    }
    else
    {
      v7 = *(_OWORD *)(v13 - 24);
      unk_254A6C5B0 = *((_QWORD *)v13 - 1);
      xmmword_254A6C5A0 = v7;
    }
    sub_20E89FB98((void **)&p_dst);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C5A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C580);
  }
  v11 = -1;
  if (byte_254A6C5B7 < 0)
  {
    sub_20E860C04(&__dst, (void *)xmmword_254A6C5A0, *((unint64_t *)&xmmword_254A6C5A0 + 1));
  }
  else
  {
    __dst = xmmword_254A6C5A0;
    v10 = unk_254A6C5B0;
  }
  v11 = 1;
  p_dst = (void ***)&__dst;
  v13 = "{";
  v14 = &__dst;
  v15 = "{";
  v16 = "{";
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FDD5E74((uint64_t)&v8, (uint64_t)&__dst, (uint64_t *)(a1 + 8));
  p_dst = (void ***)&__dst;
  v13 = "}";
  v14 = &__dst;
  v15 = "}";
  v16 = "}";
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = (void **)&p_dst;
  ((void (*)(void ***, __int128 *))off_24CA07B70[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = &p_p_dst;
  result = ((uint64_t (*)(void ****, __int128 *))off_24CA07BA0[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(void ****, __int128 *))off_24CA07B58[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FDD57F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E89FB98((void **)va);
  __cxa_guard_abort(&qword_254A6C580);
  _Unwind_Resume(a1);
}

void sub_20FDD5810(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C580);
  _Unwind_Resume(a1);
}

void sub_20FDD5828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD587C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5890(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 6;
}

void sub_20FDD58BC(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 6, a2);
}

_QWORD *sub_20FDD58F4(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E9DA754(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20FDD59F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDD5A04(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA07C30;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FDD5A7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA07C30;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDD5AF4(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FDD616C();
  return sub_20FDD5C48(v2, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20FDD5B4C(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FDD5E74((uint64_t)v5, (uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA07BA0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA07B58[v3])(v5, v2);
  return result;
}

void sub_20FDD5BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA07B58[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FDD5C1C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FDD5C48(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FDD5E74((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA07B70[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA07B70[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA07BA0[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA07B58[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FDD5DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD5E74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__dst[2];
  unint64_t v26;
  _QWORD v27[5];
  _QWORD *v28;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v27[0] = v5;
  v6 = (uint64_t *)(v5 + 16);
  v7 = *a3;
  if (*(_BYTE *)(*a3 + 24))
  {
    sub_2101F9528(v6, *(_QWORD *)(v7 + 16));
  }
  else if (*(_BYTE *)(v7 + 8))
  {
    sub_2101F91B0(v6, *(_QWORD *)v7);
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 32);
    if (v8)
    {
      v9 = *(char *)(v8 + 23);
      if (v9 >= 0)
        v10 = *(_QWORD *)(v7 + 32);
      else
        v10 = *(_QWORD *)v8;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(v8 + 23);
      else
        v11 = *(_QWORD *)(v8 + 8);
      sub_20E86A980(v6, v10, v11);
    }
    else
    {
      sub_20EA68010(v6, *(CFTypeRef *)(v7 + 48));
    }
  }
  v12 = *(_DWORD *)(v5 + 120);
  if ((v12 & 0x10) != 0)
  {
    v15 = *(_QWORD *)(v5 + 112);
    v16 = *(_QWORD *)(v5 + 72);
    if (v15 < v16)
    {
      *(_QWORD *)(v5 + 112) = v16;
      v15 = v16;
    }
    v17 = *(const void **)(v5 + 64);
    v13 = v15 - (_QWORD)v17;
    if (v15 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
  }
  else
  {
    if ((v12 & 8) == 0)
    {
      v13 = 0;
      HIBYTE(v26) = 0;
      v14 = __dst;
      goto LABEL_27;
    }
    v17 = *(const void **)(v5 + 40);
    v13 = *(_QWORD *)(v5 + 56) - (_QWORD)v17;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
      sub_20E860B7C();
  }
  if (v13 >= 0x17)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    v14 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)v13;
    v26 = v19 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_26;
  }
  HIBYTE(v26) = v13;
  v14 = __dst;
  if (v13)
LABEL_26:
    memmove(v14, v17, v13);
LABEL_27:
  *((_BYTE *)v14 + v13) = 0;
  v20 = v27[0];
  if (v27[0])
  {
    v21 = MEMORY[0x24BEDB7F0];
    v22 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v27[0] = *MEMORY[0x24BEDB7F0];
    v23 = *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v20 + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(v21 + 64);
    *(_QWORD *)(v20 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v20 + 16) = v23;
    if (*(char *)(v20 + 111) < 0)
      operator delete(*(void **)(v20 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v20 + 128);
    MEMORY[0x212BC6398](v20, 0x10B2C40EED050F3);
  }
  v27[0] = a2;
  v27[1] = __dst;
  v27[2] = a2;
  v27[3] = __dst;
  v27[4] = __dst;
  v24 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v24 == -1)
    sub_20E877AB8();
  v28 = v27;
  ((void (*)(_QWORD **, uint64_t))off_24CA07B88[v24])(&v28, a2);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
}

void sub_20FDD6118(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FDD613C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDD6158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20FDD616C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A553B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A553B8))
    return &xmmword_254A553A0;
  v2 = sub_20FDD6248();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A553A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A553B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A553A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A553A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A553B8);
  return &xmmword_254A553A0;
}

void sub_20FDD6230(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A553B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FDD6248()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A553D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A553D8))
    return &stru_254A553C0;
  sub_20FDD64EC((uint64_t)__p);
  sub_20FDD6338((char *)__p, &stru_254A553C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A553C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A553D8);
  return &stru_254A553C0;
}

void sub_20FDD62F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A553D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A553D8);
  _Unwind_Resume(a1);
}

void sub_20FDD6338(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FDD66D0();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FDD649C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FDD64EC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A55458);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A55458))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::dict::Dictionary>]", qword_254A55440);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55440, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55458);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A55478);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A55478))
  {
    v5 = sub_20E8A2354(qword_254A55440, "<", 0);
    sub_20E89FC08(qword_254A55440, 0, v5, qword_254A55460);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55460, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55478);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A55498);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A55498))
  {
    sub_21023CD84((uint64_t)qword_254A55460, (uint64_t)&xmmword_254A55480);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A55480, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55498);
  }
  if (byte_254A55497 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A55480, *((unint64_t *)&xmmword_254A55480 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A55480;
    *(_QWORD *)(a1 + 16) = unk_254A55490;
  }
}

void sub_20FDD6688(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55498);
  _Unwind_Resume(a1);
}

void sub_20FDD66A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55478);
  _Unwind_Resume(a1);
}

void sub_20FDD66B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55458);
  _Unwind_Resume(a1);
}

__int128 *sub_20FDD66D0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A553F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A553F8))
    return &xmmword_254A553E0;
  v2 = (char *)sub_20FDD67AC();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A553E0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A553F0 = *((_QWORD *)v2 + 2);
    xmmword_254A553E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A553E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A553F8);
  return &xmmword_254A553E0;
}

void sub_20FDD6794(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A553F8);
  _Unwind_Resume(a1);
}

void *sub_20FDD67AC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55418);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A55418))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dict::Dictionary]", qword_254A55400);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A55400, &dword_20E81F000);
    __cxa_guard_release(&qword_254A55418);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A55438);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55438))
    return &unk_254A55420;
  sub_21023CD84((uint64_t)qword_254A55400, (uint64_t)&unk_254A55420);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A55420, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55438);
  return &unk_254A55420;
}

void sub_20FDD689C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55438);
  _Unwind_Resume(a1);
}

void sub_20FDD68B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A55418);
  _Unwind_Resume(a1);
}

std::string *sub_20FDD68CC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A55398);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A55398))
    return &stru_254A55380;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 6U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A55380);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A55380, &dword_20E81F000);
  __cxa_guard_release(&qword_254A55398);
  return &stru_254A55380;
}

void sub_20FDD6984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A55398);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A55398);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDD69C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*((_BYTE *)a2 + 96))
  {
    v7 = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 56) = a2[10];
    *(_BYTE *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
    {
LABEL_8:
      v9 = a1 + 112;
      if (*((_BYTE *)a2 + 160))
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_20E860C04((_BYTE *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(v8 + 16) = a2[8];
    *(_OWORD *)v8 = v10;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v9 = a1 + 112;
  if (*((_BYTE *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_20E860C04(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      v14 = a2[16];
    }
    *(_OWORD *)v9 = v13;
    *(_QWORD *)(v9 + 16) = v14;
    *(_BYTE *)(a1 + 136) = 1;
    v11 = *((_BYTE *)a2 + 200);
    if (v11)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = *((_BYTE *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_20FDD8A84(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(_BYTE *)(a1 + 144) = 0;
LABEL_21:
  *(_BYTE *)(a1 + 168) = v11;
  return a1;
}

void sub_20FDD6B80(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[104] && v1[103] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_20FDD6BEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_20E860C04(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20E860C04((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_20E860C04(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_20FDD8CEC((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_20FDD6D98(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDD6E04(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA07CB8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t sub_20FDD6E5C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  std::logic_error *exception;
  _QWORD v7[4];
  std::string v8;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 8);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  if (!*a1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20FF1D1D8(a2, v7);
    sub_20FDD9694((uint64_t)&v8, (uint64_t)v7);
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_20FDD6F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void *v23;
  int v24;

  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      sub_20E86665C(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void sub_20FDD6FB4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  _BYTE v35[120];
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v2 = *(uint64_t **)(a1 + 64);
  v3 = *(uint64_t **)(a1 + 72);
  if (v2 == v3)
  {
LABEL_44:
    sub_20FF01694((uint64_t *)(a1 + 8), (uint64_t)v35);
    sub_20E9F5CE8((uint64_t)v35);
  }
  v4 = (__int128 *)(a1 + 8);
  while (1)
  {
    v6 = *v2;
    v5 = (std::__shared_weak_count *)v2[1];
    v38 = *v2;
    v39 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      break;
    v12 = *(const void **)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    if (v10 == v11)
      goto LABEL_11;
LABEL_12:
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 += 2;
    if (v2 == v3)
      goto LABEL_44;
  }
  v11 = *(unsigned __int8 *)(a1 + 31);
  v12 = (const void *)(a1 + 8);
  if (v10 != v11)
    goto LABEL_12;
LABEL_11:
  if (memcmp(v9, v12, v11))
    goto LABEL_12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(&v36, v6, *(unsigned int *)(a1 + 32));
  v15 = v36;
  if (!v36)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_20E860C04(&v32, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      v32 = *v4;
      v33 = *(_QWORD *)(a1 + 24);
    }
    v34 = *(_DWORD *)(a1 + 32);
    sub_20FF01918((uint64_t)&v32, (uint64_t)v35);
    sub_20E9F5CE8((uint64_t)v35);
  }
  v16 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v16 != -1)
  {
    if (!(_DWORD)v16)
    {
      v17 = v37;
      if (v37)
      {
        v18 = (unint64_t *)&v37->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(std::__shared_weak_count **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v17;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      goto LABEL_33;
    }
    ((void (*)(_BYTE *, uint64_t))off_24CA07CB8[v16])(v35, a1 + 40);
    v15 = v36;
  }
  *(_DWORD *)(a1 + 56) = -1;
  v23 = v37;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_DWORD *)(a1 + 56) = 0;
LABEL_33:
  v26 = v37;
  if (v37)
  {
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20FDD7250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  sub_20E86665C(v17 - 96);
  sub_20E86665C(v17 - 80);
  _Unwind_Resume(a1);
}

void sub_20FDD7298(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_20FDD72AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_20FDD72C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E89EF58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDD72D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void *__p[2];
  uint64_t v10;
  int v11;

  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *(_QWORD *)(a2 + 8);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 48))(__p);
  if (SHIBYTE(v10) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), __p[0], (unint64_t)__p[1]);
    v7 = SHIBYTE(v10);
    *(_DWORD *)(a1 + 32) = v11;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 32) = v11;
  }
  sub_20FDD6E5C(__p, a2);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)__p;
  *(_DWORD *)(a1 + 56) = 1;
  sub_20FDD8FB0((_QWORD *)(a1 + 64), a3);
  return a1;
}

void sub_20FDD73D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDD7418(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  int v9;
  uint64_t v10;
  _BYTE v12[2];

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  v9 = *((_DWORD *)a2 + 6);
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 56) = -1;
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24CA07CC8[v10])(v12, a1 + 40, a3);
    *(_DWORD *)(a1 + 56) = v10;
  }
  sub_20FDD8FB0((_QWORD *)(a1 + 64), a4);
  return a1;
}

void sub_20FDD74D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v14 + 56);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24CA07CB8[v17])(&a13, v15);
  *(_DWORD *)(v14 + 56) = -1;
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v13);
  _Unwind_Resume(exception_object);
}

void sub_20FDD7534(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  _BYTE v35[120];
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v2 = *(uint64_t **)(a1 + 64);
  v3 = *(uint64_t **)(a1 + 72);
  if (v2 == v3)
  {
LABEL_44:
    sub_20FF01694((uint64_t *)(a1 + 8), (uint64_t)v35);
    sub_20E9F5CE8((uint64_t)v35);
  }
  v4 = (__int128 *)(a1 + 8);
  while (1)
  {
    v6 = *v2;
    v5 = (std::__shared_weak_count *)v2[1];
    v38 = *v2;
    v39 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      break;
    v12 = *(const void **)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    if (v10 == v11)
      goto LABEL_11;
LABEL_12:
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 += 2;
    if (v2 == v3)
      goto LABEL_44;
  }
  v11 = *(unsigned __int8 *)(a1 + 31);
  v12 = (const void *)(a1 + 8);
  if (v10 != v11)
    goto LABEL_12;
LABEL_11:
  if (memcmp(v9, v12, v11))
    goto LABEL_12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(&v36, v6, *(unsigned int *)(a1 + 32));
  v15 = v36;
  if (!v36)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_20E860C04(&v32, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      v32 = *v4;
      v33 = *(_QWORD *)(a1 + 24);
    }
    v34 = *(_DWORD *)(a1 + 32);
    sub_20FF01918((uint64_t)&v32, (uint64_t)v35);
    sub_20E9F5CE8((uint64_t)v35);
  }
  v16 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v16 != -1)
  {
    if (!(_DWORD)v16)
    {
      v17 = v37;
      if (v37)
      {
        v18 = (unint64_t *)&v37->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(std::__shared_weak_count **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v17;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      goto LABEL_33;
    }
    ((void (*)(_BYTE *, uint64_t))off_24CA07CB8[v16])(v35, a1 + 40);
    v15 = v36;
  }
  *(_DWORD *)(a1 + 56) = -1;
  v23 = v37;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_DWORD *)(a1 + 56) = 0;
LABEL_33:
  v26 = v37;
  if (v37)
  {
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20FDD77D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  sub_20E86665C(v17 - 96);
  sub_20E86665C(v17 - 80);
  _Unwind_Resume(a1);
}

void sub_20FDD7818(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_20FDD782C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_20FDD7840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E89EF58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FDD7854(int a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)qword_254A6C5B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_254A6C5B8))
  {
    v9 = operator new(0x28uLL);
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = &off_24CA0D2C8;
    *v9 = &off_24CA07D90;
    *((_DWORD *)v9 + 8) = 0;
    v18[0] = v9 + 3;
    v18[1] = v9;
    v14[0] = 0;
    v14[1] = 0;
    sub_20FDD7B1C(&v15, v18, 1uLL);
    LODWORD(v19) = 0;
    v20 = v15;
    v21 = v16;
    v15 = 0uLL;
    v16 = 0;
    v10 = operator new(0x28uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_24CA07D90;
    v10[3] = &off_24CA0D2C8;
    *((_DWORD *)v10 + 8) = 1;
    v17[0] = v10 + 3;
    v17[1] = v10;
    v11[0] = 0;
    v11[1] = 0;
    sub_20FDD7B1C(&v12, v17, 1uLL);
    v22 = 1;
    v23 = v12;
    v24 = v13;
    v12 = 0uLL;
    v13 = 0;
    sub_20FDD7C44(&v19, 2);
    sub_20F44B238((uint64_t)&v22);
    sub_20F44B238((uint64_t)&v19);
    sub_20E8C3144((void **)&v12);
    sub_20E86665C((uint64_t)v17);
    sub_20E86665C((uint64_t)v11);
    sub_20E8C3144((void **)&v15);
    sub_20E86665C((uint64_t)v18);
    sub_20E86665C((uint64_t)v14);
    __cxa_atexit((void (*)(void *))sub_20FDD7E08, &qword_254A6C5E8, &dword_20E81F000);
    __cxa_guard_release(qword_254A6C5B8);
  }
  v3 = qword_254A6C5F0;
  if (!qword_254A6C5F0)
    goto LABEL_12;
  v4 = &qword_254A6C5F0;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = (uint64_t *)v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == &qword_254A6C5F0 || *((_DWORD *)v4 + 8) > a1)
LABEL_12:
    v4 = &qword_254A6C5F0;
  return v4 + 5;
}

void sub_20FDD7A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_20F44B238(v24);
  sub_20F44B238((uint64_t)&a24);
  sub_20E8C3144(&a11);
  sub_20E86665C((uint64_t)&a20);
  sub_20E86665C((uint64_t)&a9);
  sub_20E8C3144(&a17);
  sub_20E86665C((uint64_t)&a22);
  sub_20E86665C((uint64_t)&a15);
  __cxa_guard_abort(qword_254A6C5B8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDD7B1C(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_20E867F44();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_20FDD7BC8(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20FDD7C44(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;

  qword_254A6C5F8 = 0;
  qword_254A6C5F0 = 0;
  qword_254A6C5E8 = (uint64_t)&qword_254A6C5F0;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[4 * a2];
    v5 = *(_DWORD *)result;
LABEL_6:
    v7 = &qword_254A6C5F0;
LABEL_10:
    if (v3)
    {
      v10 = v7 + 1;
      if (v7[1])
        goto LABEL_24;
    }
    else
    {
LABEL_20:
      v10 = &qword_254A6C5F0;
      v7 = &qword_254A6C5F0;
    }
LABEL_21:
    v13 = operator new(0x40uLL);
    v13[8] = v5;
    sub_20FDD8FB0((_QWORD *)v13 + 5, (uint64_t)(v2 + 1));
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v7;
    *v10 = (uint64_t)v13;
    if (*(_QWORD *)qword_254A6C5E8)
    {
      qword_254A6C5E8 = *(_QWORD *)qword_254A6C5E8;
      v13 = (_DWORD *)*v10;
    }
    result = sub_20E868578((uint64_t *)qword_254A6C5F0, (uint64_t *)v13);
    ++qword_254A6C5F8;
LABEL_24:
    while (1)
    {
      v2 += 4;
      if (v2 == v4)
        break;
      v3 = qword_254A6C5F0;
      v5 = *(_DWORD *)v2;
      if ((uint64_t *)qword_254A6C5E8 == &qword_254A6C5F0)
        goto LABEL_6;
      v6 = qword_254A6C5F0;
      if (qword_254A6C5F0)
      {
        do
        {
          v7 = (uint64_t *)v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        v8 = &qword_254A6C5F0;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      if (*((_DWORD *)v7 + 8) < v5)
        goto LABEL_10;
      if (!qword_254A6C5F0)
        goto LABEL_20;
      v11 = qword_254A6C5F0;
      while (1)
      {
        while (1)
        {
          v7 = (uint64_t *)v11;
          v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v5)
            break;
          v11 = *v7;
          v10 = v7;
          if (!*v7)
            goto LABEL_21;
        }
        if (v12 >= v5)
          break;
        v11 = v7[1];
        if (!v11)
        {
          v10 = v7 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_20FDD7DD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FDD9A9C(v1);
  _Unwind_Resume(a1);
}

void sub_20FDD7DE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  sub_20FDD9A9C((_QWORD *)qword_254A6C5F0);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDD7E08(uint64_t a1)
{
  sub_20FDD9A9C(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_20FDD7E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  size_t v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *__dst[2];
  unint64_t v30;
  _QWORD v31[5];
  _QWORD *v32;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v31[0] = v5;
  if (*(_BYTE *)(a3 + 24))
  {
    v6 = *(char *)(a3 + 23);
    if (v6 >= 0)
      v7 = a3;
    else
      v7 = *(_QWORD *)a3;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a3 + 23);
    else
      v8 = *(_QWORD *)(a3 + 8);
    sub_20E86A980((_QWORD *)(v5 + 16), v7, v8);
  }
  if (*(_BYTE *)(a3 + 80))
  {
    v9 = sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"#", 1);
    v12 = *(_QWORD *)(a3 + 32);
    v11 = a3 + 32;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    sub_20E86A980(v9, v14, v15);
  }
  v16 = *(_DWORD *)(v5 + 120);
  if ((v16 & 0x10) != 0)
  {
    v19 = *(_QWORD *)(v5 + 112);
    v20 = *(_QWORD *)(v5 + 72);
    if (v19 < v20)
    {
      *(_QWORD *)(v5 + 112) = v20;
      v19 = v20;
    }
    v21 = *(const void **)(v5 + 64);
    v17 = v19 - (_QWORD)v21;
    if (v19 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_38;
  }
  else
  {
    if ((v16 & 8) == 0)
    {
      v17 = 0;
      HIBYTE(v30) = 0;
      v18 = __dst;
      goto LABEL_30;
    }
    v21 = *(const void **)(v5 + 40);
    v17 = *(_QWORD *)(v5 + 56) - (_QWORD)v21;
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
LABEL_38:
      sub_20E860B7C();
  }
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v18 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v17;
    v30 = v23 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(v30) = v17;
  v18 = __dst;
  if (v17)
LABEL_29:
    memmove(v18, v21, v17);
LABEL_30:
  *((_BYTE *)v18 + v17) = 0;
  v24 = v31[0];
  if (v31[0])
  {
    v25 = MEMORY[0x24BEDB7F0];
    v26 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v31[0] = *MEMORY[0x24BEDB7F0];
    v27 = *(_QWORD *)(v25 + 72);
    *(_QWORD *)(v24 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(v25 + 64);
    *(_QWORD *)(v24 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v24 + 16) = v27;
    if (*(char *)(v24 + 111) < 0)
      operator delete(*(void **)(v24 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v24 + 128);
    MEMORY[0x212BC6398](v24, 0x10B2C40EED050F3);
  }
  v31[0] = a2;
  v31[1] = __dst;
  v31[2] = a2;
  v31[3] = __dst;
  v31[4] = __dst;
  v28 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v28 == -1)
    sub_20E877AB8();
  v32 = v31;
  ((void (*)(_QWORD **, uint64_t))off_24CA07C70[v28])(&v32, a2);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
}

void sub_20FDD80DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FDD8100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDD811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDD8130(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void **v9;
  __int128 v10;

  v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      sub_20EB057F8();
    v4 = *(void ***)(a1 + 8);
    v5 = 96 * a2;
    v6 = (char *)operator new(96 * a2);
    v7 = &v6[(char *)v4 - (char *)v2];
    *(_QWORD *)&v10 = v7;
    *((_QWORD *)&v10 + 1) = &v6[v5];
    if (v4 != v2)
    {
      v8 = 0;
      do
      {
        sub_20EB054F8(&v7[v8 * 8 - 96], (__int128 *)&v4[v8 - 12]);
        v8 -= 12;
      }
      while (&v4[v8] != v2);
      v2 = *(void ***)a1;
      v9 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = &v7[v8 * 8];
      *(_OWORD *)(a1 + 8) = v10;
      while (1)
      {
        if (v9 == v2)
          goto LABEL_17;
        if (*((_BYTE *)v9 - 16) && *((char *)v9 - 41) < 0)
        {
          operator delete(*(v9 - 8));
          if (!*((_BYTE *)v9 - 72))
            goto LABEL_7;
        }
        else if (!*((_BYTE *)v9 - 72))
        {
          goto LABEL_7;
        }
        if (*((char *)v9 - 73) < 0)
          operator delete(*(v9 - 12));
LABEL_7:
        v9 -= 12;
      }
    }
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[v5];
LABEL_17:
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_20FDD82E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    if (*(_BYTE *)(i - 16) && *(char *)(i - 41) < 0)
    {
      operator delete(*(void **)(i - 64));
      if (!*(_BYTE *)(i - 72))
        continue;
    }
    else if (!*(_BYTE *)(i - 72))
    {
      continue;
    }
    if (*(char *)(i - 73) < 0)
      operator delete(*(void **)(i - 96));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20FDD8370(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _OWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void **v18;
  __int128 v20;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_20EB057F8();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)&v7[6 * v3];
  *((_QWORD *)&v20 + 1) = &v7[6 * v6];
  *v8 = 0;
  v8[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v8[24] = 1;
  }
  v9 = (char *)&v7[6 * v3];
  v9[32] = 0;
  v10 = v9 + 32;
  v10[48] = 0;
  v11 = (char *)&v7[6 * v3];
  if (*(_BYTE *)(a2 + 80))
  {
    *(_OWORD *)v10 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v12 = (unsigned __int128 *)(a2 + 64);
    do
      v13 = __ldaxp(v12);
    while (__stlxp(v13, v12));
    v7[6 * v3 + 4] = v13;
    v10[48] = 1;
    v11 = (char *)&v7[6 * v3];
  }
  v14 = v11 + 96;
  *(_QWORD *)&v20 = v11 + 96;
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 != (char *)*a1)
  {
    v17 = 0;
    do
    {
      sub_20EB054F8(&v8[v17 - 96], (__int128 *)&v15[v17 - 96]);
      v17 -= 96;
    }
    while (&v15[v17] != v16);
    v15 = (char *)*a1;
    v18 = (void **)a1[1];
    *a1 = &v8[v17];
    *(_OWORD *)(a1 + 1) = v20;
    v14 = (char *)v20;
    while (1)
    {
      if (v18 == (void **)v15)
        goto LABEL_31;
      if (*((_BYTE *)v18 - 16) && *((char *)v18 - 41) < 0)
      {
        operator delete(*(v18 - 8));
        if (!*((_BYTE *)v18 - 72))
          goto LABEL_21;
      }
      else if (!*((_BYTE *)v18 - 72))
      {
        goto LABEL_21;
      }
      if (*((char *)v18 - 73) < 0)
        operator delete(*(v18 - 12));
LABEL_21:
      v18 -= 12;
    }
  }
  *a1 = v8;
  a1[1] = v14;
  a1[2] = *((_QWORD *)&v20 + 1);
LABEL_31:
  if (v15)
    operator delete(v15);
  return v14;
}

uint64_t sub_20FDD8604(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t *v6;
  unsigned __int8 ***v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char v18;

  result = sub_20FDD874C((uint64_t)&v18, a2, a3);
  if ((_DWORD)result)
  {
    v6 = (uint64_t *)a2[5];
    v7 = (unsigned __int8 ***)a3[5];
    if (*((_BYTE *)v6 + 24))
      v8 = *((_BYTE *)v7 + 24) == 0;
    else
      v8 = 1;
    if (v8)
    {
      return (*((_BYTE *)v6 + 24) != 0) == (*((_BYTE *)v7 + 24) != 0);
    }
    else
    {
      v10 = *v6;
      v9 = v6[1];
      v11 = *v7;
      if (v9 - *v6 == (char *)v7[1] - (char *)*v7)
      {
        if (v10 == v9)
          return 1;
        while (1)
        {
          v12 = *(unsigned __int8 *)(v10 + 23);
          if ((v12 & 0x80u) == 0)
            v13 = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 23);
          else
            v13 = *(unsigned __int8 **)(v10 + 8);
          v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
          v15 = (char)v14;
          if ((char)v14 < 0)
            v14 = v11[1];
          if (v13 != v14)
            break;
          if (v15 >= 0)
            v16 = (unsigned __int8 *)v11;
          else
            v16 = *v11;
          if ((v12 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v10, v16, *(_QWORD *)(v10 + 8)))
              return 0;
          }
          else if (*(_BYTE *)(v10 + 23))
          {
            v17 = 0;
            while (*(unsigned __int8 *)(v10 + v17) == v16[v17])
            {
              if (v12 == ++v17)
                goto LABEL_13;
            }
            return 0;
          }
LABEL_13:
          v10 += 24;
          v11 += 3;
          result = 1;
          if (v10 == v9)
            return result;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_20FDD874C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  char v30;

  if (!sub_20FDD8924((uint64_t)&v30, a2, a3))
    return 0;
  v5 = (unsigned __int8 *)a2[3];
  v6 = (unsigned __int8 **)a3[3];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0))
      return 0;
    goto LABEL_25;
  }
  v10 = v5[23];
  if ((v10 & 0x80u) == 0)
    v11 = (unsigned __int8 *)v5[23];
  else
    v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  v12 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  v13 = (char)v12;
  if ((char)v12 < 0)
    v12 = v6[1];
  if (v11 != v12)
    return 0;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)a3[3];
  else
    v14 = *v6;
  if ((v10 & 0x80) == 0)
  {
    if (v5[23])
    {
      while (*v5 == *v14)
      {
        ++v5;
        ++v14;
        if (!--v10)
          goto LABEL_25;
      }
      return 0;
    }
    goto LABEL_25;
  }
  if (memcmp(*(const void **)v5, v14, *((_QWORD *)v5 + 1)))
    return 0;
LABEL_25:
  v15 = (unsigned __int8 *)a2[4];
  v16 = (unsigned __int8 **)a3[4];
  if (v15[24])
    v17 = *((_BYTE *)v16 + 24) == 0;
  else
    v17 = 1;
  if (v17)
    return (v15[24] != 0) == (*((_BYTE *)v16 + 24) != 0);
  v18 = v15[23];
  if ((v18 & 0x80u) == 0)
    v19 = (unsigned __int8 *)v15[23];
  else
    v19 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
  v20 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
  v21 = (char)v20;
  if ((char)v20 < 0)
    v20 = v16[1];
  if (v19 != v20)
    return 0;
  if (v21 >= 0)
    v22 = (unsigned __int8 *)a3[4];
  else
    v22 = *v16;
  if ((v18 & 0x80) != 0)
    return memcmp(*(const void **)v15, v22, *((_QWORD *)v15 + 1)) == 0;
  if (!v15[23])
    return 1;
  v23 = v18 - 1;
  do
  {
    v25 = *v15++;
    v24 = v25;
    v27 = *v22++;
    v26 = v27;
    v29 = v23-- != 0;
    result = v24 == v26;
  }
  while (v24 == v26 && v29);
  return result;
}

BOOL sub_20FDD8924(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;

  if (*(_QWORD *)*a2 != *(_QWORD *)*a3 || *(unsigned __int8 *)(*a2 + 8) != *(unsigned __int8 *)(*a3 + 8))
    return 0;
  v5 = (unsigned __int8 *)a2[1];
  v6 = (unsigned __int8 **)a3[1];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0))
      return 0;
  }
  else
  {
    v13 = v5[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v5[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v6[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = (unsigned __int8 *)a3[1];
    else
      v17 = *v6;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v17, *((_QWORD *)v5 + 1)))
        return 0;
    }
    else if (v5[23])
    {
      while (*v5 == *v17)
      {
        ++v5;
        ++v17;
        if (!--v13)
          goto LABEL_9;
      }
      return 0;
    }
  }
LABEL_9:
  v9 = a2[2];
  v10 = a3[2];
  if (*(_BYTE *)(v9 + 16))
    v11 = *(_BYTE *)(v10 + 16) == 0;
  else
    v11 = 1;
  if (v11)
    return (*(_BYTE *)(v9 + 16) != 0) == (*(_BYTE *)(v10 + 16) != 0);
  if (*(_QWORD *)v9 == *(_QWORD *)v10)
    return *(unsigned __int8 *)(v9 + 8) == *(unsigned __int8 *)(v10 + 8);
  return 0;
}

double sub_20FDD8A84@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (a1[1] - *a1) >> 5;
  v7 = 0;
  v6 = 0uLL;
  sub_20E9099B8((uint64_t)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_20FDD8B8C(*a1, a1[1], (uint64_t)&v6);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_20FDD8AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDD8B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  int v14;
  char v15;
  _QWORD v16[2];

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v14 = 0;
      sub_20FDD7E30((uint64_t)v16, (uint64_t)v13, v5);
      if (v14 == -1)
        sub_20E877AB8();
      v16[0] = &v15;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24CA07CA0[v14])(__p, v16, v13);
      if (v14 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24CA07C88[v14])(v16, v13);
      v7 = *(_QWORD *)(a3 + 8);
      if (v7 < *(_QWORD *)(a3 + 16))
      {
        v6 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v12;
        *(_OWORD *)v7 = v6;
        *(_QWORD *)(a3 + 8) = v7 + 24;
      }
      else
      {
        v8 = sub_20E8780F0((void **)a3, (uint64_t)__p);
        v9 = SHIBYTE(v12);
        *(_QWORD *)(a3 + 8) = v8;
        if (v9 < 0)
          operator delete(__p[0]);
      }
      v5 += 96;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_20FDD8C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_20FDD8CEC@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_20FDD8130((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_20FF1C114(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_20FDD8370(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_20FDD8E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FDD8FB0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_20FDD9058(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDD90D4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20FDD912C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20FDD9184(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_20FDD91A8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_20FDD91CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA07CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FDD91E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA07CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FDD9214(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

uint64_t sub_20FDD922C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[16];
  int v7;
  void *__p[2];
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  if (*(char *)(a2 + 31) < 0)
  {
    sub_20E860C04(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 24);
  }
  v10 = *(_DWORD *)(a2 + 32);
  v6[0] = 0;
  v7 = -1;
  v4 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_24CA07CC8[v4])(&v11, v6, a2 + 40);
    v7 = v4;
  }
  sub_20FDD7418(a1, (__int128 *)__p, (uint64_t)v6, a2 + 64);
  if (v7 != -1)
    ((void (*)(char *, _BYTE *))off_24CA07CB8[v7])(&v12, v6);
  v7 = -1;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20FDD9338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_24CA07CB8[a12])(v18 - 33, &a10);
  a12 = -1;
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDD9394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v17;
  char v18;

  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v4);
  v6 = *v5;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v4 = v6;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v7 = *(unsigned int *)(a1 + 56);
  v8 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v7 == -1)
  {
    if ((_DWORD)v8 == -1)
      goto LABEL_8;
  }
  else if ((_DWORD)v8 == -1)
  {
    ((void (*)(char *, uint64_t))off_24CA07CB8[v7])(&v18, a1 + 40);
    *(_DWORD *)(a1 + 56) = -1;
    goto LABEL_8;
  }
  v17 = a1 + 40;
  ((void (*)(uint64_t *))off_24CA07D28[v8])(&v17);
LABEL_8:
  v9 = (void **)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 72);
    v12 = *(void **)(a1 + 64);
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = *v9;
    }
    *(_QWORD *)(a1 + 72) = v10;
    operator delete(v12);
    *v9 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return a1;
}

void sub_20FDD9504(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24CA07CB8[v5])(&v10, v4);
LABEL_9:
    *(_OWORD *)v4 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    return;
  }
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FDD95C8(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24CA07CB8[v5])(&v10, v4);
LABEL_9:
    *(_OWORD *)v4 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *(_DWORD *)(v4 + 16) = 1;
    return;
  }
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t sub_20FDD9694(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD v6[2];
  char v7;
  _QWORD **v8;
  _QWORD *v9;
  const char *v10;
  char *v11;
  const char *v12;
  const char *v13;

  v5 = 0;
  sub_20E9EB2F8(v4, "data of type ");
  v6[0] = a2;
  v6[1] = a2 + 24;
  v9 = v4;
  v10 = "{";
  v11 = (char *)v4;
  v12 = "{";
  v13 = "{";
  if (v5 == -1)
    goto LABEL_8;
  v8 = &v9;
  ((void (*)(_QWORD ***, _DWORD *))off_24CA07D38[v5])(&v8, v4);
  LOBYTE(v9) = 1;
  v10 = (const char *)v4;
  v11 = &v7;
  sub_20FDD9884((uint64_t)v6, (uint64_t)&v9);
  v9 = v4;
  v10 = "}";
  v11 = (char *)v4;
  v12 = "}";
  v13 = "}";
  if (v5 == -1)
LABEL_8:
    sub_20E877AB8();
  v8 = &v9;
  ((void (*)(_QWORD ***, _DWORD *))off_24CA07D38[v5])(&v8, v4);
  v9 = v4;
  v10 = " is not serializable";
  v11 = (char *)v4;
  v12 = " is not serializable";
  v13 = " is not serializable";
  if (v5 == -1)
    sub_20E877AB8();
  v6[0] = &v9;
  ((void (*)(_QWORD *, _DWORD *))off_24CA07D68[v5])(v6, v4);
  if (v5 == -1)
    sub_20E877AB8();
  v9 = v6;
  result = ((uint64_t (*)(_QWORD **, _DWORD *))off_24CA07CA0[v5])(&v9, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD **, _DWORD *))off_24CA07C88[v5])(&v9, v4);
  return result;
}

void sub_20FDD9834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD9848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD985C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD9870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDD9884(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t *v12;

  v4 = *(const char **)a1;
  if (!*(_BYTE *)a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = ",";
    v9 = v7;
    v10 = ",";
    v11 = ",";
    v5 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
    v12 = &v7;
    ((void (*)(uint64_t **))off_24CA07D38[v5])(&v12);
  }
  *(_BYTE *)a2 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v4;
  v9 = v7;
  v10 = v4;
  v11 = v4;
  v6 = *(unsigned int *)(v7 + 24);
  if ((_DWORD)v6 == -1)
LABEL_6:
    sub_20E877AB8();
  v12 = &v7;
  ((void (*)(uint64_t **))off_24CA07D50[v6])(&v12);
  sub_20FDD994C(a2, *(unsigned int **)(a1 + 8));
}

void sub_20FDD994C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  uint64_t *v13;

  if (!*(_BYTE *)a1)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (std::string *)",";
    v10 = v8;
    v11 = (std::string *)",";
    v12 = (std::string *)",";
    v4 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *))off_24CA07D38[v4])(&v7);
  }
  *(_BYTE *)a1 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  std::to_string(&v7, *a2);
  v8 = v5;
  v9 = &v7;
  v10 = v5;
  v11 = &v7;
  v12 = &v7;
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
    sub_20E877AB8();
  v13 = &v8;
  ((void (*)(uint64_t **, uint64_t))off_24CA07C70[v6])(&v13, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_20FDD9A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDD9A54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA07D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FDD9A64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA07D90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FDD9A9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a1)
  {
    sub_20FDD9A9C(*a1);
    sub_20FDD9A9C(a1[1]);
    v2 = a1[5];
    if (v2)
    {
      v3 = a1[6];
      v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

void sub_20FDD9B4C(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_20E89EFE4(v7, a2);
  sub_20FDD9CC4((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_20FDD9CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E89F09C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDD9CC4(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  __int128 *v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DC28);
  if ((v4 & 1) == 0)
  {
    v10 = a3;
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_254A6DC28);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A57680, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DC28);
      a2 = v9;
      a3 = v10;
    }
  }
  v5 = a2;
  sub_20E89EFE4(__dst, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_254A57680;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v20)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v12;
    __dst[1] = 0;
    v12 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v19)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  v6 = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v18;
  __p[1] = 0;
  v18 = 0;
  v15 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v14[0]);
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_13;
LABEL_8:
  if (!v13)
    return a1;
LABEL_14:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

void sub_20FDD9E70(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void *p_p;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *__p;
  size_t v20;
  int64_t v21;
  _QWORD *v22;

  if (!*a3)
  {
    sub_20E86A980(*a2, (uint64_t)"nullptr", 7);
    return;
  }
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v22 = (_QWORD *)v4;
  std::ostream::operator<<();
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v21) = 0;
      p_p = &__p;
      goto LABEL_16;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_20E860B7C();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    p_p = operator new(v11 + 1);
    v20 = v6;
    v21 = v12 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v21) = v6;
    p_p = &__p;
    if (!v6)
      goto LABEL_16;
  }
  memmove(p_p, v10, v6);
LABEL_16:
  *((_BYTE *)p_p + v6) = 0;
  v13 = v22;
  if (v22)
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *v22 = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)((char *)v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    v13[3] = MEMORY[0x24BEDB848] + 16;
    v13[2] = v16;
    if (*((char *)v13 + 111) < 0)
      operator delete((void *)v13[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v13 + 16);
    MEMORY[0x212BC6398](v13, 0x10B2C40EED050F3);
  }
  if (v21 >= 0)
    v17 = &__p;
  else
    v17 = __p;
  if (v21 >= 0)
    v18 = HIBYTE(v21);
  else
    v18 = v20;
  sub_20E86A980(*a2, (uint64_t)v17, v18);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_20FDDA0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDDA110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDDA124(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA080B0[v2])(&v4, a1 + 32);
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

double sub_20FDDA17C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_20E860C04(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20E860C04((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_20E860C04(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_20FDE4B9C((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_20FDDA328(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FDDA394(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[2];
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  __int16 v29;

  *a1 = off_24CA07E08;
  a1[1] = &unk_24CA07E80;
  sub_20FDE470C((uint64_t)(a1 + 2), (uint64_t *)(a2 + 64));
  v23[0] = &off_24C9C0338;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(std::__shared_weak_count **)(a2 + 24);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_DWORD *)(a2 + 56);
    v15 = *(_WORD *)(a2 + 60);
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_DWORD *)(a2 + 56);
    v15 = *(_WORD *)(a2 + 60);
  }
  v23[1] = v9;
  v24 = v10;
  v25 = *(_QWORD *)(a2 + 32);
  v26 = *(_DWORD *)(a2 + 40);
  v27 = v13;
  v28 = v14;
  v29 = v15;
  if (v10)
  {
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_20FF56CC8((uint64_t)(a1 + 24), (uint64_t)v23, 0, v4, v5, v6, v7, v8);
  v19 = v24;
  if (!v24)
    return a1;
  v20 = (unint64_t *)&v24->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
    return a1;
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  return a1;
}

void sub_20FDDA4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20EA69690((uint64_t)va);
  sub_20FDE1770(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDDA50C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA07E08;
  *(_QWORD *)(a1 + 8) = &unk_24CA07E80;
  v2 = *(unsigned int *)(a1 + 288);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA080B0[v2])(&v4, a1 + 224);
  *(_DWORD *)(a1 + 288) = -1;
  sub_20FDE1770(a1 + 16);
  return a1;
}

uint64_t sub_20FDDA57C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24CA07E08;
  *(_QWORD *)a1 = &unk_24CA07E80;
  v2 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA080B0[v2])(&v4, a1 + 216);
  *(_DWORD *)(a1 + 280) = -1;
  return sub_20FDE1770(a1 + 8);
}

uint64_t sub_20FDDA5EC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA07E08;
  *(_QWORD *)(a1 + 8) = &unk_24CA07E80;
  v2 = *(unsigned int *)(a1 + 288);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA080B0[v2])(&v4, a1 + 224);
  *(_DWORD *)(a1 + 288) = -1;
  sub_20FDE1770(a1 + 16);
  return MEMORY[0x212BC6398](a1, 0x10F3C406E56456ELL);
}

uint64_t sub_20FDDA670(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24CA07E08;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA07E80;
  v3 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA080B0[v3])(&v5, a1 + 216);
  *(_DWORD *)(a1 + 280) = -1;
  sub_20FDE1770(a1 + 8);
  return MEMORY[0x212BC6398](v2, 0x10F3C406E56456ELL);
}

void sub_20FDDA6FC(uint64_t a1, int *a2)
{
  if (!sub_20FDF8FC8(a2, a1)
    && !sub_20FDF9174(a2, a1)
    && !sub_20FDF9344(a2, a1)
    && !sub_20FDF94F0(a2, a1)
    && !sub_20FDF965C((uint64_t)a2, a1))
  {
    sub_20FDF978C(a1, a2);
  }
}

void sub_20FDDA780(uint64_t a1, uint64_t (***a2)())
{
  sub_20FDDA790(a2, a1);
}

void sub_20FDDA790(uint64_t (***a1)(), uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  void *__p;
  uint64_t v28;
  char v29;

  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((unsigned __int8 *)v4 + 104);
    v4[11] = "info";
    v4[12] = 4;
    if (!v6)
      *((_BYTE *)v4 + 104) = 1;
    sub_20FDECB7C((uint64_t)v4, a2 + 16);
    v7 = *(unsigned __int8 *)(v5 + 104);
    *(_QWORD *)(v5 + 88) = "value";
    *(_QWORD *)(v5 + 96) = 5;
    if (!v7)
      *(_BYTE *)(v5 + 104) = 1;
    sub_20FDEE17C(v5, (unsigned __int16 *)(a2 + 192));
    return;
  }
  v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
  if (v8)
  {
    v9 = v8;
    sub_20FDF0564((uint64_t)&__p, v8, a2 + 16);
    LODWORD(__p) = 2;
    sub_20E9EDADC(v9[6], &__p);
    if (__p <= 1)
    {
      sub_20FDF0C98(v9, (unsigned __int16 *)(a2 + 192), __p);
    }
    else
    {
      sub_20E90A71C(v9 + 2);
      sub_20FDF0C98(v9, (unsigned __int16 *)(a2 + 192), 2u);
      v10 = v9[4];
      v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(v9[2] + 32))(v9 + 2) + *(_QWORD *)(v10 - 8);
      if (v11)
        (*(void (**)(_QWORD *, uint64_t))(v9[2] + 40))(v9 + 2, v11);
      v9[4] -= 16;
    }
    return;
  }
  v12 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
  if (!v12)
  {
    v16 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
    if (!v16)
    {
      if (*a1 == &off_24CA167C8)
      {
        sub_20FDF4C0C((uint64_t)&__p, a1, a2 + 16);
        sub_20FDF5698(a1, (unsigned __int16 *)(a2 + 192));
      }
      else
      {
        sub_20FDF98FC(a2, (uint64_t)a1);
      }
      return;
    }
    v17 = (uint64_t)v16;
    LODWORD(__p) = 6;
    sub_20E9E840C((uint64_t)v16, &__p);
    v18 = __p;
    if (__p >= 6)
      v19 = 6;
    else
      v19 = __p;
    if (v19 < 3)
      sub_20FDF3288((uint64_t)&__p, v17, a2 + 16, v19);
    else
      sub_20FDF3478(v17, a2 + 16, v19);
    if (v18 < 3 || *(_BYTE *)(v17 + 131))
    {
LABEL_31:
      v20 = (unsigned __int16 *)(a2 + 192);
      LODWORD(__p) = 2;
      sub_20E9E840C(v17, &__p);
      v21 = __p;
      if (__p >= 2)
        v22 = 2;
      else
        v22 = __p;
      if (v22 < 2)
        sub_20FDF41A4((const void *)v17, (uint64_t)v20);
      else
        sub_20FDF466C(v17, v20);
      if (v21 < 2 || *(_BYTE *)(v17 + 131))
        return;
      while (1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + *(_QWORD *)(**(_QWORD **)(v17 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_20E9E9FEC(v17, (uint64_t)&__p);
        if (v29 < 0)
        {
          if (v28 != 1 || *(unsigned __int8 *)(v17 + 72) != *(unsigned __int8 *)__p)
          {
LABEL_67:
            v26 = 1;
            goto LABEL_68;
          }
        }
        else if (v29 != 1 || *(unsigned __int8 *)(v17 + 72) != __p)
        {
          goto LABEL_67;
        }
        v26 = 0;
LABEL_68:
        if (v29 < 0)
          operator delete(__p);
        if (*(_BYTE *)(v17 + 131))
          v25 = 0;
        else
          v25 = v26;
        if ((v25 & 1) == 0)
          return;
      }
    }
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + *(_QWORD *)(**(_QWORD **)(v17 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_31;
      sub_20E9E9FEC(v17, (uint64_t)&__p);
      if (v29 < 0)
      {
        if (v28 != 1 || *(unsigned __int8 *)(v17 + 72) != *(unsigned __int8 *)__p)
        {
LABEL_48:
          v24 = 1;
          goto LABEL_49;
        }
      }
      else if (v29 != 1 || *(unsigned __int8 *)(v17 + 72) != __p)
      {
        goto LABEL_48;
      }
      v24 = 0;
LABEL_49:
      if (v29 < 0)
        operator delete(__p);
      if (*(_BYTE *)(v17 + 131))
        v23 = 0;
      else
        v23 = v24;
      if ((v23 & 1) == 0)
        goto LABEL_31;
    }
  }
  v13 = (uint64_t)v12;
  v14 = *((unsigned __int8 *)v12 + 104);
  v12[11] = "info";
  v12[12] = 4;
  if (!v14)
    *((_BYTE *)v12 + 104) = 1;
  sub_20FDF1718((uint64_t)v12, a2 + 16);
  v15 = *(unsigned __int8 *)(v13 + 104);
  *(_QWORD *)(v13 + 88) = "value";
  *(_QWORD *)(v13 + 96) = 5;
  if (!v15)
    *(_BYTE *)(v13 + 104) = 1;
  sub_20FDF2148(v13, (unsigned __int16 *)(a2 + 192));
}

uint64_t sub_20FDDAC28()
{
  return 2;
}

uint64_t sub_20FDDAC30()
{
  return 2;
}

uint64_t sub_20FDDAC38()
{
  return 1;
}

uint64_t sub_20FDDAC40()
{
  return 1;
}

void sub_20FDDAC48(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE v9[16];
  std::__shared_weak_count *v10;
  uint64_t v11;
  _BYTE v12[216];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_20FF56FE4(a1 + 192, (uint64_t)v9);
  sub_20FDDA17C(a1 + 16, (uint64_t)v12);
  v4 = operator new();
  sub_20FDF8EA8(v4, (uint64_t)v9, (uint64_t)v12);
  v11 = 0;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_24CA0C1E0;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  a2[2] = v5;
  sub_20EB0580C((uint64_t)v12);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FDDAD60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD *);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20EEC2CA4((_QWORD **)va1);
  sub_20EB0580C((uint64_t)va2);
  sub_20F282C7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDDADBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F282C7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDDADD4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20FDDAC48(a1 - 8, a2);
}

uint64_t sub_20FDDADDC(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C160, (const struct __class_type_info *)&unk_24CA08078, 8);
  if (result)
  {
    v4 = result;
    v6[0] = a1 + 24;
    v6[1] = a1 + 40;
    v6[2] = a1 + 72;
    v6[3] = a1 + 96;
    v6[4] = a1 + 128;
    v6[5] = a1 + 160;
    v5[0] = result + 24;
    v5[1] = result + 40;
    v5[2] = result + 72;
    v5[3] = result + 96;
    v5[4] = result + 128;
    v5[5] = result + 160;
    result = sub_20FDD8604((uint64_t)&v7, v6, v5);
    if ((_DWORD)result)
      return sub_20FF572FC((unsigned __int16 *)(a1 + 192), (unsigned __int16 *)(v4 + 192));
  }
  return result;
}

uint64_t sub_20FDDAE90(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C160, (const struct __class_type_info *)&unk_24CA08078, 8);
  if (result)
  {
    v4 = result;
    v6[0] = a1 + 16;
    v6[1] = a1 + 32;
    v6[2] = a1 + 64;
    v6[3] = a1 + 88;
    v6[4] = a1 + 120;
    v6[5] = a1 + 152;
    v5[0] = result + 24;
    v5[1] = result + 40;
    v5[2] = result + 72;
    v5[3] = result + 96;
    v5[4] = result + 128;
    v5[5] = result + 160;
    result = sub_20FDD8604((uint64_t)&v7, v6, v5);
    if ((_DWORD)result)
      return sub_20FF572FC((unsigned __int16 *)(a1 + 184), (unsigned __int16 *)(v4 + 192));
  }
  return result;
}

void sub_20FDDAF44(uint64_t a1, int *a2)
{
  if (!sub_20FDF8FC8(a2, a1)
    && !sub_20FDF9174(a2, a1)
    && !sub_20FDF9344(a2, a1)
    && !sub_20FDF94F0(a2, a1)
    && !sub_20FDF965C((uint64_t)a2, a1))
  {
    sub_20FDF978C(a1, a2);
  }
}

void sub_20FDDAFC8(uint64_t a1, int *a2)
{
  uint64_t v3;

  v3 = a1 - 8;
  if (!sub_20FDF8FC8(a2, a1 - 8)
    && !sub_20FDF9174(a2, v3)
    && !sub_20FDF9344(a2, v3)
    && !sub_20FDF94F0(a2, v3)
    && !sub_20FDF965C((uint64_t)a2, v3))
  {
    sub_20FDF978C(v3, a2);
  }
}

void sub_20FDDB04C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FDDA790(a2, a1);
}

void sub_20FDDB05C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FDDA790(a2, a1 - 8);
}

uint64_t sub_20FDDB06C(uint64_t a1)
{
  return a1 + 32;
}

_QWORD *sub_20FDDB074(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = off_24CA0A100;
  a1[1] = &unk_24CA0A178;
  sub_20FDE470C((uint64_t)(a1 + 2), (uint64_t *)(a2 + 32));
  sub_20FF45710((uint64_t)(a1 + 24), *(uint64_t **)(a2 + 8));
  a1[74] = 0;
  *((_OWORD *)a1 + 36) = 0u;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v4 + 408))
    a1[73] = sub_20E8ADE68(a1 + 72, (__int128 *)(v4 + 384));
  return a1;
}

void sub_20FDDB10C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void **v4;
  void **v5;
  void **v7;
  void **v8;
  void *v9;
  void **v10;

  v5 = v4;
  v10 = v5;
  v7 = (void **)*v5;
  if (*v5)
  {
    v8 = *(void ***)(v2 + 584);
    v9 = *v5;
    if (v8 != v7)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = *v10;
    }
    *(_QWORD *)(v2 + 584) = v7;
    operator delete(v9);
  }
  sub_20FDE1900(v3);
  sub_20FDE1770(v1);
  _Unwind_Resume(a1);
}

void sub_20FDDB17C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FDE1770(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FDDB190(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_24CA0A100;
  a1[1] = &unk_24CA0A178;
  v2 = a1[72];
  if (v2)
  {
    v3 = a1[73];
    v4 = (void *)a1[72];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[72];
    }
    a1[73] = v2;
    operator delete(v4);
  }
  sub_20FDE1900(a1 + 24);
  sub_20FDE1770((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_20FDDB220(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(a1 - 1) = off_24CA0A100;
  *a1 = &unk_24CA0A178;
  v2 = a1[71];
  if (v2)
  {
    v3 = a1[72];
    v4 = (void *)a1[71];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[71];
    }
    a1[72] = v2;
    operator delete(v4);
  }
  sub_20FDE1900(a1 + 23);
  return sub_20FDE1770((uint64_t)(a1 + 1));
}

void sub_20FDDB2AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_24CA0A100;
  a1[1] = &unk_24CA0A178;
  v2 = a1[72];
  if (v2)
  {
    v3 = a1[73];
    v4 = (void *)a1[72];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[72];
    }
    a1[73] = v2;
    operator delete(v4);
  }
  sub_20FDE1900(a1 + 24);
  sub_20FDE1770((uint64_t)(a1 + 2));
  JUMPOUT(0x212BC6398);
}

void sub_20FDDB34C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(a1 - 1) = off_24CA0A100;
  *a1 = &unk_24CA0A178;
  v2 = a1[71];
  if (v2)
  {
    v3 = a1[72];
    v4 = (void *)a1[71];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[71];
    }
    a1[72] = v2;
    operator delete(v4);
  }
  sub_20FDE1900(a1 + 23);
  sub_20FDE1770((uint64_t)(a1 + 1));
  JUMPOUT(0x212BC6398);
}

void sub_20FDDB3F4(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20FDDB424(a2, a1, &v3);
}

void sub_20FDDB424(uint64_t (***a1)(), uint64_t a2, unsigned int *a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;

  v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v6)
  {
    sub_20FE0CA1C((uint64_t)v6, a2, *a3);
  }
  else
  {
    v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v7)
    {
      sub_20FE0CBC8((uint64_t)v7, a2, *a3);
    }
    else
    {
      v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v8)
      {
        sub_20FE0CDB8((uint64_t)v8, a2, *a3);
      }
      else
      {
        v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v9)
        {
          sub_20FE0CF64((uint64_t)v9, a2, *a3);
        }
        else
        {
          v10 = *a3;
          if (*a1 == &off_24CA16588)
            sub_20FE0D184((uint64_t)a1, a2, v10);
          else
            sub_20FE0D388(a1, a2, v10);
        }
      }
    }
  }
}

void sub_20FDDB55C(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20FDDB58C(a2, a1, &v3);
}

void sub_20FDDB58C(uint64_t (***a1)(), uint64_t a2, unsigned int *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (!sub_20FE0D4FC(a1, a2, a3))
  {
    v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v6)
    {
      v7 = v6;
      v8 = *a3;
      sub_20FDF0564((uint64_t)&v11, v6, a2 + 16);
      sub_20FE02B90((uint64_t)&v12, v7, (uint64_t *)(a2 + 192));
      if (v8 >= 3)
        sub_20EAC02F0((uint64_t)v7, a2 + 576);
    }
    else if (!sub_20FE0D618(a1, a2, a3))
    {
      v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
      if (v9)
      {
        sub_20FE0D734((uint64_t)v9, a2, *a3);
      }
      else
      {
        v10 = *a3;
        if (*a1 == &off_24CA167C8)
        {
          sub_20FDF4C0C((uint64_t)&v13, a1, a2 + 16);
          sub_20FE07F40((uint64_t)&v14, a1, (uint64_t *)(a2 + 192));
          if (v10 >= 3)
            sub_20FDF5544(a1, a2 + 576);
        }
        else
        {
          sub_20FE0D988((uint64_t)a1, a2, v10);
        }
      }
    }
  }
}

uint64_t sub_20FDDB6F4()
{
  return 3;
}

uint64_t sub_20FDDB6FC()
{
  return 3;
}

uint64_t sub_20FDDB704()
{
  return 1;
}

uint64_t sub_20FDDB70C()
{
  return 1;
}

void sub_20FDDB714(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  char v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 __p;
  _BYTE v13[7];
  char v14;
  char v15;
  uint64_t v16[48];
  uint64_t v17;
  std::__shared_weak_count *v18;
  _DWORD v19[2];
  _BYTE v20[216];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a1[72];
  v7 = a1[73];
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = *(void **)v6;
    v2 = *(_QWORD *)(v6 + 8);
    v19[0] = *(_DWORD *)(v6 + 16);
    *(_DWORD *)((char *)v19 + 3) = *(_DWORD *)(v6 + 19);
    v3 = *(_BYTE *)(v6 + 23);
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)v6 = 0;
  }
  sub_20FF460B8(a1 + 24, 1, (uint64_t)v16);
  LOBYTE(__p) = 0;
  v15 = 0;
  if (v6 != v7)
  {
    if (v3 < 0)
    {
      sub_20E860C04(&__p, v8, v2);
    }
    else
    {
      *(_QWORD *)&__p = v8;
      *((_QWORD *)&__p + 1) = v2;
      *(_DWORD *)v13 = v19[0];
      *(_DWORD *)&v13[3] = *(_DWORD *)((char *)v19 + 3);
      v14 = v3;
    }
    v15 = 1;
  }
  sub_20FF3DDFC(&v17, (uint64_t)v16, &__p);
  sub_20FDDA17C((uint64_t)(a1 + 2), (uint64_t)v20);
  sub_20FE0AAB8(a2, &v17, (uint64_t)v20);
  sub_20EB0580C((uint64_t)v20);
  v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v15 && v14 < 0)
    operator delete((void *)__p);
  sub_20F340728(v16);
  if (v6 != v7 && v3 < 0)
    operator delete(v8);
}

void sub_20FDDB8BC(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  va_list va;

  va_start(va, a9);
  if (a9 && a8 < 0)
    operator delete(__p);
  sub_20F340728((uint64_t *)va);
  if (v10 != v11 && v12 < 0)
    operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_20FDDB928(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20FDDB714((uint64_t *)(a1 - 8), a2);
}

uint64_t sub_20FDDB930(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C160, (const struct __class_type_info *)&unk_24CA0A240, 8);
  if (result)
  {
    v4 = result;
    result = sub_20FE0C380(a1 + 192, result + 192);
    if ((_DWORD)result)
    {
      v6[0] = a1 + 24;
      v6[1] = a1 + 40;
      v6[2] = a1 + 72;
      v6[3] = a1 + 96;
      v6[4] = a1 + 128;
      v6[5] = a1 + 160;
      v5[0] = v4 + 24;
      v5[1] = v4 + 40;
      v5[2] = v4 + 72;
      v5[3] = v4 + 96;
      v5[4] = v4 + 128;
      v5[5] = v4 + 160;
      return sub_20FDD8604((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

uint64_t sub_20FDDB9E4(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C160, (const struct __class_type_info *)&unk_24CA0A240, 8);
  if (result)
  {
    v4 = result;
    result = sub_20FE0C380(a1 + 184, result + 192);
    if ((_DWORD)result)
    {
      v6[0] = a1 + 16;
      v6[1] = a1 + 32;
      v6[2] = a1 + 64;
      v6[3] = a1 + 88;
      v6[4] = a1 + 120;
      v6[5] = a1 + 152;
      v5[0] = v4 + 24;
      v5[1] = v4 + 40;
      v5[2] = v4 + 72;
      v5[3] = v4 + 96;
      v5[4] = v4 + 128;
      v5[5] = v4 + 160;
      return sub_20FDD8604((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

void sub_20FDDBA98(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20FDDB424(a2, a1, &v3);
}

void sub_20FDDBAC8(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20FDDB424(a2, a1 - 8, &v3);
}

void sub_20FDDBAF8(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20FDDB58C(a2, a1, &v3);
}

void sub_20FDDBB28(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20FDDB58C(a2, a1 - 8, &v3);
}

uint64_t sub_20FDDBB58(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  void *v13;
  size_t v14;
  char v15;
  __int128 v16;
  void *v17;
  size_t v18;
  char v19;
  __int128 v20;
  void *v21;
  size_t v22;
  char v23;
  __int128 v24;
  void *v25;
  size_t v26;
  char v27;
  __int128 v28;
  void *v29;
  size_t v30;
  char v31;
  __int128 v32;
  void *v33;
  size_t v34;

  v4 = a1 + 24;
  *(_OWORD *)(a1 + 48) = 0u;
  v5 = a1 + 48;
  v6 = a1 + 72;
  *(_OWORD *)(a1 + 96) = 0u;
  v7 = a1 + 96;
  v8 = a1 + 120;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 4);
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 47) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 152), (void *)a2[3], a2[4]);
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 3);
      *(_QWORD *)(a1 + 168) = a2[5];
      *(_OWORD *)(a1 + 152) = v9;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 175) = 0;
    *(_BYTE *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)a2;
  v10 = *((_OWORD *)a2 + 13);
  *(_QWORD *)(a1 + 208) = a2[28];
  *(_OWORD *)(a1 + 192) = v10;
  if (*((_BYTE *)a2 + 200))
  {
    if (a2 + 7 != (_QWORD *)a1)
    {
      v11 = *((_BYTE *)a2 + 79);
      if (*(char *)(a1 + 23) < 0)
      {
        if (v11 >= 0)
          v13 = a2 + 7;
        else
          v13 = (void *)a2[7];
        if (v11 >= 0)
          v14 = *((unsigned __int8 *)a2 + 79);
        else
          v14 = a2[8];
        sub_20E867CBC((void **)a1, v13, v14);
      }
      else if ((*((_BYTE *)a2 + 79) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)a1, (void *)a2[7], a2[8]);
      }
      else
      {
        v12 = *(_OWORD *)(a2 + 7);
        *(_QWORD *)(a1 + 16) = a2[9];
        *(_OWORD *)a1 = v12;
      }
    }
    if ((_QWORD *)v4 != a2 + 10)
    {
      v15 = *((_BYTE *)a2 + 103);
      if (*(char *)(a1 + 47) < 0)
      {
        if (v15 >= 0)
          v17 = a2 + 10;
        else
          v17 = (void *)a2[10];
        if (v15 >= 0)
          v18 = *((unsigned __int8 *)a2 + 103);
        else
          v18 = a2[11];
        sub_20E867CBC((void **)v4, v17, v18);
      }
      else if ((*((_BYTE *)a2 + 103) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v4, (void *)a2[10], a2[11]);
      }
      else
      {
        v16 = *((_OWORD *)a2 + 5);
        *(_QWORD *)(v4 + 16) = a2[12];
        *(_OWORD *)v4 = v16;
      }
    }
    if ((_QWORD *)v5 != a2 + 13)
    {
      v19 = *((_BYTE *)a2 + 127);
      if (*(char *)(a1 + 71) < 0)
      {
        if (v19 >= 0)
          v21 = a2 + 13;
        else
          v21 = (void *)a2[13];
        if (v19 >= 0)
          v22 = *((unsigned __int8 *)a2 + 127);
        else
          v22 = a2[14];
        sub_20E867CBC((void **)v5, v21, v22);
      }
      else if ((*((_BYTE *)a2 + 127) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v5, (void *)a2[13], a2[14]);
      }
      else
      {
        v20 = *(_OWORD *)(a2 + 13);
        *(_QWORD *)(v5 + 16) = a2[15];
        *(_OWORD *)v5 = v20;
      }
    }
    if ((_QWORD *)v6 != a2 + 16)
    {
      v23 = *((_BYTE *)a2 + 151);
      if (*(char *)(a1 + 95) < 0)
      {
        if (v23 >= 0)
          v25 = a2 + 16;
        else
          v25 = (void *)a2[16];
        if (v23 >= 0)
          v26 = *((unsigned __int8 *)a2 + 151);
        else
          v26 = a2[17];
        sub_20E867CBC((void **)v6, v25, v26);
      }
      else if ((*((_BYTE *)a2 + 151) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v6, (void *)a2[16], a2[17]);
      }
      else
      {
        v24 = *((_OWORD *)a2 + 8);
        *(_QWORD *)(v6 + 16) = a2[18];
        *(_OWORD *)v6 = v24;
      }
    }
    if ((_QWORD *)v7 != a2 + 19)
    {
      v27 = *((_BYTE *)a2 + 175);
      if (*(char *)(a1 + 119) < 0)
      {
        if (v27 >= 0)
          v29 = a2 + 19;
        else
          v29 = (void *)a2[19];
        if (v27 >= 0)
          v30 = *((unsigned __int8 *)a2 + 175);
        else
          v30 = a2[20];
        sub_20E867CBC((void **)v7, v29, v30);
      }
      else if ((*((_BYTE *)a2 + 175) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v7, (void *)a2[19], a2[20]);
      }
      else
      {
        v28 = *(_OWORD *)(a2 + 19);
        *(_QWORD *)(v7 + 16) = a2[21];
        *(_OWORD *)v7 = v28;
      }
    }
    if ((_QWORD *)v8 != a2 + 22)
    {
      v31 = *((_BYTE *)a2 + 199);
      if (*(char *)(a1 + 143) < 0)
      {
        if (v31 >= 0)
          v33 = a2 + 22;
        else
          v33 = (void *)a2[22];
        if (v31 >= 0)
          v34 = *((unsigned __int8 *)a2 + 199);
        else
          v34 = a2[23];
        sub_20E867CBC((void **)v8, v33, v34);
      }
      else if ((*((_BYTE *)a2 + 199) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v8, (void *)a2[22], a2[23]);
      }
      else
      {
        v32 = *((_OWORD *)a2 + 11);
        *(_QWORD *)(v8 + 16) = a2[24];
        *(_OWORD *)v8 = v32;
      }
    }
  }
  return a1;
}

void sub_20FDDBE58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20FDDBF0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  void *v11;
  __int128 v12;
  int v13;
  int v14;
  void *v15[3];
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *__p[2];
  void *v27;
  __int128 v28;
  uint64_t v29;
  void *v30[2];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    if (*(_QWORD *)(a1 + 56))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 71))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(_QWORD *)(a1 + 80))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 95))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 119) < 0)
    v4 = *(_QWORD *)(a1 + 104);
  else
    v4 = *(unsigned __int8 *)(a1 + 119);
  if (v4)
  {
LABEL_21:
    v5 = 1;
    v6 = *(char *)(a1 + 175);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_22;
LABEL_28:
    v7 = *(_QWORD *)(a1 + 160);
    LOBYTE(__p[0]) = 0;
    v38 = 0;
    if (!v5)
      goto LABEL_55;
LABEL_29:
    sub_20E9E58A4((char *)v15, (__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a1 + 96), (__int128 *)(a1 + 120));
    if (!v38)
    {
      *(_OWORD *)__p = *(_OWORD *)v15;
      v11 = v15[2];
      memset(v15, 0, sizeof(v15));
      v12 = *(_OWORD *)v16;
      v16[0] = 0;
      v28 = v12;
      v27 = v11;
      v29 = v17;
      v16[1] = 0;
      v17 = 0;
      *(_OWORD *)v30 = *(_OWORD *)v18;
      v18[0] = 0;
      v18[1] = 0;
      v31 = v19;
      v33 = v21;
      v32 = *(_OWORD *)v20;
      v19 = 0;
      v20[0] = 0;
      v20[1] = 0;
      v21 = 0;
      *(_OWORD *)v34 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v23;
      v37 = v25;
      v36 = v24;
      v23 = 0;
      v24 = 0uLL;
      v25 = 0;
      v38 = 1;
      goto LABEL_52;
    }
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)v15;
    v27 = v15[2];
    HIBYTE(v15[2]) = 0;
    LOBYTE(v15[0]) = 0;
    if (SHIBYTE(v29) < 0)
      operator delete((void *)v28);
    v28 = *(_OWORD *)v16;
    v29 = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16[0]) = 0;
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
    *(_OWORD *)v30 = *(_OWORD *)v18;
    v31 = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18[0]) = 0;
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
    v32 = *(_OWORD *)v20;
    v33 = v21;
    HIBYTE(v21) = 0;
    LOBYTE(v20[0]) = 0;
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
    *(_OWORD *)v34 = *(_OWORD *)v22;
    v35 = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22[0]) = 0;
    if ((SHIBYTE(v37) & 0x80000000) == 0)
    {
      v36 = v24;
      v37 = v25;
      HIBYTE(v25) = 0;
      LOBYTE(v24) = 0;
      if (SHIBYTE(v21) < 0)
        goto LABEL_42;
LABEL_52:
      if (SHIBYTE(v19) < 0)
      {
LABEL_43:
        operator delete(v18[0]);
        if (SHIBYTE(v17) < 0)
          goto LABEL_44;
        goto LABEL_54;
      }
LABEL_53:
      if (SHIBYTE(v17) < 0)
      {
LABEL_44:
        operator delete(v16[0]);
        if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_45;
      }
LABEL_54:
      if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
        goto LABEL_55;
LABEL_45:
      operator delete(v15[0]);
      v9 = *(_DWORD *)(a1 + 144);
      LODWORD(v15[0]) = v9;
      if (v7)
        goto LABEL_56;
      goto LABEL_46;
    }
    operator delete((void *)v36);
    v36 = v24;
    v37 = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(v22[0]);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
LABEL_42:
    operator delete(v20[0]);
    if (SHIBYTE(v19) < 0)
      goto LABEL_43;
    goto LABEL_53;
  }
  if (*(char *)(a1 + 143) < 0)
    v8 = *(_QWORD *)(a1 + 128);
  else
    v8 = *(unsigned __int8 *)(a1 + 143);
  v5 = v8 != 0;
  v6 = *(char *)(a1 + 175);
  if (v6 < 0)
    goto LABEL_28;
LABEL_22:
  v7 = v6;
  LOBYTE(__p[0]) = 0;
  v38 = 0;
  if (v5)
    goto LABEL_29;
LABEL_55:
  v9 = *(_DWORD *)(a1 + 144);
  LODWORD(v15[0]) = v9;
  if (v7)
  {
LABEL_56:
    if (*(char *)(a1 + 175) < 0)
    {
      sub_20E860C04(&v15[1], *(void **)(a1 + 152), *(_QWORD *)(a1 + 160));
      v9 = (int)v15[0];
    }
    else
    {
      *(_OWORD *)&v15[1] = *(_OWORD *)(a1 + 152);
      v16[0] = *(void **)(a1 + 168);
    }
    LOBYTE(v16[1]) = 1;
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 176);
    *(_DWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v15[1];
    *(void **)(a2 + 40) = v16[0];
    v15[1] = 0;
    v15[2] = 0;
    v16[0] = 0;
    *(_BYTE *)(a2 + 48) = 1;
    *(_BYTE *)(a2 + 56) = 0;
    v10 = (char *)(a2 + 56);
    *(_BYTE *)(a2 + 200) = 0;
    if (v38)
      goto LABEL_60;
LABEL_47:
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 192);
    *(_QWORD *)(a2 + 224) = *(_QWORD *)(a1 + 208);
    if (!v38)
      return;
    goto LABEL_64;
  }
LABEL_46:
  LOBYTE(v15[1]) = 0;
  LOBYTE(v16[1]) = 0;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 176);
  *(_DWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  v10 = (char *)(a2 + 56);
  *(_BYTE *)(a2 + 200) = 0;
  if (!v38)
    goto LABEL_47;
LABEL_60:
  sub_20FCF4B4C(v10, (__int128 *)__p);
  *(_BYTE *)(a2 + 200) = 1;
  v13 = LOBYTE(v16[1]);
  v14 = SHIBYTE(v16[0]);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 224) = *(_QWORD *)(a1 + 208);
  if (v13)
  {
    if (v14 < 0)
      operator delete(v15[1]);
  }
  if (!v38)
    return;
LABEL_64:
  if (SHIBYTE(v37) < 0)
  {
    operator delete((void *)v36);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v33) & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v34[0]);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_68;
LABEL_74:
    operator delete(v30[0]);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_69:
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        return;
LABEL_76:
      operator delete(__p[0]);
      return;
    }
    goto LABEL_75;
  }
LABEL_73:
  operator delete((void *)v32);
  if (SHIBYTE(v31) < 0)
    goto LABEL_74;
LABEL_68:
  if ((SHIBYTE(v29) & 0x80000000) == 0)
    goto LABEL_69;
LABEL_75:
  operator delete((void *)v28);
  if (SHIBYTE(v27) < 0)
    goto LABEL_76;
}

void sub_20FDDC460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20FCF4D74((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20FDDC474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20FCF4D74((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20FDDC488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  void **v32;

  sub_20FCF4D74(v31);
  if (*(_BYTE *)(v30 + 48) && *(char *)(v30 + 47) < 0)
    operator delete(*v32);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  sub_20FCF4D74((uint64_t)&a30);
  _Unwind_Resume(a1);
}

BOOL sub_20FDDC4D4(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v5;
  _QWORD v7[9];
  uint64_t v8;
  _QWORD v9[9];
  uint64_t *v10;
  _BYTE v11[33];
  uint64_t v12;
  int v13;

  v9[0] = a1;
  v9[1] = a1 + 24;
  v9[2] = a1 + 48;
  v9[3] = a1 + 72;
  v9[4] = a1 + 96;
  v9[5] = a1 + 120;
  v9[6] = a1 + 144;
  v9[7] = a1 + 152;
  v9[8] = a1 + 176;
  v10 = (uint64_t *)(a1 + 192);
  v7[0] = a2;
  v7[1] = a2 + 24;
  v7[2] = a2 + 48;
  v7[3] = a2 + 72;
  v7[4] = a2 + 96;
  v7[5] = a2 + 120;
  v7[6] = a2 + 144;
  v7[7] = a2 + 152;
  v7[8] = a2 + 176;
  v8 = a2 + 192;
  result = sub_20FCF4E34((uint64_t)v11, (uint64_t)v9, (uint64_t)v7);
  if (result)
  {
    v3 = *((unsigned int *)v10 + 2);
    v12 = *v10;
    v13 = v3;
    if (v12 == *(_QWORD *)v8 && v3 == *(_DWORD *)(v8 + 8))
    {
      v5 = *((unsigned int *)v10 + 5);
      v12 = *(uint64_t *)((char *)v10 + 12);
      v13 = v5;
      return v12 == *(_QWORD *)(v8 + 12) && v5 == *(_DWORD *)(v8 + 20);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20FDDC5D0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24CA08F38;
  *(_QWORD *)(a1 + 8) = &unk_24CA08F98;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDDC648(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24CA08F38;
  *(_QWORD *)a1 = &unk_24CA08F98;
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDDC6C0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24CA08F38;
  *(_QWORD *)(a1 + 8) = &unk_24CA08F98;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_20FDDC74C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA08F38;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA08F98;
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v4])(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_20FDDC7E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09380;
  *(_QWORD *)(a1 + 8) = &unk_24CA093E0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDDC890(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA09380;
  *(_QWORD *)a1 = &unk_24CA093E0;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDDC940(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09380;
  *(_QWORD *)(a1 + 8) = &unk_24CA093E0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40F569C881);
}

uint64_t sub_20FDDCA04(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA09380;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA093E0;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40F569C881);
}

uint64_t sub_20FDDCAD8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09628;
  *(_QWORD *)(a1 + 8) = &unk_24CA09688;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDDCB88(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA09628;
  *(_QWORD *)a1 = &unk_24CA09688;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDDCC38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09628;
  *(_QWORD *)(a1 + 8) = &unk_24CA09688;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40F569C881);
}

uint64_t sub_20FDDCCFC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA09628;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA09688;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40F569C881);
}

uint64_t sub_20FDDCDD0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09800;
  *(_QWORD *)(a1 + 8) = &unk_24CA09860;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDDCE80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA09800;
  *(_QWORD *)a1 = &unk_24CA09860;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDDCF30(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09800;
  *(_QWORD *)(a1 + 8) = &unk_24CA09860;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40F569C881);
}

uint64_t sub_20FDDCFF4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA09800;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA09860;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40F569C881);
}

uint64_t sub_20FDDD0C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0AB08;
  *(_QWORD *)(a1 + 8) = &unk_24CA0AB68;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDDD178(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA0AB08;
  *(_QWORD *)a1 = &unk_24CA0AB68;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDDD228(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0AB08;
  *(_QWORD *)(a1 + 8) = &unk_24CA0AB68;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40F569C881);
}

uint64_t sub_20FDDD2EC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA0AB08;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA0AB68;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40F569C881);
}

uint64_t sub_20FDDD3C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0AD78;
  *(_QWORD *)(a1 + 8) = &unk_24CA0ADD8;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDDD470(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA0AD78;
  *(_QWORD *)a1 = &unk_24CA0ADD8;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDDD520(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0AD78;
  *(_QWORD *)(a1 + 8) = &unk_24CA0ADD8;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40F569C881);
}

uint64_t sub_20FDDD5E4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA0AD78;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA0ADD8;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40F569C881);
}

uint64_t sub_20FDDD6B8(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24CA09AA8;
  *(_QWORD *)(a1 + 8) = &unk_24CA09B08;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

_QWORD *sub_20FDDD744(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v4;

  v1 = result;
  *(result - 1) = off_24CA09AA8;
  *result = &unk_24CA09B08;
  v2 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))result[25];
  if (v2)
    result = (_QWORD *)v2(0, result + 25, 0, 0, 0);
  v3 = *((unsigned int *)v1 + 46);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))off_24CA08120[v3])(&v4, v1 + 1);
  *((_DWORD *)v1 + 46) = -1;
  return result;
}

uint64_t sub_20FDDD7D0(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24CA09AA8;
  *(_QWORD *)(a1 + 8) = &unk_24CA09B08;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40294CF2FDLL);
}

uint64_t sub_20FDDD870(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA09AA8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA09B08;
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 200);
  if (v3)
    v3(0, a1 + 200, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v4])(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40294CF2FDLL);
}

uint64_t sub_20FDDD918(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09FD0;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A030;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDDD9C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA09FD0;
  *(_QWORD *)a1 = &unk_24CA0A030;
  v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDDDA78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09FD0;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A030;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C407D254C52);
}

uint64_t sub_20FDDDB3C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA09FD0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA0A030;
  v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C407D254C52);
}

uint64_t sub_20FDDDC10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0A330;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A390;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDDDCC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA0A330;
  *(_QWORD *)a1 = &unk_24CA0A390;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDDDD70(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0A330;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A390;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10F3C40EF434651);
}

uint64_t sub_20FDDDE34(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA0A330;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA0A390;
  v3 = *(std::__shared_weak_count **)(a1 + 208);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10F3C40EF434651);
}

_BYTE *sub_20FDDDF08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *result;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 24);
    v4 = a2 + 32;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 24);
    v4 = a2 + 32;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)v4 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 48);
      goto LABEL_6;
    }
  }
  sub_20E860C04((_BYTE *)v4, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
LABEL_6:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  if (*(char *)(a1 + 87) < 0)
  {
    sub_20E860C04((_BYTE *)(a2 + 64), *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  }
  result = (_BYTE *)(a2 + 88);
  if (*(char *)(a1 + 111) < 0)
    return sub_20E860C04(result, *(void **)(a1 + 88), *(_QWORD *)(a1 + 96));
  *(_OWORD *)result = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  return result;
}

void sub_20FDDE010(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDDE084(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_24CA0A5D8;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A638;
  if (*(char *)(a1 + 311) < 0)
  {
    operator delete(*(void **)(a1 + 288));
    if ((*(char *)(a1 + 287) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 255) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 264));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 232));
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_5:
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_11:
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
LABEL_12:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDDE158(uint64_t a1)
{
  return sub_20FDDE084(a1 - 8);
}

void sub_20FDDE160(uint64_t a1)
{
  sub_20FDDE084(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FDDE184(uint64_t a1)
{
  sub_20FDDE084(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDDE1AC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA0A898;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A8F8;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDDE254(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24CA0A898;
  *(_QWORD *)a1 = &unk_24CA0A8F8;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v3, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_20FDDE2FC(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)a1 = off_24CA0A898;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A8F8;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x212BC6398);
    }
  }
  ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v3, a1 + 16);
  goto LABEL_8;
}

void sub_20FDDE3B4(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24CA0A898;
  *(_QWORD *)a1 = &unk_24CA0A8F8;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x212BC6398);
    }
  }
  ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v3, a1 + 8);
  goto LABEL_8;
}

uint64_t sub_20FDDE474(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08508;
  *(_QWORD *)(a1 + 8) = &unk_24CA08568;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDDE4DC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24CA08508;
  *(_QWORD *)result = &unk_24CA08568;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24CA08120[v2])(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_20FDDE544(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08508;
  *(_QWORD *)(a1 + 8) = &unk_24CA08568;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40CF772451);
}

uint64_t sub_20FDDE5C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24CA08508;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA08568;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40CF772451);
}

uint64_t sub_20FDDE644(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA086A8;
  *(_QWORD *)(a1 + 8) = &unk_24CA08708;
  sub_20FD22A0C(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDDE6B0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24CA086A8;
  *(_QWORD *)a1 = &unk_24CA08708;
  result = sub_20FD22A0C(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24CA08120[v3])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return result;
}

uint64_t sub_20FDDE71C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA086A8;
  *(_QWORD *)(a1 + 8) = &unk_24CA08708;
  sub_20FD22A0C(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40DC57CB27);
}

uint64_t sub_20FDDE79C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24CA086A8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA08708;
  sub_20FD22A0C(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40DC57CB27);
}

uint64_t sub_20FDDE824(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08918;
  *(_QWORD *)(a1 + 8) = &unk_24CA08978;
  sub_20E866BE0(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDDE894(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24CA08918;
  *(_QWORD *)a1 = &unk_24CA08978;
  sub_20E866BE0(a1 + 192, *(char **)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v3, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDDE904(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08918;
  *(_QWORD *)(a1 + 8) = &unk_24CA08978;
  sub_20E866BE0(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40546963AFLL);
}

uint64_t sub_20FDDE988(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24CA08918;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA08978;
  sub_20E866BE0(a1 + 192, *(char **)(a1 + 200));
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40546963AFLL);
}

uint64_t sub_20FDDEA14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24CA08AB8;
  *(_QWORD *)(a1 + 8) = &unk_24CA08B18;
  if (*(_BYTE *)(a1 + 248) && *(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  v2 = *(_QWORD *)(a1 + 200);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 208);
    v4 = *(void **)(a1 + 200);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 200);
    }
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v4);
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDDEAE8(uint64_t a1)
{
  return sub_20FDDEA14(a1 - 8);
}

void sub_20FDDEAF0(uint64_t a1)
{
  sub_20FDDEA14(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FDDEB14(uint64_t a1)
{
  sub_20FDDEA14(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDDEB3C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08CF8;
  *(_QWORD *)(a1 + 8) = &unk_24CA08D58;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDDEBA4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24CA08CF8;
  *(_QWORD *)result = &unk_24CA08D58;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24CA08120[v2])(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_20FDDEC0C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08CF8;
  *(_QWORD *)(a1 + 8) = &unk_24CA08D58;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40956CF698);
}

uint64_t sub_20FDDEC88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24CA08CF8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA08D58;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40956CF698);
}

uint64_t sub_20FDDED0C()
{
  return 2;
}

uint64_t sub_20FDDED14()
{
  return 1;
}

uint64_t sub_20FDDED1C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDDED28(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20FDDED34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  char *v10;
  _BYTE v12[208];
  uint64_t (**v13)();
  char v14;
  void *__p;
  void *v16;
  char *v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v12);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v12);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v12);
  }
  v13 = &off_24C9FACA8;
  v14 = *(_BYTE *)(a1 + 208);
  v16 = 0;
  v17 = 0;
  __p = 0;
  v7 = *(_BYTE **)(a1 + 216);
  v6 = *(_BYTE **)(a1 + 224);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_20FDFA718();
    v9 = (char *)operator new(v6 - v7);
    v10 = &v9[v8];
    __p = v9;
    v17 = &v9[v8];
    memcpy(v9, v7, v8);
    v16 = v10;
  }
  sub_20EB09F3C((uint64_t)v18, (uint64_t)v12);
  v13 = &off_24C9FAC28;
  sub_20FE0DFB8((uint64_t)&v13, a2);
  v13 = &off_24C9FACA8;
  sub_20EB0580C((uint64_t)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return sub_20EB0580C((uint64_t)v12);
}

void sub_20FDDEE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20F1EE638(&a35);
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDDEEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20FDDEED4(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24CA08E90 && sub_20FE88BBC(a1, (uint64_t)a2);
}

void sub_20FDDEEF4(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE88DE8(a2, a1);
}

void sub_20FDDEF04(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE89E44(a2, a1);
}

uint64_t sub_20FDDEF14()
{
  return 2;
}

uint64_t sub_20FDDEF1C()
{
  return 2;
}

uint64_t sub_20FDDEF24()
{
  return 1;
}

void sub_20FDDEF2C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE88DE8(a2, a1 - 8);
}

void sub_20FDDEF3C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE89E44(a2, a1 - 8);
}

uint64_t sub_20FDDEF4C()
{
  return 2;
}

uint64_t sub_20FDDEF54()
{
  return 1;
}

uint64_t sub_20FDDEF5C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDDEF68(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20FDDEF74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24CA09530;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20EB09F3C((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24CA094B0;
  sub_20FE18598((uint64_t)v15, a2);
  v15[0] = &off_24CA09530;
  sub_20EB0580C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20EB0580C((uint64_t)v14);
}

void sub_20FDDF0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20FE1874C(&a35);
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDDF0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20FDDF120(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24CA092D8 && sub_20FE8BDA4(a1, (uint64_t)a2);
}

void sub_20FDDF140(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE8BFFC(a2, a1);
}

void sub_20FDDF150(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE8D058(a2, a1);
}

void sub_20FDDF160(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE8BFFC(a2, a1 - 8);
}

void sub_20FDDF170(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE8D058(a2, a1 - 8);
}

uint64_t sub_20FDDF180()
{
  return 2;
}

uint64_t sub_20FDDF188()
{
  return 1;
}

uint64_t sub_20FDDF190(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDDF19C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20FDDF1A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24C9C4A40;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20EB09F3C((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24C9C49C0;
  sub_20FE29114((uint64_t)v15, a2);
  v15[0] = &off_24C9C4A40;
  sub_20EB0580C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20EB0580C((uint64_t)v14);
}

void sub_20FDDF2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20EB098F8(&a35);
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDDF304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20FDDF354(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24CA09580 && sub_20FE8EE50(a1, (uint64_t)a2);
}

void sub_20FDDF374(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE8F0A8(a2, a1);
}

void sub_20FDDF384(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE90104(a2, a1);
}

void sub_20FDDF394(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE8F0A8(a2, a1 - 8);
}

void sub_20FDDF3A4(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE90104(a2, a1 - 8);
}

uint64_t sub_20FDDF3B4()
{
  return 2;
}

uint64_t sub_20FDDF3BC()
{
  return 1;
}

uint64_t sub_20FDDF3C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDDF3D0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20FDDF3DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24CA099B0;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20EB09F3C((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24CA09930;
  sub_20FE3DA0C((uint64_t)v15, a2);
  v15[0] = &off_24CA099B0;
  sub_20EB0580C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20EB0580C((uint64_t)v14);
}

void sub_20FDDF51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20FE3DBC0(&a35);
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDDF538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20FDDF588(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24CA09758 && sub_20FE9204C(a1, (uint64_t)a2);
}

void sub_20FDDF5A8(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE922A4(a2, a1);
}

void sub_20FDDF5B8(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE93300(a2, a1);
}

void sub_20FDDF5C8(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE922A4(a2, a1 - 8);
}

void sub_20FDDF5D8(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE93300(a2, a1 - 8);
}

uint64_t sub_20FDDF5E8()
{
  return 1;
}

uint64_t sub_20FDDF5F0()
{
  return 1;
}

uint64_t sub_20FDDF5F8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDDF604(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20FDDF610@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24CA0AC80;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20EB09F3C((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24CA0AC00;
  sub_20FE95248((uint64_t)v15, a2);
  v15[0] = &off_24CA0AC80;
  sub_20EB0580C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20EB0580C((uint64_t)v14);
}

void sub_20FDDF750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20FE953FC(&a35);
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDDF76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20FDDF7BC(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24CA0AA60 && sub_20FE96DE8(a1, (uint64_t)a2);
}

void sub_20FDDF7DC(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE97040(a2, a1);
}

void sub_20FDDF7EC(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE9C9BC(a2, a1);
}

uint64_t sub_20FDDF7FC()
{
  return 1;
}

uint64_t sub_20FDDF804()
{
  return 1;
}

uint64_t sub_20FDDF80C()
{
  return 1;
}

void sub_20FDDF814(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE97040(a2, a1 - 8);
}

void sub_20FDDF824(uint64_t a1, uint64_t (***a2)())
{
  sub_20FE9C9BC(a2, a1 - 8);
}

uint64_t sub_20FDDF834()
{
  return 1;
}

uint64_t sub_20FDDF83C()
{
  return 1;
}

uint64_t sub_20FDDF844(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDDF850(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20FDDF85C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24CA0AEF0;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20EB09F3C((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24CA0AE70;
  sub_20FEA7C24((uint64_t)v15, a2);
  v15[0] = &off_24CA0AEF0;
  sub_20EB0580C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20EB0580C((uint64_t)v14);
}

void sub_20FDDF99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20FEA7DD8(&a35);
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDDF9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20FDDFA08(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24CA0ACD0 && sub_20FEA97C4(a1, (uint64_t)a2);
}

void sub_20FDDFA28(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEA9A1C(a2, a1);
}

void sub_20FDDFA38(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEAF398(a2, a1);
}

void sub_20FDDFA48(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEA9A1C(a2, a1 - 8);
}

void sub_20FDDFA58(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEAF398(a2, a1 - 8);
}

uint64_t sub_20FDDFA68()
{
  return 2;
}

uint64_t sub_20FDDFA70()
{
  return 1;
}

uint64_t sub_20FDDFA78(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDDFA84(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20FDDFA90(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  _BYTE v14[208];
  uint64_t (**v15)();
  uint64_t (**v16)();
  __int128 v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  sub_2100C9B90((int *)(a1 + 200), &v12);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v14);
  }
  v15 = &off_24CA09C58;
  v16 = &off_24CA17CC8;
  v17 = v13;
  v13 = 0uLL;
  sub_20EB09F3C((uint64_t)v18, (uint64_t)v14);
  v15 = &off_24CA09BD8;
  sub_20FE54758((uint64_t)&v15, a2);
  v15 = &off_24CA09C58;
  sub_20EB0580C((uint64_t)v18);
  v16 = &off_24CA17CC8;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_20EB0580C((uint64_t)v14);
  v12 = &off_24CA17CC8;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20FDDFC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_20FE5490C(&a39);
  sub_20EB0580C((uint64_t)&a13);
  sub_2100D08E0(&a10);
  _Unwind_Resume(a1);
}

void sub_20FDDFC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2100D08E0((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20FDDFC6C(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24CA09A00 && sub_20FEBAE40(a1, (uint64_t)a2);
}

void sub_20FDDFC8C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEBB058(a2, a1);
}

void sub_20FDDFC9C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEBBE5C(a2, a1);
}

void sub_20FDDFCAC(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEBB058(a2, a1 - 8);
}

void sub_20FDDFCBC(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEBBE5C(a2, a1 - 8);
}

uint64_t sub_20FDDFCCC()
{
  return 2;
}

uint64_t sub_20FDDFCD4()
{
  return 1;
}

uint64_t sub_20FDDFCDC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDDFCE8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20FDDFCF4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[208];
  _QWORD v14[2];
  std::__shared_weak_count *v15;
  _QWORD v16[28];

  v16[27] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 200);
  v5 = *(std::__shared_weak_count **)(a1 + 208);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a1 + 16;
  v9 = *(_DWORD *)(a1 + 192);
  if (v9 == 2)
  {
    sub_20FDD6BEC(v8, (uint64_t)v13);
  }
  else if (v9 == 1)
  {
    sub_20FE0E180(v8, (uint64_t)v13);
  }
  else
  {
    if (v9)
      sub_20E877AB8();
    sub_20FDDA17C(v8, (uint64_t)v13);
  }
  v14[0] = &off_24CA07C30;
  v14[1] = v4;
  v15 = v5;
  sub_20EB09F3C((uint64_t)v16, (uint64_t)v13);
  v14[0] = &off_24CA07BC8;
  sub_20FE72504((uint64_t)v14, a2);
  v14[0] = &off_24CA07C30;
  sub_20EB0580C((uint64_t)v16);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_20EB0580C((uint64_t)v13);
}

void sub_20FDDFE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  sub_20FDD5138(&a37);
  sub_20EB0580C((uint64_t)&a11);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDDFEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDDFEF8(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24CA09F28)
    return sub_20FEBDD68(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20FDDFF18(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEBDF80(a2, a1);
}

void sub_20FDDFF28(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEBEF1C(a2, a1);
}

void sub_20FDDFF38(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEBDF80(a2, a1 - 8);
}

void sub_20FDDFF48(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEBEF1C(a2, a1 - 8);
}

uint64_t sub_20FDDFF58()
{
  return 2;
}

uint64_t sub_20FDDFF60()
{
  return 1;
}

uint64_t sub_20FDDFF68(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDDFF74(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20FDDFF80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  __int128 v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 208);
  v6 = *(std::__shared_weak_count **)(a1 + 216);
  v15[0] = &off_24CA0A4E0;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v17 = *(_OWORD *)(a1 + 224);
  sub_20EB09F3C((uint64_t)v18, (uint64_t)v14);
  v15[0] = &off_24CA0A460;
  sub_20FE84478((uint64_t)v15, a2);
  v15[0] = &off_24CA0A4E0;
  sub_20EB0580C((uint64_t)v18);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20EB0580C((uint64_t)v14);
}

void sub_20FDE00C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20FE84634(&a35);
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE00E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20FDE0134(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24CA0A288 && sub_20FEC0E28(a1, (uint64_t)a2);
}

void sub_20FDE0154(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEC10A0(a2, a1);
}

void sub_20FDE0164(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEC203C(a2, a1);
}

void sub_20FDE0174(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEC10A0(a2, a1 - 8);
}

void sub_20FDE0184(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEC203C(a2, a1 - 8);
}

uint64_t sub_20FDE0194()
{
  return 1;
}

uint64_t sub_20FDE019C()
{
  return 1;
}

uint64_t sub_20FDE01A4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDE01B0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20FDE01BC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8[2];
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  _BYTE v16[208];
  _QWORD v17[3];
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *__p;
  char v24;
  _QWORD v25[28];

  v25[27] = *MEMORY[0x24BDAC8D0];
  sub_20FDDDF08(a1 + 200, (uint64_t)v8);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v16);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v16);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v16);
  }
  sub_20FEC5F5C((uint64_t)v17, (__int128 *)v8, (uint64_t)v16);
  v6 = operator new();
  sub_20FEC3FE0(v6, (uint64_t)v17);
  *a2 = &off_24CA0C0E8;
  a2[1] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24CA0C1E0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v17[0] = off_24CA0A7A0;
  sub_20EB0580C((uint64_t)v25);
  if (v24 < 0)
  {
    operator delete(__p);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v20 & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v21);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v18 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v19);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_11:
    sub_20EB0580C((uint64_t)v16);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)v17[1]);
  sub_20EB0580C((uint64_t)v16);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v14);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v12);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v9 & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(v8[0]);
    return;
  }
LABEL_22:
  operator delete(v10);
  if (v9 < 0)
    goto LABEL_23;
}

void sub_20FDE03CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t (**a49)())
{
  uint64_t v49;

  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  a49 = off_24CA0A720;
  sub_20FEC46F4((uint64_t)&a49);
  sub_20EB0580C((uint64_t)&a23);
  sub_20FDE3B08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE0440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FDE3B08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDE0454(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == &off_24CA0A530)
    return sub_20FEC609C(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20FDE0474(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEC65F0(a2, a1);
}

double sub_20FDE0484(uint64_t a1, uint64_t (***a2)())
{
  return sub_20FEC8150(a2, a1);
}

void sub_20FDE0494(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEC65F0(a2, a1 - 8);
}

double sub_20FDE04A4(uint64_t a1, uint64_t (***a2)())
{
  return sub_20FEC8150(a2, a1 - 8);
}

uint64_t sub_20FDE04B4()
{
  return 1;
}

uint64_t sub_20FDE04BC()
{
  return 1;
}

uint64_t sub_20FDE04C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDE04D0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20FDE04DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10[3];
  char v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  _BYTE v16[208];
  uint64_t (**v17)();
  uint64_t v18;
  void *v19;
  char v20;
  char v21;
  void *__p;
  char v23;
  char v24;
  _QWORD v25[28];

  v25[27] = *MEMORY[0x24BDAC8D0];
  sub_20FF3D394(a1 + 200);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v16);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v16);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v16);
  }
  sub_20FECC230((uint64_t)&v17, v10, (uint64_t)v16);
  v6 = (_QWORD *)operator new();
  sub_20FECA930((uint64_t)v6, (uint64_t)&v17);
  *v6 = off_24CA0A990;
  *a2 = &off_24CA0C0E8;
  a2[1] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24CA0C1E0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v17 = off_24CA0AA10;
  sub_20EB0580C((uint64_t)v25);
  if (v24 && v23 < 0)
    operator delete(__p);
  if (v21 && v20 < 0)
    operator delete(v19);
  v8 = v18;
  v18 = 0;
  if (v8)
    MEMORY[0x212BC6398](v8, 0x1000C4072FAA15ELL);
  sub_20EB0580C((uint64_t)v16);
  if (v15 && v14 < 0)
    operator delete(v13);
  if (v12 && v11 < 0)
    operator delete((void *)v10[1]);
  result = v10[0];
  v10[0] = 0;
  if (result)
    return MEMORY[0x212BC6398](result, 0x1000C4072FAA15ELL);
  return result;
}

void sub_20FDE06C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  sub_20FECA828((uint64_t)&a45);
  sub_20EB0580C((uint64_t)&a19);
  sub_20FECA8B4(&a10);
  _Unwind_Resume(a1);
}

void sub_20FDE0728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FECA8B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDE073C(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24CA0A7F0)
    return sub_20FECC348(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20FDE075C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FECC560(a2, a1);
}

void sub_20FDE076C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FED1014(a2, a1);
}

void sub_20FDE077C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FECC560(a2, a1 - 8);
}

void sub_20FDE078C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FED1014(a2, a1 - 8);
}

uint64_t sub_20FDE079C()
{
  return 1;
}

uint64_t sub_20FDE07A4()
{
  return 1;
}

uint64_t sub_20FDE07AC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDE07B8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20FDE07C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  _BYTE v15[208];
  _QWORD v16[3];
  char v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  _QWORD v22[30];

  v22[27] = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned __int8 *)(a1 + 200);
  if (v8 == 2)
  {
    if (*(_DWORD *)(a1 + 248) != 1)
      goto LABEL_15;
    v10 = 0;
    LOBYTE(v9) = *(_BYTE *)(a1 + 208);
    v3 = *(_QWORD *)(a1 + 216);
    v2 = *(_BYTE *)(a1 + 224);
    v11 = 1;
    v5 = 1;
    v6 = *(_QWORD *)(a1 + 225);
    v12 = a1 + 16;
    v13 = *(_DWORD *)(a1 + 192);
    if (v13 != 2)
      goto LABEL_10;
  }
  else
  {
    if (v8 == 1)
    {
      if (*(_DWORD *)(a1 + 248))
        goto LABEL_15;
      v5 = 0;
      v9 = *(_QWORD *)(a1 + 208);
      v3 = *(_QWORD *)(a1 + 216);
      v2 = *(_BYTE *)(a1 + 224);
      v6 = (unint64_t)*(unsigned __int8 *)(a1 + 232) << 56;
      v4 = *(_QWORD *)(a1 + 233);
      v10 = v9 & 0xFFFFFFFFFFFFFF00;
      v11 = 1;
      v12 = a1 + 16;
      v13 = *(_DWORD *)(a1 + 192);
      if (v13 == 2)
        goto LABEL_8;
      goto LABEL_10;
    }
    LOBYTE(v9) = 0;
    v11 = 0;
    v10 = 0;
    v12 = a1 + 16;
    v13 = *(_DWORD *)(a1 + 192);
    if (v13 != 2)
    {
LABEL_10:
      if (v13 == 1)
      {
        sub_20FE0E180(v12, (uint64_t)v15);
        goto LABEL_14;
      }
      if (!v13)
      {
        sub_20FDDA17C(v12, (uint64_t)v15);
        goto LABEL_14;
      }
LABEL_15:
      sub_20E877AB8();
    }
  }
LABEL_8:
  sub_20FDD6BEC(v12, (uint64_t)v15);
LABEL_14:
  v16[0] = &off_24CA079B8;
  v16[1] = v10 | v9;
  v16[2] = v3;
  v17 = v2;
  v18 = v6;
  v19 = v4;
  v20 = v5;
  v21 = v11;
  sub_20EB09F3C((uint64_t)v22, (uint64_t)v15);
  v16[0] = &off_24CA07938;
  sub_20FED5B80((uint64_t)v16, a2);
  v16[0] = &off_24CA079B8;
  sub_20EB0580C((uint64_t)v22);
  return sub_20EB0580C((uint64_t)v15);
}

void sub_20FDE0984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20EB0580C(v9);
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE09A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EB0580C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDE09BC(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24CA08460)
    return sub_20FED5D48(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20FDE09DC(uint64_t a1, uint64_t (***a2)())
{
  sub_20FED60D8(a2, a1);
}

void sub_20FDE09EC(uint64_t a1, uint64_t (***a2)())
{
  sub_20FED99A4(a2, a1);
}

void sub_20FDE09FC(uint64_t a1, uint64_t (***a2)())
{
  sub_20FED60D8(a2, a1 - 8);
}

void sub_20FDE0A0C(uint64_t a1, uint64_t (***a2)())
{
  sub_20FED99A4(a2, a1 - 8);
}

uint64_t sub_20FDE0A1C()
{
  return 1;
}

uint64_t sub_20FDE0A24()
{
  return 1;
}

uint64_t sub_20FDE0A2C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDE0A38(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20FDE0A44(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  _BYTE v9[216];
  __int128 v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  int v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[28];

  v51[27] = *MEMORY[0x24BDAC8D0];
  sub_20FDDBF0C(a1 + 200, (uint64_t)&v10);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v9);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v9);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v9);
  }
  v30 = off_24CA08820;
  v31 = v10;
  v32 = v11;
  LOBYTE(__p) = 0;
  v35 = 0;
  if (v14)
  {
    __p = v12;
    v34 = v13;
    v13 = 0;
    v12 = 0uLL;
    v35 = 1;
  }
  LOBYTE(v36) = 0;
  v48 = 0;
  if (v27)
  {
    v37 = v16;
    v36 = v15;
    v15 = 0uLL;
    v6 = v17;
    v16 = 0;
    v17 = 0uLL;
    v38 = v6;
    v39 = v18;
    v18 = 0;
    *(_OWORD *)v40 = v19;
    v19 = 0uLL;
    v41 = v20;
    v43 = v22;
    v42 = v21;
    v20 = 0;
    v21 = 0uLL;
    v22 = 0;
    *(_OWORD *)v44 = v23;
    v23 = 0uLL;
    v45 = v24;
    v47 = v26;
    v46 = v25;
    v24 = 0;
    v25 = 0uLL;
    v26 = 0;
    v48 = 1;
  }
  v49 = v28;
  v50 = v29;
  sub_20EB09F3C((uint64_t)v51, (uint64_t)v9);
  v30 = off_24CA087A0;
  v7 = (_QWORD *)operator new();
  sub_20FEDE240((uint64_t)v7, (uint64_t)&v30);
  *v7 = off_24CA087A0;
  *a2 = &off_24CA0C0E8;
  a2[1] = v7;
  v8 = (_QWORD *)operator new();
  *v8 = &off_24CA0C1E0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  a2[2] = v8;
  v30 = off_24CA08820;
  sub_20EB0580C((uint64_t)v51);
  if (!v48)
    goto LABEL_18;
  if (SHIBYTE(v47) < 0)
  {
    operator delete((void *)v46);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v43) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v44[0]);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_35:
    operator delete(v40[0]);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v37) & 0x80000000) == 0)
        goto LABEL_18;
LABEL_37:
      operator delete((void *)v36);
      if (!v35)
        goto LABEL_21;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_34:
  operator delete((void *)v42);
  if (SHIBYTE(v41) < 0)
    goto LABEL_35;
LABEL_16:
  if ((SHIBYTE(v39) & 0x80000000) == 0)
    goto LABEL_17;
LABEL_36:
  operator delete((void *)v38);
  if (SHIBYTE(v37) < 0)
    goto LABEL_37;
LABEL_18:
  if (!v35)
    goto LABEL_21;
LABEL_19:
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
LABEL_21:
  sub_20EB0580C((uint64_t)v9);
  if (!v27)
    goto LABEL_28;
  if (SHIBYTE(v26) < 0)
  {
    operator delete((void *)v25);
    if ((SHIBYTE(v24) & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_41;
    }
  }
  else if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete((void *)v23);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_41:
  operator delete((void *)v21);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_43;
  }
LABEL_42:
  operator delete((void *)v19);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      goto LABEL_28;
LABEL_44:
    operator delete((void *)v15);
    if (!v14)
      return;
    goto LABEL_29;
  }
LABEL_43:
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_44;
LABEL_28:
  if (!v14)
    return;
LABEL_29:
  if (SHIBYTE(v13) < 0)
    operator delete((void *)v12);
}

void sub_20FDE0E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;

  (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  sub_20FEDE1E0((uint64_t)&a65);
  sub_20EB0580C((uint64_t)&a9);
  sub_20FD0F35C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20FDE0E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_20FD0F35C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

BOOL sub_20FDE0E88(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24CA08600 && sub_20FEDFA90(a1, (uint64_t)a2);
}

void sub_20FDE0EA8(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEDFCA8(a2, a1);
}

void sub_20FDE0EB8(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEE3E30(a2, a1);
}

void sub_20FDE0EC8(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEDFCA8(a2, a1 - 8);
}

void sub_20FDE0ED8(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEE3E30(a2, a1 - 8);
}

uint64_t sub_20FDE0EE8()
{
  return 1;
}

uint64_t sub_20FDE0EF0()
{
  return 1;
}

uint64_t sub_20FDE0EF8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDE0F04(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20FDE0F10(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void **v4;
  const void ***v5;
  uint64_t v6;
  int v7;
  const void **v8;
  const void ***v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  char **v13;
  char *v14;
  char *v15;
  _BYTE v16[208];
  uint64_t (**v17)();
  char **v18;
  char *v19[2];
  _QWORD v20[28];

  v20[27] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v15 = 0;
  v13 = &v14;
  v4 = *(const void ***)(a1 + 200);
  v5 = (const void ***)(a1 + 208);
  if (v4 != (const void **)(a1 + 208))
  {
    do
    {
      sub_20FEE8CFC((uint64_t **)&v13, (uint64_t *)&v14, v4 + 4, (uint64_t)(v4 + 4));
      v8 = (const void **)v4[1];
      if (v8)
      {
        do
        {
          v9 = (const void ***)v8;
          v8 = (const void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (const void ***)v4[2];
          v10 = *v9 == v4;
          v4 = (const void **)v9;
        }
        while (!v10);
      }
      v4 = (const void **)v9;
    }
    while (v9 != v5);
  }
  v6 = a1 + 16;
  v7 = *(_DWORD *)(a1 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v16);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v16);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v16);
  }
  v17 = &off_24CA07A88;
  v18 = v13;
  v19[0] = v14;
  v19[1] = v15;
  if (v15)
  {
    *((_QWORD *)v14 + 2) = v19;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v18 = v19;
  }
  sub_20EB09F3C((uint64_t)v20, (uint64_t)v16);
  v17 = &off_24CA07A08;
  v11 = operator new();
  sub_20FEE8BA8(v11, (uint64_t)&v17);
  *a2 = &off_24CA0C0E8;
  a2[1] = v11;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24CA0C1E0;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v11;
  a2[2] = v12;
  v17 = &off_24CA07A88;
  sub_20EB0580C((uint64_t)v20);
  sub_20E866BE0((uint64_t)&v18, v19[0]);
  sub_20EB0580C((uint64_t)v16);
  sub_20E866BE0((uint64_t)&v13, v14);
}

void sub_20FDE110C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_20FDD387C((uint64_t)&a39);
  sub_20EB0580C((uint64_t)&a13);
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FDE1180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20FDE1198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E866BE0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDE11B0(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24CA08870)
    return sub_20FEE8DF8(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20FDE11D0(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEE9028(a2, a1);
}

void sub_20FDE11E0(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEEB95C(a2, a1);
}

void sub_20FDE11F0(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEE9028(a2, a1 - 8);
}

void sub_20FDE1200(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEEB95C(a2, a1 - 8);
}

uint64_t sub_20FDE1210()
{
  return 1;
}

uint64_t sub_20FDE1218()
{
  return 1;
}

uint64_t sub_20FDE1220(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDE122C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20FDE1238(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;
  void *v14;
  void **v15;
  void *v16;
  char v17;
  char v18;
  _BYTE v19[208];
  uint64_t (**v20)();
  void *v21;
  void **v22;
  void *__p;
  char v24;
  char v25;
  _QWORD v26[28];

  v26[27] = *MEMORY[0x24BDAC8D0];
  sub_20FEEF010(a1 + 200, (uint64_t)&v14);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v19);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v19);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v19);
  }
  sub_20FEF129C((uint64_t)&v20, (uint64_t)&v14, (uint64_t)v19);
  v6 = (_QWORD *)operator new();
  sub_20FEEF16C((uint64_t)v6, (uint64_t)&v20);
  *v6 = off_24CA08BB0;
  *a2 = &off_24CA0C0E8;
  a2[1] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24CA0C1E0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v20 = off_24CA08C00;
  sub_20EB0580C((uint64_t)v26);
  if (v25 && v24 < 0)
    operator delete(__p);
  v8 = (void **)v21;
  if (v21)
  {
    v9 = v22;
    v10 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v9 - 9) < 0)
          operator delete(*(v9 - 4));
        v9 -= 4;
      }
      while (v9 != v8);
      v10 = v21;
    }
    v22 = v8;
    operator delete(v10);
  }
  sub_20EB0580C((uint64_t)v19);
  if (v18 && v17 < 0)
    operator delete(v16);
  v11 = (void **)v14;
  if (v14)
  {
    v12 = v15;
    v13 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      while (v12 != v11);
      v13 = v14;
    }
    v15 = v11;
    operator delete(v13);
  }
}

void sub_20FDE143C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t (**a43)())
{
  uint64_t v43;

  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  a43 = off_24CA08BB0;
  sub_20FEEF930((uint64_t)&a43);
  sub_20EB0580C((uint64_t)&a17);
  sub_20FDE4450((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20FDE14B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE4450((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDE14C4(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  if (*a2 == &off_24CA08A10)
    return sub_20FEF13B4(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20FDE14E4(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEF15EC(a2, a1);
}

void sub_20FDE14F4(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEF3EE0(a2, a1);
}

void sub_20FDE1504(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEF15EC(a2, a1 - 8);
}

void sub_20FDE1514(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEF3EE0(a2, a1 - 8);
}

uint64_t sub_20FDE1524()
{
  return 1;
}

uint64_t sub_20FDE152C()
{
  return 1;
}

uint64_t sub_20FDE1534(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20FDE1540(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20FDE154C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  char v11;
  _OWORD v12[13];
  __int128 v13;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  char v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 248))
  {
    v3 = *(_QWORD *)(a1 + 208);
    v10 = *(_QWORD *)(a1 + 216);
    v11 = *(_BYTE *)(a1 + 224);
    *(_QWORD *)((char *)v12 + 7) = *(_QWORD *)(a1 + 232);
    HIBYTE(v12[0]) = *(_BYTE *)(a1 + 240);
    v4 = v3 & 0xFFFFFFFFFFFFFF00;
    v13 = v12[0];
    v5 = v3;
    v6 = 1;
    v7 = a1 + 16;
    v8 = *(_DWORD *)(a1 + 192);
    if (v8 != 2)
      goto LABEL_3;
LABEL_7:
    sub_20FDD6BEC(v7, (uint64_t)v12);
    goto LABEL_9;
  }
  v5 = 0;
  v4 = 0;
  v6 = 0;
  v7 = a1 + 16;
  v8 = *(_DWORD *)(a1 + 192);
  if (v8 == 2)
    goto LABEL_7;
LABEL_3:
  if (v8 == 1)
  {
    sub_20FE0E180(v7, (uint64_t)v12);
  }
  else
  {
    if (v8)
      sub_20E877AB8();
    sub_20FDDA17C(v7, (uint64_t)v12);
  }
LABEL_9:
  v14[0] = &off_24CA08E40;
  v14[1] = v4 | v5;
  v14[2] = v10;
  v15 = v11;
  v16 = v13;
  v17 = v6;
  sub_20EB09F3C((uint64_t)v18, (uint64_t)v12);
  v14[0] = &off_24CA08DF0;
  sub_20FEF7718((uint64_t)v14, a2);
  v14[0] = &off_24CA08E40;
  sub_20EB0580C((uint64_t)v18);
  return sub_20EB0580C((uint64_t)v12);
}

void sub_20FDE16C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_20EB0580C(v3);
  sub_20EB0580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE16E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20EB0580C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20FDE16F8(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24CA08C50 && sub_20FEF924C(a1, (uint64_t)a2);
}

void sub_20FDE1718(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEF94FC(a2, a1);
}

void sub_20FDE1728(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEFB6D0(a2, a1);
}

void sub_20FDE1738(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEF94FC(a2, a1 - 8);
}

void sub_20FDE1748(uint64_t a1, uint64_t (***a2)())
{
  sub_20FEFB6D0(a2, a1 - 8);
}

uint64_t sub_20FDE1758()
{
  return 3;
}

uint64_t sub_20FDE1760()
{
  return 2;
}

uint64_t sub_20FDE1768()
{
  return 1;
}

uint64_t sub_20FDE1770(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 152);
      v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_16;
  }
  else if (!*(_BYTE *)(a1 + 104))
  {
    goto LABEL_16;
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
LABEL_16:
  if (!*(_BYTE *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20FDE1850(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20FDE18A8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t *sub_20FDE1900(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t *v35;

  v2 = a1[44];
  if (v2)
  {
    a1[45] = v2;
    v3 = (unint64_t)(a1[46] - v2) >> 2;
    v33 = v2;
    v34 = v3;
    v4 = *((unsigned int *)a1 + 95);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080C0[v4])(&v35, a1 + 47);
  }
  v5 = a1[36];
  if (v5)
  {
    a1[37] = v5;
    v6 = -1431655765 * ((unint64_t)(a1[38] - v5) >> 2);
    v33 = v5;
    v34 = v6;
    v7 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v7 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080D0[v7])(&v35, a1 + 39);
  }
  v8 = a1[32];
  if (v8)
  {
    a1[33] = v8;
    v9 = (unint64_t)(a1[34] - v8) >> 3;
    v33 = v8;
    v34 = v9;
    v10 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v10 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080E0[v10])(&v35, a1 + 35);
  }
  v11 = a1[28];
  if (v11)
  {
    a1[29] = v11;
    v12 = (unint64_t)(a1[30] - v11) >> 3;
    v33 = v11;
    v34 = v12;
    v13 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v13 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080F0[v13])(&v35, a1 + 31);
  }
  v14 = a1[24];
  if (v14)
  {
    a1[25] = v14;
    v15 = -1431655765 * ((unint64_t)(a1[26] - v14) >> 2);
    v33 = v14;
    v34 = v15;
    v16 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v16 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080D0[v16])(&v35, a1 + 27);
  }
  v17 = a1[20];
  if (v17)
  {
    a1[21] = v17;
    v18 = *((_DWORD *)a1 + 44) - v17;
    v33 = v17;
    v34 = v18;
    v19 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v19 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08100[v19])(&v35, a1 + 23);
  }
  v20 = a1[15];
  if (v20)
  {
    a1[16] = v20;
    v21 = *((_DWORD *)a1 + 34) - v20;
    v33 = v20;
    v34 = v21;
    v22 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v22 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08100[v22])(&v35, a1 + 18);
  }
  v23 = a1[10];
  if (v23)
  {
    a1[11] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[12] - v23) >> 2);
    v33 = v23;
    v34 = v24;
    v25 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v25 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08110[v25])(&v35, a1 + 13);
  }
  v26 = a1[5];
  if (v26)
  {
    a1[6] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[7] - v26) >> 2);
    v33 = v26;
    v34 = v27;
    v28 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v28 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08110[v28])(&v35, a1 + 8);
  }
  v29 = *a1;
  if (*a1)
  {
    a1[1] = v29;
    v30 = -1431655765 * ((unint64_t)(a1[2] - v29) >> 2);
    v33 = v29;
    v34 = v30;
    v31 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v31 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08110[v31])(&v35, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20FDE1CAC(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080D0[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20FDE1D38(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080E0[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20FDE1DB8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080F0[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20FDE1E38(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = *((_DWORD *)a1 + 4) - v2;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08100[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20FDE1EB4(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24CA08110[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20FDE1F40(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 2;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24CA080C0[v4])(&v8, a1 + 3);
  }
  return a1;
}

void sub_20FDE1FC0(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20FDE1FCC(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x212BC7130](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20FDE2040(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20FDE204C(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x212BC7130](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20FDE20BC(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20FDE20C8(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x212BC7130](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20FDE2138(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20FDE2144(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x212BC7130](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

uint64_t sub_20FDE21B8(uint64_t a1, uint64_t a2)
{
  return sub_20FDE1770(a2);
}

uint64_t sub_20FDE21C0(uint64_t a1, uint64_t a2)
{
  return sub_20FDE1770(a2);
}

uint64_t sub_20FDE21C8(uint64_t a1, uint64_t a2)
{
  return sub_20FDE1770(a2);
}

uint64_t sub_20FDE21D0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24CA08F38;
  *(_QWORD *)(a1 + 8) = &unk_24CA08F98;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE2248(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24CA08F38;
  *(_QWORD *)(a1 + 8) = &unk_24CA08F98;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40B4DE50DDLL);
}

void sub_20FDE22D4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24CA08F38;
  *(_QWORD *)a1 = &unk_24CA08F98;
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDE234C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA08F38;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA08F98;
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v4])(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_20FDE23E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09380;
  *(_QWORD *)(a1 + 8) = &unk_24CA093E0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE2490(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09380;
  *(_QWORD *)(a1 + 8) = &unk_24CA093E0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40F569C881);
}

void sub_20FDE2554(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA09380;
  *(_QWORD *)a1 = &unk_24CA093E0;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDE2604(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA09380;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA093E0;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40F569C881);
}

uint64_t sub_20FDE26D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09628;
  *(_QWORD *)(a1 + 8) = &unk_24CA09688;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE2788(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09628;
  *(_QWORD *)(a1 + 8) = &unk_24CA09688;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40F569C881);
}

void sub_20FDE284C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA09628;
  *(_QWORD *)a1 = &unk_24CA09688;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDE28FC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA09628;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA09688;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40F569C881);
}

uint64_t sub_20FDE29D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09800;
  *(_QWORD *)(a1 + 8) = &unk_24CA09860;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE2A80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09800;
  *(_QWORD *)(a1 + 8) = &unk_24CA09860;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40F569C881);
}

void sub_20FDE2B44(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA09800;
  *(_QWORD *)a1 = &unk_24CA09860;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDE2BF4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA09800;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA09860;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40F569C881);
}

uint64_t sub_20FDE2CC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0AB08;
  *(_QWORD *)(a1 + 8) = &unk_24CA0AB68;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE2D78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0AB08;
  *(_QWORD *)(a1 + 8) = &unk_24CA0AB68;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40F569C881);
}

void sub_20FDE2E3C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA0AB08;
  *(_QWORD *)a1 = &unk_24CA0AB68;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDE2EEC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA0AB08;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA0AB68;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40F569C881);
}

uint64_t sub_20FDE2FC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0AD78;
  *(_QWORD *)(a1 + 8) = &unk_24CA0ADD8;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE3070(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0AD78;
  *(_QWORD *)(a1 + 8) = &unk_24CA0ADD8;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40F569C881);
}

void sub_20FDE3134(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA0AD78;
  *(_QWORD *)a1 = &unk_24CA0ADD8;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDE31E4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA0AD78;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA0ADD8;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40F569C881);
}

uint64_t sub_20FDE32B8(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24CA09AA8;
  *(_QWORD *)(a1 + 8) = &unk_24CA09B08;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE3344(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24CA09AA8;
  *(_QWORD *)(a1 + 8) = &unk_24CA09B08;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40294CF2FDLL);
}

_QWORD *sub_20FDE33E4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v4;

  v1 = result;
  *(result - 1) = off_24CA09AA8;
  *result = &unk_24CA09B08;
  v2 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))result[25];
  if (v2)
    result = (_QWORD *)v2(0, result + 25, 0, 0, 0);
  v3 = *((unsigned int *)v1 + 46);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))off_24CA08120[v3])(&v4, v1 + 1);
  *((_DWORD *)v1 + 46) = -1;
  return result;
}

uint64_t sub_20FDE3470(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA09AA8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA09B08;
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 200);
  if (v3)
    v3(0, a1 + 200, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v4])(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40294CF2FDLL);
}

uint64_t sub_20FDE3518(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09FD0;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A030;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE35C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA09FD0;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A030;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C407D254C52);
}

void sub_20FDE368C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA09FD0;
  *(_QWORD *)a1 = &unk_24CA0A030;
  v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDE373C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA09FD0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA0A030;
  v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C407D254C52);
}

uint64_t sub_20FDE3810(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0A330;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A390;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE38C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24CA0A330;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A390;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10F3C40EF434651);
}

void sub_20FDE3984(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24CA0A330;
  *(_QWORD *)a1 = &unk_24CA0A390;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDE3A34(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24CA0A330;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA0A390;
  v3 = *(std::__shared_weak_count **)(a1 + 208);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10F3C40EF434651);
}

uint64_t sub_20FDE3B08(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)a1);
  return a1;
}

void sub_20FDE3B94(uint64_t a1)
{
  sub_20FDDE084(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDE3BB8(uint64_t a1)
{
  return sub_20FDDE084(a1 - 8);
}

void sub_20FDE3BC0(uint64_t a1)
{
  sub_20FDDE084(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDE3BE8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA0A898;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A8F8;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20FDE3C90(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)a1 = off_24CA0A898;
  *(_QWORD *)(a1 + 8) = &unk_24CA0A8F8;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x212BC6398);
    }
  }
  ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v3, a1 + 16);
  goto LABEL_8;
}

void sub_20FDE3D48(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24CA0A898;
  *(_QWORD *)a1 = &unk_24CA0A8F8;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v3, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_20FDE3DF0(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24CA0A898;
  *(_QWORD *)a1 = &unk_24CA0A8F8;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x212BC6398);
    }
  }
  ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v3, a1 + 8);
  goto LABEL_8;
}

uint64_t sub_20FDE3EB0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08508;
  *(_QWORD *)(a1 + 8) = &unk_24CA08568;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE3F18(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08508;
  *(_QWORD *)(a1 + 8) = &unk_24CA08568;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40CF772451);
}

uint64_t sub_20FDE3F94(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24CA08508;
  *(_QWORD *)result = &unk_24CA08568;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24CA08120[v2])(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_20FDE3FFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24CA08508;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA08568;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40CF772451);
}

uint64_t sub_20FDE4080(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA086A8;
  *(_QWORD *)(a1 + 8) = &unk_24CA08708;
  sub_20FD22A0C(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE40EC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA086A8;
  *(_QWORD *)(a1 + 8) = &unk_24CA08708;
  sub_20FD22A0C(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40DC57CB27);
}

uint64_t sub_20FDE416C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24CA086A8;
  *(_QWORD *)a1 = &unk_24CA08708;
  result = sub_20FD22A0C(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24CA08120[v3])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return result;
}

uint64_t sub_20FDE41D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24CA086A8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA08708;
  sub_20FD22A0C(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40DC57CB27);
}

uint64_t sub_20FDE4260(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08918;
  *(_QWORD *)(a1 + 8) = &unk_24CA08978;
  sub_20E866BE0(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE42D0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08918;
  *(_QWORD *)(a1 + 8) = &unk_24CA08978;
  sub_20E866BE0(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40546963AFLL);
}

void sub_20FDE4354(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24CA08918;
  *(_QWORD *)a1 = &unk_24CA08978;
  sub_20E866BE0(a1 + 192, *(char **)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v3, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20FDE43C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24CA08918;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA08978;
  sub_20E866BE0(a1 + 192, *(char **)(a1 + 200));
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40546963AFLL);
}

uint64_t sub_20FDE4450(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(void ***)a1;
    if (!*(_QWORD *)a1)
      return a1;
  }
  else
  {
    v2 = *(void ***)a1;
    if (!*(_QWORD *)a1)
      return a1;
  }
  v3 = *(void ***)(a1 + 8);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)a1;
  }
  *(_QWORD *)(a1 + 8) = v2;
  operator delete(v4);
  return a1;
}

void sub_20FDE44E8(uint64_t a1)
{
  sub_20FDDEA14(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDE450C(uint64_t a1)
{
  return sub_20FDDEA14(a1 - 8);
}

void sub_20FDE4514(uint64_t a1)
{
  sub_20FDDEA14(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FDE453C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08CF8;
  *(_QWORD *)(a1 + 8) = &unk_24CA08D58;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20FDE45A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA08CF8;
  *(_QWORD *)(a1 + 8) = &unk_24CA08D58;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x212BC6398](a1, 0x10B3C40956CF698);
}

uint64_t sub_20FDE4620(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24CA08CF8;
  *(_QWORD *)result = &unk_24CA08D58;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24CA08120[v2])(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_20FDE4688(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24CA08CF8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24CA08D58;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA08120[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x212BC6398](v2, 0x10B3C40956CF698);
}

uint64_t sub_20FDE470C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*((_BYTE *)a2 + 96))
  {
    v7 = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 56) = a2[10];
    *(_BYTE *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
    {
LABEL_8:
      v9 = a1 + 112;
      if (*((_BYTE *)a2 + 160))
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_20E860C04((_BYTE *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(v8 + 16) = a2[8];
    *(_OWORD *)v8 = v10;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v9 = a1 + 112;
  if (*((_BYTE *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_20E860C04(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      v14 = a2[16];
    }
    *(_OWORD *)v9 = v13;
    *(_QWORD *)(v9 + 16) = v14;
    *(_BYTE *)(a1 + 136) = 1;
    v11 = *((_BYTE *)a2 + 200);
    if (v11)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = *((_BYTE *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_20FDE4934(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(_BYTE *)(a1 + 144) = 0;
LABEL_21:
  *(_BYTE *)(a1 + 168) = v11;
  return a1;
}

void sub_20FDE48C8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[104] && v1[103] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_20FDE4934@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (a1[1] - *a1) >> 5;
  v7 = 0;
  v6 = 0uLL;
  sub_20E9099B8((uint64_t)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_20FDE4A3C(*a1, a1[1], (uint64_t)&v6);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_20FDE49A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FDE4A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  int v14;
  char v15;
  _QWORD v16[2];

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v14 = 0;
      sub_20FDD7E30((uint64_t)v16, (uint64_t)v13, v5);
      if (v14 == -1)
        sub_20E877AB8();
      v16[0] = &v15;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24CA08168[v14])(__p, v16, v13);
      if (v14 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24CA08150[v14])(v16, v13);
      v7 = *(_QWORD *)(a3 + 8);
      if (v7 < *(_QWORD *)(a3 + 16))
      {
        v6 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v12;
        *(_OWORD *)v7 = v6;
        *(_QWORD *)(a3 + 8) = v7 + 24;
      }
      else
      {
        v8 = sub_20E8780F0((void **)a3, (uint64_t)__p);
        v9 = SHIBYTE(v12);
        *(_QWORD *)(a3 + 8) = v8;
        if (v9 < 0)
          operator delete(__p[0]);
      }
      v5 += 96;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_20FDE4B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_20FDE4B9C@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_20FDD8130((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_20FF1C114(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_20FDD8370(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_20FDE4D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDE4E60(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FDE55A4((uint64_t)v8, a2);
  sub_20FDE4F7C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FDE4F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE4F7C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  void **v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  void **v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  void **v36;
  int v37;
  void **v38;
  unsigned __int8 *v39;
  int v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2101FD244(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2101FD244(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_2101FAC64(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = (uint64_t)v17;
    sub_20EB07D94((void ***)&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_20FDE57D0(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_2101FAC64(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = (uint64_t)v23;
    sub_20EB07D94((void ***)&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_20FDE58D8((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_2101FAC64(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = (void **)*((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = (uint64_t)v28;
    sub_20EB07D94((void ***)&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_2101FD70C(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_2101FAC64(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = (void **)*((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = (uint64_t)v41;
      sub_20EB07D94((void ***)&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_2101FD70C(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_2101FAC64(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = (void **)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = (uint64_t)v32;
      sub_20EB07D94((void ***)&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_2101FD70C(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_2101FAC64(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = (void **)*((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = (uint64_t)v36;
      sub_20EB07D94((void ***)&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(void ***)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - (_QWORD)v38) >> 3);
      v43 = (uint64_t)v38;
      sub_2101FF120(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_2101FD70C(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20FDE5524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FDE555C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FDE5574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FDE558C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDE55A4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_20E8ADB20((char *)(a1 + 144), *(__int128 **)(a2 + 144), *(__int128 **)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_20FDE5714(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDE57D0(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FD2A5A0((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FD70C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FDE5894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDE58B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE58C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE58D8(int *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  __int128 v25;

  sub_2101FAEA0(a2);
  v22 = "version";
  v23 = 7;
  v24 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_2101FD244(a2, &v24);
    v7 = *a1;
    if (*a1 >= 1)
      goto LABEL_4;
LABEL_20:
    v25 = *a3;
    v9 = *(unsigned __int8 **)(a2 + 40);
    if (*v9 <= 1u)
    {
      *(_QWORD *)(a2 + 72) = "ns";
      v10 = a2 + 72;
      v12 = (_BYTE *)(a2 + 88);
      v15 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 2;
      v13 = (_QWORD *)(a2 + 80);
      if (!v15)
        *v12 = 1;
      goto LABEL_29;
    }
    v13 = (_QWORD *)(a2 + 80);
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    if (!*(_BYTE *)(a2 + 88) || *(_QWORD *)(a2 + 80) != 7)
      goto LABEL_29;
    if (**(_DWORD **)v10 != *(_DWORD *)"version" || *(_DWORD *)(*(_QWORD *)v10 + 3) != *(_DWORD *)"sion")
      goto LABEL_29;
    goto LABEL_30;
  }
  *(_BYTE *)(a2 + 88) = 1;
  sub_2101FD244(a2, &v24);
  v7 = *a1;
  if (*a1 < 1)
    goto LABEL_20;
LABEL_4:
  if (v7 == 2)
  {
    v22 = "min_version";
    v23 = 11;
    v24 = 2;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v8)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v24);
  }
  v25 = *a3;
  v9 = *(unsigned __int8 **)(a2 + 40);
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "ns";
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    v11 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 80) = 2;
    v13 = (_QWORD *)(a2 + 80);
    if (!v11)
      *v12 = 1;
    goto LABEL_29;
  }
  v13 = (_QWORD *)(a2 + 80);
  v10 = a2 + 72;
  v12 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (**(_DWORD **)v10 == *(_DWORD *)"version"
      ? (v14 = *(_DWORD *)(*(_QWORD *)v10 + 3) == *(_DWORD *)"sion")
      : (v14 = 0),
        !v14))
  {
LABEL_29:
    LOBYTE(v22) = 5;
    v23 = v25;
    v17 = (unsigned __int8 *)sub_2101FAC64(a2);
    v18 = *v17;
    *v17 = 5;
    LOBYTE(v22) = v18;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v23;
    v23 = (uint64_t)v19;
    sub_20EB07D94((void ***)&v23, v18);
    v9 = *(unsigned __int8 **)(a2 + 40);
  }
LABEL_30:
  if (*v9 <= 1u)
  {
    v20 = *v12;
    *(_QWORD *)v10 = "clock_type";
    *v13 = 10;
    if (!v20)
      *v12 = 1;
  }
  v22 = (char *)&v25 + 8;
  sub_20FDE5C10(a2, (unsigned __int8 **)&v22);
  v21 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(a2 + 56) = v21 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FDE5BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FDE5BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20EB07D94(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FDE5C10(uint64_t a1, unsigned __int8 **a2)
{
  void **v3;
  BOOL v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  unsigned __int8 *v12;
  void *__p[2];
  char v14;
  char v15[8];
  void **v16;
  int v17;
  char v18;
  char *v19;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    v12 = *a2;
    v17 = 0;
    sub_20FD2A5A0((uint64_t)&v19, (uint64_t)v15, v12);
    if (v17 == -1)
      sub_20E877AB8();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, char *))off_24CA08168[v17])(__p, &v19, v15);
    if (v17 != -1)
      ((void (*)(char **, char *))off_24CA08150[v17])(&v19, v15);
    sub_2101FD70C(a1, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = (void **)**a2;
    if (*(_BYTE *)(a1 + 88))
      v4 = *(_QWORD *)(a1 + 80) == 7;
    else
      v4 = 0;
    if (!v4
      || ((v5 = *(int **)(a1 + 72), v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == *(_DWORD *)"version")
        ? (v8 = v7 == *(_DWORD *)"sion")
        : (v8 = 0),
          !v8))
    {
      v15[0] = 6;
      v16 = v3;
      v9 = (unsigned __int8 *)sub_2101FAC64(a1);
      v10 = *v9;
      *v9 = 6;
      v15[0] = v10;
      v11 = (void **)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v16;
      v16 = v11;
      sub_20EB07D94(&v16, v10);
    }
  }
}

void sub_20FDE5D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20EB07D94(v13, a13);
  _Unwind_Resume(a1);
}

void sub_20FDE5D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDE5D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE5DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE5DC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string::value_type *a4@<X4>, std::string::size_type a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *p_p;
  std::string::size_type v17;
  std::string::size_type size;
  std::string *v19;
  std::string::size_type v20;
  __int128 i;
  std::string __p;
  __int128 v24;

  v11 = 0x5555555555555555 * ((a1 - a3) >> 3);
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = 0x5555555555555555 * ((a1 - a3) >> 3);
  v13 = (v12 - 1) * a5;
  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  v14 = 0;
  v15 = a1 - a3;
  if (a1 != a3)
  {
    do
    {
      sub_20FDE5FD0((unsigned __int8 **)&v24, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 += size;
      *(_QWORD *)&v24 = v24 + 24;
    }
    while ((_QWORD)v24 != a3);
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a6, v14 + v13);
  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  if (v15 < 0)
  {
    sub_20FDE5FD0((unsigned __int8 **)&v24, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v17 = __p.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)p_p, v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((unint64_t)v11 < 2)
        return;
    }
    else if ((unint64_t)v11 < 2)
    {
      return;
    }
    *(_QWORD *)&v24 = v24 + 24;
    for (i = v24; (_QWORD)i != a3; *(_QWORD *)&i = i + 24)
    {
      std::string::append(a6, a4, a5);
      sub_20FDE5FD0((unsigned __int8 **)&i, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &__p;
      else
        v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v20 = __p.__r_.__value_.__l.__size_;
      std::string::append(a6, (const std::string::value_type *)v19, v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20FDE5F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 + 23) < 0)
    operator delete(*(void **)v19);
  _Unwind_Resume(exception_object);
}

void sub_20FDE5FD0(unsigned __int8 **a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  std::string::size_type v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;

  v3 = *a1;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if ((v3[23] & 0x80u) == 0)
    v4 = v3[23];
  else
    v4 = *((_QWORD *)v3 + 1);
  std::string::reserve(a2, v4);
  v5 = *((_QWORD *)v3 + 1);
  if ((v3[23] & 0x80u) == 0)
  {
    v6 = v3[23];
  }
  else
  {
    v3 = *(unsigned __int8 **)v3;
    v6 = v5;
  }
  if (v6)
  {
    while (1)
    {
      v7 = *v3;
      if (v7 == 59)
        break;
      if (v7 == 92)
      {
        v8 = "\\\\";
LABEL_15:
        std::string::append(a2, v8, 2uLL);
        goto LABEL_10;
      }
      std::string::push_back(a2, v7);
LABEL_10:
      ++v3;
      if (!--v6)
        return;
    }
    v8 = "\\;";
    goto LABEL_15;
  }
}

void sub_20FDE609C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20FDE60BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _BYTE v37[28];
  char v38[8];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  std::ios_base v61;
  uint64_t v62;
  int v63;
  uint64_t (**v64)();
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  __int16 v71;

  *(_OWORD *)v37 = *(_OWORD *)a2;
  *(_OWORD *)&v37[12] = *(_OWORD *)(a2 + 12);
  v38[0] = 0;
  v46 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24CA08180[v3])(&v64, v38, a2 + 32);
    v46 = v3;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "io_format";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_20FDE696C((uint64_t)&v48, (uint64_t)&v49, (unsigned __int16 *)v37);
  if ((_DWORD)v52 == -1)
    sub_20E877AB8();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24CA08168[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24CA08150[v52])(&v48, &v49);
  sub_2101FD70C(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_15;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_15;
  }
  v5 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "structure";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v5)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_15:
  sub_2101FAEA0(a1);
  v49 = (uint64_t)"version";
  v50 = 7;
  LODWORD(v51) = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FD244(a1, &v51);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "image_format";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_20FDE6C20((uint64_t)&v48, (uint64_t)&v49, (uint64_t *)&v37[8]);
  if ((_DWORD)v52 == -1)
    sub_20E877AB8();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24CA08168[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24CA08150[v52])(&v48, &v49);
  sub_2101FD70C(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_30;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_30;
  }
  v8 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "size";
  *(_QWORD *)(a1 + 80) = 4;
  if (!v8)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_30:
  v49 = 2;
  v50 = (uint64_t)&v37[16];
  sub_2101FDE34(a1, (uint64_t)&v49);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "image_data";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FAEA0(a1);
  if (*(unsigned __int16 *)v37 == 1)
  {
    if (!v46)
    {
      v49 = (uint64_t)&off_24C9C0338;
      v12 = v39;
      v13 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = v43;
        v17 = v44;
        v18 = v45;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      else
      {
        v16 = v43;
        v17 = v44;
        v18 = v45;
      }
      v50 = v12;
      v51 = v13;
      v52 = v41;
      v53 = v42;
      v54 = v16;
      v55 = v17;
      v56 = v18;
      if (v13)
      {
        v28 = (unint64_t *)&v13->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_59;
    }
    if (v46 == 1)
    {
      v49 = (uint64_t)&off_24C9C0338;
      sub_20FF60B50((uint64_t)v38, (uint64_t)&v50);
LABEL_59:
      sub_20FF59134((const void *)a1, (uint64_t)&v49);
      v30 = v51;
      if (!v51)
        goto LABEL_73;
      v31 = (unint64_t *)&v51->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      goto LABEL_72;
    }
LABEL_80:
    sub_20E877AB8();
  }
  v11 = sub_20FF58C10(*(unsigned __int16 *)v37);
  if (v46)
  {
    if (v46 != 1)
      goto LABEL_80;
    v64 = &off_24C9C0338;
    sub_20FF60B50((uint64_t)v38, (uint64_t)&v65);
  }
  else
  {
    v64 = &off_24C9C0338;
    v20 = v39;
    v21 = v40;
    if (v40)
    {
      v22 = (unint64_t *)&v40->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = v43;
      v25 = v44;
      v26 = v45;
      do
        v27 = __ldxr(v22);
      while (__stxr(v27 + 1, v22));
    }
    else
    {
      v24 = v43;
      v25 = v44;
      v26 = v45;
    }
    v65 = v20;
    v66 = v21;
    v67 = v41;
    v68 = v42;
    v69 = v24;
    v70 = v25;
    v71 = v26;
    if (v21)
    {
      v33 = (unint64_t *)&v21->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v49 = a1;
  std::streambuf::basic_streambuf();
  v50 = MEMORY[0x24BEDB848] + 16;
  v57 = 0u;
  v58 = 0u;
  v59 = 24;
  v60 = MEMORY[0x24BEDB828] + 24;
  v61.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v61, &v50);
  v62 = 0;
  v63 = -1;
  sub_20FDE6EC4(&v64, (char *)&v60, v11);
  sub_20FDE7354((uint64_t)&v49);
  v30 = v66;
  if (!v66)
    goto LABEL_73;
  v35 = (unint64_t *)&v66->__shared_owners_;
  do
    v32 = __ldaxr(v35);
  while (__stlxr(v32 - 1, v35));
LABEL_72:
  if (v32)
  {
LABEL_73:
    v36 = v46;
    if (v46 == -1)
      return;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v36 = v46;
  if (v46 != -1)
LABEL_74:
    ((void (*)(uint64_t *, char *))off_24CA080B0[v36])(&v49, v38);
}

void sub_20FDE66E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_20FDE7354((uint64_t)&a24);
  sub_20EA69690(v24 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE670C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x212BC6290](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20EA69690(v39 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE6750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20EA69690(v9 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE676C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_20FDDA124((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE685C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a2 = &off_24C9C0338;
  v3 = *(_QWORD *)(a3 + 8);
  v4 = *(std::__shared_weak_count **)(a3 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  v11 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 40) = v7;
  *(_DWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 52) = v9;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

__n128 sub_20FDE6924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;
  __int128 v8;

  v4 = *(_QWORD *)(a3 + 8);
  v3 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a2 = &off_24C9FC408;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a3 + 24);
  v8 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v8;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20FDE696C(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)(&off_24CA0E808)[2 * *a3], (uint64_t)(&off_24CA0E808)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FDE6BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FDE6BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDE6C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDE6C20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20FF57E9C((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FDE6E70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FDE6E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDE6EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FDE6EC4(_DWORD *a1, char *a2, int a3)
{
  _BYTE *v4;
  int v5;
  _QWORD *exception;
  __int128 v7;
  void *v8[2];
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  char v30;
  __int128 v31;
  void *__p;
  char v33;
  unsigned __int8 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  __int128 v42;
  void *v43;
  char v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  char v50;
  char v51;
  char v52;
  int v53;
  _QWORD v54[2];

  sub_20FF4BD6C(a1, a2, a3, (uint64_t)&v42);
  if (v52)
  {
    v18 = 1;
    goto LABEL_36;
  }
  v54[0] = "save";
  v54[1] = 4;
  v53 = a3;
  sub_20FF4BB98("Failure during ", (uint64_t)v54, (uint64_t)" from stream with file format ", &v53, (uint64_t)": ");
  if (v52)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C9B4620;
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD070, (void (*)(void *))std::exception::~exception);
  }
  sub_21023590C(&v19, &v42, (uint64_t)&v21);
  v31 = v21;
  v4 = sub_20E89EFE4(&__p, &v22);
  v7 = v31;
  LOBYTE(v8[0]) = 0;
  v17 = 0;
  if (v41)
  {
    v10 = 0;
    v5 = v34;
    if (v34)
    {
      *(_OWORD *)v8 = *(_OWORD *)v4;
      v9 = *((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
      *(_QWORD *)v4 = 0;
      v10 = 1;
    }
    LOBYTE(v11) = 0;
    v16 = 0;
    if (v40)
    {
      v12 = v36;
      v11 = v35;
      v35 = 0uLL;
      v13 = v37;
      *(_OWORD *)v14 = v38;
      v15 = v39;
      v36 = 0;
      v38 = 0uLL;
      v39 = 0;
      v16 = 1;
    }
    v17 = 1;
    v18 = 0;
    if (v5 && v33 < 0)
      operator delete(__p);
    if (!v30)
      goto LABEL_23;
    goto LABEL_15;
  }
  v18 = 0;
  if (v30)
  {
LABEL_15:
    if (v29)
    {
      if (v28 < 0)
        operator delete(v27);
      if (v26 < 0)
        operator delete(v25);
    }
    if (v24 && v23 < 0)
      operator delete((void *)v22);
  }
LABEL_23:
  if (v20 < 0)
  {
    operator delete(v19);
    if (v52)
      goto LABEL_36;
  }
  else if (v52)
  {
    goto LABEL_36;
  }
  if (v51)
  {
    if (v50)
    {
      if (v49 < 0)
        operator delete(v48);
      if (v47 < 0)
        operator delete(v46);
    }
    if (v45 && v44 < 0)
      operator delete(v43);
  }
LABEL_36:
  sub_20FDE71D8((uint64_t)&v7);
  if (!v18 && v17)
  {
    if (v16)
    {
      if (SHIBYTE(v15) < 0)
        operator delete(v14[0]);
      if (SHIBYTE(v12) < 0)
        operator delete((void *)v11);
    }
    if (v10)
    {
      if (SHIBYTE(v9) < 0)
        operator delete(v8[0]);
    }
  }
}

void sub_20FDE7188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  sub_20E89EF58((uint64_t)&a31);
  if (a30 < 0)
    operator delete(__p);
  sub_20E89ED1C(v31 - 168);
  _Unwind_Resume(a1);
}

void sub_20FDE71C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E89ED1C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDE71D8(uint64_t a1)
{
  std::runtime_error *exception;
  uint64_t v4;
  std::string v5;

  if (!*(_BYTE *)(a1 + 120))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v4 = sub_20ED3C7D0(a1);
    sub_2102341F0(v4, &v5);
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return sub_20FDE7294(a1);
}

void sub_20FDE725C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_20FDE7294(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20E89EFE4(v4, v1 + 1);
    sub_20E89EE70((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C9AD088, (void (*)(void *))sub_20E89EEC0);
  }
  return result;
}

void sub_20FDE7310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E89EF58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE7324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20E89EF58((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20FDE7340(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDE7354(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  size_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  void **v20;
  uint64_t v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  size_t v26;
  void **v27;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_20E860B7C();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v24 = v3;
    v25 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v25);
  if (v25 >= 0)
    v11 = HIBYTE(v25);
  else
    v11 = v24;
  v12 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 88)
    || *(_QWORD *)(v12 + 80) != 7
    || ((v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (v16 = v15 == *(_DWORD *)"sion")
      : (v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    v27 = (void **)v11;
    v17 = (unsigned __int8 *)sub_2101FAC64(v12);
    v18 = *v17;
    *v17 = v26;
    LOBYTE(v26) = v18;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v27;
    v27 = v19;
    sub_20EB07D94(&v27, v18);
    v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v20 = 0;
    }
  }
  else
  {
    v20 = (void **)&__dst;
  }
  v21 = *(_QWORD *)a1;
  v26 = v11;
  v27 = v20;
  sub_2101FB01C(v21, &v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_20FDE75A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20EB07D94(v13, a13);
  sub_20E860DA4(a1);
}

void sub_20FDE75BC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FDE55A4((uint64_t)v8, a2);
  sub_20FDE76D8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FDE76C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE76D8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const void **v30;
  const void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v39 = (uint64_t *)(v6 + 16);
    sub_20E9F3D4C(&v39, 2u);
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_3;
LABEL_6:
    sub_20E9F45EC();
    v8 = *(char *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_20E9F3FC0((uint64_t)&v39, v6 + 8);
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_6;
LABEL_3:
  v39 = (uint64_t *)(v7 + 16);
  sub_20E9F40B0(&v39, *(_QWORD *)(a2 + 8));
  v8 = *(char *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_4:
    v39 = (uint64_t *)(v9 + 16);
    sub_20E9F3164(&v39, v8);
    goto LABEL_11;
  }
LABEL_7:
  if (v8 < 0)
  {
    LOBYTE(v39) = -52;
    BYTE1(v39) = v8;
  }
  else
  {
    LOBYTE(v39) = v8;
  }
  std::ostream::write();
LABEL_11:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v10 + 48), *(_QWORD *)(v10 + 16) - v11 - 9);
  v12 = *(_QWORD *)(v10 + 48);
  if (v12)
    memmove((void *)(*(_QWORD *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  *(_QWORD *)(v10 + 48) = 0;
  v13 = *(_QWORD *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88) - 8;
  *(_QWORD *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(_BYTE *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(_BYTE *)(v10 + 40) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v15 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v15 + 40))
    {
      v39 = (uint64_t *)(v15 + 16);
      sub_20E9F3164(&v39, 1);
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
        goto LABEL_19;
    }
    else
    {
      LOBYTE(v39) = 1;
      std::ostream::write();
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
      {
LABEL_19:
        v39 = (uint64_t *)(v16 + 16);
        sub_20E9F4E1C((uint64_t)&v38, &v39, (const void **)(a2 + 24));
        if (a3 < 4)
          return;
        goto LABEL_28;
      }
    }
    sub_20E9F5254((uint64_t)&v39, v16 + 8, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v39 = (uint64_t *)(v17 + 16);
      sub_20E9F3164(&v39, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v39) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
  }
LABEL_28:
  sub_20FDE7D48(a1, a2 + 56);
  if (a3 != 5)
  {
    if (a3 < 6)
      return;
    if (!*(_BYTE *)(a2 + 104))
    {
      v23 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v23 + 40))
      {
        v39 = (uint64_t *)(v23 + 16);
        sub_20E9F3164(&v39, 0);
        if (!*(_BYTE *)(a2 + 136))
        {
LABEL_54:
          v26 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v26 + 40))
          {
            v39 = (uint64_t *)(v26 + 16);
            sub_20E9F3164(&v39, 0);
            if (*(_BYTE *)(a2 + 168))
              goto LABEL_56;
          }
          else
          {
            LOBYTE(v39) = 0;
            std::ostream::write();
            if (*(_BYTE *)(a2 + 168))
            {
LABEL_56:
              v27 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v27 + 40))
              {
                v39 = (uint64_t *)(v27 + 16);
                sub_20E9F3164(&v39, 1);
              }
              else
              {
                LOBYTE(v39) = 1;
                std::ostream::write();
              }
              v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
              v29 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v29 + 40))
              {
                v39 = (uint64_t *)(v29 + 16);
                sub_20E9F472C(&v39, v28);
              }
              else
              {
                sub_20E9F4A34();
              }
              v31 = *(const void ***)(a2 + 144);
              v30 = *(const void ***)(a2 + 152);
              v32 = ((char *)v30 - (char *)v31) / 24;
              v33 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v33 + 40))
              {
                v39 = (uint64_t *)(v33 + 16);
                if (v30 != v31)
                {
                  v34 = 24 * v32;
                  do
                  {
                    sub_20E9F4E1C((uint64_t)&v38, &v39, v31);
                    v31 += 3;
                    v34 -= 24;
                  }
                  while (v34);
                }
              }
              else if (v30 != v31)
              {
                v35 = v33 + 8;
                v36 = 24 * v32;
                do
                {
                  sub_20E9F5254((uint64_t)&v39, v35, (uint64_t)v31);
                  v31 += 3;
                  v36 -= 24;
                }
                while (v36);
              }
              return;
            }
          }
LABEL_72:
          v37 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v37 + 40))
          {
            v39 = (uint64_t *)(v37 + 16);
            sub_20E9F3164(&v39, 0);
          }
          else
          {
            LOBYTE(v39) = 0;
            std::ostream::write();
          }
          return;
        }
      }
      else
      {
        LOBYTE(v39) = 0;
        std::ostream::write();
        if (!*(_BYTE *)(a2 + 136))
          goto LABEL_54;
      }
LABEL_46:
      v24 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v24 + 40))
      {
        v39 = (uint64_t *)(v24 + 16);
        sub_20E9F3164(&v39, 1);
        v25 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v25 + 40))
          goto LABEL_48;
      }
      else
      {
        LOBYTE(v39) = 1;
        std::ostream::write();
        v25 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v25 + 40))
        {
LABEL_48:
          v39 = (uint64_t *)(v25 + 16);
          sub_20E9F4E1C((uint64_t)&v38, &v39, (const void **)(a2 + 112));
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_56;
          goto LABEL_72;
        }
      }
      sub_20E9F5254((uint64_t)&v39, v25 + 8, a2 + 112);
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_56;
      goto LABEL_72;
    }
    v21 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v21 + 40))
    {
      v39 = (uint64_t *)(v21 + 16);
      sub_20E9F3164(&v39, 1);
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
        goto LABEL_37;
    }
    else
    {
      LOBYTE(v39) = 1;
      std::ostream::write();
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
      {
LABEL_37:
        v39 = (uint64_t *)(v22 + 16);
        sub_20E9F4E1C((uint64_t)&v38, &v39, (const void **)(a2 + 80));
        if (!*(_BYTE *)(a2 + 136))
          goto LABEL_54;
        goto LABEL_46;
      }
    }
    sub_20E9F5254((uint64_t)&v39, v22 + 8, a2 + 80);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_54;
    goto LABEL_46;
  }
  if (!*(_BYTE *)(a2 + 104))
    goto LABEL_72;
  v18 = (const void **)(a2 + 80);
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
    v39 = (uint64_t *)(v19 + 16);
    sub_20E9F3164(&v39, 1);
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
    {
LABEL_32:
      v39 = (uint64_t *)(v20 + 16);
      sub_20E9F4E1C((uint64_t)&v38, &v39, v18);
      return;
    }
  }
  else
  {
    LOBYTE(v39) = 1;
    std::ostream::write();
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
      goto LABEL_32;
  }
  sub_20E9F5254((uint64_t)&v39, v20 + 8, (uint64_t)v18);
}

void sub_20FDE7D48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(v2 + 40))
    {
      v14 = (uint64_t *)(v2 + 16);
      sub_20E9F3164(&v14, 0);
    }
    else
    {
      LOBYTE(v14) = 0;
      std::ostream::write();
    }
    return;
  }
  if (*(_BYTE *)(v2 + 40))
  {
    v14 = (uint64_t *)(v2 + 16);
    sub_20E9F3164(&v14, 1);
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
      goto LABEL_4;
  }
  else
  {
    LOBYTE(v14) = 1;
    std::ostream::write();
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
    {
LABEL_4:
      v14 = (uint64_t *)(v5 + 16);
      sub_20E9F3D4C(&v14, 2u);
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      v6 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v6 + 40))
        goto LABEL_5;
LABEL_12:
      sub_20E9F45EC();
      v7 = *(char *)(a2 + 8);
      v8 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v8 + 40))
        goto LABEL_6;
LABEL_13:
      if (v7 < 0)
      {
        LOBYTE(v14) = -52;
        BYTE1(v14) = v7;
      }
      else
      {
        LOBYTE(v14) = v7;
      }
      std::ostream::write();
      goto LABEL_18;
    }
  }
  sub_20E9F3FC0((uint64_t)&v14, v5 + 8);
  sub_20E9EE95C(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    goto LABEL_12;
LABEL_5:
  v14 = (uint64_t *)(v6 + 16);
  sub_20E9F40B0(&v14, *(_QWORD *)a2);
  v7 = *(char *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v8 + 40))
    goto LABEL_13;
LABEL_6:
  v14 = (uint64_t *)(v8 + 16);
  sub_20E9F3164(&v14, v7);
LABEL_18:
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
}

void sub_20FDE7F5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  _BYTE v40[28];
  char v41[8];
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  unsigned int v49;
  uint64_t (**v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  std::ios_base v62;
  uint64_t v63;
  int v64;
  uint64_t (**v65)();
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  __int16 v72;

  *(_OWORD *)v40 = *(_OWORD *)a2;
  *(_OWORD *)&v40[12] = *(_OWORD *)(a2 + 12);
  v41[0] = 0;
  v49 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24CA08180[v3])(&v65, v41, a2 + 32);
    v49 = v3;
  }
  v4 = a1[3];
  if (*(_BYTE *)(v4 + 40))
  {
    v50 = (uint64_t (**)())(v4 + 16);
    sub_20E9F3668((uint64_t **)&v50, *(unsigned __int16 *)v40);
  }
  else if (*(unsigned __int16 *)v40 > 0x7Fu)
  {
    if (*(unsigned __int16 *)v40 > 0xFFu)
    {
      LOBYTE(v50) = -51;
      *(_WORD *)((char *)&v50 + 1) = __rev16(*(unsigned __int16 *)v40);
    }
    else
    {
      LOBYTE(v50) = -52;
      BYTE1(v50) = v40[0];
    }
    std::ostream::write();
  }
  else
  {
    LOBYTE(v50) = v40[0];
    std::ostream::write();
  }
  v5 = a1[3];
  if (*(_BYTE *)(v5 + 40))
  {
    v50 = (uint64_t (**)())(v5 + 16);
    sub_20E9F3D4C((uint64_t **)&v50, 2u);
  }
  else
  {
    LOBYTE(v50) = 2;
    std::ostream::write();
  }
  sub_20E9EE95C(a1[3]);
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v50 = (uint64_t (**)())(v6 + 16);
    sub_20E9F472C((uint64_t **)&v50, *(unint64_t *)&v40[8]);
  }
  else
  {
    sub_20E9F4A34();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v50 = (uint64_t (**)())(v7 + 16);
    sub_20E9F3D4C((uint64_t **)&v50, *(unsigned int *)&v40[16]);
    sub_20E9F3D4C((uint64_t **)&v50, *(unsigned int *)&v40[20]);
  }
  else
  {
    v8 = v7 + 8;
    sub_20E9F3FC0((uint64_t)&v50, v7 + 8);
    sub_20E9F3FC0((uint64_t)&v50, v8);
  }
  v9 = a1[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  if (*(unsigned __int16 *)v40 == 1)
  {
    if (!v49)
    {
      v50 = &off_24C9C0338;
      v15 = v42;
      v16 = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v19 = v46;
        v20 = v47;
        v21 = v48;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      else
      {
        v19 = v46;
        v20 = v47;
        v21 = v48;
      }
      v51 = v15;
      v52 = v16;
      v53 = v44;
      v54 = v45;
      v55 = v19;
      v56 = v20;
      v57 = v21;
      if (v16)
      {
        v31 = (unint64_t *)&v16->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      goto LABEL_50;
    }
    if (v49 == 1)
    {
      v50 = &off_24C9C0338;
      sub_20FF60B50((uint64_t)v41, (uint64_t)&v51);
LABEL_50:
      sub_20FF59134(a1, (uint64_t)&v50);
      v33 = v52;
      if (!v52)
        goto LABEL_64;
      v34 = (unint64_t *)&v52->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      goto LABEL_63;
    }
LABEL_69:
    sub_20E877AB8();
  }
  v14 = sub_20FF58C10(*(unsigned __int16 *)v40);
  if (v49)
  {
    if (v49 != 1)
      goto LABEL_69;
    v65 = &off_24C9C0338;
    sub_20FF60B50((uint64_t)v41, (uint64_t)&v66);
  }
  else
  {
    v65 = &off_24C9C0338;
    v23 = v42;
    v24 = v43;
    if (v43)
    {
      v25 = (unint64_t *)&v43->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v27 = v46;
      v28 = v47;
      v29 = v48;
      do
        v30 = __ldxr(v25);
      while (__stxr(v30 + 1, v25));
    }
    else
    {
      v27 = v46;
      v28 = v47;
      v29 = v48;
    }
    v66 = v23;
    v67 = v24;
    v68 = v44;
    v69 = v45;
    v70 = v27;
    v71 = v28;
    v72 = v29;
    if (v24)
    {
      v36 = (unint64_t *)&v24->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v50 = (uint64_t (**)())a1;
  std::streambuf::basic_streambuf();
  v51 = MEMORY[0x24BEDB848] + 16;
  v58 = 0u;
  v59 = 0u;
  v60 = 24;
  v61 = MEMORY[0x24BEDB828] + 24;
  v62.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v62, &v51);
  v63 = 0;
  v64 = -1;
  sub_20FDE6EC4(&v65, (char *)&v61, v14);
  sub_20FDE85B0((uint64_t)&v50);
  v33 = v67;
  if (!v67)
    goto LABEL_64;
  v38 = (unint64_t *)&v67->__shared_owners_;
  do
    v35 = __ldaxr(v38);
  while (__stlxr(v35 - 1, v38));
LABEL_63:
  if (v35)
  {
LABEL_64:
    v39 = v49;
    if (v49 == -1)
      return;
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  v39 = v49;
  if (v49 != -1)
LABEL_65:
    ((void (*)(uint64_t (***)(), char *))off_24CA080B0[v39])(&v50, v41);
}

void sub_20FDE8494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  sub_20FDE85B0((uint64_t)&a22);
  sub_20EA69690(v22 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE84B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = v36;
  MEMORY[0x212BC6290](v38);
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20EA69690(v37 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE84FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20EA69690(v9 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE8518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v25 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      sub_20FDDA124((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDE85B0(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *__dst;
  size_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t *v19[2];
  char v20;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v17) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      sub_20E860B7C();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v16 = v3;
    v17 = v9 | 0x8000000000000000;
    __dst = (uint64_t *)p_dst;
    goto LABEL_13;
  }
  HIBYTE(v17) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  if (v17 >= 0)
    v10 = HIBYTE(v17);
  else
    v10 = v16;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
    v19[0] = (uint64_t *)(v11 + 16);
    sub_20E9F472C(v19, v10);
  }
  else
  {
    sub_20E9F4A34();
  }
  if (SHIBYTE(v17) < 0)
  {
    v12 = __dst;
    if (v10 && !__dst)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v12 = 0;
    }
  }
  else
  {
    v12 = (uint64_t *)&__dst;
  }
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(_BYTE *)(v13 + 40))
  {
    v18 = (uint64_t *)(v13 + 16);
    LODWORD(v19[0]) = v10;
    v19[1] = v12;
    sub_20E9F2D20((uint64_t)&v20, &v18, (unsigned int *)v19);
  }
  else
  {
    if (v10 > 0xFF)
    {
      if (WORD1(v10))
      {
        LOBYTE(v19[0]) = -58;
        *(_DWORD *)((char *)v19 + 1) = bswap32(v10);
      }
      else
      {
        LOBYTE(v19[0]) = -59;
        *(_WORD *)((char *)v19 + 1) = bswap32(v10) >> 16;
      }
      std::ostream::write();
    }
    else
    {
      LOBYTE(v19[0]) = -60;
      BYTE1(v19[0]) = v10;
      std::ostream::write();
    }
    std::ostream::write();
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_20FDE8860(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FDE55A4((uint64_t)v8, a2);
  sub_20FDE897C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FDE8964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE897C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2101FB154(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2101FB154(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = v14;
    v15 = (unsigned __int8 *)sub_2101FA67C(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = v17;
    sub_20EB911C0(&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_20FDE8FA4(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_2101FA67C(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = v23;
    sub_20EB911C0(&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_20FD2A0B8((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_2101FA67C(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = v28;
    sub_20EB911C0(&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_2101FB61C(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_2101FA67C(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = v41;
      sub_20EB911C0(&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_2101FB61C(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_2101FA67C(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = v32;
      sub_20EB911C0(&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_2101FB61C(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_2101FA67C(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = *((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = v36;
      sub_20EB911C0(&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(_QWORD *)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 152) - v38) >> 3);
      v43 = v38;
      sub_2101FD0E0(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_2101FB61C(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20FDE8F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FDE8F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FDE8F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FDE8F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FDE8FA4(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FD2A5A0((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FB61C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FDE9068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FDE9084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE9098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE90AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _BYTE v37[28];
  char v38[8];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  std::ios_base v61;
  uint64_t v62;
  int v63;
  uint64_t (**v64)();
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  __int16 v71;

  *(_OWORD *)v37 = *(_OWORD *)a2;
  *(_OWORD *)&v37[12] = *(_OWORD *)(a2 + 12);
  v38[0] = 0;
  v46 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24CA08180[v3])(&v64, v38, a2 + 32);
    v46 = v3;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "io_format";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_20FDE696C((uint64_t)&v48, (uint64_t)&v49, (unsigned __int16 *)v37);
  if ((_DWORD)v52 == -1)
    sub_20E877AB8();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24CA08168[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24CA08150[v52])(&v48, &v49);
  sub_2101FB61C(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_15;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_15;
  }
  v5 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "structure";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v5)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_15:
  sub_2101FA8A4(a1);
  v49 = (uint64_t)"version";
  v50 = 7;
  LODWORD(v51) = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FB154(a1, &v51);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "image_format";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_20FDE6C20((uint64_t)&v48, (uint64_t)&v49, (uint64_t *)&v37[8]);
  if ((_DWORD)v52 == -1)
    sub_20E877AB8();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24CA08168[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24CA08150[v52])(&v48, &v49);
  sub_2101FB61C(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_30;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_30;
  }
  v8 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "size";
  *(_QWORD *)(a1 + 80) = 4;
  if (!v8)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_30:
  v49 = 2;
  v50 = (uint64_t)&v37[16];
  sub_2101FBD44(a1, (uint64_t)&v49);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "image_data";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2101FA8A4(a1);
  if (*(unsigned __int16 *)v37 == 1)
  {
    if (!v46)
    {
      v49 = (uint64_t)&off_24C9C0338;
      v12 = v39;
      v13 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = v43;
        v17 = v44;
        v18 = v45;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      else
      {
        v16 = v43;
        v17 = v44;
        v18 = v45;
      }
      v50 = v12;
      v51 = v13;
      v52 = v41;
      v53 = v42;
      v54 = v16;
      v55 = v17;
      v56 = v18;
      if (v13)
      {
        v28 = (unint64_t *)&v13->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_59;
    }
    if (v46 == 1)
    {
      v49 = (uint64_t)&off_24C9C0338;
      sub_20FF60B50((uint64_t)v38, (uint64_t)&v50);
LABEL_59:
      sub_20FF59134((const void *)a1, (uint64_t)&v49);
      v30 = v51;
      if (!v51)
        goto LABEL_73;
      v31 = (unint64_t *)&v51->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      goto LABEL_72;
    }
LABEL_80:
    sub_20E877AB8();
  }
  v11 = sub_20FF58C10(*(unsigned __int16 *)v37);
  if (v46)
  {
    if (v46 != 1)
      goto LABEL_80;
    v64 = &off_24C9C0338;
    sub_20FF60B50((uint64_t)v38, (uint64_t)&v65);
  }
  else
  {
    v64 = &off_24C9C0338;
    v20 = v39;
    v21 = v40;
    if (v40)
    {
      v22 = (unint64_t *)&v40->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = v43;
      v25 = v44;
      v26 = v45;
      do
        v27 = __ldxr(v22);
      while (__stxr(v27 + 1, v22));
    }
    else
    {
      v24 = v43;
      v25 = v44;
      v26 = v45;
    }
    v65 = v20;
    v66 = v21;
    v67 = v41;
    v68 = v42;
    v69 = v24;
    v70 = v25;
    v71 = v26;
    if (v21)
    {
      v33 = (unint64_t *)&v21->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v49 = a1;
  std::streambuf::basic_streambuf();
  v50 = MEMORY[0x24BEDB848] + 16;
  v57 = 0u;
  v58 = 0u;
  v59 = 24;
  v60 = MEMORY[0x24BEDB828] + 24;
  v61.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v61, &v50);
  v62 = 0;
  v63 = -1;
  sub_20FDE6EC4(&v64, (char *)&v60, v11);
  sub_20FDE984C((uint64_t)&v49);
  v30 = v66;
  if (!v66)
    goto LABEL_73;
  v35 = (unint64_t *)&v66->__shared_owners_;
  do
    v32 = __ldaxr(v35);
  while (__stlxr(v32 - 1, v35));
LABEL_72:
  if (v32)
  {
LABEL_73:
    v36 = v46;
    if (v46 == -1)
      return;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v36 = v46;
  if (v46 != -1)
LABEL_74:
    ((void (*)(uint64_t *, char *))off_24CA080B0[v36])(&v49, v38);
}

void sub_20FDE96D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_20FDE984C((uint64_t)&a24);
  sub_20EA69690(v24 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE96FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x212BC6290](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20EA69690(v39 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE9740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20EA69690(v9 - 120);
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FDE975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_20FDDA124((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20FDDA124((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FDE984C(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_20E860B7C();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v24 = v3;
    v25 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v25);
  if (v25 >= 0)
    v11 = HIBYTE(v25);
  else
    v11 = v24;
  v12 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 88)
    || *(_QWORD *)(v12 + 80) != 7
    || ((v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (v16 = v15 == *(_DWORD *)"sion")
      : (v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    v27 = v11;
    v17 = (unsigned __int8 *)sub_2101FA67C(v12);
    v18 = *v17;
    *v17 = v26;
    LOBYTE(v26) = v18;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v27;
    v27 = v19;
    sub_20EB911C0(&v27, v18);
    v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v20 = 0;
    }
  }
  else
  {
    v20 = (void **)&__dst;
  }
  v21 = *(_QWORD *)a1;
  v26 = v11;
  v27 = (uint64_t)v20;
  sub_2101FAA20(v21, (size_t *)&v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_20FDE9A98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20EB911C0(v13, a13);
  sub_20E860DA4(a1);
}

void sub_20FDE9AB4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20FDE55A4((uint64_t)v8, a2);
  sub_20FDE9BD0(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20FDE9BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FDE1770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FDE9BD0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::string::value_type v9;
  _QWORD *v10;
  _QWORD *v11;
  int64x2_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::string v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v8, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 16);
  sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v10, (uint64_t)&__p, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = v9;
  sub_20E86A980(v11, (uint64_t)&__p, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
    sub_20E9E713C(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
    if (a3 < 4)
      return;
  }
  sub_20FDEA058(a1, a2 + 56);
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
      sub_20E9E713C(a1, a2 + 80);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
    }
    return;
  }
  if (a3 < 6)
    return;
  if (*(_BYTE *)(a2 + 104))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
    sub_20E9E713C(a1, a2 + 80);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_17;
LABEL_43:
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
    if (*(_QWORD *)(a1 + 40))
    {
      v22 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v22, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = 1;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
LABEL_45:
    v25.__r_.__value_.__s.__data_[0] = 0;
    sub_20E9E6F58(a1, (unsigned __int8 *)&v25);
    if (*(_QWORD *)(a1 + 40))
    {
      v23 = *(_QWORD **)(a1 + 24);
      v25.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v23, (uint64_t)&v25, 1);
      v24 = *(_QWORD *)(a1 + 40) + 1;
    }
    else
    {
      v24 = 1;
    }
    *(_QWORD *)(a1 + 40) = v24;
    return;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
  if (*(_QWORD *)(a1 + 40))
  {
    v21 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v21, (uint64_t)&__p, 1);
    ++*(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
LABEL_17:
  __p.__r_.__value_.__s.__data_[0] = 1;
  sub_20E9E6F58(a1, (unsigned __int8 *)&__p);
  sub_20E9E713C(a1, a2 + 112);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_45;
LABEL_18:
  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  if (v14 == v15)
  {
LABEL_36:
    sub_20E878290(v14, v15, ";", 1uLL, &v25, v12, v13);
  }
  else
  {
    v16 = *(uint64_t **)(a2 + 144);
    while (1)
    {
      v17 = *((unsigned __int8 *)v16 + 23);
      if ((v17 & 0x80u) == 0)
        v18 = v16;
      else
        v18 = (uint64_t *)*v16;
      if ((v17 & 0x80u) != 0)
        v17 = v16[1];
      if (v17)
      {
        v19 = 0;
        while (1)
        {
          v20 = *((unsigned __int8 *)v18 + v19);
          if (v20 == 59 || v20 == 92)
            break;
          if (v17 == ++v19)
            goto LABEL_20;
        }
        if (v17 != v19 && v19 != -1)
          break;
      }
LABEL_20:
      v16 += 3;
      if (v16 == (uint64_t *)v15)
        goto LABEL_36;
    }
    sub_20FDE5DC0(v14, v15, *(_QWORD *)(a2 + 152), ";", 1uLL, &v25);
  }
  __p = v25;
  v27 = 1;
  v25.__r_.__value_.__s.__data_[0] = 1;
  sub_20E9E6F58(a1, (unsigned __int8 *)&v25);
  sub_20E9E713C(a1, (uint64_t)&__p);
  if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20FDEA034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20FDEA058(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;
  char v16;

  if (*(_BYTE *)(a2 + 16))
  {
    v11 = 1;
    sub_20E9E6F58(a1, &v11);
    if (*(_QWORD *)(a1 + 40))
    {
      v4 = *(_QWORD **)(a1 + 24);
      v13 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v4, (uint64_t)&v13, 1);
    }
    std::ostream::operator<<();
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v5 + 1;
    if (v5 != -1)
    {
      v6 = *(_QWORD **)(a1 + 24);
      v14 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v6, (uint64_t)&v14, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    v12 = *(_BYTE *)(a2 + 8);
    sub_20E9E6F58(a1, &v12);
    v7 = *(_BYTE *)(a1 + 34);
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = *(_QWORD **)(a1 + 24);
      v15 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v8, (uint64_t)&v15, 1);
    }
    v9 = *(_QWORD **)(a1 + 24);
    v16 = v7;
    sub_20E86A980(v9, (uint64_t)&v16, 1);
    ++*(_QWORD *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    sub_20E9E6F58(a1, &v10);
  }
}

