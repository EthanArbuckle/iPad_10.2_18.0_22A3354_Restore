void sub_20ED53DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  __cxa_guard_abort(&qword_254A5F330);
  if (a58 < 0)
    operator delete(__p);
  sub_20EBA4920(&a12);
  sub_20EBA4990(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED54094(uint64_t a1)
{
  _QWORD **v1;

  v1 = *(_QWORD ***)(*(_QWORD *)(a1 + 56) + 72);
  (*(void (**)(_QWORD *))(*v1[9] + 64))(v1[9]);
  (*(void (**)(_QWORD *))(*v1[30] + 64))(v1[30]);
  return (*(uint64_t (**)(_QWORD *))(*v1[51] + 64))(v1[51]);
}

uint64_t sub_20ED540E0(uint64_t a1)
{
  uint64_t v1;
  std::__assoc_sub_state *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v11;
  std::__assoc_sub_state *v12;

  v1 = *(_QWORD *)(a1 + 72);
  v11 = 0;
  sub_20ED56F1C((uint64_t *)(v1 + 272), (uint64_t)&v11, (uint64_t *)&v12);
  v2 = v12;
  v12 = 0;
  sub_20ED572A8(v2);
  v4 = v3;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
      ((void (*)(std::__assoc_sub_state *))v2->__on_zero_shared)(v2);
  }
  v7 = (uint64_t)v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  return v4;
}

void sub_20ED54198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    v12 = v10 + 1;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(unint64_t *))(*v10 + 16))(v10);
  }
  if (a10)
  {
    v14 = a10 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED541FC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9E3DE0;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED54284(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9E3DE0;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_20ED54310()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F230);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F230))
  {
    sub_20ED54490();
    v1 = byte_254A5F417;
    if (byte_254A5F417 >= 0)
      v2 = byte_254A5F417;
    else
      v2 = *((_QWORD *)&xmmword_254A5F400 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5F3F0 = v2 + 6;
      unk_254A5F3F8 = v6 | 0x8000000000000000;
      qword_254A5F3E8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5F3F0 = 0;
      unk_254A5F3F8 = 0;
      qword_254A5F3E8 = 0x2074736E6F63;
      byte_254A5F3FF = v2 + 6;
      v4 = (char *)&qword_254A5F3E8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5F3E8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5F230);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5F400;
    else
      v8 = (__int128 *)xmmword_254A5F400;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20ED54478(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F230);
  _Unwind_Resume(a1);
}

void sub_20ED54490()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F238);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F238))
  {
    sub_20ED54548();
    if (byte_254A5F42F < 0)
    {
      sub_20E860C04(&xmmword_254A5F400, (void *)qword_254A5F418, unk_254A5F420);
    }
    else
    {
      xmmword_254A5F400 = *(_OWORD *)&qword_254A5F418;
      unk_254A5F410 = unk_254A5F428;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F400, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F238);
  }
}

void sub_20ED54530(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F238);
  _Unwind_Resume(a1);
}

void sub_20ED54548()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F240);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F240))
  {
    sub_20ED547F0(__p);
    sub_20ED5461C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5F418, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F240);
  }
}

void sub_20ED545DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F240);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F240);
  _Unwind_Resume(a1);
}

void sub_20ED5461C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5F248);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F248))
  {
    sub_20ED549CC();
    if (byte_254A5F45F < 0)
    {
      sub_20E860C04(&xmmword_254A5F430, (void *)qword_254A5F448, unk_254A5F450);
    }
    else
    {
      xmmword_254A5F430 = *(_OWORD *)&qword_254A5F448;
      unk_254A5F440 = unk_254A5F458;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F430, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F248);
  }
  if (byte_254A5F447 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F430, *((unint64_t *)&xmmword_254A5F430 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F430;
    v11 = unk_254A5F440;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5F418, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20ED547A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F248);
  _Unwind_Resume(a1);
}

void sub_20ED547C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20ED547F0(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F298);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F298))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::kit::concurrency::SingleConsumer<std::shared_ptr<std::vector<cv3d::vio::feature_detection::MLPointDescriptorStore>>>>]", qword_254A5F520);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F520, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F298);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5F2A0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F2A0))
  {
    v5 = sub_20E8A2354(qword_254A5F520, "<", 0);
    sub_20E89FC08(qword_254A5F520, 0, v5, qword_254A5F538);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F538, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F2A0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5F2A8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F2A8))
  {
    sub_21023CD84((uint64_t)qword_254A5F538, (uint64_t)&xmmword_254A5F550);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F550, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F2A8);
  }
  if (byte_254A5F567 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F550, *((unint64_t *)&xmmword_254A5F550 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F550;
    __dst[2] = unk_254A5F560;
  }
}

void sub_20ED54984(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F2A8);
  _Unwind_Resume(a1);
}

void sub_20ED5499C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F2A0);
  _Unwind_Resume(a1);
}

void sub_20ED549B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F298);
  _Unwind_Resume(a1);
}

void sub_20ED549CC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F250);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F250))
  {
    sub_20ED54C88(__p);
    sub_20ED54AA0((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5F448, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F250);
  }
}

void sub_20ED54A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F250);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F250);
  _Unwind_Resume(a1);
}

void sub_20ED54AA0(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5F258);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F258))
  {
    sub_20E8610C0(v10, "std::shared_ptr");
    sub_20ED54E64((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F460, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F258);
  }
  if (byte_254A5F477 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F460, *((unint64_t *)&xmmword_254A5F460 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F460;
    v13 = unk_254A5F470;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5F448, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20ED54C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F258);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F258);
  _Unwind_Resume(a1);
}

void sub_20ED54C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20ED54C88(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F280);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F280))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::SingleConsumer<std::shared_ptr<std::vector<cv3d::vio::feature_detection::MLPointDescriptorStore>>>]", qword_254A5F4D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F4D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F280);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5F288);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F288))
  {
    v5 = sub_20E8A2354(qword_254A5F4D8, "<", 0);
    sub_20E89FC08(qword_254A5F4D8, 0, v5, qword_254A5F4F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F4F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F288);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5F290);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F290))
  {
    sub_21023CD84((uint64_t)qword_254A5F4F0, (uint64_t)&xmmword_254A5F508);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F508, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F290);
  }
  if (byte_254A5F51F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F508, *((unint64_t *)&xmmword_254A5F508 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F508;
    __dst[2] = unk_254A5F518;
  }
}

void sub_20ED54E1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F290);
  _Unwind_Resume(a1);
}

void sub_20ED54E34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F288);
  _Unwind_Resume(a1);
}

void sub_20ED54E4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F280);
  _Unwind_Resume(a1);
}

void sub_20ED54E64(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5F260);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F260))
  {
    sub_20E8610C0(v10, "std::vector");
    sub_20ED5504C((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F478, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F260);
  }
  if (byte_254A5F48F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F478, *((unint64_t *)&xmmword_254A5F478 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F478;
    v13 = unk_254A5F488;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5F460, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20ED54FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F260);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F260);
  _Unwind_Resume(a1);
}

void sub_20ED55020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20ED5504C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5F268);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F268))
  {
    sub_20ED55220();
    if (byte_254A5F4D7 < 0)
    {
      sub_20E860C04(&xmmword_254A5F490, (void *)xmmword_254A5F4C0, *((unint64_t *)&xmmword_254A5F4C0 + 1));
    }
    else
    {
      xmmword_254A5F490 = xmmword_254A5F4C0;
      unk_254A5F4A0 = unk_254A5F4D0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F490, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F268);
  }
  if (byte_254A5F4A7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F490, *((unint64_t *)&xmmword_254A5F490 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F490;
    v11 = unk_254A5F4A0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5F478, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20ED551D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F268);
  _Unwind_Resume(a1);
}

void sub_20ED551F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20ED55220()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F270);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F270))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::feature_detection::MLPointDescriptorStore]", qword_254A5F4A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F4A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F270);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5F278);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5F278))
    {
      sub_21023CD84((uint64_t)qword_254A5F4A8, (uint64_t)&xmmword_254A5F4C0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F4C0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5F278);
    }
  }
}

void sub_20ED552F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F278);
  _Unwind_Resume(a1);
}

void sub_20ED55308(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F270);
  _Unwind_Resume(a1);
}

void sub_20ED55320()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F2B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F2B0))
  {
    sub_20ED553D8();
    if (byte_254A5F5AF < 0)
    {
      sub_20E860C04(&xmmword_254A5F568, (void *)xmmword_254A5F598, *((unint64_t *)&xmmword_254A5F598 + 1));
    }
    else
    {
      xmmword_254A5F568 = xmmword_254A5F598;
      unk_254A5F578 = unk_254A5F5A8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F568, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F2B0);
  }
}

void sub_20ED553C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F2B0);
  _Unwind_Resume(a1);
}

void sub_20ED553D8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F2B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F2B8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::SingleConsumer<std::shared_ptr<std::vector<cv3d::vio::feature_detection::MLPointDescriptorStore>>> (cv3d::kit::concurrency::ChannelLimitedInput<const cv3d::vio::ml_feature_detection_node_group::InputMetadata &, 1>)]", qword_254A5F580);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F580, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F2B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5F2C0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5F2C0))
    {
      sub_21023CD84((uint64_t)qword_254A5F580, (uint64_t)&xmmword_254A5F598);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F598, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5F2C0);
    }
  }
}

void sub_20ED554A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F2C0);
  _Unwind_Resume(a1);
}

void sub_20ED554C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F2B8);
  _Unwind_Resume(a1);
}

void sub_20ED554D8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F2D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F2D0))
  {
    sub_20ED55658();
    v1 = byte_254A5F5F7;
    if (byte_254A5F5F7 >= 0)
      v2 = byte_254A5F5F7;
    else
      v2 = *((_QWORD *)&xmmword_254A5F5E0 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5F5D0 = v2 + 6;
      unk_254A5F5D8 = v6 | 0x8000000000000000;
      qword_254A5F5C8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5F5D0 = 0;
      unk_254A5F5D8 = 0;
      qword_254A5F5C8 = 0x2074736E6F63;
      byte_254A5F5DF = v2 + 6;
      v4 = (char *)&qword_254A5F5C8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5F5C8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5F2D0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5F5E0;
    else
      v8 = (__int128 *)xmmword_254A5F5E0;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20ED55640(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F2D0);
  _Unwind_Resume(a1);
}

void sub_20ED55658()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F2D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F2D8))
  {
    sub_20ED55710();
    if (byte_254A5F60F < 0)
    {
      sub_20E860C04(&xmmword_254A5F5E0, (void *)qword_254A5F5F8, unk_254A5F600);
    }
    else
    {
      xmmword_254A5F5E0 = *(_OWORD *)&qword_254A5F5F8;
      unk_254A5F5F0 = unk_254A5F608;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F5E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F2D8);
  }
}

void sub_20ED556F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F2D8);
  _Unwind_Resume(a1);
}

void sub_20ED55710()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F2E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F2E0))
  {
    sub_20ED559B8(__p);
    sub_20ED557E4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5F5F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F2E0);
  }
}

void sub_20ED557A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F2E0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F2E0);
  _Unwind_Resume(a1);
}

void sub_20ED557E4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5F2E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F2E8))
  {
    sub_20ED55B94();
    if (byte_254A5F657 < 0)
    {
      sub_20E860C04(&xmmword_254A5F610, (void *)xmmword_254A5F640, *((unint64_t *)&xmmword_254A5F640 + 1));
    }
    else
    {
      xmmword_254A5F610 = xmmword_254A5F640;
      unk_254A5F620 = unk_254A5F650;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F610, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F2E8);
  }
  if (byte_254A5F627 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F610, *((unint64_t *)&xmmword_254A5F610 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F610;
    v11 = unk_254A5F620;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5F5F8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20ED55970(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F2E8);
  _Unwind_Resume(a1);
}

void sub_20ED5598C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20ED559B8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F300);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F300))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::mapping_types::MLModelVersion>]", qword_254A5F658);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F658, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F300);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5F308);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F308))
  {
    v5 = sub_20E8A2354(qword_254A5F658, "<", 0);
    sub_20E89FC08(qword_254A5F658, 0, v5, qword_254A5F670);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F670, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F308);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5F310);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F310))
  {
    sub_21023CD84((uint64_t)qword_254A5F670, (uint64_t)&xmmword_254A5F688);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F688, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F310);
  }
  if (byte_254A5F69F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F688, *((unint64_t *)&xmmword_254A5F688 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F688;
    __dst[2] = unk_254A5F698;
  }
}

void sub_20ED55B4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F310);
  _Unwind_Resume(a1);
}

void sub_20ED55B64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F308);
  _Unwind_Resume(a1);
}

void sub_20ED55B7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F300);
  _Unwind_Resume(a1);
}

void sub_20ED55B94()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F2F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F2F0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MLModelVersion]", qword_254A5F628);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F628, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F2F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5F2F8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5F2F8))
    {
      sub_21023CD84((uint64_t)qword_254A5F628, (uint64_t)&xmmword_254A5F640);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F640, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5F2F8);
    }
  }
}

void sub_20ED55C64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F2F8);
  _Unwind_Resume(a1);
}

void sub_20ED55C7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F2F0);
  _Unwind_Resume(a1);
}

void sub_20ED55C94()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F318);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F318))
  {
    sub_20ED55D4C();
    if (byte_254A5F6E7 < 0)
    {
      sub_20E860C04(&xmmword_254A5F6A0, (void *)xmmword_254A5F6D0, *((unint64_t *)&xmmword_254A5F6D0 + 1));
    }
    else
    {
      xmmword_254A5F6A0 = xmmword_254A5F6D0;
      unk_254A5F6B0 = unk_254A5F6E0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F6A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F318);
  }
}

void sub_20ED55D34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F318);
  _Unwind_Resume(a1);
}

void sub_20ED55D4C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F320);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F320))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MLModelVersion (int)]", qword_254A5F6B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F6B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F320);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5F328);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5F328))
    {
      sub_21023CD84((uint64_t)qword_254A5F6B8, (uint64_t)&xmmword_254A5F6D0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F6D0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5F328);
    }
  }
}

void sub_20ED55E1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F328);
  _Unwind_Resume(a1);
}

void sub_20ED55E34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F320);
  _Unwind_Resume(a1);
}

void sub_20ED55E4C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F338);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F338))
  {
    sub_20ED55FCC();
    v1 = byte_254A5F72F;
    if (byte_254A5F72F >= 0)
      v2 = byte_254A5F72F;
    else
      v2 = *((_QWORD *)&xmmword_254A5F718 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5F708 = v2 + 6;
      unk_254A5F710 = v6 | 0x8000000000000000;
      qword_254A5F700 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5F708 = 0;
      unk_254A5F710 = 0;
      qword_254A5F700 = 0x2074736E6F63;
      byte_254A5F717 = v2 + 6;
      v4 = (char *)&qword_254A5F700 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5F700, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5F338);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5F718;
    else
      v8 = (__int128 *)xmmword_254A5F718;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20ED55FB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F338);
  _Unwind_Resume(a1);
}

void sub_20ED55FCC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F340);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F340))
  {
    sub_20ED56084();
    if (byte_254A5F747 < 0)
    {
      sub_20E860C04(&xmmword_254A5F718, (void *)qword_254A5F730, unk_254A5F738);
    }
    else
    {
      xmmword_254A5F718 = *(_OWORD *)&qword_254A5F730;
      unk_254A5F728 = unk_254A5F740;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F718, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F340);
  }
}

void sub_20ED5606C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F340);
  _Unwind_Resume(a1);
}

void sub_20ED56084()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F348);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F348))
  {
    sub_20ED5632C(__p);
    sub_20ED56158((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5F730, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F348);
  }
}

void sub_20ED56118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F348);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F348);
  _Unwind_Resume(a1);
}

void sub_20ED56158(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5F350);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F350))
  {
    sub_20ED56508();
    if (byte_254A5F777 < 0)
    {
      sub_20E860C04(&xmmword_254A5F748, (void *)qword_254A5F760, unk_254A5F768);
    }
    else
    {
      xmmword_254A5F748 = *(_OWORD *)&qword_254A5F760;
      unk_254A5F758 = unk_254A5F770;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F748, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F350);
  }
  if (byte_254A5F75F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F748, *((unint64_t *)&xmmword_254A5F748 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F748;
    v11 = unk_254A5F758;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5F730, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20ED562E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F350);
  _Unwind_Resume(a1);
}

void sub_20ED56300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20ED5632C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F3A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F3A0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::kit::cf::Ref<const __CFArray *>>]", qword_254A5F838);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F838, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F3A0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5F3A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F3A8))
  {
    v5 = sub_20E8A2354(qword_254A5F838, "<", 0);
    sub_20E89FC08(qword_254A5F838, 0, v5, qword_254A5F850);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F850, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F3A8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5F3B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F3B0))
  {
    sub_21023CD84((uint64_t)qword_254A5F850, (uint64_t)&xmmword_254A5F868);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F868, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F3B0);
  }
  if (byte_254A5F87F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F868, *((unint64_t *)&xmmword_254A5F868 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F868;
    __dst[2] = unk_254A5F878;
  }
}

void sub_20ED564C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F3B0);
  _Unwind_Resume(a1);
}

void sub_20ED564D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F3A8);
  _Unwind_Resume(a1);
}

void sub_20ED564F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F3A0);
  _Unwind_Resume(a1);
}

void sub_20ED56508()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F358);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F358))
  {
    sub_20ED56850(__p);
    sub_20ED565DC((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5F760, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F358);
  }
}

void sub_20ED5659C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F358);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F358);
  _Unwind_Resume(a1);
}

void sub_20ED565DC(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  int v8;
  size_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5F360);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5F360))
    goto LABEL_2;
  sub_20ED56A2C();
  v8 = byte_254A5F7A7;
  if (byte_254A5F7A7 >= 0)
    v9 = byte_254A5F7A7;
  else
    v9 = qword_254A5F798;
  v10 = v9 + 1;
  if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v11 = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&xmmword_254A5F778 + 1) = v9 + 1;
    unk_254A5F788 = v13 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5F778 = v11;
    goto LABEL_27;
  }
  v11 = &xmmword_254A5F778;
  unk_254A5F788 = 0;
  xmmword_254A5F778 = 0uLL;
  byte_254A5F78F = v9 + 1;
  if (v9)
  {
LABEL_27:
    if (v8 >= 0)
      v14 = &qword_254A5F790;
    else
      v14 = (uint64_t *)qword_254A5F790;
    memmove(v11, v14, v9);
  }
  *(_WORD *)((char *)v11 + v9) = 42;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F778, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5F360);
LABEL_2:
  if (byte_254A5F78F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F778, *((unint64_t *)&xmmword_254A5F778 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F778;
    v18 = unk_254A5F788;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5F760, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v16;
    v7 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v16 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__dst[0]);
}

void sub_20ED56808(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F360);
  _Unwind_Resume(a1);
}

void sub_20ED56824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20ED56850(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F388);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F388))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cf::Ref<const __CFArray *>]", qword_254A5F7F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F7F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F388);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5F390);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F390))
  {
    v5 = sub_20E8A2354(qword_254A5F7F0, "<", 0);
    sub_20E89FC08(qword_254A5F7F0, 0, v5, qword_254A5F808);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F808, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F390);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5F398);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F398))
  {
    sub_21023CD84((uint64_t)qword_254A5F808, (uint64_t)&xmmword_254A5F820);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F820, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F398);
  }
  if (byte_254A5F837 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5F820, *((unint64_t *)&xmmword_254A5F820 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5F820;
    __dst[2] = unk_254A5F830;
  }
}

void sub_20ED569E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F398);
  _Unwind_Resume(a1);
}

void sub_20ED569FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F390);
  _Unwind_Resume(a1);
}

void sub_20ED56A14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F388);
  _Unwind_Resume(a1);
}

void sub_20ED56A2C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F368);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F368))
  {
    sub_20ED56BAC();
    v1 = byte_254A5F7BF;
    if (byte_254A5F7BF >= 0)
      v2 = byte_254A5F7BF;
    else
      v2 = *((_QWORD *)&xmmword_254A5F7A8 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5F798 = v2 + 6;
      unk_254A5F7A0 = v6 | 0x8000000000000000;
      qword_254A5F790 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5F798 = 0;
      unk_254A5F7A0 = 0;
      qword_254A5F790 = 0x2074736E6F63;
      byte_254A5F7A7 = v2 + 6;
      v4 = (char *)&qword_254A5F790 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5F790, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5F368);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5F7A8;
    else
      v8 = (__int128 *)xmmword_254A5F7A8;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20ED56B94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F368);
  _Unwind_Resume(a1);
}

void sub_20ED56BAC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F370);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F370))
  {
    sub_20ED56C64();
    if (byte_254A5F7EF < 0)
    {
      sub_20E860C04(&xmmword_254A5F7A8, (void *)xmmword_254A5F7D8, *((unint64_t *)&xmmword_254A5F7D8 + 1));
    }
    else
    {
      xmmword_254A5F7A8 = xmmword_254A5F7D8;
      unk_254A5F7B8 = unk_254A5F7E8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F7A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F370);
  }
}

void sub_20ED56C4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F370);
  _Unwind_Resume(a1);
}

void sub_20ED56C64()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F378);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F378))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = __CFArray]", qword_254A5F7C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F7C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F378);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5F380);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5F380))
    {
      sub_21023CD84((uint64_t)qword_254A5F7C0, (uint64_t)&xmmword_254A5F7D8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F7D8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5F380);
    }
  }
}

void sub_20ED56D34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F380);
  _Unwind_Resume(a1);
}

void sub_20ED56D4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F378);
  _Unwind_Resume(a1);
}

void sub_20ED56D64()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F3B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F3B8))
  {
    sub_20ED56E1C();
    if (byte_254A5F8C7 < 0)
    {
      sub_20E860C04(&xmmword_254A5F880, (void *)xmmword_254A5F8B0, *((unint64_t *)&xmmword_254A5F8B0 + 1));
    }
    else
    {
      xmmword_254A5F880 = xmmword_254A5F8B0;
      unk_254A5F890 = unk_254A5F8C0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F880, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F3B8);
  }
}

void sub_20ED56E04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F3B8);
  _Unwind_Resume(a1);
}

void sub_20ED56E1C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5F3C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F3C0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cf::Ref<const __CFArray *> (BOOL)]", qword_254A5F898);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5F898, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5F3C0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5F3C8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5F3C8))
    {
      sub_21023CD84((uint64_t)qword_254A5F898, (uint64_t)&xmmword_254A5F8B0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5F8B0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5F3C8);
    }
  }
}

void sub_20ED56EEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F3C8);
  _Unwind_Resume(a1);
}

void sub_20ED56F04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5F3C0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED56F1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9E3E28;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_20ED4ADEC(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20ED4ADEC(&v23);
}

void sub_20ED570D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20ED4ADEC((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20ED4ADEC((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20ED570E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20ED4ADEC(&a15);
  _Unwind_Resume(a1);
}

void sub_20ED570FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20ED4ADEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20ED57110(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20ED5705CLL);
    JUMPOUT(0x20ED5702CLL);
  }
  sub_20E96CE78(3u);
}

void sub_20ED57170(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20ED571E0);
  JUMPOUT(0x20ED571B8);
}

void sub_20ED571F0(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20ED5723C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED5729C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_20ED572A8(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_20ED57344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED57370(uint64_t result)
{
  if (result)
  {
    sub_20ED519A0(result);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20ED5739C@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t result;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);

  v10 = operator new();
  v11 = *a1;
  v12 = *a2;
  v13 = (uint64_t (*)(uint64_t))a2[1];
  *a2 = 0;
  v15 = v12;
  v16 = v13;
  sub_20ED5AFA4(v10, v11, &v15, *a3, a4);
  *a5 = v10;
  a5[1] = (uint64_t)sub_20ED5BA20;
  result = v15;
  v15 = 0;
  if (result)
    return v16(result);
  return result;
}

void sub_20ED57440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(void))
{
  uint64_t v10;

  if (a9)
    a10();
  MEMORY[0x212BC6398](v10, 0x10B2C40CD456370);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED5747C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20ED574E4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_20ED57554(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F8D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F8D8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F8D0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F8D8);
  }
  *a1 = qword_254A5F8D0;
}

void sub_20ED575F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F8D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F8D8);
  _Unwind_Resume(a1);
}

void sub_20ED57648(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned __int8 v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  int v53;
  void *p_p;
  uint64_t v55;
  char v56;
  size_t v57;
  void *v58;
  unint64_t v59;
  const void **v60;
  const void *v61;
  std::__shared_weak_count_vtbl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  size_t v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  const char *v72;
  size_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  size_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  size_t v85;
  size_t v86;
  _BYTE *v87;
  void *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  char *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *shared_owners;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  const char *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  int v121;
  float v122;
  _QWORD *v123;
  char v124;
  uint64_t v125;
  _DWORD *v126;
  _DWORD *v127;
  uint64_t v128;
  int v129;
  uint64_t v131;
  uint64_t *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  os_log_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  os_log_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::string::size_type size;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  int v173;
  int v174;
  std::string::size_type v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  uint64_t *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  os_log_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  __float2 v193;
  unsigned int v194;
  float32x2_t v195;
  unsigned int i;
  float32x2_t v197;
  float32x2_t v198;
  float32x2_t v199;
  int32x2_t v200;
  int32x2_t v201;
  void *v202;
  uint64_t v203;
  os_log_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t (***v225)();
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  int64_t v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t (***v244)();
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  __int128 v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t v274;
  int v275;
  int v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  const char *v280;
  size_t v281;
  unsigned __int8 v282;
  unsigned __int8 v283;
  const char *v284;
  size_t v285;
  uint64_t v286;
  NSObject *v287;
  uint64_t v288;
  uint64_t v289;
  NSObject *v290;
  NSObject *v291;
  uint64_t v292;
  uint64_t v293;
  size_t v294;
  NSObject *v295;
  NSObject *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t v300;
  os_log_t v301;
  _DWORD *v302;
  char *v303;
  uint64_t v304;
  const char *v305;
  void *v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  void *v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  __int128 v341;
  __int128 v342;
  std::logic_error *exception;
  unsigned __int8 v344;
  std::string *v345;
  uint64_t *v346;
  unint64_t v347;
  std::string::size_type v348;
  std::string *v349;
  uint64_t (***v350)();
  int v351;
  size_t v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  void *v363;
  std::string::size_type v364;
  std::string *v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  std::string *v369;
  std::string *v370;
  __int128 v371;
  __int128 *v372;
  __int128 v373;
  int64x2_t v374;
  int8x16_t v375;
  void **v376;
  void **v377;
  void *v378;
  uint64_t v379;
  NSObject *v380;
  NSObject *v381;
  NSObject *v382;
  NSObject *v383;
  const char *v384;
  uint64_t v385;
  __int128 *v386;
  uint64_t *v387;
  std::__shared_weak_count_vtbl *v388;
  const char *v389;
  int v390;
  int v391;
  __int128 *v392;
  __int128 *v393;
  float *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  __int128 v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  float *v402;
  void *v403[2];
  uint64_t v404;
  _QWORD *v405;
  __int128 v406;
  _OWORD v407[2];
  int v408;
  __int128 v409;
  _QWORD v410[4];
  _BYTE v411[536];
  char v412;
  __int128 v413;
  int v414;
  void *v415;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v417;
  _BYTE v418[32];
  uint64_t v419;
  std::__shared_weak_count *v420;
  _OWORD v421[3];
  _OWORD v422[2];
  uint64_t v423;
  std::__shared_weak_count *v424;
  uint64_t v425;
  std::__shared_weak_count *v426;
  void *v427;
  os_log_t v428;
  std::__shared_weak_count *v429;
  _OWORD v430[2];
  void *__p;
  uint64_t (***v432)();
  int64_t v433;
  _BYTE v434[24];
  __int16 v435;
  uint64_t (**v436)();
  __int128 v437;
  uint64_t v438;
  _QWORD v439[2];
  std::__shared_weak_count *v440;
  uint64_t (**v441)();
  uint64_t *v442;
  std::__shared_weak_count *v443;
  uint64_t v444;
  _OWORD v445[2];
  int v446;
  _BYTE v447[25];
  std::string v448;
  std::string v449;
  void *v450;
  void **v451;
  void *v452[2];
  char v453;
  std::string __s;
  os_log_t oslog[7];
  unint64_t v456;
  char v457;
  unint64_t v458;
  void *v459;
  char v460;
  unint64_t v461;
  int v462;
  uint64_t v463;
  _BYTE object[24];
  void *v465;
  std::string *v466;
  void *v467;
  const char *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  std::string v471;
  os_log_t v472;
  __int128 v473;
  __int16 v474;
  uint64_t v475;

  v4 = a1;
  v475 = *MEMORY[0x24BDAC8D0];
  sub_20ED39608((void ***)(*a1 + 24), (__int128 **)a2, (uint64_t)v403);
  if (!*(_BYTE *)(*v4 + 20))
  {
    *(_OWORD *)a3 = *(_OWORD *)v403;
    *(_QWORD *)(a3 + 16) = v404;
    return;
  }
  v379 = a3;
  v6 = *(__int128 **)a2;
  v7 = *(__int128 **)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 24);
  v399 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 48);
  v395 = *(_QWORD *)(a2 + 56);
  v402 = *(float **)(a2 + 72);
  v394 = *(float **)(a2 + 80);
  v10 = -((uint64_t)(*(_QWORD *)a2 - (_QWORD)v7) >> 6);
  v405 = 0;
  v406 = 0uLL;
  sub_20ED343BC((uint64_t)&v405, v10);
  if (v6 != v7 || v8 != v399 || v9 != v395 || v402 != v394)
  {
    v381 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 64);
    v382 = *MEMORY[0x24BEDB7F0];
    v383 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 72);
    __asm { FMOV            V9.2S, #-1.0 }
    v380 = (MEMORY[0x24BEDB848] + 16);
    v386 = v7;
    v387 = v4;
    do
    {
      v421[0] = *(_OWORD *)v9;
      v32 = *(_OWORD *)(v9 + 16);
      v33 = *(_OWORD *)(v9 + 32);
      v34 = *(_OWORD *)(v9 + 48);
      *(_OWORD *)((char *)v422 + 9) = *(_OWORD *)(v9 + 57);
      v422[0] = v34;
      v421[2] = v33;
      v421[1] = v32;
      v35 = *(std::__shared_weak_count **)(v9 + 88);
      v423 = *(_QWORD *)(v9 + 80);
      v424 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(p_shared_owners);
        while (__stxr(v37 + 1, p_shared_owners));
      }
      v38 = *(std::__shared_weak_count **)(v9 + 104);
      v425 = *(_QWORD *)(v9 + 96);
      v426 = v38;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v41 = (std::__shared_weak_count_vtbl *)sub_20EAAB158(v421);
      v42 = v426;
      if (!v426)
        goto LABEL_33;
      v43 = (unint64_t *)&v426->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        v45 = v424;
        if (!v424)
          goto LABEL_39;
      }
      else
      {
LABEL_33:
        v45 = v424;
        if (!v424)
          goto LABEL_39;
      }
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
LABEL_39:
      v48 = atomic_load((unsigned __int8 *)&qword_254A5F8D8);
      if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F8D8))
      {
        sub_21021D3D8(object);
        HIBYTE(oslog[2]) = 8;
        strcpy((char *)oslog, "cv3d.vio");
        sub_20E8C4068((uint64_t **)object, (uint64_t)oslog, &qword_254A5F8D0);
        if (SHIBYTE(oslog[2]) < 0)
          operator delete(oslog[0]);
        __cxa_guard_release(&qword_254A5F8D8);
        v7 = v386;
        v4 = v387;
      }
      *(_QWORD *)v447 = qword_254A5F8D0;
      if (**(int **)(qword_254A5F8D0 + 56) <= 2)
      {
        v49 = *(unsigned __int8 *)(qword_254A5F8D0 + 72);
        v50 = sub_20E8C31DC(qword_254A5F8D0, "OSLogSurrogateAppender", 1, 0);
        v51 = v50;
        if (v49 || v50 != 0)
        {
          sub_20E863438((uint64_t)oslog);
          v53 = *((_DWORD *)v6 + 2);
          *(_QWORD *)object = *(_QWORD *)v6;
          *(_DWORD *)&object[8] = v53;
          sub_210216370((uint64_t)object);
          *(_DWORD *)v418 = 0;
          sub_20EAA4AA0(&v415, "MLFeatureExtractor: extract feature for ");
          *(_QWORD *)object = &v415;
          *(_QWORD *)&object[8] = &v427;
          *(_QWORD *)&object[16] = &v415;
          v465 = &v427;
          v466 = (std::string *)&v427;
          if (*(_DWORD *)v418 == -1)
            sub_20E877AB8();
          v471.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
          ((void (*)(std::string *, void **))off_24C9E3F70[*(unsigned int *)v418])(&v471, &v415);
          *(_QWORD *)object = &v415;
          *(_QWORD *)&object[8] = "_";
          *(_QWORD *)&object[16] = &v415;
          v465 = "_";
          v466 = (std::string *)"_";
          if (*(_DWORD *)v418 == -1)
            sub_20E877AB8();
          v471.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
          ((void (*)(std::string *, void **))off_24C9E3FB8[*(unsigned int *)v418])(&v471, &v415);
          v390 = v49;
          std::to_string(&v471, *((_DWORD *)v6 + 4));
          *(_QWORD *)object = &v415;
          *(_QWORD *)&object[8] = &v471;
          *(_QWORD *)&object[16] = &v415;
          v465 = &v471;
          v466 = &v471;
          if (*(_DWORD *)v418 == -1)
            sub_20E877AB8();
          *(_QWORD *)&v445[0] = object;
          ((void (*)(_OWORD *, void **))off_24C9E3F88[*(unsigned int *)v418])(v445, &v415);
          if (SHIBYTE(v471.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v471.__r_.__value_.__l.__data_);
          *(_QWORD *)object = &v415;
          *(_QWORD *)&object[8] = "[ timestamp: (";
          *(_QWORD *)&object[16] = &v415;
          v465 = "[ timestamp: (";
          v466 = (std::string *)"[ timestamp: (";
          if (*(_DWORD *)v418 == -1)
            sub_20E877AB8();
          v471.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
          ((void (*)(std::string *, void **))off_24C9E3FD0[*(unsigned int *)v418])(&v471, &v415);
          sub_20E87876C((uint64_t)v445, (uint64_t)&v415, (double *)v6 + 3);
          *(_QWORD *)object = &v415;
          *(_QWORD *)&object[8] = ")].";
          *(_QWORD *)&object[16] = &v415;
          v465 = ")].";
          v466 = (std::string *)")].";
          if (*(_DWORD *)v418 == -1)
            sub_20E877AB8();
          v471.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
          ((void (*)(std::string *, void **))off_24C9E3FE8[*(unsigned int *)v418])(&v471, &v415);
          if (*(_DWORD *)v418 == -1)
            sub_20E877AB8();
          *(_QWORD *)object = &v471;
          ((void (*)(void **__return_ptr, _BYTE *, void **))off_24C9E3FA0[*(unsigned int *)v418])(&__p, object, &v415);
          if (*(_DWORD *)v418 != -1)
            ((void (*)(_BYTE *, void **))off_24C9E3F58[*(unsigned int *)v418])(object, &v415);
          if (v433 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v433 >= 0)
            v55 = HIBYTE(v433);
          else
            v55 = (uint64_t)v432;
          sub_20E86A980(&oslog[2], (uint64_t)p_p, v55);
          if (SHIBYTE(v433) < 0)
          {
            operator delete(__p);
            if (SHIBYTE(v429) < 0)
              goto LABEL_67;
LABEL_63:
            v56 = v462;
            if ((v462 & 0x10) == 0)
              goto LABEL_64;
LABEL_68:
            v59 = v461;
            v60 = (const void **)&v457;
            if (v461 < v458)
            {
              v461 = v458;
              v59 = v458;
              v60 = (const void **)&v457;
            }
          }
          else
          {
            if ((SHIBYTE(v429) & 0x80000000) == 0)
              goto LABEL_63;
LABEL_67:
            operator delete(v427);
            v56 = v462;
            if ((v462 & 0x10) != 0)
              goto LABEL_68;
LABEL_64:
            if ((v56 & 8) == 0)
            {
              v57 = 0;
              HIBYTE(v433) = 0;
              v58 = &__p;
              goto LABEL_79;
            }
            v59 = v456;
            v60 = (const void **)&oslog[5];
          }
          v61 = *v60;
          v57 = v59 - (_QWORD)*v60;
          if (v57 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v57 >= 0x17)
          {
            v62 = v41;
            v63 = v9;
            v64 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v57 | 7) != 0x17)
              v64 = v57 | 7;
            v65 = v64 + 1;
            v58 = operator new(v64 + 1);
            v433 = v65 | 0x8000000000000000;
            __p = v58;
            v432 = (uint64_t (***)())v57;
            v9 = v63;
            v41 = v62;
          }
          else
          {
            HIBYTE(v433) = v59 - *(_BYTE *)v60;
            v58 = &__p;
            if (!v57)
            {
LABEL_79:
              *((_BYTE *)v58 + v57) = 0;
              v415 = v447;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v417 = std::chrono::system_clock::now().__d_.__rep_;
              *(_DWORD *)v418 = 2;
              *(_QWORD *)&v418[8] = "unknown file";
              *(_DWORD *)&v418[16] = 202;
              *(_QWORD *)&v418[24] = "unknown function";
              v419 = 0;
              v420 = 0;
              if (v433 >= 0)
                v66 = (const char *)&__p;
              else
                v66 = (const char *)__p;
              v67 = *(_QWORD *)v415;
              v68 = (const char *)(*(_QWORD *)v415 + 16);
              v388 = v41;
              v384 = v68;
              v385 = *(_QWORD *)v415;
              if (*(char *)(*(_QWORD *)v415 + 39) < 0)
              {
                v68 = *(const char **)(v67 + 16);
                v69 = *(_QWORD *)(v67 + 24);
                v396 = v8;
                v71 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v71 & 1) == 0)
                {
LABEL_562:
                  if (__cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)&v471);
                    if ((_BYTE)v472)
                    {
                      *(std::string *)byte_254A4A4F8 = v471;
                    }
                    else
                    {
                      byte_254A4A4F8[23] = 14;
                      strcpy(byte_254A4A4F8, "com.apple.cv3d");
                    }
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                    v7 = v386;
                  }
                }
              }
              else
              {
                v69 = *(unsigned __int8 *)(*(_QWORD *)v415 + 39);
                v396 = v8;
                v70 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v70 & 1) == 0)
                  goto LABEL_562;
              }
              if (byte_254A4A4F8[23] >= 0)
                v72 = byte_254A4A4F8;
              else
                v72 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v73 = byte_254A4A4F8[23];
              else
                v73 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)object = os_log_create(v72, v68);
              if (v73 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v400 = v9;
              if (v73 >= 0x17)
              {
                v75 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v73 | 7) != 0x17)
                  v75 = v73 | 7;
                v76 = v75 + 1;
                v74 = operator new(v75 + 1);
                v465 = (void *)(v76 | 0x8000000000000000);
                *(_QWORD *)&object[8] = v74;
                *(_QWORD *)&object[16] = v73;
                v7 = v386;
              }
              else
              {
                HIBYTE(v465) = v73;
                v74 = &object[8];
                if (!v73)
                {
LABEL_100:
                  v74[v73] = 0;
                  LOBYTE(v466) = 1;
                  if (v69 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v4 = v387;
                  if (v69 >= 0x17)
                  {
                    v79 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v69 | 7) != 0x17)
                      v79 = v69 | 7;
                    v80 = v79 + 1;
                    v77 = operator new(v79 + 1);
                    v469 = v80 | 0x8000000000000000;
                    v467 = v77;
                    v468 = (const char *)v69;
                    v8 = v396;
                  }
                  else
                  {
                    HIBYTE(v469) = v69;
                    v77 = &v467;
                    v8 = v396;
                    if (!v69)
                    {
                      LOBYTE(v467) = 0;
                      LOBYTE(v470) = 1;
                      v78 = *(NSObject **)object;
                      if ((SHIBYTE(v469) & 0x80000000) == 0)
                        goto LABEL_104;
LABEL_110:
                      operator delete(v467);
                      v9 = v400;
                      if ((_BYTE)v466)
                        goto LABEL_111;
                      goto LABEL_113;
                    }
                  }
                  memmove(v77, v68, v69);
                  *((_BYTE *)v77 + v69) = 0;
                  LOBYTE(v470) = 1;
                  v78 = *(NSObject **)object;
                  if (SHIBYTE(v469) < 0)
                    goto LABEL_110;
LABEL_104:
                  v9 = v400;
                  if ((_BYTE)v466)
                  {
LABEL_111:
                    if (SHIBYTE(v465) < 0)
                      operator delete(*(void **)&object[8]);
                  }
LABEL_113:
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (v51 && *(_QWORD *)(v51 + 24))
                  {
                    v81 = _os_log_pack_size();
                    v82 = (std::__shared_weak_count_vtbl *)operator new(v81, (std::align_val_t)8uLL);
                    v83 = (std::__shared_weak_count *)operator new();
                    v83->__shared_owners_ = 0;
                    v84 = (unint64_t *)&v83->__shared_owners_;
                    v83->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v83->__shared_weak_owners_ = 0;
                    v83[1].__vftable = v82;
                    v85 = strlen(v66);
                    if (v85 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v86 = v85;
                    if (v85 >= 0x17)
                    {
                      v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v85 | 7) != 0x17)
                        v90 = v85 | 7;
                      v91 = v90 + 1;
                      v87 = operator new(v90 + 1);
                      *(_QWORD *)&object[16] = v91 | 0x8000000000000000;
                      *(_QWORD *)object = v87;
                      *(_QWORD *)&object[8] = v86;
                    }
                    else
                    {
                      object[23] = v85;
                      v87 = object;
                      if (!v85)
                        goto LABEL_127;
                    }
                    memcpy(v87, v66, v86);
LABEL_127:
                    v392 = v6;
                    v87[v86] = 0;
                    v92 = *(_QWORD *)object;
                    v471.__r_.__value_.__r.__words[0] = *(_QWORD *)&object[8];
                    *(std::string::size_type *)((char *)v471.__r_.__value_.__r.__words + 7) = *(_QWORD *)&object[15];
                    v93 = object[23];
                    v94 = operator new(0x38uLL);
                    v95 = (std::__shared_weak_count *)v94;
                    v94[1] = 0;
                    v96 = v94 + 1;
                    v94[2] = 0;
                    v94[3] = off_24C9ABC20;
                    v97 = (char *)(v94 + 3);
                    v94[4] = v92;
                    v98 = (char *)(v94 + 4);
                    *v94 = &off_24C9ABBD0;
                    v94[5] = v471.__r_.__value_.__r.__words[0];
                    *(_QWORD *)((char *)v94 + 47) = *(std::string::size_type *)((char *)v471.__r_.__value_.__r.__words
                                                                              + 7);
                    *((_BYTE *)v94 + 55) = v93;
                    do
                      v99 = __ldxr(v84);
                    while (__stxr(v99 + 1, v84));
                    v8 = v396;
                    do
                      v100 = __ldxr(v96);
                    while (__stxr(v100 + 1, v96));
                    do
                      v101 = __ldaxr(v96);
                    while (__stlxr(v101 - 1, v96));
                    if (!v101)
                    {
                      (*(void (**)(_QWORD *))(*v94 + 16))(v94);
                      std::__shared_weak_count::__release_weak(v95);
                    }
                    do
                      v102 = __ldaxr(v84);
                    while (__stlxr(v102 - 1, v84));
                    if (!v102)
                    {
                      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                      std::__shared_weak_count::__release_weak(v83);
                    }
                    if (SHIBYTE(v95[2].__vftable) >= 0)
                      shared_owners = v98;
                    else
                      shared_owners = (char *)v95[1].__shared_owners_;
                    v104 = _os_log_pack_fill();
                    *(_DWORD *)v104 = 136315138;
                    *(_QWORD *)(v104 + 4) = shared_owners;
                    v105 = operator new();
                    v106 = *(unsigned __int8 *)(v385 + 39);
                    v107 = v384;
                    if ((v106 & 0x80u) != 0)
                    {
                      v107 = *(const char **)(v385 + 16);
                      v106 = *(_QWORD *)(v385 + 24);
                    }
                    *(_QWORD *)v105 = v82;
                    *(_QWORD *)(v105 + 8) = v82;
                    *(_QWORD *)(v105 + 16) = v83;
                    *(_QWORD *)(v105 + 24) = v97;
                    *(_QWORD *)(v105 + 32) = v95;
                    *(_QWORD *)(v105 + 40) = v107;
                    *(_QWORD *)(v105 + 48) = v106;
                    *(_BYTE *)(v105 + 56) = 2;
                    *(_QWORD *)object = v105;
                    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v51 + 24) + 40))(*(_QWORD *)(v51 + 24), object);
                    v41 = v388;
                    v108 = *(_QWORD *)object;
                    *(_QWORD *)object = 0;
                    v7 = v386;
                    v4 = v387;
                    v6 = v392;
                    v9 = v400;
                    v89 = v390;
                    if (v108)
                    {
                      v109 = *(std::__shared_weak_count **)(v108 + 32);
                      if (v109)
                      {
                        v110 = (unint64_t *)&v109->__shared_owners_;
                        do
                          v111 = __ldaxr(v110);
                        while (__stlxr(v111 - 1, v110));
                        if (!v111)
                        {
                          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                          std::__shared_weak_count::__release_weak(v109);
                        }
                      }
                      v112 = *(std::__shared_weak_count **)(v108 + 16);
                      if (v112)
                      {
                        v113 = (unint64_t *)&v112->__shared_owners_;
                        do
                          v114 = __ldaxr(v113);
                        while (__stlxr(v114 - 1, v113));
                        if (!v114)
                        {
                          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                          std::__shared_weak_count::__release_weak(v112);
                        }
                      }
                      MEMORY[0x212BC6398](v108, 0x10F0C40B62ED6C6);
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)object = 136315138;
                    *(_QWORD *)&object[4] = v66;
                    v88 = (void *)_os_log_send_and_compose_impl();
                    v89 = v390;
                    if (v88)
                      free(v88);
                  }
                  if (v89)
                  {
                    v115 = (const char *)&__p;
                    if (v433 < 0)
                      v115 = (const char *)__p;
                    sub_20E8C003C((uint64_t)&v415, "%s", v115);
                    sub_20E863570((uint64_t)&v415);
                  }
                  sub_20E863570((uint64_t)&v415);
                  v116 = v420;
                  if (!v420)
                    goto LABEL_162;
                  v117 = (unint64_t *)&v420->__shared_owners_;
                  do
                    v118 = __ldaxr(v117);
                  while (__stlxr(v118 - 1, v117));
                  if (!v118)
                  {
                    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                    std::__shared_weak_count::__release_weak(v116);
                    if (SHIBYTE(v433) < 0)
LABEL_163:
                      operator delete(__p);
                  }
                  else
                  {
LABEL_162:
                    if (SHIBYTE(v433) < 0)
                      goto LABEL_163;
                  }
                  oslog[0] = v382;
                  *(os_log_t *)((char *)oslog + (unint64_t)v382[-3].isa) = v381;
                  oslog[2] = v383;
                  oslog[3] = v380;
                  if (v460 < 0)
                    operator delete(v459);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v463);
                  goto LABEL_167;
                }
              }
              memmove(v74, v72, v73);
              goto LABEL_100;
            }
          }
          memmove(v58, v61, v57);
          goto LABEL_79;
        }
      }
LABEL_167:
      v119 = *((_QWORD *)v6 + 3);
      v413 = *v6;
      v414 = *((_DWORD *)v6 + 4);
      v401 = *((_DWORD *)v6 + 8);
      v120 = (uint64_t *)*v4;
      v121 = *(unsigned __int8 *)(*v4 + 40);
      if (*(_BYTE *)(*v4 + 40))
      {
        v122 = *v402;
        if (*v120)
          goto LABEL_193;
      }
      else
      {
        v122 = 0.0;
        if (*v120)
          goto LABEL_193;
      }
      v123 = v120 + 6;
      oslog[0] = 0;
      v124 = *((_BYTE *)v120 + 71);
      if (v124 >= 0)
        v125 = *((unsigned __int8 *)v120 + 71);
      else
        v125 = v120[7];
      if (v125 == 9)
      {
        v127 = (_DWORD *)*v123;
        if (v124 >= 0)
          v127 = v120 + 6;
        v128 = *(_QWORD *)v127;
        v129 = *((unsigned __int8 *)v127 + 8);
        if (v128 != 0x61656665736E6564 || v129 != 116)
        {
LABEL_179:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLFeatureExtractor.cpp", 137, (uint64_t)"(feature_extractor_type == \"none\" || feature_extractor_type == \"densefeat\") && \"feature extractor type is not supported\"", 120, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_590;
          }
        }
      }
      else
      {
        if (v125 != 4)
          goto LABEL_179;
        v126 = (_DWORD *)*v123;
        if (v124 >= 0)
          v126 = v120 + 6;
        if (*v126 != 1701736302)
          goto LABEL_179;
      }
      if (LFV2HandleCreate()
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLFeatureExtractor.cpp", 49, (uint64_t)"ret == kLFReturnNoError", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_590:
        abort();
      }
      v131 = *v120;
      *v120 = (uint64_t)oslog[0];
      if (v131
        && LFV2HandleRelease()
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLFeatureExtractor.cpp", 40, (uint64_t)"ret == kLFReturnNoError", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
LABEL_193:
      memset(v445, 0, sizeof(v445));
      v446 = 733222844;
      kdebug_trace();
      v444 = 0;
      sub_21015D058(&v441, v41, 1, 0);
      v132 = v442;
      *(_QWORD *)&object[8] = v442;
      *(_QWORD *)&object[16] = v443;
      if (v443)
      {
        v133 = (unint64_t *)&v443->__shared_owners_;
        do
          v134 = __ldxr(v133);
        while (__stxr(v134 + 1, v133));
      }
      *(_QWORD *)object = &off_24CA1A9C0;
      if (v132)
      {
        v136 = *v132;
        v135 = (std::__shared_weak_count *)v132[1];
        if (!v135)
          goto LABEL_202;
        v137 = (unint64_t *)&v135->__shared_owners_;
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
        do
          v139 = __ldaxr(v137);
        while (__stlxr(v139 - 1, v137));
        if (v139)
        {
LABEL_202:
          v140 = *(_QWORD *)&object[8];
          if (!v136)
            goto LABEL_205;
LABEL_203:
          sub_2101613B8(v140);
          goto LABEL_205;
        }
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
        v140 = *(_QWORD *)&object[8];
        if (v136)
          goto LABEL_203;
      }
      else
      {
        v140 = 0;
      }
LABEL_205:
      v439[0] = &off_24CA1A9A0;
      v439[1] = v140;
      v440 = *(std::__shared_weak_count **)&object[16];
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      sub_20EB9ECBC((uint64_t)v439, oslog);
      v471.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9C0A88;
      v141 = oslog[1];
      v142 = (std::__shared_weak_count *)oslog[2];
      if (oslog[2])
      {
        v143 = (unint64_t *)&oslog[2][1];
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
        do
          v145 = __ldxr(v143);
        while (__stxr(v145 + 1, v143));
        v146 = oslog[3];
        v473 = *(_OWORD *)&oslog[4];
        do
          v147 = __ldxr(v143);
        while (__stxr(v147 + 1, v143));
        v471.__r_.__value_.__l.__size_ = (std::string::size_type)v141;
        v471.__r_.__value_.__r.__words[2] = (std::string::size_type)v142;
        v472 = v146;
        v474 = 256;
        do
          v148 = __ldaxr(v143);
        while (__stlxr(v148 - 1, v143));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
        do
          v149 = __ldaxr(v143);
        while (__stlxr(v149 - 1, v143));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
        v150 = (std::__shared_weak_count *)oslog[2];
        if (oslog[2])
        {
          v151 = (unint64_t *)&oslog[2][1];
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
            v439[0] = &off_24CA1A9A0;
            v153 = v440;
            if (!v440)
              goto LABEL_230;
            goto LABEL_225;
          }
        }
      }
      else
      {
        *(_OWORD *)&v471.__r_.__value_.__r.__words[1] = (unint64_t)oslog[1];
        v472 = oslog[3];
        v473 = *(_OWORD *)&oslog[4];
        v474 = 256;
      }
      v439[0] = &off_24CA1A9A0;
      v153 = v440;
      if (!v440)
        goto LABEL_230;
LABEL_225:
      v154 = (unint64_t *)&v153->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
LABEL_230:
      if (!*(_QWORD *)&object[8])
        goto LABEL_238;
      v157 = **(_QWORD **)&object[8];
      v156 = *(std::__shared_weak_count **)(*(_QWORD *)&object[8] + 8);
      if (!v156)
        goto LABEL_236;
      v158 = (unint64_t *)&v156->__shared_owners_;
      do
        v159 = __ldxr(v158);
      while (__stxr(v159 + 1, v158));
      do
        v160 = __ldaxr(v158);
      while (__stlxr(v160 - 1, v158));
      if (v160)
      {
LABEL_236:
        if (!v157)
          goto LABEL_238;
LABEL_237:
        sub_210161594(*(uint64_t *)&object[8]);
        goto LABEL_238;
      }
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
      if (v157)
        goto LABEL_237;
LABEL_238:
      *(_QWORD *)object = &off_24CA1A9A0;
      v161 = *(std::__shared_weak_count **)&object[16];
      if (!*(_QWORD *)&object[16])
        goto LABEL_242;
      v162 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
        size = v471.__r_.__value_.__l.__size_;
        if (!v471.__r_.__value_.__l.__size_)
          goto LABEL_272;
      }
      else
      {
LABEL_242:
        size = v471.__r_.__value_.__l.__size_;
        if (!v471.__r_.__value_.__l.__size_)
          goto LABEL_272;
      }
      v165 = (std::__shared_weak_count *)v471.__r_.__value_.__r.__words[2];
      if (!v471.__r_.__value_.__r.__words[2])
        goto LABEL_261;
      v166 = (unint64_t *)(v471.__r_.__value_.__r.__words[2] + 8);
      do
        v167 = __ldxr(v166);
      while (__stxr(v167 + 1, v166));
      do
        v168 = __ldaxr(v166);
      while (__stlxr(v168 - 1, v166));
      if (v168)
      {
        v169 = (std::__shared_weak_count *)v471.__r_.__value_.__r.__words[2];
        size = v471.__r_.__value_.__l.__size_;
        if (!v471.__r_.__value_.__r.__words[2])
          goto LABEL_261;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
        v169 = (std::__shared_weak_count *)v471.__r_.__value_.__r.__words[2];
        size = v471.__r_.__value_.__l.__size_;
        if (!v471.__r_.__value_.__r.__words[2])
          goto LABEL_261;
      }
      v170 = (unint64_t *)&v169->__shared_owners_;
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
      do
        v172 = __ldaxr(v170);
      while (__stlxr(v172 - 1, v170));
      if (v172)
      {
LABEL_261:
        if (HIBYTE(v474))
          goto LABEL_262;
        goto LABEL_272;
      }
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
      if (HIBYTE(v474))
      {
LABEL_262:
        (*(void (**)(uint64_t *__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)size + 96))(&v438, size, 0);
        v436 = &off_24CA1A9A0;
        v437 = 0uLL;
        if (v121)
          goto LABEL_263;
        goto LABEL_273;
      }
LABEL_272:
      v438 = 0;
      v436 = &off_24CA1A9A0;
      v437 = 0uLL;
      if (v121)
      {
LABEL_263:
        v173 = v473;
        v174 = DWORD1(v473);
        oslog[0] = (os_log_t)&off_24C9E4010;
        sub_20ED5BAEC(&v473, (uint64_t)&oslog[1]);
        v175 = v471.__r_.__value_.__l.__size_;
        if (!v471.__r_.__value_.__l.__size_)
          goto LABEL_299;
        v176 = (std::__shared_weak_count *)v471.__r_.__value_.__r.__words[2];
        if (!v471.__r_.__value_.__r.__words[2])
          goto LABEL_285;
        v177 = (unint64_t *)(v471.__r_.__value_.__r.__words[2] + 8);
        do
          v178 = __ldxr(v177);
        while (__stxr(v178 + 1, v177));
        do
          v179 = __ldaxr(v177);
        while (__stlxr(v179 - 1, v177));
        if (v179)
        {
          v180 = (std::__shared_weak_count *)v471.__r_.__value_.__r.__words[2];
          v175 = v471.__r_.__value_.__l.__size_;
          if (!v471.__r_.__value_.__r.__words[2])
            goto LABEL_285;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
          v180 = (std::__shared_weak_count *)v471.__r_.__value_.__r.__words[2];
          v175 = v471.__r_.__value_.__l.__size_;
          if (!v471.__r_.__value_.__r.__words[2])
            goto LABEL_285;
        }
        v185 = (unint64_t *)&v180->__shared_owners_;
        do
          v186 = __ldxr(v185);
        while (__stxr(v186 + 1, v185));
        do
          v187 = __ldaxr(v185);
        while (__stlxr(v187 - 1, v185));
        if (v187)
        {
LABEL_285:
          if (HIBYTE(v474))
            goto LABEL_286;
LABEL_299:
          *(_QWORD *)object = 0;
          v188 = oslog[1];
          v189 = (std::__shared_weak_count *)oslog[2];
          if (!oslog[2])
            goto LABEL_300;
LABEL_287:
          v190 = (unint64_t *)&v189->__shared_owners_;
          do
            v191 = __ldxr(v190);
          while (__stxr(v191 + 1, v190));
          do
            v192 = __ldaxr(v190);
          while (__stlxr(v192 - 1, v190));
          if (v192)
          {
            if (v188)
              goto LABEL_292;
LABEL_301:
            v415 = 0;
            if (v174)
            {
LABEL_302:
              v193 = __sincosf_stret(v122);
              if (v173)
              {
                v194 = 0;
                v195.f32[0] = -v193.__sinval;
                v195.i32[1] = LODWORD(v193.__cosval);
                do
                {
                  for (i = 0; i != v173; ++i)
                  {
                    *((_BYTE *)&oslog[4]->isa + (_DWORD)v458 * v194 + HIDWORD(v458) * i) = 0;
                    v197.f32[0] = (float)v194;
                    v197.f32[1] = (float)i;
                    v198 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(vadd_f32(vcvt_f32_u32(*(uint32x2_t *)&v473), _D9), (float32x2_t)0x3F0000003F000000));
                    v199 = vsub_f32(v197, v198);
                    v200 = vcvt_s32_f32(vrnda_f32(vadd_f32(v198, vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v193.__sinval), LODWORD(v193.__cosval)), v199.f32[0]), v195, v199, 1))));
                    if ((v200.i32[0] & 0x80000000) == 0
                      && v174 > v200.i32[0]
                      && (v200.i32[1] & 0x80000000) == 0
                      && v173 > v200.i32[1])
                    {
                      v201 = vmul_s32(*(int32x2_t *)((char *)&v473 + 8), v200);
                      *((_BYTE *)&oslog[4]->isa + (_DWORD)v458 * v194 + HIDWORD(v458) * i) = *((_BYTE *)&v472->isa
                                                                                             + vadd_s32(vdup_lane_s32(v201, 1), v201).u32[0]);
                    }
                  }
                  ++v194;
                }
                while (v194 != v174);
              }
            }
LABEL_312:
            v202 = v415;
            v415 = 0;
            if (v202)
              (*(void (**)(void *))(*(_QWORD *)v202 + 8))(v202);
            v203 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v203)
              (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
            v427 = &off_24C9C5910;
            v204 = oslog[1];
            v205 = (std::__shared_weak_count *)oslog[2];
            *(os_log_t *)object = oslog[1];
            *(os_log_t *)&object[8] = oslog[2];
            if (oslog[2])
            {
              v206 = (unint64_t *)&oslog[2][1];
              do
                v207 = __ldxr(v206);
              while (__stxr(v207 + 1, v206));
              v415 = v204;
              rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v205;
              do
                v208 = __ldxr(v206);
              while (__stxr(v208 + 1, v206));
              do
                v209 = __ldxr(v206);
              while (__stxr(v209 + 1, v206));
              v428 = v204;
              v429 = v205;
              do
                v210 = __ldxr(v206);
              while (__stxr(v210 + 1, v206));
              do
                v211 = __ldaxr(v206);
              while (__stlxr(v211 - 1, v206));
              if (!v211)
              {
                ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                std::__shared_weak_count::__release_weak(v205);
              }
            }
            else
            {
              v415 = oslog[1];
              rep = 0;
              v428 = oslog[1];
              v429 = 0;
            }
            (*((void (**)(_BYTE *__return_ptr, os_log_t, uint64_t))v204->isa + 8))(v447, v204, 1);
            v212 = *(_QWORD *)v447;
            v213 = *(_QWORD *)(*(_QWORD *)v447 + 16);
            v430[0] = **(_OWORD **)v447;
            *(_QWORD *)&v430[1] = v213;
            *(_QWORD *)v447 = 0;
            MEMORY[0x212BC6398](v212, 0xC400A2AC0F1, v214);
            v215 = v429;
            if (!v429)
              goto LABEL_333;
            v216 = (unint64_t *)&v429->__shared_owners_;
            do
              v217 = __ldxr(v216);
            while (__stxr(v217 + 1, v216));
            do
              v218 = __ldaxr(v216);
            while (__stlxr(v218 - 1, v216));
            if (!v218)
            {
              ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
              std::__shared_weak_count::__release_weak(v215);
              v219 = (std::__shared_weak_count *)rep;
              if (rep)
              {
LABEL_334:
                v220 = (unint64_t *)&v219->__shared_owners_;
                do
                  v221 = __ldaxr(v220);
                while (__stlxr(v221 - 1, v220));
                if (!v221)
                {
                  ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                  std::__shared_weak_count::__release_weak(v219);
                }
              }
            }
            else
            {
LABEL_333:
              v219 = (std::__shared_weak_count *)rep;
              if (rep)
                goto LABEL_334;
            }
            v222 = *(std::__shared_weak_count **)&object[8];
            if (!*(_QWORD *)&object[8])
              goto LABEL_343;
            v223 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
            do
              v224 = __ldaxr(v223);
            while (__stlxr(v224 - 1, v223));
            if (!v224)
            {
              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
              std::__shared_weak_count::__release_weak(v222);
              __p = &off_24C9C0A88;
              v225 = (uint64_t (***)())v428;
              v226 = v429;
              if (v429)
                goto LABEL_344;
            }
            else
            {
LABEL_343:
              __p = &off_24C9C0A88;
              v225 = (uint64_t (***)())v428;
              v226 = v429;
              if (v429)
              {
LABEL_344:
                v227 = (unint64_t *)&v226->__shared_owners_;
                do
                  v228 = __ldxr(v227);
                while (__stxr(v228 + 1, v227));
                do
                  v229 = __ldxr(v227);
                while (__stxr(v229 + 1, v227));
                v230 = *(_QWORD *)&v430[0];
                *(_OWORD *)&v434[8] = *(_OWORD *)((char *)v430 + 8);
                do
                  v231 = __ldxr(v227);
                while (__stxr(v231 + 1, v227));
                v432 = v225;
                v433 = (int64_t)v226;
                *(_QWORD *)v434 = v230;
                v435 = 256;
                do
                  v232 = __ldaxr(v227);
                while (__stlxr(v232 - 1, v227));
                if (!v232)
                {
                  ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                  std::__shared_weak_count::__release_weak(v226);
                }
                do
                  v233 = __ldaxr(v227);
                while (__stlxr(v233 - 1, v227));
                if (v233)
                {
                  v225 = v432;
                  if (v432)
                    goto LABEL_356;
LABEL_364:
                  *(_OWORD *)v447 = 0uLL;
                  *(_QWORD *)object = 0;
                  *(_QWORD *)&object[8] = 0;
                  goto LABEL_371;
                }
                ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                std::__shared_weak_count::__release_weak(v226);
                v225 = v432;
                if (!v432)
                  goto LABEL_364;
LABEL_356:
                v234 = v433;
                *(_QWORD *)v447 = v225;
                *(_QWORD *)&v447[8] = v433;
                if (v433)
                {
                  v235 = (unint64_t *)(v433 + 8);
                  do
                    v236 = __ldxr(v235);
                  while (__stxr(v236 + 1, v235));
                }
                if (*v225 == off_24CA18E58)
                {
                  *(_QWORD *)object = v225;
                  *(_QWORD *)&object[8] = v234;
                  *(_OWORD *)v447 = 0uLL;
                  goto LABEL_371;
                }
                *(_QWORD *)object = 0;
                *(_QWORD *)&object[8] = 0;
                v237 = *(std::__shared_weak_count **)&v447[8];
                if (!*(_QWORD *)&v447[8])
                  goto LABEL_371;
                v238 = (unint64_t *)(*(_QWORD *)&v447[8] + 8);
                do
                  v239 = __ldaxr(v238);
                while (__stlxr(v239 - 1, v238));
                if (!v239)
                {
                  ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                  std::__shared_weak_count::__release_weak(v237);
                  v240 = *(_QWORD *)object;
                  v241 = *(std::__shared_weak_count **)&object[8];
                  if (*(_QWORD *)&object[8])
                  {
LABEL_372:
                    v242 = (unint64_t *)&v241->__shared_owners_;
                    do
                      v243 = __ldaxr(v242);
                    while (__stlxr(v243 - 1, v242));
                    if (!v243)
                    {
                      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                      std::__shared_weak_count::__release_weak(v241);
                    }
                  }
                }
                else
                {
LABEL_371:
                  v240 = *(_QWORD *)object;
                  v241 = *(std::__shared_weak_count **)&object[8];
                  if (*(_QWORD *)&object[8])
                    goto LABEL_372;
                }
                if (!v240)
                  sub_20E866B34();
                v244 = v432;
                v245 = (std::__shared_weak_count *)v433;
                if (v433)
                {
                  v246 = (unint64_t *)(v433 + 8);
                  do
                    v247 = __ldxr(v246);
                  while (__stxr(v247 + 1, v246));
                }
                if (!v244 || *v244 != off_24CA18E58)
                {
                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  v344 = atomic_load((unsigned __int8 *)&qword_254A5F8C8);
                  if ((v344 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F8C8))
                  {
                    v453 = 14;
                    strcpy((char *)v452, "ConstImageView");
                    v370 = sub_20EA6D818();
                    if (SHIBYTE(v370->__r_.__value_.__r.__words[2]) < 0)
                    {
                      sub_20E860C04(&__s, v370->__r_.__value_.__l.__data_, v370->__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      v371 = *(_OWORD *)&v370->__r_.__value_.__l.__data_;
                      __s.__r_.__value_.__r.__words[2] = v370->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v371;
                    }
                    sub_210236E50(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)object);
                    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__s.__r_.__value_.__l.__data_);
                    v372 = sub_20EB9F824();
                    if (*((char *)v372 + 23) < 0)
                    {
                      sub_20E860C04(&__s, *(void **)v372, *((_QWORD *)v372 + 1));
                    }
                    else
                    {
                      v373 = *v372;
                      __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v372 + 2);
                      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v373;
                    }
                    sub_210236E50(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v465);
                    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__s.__r_.__value_.__l.__data_);
                    sub_20E877C80(&v450, (uint64_t)object, 2uLL);
                    sub_21023CE38((char *)v452, (uint64_t *)&v450, (std::string *)&qword_254A5F8E0, v374, v375);
                    v376 = (void **)v450;
                    if (v450)
                    {
                      v377 = v451;
                      v378 = v450;
                      if (v451 != v450)
                      {
                        do
                        {
                          if (*((char *)v377 - 1) < 0)
                            operator delete(*(v377 - 3));
                          v377 -= 3;
                        }
                        while (v377 != v376);
                        v378 = v450;
                      }
                      v451 = v376;
                      operator delete(v378);
                      if ((SHIBYTE(v467) & 0x80000000) == 0)
                        goto LABEL_656;
LABEL_645:
                      operator delete(v465);
                      if ((object[23] & 0x80000000) == 0)
                        goto LABEL_646;
LABEL_657:
                      operator delete(*(void **)object);
                      if (v453 < 0)
LABEL_647:
                        operator delete(v452[0]);
                    }
                    else
                    {
                      if (SHIBYTE(v467) < 0)
                        goto LABEL_645;
LABEL_656:
                      if ((object[23] & 0x80000000) != 0)
                        goto LABEL_657;
LABEL_646:
                      if (v453 < 0)
                        goto LABEL_647;
                    }
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5F8E0, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A5F8C8);
                  }
                  v345 = sub_20EA6D55C();
                  *(_QWORD *)object = "Attempting to create an ";
                  *(_QWORD *)&object[8] = 24;
                  v346 = &qword_254A5F8E0;
                  v347 = byte_254A5F8F7;
                  if (byte_254A5F8F7 < 0)
                  {
                    v347 = unk_254A5F8E8;
                    v346 = (uint64_t *)qword_254A5F8E0;
                  }
                  *(_QWORD *)&object[16] = v346;
                  v465 = (void *)v347;
                  v466 = (std::string *)" from an ";
                  v467 = (void *)9;
                  v348 = HIBYTE(v345->__r_.__value_.__r.__words[2]);
                  if ((v348 & 0x80u) == 0)
                    v349 = v345;
                  else
                    v349 = (std::string *)v345->__r_.__value_.__r.__words[0];
                  if ((v348 & 0x80u) != 0)
                    v348 = v345->__r_.__value_.__l.__size_;
                  v468 = (const char *)v349;
                  v469 = v348;
                  sub_20E8778D4((uint64_t)object, (uint64_t)&v470, 0, 0, &v449);
                  v350 = v432;
                  if (v432)
                  {
                    v354 = (std::__shared_weak_count *)v433;
                    if (v433)
                    {
                      v355 = (unint64_t *)(v433 + 8);
                      do
                        v356 = __ldxr(v355);
                      while (__stxr(v356 + 1, v355));
                      do
                        v357 = __ldaxr(v355);
                      while (__stlxr(v357 - 1, v355));
                      if (!v357)
                      {
                        ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                        std::__shared_weak_count::__release_weak(v354);
                      }
                      v358 = (std::__shared_weak_count *)v433;
                      v350 = v432;
                      if (v433)
                      {
                        v359 = (unint64_t *)(v433 + 8);
                        do
                          v360 = __ldxr(v359);
                        while (__stxr(v360 + 1, v359));
                        do
                          v361 = __ldaxr(v359);
                        while (__stlxr(v361 - 1, v359));
                        if (!v361)
                        {
                          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                          std::__shared_weak_count::__release_weak(v358);
                        }
                      }
                    }
                    v362 = ((uint64_t (*)(uint64_t (***)()))(*v350)[10])(v350);
                    v364 = HIBYTE(v449.__r_.__value_.__r.__words[2]);
                    v365 = &v449;
                    if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    {
                      v364 = v449.__r_.__value_.__l.__size_;
                      v365 = (std::string *)v449.__r_.__value_.__r.__words[0];
                    }
                    *(_QWORD *)object = v365;
                    *(_QWORD *)&object[8] = v364;
                    *(_QWORD *)&object[16] = " but the other image contains an incompatible buffer type ";
                    v465 = (void *)58;
                    v466 = (std::string *)v362;
                    v467 = v363;
                    sub_20E8778D4((uint64_t)object, (uint64_t)&v468, 0, 0, &v448);
                    LOBYTE(v351) = *((_BYTE *)&v449.__r_.__value_.__s + 23);
                  }
                  else
                  {
                    v351 = SHIBYTE(v449.__r_.__value_.__r.__words[2]);
                    if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v352 = HIBYTE(v449.__r_.__value_.__r.__words[2]);
                    else
                      v352 = v449.__r_.__value_.__l.__size_;
                    v353 = v352 + 46;
                    if (v352 + 46 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v353 <= 0x16)
                    {
                      memset(&v448, 0, sizeof(v448));
                      v366 = &v448;
                      *((_BYTE *)&v448.__r_.__value_.__s + 23) = v352 + 46;
                      goto LABEL_624;
                    }
                    v367 = (v353 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v353 | 7) != 0x17)
                      v367 = v353 | 7;
                    v368 = v367 + 1;
                    v366 = operator new(v367 + 1);
                    v448.__r_.__value_.__r.__words[2] = v368 | 0x8000000000000000;
                    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v366;
                    v448.__r_.__value_.__l.__size_ = v352 + 46;
                    if (v352)
                    {
LABEL_624:
                      if (v351 >= 0)
                        v369 = &v449;
                      else
                        v369 = (std::string *)v449.__r_.__value_.__r.__words[0];
                      memmove(v366, v369, v352);
                    }
                    strcpy((char *)v366 + v352, " but the other image does not contain a buffer");
                  }
                  if ((v351 & 0x80) != 0)
                    operator delete(v449.__r_.__value_.__l.__data_);
                  std::logic_error::logic_error(exception, &v448);
                  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                  __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
                }
                if (v245)
                {
                  v248 = (unint64_t *)&v245->__shared_owners_;
                  do
                    v249 = __ldxr(v248);
                  while (__stxr(v249 + 1, v248));
                  *(_OWORD *)v447 = *(_OWORD *)v434;
                  *(_QWORD *)&v447[16] = *(_QWORD *)&v434[16];
                  do
                    v250 = __ldxr(v248);
                  while (__stxr(v250 + 1, v248));
                  do
                    v251 = __ldaxr(v248);
                  while (__stlxr(v251 - 1, v248));
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                  do
                    v252 = __ldaxr(v248);
                  while (__stlxr(v252 - 1, v248));
                  if (!v252)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                  v415 = &off_24C9E3E70;
                  rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v244;
                  v417 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v245;
                  *(_OWORD *)v418 = *(_OWORD *)v447;
                  *(_OWORD *)&v418[9] = *(_OWORD *)&v447[9];
                  LOBYTE(v419) = 1;
                  do
                    v253 = __ldxr(v248);
                  while (__stxr(v253 + 1, v248));
                  do
                    v254 = __ldaxr(v248);
                  while (__stlxr(v254 - 1, v248));
                  if (!v254)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                }
                else
                {
                  *(_OWORD *)v447 = *(_OWORD *)v434;
                  *(_QWORD *)&v447[16] = *(_QWORD *)&v434[16];
                  v415 = &off_24C9E3E70;
                  rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v244;
                  v417 = 0;
                  *(_OWORD *)v418 = *(_OWORD *)v434;
                  *(_OWORD *)&v418[9] = *(_OWORD *)&v447[9];
                  LOBYTE(v419) = 1;
                }
                sub_2101249F4((uint64_t)v244, object);
                v255 = *(_OWORD *)&object[8];
                if (!(_BYTE)v419)
                  goto LABEL_405;
                v256 = (std::__shared_weak_count *)v417;
                if (!v417)
                  goto LABEL_405;
                v257 = (unint64_t *)(v417 + 8);
                do
                  v258 = __ldaxr(v257);
                while (__stlxr(v258 - 1, v257));
                if (!v258)
                {
                  v398 = v255;
                  ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                  std::__shared_weak_count::__release_weak(v256);
                  v259 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
                  v437 = v398;
                  if (v259)
                  {
LABEL_406:
                    v260 = (unint64_t *)&v259->__shared_owners_;
                    do
                      v261 = __ldaxr(v260);
                    while (__stlxr(v261 - 1, v260));
                    if (!v261)
                    {
                      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                      std::__shared_weak_count::__release_weak(v259);
                    }
                  }
                }
                else
                {
LABEL_405:
                  v259 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
                  v437 = v255;
                  if (v259)
                    goto LABEL_406;
                }
                v262 = (std::__shared_weak_count *)v433;
                if (!v433)
                  goto LABEL_414;
                v263 = (unint64_t *)(v433 + 8);
                do
                  v264 = __ldaxr(v263);
                while (__stlxr(v264 - 1, v263));
                if (!v264)
                {
                  ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                  std::__shared_weak_count::__release_weak(v262);
                  v265 = v429;
                  if (v429)
                  {
LABEL_415:
                    v266 = (unint64_t *)&v265->__shared_owners_;
                    do
                      v267 = __ldaxr(v266);
                    while (__stlxr(v267 - 1, v266));
                    if (!v267)
                    {
                      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                      std::__shared_weak_count::__release_weak(v265);
                    }
                  }
                }
                else
                {
LABEL_414:
                  v265 = v429;
                  if (v429)
                    goto LABEL_415;
                }
                v268 = (std::__shared_weak_count *)oslog[2];
                if (!oslog[2])
                  goto LABEL_424;
                v269 = (unint64_t *)&oslog[2][1];
                do
                  v270 = __ldaxr(v269);
                while (__stlxr(v270 - 1, v269));
                if (!v270)
                {
                  ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                  std::__shared_weak_count::__release_weak(v268);
                  v181 = (uint64_t *)v437;
                  if (!(_QWORD)v437)
                    goto LABEL_431;
                }
                else
                {
LABEL_424:
                  v181 = (uint64_t *)v437;
                  if (!(_QWORD)v437)
                    goto LABEL_431;
                }
                goto LABEL_425;
              }
            }
            v432 = v225;
            v433 = 0;
            *(_QWORD *)v434 = *(_QWORD *)&v430[0];
            *(_OWORD *)&v434[8] = *(_OWORD *)((char *)v430 + 8);
            v435 = 256;
            if (!v225)
              goto LABEL_364;
            goto LABEL_356;
          }
          ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
          std::__shared_weak_count::__release_weak(v189);
          if (!v188)
            goto LABEL_301;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
          if (!HIBYTE(v474))
            goto LABEL_299;
LABEL_286:
          (*(void (**)(_BYTE *__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)v175 + 96))(object, v175, 0);
          v188 = oslog[1];
          v189 = (std::__shared_weak_count *)oslog[2];
          if (oslog[2])
            goto LABEL_287;
LABEL_300:
          if (!v188)
            goto LABEL_301;
        }
LABEL_292:
        (*((void (**)(void **__return_ptr, os_log_t, uint64_t))oslog[1]->isa + 12))(&v415, oslog[1], 1);
        if (v174)
          goto LABEL_302;
        goto LABEL_312;
      }
LABEL_273:
      v181 = v442;
      v182 = v443;
      if (v443)
      {
        v183 = (unint64_t *)&v443->__shared_owners_;
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
        *(_QWORD *)&v437 = v181;
        *((_QWORD *)&v437 + 1) = v182;
        if (!v181)
          goto LABEL_431;
      }
      else
      {
        *(_QWORD *)&v437 = v442;
        if (!v442)
          goto LABEL_431;
      }
LABEL_425:
      v271 = (std::__shared_weak_count *)v181[1];
      if (v271)
      {
        v272 = (unint64_t *)&v271->__shared_owners_;
        do
          v273 = __ldxr(v272);
        while (__stxr(v273 + 1, v272));
        do
          v274 = __ldaxr(v272);
        while (__stlxr(v274 - 1, v272));
        if (!v274)
        {
          ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
          std::__shared_weak_count::__release_weak(v271);
        }
      }
LABEL_431:
      v275 = LFV2DetectAndComputeFeatures();
      if (!v275)
        goto LABEL_523;
      sub_20ED57554(&v427);
      if (**((int **)v427 + 7) > 5)
        goto LABEL_523;
      v276 = *((unsigned __int8 *)v427 + 72);
      v277 = sub_20E8C31DC((uint64_t)v427, "OSLogSurrogateAppender", 1, 0);
      v278 = v277;
      if (!v276 && !v277)
        goto LABEL_523;
      v391 = v276;
      v393 = v6;
      *(_QWORD *)object = &v427;
      *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
      LODWORD(v465) = 5;
      v466 = (std::string *)"unknown file";
      LODWORD(v467) = 173;
      v468 = "unknown function";
      v469 = 0;
      v470 = 0;
      v279 = **(_QWORD **)object;
      v280 = (const char *)(**(_QWORD **)object + 16);
      v389 = v280;
      if (*(char *)(**(_QWORD **)object + 39) < 0)
      {
        v280 = *(const char **)(v279 + 16);
        v281 = *(_QWORD *)(v279 + 24);
        v397 = v8;
        v283 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v283 & 1) != 0)
          goto LABEL_443;
      }
      else
      {
        v281 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
        v397 = v8;
        v282 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v282 & 1) != 0)
          goto LABEL_443;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v415);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v415);
        if (v418[0] && SHIBYTE(v417) < 0)
          operator delete(v415);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v4 = v387;
      }
LABEL_443:
      if (byte_254A4A4F8[23] >= 0)
        v284 = byte_254A4A4F8;
      else
        v284 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v285 = byte_254A4A4F8[23];
      else
        v285 = *(_QWORD *)&byte_254A4A4F8[8];
      oslog[0] = os_log_create(v284, v280);
      if (v285 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v286 = v9;
      if (v285 >= 0x17)
      {
        v288 = (v285 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v285 | 7) != 0x17)
          v288 = v285 | 7;
        v289 = v288 + 1;
        v287 = operator new(v288 + 1);
        oslog[3] = (os_log_t)(v289 | 0x8000000000000000);
        oslog[1] = v287;
        oslog[2] = (os_log_t)v285;
        v4 = v387;
LABEL_456:
        memmove(v287, v284, v285);
        goto LABEL_457;
      }
      HIBYTE(oslog[3]) = v285;
      v287 = &oslog[1];
      if (v285)
        goto LABEL_456;
LABEL_457:
      *((_BYTE *)&v287->isa + v285) = 0;
      LOBYTE(oslog[4]) = 1;
      if (v281 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v8 = v397;
      if (v281 >= 0x17)
      {
        v292 = (v281 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v281 | 7) != 0x17)
          v292 = v281 | 7;
        v293 = v292 + 1;
        v290 = operator new(v292 + 1);
        v456 = v293 | 0x8000000000000000;
        oslog[5] = v290;
        oslog[6] = (os_log_t)v281;
        v9 = v286;
      }
      else
      {
        HIBYTE(v456) = v281;
        v290 = &oslog[5];
        v9 = v286;
        if (!v281)
        {
          LOBYTE(oslog[5]) = 0;
          v457 = 1;
          v291 = oslog[0];
          if ((SHIBYTE(v456) & 0x80000000) == 0)
            goto LABEL_461;
          goto LABEL_467;
        }
      }
      memmove(v290, v280, v281);
      *((_BYTE *)&v290->isa + v281) = 0;
      v457 = 1;
      v291 = oslog[0];
      if ((SHIBYTE(v456) & 0x80000000) == 0)
      {
LABEL_461:
        if (!LOBYTE(oslog[4]))
          goto LABEL_470;
        goto LABEL_468;
      }
LABEL_467:
      operator delete(oslog[5]);
      if (!LOBYTE(oslog[4]))
        goto LABEL_470;
LABEL_468:
      if (SHIBYTE(oslog[3]) < 0)
        operator delete(oslog[1]);
LABEL_470:
      if (oslog[0])
        os_release(oslog[0]);
      if (v278 && *(_QWORD *)(v278 + 24))
      {
        v294 = _os_log_pack_size();
        v295 = operator new(v294, (std::align_val_t)8uLL);
        v296 = operator new();
        v297 = (std::__shared_weak_count *)v296;
        v296[1].isa = 0;
        v298 = (unint64_t *)&v296[1];
        v296->isa = (Class)&off_24C9ABB80;
        v296[2].isa = 0;
        v296[3].isa = (Class)v295;
        oslog[0] = v295;
        oslog[1] = v295;
        oslog[2] = v296;
        do
          v299 = __ldxr(v298);
        while (__stxr(v299 + 1, v298));
        memset(&oslog[3], 0, 24);
        do
          v300 = __ldaxr(v298);
        while (__stlxr(v300 - 1, v298));
        if (!v300)
        {
          (*((void (**))v296->isa + 2))(v296);
          std::__shared_weak_count::__release_weak(v297);
        }
        v301 = oslog[0];
        v302 = (_DWORD *)_os_log_pack_fill();
        *v302 = 67109120;
        v302[1] = v275;
        v303 = (char *)operator new();
        v304 = *(unsigned __int8 *)(v279 + 39);
        v305 = v389;
        if ((v304 & 0x80u) != 0)
        {
          v305 = *(const char **)(v279 + 16);
          v304 = *(_QWORD *)(v279 + 24);
        }
        *(_QWORD *)v303 = v301;
        *(_OWORD *)(v303 + 8) = *(_OWORD *)&oslog[1];
        oslog[1] = 0;
        oslog[2] = 0;
        *(_OWORD *)(v303 + 24) = *(_OWORD *)&oslog[3];
        oslog[3] = 0;
        oslog[4] = 0;
        *((_QWORD *)v303 + 5) = v305;
        *((_QWORD *)v303 + 6) = v304;
        v303[56] = 16;
        __p = 0;
        v415 = v303;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v278 + 24) + 40))(*(_QWORD *)(v278 + 24), &v415);
        v306 = v415;
        v415 = 0;
        v6 = v393;
        v7 = v386;
        if (v306)
        {
          v307 = (std::__shared_weak_count *)*((_QWORD *)v306 + 4);
          if (v307)
          {
            v308 = (unint64_t *)&v307->__shared_owners_;
            do
              v309 = __ldaxr(v308);
            while (__stlxr(v309 - 1, v308));
            if (!v309)
            {
              ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
              std::__shared_weak_count::__release_weak(v307);
            }
          }
          v310 = (std::__shared_weak_count *)*((_QWORD *)v306 + 2);
          if (v310)
          {
            v311 = (unint64_t *)&v310->__shared_owners_;
            do
              v312 = __ldaxr(v311);
            while (__stlxr(v312 - 1, v311));
            if (!v312)
            {
              ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
              std::__shared_weak_count::__release_weak(v310);
            }
          }
          MEMORY[0x212BC6398](v306, 0x10F0C40B62ED6C6);
          v313 = __p;
          __p = 0;
          if (v313)
          {
            v314 = (std::__shared_weak_count *)*((_QWORD *)v313 + 4);
            if (v314)
            {
              v315 = (unint64_t *)&v314->__shared_owners_;
              do
                v316 = __ldaxr(v315);
              while (__stlxr(v316 - 1, v315));
              if (!v316)
              {
                ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                std::__shared_weak_count::__release_weak(v314);
              }
            }
            v317 = (std::__shared_weak_count *)*((_QWORD *)v313 + 2);
            if (v317)
            {
              v318 = (unint64_t *)&v317->__shared_owners_;
              do
                v319 = __ldaxr(v318);
              while (__stlxr(v319 - 1, v318));
              if (!v319)
              {
                ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                std::__shared_weak_count::__release_weak(v317);
              }
            }
            MEMORY[0x212BC6398](v313, 0x10F0C40B62ED6C6);
          }
        }
        v320 = (std::__shared_weak_count *)oslog[4];
        if (oslog[4])
        {
          v321 = (unint64_t *)&oslog[4][1];
          do
            v322 = __ldaxr(v321);
          while (__stlxr(v322 - 1, v321));
          if (!v322)
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
        }
        v323 = (std::__shared_weak_count *)oslog[2];
        if (oslog[2])
        {
          v324 = (unint64_t *)&oslog[2][1];
          do
            v325 = __ldaxr(v324);
          while (__stlxr(v325 - 1, v324));
          if (!v325)
          {
            ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
            std::__shared_weak_count::__release_weak(v323);
          }
        }
      }
      else
      {
        os_log_type_enabled(v291, OS_LOG_TYPE_ERROR);
        LODWORD(oslog[0]) = 67109120;
        HIDWORD(oslog[0]) = v275;
        v326 = (void *)_os_log_send_and_compose_impl();
        v6 = v393;
        v7 = v386;
        if (v326)
          free(v326);
      }
      if (v391)
      {
        sub_20E8C003C((uint64_t)object, "CV3DMLFeatureDetection: MLFeatureExtractor: LFDetectAndComputeFeatures return value %i", v275);
        sub_20E863570((uint64_t)object);
      }
      sub_20E863570((uint64_t)object);
      v327 = v470;
      if (v470)
      {
        v328 = (unint64_t *)&v470->__shared_owners_;
        do
          v329 = __ldaxr(v328);
        while (__stlxr(v329 - 1, v328));
        if (!v329)
        {
          ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
          std::__shared_weak_count::__release_weak(v327);
          v436 = &off_24CA1A9A0;
          v330 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
          if (!*((_QWORD *)&v437 + 1))
            goto LABEL_527;
          goto LABEL_524;
        }
      }
LABEL_523:
      v436 = &off_24CA1A9A0;
      v330 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
      if (!*((_QWORD *)&v437 + 1))
        goto LABEL_527;
LABEL_524:
      v331 = (unint64_t *)&v330->__shared_owners_;
      do
        v332 = __ldaxr(v331);
      while (__stlxr(v332 - 1, v331));
      if (!v332)
      {
        ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
        std::__shared_weak_count::__release_weak(v330);
        v333 = v438;
        v438 = 0;
        if (!v333)
          goto LABEL_529;
LABEL_528:
        (*(void (**)(uint64_t))(*(_QWORD *)v333 + 8))(v333);
        goto LABEL_529;
      }
LABEL_527:
      v333 = v438;
      v438 = 0;
      if (v333)
        goto LABEL_528;
LABEL_529:
      v334 = (std::__shared_weak_count *)v471.__r_.__value_.__r.__words[2];
      if (!v471.__r_.__value_.__r.__words[2])
        goto LABEL_533;
      v335 = (unint64_t *)(v471.__r_.__value_.__r.__words[2] + 8);
      do
        v336 = __ldaxr(v335);
      while (__stlxr(v336 - 1, v335));
      if (!v336)
      {
        ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
        std::__shared_weak_count::__release_weak(v334);
        v441 = &off_24CA1A9A0;
        v337 = v443;
        if (v443)
        {
LABEL_534:
          v338 = (unint64_t *)&v337->__shared_owners_;
          do
            v339 = __ldaxr(v338);
          while (__stlxr(v339 - 1, v338));
          if (!v339)
          {
            ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
            std::__shared_weak_count::__release_weak(v337);
          }
        }
      }
      else
      {
LABEL_533:
        v441 = &off_24CA1A9A0;
        v337 = v443;
        if (v443)
          goto LABEL_534;
      }
      kdebug_trace();
      *(_QWORD *)&v407[0] = v119;
      *(_OWORD *)((char *)v407 + 8) = v413;
      DWORD2(v407[1]) = v414;
      v408 = v401;
      v412 = 0;
      v409 = 0u;
      memset(v410, 0, sizeof(v410));
      memset(v411, 0, 25);
      v340 = v406;
      if ((unint64_t)v406 >= *((_QWORD *)&v406 + 1))
      {
        *(_QWORD *)&v406 = sub_20ED345D4((void **)&v405, (uint64_t)v407);
        if (*(_QWORD *)v411)
        {
          *(_QWORD *)&v411[8] = *(_QWORD *)v411;
          operator delete(*(void **)v411);
        }
      }
      else
      {
        v341 = v407[0];
        v342 = v407[1];
        *(_DWORD *)(v406 + 32) = v408;
        *(_OWORD *)v340 = v341;
        *(_OWORD *)(v340 + 16) = v342;
        *(_QWORD *)(v340 + 48) = 0;
        *(_QWORD *)(v340 + 56) = 0;
        *(_QWORD *)(v340 + 40) = 0;
        *(_OWORD *)(v340 + 40) = v409;
        *(_QWORD *)(v340 + 56) = v410[0];
        *(_QWORD *)(v340 + 64) = 0;
        v409 = 0uLL;
        v410[0] = 0;
        *(_QWORD *)(v340 + 72) = 0;
        *(_QWORD *)(v340 + 80) = 0;
        *(_OWORD *)(v340 + 64) = *(_OWORD *)&v410[1];
        v410[1] = 0;
        v410[2] = 0;
        *(_QWORD *)(v340 + 80) = v410[3];
        *(_QWORD *)(v340 + 88) = 0;
        v410[3] = 0;
        *(_QWORD *)(v340 + 96) = 0;
        *(_QWORD *)(v340 + 104) = 0;
        *(_OWORD *)(v340 + 88) = *(_OWORD *)v411;
        *(_QWORD *)(v340 + 104) = *(_QWORD *)&v411[16];
        memset(v411, 0, 24);
        *(_BYTE *)(v340 + 112) = 0;
        *(_BYTE *)(v340 + 624) = 0;
        if (v412)
        {
          memcpy((void *)(v340 + 112), &v411[24], 0x200uLL);
          *(_BYTE *)(v340 + 624) = 1;
        }
        *(_QWORD *)&v406 = v340 + 632;
      }
      if (v410[1])
      {
        v410[2] = v410[1];
        operator delete((void *)v410[1]);
      }
      if ((_QWORD)v409)
      {
        *((_QWORD *)&v409 + 1) = v409;
        operator delete((void *)v409);
      }
      v6 += 4;
      v8 += 24;
      v9 += 400;
      ++v402;
    }
    while (v6 != v7 || v8 != v399 || v9 != v395 || v402 != v394);
  }
  v11 = v405;
  *(_QWORD *)v379 = v405;
  v12 = (_BYTE *)v406;
  *(_OWORD *)(v379 + 8) = v406;
  if (v12 != (_BYTE *)v11)
  {
    v13 = 0;
    v14 = 0x9B8B577E613716AFLL * ((v12 - (_BYTE *)v11) >> 3);
    v15 = 1;
    do
    {
      v17 = v403[0];
      v18 = (char *)&v11[79 * v13];
      v21 = (void *)*((_QWORD *)v18 + 5);
      v20 = v18 + 40;
      v19 = v21;
      if (v21)
      {
        v11[79 * v13 + 6] = v19;
        operator delete(v19);
        *v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
      }
      v16 = (uint64_t)&v17[79 * v13 + 5];
      *(_OWORD *)v20 = *(_OWORD *)v16;
      v11[79 * v13 + 7] = v17[79 * v13 + 7];
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      v13 = v15++;
    }
    while (v14 > v13);
  }
  v22 = (char *)v403[0];
  if (v403[0])
  {
    v23 = (char *)v403[1];
    v24 = v403[0];
    if (v403[1] != v403[0])
    {
      do
      {
        v25 = (void *)*((_QWORD *)v23 - 68);
        if (v25)
        {
          *((_QWORD *)v23 - 67) = v25;
          operator delete(v25);
        }
        v26 = (void *)*((_QWORD *)v23 - 71);
        if (v26)
        {
          *((_QWORD *)v23 - 70) = v26;
          operator delete(v26);
        }
        v27 = (void *)*((_QWORD *)v23 - 74);
        if (v27)
        {
          *((_QWORD *)v23 - 73) = v27;
          operator delete(v27);
        }
        v23 -= 632;
      }
      while (v23 != v22);
      v24 = v403[0];
    }
    v403[1] = v22;
    operator delete(v24);
  }
}

void sub_20ED5A584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a67;
  void *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  unint64_t v76;

  v71 = STACK[0x680];
  if (STACK[0x680])
  {
    v72 = STACK[0x688];
    v73 = (void *)STACK[0x680];
    if (STACK[0x688] != v71)
    {
      do
      {
        if (*(char *)(v72 - 1) < 0)
          operator delete(*(void **)(v72 - 24));
        v72 -= 24;
      }
      while (v72 != v71);
      v73 = (void *)STACK[0x680];
    }
    STACK[0x688] = v71;
    operator delete(v73);
  }
  if (SLOBYTE(STACK[0x81F]) < 0)
    operator delete((void *)STACK[0x808]);
  if (SLOBYTE(STACK[0x807]) < 0)
    operator delete((void *)STACK[0x7F0]);
  if (SLOBYTE(STACK[0x6AF]) < 0)
    operator delete((void *)STACK[0x698]);
  __cxa_guard_abort(&qword_254A5F8C8);
  __cxa_free_exception(v67);
  if (v68)
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  sub_20EA69240((uint64_t)&STACK[0x570]);
  sub_20EB9EEB8((uint64_t)&STACK[0x538]);
  sub_20E86665C(a49);
  sub_21015D41C(&STACK[0x5A8]);
  v76 = STACK[0x5C0];
  STACK[0x5C0] = 0;
  if (v76)
    (*(void (**)(unint64_t))(*(_QWORD *)v76 + 8))(v76);
  sub_20EA69240(v69 - 192);
  sub_21015D41C(&STACK[0x5E0]);
  sub_20E8E69C4((uint64_t)&STACK[0x600]);
  sub_20ED33F50(&a67);
  sub_20ED33F50(&a63);
  _Unwind_Resume(a1);
}

void sub_20ED5ACF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;

  v68 = (std::__shared_weak_count *)STACK[0x528];
  if (STACK[0x528])
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)STACK[0x518];
  if (STACK[0x518])
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
      sub_20ED33F50(&a67);
      sub_20ED33F50(&a63);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20ED5ACDCLL);
}

void sub_20ED5AD98()
{
  JUMPOUT(0x20ED5ACD4);
}

void sub_20ED5ADA0()
{
  sub_21015D41C(&STACK[0x5C8]);
  sub_21015CB94(&STACK[0x7F0]);
  JUMPOUT(0x20ED5ACCCLL);
}

uint64_t sub_20ED5ADB8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED5AE20(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED5AE88()
{
  return 1;
}

uint64_t sub_20ED5AE90(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20ED5AE98@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20ED5AEAC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_20ED5AF30(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2
    && LFV2HandleRelease()
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLFeatureExtractor.cpp", 40, (uint64_t)"ret == kLFReturnNoError", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

uint64_t sub_20ED5AFA4(uint64_t a1, int a2, uint64_t *a3, char a4, __int128 *a5)
{
  char v8;
  char v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  __int128 v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  const char *v24;
  unsigned __int8 v25;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  void *v30;
  const char *v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  size_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[3];
  int v80;
  const char *v81;
  int v82;
  const char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86[2];
  int v87;
  uint64_t v88;
  uint64_t v89;
  void *object;
  void *v91[2];
  __int128 v92;
  void *__p[2];
  unint64_t v94;
  char v95;
  uint64_t v96;

  v8 = a2;
  v96 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    object = 0;
    v10 = *((_BYTE *)a5 + 23);
    if (v10 >= 0)
      v11 = *((unsigned __int8 *)a5 + 23);
    else
      v11 = *((_QWORD *)a5 + 1);
    if (v11 == 9)
    {
      v13 = *(_DWORD **)a5;
      if (v10 >= 0)
        v13 = a5;
      v14 = *(_QWORD *)v13;
      v15 = *((unsigned __int8 *)v13 + 8);
      if (v14 == 0x61656665736E6564 && v15 == 116)
        goto LABEL_19;
    }
    else if (v11 == 4)
    {
      v12 = *(_DWORD **)a5;
      if (v10 >= 0)
        v12 = a5;
      if (*v12 == 1701736302)
        goto LABEL_19;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLFeatureExtractor.cpp", 137, (uint64_t)"(feature_extractor_type == \"none\" || feature_extractor_type == \"densefeat\") && \"feature extractor type is not supported\"", 120, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
LABEL_19:
    if (LFV2HandleCreate()
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLFeatureExtractor.cpp", 49, (uint64_t)"ret == kLFReturnNoError", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    *(_QWORD *)a1 = object;
    goto LABEL_22;
  }
  *(_QWORD *)a1 = 0;
LABEL_22:
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = v8;
  v17 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = a3[1];
  *(_BYTE *)(a1 + 40) = a4;
  if (*((char *)a5 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 48), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v18 = *a5;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 48) = v18;
  }
  if (*(_QWORD *)a1)
  {
    v19 = LFV2DescriptorModelVersion();
    if (!v19)
    {
      *(_QWORD *)(a1 + 8) = v86[1];
      *(_DWORD *)(a1 + 16) = v87;
      return a1;
    }
    sub_20ED57554(v86);
    if (**(int **)(v86[0] + 56) <= 5)
    {
      v20 = *(unsigned __int8 *)(v86[0] + 72);
      v21 = sub_20E8C31DC(v86[0], "OSLogSurrogateAppender", 1, 0);
      v22 = v21;
      if (v20 || v21)
      {
        v79[0] = v86;
        v79[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v79[2] = std::chrono::system_clock::now().__d_.__rep_;
        v80 = 5;
        v81 = "unknown file";
        v82 = 83;
        v84 = 0;
        v85 = 0;
        v83 = "unknown function";
        v78 = v86[0];
        if (*(char *)(v86[0] + 39) < 0)
        {
          v24 = *(const char **)(v86[0] + 16);
          v23 = *(_QWORD *)(v86[0] + 24);
          v77 = v86[0] + 16;
          v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v27 & 1) != 0)
            goto LABEL_36;
        }
        else
        {
          v23 = *(unsigned __int8 *)(v86[0] + 39);
          v24 = (const char *)(v86[0] + 16);
          v77 = v86[0] + 16;
          v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v25 & 1) != 0)
            goto LABEL_36;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if ((_BYTE)v92 && SHIBYTE(v91[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_36:
        if (byte_254A4A4F8[23] >= 0)
          v28 = byte_254A4A4F8;
        else
          v28 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v29 = byte_254A4A4F8[23];
        else
          v29 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v28, v24);
        v30 = v91;
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v29 >= 0x17)
        {
          v76 = v19;
          v31 = v24;
          v32 = v22;
          v33 = v20;
          v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v34 = v29 | 7;
          v35 = v34 + 1;
          v30 = operator new(v34 + 1);
          v91[1] = (void *)v29;
          *(_QWORD *)&v92 = v35 | 0x8000000000000000;
          v91[0] = v30;
          v20 = v33;
          v22 = v32;
          v24 = v31;
          v19 = v76;
        }
        else
        {
          BYTE7(v92) = v29;
          if (!v29)
          {
LABEL_50:
            *((_BYTE *)v30 + v29) = 0;
            BYTE8(v92) = 1;
            v36 = __p;
            if (v23 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v23 >= 0x17)
            {
              v37 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17)
                v37 = v23 | 7;
              v38 = v37 + 1;
              v36 = operator new(v37 + 1);
              __p[1] = (void *)v23;
              v94 = v38 | 0x8000000000000000;
              __p[0] = v36;
            }
            else
            {
              HIBYTE(v94) = v23;
              if (!v23)
                goto LABEL_58;
            }
            memmove(v36, v24, v23);
LABEL_58:
            *((_BYTE *)v36 + v23) = 0;
            v95 = 1;
            v39 = object;
            if (SHIBYTE(v94) < 0)
              operator delete(__p[0]);
            if (BYTE8(v92) && SBYTE7(v92) < 0)
              operator delete(v91[0]);
            if (object)
              os_release(object);
            if (v22 && *(_QWORD *)(v22 + 24))
            {
              v40 = _os_log_pack_size();
              v41 = (std::__shared_weak_count_vtbl *)operator new(v40, (std::align_val_t)8uLL);
              v42 = (std::__shared_weak_count *)operator new();
              v43 = v42;
              v42->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v42->__shared_owners_;
              v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v42->__shared_weak_owners_ = 0;
              v42[1].__vftable = v41;
              object = v41;
              v91[0] = v41;
              v91[1] = v42;
              do
                v45 = __ldxr(p_shared_owners);
              while (__stxr(v45 + 1, p_shared_owners));
              v92 = 0uLL;
              __p[0] = 0;
              do
                v46 = __ldaxr(p_shared_owners);
              while (__stlxr(v46 - 1, p_shared_owners));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v43);
              }
              v47 = object;
              v48 = (_DWORD *)_os_log_pack_fill();
              *v48 = 67109120;
              v48[1] = v19;
              v49 = operator new();
              v50 = *(unsigned __int8 *)(v78 + 39);
              v51 = v77;
              if ((v50 & 0x80u) != 0)
              {
                v51 = *(_QWORD *)(v78 + 16);
                v50 = *(_QWORD *)(v78 + 24);
              }
              *(_QWORD *)v49 = v47;
              *(_OWORD *)(v49 + 8) = *(_OWORD *)v91;
              v91[0] = 0;
              v91[1] = 0;
              *(_OWORD *)(v49 + 24) = v92;
              v92 = 0uLL;
              *(_QWORD *)(v49 + 40) = v51;
              *(_QWORD *)(v49 + 48) = v50;
              *(_BYTE *)(v49 + 56) = 16;
              v88 = 0;
              v89 = v49;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v22 + 24) + 40))(*(_QWORD *)(v22 + 24), &v89);
              v52 = v89;
              v89 = 0;
              if (v52)
              {
                v53 = *(std::__shared_weak_count **)(v52 + 32);
                if (v53)
                {
                  v54 = (unint64_t *)&v53->__shared_owners_;
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
                v56 = *(std::__shared_weak_count **)(v52 + 16);
                if (v56)
                {
                  v57 = (unint64_t *)&v56->__shared_owners_;
                  do
                    v58 = __ldaxr(v57);
                  while (__stlxr(v58 - 1, v57));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
                v59 = v88;
                v88 = 0;
                if (v59)
                {
                  v60 = *(std::__shared_weak_count **)(v59 + 32);
                  if (v60)
                  {
                    v61 = (unint64_t *)&v60->__shared_owners_;
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  v63 = *(std::__shared_weak_count **)(v59 + 16);
                  if (v63)
                  {
                    v64 = (unint64_t *)&v63->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                    }
                  }
                  MEMORY[0x212BC6398](v59, 0x10F0C40B62ED6C6);
                }
              }
              v66 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
              if (*((_QWORD *)&v92 + 1))
              {
                v67 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              v69 = (std::__shared_weak_count *)v91[1];
              if (v91[1])
              {
                v70 = (unint64_t *)((char *)v91[1] + 8);
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
            }
            else
            {
              os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
              LODWORD(object) = 67109120;
              HIDWORD(object) = v19;
              v72 = (void *)_os_log_send_and_compose_impl();
              if (v72)
                free(v72);
            }
            if (v20)
            {
              sub_20E8C003C((uint64_t)v79, "CV3DMLFeatureDetection: MLFeatureExtractor: could not get ML Model version, LFDescriptorModelVersion returned %i", v19);
              sub_20E863570((uint64_t)v79);
            }
            sub_20E863570((uint64_t)v79);
            v73 = v85;
            if (v85)
            {
              v74 = (unint64_t *)&v85->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            return a1;
          }
        }
        memmove(v30, v28, v29);
        goto LABEL_50;
      }
    }
  }
  return a1;
}

void sub_20ED5B8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,void *__p,void *a33,int a34,__int16 a35,char a36,char a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void **v43;
  uint64_t v45;

  if (a38 && a37 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  if (*(char *)(v42 + 71) < 0)
    operator delete(*v43);
  v45 = *(_QWORD *)(v42 + 24);
  *(_QWORD *)(v42 + 24) = 0;
  if (v45)
    (*(void (**)(void))(v42 + 32))();
  sub_20ED5AF30((uint64_t *)v42);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED5BA20(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    if (*((char *)result + 71) < 0)
    {
      operator delete((void *)result[6]);
      v3 = v1[3];
      v1[3] = 0;
      if (!v3)
      {
LABEL_8:
        v4 = *v1;
        *v1 = 0;
        if (v4
          && LFV2HandleRelease()
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLFeatureDetectionNodeGroup/src/MLFeatureExtractor.cpp", 40, (uint64_t)"ret == kLFReturnNoError", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        JUMPOUT(0x212BC6398);
      }
    }
    else
    {
      v2 = result[3];
      v1[3] = 0;
      if (!v2)
        goto LABEL_8;
    }
    ((void (*)(void))v1[4])();
    goto LABEL_8;
  }
  return result;
}

void sub_20ED5BAEC(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  sub_20ED5BE30(a1, &v16);
  v3 = v16;
  v17 = v16;
  if (v16)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v16;
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4128;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 1);
  v8 = *(_QWORD *)(v19 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v19;
  *(_QWORD *)(a2 + 40) = v8;
  v19 = 0;
  MEMORY[0x212BC6398]();
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a2 + 32);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v11 = v18;
  if (!v18)
    goto LABEL_14;
  v12 = (unint64_t *)&v18->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = v16;
    v16 = 0;
    if (!v14)
      return;
  }
  else
  {
LABEL_14:
    v14 = v16;
    v16 = 0;
    if (!v14)
      return;
  }
  *(_QWORD *)v14 = off_24CA18708;
  v15 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v15 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24CA19938[v15])(&v19, v14 + 16);
  *(_DWORD *)(v14 + 40) = -1;
  MEMORY[0x212BC6398](v14, 0x10A3C40A1F8E8FFLL);
}

void sub_20ED5BCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20ED5BF80(&a9);
  _Unwind_Resume(a1);
}

void sub_20ED5BCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  sub_20E86665C(v11);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_20E86665C((uint64_t)&a10);
  sub_20ED5BF80(&a9);
  _Unwind_Resume(a1);
}

void sub_20ED5BD28(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED5BD90()
{
  return 1;
}

uint64_t sub_20ED5BD98(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20ED5BDA0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20ED5BDB4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

double sub_20ED5BE30@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  void (**v9)();
  int v10;
  _BYTE v11[24];
  unsigned int v12;
  __int128 v13;
  _QWORD v14[2];

  v2 = a2;
  LODWORD(a2) = *a1;
  v3 = *a1 != 0;
  if (a1[1])
    a2 = (uint64_t *)a2;
  else
    a2 = 0;
  v14[0] = *(_QWORD *)a1;
  v14[1] = v3 | ((_QWORD)a2 << 32);
  sub_2101321DC((uint64_t)&v9, (uint64_t)v14);
  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = off_24CA18708;
  v6 = v12;
  *(_DWORD *)(v4 + 8) = v10;
  *(_BYTE *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  if ((_DWORD)v6 == -1)
  {
    result = *(double *)&v13;
    *(_OWORD *)(v4 + 48) = v13;
    *(_QWORD *)v4 = off_24CA18E58;
    *v2 = v4;
  }
  else
  {
    ((void (*)(_QWORD *, uint64_t, _BYTE *))off_24C9E40F8[v6])(v14, v4 + 16, v11);
    *(_DWORD *)(v5 + 40) = v6;
    v7 = v12;
    result = *(double *)&v13;
    *(_OWORD *)(v5 + 48) = v13;
    *(_QWORD *)v5 = off_24CA18E58;
    *v2 = v5;
    v9 = off_24CA18708;
    if ((_DWORD)v7 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_24CA19938[v7])(v14, v11);
  }
  return result;
}

void sub_20ED5BF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_210124510((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED5BF80(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24CA18708;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24CA19938[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x212BC6398](v2, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

__n128 sub_20ED5C008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA1A9A0;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

__n128 sub_20ED5C024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_24CA1A9C0;
  return result;
}

__n128 sub_20ED5C040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_24CA1A9E0;
  return result;
}

__n128 sub_20ED5C05C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_20ED5C070(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED5C094(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA18708;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA19938[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20ED5C11C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_20ED5C18C(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  *a1 = &off_24C9E4178;
  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[14];
  if (v3)
  {
    do
    {
      v7 = (_QWORD *)*v3;
      v8 = v3[6];
      v3[6] = 0;
      if (v8)
      {
        v9 = *(void **)(v8 + 56);
        if (v9)
        {
          *(_QWORD *)(v8 + 64) = v9;
          operator delete(v9);
        }
        MEMORY[0x212BC6398](v8, 0x1020C40FE1A4B4FLL);
      }
      operator delete(v3);
      v3 = v7;
    }
    while (v7);
  }
  v4 = (void *)a1[12];
  a1[12] = 0;
  if (v4)
    operator delete(v4);
  *a1 = off_24C9E4338;
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_20ED5C254(_QWORD *a1)
{
  sub_20ED5C18C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED5C278(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  double v4;
  void *v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x8_t v13;
  unsigned int v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unsigned __int8 v39;
  const char *v40;
  size_t v41;
  __int128 *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  size_t v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t v58;
  NSObject *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  const char *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  unsigned int v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t **v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  void **v111;
  const char *v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int *v115;
  uint64_t *v116[3];
  int v117;
  const char *v118;
  int v119;
  const char *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  void *__p[2];
  char v125;
  char v126;
  uint64_t v127;
  NSObject *v128;
  __int128 v129;
  __int128 v130;
  void *v131[2];
  unint64_t v132;
  char v133;
  uint64_t v134;

  v2 = a2;
  v3 = a1;
  v134 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 2776))
    v4 = sqrt(*(double *)(a2 + 896) * *(double *)(a2 + 896)+ *(double *)(a2 + 904) * *(double *)(a2 + 904)+ *(double *)(a2 + 912) * *(double *)(a2 + 912));
  else
    v4 = 0.0;
  v5 = (void *)a1[17];
  a1[18] = v5;
  v6 = (unsigned int *)a1[1];
  v115 = (unsigned int *)a1[2];
  v7 = ((char *)v115 - (char *)v6) >> 3;
  v111 = (void **)(a1 + 17);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[19] - (_QWORD)v5) >> 2) < v7)
  {
    if ((char *)v115 - (char *)v6 < 0)
      sub_20E867F44();
    v8 = 12 * v7;
    v9 = (char *)operator new(12 * v7);
    v3[17] = v9;
    v3[18] = v9;
    v3[19] = &v9[v8];
    if (v5)
    {
      operator delete(v5);
      v6 = (unsigned int *)v3[1];
      v115 = (unsigned int *)v3[2];
    }
  }
  if (v6 == v115)
    return;
  v108 = (uint64_t)(v3 + 12);
  v107 = v2 + 5112;
  v109 = v3;
  v110 = v2;
  do
  {
    while (1)
    {
      v10 = *v6;
      v11 = *(_QWORD *)(v2 + 776);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v2 + 784) - v11) >> 3) > v10)
      {
        v12 = v6[1];
        if (0x84BDA12F684BDA13
           * ((uint64_t)(*(_QWORD *)(v11 + 24 * v10 + 8) - *(_QWORD *)(v11 + 24 * v10)) >> 3) > v12)
          break;
      }
      v18 = atomic_load((unsigned __int8 *)&qword_254A5F900);
      if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F900))
      {
        sub_21021D3D8(v116);
        sub_20E8610C0(&v128, "cv3d.vio");
        sub_20E8C4068(v116, (uint64_t)&v128, &qword_254A5F8F8);
        if (SHIBYTE(v129) < 0)
          operator delete(v128);
        __cxa_guard_release(&qword_254A5F900);
        v3 = v109;
        v2 = v110;
      }
      v123 = qword_254A5F8F8;
      if (**(int **)(qword_254A5F8F8 + 56) > 4)
        goto LABEL_10;
      v19 = *(unsigned __int8 *)(qword_254A5F8F8 + 72);
      v20 = sub_20E8C31DC(qword_254A5F8F8, "OSLogSurrogateAppender", 1, 0);
      v21 = v20;
      if (!v19 && v20 == 0)
        goto LABEL_10;
      v116[0] = &v123;
      v116[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v116[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v117 = 4;
      v118 = "unknown file";
      v119 = 49;
      v120 = "unknown function";
      v121 = 0;
      v122 = 0;
      if (*v6 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
LABEL_188:
        abort();
      }
      v23 = v6[1];
      if (v23 >= 0x10000)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_188;
        }
        LOWORD(v23) = *((_WORD *)v6 + 2);
      }
      v24 = *v116[0];
      v25 = (const char *)(*v116[0] + 16);
      v112 = v25;
      v113 = *v116[0];
      if (*(char *)(*v116[0] + 39) < 0)
      {
        v25 = *(const char **)(v24 + 16);
        v26 = *(_QWORD *)(v24 + 24);
        v114 = *v6;
        v39 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v39 & 1) != 0)
          goto LABEL_48;
      }
      else
      {
        v26 = *(unsigned __int8 *)(*v116[0] + 39);
        v114 = *v6;
        v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v27 & 1) != 0)
          goto LABEL_48;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
        if (v126 && v125 < 0)
          operator delete(__p[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_48:
      if (byte_254A4A4F8[23] >= 0)
        v40 = byte_254A4A4F8;
      else
        v40 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v41 = byte_254A4A4F8[23];
      else
        v41 = *(_QWORD *)&byte_254A4A4F8[8];
      v128 = os_log_create(v40, v25);
      if (v41 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v41 >= 0x17)
      {
        v43 = v19;
        v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17)
          v44 = v41 | 7;
        v45 = v44 + 1;
        v42 = (__int128 *)operator new(v44 + 1);
        *((_QWORD *)&v129 + 1) = v41;
        *(_QWORD *)&v130 = v45 | 0x8000000000000000;
        *(_QWORD *)&v129 = v42;
        v19 = v43;
LABEL_61:
        memmove(v42, v40, v41);
        goto LABEL_62;
      }
      BYTE7(v130) = v41;
      v42 = &v129;
      if (v41)
        goto LABEL_61;
LABEL_62:
      *((_BYTE *)v42 + v41) = 0;
      BYTE8(v130) = 1;
      if (v26 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v26 >= 0x17)
      {
        v48 = v19;
        v49 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v49 = v26 | 7;
        v50 = v49 + 1;
        v46 = (void **)operator new(v49 + 1);
        v131[1] = (void *)v26;
        v132 = v50 | 0x8000000000000000;
        v131[0] = v46;
        v19 = v48;
      }
      else
      {
        HIBYTE(v132) = v26;
        v46 = v131;
        if (!v26)
        {
          LOBYTE(v131[0]) = 0;
          v133 = 1;
          v47 = v128;
          if ((SHIBYTE(v132) & 0x80000000) == 0)
            goto LABEL_66;
          goto LABEL_72;
        }
      }
      memmove(v46, v25, v26);
      *((_BYTE *)v46 + v26) = 0;
      v133 = 1;
      v47 = v128;
      if ((SHIBYTE(v132) & 0x80000000) == 0)
      {
LABEL_66:
        v3 = v109;
        v2 = v110;
        if (BYTE8(v130))
          goto LABEL_73;
        goto LABEL_75;
      }
LABEL_72:
      operator delete(v131[0]);
      v3 = v109;
      v2 = v110;
      if (BYTE8(v130))
      {
LABEL_73:
        if (SBYTE7(v130) < 0)
          operator delete((void *)v129);
      }
LABEL_75:
      if (v128)
        os_release(v128);
      v51 = (unsigned __int16)v23 | ((unsigned __int16)v114 << 16);
      if (v21 && *(_QWORD *)(v21 + 24))
      {
        v52 = _os_log_pack_size();
        v53 = (std::__shared_weak_count_vtbl *)operator new(v52, (std::align_val_t)8uLL);
        v54 = (std::__shared_weak_count *)operator new();
        v55 = v54;
        v54->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v54->__shared_weak_owners_ = 0;
        v54[1].__vftable = v53;
        v128 = v53;
        *(_QWORD *)&v129 = v53;
        *((_QWORD *)&v129 + 1) = v54;
        do
          v57 = __ldxr(p_shared_owners);
        while (__stxr(v57 + 1, p_shared_owners));
        v130 = 0uLL;
        v131[0] = 0;
        do
          v58 = __ldaxr(p_shared_owners);
        while (__stlxr(v58 - 1, p_shared_owners));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v55);
        }
        v59 = v128;
        v60 = (_DWORD *)_os_log_pack_fill();
        *v60 = 67109120;
        v60[1] = v51;
        v61 = (char *)operator new();
        v62 = *(unsigned __int8 *)(v113 + 39);
        v63 = v112;
        if ((v62 & 0x80u) != 0)
        {
          v63 = *(const char **)(v113 + 16);
          v62 = *(_QWORD *)(v113 + 24);
        }
        *(_QWORD *)v61 = v59;
        *(_OWORD *)(v61 + 8) = v129;
        v129 = 0uLL;
        *(_OWORD *)(v61 + 24) = v130;
        v130 = 0uLL;
        *((_QWORD *)v61 + 5) = v63;
        *((_QWORD *)v61 + 6) = v62;
        v61[56] = 16;
        v127 = 0;
        __p[0] = v61;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), __p);
        v64 = __p[0];
        __p[0] = 0;
        if (v64)
        {
          v65 = (std::__shared_weak_count *)*((_QWORD *)v64 + 4);
          if (v65)
          {
            v66 = (unint64_t *)&v65->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v68 = (std::__shared_weak_count *)*((_QWORD *)v64 + 2);
          if (v68)
          {
            v69 = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          MEMORY[0x212BC6398](v64, 0x10F0C40B62ED6C6);
          v71 = v127;
          v127 = 0;
          if (v71)
          {
            v72 = *(std::__shared_weak_count **)(v71 + 32);
            if (v72)
            {
              v73 = (unint64_t *)&v72->__shared_owners_;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            v75 = *(std::__shared_weak_count **)(v71 + 16);
            if (v75)
            {
              v76 = (unint64_t *)&v75->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
            MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
          }
        }
        v78 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
        if (*((_QWORD *)&v130 + 1))
        {
          v79 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v81 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
        if (*((_QWORD *)&v129 + 1))
        {
          v82 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
      }
      else
      {
        os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
        LODWORD(v128) = 67109120;
        HIDWORD(v128) = v51;
        v84 = (void *)_os_log_send_and_compose_impl();
        if (v84)
          free(v84);
      }
      if (v19)
      {
        if (*v6 >= 0x10000
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
LABEL_190:
          abort();
        }
        v85 = v6[1];
        if (v85 >= 0x10000)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_190;
          }
          LOWORD(v85) = *((_WORD *)v6 + 2);
        }
        sub_20E8C003C((uint64_t)v116, "Invalid CameraStreamId (source ID: %d)", (unsigned __int16)v85 | ((unsigned __int16)*v6 << 16));
        sub_20E863570((uint64_t)v116);
      }
      sub_20E863570((uint64_t)v116);
      v86 = v122;
      if (v122)
      {
        v87 = (unint64_t *)&v122->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
LABEL_10:
      v6 += 2;
      if (v6 == v115)
        return;
    }
    if (!*((_BYTE *)v3 + 36))
    {
      v28 = 1;
      v29 = 1;
      v30 = *(_QWORD *)v6;
      v32 = (char *)v3[18];
      v31 = v3[19];
      if ((unint64_t)v32 >= v31)
        goto LABEL_38;
      goto LABEL_152;
    }
    if (v10 >= 0x10000)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      LODWORD(v12) = v6[1];
    }
    if (v12 >= 0x10000)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      LODWORD(v12) = v6[1];
    }
    v13 = *(int8x8_t *)(v2 + 424);
    if (!*(_QWORD *)&v13)
      goto LABEL_151;
    v14 = *v6;
    v15 = (unsigned __int16)v12 | ((unsigned __int16)*v6 << 16);
    v16 = (uint8x8_t)vcnt_s8(v13);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v17 = (unsigned __int16)v12 | ((unsigned __int16)v14 << 16);
      if (*(_QWORD *)&v13 <= v15)
        v17 = v15 % *(_QWORD *)&v13;
    }
    else
    {
      v17 = (v13.i32[0] - 1) & v15;
    }
    v89 = *(uint64_t ***)(*(_QWORD *)(v2 + 416) + 8 * v17);
    if (!v89 || (v90 = *v89) == 0)
    {
LABEL_151:
      v28 = 0;
      v29 = 0;
      v30 = *(_QWORD *)v6;
      v32 = (char *)v3[18];
      v31 = v3[19];
      if ((unint64_t)v32 >= v31)
        goto LABEL_38;
      goto LABEL_152;
    }
    if (v16.u32[0] < 2uLL)
    {
      v91 = *(_QWORD *)&v13 - 1;
      while (1)
      {
        v93 = v90[1];
        if (v93 == v15)
        {
          if (*((_DWORD *)v90 + 4) == (_DWORD)v15)
            goto LABEL_161;
        }
        else if ((v93 & v91) != v17)
        {
          goto LABEL_151;
        }
        v90 = (uint64_t *)*v90;
        if (!v90)
          goto LABEL_151;
      }
    }
    while (1)
    {
      v92 = v90[1];
      if (v92 == v15)
        break;
      if (v92 >= *(_QWORD *)&v13)
        v92 %= *(_QWORD *)&v13;
      if (v92 != v17)
        goto LABEL_151;
LABEL_141:
      v90 = (uint64_t *)*v90;
      if (!v90)
        goto LABEL_151;
    }
    if (*((_DWORD *)v90 + 4) != (_DWORD)v15)
      goto LABEL_141;
LABEL_161:
    v99 = *(_QWORD *)(v2 + 3840);
    v100 = *(_QWORD *)(v2 + 3848);
    if (v99 != v100)
    {
      while (v14 != *(_DWORD *)v99 || (_DWORD)v12 != *(_DWORD *)(v99 + 4))
      {
        v99 += 32;
        if (v99 == v100)
          goto LABEL_170;
      }
    }
    if (v99 == v100)
    {
LABEL_170:
      v101 = 1.0;
    }
    else
    {
      v101 = *(double *)(v99 + 24);
      if (v101 <= 0.0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/CalibratingCameraStreamAlternator.cpp", 74, (uint64_t)"active_camera->ratio_of_camera_usage > 0", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v101 = *(double *)(v99 + 24);
        v14 = *v6;
        LODWORD(v12) = v6[1];
      }
    }
    v102 = *(_QWORD *)(*(_QWORD *)(v2 + 776) + 24 * v14);
    v128 = v6;
    v103 = sub_20ED5D564(v108, (int *)v6, (uint64_t)&unk_2102DB95C, (_QWORD **)&v128);
    LODWORD(v104) = *((_DWORD *)v90 + 6);
    v28 = sub_20EFF55A8(*((_QWORD *)v103 + 6), *(_BYTE *)(v2 + 401), ((double)v104 / v101), *(double *)(v2 + 32), v4, *(double *)(v2 + 408), *(double *)(v2 + 384), v107, v102 + 216 * v12 + 112);
    v128 = v6;
    v105 = *((_QWORD *)sub_20ED5D564(v108, (int *)v6, (uint64_t)&unk_2102DB95C, (_QWORD **)&v128) + 6);
    v106 = *(unsigned int *)(v105 + 104);
    if (*(_QWORD *)(v105 + 96) == v106)
    {
      v29 = 0;
      v30 = *(_QWORD *)v6;
      v32 = (char *)v3[18];
      v31 = v3[19];
      if ((unint64_t)v32 >= v31)
        goto LABEL_38;
LABEL_152:
      *(_QWORD *)v32 = v30;
      v32[8] = v28;
      v32[9] = v28;
      v94 = v32 + 12;
      v32[10] = v29;
    }
    else
    {
      v29 = v106 < *(_DWORD *)(v105 + 32);
      v30 = *(_QWORD *)v6;
      v32 = (char *)v3[18];
      v31 = v3[19];
      if ((unint64_t)v32 < v31)
        goto LABEL_152;
LABEL_38:
      v33 = (char *)*v111;
      v34 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (_BYTE *)*v111) >> 2);
      v35 = v34 + 1;
      if (v34 + 1 > 0x1555555555555555)
        sub_20E867F44();
      v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v33) >> 2);
      if (2 * v36 > v35)
        v35 = 2 * v36;
      if (v36 >= 0xAAAAAAAAAAAAAAALL)
        v37 = 0x1555555555555555;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 > 0x1555555555555555)
          sub_20E877A38();
        v38 = (char *)operator new(12 * v37);
      }
      else
      {
        v38 = 0;
      }
      v95 = &v38[12 * v34];
      *(_QWORD *)v95 = v30;
      v95[8] = v28;
      v95[9] = v28;
      v95[10] = v29;
      v96 = v95;
      if (v32 != v33)
      {
        do
        {
          v97 = *(_QWORD *)(v32 - 12);
          v32 -= 12;
          v98 = *(_DWORD *)(v32 + 7);
          *(_QWORD *)(v96 - 12) = v97;
          v96 -= 12;
          *(_DWORD *)(v96 + 7) = v98;
        }
        while (v32 != v33);
        v32 = (char *)*v111;
      }
      v94 = v95 + 12;
      v3[17] = v96;
      v3[18] = v95 + 12;
      v3[19] = &v38[12 * v37];
      if (v32)
        operator delete(v32);
    }
    v3[18] = v94;
    v6 += 2;
  }
  while (v6 != v115);
}

void sub_20ED5D114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a44)
  {
    if (a43 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20ED5D154(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
  {
    operator delete(*(void **)(v1 - 192));
    __cxa_guard_abort(&qword_254A5F900);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F900);
  _Unwind_Resume(a1);
}

void sub_20ED5D1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  sub_20E86E8C4(&a38);
  sub_20E86E8C4((uint64_t *)(v38 - 200));
  sub_20E86E658(v38 - 192);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20ED5D1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_20E86E658(v28 - 192);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20ED5D1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  MEMORY[0x212BC6398](v28, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20ED5D220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v30;

  if (*(char *)(v28 - 161) < 0)
    operator delete(*(void **)(v28 - 184));
  v30 = *(void **)(v28 - 192);
  if (v30)
    os_release(v30);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20ED5D2D8()
{
  JUMPOUT(0x20ED5D2E0);
}

uint64_t sub_20ED5D2E8(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  unsigned int v6;
  int8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v20;
  double v21;
  double v22;
  char *v23;
  char *v24;
  uint64_t result;
  _QWORD *v26;

  v4 = *(double *)(a2 + 112);
  v5 = *(double *)(a2 + 120);
  if (*(_DWORD *)(a2 + 392) >= 0x10000u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_45;
  }
  v6 = *(_DWORD *)(a2 + 396);
  if (v6 < 0x10000)
    goto LABEL_6;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_45:
    abort();
  }
  v6 = *(_DWORD *)(a2 + 396);
LABEL_6:
  v7 = *(int8x8_t *)(a1 + 104);
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (_QWORD *)(a2 + 392);
  v9 = (_QWORD *)(a1 + 96);
  v10 = *(_DWORD *)(a2 + 392);
  v11 = (unsigned __int16)v6 | ((unsigned __int16)v10 << 16);
  v12 = (uint8x8_t)vcnt_s8(v7);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = (unsigned __int16)v6 | ((unsigned __int16)v10 << 16);
    if (*(_QWORD *)&v7 <= v11)
      v13 = v11 % *(_QWORD *)&v7;
  }
  else
  {
    v13 = (v7.i32[0] - 1) & v11;
  }
  v14 = *(uint64_t ***)(*v9 + 8 * v13);
  if (!v14)
    return 0;
  v15 = *v14;
  if (!*v14)
    return 0;
  if (v12.u32[0] < 2uLL)
  {
    v16 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v20 = v15[1];
      if (v20 == v11)
      {
        if (*((_DWORD *)v15 + 4) == v10 && *((_DWORD *)v15 + 5) == v6)
          goto LABEL_33;
      }
      else if ((v20 & v16) != v13)
      {
        return 0;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        return 0;
    }
  }
  while (1)
  {
    v18 = v15[1];
    if (v18 == v11)
      break;
    if (v18 >= *(_QWORD *)&v7)
      v18 %= *(_QWORD *)&v7;
    if (v18 != v13)
      return 0;
LABEL_19:
    v15 = (uint64_t *)*v15;
    if (!v15)
      return 0;
  }
  if (*((_DWORD *)v15 + 4) != v10 || *((_DWORD *)v15 + 5) != v6)
    goto LABEL_19;
LABEL_33:
  v21 = v4 + v5;
  if (*((_BYTE *)v15 + 32))
  {
    v22 = v21 - *((double *)v15 + 3);
    if (*((_BYTE *)v15 + 44))
      goto LABEL_35;
  }
  else
  {
    *((double *)v15 + 3) = v21;
    *((_BYTE *)v15 + 32) = 1;
    v22 = v21 - v21;
    if (*((_BYTE *)v15 + 44))
LABEL_35:
      ++*((_DWORD *)v15 + 10);
  }
  if (v22 >= *(double *)(a1 + 88))
  {
    *((_BYTE *)v15 + 44) = 1;
    *((_DWORD *)v15 + 10) = 0;
  }
  v26 = v8;
  v23 = sub_20ED5D564((uint64_t)v9, (int *)v8, (uint64_t)&unk_2102DB95C, &v26);
  if (!v23[44])
    return 0;
  v24 = v23;
  if (*((_DWORD *)v23 + 10) >= *(_DWORD *)(a1 + 32))
  {
    result = 0;
    v24[44] = 0;
  }
  else
  {
    *((double *)v15 + 3) = v21;
    result = 1;
    *((_BYTE *)v15 + 32) = 1;
  }
  return result;
}

char *sub_20ED5D564(uint64_t a1, int *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_75;
  }
  v8 = a2[1];
  if (v8 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v8 = a2[1];
      goto LABEL_6;
    }
LABEL_75:
    abort();
  }
LABEL_6:
  v9 = *a2;
  v10 = (unsigned __int16)v8 | ((unsigned __int16)*a2 << 16);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = (unsigned __int16)v8 | ((unsigned __int16)v9 << 16);
      if (v11 <= v10)
        v4 = v10 % v11;
    }
    else
    {
      v4 = ((_DWORD)v11 - 1) & v10;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v14 + 1);
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v9 && *((_DWORD *)v14 + 5) == v8)
                return v14;
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_36;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_36;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v9 && *((_DWORD *)v14 + 5) == v8)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_36:
  v19 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x38uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    v10 = v4;
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_49;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_49:
        sub_20E8D2B3C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10)
        v10 %= v11;
    }
    else
    {
      v10 = ((_DWORD)v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v30)
  {
    *(_QWORD *)v14 = *v30;
LABEL_72:
    *v30 = v14;
    goto LABEL_73;
  }
  *(_QWORD *)v14 = *v19;
  *v19 = v14;
  *(_QWORD *)(v29 + 8 * v10) = v19;
  if (*(_QWORD *)v14)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20ED5D904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20ED5D918((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED5D918(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[6];
      v2[6] = 0;
      if (v3)
      {
        v4 = *(void **)(v3 + 56);
        if (v4)
        {
          *(_QWORD *)(v3 + 64) = v4;
          operator delete(v4);
        }
        MEMORY[0x212BC6398](v3, 0x1020C40FE1A4B4FLL);
      }
    }
    operator delete(v2);
  }
  return a1;
}

BOOL sub_20ED5D994(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)(a1 + 8);
  v3 = *(_DWORD **)(a1 + 16);
  if (v2 != v3)
  {
    while (*v2 != *(_DWORD *)(a2 + 392) || v2[1] != *(_DWORD *)(a2 + 396))
    {
      v2 += 2;
      if (v2 == v3)
      {
        v2 = *(_DWORD **)(a1 + 16);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

_QWORD *sub_20ED5D9D4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9E41C0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20ED5DA10(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9E41C0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED5DA5C@<X0>(unsigned int a1@<W0>, unsigned int **a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  _QWORD *v8;
  uint64_t result;

  if (a1 > 2)
  {
    v8 = operator new(0x90uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_24C9E4258;
    result = sub_20ED95538((uint64_t)(v8 + 3), a2, a3, a4);
  }
  else
  {
    v8 = operator new(0x50uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_24C9E4208;
    result = sub_20ED98FC4((uint64_t)(v8 + 3), a2, a3);
  }
  *a5 = result;
  a5[1] = (uint64_t)v8;
  return result;
}

void sub_20ED5DB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED5DB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED5DB50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED5DB60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED5DB90(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20ED5DBA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED5DBB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED5DBE0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 sub_20ED5DBF0@<Q0>(char **a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;
  __n128 result;
  __int128 v10;

  if (*a1 == a1[1]
    && *a2 == a2[1]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/FrameAlternatorConfig.cpp", 41, (uint64_t)"!primary_cameras.empty() || !secondary_cameras.empty()", 54, (uint64_t)&unk_21025F38E, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_DWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_QWORD *)(a4 + 52) = 0x5A00000028;
  *(_OWORD *)(a4 + 64) = xmmword_21031E640;
  *(_OWORD *)(a4 + 80) = xmmword_21031E650;
  *(_QWORD *)(a4 + 96) = 0x3FE0000000000000;
  *(_DWORD *)(a4 + 104) = 1028443341;
  *(_QWORD *)(a4 + 112) = 0x4049000000000000;
  *(_DWORD *)(a4 + 120) = 200;
  *(_BYTE *)(a4 + 124) = 1;
  *(_QWORD *)(a4 + 128) = 30;
  *(_DWORD *)(a4 + 136) = 20;
  *(_OWORD *)(a4 + 144) = xmmword_21031E660;
  *(_QWORD *)(a4 + 160) = 0xF0000001ELL;
  *(_DWORD *)(a4 + 168) = 3;
  *(_OWORD *)(a4 + 176) = xmmword_21031E670;
  if ((char **)a4 != a1)
    sub_20E92CD94((_QWORD *)a4, *a1, a1[1], (a1[1] - *a1) >> 3);
  if ((char **)(a4 + 24) != a2)
    sub_20E92CD94((_QWORD *)(a4 + 24), *a2, a2[1], (a2[1] - *a2) >> 3);
  *(_DWORD *)(a4 + 48) = 3;
  v8 = *(_OWORD *)(a3 + 3536);
  *(_OWORD *)(a4 + 120) = *(_OWORD *)(a3 + 3520);
  *(_OWORD *)(a4 + 136) = v8;
  result = *(__n128 *)(a3 + 3552);
  v10 = *(_OWORD *)(a3 + 3568);
  *(__n128 *)(a4 + 152) = result;
  *(_OWORD *)(a4 + 168) = v10;
  return result;
}

void sub_20ED5DD6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9AA8C8(v1);
  _Unwind_Resume(a1);
}

void sub_20ED5DD84()
{
  JUMPOUT(0x212BC6398);
}

BOOL sub_20ED5DD98(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 400) != 0;
}

uint64_t sub_20ED5DDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  BOOL v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 - 8) + 24))(*(_QWORD *)(v5 - 8), a2);
    if ((_DWORD)result)
      v7 = v5 == v3;
    else
      v7 = 1;
    v5 += 8;
  }
  while (!v7);
  return result;
}

uint64_t sub_20ED5DE18(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

void sub_20ED5DE64(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  double v26;
  char *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  char *v52;
  int64_t v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  int64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  _BYTE *v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  int64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  void *v99;
  int64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  std::runtime_error *exception;
  void *__p;
  _BYTE *v116;
  void *v117[2];
  char *v118;

  v117[0] = 0;
  v117[1] = 0;
  v118 = 0;
  if (*(_DWORD *)a1 != 3 || (v6 = *(_QWORD *)(a1 + 2888), v7 = *(_DWORD **)(a1 + 2896), (_DWORD *)v6 == v7))
  {
    v17 = (_QWORD *)operator new();
    sub_20ED922B8(v17, a1);
    v16 = (char *)v117[1];
    v19 = ((char *)v117[1] - (char *)v117[0]) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      sub_20E867F44();
    v21 = v118 - (char *)v117[0];
    if ((v118 - (char *)v117[0]) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        sub_20E877A38();
      v23 = (char *)operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *(_QWORD *)v24 = v17;
      v18 = v24 + 8;
    }
    else
    {
      v24 = (char *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v17;
      v18 = (void *)(8 * v19 + 8);
    }
    v117[0] = v24;
    goto LABEL_50;
  }
  v8 = 0;
  while (1)
  {
    v9 = v8;
    v10 = (_DWORD *)(v6 + v8 + 16);
    if (v10 == v7)
      break;
    if (*(_DWORD *)(v6 + v9) == *v10
      && *(float *)(v6 + v9 + 4) == *(float *)(v6 + v9 + 20)
      && *(float *)(v6 + v9 + 8) == *(float *)(v6 + v9 + 24))
    {
      v11 = v6 + v9;
      if (*(unsigned __int8 *)(v6 + v9 + 12) == *(unsigned __int8 *)(v6 + v9 + 28))
      {
        v12 = *(unsigned __int8 *)(v11 + 13);
        v13 = *(unsigned __int8 *)(v11 + 29);
        v8 = v9 + 16;
        if (v12 == v13)
          continue;
      }
    }
    if ((_DWORD *)(v6 + v9) != v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "For Sync MultiCamera we must have all configs identical.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    break;
  }
  if (*(_BYTE *)(v6 + 13))
  {
    v14 = operator new();
    *(_QWORD *)v14 = &off_24C9E42A8;
    v16 = (char *)v117[1];
    v15 = v118;
    if (v117[1] >= v118)
      goto LABEL_28;
LABEL_15:
    *(_QWORD *)v16 = v14;
    v18 = v16 + 8;
    goto LABEL_53;
  }
  v14 = operator new();
  *(_QWORD *)v14 = &off_24C9E92F0;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)v6;
  v26 = *(float *)(v6 + 4);
  *(_BYTE *)(v14 + 24) = 1;
  *(_BYTE *)(v14 + 32) = 0;
  *(_BYTE *)(v14 + 40) = 0;
  *(double *)(v14 + 48) = v26;
  *(_BYTE *)(v14 + 56) = 0;
  *(_BYTE *)(v14 + 64) = 0;
  v16 = (char *)v117[1];
  v15 = v118;
  if (v117[1] < v118)
    goto LABEL_15;
LABEL_28:
  v27 = (char *)v117[0];
  v28 = v16 - (char *)v117[0];
  v29 = (v16 - (char *)v117[0]) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
    sub_20E867F44();
  v31 = v15 - (char *)v117[0];
  if (v31 >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v32 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v32 = v30;
  if (v32)
  {
    if (v32 >> 61)
      sub_20E877A38();
    v33 = (char *)operator new(8 * v32);
    v34 = (uint64_t *)&v33[8 * v29];
    v25 = &v33[8 * v32];
    *v34 = v14;
    v18 = v34 + 1;
    v35 = v16 - v27;
    if (v16 != v27)
      goto LABEL_37;
  }
  else
  {
    v33 = 0;
    v34 = (uint64_t *)(8 * v29);
    v25 = 0;
    *(_QWORD *)(8 * v29) = v14;
    v18 = (void *)(8 * v29 + 8);
    v35 = v16 - v27;
    if (v16 != v27)
    {
LABEL_37:
      v36 = v35 - 8;
      if (v36 < 0x78
        || &v16[-(v36 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v34 && &v33[v28 - (v36 & 0xFFFFFFFFFFFFFFF8) - 8] < v16)
      {
        goto LABEL_140;
      }
      v37 = (v36 >> 3) + 1;
      v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = (uint64_t *)((char *)v34 - v38);
      v39 = &v16[-v38];
      v40 = v16 - 16;
      v41 = &v33[8 * v29 - 16];
      v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *((_OWORD *)v40 - 1);
        v43 = *(_OWORD *)v40;
        *((_OWORD *)v40 - 1) = 0uLL;
        *(_OWORD *)v40 = 0uLL;
        *((_OWORD *)v41 - 1) = v44;
        *(_OWORD *)v41 = v43;
        v40 -= 32;
        v41 -= 32;
        v42 -= 4;
      }
      while (v42);
      v16 = v39;
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_140:
        do
        {
          v45 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *(_QWORD *)v16 = 0;
          *--v34 = v45;
        }
        while (v16 != v27);
      }
      v16 = (char *)v117[0];
      v46 = (char *)v117[1];
      v117[0] = v34;
      v117[1] = v18;
      v118 = v25;
      while (v46 != v16)
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        v47 = v48;
        *(_QWORD *)v46 = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      }
      goto LABEL_51;
    }
  }
  v117[0] = v34;
  v117[1] = v18;
LABEL_50:
  v118 = v25;
LABEL_51:
  if (v16)
    operator delete(v16);
LABEL_53:
  v117[1] = v18;
  if (a2 && *(_DWORD *)(a1 + 2744) != 3)
  {
    v49 = operator new();
    sub_20ED9277C(v49, a1 + 2696);
    v50 = (char *)v117[1];
    if (v117[1] < v118)
    {
      *(_QWORD *)v117[1] = v49;
      v51 = v50 + 8;
LABEL_81:
      v117[1] = v51;
      goto LABEL_82;
    }
    v52 = (char *)v117[0];
    v53 = (char *)v117[1] - (char *)v117[0];
    v54 = ((char *)v117[1] - (char *)v117[0]) >> 3;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61)
      sub_20E867F44();
    v56 = v118 - (char *)v117[0];
    if ((v118 - (char *)v117[0]) >> 2 > v55)
      v55 = v56 >> 2;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
      v57 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    if (v57)
    {
      if (v57 >> 61)
        sub_20E877A38();
      v58 = (char *)operator new(8 * v57);
      v59 = (uint64_t *)&v58[8 * v54];
      v60 = &v58[8 * v57];
      *v59 = v49;
      v51 = v59 + 1;
      v61 = v50 - v52;
      if (v50 != v52)
        goto LABEL_66;
    }
    else
    {
      v58 = 0;
      v59 = (uint64_t *)(8 * v54);
      v60 = 0;
      *(_QWORD *)(8 * v54) = v49;
      v51 = (void *)(8 * v54 + 8);
      v61 = v50 - v52;
      if (v50 != v52)
      {
LABEL_66:
        v62 = v61 - 8;
        if (v62 < 0x78
          || &v50[-(v62 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v59 && &v58[v53 - (v62 & 0xFFFFFFFFFFFFFFF8) - 8] < v50)
        {
          goto LABEL_141;
        }
        v63 = (v62 >> 3) + 1;
        v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = (uint64_t *)((char *)v59 - v64);
        v65 = &v50[-v64];
        v66 = v50 - 16;
        v67 = &v58[8 * v54 - 16];
        v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v70 = *((_OWORD *)v66 - 1);
          v69 = *(_OWORD *)v66;
          *((_OWORD *)v66 - 1) = 0uLL;
          *(_OWORD *)v66 = 0uLL;
          *((_OWORD *)v67 - 1) = v70;
          *(_OWORD *)v67 = v69;
          v66 -= 32;
          v67 -= 32;
          v68 -= 4;
        }
        while (v68);
        v50 = v65;
        if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_141:
          do
          {
            v71 = *((_QWORD *)v50 - 1);
            v50 -= 8;
            *(_QWORD *)v50 = 0;
            *--v59 = v71;
          }
          while (v50 != v52);
        }
        v50 = (char *)v117[0];
        v72 = (char *)v117[1];
        v117[0] = v59;
        v117[1] = v51;
        v118 = v60;
        while (v72 != v50)
        {
          v74 = *((_QWORD *)v72 - 1);
          v72 -= 8;
          v73 = v74;
          *(_QWORD *)v72 = 0;
          if (v74)
            (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
        }
        goto LABEL_79;
      }
    }
    v117[0] = v59;
    v118 = v60;
LABEL_79:
    if (v50)
      operator delete(v50);
    goto LABEL_81;
  }
LABEL_82:
  sub_20EBF8D9C(a1 + 2696, (char **)&__p);
  if (__p == v116)
  {
    v81 = (uint64_t *)v117[0];
    if ((void *)((char *)v117[1] - (char *)v117[0]) >= (void *)9)
      goto LABEL_100;
    goto LABEL_88;
  }
  v75 = (_QWORD *)operator new();
  v75[1] = 0;
  *v75 = &off_24C9E41C0;
  v75[2] = 0;
  v75[3] = 0;
  v76 = __p;
  v77 = v116 - (_BYTE *)__p;
  if (v116 != __p)
  {
    if (v77 < 0)
      sub_20E92CED8();
    v78 = (char *)operator new(v116 - (_BYTE *)__p);
    v75[1] = v78;
    v75[2] = v78;
    v79 = &v78[8 * (v77 >> 3)];
    v75[3] = v79;
    memcpy(v78, v76, v77);
    v75[2] = v79;
  }
  v80 = (char *)v117[1];
  if (v117[1] >= v118)
  {
    v90 = (char *)v117[0];
    v91 = (char *)v117[1] - (char *)v117[0];
    v92 = ((char *)v117[1] - (char *)v117[0]) >> 3;
    v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 61)
      sub_20E867F44();
    v94 = v118 - (char *)v117[0];
    if ((v118 - (char *)v117[0]) >> 2 > v93)
      v93 = v94 >> 2;
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
      v95 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v95 = v93;
    if (v95)
    {
      if (v95 >> 61)
        sub_20E877A38();
      v96 = (char *)operator new(8 * v95);
      v97 = &v96[8 * v92];
      v98 = &v96[8 * v95];
      *(_QWORD *)v97 = v75;
      v99 = v97 + 8;
      v100 = v80 - v90;
      if (v80 != v90)
        goto LABEL_111;
    }
    else
    {
      v96 = 0;
      v97 = (char *)(8 * v92);
      v98 = 0;
      *(_QWORD *)(8 * v92) = v75;
      v99 = (void *)(8 * v92 + 8);
      v100 = v80 - v90;
      if (v80 != v90)
      {
LABEL_111:
        v101 = v100 - 8;
        if (v101 < 0x78
          || &v80[-(v101 & 0xFFFFFFFFFFFFFFF8) - 8] < v97 && &v96[v91 - (v101 & 0xFFFFFFFFFFFFFFF8) - 8] < v80)
        {
          goto LABEL_142;
        }
        v102 = (v101 >> 3) + 1;
        v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
        v97 -= v103;
        v104 = &v80[-v103];
        v105 = v80 - 16;
        v106 = &v96[8 * v92 - 16];
        v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v109 = *((_OWORD *)v105 - 1);
          v108 = *(_OWORD *)v105;
          *((_OWORD *)v105 - 1) = 0uLL;
          *(_OWORD *)v105 = 0uLL;
          *((_OWORD *)v106 - 1) = v109;
          *(_OWORD *)v106 = v108;
          v105 -= 32;
          v106 -= 32;
          v107 -= 4;
        }
        while (v107);
        v80 = v104;
        if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_142:
          do
          {
            v110 = *((_QWORD *)v80 - 1);
            v80 -= 8;
            *(_QWORD *)v80 = 0;
            *((_QWORD *)v97 - 1) = v110;
            v97 -= 8;
          }
          while (v80 != v90);
        }
        v80 = (char *)v117[0];
        v111 = (char *)v117[1];
        v117[0] = v97;
        v117[1] = v99;
        v118 = v98;
        while (v111 != v80)
        {
          v113 = *((_QWORD *)v111 - 1);
          v111 -= 8;
          v112 = v113;
          *(_QWORD *)v111 = 0;
          if (v113)
            (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
        }
LABEL_124:
        if (v80)
          operator delete(v80);
        v117[1] = v99;
        v81 = (uint64_t *)v117[0];
        if ((unint64_t)v99 - (unint64_t)v117[0] >= 9)
          goto LABEL_100;
LABEL_88:
        v82 = *v81;
        *v81 = 0;
        *a3 = v82;
        v83 = __p;
        if (!__p)
          goto LABEL_90;
        goto LABEL_89;
      }
    }
    v117[0] = v97;
    v117[1] = v99;
    v118 = v98;
    goto LABEL_124;
  }
  *(_QWORD *)v117[1] = v75;
  v117[1] = v80 + 8;
  v81 = (uint64_t *)v117[0];
  if ((unint64_t)(v80 + 8 - (char *)v117[0]) < 9)
    goto LABEL_88;
LABEL_100:
  v89 = operator new();
  *(_QWORD *)v89 = &off_24C9E42F0;
  *(_OWORD *)(v89 + 8) = *(_OWORD *)v117;
  *(_QWORD *)(v89 + 24) = v118;
  v117[0] = 0;
  v117[1] = 0;
  v118 = 0;
  *a3 = v89;
  v83 = __p;
  if (__p)
  {
LABEL_89:
    v116 = v83;
    operator delete(v83);
  }
LABEL_90:
  v84 = v117[0];
  if (v117[0])
  {
    v85 = v117[1];
    v86 = v117[0];
    if (v117[1] != v117[0])
    {
      do
      {
        v88 = *--v85;
        v87 = v88;
        *v85 = 0;
        if (v88)
          (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
      }
      while (v85 != v84);
      v86 = v117[0];
    }
    v117[1] = v84;
    operator delete(v86);
  }
}

void sub_20ED5E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EA5C654((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20ED5E824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  sub_20EA5C654(&a13);
  _Unwind_Resume(a1);
}

void sub_20ED5E840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EA5C654((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20ED5E854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_20EA5C654(&a13);
  _Unwind_Resume(a1);
}

void sub_20ED5E944()
{
  void **v0;
  uint64_t v1;
  void *v2;

  v2 = *v0;
  if (*v0)
  {
    *(_QWORD *)(v1 + 16) = v2;
    operator delete(v2);
  }
  MEMORY[0x212BC6398](v1, 0xA1C4030951706);
  JUMPOUT(0x20ED5E970);
}

_QWORD *sub_20ED5E9A4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24C9E42F0;
  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20ED5EA24(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24C9E42F0;
  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED5EABC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  _BYTE *v26;
  __int128 v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  _BYTE *v34;
  int64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v61;
  uint64_t *v66;
  uint64_t v67;
  void *__p;
  void *v69;

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)a1 = &off_24C9E4398;
  *(_QWORD *)(a1 + 56) = &unk_24C9E43F0;
  *(_QWORD *)(a1 + 112) = &unk_24C9E4418;
  *(_QWORD *)(a1 + 168) = &unk_24C9E4440;
  *(_QWORD *)(a1 + 224) = &unk_24C9E4468;
  *(_QWORD *)(a1 + 280) = &unk_24C9E4490;
  *(_QWORD *)(a1 + 336) = &unk_24C9E44B8;
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 2568);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)a2;
  v66 = (uint64_t *)(a2 + 8);
  sub_20E8A1408(a1 + 456, a2 + 8);
  v12 = *(_OWORD *)(a2 + 2440);
  v13 = *(_OWORD *)(a2 + 2456);
  v14 = *(_OWORD *)(a2 + 2488);
  *(_OWORD *)(a1 + 2920) = *(_OWORD *)(a2 + 2472);
  *(_OWORD *)(a1 + 2936) = v14;
  *(_OWORD *)(a1 + 2888) = v12;
  *(_OWORD *)(a1 + 2904) = v13;
  v15 = *(_OWORD *)(a2 + 2504);
  v16 = *(_OWORD *)(a2 + 2520);
  v17 = *(_OWORD *)(a2 + 2552);
  *(_OWORD *)(a1 + 2984) = *(_OWORD *)(a2 + 2536);
  *(_OWORD *)(a1 + 3000) = v17;
  *(_OWORD *)(a1 + 2952) = v15;
  *(_OWORD *)(a1 + 2968) = v16;
  v18 = *(_OWORD *)(a2 + 2568);
  v19 = *(_OWORD *)(a2 + 2584);
  *(_OWORD *)(a1 + 3044) = *(_OWORD *)(a2 + 2596);
  *(_OWORD *)(a1 + 3016) = v18;
  *(_OWORD *)(a1 + 3032) = v19;
  *(_QWORD *)(a1 + 3064) = 0;
  *(_QWORD *)(a1 + 3080) = 0;
  *(_QWORD *)(a1 + 3072) = 0;
  v20 = *(_BYTE **)(a2 + 2616);
  v21 = *(_BYTE **)(a2 + 2624);
  v22 = v21 - v20;
  if (v21 != v20)
  {
    if (v22 < 0)
      sub_20E867F44();
    v23 = (char *)operator new(v21 - v20);
    *(_QWORD *)(a1 + 3064) = v23;
    *(_QWORD *)(a1 + 3072) = v23;
    v24 = &v23[4 * (v22 >> 2)];
    *(_QWORD *)(a1 + 3080) = v24;
    memcpy(v23, v20, v22);
    *(_QWORD *)(a1 + 3072) = v24;
  }
  v25 = *(_OWORD *)(a2 + 2640);
  *(_QWORD *)(a1 + 3104) = *(_QWORD *)(a2 + 2656);
  *(_OWORD *)(a1 + 3088) = v25;
  v26 = (_BYTE *)(a1 + 3112);
  if (*(char *)(a2 + 2687) < 0)
  {
    sub_20E860C04(v26, *(void **)(a2 + 2664), *(_QWORD *)(a2 + 2672));
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 2664);
    *(_QWORD *)(a1 + 3128) = *(_QWORD *)(a2 + 2680);
    *(_OWORD *)v26 = v27;
  }
  *(_BYTE *)(a1 + 3136) = *(_BYTE *)(a2 + 2688);
  v67 = a2 + 2696;
  sub_20E92D224(a1 + 3144, a2 + 2696);
  *(_QWORD *)(a1 + 3352) = 0;
  *(_OWORD *)(a1 + 3336) = 0u;
  v28 = *(_BYTE **)(a2 + 2888);
  v29 = *(_BYTE **)(a2 + 2896);
  v30 = v29 - v28;
  if (v29 != v28)
  {
    if (v30 < 0)
      sub_20E867F44();
    v31 = (char *)operator new(v29 - v28);
    *(_QWORD *)(a1 + 3336) = v31;
    *(_QWORD *)(a1 + 3344) = v31;
    v32 = &v31[16 * (v30 >> 4)];
    *(_QWORD *)(a1 + 3352) = v32;
    memcpy(v31, v28, v30 - 1);
    *(_QWORD *)(a1 + 3344) = v32;
  }
  v61 = a7;
  sub_20E86C2D0(a1 + 3360, (__int128 *)(a2 + 2912));
  *(_QWORD *)(a1 + 3768) = 0;
  *(_OWORD *)(a1 + 3752) = 0u;
  v33 = *(_BYTE **)(a2 + 3304);
  v34 = *(_BYTE **)(a2 + 3312);
  v35 = v34 - v33;
  if (v34 != v33)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v35 >> 3) >= 0x666666666666667)
      sub_20E867F44();
    v36 = (char *)operator new(v35);
    *(_QWORD *)(a1 + 3752) = v36;
    *(_QWORD *)(a1 + 3760) = v36;
    v37 = &v36[8 * (v35 >> 3)];
    *(_QWORD *)(a1 + 3768) = v37;
    memcpy(v36, v33, v35);
    *(_QWORD *)(a1 + 3760) = v37;
  }
  v38 = *(_OWORD *)(a2 + 3328);
  v39 = *(_OWORD *)(a2 + 3344);
  *(_QWORD *)(a1 + 3805) = *(_QWORD *)(a2 + 3357);
  *(_OWORD *)(a1 + 3792) = v39;
  *(_OWORD *)(a1 + 3776) = v38;
  sub_20ED5DE64(a2, 1, (uint64_t *)(a1 + 3816));
  *(_QWORD *)(a1 + 3840) = 0;
  *(_OWORD *)(a1 + 3824) = 0u;
  v40 = *(_DWORD *)a2;
  sub_20EBF8D9C(v67, (char **)&__p);
  sub_20ED5DA5C(v40, (unsigned int **)&__p, v66, *(_BYTE *)(a2 + 3364), (uint64_t *)(a1 + 3848));
  if (__p)
  {
    v69 = __p;
    operator delete(__p);
  }
  sub_20F41F9F0(a1 + 3864, (__int128 *)(a2 + 3328));
  *(_QWORD *)(a1 + 4216) = *a3;
  v41 = a3[1];
  *(_QWORD *)(a1 + 4224) = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  *(_QWORD *)(a1 + 4232) = *a4;
  v44 = a4[1];
  *(_QWORD *)(a1 + 4240) = v44;
  if (v44)
  {
    v45 = (unint64_t *)(v44 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  *(_QWORD *)(a1 + 4248) = *a5;
  v47 = a5[1];
  *(_QWORD *)(a1 + 4256) = v47;
  if (v47)
  {
    v48 = (unint64_t *)(v47 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  *(_QWORD *)(a1 + 4264) = *a6;
  v50 = a6[1];
  *(_QWORD *)(a1 + 4272) = v50;
  if (v50)
  {
    v51 = (unint64_t *)(v50 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  *(_QWORD *)(a1 + 4280) = *v61;
  v53 = v61[1];
  *(_QWORD *)(a1 + 4288) = v53;
  if (v53)
  {
    v54 = (unint64_t *)(v53 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  *(_QWORD *)(a1 + 4296) = *a8;
  v56 = a8[1];
  *(_QWORD *)(a1 + 4304) = v56;
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  sub_20EBF8D9C(v67, (char **)&__p);
  v59 = operator new(0xB8uLL);
  v59[1] = 0;
  v59[2] = 0;
  *v59 = &off_24C9E4740;
  *(_QWORD *)(a1 + 4312) = sub_20ED62BC8(v59 + 3, (_OWORD *)(a2 + 2816), (uint64_t)&__p);
  *(_QWORD *)(a1 + 4320) = v59;
  if (__p)
  {
    v69 = __p;
    operator delete(__p);
  }
  sub_20ED5F168(a1, 0);
  return a1;
}

void sub_20ED5EFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;
  void **v20;
  void *v22;

  v22 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v19 + 3072) = v22;
    operator delete(v22);
    sub_20E86A810(a10);
    sub_20ED6050C(v19);
    _Unwind_Resume(a1);
  }
  sub_20E86A810(a10);
  sub_20ED6050C(v19);
  _Unwind_Resume(a1);
}

_QWORD *sub_20ED5F168(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64x2_t *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  unint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  char *v136;
  void **v137;
  char *v138;
  uint64_t v139;
  __int128 *v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t (**v146)();
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  void *v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  void *v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  void *v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  __int16 v172;
  void *__p;
  void *v174;
  void (*v175)(void);
  uint64_t (**v176)();
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  void *v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  void *v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  void *v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  __int16 v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  _QWORD *v207;

  v2 = a1;
  if (a2)
  {
    sub_20EBF8D9C(a1 + 3144, (char **)&__p);
    v3 = operator new(0xB8uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = &off_24C9E4740;
    *(_QWORD *)(v2 + 4312) = sub_20ED62BC8(v3 + 3, (_OWORD *)(v2 + 3264), (uint64_t)&__p);
    v4 = *(std::__shared_weak_count **)(v2 + 4320);
    *(_QWORD *)(v2 + 4320) = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (__p)
    {
      v174 = __p;
      operator delete(__p);
    }
  }
  v137 = (void **)(v2 + 3824);
  result = sub_20ED62744((_QWORD *)(v2 + 3824));
  v8 = *(_QWORD *)(v2 + 3752);
  if (*(_QWORD *)(v2 + 3760) != v8)
  {
    v9 = 0;
    v140 = (__int128 *)(v2 + 2888);
    v141 = (_QWORD *)(v2 + 456);
    v139 = v2 + 3360;
    v142 = (_QWORD *)(v2 + 3840);
    v143 = v2;
    while (1)
    {
      v10 = *(_QWORD *)(v2 + 3336);
      v11 = (int64x2_t *)(v8 + 40 * v9);
      v144 = v9;
      v12 = *(unsigned __int8 *)(v10 + 16 * v9 + 12);
      v13 = *(unsigned __int8 *)(v2 + 3810);
      v14 = v11->u32[0];
      v15 = v11->u32[2];
      v16 = operator new();
      sub_20F41F7D4(v16, v14 | 0x100000000, v15 | 0x100000000, v13 != 0, 0, v12);
      v17 = v144;
      v145 = (void *)v16;
      v2 = v143;
      sub_20EE89C38(v141, v140, v139, v11, *(unsigned __int8 *)(v10 + 16 * v144 + 13), *(_BYTE *)(v143 + 3811), *(_BYTE *)(v143 + 3809), (uint64_t)&v146);
      v18 = *(void **)(v8 + 40 * v144 + 32);
      v19 = v145;
      __p = v18;
      v174 = v145;
      v177 = v147;
      v178 = v148;
      v147 = 0uLL;
      v148 = 0;
      v179 = v149;
      v180 = v150;
      v150 = 0;
      v149 = 0uLL;
      v183 = v153;
      v182 = v152;
      v152 = 0uLL;
      v153 = 0;
      v185 = v155;
      v184 = v154;
      v154 = 0uLL;
      v155 = 0;
      v188 = v158;
      v187 = v157;
      v157 = 0uLL;
      v158 = 0;
      v190 = v160;
      v189 = v159;
      v159 = 0uLL;
      v160 = 0;
      v193 = v163;
      v192 = v162;
      v162 = 0uLL;
      v163 = 0;
      v195 = v165;
      v194 = v164;
      v164 = 0uLL;
      v165 = 0;
      v197 = v167;
      v196 = v166;
      v166 = 0uLL;
      v167 = 0;
      v199 = v169;
      v198 = v168;
      v168 = 0uLL;
      v169 = 0;
      v175 = (void (*)(void))sub_20F41EF34;
      v176 = &off_24C9EF000;
      v181 = &unk_24C9EF040;
      v186 = &unk_24C9EF068;
      v20 = v170;
      v170 = 0uLL;
      v200 = v20;
      v21 = v171;
      v171 = 0;
      v191 = &unk_24C9EF090;
      v201 = v21;
      v202 = v172;
      v22 = *(char **)(v143 + 3824);
      v23 = *(char **)(v143 + 3832);
      v24 = v23 - v22;
      if (v23 == v22)
      {
        v26 = *(void ***)(v143 + 3824);
      }
      else
      {
        v25 = 0x8F9C18F9C18F9C19 * (v24 >> 3);
        v26 = *(void ***)(v143 + 3824);
        do
        {
          v27 = v25 >> 1;
          v28 = &v26[41 * (v25 >> 1)];
          if (*(_DWORD *)v28 < v18
            || *(_DWORD *)v28 == (_DWORD)v18 && *((_DWORD *)v28 + 1) < HIDWORD(v18))
          {
            v26 = v28 + 41;
            v27 = v25 + ~v27;
          }
          v25 = v27;
        }
        while (v27);
      }
      if (v26 != (void **)v23 && *v26 == v18)
        goto LABEL_68;
      v29 = (char *)v26 - v22;
      v30 = ((char *)v26 - v22) / 328;
      v31 = &v22[328 * v30];
      if ((unint64_t)v23 < *v142)
      {
        if (v31 == v23)
        {
          *(_QWORD *)v23 = v18;
          v56 = &v22[328 * v30];
          v57 = v174;
          v174 = 0;
          *((_QWORD *)v56 + 1) = v57;
          *((_QWORD *)v56 + 2) = v175;
          *((_QWORD *)v56 + 3) = off_24C9E48C8;
          v58 = v177;
          *((_QWORD *)v56 + 6) = v178;
          *((_OWORD *)v56 + 2) = v58;
          v178 = 0;
          v177 = 0uLL;
          v59 = v179;
          *((_QWORD *)v56 + 9) = v180;
          *(_OWORD *)(v56 + 56) = v59;
          v180 = 0;
          v179 = 0uLL;
          *((_QWORD *)v56 + 10) = off_24C9E48F0;
          v60 = v182;
          *((_QWORD *)v56 + 13) = v183;
          *(_OWORD *)(v56 + 88) = v60;
          v183 = 0;
          v182 = 0uLL;
          v61 = v184;
          *((_QWORD *)v56 + 16) = v185;
          *((_OWORD *)v56 + 7) = v61;
          v185 = 0;
          v184 = 0uLL;
          *((_QWORD *)v56 + 17) = off_24C9E4918;
          v62 = v187;
          *((_QWORD *)v56 + 20) = v188;
          *((_OWORD *)v56 + 9) = v62;
          v188 = 0;
          v187 = 0uLL;
          v63 = v189;
          *((_QWORD *)v56 + 23) = v190;
          *(_OWORD *)(v56 + 168) = v63;
          v190 = 0;
          v189 = 0uLL;
          *((_QWORD *)v56 + 24) = off_24C9E4940;
          v64 = v192;
          *((_QWORD *)v56 + 27) = v193;
          *(_OWORD *)(v56 + 200) = v64;
          v193 = 0;
          v192 = 0uLL;
          v65 = v194;
          *((_QWORD *)v56 + 30) = v195;
          *((_OWORD *)v56 + 14) = v65;
          v195 = 0;
          v194 = 0uLL;
          *((_QWORD *)v56 + 3) = off_24C9E4828;
          *((_QWORD *)v56 + 10) = &unk_24C9E4850;
          *((_QWORD *)v56 + 17) = &unk_24C9E4878;
          *((_QWORD *)v56 + 24) = &unk_24C9E48A0;
          v66 = v196;
          *((_QWORD *)v56 + 33) = v197;
          *(_OWORD *)(v56 + 248) = v66;
          v197 = 0;
          v196 = 0uLL;
          v67 = v198;
          *((_QWORD *)v56 + 36) = v199;
          *((_OWORD *)v56 + 17) = v67;
          v199 = 0;
          v198 = 0uLL;
          *((_QWORD *)v56 + 3) = &off_24C9EF000;
          *((_QWORD *)v56 + 10) = &unk_24C9EF040;
          *((_QWORD *)v56 + 17) = &unk_24C9EF068;
          *((_QWORD *)v56 + 24) = &unk_24C9EF090;
          v68 = v200;
          *(_QWORD *)&v200 = 0;
          *((_QWORD *)v56 + 37) = v68;
          v69 = *((_QWORD *)&v200 + 1);
          *((_QWORD *)&v200 + 1) = 0;
          *((_QWORD *)v56 + 38) = v69;
          v70 = v201;
          v201 = 0;
          *((_QWORD *)v56 + 39) = v70;
          *((_WORD *)v56 + 160) = v202;
          *(_QWORD *)(v143 + 3832) = v23 + 328;
        }
        else
        {
          v32 = (uint64_t)(v23 - 328);
          v33 = *(_QWORD *)(v143 + 3832);
          v34 = v23 - 328;
          if ((unint64_t)v23 >= 0x148)
          {
            do
            {
              *(_QWORD *)v33 = *(_QWORD *)v34;
              v35 = *((_QWORD *)v34 + 1);
              *((_QWORD *)v34 + 1) = 0;
              *(_QWORD *)(v33 + 8) = v35;
              *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
              *(_QWORD *)(v33 + 24) = off_24C9E48C8;
              v36 = *((_OWORD *)v34 + 2);
              *(_QWORD *)(v33 + 48) = *((_QWORD *)v34 + 6);
              *(_OWORD *)(v33 + 32) = v36;
              *((_QWORD *)v34 + 5) = 0;
              *((_QWORD *)v34 + 6) = 0;
              *((_QWORD *)v34 + 4) = 0;
              v37 = *(_OWORD *)(v34 + 56);
              *(_QWORD *)(v33 + 72) = *((_QWORD *)v34 + 9);
              *(_OWORD *)(v33 + 56) = v37;
              *((_QWORD *)v34 + 8) = 0;
              *((_QWORD *)v34 + 9) = 0;
              *((_QWORD *)v34 + 7) = 0;
              *(_QWORD *)(v33 + 80) = off_24C9E48F0;
              v38 = *(_OWORD *)(v34 + 88);
              *(_QWORD *)(v33 + 104) = *((_QWORD *)v34 + 13);
              *(_OWORD *)(v33 + 88) = v38;
              *((_QWORD *)v34 + 12) = 0;
              *((_QWORD *)v34 + 13) = 0;
              *((_QWORD *)v34 + 11) = 0;
              v39 = *((_OWORD *)v34 + 7);
              *(_QWORD *)(v33 + 128) = *((_QWORD *)v34 + 16);
              *(_OWORD *)(v33 + 112) = v39;
              *((_QWORD *)v34 + 15) = 0;
              *((_QWORD *)v34 + 16) = 0;
              *((_QWORD *)v34 + 14) = 0;
              *(_QWORD *)(v33 + 136) = off_24C9E4918;
              v40 = *((_OWORD *)v34 + 9);
              *(_QWORD *)(v33 + 160) = *((_QWORD *)v34 + 20);
              *(_OWORD *)(v33 + 144) = v40;
              *((_QWORD *)v34 + 19) = 0;
              *((_QWORD *)v34 + 20) = 0;
              *((_QWORD *)v34 + 18) = 0;
              v41 = *(_OWORD *)(v34 + 168);
              *(_QWORD *)(v33 + 184) = *((_QWORD *)v34 + 23);
              *(_OWORD *)(v33 + 168) = v41;
              *((_QWORD *)v34 + 22) = 0;
              *((_QWORD *)v34 + 23) = 0;
              *((_QWORD *)v34 + 21) = 0;
              *(_QWORD *)(v33 + 192) = off_24C9E4940;
              v42 = *(_OWORD *)(v34 + 200);
              *(_QWORD *)(v33 + 216) = *((_QWORD *)v34 + 27);
              *(_OWORD *)(v33 + 200) = v42;
              *((_QWORD *)v34 + 26) = 0;
              *((_QWORD *)v34 + 27) = 0;
              *((_QWORD *)v34 + 25) = 0;
              v43 = *((_OWORD *)v34 + 14);
              *(_QWORD *)(v33 + 240) = *((_QWORD *)v34 + 30);
              *(_OWORD *)(v33 + 224) = v43;
              *((_QWORD *)v34 + 29) = 0;
              *((_QWORD *)v34 + 30) = 0;
              *((_QWORD *)v34 + 28) = 0;
              *(_QWORD *)(v33 + 24) = off_24C9E4828;
              *(_QWORD *)(v33 + 80) = &unk_24C9E4850;
              *(_QWORD *)(v33 + 136) = &unk_24C9E4878;
              *(_QWORD *)(v33 + 192) = &unk_24C9E48A0;
              v44 = *(_OWORD *)(v34 + 248);
              *(_QWORD *)(v33 + 264) = *((_QWORD *)v34 + 33);
              *(_OWORD *)(v33 + 248) = v44;
              *((_QWORD *)v34 + 32) = 0;
              *((_QWORD *)v34 + 33) = 0;
              *((_QWORD *)v34 + 31) = 0;
              v45 = *((_OWORD *)v34 + 17);
              *(_QWORD *)(v33 + 288) = *((_QWORD *)v34 + 36);
              *(_OWORD *)(v33 + 272) = v45;
              *((_QWORD *)v34 + 35) = 0;
              *((_QWORD *)v34 + 36) = 0;
              *((_QWORD *)v34 + 34) = 0;
              *(_QWORD *)(v33 + 24) = &off_24C9EF000;
              *(_QWORD *)(v33 + 80) = &unk_24C9EF040;
              *(_QWORD *)(v33 + 136) = &unk_24C9EF068;
              *(_QWORD *)(v33 + 192) = &unk_24C9EF090;
              v46 = *((_QWORD *)v34 + 37);
              *((_QWORD *)v34 + 37) = 0;
              *(_QWORD *)(v33 + 296) = v46;
              v47 = *((_QWORD *)v34 + 38);
              *((_QWORD *)v34 + 38) = 0;
              *(_QWORD *)(v33 + 304) = v47;
              v48 = *((_QWORD *)v34 + 39);
              *((_QWORD *)v34 + 39) = 0;
              *(_QWORD *)(v33 + 312) = v48;
              *(_WORD *)(v33 + 320) = *((_WORD *)v34 + 160);
              v33 += 328;
              v34 += 328;
            }
            while (v34 < v23);
          }
          *(_QWORD *)(v143 + 3832) = v33;
          if (v23 != v31 + 328)
          {
            v49 = 8 * ((v23 - (v31 + 328)) >> 3);
            v50 = (uint64_t)&v22[328 * v30 - 328];
            do
            {
              v32 = sub_20ED62F88(v32, v50 + v49) - 328;
              v49 -= 328;
            }
            while (v49);
          }
          sub_20ED62F88((uint64_t)v31, (uint64_t)&__p);
        }
        goto LABEL_67;
      }
      v51 = 1 - 0x7063E7063E7063E7 * (v24 >> 3);
      if (v51 > 0xC7CE0C7CE0C7CELL)
        sub_20E867F44();
      if (0x1F3831F3831F3832 * ((uint64_t)(*v142 - (_QWORD)v22) >> 3) > v51)
        v51 = 0x1F3831F3831F3832 * ((uint64_t)(*v142 - (_QWORD)v22) >> 3);
      v52 = 0x8F9C18F9C18F9C19 * ((uint64_t)(*v142 - (_QWORD)v22) >> 3) >= 0x63E7063E7063E7
          ? 0xC7CE0C7CE0C7CELL
          : v51;
      v207 = v142;
      if (!v52)
        break;
      v138 = (char *)((char *)v26 - v22);
      if (v52 > 0xC7CE0C7CE0C7CELL)
        sub_20E877A38();
      v53 = v22;
      v54 = (char *)operator new(328 * v52);
      v19 = v145;
      v22 = v53;
      v29 = (uint64_t)v138;
      v55 = (uint64_t)&v54[328 * v30];
      v203 = v54;
      v204 = v55;
      v205 = v55;
      v206 = &v54[328 * v52];
      if (v30 == v52)
        goto LABEL_43;
LABEL_47:
      *(_QWORD *)v55 = v18;
      *(_QWORD *)(v55 + 8) = v19;
      *(_QWORD *)(v55 + 16) = v175;
      *(_QWORD *)(v55 + 24) = off_24C9E48C8;
      *(_OWORD *)(v55 + 32) = v177;
      *(_QWORD *)(v55 + 48) = v178;
      v178 = 0;
      v177 = 0uLL;
      v72 = v180;
      *(_OWORD *)(v55 + 56) = v179;
      v179 = 0uLL;
      v180 = 0;
      *(_QWORD *)(v55 + 72) = v72;
      *(_QWORD *)(v55 + 80) = off_24C9E48F0;
      v73 = v182;
      *(_QWORD *)(v55 + 104) = v183;
      *(_OWORD *)(v55 + 88) = v73;
      v183 = 0;
      v182 = 0uLL;
      v74 = v185;
      *(_OWORD *)(v55 + 112) = v184;
      v184 = 0uLL;
      v185 = 0;
      *(_QWORD *)(v55 + 128) = v74;
      *(_QWORD *)(v55 + 136) = off_24C9E4918;
      v75 = v187;
      *(_QWORD *)(v55 + 160) = v188;
      *(_OWORD *)(v55 + 144) = v75;
      v188 = 0;
      v187 = 0uLL;
      v76 = v190;
      *(_OWORD *)(v55 + 168) = v189;
      v189 = 0uLL;
      v190 = 0;
      *(_QWORD *)(v55 + 184) = v76;
      *(_QWORD *)(v55 + 192) = off_24C9E4940;
      v77 = v192;
      *(_QWORD *)(v55 + 216) = v193;
      *(_OWORD *)(v55 + 200) = v77;
      v193 = 0;
      v192 = 0uLL;
      v78 = v194;
      *(_QWORD *)(v55 + 240) = v195;
      *(_OWORD *)(v55 + 224) = v78;
      v194 = 0uLL;
      v195 = 0;
      *(_QWORD *)(v55 + 24) = off_24C9E4828;
      *(_QWORD *)(v55 + 80) = &unk_24C9E4850;
      *(_QWORD *)(v55 + 136) = &unk_24C9E4878;
      *(_QWORD *)(v55 + 192) = &unk_24C9E48A0;
      v79 = v196;
      *(_QWORD *)(v55 + 264) = v197;
      *(_OWORD *)(v55 + 248) = v79;
      v197 = 0;
      v196 = 0uLL;
      v80 = v198;
      *(_QWORD *)(v55 + 288) = v199;
      *(_OWORD *)(v55 + 272) = v80;
      v198 = 0uLL;
      v199 = 0;
      *(_QWORD *)(v55 + 24) = &off_24C9EF000;
      *(_QWORD *)(v55 + 80) = &unk_24C9EF040;
      *(_QWORD *)(v55 + 136) = &unk_24C9EF068;
      *(_QWORD *)(v55 + 192) = &unk_24C9EF090;
      *(_QWORD *)(v55 + 296) = v200;
      v81 = *((_QWORD *)&v200 + 1);
      v200 = 0uLL;
      *(_QWORD *)(v55 + 304) = v81;
      v82 = v201;
      v174 = 0;
      v201 = 0;
      *(_QWORD *)(v55 + 312) = v82;
      *(_WORD *)(v55 + 320) = v202;
      v83 = v55 + 328;
      v205 = v55 + 328;
      v84 = (char *)*v137;
      v2 = v143;
      if (*v137 != v31)
      {
        v85 = 0;
        do
        {
          v86 = v55 + v85;
          v87 = &v31[v85];
          *(_QWORD *)(v55 + v85 - 328) = *(_QWORD *)&v31[v85 - 328];
          v88 = &v31[v85 - 320];
          v89 = *(_QWORD *)v88;
          *(_QWORD *)v88 = 0;
          *(_QWORD *)(v55 + v85 - 320) = v89;
          *(_QWORD *)(v55 + v85 - 312) = *(_QWORD *)&v31[v85 - 312];
          v90 = (_QWORD *)(v55 + v85 - 304);
          *v90 = off_24C9E48C8;
          v91 = v55 + v85 - 296;
          v92 = (uint64_t)&v31[v85 - 296];
          v93 = *(_OWORD *)v92;
          *(_QWORD *)(v91 + 16) = *(_QWORD *)&v31[v85 - 280];
          *(_OWORD *)v91 = v93;
          *(_QWORD *)(v92 + 8) = 0;
          *(_QWORD *)(v92 + 16) = 0;
          *(_QWORD *)v92 = 0;
          v94 = (uint64_t)&v31[v85 - 272];
          v95 = *(_OWORD *)v94;
          *(_QWORD *)(v86 - 256) = *(_QWORD *)&v31[v85 - 256];
          *(_OWORD *)(v55 + v85 - 272) = v95;
          *((_QWORD *)v87 - 32) = 0;
          *(_QWORD *)v94 = 0;
          *(_QWORD *)(v94 + 8) = 0;
          *(_QWORD *)(v86 - 248) = off_24C9E48F0;
          v96 = *(_OWORD *)&v31[v85 - 240];
          *(_QWORD *)(v86 - 224) = *(_QWORD *)&v31[v85 - 224];
          *(_OWORD *)(v86 - 240) = v96;
          *((_QWORD *)v87 - 29) = 0;
          *((_QWORD *)v87 - 28) = 0;
          *((_QWORD *)v87 - 30) = 0;
          v97 = *(_OWORD *)&v31[v85 - 216];
          *(_QWORD *)(v86 - 200) = *(_QWORD *)&v31[v85 - 200];
          *(_OWORD *)(v86 - 216) = v97;
          *((_QWORD *)v87 - 26) = 0;
          *((_QWORD *)v87 - 25) = 0;
          *((_QWORD *)v87 - 27) = 0;
          *(_QWORD *)(v86 - 192) = off_24C9E4918;
          v98 = *(_OWORD *)&v31[v85 - 184];
          *(_QWORD *)(v86 - 168) = *(_QWORD *)&v31[v85 - 168];
          *(_OWORD *)(v86 - 184) = v98;
          *((_QWORD *)v87 - 22) = 0;
          *((_QWORD *)v87 - 21) = 0;
          *((_QWORD *)v87 - 23) = 0;
          v99 = *(_OWORD *)&v31[v85 - 160];
          *(_QWORD *)(v86 - 144) = *(_QWORD *)&v31[v85 - 144];
          *(_OWORD *)(v86 - 160) = v99;
          *((_QWORD *)v87 - 19) = 0;
          *((_QWORD *)v87 - 18) = 0;
          *((_QWORD *)v87 - 20) = 0;
          *(_QWORD *)(v86 - 136) = off_24C9E4940;
          v100 = *(_OWORD *)&v31[v85 - 128];
          *(_QWORD *)(v86 - 112) = *(_QWORD *)&v31[v85 - 112];
          *(_OWORD *)(v86 - 128) = v100;
          *((_QWORD *)v87 - 15) = 0;
          *((_QWORD *)v87 - 14) = 0;
          *((_QWORD *)v87 - 16) = 0;
          v101 = *(_OWORD *)&v31[v85 - 104];
          *(_QWORD *)(v86 - 88) = *(_QWORD *)&v31[v85 - 88];
          *(_OWORD *)(v86 - 104) = v101;
          *((_QWORD *)v87 - 12) = 0;
          *((_QWORD *)v87 - 11) = 0;
          *((_QWORD *)v87 - 13) = 0;
          *v90 = off_24C9E4828;
          *(_QWORD *)(v86 - 248) = &unk_24C9E4850;
          *(_QWORD *)(v86 - 192) = &unk_24C9E4878;
          *(_QWORD *)(v86 - 136) = &unk_24C9E48A0;
          v102 = *(_OWORD *)&v31[v85 - 80];
          *(_QWORD *)(v86 - 64) = *(_QWORD *)&v31[v85 - 64];
          *(_OWORD *)(v86 - 80) = v102;
          *((_QWORD *)v87 - 9) = 0;
          *((_QWORD *)v87 - 8) = 0;
          *((_QWORD *)v87 - 10) = 0;
          v103 = *(_OWORD *)&v31[v85 - 56];
          *(_QWORD *)(v86 - 40) = *(_QWORD *)&v31[v85 - 40];
          *(_OWORD *)(v86 - 56) = v103;
          *((_QWORD *)v87 - 6) = 0;
          *((_QWORD *)v87 - 5) = 0;
          *((_QWORD *)v87 - 7) = 0;
          *v90 = &off_24C9EF000;
          *(_QWORD *)(v86 - 248) = &unk_24C9EF040;
          *(_QWORD *)(v86 - 192) = &unk_24C9EF068;
          *(_QWORD *)(v86 - 136) = &unk_24C9EF090;
          v104 = *(_QWORD *)&v31[v85 - 32];
          *((_QWORD *)v87 - 4) = 0;
          *(_QWORD *)(v86 - 32) = v104;
          v105 = *(_QWORD *)&v31[v85 - 24];
          *((_QWORD *)v87 - 3) = 0;
          *(_QWORD *)(v86 - 24) = v105;
          v106 = *(_QWORD *)&v31[v85 - 16];
          *((_QWORD *)v87 - 2) = 0;
          *(_QWORD *)(v86 - 16) = v106;
          *(_WORD *)(v86 - 8) = *(_WORD *)&v31[v85 - 8];
          v85 -= 328;
        }
        while (&v31[v85] != v84);
        v83 = v205;
        v55 += v85;
      }
      v204 = v55;
      v107 = *(char **)(v143 + 3832);
      if (v107 != v31)
      {
        do
        {
          *(_QWORD *)v83 = *(_QWORD *)v31;
          v108 = *((_QWORD *)v31 + 1);
          *((_QWORD *)v31 + 1) = 0;
          *(_QWORD *)(v83 + 8) = v108;
          *(_QWORD *)(v83 + 16) = *((_QWORD *)v31 + 2);
          *(_QWORD *)(v83 + 24) = off_24C9E48C8;
          v109 = *((_OWORD *)v31 + 2);
          *(_QWORD *)(v83 + 48) = *((_QWORD *)v31 + 6);
          *(_OWORD *)(v83 + 32) = v109;
          *((_QWORD *)v31 + 5) = 0;
          *((_QWORD *)v31 + 6) = 0;
          *((_QWORD *)v31 + 4) = 0;
          v110 = *(_OWORD *)(v31 + 56);
          *(_QWORD *)(v83 + 72) = *((_QWORD *)v31 + 9);
          *(_OWORD *)(v83 + 56) = v110;
          *((_QWORD *)v31 + 8) = 0;
          *((_QWORD *)v31 + 9) = 0;
          *((_QWORD *)v31 + 7) = 0;
          *(_QWORD *)(v83 + 80) = off_24C9E48F0;
          v111 = *(_OWORD *)(v31 + 88);
          *(_QWORD *)(v83 + 104) = *((_QWORD *)v31 + 13);
          *(_OWORD *)(v83 + 88) = v111;
          *((_QWORD *)v31 + 12) = 0;
          *((_QWORD *)v31 + 13) = 0;
          *((_QWORD *)v31 + 11) = 0;
          v112 = *((_OWORD *)v31 + 7);
          *(_QWORD *)(v83 + 128) = *((_QWORD *)v31 + 16);
          *(_OWORD *)(v83 + 112) = v112;
          *((_QWORD *)v31 + 15) = 0;
          *((_QWORD *)v31 + 16) = 0;
          *((_QWORD *)v31 + 14) = 0;
          *(_QWORD *)(v83 + 136) = off_24C9E4918;
          v113 = *((_OWORD *)v31 + 9);
          *(_QWORD *)(v83 + 160) = *((_QWORD *)v31 + 20);
          *(_OWORD *)(v83 + 144) = v113;
          *((_QWORD *)v31 + 19) = 0;
          *((_QWORD *)v31 + 20) = 0;
          *((_QWORD *)v31 + 18) = 0;
          v114 = *(_OWORD *)(v31 + 168);
          *(_QWORD *)(v83 + 184) = *((_QWORD *)v31 + 23);
          *(_OWORD *)(v83 + 168) = v114;
          *((_QWORD *)v31 + 22) = 0;
          *((_QWORD *)v31 + 23) = 0;
          *((_QWORD *)v31 + 21) = 0;
          *(_QWORD *)(v83 + 192) = off_24C9E4940;
          v115 = *(_OWORD *)(v31 + 200);
          *(_QWORD *)(v83 + 216) = *((_QWORD *)v31 + 27);
          *(_OWORD *)(v83 + 200) = v115;
          *((_QWORD *)v31 + 26) = 0;
          *((_QWORD *)v31 + 27) = 0;
          *((_QWORD *)v31 + 25) = 0;
          v116 = *((_OWORD *)v31 + 14);
          *(_QWORD *)(v83 + 240) = *((_QWORD *)v31 + 30);
          *(_OWORD *)(v83 + 224) = v116;
          *((_QWORD *)v31 + 29) = 0;
          *((_QWORD *)v31 + 30) = 0;
          *((_QWORD *)v31 + 28) = 0;
          *(_QWORD *)(v83 + 24) = off_24C9E4828;
          *(_QWORD *)(v83 + 80) = &unk_24C9E4850;
          *(_QWORD *)(v83 + 136) = &unk_24C9E4878;
          *(_QWORD *)(v83 + 192) = &unk_24C9E48A0;
          v117 = *(_OWORD *)(v31 + 248);
          *(_QWORD *)(v83 + 264) = *((_QWORD *)v31 + 33);
          *(_OWORD *)(v83 + 248) = v117;
          *((_QWORD *)v31 + 32) = 0;
          *((_QWORD *)v31 + 33) = 0;
          *((_QWORD *)v31 + 31) = 0;
          v118 = *((_OWORD *)v31 + 17);
          *(_QWORD *)(v83 + 288) = *((_QWORD *)v31 + 36);
          *(_OWORD *)(v83 + 272) = v118;
          *((_QWORD *)v31 + 35) = 0;
          *((_QWORD *)v31 + 36) = 0;
          *((_QWORD *)v31 + 34) = 0;
          *(_QWORD *)(v83 + 24) = &off_24C9EF000;
          *(_QWORD *)(v83 + 80) = &unk_24C9EF040;
          *(_QWORD *)(v83 + 136) = &unk_24C9EF068;
          *(_QWORD *)(v83 + 192) = &unk_24C9EF090;
          v119 = *((_QWORD *)v31 + 37);
          *((_QWORD *)v31 + 37) = 0;
          *(_QWORD *)(v83 + 296) = v119;
          v120 = *((_QWORD *)v31 + 38);
          *((_QWORD *)v31 + 38) = 0;
          *(_QWORD *)(v83 + 304) = v120;
          v121 = *((_QWORD *)v31 + 39);
          *((_QWORD *)v31 + 39) = 0;
          *(_QWORD *)(v83 + 312) = v121;
          *(_WORD *)(v83 + 320) = *((_WORD *)v31 + 160);
          v83 += 328;
          v31 += 328;
        }
        while (v31 != v107);
        v55 = v204;
        v31 = *(char **)(v143 + 3832);
      }
      v122 = *(char **)(v143 + 3824);
      *(_QWORD *)(v143 + 3824) = v55;
      *(_QWORD *)(v143 + 3832) = v83;
      v123 = *(char **)(v143 + 3840);
      *(_QWORD *)(v143 + 3840) = v206;
      v206 = v123;
      v203 = v122;
      v204 = (uint64_t)v122;
      if (v31 == v122)
      {
        v17 = v144;
        if (!v31)
          goto LABEL_67;
      }
      else
      {
        v17 = v144;
        do
        {
          v205 = (uint64_t)(v31 - 328);
          *((_QWORD *)v31 - 38) = &off_24C9EF000;
          *((_QWORD *)v31 - 31) = &unk_24C9EF040;
          *((_QWORD *)v31 - 24) = &unk_24C9EF068;
          *((_QWORD *)v31 - 17) = &unk_24C9EF090;
          v124 = *((_QWORD *)v31 - 2);
          *((_QWORD *)v31 - 2) = 0;
          if (v124)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v124 + 8))(v124, v22);
          v125 = *((_QWORD *)v31 - 3);
          *((_QWORD *)v31 - 3) = 0;
          if (v125)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v125 + 8))(v125, v22);
          v126 = *((_QWORD *)v31 - 4);
          *((_QWORD *)v31 - 4) = 0;
          if (v126)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v126 + 8))(v126, v22);
          sub_20ED62854((uint64_t)(v31 - 304));
          v127 = *((_QWORD *)v31 - 40);
          *((_QWORD *)v31 - 40) = 0;
          if (v127)
            (*((void (**)(void))v31 - 39))();
          v31 = (char *)v205;
        }
        while ((char *)v205 != v122);
        v31 = v203;
        v2 = v143;
        if (!v203)
          goto LABEL_67;
      }
      operator delete(v31);
LABEL_67:
      v21 = v201;
LABEL_68:
      v176 = &off_24C9EF000;
      v181 = &unk_24C9EF040;
      v186 = &unk_24C9EF068;
      v191 = &unk_24C9EF090;
      v201 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v128 = *((_QWORD *)&v200 + 1);
      *((_QWORD *)&v200 + 1) = 0;
      if (v128)
        (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
      v129 = v200;
      *(_QWORD *)&v200 = 0;
      if (v129)
        (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
      sub_20ED62854((uint64_t)&v176);
      v130 = v174;
      v174 = 0;
      if (v130)
        v175();
      v146 = &off_24C9EF000;
      v151 = &unk_24C9EF040;
      v156 = &unk_24C9EF068;
      v161 = &unk_24C9EF090;
      v131 = v171;
      v171 = 0;
      if (v131)
        (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
      v132 = *((_QWORD *)&v170 + 1);
      *((_QWORD *)&v170 + 1) = 0;
      if (v132)
        (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
      v133 = v170;
      *(_QWORD *)&v170 = 0;
      if (v133)
        (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
      sub_20ED62854((uint64_t)&v146);
      result = 0;
      v9 = v17 + 1;
      v8 = *(_QWORD *)(v2 + 3752);
      if (v9 >= 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v2 + 3760) - v8) >> 3))
        return result;
    }
    v54 = 0;
    v55 = 328 * v30;
    v203 = 0;
    v204 = 328 * v30;
    v205 = 328 * v30;
    v206 = 0;
    if (v30)
      goto LABEL_47;
LABEL_43:
    if (v29 < 1)
    {
      if (v22 == (char *)v26)
        v134 = 1;
      else
        v134 = 2 * v30;
      if (v134 > 0xC7CE0C7CE0C7CELL)
        sub_20E877A38();
      v135 = v19;
      v136 = (char *)operator new(328 * v134);
      v55 = (uint64_t)&v136[328 * (v134 >> 2)];
      v203 = v136;
      v204 = v55;
      v206 = &v136[328 * v134];
      if (v54)
      {
        operator delete(v54);
        v18 = __p;
        v19 = v174;
      }
      else
      {
        v19 = v135;
      }
    }
    else
    {
      v71 = v30 + 2;
      if (v30 >= -1)
        v71 = v30 + 1;
      v55 -= 328 * (v71 >> 1);
      v204 = v55;
    }
    goto LABEL_47;
  }
  return result;
}

void sub_20ED60324(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  v4 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v4;
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED60410(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  *a1 = &off_24C9FFFE0;
  a1[7] = &unk_24CA00018;
  a1[14] = &unk_24CA00040;
  v2 = a1[37];
  if (v2)
  {
    v3 = a1[38];
    v4 = (void *)a1[37];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[37];
    }
    a1[38] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[31];
  if (v8)
  {
    a1[32] = v8;
    operator delete(v8);
  }
  return sub_20ED625D0((uint64_t)a1);
}

void **sub_20ED604D4(void **a1)
{
  if (*a1)
  {
    sub_20ED62744(a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_20ED6050C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9E45B0;
  *(_QWORD *)(a1 + 56) = &unk_24C9E45D8;
  *(_QWORD *)(a1 + 112) = &unk_24C9E4600;
  *(_QWORD *)(a1 + 168) = &unk_24C9E4628;
  *(_QWORD *)(a1 + 224) = &unk_24C9E4650;
  *(_QWORD *)(a1 + 280) = &unk_24C9E4678;
  *(_QWORD *)(a1 + 336) = &unk_24C9E46A0;
  if (*(char *)(a1 + 439) < 0)
  {
    operator delete(*(void **)(a1 + 416));
    if ((*(char *)(a1 + 415) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 336) = off_24C9E4AA8;
      if ((*(char *)(a1 + 391) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(char *)(a1 + 415) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 392));
  *(_QWORD *)(a1 + 336) = off_24C9E4AA8;
  if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 367) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 368));
  if ((*(char *)(a1 + 367) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 280) = off_24C9E4718;
    if ((*(char *)(a1 + 335) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 280) = off_24C9E4718;
  if ((*(char *)(a1 + 335) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 311) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(*(void **)(a1 + 312));
  if ((*(char *)(a1 + 311) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(a1 + 224) = off_24C9E46F0;
    if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 288));
  *(_QWORD *)(a1 + 224) = off_24C9E46F0;
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 255) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_9:
    *(_QWORD *)(a1 + 168) = off_24C9E4940;
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 168) = off_24C9E4940;
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(*(void **)(a1 + 200));
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_11:
    *(_QWORD *)(a1 + 112) = off_24C9E4918;
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(*(void **)(a1 + 176));
  *(_QWORD *)(a1 + 112) = off_24C9E4918;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_13:
    *(_QWORD *)(a1 + 56) = off_24C9E48C8;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9E48C8;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_14:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_15:
    *(_QWORD *)a1 = off_24C9E46C8;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_32:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_33;
  }
LABEL_31:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9E46C8;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_32;
LABEL_16:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_33:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED60798(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 24) = &off_24C9EF000;
  v2 = a1 + 24;
  *(_QWORD *)(a1 + 80) = &unk_24C9EF040;
  *(_QWORD *)(a1 + 136) = &unk_24C9EF068;
  *(_QWORD *)(a1 + 192) = &unk_24C9EF090;
  v3 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(v2 + 288) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_20ED62854(v2);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

uint64_t *sub_20ED60848(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = (uint64_t)&off_24C9EF000;
  v2 = (uint64_t)(a1 + 2);
  a1[9] = (uint64_t)&unk_24C9EF040;
  a1[16] = (uint64_t)&unk_24C9EF068;
  a1[23] = (uint64_t)&unk_24C9EF090;
  v3 = a1[38];
  *(_QWORD *)(v2 + 288) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[37];
  a1[37] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[36];
  a1[36] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_20ED62854(v2);
  v6 = *a1;
  *a1 = 0;
  if (v6)
    ((void (*)(void))a1[1])();
  return a1;
}

uint64_t sub_20ED608F8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)a1)
  {
    sub_20E9AE494(a1, *(void ***)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20ED60948(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _OWORD v49[3];
  _OWORD v50[2];
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  _BYTE v55[288];
  uint64_t v56;
  std::__shared_weak_count *v57;
  __int128 v58;
  char v59;
  void *__p;
  void *v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  double v67;
  void *v68[2];
  uint64_t v69;
  char v70;
  void *v71;
  int v72[2];
  char v73;
  void *v74;
  void *v75;
  _BYTE v76[514];
  _OWORD v77[3];
  _OWORD v78[2];
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  _BYTE v83[288];
  uint64_t v84;
  std::__shared_weak_count *v85;
  __int128 v86;

  LOBYTE(v49[0]) = 0;
  v59 = 0;
  LOBYTE(__p) = 0;
  v63 = 0;
  LOBYTE(v64) = 0;
  v66 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 3816) + 24))(*(_QWORD *)(a1 + 3816)))
  {
    v4 = *(uint64_t **)(a1 + 3824);
    v5 = *(uint64_t **)(a1 + 3832);
    if (v5 != v4)
    {
      v6 = 0x8F9C18F9C18F9C19 * (v5 - v4);
      v7 = *(_DWORD *)(a2 + 392);
      do
      {
        v8 = v6 >> 1;
        v9 = &v4[41 * (v6 >> 1)];
        if (*(_DWORD *)v9 < v7 || *(_DWORD *)v9 == v7 && *((_DWORD *)v9 + 1) < *(_DWORD *)(a2 + 396))
        {
          v4 = v9 + 41;
          v8 = v6 + ~v8;
        }
        v6 = v8;
      }
      while (v8);
    }
    if (v4 != v5 && *(_DWORD *)v4 == *(_DWORD *)(a2 + 392) && *((_DWORD *)v4 + 1) == *(_DWORD *)(a2 + 396))
    {
      kdebug_trace();
      sub_20F41C808(v4 + 1, a2, (uint64_t)v77);
      v10 = *(std::__shared_weak_count **)(a2 + 408);
      v84 = *(_QWORD *)(a2 + 400);
      v85 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      *(_QWORD *)&v86 = *(_QWORD *)(a2 + 416);
      BYTE8(v86) = *(_BYTE *)(a2 + 424);
      v49[2] = v77[2];
      v50[0] = v78[0];
      *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)((char *)v78 + 9);
      v49[0] = v77[0];
      v49[1] = v77[1];
      v51 = v79;
      v52 = v80;
      if (v80)
      {
        v13 = (unint64_t *)&v80->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v53 = v81;
      v54 = v82;
      if (v82)
      {
        v15 = (unint64_t *)&v82->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      memcpy(v55, v83, sizeof(v55));
      v56 = v84;
      v57 = v85;
      if (v85)
      {
        v17 = (unint64_t *)&v85->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v58 = v86;
      v59 = 1;
      sub_20EE89720((uint64_t)(v4 + 3), (uint64_t)v77, (uint64_t)v76);
      (*(void (**)(void **__return_ptr, _QWORD, _BYTE *))(**(_QWORD **)(a1 + 3848) + 16))(&v71, *(_QWORD *)(a1 + 3848), v76);
      if (v63 == v73)
      {
        if (!v63)
          goto LABEL_80;
        sub_20E9BE81C((uint64_t)&__p, (uint64_t *)v71, *(uint64_t **)v72, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v72 - (_QWORD)v71) >> 3));
        if (!v63)
          goto LABEL_80;
        v19 = (uint64_t *)__p;
        if (__p != v61)
        {
LABEL_29:
          v20 = *v19;
          if (*v19 == v19[1])
            goto LABEL_38;
          goto LABEL_40;
        }
      }
      else
      {
        if (v63)
        {
          if (__p)
          {
            sub_20E9AE494((uint64_t)&__p, (void **)__p);
            operator delete(__p);
          }
          v63 = 0;
          goto LABEL_80;
        }
        __p = 0;
        v61 = 0;
        v62 = 0;
        sub_20E9BFAE0((uint64_t)&__p, (uint64_t)v71, *(uint64_t *)v72, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v72 - (_QWORD)v71) >> 3));
        v63 = 1;
        v19 = (uint64_t *)__p;
        if (__p != v61)
          goto LABEL_29;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSystemFeatures.cpp", 39, (uint64_t)"!camera_set_features_.empty()", 29, (uint64_t)&unk_2102C5146, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_107;
      }
      v19 = (uint64_t *)__p;
      v20 = *(_QWORD *)__p;
      if (*(_QWORD *)__p == *((_QWORD *)__p + 1))
      {
LABEL_38:
        if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 77, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)&unk_2102C50BE, 0, (void (*)(void **))sub_21023DDB0))
        {
          v20 = *v19;
          goto LABEL_40;
        }
LABEL_107:
        abort();
      }
LABEL_40:
      v67 = *(double *)(v20 + 8) + *(double *)(v20 + 16);
      sub_20F421150(a1 + 3864, &v67, v68);
      if (v66 != v70)
      {
        if (v66)
        {
          v27 = v64;
          if ((_QWORD)v64)
          {
            v28 = *((_QWORD *)&v64 + 1);
            v29 = (void *)v64;
            if (*((_QWORD *)&v64 + 1) != (_QWORD)v64)
            {
              do
              {
                v30 = *(std::__shared_weak_count **)(v28 - 8);
                if (v30)
                {
                  v31 = (unint64_t *)&v30->__shared_owners_;
                  do
                    v32 = __ldaxr(v31);
                  while (__stlxr(v32 - 1, v31));
                  if (!v32)
                  {
                    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                    std::__shared_weak_count::__release_weak(v30);
                  }
                }
                v28 -= 16;
              }
              while (v28 != v27);
              v29 = (void *)v64;
            }
            *((_QWORD *)&v64 + 1) = v27;
            operator delete(v29);
          }
          v66 = 0;
        }
        else
        {
          v64 = *(_OWORD *)v68;
          v65 = v69;
          v69 = 0;
          v68[1] = 0;
          v68[0] = 0;
          v66 = 1;
        }
        goto LABEL_68;
      }
      if (v66)
      {
        v21 = v64;
        if ((_QWORD)v64)
        {
          v22 = *((_QWORD *)&v64 + 1);
          v23 = (void *)v64;
          if (*((_QWORD *)&v64 + 1) != (_QWORD)v64)
          {
            do
            {
              v24 = *(std::__shared_weak_count **)(v22 - 8);
              if (v24)
              {
                v25 = (unint64_t *)&v24->__shared_owners_;
                do
                  v26 = __ldaxr(v25);
                while (__stlxr(v26 - 1, v25));
                if (!v26)
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
              v22 -= 16;
            }
            while (v22 != v21);
            v23 = (void *)v64;
          }
          *((_QWORD *)&v64 + 1) = v21;
          operator delete(v23);
        }
        v64 = *(_OWORD *)v68;
        v65 = v69;
        v69 = 0;
        v68[1] = 0;
        v68[0] = 0;
LABEL_68:
        if (v70)
        {
          v33 = (char *)v68[0];
          if (v68[0])
          {
            v34 = (char *)v68[1];
            v35 = v68[0];
            if (v68[1] != v68[0])
            {
              do
              {
                v36 = (std::__shared_weak_count *)*((_QWORD *)v34 - 1);
                if (v36)
                {
                  v37 = (unint64_t *)&v36->__shared_owners_;
                  do
                    v38 = __ldaxr(v37);
                  while (__stlxr(v38 - 1, v37));
                  if (!v38)
                  {
                    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                    std::__shared_weak_count::__release_weak(v36);
                  }
                }
                v34 -= 16;
              }
              while (v34 != v33);
              v35 = v68[0];
            }
            v68[1] = v33;
            operator delete(v35);
          }
        }
      }
LABEL_80:
      if (v74)
      {
        v75 = v74;
        operator delete(v74);
      }
      if (v73 && v71)
      {
        sub_20E9AE494((uint64_t)&v71, (void **)v71);
        operator delete(v71);
      }
      sub_20E9AE6A0((uint64_t)v76);
      v39 = v85;
      if (v85)
      {
        v40 = (unint64_t *)&v85->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = v82;
      if (v82)
      {
        v43 = (unint64_t *)&v82->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = v80;
      if (v80)
      {
        v46 = (unint64_t *)&v80->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
  }
  if (v59)
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4248) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 4248) + 72) + 88, v49);
  if (v66)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4232) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 4232) + 72) + 88, &v64);
  if (v63)
    (*(void (**)(uint64_t, void **))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4216) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 4216) + 72) + 88, &__p);
  return sub_20ED629F0((uint64_t)v49);
}

void sub_20ED61150(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  void *v12;
  void *v13;
  void *v14;

  sub_20ED608F8((uint64_t)&STACK[0x220]);
  sub_20E9AE6A0((uint64_t)&STACK[0x268]);
  sub_20E98046C(&STACK[0x530]);
  sub_20ED629F0((uint64_t)&a9);
  if (a2 == 3)
  {
    v12 = __cxa_begin_catch(a1);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)(*(_QWORD *)(v9[533] + 72) + 88) + 16))(*(_QWORD *)(v9[533] + 72) + 88, v12);
  }
  else if (a2 == 2)
  {
    v13 = __cxa_begin_catch(a1);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)(*(_QWORD *)(v9[535] + 72) + 88) + 16))(*(_QWORD *)(v9[535] + 72) + 88, v13);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v14 = __cxa_begin_catch(a1);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)(*(_QWORD *)(v9[537] + 72) + 88) + 16))(*(_QWORD *)(v9[537] + 72) + 88, v14);
  }
  __cxa_end_catch();
  JUMPOUT(0x20ED6112CLL);
}

uint64_t sub_20ED61264(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(result + 3824);
  for (i = *(_QWORD *)(result + 3832); v2 != i; v2 += 328)
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 312) + 24))(*(_QWORD *)(v2 + 312), *a2);
  return result;
}

uint64_t sub_20ED612B8(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(result + 3768);
  for (i = *(_QWORD *)(result + 3776); v2 != i; v2 += 328)
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 312) + 24))(*(_QWORD *)(v2 + 312), *a2);
  return result;
}

_QWORD *sub_20ED6130C(_QWORD *result, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t i;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  const char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  size_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68[3];
  int v69;
  const char *v70;
  int v71;
  const char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE object[24];
  __int128 v79;
  void *__p[2];
  unint64_t v81;
  char v82;
  uint64_t v83;

  v3 = (uint64_t)result;
  v83 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 250))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A5F910);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F910))
    {
      sub_21021D3D8(v68);
      sub_20E8610C0(object, "cv3d.vio");
      sub_20E8C4068(v68, (uint64_t)object, &qword_254A5F908);
      if ((object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_guard_release(&qword_254A5F910);
    }
    v75 = qword_254A5F908;
    if (**(int **)(qword_254A5F908 + 56) > 3)
      return sub_20ED5F168(v3, 1);
    v5 = *(unsigned __int8 *)(qword_254A5F908 + 72);
    v6 = sub_20E8C31DC(qword_254A5F908, "OSLogSurrogateAppender", 1, 0);
    v7 = v6;
    if (!v5 && v6 == 0)
      return sub_20ED5F168(v3, 1);
    v68[0] = &v75;
    v68[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
    v68[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
    v69 = 3;
    v70 = "unknown file";
    v71 = 184;
    v73 = 0;
    v74 = 0;
    v72 = "unknown function";
    v9 = *v68[0];
    v67 = *v68[0];
    if (*(char *)(*v68[0] + 39) < 0)
    {
      v11 = *(const char **)(v9 + 16);
      v10 = *(_QWORD *)(v9 + 24);
      v66 = *v68[0] + 16;
      v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v15 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = *(unsigned __int8 *)(*v68[0] + 39);
      v11 = (const char *)(*v68[0] + 16);
      v66 = (uint64_t)v11;
      v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v12 & 1) != 0)
        goto LABEL_15;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v79 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_15:
    if (byte_254A4A4F8[23] >= 0)
      v16 = byte_254A4A4F8;
    else
      v16 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v17 = byte_254A4A4F8[23];
    else
      v17 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v16, v11);
    v18 = &object[8];
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v17 >= 0x17)
    {
      v19 = v7;
      v20 = v11;
      v21 = v5;
      v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v22 = v17 | 7;
      v23 = v22 + 1;
      v18 = operator new(v22 + 1);
      *(_QWORD *)&object[16] = v17;
      *(_QWORD *)&v79 = v23 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v18;
      v5 = v21;
      v11 = v20;
      v7 = v19;
    }
    else
    {
      BYTE7(v79) = v17;
      if (!v17)
      {
LABEL_29:
        v18[v17] = 0;
        BYTE8(v79) = 1;
        v24 = __p;
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v10 >= 0x17)
        {
          v25 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v25 = v10 | 7;
          v26 = v25 + 1;
          v24 = operator new(v25 + 1);
          __p[1] = (void *)v10;
          v81 = v26 | 0x8000000000000000;
          __p[0] = v24;
        }
        else
        {
          HIBYTE(v81) = v10;
          if (!v10)
            goto LABEL_37;
        }
        memmove(v24, v11, v10);
LABEL_37:
        *((_BYTE *)v24 + v10) = 0;
        v82 = 1;
        v27 = *(NSObject **)object;
        if (SHIBYTE(v81) < 0)
          operator delete(__p[0]);
        if (BYTE8(v79) && SBYTE7(v79) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v7 && *(_QWORD *)(v7 + 24))
        {
          v28 = _os_log_pack_size();
          v29 = (std::__shared_weak_count_vtbl *)operator new(v28, (std::align_val_t)8uLL);
          v30 = (std::__shared_weak_count *)operator new();
          v31 = v30;
          v30->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v30->__shared_weak_owners_ = 0;
          v30[1].__vftable = v29;
          *(_QWORD *)object = v29;
          *(_QWORD *)&object[8] = v29;
          *(_QWORD *)&object[16] = v30;
          do
            v33 = __ldxr(p_shared_owners);
          while (__stxr(v33 + 1, p_shared_owners));
          v79 = 0uLL;
          __p[0] = 0;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v31);
          }
          v35 = *(_QWORD *)object;
          v36 = _os_log_pack_fill();
          v37 = *a2;
          *(_DWORD *)v36 = 134217984;
          *(_QWORD *)(v36 + 4) = v37;
          v38 = operator new();
          v39 = *(unsigned __int8 *)(v67 + 39);
          v40 = v66;
          if ((v39 & 0x80u) != 0)
          {
            v40 = *(_QWORD *)(v67 + 16);
            v39 = *(_QWORD *)(v67 + 24);
          }
          *(_QWORD *)v38 = v35;
          *(_OWORD *)(v38 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v38 + 24) = v79;
          v79 = 0uLL;
          *(_QWORD *)(v38 + 40) = v40;
          *(_QWORD *)(v38 + 48) = v39;
          *(_BYTE *)(v38 + 56) = 1;
          v76 = 0;
          v77 = v38;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v77);
          v41 = v77;
          v77 = 0;
          if (v41)
          {
            v42 = *(std::__shared_weak_count **)(v41 + 32);
            if (v42)
            {
              v43 = (unint64_t *)&v42->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v45 = *(std::__shared_weak_count **)(v41 + 16);
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            MEMORY[0x212BC6398](v41, 0x10F0C40B62ED6C6);
            v48 = v76;
            v76 = 0;
            if (v48)
            {
              v49 = *(std::__shared_weak_count **)(v48 + 32);
              if (v49)
              {
                v50 = (unint64_t *)&v49->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v52 = *(std::__shared_weak_count **)(v48 + 16);
              if (v52)
              {
                v53 = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              MEMORY[0x212BC6398](v48, 0x10F0C40B62ED6C6);
            }
          }
          v55 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
          if (*((_QWORD *)&v79 + 1))
          {
            v56 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v58 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v59 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
        }
        else
        {
          os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
          v61 = *a2;
          *(_DWORD *)object = 134217984;
          *(_QWORD *)&object[4] = v61;
          v62 = (void *)_os_log_send_and_compose_impl();
          if (v62)
            free(v62);
        }
        if (v5)
        {
          sub_20E8C003C((uint64_t)v68, "Trigger a reinitialization at MultiCameraFeatureDetectionNodeWorker@ %f, based on reinit signal from LSE.", *(double *)a2);
          sub_20E863570((uint64_t)v68);
        }
        sub_20E863570((uint64_t)v68);
        v63 = v74;
        if (v74)
        {
          v64 = (unint64_t *)&v74->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return sub_20ED5F168(v3, 1);
      }
    }
    memmove(v18, v16, v17);
    goto LABEL_29;
  }
  v13 = result[478];
  for (i = result[479]; v13 != i; v13 += 328)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v13 + 296) + 16))(*(_QWORD *)(v13 + 296), a2);
  return result;
}

void sub_20ED61AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20ED61B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F910);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F910);
  _Unwind_Resume(a1);
}

void sub_20ED61B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED61BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v5, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED61BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED61BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED61C6C(uint64_t a1, uint64_t *a2)
{
  return sub_20ED6130C((_QWORD *)(a1 - 112), a2);
}

uint64_t sub_20ED61C74(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  if (*(_BYTE *)(result + 440))
  {
    v2 = *(_QWORD *)(result + 3824);
    for (i = *(_QWORD *)(result + 3832); v2 != i; v2 += 328)
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 296) + 40))(*(_QWORD *)(v2 + 296), a2);
  }
  return result;
}

uint64_t sub_20ED61CD0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  if (*(_BYTE *)(result + 272))
  {
    v2 = *(_QWORD *)(result + 3656);
    for (i = *(_QWORD *)(result + 3664); v2 != i; v2 += 328)
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 296) + 40))(*(_QWORD *)(v2 + 296), a2);
  }
  return result;
}

void sub_20ED61D2C(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 3816) + 16))(*(_QWORD *)(a1 + 3816), *a2);
  sub_20ED5C278(*(_QWORD **)(a1 + 4312), *a2);
  v6 = *(_QWORD *)(a1 + 4312);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v8 = *(_BYTE **)(v6 + 136);
  v7 = *(_BYTE **)(v6 + 144);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 2) >= 0x1555555555555556)
      sub_20E867F44();
    v10 = (char *)operator new(v9);
    *a3 = v10;
    v11 = &v10[4 * (v9 >> 2)];
    a3[2] = v11;
    memcpy(v10, v8, v9 - 1);
    a3[1] = v11;
  }
}

void sub_20ED61DE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED61E04(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  sub_20ED61D2C(a1 - 224, a2, a3);
}

void sub_20ED61E0C(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char v11;

  sub_20F420C0C((_QWORD *)(a1 + 3864), a2, &__p);
  if (v11)
  {
    (*(void (**)(uint64_t, void **))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4232) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 4232) + 72) + 88, &__p);
    if (v11)
    {
      v3 = (char *)__p;
      if (__p)
      {
        v4 = v10;
        v5 = __p;
        if (v10 != __p)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = __p;
        }
        v10 = v3;
        operator delete(v5);
      }
    }
  }
}

void sub_20ED61EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  char *v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  char *v29;
  char *v30;
  char v31;

  if (v31 && v29)
  {
    v23 = v30;
    v24 = v29;
    if (v30 != v29)
    {
      do
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)v23 - 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 16;
      }
      while (v23 != v29);
      v24 = v29;
    }
    operator delete(v24);
  }
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v28 = __cxa_begin_catch(exception_object);
  (*(void (**)(uint64_t, void *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 4280) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(v20 + 4280) + 72) + 88, v28);
  __cxa_end_catch();
}

void sub_20ED61FC8(uint64_t a1, uint64_t a2)
{
  sub_20ED61E0C(a1 - 280, a2);
}

uint64_t sub_20ED61FD0(uint64_t result, _BYTE *a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  int v5;

  v2 = (_QWORD *)result;
  v3 = *(_BYTE *)(result + 4208) != 0;
  v4 = *a2;
  v5 = *a2 != 0;
  *(_BYTE *)(result + 4208) = v4;
  if (v3 != v5)
    result = kdebug_trace();
  if (!v4)
  {
    v2[518] = 0;
    v2[517] = 0;
    v2[519] = 0;
  }
  return result;
}

double sub_20ED62054(uint64_t a1, _BYTE *a2)
{
  int v3;
  int v4;
  int v5;
  double result;

  v3 = *(_BYTE *)(a1 + 3872) != 0;
  v4 = *a2;
  v5 = *a2 != 0;
  *(_BYTE *)(a1 + 3872) = v4;
  if (v3 != v5)
    kdebug_trace();
  if (!v4)
  {
    *(_QWORD *)(a1 + 3816) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 3800) = 0u;
  }
  return result;
}

uint64_t sub_20ED620D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;

  *a1 = &off_24C9E4398;
  a1[7] = &unk_24C9E43F0;
  a1[14] = &unk_24C9E4418;
  a1[21] = &unk_24C9E4440;
  a1[28] = &unk_24C9E4468;
  a1[35] = &unk_24C9E4490;
  a1[42] = &unk_24C9E44B8;
  v2 = (std::__shared_weak_count *)a1[540];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[538];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[538];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[536];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[534];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[534];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[532];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)a1[530];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)a1[530];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)a1[528];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  a1[483] = &off_24C9FFFE0;
  a1[490] = &unk_24CA00018;
  a1[497] = &unk_24CA00040;
  v23 = a1[520];
  if (v23)
  {
    v24 = a1[521];
    v25 = (void *)a1[520];
    if (v24 != v23)
    {
      do
      {
        v26 = *(std::__shared_weak_count **)(v24 - 8);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 16;
      }
      while (v24 != v23);
      v25 = (void *)a1[520];
    }
    a1[521] = v23;
    operator delete(v25);
  }
  v29 = (void *)a1[514];
  if (v29)
  {
    a1[515] = v29;
    operator delete(v29);
  }
  sub_20ED625D0((uint64_t)(a1 + 483));
  v30 = (std::__shared_weak_count *)a1[482];
  if (!v30)
    goto LABEL_53;
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_53:
    if (!a1[478])
      goto LABEL_55;
    goto LABEL_54;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (a1[478])
  {
LABEL_54:
    sub_20ED62744(a1 + 478);
    operator delete((void *)a1[478]);
  }
LABEL_55:
  v33 = a1[477];
  a1[477] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  sub_20E9BC9D8((uint64_t)(a1 + 56));
  return sub_20ED6050C((uint64_t)a1);
}

uint64_t sub_20ED6241C(uint64_t a1)
{
  return sub_20ED620D8((_QWORD *)(a1 - 56));
}

uint64_t sub_20ED62424(uint64_t a1)
{
  return sub_20ED620D8((_QWORD *)(a1 - 112));
}

uint64_t sub_20ED6242C(uint64_t a1)
{
  return sub_20ED620D8((_QWORD *)(a1 - 168));
}

uint64_t sub_20ED62434(uint64_t a1)
{
  return sub_20ED620D8((_QWORD *)(a1 - 224));
}

uint64_t sub_20ED6243C(uint64_t a1)
{
  return sub_20ED620D8((_QWORD *)(a1 - 280));
}

uint64_t sub_20ED62444(uint64_t a1)
{
  return sub_20ED620D8((_QWORD *)(a1 - 336));
}

void sub_20ED6244C(_QWORD *a1)
{
  sub_20ED620D8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED62470(uint64_t a1)
{
  sub_20ED620D8((_QWORD *)(a1 - 56));
  JUMPOUT(0x212BC6398);
}

void sub_20ED62498(uint64_t a1)
{
  sub_20ED620D8((_QWORD *)(a1 - 112));
  JUMPOUT(0x212BC6398);
}

void sub_20ED624C0(uint64_t a1)
{
  sub_20ED620D8((_QWORD *)(a1 - 168));
  JUMPOUT(0x212BC6398);
}

void sub_20ED624E8(uint64_t a1)
{
  sub_20ED620D8((_QWORD *)(a1 - 224));
  JUMPOUT(0x212BC6398);
}

void sub_20ED62510(uint64_t a1)
{
  sub_20ED620D8((_QWORD *)(a1 - 280));
  JUMPOUT(0x212BC6398);
}

void sub_20ED62538(uint64_t a1)
{
  sub_20ED620D8((_QWORD *)(a1 - 336));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED625D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9E49E0;
  *(_QWORD *)(a1 + 56) = &unk_24C9E4A08;
  *(_QWORD *)(a1 + 112) = &unk_24C9E4A30;
  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 112) = off_24C9E4AA8;
      if ((*(char *)(a1 + 167) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 112) = off_24C9E4AA8;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = off_24C9E4A80;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9E4A80;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)a1 = off_24C9E4A58;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_16:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9E4A58;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_16;
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_17:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20ED62744(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = result;
  v3 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    v4 = v2 - 320;
    do
    {
      *(_QWORD *)(v4 + 16) = &off_24C9EF000;
      *(_QWORD *)(v4 + 72) = &unk_24C9EF040;
      *(_QWORD *)(v4 + 128) = &unk_24C9EF068;
      *(_QWORD *)(v4 + 184) = &unk_24C9EF090;
      v6 = *(_QWORD *)(v4 + 304);
      *(_QWORD *)(v4 + 304) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(_QWORD *)(v4 + 296);
      *(_QWORD *)(v4 + 296) = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v8 = *(_QWORD *)(v4 + 288);
      *(_QWORD *)(v4 + 288) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      sub_20ED62854(v4 + 16);
      result = *(_QWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(void))(v4 + 8))();
      v5 = v4 - 8;
      v4 -= 328;
    }
    while (v5 != v3);
  }
  v1[1] = v3;
  return result;
}

uint64_t sub_20ED62854(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9E4828;
  *(_QWORD *)(a1 + 56) = &unk_24C9E4850;
  *(_QWORD *)(a1 + 112) = &unk_24C9E4878;
  *(_QWORD *)(a1 + 168) = &unk_24C9E48A0;
  if (*(char *)(a1 + 271) < 0)
  {
    operator delete(*(void **)(a1 + 248));
    if ((*(char *)(a1 + 247) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 168) = off_24C9E4940;
      if ((*(char *)(a1 + 223) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 224));
  *(_QWORD *)(a1 + 168) = off_24C9E4940;
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 200));
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 112) = off_24C9E4918;
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 176));
  *(_QWORD *)(a1 + 112) = off_24C9E4918;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(a1 + 56) = off_24C9E48F0;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9E48F0;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_9:
    *(_QWORD *)a1 = off_24C9E48C8;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_20:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_21;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9E48C8;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_20;
LABEL_10:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_21:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED629F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  if (*(_BYTE *)(a1 + 496))
  {
    v2 = *(_QWORD *)(a1 + 472);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 480);
      v4 = *(void **)(a1 + 472);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 472);
      }
      *(_QWORD *)(a1 + 480) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 464))
  {
    v8 = *(void ***)(a1 + 440);
    if (v8)
    {
      sub_20E9AE494(a1 + 440, v8);
      operator delete(*(void **)(a1 + 440));
    }
  }
  if (!*(_BYTE *)(a1 + 432))
    return a1;
  v9 = *(std::__shared_weak_count **)(a1 + 408);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(std::__shared_weak_count **)(a1 + 104);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v15)
    return a1;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED62B78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED62B88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED62BB8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20ED62BC8(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v28;
  _QWORD *v29;

  a1[1] = 0;
  *a1 = off_24C9E4338;
  a1[2] = 0;
  a1[3] = 0;
  v7 = *(_QWORD **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v8 = v6 - *(_QWORD *)a3;
  if (v6 != *(_QWORD *)a3)
  {
    if (v8 < 0)
      sub_20E92CED8();
    v9 = (char *)operator new(v6 - *(_QWORD *)a3);
    a1[1] = v9;
    a1[2] = v9;
    v10 = &v9[8 * (v8 >> 3)];
    a1[3] = v10;
    memcpy(v9, v7, v8);
    a1[2] = v10;
  }
  *a1 = &off_24C9E4178;
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = a2[3];
  v28 = a1;
  a1[17] = 0;
  v15 = a1 + 17;
  *(_OWORD *)(v15 - 7) = v14;
  *(_OWORD *)(v15 - 9) = v13;
  *(_OWORD *)(v15 - 11) = v12;
  *(_OWORD *)(v15 - 13) = v11;
  *(_OWORD *)(v15 - 5) = 0u;
  *(_OWORD *)(v15 - 3) = 0u;
  *((_DWORD *)v15 - 2) = 1065353216;
  v15[1] = 0;
  v15[2] = 0;
  v16 = *(_QWORD **)a3;
  v17 = *(_QWORD **)(a3 + 8);
  if (*(_QWORD **)a3 != v17)
  {
    v18 = (char *)a2 + 8;
    do
    {
      v19 = operator new();
      v20 = *((_OWORD *)v18 + 1);
      v21 = *((_OWORD *)v18 + 2);
      *(_OWORD *)v19 = *(_OWORD *)v18;
      *(_OWORD *)(v19 + 16) = v20;
      *(_OWORD *)(v19 + 32) = v21;
      *(_QWORD *)(v19 + 48) = *((_QWORD *)v18 + 6);
      *(_QWORD *)(v19 + 56) = 0;
      v22 = *(_QWORD *)v18;
      *(_QWORD *)(v19 + 64) = 0;
      *(_QWORD *)(v19 + 72) = 0;
      if (v22)
      {
        if (v22 >= 0x222222222222223)
          sub_20EFF577C();
        v23 = (char *)operator new(120 * v22);
        *(_QWORD *)(v19 + 56) = v23;
        *(_QWORD *)(v19 + 72) = &v23[120 * v22];
        bzero(v23, 120 * ((120 * v22 - 120) / 0x78) + 120);
        *(_QWORD *)(v19 + 64) = &v23[120 * ((120 * v22 - 120) / 0x78) + 120];
      }
      *(_OWORD *)(v19 + 80) = 0u;
      *(_OWORD *)(v19 + 96) = 0u;
      *(_DWORD *)(v19 + 112) = *(_DWORD *)(v19 + 40);
      v29 = v16;
      v24 = sub_20ED5D564((uint64_t)(v15 - 5), (int *)v16, (uint64_t)&unk_2102DB95C, &v29);
      v25 = *((_QWORD *)v24 + 6);
      *((_QWORD *)v24 + 6) = v19;
      if (v25)
      {
        v26 = *(void **)(v25 + 56);
        if (v26)
        {
          *(_QWORD *)(v25 + 64) = v26;
          operator delete(v26);
        }
        MEMORY[0x212BC6398](v25, 0x1020C40FE1A4B4FLL);
      }
      ++v16;
    }
    while (v16 != v17);
  }
  return v28;
}

void sub_20ED62E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void **v12;
  uint64_t v13;
  void *v15;

  v15 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v13 + 16) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED62EA8(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 56);
    if (v3)
    {
      *(_QWORD *)(v2 + 64) = v3;
      operator delete(v3);
    }
    MEMORY[0x212BC6398](v2, 0x1020C40FE1A4B4FLL);
  }
  return a1;
}

uint64_t sub_20ED62EFC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[6];
      v2[6] = 0;
      if (v6)
      {
        v7 = *(void **)(v6 + 56);
        if (v7)
        {
          *(_QWORD *)(v6 + 64) = v7;
          operator delete(v7);
        }
        MEMORY[0x212BC6398](v6, 0x1020C40FE1A4B4FLL);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20ED62F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  void **v18;
  __int128 v19;
  void **v20;
  __int128 v21;
  void **v22;
  __int128 v23;
  void **v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(void))(a1 + 16))();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 55) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  v8 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 79) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  v10 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a2 + 111) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  v12 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*v12);
  v13 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)v12 = v13;
  *(_BYTE *)(a2 + 135) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  v14 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v14);
  v15 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)v14 = v15;
  *(_BYTE *)(a2 + 167) = 0;
  *(_BYTE *)(a2 + 144) = 0;
  v16 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v16);
  v17 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)v16 = v17;
  *(_BYTE *)(a2 + 191) = 0;
  *(_BYTE *)(a2 + 168) = 0;
  v18 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v18);
  v19 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)v18 = v19;
  *(_BYTE *)(a2 + 223) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  v20 = (void **)(a1 + 224);
  if (*(char *)(a1 + 247) < 0)
    operator delete(*v20);
  v21 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)v20 = v21;
  *(_BYTE *)(a2 + 247) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  v22 = (void **)(a1 + 248);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*v22);
  v23 = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)v22 = v23;
  *(_BYTE *)(a2 + 271) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  v24 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0)
    operator delete(*v24);
  v25 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)v24 = v25;
  *(_BYTE *)(a2 + 295) = 0;
  *(_BYTE *)(a2 + 272) = 0;
  v26 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  v27 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  v29 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = 0;
  v31 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v30;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  return a1;
}

uint64_t sub_20ED63218(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 328;
    *(_QWORD *)(i - 304) = &off_24C9EF000;
    *(_QWORD *)(i - 248) = &unk_24C9EF040;
    *(_QWORD *)(i - 192) = &unk_24C9EF068;
    *(_QWORD *)(i - 136) = &unk_24C9EF090;
    v4 = *(_QWORD *)(i - 16);
    *(_QWORD *)(i - 16) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD *)(i - 24);
    *(_QWORD *)(i - 24) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(_QWORD *)(i - 32);
    *(_QWORD *)(i - 32) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    sub_20ED62854(i - 304);
    v7 = *(_QWORD *)(i - 320);
    *(_QWORD *)(i - 320) = 0;
    if (v7)
      (*(void (**)(void))(i - 312))();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20ED63310(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_20ED63320(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9E4AD0;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED633A8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9E4AD0;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

uint64_t sub_20ED63434(uint64_t a1, uint64_t a2, uint64_t (***a3)())
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  std::__shared_weak_count *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  std::__shared_weak_count *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  std::__shared_weak_count *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  std::__shared_weak_count *v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  uint64_t (**v251)();
  std::__shared_weak_count *v252;
  uint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t (***v265)();
  uint64_t v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  uint64_t (**v269)();
  std::__shared_weak_count *v270;
  uint64_t (**v271)();
  _BYTE v272[24];
  _BYTE v273[24];
  __int128 v274;
  __int128 v275;
  uint64_t (**v276)();
  _BYTE v277[24];
  uint64_t (**v278)();
  __int128 v279;
  uint64_t (**v280)();
  __int128 v281;
  _QWORD v282[2];
  uint64_t v283;
  std::__shared_weak_count *v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;

  v289 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)operator new(0x68uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24C9E4B18;
  *((_QWORD *)v6 + 3) = &off_24C9E4B68;
  strcpy(v6 + 32, "FeatureFwd");
  v6[55] = 10;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_QWORD *)v6 + 11) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x58uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v7[1]);
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new();
  v265 = a3;
  *(_BYTE *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)v10 = &off_24C9E4C00;
  *(_QWORD *)(v10 + 16) = &unk_24C9E4C78;
  *(_QWORD *)(v10 + 24) = &unk_24C9E4CB8;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = v7 + 1;
  *(_QWORD *)(v10 + 80) = v7;
  v11 = (_QWORD *)operator new();
  v266 = a1;
  *v11 = &off_24C9E4DA0;
  *(_QWORD *)(v10 + 88) = v11;
  *(_QWORD *)(v10 + 96) = v10 + 96;
  *(_QWORD *)(v10 + 104) = v10 + 96;
  *(_QWORD *)(v10 + 112) = 0;
  *(_QWORD *)(v10 + 120) = v10 + 120;
  *(_QWORD *)(v10 + 128) = v10 + 120;
  *(_QWORD *)(v10 + 136) = 0;
  v12 = (std::__shared_weak_count *)operator new();
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4DF0;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v14 = *(std::__shared_weak_count **)(v10 + 40);
  if (v14)
  {
    if (v14->__shared_owners_ != -1)
      goto LABEL_16;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    *(_QWORD *)(v10 + 32) = v10;
    *(_QWORD *)(v10 + 40) = v12;
    std::__shared_weak_count::__release_weak(v14);
  }
  else
  {
    do
      v18 = __ldxr(v13);
    while (__stxr(v18 + 1, v13));
    v19 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)(v10 + 32) = v10;
    *(_QWORD *)(v10 + 40) = v12;
  }
  do
    v21 = __ldaxr(v13);
  while (__stlxr(v21 - 1, v13));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_16:
  v271 = &off_24C9E4B98;
  strcpy(v272, "channel");
  *(_QWORD *)&v272[8] = v288;
  *(_QWORD *)&v272[15] = *(_QWORD *)((char *)&v288 + 7);
  v272[23] = 7;
  *(_QWORD *)&v288 = 0;
  *(_QWORD *)((char *)&v288 + 7) = 0;
  *(_QWORD *)v273 = 0x7974706D45;
  *(_QWORD *)&v273[8] = v287;
  *(_QWORD *)&v273[15] = *(_QWORD *)((char *)&v287 + 7);
  v273[23] = 5;
  *(_QWORD *)&v287 = 0;
  *(_QWORD *)((char *)&v287 + 7) = 0;
  v274 = 0uLL;
  v22 = (unint64_t *)&v12->__shared_weak_owners_;
  *(_QWORD *)&v275 = v10;
  *((_QWORD *)&v275 + 1) = v12;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  v276 = &off_24C9B6AE0;
  v24 = (_QWORD *)operator new();
  *v24 = &off_24C9D2F70;
  v24[1] = v10;
  v24[2] = v12;
  *(_QWORD *)v277 = v24;
  v25 = v275;
  if (*((_QWORD *)&v275 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *(_OWORD *)&v277[8] = v275;
    if ((_QWORD)v275)
      v28 = v275 + 16;
    else
      v28 = 0;
    v29 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    v31 = *((_QWORD *)&v275 + 1);
    v25 = v275;
    v278 = &off_24C9E4BC8;
    *(_QWORD *)&v279 = v28;
    *((_QWORD *)&v279 + 1) = *((_QWORD *)&v275 + 1);
    v32 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  else
  {
    *(_QWORD *)&v277[8] = v275;
    *(_QWORD *)&v277[16] = 0;
    if ((_QWORD)v275)
      v34 = v275 + 16;
    else
      v34 = 0;
    v31 = 0;
    v278 = &off_24C9E4BC8;
    v279 = v34;
  }
  if (v25)
    v35 = v25 + 24;
  else
    v35 = 0;
  v280 = &off_24C9B2310;
  *(_QWORD *)&v281 = v35;
  *((_QWORD *)&v281 + 1) = v31;
  v36 = operator new();
  *(_QWORD *)v36 = &off_24C9E4B98;
  *(_OWORD *)(v36 + 8) = *(_OWORD *)v272;
  *(_QWORD *)(v36 + 24) = *(_QWORD *)&v272[16];
  memset(v272, 0, sizeof(v272));
  *(_OWORD *)(v36 + 32) = *(_OWORD *)v273;
  *(_QWORD *)(v36 + 48) = *(_QWORD *)&v273[16];
  memset(v273, 0, sizeof(v273));
  *(_OWORD *)(v36 + 56) = v274;
  v274 = 0uLL;
  *(_OWORD *)(v36 + 72) = v275;
  v275 = 0uLL;
  *(_QWORD *)(v36 + 88) = &off_24C9B6AE0;
  *(_OWORD *)(v36 + 96) = *(_OWORD *)v277;
  v37 = *(_QWORD *)&v277[16];
  *(_QWORD *)&v277[8] = 0;
  *(_QWORD *)&v277[16] = 0;
  *(_QWORD *)(v36 + 112) = v37;
  *(_QWORD *)(v36 + 120) = &off_24C9E4BC8;
  *(_OWORD *)(v36 + 128) = v279;
  v279 = 0uLL;
  *(_QWORD *)v277 = 0;
  *(_QWORD *)(v36 + 144) = &off_24C9B2310;
  *(_OWORD *)(v36 + 152) = v281;
  v281 = 0uLL;
  *((_QWORD *)v6 + 12) = v36;
  sub_20ED67688((uint64_t)&v271);
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)v266 = v6 + 24;
  *(_QWORD *)(v266 + 8) = v6;
  v39 = (char *)operator new(0x68uLL);
  *((_QWORD *)v39 + 1) = 0;
  *((_QWORD *)v39 + 2) = 0;
  *(_QWORD *)v39 = &off_24C9E4E40;
  *((_QWORD *)v39 + 3) = &off_24C9E4E90;
  strcpy(v39 + 32, "JasperFwd");
  v39[55] = 9;
  *(_OWORD *)(v39 + 56) = 0u;
  *(_OWORD *)(v39 + 72) = 0u;
  *((_QWORD *)v39 + 11) = 0;
  v40 = (std::__shared_weak_count *)operator new(0x58uLL);
  v40->__shared_owners_ = 0;
  v41 = (unint64_t *)&v40->__shared_owners_;
  v40->__shared_weak_owners_ = 0;
  v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v40[1]);
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
  v43 = operator new();
  *(_BYTE *)(v43 + 8) = 1;
  *(_QWORD *)(v43 + 48) = 0;
  *(_QWORD *)(v43 + 32) = 0;
  *(_QWORD *)(v43 + 40) = 0;
  *(_QWORD *)v43 = &off_24C9E4F28;
  *(_QWORD *)(v43 + 16) = &unk_24C9E4FA0;
  *(_QWORD *)(v43 + 24) = &unk_24C9E4FE0;
  *(_QWORD *)(v43 + 56) = 0;
  *(_QWORD *)(v43 + 64) = 0;
  *(_QWORD *)(v43 + 72) = v40 + 1;
  *(_QWORD *)(v43 + 80) = v40;
  v44 = (_QWORD *)operator new();
  *v44 = &off_24C9E50C8;
  *(_QWORD *)(v43 + 88) = v44;
  *(_QWORD *)(v43 + 96) = v43 + 96;
  *(_QWORD *)(v43 + 104) = v43 + 96;
  *(_QWORD *)(v43 + 112) = 0;
  *(_QWORD *)(v43 + 120) = v43 + 120;
  *(_QWORD *)(v43 + 128) = v43 + 120;
  *(_QWORD *)(v43 + 136) = 0;
  v45 = (std::__shared_weak_count *)operator new();
  v45->__shared_owners_ = 0;
  v46 = (unint64_t *)&v45->__shared_owners_;
  v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5118;
  v45->__shared_weak_owners_ = 0;
  v45[1].__vftable = (std::__shared_weak_count_vtbl *)v43;
  v47 = *(std::__shared_weak_count **)(v43 + 40);
  if (v47)
  {
    if (v47->__shared_owners_ != -1)
      goto LABEL_55;
    do
      v48 = __ldxr(v46);
    while (__stxr(v48 + 1, v46));
    v49 = (unint64_t *)&v45->__shared_weak_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    *(_QWORD *)(v43 + 32) = v43;
    *(_QWORD *)(v43 + 40) = v45;
    std::__shared_weak_count::__release_weak(v47);
  }
  else
  {
    do
      v51 = __ldxr(v46);
    while (__stxr(v51 + 1, v46));
    v52 = (unint64_t *)&v45->__shared_weak_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    *(_QWORD *)(v43 + 32) = v43;
    *(_QWORD *)(v43 + 40) = v45;
  }
  do
    v54 = __ldaxr(v46);
  while (__stlxr(v54 - 1, v46));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_55:
  v271 = &off_24C9E4EC0;
  strcpy(v272, "channel");
  *(_QWORD *)&v272[8] = v288;
  *(_QWORD *)&v272[15] = *(_QWORD *)((char *)&v288 + 7);
  v272[23] = 7;
  *(_QWORD *)&v288 = 0;
  *(_QWORD *)((char *)&v288 + 7) = 0;
  *(_QWORD *)v273 = 0x7974706D45;
  *(_QWORD *)&v273[8] = v287;
  *(_QWORD *)&v273[15] = *(_QWORD *)((char *)&v287 + 7);
  v273[23] = 5;
  *(_QWORD *)&v287 = 0;
  *(_QWORD *)((char *)&v287 + 7) = 0;
  v274 = 0uLL;
  v55 = (unint64_t *)&v45->__shared_weak_owners_;
  *(_QWORD *)&v275 = v43;
  *((_QWORD *)&v275 + 1) = v45;
  do
    v56 = __ldxr(v55);
  while (__stxr(v56 + 1, v55));
  v276 = &off_24C9CC618;
  v57 = (_QWORD *)operator new();
  *v57 = &off_24C9D7BD0;
  v57[1] = v43;
  v57[2] = v45;
  *(_QWORD *)v277 = v57;
  v59 = *((_QWORD *)&v275 + 1);
  v58 = v275;
  if (!*((_QWORD *)&v275 + 1))
  {
    *(_QWORD *)&v277[8] = v275;
    *(_QWORD *)&v277[16] = 0;
    if ((_QWORD)v275)
      v63 = v275 + 16;
    else
      v63 = 0;
    goto LABEL_74;
  }
  v60 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
  do
    v61 = __ldxr(v60);
  while (__stxr(v61 + 1, v60));
  v62 = *((_QWORD *)&v275 + 1);
  *(_QWORD *)&v277[8] = v58;
  *(_QWORD *)&v277[16] = v59;
  if ((_QWORD)v275)
    v63 = v275 + 16;
  else
    v63 = 0;
  if (!*((_QWORD *)&v275 + 1))
  {
    v58 = v275;
LABEL_74:
    v66 = 0;
    v278 = &off_24C9E4EF0;
    v279 = v63;
    goto LABEL_75;
  }
  v64 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
  do
    v65 = __ldxr(v64);
  while (__stxr(v65 + 1, v64));
  v66 = *((_QWORD *)&v275 + 1);
  v58 = v275;
  v278 = &off_24C9E4EF0;
  *(_QWORD *)&v279 = v63;
  *((_QWORD *)&v279 + 1) = v62;
  if (*((_QWORD *)&v275 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
LABEL_75:
  if (v58)
    v69 = v58 + 24;
  else
    v69 = 0;
  v280 = &off_24C9B2310;
  *(_QWORD *)&v281 = v69;
  *((_QWORD *)&v281 + 1) = v66;
  v70 = operator new();
  *(_QWORD *)v70 = &off_24C9E4EC0;
  *(_OWORD *)(v70 + 8) = *(_OWORD *)v272;
  *(_QWORD *)(v70 + 24) = *(_QWORD *)&v272[16];
  memset(v272, 0, sizeof(v272));
  *(_OWORD *)(v70 + 32) = *(_OWORD *)v273;
  *(_QWORD *)(v70 + 48) = *(_QWORD *)&v273[16];
  memset(v273, 0, sizeof(v273));
  *(_OWORD *)(v70 + 56) = v274;
  v274 = 0uLL;
  *(_OWORD *)(v70 + 72) = v275;
  v275 = 0uLL;
  *(_QWORD *)(v70 + 88) = &off_24C9CC618;
  *(_OWORD *)(v70 + 96) = *(_OWORD *)v277;
  v71 = *(_QWORD *)&v277[16];
  *(_QWORD *)&v277[8] = 0;
  *(_QWORD *)&v277[16] = 0;
  *(_QWORD *)(v70 + 112) = v71;
  *(_QWORD *)(v70 + 120) = &off_24C9E4EF0;
  *(_OWORD *)(v70 + 128) = v279;
  v279 = 0uLL;
  *(_QWORD *)v277 = 0;
  *(_QWORD *)(v70 + 144) = &off_24C9B2310;
  *(_OWORD *)(v70 + 152) = v281;
  v281 = 0uLL;
  *((_QWORD *)v39 + 12) = v70;
  sub_20ED68C1C((uint64_t)&v271);
  do
    v72 = __ldaxr(v41);
  while (__stlxr(v72 - 1, v41));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  *(_QWORD *)(v266 + 16) = v39 + 24;
  *(_QWORD *)(v266 + 24) = v39;
  v73 = (char *)operator new(0x68uLL);
  *((_QWORD *)v73 + 1) = 0;
  *((_QWORD *)v73 + 2) = 0;
  *((_QWORD *)v73 + 3) = &off_24C9E51B8;
  *(_QWORD *)v73 = &off_24C9E5168;
  strcpy(v73 + 32, "FrameFwd");
  v73[55] = 8;
  *(_OWORD *)(v73 + 56) = 0u;
  *(_OWORD *)(v73 + 72) = 0u;
  *((_QWORD *)v73 + 11) = 0;
  v74 = (std::__shared_weak_count *)operator new(0x58uLL);
  v74->__shared_owners_ = 0;
  v75 = (unint64_t *)&v74->__shared_owners_;
  v74->__shared_weak_owners_ = 0;
  v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v74[1]);
  do
    v76 = __ldxr(v75);
  while (__stxr(v76 + 1, v75));
  v77 = operator new();
  *(_BYTE *)(v77 + 8) = 1;
  *(_QWORD *)(v77 + 48) = 0;
  *(_QWORD *)(v77 + 32) = 0;
  *(_QWORD *)(v77 + 40) = 0;
  *(_QWORD *)v77 = &off_24C9E5250;
  *(_QWORD *)(v77 + 16) = &unk_24C9E52C8;
  *(_QWORD *)(v77 + 24) = &unk_24C9E5308;
  *(_QWORD *)(v77 + 56) = 0;
  *(_QWORD *)(v77 + 64) = 0;
  *(_QWORD *)(v77 + 72) = v74 + 1;
  *(_QWORD *)(v77 + 80) = v74;
  v78 = (_QWORD *)operator new();
  *v78 = &off_24C9E53F0;
  *(_QWORD *)(v77 + 88) = v78;
  *(_QWORD *)(v77 + 96) = v77 + 96;
  *(_QWORD *)(v77 + 104) = v77 + 96;
  *(_QWORD *)(v77 + 112) = 0;
  *(_QWORD *)(v77 + 120) = v77 + 120;
  *(_QWORD *)(v77 + 128) = v77 + 120;
  *(_QWORD *)(v77 + 136) = 0;
  v79 = (std::__shared_weak_count *)operator new();
  v79->__shared_owners_ = 0;
  v80 = (unint64_t *)&v79->__shared_owners_;
  v79->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5440;
  v79->__shared_weak_owners_ = 0;
  v79[1].__vftable = (std::__shared_weak_count_vtbl *)v77;
  v81 = *(std::__shared_weak_count **)(v77 + 40);
  if (v81)
  {
    if (v81->__shared_owners_ != -1)
      goto LABEL_97;
    do
      v82 = __ldxr(v80);
    while (__stxr(v82 + 1, v80));
    v83 = (unint64_t *)&v79->__shared_weak_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
    *(_QWORD *)(v77 + 32) = v77;
    *(_QWORD *)(v77 + 40) = v79;
    std::__shared_weak_count::__release_weak(v81);
  }
  else
  {
    do
      v85 = __ldxr(v80);
    while (__stxr(v85 + 1, v80));
    v86 = (unint64_t *)&v79->__shared_weak_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    *(_QWORD *)(v77 + 32) = v77;
    *(_QWORD *)(v77 + 40) = v79;
  }
  do
    v88 = __ldaxr(v80);
  while (__stlxr(v88 - 1, v80));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
  }
LABEL_97:
  v271 = &off_24C9E51E8;
  strcpy(v272, "channel");
  *(_QWORD *)&v272[8] = v288;
  *(_QWORD *)&v272[15] = *(_QWORD *)((char *)&v288 + 7);
  v272[23] = 7;
  *(_QWORD *)&v288 = 0;
  *(_QWORD *)((char *)&v288 + 7) = 0;
  *(_QWORD *)v273 = 0x7974706D45;
  *(_QWORD *)&v273[8] = v287;
  *(_QWORD *)&v273[15] = *(_QWORD *)((char *)&v287 + 7);
  v273[23] = 5;
  *(_QWORD *)&v287 = 0;
  *(_QWORD *)((char *)&v287 + 7) = 0;
  v274 = 0uLL;
  v89 = (unint64_t *)&v79->__shared_weak_owners_;
  *(_QWORD *)&v275 = v77;
  *((_QWORD *)&v275 + 1) = v79;
  do
    v90 = __ldxr(v89);
  while (__stxr(v90 + 1, v89));
  v276 = &off_24C9CC340;
  v91 = (_QWORD *)operator new();
  *v91 = &off_24C9CC388;
  v91[1] = v77;
  v91[2] = v79;
  *(_QWORD *)v277 = v91;
  v93 = *((_QWORD *)&v275 + 1);
  v92 = v275;
  if (!*((_QWORD *)&v275 + 1))
  {
    *(_QWORD *)&v277[8] = v275;
    *(_QWORD *)&v277[16] = 0;
    if ((_QWORD)v275)
      v97 = v275 + 16;
    else
      v97 = 0;
    goto LABEL_116;
  }
  v94 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
  do
    v95 = __ldxr(v94);
  while (__stxr(v95 + 1, v94));
  v96 = *((_QWORD *)&v275 + 1);
  *(_QWORD *)&v277[8] = v92;
  *(_QWORD *)&v277[16] = v93;
  if ((_QWORD)v275)
    v97 = v275 + 16;
  else
    v97 = 0;
  if (!*((_QWORD *)&v275 + 1))
  {
    v92 = v275;
LABEL_116:
    v100 = 0;
    v278 = &off_24C9E5218;
    v279 = v97;
    goto LABEL_117;
  }
  v98 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
  do
    v99 = __ldxr(v98);
  while (__stxr(v99 + 1, v98));
  v100 = *((_QWORD *)&v275 + 1);
  v92 = v275;
  v278 = &off_24C9E5218;
  *(_QWORD *)&v279 = v97;
  *((_QWORD *)&v279 + 1) = v96;
  if (*((_QWORD *)&v275 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
LABEL_117:
  if (v92)
    v103 = v92 + 24;
  else
    v103 = 0;
  v280 = &off_24C9B2310;
  *(_QWORD *)&v281 = v103;
  *((_QWORD *)&v281 + 1) = v100;
  v104 = operator new();
  *(_QWORD *)v104 = &off_24C9E51E8;
  *(_OWORD *)(v104 + 8) = *(_OWORD *)v272;
  *(_QWORD *)(v104 + 24) = *(_QWORD *)&v272[16];
  memset(v272, 0, sizeof(v272));
  *(_OWORD *)(v104 + 32) = *(_OWORD *)v273;
  *(_QWORD *)(v104 + 48) = *(_QWORD *)&v273[16];
  memset(v273, 0, sizeof(v273));
  *(_OWORD *)(v104 + 56) = v274;
  v274 = 0uLL;
  *(_OWORD *)(v104 + 72) = v275;
  v275 = 0uLL;
  *(_QWORD *)(v104 + 88) = &off_24C9CC340;
  *(_OWORD *)(v104 + 96) = *(_OWORD *)v277;
  v105 = *(_QWORD *)&v277[16];
  *(_QWORD *)&v277[8] = 0;
  *(_QWORD *)&v277[16] = 0;
  *(_QWORD *)(v104 + 112) = v105;
  *(_QWORD *)(v104 + 120) = &off_24C9E5218;
  *(_OWORD *)(v104 + 128) = v279;
  v279 = 0uLL;
  *(_QWORD *)v277 = 0;
  *(_QWORD *)(v104 + 144) = &off_24C9B2310;
  *(_OWORD *)(v104 + 152) = v281;
  v281 = 0uLL;
  *((_QWORD *)v73 + 12) = v104;
  sub_20ED6A0F8((uint64_t)&v271);
  do
    v106 = __ldaxr(v75);
  while (__stlxr(v106 - 1, v75));
  if (!v106)
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
  *(_QWORD *)(v266 + 32) = v73 + 24;
  *(_QWORD *)(v266 + 40) = v73;
  v107 = (char *)operator new(0x68uLL);
  *((_QWORD *)v107 + 1) = 0;
  *((_QWORD *)v107 + 2) = 0;
  *(_QWORD *)v107 = &off_24C9E5490;
  v108 = (char *)operator new(0x20uLL);
  *((_QWORD *)v107 + 3) = &off_24C9E54E0;
  *((_QWORD *)v107 + 4) = v108;
  strcpy(v108, "FeatureDetectionErrorFwd");
  *(_OWORD *)(v107 + 40) = xmmword_2102DBFB0;
  *(_OWORD *)(v107 + 56) = 0u;
  *(_OWORD *)(v107 + 72) = 0u;
  *((_QWORD *)v107 + 11) = 0;
  v109 = (std::__shared_weak_count *)operator new(0x58uLL);
  v109->__shared_owners_ = 0;
  v110 = (unint64_t *)&v109->__shared_owners_;
  v109->__shared_weak_owners_ = 0;
  v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v109[1]);
  do
    v111 = __ldxr(v110);
  while (__stxr(v111 + 1, v110));
  v112 = operator new();
  *(_BYTE *)(v112 + 8) = 1;
  *(_QWORD *)(v112 + 48) = 0;
  *(_QWORD *)(v112 + 32) = 0;
  *(_QWORD *)(v112 + 40) = 0;
  *(_QWORD *)v112 = &off_24C9E55B0;
  *(_QWORD *)(v112 + 16) = &unk_24C9E5628;
  *(_QWORD *)(v112 + 24) = &unk_24C9E5668;
  *(_QWORD *)(v112 + 56) = 0;
  *(_QWORD *)(v112 + 64) = 0;
  *(_QWORD *)(v112 + 72) = v109 + 1;
  *(_QWORD *)(v112 + 80) = v109;
  v113 = (_QWORD *)operator new();
  *v113 = &off_24C9E5760;
  *(_QWORD *)(v112 + 88) = v113;
  *(_QWORD *)(v112 + 96) = v112 + 96;
  *(_QWORD *)(v112 + 104) = v112 + 96;
  *(_QWORD *)(v112 + 112) = 0;
  *(_QWORD *)(v112 + 120) = v112 + 120;
  *(_QWORD *)(v112 + 128) = v112 + 120;
  *(_QWORD *)(v112 + 136) = 0;
  v114 = (std::__shared_weak_count *)operator new();
  v114->__shared_owners_ = 0;
  v115 = (unint64_t *)&v114->__shared_owners_;
  v114->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E57E0;
  v114->__shared_weak_owners_ = 0;
  v114[1].__vftable = (std::__shared_weak_count_vtbl *)v112;
  v116 = *(std::__shared_weak_count **)(v112 + 40);
  if (v116)
  {
    if (v116->__shared_owners_ != -1)
      goto LABEL_139;
    do
      v117 = __ldxr(v115);
    while (__stxr(v117 + 1, v115));
    v118 = (unint64_t *)&v114->__shared_weak_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
    *(_QWORD *)(v112 + 32) = v112;
    *(_QWORD *)(v112 + 40) = v114;
    std::__shared_weak_count::__release_weak(v116);
  }
  else
  {
    do
      v120 = __ldxr(v115);
    while (__stxr(v120 + 1, v115));
    v121 = (unint64_t *)&v114->__shared_weak_owners_;
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
    *(_QWORD *)(v112 + 32) = v112;
    *(_QWORD *)(v112 + 40) = v114;
  }
  do
    v123 = __ldaxr(v115);
  while (__stlxr(v123 - 1, v115));
  if (!v123)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
  }
LABEL_139:
  v271 = &off_24C9E5510;
  strcpy(v272, "channel");
  *(_QWORD *)&v272[8] = v288;
  *(_QWORD *)&v272[15] = *(_QWORD *)((char *)&v288 + 7);
  v272[23] = 7;
  *(_QWORD *)&v288 = 0;
  *(_QWORD *)((char *)&v288 + 7) = 0;
  *(_QWORD *)v273 = 0x7974706D45;
  *(_QWORD *)&v273[8] = v287;
  *(_QWORD *)&v273[15] = *(_QWORD *)((char *)&v287 + 7);
  v273[23] = 5;
  *(_QWORD *)&v287 = 0;
  *(_QWORD *)((char *)&v287 + 7) = 0;
  v274 = 0uLL;
  v124 = (unint64_t *)&v114->__shared_weak_owners_;
  *(_QWORD *)&v275 = v112;
  *((_QWORD *)&v275 + 1) = v114;
  do
    v125 = __ldxr(v124);
  while (__stxr(v125 + 1, v124));
  v276 = &off_24C9E5540;
  v126 = (_QWORD *)operator new();
  *v126 = &off_24C9E5830;
  v126[1] = v112;
  v126[2] = v114;
  *(_QWORD *)v277 = v126;
  v128 = *((_QWORD *)&v275 + 1);
  v127 = v275;
  if (!*((_QWORD *)&v275 + 1))
  {
    *(_QWORD *)&v277[8] = v275;
    *(_QWORD *)&v277[16] = 0;
    if ((_QWORD)v275)
      v132 = v275 + 16;
    else
      v132 = 0;
    goto LABEL_158;
  }
  v129 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
  do
    v130 = __ldxr(v129);
  while (__stxr(v130 + 1, v129));
  v131 = *((_QWORD *)&v275 + 1);
  *(_QWORD *)&v277[8] = v127;
  *(_QWORD *)&v277[16] = v128;
  if ((_QWORD)v275)
    v132 = v275 + 16;
  else
    v132 = 0;
  if (!*((_QWORD *)&v275 + 1))
  {
    v127 = v275;
LABEL_158:
    v135 = 0;
    v278 = &off_24C9E5578;
    v279 = v132;
    goto LABEL_159;
  }
  v133 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
  do
    v134 = __ldxr(v133);
  while (__stxr(v134 + 1, v133));
  v135 = *((_QWORD *)&v275 + 1);
  v127 = v275;
  v278 = &off_24C9E5578;
  *(_QWORD *)&v279 = v132;
  *((_QWORD *)&v279 + 1) = v131;
  if (*((_QWORD *)&v275 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
LABEL_159:
  if (v127)
    v138 = v127 + 24;
  else
    v138 = 0;
  v280 = &off_24C9B2310;
  *(_QWORD *)&v281 = v138;
  *((_QWORD *)&v281 + 1) = v135;
  v139 = operator new();
  *(_QWORD *)v139 = &off_24C9E5510;
  *(_OWORD *)(v139 + 8) = *(_OWORD *)v272;
  *(_QWORD *)(v139 + 24) = *(_QWORD *)&v272[16];
  memset(v272, 0, sizeof(v272));
  *(_OWORD *)(v139 + 32) = *(_OWORD *)v273;
  *(_QWORD *)(v139 + 48) = *(_QWORD *)&v273[16];
  memset(v273, 0, sizeof(v273));
  *(_OWORD *)(v139 + 56) = v274;
  v274 = 0uLL;
  *(_OWORD *)(v139 + 72) = v275;
  v275 = 0uLL;
  *(_QWORD *)(v139 + 88) = &off_24C9E5540;
  *(_OWORD *)(v139 + 96) = *(_OWORD *)v277;
  v140 = *(_QWORD *)&v277[16];
  *(_QWORD *)&v277[8] = 0;
  *(_QWORD *)&v277[16] = 0;
  *(_QWORD *)(v139 + 112) = v140;
  *(_QWORD *)(v139 + 120) = &off_24C9E5578;
  *(_OWORD *)(v139 + 128) = v279;
  v279 = 0uLL;
  *(_QWORD *)v277 = 0;
  *(_QWORD *)(v139 + 144) = &off_24C9B2310;
  *(_OWORD *)(v139 + 152) = v281;
  v281 = 0uLL;
  *((_QWORD *)v107 + 12) = v139;
  sub_20ED6BB84((uint64_t)&v271);
  do
    v141 = __ldaxr(v110);
  while (__stlxr(v141 - 1, v110));
  if (!v141)
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
  }
  *(_QWORD *)(v266 + 48) = v107 + 24;
  *(_QWORD *)(v266 + 56) = v107;
  v142 = (char *)operator new(0x68uLL);
  *((_QWORD *)v142 + 1) = 0;
  *((_QWORD *)v142 + 2) = 0;
  *(_QWORD *)v142 = &off_24C9E58A8;
  *((_QWORD *)v142 + 3) = &off_24C9E58F8;
  strcpy(v142 + 32, "JasperErrorFwd");
  *(_QWORD *)(v142 + 47) = 0;
  v142[55] = 14;
  *(_OWORD *)(v142 + 56) = 0u;
  *(_OWORD *)(v142 + 72) = 0u;
  *((_QWORD *)v142 + 11) = 0;
  v143 = (std::__shared_weak_count *)operator new(0x58uLL);
  v143->__shared_owners_ = 0;
  v144 = (unint64_t *)&v143->__shared_owners_;
  v143->__shared_weak_owners_ = 0;
  v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v143[1]);
  do
    v145 = __ldxr(v144);
  while (__stxr(v145 + 1, v144));
  v146 = operator new();
  *(_BYTE *)(v146 + 8) = 1;
  *(_QWORD *)(v146 + 48) = 0;
  *(_QWORD *)(v146 + 32) = 0;
  *(_QWORD *)(v146 + 40) = 0;
  *(_QWORD *)v146 = &off_24C9E5990;
  *(_QWORD *)(v146 + 16) = &unk_24C9E5A08;
  *(_QWORD *)(v146 + 24) = &unk_24C9E5A48;
  *(_QWORD *)(v146 + 56) = 0;
  *(_QWORD *)(v146 + 64) = 0;
  *(_QWORD *)(v146 + 72) = v143 + 1;
  *(_QWORD *)(v146 + 80) = v143;
  v147 = (_QWORD *)operator new();
  *v147 = &off_24C9E5B30;
  *(_QWORD *)(v146 + 88) = v147;
  *(_QWORD *)(v146 + 96) = v146 + 96;
  *(_QWORD *)(v146 + 104) = v146 + 96;
  *(_QWORD *)(v146 + 112) = 0;
  *(_QWORD *)(v146 + 120) = v146 + 120;
  *(_QWORD *)(v146 + 128) = v146 + 120;
  *(_QWORD *)(v146 + 136) = 0;
  v148 = (std::__shared_weak_count *)operator new();
  v148->__shared_owners_ = 0;
  v149 = (unint64_t *)&v148->__shared_owners_;
  v148->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5B80;
  v148->__shared_weak_owners_ = 0;
  v148[1].__vftable = (std::__shared_weak_count_vtbl *)v146;
  v150 = *(std::__shared_weak_count **)(v146 + 40);
  if (v150)
  {
    if (v150->__shared_owners_ != -1)
      goto LABEL_181;
    do
      v151 = __ldxr(v149);
    while (__stxr(v151 + 1, v149));
    v152 = (unint64_t *)&v148->__shared_weak_owners_;
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    *(_QWORD *)(v146 + 32) = v146;
    *(_QWORD *)(v146 + 40) = v148;
    std::__shared_weak_count::__release_weak(v150);
  }
  else
  {
    do
      v154 = __ldxr(v149);
    while (__stxr(v154 + 1, v149));
    v155 = (unint64_t *)&v148->__shared_weak_owners_;
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
    *(_QWORD *)(v146 + 32) = v146;
    *(_QWORD *)(v146 + 40) = v148;
  }
  do
    v157 = __ldaxr(v149);
  while (__stlxr(v157 - 1, v149));
  if (!v157)
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
  }
LABEL_181:
  v271 = &off_24C9E5928;
  strcpy(v272, "channel");
  *(_QWORD *)&v272[8] = v288;
  *(_QWORD *)&v272[15] = *(_QWORD *)((char *)&v288 + 7);
  v272[23] = 7;
  *(_QWORD *)&v288 = 0;
  *(_QWORD *)((char *)&v288 + 7) = 0;
  *(_QWORD *)v273 = 0x7974706D45;
  *(_QWORD *)&v273[8] = v287;
  *(_QWORD *)&v273[15] = *(_QWORD *)((char *)&v287 + 7);
  v273[23] = 5;
  *(_QWORD *)&v287 = 0;
  *(_QWORD *)((char *)&v287 + 7) = 0;
  v274 = 0uLL;
  v158 = (unint64_t *)&v148->__shared_weak_owners_;
  *(_QWORD *)&v275 = v146;
  *((_QWORD *)&v275 + 1) = v148;
  do
    v159 = __ldxr(v158);
  while (__stxr(v159 + 1, v158));
  v276 = &off_24C9E5958;
  v160 = (_QWORD *)operator new();
  *v160 = &off_24C9E5BD0;
  v160[1] = v146;
  v160[2] = v148;
  *(_QWORD *)v277 = v160;
  v162 = *((_QWORD *)&v275 + 1);
  v161 = v275;
  if (!*((_QWORD *)&v275 + 1))
  {
    *(_QWORD *)&v277[8] = v275;
    *(_QWORD *)&v277[16] = 0;
    if ((_QWORD)v275)
      v166 = v275 + 16;
    else
      v166 = 0;
    goto LABEL_200;
  }
  v163 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
  do
    v164 = __ldxr(v163);
  while (__stxr(v164 + 1, v163));
  v165 = *((_QWORD *)&v275 + 1);
  *(_QWORD *)&v277[8] = v161;
  *(_QWORD *)&v277[16] = v162;
  if ((_QWORD)v275)
    v166 = v275 + 16;
  else
    v166 = 0;
  if (!*((_QWORD *)&v275 + 1))
  {
    v161 = v275;
LABEL_200:
    v169 = 0;
    v278 = &off_24C9E5578;
    v279 = v166;
    goto LABEL_201;
  }
  v167 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
  do
    v168 = __ldxr(v167);
  while (__stxr(v168 + 1, v167));
  v169 = *((_QWORD *)&v275 + 1);
  v161 = v275;
  v278 = &off_24C9E5578;
  *(_QWORD *)&v279 = v166;
  *((_QWORD *)&v279 + 1) = v165;
  if (*((_QWORD *)&v275 + 1))
  {
    v170 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
    do
      v171 = __ldxr(v170);
    while (__stxr(v171 + 1, v170));
  }
LABEL_201:
  if (v161)
    v172 = v161 + 24;
  else
    v172 = 0;
  v280 = &off_24C9B2310;
  *(_QWORD *)&v281 = v172;
  *((_QWORD *)&v281 + 1) = v169;
  v173 = operator new();
  *(_QWORD *)v173 = &off_24C9E5928;
  *(_OWORD *)(v173 + 8) = *(_OWORD *)v272;
  *(_QWORD *)(v173 + 24) = *(_QWORD *)&v272[16];
  memset(v272, 0, sizeof(v272));
  *(_OWORD *)(v173 + 32) = *(_OWORD *)v273;
  *(_QWORD *)(v173 + 48) = *(_QWORD *)&v273[16];
  memset(v273, 0, sizeof(v273));
  *(_OWORD *)(v173 + 56) = v274;
  v274 = 0uLL;
  *(_OWORD *)(v173 + 72) = v275;
  v275 = 0uLL;
  *(_QWORD *)(v173 + 88) = &off_24C9E5958;
  *(_OWORD *)(v173 + 96) = *(_OWORD *)v277;
  v174 = *(_QWORD *)&v277[16];
  *(_QWORD *)&v277[8] = 0;
  *(_QWORD *)&v277[16] = 0;
  *(_QWORD *)(v173 + 112) = v174;
  *(_QWORD *)(v173 + 120) = &off_24C9E5578;
  *(_OWORD *)(v173 + 128) = v279;
  v279 = 0uLL;
  *(_QWORD *)v277 = 0;
  *(_QWORD *)(v173 + 144) = &off_24C9B2310;
  *(_OWORD *)(v173 + 152) = v281;
  v281 = 0uLL;
  *((_QWORD *)v142 + 12) = v173;
  sub_20ED6D34C((uint64_t)&v271);
  do
    v175 = __ldaxr(v144);
  while (__stlxr(v175 - 1, v144));
  if (!v175)
  {
    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
    std::__shared_weak_count::__release_weak(v143);
  }
  *(_QWORD *)(v266 + 64) = v142 + 24;
  *(_QWORD *)(v266 + 72) = v142;
  v176 = (char *)operator new(0x68uLL);
  *((_QWORD *)v176 + 1) = 0;
  *((_QWORD *)v176 + 2) = 0;
  *(_QWORD *)v176 = &off_24C9E5C48;
  *((_QWORD *)v176 + 3) = &off_24C9E5C98;
  strcpy(v176 + 32, "FrameErrorFwd");
  v176[55] = 13;
  *(_OWORD *)(v176 + 56) = 0u;
  *(_OWORD *)(v176 + 72) = 0u;
  *((_QWORD *)v176 + 11) = 0;
  v177 = (std::__shared_weak_count *)operator new(0x58uLL);
  v177->__shared_owners_ = 0;
  v178 = (unint64_t *)&v177->__shared_owners_;
  v177->__shared_weak_owners_ = 0;
  v177->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v177[1]);
  do
    v179 = __ldxr(v178);
  while (__stxr(v179 + 1, v178));
  v180 = operator new();
  *(_BYTE *)(v180 + 8) = 1;
  *(_QWORD *)(v180 + 48) = 0;
  *(_QWORD *)(v180 + 32) = 0;
  *(_QWORD *)(v180 + 40) = 0;
  *(_QWORD *)v180 = &off_24C9E5D30;
  *(_QWORD *)(v180 + 16) = &unk_24C9E5DA8;
  *(_QWORD *)(v180 + 24) = &unk_24C9E5DE8;
  *(_QWORD *)(v180 + 56) = 0;
  *(_QWORD *)(v180 + 64) = 0;
  *(_QWORD *)(v180 + 72) = v177 + 1;
  *(_QWORD *)(v180 + 80) = v177;
  v181 = (_QWORD *)operator new();
  *v181 = &off_24C9E5ED0;
  *(_QWORD *)(v180 + 88) = v181;
  *(_QWORD *)(v180 + 96) = v180 + 96;
  *(_QWORD *)(v180 + 104) = v180 + 96;
  *(_QWORD *)(v180 + 112) = 0;
  *(_QWORD *)(v180 + 120) = v180 + 120;
  *(_QWORD *)(v180 + 128) = v180 + 120;
  *(_QWORD *)(v180 + 136) = 0;
  v182 = (std::__shared_weak_count *)operator new();
  v182->__shared_owners_ = 0;
  v183 = (unint64_t *)&v182->__shared_owners_;
  v182->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5F20;
  v182->__shared_weak_owners_ = 0;
  v182[1].__vftable = (std::__shared_weak_count_vtbl *)v180;
  v184 = *(std::__shared_weak_count **)(v180 + 40);
  if (v184)
  {
    if (v184->__shared_owners_ != -1)
      goto LABEL_223;
    do
      v185 = __ldxr(v183);
    while (__stxr(v185 + 1, v183));
    v186 = (unint64_t *)&v182->__shared_weak_owners_;
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 1, v186));
    *(_QWORD *)(v180 + 32) = v180;
    *(_QWORD *)(v180 + 40) = v182;
    std::__shared_weak_count::__release_weak(v184);
  }
  else
  {
    do
      v188 = __ldxr(v183);
    while (__stxr(v188 + 1, v183));
    v189 = (unint64_t *)&v182->__shared_weak_owners_;
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 1, v189));
    *(_QWORD *)(v180 + 32) = v180;
    *(_QWORD *)(v180 + 40) = v182;
  }
  do
    v191 = __ldaxr(v183);
  while (__stlxr(v191 - 1, v183));
  if (!v191)
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
  }
LABEL_223:
  v271 = &off_24C9E5CC8;
  strcpy(v272, "channel");
  *(_QWORD *)&v272[8] = v288;
  *(_QWORD *)&v272[15] = *(_QWORD *)((char *)&v288 + 7);
  v272[23] = 7;
  *(_QWORD *)&v288 = 0;
  *(_QWORD *)((char *)&v288 + 7) = 0;
  *(_QWORD *)v273 = 0x7974706D45;
  *(_QWORD *)&v273[8] = v287;
  *(_QWORD *)&v273[15] = *(_QWORD *)((char *)&v287 + 7);
  v273[23] = 5;
  *(_QWORD *)&v287 = 0;
  *(_QWORD *)((char *)&v287 + 7) = 0;
  v274 = 0uLL;
  v192 = (unint64_t *)&v182->__shared_weak_owners_;
  *(_QWORD *)&v275 = v180;
  *((_QWORD *)&v275 + 1) = v182;
  do
    v193 = __ldxr(v192);
  while (__stxr(v193 + 1, v192));
  v276 = &off_24C9E5CF8;
  v194 = (_QWORD *)operator new();
  *v194 = &off_24C9E5F70;
  v194[1] = v180;
  v194[2] = v182;
  *(_QWORD *)v277 = v194;
  v196 = *((_QWORD *)&v275 + 1);
  v195 = v275;
  if (!*((_QWORD *)&v275 + 1))
  {
    *(_QWORD *)&v277[8] = v275;
    *(_QWORD *)&v277[16] = 0;
    if ((_QWORD)v275)
      v200 = v275 + 16;
    else
      v200 = 0;
    goto LABEL_242;
  }
  v197 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
  do
    v198 = __ldxr(v197);
  while (__stxr(v198 + 1, v197));
  v199 = *((_QWORD *)&v275 + 1);
  *(_QWORD *)&v277[8] = v195;
  *(_QWORD *)&v277[16] = v196;
  if ((_QWORD)v275)
    v200 = v275 + 16;
  else
    v200 = 0;
  if (!*((_QWORD *)&v275 + 1))
  {
    v195 = v275;
LABEL_242:
    v203 = 0;
    v278 = &off_24C9E5578;
    v279 = v200;
    goto LABEL_243;
  }
  v201 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
  do
    v202 = __ldxr(v201);
  while (__stxr(v202 + 1, v201));
  v203 = *((_QWORD *)&v275 + 1);
  v195 = v275;
  v278 = &off_24C9E5578;
  *(_QWORD *)&v279 = v200;
  *((_QWORD *)&v279 + 1) = v199;
  if (*((_QWORD *)&v275 + 1))
  {
    v204 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 16);
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
  }
LABEL_243:
  if (v195)
    v206 = v195 + 24;
  else
    v206 = 0;
  v280 = &off_24C9B2310;
  *(_QWORD *)&v281 = v206;
  *((_QWORD *)&v281 + 1) = v203;
  v207 = operator new();
  *(_QWORD *)v207 = &off_24C9E5CC8;
  *(_OWORD *)(v207 + 8) = *(_OWORD *)v272;
  *(_QWORD *)(v207 + 24) = *(_QWORD *)&v272[16];
  memset(v272, 0, sizeof(v272));
  *(_OWORD *)(v207 + 32) = *(_OWORD *)v273;
  *(_QWORD *)(v207 + 48) = *(_QWORD *)&v273[16];
  memset(v273, 0, sizeof(v273));
  *(_OWORD *)(v207 + 56) = v274;
  v274 = 0uLL;
  *(_OWORD *)(v207 + 72) = v275;
  v275 = 0uLL;
  *(_QWORD *)(v207 + 88) = &off_24C9E5CF8;
  *(_OWORD *)(v207 + 96) = *(_OWORD *)v277;
  v208 = *(_QWORD *)&v277[16];
  *(_QWORD *)&v277[8] = 0;
  *(_QWORD *)&v277[16] = 0;
  *(_QWORD *)(v207 + 112) = v208;
  *(_QWORD *)(v207 + 120) = &off_24C9E5578;
  *(_OWORD *)(v207 + 128) = v279;
  v279 = 0uLL;
  *(_QWORD *)v277 = 0;
  *(_QWORD *)(v207 + 144) = &off_24C9B2310;
  *(_OWORD *)(v207 + 152) = v281;
  v281 = 0uLL;
  *((_QWORD *)v176 + 12) = v207;
  sub_20ED6EB30((uint64_t)&v271);
  do
    v209 = __ldaxr(v178);
  while (__stlxr(v209 - 1, v178));
  if (!v209)
  {
    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
    std::__shared_weak_count::__release_weak(v177);
  }
  *(_QWORD *)(v266 + 80) = v176 + 24;
  *(_QWORD *)(v266 + 88) = v176;
  v210 = (std::__shared_weak_count *)v265[1];
  v269 = *v265;
  v270 = v210;
  if (v210)
  {
    v211 = (unint64_t *)&v210->__shared_owners_;
    do
      v212 = __ldxr(v211);
    while (__stxr(v212 + 1, v211));
  }
  v213 = operator new();
  v214 = v213;
  v215 = *(_QWORD *)(v266 + 8);
  v271 = *(uint64_t (***)())v266;
  *(_QWORD *)v272 = v215;
  if (v215)
  {
    v216 = (unint64_t *)(v215 + 8);
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
  }
  v218 = *(_QWORD *)(v266 + 24);
  *(_QWORD *)&v288 = *(_QWORD *)(v266 + 16);
  *((_QWORD *)&v288 + 1) = v218;
  if (v218)
  {
    v219 = (unint64_t *)(v218 + 8);
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 1, v219));
  }
  v221 = *(_QWORD *)(v266 + 40);
  *(_QWORD *)&v287 = *(_QWORD *)(v266 + 32);
  *((_QWORD *)&v287 + 1) = v221;
  if (v221)
  {
    v222 = (unint64_t *)(v221 + 8);
    do
      v223 = __ldxr(v222);
    while (__stxr(v223 + 1, v222));
  }
  v224 = *(std::__shared_weak_count **)(v266 + 56);
  v285 = *(_QWORD *)(v266 + 48);
  v286 = v224;
  if (v224)
  {
    v225 = (unint64_t *)&v224->__shared_owners_;
    do
      v226 = __ldxr(v225);
    while (__stxr(v226 + 1, v225));
  }
  v227 = *(std::__shared_weak_count **)(v266 + 72);
  v283 = *(_QWORD *)(v266 + 64);
  v284 = v227;
  if (v227)
  {
    v228 = (unint64_t *)&v227->__shared_owners_;
    do
      v229 = __ldxr(v228);
    while (__stxr(v229 + 1, v228));
  }
  v230 = *(std::__shared_weak_count **)(v266 + 88);
  v282[0] = *(_QWORD *)(v266 + 80);
  v282[1] = v230;
  if (v230)
  {
    v231 = (unint64_t *)&v230->__shared_owners_;
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
  }
  sub_20ED5EABC(v213, a2, &v271, &v288, &v287, &v285, &v283, v282);
  if (v230)
  {
    v233 = (unint64_t *)&v230->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
  v235 = v284;
  if (v284)
  {
    v236 = (unint64_t *)&v284->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v238 = v286;
  if (v286)
  {
    v239 = (unint64_t *)&v286->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
  if (*((_QWORD *)&v287 + 1))
  {
    v242 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1))
  {
    v245 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  v247 = *(std::__shared_weak_count **)v272;
  if (*(_QWORD *)v272)
  {
    v248 = (unint64_t *)(*(_QWORD *)v272 + 8);
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v267 = v214;
  v250 = (std::__shared_weak_count *)operator new();
  v250->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5FE8;
  v250->__shared_owners_ = 0;
  v250->__shared_weak_owners_ = 0;
  v250[1].__vftable = (std::__shared_weak_count_vtbl *)v214;
  v268 = v250;
  *(_QWORD *)(v266 + 96) = &off_24C9E6038;
  if (*(char *)(v214 + 415) < 0)
  {
    sub_20E860C04((_BYTE *)(v266 + 104), *(void **)(v214 + 392), *(_QWORD *)(v214 + 400));
  }
  else
  {
    *(_OWORD *)(v266 + 104) = *(_OWORD *)(v214 + 392);
    *(_QWORD *)(v266 + 120) = *(_QWORD *)(v214 + 408);
  }
  if (*(char *)(v214 + 439) < 0)
  {
    sub_20E860C04((_BYTE *)(v266 + 128), *(void **)(v214 + 416), *(_QWORD *)(v214 + 424));
  }
  else
  {
    *(_OWORD *)(v266 + 128) = *(_OWORD *)(v214 + 416);
    *(_QWORD *)(v266 + 144) = *(_QWORD *)(v214 + 432);
  }
  v251 = v269;
  v252 = v270;
  *(_QWORD *)(v266 + 152) = v269;
  *(_QWORD *)(v266 + 160) = v252;
  v269 = 0;
  v270 = 0;
  v253 = v266 + 168;
  v271 = v251;
  *(_QWORD *)v272 = v252;
  if (v252)
  {
    v254 = (unint64_t *)&v252->__shared_owners_;
    do
      v255 = __ldxr(v254);
    while (__stxr(v255 + 1, v254));
  }
  sub_20ED6EEFC((uint64_t *)(v266 + 168), (uint64_t)&v271, &v267);
  if (v252)
  {
    v256 = (unint64_t *)&v252->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v258 = v268;
  if (v268)
  {
    v259 = (unint64_t *)&v268->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  v261 = v270;
  if (v270)
  {
    v262 = (unint64_t *)&v270->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
      if (*(_BYTE *)(a2 + 3360))
        return v266;
      goto LABEL_325;
    }
  }
  if (!*(_BYTE *)(a2 + 3360))
  {
LABEL_325:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v253 + 1104) + 32))(*(_QWORD *)(*(_QWORD *)v253
                                                                                                + 1104));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v253 + 936) + 32))(*(_QWORD *)(*(_QWORD *)v253 + 936));
  }
  return v266;
}

void sub_20ED654B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void **v34;

  if (*(char *)(a17 + 127) < 0)
    operator delete(*v34);
  sub_20E86665C((uint64_t)&a18);
  sub_20E86665C((uint64_t)&a20);
  sub_20E86665C(a9);
  sub_20E86665C(a11);
  sub_20E86665C(a12);
  sub_20E86665C(a13);
  sub_20E86665C(a14);
  sub_20E86665C(a17);
  _Unwind_Resume(a1);
}

void sub_20ED65B1C()
{
  JUMPOUT(0x20ED65AFCLL);
}

void sub_20ED65B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;

  sub_20ED6A0F8((uint64_t)&a22);
  do
    v38 = __ldaxr(v36);
  while (__stlxr(v38 - 1, v36));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  v39 = *(std::__shared_weak_count **)(v34 + 88);
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (*(char *)(v34 + 79) < 0)
    operator delete(*a12);
  if (*(char *)(v34 + 55) < 0)
    operator delete(*(void **)(v34 + 32));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
  operator delete(v42);
  sub_20E86665C(a14);
  sub_20E86665C(a17);
  _Unwind_Resume(a1);
}

void sub_20ED65CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_20E86665C(a14);
  sub_20E86665C(a17);
  _Unwind_Resume(a1);
}

void sub_20ED65D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;

  sub_20ED68C1C((uint64_t)&a22);
  do
    v38 = __ldaxr(v36);
  while (__stlxr(v38 - 1, v36));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  v39 = *(std::__shared_weak_count **)(v34 + 88);
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (*(char *)(v34 + 79) < 0)
    operator delete(*a13);
  if (*(char *)(v34 + 55) < 0)
    operator delete(*(void **)(v34 + 32));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
  operator delete(v42);
  sub_20E86665C(a17);
  _Unwind_Resume(a1);
}

void sub_20ED65EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_20E86665C(a17);
  _Unwind_Resume(a1);
}

void sub_20ED65EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;
  void *v43;

  sub_20ED67688((uint64_t)&a22);
  do
    v38 = __ldaxr(v36);
  while (__stlxr(v38 - 1, v36));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  v39 = *(std::__shared_weak_count **)(v34 + 88);
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (*(char *)(v34 + 79) < 0)
  {
    operator delete(*a14);
    if ((*(char *)(v34 + 55) & 0x80000000) == 0)
    {
LABEL_12:
      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
      operator delete(v42);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v34 + 55) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(*(void **)(v34 + 32));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
  operator delete(v43);
  _Unwind_Resume(a1);
}

void sub_20ED660D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4B18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED660E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4B18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED66118(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20ED6612C(uint64_t a1)
{
  sub_20ED6786C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED66154(uint64_t a1)
{
  sub_20ED67688(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED66178(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E4BC8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED661B0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E4BC8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED661F8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B6AE0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B6AE0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED662CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED662FC(uint64_t a1)
{
  sub_20ED66A5C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED66320(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED66BB8(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED673B4(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED663DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED673B4(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED66404(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED66BB8(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED673B4(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED6659C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED664C8);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED66610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED66670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED673B4(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED66694(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED66718(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B6AE0;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED667C8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED667DC(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED6686C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED66880(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED674DC(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED668C4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED668D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED6690C(uint64_t a1)
{
  return sub_20ED66A5C(a1 - 16);
}

void sub_20ED66914(uint64_t a1)
{
  sub_20ED66A5C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6693C(uint64_t a1, uint64_t a2)
{
  sub_20ED66718(a1 - 16, a2);
}

void sub_20ED66944(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED674DC(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED66988(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6699C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED669D0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED669D8(uint64_t a1)
{
  return sub_20ED66A5C(a1 - 24);
}

void sub_20ED669E0(uint64_t a1)
{
  sub_20ED66A5C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED66A08(uint64_t a1)
{
  sub_20ED667DC(a1 - 24);
}

uint64_t sub_20ED66A10(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED66A1C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED66A30@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_20E9BFAE0((uint64_t)a2, v4, v3, 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3));
}

uint64_t sub_20ED66A5C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E4C00;
  *(_QWORD *)(a1 + 16) = &unk_24C9E4C78;
  *(_QWORD *)(a1 + 24) = &unk_24C9E4CB8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED66BB8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  char *v60;
  size_t v61;
  _QWORD *v62;
  uint64_t v63;
  std::mutex *v64;
  _QWORD *v65;
  _QWORD *v66;
  std::exception_ptr v67;
  char v68;
  void *__p;
  _BYTE *v70;
  uint64_t v71;
  char v72;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    v15 = (std::mutex *)(v14 + 24);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v67.__ptr_ = 0, v16 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v67), v16))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v17 = __p;
    v71 = v14 + 144;
    v72 = 0;
    v65 = v70;
    v18 = v70 - (_BYTE *)__p;
    if (v70 != __p)
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 3);
      v64 = (std::mutex *)(v14 + 24);
      if (v19 >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v62 = operator new(v18);
      v63 = v14;
      *(_QWORD *)(v14 + 160) = &v62[3 * v19];
      v20 = v14 + 160;
      *(_QWORD *)(v20 - 16) = v62;
      *(_QWORD *)(v20 - 8) = v62;
      v21 = v62;
      do
      {
        *v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
        v23 = *v17;
        v22 = v17[1];
        v67.__ptr_ = v21;
        v68 = 0;
        v24 = v22 - v23;
        if (v22 != v23)
        {
          v25 = 0xF47E8FD1FA3F47E9 * (v24 >> 3);
          if (v25 >= 0x5C0B81702E05C1)
            sub_20E867F44();
          v66 = v17;
          v26 = (char *)operator new(v24);
          v27 = 0;
          *v21 = v26;
          v21[1] = v26;
          v21[2] = &v26[712 * v25];
          v28 = v26;
          do
          {
            *(_OWORD *)v28 = *(_OWORD *)v23;
            v30 = *(_OWORD *)(v23 + 16);
            v31 = *(_OWORD *)(v23 + 32);
            v32 = *(_OWORD *)(v23 + 64);
            *((_OWORD *)v28 + 3) = *(_OWORD *)(v23 + 48);
            *((_OWORD *)v28 + 4) = v32;
            *((_OWORD *)v28 + 1) = v30;
            *((_OWORD *)v28 + 2) = v31;
            v33 = *(_OWORD *)(v23 + 80);
            v34 = *(_OWORD *)(v23 + 96);
            v35 = *(_OWORD *)(v23 + 128);
            *((_OWORD *)v28 + 7) = *(_OWORD *)(v23 + 112);
            *((_OWORD *)v28 + 8) = v35;
            *((_OWORD *)v28 + 5) = v33;
            *((_OWORD *)v28 + 6) = v34;
            v36 = *(_OWORD *)(v23 + 144);
            v37 = *(_OWORD *)(v23 + 160);
            v38 = *(_OWORD *)(v23 + 176);
            v28[192] = *(_BYTE *)(v23 + 192);
            *((_OWORD *)v28 + 10) = v37;
            *((_OWORD *)v28 + 11) = v38;
            *((_OWORD *)v28 + 9) = v36;
            *((_QWORD *)v28 + 25) = *(_QWORD *)(v23 + 200);
            v39 = *(_QWORD *)(v23 + 208);
            *((_QWORD *)v28 + 26) = v39;
            if (v39)
            {
              v40 = (unint64_t *)(v39 + 8);
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            *((_QWORD *)v28 + 27) = *(_QWORD *)(v23 + 216);
            v42 = *(_QWORD *)(v23 + 224);
            *((_QWORD *)v28 + 28) = v42;
            if (v42)
            {
              v43 = (unint64_t *)(v42 + 8);
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 1, v43));
            }
            v28[232] = 0;
            v28[248] = 0;
            if (*(_BYTE *)(v23 + 248))
            {
              *((_QWORD *)v28 + 29) = *(_QWORD *)(v23 + 232);
              v45 = *(_QWORD *)(v23 + 240);
              *((_QWORD *)v28 + 30) = v45;
              if (v45)
              {
                v46 = (unint64_t *)(v45 + 8);
                do
                  v47 = __ldxr(v46);
                while (__stxr(v47 + 1, v46));
              }
              v28[248] = 1;
            }
            v28[256] = 0;
            v28[656] = 0;
            if (*(_BYTE *)(v23 + 656))
            {
              *((_OWORD *)v28 + 16) = *(_OWORD *)(v23 + 256);
              v48 = *(_OWORD *)(v23 + 272);
              v49 = *(_OWORD *)(v23 + 288);
              v50 = *(_OWORD *)(v23 + 304);
              *(_OWORD *)(v28 + 313) = *(_OWORD *)(v23 + 313);
              *((_OWORD *)v28 + 18) = v49;
              *((_OWORD *)v28 + 19) = v50;
              *((_OWORD *)v28 + 17) = v48;
              *((_QWORD *)v28 + 42) = *(_QWORD *)(v23 + 336);
              v51 = *(_QWORD *)(v23 + 344);
              *((_QWORD *)v28 + 43) = v51;
              if (v51)
              {
                v52 = (unint64_t *)(v51 + 8);
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              *((_QWORD *)v28 + 44) = *(_QWORD *)(v23 + 352);
              v54 = *(_QWORD *)(v23 + 360);
              *((_QWORD *)v28 + 45) = v54;
              if (v54)
              {
                v55 = (unint64_t *)(v54 + 8);
                do
                  v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
              }
              memcpy(v28 + 368, (const void *)(v23 + 368), 0x120uLL);
              v28[656] = 1;
            }
            v28[664] = 0;
            v28[688] = 0;
            if (*(_BYTE *)(v23 + 688))
            {
              *((_QWORD *)v28 + 83) = 0;
              *((_QWORD *)v28 + 84) = 0;
              *((_QWORD *)v28 + 85) = 0;
              v57 = *(_BYTE **)(v23 + 664);
              v58 = *(_BYTE **)(v23 + 672);
              v59 = v58 - v57;
              if (v58 != v57)
              {
                if (v59 < 0)
                  sub_20E867F44();
                v60 = (char *)operator new(v58 - v57);
                *((_QWORD *)v28 + 83) = v60;
                *((_QWORD *)v28 + 84) = v60;
                *((_QWORD *)v28 + 85) = &v60[16 * (v59 >> 4)];
                v61 = v59 & 0xFFFFFFFFFFFFFFF0;
                memcpy(v60, v57, v61);
                *((_QWORD *)v28 + 84) = &v60[v61];
              }
              v28[688] = 1;
            }
            v29 = *(_QWORD *)(v23 + 696);
            *((_DWORD *)v28 + 176) = *(_DWORD *)(v23 + 704);
            *((_QWORD *)v28 + 87) = v29;
            v23 += 712;
            v28 += 712;
            v27 += 712;
          }
          while (v23 != v22);
          v17 = v66;
          v21[1] = v28;
        }
        v17 += 3;
        v21 += 3;
      }
      while (v17 != v65);
      v14 = v63;
      v15 = v64;
      *(_QWORD *)(v63 + 152) = v21;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock(v15);
  }
  if (__p)
  {
    sub_20E9AE494((uint64_t)&__p, (void **)__p);
    operator delete(__p);
  }
}

void sub_20ED67184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,int a21,__int16 a22,char a23,unsigned __int8 a24,void **a25)
{
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  sub_20E9BFC24((void ***)(v25 - 96));
  std::mutex::unlock(a13);
  sub_20ED6737C(&a25);
  if (a2 == 1)
  {
    v26 = (uint64_t *)__cxa_begin_catch(a1);
    v27 = *v26;
    *(_QWORD *)(v25 - 96) = *(_QWORD *)(*(_QWORD *)(*v26 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a18 = (*(uint64_t (**)(void))(v27 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)(v25 - 96), "\n", "message: ", (const char *)&a18, "\n");
    if ((a24 & 0x80u) == 0)
      v28 = (uint64_t *)&a19;
    else
      v28 = a19;
    if ((a24 & 0x80u) == 0)
      v29 = a24;
    else
      v29 = a20;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v28, v29, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED6734C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED6736CLL);
}

void ***sub_20ED6737C(void ***a1)
{
  if (*a1)
  {
    sub_20E9AE494((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t *sub_20ED673B4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED674A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED673FCLL);
}

char *sub_20ED674DC(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED675B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED675DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED67600(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED67618(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio17feature_detectio"
                     "n24NodeCameraSystemFeaturesES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio17featu"
                                "re_detection24NodeCameraSystemFeaturesES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio17feature_detection24NodeCameraSystemFeaturesES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio17feature_detection24NodeCameraSystemFeaturesES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED67688(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E4B98;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E4BC8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B6AE0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED6786C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E4B68;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20ED67688(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20ED67688(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED679A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED679B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E4E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED679E4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20ED679F8(uint64_t a1)
{
  sub_20ED68E00(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED67A20(uint64_t a1)
{
  sub_20ED68C1C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED67A44(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E4EF0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED67A7C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E4EF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED67AC4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC618;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC618;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED67B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED67BC8(uint64_t a1)
{
  sub_20ED68304(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED67BEC(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED68460(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED68948(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED67CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED68948(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED67CD0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED68460(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED68948(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED67E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED67D94);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED67EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED67F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED68948(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED67F60(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED67FE4(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC618;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED68094(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED680A8(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED68138(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6814C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED68A70(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED68190(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED681A4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED681D8(uint64_t a1)
{
  return sub_20ED68304(a1 - 16);
}

void sub_20ED681E0(uint64_t a1)
{
  sub_20ED68304(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED68208(uint64_t a1, uint64_t a2)
{
  sub_20ED67FE4(a1 - 16, a2);
}

void sub_20ED68210(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED68A70(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED68254(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED68268(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED6829C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED682A4(uint64_t a1)
{
  return sub_20ED68304(a1 - 24);
}

void sub_20ED682AC(uint64_t a1)
{
  sub_20ED68304(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED682D4(uint64_t a1)
{
  sub_20ED680A8(a1 - 24);
}

uint64_t sub_20ED682DC(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED682E8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED682FC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20ECCC2F0(a2, a1);
}

uint64_t sub_20ED68304(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E4F28;
  *(_QWORD *)(a1 + 16) = &unk_24C9E4FA0;
  *(_QWORD *)(a1 + 24) = &unk_24C9E4FE0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED68460(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::exception_ptr v29;
  void *__p;
  char *v31;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v29.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v29), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (char *)__p;
    v17 = v31;
    v18 = v31 - (_BYTE *)__p;
    if (v31 != __p)
    {
      if (v18 < 0)
        sub_20E867F44();
      v19 = operator new(v31 - (_BYTE *)__p);
      *(_QWORD *)(v14 + 144) = v19;
      *(_QWORD *)(v14 + 152) = v19;
      *(_QWORD *)(v14 + 160) = &v19[2 * (v18 >> 4)];
      do
      {
        *v19 = *(_QWORD *)v16;
        v20 = *((_QWORD *)v16 + 1);
        v19[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v16 += 16;
        v19 += 2;
      }
      while (v16 != v17);
      *(_QWORD *)(v14 + 152) = v19;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v23 = (char *)__p;
  if (__p)
  {
    v24 = v31;
    v25 = __p;
    if (v31 != __p)
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 16;
      }
      while (v24 != v23);
      v25 = __p;
    }
    v31 = v23;
    operator delete(v25);
  }
}

void sub_20ED687B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, int a15, __int16 a16, char a17, unsigned __int8 a18, void *a19)
{
  std::mutex *v19;
  void **v20;
  uint64_t v21;
  void **v23;
  char *v25;
  char *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void **v35;

  v23 = v20;
  v35 = v23;
  v25 = (char *)*v23;
  if (*v23)
  {
    v26 = *(char **)(v21 + 152);
    v27 = *v23;
    if (v26 != v25)
    {
      do
      {
        v28 = (std::__shared_weak_count *)*((_QWORD *)v26 - 1);
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v26 -= 16;
      }
      while (v26 != v25);
      v27 = *v35;
    }
    *(_QWORD *)(v21 + 152) = v25;
    operator delete(v27);
  }
  std::mutex::unlock(v19);
  sub_20E8C3144(&a19);
  if (a2 == 1)
  {
    v31 = (uint64_t *)__cxa_begin_catch(a1);
    v32 = *v31;
    a12 = *(_QWORD *)(*(_QWORD *)(*v31 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a11 = (*(uint64_t (**)(void))(v32 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a12, "\n", "message: ", (const char *)&a11, "\n");
    if ((a18 & 0x80u) == 0)
      v33 = (uint64_t *)&a13;
    else
      v33 = a13;
    if ((a18 & 0x80u) == 0)
      v34 = a18;
    else
      v34 = a14;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v33, v34, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED6891C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED6893CLL);
}

uint64_t *sub_20ED68948(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED68A34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED68990);
}

char *sub_20ED68A70(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED68B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED68B70(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED68B94(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED68BAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_6vectorINS0_IKNS1_3vio8"
                     "cv_types16JasperPointCloudEEENS_9allocatorISB_EEEESE_vSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_6vectorINS0_"
                                "IKNS1_3vio8cv_types16JasperPointCloudEEENS_9allocatorISB_EEEESE_vSE_Lb0EEEE27__shared_pt"
                                "r_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_6vectorINS0_IKNS1_3vio8cv_types16JasperPointCloudEEENS_9allocatorISB_EEEESE_vSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS_6vectorINS0_IKNS1_3vio8cv_types16JasperPointCloudEEENS_9allocatorISB_EEEESE_vSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED68C1C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E4EC0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E4EF0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC618;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED68E00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E4E90;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20ED68C1C(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20ED68C1C(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED68F38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED68F48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED68F78(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20ED68F8C(uint64_t a1)
{
  sub_20ED6A2DC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED68FB4(uint64_t a1)
{
  sub_20ED6A0F8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED68FD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E5218;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED69010(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E5218;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED69058(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC340;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC340;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED6912C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED6915C(uint64_t a1)
{
  sub_20ED69940(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED69180(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED69A9C(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED69E24(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED6923C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED69E24(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20ED69264(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED69A9C(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED69E24(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED693FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED69328);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED69470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED694D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED69E24(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED694F4(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED69578(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC340;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED69628(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6963C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED696CC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED696E0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED69F4C(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED69724(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED69738(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED6976C(uint64_t a1)
{
  return sub_20ED69940(a1 - 16);
}

void sub_20ED69774(uint64_t a1)
{
  sub_20ED69940(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6979C(uint64_t a1, uint64_t a2)
{
  sub_20ED69578(a1 - 16, a2);
}

void sub_20ED697A4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED69F4C(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED697E8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED697FC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED69830(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED69838(uint64_t a1)
{
  return sub_20ED69940(a1 - 24);
}

void sub_20ED69840(uint64_t a1)
{
  sub_20ED69940(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED69868(uint64_t a1)
{
  sub_20ED6963C(a1 - 24);
}

uint64_t sub_20ED69870(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED6987C()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20ED69890@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;

  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 57) = *(_OWORD *)(a1 + 57);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 88) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 104) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  memcpy((void *)(a2 + 112), (const void *)(a1 + 112), 0x120uLL);
  v12 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a2 + 400) = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a2 + 408) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  result = *(__n128 *)(a1 + 416);
  *(__n128 *)(a2 + 416) = result;
  return result;
}

uint64_t sub_20ED69940(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E5250;
  *(_QWORD *)(a1 + 16) = &unk_24C9E52C8;
  *(_QWORD *)(a1 + 24) = &unk_24C9E5308;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED69A9C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::exception_ptr v31;
  _OWORD v32[3];
  _OWORD v33[2];
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _BYTE v38[288];
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v32, v6, a2);
  v7 = a1 + 1;
  for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, _OWORD *))(i[2] + 16))(i + 2, v32);
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v31.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v31), v10))
    {
      sub_20E96CE78(2u);
    }
    v11 = v33[0];
    *(_OWORD *)(v9 + 176) = v32[2];
    *(_OWORD *)(v9 + 192) = v11;
    *(_OWORD *)(v9 + 201) = *(_OWORD *)((char *)v33 + 9);
    v12 = v32[1];
    *(_OWORD *)(v9 + 144) = v32[0];
    *(_OWORD *)(v9 + 160) = v12;
    v13 = v35;
    *(_QWORD *)(v9 + 224) = v34;
    *(_QWORD *)(v9 + 232) = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = v37;
    *(_QWORD *)(v9 + 240) = v36;
    *(_QWORD *)(v9 + 248) = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    memcpy((void *)(v9 + 256), v38, 0x120uLL);
    v19 = v40;
    *(_QWORD *)(v9 + 544) = v39;
    *(_QWORD *)(v9 + 552) = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    *(_OWORD *)(v9 + 560) = v41;
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  v22 = v40;
  if (v40)
  {
    v23 = (unint64_t *)&v40->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20ED69D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, uint64_t a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E98046C(&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED69DF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED69E18);
}

uint64_t *sub_20ED69E24(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED69F10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED69E6CLL);
}

char *sub_20ED69F4C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED6A028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED6A04C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6A070(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED6A088(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_types21ImagePr"
                     "ocessingSampleES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_typ"
                                "es21ImageProcessingSampleES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_types21ImageProcessingSampleES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_types21ImageProcessingSampleES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED6A0F8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E51E8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E5218;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC340;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED6A2DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E51B8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20ED6A0F8(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20ED6A0F8(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED6A414(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED6A424(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6A454(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20ED6A468(uint64_t a1)
{
  sub_20ED6BD68(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6A490(uint64_t a1)
{
  sub_20ED6BB84(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED6A4B4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E5540;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ED6A4F4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E5540;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6A544(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20ED6A554(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E5578;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED6A58C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E5578;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6A5D4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B6B38;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B6B38;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED6A6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED6A6D8(uint64_t a1)
{
  sub_20ED6AEC8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6A6FC(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED6B024(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED6B430(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED6A7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED6B430(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6A7E0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED6A7F0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED6A7FC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED6A80C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED6B024(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED6B430(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED6A9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED6A8D0);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED6AA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED6AA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED6B430(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED6AA9C(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED6AB20(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B6B38;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED6ABD0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6ABE4(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED6AC74(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6AC88(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED6B558(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED6ACCC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6ACE0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED6AD14(uint64_t a1)
{
  return sub_20ED6AEC8(a1 - 16);
}

void sub_20ED6AD1C(uint64_t a1)
{
  sub_20ED6AEC8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6AD44(uint64_t a1, uint64_t a2)
{
  sub_20ED6AB20(a1 - 16, a2);
}

void sub_20ED6AD4C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED6B558(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED6AD90(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6ADA4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED6ADD8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED6ADE0(uint64_t a1)
{
  return sub_20ED6AEC8(a1 - 24);
}

void sub_20ED6ADE8(uint64_t a1)
{
  sub_20ED6AEC8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6AE10(uint64_t a1)
{
  sub_20ED6ABE4(a1 - 24);
}

uint64_t sub_20ED6AE18(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED6AE24()
{
  JUMPOUT(0x212BC6398);
}

double sub_20ED6AE38@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  double result;
  int v7;
  __int128 v8;
  uint64_t v9;

  v4 = *a1;
  v7 = *a1;
  if (*((char *)a1 + 31) < 0)
  {
    sub_20E860C04(&v8, *((void **)a1 + 1), *((_QWORD *)a1 + 2));
    v4 = v7;
  }
  else
  {
    v8 = *(_OWORD *)(a1 + 2);
    v9 = *((_QWORD *)a1 + 3);
  }
  v5 = *((_QWORD *)a1 + 4);
  *(_DWORD *)a2 = v4;
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v5;
  *(_DWORD *)(a2 + 40) = 2;
  return result;
}

uint64_t sub_20ED6AEC8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E55B0;
  *(_QWORD *)(a1 + 16) = &unk_24C9E5628;
  *(_QWORD *)(a1 + 24) = &unk_24C9E5668;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED6B024(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  std::exception_ptr v17;
  _QWORD v18[5];
  unsigned int v19;
  char v20;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v18, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, _QWORD *))(j[2] + 16))(j + 2, v18);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v17), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    *(_DWORD *)(v14 + 184) = -1;
    v16 = v19;
    if (v19 != -1)
    {
      ((void (*)(char *, uint64_t, _QWORD *))*(&off_24C9E57B8 + v19))(&v20, v14 + 144, v18);
      *(_DWORD *)(v14 + 184) = v16;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (v19 != -1)
    ((void (*)(std::exception_ptr *, _QWORD *))*(&off_24C9E57A0 + v19))(&v17, v18);
}

void sub_20ED6B2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  std::mutex *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v22 = *(unsigned int *)(v19 + 184);
  if ((_DWORD)v22 != -1)
    ((void (*)(uint64_t **, uint64_t))*(&off_24C9E57A0 + v22))(&a11, v18);
  *(_DWORD *)(v19 + 184) = -1;
  std::mutex::unlock(v17);
  sub_20EC0B394((uint64_t)&a17);
  if (a2 == 1)
  {
    v23 = (uint64_t *)__cxa_begin_catch(a1);
    v24 = *v23;
    a10 = *(_QWORD *)(*(_QWORD *)(*v23 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v24 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v25 = (uint64_t *)&a11;
    else
      v25 = a11;
    if ((a16 & 0x80u) == 0)
      v26 = a16;
    else
      v26 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v25, v26, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED6B404(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED6B424);
}

uint64_t *sub_20ED6B430(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED6B51C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED6B478);
}

char *sub_20ED6B558(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED6B634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED6B658(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6B67C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED6B694(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio28feature_detectio"
                     "n_node_group21FeatureDetectionErrorENS_7variantIJNS6_27frame_downsample_node_group21FrameDownsample"
                     "rErrorENSA_24JasperFrameSelectorErrorES8_EEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio28featu"
                                "re_detection_node_group21FeatureDetectionErrorENS_7variantIJNS6_27frame_downsample_node_"
                                "group21FrameDownsamplerErrorENSA_24JasperFrameSelectorErrorES8_EEEvSD_Lb0EEEE27__shared_"
                                "ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio28feature_detection_node_group21FeatureDetectionErrorENS_7variantIJNS6_27frame_downsample_node_group21FrameDownsamplerErrorENSA_24JasperFrameSelectorErrorES8_EEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio28feature_detection_node_group21FeatureDetectionErrorENS_7variantIJNS6_27frame_downsample_node_group21FrameDownsamplerErrorENSA_24JasperFrameSelectorErrorES8_EEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED6B704(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED6B730(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED6B76C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E5830;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED6B7D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED6B864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED6B878(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED6B908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6B91C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED6B9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6B9F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED6BAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED6BACC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED6BB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6BB84(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E5510;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E5578;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9E5540;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED6BD68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E54E0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20ED6BB84(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20ED6BB84(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED6BEA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E58A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED6BEB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E58A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6BEE0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20ED6BEF4(uint64_t a1)
{
  sub_20ED6D530(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6BF1C(uint64_t a1)
{
  sub_20ED6D34C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED6BF40(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E5958;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ED6BF80(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E5958;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6BFD0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20ED6BFE4(uint64_t a1)
{
  sub_20ED6C7B8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6C008(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED6C914(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED6B430(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED6C0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED6B430(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6C0EC(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED6C0FC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED6C108(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED6C118(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED6C914(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED6B430(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED6C2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED6C1DCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED6C324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED6C384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED6B430(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED6C3A8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED6C42C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B6B38;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED6C4DC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6C4F0(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED6C580(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6C594(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED6CD20(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED6C5D8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6C5EC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED6C620(uint64_t a1)
{
  return sub_20ED6C7B8(a1 - 16);
}

void sub_20ED6C628(uint64_t a1)
{
  sub_20ED6C7B8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6C650(uint64_t a1, uint64_t a2)
{
  sub_20ED6C42C(a1 - 16, a2);
}

void sub_20ED6C658(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED6CD20(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED6C69C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6C6B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED6C6E4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED6C6EC(uint64_t a1)
{
  return sub_20ED6C7B8(a1 - 24);
}

void sub_20ED6C6F4(uint64_t a1)
{
  sub_20ED6C7B8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6C71C(uint64_t a1)
{
  sub_20ED6C4F0(a1 - 24);
}

uint64_t sub_20ED6C724(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED6C730()
{
  JUMPOUT(0x212BC6398);
}

void sub_20ED6C744(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::runtime_error v4;
  int v5;

  std::runtime_error::runtime_error(&v4, (const std::runtime_error *)a1);
  v4.__vftable = (std::runtime_error_vtbl *)&off_24C9FFFA0;
  v5 = *(_DWORD *)(a1 + 16);
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v4);
  *(_QWORD *)a2 = &off_24C9FFFA0;
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 40) = 1;
  std::runtime_error::~runtime_error(&v4);
}

uint64_t sub_20ED6C7B8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E5990;
  *(_QWORD *)(a1 + 16) = &unk_24C9E5A08;
  *(_QWORD *)(a1 + 24) = &unk_24C9E5A48;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED6C914(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  std::exception_ptr v17;
  _QWORD v18[5];
  unsigned int v19;
  char v20;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v18, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, _QWORD *))(j[2] + 16))(j + 2, v18);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v17), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    *(_DWORD *)(v14 + 184) = -1;
    v16 = v19;
    if (v19 != -1)
    {
      ((void (*)(char *, uint64_t, _QWORD *))*(&off_24C9E57B8 + v19))(&v20, v14 + 144, v18);
      *(_DWORD *)(v14 + 184) = v16;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (v19 != -1)
    ((void (*)(std::exception_ptr *, _QWORD *))*(&off_24C9E57A0 + v19))(&v17, v18);
}

void sub_20ED6CBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  std::mutex *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v22 = *(unsigned int *)(v19 + 184);
  if ((_DWORD)v22 != -1)
    ((void (*)(uint64_t **, uint64_t))*(&off_24C9E57A0 + v22))(&a11, v18);
  *(_DWORD *)(v19 + 184) = -1;
  std::mutex::unlock(v17);
  sub_20EC0B394((uint64_t)&a17);
  if (a2 == 1)
  {
    v23 = (uint64_t *)__cxa_begin_catch(a1);
    v24 = *v23;
    a10 = *(_QWORD *)(*(_QWORD *)(*v23 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v24 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v25 = (uint64_t *)&a11;
    else
      v25 = a11;
    if ((a16 & 0x80u) == 0)
      v26 = a16;
    else
      v26 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v25, v26, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED6CCF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED6CD14);
}

char *sub_20ED6CD20(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED6CDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED6CE20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6CE44(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED6CE5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio27frame_downsample"
                     "_node_group24JasperFrameSelectorErrorENS_7variantIJNS7_21FrameDownsamplerErrorES8_NS6_28feature_det"
                     "ection_node_group21FeatureDetectionErrorEEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio27frame"
                                "_downsample_node_group24JasperFrameSelectorErrorENS_7variantIJNS7_21FrameDownsamplerErro"
                                "rES8_NS6_28feature_detection_node_group21FeatureDetectionErrorEEEEvSD_Lb0EEEE27__shared_"
                                "ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio27frame_downsample_node_group24JasperFrameSelectorErrorENS_7variantIJNS7_21FrameDownsamplerErrorES8_NS6_28feature_detection_node_group21FeatureDetectionErrorEEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio27frame_downsample_node_group24JasperFrameSelectorErrorENS_7variantIJNS7_21FrameDownsamplerErrorES8_NS6_28feature_detection_node_group21FeatureDetectionErrorEEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED6CECC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED6CEF8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED6CF34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E5BD0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED6CF9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED6D02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED6D040(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED6D0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6D0E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED6D1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6D1BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED6D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED6D294(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED6D338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6D34C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E5928;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E5578;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9E5958;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED6D530(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E58F8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20ED6D34C(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20ED6D34C(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED6D668(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED6D678(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E5C48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6D6A8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20ED6D6BC(uint64_t a1)
{
  sub_20ED6ED14(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6D6E4(uint64_t a1)
{
  sub_20ED6EB30(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED6D708(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E5CF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ED6D748(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E5CF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6D798(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20ED6D7AC(uint64_t a1)
{
  sub_20ED6DF9C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6D7D0(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20ED6E0F8(a1 + 11, a2, &v5);
    if (v6)
      sub_20ED6B430(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20ED6D88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20ED6B430(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6D8B4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED6D8C4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED6D8D0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED6D8E0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20ED6E0F8(a1 + 11, a2, &v14);
  if (v15)
    sub_20ED6B430(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20ED6DA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20ED6D9A4);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED6DAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED6DB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20ED6B430(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20ED6DB70(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20ED6DBF4(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B6B38;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20ED6DCA4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6DCB8(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20ED6DD48(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6DD5C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20ED6E504(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED6DDA0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6DDB4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED6DDE8(uint64_t a1)
{
  return sub_20ED6DF9C(a1 - 16);
}

void sub_20ED6DDF0(uint64_t a1)
{
  sub_20ED6DF9C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6DE18(uint64_t a1, uint64_t a2)
{
  sub_20ED6DBF4(a1 - 16, a2);
}

void sub_20ED6DE20(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20ED6E504(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20ED6DE64(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20ED6DE78(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20ED6DEAC(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED6DEB4(uint64_t a1)
{
  return sub_20ED6DF9C(a1 - 24);
}

void sub_20ED6DEBC(uint64_t a1)
{
  sub_20ED6DF9C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20ED6DEE4(uint64_t a1)
{
  sub_20ED6DCB8(a1 - 24);
}

uint64_t sub_20ED6DEEC(uint64_t a1)
{
  return a1 - 24;
}

void sub_20ED6DEF8()
{
  JUMPOUT(0x212BC6398);
}

double sub_20ED6DF0C@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  double result;
  int v6;
  __int128 v7;
  uint64_t v8;

  v4 = *a1;
  v6 = *a1;
  if (*((char *)a1 + 31) < 0)
  {
    sub_20E860C04(&v7, *((void **)a1 + 1), *((_QWORD *)a1 + 2));
    v4 = v6;
  }
  else
  {
    v7 = *(_OWORD *)(a1 + 2);
    v8 = *((_QWORD *)a1 + 3);
  }
  result = *((double *)a1 + 4);
  *(_DWORD *)a2 = v4;
  *(_OWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  *(double *)(a2 + 32) = result;
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_20ED6DF9C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9E5D30;
  *(_QWORD *)(a1 + 16) = &unk_24C9E5DA8;
  *(_QWORD *)(a1 + 24) = &unk_24C9E5DE8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20ED6E0F8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  std::exception_ptr v17;
  _QWORD v18[5];
  unsigned int v19;
  char v20;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v18, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, _QWORD *))(j[2] + 16))(j + 2, v18);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v17), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    *(_DWORD *)(v14 + 184) = -1;
    v16 = v19;
    if (v19 != -1)
    {
      ((void (*)(char *, uint64_t, _QWORD *))*(&off_24C9E57B8 + v19))(&v20, v14 + 144, v18);
      *(_DWORD *)(v14 + 184) = v16;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (v19 != -1)
    ((void (*)(std::exception_ptr *, _QWORD *))*(&off_24C9E57A0 + v19))(&v17, v18);
}

void sub_20ED6E3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  std::mutex *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v22 = *(unsigned int *)(v19 + 184);
  if ((_DWORD)v22 != -1)
    ((void (*)(uint64_t **, uint64_t))*(&off_24C9E57A0 + v22))(&a11, v18);
  *(_DWORD *)(v19 + 184) = -1;
  std::mutex::unlock(v17);
  sub_20EC0B394((uint64_t)&a17);
  if (a2 == 1)
  {
    v23 = (uint64_t *)__cxa_begin_catch(a1);
    v24 = *v23;
    a10 = *(_QWORD *)(*(_QWORD *)(*v23 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v24 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v25 = (uint64_t *)&a11;
    else
      v25 = a11;
    if ((a16 & 0x80u) == 0)
      v26 = a16;
    else
      v26 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v25, v26, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED6E4D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED6E4F8);
}

char *sub_20ED6E504(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20ED6E5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20ED6E604(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6E628(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED6E640(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio27frame_downsample"
                     "_node_group21FrameDownsamplerErrorENS_7variantIJS8_NS7_24JasperFrameSelectorErrorENS6_28feature_det"
                     "ection_node_group21FeatureDetectionErrorEEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio27frame"
                                "_downsample_node_group21FrameDownsamplerErrorENS_7variantIJS8_NS7_24JasperFrameSelectorE"
                                "rrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEEvSD_Lb0EEEE27__shared_"
                                "ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS_7variantIJS8_NS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS_7variantIJS8_NS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED6E6B0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED6E6DC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED6E718@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E5F70;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED6E780(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED6E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED6E824(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED6E8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6E8C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED6E98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6E9A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED6EA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED6EA78(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED6EB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED6EB30(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E5CC8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E5578;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9E5CF8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED6ED14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9E5C98;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20ED6EB30(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20ED6EB30(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20ED6EE50(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED6EE74(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED6EE8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3vio22multicamera_node_group37MultiCameraFeatureDetectionNodeWorkerEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3vio22multicamera_node_group37MultiCameraFeatureDetectionNodeWorkerEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3vio22multicamera_node_group37MultiCameraFeatureDetectionNodeWorkerEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3vio22multicamera_node_group37MultiCameraFeatureDetectionNodeWorkerEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20ED6EEFC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  char v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v28;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  void *v41;
  char *v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  void *v78;
  char v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  std::__shared_weak_count *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  __int128 v101;
  void *v102;
  char *v103;
  void *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  void *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  unint64_t *v136;
  unint64_t v137;
  void *v138;
  char v139;
  unint64_t *v140;
  unint64_t v141;
  char *v142;
  __int128 v143;
  uint64_t v144;
  _QWORD *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  std::__shared_weak_count *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  __int128 v162;
  void *v163;
  void *v164;
  char *v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  void *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  __int128 v196;
  unint64_t *v197;
  unint64_t v198;
  void *v199;
  char v200;
  unint64_t *v201;
  unint64_t v202;
  char *v203;
  __int128 v204;
  uint64_t v205;
  _QWORD *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  std::__shared_weak_count *v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  __int128 v223;
  void *v224;
  void *v225;
  char *v226;
  unint64_t *v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  void *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  __int128 v257;
  unint64_t *v258;
  unint64_t v259;
  void *v260;
  void *v261;
  char v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  _QWORD *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  std::__shared_weak_count *v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  __int128 v285;
  void *v286;
  __int128 v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  void *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  __int128 v318;
  unint64_t *v319;
  unint64_t v320;
  void *v321;
  void *v322;
  char v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  _QWORD *v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  std::__shared_weak_count *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  __int128 v346;
  void *v347;
  __int128 v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  uint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  void *v370;
  uint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  __int128 v379;
  unint64_t *v380;
  unint64_t v381;
  __int128 v382;
  char v383;
  unint64_t *v384;
  unint64_t v385;
  uint64_t v386;
  __int128 v387;
  uint64_t v388;
  _QWORD *v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  std::__shared_weak_count *v392;
  unint64_t v393;
  unint64_t *v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  __int128 v406;
  __int128 v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t *v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t *v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t *v420;
  unint64_t v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  uint64_t v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  std::__shared_weak_count *v496;
  void *v497[3];
  void *v498;
  __int128 v499;
  void *v500;
  __int128 v501;
  __int128 v502;
  uint64_t (**v503)();
  __int128 v504;
  uint64_t v505;
  uint64_t (**v506)();
  __int128 v507;
  uint64_t (**v508)();
  __int128 v509;
  uint64_t v510;
  std::__shared_weak_count *v511;
  void *v512;
  std::__shared_weak_count *v513;
  void *v514[3];
  void *v515;
  __int128 v516;
  void *v517;
  __int128 v518;
  __int128 v519;
  uint64_t (**v520)();
  __int128 v521;
  uint64_t v522;
  uint64_t (**v523)();
  __int128 v524;
  uint64_t (**v525)();
  __int128 v526;
  uint64_t v527;
  std::__shared_weak_count *v528;
  void *v529;
  std::__shared_weak_count *v530;
  void *__src[3];
  void *v532;
  __int128 v533;
  void *v534;
  __int128 v535;
  __int128 v536;
  uint64_t (**v537)();
  __int128 v538;
  uint64_t v539;
  uint64_t (**v540)();
  __int128 v541;
  uint64_t (**v542)();
  __int128 v543;
  uint64_t v544;
  std::__shared_weak_count *v545;
  void *v546;
  std::__shared_weak_count *v547;
  void *__dst[3];
  void *v549;
  __int128 v550;
  void *v551;
  __int128 v552;
  __int128 v553;
  uint64_t (**v554)();
  __int128 v555;
  uint64_t v556;
  uint64_t (**v557)();
  __int128 v558;
  uint64_t (**v559)();
  __int128 v560;
  uint64_t v561;
  std::__shared_weak_count *v562;
  void *v563;
  std::__shared_weak_count *v564;
  void *__p[3];
  void *v566;
  __int128 v567;
  void *v568;
  __int128 v569;
  __int128 v570;
  uint64_t (**v571)();
  __int128 v572;
  uint64_t v573;
  uint64_t (**v574)();
  __int128 v575;
  uint64_t (**v576)();
  __int128 v577;
  uint64_t v578;
  std::__shared_weak_count *v579;
  void *v580;
  std::__shared_weak_count *v581;
  void *v582[3];
  void *v583;
  __int128 v584;
  void *v585;
  __int128 v586;
  __int128 v587;
  uint64_t (**v588)();
  __int128 v589;
  uint64_t v590;
  uint64_t (**v591)();
  __int128 v592;
  uint64_t (**v593)();
  __int128 v594;
  uint64_t v595;
  std::__shared_weak_count *v596;
  void *v597;
  std::__shared_weak_count *v598;
  uint64_t (**v599)();
  __int128 v600;
  void *v601;
  __int128 v602;
  void *v603;
  __int128 v604;
  __int128 v605;
  uint64_t (**v606)();
  __int128 v607;
  uint64_t v608;
  uint64_t (**v609)();
  __int128 v610;
  uint64_t (**v611)();
  __int128 v612;
  void *v613[4];
  void *v614[4];
  __int128 v615;
  __int128 v616;
  __int128 v617;
  void *v618;
  _OWORD v619[2];
  _QWORD v620[2];
  __int128 v621;
  _QWORD v622[2];
  __int128 v623;
  _QWORD v624[5];

  v624[2] = *MEMORY[0x24BDAC8D0];
  v7 = *(void **)a2;
  v6 = *(unint64_t **)(a2 + 8);
  v597 = *(void **)a2;
  v598 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v8 = v6 + 1;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *a3;
  v11 = (unint64_t *)a3[1];
  v595 = *a3;
  v596 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = v11 + 1;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(char *)(v10 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v10 + 8), *(_QWORD *)(v10 + 16));
  }
  else
  {
    v14 = *(_OWORD *)(v10 + 8);
    __dst[2] = *(void **)(v10 + 24);
    *(_OWORD *)__dst = v14;
  }
  if (*(char *)(v10 + 55) < 0)
  {
    sub_20E860C04(__src, *(void **)(v10 + 32), *(_QWORD *)(v10 + 40));
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)(v10 + 32);
    __src[2] = *(void **)(v10 + 48);
  }
  v614[0] = v7;
  v614[1] = v6;
  v598 = 0;
  v597 = 0;
  v613[0] = (void *)v10;
  v613[1] = v11;
  if (v11)
  {
    v15 = v11 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (SHIBYTE(__dst[2]) < 0)
  {
    sub_20E860C04(v582, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v582 = *(_OWORD *)__dst;
    v582[2] = __dst[2];
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(__p, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__src;
    __p[2] = __src[2];
  }
  *(void **)((char *)&v623 + 7) = *(void **)((char *)&__dst[1] + 7);
  v17 = __dst[0];
  v18 = __dst[1];
  BYTE7(v623) = HIBYTE(__dst[1]);
  v19 = HIBYTE(__dst[2]);
  memset(__dst, 0, sizeof(__dst));
  *(_QWORD *)&v617 = v18;
  *(_QWORD *)((char *)&v617 + 7) = *(_QWORD *)((char *)&v623 + 7);
  *(_QWORD *)((char *)&v623 + 7) = 0;
  *(_QWORD *)&v623 = 0;
  v497[0] = v7;
  v497[1] = v6;
  if (v6)
  {
    v20 = v6 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (char *)operator new();
  *(_QWORD *)&v619[0] = v617;
  *(_QWORD *)((char *)v619 + 7) = *(_QWORD *)((char *)&v617 + 7);
  *(_QWORD *)&v617 = 0;
  *(_QWORD *)((char *)&v617 + 7) = 0;
  v23 = *(_OWORD *)v497;
  v497[0] = 0;
  v497[1] = 0;
  v22[8] = 1;
  *((_QWORD *)v22 + 4) = 0;
  *((_QWORD *)v22 + 5) = 0;
  *(_QWORD *)v22 = &off_24C9E6228;
  *((_QWORD *)v22 + 2) = &unk_24C9E62A0;
  *((_QWORD *)v22 + 3) = &unk_24C9E62E0;
  v24 = *(_QWORD *)&v619[0];
  *(_QWORD *)(v22 + 63) = *(_QWORD *)((char *)v619 + 7);
  *((_QWORD *)v22 + 6) = v17;
  *((_QWORD *)v22 + 7) = v24;
  v22[71] = v19;
  *(_QWORD *)&v619[0] = 0;
  *(_QWORD *)((char *)v619 + 7) = 0;
  *(_OWORD *)(v22 + 72) = v23;
  v514[0] = 0;
  v514[1] = 0;
  v25 = (_QWORD *)operator new();
  *v25 = &off_24C9E63B8;
  v25[1] = v10;
  v25[2] = v11;
  v613[1] = 0;
  v613[0] = 0;
  *((_QWORD *)v22 + 18) = 0;
  *((_QWORD *)v22 + 11) = v25;
  *((_QWORD *)v22 + 12) = v22 + 96;
  *((_QWORD *)v22 + 13) = v22 + 96;
  *((_QWORD *)v22 + 14) = 0;
  *((_QWORD *)v22 + 15) = v22 + 120;
  *((_QWORD *)v22 + 16) = v22 + 120;
  *((_QWORD *)v22 + 17) = 0;
  if (!*((_QWORD *)v22 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v26 = (std::__shared_weak_count *)operator new();
  v26->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E6858;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
  v28 = (std::__shared_weak_count *)*((_QWORD *)v22 + 5);
  if (v28)
  {
    if (v28->__shared_owners_ != -1)
      goto LABEL_40;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    *((_QWORD *)v22 + 4) = v22;
    *((_QWORD *)v22 + 5) = v26;
    std::__shared_weak_count::__release_weak(v28);
  }
  else
  {
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    *((_QWORD *)v22 + 4) = v22;
    *((_QWORD *)v22 + 5) = v26;
  }
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_40:
  if (v514[1])
  {
    v36 = (unint64_t *)((char *)v514[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      (*(void (**)(void *))(*(_QWORD *)v514[1] + 16))(v514[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v514[1]);
    }
  }
  v514[0] = v22;
  v514[1] = v26;
  if (v497[1])
  {
    v38 = (unint64_t *)((char *)v497[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      (*(void (**)(void *))(*(_QWORD *)v497[1] + 16))(v497[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v497[1]);
    }
  }
  v40 = *(_OWORD *)v614;
  v614[0] = 0;
  v614[1] = 0;
  v600 = *(_OWORD *)v582;
  v599 = &off_24C9E6068;
  v601 = v582[2];
  memset(v582, 0, sizeof(v582));
  v602 = *(_OWORD *)__p;
  v41 = __p[2];
  memset(__p, 0, sizeof(__p));
  v604 = v40;
  v497[0] = 0;
  v497[1] = 0;
  v43 = v514[0];
  v42 = (char *)v514[1];
  v603 = v41;
  v605 = *(_OWORD *)v514;
  v514[0] = 0;
  v514[1] = 0;
  if (*((_QWORD *)&v605 + 1))
  {
    v44 = (unint64_t *)(v42 + 16);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v606 = &off_24C9CC340;
  v46 = (_QWORD *)operator new();
  *v46 = &off_24C9CC388;
  v46[1] = v43;
  v46[2] = v42;
  *(_QWORD *)&v607 = v46;
  v48 = *((_QWORD *)&v605 + 1);
  v47 = v605;
  if (!*((_QWORD *)&v605 + 1))
  {
    *((_QWORD *)&v607 + 1) = v605;
    v608 = 0;
    if ((_QWORD)v605)
      v52 = v605 + 16;
    else
      v52 = 0;
    goto LABEL_70;
  }
  v49 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 16);
  do
    v50 = __ldxr(v49);
  while (__stxr(v50 + 1, v49));
  v51 = *((_QWORD *)&v605 + 1);
  *((_QWORD *)&v607 + 1) = v47;
  v608 = v48;
  if ((_QWORD)v605)
    v52 = v605 + 16;
  else
    v52 = 0;
  if (!*((_QWORD *)&v605 + 1))
  {
    v47 = v605;
LABEL_70:
    v55 = 0;
    v609 = &off_24C9B2520;
    v610 = v52;
    goto LABEL_71;
  }
  v53 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 16);
  do
    v54 = __ldxr(v53);
  while (__stxr(v54 + 1, v53));
  v55 = *((_QWORD *)&v605 + 1);
  v47 = v605;
  v609 = &off_24C9B2520;
  *(_QWORD *)&v610 = v52;
  *((_QWORD *)&v610 + 1) = v51;
  if (*((_QWORD *)&v605 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 16);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
LABEL_71:
  if (v47)
    v58 = v47 + 24;
  else
    v58 = 0;
  v611 = &off_24C9B2310;
  *(_QWORD *)&v612 = v58;
  *((_QWORD *)&v612 + 1) = v55;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v582[2]) & 0x80000000) == 0)
      goto LABEL_76;
LABEL_79:
    operator delete(v582[0]);
    v59 = (std::__shared_weak_count *)v613[1];
    if (!v613[1])
      goto LABEL_84;
    goto LABEL_80;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v582[2]) < 0)
    goto LABEL_79;
LABEL_76:
  v59 = (std::__shared_weak_count *)v613[1];
  if (!v613[1])
    goto LABEL_84;
LABEL_80:
  v60 = (unint64_t *)&v59->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
LABEL_84:
  v62 = (std::__shared_weak_count *)v614[1];
  if (!v614[1])
    goto LABEL_88;
  v63 = (unint64_t *)((char *)v614[1] + 8);
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        goto LABEL_90;
LABEL_94:
      operator delete(__dst[0]);
      if (v595)
        goto LABEL_96;
      goto LABEL_95;
    }
  }
  else
  {
LABEL_88:
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_89;
  }
  operator delete(__src[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_94;
LABEL_90:
  if (v595)
    goto LABEL_96;
LABEL_95:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_96:
  v66 = *(void **)a2;
  v65 = *(unint64_t **)(a2 + 8);
  v580 = *(void **)a2;
  v581 = (std::__shared_weak_count *)v65;
  if (v65)
  {
    v67 = v65 + 1;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v69 = *a3;
  v70 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v71 = *a3 + 56;
  else
    v71 = 0;
  v578 = v71;
  v579 = v70;
  if (v70)
  {
    v72 = (unint64_t *)&v70->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  if (*(char *)(v71 + 31) < 0)
  {
    sub_20E860C04(__src, *(void **)(v71 + 8), *(_QWORD *)(v71 + 16));
  }
  else
  {
    v74 = *(_OWORD *)(v71 + 8);
    __src[2] = *(void **)(v71 + 24);
    *(_OWORD *)__src = v74;
  }
  if (*(char *)(v69 + 111) < 0)
  {
    sub_20E860C04(v514, *(void **)(v69 + 88), *(_QWORD *)(v69 + 96));
  }
  else
  {
    *(_OWORD *)v514 = *(_OWORD *)(v69 + 88);
    v514[2] = *(void **)(v69 + 104);
  }
  v613[0] = v66;
  v613[1] = v65;
  v581 = 0;
  v580 = 0;
  *(_QWORD *)&v619[0] = v71;
  *((_QWORD *)&v619[0] + 1) = v70;
  if (v70)
  {
    v75 = (unint64_t *)&v70->__shared_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(__p, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__src;
    __p[2] = __src[2];
  }
  if (SHIBYTE(v514[2]) < 0)
  {
    sub_20E860C04(__dst, v514[0], (unint64_t)v514[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v514;
    __dst[2] = v514[2];
  }
  *(void **)((char *)&v621 + 7) = *(void **)((char *)&__src[1] + 7);
  v77 = __src[0];
  v78 = __src[1];
  BYTE7(v621) = HIBYTE(__src[1]);
  v79 = HIBYTE(__src[2]);
  memset(__src, 0, sizeof(__src));
  *(_QWORD *)&v623 = v78;
  *(_QWORD *)((char *)&v623 + 7) = *(_QWORD *)((char *)&v621 + 7);
  *(_QWORD *)((char *)&v621 + 7) = 0;
  *(_QWORD *)&v621 = 0;
  v614[0] = v66;
  v614[1] = v65;
  if (v65)
  {
    v80 = v65 + 1;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v82 = (char *)operator new();
  *(_QWORD *)&v617 = v623;
  *(_QWORD *)((char *)&v617 + 7) = *(_QWORD *)((char *)&v623 + 7);
  *(_QWORD *)&v623 = 0;
  *(_QWORD *)((char *)&v623 + 7) = 0;
  v83 = *(_OWORD *)v614;
  v614[0] = 0;
  v614[1] = 0;
  v82[8] = 1;
  *((_QWORD *)v82 + 4) = 0;
  *((_QWORD *)v82 + 5) = 0;
  *(_QWORD *)v82 = &off_24C9E68A8;
  *((_QWORD *)v82 + 2) = &unk_24C9E6920;
  *((_QWORD *)v82 + 3) = &unk_24C9E6960;
  v84 = v617;
  *(_QWORD *)(v82 + 63) = *(_QWORD *)((char *)&v617 + 7);
  *((_QWORD *)v82 + 6) = v77;
  *((_QWORD *)v82 + 7) = v84;
  v82[71] = v79;
  *(_QWORD *)&v617 = 0;
  *(_QWORD *)((char *)&v617 + 7) = 0;
  *(_OWORD *)(v82 + 72) = v83;
  v497[0] = 0;
  v497[1] = 0;
  v85 = (_QWORD *)operator new();
  *v85 = &off_24C9E6A48;
  v85[1] = v71;
  v85[2] = v70;
  v619[0] = 0uLL;
  *((_QWORD *)v82 + 18) = 0;
  *((_QWORD *)v82 + 11) = v85;
  *((_QWORD *)v82 + 12) = v82 + 96;
  *((_QWORD *)v82 + 13) = v82 + 96;
  *((_QWORD *)v82 + 14) = 0;
  *((_QWORD *)v82 + 15) = v82 + 120;
  *((_QWORD *)v82 + 16) = v82 + 120;
  *((_QWORD *)v82 + 17) = 0;
  if (!*((_QWORD *)v82 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v86 = (std::__shared_weak_count *)operator new();
  v86->__shared_owners_ = 0;
  v87 = (unint64_t *)&v86->__shared_owners_;
  v86->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E6EE8;
  v86->__shared_weak_owners_ = 0;
  v86[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  v88 = (std::__shared_weak_count *)*((_QWORD *)v82 + 5);
  if (v88)
  {
    if (v88->__shared_owners_ != -1)
      goto LABEL_138;
    do
      v89 = __ldxr(v87);
    while (__stxr(v89 + 1, v87));
    v90 = (unint64_t *)&v86->__shared_weak_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    *((_QWORD *)v82 + 4) = v82;
    *((_QWORD *)v82 + 5) = v86;
    std::__shared_weak_count::__release_weak(v88);
  }
  else
  {
    do
      v92 = __ldxr(v87);
    while (__stxr(v92 + 1, v87));
    v93 = (unint64_t *)&v86->__shared_weak_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
    *((_QWORD *)v82 + 4) = v82;
    *((_QWORD *)v82 + 5) = v86;
  }
  do
    v95 = __ldaxr(v87);
  while (__stlxr(v95 - 1, v87));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
LABEL_138:
  if (v497[1])
  {
    v96 = (unint64_t *)((char *)v497[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      (*(void (**)(void *))(*(_QWORD *)v497[1] + 16))(v497[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v497[1]);
    }
  }
  v497[0] = v82;
  v497[1] = v86;
  v98 = (std::__shared_weak_count *)v614[1];
  if (v614[1])
  {
    v99 = (unint64_t *)((char *)v614[1] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = *(_OWORD *)v613;
  v613[0] = 0;
  v613[1] = 0;
  *(_OWORD *)&v582[1] = *(_OWORD *)__p;
  v582[0] = &off_24C9E6098;
  v583 = __p[2];
  memset(__p, 0, sizeof(__p));
  v584 = *(_OWORD *)__dst;
  v102 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v586 = v101;
  v614[1] = 0;
  v614[0] = 0;
  v104 = v497[0];
  v103 = (char *)v497[1];
  v585 = v102;
  v587 = *(_OWORD *)v497;
  v497[0] = 0;
  v497[1] = 0;
  if (*((_QWORD *)&v587 + 1))
  {
    v105 = (unint64_t *)(v103 + 16);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  v588 = &off_24C9B6B70;
  v107 = (_QWORD *)operator new();
  *v107 = &off_24C9E6F38;
  v107[1] = v104;
  v107[2] = v103;
  *(_QWORD *)&v589 = v107;
  v109 = *((_QWORD *)&v587 + 1);
  v108 = v587;
  if (!*((_QWORD *)&v587 + 1))
  {
    *((_QWORD *)&v589 + 1) = v587;
    v590 = 0;
    if ((_QWORD)v587)
      v113 = v587 + 16;
    else
      v113 = 0;
    goto LABEL_168;
  }
  v110 = (unint64_t *)(*((_QWORD *)&v587 + 1) + 16);
  do
    v111 = __ldxr(v110);
  while (__stxr(v111 + 1, v110));
  v112 = *((_QWORD *)&v587 + 1);
  *((_QWORD *)&v589 + 1) = v108;
  v590 = v109;
  if ((_QWORD)v587)
    v113 = v587 + 16;
  else
    v113 = 0;
  if (!*((_QWORD *)&v587 + 1))
  {
    v108 = v587;
LABEL_168:
    v116 = 0;
    v591 = &off_24C9B2520;
    v592 = v113;
    goto LABEL_169;
  }
  v114 = (unint64_t *)(*((_QWORD *)&v587 + 1) + 16);
  do
    v115 = __ldxr(v114);
  while (__stxr(v115 + 1, v114));
  v116 = *((_QWORD *)&v587 + 1);
  v108 = v587;
  v591 = &off_24C9B2520;
  *(_QWORD *)&v592 = v113;
  *((_QWORD *)&v592 + 1) = v112;
  if (*((_QWORD *)&v587 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v587 + 1) + 16);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
LABEL_169:
  if (v108)
    v119 = v108 + 24;
  else
    v119 = 0;
  v593 = &off_24C9B2310;
  *(_QWORD *)&v594 = v119;
  *((_QWORD *)&v594 + 1) = v116;
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_174;
LABEL_177:
    operator delete(__p[0]);
    v120 = (std::__shared_weak_count *)*((_QWORD *)&v619[0] + 1);
    if (!*((_QWORD *)&v619[0] + 1))
      goto LABEL_182;
    goto LABEL_178;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_177;
LABEL_174:
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v619[0] + 1);
  if (!*((_QWORD *)&v619[0] + 1))
    goto LABEL_182;
LABEL_178:
  v121 = (unint64_t *)&v120->__shared_owners_;
  do
    v122 = __ldaxr(v121);
  while (__stlxr(v122 - 1, v121));
  if (!v122)
  {
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
  }
LABEL_182:
  v123 = (std::__shared_weak_count *)v613[1];
  if (!v613[1])
    goto LABEL_186;
  v124 = (unint64_t *)((char *)v613[1] + 8);
  do
    v125 = __ldaxr(v124);
  while (__stlxr(v125 - 1, v124));
  if (!v125)
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
    if ((SHIBYTE(v514[2]) & 0x80000000) == 0)
    {
LABEL_187:
      if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
        goto LABEL_188;
LABEL_192:
      operator delete(__src[0]);
      if (v578)
        goto LABEL_194;
      goto LABEL_193;
    }
  }
  else
  {
LABEL_186:
    if ((SHIBYTE(v514[2]) & 0x80000000) == 0)
      goto LABEL_187;
  }
  operator delete(v514[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_192;
LABEL_188:
  if (v578)
    goto LABEL_194;
LABEL_193:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_194:
  v127 = *(void **)a2;
  v126 = *(unint64_t **)(a2 + 8);
  v563 = *(void **)a2;
  v564 = (std::__shared_weak_count *)v126;
  if (v126)
  {
    v128 = v126 + 1;
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
  }
  v130 = *a3;
  v131 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v132 = *a3 + 112;
  else
    v132 = 0;
  v561 = v132;
  v562 = v131;
  if (v131)
  {
    v133 = (unint64_t *)&v131->__shared_owners_;
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
  if (*(char *)(v132 + 31) < 0)
  {
    sub_20E860C04(v514, *(void **)(v132 + 8), *(_QWORD *)(v132 + 16));
  }
  else
  {
    v135 = *(_OWORD *)(v132 + 8);
    v514[2] = *(void **)(v132 + 24);
    *(_OWORD *)v514 = v135;
  }
  if (*(char *)(v130 + 167) < 0)
  {
    sub_20E860C04(v497, *(void **)(v130 + 144), *(_QWORD *)(v130 + 152));
  }
  else
  {
    *(_OWORD *)v497 = *(_OWORD *)(v130 + 144);
    v497[2] = *(void **)(v130 + 160);
  }
  *(_QWORD *)&v619[0] = v127;
  *((_QWORD *)&v619[0] + 1) = v126;
  v564 = 0;
  v563 = 0;
  *(_QWORD *)&v617 = v132;
  *((_QWORD *)&v617 + 1) = v131;
  if (v131)
  {
    v136 = (unint64_t *)&v131->__shared_owners_;
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
  if (SHIBYTE(v514[2]) < 0)
  {
    sub_20E860C04(__dst, v514[0], (unint64_t)v514[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v514;
    __dst[2] = v514[2];
  }
  if (SHIBYTE(v497[2]) < 0)
  {
    sub_20E860C04(__src, v497[0], (unint64_t)v497[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v497;
    __src[2] = v497[2];
  }
  *(void **)((char *)&v616 + 7) = *(void **)((char *)&v514[1] + 7);
  v138 = v514[0];
  *(void **)&v616 = v514[1];
  v139 = HIBYTE(v514[2]);
  memset(v514, 0, sizeof(v514));
  *(_QWORD *)&v621 = v616;
  *(_QWORD *)((char *)&v621 + 7) = *(_QWORD *)((char *)&v616 + 7);
  *(_QWORD *)((char *)&v616 + 7) = 0;
  *(_QWORD *)&v616 = 0;
  v613[0] = v127;
  v613[1] = v126;
  if (v126)
  {
    v140 = v126 + 1;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  v142 = (char *)operator new();
  *(_QWORD *)&v623 = v621;
  *(_QWORD *)((char *)&v623 + 7) = *(_QWORD *)((char *)&v621 + 7);
  *(_QWORD *)&v621 = 0;
  *(_QWORD *)((char *)&v621 + 7) = 0;
  v143 = *(_OWORD *)v613;
  v613[0] = 0;
  v613[1] = 0;
  v142[8] = 1;
  *((_QWORD *)v142 + 4) = 0;
  *((_QWORD *)v142 + 5) = 0;
  *(_QWORD *)v142 = &off_24C9E6FB0;
  *((_QWORD *)v142 + 2) = &unk_24C9E7028;
  *((_QWORD *)v142 + 3) = &unk_24C9E7068;
  v144 = v623;
  *(_QWORD *)(v142 + 63) = *(_QWORD *)((char *)&v623 + 7);
  *((_QWORD *)v142 + 6) = v138;
  *((_QWORD *)v142 + 7) = v144;
  v142[71] = v139;
  *(_QWORD *)&v623 = 0;
  *(_QWORD *)((char *)&v623 + 7) = 0;
  *(_OWORD *)(v142 + 72) = v143;
  v614[1] = 0;
  v614[0] = 0;
  v145 = (_QWORD *)operator new();
  *v145 = &off_24C9E7150;
  v145[1] = v132;
  v145[2] = v131;
  v617 = 0uLL;
  *((_QWORD *)v142 + 18) = 0;
  *((_QWORD *)v142 + 11) = v145;
  *((_QWORD *)v142 + 12) = v142 + 96;
  *((_QWORD *)v142 + 13) = v142 + 96;
  *((_QWORD *)v142 + 14) = 0;
  *((_QWORD *)v142 + 15) = v142 + 120;
  *((_QWORD *)v142 + 16) = v142 + 120;
  *((_QWORD *)v142 + 17) = 0;
  if (!*((_QWORD *)v142 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v146 = (std::__shared_weak_count *)operator new();
  v146->__shared_owners_ = 0;
  v147 = (unint64_t *)&v146->__shared_owners_;
  v146->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E75F0;
  v146->__shared_weak_owners_ = 0;
  v146[1].__vftable = (std::__shared_weak_count_vtbl *)v142;
  v148 = (std::__shared_weak_count *)*((_QWORD *)v142 + 5);
  if (v148)
  {
    if (v148->__shared_owners_ != -1)
      goto LABEL_236;
    do
      v149 = __ldxr(v147);
    while (__stxr(v149 + 1, v147));
    v150 = (unint64_t *)&v146->__shared_weak_owners_;
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
    *((_QWORD *)v142 + 4) = v142;
    *((_QWORD *)v142 + 5) = v146;
    std::__shared_weak_count::__release_weak(v148);
  }
  else
  {
    do
      v152 = __ldxr(v147);
    while (__stxr(v152 + 1, v147));
    v153 = (unint64_t *)&v146->__shared_weak_owners_;
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
    *((_QWORD *)v142 + 4) = v142;
    *((_QWORD *)v142 + 5) = v146;
  }
  do
    v155 = __ldaxr(v147);
  while (__stlxr(v155 - 1, v147));
  if (!v155)
  {
    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
    std::__shared_weak_count::__release_weak(v146);
  }
LABEL_236:
  v156 = (std::__shared_weak_count *)v614[1];
  if (v614[1])
  {
    v157 = (unint64_t *)((char *)v614[1] + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v614[0] = v142;
  v614[1] = v146;
  v159 = (std::__shared_weak_count *)v613[1];
  if (v613[1])
  {
    v160 = (unint64_t *)((char *)v613[1] + 8);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = v619[0];
  v619[0] = 0uLL;
  *(_OWORD *)&__p[1] = *(_OWORD *)__dst;
  __p[0] = &off_24C9E60C8;
  v566 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v567 = *(_OWORD *)__src;
  v163 = __src[2];
  memset(__src, 0, sizeof(__src));
  v569 = v162;
  v613[1] = 0;
  v613[0] = 0;
  v164 = v614[0];
  v165 = (char *)v614[1];
  v568 = v163;
  v570 = *(_OWORD *)v614;
  v614[0] = 0;
  v614[1] = 0;
  if (*((_QWORD *)&v570 + 1))
  {
    v166 = (unint64_t *)(v165 + 16);
    do
      v167 = __ldxr(v166);
    while (__stxr(v167 + 1, v166));
  }
  v571 = &off_24C9CC760;
  v168 = (_QWORD *)operator new();
  *v168 = &off_24C9E7640;
  v168[1] = v164;
  v168[2] = v165;
  *(_QWORD *)&v572 = v168;
  v170 = *((_QWORD *)&v570 + 1);
  v169 = v570;
  if (!*((_QWORD *)&v570 + 1))
  {
    *((_QWORD *)&v572 + 1) = v570;
    v573 = 0;
    if ((_QWORD)v570)
      v174 = v570 + 16;
    else
      v174 = 0;
    goto LABEL_266;
  }
  v171 = (unint64_t *)(*((_QWORD *)&v570 + 1) + 16);
  do
    v172 = __ldxr(v171);
  while (__stxr(v172 + 1, v171));
  v173 = *((_QWORD *)&v570 + 1);
  *((_QWORD *)&v572 + 1) = v169;
  v573 = v170;
  if ((_QWORD)v570)
    v174 = v570 + 16;
  else
    v174 = 0;
  if (!*((_QWORD *)&v570 + 1))
  {
    v169 = v570;
LABEL_266:
    v177 = 0;
    v574 = &off_24C9B2520;
    v575 = v174;
    goto LABEL_267;
  }
  v175 = (unint64_t *)(*((_QWORD *)&v570 + 1) + 16);
  do
    v176 = __ldxr(v175);
  while (__stxr(v176 + 1, v175));
  v177 = *((_QWORD *)&v570 + 1);
  v169 = v570;
  v574 = &off_24C9B2520;
  *(_QWORD *)&v575 = v174;
  *((_QWORD *)&v575 + 1) = v173;
  if (*((_QWORD *)&v570 + 1))
  {
    v178 = (unint64_t *)(*((_QWORD *)&v570 + 1) + 16);
    do
      v179 = __ldxr(v178);
    while (__stxr(v179 + 1, v178));
  }
LABEL_267:
  if (v169)
    v180 = v169 + 24;
  else
    v180 = 0;
  v576 = &off_24C9B2310;
  *(_QWORD *)&v577 = v180;
  *((_QWORD *)&v577 + 1) = v177;
  if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_272;
LABEL_275:
    operator delete(__dst[0]);
    v181 = (std::__shared_weak_count *)*((_QWORD *)&v617 + 1);
    if (!*((_QWORD *)&v617 + 1))
      goto LABEL_280;
    goto LABEL_276;
  }
  operator delete(__src[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_275;
LABEL_272:
  v181 = (std::__shared_weak_count *)*((_QWORD *)&v617 + 1);
  if (!*((_QWORD *)&v617 + 1))
    goto LABEL_280;
LABEL_276:
  v182 = (unint64_t *)&v181->__shared_owners_;
  do
    v183 = __ldaxr(v182);
  while (__stlxr(v183 - 1, v182));
  if (!v183)
  {
    ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
    std::__shared_weak_count::__release_weak(v181);
  }
LABEL_280:
  v184 = (std::__shared_weak_count *)*((_QWORD *)&v619[0] + 1);
  if (!*((_QWORD *)&v619[0] + 1))
    goto LABEL_284;
  v185 = (unint64_t *)(*((_QWORD *)&v619[0] + 1) + 8);
  do
    v186 = __ldaxr(v185);
  while (__stlxr(v186 - 1, v185));
  if (!v186)
  {
    ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
    std::__shared_weak_count::__release_weak(v184);
    if ((SHIBYTE(v497[2]) & 0x80000000) == 0)
    {
LABEL_285:
      if ((SHIBYTE(v514[2]) & 0x80000000) == 0)
        goto LABEL_286;
LABEL_290:
      operator delete(v514[0]);
      if (v561)
        goto LABEL_292;
      goto LABEL_291;
    }
  }
  else
  {
LABEL_284:
    if ((SHIBYTE(v497[2]) & 0x80000000) == 0)
      goto LABEL_285;
  }
  operator delete(v497[0]);
  if (SHIBYTE(v514[2]) < 0)
    goto LABEL_290;
LABEL_286:
  if (v561)
    goto LABEL_292;
LABEL_291:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_292:
  v188 = *(void **)a2;
  v187 = *(std::__shared_weak_count **)(a2 + 8);
  v546 = *(void **)a2;
  v547 = v187;
  if (v187)
  {
    v189 = (unint64_t *)&v187->__shared_owners_;
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 1, v189));
  }
  v191 = *a3;
  v192 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v193 = *a3 + 168;
  else
    v193 = 0;
  v544 = v193;
  v545 = v192;
  if (v192)
  {
    v194 = (unint64_t *)&v192->__shared_owners_;
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
  }
  if (*(char *)(v193 + 31) < 0)
  {
    sub_20E860C04(v497, *(void **)(v193 + 8), *(_QWORD *)(v193 + 16));
  }
  else
  {
    v196 = *(_OWORD *)(v193 + 8);
    v497[2] = *(void **)(v193 + 24);
    *(_OWORD *)v497 = v196;
  }
  if (*(char *)(v191 + 223) < 0)
  {
    sub_20E860C04(v614, *(void **)(v191 + 200), *(_QWORD *)(v191 + 208));
  }
  else
  {
    *(_OWORD *)v614 = *(_OWORD *)(v191 + 200);
    v614[2] = *(void **)(v191 + 216);
  }
  *(_QWORD *)&v617 = v188;
  *((_QWORD *)&v617 + 1) = v187;
  v547 = 0;
  v546 = 0;
  *(_QWORD *)&v623 = v193;
  *((_QWORD *)&v623 + 1) = v192;
  if (v192)
  {
    v197 = (unint64_t *)&v192->__shared_owners_;
    do
      v198 = __ldxr(v197);
    while (__stxr(v198 + 1, v197));
  }
  if (SHIBYTE(v497[2]) < 0)
  {
    sub_20E860C04(__src, v497[0], (unint64_t)v497[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v497;
    __src[2] = v497[2];
  }
  if (SHIBYTE(v614[2]) < 0)
  {
    sub_20E860C04(v514, v614[0], (unint64_t)v614[1]);
  }
  else
  {
    *(_OWORD *)v514 = *(_OWORD *)v614;
    v514[2] = v614[2];
  }
  *(void **)((char *)&v615 + 7) = *(void **)((char *)&v497[1] + 7);
  v199 = v497[0];
  *(void **)&v615 = v497[1];
  v200 = HIBYTE(v497[2]);
  memset(v497, 0, sizeof(v497));
  *(_QWORD *)&v616 = v615;
  *(_QWORD *)((char *)&v616 + 7) = *(_QWORD *)((char *)&v615 + 7);
  *(_QWORD *)((char *)&v615 + 7) = 0;
  *(_QWORD *)&v615 = 0;
  *(_QWORD *)&v619[0] = v188;
  *((_QWORD *)&v619[0] + 1) = v187;
  if (v187)
  {
    v201 = (unint64_t *)&v187->__shared_owners_;
    do
      v202 = __ldxr(v201);
    while (__stxr(v202 + 1, v201));
  }
  v203 = (char *)operator new();
  *(_QWORD *)&v621 = v616;
  *(_QWORD *)((char *)&v621 + 7) = *(_QWORD *)((char *)&v616 + 7);
  *(_QWORD *)&v616 = 0;
  *(_QWORD *)((char *)&v616 + 7) = 0;
  v204 = v619[0];
  v619[0] = 0uLL;
  v203[8] = 1;
  *((_QWORD *)v203 + 4) = 0;
  *((_QWORD *)v203 + 5) = 0;
  *(_QWORD *)v203 = &off_24C9E76B8;
  *((_QWORD *)v203 + 2) = &unk_24C9E7730;
  *((_QWORD *)v203 + 3) = &unk_24C9E7770;
  v205 = v621;
  *(_QWORD *)(v203 + 63) = *(_QWORD *)((char *)&v621 + 7);
  *((_QWORD *)v203 + 6) = v199;
  *((_QWORD *)v203 + 7) = v205;
  v203[71] = v200;
  *(_QWORD *)&v621 = 0;
  *(_QWORD *)((char *)&v621 + 7) = 0;
  *(_OWORD *)(v203 + 72) = v204;
  v613[1] = 0;
  v613[0] = 0;
  v206 = (_QWORD *)operator new();
  *v206 = &off_24C9E7848;
  v206[1] = v193;
  v206[2] = v192;
  v623 = 0uLL;
  *((_QWORD *)v203 + 18) = 0;
  *((_QWORD *)v203 + 11) = v206;
  *((_QWORD *)v203 + 12) = v203 + 96;
  *((_QWORD *)v203 + 13) = v203 + 96;
  *((_QWORD *)v203 + 14) = 0;
  *((_QWORD *)v203 + 15) = v203 + 120;
  *((_QWORD *)v203 + 16) = v203 + 120;
  *((_QWORD *)v203 + 17) = 0;
  if (!*((_QWORD *)v203 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v207 = (std::__shared_weak_count *)operator new();
  v207->__shared_owners_ = 0;
  v208 = (unint64_t *)&v207->__shared_owners_;
  v207->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E7C98;
  v207->__shared_weak_owners_ = 0;
  v207[1].__vftable = (std::__shared_weak_count_vtbl *)v203;
  v209 = (std::__shared_weak_count *)*((_QWORD *)v203 + 5);
  if (v209)
  {
    if (v209->__shared_owners_ != -1)
      goto LABEL_334;
    do
      v210 = __ldxr(v208);
    while (__stxr(v210 + 1, v208));
    v211 = (unint64_t *)&v207->__shared_weak_owners_;
    do
      v212 = __ldxr(v211);
    while (__stxr(v212 + 1, v211));
    *((_QWORD *)v203 + 4) = v203;
    *((_QWORD *)v203 + 5) = v207;
    std::__shared_weak_count::__release_weak(v209);
  }
  else
  {
    do
      v213 = __ldxr(v208);
    while (__stxr(v213 + 1, v208));
    v214 = (unint64_t *)&v207->__shared_weak_owners_;
    do
      v215 = __ldxr(v214);
    while (__stxr(v215 + 1, v214));
    *((_QWORD *)v203 + 4) = v203;
    *((_QWORD *)v203 + 5) = v207;
  }
  do
    v216 = __ldaxr(v208);
  while (__stlxr(v216 - 1, v208));
  if (!v216)
  {
    ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
    std::__shared_weak_count::__release_weak(v207);
  }
LABEL_334:
  v217 = (std::__shared_weak_count *)v613[1];
  if (v613[1])
  {
    v218 = (unint64_t *)((char *)v613[1] + 8);
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v613[0] = v203;
  v613[1] = v207;
  v220 = (std::__shared_weak_count *)*((_QWORD *)&v619[0] + 1);
  if (*((_QWORD *)&v619[0] + 1))
  {
    v221 = (unint64_t *)(*((_QWORD *)&v619[0] + 1) + 8);
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = v617;
  v617 = 0uLL;
  *(_OWORD *)&__dst[1] = *(_OWORD *)__src;
  __dst[0] = &off_24C9E60F8;
  v549 = __src[2];
  memset(__src, 0, sizeof(__src));
  v550 = *(_OWORD *)v514;
  v224 = v514[2];
  memset(v514, 0, sizeof(v514));
  v552 = v223;
  v619[0] = 0uLL;
  v225 = v613[0];
  v226 = (char *)v613[1];
  v551 = v224;
  v553 = *(_OWORD *)v613;
  v613[0] = 0;
  v613[1] = 0;
  if (*((_QWORD *)&v553 + 1))
  {
    v227 = (unint64_t *)(v226 + 16);
    do
      v228 = __ldxr(v227);
    while (__stxr(v228 + 1, v227));
  }
  v554 = &off_24C9D10A0;
  v229 = (_QWORD *)operator new();
  *v229 = &off_24C9D2260;
  v229[1] = v225;
  v229[2] = v226;
  *(_QWORD *)&v555 = v229;
  v231 = *((_QWORD *)&v553 + 1);
  v230 = v553;
  if (!*((_QWORD *)&v553 + 1))
  {
    *((_QWORD *)&v555 + 1) = v553;
    v556 = 0;
    if ((_QWORD)v553)
      v235 = v553 + 16;
    else
      v235 = 0;
    goto LABEL_364;
  }
  v232 = (unint64_t *)(*((_QWORD *)&v553 + 1) + 16);
  do
    v233 = __ldxr(v232);
  while (__stxr(v233 + 1, v232));
  v234 = *((_QWORD *)&v553 + 1);
  *((_QWORD *)&v555 + 1) = v230;
  v556 = v231;
  if ((_QWORD)v553)
    v235 = v553 + 16;
  else
    v235 = 0;
  if (!*((_QWORD *)&v553 + 1))
  {
    v230 = v553;
LABEL_364:
    v238 = 0;
    v557 = &off_24C9B2520;
    v558 = v235;
    goto LABEL_365;
  }
  v236 = (unint64_t *)(*((_QWORD *)&v553 + 1) + 16);
  do
    v237 = __ldxr(v236);
  while (__stxr(v237 + 1, v236));
  v238 = *((_QWORD *)&v553 + 1);
  v230 = v553;
  v557 = &off_24C9B2520;
  *(_QWORD *)&v558 = v235;
  *((_QWORD *)&v558 + 1) = v234;
  if (*((_QWORD *)&v553 + 1))
  {
    v239 = (unint64_t *)(*((_QWORD *)&v553 + 1) + 16);
    do
      v240 = __ldxr(v239);
    while (__stxr(v240 + 1, v239));
  }
LABEL_365:
  if (v230)
    v241 = v230 + 24;
  else
    v241 = 0;
  v559 = &off_24C9B2310;
  *(_QWORD *)&v560 = v241;
  *((_QWORD *)&v560 + 1) = v238;
  if ((SHIBYTE(v514[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_370;
LABEL_373:
    operator delete(__src[0]);
    v242 = (std::__shared_weak_count *)*((_QWORD *)&v623 + 1);
    if (!*((_QWORD *)&v623 + 1))
      goto LABEL_378;
    goto LABEL_374;
  }
  operator delete(v514[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_373;
LABEL_370:
  v242 = (std::__shared_weak_count *)*((_QWORD *)&v623 + 1);
  if (!*((_QWORD *)&v623 + 1))
    goto LABEL_378;
LABEL_374:
  v243 = (unint64_t *)&v242->__shared_owners_;
  do
    v244 = __ldaxr(v243);
  while (__stlxr(v244 - 1, v243));
  if (!v244)
  {
    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
    std::__shared_weak_count::__release_weak(v242);
  }
LABEL_378:
  v245 = (std::__shared_weak_count *)*((_QWORD *)&v617 + 1);
  if (!*((_QWORD *)&v617 + 1))
    goto LABEL_382;
  v246 = (unint64_t *)(*((_QWORD *)&v617 + 1) + 8);
  do
    v247 = __ldaxr(v246);
  while (__stlxr(v247 - 1, v246));
  if (!v247)
  {
    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
    std::__shared_weak_count::__release_weak(v245);
    if ((SHIBYTE(v614[2]) & 0x80000000) == 0)
    {
LABEL_383:
      if ((SHIBYTE(v497[2]) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_388:
      operator delete(v497[0]);
      if (v544)
        goto LABEL_390;
      goto LABEL_389;
    }
  }
  else
  {
LABEL_382:
    if ((SHIBYTE(v614[2]) & 0x80000000) == 0)
      goto LABEL_383;
  }
  operator delete(v614[0]);
  if (SHIBYTE(v497[2]) < 0)
    goto LABEL_388;
LABEL_384:
  if (v544)
    goto LABEL_390;
LABEL_389:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_390:
  v249 = *(void **)a2;
  v248 = *(std::__shared_weak_count **)(a2 + 8);
  v529 = *(void **)a2;
  v530 = v248;
  if (v248)
  {
    v250 = (unint64_t *)&v248->__shared_owners_;
    do
      v251 = __ldxr(v250);
    while (__stxr(v251 + 1, v250));
  }
  v253 = *a3;
  v252 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v254 = *a3 + 224;
  else
    v254 = 0;
  v527 = v254;
  v528 = v252;
  if (v252)
  {
    v255 = (unint64_t *)&v252->__shared_owners_;
    do
      v256 = __ldxr(v255);
    while (__stxr(v256 + 1, v255));
  }
  if (*(char *)(v254 + 31) < 0)
  {
    sub_20E860C04(v614, *(void **)(v254 + 8), *(_QWORD *)(v254 + 16));
  }
  else
  {
    v257 = *(_OWORD *)(v254 + 8);
    v614[2] = *(void **)(v254 + 24);
    *(_OWORD *)v614 = v257;
  }
  if (*(char *)(v253 + 279) < 0)
  {
    sub_20E860C04(v613, *(void **)(v253 + 256), *(_QWORD *)(v253 + 264));
  }
  else
  {
    *(_OWORD *)v613 = *(_OWORD *)(v253 + 256);
    v613[2] = *(void **)(v253 + 272);
  }
  *(_QWORD *)&v623 = v249;
  *((_QWORD *)&v623 + 1) = v248;
  v530 = 0;
  v529 = 0;
  *(_QWORD *)&v621 = v254;
  *((_QWORD *)&v621 + 1) = v252;
  if (v252)
  {
    v258 = (unint64_t *)&v252->__shared_owners_;
    do
      v259 = __ldxr(v258);
    while (__stxr(v259 + 1, v258));
  }
  if (SHIBYTE(v614[2]) < 0)
  {
    sub_20E860C04(v514, v614[0], (unint64_t)v614[1]);
  }
  else
  {
    *(_OWORD *)v514 = *(_OWORD *)v614;
    v514[2] = v614[2];
  }
  if (SHIBYTE(v613[2]) < 0)
  {
    sub_20E860C04(v497, v613[0], (unint64_t)v613[1]);
  }
  else
  {
    *(_OWORD *)v497 = *(_OWORD *)v613;
    v497[2] = v613[2];
  }
  *(void **)((char *)v624 + 7) = *(void **)((char *)&v614[1] + 7);
  v260 = v614[0];
  v261 = v614[1];
  HIBYTE(v624[0]) = HIBYTE(v614[1]);
  v262 = HIBYTE(v614[2]);
  memset(v614, 0, 24);
  *(_QWORD *)&v615 = v261;
  *(_QWORD *)((char *)&v615 + 7) = *(_QWORD *)((char *)v624 + 7);
  *(_QWORD *)((char *)v624 + 7) = 0;
  v624[0] = 0;
  *(_QWORD *)&v617 = v249;
  *((_QWORD *)&v617 + 1) = v248;
  if (v248)
  {
    v263 = (unint64_t *)&v248->__shared_owners_;
    do
      v264 = __ldxr(v263);
    while (__stxr(v264 + 1, v263));
  }
  v265 = operator new();
  *(_QWORD *)&v616 = v615;
  *(_QWORD *)((char *)&v616 + 7) = *(_QWORD *)((char *)&v615 + 7);
  *(_QWORD *)&v615 = 0;
  *(_QWORD *)((char *)&v615 + 7) = 0;
  v266 = v617;
  v617 = 0uLL;
  *(_BYTE *)(v265 + 8) = 1;
  *(_QWORD *)(v265 + 32) = 0;
  *(_QWORD *)(v265 + 40) = 0;
  *(_QWORD *)v265 = &off_24C9E7CE8;
  *(_QWORD *)(v265 + 16) = &unk_24C9E7D60;
  *(_QWORD *)(v265 + 24) = &unk_24C9E7DA0;
  v267 = v616;
  *(_QWORD *)(v265 + 63) = *(_QWORD *)((char *)&v616 + 7);
  *(_QWORD *)(v265 + 48) = v260;
  *(_QWORD *)(v265 + 56) = v267;
  *(_BYTE *)(v265 + 71) = v262;
  *(_QWORD *)&v616 = 0;
  *(_QWORD *)((char *)&v616 + 7) = 0;
  *(_OWORD *)(v265 + 72) = v266;
  v619[0] = 0uLL;
  v268 = (_QWORD *)operator new();
  *v268 = &off_24C9E7E98;
  v268[1] = v254;
  v268[2] = v252;
  v621 = 0uLL;
  *(_QWORD *)(v265 + 144) = 0;
  *(_QWORD *)(v265 + 88) = v268;
  *(_QWORD *)(v265 + 96) = v265 + 96;
  *(_QWORD *)(v265 + 104) = v265 + 96;
  *(_QWORD *)(v265 + 112) = 0;
  *(_QWORD *)(v265 + 120) = v265 + 120;
  *(_QWORD *)(v265 + 128) = v265 + 120;
  *(_QWORD *)(v265 + 136) = 0;
  if (!*(_QWORD *)(v265 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v269 = (std::__shared_weak_count *)operator new();
  v269->__shared_owners_ = 0;
  v270 = (unint64_t *)&v269->__shared_owners_;
  v269->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8388;
  v269->__shared_weak_owners_ = 0;
  v269[1].__vftable = (std::__shared_weak_count_vtbl *)v265;
  v271 = *(std::__shared_weak_count **)(v265 + 40);
  if (v271)
  {
    if (v271->__shared_owners_ != -1)
      goto LABEL_432;
    do
      v272 = __ldxr(v270);
    while (__stxr(v272 + 1, v270));
    v273 = (unint64_t *)&v269->__shared_weak_owners_;
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
    *(_QWORD *)(v265 + 32) = v265;
    *(_QWORD *)(v265 + 40) = v269;
    std::__shared_weak_count::__release_weak(v271);
  }
  else
  {
    do
      v275 = __ldxr(v270);
    while (__stxr(v275 + 1, v270));
    v276 = (unint64_t *)&v269->__shared_weak_owners_;
    do
      v277 = __ldxr(v276);
    while (__stxr(v277 + 1, v276));
    *(_QWORD *)(v265 + 32) = v265;
    *(_QWORD *)(v265 + 40) = v269;
  }
  do
    v278 = __ldaxr(v270);
  while (__stlxr(v278 - 1, v270));
  if (!v278)
  {
    ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
    std::__shared_weak_count::__release_weak(v269);
  }
LABEL_432:
  v279 = (std::__shared_weak_count *)*((_QWORD *)&v619[0] + 1);
  if (*((_QWORD *)&v619[0] + 1))
  {
    v280 = (unint64_t *)(*((_QWORD *)&v619[0] + 1) + 8);
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  *(_QWORD *)&v619[0] = v265;
  *((_QWORD *)&v619[0] + 1) = v269;
  v282 = (std::__shared_weak_count *)*((_QWORD *)&v617 + 1);
  if (*((_QWORD *)&v617 + 1))
  {
    v283 = (unint64_t *)(*((_QWORD *)&v617 + 1) + 8);
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v285 = v623;
  v623 = 0uLL;
  *(_OWORD *)&__src[1] = *(_OWORD *)v514;
  __src[0] = &off_24C9E6128;
  v532 = v514[2];
  memset(v514, 0, sizeof(v514));
  v533 = *(_OWORD *)v497;
  v286 = v497[2];
  memset(v497, 0, sizeof(v497));
  v535 = v285;
  v617 = 0uLL;
  v287 = v619[0];
  v534 = v286;
  v536 = v619[0];
  v619[0] = 0uLL;
  if (*((_QWORD *)&v536 + 1))
  {
    v288 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 16);
    do
      v289 = __ldxr(v288);
    while (__stxr(v289 + 1, v288));
  }
  v537 = &off_24C9CC400;
  v290 = operator new();
  *(_QWORD *)v290 = &off_24C9E83D8;
  *(_OWORD *)(v290 + 8) = v287;
  *(_QWORD *)&v538 = v290;
  v292 = *((_QWORD *)&v536 + 1);
  v291 = v536;
  if (!*((_QWORD *)&v536 + 1))
  {
    *((_QWORD *)&v538 + 1) = v536;
    v539 = 0;
    if ((_QWORD)v536)
      v296 = v536 + 16;
    else
      v296 = 0;
    goto LABEL_462;
  }
  v293 = (unint64_t *)(*((_QWORD *)&v536 + 1) + 16);
  do
    v294 = __ldxr(v293);
  while (__stxr(v294 + 1, v293));
  v295 = *((_QWORD *)&v536 + 1);
  *((_QWORD *)&v538 + 1) = v291;
  v539 = v292;
  if ((_QWORD)v536)
    v296 = v536 + 16;
  else
    v296 = 0;
  if (!*((_QWORD *)&v536 + 1))
  {
    v291 = v536;
LABEL_462:
    v299 = 0;
    v540 = &off_24C9E6158;
    v541 = v296;
    goto LABEL_463;
  }
  v297 = (unint64_t *)(*((_QWORD *)&v536 + 1) + 16);
  do
    v298 = __ldxr(v297);
  while (__stxr(v298 + 1, v297));
  v299 = *((_QWORD *)&v536 + 1);
  v291 = v536;
  v540 = &off_24C9E6158;
  *(_QWORD *)&v541 = v296;
  *((_QWORD *)&v541 + 1) = v295;
  if (*((_QWORD *)&v536 + 1))
  {
    v300 = (unint64_t *)(*((_QWORD *)&v536 + 1) + 16);
    do
      v301 = __ldxr(v300);
    while (__stxr(v301 + 1, v300));
  }
LABEL_463:
  if (v291)
    v302 = v291 + 24;
  else
    v302 = 0;
  v542 = &off_24C9B2310;
  *(_QWORD *)&v543 = v302;
  *((_QWORD *)&v543 + 1) = v299;
  if ((SHIBYTE(v497[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v514[2]) & 0x80000000) == 0)
      goto LABEL_468;
LABEL_471:
    operator delete(v514[0]);
    v303 = (std::__shared_weak_count *)*((_QWORD *)&v621 + 1);
    if (!*((_QWORD *)&v621 + 1))
      goto LABEL_476;
    goto LABEL_472;
  }
  operator delete(v497[0]);
  if (SHIBYTE(v514[2]) < 0)
    goto LABEL_471;
LABEL_468:
  v303 = (std::__shared_weak_count *)*((_QWORD *)&v621 + 1);
  if (!*((_QWORD *)&v621 + 1))
    goto LABEL_476;
LABEL_472:
  v304 = (unint64_t *)&v303->__shared_owners_;
  do
    v305 = __ldaxr(v304);
  while (__stlxr(v305 - 1, v304));
  if (!v305)
  {
    ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
    std::__shared_weak_count::__release_weak(v303);
  }
LABEL_476:
  v306 = (std::__shared_weak_count *)*((_QWORD *)&v623 + 1);
  if (!*((_QWORD *)&v623 + 1))
    goto LABEL_480;
  v307 = (unint64_t *)(*((_QWORD *)&v623 + 1) + 8);
  do
    v308 = __ldaxr(v307);
  while (__stlxr(v308 - 1, v307));
  if (!v308)
  {
    ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
    std::__shared_weak_count::__release_weak(v306);
    if ((SHIBYTE(v613[2]) & 0x80000000) == 0)
    {
LABEL_481:
      if ((SHIBYTE(v614[2]) & 0x80000000) == 0)
        goto LABEL_482;
LABEL_486:
      operator delete(v614[0]);
      if (v527)
        goto LABEL_488;
      goto LABEL_487;
    }
  }
  else
  {
LABEL_480:
    if ((SHIBYTE(v613[2]) & 0x80000000) == 0)
      goto LABEL_481;
  }
  operator delete(v613[0]);
  if (SHIBYTE(v614[2]) < 0)
    goto LABEL_486;
LABEL_482:
  if (v527)
    goto LABEL_488;
LABEL_487:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_488:
  v310 = *(void **)a2;
  v309 = *(std::__shared_weak_count **)(a2 + 8);
  v512 = *(void **)a2;
  v513 = v309;
  if (v309)
  {
    v311 = (unint64_t *)&v309->__shared_owners_;
    do
      v312 = __ldxr(v311);
    while (__stxr(v312 + 1, v311));
  }
  v314 = *a3;
  v313 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v315 = *a3 + 280;
  else
    v315 = 0;
  v510 = v315;
  v511 = v313;
  if (v313)
  {
    v316 = (unint64_t *)&v313->__shared_owners_;
    do
      v317 = __ldxr(v316);
    while (__stxr(v317 + 1, v316));
  }
  if (*(char *)(v315 + 31) < 0)
  {
    sub_20E860C04(v613, *(void **)(v315 + 8), *(_QWORD *)(v315 + 16));
  }
  else
  {
    v318 = *(_OWORD *)(v315 + 8);
    v613[2] = *(void **)(v315 + 24);
    *(_OWORD *)v613 = v318;
  }
  if (*(char *)(v314 + 335) < 0)
  {
    sub_20E860C04(v619, *(void **)(v314 + 312), *(_QWORD *)(v314 + 320));
  }
  else
  {
    v619[0] = *(_OWORD *)(v314 + 312);
    *(_QWORD *)&v619[1] = *(_QWORD *)(v314 + 328);
  }
  *(_QWORD *)&v621 = v310;
  *((_QWORD *)&v621 + 1) = v309;
  v512 = 0;
  v513 = 0;
  *(_QWORD *)&v616 = v315;
  *((_QWORD *)&v616 + 1) = v313;
  if (v313)
  {
    v319 = (unint64_t *)&v313->__shared_owners_;
    do
      v320 = __ldxr(v319);
    while (__stxr(v320 + 1, v319));
  }
  if (SHIBYTE(v613[2]) < 0)
  {
    sub_20E860C04(v497, v613[0], (unint64_t)v613[1]);
  }
  else
  {
    *(_OWORD *)v497 = *(_OWORD *)v613;
    v497[2] = v613[2];
  }
  v494 = a1;
  if (SBYTE7(v619[1]) < 0)
  {
    sub_20E860C04(v614, *(void **)&v619[0], *((unint64_t *)&v619[0] + 1));
  }
  else
  {
    *(_OWORD *)v614 = v619[0];
    v614[2] = *(void **)&v619[1];
  }
  *(void **)((char *)v622 + 7) = *(void **)((char *)&v613[1] + 7);
  v321 = v613[0];
  v322 = v613[1];
  HIBYTE(v622[0]) = HIBYTE(v613[1]);
  v323 = HIBYTE(v613[2]);
  memset(v613, 0, 24);
  v624[0] = v322;
  *(_QWORD *)((char *)v624 + 7) = *(_QWORD *)((char *)v622 + 7);
  *(_QWORD *)((char *)v622 + 7) = 0;
  v622[0] = 0;
  *(_QWORD *)&v623 = v310;
  *((_QWORD *)&v623 + 1) = v309;
  if (v309)
  {
    v324 = (unint64_t *)&v309->__shared_owners_;
    do
      v325 = __ldxr(v324);
    while (__stxr(v325 + 1, v324));
  }
  v326 = operator new();
  *(_QWORD *)&v615 = v624[0];
  *(_QWORD *)((char *)&v615 + 7) = *(_QWORD *)((char *)v624 + 7);
  v624[0] = 0;
  *(_QWORD *)((char *)v624 + 7) = 0;
  v327 = v623;
  v623 = 0uLL;
  *(_BYTE *)(v326 + 8) = 1;
  *(_QWORD *)(v326 + 32) = 0;
  *(_QWORD *)(v326 + 40) = 0;
  *(_QWORD *)v326 = &off_24C9E8450;
  *(_QWORD *)(v326 + 16) = &unk_24C9E84C8;
  *(_QWORD *)(v326 + 24) = &unk_24C9E8508;
  v328 = v615;
  *(_QWORD *)(v326 + 63) = *(_QWORD *)((char *)&v615 + 7);
  *(_QWORD *)(v326 + 48) = v321;
  *(_QWORD *)(v326 + 56) = v328;
  *(_BYTE *)(v326 + 71) = v323;
  *(_QWORD *)&v615 = 0;
  *(_QWORD *)((char *)&v615 + 7) = 0;
  *(_OWORD *)(v326 + 72) = v327;
  v617 = 0uLL;
  v329 = (_QWORD *)operator new();
  *v329 = &off_24C9E85F0;
  v329[1] = v315;
  v329[2] = v313;
  v616 = 0uLL;
  *(_QWORD *)(v326 + 144) = 0;
  *(_QWORD *)(v326 + 88) = v329;
  *(_QWORD *)(v326 + 96) = v326 + 96;
  *(_QWORD *)(v326 + 104) = v326 + 96;
  *(_QWORD *)(v326 + 112) = 0;
  *(_QWORD *)(v326 + 120) = v326 + 120;
  *(_QWORD *)(v326 + 128) = v326 + 120;
  *(_QWORD *)(v326 + 136) = 0;
  if (!*(_QWORD *)(v326 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v330 = (std::__shared_weak_count *)operator new();
  v330->__shared_owners_ = 0;
  v331 = (unint64_t *)&v330->__shared_owners_;
  v330->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8A90;
  v330->__shared_weak_owners_ = 0;
  v330[1].__vftable = (std::__shared_weak_count_vtbl *)v326;
  v332 = *(std::__shared_weak_count **)(v326 + 40);
  if (v332)
  {
    if (v332->__shared_owners_ != -1)
      goto LABEL_530;
    do
      v333 = __ldxr(v331);
    while (__stxr(v333 + 1, v331));
    v334 = (unint64_t *)&v330->__shared_weak_owners_;
    do
      v335 = __ldxr(v334);
    while (__stxr(v335 + 1, v334));
    *(_QWORD *)(v326 + 32) = v326;
    *(_QWORD *)(v326 + 40) = v330;
    std::__shared_weak_count::__release_weak(v332);
  }
  else
  {
    do
      v336 = __ldxr(v331);
    while (__stxr(v336 + 1, v331));
    v337 = (unint64_t *)&v330->__shared_weak_owners_;
    do
      v338 = __ldxr(v337);
    while (__stxr(v338 + 1, v337));
    *(_QWORD *)(v326 + 32) = v326;
    *(_QWORD *)(v326 + 40) = v330;
  }
  do
    v339 = __ldaxr(v331);
  while (__stlxr(v339 - 1, v331));
  if (!v339)
  {
    ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
    std::__shared_weak_count::__release_weak(v330);
  }
LABEL_530:
  v340 = (std::__shared_weak_count *)*((_QWORD *)&v617 + 1);
  if (*((_QWORD *)&v617 + 1))
  {
    v341 = (unint64_t *)(*((_QWORD *)&v617 + 1) + 8);
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
  *(_QWORD *)&v617 = v326;
  *((_QWORD *)&v617 + 1) = v330;
  v343 = (std::__shared_weak_count *)*((_QWORD *)&v623 + 1);
  if (*((_QWORD *)&v623 + 1))
  {
    v344 = (unint64_t *)(*((_QWORD *)&v623 + 1) + 8);
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  v346 = v621;
  v621 = 0uLL;
  *(_OWORD *)&v514[1] = *(_OWORD *)v497;
  v514[0] = &off_24C9E6190;
  v515 = v497[2];
  memset(v497, 0, sizeof(v497));
  v516 = *(_OWORD *)v614;
  v347 = v614[2];
  memset(v614, 0, 24);
  v518 = v346;
  v623 = 0uLL;
  v348 = v617;
  v517 = v347;
  v519 = v617;
  v617 = 0uLL;
  if (*((_QWORD *)&v519 + 1))
  {
    v349 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 16);
    do
      v350 = __ldxr(v349);
    while (__stxr(v350 + 1, v349));
  }
  v520 = &off_24C9E61C0;
  v351 = operator new();
  *(_QWORD *)v351 = &off_24C9E8AE0;
  *(_OWORD *)(v351 + 8) = v348;
  *(_QWORD *)&v521 = v351;
  v353 = *((_QWORD *)&v519 + 1);
  v352 = v519;
  if (!*((_QWORD *)&v519 + 1))
  {
    *((_QWORD *)&v521 + 1) = v519;
    v522 = 0;
    if ((_QWORD)v519)
      v357 = v519 + 16;
    else
      v357 = 0;
    goto LABEL_560;
  }
  v354 = (unint64_t *)(*((_QWORD *)&v519 + 1) + 16);
  do
    v355 = __ldxr(v354);
  while (__stxr(v355 + 1, v354));
  v356 = *((_QWORD *)&v519 + 1);
  *((_QWORD *)&v521 + 1) = v352;
  v522 = v353;
  if ((_QWORD)v519)
    v357 = v519 + 16;
  else
    v357 = 0;
  if (!*((_QWORD *)&v519 + 1))
  {
    v352 = v519;
LABEL_560:
    v360 = 0;
    v523 = &off_24C9B2520;
    v524 = v357;
    goto LABEL_561;
  }
  v358 = (unint64_t *)(*((_QWORD *)&v519 + 1) + 16);
  do
    v359 = __ldxr(v358);
  while (__stxr(v359 + 1, v358));
  v360 = *((_QWORD *)&v519 + 1);
  v352 = v519;
  v523 = &off_24C9B2520;
  *(_QWORD *)&v524 = v357;
  *((_QWORD *)&v524 + 1) = v356;
  if (*((_QWORD *)&v519 + 1))
  {
    v361 = (unint64_t *)(*((_QWORD *)&v519 + 1) + 16);
    do
      v362 = __ldxr(v361);
    while (__stxr(v362 + 1, v361));
  }
LABEL_561:
  if (v352)
    v363 = v352 + 24;
  else
    v363 = 0;
  v525 = &off_24C9B2310;
  *(_QWORD *)&v526 = v363;
  *((_QWORD *)&v526 + 1) = v360;
  if ((SHIBYTE(v614[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v497[2]) & 0x80000000) == 0)
      goto LABEL_566;
LABEL_569:
    operator delete(v497[0]);
    v364 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
    if (!*((_QWORD *)&v616 + 1))
      goto LABEL_574;
    goto LABEL_570;
  }
  operator delete(v614[0]);
  if (SHIBYTE(v497[2]) < 0)
    goto LABEL_569;
LABEL_566:
  v364 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
  if (!*((_QWORD *)&v616 + 1))
    goto LABEL_574;
LABEL_570:
  v365 = (unint64_t *)&v364->__shared_owners_;
  do
    v366 = __ldaxr(v365);
  while (__stlxr(v366 - 1, v365));
  if (!v366)
  {
    ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
    std::__shared_weak_count::__release_weak(v364);
  }
LABEL_574:
  v367 = (std::__shared_weak_count *)*((_QWORD *)&v621 + 1);
  if (!*((_QWORD *)&v621 + 1))
    goto LABEL_578;
  v368 = (unint64_t *)(*((_QWORD *)&v621 + 1) + 8);
  do
    v369 = __ldaxr(v368);
  while (__stlxr(v369 - 1, v368));
  if (!v369)
  {
    ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
    std::__shared_weak_count::__release_weak(v367);
    if ((SBYTE7(v619[1]) & 0x80000000) == 0)
    {
LABEL_579:
      if ((SHIBYTE(v613[2]) & 0x80000000) == 0)
        goto LABEL_580;
LABEL_584:
      operator delete(v613[0]);
      if (v510)
        goto LABEL_586;
      goto LABEL_585;
    }
  }
  else
  {
LABEL_578:
    if ((SBYTE7(v619[1]) & 0x80000000) == 0)
      goto LABEL_579;
  }
  operator delete(*(void **)&v619[0]);
  if (SHIBYTE(v613[2]) < 0)
    goto LABEL_584;
LABEL_580:
  if (v510)
    goto LABEL_586;
LABEL_585:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_586:
  v370 = *(void **)a2;
  v371 = *(_QWORD *)(a2 + 8);
  if (v371)
  {
    v372 = (unint64_t *)(v371 + 8);
    do
      v373 = __ldxr(v372);
    while (__stxr(v373 + 1, v372));
  }
  v374 = *a3;
  v375 = a3[1];
  if (*a3)
    v376 = *a3 + 336;
  else
    v376 = 0;
  v495 = v376;
  v496 = (std::__shared_weak_count *)a3[1];
  if (v375)
  {
    v377 = (unint64_t *)(v375 + 8);
    do
      v378 = __ldxr(v377);
    while (__stxr(v378 + 1, v377));
  }
  if (*(char *)(v376 + 31) < 0)
  {
    sub_20E860C04(v619, *(void **)(v376 + 8), *(_QWORD *)(v376 + 16));
  }
  else
  {
    v379 = *(_OWORD *)(v376 + 8);
    *(_QWORD *)&v619[1] = *(_QWORD *)(v376 + 24);
    v619[0] = v379;
  }
  if (*(char *)(v374 + 391) < 0)
  {
    sub_20E860C04(&v617, *(void **)(v374 + 368), *(_QWORD *)(v374 + 376));
  }
  else
  {
    v617 = *(_OWORD *)(v374 + 368);
    v618 = *(void **)(v374 + 384);
  }
  *(_QWORD *)&v616 = v370;
  *((_QWORD *)&v616 + 1) = v371;
  *(_QWORD *)&v615 = v376;
  *((_QWORD *)&v615 + 1) = v375;
  if (v375)
  {
    v380 = (unint64_t *)(v375 + 8);
    do
      v381 = __ldxr(v380);
    while (__stxr(v381 + 1, v380));
  }
  if (SBYTE7(v619[1]) < 0)
  {
    sub_20E860C04(v614, *(void **)&v619[0], *((unint64_t *)&v619[0] + 1));
  }
  else
  {
    *(_OWORD *)v614 = v619[0];
    v614[2] = *(void **)&v619[1];
  }
  if (SHIBYTE(v618) < 0)
  {
    sub_20E860C04(v613, (void *)v617, *((unint64_t *)&v617 + 1));
  }
  else
  {
    *(_OWORD *)v613 = v617;
    v613[2] = v618;
  }
  *(_QWORD *)((char *)v620 + 7) = *(_QWORD *)((char *)v619 + 15);
  v382 = v619[0];
  HIBYTE(v620[0]) = HIBYTE(v619[0]);
  v383 = BYTE7(v619[1]);
  memset(v619, 0, 24);
  *((_QWORD *)&v621 + 1) = v371;
  v622[0] = *((_QWORD *)&v382 + 1);
  *(_QWORD *)((char *)v622 + 7) = *(_QWORD *)((char *)v620 + 7);
  *(_QWORD *)((char *)v620 + 7) = 0;
  v620[0] = 0;
  *(_QWORD *)&v621 = v370;
  if (v371)
  {
    v384 = (unint64_t *)(v371 + 8);
    do
      v385 = __ldxr(v384);
    while (__stxr(v385 + 1, v384));
  }
  v386 = operator new();
  v624[0] = v622[0];
  *(_QWORD *)((char *)v624 + 7) = *(_QWORD *)((char *)v622 + 7);
  v622[0] = 0;
  *(_QWORD *)((char *)v622 + 7) = 0;
  v387 = v621;
  v621 = 0uLL;
  *(_BYTE *)(v386 + 8) = 1;
  *(_QWORD *)(v386 + 32) = 0;
  *(_QWORD *)(v386 + 40) = 0;
  *(_QWORD *)v386 = &off_24C9E8B58;
  *(_QWORD *)(v386 + 16) = &unk_24C9E8BD0;
  *(_QWORD *)(v386 + 24) = &unk_24C9E8C10;
  v388 = v624[0];
  *(_QWORD *)(v386 + 63) = *(_QWORD *)((char *)v624 + 7);
  *(_QWORD *)(v386 + 48) = v382;
  *(_QWORD *)(v386 + 56) = v388;
  *(_BYTE *)(v386 + 71) = v383;
  v624[0] = 0;
  *(_QWORD *)((char *)v624 + 7) = 0;
  *(_OWORD *)(v386 + 72) = v387;
  v623 = 0uLL;
  v389 = (_QWORD *)operator new();
  *v389 = &off_24C9E8CF8;
  v389[1] = v376;
  v389[2] = v375;
  v615 = 0uLL;
  *(_QWORD *)(v386 + 144) = 0;
  *(_QWORD *)(v386 + 88) = v389;
  *(_QWORD *)(v386 + 96) = v386 + 96;
  *(_QWORD *)(v386 + 104) = v386 + 96;
  *(_QWORD *)(v386 + 112) = 0;
  *(_QWORD *)(v386 + 120) = v386 + 120;
  *(_QWORD *)(v386 + 128) = v386 + 120;
  *(_QWORD *)(v386 + 136) = 0;
  if (!*(_QWORD *)(v386 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v390 = (std::__shared_weak_count *)operator new();
  v390->__shared_owners_ = 0;
  v391 = (unint64_t *)&v390->__shared_owners_;
  v390->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9198;
  v390->__shared_weak_owners_ = 0;
  v390[1].__vftable = (std::__shared_weak_count_vtbl *)v386;
  v392 = *(std::__shared_weak_count **)(v386 + 40);
  if (v392)
  {
    if (v392->__shared_owners_ != -1)
      goto LABEL_628;
    do
      v393 = __ldxr(v391);
    while (__stxr(v393 + 1, v391));
    v394 = (unint64_t *)&v390->__shared_weak_owners_;
    do
      v395 = __ldxr(v394);
    while (__stxr(v395 + 1, v394));
    *(_QWORD *)(v386 + 32) = v386;
    *(_QWORD *)(v386 + 40) = v390;
    std::__shared_weak_count::__release_weak(v392);
  }
  else
  {
    do
      v396 = __ldxr(v391);
    while (__stxr(v396 + 1, v391));
    v397 = (unint64_t *)&v390->__shared_weak_owners_;
    do
      v398 = __ldxr(v397);
    while (__stxr(v398 + 1, v397));
    *(_QWORD *)(v386 + 32) = v386;
    *(_QWORD *)(v386 + 40) = v390;
  }
  do
    v399 = __ldaxr(v391);
  while (__stlxr(v399 - 1, v391));
  if (!v399)
  {
    ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
    std::__shared_weak_count::__release_weak(v390);
  }
LABEL_628:
  v400 = (std::__shared_weak_count *)*((_QWORD *)&v623 + 1);
  if (*((_QWORD *)&v623 + 1))
  {
    v401 = (unint64_t *)(*((_QWORD *)&v623 + 1) + 8);
    do
      v402 = __ldaxr(v401);
    while (__stlxr(v402 - 1, v401));
    if (!v402)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v400);
    }
  }
  *(_QWORD *)&v623 = v386;
  *((_QWORD *)&v623 + 1) = v390;
  v403 = (std::__shared_weak_count *)*((_QWORD *)&v621 + 1);
  if (*((_QWORD *)&v621 + 1))
  {
    v404 = (unint64_t *)(*((_QWORD *)&v621 + 1) + 8);
    do
      v405 = __ldaxr(v404);
    while (__stlxr(v405 - 1, v404));
    if (!v405)
    {
      ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
      std::__shared_weak_count::__release_weak(v403);
    }
  }
  v406 = v616;
  v616 = 0uLL;
  v497[0] = &off_24C9E61F8;
  *(_OWORD *)&v497[1] = *(_OWORD *)v614;
  v498 = v614[2];
  memset(v614, 0, 24);
  v499 = *(_OWORD *)v613;
  v500 = v613[2];
  memset(v613, 0, 24);
  v501 = v406;
  v621 = 0uLL;
  v407 = v623;
  v502 = v623;
  v623 = 0uLL;
  if (*((_QWORD *)&v502 + 1))
  {
    v408 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 16);
    do
      v409 = __ldxr(v408);
    while (__stxr(v409 + 1, v408));
  }
  v503 = &off_24C9CC438;
  v410 = operator new();
  *(_QWORD *)v410 = &off_24C9E91E8;
  *(_OWORD *)(v410 + 8) = v407;
  *(_QWORD *)&v504 = v410;
  v412 = *((_QWORD *)&v502 + 1);
  v411 = v502;
  if (!*((_QWORD *)&v502 + 1))
  {
    *((_QWORD *)&v504 + 1) = v502;
    v505 = 0;
    if ((_QWORD)v502)
      v416 = v502 + 16;
    else
      v416 = 0;
    goto LABEL_658;
  }
  v413 = (unint64_t *)(*((_QWORD *)&v502 + 1) + 16);
  do
    v414 = __ldxr(v413);
  while (__stxr(v414 + 1, v413));
  v415 = *((_QWORD *)&v502 + 1);
  *((_QWORD *)&v504 + 1) = v411;
  v505 = v412;
  if ((_QWORD)v502)
    v416 = v502 + 16;
  else
    v416 = 0;
  if (!*((_QWORD *)&v502 + 1))
  {
    v411 = v502;
LABEL_658:
    v419 = 0;
    v506 = &off_24C9B2520;
    v507 = v416;
    goto LABEL_659;
  }
  v417 = (unint64_t *)(*((_QWORD *)&v502 + 1) + 16);
  do
    v418 = __ldxr(v417);
  while (__stxr(v418 + 1, v417));
  v419 = *((_QWORD *)&v502 + 1);
  v411 = v502;
  v506 = &off_24C9B2520;
  *(_QWORD *)&v507 = v416;
  *((_QWORD *)&v507 + 1) = v415;
  if (*((_QWORD *)&v502 + 1))
  {
    v420 = (unint64_t *)(*((_QWORD *)&v502 + 1) + 16);
    do
      v421 = __ldxr(v420);
    while (__stxr(v421 + 1, v420));
  }
LABEL_659:
  if (v411)
    v422 = v411 + 24;
  else
    v422 = 0;
  v508 = &off_24C9B2310;
  *(_QWORD *)&v509 = v422;
  *((_QWORD *)&v509 + 1) = v419;
  if ((SHIBYTE(v613[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v614[2]) & 0x80000000) == 0)
      goto LABEL_664;
LABEL_667:
    operator delete(v614[0]);
    v423 = (std::__shared_weak_count *)*((_QWORD *)&v615 + 1);
    if (!*((_QWORD *)&v615 + 1))
      goto LABEL_672;
    goto LABEL_668;
  }
  operator delete(v613[0]);
  if (SHIBYTE(v614[2]) < 0)
    goto LABEL_667;
LABEL_664:
  v423 = (std::__shared_weak_count *)*((_QWORD *)&v615 + 1);
  if (!*((_QWORD *)&v615 + 1))
    goto LABEL_672;
LABEL_668:
  v424 = (unint64_t *)&v423->__shared_owners_;
  do
    v425 = __ldaxr(v424);
  while (__stlxr(v425 - 1, v424));
  if (!v425)
  {
    ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
    std::__shared_weak_count::__release_weak(v423);
  }
LABEL_672:
  v426 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
  if (!*((_QWORD *)&v616 + 1))
    goto LABEL_676;
  v427 = (unint64_t *)(*((_QWORD *)&v616 + 1) + 8);
  do
    v428 = __ldaxr(v427);
  while (__stlxr(v428 - 1, v427));
  if (!v428)
  {
    ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
    std::__shared_weak_count::__release_weak(v426);
    if ((SHIBYTE(v618) & 0x80000000) == 0)
    {
LABEL_677:
      if ((SBYTE7(v619[1]) & 0x80000000) == 0)
        goto LABEL_678;
      goto LABEL_682;
    }
  }
  else
  {
LABEL_676:
    if ((SHIBYTE(v618) & 0x80000000) == 0)
      goto LABEL_677;
  }
  operator delete((void *)v617);
  if ((SBYTE7(v619[1]) & 0x80000000) == 0)
  {
LABEL_678:
    if (v495)
      goto LABEL_684;
    goto LABEL_683;
  }
LABEL_682:
  operator delete(*(void **)&v619[0]);
  if (v495)
    goto LABEL_684;
LABEL_683:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_684:
  v429 = operator new();
  *(_QWORD *)v429 = &off_24C9E6068;
  *(_QWORD *)(v429 + 88) = &off_24C9CC340;
  *(_QWORD *)(v429 + 168) = &off_24C9E6098;
  *(_QWORD *)(v429 + 256) = &off_24C9B6B70;
  *(_QWORD *)(v429 + 336) = &off_24C9E60C8;
  *(_QWORD *)(v429 + 424) = &off_24C9CC760;
  *(_QWORD *)(v429 + 504) = &off_24C9E60F8;
  *(_QWORD *)(v429 + 592) = &off_24C9D10A0;
  *(_QWORD *)(v429 + 672) = &off_24C9E6128;
  *(_QWORD *)(v429 + 760) = &off_24C9CC400;
  *(_QWORD *)(v429 + 792) = &off_24C9E6158;
  *(_QWORD *)(v429 + 840) = &off_24C9E6190;
  *(_QWORD *)(v429 + 928) = &off_24C9E61C0;
  *(_QWORD *)(v429 + 1008) = &off_24C9E61F8;
  *(_QWORD *)(v429 + 1096) = &off_24C9CC438;
  v430 = v509;
  *(_QWORD *)(v429 + 24) = v601;
  v431 = v600;
  v600 = 0uLL;
  v601 = 0;
  *(_QWORD *)(v429 + 48) = v603;
  v432 = v602;
  v602 = 0uLL;
  v603 = 0;
  v433 = v604;
  v434 = v605;
  v435 = v607;
  v436 = v610;
  v437 = v612;
  v438 = v586;
  v439 = v587;
  v440 = v594;
  *(_OWORD *)(v429 + 344) = *(_OWORD *)&__p[1];
  v441 = v569;
  v442 = v570;
  v443 = v577;
  *(_OWORD *)(v429 + 536) = v550;
  *(_OWORD *)(v429 + 680) = *(_OWORD *)&__src[1];
  *(_OWORD *)(v429 + 872) = v516;
  *(_OWORD *)(v429 + 1016) = *(_OWORD *)&v497[1];
  v444 = v552;
  v445 = v553;
  v446 = v560;
  *(_OWORD *)(v429 + 8) = v431;
  *(_OWORD *)(v429 + 32) = v432;
  *(_OWORD *)(v429 + 56) = v433;
  *(_OWORD *)(v429 + 72) = v434;
  v447 = v535;
  v448 = v536;
  v449 = v543;
  *(_OWORD *)(v429 + 96) = v435;
  *(_OWORD *)(v429 + 128) = v436;
  *(_OWORD *)(v429 + 152) = v437;
  *(_OWORD *)(v429 + 176) = *(_OWORD *)&v582[1];
  *(_OWORD *)(v429 + 200) = v584;
  v450 = v518;
  v451 = v519;
  v452 = v526;
  *(_OWORD *)(v429 + 224) = v438;
  *(_OWORD *)(v429 + 240) = v439;
  *(_OWORD *)(v429 + 264) = v589;
  *(_OWORD *)(v429 + 296) = v592;
  *(_OWORD *)(v429 + 320) = v440;
  *(_OWORD *)(v429 + 368) = v567;
  *(_OWORD *)(v429 + 392) = v441;
  *(_OWORD *)(v429 + 408) = v442;
  *(_OWORD *)(v429 + 432) = v572;
  *(_OWORD *)(v429 + 464) = v575;
  *(_OWORD *)(v429 + 488) = v443;
  *(_OWORD *)(v429 + 512) = *(_OWORD *)&__dst[1];
  *(_OWORD *)(v429 + 560) = v444;
  *(_OWORD *)(v429 + 576) = v445;
  *(_OWORD *)(v429 + 600) = v555;
  *(_OWORD *)(v429 + 632) = v558;
  *(_OWORD *)(v429 + 656) = v446;
  *(_OWORD *)(v429 + 704) = v533;
  *(_OWORD *)(v429 + 728) = v447;
  *(_OWORD *)(v429 + 744) = v448;
  *(_OWORD *)(v429 + 768) = v538;
  *(_OWORD *)(v429 + 800) = v541;
  *(_OWORD *)(v429 + 824) = v449;
  *(_OWORD *)(v429 + 848) = *(_OWORD *)&v514[1];
  *(_OWORD *)(v429 + 896) = v450;
  *(_OWORD *)(v429 + 912) = v451;
  *(_OWORD *)(v429 + 936) = v521;
  *(_OWORD *)(v429 + 968) = v524;
  *(_OWORD *)(v429 + 992) = v452;
  *(_OWORD *)(v429 + 1040) = v499;
  v453 = v502;
  *(_OWORD *)(v429 + 1064) = v501;
  *(_OWORD *)(v429 + 1080) = v453;
  *(_OWORD *)(v429 + 1104) = v504;
  *(_OWORD *)(v429 + 1136) = v507;
  v604 = 0uLL;
  v605 = 0uLL;
  v454 = v608;
  *((_QWORD *)&v607 + 1) = 0;
  v608 = 0;
  v612 = 0uLL;
  *(_QWORD *)(v429 + 192) = v583;
  v582[1] = 0;
  v582[2] = 0;
  v583 = 0;
  *(_QWORD *)(v429 + 216) = v585;
  v584 = 0uLL;
  v585 = 0;
  v586 = 0uLL;
  v587 = 0uLL;
  *(_QWORD *)(v429 + 280) = v590;
  *((_QWORD *)&v589 + 1) = 0;
  v590 = 0;
  v594 = 0uLL;
  *(_QWORD *)(v429 + 360) = v566;
  __p[1] = 0;
  __p[2] = 0;
  v566 = 0;
  *(_QWORD *)(v429 + 384) = v568;
  v567 = 0uLL;
  v568 = 0;
  v569 = 0uLL;
  v570 = 0uLL;
  v455 = v573;
  *((_QWORD *)&v572 + 1) = 0;
  v573 = 0;
  *(_QWORD *)(v429 + 112) = v454;
  *(_QWORD *)(v429 + 120) = &off_24C9B2520;
  *(_QWORD *)&v607 = 0;
  v610 = 0uLL;
  *(_QWORD *)(v429 + 144) = &off_24C9B2310;
  *(_QWORD *)(v429 + 288) = &off_24C9B2520;
  *(_QWORD *)&v589 = 0;
  v592 = 0uLL;
  *(_QWORD *)(v429 + 312) = &off_24C9B2310;
  *(_QWORD *)(v429 + 448) = v455;
  *(_QWORD *)(v429 + 456) = &off_24C9B2520;
  *(_QWORD *)&v572 = 0;
  v575 = 0uLL;
  *(_QWORD *)(v429 + 480) = &off_24C9B2310;
  v577 = 0uLL;
  *(_QWORD *)(v429 + 528) = v549;
  __dst[1] = 0;
  __dst[2] = 0;
  v549 = 0;
  *(_QWORD *)(v429 + 552) = v551;
  v550 = 0uLL;
  v551 = 0;
  v552 = 0uLL;
  v553 = 0uLL;
  *(_QWORD *)(v429 + 616) = v556;
  *((_QWORD *)&v555 + 1) = 0;
  v556 = 0;
  *(_QWORD *)(v429 + 624) = &off_24C9B2520;
  *(_QWORD *)&v555 = 0;
  v558 = 0uLL;
  *(_QWORD *)(v429 + 648) = &off_24C9B2310;
  v560 = 0uLL;
  *(_QWORD *)(v429 + 696) = v532;
  __src[1] = 0;
  __src[2] = 0;
  v532 = 0;
  *(_QWORD *)(v429 + 720) = v534;
  v533 = 0uLL;
  v534 = 0;
  v535 = 0uLL;
  v536 = 0uLL;
  *(_QWORD *)(v429 + 784) = v539;
  v539 = 0;
  v538 = 0uLL;
  v541 = 0uLL;
  *(_QWORD *)(v429 + 816) = &off_24C9B2310;
  v543 = 0uLL;
  *(_QWORD *)(v429 + 864) = v515;
  v514[1] = 0;
  v514[2] = 0;
  v515 = 0;
  *(_QWORD *)(v429 + 888) = v517;
  v516 = 0uLL;
  v517 = 0;
  v518 = 0uLL;
  v519 = 0uLL;
  *(_QWORD *)(v429 + 952) = v522;
  *((_QWORD *)&v521 + 1) = 0;
  v522 = 0;
  *(_QWORD *)(v429 + 960) = &off_24C9B2520;
  v524 = 0uLL;
  *(_QWORD *)&v521 = 0;
  *(_QWORD *)(v429 + 984) = &off_24C9B2310;
  v526 = 0uLL;
  *(_QWORD *)(v429 + 1032) = v498;
  v497[1] = 0;
  v497[2] = 0;
  v498 = 0;
  *(_QWORD *)(v429 + 1056) = v500;
  v499 = 0uLL;
  v500 = 0;
  v501 = 0uLL;
  v502 = 0uLL;
  *(_QWORD *)(v429 + 1120) = v505;
  *((_QWORD *)&v504 + 1) = 0;
  v505 = 0;
  *(_QWORD *)(v429 + 1128) = &off_24C9B2520;
  v507 = 0uLL;
  *(_QWORD *)&v504 = 0;
  *(_QWORD *)(v429 + 1152) = &off_24C9B2310;
  *(_OWORD *)(v429 + 1160) = v430;
  v509 = 0uLL;
  *v494 = v429;
  sub_20ED91268((uint64_t)v497);
  if (v496)
  {
    v456 = (unint64_t *)&v496->__shared_owners_;
    do
      v457 = __ldaxr(v456);
    while (__stlxr(v457 - 1, v456));
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
      std::__shared_weak_count::__release_weak(v496);
    }
  }
  sub_20ED9144C((uint64_t)v514);
  v458 = v511;
  if (v511)
  {
    v459 = (unint64_t *)&v511->__shared_owners_;
    do
      v460 = __ldaxr(v459);
    while (__stlxr(v460 - 1, v459));
    if (!v460)
    {
      ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
      std::__shared_weak_count::__release_weak(v458);
    }
  }
  v461 = v513;
  if (v513)
  {
    v462 = (unint64_t *)&v513->__shared_owners_;
    do
      v463 = __ldaxr(v462);
    while (__stlxr(v463 - 1, v462));
    if (!v463)
    {
      ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
      std::__shared_weak_count::__release_weak(v461);
    }
  }
  sub_20ED91630((uint64_t)__src);
  v464 = v528;
  if (v528)
  {
    v465 = (unint64_t *)&v528->__shared_owners_;
    do
      v466 = __ldaxr(v465);
    while (__stlxr(v466 - 1, v465));
    if (!v466)
    {
      ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
      std::__shared_weak_count::__release_weak(v464);
    }
  }
  v467 = v530;
  if (v530)
  {
    v468 = (unint64_t *)&v530->__shared_owners_;
    do
      v469 = __ldaxr(v468);
    while (__stlxr(v469 - 1, v468));
    if (!v469)
    {
      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
      std::__shared_weak_count::__release_weak(v467);
    }
  }
  sub_20ED91814((uint64_t)__dst);
  v470 = v545;
  if (v545)
  {
    v471 = (unint64_t *)&v545->__shared_owners_;
    do
      v472 = __ldaxr(v471);
    while (__stlxr(v472 - 1, v471));
    if (!v472)
    {
      ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
      std::__shared_weak_count::__release_weak(v470);
    }
  }
  v473 = v547;
  if (v547)
  {
    v474 = (unint64_t *)&v547->__shared_owners_;
    do
      v475 = __ldaxr(v474);
    while (__stlxr(v475 - 1, v474));
    if (!v475)
    {
      ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
      std::__shared_weak_count::__release_weak(v473);
    }
  }
  sub_20ED919F8((uint64_t)__p);
  v476 = v562;
  if (v562)
  {
    v477 = (unint64_t *)&v562->__shared_owners_;
    do
      v478 = __ldaxr(v477);
    while (__stlxr(v478 - 1, v477));
    if (!v478)
    {
      ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
      std::__shared_weak_count::__release_weak(v476);
    }
  }
  v479 = v564;
  if (v564)
  {
    v480 = (unint64_t *)&v564->__shared_owners_;
    do
      v481 = __ldaxr(v480);
    while (__stlxr(v481 - 1, v480));
    if (!v481)
    {
      ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
      std::__shared_weak_count::__release_weak(v479);
    }
  }
  sub_20ED91BDC((uint64_t)v582);
  v482 = v579;
  if (v579)
  {
    v483 = (unint64_t *)&v579->__shared_owners_;
    do
      v484 = __ldaxr(v483);
    while (__stlxr(v484 - 1, v483));
    if (!v484)
    {
      ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
      std::__shared_weak_count::__release_weak(v482);
    }
  }
  v485 = v581;
  if (v581)
  {
    v486 = (unint64_t *)&v581->__shared_owners_;
    do
      v487 = __ldaxr(v486);
    while (__stlxr(v487 - 1, v486));
    if (!v487)
    {
      ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
      std::__shared_weak_count::__release_weak(v485);
    }
  }
  sub_20ED91DC0((uint64_t)&v599);
  v488 = v596;
  if (v596)
  {
    v489 = (unint64_t *)&v596->__shared_owners_;
    do
      v490 = __ldaxr(v489);
    while (__stlxr(v490 - 1, v489));
    if (!v490)
    {
      ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
      std::__shared_weak_count::__release_weak(v488);
    }
  }
  v491 = v598;
  if (v598)
  {
    v492 = (unint64_t *)&v598->__shared_owners_;
    do
      v493 = __ldaxr(v492);
    while (__stlxr(v493 - 1, v492));
    if (!v493)
    {
      ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
      std::__shared_weak_count::__release_weak(v491);
    }
  }
}

void sub_20ED72678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,void *a51)
{
  uint64_t v51;

  if (SLOBYTE(STACK[0x637]) < 0)
  {
    operator delete((void *)STACK[0x620]);
    sub_20E86665C((uint64_t)&STACK[0x640]);
    sub_20E86665C((uint64_t)&STACK[0x650]);
    if ((*(char *)(v51 - 233) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v51 - 201) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C((uint64_t)&STACK[0x640]);
    sub_20E86665C((uint64_t)&STACK[0x650]);
    if ((*(char *)(v51 - 233) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*(void **)(v51 - 256));
  if ((*(char *)(v51 - 201) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&a21);
    sub_20E86665C((uint64_t)&a23);
    sub_20ED9144C((uint64_t)&a51);
    sub_20E86665C((uint64_t)&a47);
    sub_20E86665C((uint64_t)&a49);
    sub_20ED91630((uint64_t)&STACK[0x220]);
    sub_20E86665C((uint64_t)&STACK[0x200]);
    sub_20E86665C((uint64_t)&STACK[0x210]);
    sub_20ED91814((uint64_t)&STACK[0x2F0]);
    sub_20E86665C((uint64_t)&STACK[0x2D0]);
    sub_20E86665C((uint64_t)&STACK[0x2E0]);
    sub_20ED919F8((uint64_t)&STACK[0x3C0]);
    sub_20E86665C((uint64_t)&STACK[0x3A0]);
    sub_20E86665C((uint64_t)&STACK[0x3B0]);
    sub_20ED91BDC((uint64_t)&STACK[0x490]);
    sub_20E86665C((uint64_t)&STACK[0x470]);
    sub_20E86665C((uint64_t)&STACK[0x480]);
    sub_20ED91DC0((uint64_t)&STACK[0x558]);
    sub_20E86665C((uint64_t)&STACK[0x538]);
    sub_20E86665C((uint64_t)&STACK[0x548]);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*(void **)(v51 - 224));
  goto LABEL_5;
}

void sub_20ED72D00()
{
  void *v0;
  int v1;
  uint64_t v2;

  sub_20E86665C(v2 - 144);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20ED72BF4);
}

void sub_20ED72D1C()
{
  uint64_t v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;

  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    sub_20E86665C(v1);
    sub_20E86665C(v0);
    if ((SLOBYTE(STACK[0x257]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x23F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C(v3 - 256);
        sub_20E86665C(v3 - 224);
        JUMPOUT(0x20ED72E08);
      }
LABEL_4:
      operator delete((void *)STACK[0x228]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v0);
    if ((SLOBYTE(STACK[0x257]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x240]);
  if ((SLOBYTE(STACK[0x23F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20ED72D98()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C(v1 - 224);
  JUMPOUT(0x20ED72E00);
}

void sub_20ED72E88()
{
  void *v0;
  int v1;
  uint64_t v2;

  sub_20E86665C(v2 - 256);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20ED72E08);
}

void sub_20ED72EA4()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x327]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C(v3 - 224);
        sub_20E86665C((uint64_t)&STACK[0x600]);
        JUMPOUT(0x20ED72F90);
      }
LABEL_4:
      operator delete((void *)STACK[0x2F8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x327]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x310]);
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20ED72F20()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x600]);
  JUMPOUT(0x20ED72F88);
}

void sub_20ED73010()
{
  void *v0;
  int v1;
  uint64_t v2;

  sub_20E86665C(v2 - 224);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20ED72F90);
}

void sub_20ED7302C()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x3F7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x3DF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x600]);
        sub_20E86665C((uint64_t)&STACK[0x620]);
        JUMPOUT(0x20ED73118);
      }
LABEL_4:
      operator delete((void *)STACK[0x3C8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x3F7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x3E0]);
  if ((SLOBYTE(STACK[0x3DF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20ED730A8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x620]);
  JUMPOUT(0x20ED73110);
}

void sub_20ED73198()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x600]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20ED73118);
}

void sub_20ED731B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  va_list va;

  va_start(va, a16);
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    sub_20E86665C(v18);
    sub_20E86665C(v17);
    if ((SLOBYTE(STACK[0x4C7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x620]);
        sub_20E86665C((uint64_t)va);
        JUMPOUT(0x20ED732A4);
      }
LABEL_4:
      operator delete((void *)STACK[0x498]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v18);
    sub_20E86665C(v17);
    if ((SLOBYTE(STACK[0x4C7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x4B0]);
  if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20ED73234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_20E86665C((uint64_t)va);
  JUMPOUT(0x20ED7329CLL);
}

void sub_20ED73324()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x620]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20ED732A4);
}

void sub_20ED73340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::__shared_weak_count *v51;
  uint64_t v52;
  uint64_t v53;

  if (v51)
  {
    std::__shared_weak_count::__release_weak(v51);
    sub_20E86665C(v53);
    sub_20E86665C(v52);
    if ((SLOBYTE(STACK[0x58F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x577]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&a25);
        sub_20E86665C((uint64_t)&a51);
        JUMPOUT(0x20ED73430);
      }
LABEL_4:
      operator delete((void *)STACK[0x560]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v53);
    sub_20E86665C(v52);
    if ((SLOBYTE(STACK[0x58F]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x578]);
  if ((SLOBYTE(STACK[0x577]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20ED733C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  sub_20E86665C((uint64_t)&a51);
  JUMPOUT(0x20ED73428);
}

void sub_20ED734C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  int v17;
  va_list va;

  va_start(va, a16);
  sub_20E86665C((uint64_t)va);
  if (v17 < 0)
    operator delete(v16);
  JUMPOUT(0x20ED73430);
}

void sub_20ED734E0(uint64_t a1)
{
  sub_20ED91FA4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED73520(uint64_t a1)
{
  sub_20ED91DC0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED73544(uint64_t a1)
{
  sub_20ED91BDC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED73568(uint64_t a1)
{
  sub_20ED919F8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED7358C(uint64_t a1)
{
  sub_20ED91814(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED735B0(uint64_t a1)
{
  sub_20ED91630(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED735D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E6158;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED7360C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E6158;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED73654(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC650;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC650;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED73728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED73754(uint64_t a1)
{
  sub_20ED9144C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED73778(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E61C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ED737B8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E61C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED73808(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20ED73818(uint64_t a1)
{
  sub_20ED91268(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED73840(uint64_t a1)
{
  sub_20ED75388(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED73864(_QWORD *a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  std::mutex **v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t **v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *p_shared_weak_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  char *v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[25];
  _BYTE v80[288];
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  uint64_t v87;
  __int128 *v88;
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (char *)operator new(0x1C8uLL);
    v5 = v4;
    v6 = *a2;
    *(_OWORD *)(v4 + 40) = a2[1];
    v7 = a2[3];
    *(_OWORD *)(v4 + 56) = a2[2];
    *(_OWORD *)(v4 + 72) = v7;
    *(_OWORD *)(v4 + 81) = *(__int128 *)((char *)a2 + 57);
    *((_QWORD *)v4 + 1) = 0;
    v8 = (unint64_t *)(v4 + 8);
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = &off_24C9E6408;
    *(_OWORD *)(v4 + 24) = v6;
    v9 = *((_QWORD *)a2 + 11);
    *((_QWORD *)v4 + 13) = *((_QWORD *)a2 + 10);
    *((_QWORD *)v4 + 14) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = v4 + 24;
    v13 = *((_QWORD *)a2 + 13);
    *((_QWORD *)v4 + 15) = *((_QWORD *)a2 + 12);
    *((_QWORD *)v4 + 16) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    memcpy(v4 + 136, a2 + 7, 0x120uLL);
    v16 = *((_QWORD *)a2 + 51);
    *((_QWORD *)v5 + 53) = *((_QWORD *)a2 + 50);
    *((_QWORD *)v5 + 54) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *(_OWORD *)(v5 + 440) = a2[26];
    v84 = v12;
    v85 = (std::__shared_weak_count *)v5;
    v19 = (unint64_t *)(v5 + 16);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = (uint64_t *)a1[18];
    v22 = (_QWORD *)operator new();
    *v22 = v21 + 7;
    std::mutex::lock((std::mutex *)(v21 + 7));
    *(_QWORD *)&v86 = v22;
    *((_QWORD *)&v86 + 1) = v21;
    if (!*((_BYTE *)v21 + 48))
      sub_20E866B34();
    v23 = v21[4];
    v24 = *v21;
    v25 = (_QWORD *)(*v21 + 16 * v23);
    do
      v26 = __ldxr(v8);
    while (__stxr(v26 + 1, v8));
    *v25 = v12;
    v27 = v24 + 16 * v23;
    v28 = *(std::__shared_weak_count **)(v27 + 8);
    *(_QWORD *)(v27 + 8) = v5;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = (v21[1] - *v21) >> 4;
    v32 = v21[5];
    v33 = v21[4] + 1;
    if (v33 >= v31)
      v34 = (v21[1] - *v21) >> 4;
    else
      v34 = 0;
    v21[4] = v33 - v34;
    if (v32 == v31)
    {
      v35 = v21[3] + 1;
      if (v35 < v31)
        v31 = 0;
      v21[3] = v35 - v31;
      v36 = (std::mutex **)v86;
      if (!(_QWORD)v86)
      {
LABEL_42:
        v45 = (uint64_t **)a1[9];
        v86 = 0uLL;
        v46 = (std::__shared_weak_count *)a1[5];
        if (v46)
        {
          v47 = std::__shared_weak_count::lock(v46);
          if (v47)
          {
            v48 = v47;
            v49 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v47->__shared_weak_owners_;
            do
              v51 = __ldxr(p_shared_weak_owners);
            while (__stxr(v51 + 1, p_shared_weak_owners));
            *(_QWORD *)&v86 = v49;
            *((_QWORD *)&v86 + 1) = v47;
            v52 = (unint64_t *)&v47->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          else
          {
            v86 = 0uLL;
          }
        }
        v54 = (char *)operator new(0x30uLL);
        *(_QWORD *)v54 = &off_24C9E6458;
        *(_OWORD *)(v54 + 8) = v86;
        v86 = 0uLL;
        *((_QWORD *)v54 + 3) = v12;
        *((_QWORD *)v54 + 4) = v5;
        v87 = 0;
        v88 = 0;
        v90 = v54;
        sub_210216F3C(*v45, (uint64_t)v89);
        v55 = v90;
        if (v90 == v89)
        {
          v56 = 4;
          v55 = v89;
        }
        else
        {
          if (!v90)
            goto LABEL_56;
          v56 = 5;
        }
        (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_56:
        if (v85)
        {
          v57 = &v85->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        return;
      }
    }
    else
    {
      v21[5] = v32 + 1;
      v36 = (std::mutex **)v86;
      if (!(_QWORD)v86)
        goto LABEL_42;
    }
    std::mutex::unlock(*v36);
    MEMORY[0x212BC6398](v36, 0x20C4093837F09);
    goto LABEL_42;
  }
  v74 = (uint64_t **)a1[9];
  v75 = 0uLL;
  v37 = (std::__shared_weak_count *)a1[5];
  if (v37)
  {
    v38 = std::__shared_weak_count::lock(v37);
    if (v38)
    {
      v39 = v38;
      v40 = a1[4];
      v41 = (unint64_t *)&v38->__shared_weak_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      *(_QWORD *)&v75 = v40;
      *((_QWORD *)&v75 + 1) = v38;
      v43 = (unint64_t *)&v38->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    else
    {
      v75 = 0uLL;
    }
  }
  v78 = a2[2];
  *(_OWORD *)v79 = a2[3];
  *(_OWORD *)&v79[9] = *(__int128 *)((char *)a2 + 57);
  v76 = *a2;
  v77 = a2[1];
  v59 = *((_QWORD *)a2 + 11);
  v73 = *((_QWORD *)a2 + 10);
  if (v59)
  {
    v60 = (unint64_t *)(v59 + 8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  v62 = *((_QWORD *)a2 + 12);
  v63 = *((_QWORD *)a2 + 13);
  if (v63)
  {
    v64 = (unint64_t *)(v63 + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  memcpy(v80, a2 + 7, sizeof(v80));
  v66 = *((_QWORD *)a2 + 50);
  v67 = *((_QWORD *)a2 + 51);
  v81 = v66;
  v82 = v67;
  if (v67)
  {
    v68 = (unint64_t *)(v67 + 8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v83 = a2[26];
  v88 = 0;
  v70 = (char *)operator new(0x1C8uLL);
  *(_OWORD *)(v70 + 8) = v75;
  *(_OWORD *)(v70 + 40) = v77;
  *(_OWORD *)(v70 + 56) = v78;
  *(_OWORD *)(v70 + 72) = *(_OWORD *)v79;
  *(_OWORD *)(v70 + 81) = *(_OWORD *)&v79[9];
  *(_QWORD *)v70 = &off_24C9E64D8;
  *(_OWORD *)(v70 + 24) = v76;
  *((_QWORD *)v70 + 13) = v73;
  *((_QWORD *)v70 + 14) = v59;
  *((_QWORD *)v70 + 15) = v62;
  *((_QWORD *)v70 + 16) = v63;
  memcpy(v70 + 136, v80, 0x120uLL);
  *((_QWORD *)v70 + 53) = v66;
  *((_QWORD *)v70 + 54) = v67;
  v81 = 0;
  v82 = 0;
  *(_OWORD *)(v70 + 440) = a2[26];
  v88 = (__int128 *)v70;
  sub_210216F3C(*v74, (uint64_t)&v86);
  v71 = v88;
  if (v88 == &v86)
  {
    v72 = 4;
    v71 = &v86;
  }
  else
  {
    if (!v88)
      return;
    v72 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
}

void sub_20ED73E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  v6 = *(_QWORD **)(v4 - 152);
  if (v6 == v3)
  {
    v7 = 4;
    v6 = (_QWORD *)(v4 - 176);
  }
  else
  {
    if (!v6)
    {
      sub_20ED75574((uint64_t *)va);
      _Unwind_Resume(a1);
    }
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
  sub_20ED75574((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20ED73E84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 104);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 128);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_20EA02254(v2 - 176);
  sub_20E86665C(v2 - 192);
  _Unwind_Resume(a1);
}

void sub_20ED73ED4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  sub_20EA0228C((std::mutex ***)(v2 - 176));
  std::__shared_weak_count::__release_weak(v1);
  sub_20E86665C(v2 - 192);
  _Unwind_Resume(a1);
}

void sub_20ED73EF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v2;
  MEMORY[0x212BC6398](v4, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v1);
  sub_20E86665C(v3 - 192);
  _Unwind_Resume(a1);
}

void sub_20ED73F30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::__shared_weak_count::__release_weak(v1);
  sub_20E86665C(v2 - 192);
  _Unwind_Resume(a1);
}

void sub_20ED73F50(_QWORD *a1, __int128 *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::mutex **v41;
  uint64_t **v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *p_shared_weak_owners;
  unint64_t v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t **v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  char *v62;
  std::string *v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  __int128 *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  __int128 *v93;
  std::string *v94;
  std::runtime_error *exception;
  std::runtime_error *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[288];
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  _QWORD *v111;
  _QWORD *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  std::runtime_error v117;
  char *v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  _QWORD *v121;
  __int128 *v122;
  _QWORD v123[2];
  std::string v124;
  std::string *v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v120 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v120 + 1) = 45;
    v92 = (_QWORD *)a1[6];
    v91 = a1 + 6;
    v90 = v92;
    v93 = (__int128 *)*((unsigned __int8 *)v91 + 23);
    if ((char)v93 < 0)
      v93 = (__int128 *)v91[1];
    else
      v90 = v91;
    v121 = v90;
    v122 = v93;
    sub_20E8778D4((uint64_t)&v120, (uint64_t)v123, 0, 0, &v124);
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = &v124;
    else
      v94 = (std::string *)v124.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v117, (const char *)v94);
    v117.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v96 = std::runtime_error::runtime_error(exception, &v117);
    v96->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v96, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v42 = (uint64_t **)a1[9];
    v98 = 0uLL;
    v43 = (std::__shared_weak_count *)a1[5];
    if (v43)
    {
      v44 = std::__shared_weak_count::lock(v43);
      if (v44)
      {
        v45 = v44;
        v46 = a1[4];
        p_shared_weak_owners = (unint64_t *)&v44->__shared_weak_owners_;
        do
          v48 = __ldxr(p_shared_weak_owners);
        while (__stxr(v48 + 1, p_shared_weak_owners));
        *(_QWORD *)&v98 = v46;
        *((_QWORD *)&v98 + 1) = v44;
        p_shared_owners = (unint64_t *)&v44->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      else
      {
        v98 = 0uLL;
      }
    }
    v71 = a2[3];
    v101 = a2[2];
    v102[0] = v71;
    *(_OWORD *)((char *)v102 + 9) = *(__int128 *)((char *)a2 + 57);
    v72 = a2[1];
    v99 = *a2;
    v100 = v72;
    v73 = *((_QWORD *)a2 + 10);
    v74 = *((_QWORD *)a2 + 11);
    v103 = v73;
    v104 = v74;
    if (v74)
    {
      v75 = (unint64_t *)(v74 + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    v77 = *((_QWORD *)a2 + 12);
    v78 = *((_QWORD *)a2 + 13);
    v105 = v77;
    v106 = v78;
    if (v78)
    {
      v79 = (unint64_t *)(v78 + 8);
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    memcpy(v107, a2 + 7, sizeof(v107));
    v81 = *((_QWORD *)a2 + 51);
    v97 = *((_QWORD *)a2 + 50);
    v108 = v97;
    v109 = v81;
    if (v81)
    {
      v82 = (unint64_t *)(v81 + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v110 = a2[26];
    v84 = operator new(0x20uLL);
    v84[1] = 0;
    v84[2] = 0;
    *v84 = &unk_24C9B85F0;
    v84[3] = *a3;
    *a3 = 0;
    v111 = v84 + 3;
    v112 = v84;
    v122 = 0;
    v85 = (char *)operator new(0x1D8uLL);
    *(_OWORD *)(v85 + 8) = v98;
    v86 = v99;
    *(_OWORD *)(v85 + 40) = v100;
    v87 = v102[0];
    *(_OWORD *)(v85 + 56) = v101;
    *(_OWORD *)(v85 + 72) = v87;
    *(_OWORD *)(v85 + 81) = *(_OWORD *)((char *)v102 + 9);
    *(_QWORD *)v85 = &off_24C9E65D8;
    v98 = 0uLL;
    *(_OWORD *)(v85 + 24) = v86;
    *((_QWORD *)v85 + 13) = v73;
    *((_QWORD *)v85 + 14) = v74;
    v103 = 0;
    v104 = 0;
    *((_QWORD *)v85 + 15) = v77;
    *((_QWORD *)v85 + 16) = v78;
    v105 = 0;
    v106 = 0;
    memcpy(v85 + 136, v107, 0x120uLL);
    *((_QWORD *)v85 + 53) = v97;
    *((_QWORD *)v85 + 54) = v81;
    v108 = 0;
    v109 = 0;
    *(_OWORD *)(v85 + 440) = v110;
    *((_QWORD *)v85 + 57) = v84 + 3;
    *((_QWORD *)v85 + 58) = v84;
    v111 = 0;
    v112 = 0;
    v122 = (__int128 *)v85;
    sub_210216F3C(*v42, (uint64_t)&v120);
    v88 = v122;
    if (v122 == &v120)
    {
      v89 = 4;
      v88 = &v120;
    }
    else
    {
      if (!v122)
      {
LABEL_90:
        sub_20ED77100(&v98);
        return;
      }
      v89 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v88 + 8 * v89))();
    goto LABEL_90;
  }
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
  v6[1].__vftable = *a3;
  v115 = v6 + 1;
  v116 = v6;
  v113 = v6 + 1;
  v114 = v6;
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  *a3 = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (!a1[18]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = (char *)operator new(0x1C8uLL);
  v10 = v9;
  v11 = *a2;
  *(_OWORD *)(v9 + 40) = a2[1];
  v12 = a2[3];
  *(_OWORD *)(v9 + 56) = a2[2];
  *(_OWORD *)(v9 + 72) = v12;
  *(_OWORD *)(v9 + 81) = *(__int128 *)((char *)a2 + 57);
  *((_QWORD *)v9 + 1) = 0;
  v13 = (unint64_t *)(v9 + 8);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C9E6408;
  *(_OWORD *)(v9 + 24) = v11;
  v14 = *((_QWORD *)a2 + 11);
  *((_QWORD *)v9 + 13) = *((_QWORD *)a2 + 10);
  *((_QWORD *)v9 + 14) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v9 + 24;
  v18 = *((_QWORD *)a2 + 13);
  *((_QWORD *)v9 + 15) = *((_QWORD *)a2 + 12);
  *((_QWORD *)v9 + 16) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  memcpy(v9 + 136, a2 + 7, 0x120uLL);
  v21 = *((_QWORD *)a2 + 51);
  *((_QWORD *)v10 + 53) = *((_QWORD *)a2 + 50);
  *((_QWORD *)v10 + 54) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_OWORD *)(v10 + 440) = a2[26];
  v118 = v17;
  v119 = (std::__shared_weak_count *)v10;
  v24 = (unint64_t *)(v10 + 16);
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = (uint64_t *)a1[18];
  v27 = (_QWORD *)operator new();
  *v27 = v26 + 7;
  std::mutex::lock((std::mutex *)(v26 + 7));
  *(_QWORD *)&v120 = v27;
  *((_QWORD *)&v120 + 1) = v26;
  if (!*((_BYTE *)v26 + 48))
    sub_20E866B34();
  v28 = v26[4];
  v29 = *v26;
  v30 = (_QWORD *)(*v26 + 16 * v28);
  do
    v31 = __ldxr(v13);
  while (__stxr(v31 + 1, v13));
  *v30 = v17;
  v32 = v29 + 16 * v28;
  v33 = *(std::__shared_weak_count **)(v32 + 8);
  *(_QWORD *)(v32 + 8) = v10;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (v26[1] - *v26) >> 4;
  v37 = v26[5];
  v38 = v26[4] + 1;
  if (v38 >= v36)
    v39 = (v26[1] - *v26) >> 4;
  else
    v39 = 0;
  v26[4] = v38 - v39;
  if (v37 != v36)
  {
    v26[5] = v37 + 1;
    v41 = (std::mutex **)v120;
    if (!(_QWORD)v120)
      goto LABEL_46;
    goto LABEL_45;
  }
  v40 = v26[3] + 1;
  if (v40 < v36)
    v36 = 0;
  v26[3] = v40 - v36;
  v41 = (std::mutex **)v120;
  if ((_QWORD)v120)
  {
LABEL_45:
    std::mutex::unlock(*v41);
    MEMORY[0x212BC6398](v41, 0x20C4093837F09);
  }
LABEL_46:
  v51 = (uint64_t **)a1[9];
  v120 = 0uLL;
  v52 = (std::__shared_weak_count *)a1[5];
  if (v52)
  {
    v53 = std::__shared_weak_count::lock(v52);
    if (v53)
    {
      v54 = v53;
      v55 = a1[4];
      v56 = (unint64_t *)&v53->__shared_weak_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      *(_QWORD *)&v120 = v55;
      *((_QWORD *)&v120 + 1) = v53;
      v58 = (unint64_t *)&v53->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    else
    {
      v120 = 0uLL;
    }
  }
  v60 = v113;
  v61 = v114;
  v113 = 0;
  v114 = 0;
  v62 = (char *)operator new(0x38uLL);
  *(_QWORD *)v62 = &off_24C9E6558;
  *(_OWORD *)(v62 + 8) = v120;
  v120 = 0uLL;
  *((_QWORD *)v62 + 3) = v17;
  *((_QWORD *)v62 + 4) = v10;
  v121 = 0;
  v122 = 0;
  *((_QWORD *)v62 + 5) = v60;
  *((_QWORD *)v62 + 6) = v61;
  v123[0] = 0;
  v123[1] = 0;
  v125 = (std::string *)v62;
  sub_210216F3C(*v51, (uint64_t)&v124);
  v63 = v125;
  if (v125 == &v124)
  {
    v64 = 4;
    v63 = &v124;
  }
  else
  {
    if (!v125)
      goto LABEL_60;
    v64 = 5;
  }
  (*(void (**)(void))(v63->__r_.__value_.__r.__words[0] + 8 * v64))();
LABEL_60:
  if (v119)
  {
    v65 = &v119->__shared_owners_;
    do
      v66 = __ldaxr((unint64_t *)v65);
    while (__stlxr(v66 - 1, (unint64_t *)v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (v114)
  {
    v67 = &v114->__shared_owners_;
    do
      v68 = __ldaxr((unint64_t *)v67);
    while (__stlxr(v68 - 1, (unint64_t *)v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  if (v116)
  {
    v69 = &v116->__shared_owners_;
    do
      v70 = __ldaxr((unint64_t *)v69);
    while (__stlxr(v70 - 1, (unint64_t *)v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
}

void sub_20ED74730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, std::__shared_weak_count *a16)
{
  std::promise<void> *v16;
  uint64_t v17;
  std::exception_ptr v18;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v18.__ptr_ = (void *)(v17 - 200);
    std::promise<void>::set_exception(v16, v18);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v17 - 200));
    std::runtime_error::~runtime_error((std::runtime_error *)(v17 - 216));
    if (*(char *)(v17 - 105) < 0)
      operator delete(*(void **)(v17 - 128));
    JUMPOUT(0x20ED74640);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED74840(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 104);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 128);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_20EA031A8((_QWORD *)(v2 - 176));
  sub_20E86665C(v2 - 192);
  sub_20E86665C(v2 - 248);
  sub_20E86665C(v2 - 232);
  _Unwind_Resume(a1);
}

void sub_20ED748E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 248);
  sub_20E86665C(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_20ED748FC(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED74970(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E6658;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED74A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED74AE4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E66D8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED74BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED74C58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E6758;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED74E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED74F38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E67D8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED75150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED75218(uint64_t a1)
{
  return sub_20ED75388(a1 - 16);
}

void sub_20ED75220(uint64_t a1)
{
  sub_20ED75388(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED75248(uint64_t a1)
{
  return sub_20ED74970((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ED75250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED74C58((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED75258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED74F38((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED75260(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED75268(uint64_t a1)
{
  return sub_20ED75388(a1 - 24);
}

void sub_20ED75270(uint64_t a1)
{
  sub_20ED75388(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED75298(uint64_t a1)
{
  return sub_20ED74AE4((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED752A0(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED752A8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED75310(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED75378(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED75388(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9E6228;
  *(_QWORD *)(a1 + 16) = &unk_24C9E62A0;
  *(_QWORD *)(a1 + 24) = &unk_24C9E62E0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20ED75574(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[53];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[13];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[1];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20ED75660(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E6408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED75670(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E6408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED756A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[54];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[14];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *sub_20ED7577C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E6458;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED757C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E6458;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED75814(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E6458;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED75884(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E6458;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED758D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED75910(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED75948(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ED75C6C((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED75B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED75BF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE25Enqueu"
                     "eMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb"
                                "0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED75C60()
{
  return &unk_24C9E64B8;
}

void sub_20ED75C6C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ED75D04()
{
  __break(1u);
}

void sub_20ED75DB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED75DD0);
}

_QWORD *sub_20ED75DDC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24C9E64D8;
  v2 = (std::__shared_weak_count *)a1[54];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[14];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[2];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20ED75ED4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24C9E64D8;
  v2 = (std::__shared_weak_count *)a1[54];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[14];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  std::__shared_weak_count::__release_weak(v11);
LABEL_19:
  JUMPOUT(0x212BC6398);
}

char *sub_20ED75FDC(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (char *)operator new(0x1C8uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9E64D8;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 81) = *(_OWORD *)(a1 + 81);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 112);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *((_QWORD *)v2 + 14) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a1 + 128);
  *((_QWORD *)v2 + 15) = *(_QWORD *)(a1 + 120);
  *((_QWORD *)v2 + 16) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  memcpy(v2 + 136, (const void *)(a1 + 136), 0x120uLL);
  v14 = *(_QWORD *)(a1 + 432);
  *((_QWORD *)v3 + 53) = *(_QWORD *)(a1 + 424);
  *((_QWORD *)v3 + 54) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_OWORD *)(v3 + 440) = *(_OWORD *)(a1 + 440);
  return v3;
}

__n128 sub_20ED760DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9E64D8;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a1 + 40);
  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 81) = *(_OWORD *)(a1 + 81);
  *(_OWORD *)(a2 + 72) = v10;
  *(_OWORD *)(a2 + 56) = v9;
  *(_OWORD *)(a2 + 40) = v8;
  v11 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 112) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a2 + 128) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  memcpy((void *)(a2 + 136), (const void *)(a1 + 136), 0x120uLL);
  v17 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a2 + 424) = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a2 + 432) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  result = *(__n128 *)(a1 + 440);
  *(__n128 *)(a2 + 440) = result;
  return result;
}

void sub_20ED761D0(uint64_t a1)
{
  sub_20ED7636C((_QWORD *)(a1 + 8));
}

void sub_20ED761D8(_QWORD *a1)
{
  sub_20ED7636C(a1 + 1);
  operator delete(a1);
}

void sub_20ED76200(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ED75C6C((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED762A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED762F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb"
                                "0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED76360()
{
  return &unk_24C9E6538;
}

void sub_20ED7636C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[53];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[13];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[1];
    if (!v11)
      return;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
}

_QWORD *sub_20ED76458(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E6558;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED764E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E6558;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED76578(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E6558;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED76608(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E6558;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED76678(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED766F8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED76774(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED75C6C(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED76A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED76B80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE25Enqueu"
                     "eMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb"
                                "0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED76BEC()
{
  return &unk_24C9E65B8;
}

_QWORD *sub_20ED76BF8(_QWORD *a1)
{
  *a1 = &off_24C9E65D8;
  sub_20ED77100(a1 + 1);
  return a1;
}

void sub_20ED76C28(_QWORD *a1)
{
  *a1 = &off_24C9E65D8;
  sub_20ED77100(a1 + 1);
  JUMPOUT(0x212BC6398);
}

char *sub_20ED76C68(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = (char *)operator new(0x1D8uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9E65D8;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 81) = *(_OWORD *)(a1 + 81);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 112);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *((_QWORD *)v2 + 14) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a1 + 128);
  *((_QWORD *)v2 + 15) = *(_QWORD *)(a1 + 120);
  *((_QWORD *)v2 + 16) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  memcpy(v2 + 136, (const void *)(a1 + 136), 0x120uLL);
  v14 = *(_QWORD *)(a1 + 432);
  *((_QWORD *)v3 + 53) = *(_QWORD *)(a1 + 424);
  *((_QWORD *)v3 + 54) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_OWORD *)(v3 + 440) = *(_OWORD *)(a1 + 440);
  v17 = *(_QWORD *)(a1 + 464);
  *((_QWORD *)v3 + 57) = *(_QWORD *)(a1 + 456);
  *((_QWORD *)v3 + 58) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return v3;
}

void *sub_20ED76D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *result;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9E65D8;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a1 + 40);
  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 81) = *(_OWORD *)(a1 + 81);
  *(_OWORD *)(a2 + 72) = v10;
  *(_OWORD *)(a2 + 56) = v9;
  *(_OWORD *)(a2 + 40) = v8;
  v11 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 112) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a2 + 128) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  result = memcpy((void *)(a2 + 136), (const void *)(a1 + 136), 0x120uLL);
  v18 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a2 + 424) = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a2 + 432) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_OWORD *)(a2 + 440) = *(_OWORD *)(a1 + 440);
  v21 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a2 + 456) = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a2 + 464) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  return result;
}

_QWORD *sub_20ED76E9C(uint64_t a1)
{
  return sub_20ED77100((_QWORD *)(a1 + 8));
}

void sub_20ED76EA4(_QWORD *a1)
{
  sub_20ED77100(a1 + 1);
  operator delete(a1);
}

void sub_20ED76ECC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[57];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED75C6C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED76FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED77088(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE7Process"
                     "ERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb"
                                "0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED770F4()
{
  return &unk_24C9E6638;
}

_QWORD *sub_20ED77100(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a1[57];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[53];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[53];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[15];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[13];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[13];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[1];
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  return a1;
}

_QWORD *sub_20ED77224(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E6658;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED7725C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E6658;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED772A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E6658;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED772F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E6658;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED77324(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED77334(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED77360(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED773F4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED77430(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE9Subscrib"
                     "eENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0"
                                "EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7749C()
{
  return &unk_24C9E66B8;
}

_QWORD *sub_20ED774A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E66D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED774E0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E66D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED77528(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E66D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED77578(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E66D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED775A8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED775B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED775E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED77678(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED776B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE15AddErro"
                     "rHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0"
                                "EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED77720()
{
  return &unk_24C9E6738;
}

_QWORD *sub_20ED7772C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E6758;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED77764(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E6758;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED777AC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E6758;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED77804(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E6758;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED7783C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED7784C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED77878(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED77930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7797C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE16Output"
                     "HandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb"
                                "0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED779E8()
{
  return &unk_24C9E67B8;
}

_QWORD *sub_20ED779F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E67D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED77A2C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E67D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED77A74(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E67D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED77ACC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E67D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED77B04(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED77B14(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED77B40(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED77BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED77C44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE15ErrorH"
                     "andlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb"
                                "0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types21ImageProcessingSampleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED77CB0()
{
  return &unk_24C9E6838;
}

void sub_20ED77CC0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED77CE4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED77CFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types21ImageProcessingSamp"
                     "leEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types21ImagePro"
                                "cessingSampleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types21ImageProcessingSampleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types21ImageProcessingSampleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20ED77D70(uint64_t a1)
{
  sub_20ED7953C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED77D94(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E6A98;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9E6AE8;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24C9E6B68;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20ED781A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7829C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED782AC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED782B8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED782C8(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E6A98;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9E6BE8;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24C9B85F0;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9E6C68;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20ED788EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x20ED78800);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED789F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED78A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED78AB0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED78B24(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E6CE8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED78C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED78C98(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E6D68;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED78DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED78E0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E6DE8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED79024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED790EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E6E68;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED79304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED793CC(uint64_t a1)
{
  return sub_20ED7953C(a1 - 16);
}

void sub_20ED793D4(uint64_t a1)
{
  sub_20ED7953C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED793FC(uint64_t a1)
{
  return sub_20ED78B24((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ED79404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED78E0C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED7940C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED790EC((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED79414(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED7941C(uint64_t a1)
{
  return sub_20ED7953C(a1 - 24);
}

void sub_20ED79424(uint64_t a1)
{
  sub_20ED7953C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7944C(uint64_t a1)
{
  return sub_20ED78C98((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED79454(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED7945C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED794C4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED7952C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED7953C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9E68A8;
  *(_QWORD *)(a1 + 16) = &unk_24C9E6920;
  *(_QWORD *)(a1 + 24) = &unk_24C9E6960;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ED79728(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E6A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED79738(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E6A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED79770(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E6AE8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED797B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E6AE8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED79808(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E6AE8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED79878(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E6AE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED798C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED79904(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED7993C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ED79C60((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED79B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED79BE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutput"
                     "EvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEn"
                                "ablerOutputEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED79C54()
{
  return &unk_24C9E6B48;
}

void sub_20ED79C60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ED79CF8()
{
  __break(1u);
}

void sub_20ED79DA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED79DC4);
}

_QWORD *sub_20ED79DD0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E6B68;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED79E08(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E6B68;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED79E50(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E6B68;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_20ED79EA8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E6B68;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_20ED79EE0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED79EF0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED79F1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ED79C60((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED79FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7A010(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutput"
                     "EvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEn"
                                "ablerOutputEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7A07C()
{
  return &unk_24C9E6BC8;
}

_QWORD *sub_20ED7A088(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E6BE8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED7A110(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E6BE8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED7A1A8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E6BE8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED7A238(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E6BE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED7A2A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED7A328(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED7A3A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED79C60(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED7A658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED7A7B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutput"
                     "EvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEn"
                                "ablerOutputEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEE"
                                "UlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7A81C()
{
  return &unk_24C9E6C48;
}

_QWORD *sub_20ED7A828(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E6C68;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED7A8A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E6C68;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7A930(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E6C68;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20ED7A9A8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E6C68;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED7AA00(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED7AA70(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED7AAE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED79C60((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED7ABF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7AC9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutput"
                     "EvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEn"
                                "ablerOutputEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7AD08()
{
  return &unk_24C9E6CC8;
}

_QWORD *sub_20ED7AD14(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E6CE8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED7AD4C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E6CE8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7AD94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E6CE8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED7ADE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E6CE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED7AE14(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED7AE24(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED7AE50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED7AEE4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7AF20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputE"
                     "vvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEna"
                                "blerOutputEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7AF8C()
{
  return &unk_24C9E6D48;
}

_QWORD *sub_20ED7AF98(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E6D68;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED7AFD0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E6D68;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7B018(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E6D68;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED7B068(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E6D68;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED7B098(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED7B0A8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED7B0D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED7B168(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7B1A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputE"
                     "vvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEna"
                                "blerOutputEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7B210()
{
  return &unk_24C9E6DC8;
}

_QWORD *sub_20ED7B21C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E6DE8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED7B254(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E6DE8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7B29C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E6DE8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED7B2F4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E6DE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED7B32C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED7B33C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED7B368(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED7B420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7B46C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutput"
                     "EvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEn"
                                "ablerOutputEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7B4D8()
{
  return &unk_24C9E6E48;
}

_QWORD *sub_20ED7B4E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E6E68;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED7B51C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E6E68;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7B564(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E6E68;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED7B5BC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E6E68;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED7B5F4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED7B604(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED7B630(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED7B6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7B734(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutput"
                     "EvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEn"
                                "ablerOutputEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7B7A0()
{
  return &unk_24C9E6EC8;
}

void sub_20ED7B7B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED7B7D4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED7B7EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio28feature_detection_node_group"
                     "17LineEnablerOutputEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio28feature_detection"
                                "_node_group17LineEnablerOutputEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio28feature_detection_node_group17LineEnablerOutputEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED7B85C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED7B888(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7B8C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E6F38;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED7B92C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED7B9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED7B9D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED7BA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED7BA74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED7BB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED7BB4C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED7BC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED7BC24(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED7BCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED7BCE0(uint64_t a1)
{
  sub_20ED7D8E8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED7BD04(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t *v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::mutex **v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t **v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *p_shared_weak_owners;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  uint64_t v85;
  __int128 *v86;
  _BYTE v87[24];
  _BYTE *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (char *)operator new(0x118uLL);
    v5 = v4;
    *((_QWORD *)v4 + 1) = 0;
    v6 = (unint64_t *)(v4 + 8);
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = &off_24C9E71A0;
    *((_QWORD *)v4 + 3) = *a2;
    v7 = v4 + 24;
    v4[32] = *((_BYTE *)a2 + 8);
    v8 = a2[3];
    *((_QWORD *)v4 + 5) = a2[2];
    *((_QWORD *)v4 + 6) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = a2[5];
    *((_QWORD *)v4 + 7) = a2[4];
    *((_QWORD *)v4 + 8) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(v4 + 216) = *((_OWORD *)a2 + 12);
    v15 = *((_OWORD *)a2 + 14);
    *(_OWORD *)(v4 + 232) = *((_OWORD *)a2 + 13);
    *(_OWORD *)(v4 + 248) = v15;
    *(_OWORD *)(v4 + 259) = *(_OWORD *)((char *)a2 + 235);
    v16 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(v4 + 152) = *((_OWORD *)a2 + 8);
    v17 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(v4 + 168) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v4 + 184) = v17;
    *(_OWORD *)(v4 + 200) = v14;
    v18 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v4 + 88) = *((_OWORD *)a2 + 4);
    v19 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(v4 + 104) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v4 + 120) = v19;
    *(_OWORD *)(v4 + 136) = v16;
    *(_OWORD *)(v4 + 72) = v18;
    v20 = (unint64_t *)(v4 + 16);
    v83 = (std::__shared_weak_count *)v4;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = (uint64_t *)a1[18];
    v23 = (_QWORD *)operator new();
    *v23 = v22 + 7;
    std::mutex::lock((std::mutex *)(v22 + 7));
    *(_QWORD *)&v84 = v23;
    *((_QWORD *)&v84 + 1) = v22;
    if (!*((_BYTE *)v22 + 48))
      sub_20E866B34();
    v24 = v22[4];
    v25 = *v22;
    v26 = (_QWORD *)(*v22 + 16 * v24);
    do
      v27 = __ldxr(v6);
    while (__stxr(v27 + 1, v6));
    *v26 = v7;
    v28 = v25 + 16 * v24;
    v29 = *(std::__shared_weak_count **)(v28 + 8);
    *(_QWORD *)(v28 + 8) = v5;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (v22[1] - *v22) >> 4;
    v33 = v22[5];
    v34 = v22[4] + 1;
    if (v34 >= v32)
      v35 = (v22[1] - *v22) >> 4;
    else
      v35 = 0;
    v22[4] = v34 - v35;
    if (v33 == v32)
    {
      v36 = v22[3] + 1;
      if (v36 < v32)
        v32 = 0;
      v22[3] = v36 - v32;
      v37 = (std::mutex **)v84;
      if (!(_QWORD)v84)
      {
LABEL_39:
        v47 = (uint64_t **)a1[9];
        v84 = 0uLL;
        v48 = (std::__shared_weak_count *)a1[5];
        if (v48)
        {
          v49 = std::__shared_weak_count::lock(v48);
          if (v49)
          {
            v50 = v49;
            v51 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v49->__shared_weak_owners_;
            do
              v53 = __ldxr(p_shared_weak_owners);
            while (__stxr(v53 + 1, p_shared_weak_owners));
            *(_QWORD *)&v84 = v51;
            *((_QWORD *)&v84 + 1) = v49;
            v54 = (unint64_t *)&v49->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          else
          {
            v84 = 0uLL;
          }
        }
        v56 = (char *)operator new(0x30uLL);
        *(_QWORD *)v56 = &off_24C9E71F0;
        *(_OWORD *)(v56 + 8) = v84;
        v84 = 0uLL;
        *((_QWORD *)v56 + 3) = v7;
        *((_QWORD *)v56 + 4) = v5;
        v85 = 0;
        v86 = 0;
        v88 = v56;
        sub_210216F3C(*v47, (uint64_t)v87);
        v57 = v88;
        if (v88 == v87)
        {
          v58 = 4;
          v57 = v87;
        }
        else
        {
          if (!v88)
            goto LABEL_53;
          v58 = 5;
        }
        (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_53:
        if (v83)
        {
          v59 = (unint64_t *)&v83->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        return;
      }
    }
    else
    {
      v22[5] = v33 + 1;
      v37 = (std::mutex **)v84;
      if (!(_QWORD)v84)
        goto LABEL_39;
    }
    std::mutex::unlock(*v37);
    MEMORY[0x212BC6398](v37, 0x20C4093837F09);
    goto LABEL_39;
  }
  v38 = (uint64_t **)a1[9];
  v80 = 0uLL;
  v39 = (std::__shared_weak_count *)a1[5];
  if (v39)
  {
    v40 = std::__shared_weak_count::lock(v39);
    if (v40)
    {
      v41 = v40;
      v42 = a1[4];
      v43 = (unint64_t *)&v40->__shared_weak_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      *(_QWORD *)&v80 = v42;
      *((_QWORD *)&v80 + 1) = v40;
      v45 = (unint64_t *)&v40->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    else
    {
      v80 = 0uLL;
    }
  }
  v81 = *a2;
  v82 = *((_BYTE *)a2 + 8);
  v61 = a2[2];
  v62 = a2[3];
  if (v62)
  {
    v63 = (unint64_t *)(v62 + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = a2[4];
  v66 = a2[5];
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v86 = 0;
  v69 = (char *)operator new(0x118uLL);
  *(_QWORD *)v69 = &off_24C9E7270;
  *(_OWORD *)(v69 + 8) = v80;
  *((_QWORD *)v69 + 3) = v81;
  v69[32] = v82;
  *((_QWORD *)v69 + 5) = v61;
  *((_QWORD *)v69 + 6) = v62;
  *((_QWORD *)v69 + 7) = v65;
  *((_QWORD *)v69 + 8) = v66;
  v70 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v69 + 72) = *((_OWORD *)a2 + 3);
  v71 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(v69 + 136) = *((_OWORD *)a2 + 7);
  v72 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v69 + 120) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(v69 + 104) = v72;
  *(_OWORD *)(v69 + 88) = v70;
  v73 = *((_OWORD *)a2 + 12);
  *(_OWORD *)(v69 + 200) = *((_OWORD *)a2 + 11);
  v74 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(v69 + 184) = *((_OWORD *)a2 + 10);
  *(_OWORD *)(v69 + 168) = v74;
  *(_OWORD *)(v69 + 152) = v71;
  v75 = *((_OWORD *)a2 + 13);
  v76 = *((_OWORD *)a2 + 14);
  *(_OWORD *)(v69 + 259) = *(_OWORD *)((char *)a2 + 235);
  *(_OWORD *)(v69 + 248) = v76;
  *(_OWORD *)(v69 + 232) = v75;
  *(_OWORD *)(v69 + 216) = v73;
  v86 = (__int128 *)v69;
  sub_210216F3C(*v38, (uint64_t)&v84);
  v78 = v86;
  if (v86 == &v84)
  {
    v79 = 4;
    v78 = &v84;
  }
  else
  {
    if (!v86)
      return;
    v79 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v78 + 8 * v79))(v78, v77);
}

void sub_20ED7C2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 120);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 144);
  }
  else
  {
    if (!v12)
    {
      sub_20ED7DAD4(&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_20ED7DAD4(&a9);
  _Unwind_Resume(a1);
}

void sub_20ED7C320(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_20EA02254(v2 - 144);
  sub_20E86665C(v2 - 160);
  _Unwind_Resume(a1);
}

void sub_20ED7C370(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  sub_20EA0228C((std::mutex ***)(v2 - 144));
  std::__shared_weak_count::__release_weak(v1);
  sub_20E86665C(v2 - 160);
  _Unwind_Resume(a1);
}

void sub_20ED7C394(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x212BC6398](v2, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v1);
  sub_20E86665C(v3 - 160);
  _Unwind_Resume(a1);
}

void sub_20ED7C3C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::__shared_weak_count::__release_weak(v1);
  sub_20E86665C(v2 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED7C3E8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED7C3F8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED7C404(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED7C414(_QWORD *a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t *v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  std::mutex **v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t **v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *p_shared_weak_owners;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  std::string *v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  char *v77;
  __int128 *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  __int128 *v83;
  std::string *v84;
  std::runtime_error *exception;
  std::runtime_error *v86;
  std::__shared_weak_count *v87[2];
  uint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[27];
  _QWORD *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  std::runtime_error v105;
  char *v106;
  std::__shared_weak_count *v107;
  __int128 v108;
  _QWORD *v109;
  __int128 *v110;
  _QWORD v111[2];
  std::string v112;
  std::string *v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v108 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v108 + 1) = 45;
    v82 = (_QWORD *)a1[6];
    v81 = a1 + 6;
    v80 = v82;
    v83 = (__int128 *)*((unsigned __int8 *)v81 + 23);
    if ((char)v83 < 0)
      v83 = (__int128 *)v81[1];
    else
      v80 = v81;
    v109 = v80;
    v110 = v83;
    sub_20E8778D4((uint64_t)&v108, (uint64_t)v111, 0, 0, &v112);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = &v112;
    else
      v84 = (std::string *)v112.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v105, (const char *)v84);
    v105.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v86 = std::runtime_error::runtime_error(exception, &v105);
    v86->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v86, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v104 = v6;
    v102 = &v6[1].__vftable;
    v103 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (char *)operator new(0x118uLL);
    v10 = v9;
    *((_QWORD *)v9 + 1) = 0;
    v11 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_24C9E71A0;
    *((_QWORD *)v9 + 3) = *a2;
    v12 = v9 + 24;
    v9[32] = *((_BYTE *)a2 + 8);
    v13 = a2[3];
    *((_QWORD *)v9 + 5) = a2[2];
    *((_QWORD *)v9 + 6) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = a2[5];
    *((_QWORD *)v9 + 7) = a2[4];
    *((_QWORD *)v9 + 8) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(v9 + 216) = *((_OWORD *)a2 + 12);
    v20 = *((_OWORD *)a2 + 14);
    *(_OWORD *)(v9 + 232) = *((_OWORD *)a2 + 13);
    *(_OWORD *)(v9 + 248) = v20;
    *(_OWORD *)(v9 + 259) = *(_OWORD *)((char *)a2 + 235);
    v21 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(v9 + 152) = *((_OWORD *)a2 + 8);
    v22 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(v9 + 168) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v9 + 184) = v22;
    *(_OWORD *)(v9 + 200) = v19;
    v23 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v9 + 88) = *((_OWORD *)a2 + 4);
    v24 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(v9 + 104) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v9 + 120) = v24;
    *(_OWORD *)(v9 + 136) = v21;
    *(_OWORD *)(v9 + 72) = v23;
    v25 = (unint64_t *)(v9 + 16);
    v106 = v9 + 24;
    v107 = (std::__shared_weak_count *)v9;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v27 = (uint64_t *)a1[18];
    v28 = (_QWORD *)operator new();
    *v28 = v27 + 7;
    std::mutex::lock((std::mutex *)(v27 + 7));
    *(_QWORD *)&v108 = v28;
    *((_QWORD *)&v108 + 1) = v27;
    if (!*((_BYTE *)v27 + 48))
      sub_20E866B34();
    v29 = v27[4];
    v30 = *v27;
    v31 = (_QWORD *)(*v27 + 16 * v29);
    do
      v32 = __ldxr(v11);
    while (__stxr(v32 + 1, v11));
    *v31 = v12;
    v33 = v30 + 16 * v29;
    v34 = *(std::__shared_weak_count **)(v33 + 8);
    *(_QWORD *)(v33 + 8) = v10;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = (v27[1] - *v27) >> 4;
    v38 = v27[5];
    v39 = v27[4] + 1;
    if (v39 >= v37)
      v40 = (v27[1] - *v27) >> 4;
    else
      v40 = 0;
    v27[4] = v39 - v40;
    if (v38 == v37)
    {
      v41 = v27[3] + 1;
      if (v41 < v37)
        v37 = 0;
      v27[3] = v41 - v37;
      v42 = (std::mutex **)v108;
      if (!(_QWORD)v108)
      {
LABEL_43:
        v52 = (uint64_t **)a1[9];
        v108 = 0uLL;
        v53 = (std::__shared_weak_count *)a1[5];
        if (v53)
        {
          v54 = std::__shared_weak_count::lock(v53);
          if (v54)
          {
            v55 = v54;
            v56 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v54->__shared_weak_owners_;
            do
              v58 = __ldxr(p_shared_weak_owners);
            while (__stxr(v58 + 1, p_shared_weak_owners));
            *(_QWORD *)&v108 = v56;
            *((_QWORD *)&v108 + 1) = v54;
            v59 = (unint64_t *)&v54->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          else
          {
            v108 = 0uLL;
          }
        }
        v61 = (char *)operator new(0x38uLL);
        *(_QWORD *)v61 = &off_24C9E72F0;
        *(_OWORD *)(v61 + 8) = v108;
        v108 = 0uLL;
        *((_QWORD *)v61 + 3) = v12;
        *((_QWORD *)v61 + 4) = v10;
        v109 = 0;
        v110 = 0;
        *((_QWORD *)v61 + 5) = v102;
        *((_QWORD *)v61 + 6) = v103;
        v111[0] = 0;
        v111[1] = 0;
        v113 = (std::string *)v61;
        sub_210216F3C(*v52, (uint64_t)&v112);
        v62 = v113;
        if (v113 == &v112)
        {
          v63 = 4;
          v62 = &v112;
        }
        else
        {
          if (!v113)
            goto LABEL_57;
          v63 = 5;
        }
        (*(void (**)(void))(v62->__r_.__value_.__r.__words[0] + 8 * v63))();
LABEL_57:
        if (v107)
        {
          v64 = &v107->__shared_owners_;
          do
            v65 = __ldaxr((unint64_t *)v64);
          while (__stlxr(v65 - 1, (unint64_t *)v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        if (v104)
        {
          v66 = (unint64_t *)&v104->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        return;
      }
    }
    else
    {
      v27[5] = v38 + 1;
      v42 = (std::mutex **)v108;
      if (!(_QWORD)v108)
        goto LABEL_43;
    }
    std::mutex::unlock(*v42);
    MEMORY[0x212BC6398](v42, 0x20C4093837F09);
    goto LABEL_43;
  }
  v43 = (uint64_t **)a1[9];
  *(_OWORD *)v87 = 0uLL;
  v44 = (std::__shared_weak_count *)a1[5];
  if (v44)
  {
    v45 = std::__shared_weak_count::lock(v44);
    if (v45)
    {
      v46 = v45;
      v47 = (std::__shared_weak_count *)a1[4];
      v48 = (unint64_t *)&v45->__shared_weak_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      v87[0] = v47;
      v87[1] = v45;
      v50 = (unint64_t *)&v45->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    else
    {
      *(_OWORD *)v87 = 0uLL;
    }
  }
  v88 = *a2;
  v89 = *((_BYTE *)a2 + 8);
  v68 = a2[2];
  v69 = a2[3];
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = a2[4];
  v73 = a2[5];
  if (v73)
  {
    v74 = (unint64_t *)(v73 + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  v100 = *((_OWORD *)a2 + 13);
  *(_OWORD *)v101 = *((_OWORD *)a2 + 14);
  *(_OWORD *)&v101[11] = *(_OWORD *)((char *)a2 + 235);
  v96 = *((_OWORD *)a2 + 9);
  v97 = *((_OWORD *)a2 + 10);
  v98 = *((_OWORD *)a2 + 11);
  v99 = *((_OWORD *)a2 + 12);
  v92 = *((_OWORD *)a2 + 5);
  v93 = *((_OWORD *)a2 + 6);
  v94 = *((_OWORD *)a2 + 7);
  v95 = *((_OWORD *)a2 + 8);
  v90 = *((_OWORD *)a2 + 3);
  v91 = *((_OWORD *)a2 + 4);
  v76 = operator new(0x20uLL);
  v76[1] = 0;
  v76[2] = 0;
  *v76 = &unk_24C9B85F0;
  v76[3] = *a3;
  *a3 = 0;
  v77 = (char *)operator new(0x128uLL);
  *(_QWORD *)v77 = &off_24C9E7370;
  *(_OWORD *)(v77 + 8) = *(_OWORD *)v87;
  *((_QWORD *)v77 + 3) = v88;
  v77[32] = v89;
  *((_QWORD *)v77 + 5) = v68;
  *((_QWORD *)v77 + 6) = v69;
  *((_QWORD *)v77 + 7) = v72;
  *((_QWORD *)v77 + 8) = v73;
  *(_OWORD *)(v77 + 72) = v90;
  *(_OWORD *)(v77 + 136) = v94;
  *(_OWORD *)(v77 + 120) = v93;
  *(_OWORD *)(v77 + 104) = v92;
  *(_OWORD *)(v77 + 88) = v91;
  *(_OWORD *)(v77 + 200) = v98;
  *(_OWORD *)(v77 + 184) = v97;
  *(_OWORD *)(v77 + 168) = v96;
  *(_OWORD *)(v77 + 152) = v95;
  *(_OWORD *)(v77 + 259) = *(_OWORD *)&v101[11];
  *(_OWORD *)(v77 + 248) = *(_OWORD *)v101;
  *(_OWORD *)(v77 + 232) = v100;
  *(_OWORD *)(v77 + 216) = v99;
  *((_QWORD *)v77 + 35) = v76 + 3;
  *((_QWORD *)v77 + 36) = v76;
  v110 = (__int128 *)v77;
  sub_210216F3C(*v43, (uint64_t)&v108);
  v78 = v110;
  if (v110 == &v108)
  {
    v79 = 4;
    v78 = &v108;
  }
  else
  {
    if (!v110)
      return;
    v79 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v78 + 8 * v79))(v78);
}

void sub_20ED7CC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::promise<void> *v10;
  uint64_t v11;
  std::exception_ptr v12;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v12.__ptr_ = (void *)(v11 - 200);
    std::promise<void>::set_exception(v10, v12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 200));
    std::runtime_error::~runtime_error((std::runtime_error *)(v11 - 216));
    if (*(char *)(v11 - 105) < 0)
      operator delete(*(void **)(v11 - 128));
    JUMPOUT(0x20ED7CBA0);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED7CDA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 104);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 128);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_20EA031A8((_QWORD *)(v2 - 176));
  sub_20E86665C(v2 - 192);
  sub_20E86665C(v2 - 248);
  sub_20E86665C(v2 - 232);
  _Unwind_Resume(a1);
}

void sub_20ED7CE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 248);
  sub_20E86665C(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_20ED7CE5C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED7CED0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E73F0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED7CFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED7D044(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E7470;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED7D154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED7D1B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E74F0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED7D3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED7D498@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E7570;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED7D6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED7D778(uint64_t a1)
{
  return sub_20ED7D8E8(a1 - 16);
}

void sub_20ED7D780(uint64_t a1)
{
  sub_20ED7D8E8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7D7A8(uint64_t a1)
{
  return sub_20ED7CED0((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ED7D7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED7D1B8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED7D7B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED7D498((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED7D7C0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED7D7C8(uint64_t a1)
{
  return sub_20ED7D8E8(a1 - 24);
}

void sub_20ED7D7D0(uint64_t a1)
{
  sub_20ED7D8E8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7D7F8(uint64_t a1)
{
  return sub_20ED7D044((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED7D800(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED7D808(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED7D870(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED7D8D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED7D8E8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9E6FB0;
  *(_QWORD *)(a1 + 16) = &unk_24C9E7028;
  *(_QWORD *)(a1 + 24) = &unk_24C9E7068;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20ED7DAD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20ED7DB7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E71A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED7DB8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E71A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED7DBBC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t sub_20ED7DC5C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 24);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *sub_20ED7DD08(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E71F0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED7DD4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E71F0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7DDA0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E71F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED7DE10(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E71F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED7DE60(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED7DE9C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED7DED4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ED7E1F8((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED7E09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7E180(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE25EnqueueM"
                     "essageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0E"
                                "E25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7E1EC()
{
  return &unk_24C9E7250;
}

void sub_20ED7E1F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ED7E290()
{
  __break(1u);
}

void sub_20ED7E33C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED7E35CLL);
}

_QWORD *sub_20ED7E368(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9E7270;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20ED7E41C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9E7270;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20ED7E4E0(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;

  v2 = (char *)operator new(0x118uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9E7270;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v2[32] = *(_BYTE *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v2 + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a1 + 64);
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v2 + 8) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(v2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(v2 + 248) = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 259);
  *(__n128 *)(v2 + 259) = result;
  return result;
}

__n128 sub_20ED7E5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  __int128 v20;
  __int128 v21;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9E7270;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a2 + 24) = v6;
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 64) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  v13 = *(_OWORD *)(a1 + 88);
  v14 = *(_OWORD *)(a1 + 104);
  v15 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 120) = v15;
  *(_OWORD *)(a2 + 104) = v14;
  *(_OWORD *)(a2 + 88) = v13;
  v16 = *(_OWORD *)(a1 + 152);
  v17 = *(_OWORD *)(a1 + 168);
  v18 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a2 + 184) = v18;
  *(_OWORD *)(a2 + 168) = v17;
  *(_OWORD *)(a2 + 152) = v16;
  result = *(__n128 *)(a1 + 216);
  v20 = *(_OWORD *)(a1 + 232);
  v21 = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a2 + 259) = *(_OWORD *)(a1 + 259);
  *(_OWORD *)(a2 + 248) = v21;
  *(_OWORD *)(a2 + 232) = v20;
  *(__n128 *)(a2 + 216) = result;
  return result;
}

void sub_20ED7E6E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20ED7E78C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20ED7E834(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ED7E1F8((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED7E8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7E928(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0E"
                                "E4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7E994()
{
  return &unk_24C9E72D0;
}

_QWORD *sub_20ED7E9A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[35];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[5];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[1];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

_QWORD *sub_20ED7EA8C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E72F0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED7EB14(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E72F0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED7EBAC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E72F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED7EC3C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E72F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED7ECAC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED7ED2C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED7EDA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED7E1F8(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED7F05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED7F1B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE25EnqueueM"
                     "essageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0E"
                                "E25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7F220()
{
  return &unk_24C9E7350;
}

_QWORD *sub_20ED7F22C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24C9E7370;
  v2 = (std::__shared_weak_count *)a1[36];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[6];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[2];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20ED7F324(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24C9E7370;
  v2 = (std::__shared_weak_count *)a1[36];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[6];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  std::__shared_weak_count::__release_weak(v11);
LABEL_19:
  JUMPOUT(0x212BC6398);
}

char *sub_20ED7F42C(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  result = (char *)operator new(0x128uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24C9E7370;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  result[32] = *(_BYTE *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a1 + 64);
  *((_QWORD *)result + 7) = *(_QWORD *)(a1 + 56);
  *((_QWORD *)result + 8) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)(result + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(result + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(result + 248) = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(result + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(result + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(result + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(result + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(result + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(result + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(result + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(result + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(result + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(result + 259) = *(_OWORD *)(a1 + 259);
  v13 = *(_QWORD *)(a1 + 288);
  *((_QWORD *)result + 35) = *(_QWORD *)(a1 + 280);
  *((_QWORD *)result + 36) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return result;
}

uint64_t sub_20ED7F55C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E7370;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(result + 24);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(result + 32);
  *(_QWORD *)(a2 + 24) = v6;
  v7 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(result + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(result + 56);
  *(_QWORD *)(a2 + 64) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(result + 72);
  v13 = *(_OWORD *)(result + 88);
  v14 = *(_OWORD *)(result + 104);
  v15 = *(_OWORD *)(result + 120);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(result + 136);
  *(_OWORD *)(a2 + 120) = v15;
  *(_OWORD *)(a2 + 104) = v14;
  *(_OWORD *)(a2 + 88) = v13;
  v16 = *(_OWORD *)(result + 152);
  v17 = *(_OWORD *)(result + 168);
  v18 = *(_OWORD *)(result + 184);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(result + 200);
  *(_OWORD *)(a2 + 184) = v18;
  *(_OWORD *)(a2 + 168) = v17;
  *(_OWORD *)(a2 + 152) = v16;
  v19 = *(_OWORD *)(result + 216);
  v20 = *(_OWORD *)(result + 232);
  v21 = *(_OWORD *)(result + 248);
  *(_OWORD *)(a2 + 259) = *(_OWORD *)(result + 259);
  *(_OWORD *)(a2 + 248) = v21;
  *(_OWORD *)(a2 + 232) = v20;
  *(_OWORD *)(a2 + 216) = v19;
  v22 = *(_QWORD *)(result + 288);
  *(_QWORD *)(a2 + 280) = *(_QWORD *)(result + 280);
  *(_QWORD *)(a2 + 288) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  return result;
}

void sub_20ED7F66C(uint64_t a1)
{
  sub_20ED7F8D0((_QWORD *)(a1 + 8));
}

void sub_20ED7F674(_QWORD *a1)
{
  sub_20ED7F8D0(a1 + 1);
  operator delete(a1);
}

void sub_20ED7F69C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[35];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED7E1F8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED7F7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7F858(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE7ProcessER"
                     "KS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0E"
                                "E7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7F8C4()
{
  return &unk_24C9E73D0;
}

void sub_20ED7F8D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[35];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[5];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[1];
    if (!v11)
      return;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
}

_QWORD *sub_20ED7F9BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E73F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED7F9F4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E73F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7FA3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E73F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED7FA8C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E73F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED7FABC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED7FACC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED7FAF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED7FB8C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7FBC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE9SubscribeE"
                     "NS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE"
                                "9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7FC34()
{
  return &unk_24C9E7450;
}

_QWORD *sub_20ED7FC40(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E7470;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED7FC78(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E7470;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7FCC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E7470;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED7FD10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E7470;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED7FD40(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED7FD50(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED7FD7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED7FE10(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED7FE4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE15AddErrorH"
                     "andlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE"
                                "15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED7FEB8()
{
  return &unk_24C9E74D0;
}

_QWORD *sub_20ED7FEC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E74F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED7FEFC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E74F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED7FF44(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E74F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED7FF9C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E74F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED7FFD4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED7FFE4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED80010(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED800C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED80114(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE16OutputHa"
                     "ndlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0E"
                                "E16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED80180()
{
  return &unk_24C9E7550;
}

_QWORD *sub_20ED8018C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E7570;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED801C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E7570;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8020C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E7570;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED80264(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E7570;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED8029C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED802AC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED802D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED80390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED803DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0E"
                                "E15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types19FeatureFilterInputsEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED80448()
{
  return &unk_24C9E75D0;
}

void sub_20ED80458(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED8047C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED80494(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types19FeatureFilterInputs"
                     "EvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types19FeatureF"
                                "ilterInputsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types19FeatureFilterInputsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types19FeatureFilterInputsEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED80504(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED80530(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8056C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E7640;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED805D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED80664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED80678(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED80708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED8071C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED807E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED807F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED808B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED808CC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED80970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED80988(uint64_t a1)
{
  sub_20ED8218C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED809AC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x38uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1D70;
    v5[1].__vftable = *(std::__shared_weak_count_vtbl **)a2;
    v8 = v5 + 1;
    *(_OWORD *)&v5[1].__shared_owners_ = *(_OWORD *)(a2 + 8);
    v5[2].__vftable = *(std::__shared_weak_count_vtbl **)(a2 + 24);
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9E7898;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *(std::__shared_weak_count_vtbl **)a2;
  v49 = operator new(0x38uLL);
  *v49 = &off_24C9E7918;
  v49[1] = v29;
  v49[2] = v28;
  v49[3] = v48;
  *((_OWORD *)v49 + 2) = *(_OWORD *)(a2 + 8);
  v49[6] = *(_QWORD *)(a2 + 24);
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20ED80DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED80EDC(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count_vtbl *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  __int128 *v65;
  std::string *v66;
  std::runtime_error *exception;
  std::runtime_error *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v64 = (_QWORD *)a1[6];
    v63 = a1 + 6;
    v62 = v64;
    v65 = (__int128 *)*((unsigned __int8 *)v63 + 23);
    if ((char)v65 < 0)
      v65 = (__int128 *)v63[1];
    else
      v62 = v63;
    v79 = v62;
    v80 = v65;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v82;
    else
      v66 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v66);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v68 = std::runtime_error::runtime_error(exception, &v75);
    v68->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v68, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x38uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1D70;
    v9[1].__vftable = *(std::__shared_weak_count_vtbl **)a2;
    v12 = v9 + 1;
    *(_OWORD *)&v9[1].__shared_owners_ = *(_OWORD *)(a2 + 8);
    v9[2].__vftable = *(std::__shared_weak_count_vtbl **)(a2 + 24);
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9E7998;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v69 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v69 = v34;
      *((_QWORD *)&v69 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v69 = 0uLL;
    }
  }
  v55 = *(std::__shared_weak_count_vtbl **)a2;
  v70 = *(_OWORD *)(a2 + 8);
  v71 = *(_QWORD *)(a2 + 24);
  v56 = operator new(0x20uLL);
  v56[1] = 0;
  v56[2] = 0;
  *v56 = &unk_24C9B85F0;
  v56[3] = *a3;
  *a3 = 0;
  v57 = (char *)operator new(0x48uLL);
  *(_QWORD *)v57 = &off_24C9E7A18;
  *(_OWORD *)(v57 + 8) = v69;
  *((_QWORD *)v57 + 3) = v55;
  *((_OWORD *)v57 + 2) = v70;
  *((_QWORD *)v57 + 6) = v71;
  *((_QWORD *)v57 + 7) = v56 + 3;
  *((_QWORD *)v57 + 8) = v56;
  v80 = (__int128 *)v57;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v60 = v80;
  if (v80 == &v78)
  {
    v61 = 4;
    v60 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v58, v59);
}

void sub_20ED8153C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::runtime_error a22,std::exception_ptr a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::promise<void> *v29;
  uint64_t v30;
  std::exception_ptr v31;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v31.__ptr_ = &a23;
    std::promise<void>::set_exception(v29, v31);
    std::exception_ptr::~exception_ptr(&a23);
    std::runtime_error::~runtime_error(&a22);
    if (*(char *)(v30 - 97) < 0)
      operator delete(*(void **)(v30 - 120));
    JUMPOUT(0x20ED8144CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED81644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  v30 = *(_QWORD **)(v28 - 96);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 120);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  sub_20EA031A8(&a27);
  sub_20E86665C((uint64_t)&a25);
  sub_20E86665C((uint64_t)&a18);
  sub_20E86665C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20ED816E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED81700(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED81774(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E7A98;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED81884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED818E8(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E7B18;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED819F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED81A5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E7B98;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED81C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED81D3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E7C18;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED81F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED8201C(uint64_t a1)
{
  return sub_20ED8218C(a1 - 16);
}

void sub_20ED82024(uint64_t a1)
{
  sub_20ED8218C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8204C(uint64_t a1)
{
  return sub_20ED81774((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ED82054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED81A5C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED8205C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED81D3C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED82064(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED8206C(uint64_t a1)
{
  return sub_20ED8218C(a1 - 24);
}

void sub_20ED82074(uint64_t a1)
{
  sub_20ED8218C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8209C(uint64_t a1)
{
  return sub_20ED818E8((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED820A4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED820AC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED82114(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED8217C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED8218C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9E76B8;
  *(_QWORD *)(a1 + 16) = &unk_24C9E7730;
  *(_QWORD *)(a1 + 24) = &unk_24C9E7770;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20ED82378(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E7898;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED823BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E7898;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED82410(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E7898;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED82480(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E7898;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED824D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED8250C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED82544(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ED82868((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED8270C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED827F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE25EnqueueMessa"
                     "geAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE25E"
                                "nqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8285C()
{
  return &unk_24C9E78F8;
}

void sub_20ED82868(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ED82900()
{
  __break(1u);
}

void sub_20ED829AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED829CCLL);
}

_QWORD *sub_20ED829D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E7918;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED82A10(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E7918;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20ED82A58(__n128 *a1)
{
  __n128 *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (__n128 *)operator new(0x38uLL);
  v4 = a1->n128_u64[1];
  v3 = a1[1].n128_u64[0];
  v2->n128_u64[0] = (unint64_t)&off_24C9E7918;
  v2->n128_u64[1] = v4;
  v2[1].n128_u64[0] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v2[1].n128_u64[1] = a1[1].n128_u64[1];
  result = a1[2];
  v2[2] = result;
  v2[3].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

__n128 sub_20ED82AC0(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = a1->n128_u64[1];
  v2 = a1[1].n128_u64[0];
  a2->n128_u64[0] = (unint64_t)&off_24C9E7918;
  a2->n128_u64[1] = v3;
  a2[1].n128_u64[0] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[1].n128_u64[1] = a1[1].n128_u64[1];
  result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

void sub_20ED82B08(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED82B18(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED82B44(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ED82868((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED82BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED82C38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED82CA4()
{
  return &unk_24C9E7978;
}

_QWORD *sub_20ED82CB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E7998;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED82D38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E7998;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED82DD0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E7998;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED82E60(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E7998;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED82ED0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED82F50(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED82FCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED82868(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED83280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED833D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE25EnqueueMessa"
                     "geAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE25E"
                                "nqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED83444()
{
  return &unk_24C9E79F8;
}

_QWORD *sub_20ED83450(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E7A18;
  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED834CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E7A18;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED83558(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x48uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E7A18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = *(_QWORD *)(a1 + 24);
  *((_OWORD *)result + 2) = *(_OWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 56);
  result[6] = *(_QWORD *)(a1 + 48);
  result[7] = v7;
  v8 = *(_QWORD *)(a1 + 64);
  result[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t sub_20ED835E0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E7A18;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  v6 = *(_OWORD *)(result + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(result + 48);
  *(_OWORD *)(a2 + 32) = v6;
  v7 = *(_QWORD *)(result + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(result + 56);
  *(_QWORD *)(a2 + 64) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void sub_20ED83648(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED836B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED83728(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[7];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED82868((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED8383C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED838E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE7ProcessERKS6_"
                     "NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE7Pr"
                                "ocessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED83950()
{
  return &unk_24C9E7A78;
}

_QWORD *sub_20ED8395C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E7A98;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED83994(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E7A98;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED839DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E7A98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED83A2C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E7A98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED83A5C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED83A6C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED83A98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED83B2C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED83B68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE9SubscribeENS1_"
                     "12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE9Sub"
                                "scribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED83BD4()
{
  return &unk_24C9E7AF8;
}

_QWORD *sub_20ED83BE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E7B18;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED83C18(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E7B18;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED83C60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E7B18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED83CB0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E7B18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED83CE0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED83CF0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED83D1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED83DB0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED83DEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE15AddErrorHandl"
                     "erENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE15Ad"
                                "dErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED83E58()
{
  return &unk_24C9E7B78;
}

_QWORD *sub_20ED83E64(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E7B98;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED83E9C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E7B98;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED83EE4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E7B98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED83F3C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E7B98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED83F74(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED83F84(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED83FB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED84068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED840B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE16O"
                                "utputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED84120()
{
  return &unk_24C9E7BF8;
}

_QWORD *sub_20ED8412C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E7C18;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED84164(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E7C18;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED841AC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E7C18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED84204(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E7C18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED8423C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED8424C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED84278(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED84330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8437C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE15E"
                                "rrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED843E8()
{
  return &unk_24C9E7C78;
}

void sub_20ED843F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED8441C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED84434(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types15GyroMeasurementEvvv"
                     "Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types15GyroMeas"
                                "urementEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types15GyroMeasurementEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types15GyroMeasurementEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20ED844A8(uint64_t a1)
{
  sub_20ED85E10(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED844CC(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E7EE8;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9E7F38;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    v54 = (unint64_t *)&v53->~__shared_weak_count_0;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9E7FB8;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20ED8492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EBB635C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EBB635C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED84980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20ED849D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED849F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED84A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED84A48(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED84A58(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED84A64(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED84A74(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::runtime_error v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  _QWORD *v82;
  __int128 *v83;
  _QWORD v84[3];
  std::string v85;
  std::string *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v81 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v81 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v82 = v67;
    v83 = v70;
    sub_20E8778D4((uint64_t)&v81, (uint64_t)v84, 0, 0, &v85);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v85;
    else
      v71 = (std::string *)v85.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v78, (const char *)v71);
    v78.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v78);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v73, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8038;
    v6[1].__vftable = *a3;
    v77 = v6;
    v75 = &v6[1].__vftable;
    v76 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E7EE8;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v79 = v9 + 1;
    v80 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v81 = v19;
    *((_QWORD *)&v81 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v81 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v81 = v47;
            *((_QWORD *)&v81 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v81 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9E8088;
        *(_OWORD *)(v52 + 8) = v81;
        v81 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v82 = 0;
        v83 = 0;
        *((_QWORD *)v52 + 5) = v75;
        *((_QWORD *)v52 + 6) = v76;
        v84[0] = 0;
        v84[1] = 0;
        v86 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v85);
        v53 = v86;
        if (v86 == &v85)
        {
          v54 = 4;
          v53 = &v85;
        }
        else
        {
          if (!v86)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v80)
        {
          v55 = &v80->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        if (v77)
        {
          v57 = (unint64_t *)&v77->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v74[0] = v38;
      v74[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = a2[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &off_24C9E8038;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9E8108;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v64 + 3) = v59;
  *((_QWORD *)v64 + 4) = v60;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v83 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v81);
  v65 = v83;
  if (v83 == &v81)
  {
    v66 = 4;
    v65 = &v81;
  }
  else
  {
    if (!v83)
      return;
    v66 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v65 + 8 * v66))(v65);
}

void sub_20ED85150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 97) < 0)
        operator delete(*(void **)(v25 - 120));
      JUMPOUT(0x20ED85060);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED851C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 97) < 0)
  {
    operator delete(*(void **)(v24 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED85218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20EBB7258(&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20EBB7258(&a9);
  _Unwind_Resume(a1);
}

void sub_20ED8526C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_20E86665C(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20ED85298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED85338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED85354(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED853C8(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9E8188;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9CC650;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20ED854F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED8556C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E8208;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED8567C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED856E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E8288;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED858F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED859C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E8308;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED85BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED85CA0(uint64_t a1)
{
  return sub_20ED85E10(a1 - 16);
}

void sub_20ED85CA8(uint64_t a1)
{
  sub_20ED85E10(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED85CD0(uint64_t a1, uint64_t a2)
{
  return sub_20ED853C8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED85CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED856E0((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED85CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED859C0((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED85CE8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED85CF0(uint64_t a1)
{
  return sub_20ED85E10(a1 - 24);
}

void sub_20ED85CF8(uint64_t a1)
{
  sub_20ED85E10(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED85D20(uint64_t a1)
{
  return sub_20ED8556C((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED85D28(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED85D30(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED85D98(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED85E00(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED85E10(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9E7CE8;
  *(_QWORD *)(a1 + 16) = &unk_24C9E7D60;
  *(_QWORD *)(a1 + 24) = &unk_24C9E7DA0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ED86010(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E7EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED86020(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E7EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED86050(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *sub_20ED860AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E7F38;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED860F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E7F38;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED86144(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E7F38;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED861B4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E7F38;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED86204(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED86240(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED86278(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20ED8659C((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20ED869B0(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED86440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20ED869B0(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED86524(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEE"
                     "NS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE25EnqueueMessageAndDispatchIZNKSC_4SendE"
                     "RKS9_EUlT_T0_E_EEvSF_SG_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPose"
                                "MetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE25EnqueueMessageAn"
                                "dDispatchIZNKSC_4SendERKS9_EUlT_T0_E_EEvSF_SG_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKS9_EUlT_T0_E_EEvSF_SG_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKS9_EUlT_T0_E_EEvSF_SG_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED86590()
{
  return &unk_24C9E7F98;
}

void sub_20ED8659C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  std::exception_ptr v20;
  void *__p;
  _BYTE *v22;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v20.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v20), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = __p;
    v17 = v22 - (_BYTE *)__p;
    if (v22 != __p)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v17 >> 2) >= 0x1555555555555556)
        sub_20E867F44();
      v18 = (char *)operator new(v22 - (_BYTE *)__p);
      *(_QWORD *)(v14 + 144) = v18;
      *(_QWORD *)(v14 + 152) = v18;
      v19 = &v18[4 * (v17 >> 2)];
      *(_QWORD *)(v14 + 160) = v19;
      memcpy(v18, v16, v17 - 1);
      *(_QWORD *)(v14 + 152) = v19;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20ED86880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, void *__p, uint64_t a18)
{
  std::mutex *v18;
  void **v19;
  uint64_t v20;
  void **v22;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v22 = v19;
  v24 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v20 + 152) = v24;
    operator delete(v24);
  }
  std::mutex::unlock(v18);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a2 == 1)
  {
    v25 = (uint64_t *)__cxa_begin_catch(a1);
    v26 = *v25;
    a10 = *(_QWORD *)(*(_QWORD *)(*v25 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v26 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v27 = (uint64_t *)&a11;
    else
      v27 = a11;
    if ((a16 & 0x80u) == 0)
      v28 = a16;
    else
      v28 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v27, v28, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20ED86984(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED869A4);
}

uint64_t *sub_20ED869B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20ED86A9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20ED869F8);
}

_QWORD *sub_20ED86AD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E7FB8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED86B54(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E7FB8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED86BE0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E7FB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED86C50(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E7FB8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED86CA0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED86D10(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED86D80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20ED8659C((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20ED869B0(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED86E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20ED869B0(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED86E74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEE"
                     "NS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE4SendERKS9_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPose"
                                "MetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE4SendERKS9_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE4SendERKS9_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE4SendERKS9_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED86EE0()
{
  return &unk_24C9E8018;
}

void sub_20ED86EEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED86EFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20ED86F2C(uint64_t a1)
{
  return sub_20ED869B0((uint64_t *)(a1 + 24));
}

_QWORD *sub_20ED86F38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E8088;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED86FC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E8088;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED87058(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8088;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED870E8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8088;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED87158(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED871D8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED87254(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED8659C(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20ED869B0((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED87530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20ED8755C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20ED87368);
    JUMPOUT(0x20ED87338);
  }
  sub_20E96CE78(3u);
}

void sub_20ED875B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20ED875E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20ED869B0(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED876D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEE"
                     "NS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE25EnqueueMessageAndDispatchIZNKSC_7Proce"
                     "ssERKS9_NS4_7promiseISB_EEEUlT_T0_E_EEvSF_SI_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPose"
                                "MetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE25EnqueueMessageAn"
                                "dDispatchIZNKSC_7ProcessERKS9_NS4_7promiseISB_EEEUlT_T0_E_EEvSF_SI_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKS9_NS4_7promiseISB_EEEUlT_T0_E_EEvSF_SI_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKS9_NS4_7promiseISB_EEEUlT_T0_E_EEvSF_SI_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8773C()
{
  return &unk_24C9E80E8;
}

_QWORD *sub_20ED87748(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9E8108;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20ED877FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9E8108;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED878C0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8108;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED87950(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8108;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED879C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20ED87A6C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20ED87B14(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED8659C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20ED869B0((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED87C24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20ED87C9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20ED87CD0);
  JUMPOUT(0x20ED87D00);
}

uint64_t sub_20ED87D08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEE"
                     "NS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE7ProcessERKS9_NS4_7promiseISB_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPose"
                                "MetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE7ProcessERKS9_NS4_"
                                "7promiseISB_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE7ProcessERKS9_NS4_7promiseISB_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE7ProcessERKS9_NS4_7promiseISB_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED87D74()
{
  return &unk_24C9E8168;
}

_QWORD *sub_20ED87D80(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E8188;
  v2 = a1[4];
  a1[3] = &off_24C9CC650;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED87DD8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E8188;
  v2 = a1[4];
  a1[3] = &off_24C9CC650;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED87E40(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9E8188;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9CC650;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20ED87EB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED87ED8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9E8188;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9CC650;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20ED87F40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20ED87F58(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9CC650;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED87FA8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9CC650;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED87FF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9CC650;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED880A8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED880E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEEN"
                     "S6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE9SubscribeENS1_12ChannelInputISB_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseM"
                                "etadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE9SubscribeENS1_12Ch"
                                "annelInputISB_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE9SubscribeENS1_12ChannelInputISB_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE9SubscribeENS1_12ChannelInputISB_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED88150()
{
  return &unk_24C9E81E8;
}

_QWORD *sub_20ED8815C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E8208;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED88194(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E8208;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED881DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E8208;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED8822C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E8208;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED8825C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED8826C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED88298(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED8832C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED88368(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEEN"
                     "S6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseM"
                                "etadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE15AddErrorHandlerEN"
                                "S1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED883D4()
{
  return &unk_24C9E8268;
}

_QWORD *sub_20ED883E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E8288;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED88418(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E8288;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED88460(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8288;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED884B8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8288;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED884F0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED88500(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED8852C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20ED886A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED88718(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEE"
                     "NS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPose"
                                "MetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED88784()
{
  return &unk_24C9E82E8;
}

_QWORD *sub_20ED88790(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E8308;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED887C8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E8308;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED88810(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8308;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED88868(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8308;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED888A0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED888B0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED888DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED88994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED889E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEE"
                     "NS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPose"
                                "MetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED88A4C()
{
  return &unk_24C9E8368;
}

void sub_20ED88A5C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED88A80(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED88A98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio8metadata15VIOPoseMetadat"
                     "aEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio8metadata15VIO"
                                "PoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EEEE27__shared_p"
                                "tr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio8metadata15VIOPoseMetadataEEENS6_22multicamera_node_group19CalibrationRequestsEvSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED88B08(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED88B34(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED88B70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E83D8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED88BD8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED88C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED88C7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED88D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED88D20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED88DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED88DF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED88EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED88ED0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED88F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED88F8C(uint64_t a1)
{
  sub_20ED8A894(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED88FB0(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8640;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9E8690;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    v54 = (unint64_t *)&v53->~__shared_weak_count_0;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9E8710;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20ED89410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EBB635C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EBB635C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED89464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20ED894B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED894D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED8950C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED8952C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED8953C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED89548(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED89558(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::runtime_error v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  _QWORD *v82;
  __int128 *v83;
  _QWORD v84[3];
  std::string v85;
  std::string *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v81 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v81 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v82 = v67;
    v83 = v70;
    sub_20E8778D4((uint64_t)&v81, (uint64_t)v84, 0, 0, &v85);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v85;
    else
      v71 = (std::string *)v85.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v78, (const char *)v71);
    v78.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v78);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v73, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v77 = v6;
    v75 = &v6[1].__vftable;
    v76 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8640;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v79 = v9 + 1;
    v80 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v81 = v19;
    *((_QWORD *)&v81 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v81 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v81 = v47;
            *((_QWORD *)&v81 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v81 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9E8790;
        *(_OWORD *)(v52 + 8) = v81;
        v81 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v82 = 0;
        v83 = 0;
        *((_QWORD *)v52 + 5) = v75;
        *((_QWORD *)v52 + 6) = v76;
        v84[0] = 0;
        v84[1] = 0;
        v86 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v85);
        v53 = v86;
        if (v86 == &v85)
        {
          v54 = 4;
          v53 = &v85;
        }
        else
        {
          if (!v86)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v80)
        {
          v55 = &v80->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        if (v77)
        {
          v57 = (unint64_t *)&v77->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v74[0] = v38;
      v74[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = a2[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &unk_24C9B85F0;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9E8810;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v64 + 3) = v59;
  *((_QWORD *)v64 + 4) = v60;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v83 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v81);
  v65 = v83;
  if (v83 == &v81)
  {
    v66 = 4;
    v65 = &v81;
  }
  else
  {
    if (!v83)
      return;
    v66 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v65 + 8 * v66))(v65);
}

void sub_20ED89C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 97) < 0)
      operator delete(*(void **)(v28 - 120));
    JUMPOUT(0x20ED89B4CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED89D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED89DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED89E08(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED89E7C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E8890;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED89F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED89FF0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E8910;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED8A100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED8A164@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E8990;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED8A37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED8A444@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E8A10;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED8A65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED8A724(uint64_t a1)
{
  return sub_20ED8A894(a1 - 16);
}

void sub_20ED8A72C(uint64_t a1)
{
  sub_20ED8A894(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8A754(uint64_t a1)
{
  return sub_20ED89E7C((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ED8A75C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED8A164((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED8A764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED8A444((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED8A76C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED8A774(uint64_t a1)
{
  return sub_20ED8A894(a1 - 24);
}

void sub_20ED8A77C(uint64_t a1)
{
  sub_20ED8A894(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8A7A4(uint64_t a1)
{
  return sub_20ED89FF0((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED8A7AC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED8A7B4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED8A81C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED8A884(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED8A894(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9E8450;
  *(_QWORD *)(a1 + 16) = &unk_24C9E84C8;
  *(_QWORD *)(a1 + 24) = &unk_24C9E8508;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ED8AA80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED8AA90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED8AAC0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *sub_20ED8AB1C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E8690;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED8AB60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E8690;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8ABB4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8690;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED8AC24(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8690;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED8AC74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED8ACB0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED8ACE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ED8B00C((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED8AEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8AF94(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudE"
                     "EEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16Jasper"
                                "PointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8B000()
{
  return &unk_24C9E86F0;
}

void sub_20ED8B00C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ED8B0A4()
{
  __break(1u);
}

void sub_20ED8B150(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED8B170);
}

_QWORD *sub_20ED8B17C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E8710;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED8B1F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E8710;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8B284(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8710;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED8B2F4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8710;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED8B344(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED8B3B4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED8B424(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ED8B00C((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED8B4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8B518(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudE"
                     "EEvvvLb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16Jasper"
                                "PointCloudEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8B584()
{
  return &unk_24C9E8770;
}

_QWORD *sub_20ED8B590(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E8790;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED8B618(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E8790;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED8B6B0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8790;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED8B740(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8790;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED8B7B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED8B830(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED8B8AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED8B00C(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED8BB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED8BCB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudE"
                     "EEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16Jasper"
                                "PointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUl"
                                "T_T0_E_EEvSE_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8BD24()
{
  return &unk_24C9E87F0;
}

_QWORD *sub_20ED8BD30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9E8810;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20ED8BDE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9E8810;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8BEA8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8810;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED8BF38(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8810;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED8BFA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20ED8C054(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20ED8C0FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED8B00C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED8C210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8C2B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudE"
                     "EEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16Jasper"
                                "PointCloudEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8C324()
{
  return &unk_24C9E8870;
}

_QWORD *sub_20ED8C330(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E8890;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED8C368(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E8890;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8C3B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E8890;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED8C400(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E8890;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED8C430(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED8C440(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED8C46C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED8C500(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8C53C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEE"
                     "EvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperP"
                                "ointCloudEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8C5A8()
{
  return &unk_24C9E88F0;
}

_QWORD *sub_20ED8C5B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E8910;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED8C5EC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E8910;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8C634(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E8910;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED8C684(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E8910;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED8C6B4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED8C6C4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED8C6F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED8C784(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8C7C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEE"
                     "EvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperP"
                                "ointCloudEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8C82C()
{
  return &unk_24C9E8970;
}

_QWORD *sub_20ED8C838(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E8990;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED8C870(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E8990;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8C8B8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8990;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED8C910(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8990;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED8C948(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED8C958(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED8C984(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED8CA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8CA88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudE"
                     "EEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16Jasper"
                                "PointCloudEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8CAF4()
{
  return &unk_24C9E89F0;
}

_QWORD *sub_20ED8CB00(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E8A10;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED8CB38(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E8A10;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8CB80(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8A10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED8CBD8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8A10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED8CC10(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED8CC20(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED8CC4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED8CD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8CD50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudE"
                     "EEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16Jasper"
                                "PointCloudEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio8cv_types16JasperPointCloudEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8CDBC()
{
  return &unk_24C9E8A70;
}

void sub_20ED8CDCC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED8CDF0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED8CE08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio8cv_types16JasperPointCl"
                     "oudEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio8cv_types16Ja"
                                "sperPointCloudEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio8cv_types16JasperPointCloudEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio8cv_types16JasperPointCloudEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED8CE78(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED8CEA4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8CEE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E8AE0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED8CF48(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED8CFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED8CFEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED8D07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED8D090(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED8D154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED8D168(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED8D22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED8D240(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED8D2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED8D2FC(uint64_t a1)
{
  sub_20ED8EAC8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20ED8D320(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8D48;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9E8D98;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24C9E8E18;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20ED8D734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8D828(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED8D838(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20ED8D844(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20ED8D854(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8D48;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9E8E98;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24C9B85F0;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9E8F18;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20ED8DE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x20ED8DD8CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED8DF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED8E020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20ED8E03C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20ED8E0B0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E8F98;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED8E1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED8E224(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9E9018;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20ED8E334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20ED8E398@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E9098;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED8E5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20ED8E678@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9E9118;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20ED8E890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED8E958(uint64_t a1)
{
  return sub_20ED8EAC8(a1 - 16);
}

void sub_20ED8E960(uint64_t a1)
{
  sub_20ED8EAC8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8E988(uint64_t a1)
{
  return sub_20ED8E0B0((_QWORD *)(a1 - 16));
}

uint64_t *sub_20ED8E990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED8E398((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20ED8E998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20ED8E678((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20ED8E9A0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20ED8E9A8(uint64_t a1)
{
  return sub_20ED8EAC8(a1 - 24);
}

void sub_20ED8E9B0(uint64_t a1)
{
  sub_20ED8EAC8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8E9D8(uint64_t a1)
{
  return sub_20ED8E224((_QWORD *)(a1 - 24));
}

uint64_t sub_20ED8E9E0(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20ED8E9E8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20ED8EA50(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED8EAB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20ED8EAC8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9E8B58;
  *(_QWORD *)(a1 + 16) = &unk_24C9E8BD0;
  *(_QWORD *)(a1 + 24) = &unk_24C9E8C10;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20ED8ECB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20ED8ECC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E8D48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8ECFC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E8D98;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20ED8ED40(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9E8D98;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8ED94(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8D98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20ED8EE04(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8D98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED8EE54(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20ED8EE90(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20ED8EEC8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20ED8F1EC((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED8F090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8F174(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelecto"
                     "rEnableInfoEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperF"
                                "rameSelectorEnableInfoEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8F1E0()
{
  return &unk_24C9E8DF8;
}

void sub_20ED8F1EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20ED8F284()
{
  __break(1u);
}

void sub_20ED8F330(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20ED8F350);
}

_QWORD *sub_20ED8F35C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E8E18;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED8F394(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E8E18;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8F3DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E8E18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_20ED8F434(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E8E18;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_20ED8F46C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED8F47C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED8F4A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20ED8F1EC((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED8F550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED8F59C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelecto"
                     "rEnableInfoEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperF"
                                "rameSelectorEnableInfoEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8F608()
{
  return &unk_24C9E8E78;
}

_QWORD *sub_20ED8F614(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E8E98;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20ED8F69C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9E8E98;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20ED8F734(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E8E98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20ED8F7C4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E8E98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20ED8F834(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20ED8F8B4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20ED8F930(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20ED8F1EC(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20ED8FBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED8FD3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelecto"
                     "rEnableInfoEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperF"
                                "rameSelectorEnableInfoEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17p"
                                "romiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED8FDA8()
{
  return &unk_24C9E8EF8;
}

_QWORD *sub_20ED8FDB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E8F18;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20ED8FE30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9E8F18;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED8FEBC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E8F18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20ED8FF34(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9E8F18;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20ED8FF8C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20ED8FFFC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20ED9006C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20ED8F1EC((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20ED90180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED90228(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelecto"
                     "rEnableInfoEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperF"
                                "rameSelectorEnableInfoEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED90294()
{
  return &unk_24C9E8F78;
}

_QWORD *sub_20ED902A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E8F98;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED902D8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E8F98;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED90320(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E8F98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED90370(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E8F98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED903A0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED903B0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED903DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED90470(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED904AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelector"
                     "EnableInfoEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFr"
                                "ameSelectorEnableInfoEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED90518()
{
  return &unk_24C9E8FF8;
}

_QWORD *sub_20ED90524(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E9018;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED9055C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E9018;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED905A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E9018;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20ED905F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9E9018;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20ED90624(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED90634(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED90660(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED906F4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED90730(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelector"
                     "EnableInfoEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFr"
                                "ameSelectorEnableInfoEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED9079C()
{
  return &unk_24C9E9078;
}

_QWORD *sub_20ED907A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E9098;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED907E0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E9098;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED90828(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E9098;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED90880(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E9098;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED908B8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED908C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED908F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED909AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED909F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelecto"
                     "rEnableInfoEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperF"
                                "rameSelectorEnableInfoEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED90A64()
{
  return &unk_24C9E90F8;
}

_QWORD *sub_20ED90A70(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9E9118;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED90AA8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9E9118;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED90AF0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9E9118;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20ED90B48(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9E9118;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20ED90B80(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20ED90B90(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20ED90BBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED90C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20ED90CC0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelecto"
                     "rEnableInfoEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperF"
                                "rameSelectorEnableInfoEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20ED90D2C()
{
  return &unk_24C9E9178;
}

void sub_20ED90D3C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED90D60(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20ED90D78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio27frame_downsample_node_group2"
                     "9JasperFrameSelectorEnableInfoEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio27frame_downsample_"
                                "node_group29JasperFrameSelectorEnableInfoEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20ED90DE8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20ED90E14(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED90E50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9E91E8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20ED90EB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED90F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED90F5C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20ED90FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED91000(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED910C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED910D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20ED9119C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED911B0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20ED91254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED91268(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E61F8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC438;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED9144C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E6190;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9E61C0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED91630(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E6128;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9E6158;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC400;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED91814(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E60F8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9D10A0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED919F8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E60C8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC760;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED91BDC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E6098;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B6B70;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED91DC0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9E6068;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC340;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20ED91FA4(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24C9E6038;
  v2 = (uint64_t *)(a1 + 72);
  sub_20ED920B0((uint64_t *)(a1 + 72));
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    sub_20ED920B0(v2);
    v6 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    sub_20ED920B0(v2);
    v6 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v6)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_20ED920B0(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_20ED91268(v1 + 1008);
    sub_20ED9144C(v1 + 840);
    sub_20ED91630(v1 + 672);
    sub_20ED91814(v1 + 504);
    sub_20ED919F8(v1 + 336);
    sub_20ED91BDC(v1 + 168);
    sub_20ED91DC0(v1);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

_QWORD *sub_20ED92128(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  if (result)
  {
    v1 = result;
    sub_20ED91FA4((uint64_t)(result + 12));
    v2 = (std::__shared_weak_count *)v1[11];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)v1[9];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)v1[7];
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)v1[5];
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)v1[3];
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)v1[1];
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

_QWORD *sub_20ED922B8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  double v9;
  uint64_t v11;

  a1[1] = 0;
  v3 = a1 + 1;
  *a1 = &off_24C9E9260;
  a1[2] = 0;
  a1[3] = 0;
  v4 = *(_QWORD *)(a2 + 2888);
  for (i = *(_QWORD *)(a2 + 2896); v4 != i; v4 += 16)
  {
    if (*(_BYTE *)(v4 + 13))
    {
      v6 = operator new();
      *(_QWORD *)v6 = &off_24C9E42A8;
      v11 = v6;
      v7 = (uint64_t *)a1[2];
      if ((unint64_t)v7 < a1[3])
        goto LABEL_6;
    }
    else
    {
      v6 = operator new();
      *(_QWORD *)v6 = &off_24C9E92F0;
      *(_OWORD *)(v6 + 8) = *(_OWORD *)v4;
      v9 = *(float *)(v4 + 4);
      *(_BYTE *)(v6 + 24) = 1;
      *(_BYTE *)(v6 + 32) = 0;
      *(_BYTE *)(v6 + 40) = 0;
      *(double *)(v6 + 48) = v9;
      *(_BYTE *)(v6 + 56) = 0;
      *(_BYTE *)(v6 + 64) = 0;
      v11 = v6;
      v7 = (uint64_t *)a1[2];
      if ((unint64_t)v7 < a1[3])
      {
LABEL_6:
        v11 = 0;
        *v7 = v6;
        a1[2] = v7 + 1;
        v8 = v11;
        v11 = 0;
        if (!v8)
          continue;
LABEL_10:
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        continue;
      }
    }
    a1[2] = sub_20ED925E0(v3, &v11);
    v8 = v11;
    v11 = 0;
    if (v8)
      goto LABEL_10;
  }
  return a1;
}

void sub_20ED92418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    sub_20EA5C654(v10);
    _Unwind_Resume(a1);
  }
  sub_20EA5C654(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED92458(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_20ED924A4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(a2 + 392);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 >= (*(_QWORD *)(a1 + 16) - v3) >> 3)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v2) + 24))(*(_QWORD *)(v3 + 8 * v2));
}

_QWORD *sub_20ED924D0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24C9E9260;
  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20ED92550(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24C9E9260;
  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20ED925E0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_20E867F44();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_20E877A38();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    v19 = &v15[-v18];
    v20 = v15 - 16;
    v21 = &v9[8 * v4 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v20 - 1);
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t sub_20ED9277C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v13;

  *(_QWORD *)a1 = off_24C9E92A8;
  sub_20E92D224(a1 + 8, a2);
  v4 = (_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 248) = 257;
  *(_OWORD *)(a1 + 256) = xmmword_210377890;
  *(_QWORD *)(a1 + 272) = 0x3F8000003D4CCCCDLL;
  if (v3 - *(_QWORD *)(a1 + 8) != 8
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/PrimaryStreamFrameSelector.cpp", 95, (uint64_t)"config_.primary_cameras.size() == 1", 35, (uint64_t)"PrimaryStreamFrameSelector cannot use multiple primary cameras.", 63, (void (*)(void **))sub_21023DDB0))
  {
LABEL_22:
    abort();
  }
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 == v5)
  {
    if (*(_DWORD *)(a1 + 56) != 2)
      goto LABEL_8;
  }
  else if (v5 - v6 == 8)
  {
    goto LABEL_8;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/PrimaryStreamFrameSelector.cpp", 99, (uint64_t)"config_.secondary_cameras.size() == 1", 37, (uint64_t)"PrimaryStreamFrameSelector cannot use multiple secondary cameras.", 65, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_22;
  }
LABEL_8:
  v7 = *(_DWORD *)(a1 + 56);
  v8 = (_QWORD *)(a1 + 16);
  if (v7 < 2 || (v8 = (_QWORD *)(a1 + 40), v7 == 2))
  {
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(*v8 - 8);
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) != v9)
      goto LABEL_12;
LABEL_19:
    v13 = 0;
    goto LABEL_20;
  }
  if (v7 == 3)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/PrimaryStreamFrameSelector.cpp", 112, (uint64_t)"", 0, (uint64_t)"SingleStreamFrameAlternatorNodeWorker should never be used with MultiplePrimaryCameras camera mode", 98, (void (*)(void **))sub_21023DDB0);
    goto LABEL_22;
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == v9)
    goto LABEL_19;
LABEL_12:
  v11 = *(_DWORD *)(v9 - 8);
  v10 = *(_DWORD *)(v9 - 4);
  v13 = *(_DWORD *)(*v4 - 8) != v11 || *(_DWORD *)(*v4 - 4) != v10;
LABEL_20:
  *(_BYTE *)(a1 + 248) = v13;
  return a1;
}

void sub_20ED92950(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v1 + 247) < 0)
    operator delete(*v3);
  sub_20E9AA8C8(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED92974(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  double v7;
  double v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  unint64_t v47;
  const char *v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  uint64_t v72;
  unint64_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  const char *v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  int v81;
  const char *v82;
  unint64_t v83;
  uint64_t v84;
  int32x4_t v85;
  int32x4_t v86;
  uint8x8_t *v87;
  unint64_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  uint8x16_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  int32x4_t v100;
  int32x4_t v101;
  uint64_t v102;
  uint8x8_t *v103;
  uint8x8_t v104;
  uint16x8_t v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  const char *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  unint64_t v118;
  const char *v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  uint16x8_t v131;
  uint16x8_t v132;
  uint16x8_t v133;
  uint16x8_t v134;
  uint16x8_t v135;
  uint16x8_t v136;
  uint16x8_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  uint64_t v143;
  uint64_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  const char *v148;
  uint16x8_t v149;
  uint16x8_t v150;
  uint16x8_t v151;
  int v152;
  const char *v153;
  unint64_t v154;
  char *v155;
  char *v156;
  int8x8x4_t v157;
  int8x8x4_t v158;
  int8x16x4_t v159;
  int8x16x4_t v160;

  v4 = *(_DWORD *)(a1 + 56);
  if (v4)
  {
    v5 = v4 == 3;
    if (v4 < 3)
      goto LABEL_3;
    goto LABEL_78;
  }
  v10 = *(_QWORD *)(a1 + 16);
  v12 = *(_DWORD *)(v10 - 8);
  v11 = *(_DWORD *)(v10 - 4);
  if (*(_DWORD *)(a1 + 200) == v12 && *(_DWORD *)(a1 + 204) == v11 && *(_QWORD *)(a2 + 80) != 0)
  {
    sub_20EBF8D9C(a1 + 8, &v155);
    v15 = v156 - v155;
    if (v155)
    {
      v156 = v155;
      operator delete(v155);
    }
    if (v15 >= 9)
    {
      kdebug_trace();
      if ((!*(_QWORD *)(a2 + 80) || *(_QWORD *)(a2 + 8) != 1)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/PrimaryStreamFrameSelector.cpp", 35, (uint64_t)"img.data && img.num_channels == 1", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_99;
      }
      v16 = *(_QWORD *)(a2 + 40);
      if (v16 <= 0x14)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/PrimaryStreamFrameSelector.cpp", 36, (uint64_t)"sampling_stride < img.height && sampling_stride > 0", 51, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_99;
        }
        v16 = *(_QWORD *)(a2 + 40);
      }
      v17 = *(_QWORD *)(a2 + 24);
      v18 = v17 + v17 * ((v16 - 1) / 0x14);
      if (v18 >= 0x1010102)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/PrimaryStreamFrameSelector.cpp", 39, (uint64_t)"num_samples <= std::numeric_limits<uint32_t>::max() / 255", 57, (uint64_t)"The resolution is too high; pixel sum will overflow.",
               52,
               (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_99;
        }
        v16 = *(_QWORD *)(a2 + 40);
        LODWORD(v17) = *(_DWORD *)(a2 + 24);
      }
      v154 = v18;
      if (!(_DWORD)v16)
        goto LABEL_38;
      v19 = *(const char **)(a2 + 80);
      v20 = (20 * *(_DWORD *)(a2 + 32));
      if (v17 < 4)
      {
        if ((_DWORD)v17)
        {
          v21 = 0;
          v22 = 0;
          do
          {
            v23 = 0;
            do
              v22 += v19[v23++];
            while (v17 != v23);
            v21 += 20;
            v19 += v20;
          }
          while (v21 < v16);
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 0;
LABEL_76:
          *(double *)(a1 + 264) = (double)(v25 + v24 + v26 + v27 + v22) / (double)v154;
          kdebug_trace();
          goto LABEL_77;
        }
LABEL_38:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
LABEL_39:
        v22 = 0;
        goto LABEL_76;
      }
      v28 = v17 >> 2;
      if (v17 >> 2 <= 1)
        v28 = 1;
      v29 = v17;
      v30 = 4 * (v28 - 1);
      v31 = v30 + 4;
      if ((int)v30 + 4 < v17)
      {
        v32 = 0;
        v22 = 0;
        v27 = 0;
        v26 = 0;
        v25 = 0;
        v24 = 0;
        v33 = v30 + 5;
        if (v30 + 5 <= v29)
          v33 = v29;
        v34 = v33 - v30 - 4;
        v35 = v29 >> 2;
        if (v29 >> 2 <= 1)
          v35 = 1;
        v36 = v19 + 1;
        v37 = (uint64_t)&v19[v30 + 20];
        v38 = &v19[v31];
        while (1)
        {
          if (v35 < 8)
          {
            v39 = 0;
            v40 = 0;
LABEL_60:
            v81 = v28 - v40;
            v82 = &v36[v39];
            do
            {
              v27 += *((unsigned __int8 *)v82 - 1);
              v26 += *(unsigned __int8 *)v82;
              v25 += *((unsigned __int8 *)v82 + 1);
              v24 += *((unsigned __int8 *)v82 + 2);
              v82 += 4;
              --v81;
            }
            while (v81);
            goto LABEL_62;
          }
          if (v35 >= 0x10)
          {
            v42 = 0uLL;
            v43 = (int32x4_t)v27;
            v44 = (int32x4_t)v26;
            v45 = (int32x4_t)v25;
            v46 = (int32x4_t)v24;
            v47 = v35 & 0x3FFFFFF0;
            v48 = v19;
            v49 = 0uLL;
            v50 = 0uLL;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = 0uLL;
            v58 = 0uLL;
            v59 = 0uLL;
            do
            {
              v159 = vld4q_s8(v48);
              v48 += 64;
              v60 = vmovl_u8(*(uint8x8_t *)v159.val[0].i8);
              v61 = vmovl_high_u8((uint8x16_t)v159.val[0]);
              v50 = (int32x4_t)vaddw_high_u16((uint32x4_t)v50, v61);
              v49 = (int32x4_t)vaddw_u16((uint32x4_t)v49, *(uint16x4_t *)v61.i8);
              v42 = (int32x4_t)vaddw_high_u16((uint32x4_t)v42, v60);
              v43 = (int32x4_t)vaddw_u16((uint32x4_t)v43, *(uint16x4_t *)v60.i8);
              v62 = vmovl_u8(*(uint8x8_t *)v159.val[1].i8);
              v63 = vmovl_high_u8((uint8x16_t)v159.val[1]);
              v53 = (int32x4_t)vaddw_high_u16((uint32x4_t)v53, v63);
              v52 = (int32x4_t)vaddw_u16((uint32x4_t)v52, *(uint16x4_t *)v63.i8);
              v51 = (int32x4_t)vaddw_high_u16((uint32x4_t)v51, v62);
              v44 = (int32x4_t)vaddw_u16((uint32x4_t)v44, *(uint16x4_t *)v62.i8);
              v64 = vmovl_u8(*(uint8x8_t *)v159.val[2].i8);
              v65 = vmovl_high_u8((uint8x16_t)v159.val[2]);
              v56 = (int32x4_t)vaddw_high_u16((uint32x4_t)v56, v65);
              v55 = (int32x4_t)vaddw_u16((uint32x4_t)v55, *(uint16x4_t *)v65.i8);
              v54 = (int32x4_t)vaddw_high_u16((uint32x4_t)v54, v64);
              v45 = (int32x4_t)vaddw_u16((uint32x4_t)v45, *(uint16x4_t *)v64.i8);
              v66 = vmovl_u8(*(uint8x8_t *)v159.val[3].i8);
              v159.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v159.val[3]);
              v59 = (int32x4_t)vaddw_high_u16((uint32x4_t)v59, (uint16x8_t)v159.val[0]);
              v58 = (int32x4_t)vaddw_u16((uint32x4_t)v58, *(uint16x4_t *)v159.val[0].i8);
              v57 = (int32x4_t)vaddw_high_u16((uint32x4_t)v57, v66);
              v46 = (int32x4_t)vaddw_u16((uint32x4_t)v46, *(uint16x4_t *)v66.i8);
              v47 -= 16;
            }
            while (v47);
            v24 = vaddvq_s32(vaddq_s32(vaddq_s32(v46, v58), vaddq_s32(v57, v59)));
            v25 = vaddvq_s32(vaddq_s32(vaddq_s32(v45, v55), vaddq_s32(v54, v56)));
            v26 = vaddvq_s32(vaddq_s32(vaddq_s32(v44, v52), vaddq_s32(v51, v53)));
            v27 = vaddvq_s32(vaddq_s32(vaddq_s32(v43, v49), vaddq_s32(v42, v50)));
            if (v35 == (v35 & 0x3FFFFFF0))
              goto LABEL_62;
            v41 = v35 & 0x3FFFFFF0;
            v39 = 4 * v41;
            v40 = v35 & 0x3FFFFFF0;
            if ((v35 & 8) == 0)
              goto LABEL_60;
          }
          else
          {
            v41 = 0;
          }
          v67 = (int32x4_t)v27;
          v68 = (int32x4_t)v26;
          v69 = (int32x4_t)v25;
          v70 = (int32x4_t)v24;
          v71 = 0uLL;
          v72 = 4 * v41;
          v73 = v41 - (v35 & 0x3FFFFFF8);
          v74 = 0uLL;
          v75 = 0uLL;
          v76 = 0uLL;
          do
          {
            v77 = &v19[v72];
            v72 += 32;
            v157 = vld4_s8(v77);
            v78 = vmovl_u8((uint8x8_t)v157.val[0]);
            v71 = (int32x4_t)vaddw_high_u16((uint32x4_t)v71, v78);
            v67 = (int32x4_t)vaddw_u16((uint32x4_t)v67, *(uint16x4_t *)v78.i8);
            v79 = vmovl_u8((uint8x8_t)v157.val[1]);
            v74 = (int32x4_t)vaddw_high_u16((uint32x4_t)v74, v79);
            v68 = (int32x4_t)vaddw_u16((uint32x4_t)v68, *(uint16x4_t *)v79.i8);
            v80 = vmovl_u8((uint8x8_t)v157.val[2]);
            v75 = (int32x4_t)vaddw_high_u16((uint32x4_t)v75, v80);
            v69 = (int32x4_t)vaddw_u16((uint32x4_t)v69, *(uint16x4_t *)v80.i8);
            *(uint16x8_t *)v157.val[0].i8 = vmovl_u8((uint8x8_t)v157.val[3]);
            v76 = (int32x4_t)vaddw_high_u16((uint32x4_t)v76, *(uint16x8_t *)v157.val[0].i8);
            v70 = (int32x4_t)vaddw_u16((uint32x4_t)v70, (uint16x4_t)v157.val[0]);
            v73 += 8;
          }
          while (v73);
          v24 = vaddvq_s32(vaddq_s32(v70, v76));
          v25 = vaddvq_s32(vaddq_s32(v69, v75));
          v26 = vaddvq_s32(vaddq_s32(v68, v74));
          v27 = vaddvq_s32(vaddq_s32(v67, v71));
          v39 = 4 * (v35 & 0x3FFFFFF8);
          v40 = v35 & 0x3FFFFFF8;
          if (v35 != (v35 & 0x3FFFFFF8))
            goto LABEL_60;
LABEL_62:
          if (v34 >= 8)
          {
            if (v34 < 0x20)
            {
              v84 = 0;
LABEL_70:
              v100 = 0uLL;
              v101 = (int32x4_t)v22;
              v102 = v84 - (v34 & 0xFFFFFFFFFFFFFFF8);
              v103 = (uint8x8_t *)&v38[v84];
              do
              {
                v104 = *v103++;
                v105 = vmovl_u8(v104);
                v100 = (int32x4_t)vaddw_high_u16((uint32x4_t)v100, v105);
                v101 = (int32x4_t)vaddw_u16((uint32x4_t)v101, *(uint16x4_t *)v105.i8);
                v102 += 8;
              }
              while (v102);
              v22 = vaddvq_s32(vaddq_s32(v101, v100));
              v83 = v31 + (v34 & 0xFFFFFFFFFFFFFFF8);
              if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_48;
              goto LABEL_73;
            }
            v85 = 0uLL;
            v86 = (int32x4_t)v22;
            v87 = (uint8x8_t *)v37;
            v88 = v34 & 0xFFFFFFFFFFFFFFE0;
            v89 = 0uLL;
            v90 = 0uLL;
            v91 = 0uLL;
            v92 = 0uLL;
            v93 = 0uLL;
            v94 = 0uLL;
            do
            {
              v95 = *(uint8x16_t *)v87[-2].i8;
              v96 = vmovl_u8(*(uint8x8_t *)v95.i8);
              v97 = vmovl_high_u8(v95);
              v98 = vmovl_u8(*v87);
              v99 = vmovl_high_u8(*(uint8x16_t *)v87->i8);
              v90 = (int32x4_t)vaddw_high_u16((uint32x4_t)v90, v97);
              v89 = (int32x4_t)vaddw_u16((uint32x4_t)v89, *(uint16x4_t *)v97.i8);
              v85 = (int32x4_t)vaddw_high_u16((uint32x4_t)v85, v96);
              v86 = (int32x4_t)vaddw_u16((uint32x4_t)v86, *(uint16x4_t *)v96.i8);
              v94 = (int32x4_t)vaddw_high_u16((uint32x4_t)v94, v99);
              v93 = (int32x4_t)vaddw_u16((uint32x4_t)v93, *(uint16x4_t *)v99.i8);
              v92 = (int32x4_t)vaddw_high_u16((uint32x4_t)v92, v98);
              v91 = (int32x4_t)vaddw_u16((uint32x4_t)v91, *(uint16x4_t *)v98.i8);
              v87 += 4;
              v88 -= 32;
            }
            while (v88);
            v22 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v91, v86), vaddq_s32(v93, v89)), vaddq_s32(vaddq_s32(v92, v85), vaddq_s32(v94, v90))));
            if (v34 == (v34 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_48;
            v84 = v34 & 0xFFFFFFFFFFFFFFE0;
            v83 = v31 + (v34 & 0xFFFFFFFFFFFFFFE0);
            if ((v34 & 0x18) != 0)
              goto LABEL_70;
          }
          else
          {
            v83 = v30 + 4;
          }
          do
LABEL_73:
            v22 += v19[v83++];
          while (v83 < v29);
LABEL_48:
          v32 += 20;
          v19 += v20;
          v36 += v20;
          v37 += v20;
          v38 += v20;
          if (v32 >= v16)
            goto LABEL_76;
        }
      }
      v107 = 0;
      v27 = 0;
      v26 = 0;
      v25 = 0;
      v24 = 0;
      v108 = (unint64_t)v17 >> 2;
      if (v108 <= 1)
        v108 = 1;
      v109 = v19 + 1;
      while (1)
      {
        if (v108 >= 8)
        {
          if (v108 < 0x10)
          {
            v112 = 0;
LABEL_92:
            v138 = (int32x4_t)v27;
            v139 = (int32x4_t)v26;
            v140 = (int32x4_t)v25;
            v141 = (int32x4_t)v24;
            v142 = 0uLL;
            v143 = 4 * v112;
            v144 = v112 - (v108 & 0x3FFFFFF8);
            v145 = 0uLL;
            v146 = 0uLL;
            v147 = 0uLL;
            do
            {
              v148 = &v19[v143];
              v143 += 32;
              v158 = vld4_s8(v148);
              v149 = vmovl_u8((uint8x8_t)v158.val[0]);
              v142 = (int32x4_t)vaddw_high_u16((uint32x4_t)v142, v149);
              v138 = (int32x4_t)vaddw_u16((uint32x4_t)v138, *(uint16x4_t *)v149.i8);
              v150 = vmovl_u8((uint8x8_t)v158.val[1]);
              v145 = (int32x4_t)vaddw_high_u16((uint32x4_t)v145, v150);
              v139 = (int32x4_t)vaddw_u16((uint32x4_t)v139, *(uint16x4_t *)v150.i8);
              v151 = vmovl_u8((uint8x8_t)v158.val[2]);
              v146 = (int32x4_t)vaddw_high_u16((uint32x4_t)v146, v151);
              v140 = (int32x4_t)vaddw_u16((uint32x4_t)v140, *(uint16x4_t *)v151.i8);
              *(uint16x8_t *)v158.val[0].i8 = vmovl_u8((uint8x8_t)v158.val[3]);
              v147 = (int32x4_t)vaddw_high_u16((uint32x4_t)v147, *(uint16x8_t *)v158.val[0].i8);
              v141 = (int32x4_t)vaddw_u16((uint32x4_t)v141, (uint16x4_t)v158.val[0]);
              v144 += 8;
            }
            while (v144);
            v24 = vaddvq_s32(vaddq_s32(v141, v147));
            v25 = vaddvq_s32(vaddq_s32(v140, v146));
            v26 = vaddvq_s32(vaddq_s32(v139, v145));
            v27 = vaddvq_s32(vaddq_s32(v138, v142));
            v110 = 4 * (v108 & 0x3FFFFFF8);
            v111 = v108 & 0x3FFFFFF8;
            if (v108 == (v108 & 0x3FFFFFF8))
              goto LABEL_83;
            goto LABEL_95;
          }
          v113 = 0uLL;
          v114 = (int32x4_t)v27;
          v115 = (int32x4_t)v26;
          v116 = (int32x4_t)v25;
          v117 = (int32x4_t)v24;
          v118 = v108 & 0x3FFFFFF0;
          v119 = v19;
          v120 = 0uLL;
          v121 = 0uLL;
          v122 = 0uLL;
          v123 = 0uLL;
          v124 = 0uLL;
          v125 = 0uLL;
          v126 = 0uLL;
          v127 = 0uLL;
          v128 = 0uLL;
          v129 = 0uLL;
          v130 = 0uLL;
          do
          {
            v160 = vld4q_s8(v119);
            v119 += 64;
            v131 = vmovl_u8(*(uint8x8_t *)v160.val[0].i8);
            v132 = vmovl_high_u8((uint8x16_t)v160.val[0]);
            v121 = (int32x4_t)vaddw_high_u16((uint32x4_t)v121, v132);
            v120 = (int32x4_t)vaddw_u16((uint32x4_t)v120, *(uint16x4_t *)v132.i8);
            v113 = (int32x4_t)vaddw_high_u16((uint32x4_t)v113, v131);
            v114 = (int32x4_t)vaddw_u16((uint32x4_t)v114, *(uint16x4_t *)v131.i8);
            v133 = vmovl_u8(*(uint8x8_t *)v160.val[1].i8);
            v134 = vmovl_high_u8((uint8x16_t)v160.val[1]);
            v124 = (int32x4_t)vaddw_high_u16((uint32x4_t)v124, v134);
            v123 = (int32x4_t)vaddw_u16((uint32x4_t)v123, *(uint16x4_t *)v134.i8);
            v122 = (int32x4_t)vaddw_high_u16((uint32x4_t)v122, v133);
            v115 = (int32x4_t)vaddw_u16((uint32x4_t)v115, *(uint16x4_t *)v133.i8);
            v135 = vmovl_u8(*(uint8x8_t *)v160.val[2].i8);
            v136 = vmovl_high_u8((uint8x16_t)v160.val[2]);
            v127 = (int32x4_t)vaddw_high_u16((uint32x4_t)v127, v136);
            v126 = (int32x4_t)vaddw_u16((uint32x4_t)v126, *(uint16x4_t *)v136.i8);
            v125 = (int32x4_t)vaddw_high_u16((uint32x4_t)v125, v135);
            v116 = (int32x4_t)vaddw_u16((uint32x4_t)v116, *(uint16x4_t *)v135.i8);
            v137 = vmovl_u8(*(uint8x8_t *)v160.val[3].i8);
            v160.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v160.val[3]);
            v130 = (int32x4_t)vaddw_high_u16((uint32x4_t)v130, (uint16x8_t)v160.val[0]);
            v129 = (int32x4_t)vaddw_u16((uint32x4_t)v129, *(uint16x4_t *)v160.val[0].i8);
            v128 = (int32x4_t)vaddw_high_u16((uint32x4_t)v128, v137);
            v117 = (int32x4_t)vaddw_u16((uint32x4_t)v117, *(uint16x4_t *)v137.i8);
            v118 -= 16;
          }
          while (v118);
          v24 = vaddvq_s32(vaddq_s32(vaddq_s32(v117, v129), vaddq_s32(v128, v130)));
          v25 = vaddvq_s32(vaddq_s32(vaddq_s32(v116, v126), vaddq_s32(v125, v127)));
          v26 = vaddvq_s32(vaddq_s32(vaddq_s32(v115, v123), vaddq_s32(v122, v124)));
          v27 = vaddvq_s32(vaddq_s32(vaddq_s32(v114, v120), vaddq_s32(v113, v121)));
          if (v108 == (v108 & 0x3FFFFFF0))
            goto LABEL_83;
          v112 = v108 & 0x3FFFFFF0;
          v110 = 4 * v112;
          v111 = v108 & 0x3FFFFFF0;
          if ((v108 & 8) != 0)
            goto LABEL_92;
        }
        else
        {
          v110 = 0;
          v111 = 0;
        }
LABEL_95:
        v152 = v28 - v111;
        v153 = &v109[v110];
        do
        {
          v27 += *((unsigned __int8 *)v153 - 1);
          v26 += *(unsigned __int8 *)v153;
          v25 += *((unsigned __int8 *)v153 + 1);
          v24 += *((unsigned __int8 *)v153 + 2);
          v153 += 4;
          --v152;
        }
        while (v152);
LABEL_83:
        v107 += 20;
        v19 += v20;
        v109 += v20;
        if (v107 >= v16)
          goto LABEL_39;
      }
    }
  }
LABEL_77:
  v106 = *(_DWORD *)(a1 + 56);
  v5 = v106 == 3;
  if (v106 >= 3)
  {
LABEL_78:
    if (!v5)
      return 0;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/PrimaryStreamFrameSelector.cpp", 166, (uint64_t)"", 0, (uint64_t)"SingleStreamFrameAlternatorNodeWorker should never be used with MultiplePrimaryCameras camera mode", 98, (void (*)(void **))sub_21023DDB0);
LABEL_99:
    abort();
  }
LABEL_3:
  if (*(_DWORD *)(a1 + 200) == *(_DWORD *)(a2 + 392) && *(_DWORD *)(a1 + 204) == *(_DWORD *)(a2 + 396))
  {
    v7 = *(double *)(a2 + 112) + *(double *)(a2 + 120);
    v8 = *(double *)(a1 + 256);
    if (v7 > v8 && v7 - v8 > *(double *)(a1 + 192))
    {
      *(double *)(a1 + 256) = v7;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_20ED9344C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  double *v6;
  double v7;
  double v8;
  unsigned __int8 v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  void **v22;
  unint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  const char *v33;
  size_t v34;
  _BYTE *v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  size_t v43;
  std::__shared_weak_count_vtbl *v44;
  std::__shared_weak_count *v45;
  size_t v46;
  size_t v47;
  _QWORD *v48;
  void *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  void *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  const char *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v107;
  float v108;
  float v109;
  float v110;
  float v111;
  double v112;
  double v113;
  float v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  char *v121;
  int v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  int v127;
  const char *v128;
  size_t v129;
  const char *v130;
  int v131;
  char *__s;
  unint64_t v133;
  _QWORD v134[3];
  int v135;
  const char *v136;
  int v137;
  const char *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void *__dst[2];
  int64_t v142;
  void *v143[2];
  _QWORD v144[3];
  const void *v145;
  uint64_t v146;
  const void *v147;
  unint64_t v148;
  void *__p;
  char v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  std::__shared_weak_count *v156;
  char *v157;
  std::__shared_weak_count *v158;
  _QWORD *v159;
  __int128 v160;
  _BYTE v161[24];
  __int128 v162;
  void *v163[2];
  unint64_t v164;
  char v165;
  _QWORD v166[5];

  v166[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(result + 56))
  {
    v3 = result;
    v4 = *(_BYTE *)(a2 + 16);
    if (*(_BYTE *)(result + 249) | v4)
    {
      v5 = *(unsigned __int8 *)(result + 216);
      *(_BYTE *)(result + 249) = v4 ^ 1;
      v6 = (double *)(a2 + 32);
      if (v5)
      {
        if (*v6 < *(double *)(result + 208) + *(double *)(result + 72))
          goto LABEL_14;
        goto LABEL_13;
      }
    }
    else
    {
      *(_BYTE *)(result + 248) = 1;
      if (*(_BYTE *)(result + 216))
        *(_BYTE *)(result + 216) = 0;
      *(_QWORD *)(result + 272) = 0x3F8000003D4CCCCDLL;
      *(_QWORD *)(result + 264) = 0x405FC00000000000;
      *(_BYTE *)(result + 249) = v4 ^ 1;
      v6 = (double *)(a2 + 32);
    }
    if (*(_BYTE *)(result + 248))
      v7 = *(double *)(result + 80);
    else
      v7 = *(double *)(result + 72);
    v8 = *v6 + v7;
    *(double *)(result + 208) = v8;
    *(_BYTE *)(result + 216) = 1;
    if (*v6 < v8 + *(double *)(result + 72))
    {
LABEL_14:
      v9 = atomic_load((unsigned __int8 *)&qword_254A5F920);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F920))
      {
        sub_21021D3D8(v161);
        sub_20E8610C0(v143, "cv3d.vio");
        sub_20E8C4068((uint64_t **)v161, (uint64_t)v143, &qword_254A5F918);
        if (SHIBYTE(v144[0]) < 0)
          operator delete(v143[0]);
        __cxa_guard_release(&qword_254A5F920);
      }
      v154 = qword_254A5F918;
      if (**(int **)(qword_254A5F918 + 56) > 2
        || (v10 = *(unsigned __int8 *)(qword_254A5F918 + 72),
            v11 = sub_20E8C31DC(qword_254A5F918, "OSLogSurrogateAppender", 1, 0),
            v12 = v11,
            !v10)
        && !v11)
      {
LABEL_154:
        v103 = *(_DWORD *)(a2 + 392);
        v104 = *(_DWORD *)(v3 + 60);
        v105 = *(unsigned __int8 *)(a2 + 401);
        if (*(_BYTE *)(a2 + 401))
          v105 = *(double *)(a2 + 384) < *(double *)(v3 + 104);
        if (v103 > v104 || *(_DWORD *)(a2 + 396) > v104)
          v107 = 1;
        else
          v107 = v105;
        v108 = *(float *)(v3 + 112);
        if (v107)
          v109 = *(float *)(v3 + 112);
        else
          v109 = v108 * 0.0;
        v110 = 1.0 - v108;
        v111 = v109 + (float)((float)(1.0 - v108) * *(float *)(v3 + 272));
        *(float *)(v3 + 272) = v111;
        v112 = v111;
        v113 = *(double *)(v3 + 88);
        if (*(_DWORD *)(v3 + 64) > v103)
          v108 = v108 * 0.0;
        v114 = v108 + (float)(v110 * *(float *)(v3 + 276));
        *(float *)(v3 + 276) = v114;
        if (*v6 < *(double *)(v3 + 208))
          return kdebug_trace();
        v115 = *(_QWORD *)(v3 + 16);
        v117 = *(_DWORD *)(v3 + 200);
        v116 = *(_DWORD *)(v3 + 204);
        if (v117 == *(_DWORD *)(v115 - 8) && v116 == *(_DWORD *)(v115 - 4))
        {
          if (*(double *)(v3 + 264) >= *(double *)(v3 + 120))
            return kdebug_trace();
          if (v113 > v112)
          {
            v118 = v3 + 224;
            v119 = *(char *)(v3 + 247);
            if (*(_BYTE *)(v3 + 248))
            {
              if (v119 < 0)
              {
                *(_QWORD *)(v3 + 232) = 18;
                v118 = *(_QWORD *)(v3 + 224);
              }
              else
              {
                *(_BYTE *)(v3 + 247) = 18;
              }
              *(_WORD *)(v118 + 16) = 28271;
              *(_OWORD *)v118 = *(_OWORD *)"Bad Initialization";
              v123 = (_BYTE *)(v118 + 18);
            }
            else
            {
              if (v119 < 0)
              {
                *(_QWORD *)(v3 + 232) = 12;
                v118 = *(_QWORD *)(v3 + 224);
              }
              else
              {
                *(_BYTE *)(v3 + 247) = 12;
              }
              *(_DWORD *)(v118 + 8) = 1735289195;
              *(_QWORD *)v118 = *(_QWORD *)"Bad Tracking";
              v123 = (_BYTE *)(v118 + 12);
            }
            goto LABEL_194;
          }
        }
        if (*(double *)(v3 + 96) <= v114)
        {
          v120 = *(_QWORD *)(v3 + 40);
          if (*(_QWORD *)(v3 + 32) != v120 && v117 == *(_DWORD *)(v120 - 8) && v116 == *(_DWORD *)(v120 - 4))
          {
            v121 = (char *)(v3 + 224);
            v122 = *(char *)(v3 + 247);
            if (*(_BYTE *)(v3 + 248))
            {
              if (v122 < 0)
              {
                *(_QWORD *)(v3 + 232) = 19;
                v121 = *(char **)(v3 + 224);
              }
              else
              {
                *(_BYTE *)(v3 + 247) = 19;
              }
              *(_DWORD *)(v121 + 15) = 1852795252;
              *(_OWORD *)v121 = *(_OWORD *)"Good Initialization";
              v123 = v121 + 19;
            }
            else
            {
              if (v122 < 0)
              {
                *(_QWORD *)(v3 + 232) = 13;
                v121 = *(char **)(v3 + 224);
              }
              else
              {
                *(_BYTE *)(v3 + 247) = 13;
              }
              qmemcpy(v121, "Good Tracking", 13);
              v123 = v121 + 13;
            }
LABEL_194:
            *v123 = 0;
            v124 = *(_QWORD *)(v3 + 40);
            v125 = *(_QWORD *)(v3 + 16);
            if (*(_QWORD *)(v3 + 32) == v124
              || *(_DWORD *)(v3 + 200) != *(_DWORD *)(v125 - 8)
              || *(_DWORD *)(v3 + 204) != *(_DWORD *)(v125 - 4))
            {
              v124 = *(_QWORD *)(v3 + 16);
            }
            v126 = *v6;
            *(_QWORD *)(v3 + 200) = *(_QWORD *)(v124 - 8);
            v127 = *(char *)(v3 + 247);
            if (v127 < 0)
            {
              if (!*(_QWORD *)(v3 + 232))
              {
LABEL_202:
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/PrimaryStreamFrameSelector.cpp", 126, (uint64_t)"!last_switch_reason_.empty()", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                LOBYTE(v127) = *(_BYTE *)(v3 + 247);
              }
            }
            else if (!*(_BYTE *)(v3 + 247))
            {
              goto LABEL_202;
            }
            if ((v127 & 0x80u) == 0)
              v128 = (const char *)(v3 + 224);
            else
              v128 = *(const char **)(v3 + 224);
            v143[0] = 0;
            v129 = strnlen(v128, 8uLL);
            memcpy(v143, v128, v129);
            kdebug_trace();
            *(double *)(v3 + 208) = v126 + *(double *)(v3 + 72);
            *(_BYTE *)(v3 + 216) = 1;
            *(_BYTE *)(v3 + 248) = 0;
          }
        }
        return kdebug_trace();
      }
      sub_20E863438((uint64_t)v143);
      v13 = sub_20E86A980(v144, (uint64_t)"\nFrame alternator: ", 19);
      sub_20E86A980(v13, (uint64_t)" Stream ", 8);
      v14 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v14, (uint64_t)",", 1);
      v15 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v15, (uint64_t)" time: ", 7);
      v16 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v16, (uint64_t)" Inliers: ", 10);
      v17 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v17, (uint64_t)" Map inliers: ", 14);
      v18 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v18, (uint64_t)" Tracking map: ", 15);
      v19 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v19, (uint64_t)" vergence angle: ", 17);
      v20 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v20, (uint64_t)" Stationary state: ", 19);
      std::ostream::operator<<();
      v133 = v12;
      if ((v152 & 0x10) != 0)
      {
        v23 = v151;
        if (v151 < v148)
        {
          v151 = v148;
          v23 = v148;
        }
        v24 = v147;
        v21 = v23 - (_QWORD)v147;
        if (v23 - (unint64_t)v147 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_75;
      }
      else
      {
        if ((v152 & 8) == 0)
        {
          v21 = 0;
          HIBYTE(v142) = 0;
          v22 = __dst;
          goto LABEL_31;
        }
        v24 = v145;
        v21 = v146 - (_QWORD)v145;
        if ((unint64_t)(v146 - (_QWORD)v145) > 0x7FFFFFFFFFFFFFF7)
LABEL_75:
          sub_20E860B7C();
      }
      if (v21 >= 0x17)
      {
        v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v25 = v21 | 7;
        v26 = v25 + 1;
        v22 = (void **)operator new(v25 + 1);
        __dst[1] = (void *)v21;
        v142 = v26 | 0x8000000000000000;
        __dst[0] = v22;
      }
      else
      {
        HIBYTE(v142) = v21;
        v22 = __dst;
        if (!v21)
        {
LABEL_31:
          *((_BYTE *)v22 + v21) = 0;
          v134[0] = &v154;
          v134[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v134[2] = std::chrono::system_clock::now().__d_.__rep_;
          v135 = 2;
          v136 = "unknown file";
          v137 = 236;
          v139 = 0;
          v140 = 0;
          v138 = "unknown function";
          v27 = __dst;
          if (v142 < 0)
            v27 = (void **)__dst[0];
          __s = (char *)v27;
          v28 = *(_QWORD *)v134[0];
          v29 = (const char *)(*(_QWORD *)v134[0] + 16);
          v130 = v29;
          if (*(char *)(*(_QWORD *)v134[0] + 39) < 0)
          {
            v29 = *(const char **)(v28 + 16);
            v30 = *(_QWORD *)(v28 + 24);
            v131 = v10;
            v32 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v32 & 1) != 0)
              goto LABEL_37;
          }
          else
          {
            v30 = *(unsigned __int8 *)(*(_QWORD *)v134[0] + 39);
            v131 = v10;
            v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v31 & 1) != 0)
              goto LABEL_37;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v161);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v161);
            if ((_BYTE)v162 && (v161[23] & 0x80000000) != 0)
              operator delete(*(void **)v161);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_37:
          if (byte_254A4A4F8[23] >= 0)
            v33 = byte_254A4A4F8;
          else
            v33 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v34 = byte_254A4A4F8[23];
          else
            v34 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v161 = os_log_create(v33, v29);
          v35 = &v161[8];
          if (v34 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v34 >= 0x17)
          {
            v36 = v6;
            v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v34 | 7) != 0x17)
              v37 = v34 | 7;
            v38 = v37 + 1;
            v35 = operator new(v37 + 1);
            *(_QWORD *)&v161[16] = v34;
            *(_QWORD *)&v162 = v38 | 0x8000000000000000;
            *(_QWORD *)&v161[8] = v35;
            v6 = v36;
          }
          else
          {
            BYTE7(v162) = v34;
            if (!v34)
            {
LABEL_51:
              v35[v34] = 0;
              BYTE8(v162) = 1;
              v39 = v163;
              if (v30 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v30 >= 0x17)
              {
                v40 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v30 | 7) != 0x17)
                  v40 = v30 | 7;
                v41 = v40 + 1;
                v39 = (void **)operator new(v40 + 1);
                v163[1] = (void *)v30;
                v164 = v41 | 0x8000000000000000;
                v163[0] = v39;
              }
              else
              {
                HIBYTE(v164) = v30;
                if (!v30)
                {
LABEL_59:
                  *((_BYTE *)v39 + v30) = 0;
                  v165 = 1;
                  v42 = *(NSObject **)v161;
                  if (SHIBYTE(v164) < 0)
                    operator delete(v163[0]);
                  if (BYTE8(v162) && SBYTE7(v162) < 0)
                    operator delete(*(void **)&v161[8]);
                  if (*(_QWORD *)v161)
                    os_release(*(void **)v161);
                  if (!v133 || !*(_QWORD *)(v133 + 24))
                  {
                    os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v161 = 136315138;
                    *(_QWORD *)&v161[4] = __s;
                    v49 = (void *)_os_log_send_and_compose_impl();
                    v50 = v131;
                    if (v49)
                      free(v49);
                    goto LABEL_140;
                  }
                  v43 = _os_log_pack_size();
                  v44 = (std::__shared_weak_count_vtbl *)operator new(v43, (std::align_val_t)8uLL);
                  v45 = (std::__shared_weak_count *)operator new();
                  v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v45->__shared_owners_ = 0;
                  v45->__shared_weak_owners_ = 0;
                  v45[1].__vftable = v44;
                  *(_QWORD *)&v155 = v44;
                  *((_QWORD *)&v155 + 1) = v44;
                  v157 = 0;
                  v158 = 0;
                  v156 = v45;
                  v46 = strlen(__s);
                  if (v46 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v47 = v46;
                  if (v46 >= 0x17)
                  {
                    v51 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v46 | 7) != 0x17)
                      v51 = v46 | 7;
                    v52 = v51 + 1;
                    v48 = operator new(v51 + 1);
                    *(_QWORD *)&v160 = v47;
                    *((_QWORD *)&v160 + 1) = v52 | 0x8000000000000000;
                    v159 = v48;
                  }
                  else
                  {
                    HIBYTE(v160) = v46;
                    v48 = &v159;
                    if (!v46)
                    {
LABEL_80:
                      *((_BYTE *)v48 + v47) = 0;
                      v53 = v159;
                      v166[0] = v160;
                      *(_QWORD *)((char *)v166 + 7) = *(_QWORD *)((char *)&v160 + 7);
                      v54 = HIBYTE(v160);
                      v55 = operator new(0x38uLL);
                      v55[1] = 0;
                      v55[2] = 0;
                      v55[3] = off_24C9ABC20;
                      *v55 = &off_24C9ABBD0;
                      v56 = v166[0];
                      v55[4] = v53;
                      v55[5] = v56;
                      *(_QWORD *)((char *)v55 + 47) = *(_QWORD *)((char *)v166 + 7);
                      *((_BYTE *)v55 + 55) = v54;
                      v166[0] = 0;
                      *(_QWORD *)((char *)v166 + 7) = 0;
                      v57 = v158;
                      v157 = (char *)(v55 + 3);
                      v158 = (std::__shared_weak_count *)v55;
                      if (v57)
                      {
                        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                        do
                          v59 = __ldaxr(p_shared_owners);
                        while (__stlxr(v59 - 1, p_shared_owners));
                        if (!v59)
                        {
                          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                          std::__shared_weak_count::__release_weak(v57);
                        }
                      }
                      *(_OWORD *)v161 = v155;
                      v60 = v157;
                      *(_QWORD *)&v161[16] = v156;
                      if (v156)
                      {
                        v61 = (unint64_t *)&v156->__shared_owners_;
                        do
                          v62 = __ldxr(v61);
                        while (__stxr(v62 + 1, v61));
                      }
                      v63 = v158;
                      *(_QWORD *)&v162 = v60;
                      *((_QWORD *)&v162 + 1) = v158;
                      if (v158)
                      {
                        v64 = (unint64_t *)&v158->__shared_owners_;
                        do
                          v65 = __ldxr(v64);
                        while (__stxr(v65 + 1, v64));
                        v163[0] = v60;
                        do
                          v66 = __ldaxr(v64);
                        while (__stlxr(v66 - 1, v64));
                        if (!v66)
                        {
                          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                          std::__shared_weak_count::__release_weak(v63);
                        }
                      }
                      else
                      {
                        v163[0] = v60;
                      }
                      v67 = v156;
                      if (v156)
                      {
                        v68 = (unint64_t *)&v156->__shared_owners_;
                        do
                          v69 = __ldaxr(v68);
                        while (__stlxr(v69 - 1, v68));
                        if (!v69)
                        {
                          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                          std::__shared_weak_count::__release_weak(v67);
                        }
                      }
                      v70 = *(_QWORD *)v161;
                      if (*((char *)v163[0] + 31) >= 0)
                        v71 = (char *)v163[0] + 8;
                      else
                        v71 = (char *)*((_QWORD *)v163[0] + 1);
                      v72 = _os_log_pack_fill();
                      *(_DWORD *)v72 = 136315138;
                      *(_QWORD *)(v72 + 4) = v71;
                      v73 = operator new();
                      v74 = *(unsigned __int8 *)(v28 + 39);
                      v75 = *(const char **)(v28 + 16);
                      v76 = *(_QWORD *)(v28 + 24);
                      v77 = v162;
                      *(_OWORD *)(v73 + 8) = *(_OWORD *)&v161[8];
                      if ((v74 & 0x80u) != 0)
                        v74 = v76;
                      else
                        v75 = v130;
                      *(_QWORD *)v73 = v70;
                      *(_QWORD *)&v161[8] = 0;
                      *(_QWORD *)&v161[16] = 0;
                      *(_OWORD *)(v73 + 24) = v77;
                      v162 = 0uLL;
                      *(_QWORD *)(v73 + 40) = v75;
                      *(_QWORD *)(v73 + 48) = v74;
                      *(_BYTE *)(v73 + 56) = 2;
                      v159 = 0;
                      *(_QWORD *)&v155 = v73;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v133 + 24) + 40))(*(_QWORD *)(v133 + 24), &v155);
                      v78 = v155;
                      *(_QWORD *)&v155 = 0;
                      v50 = v131;
                      if (v78)
                      {
                        v79 = *(std::__shared_weak_count **)(v78 + 32);
                        if (v79)
                        {
                          v80 = (unint64_t *)&v79->__shared_owners_;
                          do
                            v81 = __ldaxr(v80);
                          while (__stlxr(v81 - 1, v80));
                          if (!v81)
                          {
                            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                            std::__shared_weak_count::__release_weak(v79);
                          }
                        }
                        v82 = *(std::__shared_weak_count **)(v78 + 16);
                        if (v82)
                        {
                          v83 = (unint64_t *)&v82->__shared_owners_;
                          do
                            v84 = __ldaxr(v83);
                          while (__stlxr(v84 - 1, v83));
                          if (!v84)
                          {
                            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                            std::__shared_weak_count::__release_weak(v82);
                          }
                        }
                        MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
                        v85 = v159;
                        v159 = 0;
                        if (v85)
                        {
                          v86 = (std::__shared_weak_count *)v85[4];
                          if (v86)
                          {
                            v87 = (unint64_t *)&v86->__shared_owners_;
                            do
                              v88 = __ldaxr(v87);
                            while (__stlxr(v88 - 1, v87));
                            if (!v88)
                            {
                              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                              std::__shared_weak_count::__release_weak(v86);
                            }
                          }
                          v89 = (std::__shared_weak_count *)v85[2];
                          if (v89)
                          {
                            v90 = (unint64_t *)&v89->__shared_owners_;
                            do
                              v91 = __ldaxr(v90);
                            while (__stlxr(v91 - 1, v90));
                            if (!v91)
                            {
                              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                              std::__shared_weak_count::__release_weak(v89);
                            }
                          }
                          MEMORY[0x212BC6398](v85, 0x10F0C40B62ED6C6);
                        }
                      }
                      v92 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
                      if (*((_QWORD *)&v162 + 1))
                      {
                        v93 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
                        do
                          v94 = __ldaxr(v93);
                        while (__stlxr(v94 - 1, v93));
                        if (!v94)
                        {
                          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                          std::__shared_weak_count::__release_weak(v92);
                        }
                      }
                      v95 = *(std::__shared_weak_count **)&v161[16];
                      if (*(_QWORD *)&v161[16])
                      {
                        v96 = (unint64_t *)(*(_QWORD *)&v161[16] + 8);
                        do
                          v97 = __ldaxr(v96);
                        while (__stlxr(v97 - 1, v96));
                        if (!v97)
                        {
                          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                          std::__shared_weak_count::__release_weak(v95);
                        }
                      }
LABEL_140:
                      if (v50)
                      {
                        v98 = (const char *)__dst;
                        if (v142 < 0)
                          v98 = (const char *)__dst[0];
                        sub_20E8C003C((uint64_t)v134, "%s", v98);
                        sub_20E863570((uint64_t)v134);
                      }
                      sub_20E863570((uint64_t)v134);
                      v99 = v140;
                      if (v140)
                      {
                        v100 = (unint64_t *)&v140->__shared_owners_;
                        do
                          v101 = __ldaxr(v100);
                        while (__stlxr(v101 - 1, v100));
                        if (!v101)
                        {
                          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                          std::__shared_weak_count::__release_weak(v99);
                        }
                      }
                      if (SHIBYTE(v142) < 0)
                        operator delete(__dst[0]);
                      v143[0] = *(void **)MEMORY[0x24BEDB7F0];
                      v102 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(void **)((char *)v143 + *((_QWORD *)v143[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                      v144[0] = v102;
                      v144[1] = MEMORY[0x24BEDB848] + 16;
                      if (v150 < 0)
                        operator delete(__p);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v153);
                      goto LABEL_154;
                    }
                  }
                  memcpy(v48, __s, v47);
                  goto LABEL_80;
                }
              }
              memmove(v39, v29, v30);
              goto LABEL_59;
            }
          }
          memmove(v35, v33, v34);
          goto LABEL_51;
        }
      }
      memmove(v22, v24, v21);
      goto LABEL_31;
    }
LABEL_13:
    *(_BYTE *)(result + 248) = 0;
    goto LABEL_14;
  }
  return result;
}

void sub_20ED943C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30)
{
  uint64_t v30;

  if (*(_BYTE *)(v30 - 184) && *(char *)(v30 - 185) < 0)
    operator delete(*(void **)(v30 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  if (a29 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a30);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED94568(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_24C9E92A8;
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 32);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 224));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20ED945D0(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_24C9E92A8;
  if (*(char *)(a1 + 247) < 0)
  {
    operator delete(*(void **)(a1 + 224));
    v2 = *(void **)(a1 + 32);
    if (!v2)
    {
LABEL_4:
      v3 = *(void **)(a1 + 8);
      if (v3)
      {
        *(_QWORD *)(a1 + 16) = v3;
        operator delete(v3);
      }
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
    v2 = *(void **)(a1 + 32);
    if (!v2)
      goto LABEL_4;
  }
  *(_QWORD *)(a1 + 40) = v2;
  operator delete(v2);
  goto LABEL_4;
}

void sub_20ED9464C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20ED94660(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(result + 24) = 0;
    if (*(_BYTE *)(result + 40))
      *(_BYTE *)(result + 40) = 0;
  }
  else
  {
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

BOOL sub_20ED94688(uint64_t a1, uint64_t a2)
{
  double v2;
  float v3;
  float v4;
  double v5;
  double v6;
  BOOL v7;
  double v9;

  v2 = *(double *)(a2 + 112) + *(double *)(a2 + 120);
  if (!*(_BYTE *)(a1 + 64))
    goto LABEL_11;
  if (!*(_BYTE *)(a1 + 24))
    goto LABEL_5;
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(double *)(a1 + 32) + *(double *)(a1 + 48) <= v2)
    {
LABEL_5:
      v3 = *(float *)(a1 + 16);
      goto LABEL_8;
    }
  }
  else
  {
    *(double *)(a1 + 32) = v2;
    *(_BYTE *)(a1 + 40) = 1;
  }
  v3 = (float)*(int *)(a1 + 8);
LABEL_8:
  v4 = 1.0 / v3 + -0.005;
  v5 = *(double *)(a1 + 56);
  v6 = v2 - v5;
  if (v2 - v5 >= v4)
  {
LABEL_11:
    *(double *)(a1 + 56) = v2;
    *(_BYTE *)(a1 + 64) = 1;
    return 1;
  }
  v7 = v5 < v2;
  if (v5 == v2)
    return 1;
  v9 = v5 - v2;
  if (v7)
    v9 = v6;
  return v9 <= 0.005;
}

__n128 sub_20ED94748(unsigned int *a1, _OWORD *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t **v27;
  uint64_t **v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  char *v33;
  uint64_t **v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t **v43;
  uint64_t **v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  char *v49;
  uint64_t **v50;
  unsigned int v51;
  char *v52;
  unsigned int v53;
  char *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t **v64;
  uint64_t **v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  char *v71;
  uint64_t **v72;
  char *v73;
  unsigned int v74;
  char *v75;
  uint64_t *v76;
  uint64_t *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t **v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  char *v93;
  uint64_t **v94;
  char *v95;
  unsigned int v96;
  char *v97;
  uint64_t *v98;
  uint64_t *v99;
  __n128 result;
  __int128 v101;
  __int128 v102;
  _QWORD v103[2];
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE v112[576];

  bzero(v103, 0x2C8uLL);
  v103[1] = 0xBFF0000000000000;
  v112[104] = 0;
  v112[544] = 0;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  memset(v112, 0, 25);
  memset(&v112[56], 0, 33);
  v9 = a3 + 1;
  v8 = a3[1];
  v10 = a3 + 1;
  v11 = (uint64_t *)(a3 + 1);
  v12 = *a1;
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v11 = v8;
        v13 = *((_DWORD *)v8 + 8);
        if (v12 >= v13)
          break;
        v8 = (uint64_t *)*v11;
        v10 = (uint64_t **)v11;
        if (!*v11)
          goto LABEL_8;
      }
      if (v13 >= v12)
        break;
      v8 = (uint64_t *)v11[1];
      if (!v8)
      {
        v10 = (uint64_t **)(v11 + 1);
        goto LABEL_8;
      }
    }
    v14 = (char *)v11;
    v18 = v11 + 6;
    v17 = v11[6];
    v19 = a1[1];
    if (v17)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_8:
  v14 = (char *)operator new(0x40uLL);
  *((_DWORD *)v14 + 8) = v12;
  *((_QWORD *)v14 + 7) = 0;
  *((_QWORD *)v14 + 6) = 0;
  *((_QWORD *)v14 + 5) = v14 + 48;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = v11;
  *v10 = (uint64_t *)v14;
  v15 = (uint64_t *)**a3;
  v16 = (uint64_t *)v14;
  if (v15)
  {
    *a3 = v15;
    v16 = *v10;
  }
  sub_20E868578(a3[1], v16);
  a3[2] = (uint64_t *)((char *)a3[2] + 1);
  v18 = v14 + 48;
  v17 = *((_QWORD *)v14 + 6);
  v19 = a1[1];
  if (!v17)
  {
LABEL_13:
    v20 = v18;
LABEL_19:
    v22 = (char *)operator new(0x2F0uLL);
    *((_DWORD *)v22 + 8) = v19;
    bzero(v22 + 40, 0x2C8uLL);
    *((_QWORD *)v22 + 6) = 0xBFF0000000000000;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 72) = 0u;
    *(_OWORD *)(v22 + 88) = 0u;
    *(_OWORD *)(v22 + 104) = 0u;
    *(_OWORD *)(v22 + 120) = 0u;
    *(_OWORD *)(v22 + 136) = 0u;
    *(_OWORD *)(v22 + 152) = 0u;
    *(_OWORD *)(v22 + 168) = 0u;
    *(_OWORD *)(v22 + 184) = 0u;
    *(_OWORD *)(v22 + 193) = 0u;
    *((_OWORD *)v22 + 15) = 0u;
    *((_OWORD *)v22 + 16) = 0u;
    v22[272] = 0;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v20;
    *v18 = v22;
    v23 = (uint64_t *)v22;
    v24 = **((_QWORD **)v14 + 5);
    if (v24)
    {
      *((_QWORD *)v14 + 5) = v24;
      v23 = (uint64_t *)*v18;
    }
    sub_20E868578(*((uint64_t **)v14 + 6), v23);
    ++*((_QWORD *)v14 + 7);
    goto LABEL_23;
  }
  while (1)
  {
LABEL_15:
    while (1)
    {
      v20 = (_QWORD *)v17;
      v21 = *(_DWORD *)(v17 + 32);
      if (v19 >= v21)
        break;
      v17 = *v20;
      v18 = v20;
      if (!*v20)
        goto LABEL_19;
    }
    if (v21 >= v19)
      break;
    v17 = v20[1];
    if (!v17)
    {
      v18 = v20 + 1;
      goto LABEL_19;
    }
  }
  v22 = (char *)v20;
LABEL_23:
  sub_20ED950DC((uint64_t)(v22 + 40), (uint64_t)v103);
  sub_20E9AE6A0((uint64_t)v103);
  v25 = *v9;
  v26 = *a1;
  v27 = a3 + 1;
  v28 = a3 + 1;
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v28 = (uint64_t **)v25;
        v29 = *((_DWORD *)v25 + 8);
        if (v26 >= v29)
          break;
        v25 = *v28;
        v27 = v28;
        if (!*v28)
          goto LABEL_30;
      }
      if (v29 >= v26)
        break;
      v25 = v28[1];
      if (!v25)
      {
        v27 = v28 + 1;
        goto LABEL_30;
      }
    }
  }
  else
  {
LABEL_30:
    v30 = (uint64_t *)v28;
    v28 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v28 + 8) = v26;
    v28[7] = 0;
    v28[6] = 0;
    v28[5] = (uint64_t *)(v28 + 6);
    *v28 = 0;
    v28[1] = 0;
    v28[2] = v30;
    *v27 = (uint64_t *)v28;
    v31 = (uint64_t *)**a3;
    v32 = (uint64_t *)v28;
    if (v31)
    {
      *a3 = v31;
      v32 = *v27;
    }
    sub_20E868578(a3[1], v32);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
  }
  v34 = v28 + 6;
  v33 = (char *)v28[6];
  v35 = a1[1];
  if (v33)
  {
    while (1)
    {
      while (1)
      {
        v36 = v33;
        v37 = *((_DWORD *)v33 + 8);
        if (v35 >= v37)
          break;
        v33 = *(char **)v36;
        v34 = (uint64_t **)v36;
        if (!*(_QWORD *)v36)
          goto LABEL_40;
      }
      if (v37 >= v35)
        break;
      v33 = (char *)*((_QWORD *)v36 + 1);
      if (!v33)
      {
        v34 = (uint64_t **)(v36 + 8);
        goto LABEL_40;
      }
    }
  }
  else
  {
    v36 = (char *)(v28 + 6);
LABEL_40:
    v38 = v36;
    v36 = (char *)operator new(0x2F0uLL);
    *((_DWORD *)v36 + 8) = v35;
    bzero(v36 + 40, 0x2C8uLL);
    *((_QWORD *)v36 + 6) = 0xBFF0000000000000;
    *(_OWORD *)(v36 + 56) = 0u;
    *(_OWORD *)(v36 + 72) = 0u;
    *(_OWORD *)(v36 + 88) = 0u;
    *(_OWORD *)(v36 + 104) = 0u;
    *(_OWORD *)(v36 + 120) = 0u;
    *(_OWORD *)(v36 + 136) = 0u;
    *(_OWORD *)(v36 + 152) = 0u;
    *(_OWORD *)(v36 + 168) = 0u;
    *(_OWORD *)(v36 + 184) = 0u;
    *(_OWORD *)(v36 + 193) = 0u;
    *((_OWORD *)v36 + 15) = 0u;
    *((_OWORD *)v36 + 16) = 0u;
    v36[272] = 0;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = v38;
    *v34 = (uint64_t *)v36;
    v39 = (uint64_t *)v36;
    v40 = (uint64_t *)*v28[5];
    if (v40)
    {
      v28[5] = v40;
      v39 = *v34;
    }
    sub_20E868578(v28[6], v39);
    v28[7] = (uint64_t *)((char *)v28[7] + 1);
  }
  *((_QWORD *)v36 + 5) = *(_QWORD *)a1;
  v41 = *v9;
  v42 = *a1;
  v43 = a3 + 1;
  v44 = a3 + 1;
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v44 = (uint64_t **)v41;
        v45 = *((_DWORD *)v41 + 8);
        if (v42 >= v45)
          break;
        v41 = *v44;
        v43 = v44;
        if (!*v44)
          goto LABEL_50;
      }
      if (v45 >= v42)
        break;
      v41 = v44[1];
      if (!v41)
      {
        v43 = v44 + 1;
        goto LABEL_50;
      }
    }
  }
  else
  {
LABEL_50:
    v46 = (uint64_t *)v44;
    v44 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v44 + 8) = v42;
    v44[7] = 0;
    v44[6] = 0;
    v44[5] = (uint64_t *)(v44 + 6);
    *v44 = 0;
    v44[1] = 0;
    v44[2] = v46;
    *v43 = (uint64_t *)v44;
    v47 = (uint64_t *)**a3;
    v48 = (uint64_t *)v44;
    if (v47)
    {
      *a3 = v47;
      v48 = *v43;
    }
    sub_20E868578(a3[1], v48);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
  }
  v50 = v44 + 6;
  v49 = (char *)v44[6];
  v51 = a1[1];
  if (v49)
  {
    while (1)
    {
      while (1)
      {
        v52 = v49;
        v53 = *((_DWORD *)v49 + 8);
        if (v51 >= v53)
          break;
        v49 = *(char **)v52;
        v50 = (uint64_t **)v52;
        if (!*(_QWORD *)v52)
          goto LABEL_60;
      }
      if (v53 >= v51)
        break;
      v49 = (char *)*((_QWORD *)v52 + 1);
      if (!v49)
      {
        v50 = (uint64_t **)(v52 + 8);
        goto LABEL_60;
      }
    }
  }
  else
  {
    v52 = (char *)(v44 + 6);
LABEL_60:
    v54 = v52;
    v52 = (char *)operator new(0x2F0uLL);
    *((_DWORD *)v52 + 8) = v51;
    bzero(v52 + 40, 0x2C8uLL);
    *((_QWORD *)v52 + 6) = 0xBFF0000000000000;
    *(_OWORD *)(v52 + 56) = 0u;
    *(_OWORD *)(v52 + 72) = 0u;
    *(_OWORD *)(v52 + 88) = 0u;
    *(_OWORD *)(v52 + 104) = 0u;
    *(_OWORD *)(v52 + 120) = 0u;
    *(_OWORD *)(v52 + 136) = 0u;
    *(_OWORD *)(v52 + 152) = 0u;
    *(_OWORD *)(v52 + 168) = 0u;
    *(_OWORD *)(v52 + 184) = 0u;
    *(_OWORD *)(v52 + 193) = 0u;
    *((_OWORD *)v52 + 15) = 0u;
    *((_OWORD *)v52 + 16) = 0u;
    v52[272] = 0;
    *(_QWORD *)v52 = 0;
    *((_QWORD *)v52 + 1) = 0;
    *((_QWORD *)v52 + 2) = v54;
    *v50 = (uint64_t *)v52;
    v55 = (uint64_t *)v52;
    v56 = (uint64_t *)*v44[5];
    if (v56)
    {
      v44[5] = v56;
      v55 = *v50;
    }
    sub_20E868578(v44[6], v55);
    v44[7] = (uint64_t *)((char *)v44[7] + 1);
  }
  *((_OWORD *)v52 + 3) = *a2;
  v57 = *(uint64_t **)(a4 + 8);
  if (!v57)
    goto LABEL_110;
  v58 = *a1;
  while (1)
  {
    while (1)
    {
      v59 = *((_DWORD *)v57 + 8);
      if (v58 >= v59)
        break;
      v57 = (uint64_t *)*v57;
      if (!v57)
        goto LABEL_110;
    }
    if (v59 >= v58)
      break;
    v57 = (uint64_t *)v57[1];
    if (!v57)
      goto LABEL_110;
  }
  v60 = (uint64_t *)v57[6];
  if (!v60)
    goto LABEL_110;
  v61 = a1[1];
  while (1)
  {
    while (1)
    {
      v62 = *((_DWORD *)v60 + 8);
      if (v61 >= v62)
        break;
      v60 = (uint64_t *)*v60;
      if (!v60)
        goto LABEL_110;
    }
    if (v62 >= v61)
      break;
    v60 = (uint64_t *)v60[1];
    if (!v60)
      goto LABEL_110;
  }
  v63 = *v9;
  v64 = a3 + 1;
  v65 = a3 + 1;
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v65 = (uint64_t **)v63;
        v66 = *((_DWORD *)v63 + 8);
        if (v58 >= v66)
          break;
        v63 = *v65;
        v64 = v65;
        if (!*v65)
          goto LABEL_84;
      }
      if (v66 >= v58)
        break;
      v63 = v65[1];
      if (!v63)
      {
        v64 = v65 + 1;
        goto LABEL_84;
      }
    }
  }
  else
  {
LABEL_84:
    v67 = (uint64_t *)v65;
    v65 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v65 + 8) = v58;
    v65[7] = 0;
    v65[6] = 0;
    v65[5] = (uint64_t *)(v65 + 6);
    *v65 = 0;
    v65[1] = 0;
    v65[2] = v67;
    *v64 = (uint64_t *)v65;
    v68 = (uint64_t *)**a3;
    v69 = (uint64_t *)v65;
    if (v68)
    {
      *a3 = v68;
      v69 = *v64;
    }
    sub_20E868578(a3[1], v69);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
    v61 = a1[1];
  }
  v70 = v60 + 5;
  v72 = v65 + 6;
  v71 = (char *)v65[6];
  if (v71)
  {
    while (1)
    {
      while (1)
      {
        v73 = v71;
        v74 = *((_DWORD *)v71 + 8);
        if (v61 >= v74)
          break;
        v71 = *(char **)v73;
        v72 = (uint64_t **)v73;
        if (!*(_QWORD *)v73)
          goto LABEL_94;
      }
      if (v74 >= v61)
        break;
      v71 = (char *)*((_QWORD *)v73 + 1);
      if (!v71)
      {
        v72 = (uint64_t **)(v73 + 8);
        goto LABEL_94;
      }
    }
  }
  else
  {
    v73 = (char *)(v65 + 6);
LABEL_94:
    v75 = v73;
    v73 = (char *)operator new(0x2F0uLL);
    *((_DWORD *)v73 + 8) = v61;
    bzero(v73 + 40, 0x2C8uLL);
    *((_QWORD *)v73 + 6) = 0xBFF0000000000000;
    *(_OWORD *)(v73 + 56) = 0u;
    *(_OWORD *)(v73 + 72) = 0u;
    *(_OWORD *)(v73 + 88) = 0u;
    *(_OWORD *)(v73 + 104) = 0u;
    *(_OWORD *)(v73 + 120) = 0u;
    *(_OWORD *)(v73 + 136) = 0u;
    *(_OWORD *)(v73 + 152) = 0u;
    *(_OWORD *)(v73 + 168) = 0u;
    *(_OWORD *)(v73 + 184) = 0u;
    *(_OWORD *)(v73 + 193) = 0u;
    *((_OWORD *)v73 + 15) = 0u;
    *((_OWORD *)v73 + 16) = 0u;
    v73[272] = 0;
    *(_QWORD *)v73 = 0;
    *((_QWORD *)v73 + 1) = 0;
    *((_QWORD *)v73 + 2) = v75;
    *v72 = (uint64_t *)v73;
    v76 = (uint64_t *)v73;
    v77 = (uint64_t *)*v65[5];
    if (v77)
    {
      v65[5] = v77;
      v76 = *v72;
    }
    sub_20E868578(v65[6], v76);
    v65[7] = (uint64_t *)((char *)v65[7] + 1);
  }
  *((_OWORD *)v73 + 4) = *(_OWORD *)v70;
  v78 = *((_OWORD *)v70 + 1);
  v79 = *((_OWORD *)v70 + 2);
  v80 = *((_OWORD *)v70 + 3);
  *((_QWORD *)v73 + 16) = v70[8];
  *((_OWORD *)v73 + 6) = v79;
  *((_OWORD *)v73 + 7) = v80;
  *((_OWORD *)v73 + 5) = v78;
  v81 = *(uint64_t **)(a4 + 8);
  if (!v81)
    goto LABEL_110;
  v82 = *a1;
  while (1)
  {
    while (1)
    {
      v83 = *((_DWORD *)v81 + 8);
      if (v82 >= v83)
        break;
      v81 = (uint64_t *)*v81;
      if (!v81)
        goto LABEL_110;
    }
    if (v83 >= v82)
      break;
    v81 = (uint64_t *)v81[1];
    if (!v81)
      goto LABEL_110;
  }
  v84 = (uint64_t *)v81[6];
  if (!v84)
LABEL_110:
    sub_20E89FD20("map::at:  key not found");
  v85 = a1[1];
  while (1)
  {
    while (1)
    {
      v86 = *((_DWORD *)v84 + 8);
      if (v85 >= v86)
        break;
      v84 = (uint64_t *)*v84;
      if (!v84)
        goto LABEL_110;
    }
    if (v86 >= v85)
      break;
    v84 = (uint64_t *)v84[1];
    if (!v84)
      goto LABEL_110;
  }
  v87 = *v9;
  v88 = a3 + 1;
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v88 = (uint64_t **)v87;
        v89 = *((_DWORD *)v87 + 8);
        if (v82 >= v89)
          break;
        v87 = *v88;
        v9 = v88;
        if (!*v88)
          goto LABEL_118;
      }
      if (v89 >= v82)
        break;
      v87 = v88[1];
      if (!v87)
      {
        v9 = v88 + 1;
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    v90 = (uint64_t *)v88;
    v88 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v88 + 8) = v82;
    v88[7] = 0;
    v88[6] = 0;
    v88[5] = (uint64_t *)(v88 + 6);
    *v88 = 0;
    v88[1] = 0;
    v88[2] = v90;
    *v9 = (uint64_t *)v88;
    v91 = (uint64_t *)**a3;
    v92 = (uint64_t *)v88;
    if (v91)
    {
      *a3 = v91;
      v92 = *v9;
    }
    sub_20E868578(a3[1], v92);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
    v85 = a1[1];
  }
  v94 = v88 + 6;
  v93 = (char *)v88[6];
  if (v93)
  {
    while (1)
    {
      while (1)
      {
        v95 = v93;
        v96 = *((_DWORD *)v93 + 8);
        if (v85 >= v96)
          break;
        v93 = *(char **)v95;
        v94 = (uint64_t **)v95;
        if (!*(_QWORD *)v95)
          goto LABEL_128;
      }
      if (v96 >= v85)
        break;
      v93 = (char *)*((_QWORD *)v95 + 1);
      if (!v93)
      {
        v94 = (uint64_t **)(v95 + 8);
        goto LABEL_128;
      }
    }
  }
  else
  {
    v95 = (char *)(v88 + 6);
LABEL_128:
    v97 = v95;
    v95 = (char *)operator new(0x2F0uLL);
    *((_DWORD *)v95 + 8) = v85;
    bzero(v95 + 40, 0x2C8uLL);
    *((_QWORD *)v95 + 6) = 0xBFF0000000000000;
    *(_OWORD *)(v95 + 56) = 0u;
    *(_OWORD *)(v95 + 72) = 0u;
    *(_OWORD *)(v95 + 88) = 0u;
    *(_OWORD *)(v95 + 104) = 0u;
    *(_OWORD *)(v95 + 120) = 0u;
    *(_OWORD *)(v95 + 136) = 0u;
    *(_OWORD *)(v95 + 152) = 0u;
    *(_OWORD *)(v95 + 168) = 0u;
    *(_OWORD *)(v95 + 184) = 0u;
    *(_OWORD *)(v95 + 193) = 0u;
    *((_OWORD *)v95 + 15) = 0u;
    *((_OWORD *)v95 + 16) = 0u;
    v95[272] = 0;
    *(_QWORD *)v95 = 0;
    *((_QWORD *)v95 + 1) = 0;
    *((_QWORD *)v95 + 2) = v97;
    *v94 = (uint64_t *)v95;
    v98 = (uint64_t *)v95;
    v99 = (uint64_t *)*v88[5];
    if (v99)
    {
      v88[5] = v99;
      v98 = *v94;
    }
    sub_20E868578(v88[6], v98);
    v88[7] = (uint64_t *)((char *)v88[7] + 1);
  }
  *(_OWORD *)(v95 + 136) = *(_OWORD *)(v84 + 5);
  result = *(__n128 *)(v84 + 7);
  v101 = *(_OWORD *)(v84 + 9);
  v102 = *(_OWORD *)(v84 + 11);
  *((_QWORD *)v95 + 25) = v84[13];
  *(_OWORD *)(v95 + 184) = v102;
  *(_OWORD *)(v95 + 168) = v101;
  *(__n128 *)(v95 + 152) = result;
  return result;
}

void sub_20ED950C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9AE6A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED950DC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  int v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  v13 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v14 = *(std::__shared_weak_count **)(a1 + 208);
  *(_OWORD *)(a1 + 200) = v13;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  v18 = *(std::__shared_weak_count **)(a1 + 224);
  *(_OWORD *)(a1 + 216) = v17;
  if (!v18)
    goto LABEL_10;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v21 = (__int128 *)(a2 + 232);
    v22 = *(unsigned __int8 *)(a1 + 248);
    if (v22 == *(unsigned __int8 *)(a2 + 248))
      goto LABEL_11;
  }
  else
  {
LABEL_10:
    v21 = (__int128 *)(a2 + 232);
    v22 = *(unsigned __int8 *)(a1 + 248);
    if (v22 == *(unsigned __int8 *)(a2 + 248))
    {
LABEL_11:
      if (v22)
      {
        v23 = *v21;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        v24 = *(std::__shared_weak_count **)(a1 + 240);
        *(_OWORD *)(a1 + 232) = v23;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      goto LABEL_26;
    }
  }
  if (v22)
  {
    v27 = *(std::__shared_weak_count **)(a1 + 240);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    *(_BYTE *)(a1 + 248) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 232) = *v21;
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *(_BYTE *)(a1 + 248) = 1;
  }
LABEL_26:
  sub_20ED95360(a1 + 256, a2 + 256);
  v30 = (void **)(a1 + 664);
  v31 = (_QWORD *)(a2 + 664);
  if (*(unsigned __int8 *)(a1 + 688) == *(unsigned __int8 *)(a2 + 688))
  {
    if (*(_BYTE *)(a1 + 688))
    {
      v32 = *v30;
      if (*v30)
      {
        *(_QWORD *)(a1 + 672) = v32;
        operator delete(v32);
        *v30 = 0;
        *(_QWORD *)(a1 + 672) = 0;
        *(_QWORD *)(a1 + 680) = 0;
      }
      *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
      *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
      *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
      *v31 = 0;
      *(_QWORD *)(a2 + 672) = 0;
      *(_QWORD *)(a2 + 680) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 688))
  {
    v33 = *v30;
    if (*v30)
    {
      *(_QWORD *)(a1 + 672) = v33;
      operator delete(v33);
    }
    *(_BYTE *)(a1 + 688) = 0;
  }
  else
  {
    *v30 = 0;
    *(_QWORD *)(a1 + 672) = 0;
    *(_QWORD *)(a1 + 680) = 0;
    *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
    *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
    *v31 = 0;
    *(_QWORD *)(a2 + 672) = 0;
    *(_QWORD *)(a2 + 680) = 0;
    *(_BYTE *)(a1 + 688) = 1;
  }
  v34 = *(_QWORD *)(a2 + 696);
  *(_BYTE *)(a1 + 704) = *(_BYTE *)(a2 + 704);
  *(_QWORD *)(a1 + 696) = v34;
  return a1;
}

void sub_20ED95360(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*(unsigned __int8 *)(a1 + 400) == *(unsigned __int8 *)(a2 + 400))
  {
    if (*(_BYTE *)(a1 + 400))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
      v7 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      v8 = *(std::__shared_weak_count **)(a1 + 88);
      *(_OWORD *)(a1 + 80) = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 104) = 0;
      v12 = *(std::__shared_weak_count **)(a1 + 104);
      *(_OWORD *)(a1 + 96) = v11;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      memcpy((void *)(a1 + 112), (const void *)(a2 + 112), 0x120uLL);
    }
  }
  else if (*(_BYTE *)(a1 + 400))
  {
    v15 = *(std::__shared_weak_count **)(a1 + 104);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *(std::__shared_weak_count **)(a1 + 88);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    *(_BYTE *)(a1 + 400) = 0;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v21 = *(_OWORD *)(a2 + 16);
    v22 = *(_OWORD *)(a2 + 32);
    v23 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)(a1 + 48) = v23;
    *(_OWORD *)(a1 + 16) = v21;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    memcpy((void *)(a1 + 112), (const void *)(a2 + 112), 0x120uLL);
    *(_BYTE *)(a1 + 400) = 1;
  }
}

uint64_t sub_20ED95538(uint64_t a1, unsigned int **a2, uint64_t *a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t **v12;
  unsigned int *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t *v22;
  unsigned int v23;
  char *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  std::logic_error *exception;
  _QWORD **v38;
  unsigned int *v39;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24C9E9338;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v8 = *a2;
  v7 = a2[1];
  v9 = (char *)v7 - (char *)*a2;
  if (v7 == *a2)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_20E92CED8();
    v10 = (char *)operator new(v9);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 24) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 16) = v11;
  }
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (uint64_t **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v38 = (_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  v13 = *a2;
  v39 = a2[1];
  if (*a2 != v39)
  {
    while (1)
    {
      v17 = *v13;
      v19 = *a3;
      v18 = a3[1];
      if (*a3 != v18)
      {
        while (*(_DWORD *)v19 != v17)
        {
          v19 += 1088;
          if (v19 == v18)
            goto LABEL_39;
        }
      }
      if (v19 == v18)
      {
LABEL_39:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Requested camera id not found.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v20 = *v12;
      v21 = (uint64_t **)(a1 + 40);
      v22 = (uint64_t *)(a1 + 40);
      if (*v12)
      {
        while (1)
        {
          while (1)
          {
            v22 = v20;
            v23 = *((_DWORD *)v20 + 8);
            if (v17 >= v23)
              break;
            v20 = (uint64_t *)*v22;
            v21 = (uint64_t **)v22;
            if (!*v22)
              goto LABEL_21;
          }
          if (v23 >= v17)
            break;
          v20 = (uint64_t *)v22[1];
          if (!v20)
          {
            v21 = (uint64_t **)(v22 + 1);
            goto LABEL_21;
          }
        }
        v24 = (char *)v22;
        v28 = v22 + 6;
        v27 = v22[6];
        v29 = v13[1];
        if (v27)
          goto LABEL_28;
      }
      else
      {
LABEL_21:
        v24 = (char *)operator new(0x40uLL);
        *((_DWORD *)v24 + 8) = v17;
        *((_QWORD *)v24 + 7) = 0;
        *((_QWORD *)v24 + 6) = 0;
        *((_QWORD *)v24 + 5) = v24 + 48;
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = v22;
        *v21 = (uint64_t *)v24;
        v25 = (_QWORD *)**v38;
        v26 = (uint64_t *)v24;
        if (v25)
        {
          *v38 = v25;
          v26 = *v21;
        }
        sub_20E868578(*(uint64_t **)(a1 + 40), v26);
        ++*(_QWORD *)(a1 + 48);
        v28 = v24 + 48;
        v27 = *((_QWORD *)v24 + 6);
        v29 = v13[1];
        if (v27)
        {
          while (1)
          {
LABEL_28:
            while (1)
            {
              v30 = (_QWORD *)v27;
              v31 = *(_DWORD *)(v27 + 32);
              if (v29 >= v31)
                break;
              v27 = *v30;
              v28 = v30;
              if (!*v30)
                goto LABEL_32;
            }
            if (v31 >= v29)
              break;
            v27 = v30[1];
            if (!v27)
            {
              v28 = v30 + 1;
              goto LABEL_32;
            }
          }
          v32 = (char *)v30;
          goto LABEL_8;
        }
      }
      v30 = v28;
LABEL_32:
      v32 = (char *)operator new(0x70uLL);
      *((_DWORD *)v32 + 8) = v29;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *((_QWORD *)v32 + 13) = 0;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = v30;
      *v28 = v32;
      v33 = **((_QWORD **)v24 + 5);
      v34 = (uint64_t *)v32;
      if (v33)
      {
        *((_QWORD *)v24 + 5) = v33;
        v34 = (uint64_t *)*v28;
      }
      sub_20E868578(*((uint64_t **)v24 + 6), v34);
      ++*((_QWORD *)v24 + 7);
LABEL_8:
      *(_OWORD *)(v32 + 40) = *(_OWORD *)(v19 + 120);
      v14 = *(_OWORD *)(v19 + 136);
      v15 = *(_OWORD *)(v19 + 152);
      v16 = *(_OWORD *)(v19 + 168);
      *((_QWORD *)v32 + 13) = *(_QWORD *)(v19 + 184);
      *(_OWORD *)(v32 + 88) = v16;
      *(_OWORD *)(v32 + 72) = v15;
      *(_OWORD *)(v32 + 56) = v14;
      v13 += 2;
      if (v13 == v39)
      {
        v10 = *(char **)(a1 + 8);
        v11 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v10 == v11
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/include_private/MultiStreamFeatureBundler.cpp", 64, (uint64_t)"!expected_camera_stream_ids_.empty()", 36, (uint64_t)"Incorrect number of cameras", 27, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20ED958B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11)
{
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;

  if (*(_BYTE *)(v12 + 88))
    sub_20ED989D0(v13, *(_QWORD **)(v12 + 72));
  sub_20ED98B8C(a11, *v11);
  v15 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 16) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void sub_20ED95924(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  double v11;
  double v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const char *v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  unsigned int v30;
  BOOL v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t **v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t **v64;
  uint64_t **v65;
  unsigned int v66;
  _DWORD *v67;
  uint64_t *v68;
  uint64_t *v69;
  unsigned int v70;
  unsigned int v71;
  char *v72;
  char *v73;
  char *v74;
  int v75;
  uint64_t **v76;
  uint64_t *v77;
  uint64_t *v78;
  unsigned int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  size_t v85;
  const char *v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t **v89;
  char *v90;
  int64_t v91;
  char *v92;
  char *v93;
  int v94;
  _QWORD *v95;
  void *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t **v99;
  unsigned int v100;
  uint64_t **v101;
  char *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  unsigned int v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  size_t v115;
  void **v116;
  unsigned __int8 v117;
  const char *v118;
  size_t v119;
  void **v120;
  unint64_t v121;
  const char *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  size_t v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  unint64_t *p_shared_owners;
  unint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  void *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  char *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  unsigned int v173;
  uint64_t **v174;
  uint64_t *v175;
  char *v176;
  unsigned int v177;
  BOOL v178;
  char **v179;
  int v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t *v189;
  uint64_t v190;
  char *v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  void **v195;
  unsigned __int8 v196;
  const char *v197;
  size_t v198;
  void **v199;
  unint64_t v200;
  const char *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  NSObject *v210;
  size_t v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  void **v249;
  uint64_t v250;
  uint64_t v251;
  size_t v252;
  const char *v253;
  unsigned __int8 v254;
  const char *v255;
  size_t v256;
  _BYTE *v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  NSObject *v263;
  size_t v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  size_t v267;
  size_t v268;
  _QWORD *v269;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  char v275;
  _QWORD *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  char *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  __int128 v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  _QWORD *v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  size_t v319;
  _BYTE *v320;
  unint64_t v321;
  void **v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  const char *v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  void *v330;
  int v331;
  unsigned __int8 v332;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v333;
  const char *v334;
  NSObject *v335;
  uint64_t v336;
  _QWORD *v337;
  unsigned int v338;
  char *v339;
  uint64_t *v340;
  uint64_t *v341;
  uint64_t v342;
  _QWORD *v343;
  _QWORD *v344;
  unsigned int v345;
  char *v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  const char *v350;
  uint64_t *v351;
  _OWORD *v352;
  uint64_t v354;
  uint64_t v355;
  uint64_t **v356;
  _OWORD *v357;
  unsigned int v358;
  unsigned int v359;
  _QWORD **v360;
  _QWORD *v361[2];
  uint64_t v362;
  void *v363;
  char *v364;
  char *v365;
  int v366;
  _QWORD **v367;
  _QWORD *v368;
  _QWORD *v369;
  void *__p;
  uint64_t v371;
  char *v372;
  void *__dst[2];
  int64_t v374;
  uint64_t *v375;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v377;
  int v378;
  const char *v379;
  int v380;
  const char *v381;
  uint64_t v382;
  std::__shared_weak_count *v383;
  uint64_t v384;
  void *object[3];
  __int128 v386;
  void *v387;
  size_t v388;
  unint64_t v389;
  char v390;
  unint64_t v391;
  void *v392;
  char v393;
  unint64_t v394;
  int v395;
  uint64_t v396;
  __int128 category;
  std::__shared_weak_count *v398;
  char *v399;
  std::__shared_weak_count *v400;
  _QWORD *v401;
  __int128 v402;
  _BYTE v403[24];
  __int128 v404;
  char *v405;
  const char *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  _QWORD v409[5];

  v3 = (uint64_t)a2;
  v4 = a1;
  v409[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD **)(a1 + 8);
  v6 = *(_DWORD **)(a1 + 16);
  if (v5 != v6)
  {
    while (*v5 != *a2 || v5[1] != a2[1])
    {
      v5 += 2;
      if (v5 == v6)
      {
        v5 = *(_DWORD **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/include_private/MultiStreamFeatureBundler.cpp", 71, (uint64_t)"Contains(expected_camera_stream_ids_, features.camera_stream_id)", 64, (uint64_t)"An unexpected camera stream was pushed to the bundler.", 54, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v357 = (_OWORD *)(v4 + 96);
  if (!*(_BYTE *)(v4 + 112))
  {
    *v357 = *(_OWORD *)(v3 + 8);
    *(_BYTE *)(v4 + 112) = 1;
    *(_QWORD *)&v403[8] = 0;
    *(_QWORD *)&v403[16] = 0;
    *(_QWORD *)v403 = &v403[8];
    object[1] = 0;
    object[2] = 0;
    object[0] = &object[1];
    LOBYTE(v386) = 1;
    v8 = (_QWORD *)(v4 + 72);
    if (*(_BYTE *)(v4 + 88))
    {
      sub_20ED989D0(v4 + 64, *(_QWORD **)(v4 + 72));
      v9 = object[1];
      *(void **)(v4 + 64) = object[0];
      *(_QWORD *)(v4 + 72) = v9;
      v10 = object[2];
      *(void **)(v4 + 80) = object[2];
      if (v10)
      {
        v9[2] = v8;
        object[0] = &object[1];
        object[1] = 0;
        object[2] = 0;
        v9 = 0;
        if (!(_BYTE)v386)
        {
LABEL_15:
          sub_20ED989D0((uint64_t)v403, *(_QWORD **)&v403[8]);
          goto LABEL_16;
        }
      }
      else
      {
        *(_QWORD *)(v4 + 64) = v8;
        if (!(_BYTE)v386)
          goto LABEL_15;
      }
    }
    else
    {
      v9 = 0;
      *v8 = 0;
      *(_QWORD *)(v4 + 80) = 0;
      *(_QWORD *)(v4 + 64) = v8;
      *(_BYTE *)(v4 + 88) = 1;
      if (!(_BYTE)v386)
        goto LABEL_15;
    }
    sub_20ED989D0((uint64_t)object, v9);
    goto LABEL_15;
  }
LABEL_16:
  v11 = *(double *)(v4 + 96) + *(double *)(v4 + 104);
  v12 = *(double *)(v3 + 8) + *(double *)(v3 + 16);
  if (v12 < v11 + -0.01)
  {
    sub_20ED9854C(&v362);
    if (**(int **)(v362 + 56) <= 5)
    {
      v13 = *(unsigned __int8 *)(v362 + 72);
      v14 = sub_20E8C31DC(v362, "OSLogSurrogateAppender", 1, 0);
      v15 = v14;
      if (v13 || v14)
      {
        *(_QWORD *)v403 = &v362;
        *(std::chrono::steady_clock::time_point *)&v403[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v403[16] = std::chrono::system_clock::now();
        LODWORD(v404) = 5;
        *((_QWORD *)&v404 + 1) = "unknown file";
        LODWORD(v405) = 90;
        v407 = 0;
        v408 = 0;
        v406 = "unknown function";
        v16 = **(_QWORD **)v403;
        v17 = **(_QWORD **)v403 + 16;
        if (*(char *)(**(_QWORD **)v403 + 39) < 0)
        {
          v19 = *(const char **)(v16 + 16);
          v18 = *(_QWORD *)(v16 + 24);
          v117 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v117 & 1) != 0)
            goto LABEL_146;
        }
        else
        {
          v18 = *(unsigned __int8 *)(**(_QWORD **)v403 + 39);
          v19 = (const char *)(v16 + 16);
          v20 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v20 & 1) != 0)
            goto LABEL_146;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if ((_BYTE)v386 && SHIBYTE(object[2]) < 0)
            operator delete(object[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_146:
        if (byte_254A4A4F8[23] >= 0)
          v118 = byte_254A4A4F8;
        else
          v118 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v119 = byte_254A4A4F8[23];
        else
          v119 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0] = os_log_create(v118, v19);
        v120 = &object[1];
        if (v119 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v119 >= 0x17)
        {
          v121 = v15;
          v122 = v19;
          v123 = v16;
          v124 = v13;
          v125 = v17;
          v126 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v119 | 7) != 0x17)
            v126 = v119 | 7;
          v127 = v126 + 1;
          v120 = (void **)operator new(v126 + 1);
          object[2] = (void *)v119;
          *(_QWORD *)&v386 = v127 | 0x8000000000000000;
          object[1] = v120;
          v17 = v125;
          v13 = v124;
          v16 = v123;
          v19 = v122;
          v15 = v121;
        }
        else
        {
          BYTE7(v386) = v119;
          if (!v119)
          {
LABEL_160:
            *((_BYTE *)v120 + v119) = 0;
            BYTE8(v386) = 1;
            v128 = &v387;
            if (v18 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v18 >= 0x17)
            {
              v129 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v18 | 7) != 0x17)
                v129 = v18 | 7;
              v130 = v129 + 1;
              v128 = operator new(v129 + 1);
              v388 = v18;
              v389 = v130 | 0x8000000000000000;
              v387 = v128;
            }
            else
            {
              HIBYTE(v389) = v18;
              if (!v18)
                goto LABEL_168;
            }
            memmove(v128, v19, v18);
LABEL_168:
            *((_BYTE *)v128 + v18) = 0;
            v390 = 1;
            v131 = object[0];
            if (SHIBYTE(v389) < 0)
              operator delete(v387);
            if (BYTE8(v386) && SBYTE7(v386) < 0)
              operator delete(object[1]);
            if (object[0])
              os_release(object[0]);
            if (v15 && *(_QWORD *)(v15 + 24))
            {
              v132 = _os_log_pack_size();
              v133 = (std::__shared_weak_count_vtbl *)operator new(v132, (std::align_val_t)8uLL);
              v134 = (std::__shared_weak_count *)operator new();
              v135 = v134;
              v134->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v134->__shared_owners_;
              v134->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v134->__shared_weak_owners_ = 0;
              v134[1].__vftable = v133;
              object[0] = v133;
              object[1] = v133;
              object[2] = v134;
              do
                v137 = __ldxr(p_shared_owners);
              while (__stxr(v137 + 1, p_shared_owners));
              v386 = 0uLL;
              v387 = 0;
              do
                v138 = __ldaxr(p_shared_owners);
              while (__stlxr(v138 - 1, p_shared_owners));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v135);
              }
              v139 = object[0];
              *(_WORD *)_os_log_pack_fill() = 0;
              v140 = operator new();
              v141 = *(unsigned __int8 *)(v16 + 39);
              if ((v141 & 0x80u) == 0)
                v142 = v17;
              else
                v142 = *(_QWORD *)(v16 + 16);
              if ((v141 & 0x80u) != 0)
                v141 = *(_QWORD *)(v16 + 24);
              *(_QWORD *)v140 = v139;
              *(_OWORD *)(v140 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v140 + 24) = v386;
              v386 = 0uLL;
              *(_QWORD *)(v140 + 40) = v142;
              *(_QWORD *)(v140 + 48) = v141;
              *(_BYTE *)(v140 + 56) = 16;
              *(_QWORD *)&category = 0;
              v375 = (uint64_t *)v140;
              (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), &v375);
              v143 = v375;
              v375 = 0;
              if (v143)
              {
                v144 = (std::__shared_weak_count *)v143[4];
                if (v144)
                {
                  v145 = (unint64_t *)&v144->__shared_owners_;
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                  }
                }
                v147 = (std::__shared_weak_count *)v143[2];
                if (v147)
                {
                  v148 = (unint64_t *)&v147->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                MEMORY[0x212BC6398](v143, 0x10F0C40B62ED6C6);
                v150 = category;
                *(_QWORD *)&category = 0;
                if (v150)
                {
                  v151 = *(std::__shared_weak_count **)(v150 + 32);
                  if (v151)
                  {
                    v152 = (unint64_t *)&v151->__shared_owners_;
                    do
                      v153 = __ldaxr(v152);
                    while (__stlxr(v153 - 1, v152));
                    if (!v153)
                    {
                      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                      std::__shared_weak_count::__release_weak(v151);
                    }
                  }
                  v154 = *(std::__shared_weak_count **)(v150 + 16);
                  if (v154)
                  {
                    v155 = (unint64_t *)&v154->__shared_owners_;
                    do
                      v156 = __ldaxr(v155);
                    while (__stlxr(v156 - 1, v155));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                      std::__shared_weak_count::__release_weak(v154);
                    }
                  }
                  MEMORY[0x212BC6398](v150, 0x10F0C40B62ED6C6);
                }
              }
              v157 = (std::__shared_weak_count *)*((_QWORD *)&v386 + 1);
              if (*((_QWORD *)&v386 + 1))
              {
                v158 = (unint64_t *)(*((_QWORD *)&v386 + 1) + 8);
                do
                  v159 = __ldaxr(v158);
                while (__stlxr(v159 - 1, v158));
                if (!v159)
                {
                  ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                  std::__shared_weak_count::__release_weak(v157);
                }
              }
              v160 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v161 = (unint64_t *)((char *)object[2] + 8);
                do
                  v162 = __ldaxr(v161);
                while (__stlxr(v162 - 1, v161));
                if (!v162)
                {
                  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                  std::__shared_weak_count::__release_weak(v160);
                }
              }
            }
            else
            {
              os_log_type_enabled(v131, OS_LOG_TYPE_ERROR);
              LOWORD(object[0]) = 0;
              v163 = (void *)_os_log_send_and_compose_impl();
              if (v163)
                free(v163);
            }
            if (v13)
            {
              sub_20E8C003C((uint64_t)v403, "Out-of-order features arrived from across streams! Dropping these features.");
              sub_20E863570((uint64_t)v403);
            }
            sub_20E863570((uint64_t)v403);
            v164 = v408;
            if (v408)
            {
              v165 = (unint64_t *)&v408->__shared_owners_;
              do
                v166 = __ldaxr(v165);
              while (__stlxr(v166 - 1, v165));
              if (!v166)
              {
                ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                std::__shared_weak_count::__release_weak(v164);
              }
            }
            goto LABEL_230;
          }
        }
        memmove(v120, v118, v119);
        goto LABEL_160;
      }
    }
LABEL_230:
    v403[0] = 0;
    LOBYTE(v404) = 0;
    object[0] = *(void **)&v11;
    object[2] = 0;
    *(_QWORD *)&v386 = 0;
    object[1] = 0;
    DWORD2(v386) = 1;
    sub_20ED98A64(a3, (uint64_t)v403, (uint64_t *)object);
    if ((_BYTE)v404)
    {
      if (*(_QWORD *)v403)
      {
        sub_20E9AE494((uint64_t)v403, *(void ***)v403);
        operator delete(*(void **)v403);
      }
    }
    return;
  }
  v352 = (_OWORD *)(v3 + 8);
  v21 = *(_DWORD *)v3;
  v358 = *(_DWORD *)(v3 + 4);
  v355 = v3;
  v356 = (uint64_t **)(v4 + 64);
  v354 = v4;
  v359 = *(_DWORD *)v3;
  if (v12 <= v11 + 0.01)
  {
    if (*(_BYTE *)(v4 + 88))
    {
      v63 = (_QWORD *)(v4 + 72);
      v62 = *(uint64_t **)(v4 + 72);
      v64 = (uint64_t **)(v4 + 72);
      v65 = (uint64_t **)(v4 + 72);
      if (v62)
      {
        while (1)
        {
          while (1)
          {
            v65 = (uint64_t **)v62;
            v66 = *((_DWORD *)v62 + 8);
            if (v359 >= v66)
              break;
            v62 = *v65;
            v64 = v65;
            if (!*v65)
              goto LABEL_86;
          }
          if (v66 >= v359)
            break;
          v62 = v65[1];
          if (!v62)
          {
            v64 = v65 + 1;
            goto LABEL_86;
          }
        }
        v174 = v65;
        v70 = *(_DWORD *)(v3 + 4);
        v71 = *(_DWORD *)v3;
        v175 = v174[6];
        v73 = (char *)(v174 + 6);
        v72 = (char *)v175;
        if (v175)
          goto LABEL_246;
      }
      else
      {
LABEL_86:
        v67 = operator new(0x40uLL);
        v67[8] = v359;
        *((_QWORD *)v67 + 7) = 0;
        *((_QWORD *)v67 + 6) = 0;
        *((_QWORD *)v67 + 5) = v67 + 12;
        *(_QWORD *)v67 = 0;
        *((_QWORD *)v67 + 1) = 0;
        *((_QWORD *)v67 + 2) = v65;
        *v64 = (uint64_t *)v67;
        v68 = (uint64_t *)**v356;
        v69 = (uint64_t *)v67;
        if (v68)
        {
          *v356 = v68;
          v69 = *v64;
        }
        sub_20E868578(*(uint64_t **)(v4 + 72), v69);
        ++*(_QWORD *)(v4 + 80);
        v70 = v358;
        v71 = v359;
        v74 = (char *)*((_QWORD *)v67 + 6);
        v73 = (char *)(v67 + 12);
        v72 = v74;
        if (v74)
        {
LABEL_246:
          v176 = v73;
          do
          {
            v177 = *((_DWORD *)v72 + 8);
            v178 = v177 >= v70;
            if (v177 >= v70)
              v179 = (char **)v72;
            else
              v179 = (char **)(v72 + 8);
            if (v178)
              v176 = v72;
            v72 = *v179;
          }
          while (*v179);
          if (v176 != v73 && v70 >= *((_DWORD *)v176 + 8))
          {
            sub_20ED9854C(&v362);
            v71 = v359;
            if (**(int **)(v362 + 56) <= 5)
            {
              v180 = *(unsigned __int8 *)(v362 + 72);
              v181 = sub_20E8C31DC(v362, "OSLogSurrogateAppender", 1, 0);
              v182 = v181 ? v181 + 16 : 0;
              if (v180 || v181 != 0)
              {
                *(_QWORD *)v403 = &v362;
                *(std::chrono::steady_clock::time_point *)&v403[8] = std::chrono::steady_clock::now();
                *(std::chrono::system_clock::time_point *)&v403[16] = std::chrono::system_clock::now();
                LODWORD(v404) = 5;
                *((_QWORD *)&v404 + 1) = "unknown file";
                LODWORD(v405) = 98;
                v407 = 0;
                v408 = 0;
                v406 = "unknown function";
                v184 = **(_QWORD **)v403;
                v185 = (uint64_t *)(**(_QWORD **)v403 + 16);
                if (*(char *)(**(_QWORD **)v403 + 39) < 0)
                {
                  v187 = *(_QWORD *)(v184 + 16);
                  v186 = *(_QWORD *)(v184 + 24);
                }
                else
                {
                  v186 = *(unsigned __int8 *)(**(_QWORD **)v403 + 39);
                  v187 = **(_QWORD **)v403 + 16;
                }
                *(_QWORD *)&category = v187;
                *((_QWORD *)&category + 1) = v186;
                v332 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v332 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)object);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                  if ((_BYTE)v386 && SHIBYTE(object[2]) < 0)
                    operator delete(object[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                  v71 = v359;
                }
                v333 = byte_254A4A4F8[23];
                if (byte_254A4A4F8[23] >= 0)
                {
                  v334 = byte_254A4A4F8;
                }
                else
                {
                  v333 = *(_QWORD *)&byte_254A4A4F8[8];
                  v334 = *(const char **)byte_254A4A4F8;
                }
                v375 = (uint64_t *)v334;
                rep = v333;
                object[0] = os_log_create(v334, (const char *)category);
                sub_20E86E5A8(&object[1], (uint64_t)&v375);
                sub_20E86E5A8(&v387, (uint64_t)&category);
                v335 = object[0];
                sub_20E86E44C((uint64_t)object);
                sub_20ED98BD8(v182, v185, v335, OS_LOG_TYPE_ERROR);
                v4 = v354;
                if (v180)
                {
                  sub_20E8C003C((uint64_t)v403, "Duplicate features arrived! The DataVerificationNode should prevent ever getting here.");
                  sub_20E863570((uint64_t)v403);
                }
                sub_20E863714((uint64_t)v403);
              }
            }
          }
        }
      }
      v336 = *v63;
      v337 = v63;
      if (*v63)
      {
        while (1)
        {
          while (1)
          {
            v337 = (_QWORD *)v336;
            v338 = *(_DWORD *)(v336 + 32);
            if (v71 >= v338)
              break;
            v336 = *v337;
            v63 = v337;
            if (!*v337)
              goto LABEL_545;
          }
          if (v338 >= v71)
            break;
          v336 = v337[1];
          if (!v336)
          {
            v63 = v337 + 1;
            goto LABEL_545;
          }
        }
        v339 = (char *)v337;
        v343 = v337 + 6;
        v342 = v337[6];
        if (v342)
          goto LABEL_550;
      }
      else
      {
LABEL_545:
        v339 = (char *)operator new(0x40uLL);
        *((_DWORD *)v339 + 8) = v359;
        *((_QWORD *)v339 + 7) = 0;
        *((_QWORD *)v339 + 6) = 0;
        *((_QWORD *)v339 + 5) = v339 + 48;
        *(_QWORD *)v339 = 0;
        *((_QWORD *)v339 + 1) = 0;
        *((_QWORD *)v339 + 2) = v337;
        *v63 = v339;
        v340 = (uint64_t *)**v356;
        v341 = (uint64_t *)v339;
        if (v340)
        {
          *v356 = v340;
          v341 = (uint64_t *)*v63;
        }
        sub_20E868578(*(uint64_t **)(v4 + 72), v341);
        ++*(_QWORD *)(v4 + 80);
        v343 = v339 + 48;
        v342 = *((_QWORD *)v339 + 6);
        if (v342)
        {
          while (1)
          {
LABEL_550:
            while (1)
            {
              v344 = (_QWORD *)v342;
              v345 = *(_DWORD *)(v342 + 32);
              if (v358 >= v345)
                break;
              v342 = *v344;
              v343 = v344;
              if (!*v344)
                goto LABEL_556;
            }
            if (v345 >= v358)
              break;
            v342 = v344[1];
            if (!v342)
            {
              v343 = v344 + 1;
              goto LABEL_556;
            }
          }
          v346 = (char *)v344;
          goto LABEL_560;
        }
      }
      v344 = v343;
LABEL_556:
      v346 = (char *)operator new(0x2F0uLL);
      *((_DWORD *)v346 + 8) = v358;
      bzero(v346 + 40, 0x2C8uLL);
      *((_QWORD *)v346 + 6) = 0xBFF0000000000000;
      *(_OWORD *)(v346 + 56) = 0u;
      *(_OWORD *)(v346 + 72) = 0u;
      *(_OWORD *)(v346 + 88) = 0u;
      *(_OWORD *)(v346 + 104) = 0u;
      *(_OWORD *)(v346 + 120) = 0u;
      *(_OWORD *)(v346 + 136) = 0u;
      *(_OWORD *)(v346 + 152) = 0u;
      *(_OWORD *)(v346 + 168) = 0u;
      *(_OWORD *)(v346 + 184) = 0u;
      *(_OWORD *)(v346 + 193) = 0u;
      *((_OWORD *)v346 + 15) = 0u;
      *((_OWORD *)v346 + 16) = 0u;
      v346[272] = 0;
      *(_QWORD *)v346 = 0;
      *((_QWORD *)v346 + 1) = 0;
      *((_QWORD *)v346 + 2) = v344;
      *v343 = v346;
      v347 = (uint64_t *)v346;
      v348 = **((_QWORD **)v339 + 5);
      if (v348)
      {
        *((_QWORD *)v339 + 5) = v348;
        v347 = (uint64_t *)*v343;
      }
      sub_20E868578(*((uint64_t **)v339 + 6), v347);
      ++*((_QWORD *)v339 + 7);
LABEL_560:
      sub_20E9BF3F4((uint64_t)(v346 + 40), v3);
      sub_20ED98680(a3, v4);
      return;
    }
    sub_20ED9854C(&v362);
    if (**(int **)(v362 + 56) > 5)
      goto LABEL_230;
    v80 = *(unsigned __int8 *)(v362 + 72);
    v81 = sub_20E8C31DC(v362, "OSLogSurrogateAppender", 1, 0);
    v82 = v81;
    if (!v80 && !v81)
      goto LABEL_230;
    *(_QWORD *)v403 = &v362;
    *(std::chrono::steady_clock::time_point *)&v403[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v403[16] = std::chrono::system_clock::now();
    LODWORD(v404) = 5;
    *((_QWORD *)&v404 + 1) = "unknown file";
    LODWORD(v405) = 106;
    v407 = 0;
    v408 = 0;
    v406 = "unknown function";
    v83 = **(_QWORD **)v403;
    v84 = **(_QWORD **)v403 + 16;
    if (*(char *)(**(_QWORD **)v403 + 39) < 0)
    {
      v86 = *(const char **)(v83 + 16);
      v85 = *(_QWORD *)(v83 + 24);
    }
    else
    {
      v85 = *(unsigned __int8 *)(**(_QWORD **)v403 + 39);
      v86 = (const char *)(v83 + 16);
    }
    v196 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v196 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v386 && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v197 = byte_254A4A4F8;
    else
      v197 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v198 = byte_254A4A4F8[23];
    else
      v198 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v197, v86);
    v199 = &object[1];
    if (v198 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v198 >= 0x17)
    {
      v200 = v82;
      v201 = v86;
      v202 = v83;
      v203 = v80;
      v204 = v84;
      v205 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v198 | 7) != 0x17)
        v205 = v198 | 7;
      v206 = v205 + 1;
      v199 = (void **)operator new(v205 + 1);
      object[2] = (void *)v198;
      *(_QWORD *)&v386 = v206 | 0x8000000000000000;
      object[1] = v199;
      v84 = v204;
      v80 = v203;
      v83 = v202;
      v86 = v201;
      v82 = v200;
    }
    else
    {
      BYTE7(v386) = v198;
      if (!v198)
      {
LABEL_310:
        *((_BYTE *)v199 + v198) = 0;
        BYTE8(v386) = 1;
        v207 = &v387;
        if (v85 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v85 >= 0x17)
        {
          v208 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v85 | 7) != 0x17)
            v208 = v85 | 7;
          v209 = v208 + 1;
          v207 = operator new(v208 + 1);
          v388 = v85;
          v389 = v209 | 0x8000000000000000;
          v387 = v207;
        }
        else
        {
          HIBYTE(v389) = v85;
          if (!v85)
            goto LABEL_318;
        }
        memmove(v207, v86, v85);
LABEL_318:
        *((_BYTE *)v207 + v85) = 0;
        v390 = 1;
        v210 = object[0];
        if (SHIBYTE(v389) < 0)
          operator delete(v387);
        if (BYTE8(v386) && SBYTE7(v386) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v82 && *(_QWORD *)(v82 + 24))
        {
          v211 = _os_log_pack_size();
          v212 = (std::__shared_weak_count_vtbl *)operator new(v211, (std::align_val_t)8uLL);
          v213 = (std::__shared_weak_count *)operator new();
          v214 = v213;
          v213->__shared_owners_ = 0;
          v215 = (unint64_t *)&v213->__shared_owners_;
          v213->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v213->__shared_weak_owners_ = 0;
          v213[1].__vftable = v212;
          object[0] = v212;
          object[1] = v212;
          object[2] = v213;
          do
            v216 = __ldxr(v215);
          while (__stxr(v216 + 1, v215));
          v386 = 0uLL;
          v387 = 0;
          do
            v217 = __ldaxr(v215);
          while (__stlxr(v217 - 1, v215));
          if (!v217)
          {
            ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
            std::__shared_weak_count::__release_weak(v214);
          }
          v218 = object[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v219 = operator new();
          v220 = *(unsigned __int8 *)(v83 + 39);
          if ((v220 & 0x80u) == 0)
            v221 = v84;
          else
            v221 = *(_QWORD *)(v83 + 16);
          if ((v220 & 0x80u) != 0)
            v220 = *(_QWORD *)(v83 + 24);
          *(_QWORD *)v219 = v218;
          *(_OWORD *)(v219 + 8) = *(_OWORD *)&object[1];
          object[1] = 0;
          object[2] = 0;
          *(_OWORD *)(v219 + 24) = v386;
          v386 = 0uLL;
          *(_QWORD *)(v219 + 40) = v221;
          *(_QWORD *)(v219 + 48) = v220;
          *(_BYTE *)(v219 + 56) = 16;
          *(_QWORD *)&category = 0;
          v375 = (uint64_t *)v219;
          (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v82 + 24) + 40))(*(_QWORD *)(v82 + 24), &v375);
          v222 = v375;
          v375 = 0;
          if (v222)
          {
            v223 = (std::__shared_weak_count *)v222[4];
            if (v223)
            {
              v224 = (unint64_t *)&v223->__shared_owners_;
              do
                v225 = __ldaxr(v224);
              while (__stlxr(v225 - 1, v224));
              if (!v225)
              {
                ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                std::__shared_weak_count::__release_weak(v223);
              }
            }
            v226 = (std::__shared_weak_count *)v222[2];
            if (v226)
            {
              v227 = (unint64_t *)&v226->__shared_owners_;
              do
                v228 = __ldaxr(v227);
              while (__stlxr(v228 - 1, v227));
              if (!v228)
              {
                ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                std::__shared_weak_count::__release_weak(v226);
              }
            }
            MEMORY[0x212BC6398](v222, 0x10F0C40B62ED6C6);
            v229 = category;
            *(_QWORD *)&category = 0;
            if (v229)
            {
              v230 = *(std::__shared_weak_count **)(v229 + 32);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldaxr(v231);
                while (__stlxr(v232 - 1, v231));
                if (!v232)
                {
                  ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                  std::__shared_weak_count::__release_weak(v230);
                }
              }
              v233 = *(std::__shared_weak_count **)(v229 + 16);
              if (v233)
              {
                v234 = (unint64_t *)&v233->__shared_owners_;
                do
                  v235 = __ldaxr(v234);
                while (__stlxr(v235 - 1, v234));
                if (!v235)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
              }
              MEMORY[0x212BC6398](v229, 0x10F0C40B62ED6C6);
            }
          }
          v236 = (std::__shared_weak_count *)*((_QWORD *)&v386 + 1);
          if (*((_QWORD *)&v386 + 1))
          {
            v237 = (unint64_t *)(*((_QWORD *)&v386 + 1) + 8);
            do
              v238 = __ldaxr(v237);
            while (__stlxr(v238 - 1, v237));
            if (!v238)
            {
              ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
              std::__shared_weak_count::__release_weak(v236);
            }
          }
          v239 = (std::__shared_weak_count *)object[2];
          if (object[2])
          {
            v240 = (unint64_t *)((char *)object[2] + 8);
            do
              v241 = __ldaxr(v240);
            while (__stlxr(v241 - 1, v240));
            if (!v241)
            {
              ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
              std::__shared_weak_count::__release_weak(v239);
            }
          }
        }
        else
        {
          os_log_type_enabled(v210, OS_LOG_TYPE_ERROR);
          LOWORD(object[0]) = 0;
          v242 = (void *)_os_log_send_and_compose_impl();
          if (v242)
            free(v242);
        }
        if (v80)
        {
          sub_20E8C003C((uint64_t)v403, "The bundle had been completed, yet we got another set of features for it! The DataVerificationNode should prevent ever getting here.");
          sub_20E863570((uint64_t)v403);
        }
        sub_20E863570((uint64_t)v403);
        v243 = v408;
        if (v408)
        {
          v244 = (unint64_t *)&v408->__shared_owners_;
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
        goto LABEL_230;
      }
    }
    memmove(v199, v197, v198);
    goto LABEL_310;
  }
  if (!*(_BYTE *)(v4 + 88))
  {
    v75 = *(unsigned __int8 *)(v4 + 112);
    *v357 = *v352;
    if (!v75)
      *(_BYTE *)(v4 + 112) = 1;
    *(_QWORD *)&v403[8] = 0;
    *(_QWORD *)&v403[16] = 0;
    *(_QWORD *)v403 = &v403[8];
    object[1] = 0;
    object[2] = 0;
    object[0] = &object[1];
    LOBYTE(v386) = 1;
    *(_QWORD *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    v76 = (uint64_t **)(v4 + 72);
    *(_QWORD *)(v4 + 64) = v4 + 72;
    *(_BYTE *)(v4 + 88) = 1;
    sub_20ED989D0((uint64_t)v403, 0);
    v77 = *(uint64_t **)(v4 + 72);
    if (v77)
    {
      while (1)
      {
        while (1)
        {
          v78 = v77;
          v79 = *((_DWORD *)v77 + 8);
          if (v359 >= v79)
            break;
          v77 = (uint64_t *)*v78;
          v76 = (uint64_t **)v78;
          if (!*v78)
            goto LABEL_236;
        }
        if (v79 >= v359)
          break;
        v77 = (uint64_t *)v78[1];
        if (!v77)
        {
          v76 = (uint64_t **)(v78 + 1);
          goto LABEL_236;
        }
      }
      v167 = (char *)v78;
      v171 = v78 + 6;
      v170 = v78[6];
      if (v170)
        goto LABEL_241;
    }
    else
    {
      v78 = (uint64_t *)(v4 + 72);
LABEL_236:
      v167 = (char *)operator new(0x40uLL);
      *((_DWORD *)v167 + 8) = v359;
      *((_QWORD *)v167 + 7) = 0;
      *((_QWORD *)v167 + 6) = 0;
      *((_QWORD *)v167 + 5) = v167 + 48;
      *(_QWORD *)v167 = 0;
      *((_QWORD *)v167 + 1) = 0;
      *((_QWORD *)v167 + 2) = v78;
      *v76 = (uint64_t *)v167;
      v168 = (uint64_t *)**v356;
      v169 = (uint64_t *)v167;
      if (v168)
      {
        *v356 = v168;
        v169 = *v76;
      }
      sub_20E868578(*(uint64_t **)(v4 + 72), v169);
      ++*(_QWORD *)(v4 + 80);
      v171 = v167 + 48;
      v170 = *((_QWORD *)v167 + 6);
      if (v170)
      {
        while (1)
        {
LABEL_241:
          while (1)
          {
            v172 = (_QWORD *)v170;
            v173 = *(_DWORD *)(v170 + 32);
            if (v358 >= v173)
              break;
            v170 = *v172;
            v171 = v172;
            if (!*v172)
              goto LABEL_286;
          }
          if (v173 >= v358)
            break;
          v170 = v172[1];
          if (!v170)
          {
            v171 = v172 + 1;
            goto LABEL_286;
          }
        }
        v191 = (char *)v172;
        goto LABEL_290;
      }
    }
    v172 = v171;
LABEL_286:
    v191 = (char *)operator new(0x2F0uLL);
    *((_DWORD *)v191 + 8) = v358;
    bzero(v191 + 40, 0x2C8uLL);
    *((_QWORD *)v191 + 6) = 0xBFF0000000000000;
    *(_OWORD *)(v191 + 56) = 0u;
    *(_OWORD *)(v191 + 72) = 0u;
    *(_OWORD *)(v191 + 88) = 0u;
    *(_OWORD *)(v191 + 104) = 0u;
    *(_OWORD *)(v191 + 120) = 0u;
    *(_OWORD *)(v191 + 136) = 0u;
    *(_OWORD *)(v191 + 152) = 0u;
    *(_OWORD *)(v191 + 168) = 0u;
    *(_OWORD *)(v191 + 184) = 0u;
    *(_OWORD *)(v191 + 193) = 0u;
    *((_OWORD *)v191 + 15) = 0u;
    *((_OWORD *)v191 + 16) = 0u;
    v191[272] = 0;
    *(_QWORD *)v191 = 0;
    *((_QWORD *)v191 + 1) = 0;
    *((_QWORD *)v191 + 2) = v172;
    *v171 = v191;
    v192 = (uint64_t *)v191;
    v193 = **((_QWORD **)v167 + 5);
    if (v193)
    {
      *((_QWORD *)v167 + 5) = v193;
      v192 = (uint64_t *)*v171;
    }
    sub_20E868578(*((uint64_t **)v167 + 6), v192);
    ++*((_QWORD *)v167 + 7);
LABEL_290:
    sub_20E9BF3F4((uint64_t)(v191 + 40), v3);
    sub_20ED98680(a3, v4);
    return;
  }
  __p = 0;
  v371 = 0;
  v372 = 0;
  v23 = *(unsigned int **)(v4 + 8);
  v22 = *(unsigned int **)(v4 + 16);
  if (v23 != v22)
  {
    v24 = 0;
    v25 = (_QWORD *)(v4 + 72);
    v26 = v4 + 32;
    while (1)
    {
      v27 = *v25;
      if (*v25)
      {
        v28 = *v23;
        v29 = v25;
        do
        {
          v30 = *(_DWORD *)(v27 + 32);
          v31 = v30 >= v28;
          if (v30 >= v28)
            v32 = (uint64_t *)v27;
          else
            v32 = (uint64_t *)(v27 + 8);
          if (v31)
            v29 = (_QWORD *)v27;
          v27 = *v32;
        }
        while (*v32);
        if (v29 != v25 && v28 >= *((_DWORD *)v29 + 8))
        {
          v35 = v29[6];
          v33 = v29 + 6;
          v34 = v35;
          if (v35)
          {
            v36 = v23[1];
            v37 = v33;
            do
            {
              v38 = *(_DWORD *)(v34 + 32);
              v39 = v38 >= v36;
              if (v38 >= v36)
                v40 = (uint64_t *)v34;
              else
                v40 = (uint64_t *)(v34 + 8);
              if (v39)
                v37 = (_QWORD *)v34;
              v34 = *v40;
            }
            while (*v40);
            if (v37 != v33 && v36 >= *((_DWORD *)v37 + 8))
              goto LABEL_66;
          }
        }
      }
      if (v24 < v372)
      {
        *(_QWORD *)v24 = *(_QWORD *)v23;
        v41 = (uint64_t)(v24 + 8);
        v42 = v356;
        goto LABEL_65;
      }
      v43 = (char *)__p;
      v44 = v24 - (_BYTE *)__p;
      v45 = (v24 - (_BYTE *)__p) >> 3;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 61)
        sub_20E92CED8();
      v47 = v372 - (_BYTE *)__p;
      if ((v372 - (_BYTE *)__p) >> 2 > v46)
        v46 = v47 >> 2;
      v48 = (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v46;
      if (v48)
      {
        if (v48 >> 61)
          sub_20E877A38();
        v49 = operator new(8 * v48);
        v50 = &v49[8 * v45];
        *v50 = *(_QWORD *)v23;
        v41 = (uint64_t)(v50 + 1);
        v51 = v24 - v43;
        if (v24 == v43)
        {
LABEL_69:
          v42 = v356;
          __p = v50;
          v371 = v41;
          v372 = &v49[8 * v48];
          if (!v24)
            goto LABEL_65;
LABEL_64:
          operator delete(v24);
          goto LABEL_65;
        }
      }
      else
      {
        v49 = 0;
        v50 = (_QWORD *)(8 * v45);
        *(_QWORD *)(8 * v45) = *(_QWORD *)v23;
        v41 = 8 * v45 + 8;
        v51 = v24 - v43;
        if (v24 == v43)
          goto LABEL_69;
      }
      v52 = v51 - 8;
      if (v52 < 0x168)
        break;
      v55 = (v24 - 8 - v43) & 0xFFFFFFFFFFFFFFF8;
      if (&v49[v44 - 8 - v55] > &v49[v44 - 8] || &v24[-v55 - 8] > v24 - 8 || (unint64_t)(v24 - &v49[v44]) < 0x20)
        break;
      v56 = (v52 >> 3) + 1;
      v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      v53 = &v24[-v57];
      v50 = (_QWORD *)((char *)v50 - v57);
      v58 = &v49[8 * v45 - 16];
      v59 = v24 - 16;
      v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v61 = *(_OWORD *)v59;
        *(v58 - 1) = *((_OWORD *)v59 - 1);
        *v58 = v61;
        v58 -= 2;
        v59 -= 32;
        v60 -= 4;
      }
      while (v60);
      v42 = v356;
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_62;
LABEL_63:
      v24 = (char *)__p;
      __p = v50;
      v371 = v41;
      v372 = &v49[8 * v48];
      if (v24)
        goto LABEL_64;
LABEL_65:
      v371 = v41;
      sub_20ED94748(v23, v357, v42, v26);
      v24 = (char *)v41;
      v4 = v354;
      v3 = v355;
LABEL_66:
      v23 += 2;
      v21 = v359;
      if (v23 == v22)
        goto LABEL_109;
    }
    v53 = v24;
    v42 = v356;
    do
    {
LABEL_62:
      v54 = *((_QWORD *)v53 - 1);
      v53 -= 8;
      *--v50 = v54;
    }
    while (v53 != v43);
    goto LABEL_63;
  }
  v24 = 0;
LABEL_109:
  v88 = (uint64_t *)(v4 + 72);
  v87 = *(_QWORD **)(v4 + 72);
  v367 = *(_QWORD ***)(v4 + 64);
  v368 = v87;
  v369 = *(_QWORD **)(v4 + 80);
  v351 = (uint64_t *)(v4 + 72);
  if (v369)
  {
    v87[2] = &v368;
    v89 = v356;
    *v356 = v88;
    *v88 = 0;
    *(_QWORD *)(v4 + 80) = 0;
    v362 = *(_QWORD *)&v11;
    v364 = 0;
    v365 = 0;
    v363 = 0;
    v90 = (char *)__p;
    v91 = v24 - (_BYTE *)__p;
    if (v24 != __p)
      goto LABEL_111;
LABEL_134:
    v366 = 2;
    if (!*(_BYTE *)(v4 + 56))
      goto LABEL_113;
    goto LABEL_135;
  }
  v367 = &v368;
  v89 = v356;
  v362 = *(_QWORD *)&v11;
  v364 = 0;
  v365 = 0;
  v363 = 0;
  v90 = (char *)__p;
  v91 = v24 - (_BYTE *)__p;
  if (v24 == __p)
    goto LABEL_134;
LABEL_111:
  if (v91 < 0)
    sub_20E92CED8();
  v92 = (char *)operator new(v91);
  v93 = &v92[8 * (v91 >> 3)];
  v363 = v92;
  v365 = v93;
  memcpy(v92, v90, v91);
  v364 = v93;
  v21 = v359;
  v366 = 2;
  if (!*(_BYTE *)(v4 + 56))
  {
LABEL_113:
    v94 = *(unsigned __int8 *)(v4 + 112);
    *v357 = *v352;
    if (v94)
      goto LABEL_114;
    goto LABEL_529;
  }
LABEL_135:
  sub_20E863438((uint64_t)object);
  sub_20E86A980(&object[2], (uint64_t)"ARKitTriage: Frame Bundle Incomplete Due to Missing Frame at Timestamp ", 71);
  v109 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v109, (uint64_t)". Missed camera stream IDs:", 27);
  for (; v90 != v24; v90 += 8)
  {
    sub_20E86A980(&object[2], (uint64_t)" [", 2);
    v110 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v110, (uint64_t)", ", 2);
    v111 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v111, (uint64_t)"]", 1);
  }
  sub_20ED9854C(&v384);
  if (**(int **)(v384 + 56) <= 5)
  {
    v112 = *(unsigned __int8 *)(v384 + 72);
    v113 = sub_20E8C31DC(v384, "OSLogSurrogateAppender", 1, 0);
    v114 = v113;
    if (v112 || v113)
    {
      v375 = &v384;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v377 = std::chrono::system_clock::now().__d_.__rep_;
      v378 = 5;
      v379 = "unknown file";
      v380 = 159;
      v382 = 0;
      v383 = 0;
      v381 = "unknown function";
      if ((v395 & 0x10) != 0)
      {
        v194 = v394;
        if (v394 < v391)
        {
          v394 = v391;
          v194 = v391;
        }
        v195 = (void **)&v390;
      }
      else
      {
        if ((v395 & 8) == 0)
        {
          v115 = 0;
          HIBYTE(v374) = 0;
          v116 = __dst;
          goto LABEL_390;
        }
        v195 = &v387;
        v194 = v389;
      }
      v246 = *v195;
      v115 = v194 - (_QWORD)*v195;
      if (v115 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v115 >= 0x17)
      {
        v247 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v115 | 7) != 0x17)
          v247 = v115 | 7;
        v248 = v247 + 1;
        v116 = (void **)operator new(v247 + 1);
        __dst[1] = (void *)v115;
        v374 = v248 | 0x8000000000000000;
        __dst[0] = v116;
      }
      else
      {
        HIBYTE(v374) = v194 - *(_BYTE *)v195;
        v116 = __dst;
        if (!v115)
        {
LABEL_390:
          *((_BYTE *)v116 + v115) = 0;
          v249 = __dst;
          if (v374 < 0)
            v249 = (void **)__dst[0];
          v350 = (const char *)v249;
          v250 = *v375;
          v251 = *v375 + 16;
          v349 = *v375;
          if (*(char *)(*v375 + 39) < 0)
          {
            v253 = *(const char **)(v250 + 16);
            v252 = *(_QWORD *)(v250 + 24);
          }
          else
          {
            v252 = *(unsigned __int8 *)(*v375 + 39);
            v253 = (const char *)(*v375 + 16);
          }
          v254 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v254 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v403);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v403);
            if ((_BYTE)v404 && (v403[23] & 0x80000000) != 0)
              operator delete(*(void **)v403);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
            v4 = v354;
            v3 = v355;
          }
          if (byte_254A4A4F8[23] >= 0)
            v255 = byte_254A4A4F8;
          else
            v255 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v256 = byte_254A4A4F8[23];
          else
            v256 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v403 = os_log_create(v255, v253);
          v257 = &v403[8];
          if (v256 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v256 >= 0x17)
          {
            v258 = (v256 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v256 | 7) != 0x17)
              v258 = v256 | 7;
            v259 = v258 + 1;
            v257 = operator new(v258 + 1);
            *(_QWORD *)&v403[16] = v256;
            *(_QWORD *)&v404 = v259 | 0x8000000000000000;
            *(_QWORD *)&v403[8] = v257;
            v4 = v354;
            v3 = v355;
          }
          else
          {
            BYTE7(v404) = v256;
            if (!v256)
            {
LABEL_410:
              v257[v256] = 0;
              BYTE8(v404) = 1;
              v260 = (char *)&v405;
              if (v252 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v252 >= 0x17)
              {
                v261 = (v252 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v252 | 7) != 0x17)
                  v261 = v252 | 7;
                v262 = v261 + 1;
                v260 = (char *)operator new(v261 + 1);
                v406 = (const char *)v252;
                v407 = v262 | 0x8000000000000000;
                v405 = v260;
                v4 = v354;
                v3 = v355;
              }
              else
              {
                HIBYTE(v407) = v252;
                if (!v252)
                {
LABEL_418:
                  v260[v252] = 0;
                  LOBYTE(v408) = 1;
                  v263 = *(NSObject **)v403;
                  if (SHIBYTE(v407) < 0)
                    operator delete(v405);
                  if (BYTE8(v404) && SBYTE7(v404) < 0)
                    operator delete(*(void **)&v403[8]);
                  if (*(_QWORD *)v403)
                    os_release(*(void **)v403);
                  if (!v114 || !*(_QWORD *)(v114 + 24))
                  {
                    os_log_type_enabled(v263, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v403 = 136315138;
                    *(_QWORD *)&v403[4] = v350;
                    v271 = (void *)_os_log_send_and_compose_impl();
                    if (v271)
                      free(v271);
LABEL_497:
                    if (SHIBYTE(v374) < 0)
                      operator delete(__dst[0]);
                    if (!v112)
                      goto LABEL_521;
                    if ((v395 & 0x10) != 0)
                    {
                      v321 = v394;
                      if (v394 < v391)
                      {
                        v394 = v391;
                        v321 = v391;
                      }
                      v322 = (void **)&v390;
                    }
                    else
                    {
                      if ((v395 & 8) == 0)
                      {
                        v319 = 0;
                        v403[23] = 0;
                        v320 = v403;
LABEL_516:
                        v320[v319] = 0;
                        v326 = v403;
                        if (v403[23] < 0)
                          v326 = *(const char **)v403;
                        sub_20E8C003C((uint64_t)&v375, "%s.", v326);
                        if ((v403[23] & 0x80000000) != 0)
                          operator delete(*(void **)v403);
                        sub_20E863570((uint64_t)&v375);
LABEL_521:
                        sub_20E863570((uint64_t)&v375);
                        v327 = v383;
                        if (v383)
                        {
                          v328 = (unint64_t *)&v383->__shared_owners_;
                          do
                            v329 = __ldaxr(v328);
                          while (__stlxr(v329 - 1, v328));
                          if (!v329)
                          {
                            ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                            std::__shared_weak_count::__release_weak(v327);
                          }
                        }
                        goto LABEL_526;
                      }
                      v322 = &v387;
                      v321 = v389;
                    }
                    v323 = *v322;
                    v319 = v321 - (_QWORD)*v322;
                    if (v319 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v319 >= 0x17)
                    {
                      v324 = (v319 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v319 | 7) != 0x17)
                        v324 = v319 | 7;
                      v325 = v324 + 1;
                      v320 = operator new(v324 + 1);
                      *(_QWORD *)&v403[8] = v319;
                      *(_QWORD *)&v403[16] = v325 | 0x8000000000000000;
                      *(_QWORD *)v403 = v320;
                    }
                    else
                    {
                      v403[23] = v321 - *(_BYTE *)v322;
                      v320 = v403;
                      if (!v319)
                        goto LABEL_515;
                    }
                    memmove(v320, v323, v319);
LABEL_515:
                    v4 = v354;
                    v3 = v355;
                    goto LABEL_516;
                  }
                  v264 = _os_log_pack_size();
                  v265 = (std::__shared_weak_count_vtbl *)operator new(v264, (std::align_val_t)8uLL);
                  v266 = (std::__shared_weak_count *)operator new();
                  v266->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v266->__shared_owners_ = 0;
                  v266->__shared_weak_owners_ = 0;
                  v266[1].__vftable = v265;
                  *(_QWORD *)&category = v265;
                  *((_QWORD *)&category + 1) = v265;
                  v400 = 0;
                  v398 = v266;
                  v399 = 0;
                  v267 = strlen(v350);
                  if (v267 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v268 = v267;
                  if (v267 >= 0x17)
                  {
                    v272 = (v267 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v267 | 7) != 0x17)
                      v272 = v267 | 7;
                    v273 = v272 + 1;
                    v269 = operator new(v272 + 1);
                    *(_QWORD *)&v402 = v268;
                    *((_QWORD *)&v402 + 1) = v273 | 0x8000000000000000;
                    v401 = v269;
                  }
                  else
                  {
                    HIBYTE(v402) = v267;
                    v269 = &v401;
                    if (!v267)
                    {
                      v270 = v114;
                      goto LABEL_437;
                    }
                  }
                  v270 = v114;
                  memcpy(v269, v350, v268);
LABEL_437:
                  *((_BYTE *)v269 + v268) = 0;
                  v274 = v401;
                  v409[0] = v402;
                  *(_QWORD *)((char *)v409 + 7) = *(_QWORD *)((char *)&v402 + 7);
                  v275 = HIBYTE(v402);
                  v276 = operator new(0x38uLL);
                  v276[1] = 0;
                  v276[2] = 0;
                  v276[3] = off_24C9ABC20;
                  *v276 = &off_24C9ABBD0;
                  v277 = v409[0];
                  v276[4] = v274;
                  v276[5] = v277;
                  *(_QWORD *)((char *)v276 + 47) = *(_QWORD *)((char *)v409 + 7);
                  *((_BYTE *)v276 + 55) = v275;
                  v409[0] = 0;
                  *(_QWORD *)((char *)v409 + 7) = 0;
                  v278 = v400;
                  v399 = (char *)(v276 + 3);
                  v400 = (std::__shared_weak_count *)v276;
                  if (v278)
                  {
                    v279 = (unint64_t *)&v278->__shared_owners_;
                    do
                      v280 = __ldaxr(v279);
                    while (__stlxr(v280 - 1, v279));
                    if (!v280)
                    {
                      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                      std::__shared_weak_count::__release_weak(v278);
                    }
                  }
                  *(_OWORD *)v403 = category;
                  v281 = v399;
                  *(_QWORD *)&v403[16] = v398;
                  if (v398)
                  {
                    v282 = (unint64_t *)&v398->__shared_owners_;
                    do
                      v283 = __ldxr(v282);
                    while (__stxr(v283 + 1, v282));
                  }
                  v284 = v400;
                  *(_QWORD *)&v404 = v281;
                  *((_QWORD *)&v404 + 1) = v400;
                  if (v400)
                  {
                    v285 = (unint64_t *)&v400->__shared_owners_;
                    do
                      v286 = __ldxr(v285);
                    while (__stxr(v286 + 1, v285));
                    v405 = v281;
                    do
                      v287 = __ldaxr(v285);
                    while (__stlxr(v287 - 1, v285));
                    if (!v287)
                    {
                      ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                      std::__shared_weak_count::__release_weak(v284);
                    }
                  }
                  else
                  {
                    v405 = v281;
                  }
                  v288 = v398;
                  if (v398)
                  {
                    v289 = (unint64_t *)&v398->__shared_owners_;
                    do
                      v290 = __ldaxr(v289);
                    while (__stlxr(v290 - 1, v289));
                    if (!v290)
                    {
                      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                      std::__shared_weak_count::__release_weak(v288);
                    }
                  }
                  v291 = *(_QWORD *)v403;
                  if (v405[31] >= 0)
                    v292 = v405 + 8;
                  else
                    v292 = (char *)*((_QWORD *)v405 + 1);
                  v293 = _os_log_pack_fill();
                  *(_DWORD *)v293 = 136315138;
                  *(_QWORD *)(v293 + 4) = v292;
                  v294 = operator new();
                  v295 = *(unsigned __int8 *)(v349 + 39);
                  v296 = *(_QWORD *)(v349 + 16);
                  v297 = *(_QWORD *)(v349 + 24);
                  v298 = v404;
                  *(_OWORD *)(v294 + 8) = *(_OWORD *)&v403[8];
                  if ((v295 & 0x80u) != 0)
                    v295 = v297;
                  else
                    v296 = v251;
                  *(_QWORD *)v294 = v291;
                  *(_QWORD *)&v403[8] = 0;
                  *(_QWORD *)&v403[16] = 0;
                  *(_OWORD *)(v294 + 24) = v298;
                  v404 = 0uLL;
                  *(_QWORD *)(v294 + 40) = v296;
                  *(_QWORD *)(v294 + 48) = v295;
                  *(_BYTE *)(v294 + 56) = 16;
                  v401 = 0;
                  *(_QWORD *)&category = v294;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v270 + 24) + 40))(*(_QWORD *)(v270 + 24), &category);
                  v299 = category;
                  *(_QWORD *)&category = 0;
                  if (v299)
                  {
                    v300 = *(std::__shared_weak_count **)(v299 + 32);
                    if (v300)
                    {
                      v301 = (unint64_t *)&v300->__shared_owners_;
                      do
                        v302 = __ldaxr(v301);
                      while (__stlxr(v302 - 1, v301));
                      if (!v302)
                      {
                        ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                        std::__shared_weak_count::__release_weak(v300);
                      }
                    }
                    v303 = *(std::__shared_weak_count **)(v299 + 16);
                    if (v303)
                    {
                      v304 = (unint64_t *)&v303->__shared_owners_;
                      do
                        v305 = __ldaxr(v304);
                      while (__stlxr(v305 - 1, v304));
                      if (!v305)
                      {
                        ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                        std::__shared_weak_count::__release_weak(v303);
                      }
                    }
                    MEMORY[0x212BC6398](v299, 0x10F0C40B62ED6C6);
                    v306 = v401;
                    v401 = 0;
                    if (v306)
                    {
                      v307 = (std::__shared_weak_count *)v306[4];
                      if (v307)
                      {
                        v308 = (unint64_t *)&v307->__shared_owners_;
                        do
                          v309 = __ldaxr(v308);
                        while (__stlxr(v309 - 1, v308));
                        if (!v309)
                        {
                          ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                          std::__shared_weak_count::__release_weak(v307);
                        }
                      }
                      v310 = (std::__shared_weak_count *)v306[2];
                      if (v310)
                      {
                        v311 = (unint64_t *)&v310->__shared_owners_;
                        do
                          v312 = __ldaxr(v311);
                        while (__stlxr(v312 - 1, v311));
                        if (!v312)
                        {
                          ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                          std::__shared_weak_count::__release_weak(v310);
                        }
                      }
                      MEMORY[0x212BC6398](v306, 0x10F0C40B62ED6C6);
                    }
                  }
                  v313 = (std::__shared_weak_count *)*((_QWORD *)&v404 + 1);
                  v4 = v354;
                  v3 = v355;
                  if (*((_QWORD *)&v404 + 1))
                  {
                    v314 = (unint64_t *)(*((_QWORD *)&v404 + 1) + 8);
                    do
                      v315 = __ldaxr(v314);
                    while (__stlxr(v315 - 1, v314));
                    if (!v315)
                    {
                      ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                      std::__shared_weak_count::__release_weak(v313);
                    }
                  }
                  v316 = *(std::__shared_weak_count **)&v403[16];
                  if (*(_QWORD *)&v403[16])
                  {
                    v317 = (unint64_t *)(*(_QWORD *)&v403[16] + 8);
                    do
                      v318 = __ldaxr(v317);
                    while (__stlxr(v318 - 1, v317));
                    if (!v318)
                    {
                      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
                      std::__shared_weak_count::__release_weak(v316);
                    }
                  }
                  goto LABEL_497;
                }
              }
              memmove(v260, v253, v252);
              goto LABEL_418;
            }
          }
          memmove(v257, v255, v256);
          goto LABEL_410;
        }
      }
      memmove(v116, v246, v115);
      goto LABEL_390;
    }
  }
LABEL_526:
  object[0] = *(void **)MEMORY[0x24BEDB7F0];
  v330 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)object + *((_QWORD *)object[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  object[2] = v330;
  *(_QWORD *)&v386 = MEMORY[0x24BEDB848] + 16;
  if (v393 < 0)
    operator delete(v392);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v396);
  v21 = v359;
  v331 = *(unsigned __int8 *)(v4 + 112);
  v89 = v356;
  *v357 = *v352;
  if (!v331)
LABEL_529:
    *(_BYTE *)(v4 + 112) = 1;
LABEL_114:
  *(_QWORD *)&v403[8] = 0;
  *(_QWORD *)&v403[16] = 0;
  *(_QWORD *)v403 = &v403[8];
  object[1] = 0;
  object[2] = 0;
  object[0] = &object[1];
  LOBYTE(v386) = 1;
  if (!*(_BYTE *)(v4 + 88))
  {
    v95 = 0;
    v97 = v351;
    *v351 = 0;
    v351[1] = 0;
    *(_QWORD *)(v4 + 64) = v351;
    *(_BYTE *)(v4 + 88) = 1;
    if (!(_BYTE)v386)
      goto LABEL_118;
LABEL_117:
    sub_20ED989D0((uint64_t)object, v95);
    goto LABEL_118;
  }
  sub_20ED989D0((uint64_t)v89, *(_QWORD **)(v4 + 72));
  v95 = object[1];
  *(void **)(v4 + 64) = object[0];
  *(_QWORD *)(v4 + 72) = v95;
  v96 = object[2];
  *(void **)(v4 + 80) = object[2];
  if (v96)
  {
    v95[2] = v351;
    object[0] = &object[1];
    object[1] = 0;
    object[2] = 0;
    v97 = v351;
    v95 = 0;
    if (!(_BYTE)v386)
      goto LABEL_118;
    goto LABEL_117;
  }
  v97 = v351;
  *v89 = v351;
  if ((_BYTE)v386)
    goto LABEL_117;
LABEL_118:
  sub_20ED989D0((uint64_t)v403, *(_QWORD **)&v403[8]);
  while (1)
  {
    v98 = (uint64_t *)*v97;
    v99 = (uint64_t **)v97;
    if (!*v97)
      break;
    while (1)
    {
      v97 = v98;
      v100 = *((_DWORD *)v98 + 8);
      if (v21 < v100)
        break;
      if (v100 >= v21)
      {
        v102 = (char *)v97;
        v106 = v97 + 6;
        v105 = v97[6];
        if (v105)
          goto LABEL_129;
        goto LABEL_267;
      }
      v98 = (uint64_t *)v97[1];
      if (!v98)
      {
        v99 = (uint64_t **)(v97 + 1);
        goto LABEL_124;
      }
    }
  }
LABEL_124:
  v101 = v99;
  v102 = (char *)operator new(0x40uLL);
  *((_DWORD *)v102 + 8) = v21;
  *((_QWORD *)v102 + 7) = 0;
  *((_QWORD *)v102 + 6) = 0;
  *((_QWORD *)v102 + 5) = v102 + 48;
  *(_QWORD *)v102 = 0;
  *((_QWORD *)v102 + 1) = 0;
  *((_QWORD *)v102 + 2) = v97;
  *v101 = (uint64_t *)v102;
  v103 = (uint64_t *)**v89;
  v104 = (uint64_t *)v102;
  if (v103)
  {
    *v89 = v103;
    v104 = *v101;
  }
  sub_20E868578(*(uint64_t **)(v4 + 72), v104);
  ++*(_QWORD *)(v4 + 80);
  v106 = v102 + 48;
  v105 = *((_QWORD *)v102 + 6);
  if (v105)
  {
    while (1)
    {
LABEL_129:
      while (1)
      {
        v107 = (_QWORD *)v105;
        v108 = *(_DWORD *)(v105 + 32);
        if (v358 >= v108)
          break;
        v105 = *v107;
        v106 = v107;
        if (!*v107)
          goto LABEL_268;
      }
      if (v108 >= v358)
        break;
      v105 = v107[1];
      if (!v105)
      {
        v106 = v107 + 1;
        goto LABEL_268;
      }
    }
    v188 = (char *)v107;
  }
  else
  {
LABEL_267:
    v107 = v106;
LABEL_268:
    v188 = (char *)operator new(0x2F0uLL);
    *((_DWORD *)v188 + 8) = v358;
    bzero(v188 + 40, 0x2C8uLL);
    *((_QWORD *)v188 + 6) = 0xBFF0000000000000;
    *(_OWORD *)(v188 + 56) = 0u;
    *(_OWORD *)(v188 + 72) = 0u;
    *(_OWORD *)(v188 + 88) = 0u;
    *(_OWORD *)(v188 + 104) = 0u;
    *(_OWORD *)(v188 + 120) = 0u;
    *(_OWORD *)(v188 + 136) = 0u;
    *(_OWORD *)(v188 + 152) = 0u;
    *(_OWORD *)(v188 + 168) = 0u;
    *(_OWORD *)(v188 + 184) = 0u;
    *(_OWORD *)(v188 + 193) = 0u;
    *((_OWORD *)v188 + 15) = 0u;
    *((_OWORD *)v188 + 16) = 0u;
    v188[272] = 0;
    *(_QWORD *)v188 = 0;
    *((_QWORD *)v188 + 1) = 0;
    *((_QWORD *)v188 + 2) = v107;
    *v106 = v188;
    v189 = (uint64_t *)v188;
    v190 = **((_QWORD **)v102 + 5);
    if (v190)
    {
      *((_QWORD *)v102 + 5) = v190;
      v189 = (uint64_t *)*v106;
    }
    sub_20E868578(*((uint64_t **)v102 + 6), v189);
    ++*((_QWORD *)v102 + 7);
  }
  sub_20E9BF3F4((uint64_t)(v188 + 40), v3);
  v360 = v367;
  v361[0] = v368;
  v361[1] = v369;
  if (v369)
  {
    v368[2] = v361;
    v367 = &v368;
    v368 = 0;
    v369 = 0;
  }
  else
  {
    v360 = v361;
  }
  sub_20FD87658((unint64_t *)v403, &v360);
  *(_OWORD *)object = *(_OWORD *)v403;
  object[2] = *(void **)&v403[16];
  memset(v403, 0, sizeof(v403));
  LOBYTE(v386) = 1;
  sub_20ED98A64(a3, (uint64_t)object, &v362);
  if ((_BYTE)v386 && object[0])
  {
    sub_20E9AE494((uint64_t)object, (void **)object[0]);
    operator delete(object[0]);
  }
  if (*(_QWORD *)v403)
  {
    sub_20E9AE494((uint64_t)v403, *(void ***)v403);
    operator delete(*(void **)v403);
  }
  sub_20ED989D0((uint64_t)&v360, v361[0]);
  if (v363)
    operator delete(v363);
  sub_20ED989D0((uint64_t)&v367, v368);
  if (__p)
    operator delete(__p);
}

void sub_20ED98138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  uint64_t v60;

  if (a60)
  {
    if (a59 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v60 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED981BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED981D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *object,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  uint64_t v58;

  if (a58 && a57 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v58 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED98214(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED98228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44)
{
  uint64_t v44;

  sub_20E86E8C4((uint64_t *)&STACK[0x270]);
  sub_20E86E8C4((uint64_t *)(v44 - 232));
  sub_20E86E658(v44 - 208);
  if (a43 < 0)
    operator delete(a38);
  sub_20E863714((uint64_t)&a44);
  JUMPOUT(0x20ED98508);
}

void sub_20ED98250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44)
{
  int v44;
  void *v45;

  if (v44 < 0)
    operator delete(v45);
  sub_20E86E658((uint64_t)&STACK[0x270]);
  if (a43 < 0)
    operator delete(a38);
  sub_20E863714((uint64_t)&a44);
  JUMPOUT(0x20ED98508);
}

void sub_20ED982B4()
{
  JUMPOUT(0x20ED98374);
}

void sub_20ED982E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED982FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *object,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  uint64_t v58;

  if (a58 && a57 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v58 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED98334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44)
{
  uint64_t v44;
  void *v45;

  if (*(_BYTE *)(v44 - 176) && *(char *)(v44 - 177) < 0)
    operator delete(*(void **)(v44 - 200));
  v45 = *(void **)(v44 - 208);
  if (v45)
    os_release(v45);
  if (a43 < 0)
    operator delete(a38);
  sub_20E863714((uint64_t)&a44);
  JUMPOUT(0x20ED98508);
}

void sub_20ED9838C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  sub_20E86E8C4(&a41);
  sub_20E86E8C4((uint64_t *)&STACK[0x270]);
  sub_20E86E658((uint64_t)&a51);
  sub_20E863714(v51 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED983B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  sub_20E86E658((uint64_t)&a51);
  sub_20E863714(v51 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED983D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714(v2 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED98400(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED98418(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20ED98640(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED98434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  sub_20ED98640((uint64_t)&a51);
  sub_20ED6737C((void ***)(v51 - 208));
  sub_20ED989D0((uint64_t)&a24, a25);
  JUMPOUT(0x20ED98510);
}

void sub_20ED98460(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED98474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *object,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  uint64_t v58;

  if (a58 && a57 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v58 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED984B4(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20ED98534);
}

void sub_20ED984C4()
{
  JUMPOUT(0x20ED98510);
}

void sub_20ED984D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20ED98640(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_20ED984E8()
{
  JUMPOUT(0x20ED98510);
}

void sub_20ED984F4()
{
  JUMPOUT(0x20ED9852CLL);
}

void sub_20ED984FC()
{
  JUMPOUT(0x20ED9852CLL);
}

void sub_20ED9854C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F930);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F930))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F928);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F930);
  }
  *a1 = qword_254A5F928;
}

void sub_20ED985E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F930);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F930);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED98640(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)a1)
  {
    sub_20E9AE494(a1, *(void ***)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20ED98680(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD **v21;
  _QWORD *v22[2];
  void *v23[2];
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  char v27;
  _QWORD **v28;
  _QWORD *v29;
  _QWORD *v30;

  v4 = (_QWORD *)(a2 + 64);
  v5 = *(_QWORD ***)(a2 + 64);
  v6 = (_QWORD *)(a2 + 72);
  if (v5 == (_QWORD **)(a2 + 72))
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *(_QWORD **)(a2 + 64);
    do
    {
      v9 = (_QWORD *)v8[1];
      v10 = v8;
      if (v9)
      {
        do
        {
          v11 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v10[2];
          v12 = *v11 == (_QWORD)v10;
          v10 = v11;
        }
        while (!v12);
      }
      v7 = (v7 + *((_DWORD *)v8 + 14));
      v8 = v11;
    }
    while (v11 != v6);
  }
  if (v7 == (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3)
  {
    v13 = *(_QWORD **)(a2 + 72);
    v14 = *(_QWORD **)(a2 + 80);
    v28 = *(_QWORD ***)(a2 + 64);
    v29 = v13;
    v30 = v14;
    if (v14)
    {
      v15 = 0;
      v13[2] = &v29;
      *v4 = v6;
      *v6 = 0;
      v6[1] = 0;
      if (!*(_BYTE *)(a2 + 88))
      {
LABEL_15:
        v21 = v5;
        v22[0] = v13;
        v22[1] = v14;
        if (v14)
        {
          v13[2] = v22;
          v28 = &v29;
          v29 = 0;
          v30 = 0;
        }
        else
        {
          v21 = v22;
        }
        sub_20FD87658((unint64_t *)v23, &v21);
        *(_OWORD *)__p = *(_OWORD *)v23;
        v26 = v24;
        v23[1] = 0;
        v24 = 0;
        v23[0] = 0;
        v27 = 1;
        v16 = *(double *)(a2 + 96) + *(double *)(a2 + 104);
        v18 = 0;
        v19 = 0;
        v17 = 0;
        v20 = 0;
        sub_20ED98A64(a1, (uint64_t)__p, (uint64_t *)&v16);
        if (v27 && __p[0])
        {
          sub_20E9AE494((uint64_t)__p, (void **)__p[0]);
          operator delete(__p[0]);
        }
        if (v23[0])
        {
          sub_20E9AE494((uint64_t)v23, (void **)v23[0]);
          operator delete(v23[0]);
        }
        sub_20ED989D0((uint64_t)&v21, v22[0]);
        sub_20ED989D0((uint64_t)&v28, v29);
        return;
      }
    }
    else
    {
      v28 = &v29;
      v5 = &v29;
      v15 = v13;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_15;
    }
    sub_20ED989D0((uint64_t)v4, v15);
    *(_BYTE *)(a2 + 88) = 0;
    v5 = v28;
    v13 = v29;
    v14 = v30;
    goto LABEL_15;
  }
  LOBYTE(__p[0]) = 0;
  v27 = 0;
  v16 = *(double *)(a2 + 96) + *(double *)(a2 + 104);
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = 1;
  sub_20ED98A64(a1, (uint64_t)__p, (uint64_t *)&v16);
  if (v27 && __p[0])
  {
    sub_20E9AE494((uint64_t)__p, (void **)__p[0]);
    operator delete(__p[0]);
  }
}

void sub_20ED988B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD *);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, void **);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  sub_20ED98640((uint64_t)va2);
  sub_20ED6737C((void ***)va1);
  sub_20ED989D0((uint64_t)va, v10);
  sub_20ED989D0(v6 - 56, *(_QWORD **)(v6 - 48));
  _Unwind_Resume(a1);
}

void sub_20ED988F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20ED98640((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED98908(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24C9E9338;
  if (*(_BYTE *)(a1 + 88))
    sub_20ED989D0(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_20ED98B8C(a1 + 32, *(_QWORD **)(a1 + 40));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20ED98964(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24C9E9338;
  if (*(_BYTE *)(a1 + 88))
    sub_20ED989D0(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_20ED98B8C(a1 + 32, *(_QWORD **)(a1 + 40));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20ED989D0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20ED989D0(a1, *a2);
    sub_20ED989D0(a1, a2[1]);
    sub_20ED98A1C((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void sub_20ED98A1C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20ED98A1C(a1, *a2);
    sub_20ED98A1C(a1, a2[1]);
    sub_20E9AE6A0((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t sub_20ED98A64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_20E9BFAE0(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *(_BYTE *)(a1 + 24) = 1;
  }
  v5 = *a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v7 = (_BYTE *)a3[1];
  v6 = (_BYTE *)a3[2];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_20E92CED8();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 56) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 48) = v10;
  }
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a3 + 8);
  return a1;
}

void sub_20ED98B3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(_QWORD *)v1)
    {
      sub_20E9AE494(v1, *(void ***)v1);
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED98B68(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_20ED98640(v1);
  _Unwind_Resume(a1);
}

void sub_20ED98B8C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20ED98B8C(a1, *a2);
    sub_20ED98B8C(a1, a2[1]);
    sub_20E86872C((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void sub_20ED98BD8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20ED98F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED98F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED98FA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED98FC4(uint64_t a1, unsigned int **a2, uint64_t *a3)
{
  unsigned int *v6;
  unsigned int *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t **v11;
  unsigned int *v12;
  unsigned int *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t **v21;
  uint64_t *v22;
  unsigned int v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  char *v32;
  _QWORD *v33;
  uint64_t *v34;
  std::logic_error *exception;
  _QWORD **v37;
  unsigned int *v38;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24C9E9378;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *a2;
  v6 = a2[1];
  v8 = (char *)v6 - (char *)*a2;
  if (v6 != *a2)
  {
    if (v8 < 0)
      sub_20E92CED8();
    v9 = (char *)operator new((char *)v6 - (char *)*a2);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 24) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 16) = v10;
  }
  *(_QWORD *)(a1 + 40) = 0;
  v11 = (uint64_t **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v37 = (_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  v13 = *a2;
  v12 = a2[1];
  v38 = v12;
  while (v13 != v12)
  {
    v18 = *a3;
    v17 = a3[1];
    if (*a3 != v17)
    {
      while (*(_DWORD *)v18 != *v13)
      {
        v18 += 1088;
        if (v18 == v17)
          goto LABEL_39;
      }
    }
    if (v18 == v17)
    {
LABEL_39:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Requested camera id not found.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    if (v13[1]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/include_private/PrimaryStreamFeatureBundler.cpp", 35, (uint64_t)"stream.stream_id == 0", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)(v18 + 4) != 1&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MultiCameraFeatureDetectionNodeGroup/src/include_private/PrimaryStreamFeatureBundler.cpp", 36, (uint64_t)"camera_param.camera_mode == calibration::CameraMode::Mono", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v19 = *v11;
    v20 = *v13;
    v21 = (uint64_t **)(a1 + 40);
    v22 = (uint64_t *)(a1 + 40);
    if (*v11)
    {
      while (1)
      {
        while (1)
        {
          v22 = v19;
          v23 = *((_DWORD *)v19 + 8);
          if (v20 >= v23)
            break;
          v19 = (uint64_t *)*v22;
          v21 = (uint64_t **)v22;
          if (!*v22)
            goto LABEL_24;
        }
        if (v23 >= v20)
          break;
        v19 = (uint64_t *)v22[1];
        if (!v19)
        {
          v21 = (uint64_t **)(v22 + 1);
          goto LABEL_24;
        }
      }
      v24 = (_QWORD **)v22;
      v28 = v22 + 6;
      v27 = (_QWORD *)v22[6];
      v29 = v13[1];
      if (v27)
        goto LABEL_31;
LABEL_29:
      v30 = v28;
LABEL_35:
      v32 = (char *)operator new(0x70uLL);
      *((_DWORD *)v32 + 8) = v29;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *((_QWORD *)v32 + 13) = 0;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = v30;
      *v28 = v32;
      v33 = (_QWORD *)*v24[5];
      v34 = (uint64_t *)v32;
      if (v33)
      {
        v24[5] = v33;
        v34 = (uint64_t *)*v28;
      }
      sub_20E868578(v24[6], v34);
      v24[7] = (_QWORD *)((char *)v24[7] + 1);
      goto LABEL_6;
    }
LABEL_24:
    v24 = (_QWORD **)operator new(0x40uLL);
    *((_DWORD *)v24 + 8) = v20;
    v24[7] = 0;
    v24[6] = 0;
    v24[5] = v24 + 6;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = v22;
    *v21 = (uint64_t *)v24;
    v25 = (_QWORD *)**v37;
    v26 = (uint64_t *)v24;
    if (v25)
    {
      *v37 = v25;
      v26 = *v21;
    }
    sub_20E868578(*(uint64_t **)(a1 + 40), v26);
    ++*(_QWORD *)(a1 + 48);
    v28 = v24 + 6;
    v27 = v24[6];
    v29 = v13[1];
    if (!v27)
      goto LABEL_29;
    while (1)
    {
LABEL_31:
      while (1)
      {
        v30 = v27;
        v31 = *((_DWORD *)v27 + 8);
        if (v29 >= v31)
          break;
        v27 = (_QWORD *)*v30;
        v28 = v30;
        if (!*v30)
          goto LABEL_35;
      }
      if (v31 >= v29)
        break;
      v27 = (_QWORD *)v30[1];
      if (!v27)
      {
        v28 = v30 + 1;
        goto LABEL_35;
      }
    }
    v32 = (char *)v30;
LABEL_6:
    *(_OWORD *)(v32 + 40) = *(_OWORD *)(v18 + 120);
    v14 = *(_OWORD *)(v18 + 136);
    v15 = *(_OWORD *)(v18 + 152);
    v16 = *(_OWORD *)(v18 + 168);
    *((_QWORD *)v32 + 13) = *(_QWORD *)(v18 + 184);
    *(_OWORD *)(v32 + 88) = v16;
    *(_OWORD *)(v32 + 72) = v15;
    *(_OWORD *)(v32 + 56) = v14;
    v13 += 2;
    v12 = v38;
  }
  return a1;
}

void sub_20ED9933C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void **v12;
  void *v14;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ED99394(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  _QWORD *v7;
  int v8;
  char *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t *v14;
  _QWORD *v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;

  v21 = *(_OWORD *)(a2 + 8);
  v19 = 0;
  v20 = 0;
  v18 = (uint64_t *)&v19;
  v6 = *(_DWORD *)a2;
  v7 = operator new(0x40uLL);
  v7[6] = 0;
  *((_DWORD *)v7 + 8) = v6;
  v7[7] = 0;
  v7[5] = v7 + 6;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = &v19;
  v18 = v7;
  v19 = v7;
  *((_BYTE *)v7 + 24) = 1;
  v20 = 1;
  v8 = *(_DWORD *)(a2 + 4);
  v9 = (char *)operator new(0x2F0uLL);
  *((_DWORD *)v9 + 8) = v8;
  bzero(v9 + 40, 0x2C8uLL);
  *((_QWORD *)v9 + 6) = 0xBFF0000000000000;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 193) = 0u;
  *((_OWORD *)v9 + 15) = 0u;
  *((_OWORD *)v9 + 16) = 0u;
  v9[272] = 0;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v7 + 6;
  v7[5] = v9;
  v7[6] = v9;
  sub_20E868578((uint64_t *)v9, (uint64_t *)v9);
  ++v7[7];
  sub_20E9BF3F4((uint64_t)(v9 + 40), a2);
  v10 = *(unsigned int **)(a1 + 8);
  v11 = *(unsigned int **)(a1 + 16);
  if (v10 != v11)
  {
    v12 = a1 + 32;
    do
    {
      if (*v10 != *(_DWORD *)a2 || v10[1] != *(_DWORD *)(a2 + 4))
        sub_20ED94748(v10, &v21, &v18, v12);
      v10 += 2;
    }
    while (v10 != v11);
  }
  v14 = v18;
  v15[0] = v19;
  v15[1] = (_QWORD *)v20;
  if (v20)
  {
    v19[2] = v15;
    v18 = (uint64_t *)&v19;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v14 = (uint64_t *)v15;
  }
  sub_20FD87658((unint64_t *)&v16, &v14);
  *(_OWORD *)a3 = v16;
  *(_QWORD *)(a3 + 16) = v17;
  v17 = 0;
  v16 = 0uLL;
  *(_BYTE *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  sub_20ED989D0((uint64_t)&v14, v15[0]);
  sub_20ED989D0((uint64_t)&v18, v19);
}

void sub_20ED99588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  sub_20ED989D0((uint64_t)&a10, a11);
  sub_20ED989D0((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_20ED995AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  sub_20ED989D0((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_20ED995C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  sub_20ED989D0((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED995DC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24C9E9378;
  sub_20ED98B8C(a1 + 32, *(_QWORD **)(a1 + 40));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20ED99620(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24C9E9378;
  sub_20ED98B8C(a1 + 32, *(_QWORD **)(a1 + 40));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

void **sub_20ED99674(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 6);
        if (v5)
        {
          *((_QWORD *)v3 - 5) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 9);
        if (v6)
        {
          *((_QWORD *)v3 - 8) = v6;
          operator delete(v6);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20ED996F4(_QWORD *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v11;
  float32x2_t *v12;
  uint64_t v13;
  int32x2_t v14;
  int32x2_t v15;
  unint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  unint64_t v19;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  float *v26;
  float v27;
  float *v28;
  int32x2_t v29;
  int32x2_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  float *v36;
  float *v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  float32x2_t *v47;
  float32x2_t *v48;
  float32x2_t v49;
  uint64_t v50;
  uint64x2_t v51;
  float64x2_t v52;
  unint64_t *v53;
  uint64_t v54;
  float32x4_t **v55;
  float32x4_t **v56;
  unint64_t v57;
  unint64_t v58;
  float32x4_t *v59;
  float32x4_t **v60;
  float32x4_t *v61;
  int64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float v68;
  float v69;
  unint64_t v70;
  float32x4_t *v71;
  unint64_t v72;
  uint64_t v73;
  float *v74;
  float *v75;
  float *v76;
  float *v77;
  float v78;
  float v79;
  float v80;
  char *v81;
  float *v82;
  float32x4_t *v83;
  const float *v84;
  float v85;
  int32x2_t v86;
  unint64_t v87;
  float32x4_t *v88;
  float32x4_t *v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v93;
  BOOL v95;
  BOOL v97;
  BOOL v99;
  BOOL v100;
  unint64_t v101;
  float32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;
  float32x4_t *v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int64x2_t v110;
  int64x2_t v111;
  float32x4_t *v112;
  unint64_t v113;
  int64x2_t v114;
  int64x2_t v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float v118;
  int32x2_t v119;
  unint64_t v120;
  float32x4_t v121;
  int64x2_t v122;
  int64x2_t v123;
  float32x4_t *v124;
  unint64_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  unint64_t v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  BOOL v145;
  uint64_t v146;
  char *v147;
  const float *i;
  float32x4_t *v149;
  __int32 v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  unint64_t v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  BOOL v162;
  BOOL v163;
  BOOL v164;
  BOOL v165;
  float32x4_t v166;
  float32x4_t *v167;
  char *v168;
  uint64_t v169;
  __int128 *v170;
  __int128 v171;
  int64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  unint64_t v177;
  BOOL v178;
  char *v179;
  const float *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  BOOL v192;
  uint64_t v193;
  char *v194;
  char *v195;
  const float *v196;
  char *v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  BOOL v206;
  BOOL v207;
  BOOL v208;
  BOOL v209;
  BOOL v210;
  BOOL v211;
  BOOL v212;
  BOOL v213;
  float32x4_t v214;
  float32x4_t *v215;
  char *v216;
  uint64_t v217;
  __int128 *v218;
  __int128 v219;
  int64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  unint64_t v225;
  BOOL v226;
  char *v227;
  const float *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  unint64_t v237;
  unint64_t v238;
  BOOL v240;
  uint64_t v241;
  char *v242;
  char *v243;
  const float *j;
  char *v245;
  int v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  BOOL v254;
  BOOL v255;
  BOOL v256;
  BOOL v257;
  BOOL v258;
  BOOL v259;
  BOOL v260;
  BOOL v261;
  float32x4_t v262;
  float32x4_t *v263;
  char *v264;
  uint64_t v265;
  __int128 *v266;
  __int128 v267;
  float32x4_t *v268;
  uint64_t v269;
  size_t v270;
  int8x16_t *v271;
  unint64_t v272;
  char *v273;
  char *v274;
  char *v275;
  unint64_t v276;
  uint64_t v277;
  BOOL v278;
  BOOL v279;
  BOOL v280;
  BOOL v281;
  unint64_t v282;
  unint64_t v283;
  BOOL v285;
  BOOL v287;
  BOOL v289;
  unint64_t v291;
  float32x4_t *v292;
  float32x4_t *v293;
  float32x4_t *v294;
  float32x4_t *v295;
  float *v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  unint64_t v306;
  uint64_t v307;
  float *v308;
  float *v309;
  float *v310;
  float *v311;
  float *v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  int8x16_t *v321;
  int8x16_t *v322;
  void *v323;
  float32x4_t *v324;
  float32x4_t *v325;
  int8x16_t *v326;
  int8x16_t *v327;
  int8x16_t *v328;
  float32x4_t v329;
  float32x4_t v330;
  int8x16_t v331;
  float32x2_t v332;
  float32x2_t v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  float32x4_t *v339;
  unint64_t v340;
  float32x4_t *v341;
  float32x4_t v342;
  uint64_t v343;
  uint64_t v344;
  float *v345;
  _OWORD *v346;
  float32x4_t *v347;
  _OWORD *f32;
  unint64_t v349;
  _OWORD *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  float32x4_t *v356;
  uint64_t v357;
  uint64_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float *v361;
  const float *v362;
  unint64_t v363;
  const float *v364;
  float *v365;
  uint64_t v366;
  float *v367;
  const float *v368;
  float32x4_t v369;
  unint64_t v370;
  const float *v371;
  float *v372;
  float32x4_t v373;
  float32x4_t v374;
  float *v375;
  const float *v376;
  unint64_t v377;
  const float *v378;
  float *v379;
  float32x2_t v380;
  float32x4_t v381;
  float *v382;
  uint64_t *v383;
  uint64_t v384;
  _QWORD *v385;
  __int32 *v386;
  uint64_t v387;
  float32x4_t *v388;
  float32x4_t *v389;
  unint64_t v390;
  char *v391;
  void *v392[2];
  float32x2_t *v393;
  void *__p;
  char *v395;
  uint64_t v396;
  void *v397;
  void *v398;
  uint64_t v399;
  void *v400;
  char *v401;
  uint64_t v402;
  void *v403;
  void *v404;
  uint64_t v405;
  char *v406;
  const float *v407;
  uint64_t v408;
  char *v409;
  const float *v410;
  uint64_t v411;
  float32x4_t *v412;
  float32x4_t *v413;
  __int8 *v414;
  float32x4_t *v415;
  const float *v416;
  __int8 *v417;
  char *v418;
  char *v419;
  char *v420;
  float32x4x2_t v421;
  float32x4x2_t v422;
  float32x4x2_t v423;
  float32x4x2_t v424;
  float32x4x2_t v425;
  float32x4x2_t v426;
  float32x4x2_t v427;
  float32x4x2_t v428;
  float32x4x2_t v429;
  float32x4x4_t v430;
  float32x4x4_t v431;
  float32x4x4_t v432;

  v6 = a1[19];
  v5 = a1[20];
  v7 = v5 - v6;
  if (v5 == v6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  if ((v7 & 0x8000000000000000) != 0)
    sub_20E867F44();
  v11 = v7 >> 1;
  v12 = (float32x2_t *)operator new(v7 >> 1);
  v13 = (uint64_t)v7 >> 4;
  v393 = v12;
  bzero(v12, v7 >> 1);
  v16 = a1[4];
  v384 = (uint64_t)v7 >> 4;
  v385 = a1;
  v383 = a4;
  v390 = a3;
  if (v16 == a1[5])
  {
    v39 = 0;
    v40 = 0;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      if (*(_QWORD *)(v6 + v39))
      {
        if (*(_QWORD *)(v6 + v39 + 8))
          goto LABEL_26;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/AnchorBoxUtils.cpp", 252, (uint64_t)"config_.feature_map_shape_list[i][0] != 0", 41, (uint64_t)&unk_21025FC2E, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_428;
        }
        v6 = v385[19];
        if (*(_QWORD *)(v6 + v39 + 8))
          goto LABEL_26;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/AnchorBoxUtils.cpp", 253, (uint64_t)"config_.feature_map_shape_list[i][1] != 0", 41, (uint64_t)&unk_21025FC2E, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_428:
        abort();
      }
      v6 = v385[19];
LABEL_26:
      v12[v40] = vdiv_f32(_D8, vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(v6 + 16 * v40))));
      ++v40;
      v39 += 16;
      if (v384 == v40)
        goto LABEL_18;
    }
  }
  *(float *)v14.i32 = (float)a2;
  *(float *)v15.i32 = (float)a3;
  if (v7 < 0x100
    || ((v17 = v13 - 1, v18 = &v12[v17], v19 = (unint64_t)&v12[v17] + 4, v18 >= v12)
      ? (_CF = v19 >= (unint64_t)v12 + 4)
      : (_CF = 0),
        _CF ? (_ZF = (unint64_t)(v13 - 1) >> 61 == 0) : (_ZF = 0),
        !_ZF || (unint64_t)v12 < v16 + 8 * v13 && v16 < (unint64_t)&v12[v13]))
  {
    v22 = 0;
LABEL_16:
    v23 = v384 - v22;
    v24 = (8 * v22) | 4;
    v25 = (float *)((char *)v12 + v24);
    v26 = (float *)(v16 + v24);
    do
    {
      *(v25 - 1) = *(v26 - 1) / *(float *)v14.i32;
      v27 = *v26;
      v26 += 2;
      *v25 = v27 / *(float *)v15.i32;
      v25 += 2;
      --v23;
    }
    while (v23);
    goto LABEL_18;
  }
  v373 = (float32x4_t)vdupq_lane_s32(v14, 0);
  v22 = v13 & 0xFFFFFFFFFFFFFFF8;
  v374 = (float32x4_t)vdupq_lane_s32(v15, 0);
  v375 = (float *)&v12[4];
  v376 = (const float *)(v16 + 32);
  v377 = v13 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v378 = v376 - 8;
    v424 = vld2q_f32(v378);
    v427 = vld2q_f32(v376);
    v429.val[0] = vdivq_f32(v424.val[0], v373);
    v429.val[1] = vdivq_f32(v424.val[1], v374);
    v379 = v375 - 8;
    vst2q_f32(v379, v429);
    v424.val[0] = vdivq_f32(v427.val[0], v373);
    v424.val[1] = vdivq_f32(v427.val[1], v374);
    vst2q_f32(v375, v424);
    v375 += 16;
    v376 += 16;
    v377 -= 8;
  }
  while (v377);
  if (v13 != v22)
    goto LABEL_16;
LABEL_18:
  v28 = (float *)operator new(v11);
  bzero(v28, v11);
  v31 = v385;
  v32 = v385[13];
  if (v32 != v385[14])
  {
    *(float *)v29.i32 = (float)a2;
    *(float *)v30.i32 = (float)v390;
    if (v7 >= 0x100)
    {
      v33 = 0;
      v358 = 2 * (v384 - 1);
      if (&v28[v358] < v28 || &v28[v358 + 1] < v28 + 1 || (unint64_t)(v384 - 1) >> 61)
        goto LABEL_21;
      if ((unint64_t)v28 >= v32 + 8 * v384 || v32 >= (unint64_t)&v28[2 * v384])
      {
        v359 = (float32x4_t)vdupq_lane_s32(v29, 0);
        v33 = v384 & 0xFFFFFFFFFFFFFFF8;
        v360 = (float32x4_t)vdupq_lane_s32(v30, 0);
        v361 = v28 + 8;
        v362 = (const float *)(v32 + 32);
        v363 = v384 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v364 = v362 - 8;
          v423 = vld2q_f32(v364);
          v426 = vld2q_f32(v362);
          v428.val[0] = vdivq_f32(v423.val[0], v359);
          v428.val[1] = vdivq_f32(v423.val[1], v360);
          v365 = v361 - 8;
          vst2q_f32(v365, v428);
          v423.val[0] = vdivq_f32(v426.val[0], v359);
          v423.val[1] = vdivq_f32(v426.val[1], v360);
          vst2q_f32(v361, v423);
          v361 += 16;
          v362 += 16;
          v363 -= 8;
        }
        while (v363);
        if (v384 == v33)
          goto LABEL_38;
        goto LABEL_21;
      }
    }
    v33 = 0;
LABEL_21:
    v34 = v384 - v33;
    v35 = (8 * v33) | 4;
    v36 = (float *)((char *)v28 + v35);
    v37 = (float *)(v32 + v35);
    do
    {
      *(v36 - 1) = *(v37 - 1) / *(float *)v29.i32;
      v38 = *v37;
      v37 += 2;
      *v36 = v38 / *(float *)v30.i32;
      v36 += 2;
      --v34;
    }
    while (v34);
    goto LABEL_38;
  }
  if (v7 >= 0xC0)
  {
    v44 = 0;
    v366 = 2 * (v384 - 1);
    if (&v28[v366] >= v28 && &v28[v366 + 1] >= v28 + 1 && !((unint64_t)(v384 - 1) >> 61))
    {
      v44 = v384 & 0xFFFFFFFFFFFFFFF8;
      v367 = v28 + 8;
      v368 = (const float *)&v12[4];
      v369.i64[0] = 0x3F0000003F000000;
      v369.i64[1] = 0x3F0000003F000000;
      v370 = v384 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v371 = v368 - 8;
        v421 = vld2q_f32(v371);
        v422 = vld2q_f32(v368);
        v425.val[0] = vmulq_f32(v421.val[0], v369);
        v425.val[1] = vmulq_f32(v421.val[1], v369);
        v372 = v367 - 8;
        vst2q_f32(v372, v425);
        v421.val[0] = vmulq_f32(v422.val[0], v369);
        v421.val[1] = vmulq_f32(v422.val[1], v369);
        vst2q_f32(v367, v421);
        v367 += 16;
        v368 += 16;
        v370 -= 8;
      }
      while (v370);
      if (v384 == v44)
        goto LABEL_38;
    }
  }
  else
  {
    v44 = 0;
  }
  v45 = v384 - v44;
  v46 = v44;
  v47 = (float32x2_t *)&v28[2 * v44];
  v48 = &v12[v46];
  do
  {
    v49 = *v48++;
    *v47++ = vmul_f32(v49, (float32x2_t)0x3F0000003F000000);
    --v45;
  }
  while (v45);
LABEL_38:
  v382 = v28;
  v50 = 0;
  v51.i64[0] = a2;
  v51.i64[1] = v390;
  v52 = vcvtq_f64_u64(v51);
  v380 = vcvt_f32_f64(v52);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v381 = vcvt_hight_f32_f64((int32x2_t)v380, v52);
  do
  {
    v53 = (unint64_t *)(v31[19] + 16 * v50);
    v387 = v50;
    v54 = 24 * v50;
    v55 = (float32x4_t **)(v31[7] + v54);
    v56 = (float32x4_t **)(v31[10] + v54);
    v57 = *v53;
    v58 = v53[1];
    v60 = v55 + 1;
    v59 = v55[1];
    v61 = *v55;
    v62 = (char *)v59 - (char *)*v55;
    if (v62 != (char *)v56[1] - (char *)*v56)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/AnchorBoxUtils.cpp", 193, (uint64_t)"scales.size() == aspect_ratios.size()", 37, (uint64_t)&unk_21025FC2E, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v59 = *v60;
      v61 = *v55;
      v62 = (char *)*v60 - (char *)*v55;
    }
    v418 = 0;
    v419 = 0;
    v420 = 0;
    if (v59 != v61)
    {
      if (v62 < 0)
        sub_20E867F44();
      v63 = (char *)operator new(v62);
      v64 = v62 >> 2;
      v418 = v63;
      v420 = &v63[4 * (v62 >> 2)];
      bzero(v63, v62);
      v391 = v63;
      v65 = &v63[v62];
      v419 = v65;
      v66 = (float32x4_t *)operator new(v62);
      bzero(v66, v62);
      v67 = *v56;
      v68 = *((float *)v385 + 6);
      v69 = *((float *)v385 + 7);
      if ((unint64_t)v62 >= 0x30)
      {
        v70 = 0;
        v88 = (float32x4_t *)&v391[v62 & 0xFFFFFFFFFFFFFFFCLL];
        v89 = (float32x4_t *)((char *)v66 + (v62 & 0xFFFFFFFFFFFFFFFCLL));
        v90 = (unint64_t)v67 + (v62 & 0xFFFFFFFFFFFFFFFCLL);
        v91 = (unint64_t)v61 + (v62 & 0xFFFFFFFFFFFFFFFCLL);
        v93 = (unint64_t)v391 < v90 && v67 < v88;
        v95 = (unint64_t)v391 < v91 && v61 < v88;
        v97 = (unint64_t)v66 < v90 && v67 < v89;
        v99 = (unint64_t)v66 < v91 && v61 < v89;
        v100 = v66 >= v88 || v391 >= (char *)v89;
        v71 = v66;
        if (v100 && !v93 && !v95 && !v97 && !v99)
        {
          v70 = v64 & 0xFFFFFFFFFFFFFFFCLL;
          v101 = v64 & 0xFFFFFFFFFFFFFFFCLL;
          v102 = v66;
          v103 = (float32x4_t *)v391;
          v104 = v61;
          v105 = v67;
          do
          {
            v106 = *v105++;
            v107 = vsqrtq_f32(v106);
            v108 = *v104++;
            *v103++ = vmulq_n_f32(vdivq_f32(v108, v107), v68);
            *v102++ = vmulq_n_f32(vmulq_f32(v107, v108), v69);
            v101 -= 4;
          }
          while (v101);
          if (v64 == v70)
            goto LABEL_49;
        }
      }
      else
      {
        v70 = 0;
        v71 = v66;
      }
      v72 = v64 - v70;
      v73 = v70;
      v74 = &v71->f32[v70];
      v75 = (float *)&v391[v73 * 4];
      v76 = &v61->f32[v73];
      v77 = &v67->f32[v73];
      do
      {
        v78 = *v77++;
        v79 = sqrtf(v78);
        *v75++ = v68 * (float)(*v76 / v79);
        v80 = *v76++;
        *v74++ = v69 * (float)(v79 * v80);
        --v72;
      }
      while (v72);
LABEL_49:
      v81 = (char *)v71 + v62;
      goto LABEL_51;
    }
    v81 = 0;
    v71 = 0;
    v391 = 0;
    v65 = 0;
LABEL_51:
    v82 = (float *)&v393[v387];
    v386 = (__int32 *)&v382[2 * v387];
    v415 = 0;
    v416 = 0;
    v417 = 0;
    v388 = v71;
    if (v57)
    {
      if (v57 >> 62)
        sub_20E867F44();
      v83 = (float32x4_t *)operator new(4 * v57);
      v415 = v83;
      v417 = &v83->i8[4 * v57];
      bzero(v83, 4 * v57);
      v84 = &v83->f32[v57];
      v416 = v84;
      v85 = *v82;
      v86.i32[0] = *v386;
      if (v57 < 8)
      {
        v87 = 0;
        goto LABEL_96;
      }
      v87 = v57 & 0xFFFFFFFFFFFFFFF8;
      v109 = (float32x4_t)vdupq_lane_s32(v86, 0);
      v110 = (int64x2_t)xmmword_2103779D0;
      v111 = (int64x2_t)xmmword_2102E3FA0;
      v112 = v83 + 1;
      v113 = v57 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v114 = vdupq_n_s64(4uLL);
        v112[-1] = vaddq_f32(v109, vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v111)), vcvtq_f64_u64((uint64x2_t)v110)), v85));
        *v112 = vaddq_f32(v109, vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v111, v114))), vcvtq_f64_u64((uint64x2_t)vaddq_s64(v110, v114))), v85));
        v115 = vdupq_n_s64(8uLL);
        v110 = vaddq_s64(v110, v115);
        v111 = vaddq_s64(v111, v115);
        v112 += 2;
        v113 -= 8;
      }
      while (v113);
      while (v57 != v87)
      {
LABEL_96:
        v83->f32[v87] = *(float *)v86.i32 + (float)(v85 * (float)v87);
        ++v87;
      }
    }
    else
    {
      v83 = 0;
      v84 = 0;
    }
    v412 = 0;
    v413 = 0;
    v414 = 0;
    v389 = v83;
    if (v58)
    {
      if (v58 >> 62)
        sub_20E867F44();
      v116 = (float32x4_t *)operator new(4 * v58);
      v412 = v116;
      v414 = &v116->i8[4 * v58];
      bzero(v116, 4 * v58);
      v117 = (float32x4_t *)((char *)v116 + 4 * v58);
      v413 = v117;
      v118 = v82[1];
      v119.i32[0] = v386[1];
      if (v58 < 8)
      {
        v120 = 0;
        goto LABEL_106;
      }
      v120 = v58 & 0xFFFFFFFFFFFFFFF8;
      v121 = (float32x4_t)vdupq_lane_s32(v119, 0);
      v122 = (int64x2_t)xmmword_2103779D0;
      v123 = (int64x2_t)xmmword_2102E3FA0;
      v124 = v116 + 1;
      v125 = v58 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v126 = vdupq_n_s64(4uLL);
        v124[-1] = vaddq_f32(v121, vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v123)), vcvtq_f64_u64((uint64x2_t)v122)), v118));
        *v124 = vaddq_f32(v121, vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v123, v126))), vcvtq_f64_u64((uint64x2_t)vaddq_s64(v122, v126))), v118));
        v127 = vdupq_n_s64(8uLL);
        v122 = vaddq_s64(v122, v127);
        v123 = vaddq_s64(v123, v127);
        v124 += 2;
        v125 -= 8;
      }
      while (v125);
      while (v58 != v120)
      {
LABEL_106:
        v116->f32[v120] = *(float *)v119.i32 + (float)(v118 * (float)v120);
        ++v120;
      }
    }
    else
    {
      v116 = 0;
      v117 = 0;
    }
    v409 = 0;
    v410 = 0;
    v411 = 0;
    v406 = 0;
    v407 = 0;
    v408 = 0;
    v128 = (char *)v117 - (char *)v116;
    v129 = ((char *)v117 - (char *)v116) >> 2;
    v130 = ((char *)v84 - (char *)v83) >> 2;
    v131 = v129 * v130;
    if (v129 * v130)
    {
      sub_20E9F5694((uint64_t)&v409, v129 * v130);
      v132 = v406;
      v133 = ((char *)v407 - v406) >> 2;
      v134 = v131 >= v133;
      if (v131 > v133)
      {
        sub_20E9F5694((uint64_t)&v406, v131 - v133);
        v132 = v406;
        goto LABEL_114;
      }
    }
    else
    {
      v132 = 0;
      v134 = 1;
    }
    if (!v134)
      v407 = (const float *)&v132[4 * v131];
LABEL_114:
    if (v83 != (float32x4_t *)v84 && v116 != v117)
    {
      v135 = 0;
      v136 = 0;
      v137 = v409;
      v138 = v128 - 4;
      v139 = (v128 - 4) & 0xFFFFFFFFFFFFFFFCLL;
      v140 = &v409[v139 + 4];
      v141 = (unint64_t)&v132[v139 + 4];
      v142 = (unint64_t)v116->u64 + v139 + 4;
      v143 = ((unint64_t)(v128 - 4) >> 2) + 1;
      v145 = (unint64_t)v409 < v141 && v132 < v140;
      v146 = v143 & 0x7FFFFFFFFFFFFFF8;
      v147 = v409 + 16;
      for (i = (const float *)v83; i != v84; ++i)
      {
        if (v138 < 0x4C)
          goto LABEL_125;
        v152 = (unint64_t)v389->u64 + 4 * v135 + 4;
        v153 = 4 * v136;
        v154 = &v137[4 * v136];
        v155 = &v140[4 * v136];
        v156 = &v132[4 * v136];
        v157 = v141 + 4 * v136;
        v158 = (unint64_t)v154 >= v142 || v116 >= (float32x4_t *)v155;
        v159 = !v158 || v145;
        v160 = (unint64_t)v154 >= v152 || i >= (const float *)v155;
        v161 = !v160;
        v162 = (unint64_t)v156 >= v142 || (unint64_t)v116 >= v157;
        v163 = !v162;
        v164 = (unint64_t)v156 >= v152 || (unint64_t)i >= v157;
        v165 = !v164;
        if (v159 || v161 || v163 || v165)
        {
LABEL_125:
          v149 = v116;
        }
        else
        {
          v136 += v146;
          v166 = vld1q_dup_f32(i);
          v167 = (float32x4_t *)&v132[v153 + 16];
          v168 = &v147[v153];
          v169 = v143 & 0x7FFFFFFFFFFFFFF8;
          v170 = (__int128 *)&v116[1];
          do
          {
            v171 = *v170;
            *((_OWORD *)v168 - 1) = *(v170 - 1);
            *(_OWORD *)v168 = v171;
            v167[-1] = v166;
            *v167 = v166;
            v167 += 2;
            v170 += 2;
            v168 += 32;
            v169 -= 8;
          }
          while (v169);
          v149 = (float32x4_t *)((char *)v116 + 4 * (v143 & 0x7FFFFFFFFFFFFFF8));
          if (v143 == v146)
            goto LABEL_123;
        }
        do
        {
          v150 = v149->i32[0];
          v149 = (float32x4_t *)((char *)v149 + 4);
          v151 = 4 * v136;
          *(_DWORD *)&v137[v151] = v150;
          *(float *)&v132[v151] = *i;
          ++v136;
        }
        while (v149 != v117);
LABEL_123:
        ++v135;
      }
    }
    v403 = 0;
    v404 = 0;
    v405 = 0;
    v400 = 0;
    v401 = 0;
    v402 = 0;
    v172 = v65 - v391;
    v173 = (v65 - v391) >> 2;
    v174 = ((char *)v407 - v132) >> 2;
    v175 = v174 * v173;
    if (v174 * v173)
    {
      sub_20E9F5694((uint64_t)&v403, v174 * v173);
      v176 = (char *)v400;
      v177 = (v401 - (_BYTE *)v400) >> 2;
      v178 = v175 >= v177;
      if (v175 > v177)
      {
        sub_20E9F5694((uint64_t)&v400, v175 - v177);
        goto LABEL_166;
      }
    }
    else
    {
      v176 = 0;
      v178 = 1;
    }
    if (!v178)
      v401 = &v176[4 * v175];
LABEL_166:
    v179 = v406;
    v180 = v407;
    if (v406 != (char *)v407 && v391 != v65)
    {
      v181 = 0;
      v182 = 0;
      v183 = (char *)v403;
      v184 = (char *)v400;
      v185 = v172 - 4;
      v186 = (v172 - 4) & 0xFFFFFFFFFFFFFFFCLL;
      v187 = (char *)v403 + v186 + 4;
      v188 = (char *)v400 + v186 + 4;
      v189 = (unint64_t)&v391[v186 + 4];
      v190 = ((unint64_t)(v172 - 4) >> 2) + 1;
      v192 = v403 < v188 && v400 < v187;
      v193 = v190 & 0x7FFFFFFFFFFFFFF8;
      v194 = (char *)v400 + 16;
      v195 = (char *)v403 + 16;
      v196 = (const float *)v406;
      while (1)
      {
        if (v185 < 0x4C)
          goto LABEL_177;
        v200 = (unint64_t)&v179[4 * v181 + 4];
        v201 = 4 * v182;
        v202 = &v183[4 * v182];
        v203 = &v187[4 * v182];
        v204 = &v184[4 * v182];
        v205 = &v188[4 * v182];
        v206 = (unint64_t)v202 >= v189 || v391 >= v203;
        v207 = !v206 || v192;
        v208 = (unint64_t)v202 >= v200 || v196 >= (const float *)v203;
        v209 = !v208;
        v210 = (unint64_t)v204 >= v189 || v391 >= v205;
        v211 = !v210;
        v212 = (unint64_t)v204 >= v200 || v196 >= (const float *)v205;
        v213 = !v212;
        if (!v207)
          break;
        v197 = v391;
        v71 = v388;
        do
        {
LABEL_178:
          v198 = *(_DWORD *)v197;
          v197 += 4;
          v199 = 4 * v182;
          *(_DWORD *)&v183[v199] = v198;
          *(float *)&v184[v199] = *v196;
          ++v182;
        }
        while (v197 != v65);
LABEL_175:
        ++v196;
        ++v181;
        if (v196 == v180)
          goto LABEL_213;
      }
      v71 = v388;
      if (!v209 && !v211 && !v213)
      {
        v182 += v193;
        v214 = vld1q_dup_f32(v196);
        v215 = (float32x4_t *)&v194[v201];
        v216 = &v195[v201];
        v217 = v190 & 0x7FFFFFFFFFFFFFF8;
        v218 = (__int128 *)(v391 + 16);
        do
        {
          v219 = *v218;
          *((_OWORD *)v216 - 1) = *(v218 - 1);
          *(_OWORD *)v216 = v219;
          v215[-1] = v214;
          *v215 = v214;
          v215 += 2;
          v218 += 2;
          v216 += 32;
          v217 -= 8;
        }
        while (v217);
        v197 = &v391[4 * (v190 & 0x7FFFFFFFFFFFFFF8)];
        if (v190 == v193)
          goto LABEL_175;
        goto LABEL_178;
      }
LABEL_177:
      v197 = v391;
      goto LABEL_178;
    }
LABEL_213:
    v397 = 0;
    v398 = 0;
    v399 = 0;
    __p = 0;
    v395 = 0;
    v396 = 0;
    v220 = v81 - (char *)v71;
    v221 = (v81 - (char *)v71) >> 2;
    v222 = ((char *)v410 - v409) >> 2;
    v223 = v222 * v221;
    if (v222 * v221)
    {
      sub_20E9F5694((uint64_t)&v397, v222 * v221);
      v224 = (char *)__p;
      v225 = (v395 - (_BYTE *)__p) >> 2;
      v226 = v223 >= v225;
      if (v223 > v225)
      {
        sub_20E9F5694((uint64_t)&__p, v223 - v225);
        goto LABEL_219;
      }
    }
    else
    {
      v224 = 0;
      v226 = 1;
    }
    if (!v226)
      v395 = &v224[4 * v223];
LABEL_219:
    v227 = v409;
    v228 = v410;
    if (v409 != (char *)v410 && v71 != (float32x4_t *)v81)
    {
      v229 = 0;
      v230 = 0;
      v231 = (char *)v397;
      v232 = (char *)__p;
      v233 = v220 - 4;
      v234 = (v220 - 4) & 0xFFFFFFFFFFFFFFFCLL;
      v235 = (char *)v397 + v234 + 4;
      v236 = (char *)__p + v234 + 4;
      v237 = (unint64_t)v71->u64 + v234 + 4;
      v238 = ((unint64_t)(v220 - 4) >> 2) + 1;
      v240 = v397 < v236 && __p < v235;
      v241 = v238 & 0x7FFFFFFFFFFFFFF8;
      v242 = (char *)__p + 16;
      v243 = (char *)v397 + 16;
      for (j = (const float *)v409; j != v228; ++j)
      {
        if (v233 < 0x4C)
          goto LABEL_230;
        v248 = (unint64_t)&v227[4 * v229 + 4];
        v249 = 4 * v230;
        v250 = &v231[4 * v230];
        v251 = &v235[4 * v230];
        v252 = &v232[4 * v230];
        v253 = &v236[4 * v230];
        v254 = (unint64_t)v250 >= v237 || v71 >= (float32x4_t *)v251;
        v255 = !v254 || v240;
        v256 = (unint64_t)v250 >= v248 || j >= (const float *)v251;
        v257 = !v256;
        v258 = (unint64_t)v252 >= v237 || v71 >= (float32x4_t *)v253;
        v259 = !v258;
        v260 = (unint64_t)v252 >= v248 || j >= (const float *)v253;
        v261 = !v260;
        if (v255 || v257 || v259 || v261)
        {
LABEL_230:
          v245 = (char *)v71;
        }
        else
        {
          v230 += v241;
          v262 = vld1q_dup_f32(j);
          v263 = (float32x4_t *)&v242[v249];
          v264 = &v243[v249];
          v265 = v238 & 0x7FFFFFFFFFFFFFF8;
          v266 = (__int128 *)&v71[1];
          do
          {
            v267 = *v266;
            *((_OWORD *)v264 - 1) = *(v266 - 1);
            *(_OWORD *)v264 = v267;
            v263[-1] = v262;
            *v263 = v262;
            v263 += 2;
            v266 += 2;
            v264 += 32;
            v265 -= 8;
          }
          while (v265);
          v245 = &v71->i8[4 * (v238 & 0x7FFFFFFFFFFFFFF8)];
          if (v238 == v241)
            goto LABEL_228;
        }
        do
        {
          v246 = *(_DWORD *)v245;
          v245 += 4;
          v247 = 4 * v230;
          *(_DWORD *)&v231[v247] = v246;
          *(float *)&v232[v247] = *j;
          ++v230;
        }
        while (v245 != v81);
LABEL_228:
        ++v229;
      }
    }
    v268 = (float32x4_t *)v400;
    v269 = v401 - (_BYTE *)v400;
    if (v401 != v400)
    {
      if ((unint64_t)v269 >= 0x3FFFFFFFFFFFFFFDLL)
        sub_20E867F44();
      v270 = 4 * v269;
      v271 = (int8x16_t *)operator new(4 * v269);
      v272 = v269 >> 2;
      bzero(v271, v270);
      v273 = (char *)__p;
      v274 = (char *)v403;
      v275 = (char *)v397;
      if (v272 <= 1)
        v276 = 1;
      else
        v276 = v272;
      if (v276 >= 0x14
        && ((v277 = v276 - 1, &v271[v277] >= v271)
          ? (v278 = (char *)v271[v277].i64 + 4 >= (char *)v271->i64 + 4)
          : (v278 = 0),
            v278 ? (v279 = &v271[v277].u64[1] >= &v271->u64[1]) : (v279 = 0),
            v279 ? (v280 = (char *)&v271[v277].u64[1] + 4 >= (char *)&v271->u64[1] + 4) : (v280 = 0),
            v280 ? (v281 = (v276 - 1) >> 60 == 0) : (v281 = 0),
            v281))
      {
        v282 = 0;
        v283 = (unint64_t)&v271[v276];
        v285 = v271 < (int8x16_t *)((char *)v403 + 4 * v276) && (unint64_t)v403 < v283;
        v287 = v271 < (int8x16_t *)((char *)__p + 4 * v276) && (unint64_t)__p < v283;
        v289 = v271 < (int8x16_t *)((char *)v397 + 4 * v276) && (unint64_t)v397 < v283;
        if (((unint64_t)v268 >= v283 || v271 >= (int8x16_t *)&v268->f32[v276]) && !v285 && !v287 && !v289)
        {
          v282 = v276 & 0xFFFFFFFFFFFFFFFCLL;
          v291 = v276 & 0xFFFFFFFFFFFFFFFCLL;
          v292 = (float32x4_t *)v397;
          v293 = (float32x4_t *)__p;
          v294 = (float32x4_t *)v403;
          v295 = v268;
          v296 = (float *)v271;
          v297.i64[0] = 0x3F0000003F000000;
          v297.i64[1] = 0x3F0000003F000000;
          do
          {
            v298 = *v295++;
            v299 = v298;
            v300 = *v294++;
            v301 = vmulq_f32(v300, v297);
            v302 = *v293++;
            v303 = v302;
            v304 = *v292++;
            v431.val[0] = vsubq_f32(v299, v301);
            v305 = vmulq_f32(v304, v297);
            v431.val[1] = vsubq_f32(v303, v305);
            v431.val[2] = vaddq_f32(v299, v301);
            v431.val[3] = vaddq_f32(v303, v305);
            vst4q_f32(v296, v431);
            v296 += 16;
            v291 -= 4;
          }
          while (v291);
          if (v276 == v282)
          {
LABEL_318:
            v269 = (uint64_t)v271->i64 + v270;
LABEL_320:
            v395 = v273;
            operator delete(v273);
            v321 = v271;
            v322 = (int8x16_t *)v269;
            v323 = v397;
            if (!v397)
              goto LABEL_324;
LABEL_323:
            v398 = v323;
            operator delete(v323);
            goto LABEL_324;
          }
        }
      }
      else
      {
        v282 = 0;
      }
      v306 = v276 - v282;
      v307 = 4 * v282;
      v308 = &v268->f32[v282];
      v309 = (float *)&v274[4 * v282];
      v310 = (float *)&v273[4 * v282];
      v311 = (float *)&v271[v282].i32[2];
      v312 = (float *)&v275[v307];
      do
      {
        v313 = *v308++;
        v314 = v313;
        v315 = *v309++;
        v316 = v315 * 0.5;
        v317 = v314 - (float)(v315 * 0.5);
        v318 = *v310++;
        v319 = v318;
        v320 = *v312++;
        *(v311 - 2) = v317;
        *(v311 - 1) = v319 - (float)(v320 * 0.5);
        *v311 = v314 + v316;
        v311[1] = v319 + (float)(v320 * 0.5);
        v311 += 4;
        --v306;
      }
      while (v306);
      goto LABEL_318;
    }
    v271 = 0;
    v321 = 0;
    v322 = 0;
    v273 = (char *)__p;
    if (__p)
      goto LABEL_320;
    v323 = v397;
    if (v397)
      goto LABEL_323;
LABEL_324:
    if (v400)
    {
      v401 = (char *)v400;
      operator delete(v400);
    }
    if (v403)
    {
      v404 = v403;
      operator delete(v403);
    }
    if (v406)
    {
      v407 = (const float *)v406;
      operator delete(v406);
    }
    if (v409)
    {
      v410 = (const float *)v409;
      operator delete(v409);
    }
    if (v116)
      operator delete(v116);
    if (v389)
      operator delete(v389);
    if (v71)
      operator delete(v71);
    v31 = v385;
    if (v391)
      operator delete(v391);
    if (v321 == v322)
      goto LABEL_394;
    v324 = 0;
    v325 = 0;
    v326 = 0;
    v327 = 0;
    v328 = v321;
    do
    {
      v329.i64[0] = v328->i64[0];
      v329.i64[1] = v385[17];
      v330.i64[0] = v385[16];
      v330.i64[1] = v328->i64[1];
      v331 = vbslq_s8((int8x16_t)vcgtq_f32(v330, v329), *((int8x16_t *)v385 + 8), *v328);
      v332 = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v331, v331, 8uLL), *(float32x2_t *)v331.i8);
      v333 = (float32x2_t)vbic_s8((int8x8_t)v332, (int8x8_t)vcltz_f32(v332));
      if (vmul_lane_f32(v333, v333, 1).f32[0] == 0.0)
        goto LABEL_343;
      if (v327 < v326)
      {
        *v327++ = v331;
        v324 = (float32x4_t *)v327;
        goto LABEL_343;
      }
      v334 = ((char *)v327 - (char *)v325) >> 4;
      v335 = v334 + 1;
      if ((unint64_t)(v334 + 1) >> 60)
        sub_20E867F44();
      if (((char *)v326 - (char *)v325) >> 3 > v335)
        v335 = ((char *)v326 - (char *)v325) >> 3;
      if ((unint64_t)((char *)v326 - (char *)v325) >= 0x7FFFFFFFFFFFFFF0)
        v336 = 0xFFFFFFFFFFFFFFFLL;
      else
        v336 = v335;
      if (v336)
      {
        *(int8x16_t *)v392 = v331;
        if (v336 >> 60)
          sub_20E877A38();
        v337 = (char *)operator new(16 * v336);
        v338 = &v337[16 * v334];
        *(_OWORD *)v338 = *(_OWORD *)v392;
        v324 = (float32x4_t *)(v338 + 16);
        if (v327 == (int8x16_t *)v325)
        {
LABEL_361:
          v339 = (float32x4_t *)v338;
          v326 = (int8x16_t *)&v337[16 * v336];
          if (!v325)
            goto LABEL_360;
          goto LABEL_359;
        }
      }
      else
      {
        v337 = 0;
        v338 = (char *)(16 * v334);
        *(int8x16_t *)(16 * v334) = v331;
        v324 = (float32x4_t *)(16 * v334 + 16);
        if (v327 == (int8x16_t *)v325)
          goto LABEL_361;
      }
      do
      {
        v339 = (float32x4_t *)(v338 - 16);
        *((int8x16_t *)v338 - 1) = v327[-1];
        --v327;
        v338 -= 16;
      }
      while (v327 != (int8x16_t *)v325);
      v326 = (int8x16_t *)&v337[16 * v336];
      if (!v325)
        goto LABEL_360;
LABEL_359:
      operator delete(v325);
LABEL_360:
      v325 = v339;
      v327 = (int8x16_t *)v324;
LABEL_343:
      ++v328;
    }
    while (v328 != v322);
    if (*((_BYTE *)v385 + 144))
      goto LABEL_370;
    if (v325 != v324)
    {
      v340 = (char *)v324 - (char *)v325 - 16;
      v341 = v325;
      v342 = v381;
      if (v340 < 0x30)
        goto LABEL_432;
      v343 = (v340 >> 4) + 1;
      v341 = &v325[v343 & 0x1FFFFFFFFFFFFFFCLL];
      v344 = v343 & 0x1FFFFFFFFFFFFFFCLL;
      v345 = (float *)v325;
      do
      {
        v430 = vld4q_f32(v345);
        v432.val[0] = vmulq_n_f32(v430.val[0], v380.f32[0]);
        v432.val[1] = vmulq_lane_f32(v430.val[1], v380, 1);
        v432.val[2] = vmulq_n_f32(v430.val[2], v380.f32[0]);
        v432.val[3] = vmulq_lane_f32(v430.val[3], v380, 1);
        vst4q_f32(v345, v432);
        v345 += 16;
        v344 -= 4;
      }
      while (v344);
      v342 = v381;
      if (v343 != (v343 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_432:
        do
        {
          *v341 = vmulq_f32(*v341, v342);
          ++v341;
        }
        while (v341 != v324);
      }
LABEL_370:
      if (v325 != v324)
      {
        v346 = (_OWORD *)v383[1];
        v347 = v325;
        while (1)
        {
          v349 = v383[2];
          if ((unint64_t)v346 < v349)
          {
            *v346 = *v347;
            f32 = v346 + 1;
          }
          else
          {
            v350 = (_OWORD *)*v383;
            v351 = ((uint64_t)v346 - *v383) >> 4;
            v352 = v351 + 1;
            if ((unint64_t)(v351 + 1) >> 60)
              sub_20E867F44();
            v353 = v349 - (_QWORD)v350;
            if (v353 >> 3 > v352)
              v352 = v353 >> 3;
            if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF0)
              v354 = 0xFFFFFFFFFFFFFFFLL;
            else
              v354 = v352;
            if (v354)
            {
              if (v354 >> 60)
                sub_20E877A38();
              v355 = (char *)operator new(16 * v354);
              v356 = (float32x4_t *)&v355[16 * v351];
              *v356 = *v347;
              v357 = (uint64_t)v356;
              if (v346 != v350)
              {
                do
                {
LABEL_386:
                  *(_OWORD *)(v357 - 16) = *(v346 - 1);
                  v357 -= 16;
                  --v346;
                }
                while (v346 != v350);
                v346 = (_OWORD *)*v383;
                f32 = (_OWORD *)v356[1].f32;
                *v383 = v357;
                v383[1] = (uint64_t)&v356[1];
                v383[2] = (uint64_t)&v355[16 * v354];
                if (!v346)
                  goto LABEL_373;
LABEL_390:
                operator delete(v346);
                goto LABEL_373;
              }
            }
            else
            {
              v355 = 0;
              v356 = (float32x4_t *)(16 * v351);
              *(float32x4_t *)(16 * v351) = *v347;
              v357 = 16 * v351;
              if (v346 != v350)
                goto LABEL_386;
            }
            f32 = (_OWORD *)v356[1].f32;
            *v383 = v357;
            v383[1] = (uint64_t)&v356[1];
            v383[2] = (uint64_t)&v355[16 * v354];
            if (v346)
              goto LABEL_390;
          }
LABEL_373:
          v383[1] = (uint64_t)f32;
          ++v347;
          v346 = f32;
          if (v347 == v324)
          {
            v324 = v325;
            break;
          }
        }
      }
    }
    if (v324)
      operator delete(v324);
LABEL_394:
    if (v321)
      operator delete(v321);
    v50 = v387 + 1;
  }
  while (v387 + 1 != v384);
  operator delete(v382);
  if (v393)
    operator delete(v393);
}

void sub_20ED9ABCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ***sub_20ED9AE34(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  _BYTE *v4;
  void **v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  char *v25;
  __int16 v26;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  char *v30;
  char *v31;
  __int128 *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char v37;
  float *v38;
  unint64_t v39;
  unint64_t v40;
  float *v41;
  unint64_t v42;
  float v43;
  float *v44;
  float v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  float *v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  float *v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  float *v60;
  uint64_t v61;
  __int128 v62;
  _BYTE *v68;
  char *v69;
  size_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  float v78;
  float v79;
  float *v80;
  char *v81;
  char *v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float *v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  float *v95;
  int64_t v96;
  unint64_t v97;
  float *v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  float *v104;
  uint64_t v105;
  __int128 v106;
  float *v107;
  float *v108;
  float *v109;
  float *v110;
  int64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  float *v117;
  int64_t v118;
  unint64_t v119;
  float *v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  float *v126;
  uint64_t v127;
  __int128 v128;
  _BYTE *v129;
  float v130;
  uint64_t v131;
  _DWORD *v132;
  char *v133;
  char *v134;
  char *v135;
  void *v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  float *v144;
  int64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  __int128 *v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  float *v155;
  float *v156;
  int64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  float *v163;
  unint64_t v164;
  float *v165;
  uint64_t v166;
  uint64_t v167;
  _OWORD *v168;
  float *v169;
  uint64_t v170;
  __int128 v171;
  int v172;
  char *v173;
  void *v174;
  int64_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  void *v180;
  int64_t v181;
  char *v182;
  char *v183;
  char *v184;
  unint64_t v185;
  char *v186;
  void *v187;
  char *v188;
  uint64_t v189;
  const void *v190;
  int64_t v191;
  char *v192;
  char *v193;
  const void *v194;
  int64_t v195;
  char *v196;
  char *v197;
  __int128 v198;
  void *v199;
  int64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  void ***v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  void *v211;
  void *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  void *v217;
  void *v218;
  unint64_t v220;
  unint64_t v221;
  void ***v223;
  void *v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  char v232;
  void *__p;
  char *v234;
  char *v235;
  void *v236;
  float *v237;
  float *v238;
  char **v239;
  char *v240;
  unint64_t v241;
  char **v242;
  char *v243;
  unint64_t v244;
  float *v245;
  float *v246;
  float *v247;

  *(_QWORD *)a1 = 0;
  v3 = *a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 2);
  v4 = (_BYTE *)*((_QWORD *)a2 + 3);
  v5 = (void **)(a2 + 1);
  v7 = v4 - v6;
  if (v4 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v4 - v6);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 5);
  v10 = (_BYTE *)*((_QWORD *)a2 + 6);
  v12 = v10 - v11;
  v223 = (void ***)a1;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 56) = v14;
  }
  v15 = *((_DWORD *)a2 + 16);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v17 = (_BYTE *)*((_QWORD *)a2 + 9);
  v16 = (_BYTE *)*((_QWORD *)a2 + 10);
  v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      sub_20E867F44();
    v19 = (char *)operator new(v16 - v17);
    *(_QWORD *)(a1 + 80) = v19;
    *(_QWORD *)(a1 + 88) = v19;
    v20 = &v19[8 * (v18 >> 3)];
    *(_QWORD *)(a1 + 96) = v20;
    memcpy(v19, v17, v18);
    *(_QWORD *)(a1 + 88) = v20;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v22 = (_BYTE *)*((_QWORD *)a2 + 12);
  v21 = (_BYTE *)*((_QWORD *)a2 + 13);
  v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0)
      sub_20E867F44();
    v24 = (char *)operator new(v21 - v22);
    *(_QWORD *)(a1 + 104) = v24;
    *(_QWORD *)(a1 + 112) = v24;
    v25 = &v24[8 * (v23 >> 3)];
    *(_QWORD *)(a1 + 120) = v25;
    memcpy(v24, v22, v23);
    *(_QWORD *)(a1 + 112) = v25;
  }
  v26 = *((_WORD *)a2 + 60);
  *(_QWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 128) = v26;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v27 = (_BYTE *)*((_QWORD *)a2 + 16);
  v28 = (_BYTE *)*((_QWORD *)a2 + 17);
  v29 = v28 - v27;
  if (v28 == v27)
  {
    v34 = 0;
    v32 = a2;
  }
  else
  {
    if (v29 < 0)
      sub_20E867F44();
    v30 = (char *)operator new(v28 - v27);
    *(_QWORD *)(a1 + 136) = v30;
    *(_QWORD *)(a1 + 144) = v30;
    v31 = &v30[16 * (v29 >> 4)];
    *(_QWORD *)(a1 + 152) = v31;
    memcpy(v30, v27, v29);
    *(_QWORD *)(a1 + 144) = v31;
    v32 = a2;
    v33 = *((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16);
    v34 = v33 >> 4;
    if (v33)
    {
      v245 = 0;
      v246 = 0;
      v247 = 0;
      v35 = (char *)*((_QWORD *)a2 + 2);
      v36 = (char *)*((_QWORD *)a2 + 3);
      if (v35 != v36)
      {
        v37 = 0;
LABEL_21:
        if (&v245 != (float **)v5)
          sub_20E867E00(&v245, v35, v36, (v36 - v35) >> 2);
        goto LABEL_56;
      }
      if (v33 < 0)
        sub_20E867F44();
      v38 = (float *)operator new((unint64_t)v33 >> 2);
      v39 = 0;
      v40 = v34;
      v41 = &v38[v34];
      v245 = v38;
      v246 = v38;
      v247 = v41;
      v42 = v40;
      v43 = (float)(v40 - 1);
      v44 = v38;
      while (1)
      {
        while (1)
        {
          v45 = *((float *)a2 + 2)
              + (float)((float)((float)(*((float *)a2 + 3) - *((float *)a2 + 2)) * (float)v39) / v43);
          if (v38 >= v41)
            break;
          *v38++ = v45;
          v246 = v38;
          if (++v39 == v42)
            goto LABEL_55;
        }
        v46 = v38 - v44;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
          sub_20E867F44();
        if (((char *)v41 - (char *)v44) >> 1 > v47)
          v47 = ((char *)v41 - (char *)v44) >> 1;
        if ((unint64_t)((char *)v41 - (char *)v44) >= 0x7FFFFFFFFFFFFFFCLL)
          v48 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
        {
          if (v48 >> 62)
            sub_20E877A38();
          v49 = operator new(4 * v48);
          v50 = (float *)&v49[4 * v46];
          *v50 = v45;
          v51 = (uint64_t)(v50 + 1);
          v52 = (char *)v38 - (char *)v44;
          if (v38 == v44)
            goto LABEL_41;
        }
        else
        {
          v49 = 0;
          v50 = (float *)(4 * v46);
          *(float *)(4 * v46) = v45;
          v51 = 4 * v46 + 4;
          v52 = (char *)v38 - (char *)v44;
          if (v38 == v44)
            goto LABEL_41;
        }
        v53 = v52 - 4;
        if (v53 >= 0xBC)
        {
          v56 = ((char *)(v38 - 1) - (char *)v44) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v49[(char *)v38 - (char *)v44 - 4 - v56] > &v49[(char *)v38 - (char *)v44 - 4])
          {
            v54 = v38;
          }
          else if ((float *)((char *)v38 - v56 - 4) > v38 - 1)
          {
            v54 = v38;
          }
          else if ((unint64_t)((char *)v44 - v49) >= 0x20)
          {
            v57 = (v53 >> 2) + 1;
            v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
            v54 = &v38[v58 / 0xFFFFFFFFFFFFFFFCLL];
            v50 = (float *)((char *)v50 - v58);
            v59 = &v49[4 * v46 - 16];
            v60 = v38 - 4;
            v61 = v57 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v62 = *(_OWORD *)v60;
              *(v59 - 1) = *((_OWORD *)v60 - 1);
              *v59 = v62;
              v59 -= 2;
              v60 -= 8;
              v61 -= 8;
            }
            while (v61);
            if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_41;
          }
          else
          {
            v54 = v38;
          }
        }
        else
        {
          v54 = v38;
        }
        do
        {
          v55 = *((_DWORD *)v54-- - 1);
          *((_DWORD *)v50-- - 1) = v55;
        }
        while (v54 != v44);
LABEL_41:
        v41 = (float *)&v49[4 * v48];
        v245 = v50;
        v247 = v41;
        if (v44)
          operator delete(v44);
        v44 = v50;
        v246 = (float *)v51;
        ++v39;
        v38 = (float *)v51;
        if (v39 == v42)
        {
LABEL_55:
          v37 = 0;
          v32 = a2;
          v34 = v42;
          goto LABEL_56;
        }
      }
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/AnchorBoxUtils.cpp", 304, (uint64_t)"num_layers > 0", 14, (uint64_t)&unk_21025FC2E, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v245 = 0;
  v246 = 0;
  v247 = 0;
  v35 = (char *)*((_QWORD *)v32 + 2);
  v36 = (char *)*((_QWORD *)v32 + 3);
  v37 = 1;
  if (v35 != v36)
    goto LABEL_21;
LABEL_56:
  v242 = 0;
  v243 = 0;
  v244 = 0;
  v239 = 0;
  v240 = 0;
  v241 = 0;
  sub_20ED9C3C4((uint64_t)&v242, v34);
  sub_20ED9C3C4((uint64_t)&v239, v34);
  if ((v37 & 1) == 0)
  {
    v77 = 0;
    v221 = v34 - 1;
    v220 = v34;
    while (1)
    {
      v78 = 1.0;
      if (v77 != v221)
        v78 = v245[v77 + 1];
      v79 = v245[v77];
      if (v77 || !*((_BYTE *)v32 + 120))
        break;
      v80 = (float *)operator new(0xCuLL);
      v81 = (char *)(v80 + 3);
      *(_QWORD *)&v225 = v80 + 3;
      *((_QWORD *)&v225 + 1) = v80 + 3;
      *v80 = 0.1;
      v80[1] = v79;
      v80[2] = v79;
      v224 = v80;
      v82 = v243;
      if ((unint64_t)v243 >= v244)
      {
        v243 = sub_20ED9C854((char **)&v242, (uint64_t)&v224);
        if (v224)
          operator delete(v224);
      }
      else
      {
        *(_QWORD *)v243 = v80;
        *((_QWORD *)v82 + 1) = v81;
        *((_QWORD *)v82 + 2) = v81;
        v243 = v82 + 24;
      }
      v132 = operator new(0xCuLL);
      v133 = (char *)(v132 + 3);
      *(_QWORD *)&v225 = v132 + 3;
      *((_QWORD *)&v225 + 1) = v132 + 3;
      *(_QWORD *)v132 = 0x400000003F800000;
      v132[2] = 1056964608;
      v224 = v132;
      v134 = v240;
      if ((unint64_t)v240 >= v241)
      {
        v135 = sub_20ED9C854((char **)&v239, (uint64_t)&v224);
        v136 = v224;
        v240 = v135;
        if (!v224)
          goto LABEL_76;
        goto LABEL_207;
      }
      *(_QWORD *)v240 = v132;
      *((_QWORD *)v134 + 1) = v133;
      *((_QWORD *)v134 + 2) = v133;
      v240 = v134 + 24;
LABEL_76:
      if (++v77 == v34)
        goto LABEL_57;
    }
    v224 = 0;
    v225 = 0uLL;
    v236 = 0;
    v237 = 0;
    v238 = 0;
    v83 = 0;
    v84 = *((_QWORD *)v32 + 6) - *((_QWORD *)v32 + 5);
    if (v84)
    {
      v85 = v84 >> 2;
      v86 = v84 >> 2;
      while (1)
      {
        if ((unint64_t)v83 < *((_QWORD *)&v225 + 1))
        {
          *v83 = v79;
          v87 = (uint64_t)(v83 + 1);
        }
        else
        {
          v88 = (float *)v224;
          v89 = (char *)v83 - (_BYTE *)v224;
          v90 = ((char *)v83 - (_BYTE *)v224) >> 2;
          v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 62)
LABEL_258:
            sub_20E867F44();
          v92 = *((_QWORD *)&v225 + 1) - (_QWORD)v224;
          if ((uint64_t)(*((_QWORD *)&v225 + 1) - (_QWORD)v224) >> 1 > v91)
            v91 = v92 >> 1;
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
            v93 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v93 = v91;
          if (v93)
          {
            if (v93 >> 62)
LABEL_257:
              sub_20E877A38();
            v94 = operator new(4 * v93);
            v95 = (float *)&v94[4 * v90];
            *v95 = v79;
            v87 = (uint64_t)(v95 + 1);
            v96 = (char *)v83 - (char *)v88;
            if (v83 != v88)
            {
LABEL_97:
              v97 = v96 - 4;
              if (v97 < 0xBC
                || (v100 = ((char *)(v83 - 1) - (char *)v88) & 0xFFFFFFFFFFFFFFFCLL, &v94[v89 - 4 - v100] > &v94[v89 - 4])
                || (float *)((char *)v83 - v100 - 4) > v83 - 1
                || (unint64_t)((char *)v83 - v94 - v89) < 0x20)
              {
                v98 = v83;
              }
              else
              {
                v101 = (v97 >> 2) + 1;
                v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
                v98 = &v83[v102 / 0xFFFFFFFFFFFFFFFCLL];
                v95 = (float *)((char *)v95 - v102);
                v103 = &v94[4 * v90 - 16];
                v104 = v83 - 4;
                v105 = v101 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v106 = *(_OWORD *)v104;
                  *(v103 - 1) = *((_OWORD *)v104 - 1);
                  *v103 = v106;
                  v103 -= 2;
                  v104 -= 8;
                  v105 -= 8;
                }
                while (v105);
                if (v101 == (v101 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_100:
                  v224 = v95;
                  *(_QWORD *)&v225 = v87;
                  *((_QWORD *)&v225 + 1) = &v94[4 * v93];
                  if (!v88)
                    goto LABEL_86;
LABEL_104:
                  operator delete(v88);
                  goto LABEL_86;
                }
              }
              do
              {
                v99 = *((_DWORD *)v98-- - 1);
                *((_DWORD *)v95-- - 1) = v99;
              }
              while (v98 != v88);
              goto LABEL_100;
            }
          }
          else
          {
            v94 = 0;
            v95 = (float *)(4 * v90);
            *(float *)(4 * v90) = v79;
            v87 = 4 * v90 + 4;
            v96 = (char *)v83 - (char *)v88;
            if (v83 != v88)
              goto LABEL_97;
          }
          v224 = v95;
          *(_QWORD *)&v225 = v87;
          *((_QWORD *)&v225 + 1) = &v94[4 * v93];
          if (v88)
            goto LABEL_104;
        }
LABEL_86:
        *(_QWORD *)&v225 = v87;
        v83 = (float *)v87;
        if (!--v86)
        {
          v107 = (float *)*((_QWORD *)a2 + 5);
          v108 = &v107[v85];
          v109 = v237;
          while (1)
          {
            if (v109 < v238)
            {
              *v109 = *v107;
              v83 = v109 + 1;
            }
            else
            {
              v110 = (float *)v236;
              v111 = (char *)v109 - (_BYTE *)v236;
              v112 = ((char *)v109 - (_BYTE *)v236) >> 2;
              v113 = v112 + 1;
              if ((unint64_t)(v112 + 1) >> 62)
                goto LABEL_258;
              v114 = (char *)v238 - (_BYTE *)v236;
              if (((char *)v238 - (_BYTE *)v236) >> 1 > v113)
                v113 = v114 >> 1;
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
                v115 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v115 = v113;
              if (v115)
              {
                if (v115 >> 62)
                  goto LABEL_257;
                v116 = operator new(4 * v115);
                v117 = (float *)&v116[4 * v112];
                *v117 = *v107;
                v83 = v117 + 1;
                v118 = (char *)v109 - (char *)v110;
                if (v109 != v110)
                {
LABEL_125:
                  v119 = v118 - 4;
                  if (v119 < 0xBC
                    || (v122 = ((char *)(v109 - 1) - (char *)v110) & 0xFFFFFFFFFFFFFFFCLL,
                        &v116[v111 - 4 - v122] > &v116[v111 - 4])
                    || (float *)((char *)v109 - v122 - 4) > v109 - 1
                    || (unint64_t)((char *)v109 - v116 - v111) < 0x20)
                  {
                    v120 = v109;
                  }
                  else
                  {
                    v123 = (v119 >> 2) + 1;
                    v124 = 4 * (v123 & 0x7FFFFFFFFFFFFFF8);
                    v120 = &v109[v124 / 0xFFFFFFFFFFFFFFFCLL];
                    v117 = (float *)((char *)v117 - v124);
                    v125 = &v116[4 * v112 - 16];
                    v126 = v109 - 4;
                    v127 = v123 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v128 = *(_OWORD *)v126;
                      *(v125 - 1) = *((_OWORD *)v126 - 1);
                      *v125 = v128;
                      v125 -= 2;
                      v126 -= 8;
                      v127 -= 8;
                    }
                    while (v127);
                    if (v123 == (v123 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_128:
                      v236 = v117;
                      v237 = v83;
                      v238 = (float *)&v116[4 * v115];
                      if (!v110)
                        goto LABEL_114;
LABEL_132:
                      operator delete(v110);
                      goto LABEL_114;
                    }
                  }
                  do
                  {
                    v121 = *((_DWORD *)v120-- - 1);
                    *((_DWORD *)v117-- - 1) = v121;
                  }
                  while (v120 != v110);
                  goto LABEL_128;
                }
              }
              else
              {
                v116 = 0;
                v117 = (float *)(4 * v112);
                *(float *)(4 * v112) = *v107;
                v83 = (float *)(4 * v112 + 4);
                v118 = (char *)v109 - (char *)v110;
                if (v109 != v110)
                  goto LABEL_125;
              }
              v236 = v117;
              v237 = v83;
              v238 = (float *)&v116[4 * v115];
              if (v110)
                goto LABEL_132;
            }
LABEL_114:
            v237 = v83;
            ++v107;
            v109 = v83;
            if (v107 == v108)
              goto LABEL_140;
          }
        }
      }
    }
LABEL_140:
    if (*((float *)a2 + 16) <= 0.0)
    {
LABEL_191:
      v173 = v243;
      if ((unint64_t)v243 >= v244)
      {
        v178 = sub_20ED9C9A0((char **)&v242, v224, v225);
        v32 = a2;
        v34 = v220;
      }
      else
      {
        *(_QWORD *)v243 = 0;
        *((_QWORD *)v173 + 1) = 0;
        *((_QWORD *)v173 + 2) = 0;
        v174 = v224;
        v175 = v225 - (_QWORD)v224;
        v34 = v220;
        if ((void *)v225 != v224)
        {
          if (v175 < 0)
            sub_20E867F44();
          v176 = (char *)operator new(v225 - (_QWORD)v224);
          *(_QWORD *)v173 = v176;
          *((_QWORD *)v173 + 1) = v176;
          v177 = &v176[4 * (v175 >> 2)];
          *((_QWORD *)v173 + 2) = v177;
          memcpy(v176, v174, v175);
          *((_QWORD *)v173 + 1) = v177;
        }
        v178 = v173 + 24;
        v32 = a2;
      }
      v243 = v178;
      v179 = v240;
      if ((unint64_t)v240 >= v241)
      {
        v184 = sub_20ED9C9A0((char **)&v239, v236, (uint64_t)v237);
      }
      else
      {
        *(_QWORD *)v240 = 0;
        *((_QWORD *)v179 + 1) = 0;
        *((_QWORD *)v179 + 2) = 0;
        v180 = v236;
        v181 = (char *)v237 - (_BYTE *)v236;
        if (v237 != v236)
        {
          if (v181 < 0)
            sub_20E867F44();
          v182 = (char *)operator new((char *)v237 - (_BYTE *)v236);
          *(_QWORD *)v179 = v182;
          *((_QWORD *)v179 + 1) = v182;
          v183 = &v182[4 * (v181 >> 2)];
          *((_QWORD *)v179 + 2) = v183;
          memcpy(v182, v180, v181);
          *((_QWORD *)v179 + 1) = v183;
        }
        v184 = v179 + 24;
      }
      v240 = v184;
      if (v236)
      {
        v237 = (float *)v236;
        operator delete(v236);
      }
      v136 = v224;
      if (!v224)
        goto LABEL_76;
      *(_QWORD *)&v225 = v224;
LABEL_207:
      operator delete(v136);
      goto LABEL_76;
    }
    v129 = (_BYTE *)v225;
    v130 = sqrtf(v79 * v78);
    if ((unint64_t)v225 < *((_QWORD *)&v225 + 1))
    {
      *(float *)v225 = v130;
      v131 = (uint64_t)(v129 + 4);
      goto LABEL_167;
    }
    v137 = v224;
    v138 = v225 - (_QWORD)v224;
    v139 = (uint64_t)(v225 - (_QWORD)v224) >> 2;
    v140 = v139 + 1;
    if ((unint64_t)(v139 + 1) >> 62)
      goto LABEL_264;
    v141 = *((_QWORD *)&v225 + 1) - (_QWORD)v224;
    if ((uint64_t)(*((_QWORD *)&v225 + 1) - (_QWORD)v224) >> 1 > v140)
      v140 = v141 >> 1;
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
      v142 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v142 = v140;
    if (v142)
    {
      if (v142 >> 62)
        goto LABEL_259;
      v143 = (char *)operator new(4 * v142);
      v144 = (float *)&v143[4 * v139];
      *v144 = v130;
      v131 = (uint64_t)(v144 + 1);
      v145 = v129 - v137;
      if (v129 == v137)
        goto LABEL_165;
    }
    else
    {
      v143 = 0;
      v144 = (float *)(4 * v139);
      *(float *)(4 * v139) = v130;
      v131 = 4 * v139 + 4;
      v145 = v129 - v137;
      if (v129 == v137)
      {
LABEL_165:
        v224 = v144;
        *(_QWORD *)&v225 = v131;
        *((_QWORD *)&v225 + 1) = &v143[4 * v142];
        if (v137)
        {
          operator delete(v137);
          v83 = v237;
        }
LABEL_167:
        *(_QWORD *)&v225 = v131;
        if (v83 < v238)
        {
          *v83 = *((float *)a2 + 16);
          v155 = v83 + 1;
LABEL_190:
          v237 = v155;
          goto LABEL_191;
        }
        v156 = (float *)v236;
        v157 = (char *)v83 - (_BYTE *)v236;
        v158 = ((char *)v83 - (_BYTE *)v236) >> 2;
        v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) >> 62)
LABEL_264:
          sub_20E867F44();
        v160 = (char *)v238 - (_BYTE *)v236;
        if (((char *)v238 - (_BYTE *)v236) >> 1 > v159)
          v159 = v160 >> 1;
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
          v161 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v161 = v159;
        if (v161)
        {
          if (v161 >> 62)
LABEL_259:
            sub_20E877A38();
          v162 = operator new(4 * v161);
        }
        else
        {
          v162 = 0;
        }
        v163 = (float *)&v162[4 * v158];
        *v163 = *((float *)a2 + 16);
        v155 = v163 + 1;
        if (v83 != v156)
        {
          v164 = (char *)v83 - (char *)v156 - 4;
          if (v164 < 0x2C)
          {
            v165 = v83;
            goto LABEL_187;
          }
          if ((unint64_t)((char *)v83 - v162 - v157) < 0x20)
          {
            v165 = v83;
            do
            {
LABEL_187:
              v172 = *((_DWORD *)v165-- - 1);
              *((_DWORD *)v163-- - 1) = v172;
            }
            while (v165 != v156);
            goto LABEL_188;
          }
          v166 = (v164 >> 2) + 1;
          v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
          v165 = &v83[v167 / 0xFFFFFFFFFFFFFFFCLL];
          v163 = (float *)((char *)v163 - v167);
          v168 = &v162[4 * v158 - 16];
          v169 = v83 - 4;
          v170 = v166 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v171 = *(_OWORD *)v169;
            *(v168 - 1) = *((_OWORD *)v169 - 1);
            *v168 = v171;
            v168 -= 2;
            v169 -= 8;
            v170 -= 8;
          }
          while (v170);
          if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_187;
        }
LABEL_188:
        v236 = v163;
        v237 = v155;
        v238 = (float *)&v162[4 * v161];
        if (v156)
          operator delete(v156);
        goto LABEL_190;
      }
    }
    v146 = v145 - 4;
    if (v146 < 0x2C)
      goto LABEL_279;
    if ((unint64_t)(v129 - v143 - v138) < 0x20)
      goto LABEL_279;
    v147 = (v146 >> 2) + 1;
    v148 = 4 * (v147 & 0x7FFFFFFFFFFFFFF8);
    v149 = &v129[-v148];
    v144 = (float *)((char *)v144 - v148);
    v150 = &v143[4 * v139 - 16];
    v151 = (__int128 *)(v129 - 16);
    v152 = v147 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v153 = *v151;
      *((_OWORD *)v150 - 1) = *(v151 - 1);
      *(_OWORD *)v150 = v153;
      v150 -= 32;
      v151 -= 2;
      v152 -= 8;
    }
    while (v152);
    v129 = v149;
    if (v147 != (v147 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_279:
      do
      {
        v154 = *((_DWORD *)v129 - 1);
        v129 -= 4;
        *((_DWORD *)v144-- - 1) = v154;
      }
      while (v129 != v137);
    }
    goto LABEL_165;
  }
LABEL_57:
  __asm { FMOV            V0.2S, #1.0 }
  v224 = _D0;
  v225 = 0u;
  v226 = 0u;
  v227 = 0u;
  v228 = 0u;
  v229 = 0u;
  v230 = 0u;
  v231 = xmmword_2103779E0;
  v232 = 1;
  v234 = 0;
  v235 = 0;
  __p = 0;
  sub_20ED9CB94((uint64_t)&v226 + 8, v242, (uint64_t)v243, 0xAAAAAAAAAAAAAAABLL * ((v243 - (char *)v242) >> 3));
  sub_20ED9CB94((uint64_t)&v228, v239, (uint64_t)v240, 0xAAAAAAAAAAAAAAABLL * ((v240 - (char *)v239) >> 3));
  v224 = *(void **)v32;
  if (&v225 != (__int128 *)((char *)a2 + 72))
    sub_20E86811C(&v225, *((char **)v32 + 9), *((char **)v32 + 10), (uint64_t)(*((_QWORD *)v32 + 10) - *((_QWORD *)v32 + 9)) >> 3);
  if ((__int128 *)((char *)&v229 + 8) != a2 + 6)
    sub_20E86811C((_QWORD *)&v229 + 1, *((char **)v32 + 12), *((char **)v32 + 13), (uint64_t)(*((_QWORD *)v32 + 13) - *((_QWORD *)v32 + 12)) >> 3);
  v232 = *((_BYTE *)v32 + 121);
  if (&__p != (void **)(a2 + 8))
  {
    v69 = (char *)*((_QWORD *)v32 + 16);
    v68 = (_BYTE *)*((_QWORD *)v32 + 17);
    v70 = v68 - v69;
    v71 = (v68 - v69) >> 4;
    v72 = (uint64_t)v235;
    v73 = (char *)__p;
    if (v71 > (v235 - (_BYTE *)__p) >> 4)
    {
      if (__p)
      {
        v234 = (char *)__p;
        operator delete(__p);
        v72 = 0;
        __p = 0;
        v234 = 0;
        v235 = 0;
      }
      if ((v70 & 0x8000000000000000) != 0)
        goto LABEL_271;
      v74 = v72 >> 3;
      if (v72 >> 3 <= v71)
        v74 = (v68 - v69) >> 4;
      v75 = (unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v74;
      if (v75 >> 60)
LABEL_271:
        sub_20E867F44();
      v76 = (char *)operator new(16 * v75);
      v73 = v76;
      __p = v76;
      v234 = v76;
      v235 = &v76[16 * v75];
      if (v68 != v69)
        memcpy(v76, v69, v68 - v69);
      goto LABEL_216;
    }
    v185 = (v234 - (_BYTE *)__p) >> 4;
    if (v185 >= v71)
    {
      if (v68 == v69)
      {
LABEL_216:
        v234 = &v73[v70];
        goto LABEL_217;
      }
      v187 = __p;
      v188 = v69;
    }
    else
    {
      v186 = &v69[16 * v185];
      if (v234 != __p)
      {
        memmove(__p, v69, v234 - (_BYTE *)__p);
        v73 = v234;
      }
      v70 = v68 - v186;
      if (v68 == v186)
        goto LABEL_216;
      v187 = v73;
      v188 = v186;
    }
    memmove(v187, v188, v70);
    goto LABEL_216;
  }
LABEL_217:
  v189 = operator new();
  *(_QWORD *)v189 = 0;
  *(_QWORD *)(v189 + 8) = 0;
  *(_QWORD *)(v189 + 16) = 0;
  v190 = (const void *)v225;
  *(_QWORD *)(v189 + 24) = v224;
  *(_QWORD *)(v189 + 32) = 0;
  *(_QWORD *)(v189 + 40) = 0;
  *(_QWORD *)(v189 + 48) = 0;
  v191 = *((_QWORD *)&v225 + 1) - (_QWORD)v190;
  if (*((const void **)&v225 + 1) != v190)
  {
    if (v191 < 0)
      sub_20E867F44();
    v192 = (char *)operator new(*((_QWORD *)&v225 + 1) - (_QWORD)v190);
    *(_QWORD *)(v189 + 32) = v192;
    *(_QWORD *)(v189 + 40) = v192;
    v193 = &v192[8 * (v191 >> 3)];
    *(_QWORD *)(v189 + 48) = v193;
    memcpy(v192, v190, v191);
    *(_QWORD *)(v189 + 40) = v193;
  }
  sub_20ED9C558((_QWORD *)(v189 + 56), (uint64_t *)&v226 + 1);
  sub_20ED9C558((_QWORD *)(v189 + 80), (uint64_t *)&v228);
  *(_QWORD *)(v189 + 104) = 0;
  *(_QWORD *)(v189 + 112) = 0;
  *(_QWORD *)(v189 + 120) = 0;
  v194 = (const void *)*((_QWORD *)&v229 + 1);
  v195 = v230 - *((_QWORD *)&v229 + 1);
  if ((_QWORD)v230 != *((_QWORD *)&v229 + 1))
  {
    if (v195 < 0)
      sub_20E867F44();
    v196 = (char *)operator new(v230 - *((_QWORD *)&v229 + 1));
    *(_QWORD *)(v189 + 104) = v196;
    *(_QWORD *)(v189 + 112) = v196;
    v197 = &v196[8 * (v195 >> 3)];
    *(_QWORD *)(v189 + 120) = v197;
    memcpy(v196, v194, v195);
    *(_QWORD *)(v189 + 112) = v197;
  }
  v198 = v231;
  *(_QWORD *)(v189 + 152) = 0;
  *(_OWORD *)(v189 + 128) = v198;
  *(_BYTE *)(v189 + 144) = v232;
  *(_QWORD *)(v189 + 160) = 0;
  *(_QWORD *)(v189 + 168) = 0;
  v199 = __p;
  v200 = v234 - (_BYTE *)__p;
  if (v234 == __p)
  {
    v204 = v223;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/AnchorBoxUtils.cpp", 238, (uint64_t)"num_feature_maps > 0", 20, (uint64_t)&unk_21025FC2E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_263;
    }
    v202 = 0;
    v206 = *((_QWORD *)&v225 + 1);
    v205 = v225;
    if ((_QWORD)v225 == *((_QWORD *)&v225 + 1))
      goto LABEL_231;
  }
  else
  {
    if (v200 < 0)
      sub_20E867F44();
    v201 = (char *)operator new(v234 - (_BYTE *)__p);
    v202 = v200 >> 4;
    *(_QWORD *)(v189 + 152) = v201;
    *(_QWORD *)(v189 + 160) = v201;
    v203 = &v201[16 * (v200 >> 4)];
    *(_QWORD *)(v189 + 168) = v203;
    memcpy(v201, v199, v200);
    *(_QWORD *)(v189 + 160) = v203;
    v204 = v223;
    v206 = *((_QWORD *)&v225 + 1);
    v205 = v225;
    if ((_QWORD)v225 == *((_QWORD *)&v225 + 1))
      goto LABEL_231;
  }
  if (v202 != (v206 - v205) >> 3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/AnchorBoxUtils.cpp", 240, (uint64_t)"config.anchor_strides.empty() || num_feature_maps == config.anchor_strides.size()", 81, (uint64_t)&unk_21025FC2E, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_263;
  }
LABEL_231:
  if (*((_QWORD *)&v229 + 1) != (_QWORD)v230
    && v202 != (uint64_t)(v230 - *((_QWORD *)&v229 + 1)) >> 3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/AnchorBoxUtils.cpp", 242, (uint64_t)"config.anchor_offsets.empty() || num_feature_maps == config.anchor_offsets.size()", 81, (uint64_t)&unk_21025FC2E, 0, (void (*)(void **))sub_21023DDB0)|| v202 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v227 - *((_QWORD *)&v226 + 1)) >> 3)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/AnchorBoxUtils.cpp", 243, (uint64_t)"num_feature_maps == config.scales.size()", 40, (uint64_t)&unk_21025FC2E, 0, (void (*)(void **))sub_21023DDB0)|| v202 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v228 + 1) - v228) >> 3)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/AnchorBoxUtils.cpp",
         244,
         (uint64_t)"num_feature_maps == config.aspect_ratios.size()",
         47,
         (uint64_t)&unk_21025FC2E,
         0,
         (void (*)(void **))sub_21023DDB0))
  {
LABEL_263:
    abort();
  }
  sub_20ED9CE08(v204, (void **)v189);
  sub_20ED9C764(&v224);
  v207 = (char *)v239;
  if (v239)
  {
    v208 = v240;
    v209 = (char *)v239;
    if (v240 != (char *)v239)
    {
      v210 = v240;
      do
      {
        v212 = (void *)*((_QWORD *)v210 - 3);
        v210 -= 24;
        v211 = v212;
        if (v212)
        {
          *((_QWORD *)v208 - 2) = v211;
          operator delete(v211);
        }
        v208 = v210;
      }
      while (v210 != v207);
      v209 = (char *)v239;
    }
    v240 = v207;
    operator delete(v209);
  }
  v213 = (char *)v242;
  if (v242)
  {
    v214 = v243;
    v215 = (char *)v242;
    if (v243 != (char *)v242)
    {
      v216 = v243;
      do
      {
        v218 = (void *)*((_QWORD *)v216 - 3);
        v216 -= 24;
        v217 = v218;
        if (v218)
        {
          *((_QWORD *)v214 - 2) = v217;
          operator delete(v217);
        }
        v214 = v216;
      }
      while (v216 != v213);
      v215 = (char *)v242;
    }
    v243 = v213;
    operator delete(v215);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  return v204;
}

void sub_20ED9C0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  void ***v37;
  uint64_t v38;
  void *v40;

  v40 = *(void **)(v38 - 144);
  if (v40)
  {
    *(_QWORD *)(v38 - 136) = v40;
    operator delete(v40);
  }
  sub_20ED9C4E8((_QWORD *)(a9 - 16));
  sub_20ED9CE08(v37, 0);
  _Unwind_Resume(a1);
}

void sub_20ED9C3C4(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

_QWORD *sub_20ED9C4E8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

_QWORD *sub_20ED9C558(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_20ED9C664(v3, v4, v5, v8);
  }
  return a1;
}

void sub_20ED9C600(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20ED9C664(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_20E867F44();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20ED9C72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20ED9C740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20ED9C764(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = a1[7];
  if (v4)
  {
    v5 = a1[8];
    v6 = (void *)a1[7];
    if (v5 != v4)
    {
      v7 = a1[8];
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 16) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)a1[7];
    }
    a1[8] = v4;
    operator delete(v6);
  }
  v10 = a1[4];
  if (v10)
  {
    v11 = a1[5];
    v12 = (void *)a1[4];
    if (v11 != v10)
    {
      v13 = a1[5];
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = (void *)a1[4];
    }
    a1[5] = v10;
    operator delete(v12);
  }
  v16 = (void *)a1[1];
  if (v16)
  {
    a1[2] = v16;
    operator delete(v16);
  }
  return a1;
}

char *sub_20ED9C854(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_20E877A38();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

char *sub_20ED9C9A0(char **a1, const void *a2, uint64_t a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * ((a1[2] - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v6];
  v13 = &v11[24 * v10];
  *((_QWORD *)&v25 + 1) = v13;
  *((_QWORD *)v12 + 1) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 2) = 0;
  v14 = a3 - (_QWORD)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_20E867F44();
    v15 = operator new(v14);
    *(_QWORD *)v12 = v15;
    v16 = (unint64_t)v15 + 4 * (v14 >> 2);
    memcpy(v15, a2, v14);
    *(int64x2_t *)(v12 + 8) = vdupq_n_s64(v16);
  }
  v17 = v12 + 24;
  *(_QWORD *)&v25 = v12 + 24;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v18 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v19 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v4 + 2);
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
    }
    while (v4 != v5);
    v4 = *a1;
    v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v4)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v4);
    }
  }
  if (v4)
    operator delete(v4);
  return v17;
}

void sub_20ED9CB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_20EB143E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20ED9CB94(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_20E867F44();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_20ED9C664(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_20E867E00(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_20ED9C664(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_20E867E00(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_20ED9CDF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20ED9CE00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void ***sub_20ED9CE08(void ***result, void **a2)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20ED9C764(v2 + 3);
    v3 = (char *)*v2;
    if (*v2)
    {
      v4 = (char *)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 6);
          if (v6)
          {
            *((_QWORD *)v4 - 5) = v6;
            operator delete(v6);
          }
          v7 = (void *)*((_QWORD *)v4 - 9);
          if (v7)
          {
            *((_QWORD *)v4 - 8) = v7;
            operator delete(v7);
          }
          v4 -= 72;
        }
        while (v4 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20ED9CEB8(void **a1@<X0>, _DWORD *a2@<X1>, unint64_t **a3@<X8>)
{
  _DWORD *v3;
  unint64_t **v4;
  void **v5;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  char v10;
  void *v11;
  size_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  void *v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  unint64_t **v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *p_p;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  int v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t context;
  uint64_t *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  size_t v72;
  const char *v73;
  unsigned __int8 v74;
  const char *v75;
  size_t v76;
  void *v77;
  unint64_t v78;
  const char *v79;
  uint64_t v80;
  unint64_t **v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  size_t v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  int v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t plan;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  char *v129;
  unsigned __int8 v130;
  uint64_t v131;
  const char *v132;
  NSObject *v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  void *v137;
  _OWORD *v138;
  unint64_t v139;
  unint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  char *category[2];
  unint64_t v146;
  void *object;
  void *v148[2];
  __int128 v149;
  void *__p;
  size_t v151;
  unint64_t v152;
  char v153;
  __int128 v154;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v156;
  const char *v157;
  int v158;
  const char *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  char v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  int v166;
  vImagePixelCount *v167;
  std::__shared_weak_count *v168;
  _QWORD v169[6];

  v3 = a2;
  v4 = a3;
  v169[4] = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 3;
  if (a1[3] != (void *)1)
  {
    *a2 = 1;
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v7 = operator new();
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 1;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(int64x2_t *)(v7 + 48) = vdupq_n_s64(0x12CuLL);
  *(_DWORD *)(v7 + 64) = 1059648963;
  *(_QWORD *)(v7 + 72) = 5;
  *(_OWORD *)(v7 + 80) = xmmword_2102DB6A0;
  *(int32x2_t *)(v7 + 96) = vdup_n_s32(0x3F4CCCCDu);
  *(_DWORD *)(v7 + 104) = 1056964608;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  v8 = operator new(0x838uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C9E9408;
  bzero(v8 + 3, 0x820uLL);
  *(_QWORD *)(v7 + 112) = v8 + 3;
  *(_QWORD *)(v7 + 120) = v8;
  v167 = (vImagePixelCount *)v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E93B8;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v168 = v9;
  if ((void **)v7 != a1)
  {
    v10 = *((_BYTE *)a1 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (v10 >= 0)
        v11 = a1;
      else
        v11 = *a1;
      if (v10 >= 0)
        v12 = *((unsigned __int8 *)a1 + 23);
      else
        v12 = (size_t)a1[1];
      sub_20E867CBC((void **)v7, v11, v12);
    }
    else if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
    {
      sub_20E867BF8((_QWORD *)v7, *a1, (size_t)a1[1]);
    }
    else
    {
      *(_OWORD *)v7 = *(_OWORD *)a1;
      *(_QWORD *)(v7 + 16) = a1[2];
    }
  }
  v13 = *((_OWORD *)v5 + 3);
  *(_OWORD *)(v7 + 56) = *((_OWORD *)v5 + 2);
  *(_OWORD *)(v7 + 72) = v13;
  *(_OWORD *)(v7 + 88) = *((_OWORD *)v5 + 4);
  *(_DWORD *)(v7 + 104) = *((_DWORD *)v5 + 20);
  v14 = *((_OWORD *)v5 + 1);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)v5;
  *(_OWORD *)(v7 + 40) = v14;
  sub_20ED9E7A8(&v165);
  if (**(int **)(v165 + 56) <= 2)
  {
    v15 = *(unsigned __int8 *)(v165 + 72);
    v16 = sub_20E8C31DC(v165, "OSLogSurrogateAppender", 1, 0);
    v17 = v16;
    if (v15 || v16)
    {
      v143 = v15;
      *(_QWORD *)&v154 = &v165;
      *((std::chrono::steady_clock::time_point *)&v154 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v156 = 2;
      v157 = "unknown file";
      v158 = 75;
      v160 = 0;
      v161 = 0;
      v159 = "unknown function";
      v18 = v165;
      if (*(char *)(v165 + 39) < 0)
      {
        v20 = *(const char **)(v165 + 16);
        v19 = *(_QWORD *)(v165 + 24);
        v141 = *(_QWORD *)v154 + 16;
        v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v22 & 1) != 0)
          goto LABEL_22;
      }
      else
      {
        v19 = *(unsigned __int8 *)(v165 + 39);
        v20 = (const char *)(*(_QWORD *)v154 + 16);
        v141 = (uint64_t)v20;
        v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v21 & 1) != 0)
          goto LABEL_22;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v149 && SHIBYTE(v148[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_22:
      if (byte_254A4A50F >= 0)
        v23 = (const char *)&xmmword_254A4A4F8;
      else
        v23 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v24 = byte_254A4A50F;
      else
        v24 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      object = os_log_create(v23, v20);
      v25 = v148;
      if (v24 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v24 >= 0x17)
      {
        v26 = v17;
        v27 = v20;
        v28 = v18;
        v29 = v4;
        v30 = v3;
        v31 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v31 = v24 | 7;
        v32 = v31 + 1;
        v25 = operator new(v31 + 1);
        v148[1] = (void *)v24;
        *(_QWORD *)&v149 = v32 | 0x8000000000000000;
        v148[0] = v25;
        v3 = v30;
        v4 = v29;
        v18 = v28;
        v20 = v27;
        v17 = v26;
      }
      else
      {
        BYTE7(v149) = v24;
        if (!v24)
        {
LABEL_36:
          *((_BYTE *)v25 + v24) = 0;
          BYTE8(v149) = 1;
          p_p = &__p;
          if (v19 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v19 >= 0x17)
          {
            v34 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v34 = v19 | 7;
            v35 = v34 + 1;
            p_p = operator new(v34 + 1);
            v151 = v19;
            v152 = v35 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v152) = v19;
            if (!v19)
              goto LABEL_44;
          }
          memmove(p_p, v20, v19);
LABEL_44:
          *((_BYTE *)p_p + v19) = 0;
          v153 = 1;
          v36 = object;
          if (SHIBYTE(v152) < 0)
            operator delete(__p);
          if (BYTE8(v149) && SBYTE7(v149) < 0)
            operator delete(v148[0]);
          if (object)
            os_release(object);
          if (v17 && *(_QWORD *)(v17 + 24))
          {
            v37 = _os_log_pack_size();
            v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
            v39 = (std::__shared_weak_count *)operator new();
            v40 = v39;
            v39->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v39->__shared_weak_owners_ = 0;
            v39[1].__vftable = v38;
            object = v38;
            v148[0] = v38;
            v148[1] = v39;
            do
              v42 = __ldxr(p_shared_owners);
            while (__stxr(v42 + 1, p_shared_owners));
            v149 = 0uLL;
            __p = 0;
            do
              v43 = __ldaxr(p_shared_owners);
            while (__stlxr(v43 - 1, p_shared_owners));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v40);
            }
            v44 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v45 = operator new();
            v46 = *(unsigned __int8 *)(v18 + 39);
            v47 = v141;
            if ((v46 & 0x80u) != 0)
            {
              v47 = *(_QWORD *)(v18 + 16);
              v46 = *(_QWORD *)(v18 + 24);
            }
            *(_QWORD *)v45 = v44;
            *(_OWORD *)(v45 + 8) = *(_OWORD *)v148;
            v148[0] = 0;
            v148[1] = 0;
            *(_OWORD *)(v45 + 24) = v149;
            v149 = 0uLL;
            *(_QWORD *)(v45 + 40) = v47;
            *(_QWORD *)(v45 + 48) = v46;
            *(_BYTE *)(v45 + 56) = 2;
            category[0] = 0;
            v169[0] = v45;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), v169);
            v48 = v169[0];
            v169[0] = 0;
            if (v48)
            {
              v49 = *(std::__shared_weak_count **)(v48 + 32);
              if (v49)
              {
                v50 = (unint64_t *)&v49->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v52 = *(std::__shared_weak_count **)(v48 + 16);
              if (v52)
              {
                v53 = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              MEMORY[0x212BC6398](v48, 0x10F0C40B62ED6C6);
              category[0] = 0;
            }
            v55 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
            v56 = v143;
            if (*((_QWORD *)&v149 + 1))
            {
              v57 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            v59 = (std::__shared_weak_count *)v148[1];
            if (v148[1])
            {
              v60 = (unint64_t *)((char *)v148[1] + 8);
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
          }
          else
          {
            os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG);
            LOWORD(object) = 0;
            v62 = (void *)_os_log_send_and_compose_impl();
            v56 = v143;
            if (v62)
              free(v62);
          }
          if (v56)
          {
            sub_20E8C003C((uint64_t)&v154, "Using ESPRESSO_ENGINE_ANE_RUNTIME to create Espresso Context");
            sub_20E863570((uint64_t)&v154);
          }
          sub_20E863570((uint64_t)&v154);
          v63 = v161;
          if (v161)
          {
            v64 = (unint64_t *)&v161->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          goto LABEL_92;
        }
      }
      memmove(v25, v23, v24);
      goto LABEL_36;
    }
  }
LABEL_92:
  context = espresso_create_context();
  if (context)
  {
    v67 = (uint64_t *)v167[14];
    *v67 = context;
    goto LABEL_174;
  }
  sub_20ED9E7A8(&v165);
  if (**(int **)(v165 + 56) <= 2)
  {
    v68 = *(unsigned __int8 *)(v165 + 72);
    v69 = sub_20E8C31DC(v165, "OSLogSurrogateAppender", 1, 0);
    v70 = v69;
    if (v68 || v69)
    {
      v144 = v68;
      *(_QWORD *)&v154 = &v165;
      *((std::chrono::steady_clock::time_point *)&v154 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v156 = 2;
      v157 = "unknown file";
      v158 = 78;
      v160 = 0;
      v161 = 0;
      v159 = "unknown function";
      v71 = *(_QWORD *)v154;
      if (*(char *)(*(_QWORD *)v154 + 39) < 0)
      {
        v73 = *(const char **)(v71 + 16);
        v72 = *(_QWORD *)(v71 + 24);
      }
      else
      {
        v72 = *(unsigned __int8 *)(*(_QWORD *)v154 + 39);
        v73 = (const char *)(*(_QWORD *)v154 + 16);
      }
      v142 = *(_QWORD *)v154 + 16;
      v74 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v149 && SHIBYTE(v148[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A50F >= 0)
        v75 = (const char *)&xmmword_254A4A4F8;
      else
        v75 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v76 = byte_254A4A50F;
      else
        v76 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      object = os_log_create(v75, v73);
      v77 = v148;
      if (v76 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v76 >= 0x17)
      {
        v78 = v70;
        v79 = v73;
        v80 = v71;
        v81 = v4;
        v82 = v3;
        v83 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v83 = v76 | 7;
        v84 = v83 + 1;
        v77 = operator new(v83 + 1);
        v148[1] = (void *)v76;
        *(_QWORD *)&v149 = v84 | 0x8000000000000000;
        v148[0] = v77;
        v3 = v82;
        v4 = v81;
        v71 = v80;
        v73 = v79;
        v70 = v78;
      }
      else
      {
        BYTE7(v149) = v76;
        if (!v76)
        {
LABEL_115:
          *((_BYTE *)v77 + v76) = 0;
          BYTE8(v149) = 1;
          v85 = &__p;
          if (v72 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v72 >= 0x17)
          {
            v86 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v72 | 7) != 0x17)
              v86 = v72 | 7;
            v87 = v86 + 1;
            v85 = operator new(v86 + 1);
            v151 = v72;
            v152 = v87 | 0x8000000000000000;
            __p = v85;
          }
          else
          {
            HIBYTE(v152) = v72;
            if (!v72)
              goto LABEL_123;
          }
          memmove(v85, v73, v72);
LABEL_123:
          *((_BYTE *)v85 + v72) = 0;
          v153 = 1;
          v88 = object;
          if (SHIBYTE(v152) < 0)
            operator delete(__p);
          if (BYTE8(v149) && SBYTE7(v149) < 0)
            operator delete(v148[0]);
          if (object)
            os_release(object);
          if (v70 && *(_QWORD *)(v70 + 24))
          {
            v89 = _os_log_pack_size();
            v90 = (std::__shared_weak_count_vtbl *)operator new(v89, (std::align_val_t)8uLL);
            v91 = (std::__shared_weak_count *)operator new();
            v92 = v91;
            v91->__shared_owners_ = 0;
            v93 = (unint64_t *)&v91->__shared_owners_;
            v91->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v91->__shared_weak_owners_ = 0;
            v91[1].__vftable = v90;
            object = v90;
            v148[0] = v90;
            v148[1] = v91;
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
            v149 = 0uLL;
            __p = 0;
            do
              v95 = __ldaxr(v93);
            while (__stlxr(v95 - 1, v93));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v92);
            }
            v96 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v97 = operator new();
            v98 = *(unsigned __int8 *)(v71 + 39);
            v99 = v142;
            if ((v98 & 0x80u) != 0)
            {
              v99 = *(_QWORD *)(v71 + 16);
              v98 = *(_QWORD *)(v71 + 24);
            }
            *(_QWORD *)v97 = v96;
            *(_OWORD *)(v97 + 8) = *(_OWORD *)v148;
            v148[0] = 0;
            v148[1] = 0;
            *(_OWORD *)(v97 + 24) = v149;
            v149 = 0uLL;
            *(_QWORD *)(v97 + 40) = v99;
            *(_QWORD *)(v97 + 48) = v98;
            *(_BYTE *)(v97 + 56) = 2;
            category[0] = 0;
            v169[0] = v97;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v70 + 24) + 40))(*(_QWORD *)(v70 + 24), v169);
            v100 = v169[0];
            v169[0] = 0;
            if (v100)
            {
              v101 = *(std::__shared_weak_count **)(v100 + 32);
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              v104 = *(std::__shared_weak_count **)(v100 + 16);
              if (v104)
              {
                v105 = (unint64_t *)&v104->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              MEMORY[0x212BC6398](v100, 0x10F0C40B62ED6C6);
              category[0] = 0;
            }
            v107 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
            v108 = v144;
            if (*((_QWORD *)&v149 + 1))
            {
              v109 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            v111 = (std::__shared_weak_count *)v148[1];
            if (v148[1])
            {
              v112 = (unint64_t *)((char *)v148[1] + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
          }
          else
          {
            os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG);
            LOWORD(object) = 0;
            v114 = (void *)_os_log_send_and_compose_impl();
            v108 = v144;
            if (v114)
              free(v114);
          }
          if (v108)
          {
            sub_20E8C003C((uint64_t)&v154, "Using ESPRESSO_ENGINE_MPS to create Espresso Context");
            sub_20E863570((uint64_t)&v154);
          }
          sub_20E863570((uint64_t)&v154);
          v115 = v161;
          if (v161)
          {
            v116 = (unint64_t *)&v161->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          goto LABEL_171;
        }
      }
      memmove(v77, v75, v76);
      goto LABEL_115;
    }
  }
LABEL_171:
  v118 = espresso_create_context();
  if (espresso_context_set_low_precision_accumulation()
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ClassAgnosticObjectDetector.cpp", 82, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v67 = (uint64_t *)v167[14];
  *v67 = v118;
  if (!v118)
  {
    *v3 = 3;
    *v4 = 0;
    v4[1] = 0;
    v120 = v168;
    if (!v168)
      return;
    goto LABEL_198;
  }
LABEL_174:
  plan = espresso_create_plan();
  v67[1] = plan;
  if (!plan)
  {
    *v3 = 4;
    *v4 = 0;
    v4[1] = 0;
    v120 = v168;
    if (!v168)
      return;
    goto LABEL_198;
  }
  if (espresso_plan_add_network())
  {
    *v3 = 5;
    *v4 = 0;
    v4[1] = 0;
    v120 = v168;
    if (!v168)
      return;
    goto LABEL_198;
  }
  if (espresso_network_declare_input())
  {
    *v3 = 6;
    *v4 = 0;
    v4[1] = 0;
    v120 = v168;
    if (!v168)
      return;
    goto LABEL_198;
  }
  if (espresso_network_declare_output()
    || espresso_network_declare_output()
    || espresso_network_declare_output()
    || espresso_network_declare_output()
    || espresso_network_declare_output()
    || espresso_network_declare_output()
    || espresso_network_declare_output()
    || espresso_network_declare_output()
    || espresso_network_declare_output()
    || espresso_network_declare_output()
    || espresso_network_declare_output()
    || espresso_network_declare_output())
  {
    *v3 = 7;
    *v4 = 0;
    v4[1] = 0;
    v120 = v168;
    if (!v168)
      return;
    goto LABEL_198;
  }
  if (espresso_plan_build())
  {
    sub_20ED9E7A8(&v165);
    if (**(int **)(v165 + 56) <= 5)
    {
      v123 = *(unsigned __int8 *)(v165 + 72);
      v124 = sub_20E8C31DC(v165, "OSLogSurrogateAppender", 1, 0);
      v125 = v124 ? v124 + 16 : 0;
      if (v123 || v124)
      {
        *(_QWORD *)&v154 = &v165;
        *((std::chrono::steady_clock::time_point *)&v154 + 1) = std::chrono::steady_clock::now();
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v156 = 5;
        v157 = "unknown file";
        v158 = 280;
        v160 = 0;
        v161 = 0;
        v159 = "unknown function";
        v126 = *(_QWORD *)v154;
        v127 = (uint64_t *)(*(_QWORD *)v154 + 16);
        if (*(char *)(*(_QWORD *)v154 + 39) < 0)
        {
          v129 = *(char **)(v126 + 16);
          v128 = *(char **)(v126 + 24);
        }
        else
        {
          v128 = (char *)*(unsigned __int8 *)(*(_QWORD *)v154 + 39);
          v129 = (char *)(*(_QWORD *)v154 + 16);
        }
        category[0] = v129;
        category[1] = v128;
        v130 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if ((_BYTE)v149 && SHIBYTE(v148[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v131 = byte_254A4A50F;
        if (byte_254A4A50F >= 0)
        {
          v132 = (const char *)&xmmword_254A4A4F8;
        }
        else
        {
          v131 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
          v132 = (const char *)xmmword_254A4A4F8;
        }
        v169[0] = v132;
        v169[1] = v131;
        object = os_log_create(v132, category[0]);
        sub_20E86E5A8(v148, (uint64_t)v169);
        sub_20E86E5A8(&__p, (uint64_t)category);
        v133 = object;
        sub_20E86E44C((uint64_t)&object);
        sub_20EDA0838(v125, v127, v133, OS_LOG_TYPE_ERROR);
        if (v123)
        {
          sub_20E8C003C((uint64_t)&v154, "Failed to build plan");
          sub_20E863570((uint64_t)&v154);
        }
        sub_20E863714((uint64_t)&v154);
      }
    }
  }
  if (espresso_network_query_blob_dimensions())
  {
    *v3 = 9;
    *v4 = 0;
    v4[1] = 0;
    v120 = v168;
    if (!v168)
      return;
    goto LABEL_198;
  }
  v134 = v167;
  if (vImageBuffer_Init((vImage_Buffer *)(v167[14] + 2048), v167[6], v167[7], 0x20u, 0x100u)
    || (v166 = 0,
        v165 = xmmword_210377A00,
        v135 = v134[14],
        v136 = *(_OWORD *)(v135 + 2064),
        v163 = *(_OWORD *)(v135 + 2048),
        v164 = v136,
        espresso_network_bind_input_vimagebuffer_bgra8()))
  {
    *v3 = 10;
    *v4 = 0;
    v4[1] = 0;
    v120 = v168;
    if (!v168)
      return;
    goto LABEL_198;
  }
  if (espresso_network_bind_buffer()
    || espresso_network_bind_buffer()
    || espresso_network_bind_buffer()
    || espresso_network_bind_buffer()
    || espresso_network_bind_buffer()
    || espresso_network_bind_buffer()
    || espresso_network_bind_buffer()
    || espresso_network_bind_buffer()
    || espresso_network_bind_buffer()
    || espresso_network_bind_buffer()
    || espresso_network_bind_buffer()
    || espresso_network_bind_buffer())
  {
    *v3 = 11;
    *v4 = 0;
    v4[1] = 0;
    v120 = v168;
    if (!v168)
      return;
    goto LABEL_198;
  }
  sub_20ED9E89C((uint64_t)&v154);
  v162 = 1;
  sub_20ED9AE34((uint64_t)&object, &v154);
  sub_20ED996F4(object, v134[6], v134[7], (uint64_t *)category);
  v137 = (void *)v134[17];
  if (v137)
  {
    v134[18] = (unint64_t)v137;
    operator delete(v137);
    v134[17] = 0;
    v134[18] = 0;
    v134[19] = 0;
  }
  *(_OWORD *)(v134 + 17) = *(_OWORD *)category;
  v134[19] = v146;
  v138 = (_OWORD *)operator new();
  *v138 = xmmword_210377A10;
  v139 = v134[16];
  v134[16] = (unint64_t)v138;
  if (v139)
    MEMORY[0x212BC6398](v139, 0x1000C40451B5BE8);
  *v3 = 0;
  v140 = (unint64_t *)v168;
  *v4 = v134;
  v4[1] = v140;
  v167 = 0;
  v168 = 0;
  sub_20ED9E990((uint64_t)&object);
  sub_20ED9C4E8(&v154);
  v120 = v168;
  if (v168)
  {
LABEL_198:
    v121 = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
}

void sub_20ED9E574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a44);
  sub_20E86665C(v44 - 144);
  _Unwind_Resume(a1);
}

void sub_20ED9E7A8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F940);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F940))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.odt.image_detection_and_tracking");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F938);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F940);
  }
  *a1 = qword_254A5F938;
}

void sub_20ED9E844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F940);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F940);
  _Unwind_Resume(a1);
}

uint64_t sub_20ED9E89C(uint64_t a1)
{
  _DWORD *v2;
  _OWORD *v3;

  *(_OWORD *)a1 = xmmword_210377A20;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v2 = operator new(0x14uLL);
  *(_QWORD *)(a1 + 48) = v2 + 5;
  *(_QWORD *)(a1 + 56) = v2 + 5;
  v2[4] = 1051372203;
  *(_OWORD *)v2 = xmmword_210377A44;
  *(_QWORD *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 256;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v3 = operator new(0x60uLL);
  *(_QWORD *)(a1 + 136) = v3 + 6;
  *(_QWORD *)(a1 + 144) = v3 + 6;
  v3[2] = xmmword_210377A78;
  v3[3] = unk_210377A88;
  v3[4] = xmmword_210377A98;
  v3[5] = unk_210377AA8;
  *v3 = xmmword_210377A58;
  v3[1] = unk_210377A68;
  *(_QWORD *)(a1 + 128) = v3;
  return a1;
}

void sub_20ED9E968(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v4;

  v1[6] = v2;
  operator delete(v2);
  v4 = (void *)v1[2];
  if (v4)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20ED9E990(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(_QWORD *)(a1 + 112) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  sub_20ED9CE08((void ***)a1, 0);
  return a1;
}

uint64_t sub_20ED9EA0C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 112);
  if (v2[1])
  {
    espresso_plan_destroy();
    v2 = *(_QWORD **)(a1 + 112);
  }
  if (*v2)
  {
    espresso_context_destroy();
    v2 = *(_QWORD **)(a1 + 112);
  }
  v3 = (void *)v2[256];
  if (v3)
    free(v3);
  v4 = *(void **)(a1 + 136);
  if (v4)
  {
    *(_QWORD *)(a1 + 144) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v5)
    MEMORY[0x212BC6398](v5, 0x1000C40451B5BE8);
  v6 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v6)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_15:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_20ED9EAF0(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  char *v51;
  uint64_t v52;
  float v53;
  unint64_t v54;
  uint64_t v55;
  float v56;
  float *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  double v67;
  double v68;
  float v69;
  float v70;
  float v71;
  double v72;
  double v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  char *v81;
  void **v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  float v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *i;
  int v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float32x2_t v104;
  BOOL v106;
  float v107;
  BOOL v108;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *j;
  int v116;
  float v117;
  int64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  char *k;
  int v137;
  int64_t v138;
  unint64_t v139;
  uint64_t *v140;
  char *v141;
  unint64_t v142;
  _OWORD *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  uint64_t *v161;
  int64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _OWORD *v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  unint64_t v173;
  char *v174;
  BOOL v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  size_t v179;
  char *v180;
  char *m;
  int v182;
  unsigned __int8 v183;
  const char *v184;
  size_t v185;
  _BYTE *v186;
  uint64_t v187;
  uint64_t v188;
  void **v189;
  uint64_t v190;
  uint64_t v191;
  NSObject *v192;
  int v193;
  size_t v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  size_t v197;
  size_t v198;
  _QWORD *p_dst;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char v204;
  _QWORD *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *p_shared_owners;
  unint64_t v209;
  void *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  const char *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  char **v254;
  float *v255;
  float v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  unint64_t v267;
  uint64_t v268;
  char *v269;
  char *__p;
  char *__pa;
  float v272;
  unint64_t v273;
  float v274;
  char *v275;
  void *v276;
  float v277;
  char *v278;
  char *__s;
  float __sa;
  unint64_t __sb;
  int v282;
  float v283;
  char *v284;
  uint64_t *v285;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v287;
  int v288;
  const char *v289;
  int v290;
  const char *v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  uint64_t v294;
  __int128 v295;
  std::__shared_weak_count *v296;
  char *v297;
  std::__shared_weak_count *v298;
  _QWORD *__dst;
  __int128 v300;
  _BYTE v301[40];
  void *v302[2];
  unint64_t v303;
  char v304;
  _QWORD v305[5];

  v305[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (*(_QWORD *)(a2 + 16) != 4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ClassAgnosticObjectDetector.cpp", 363, (uint64_t)"input_image.num_channels() == 4", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(a2 + 56) != 4&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ClassAgnosticObjectDetector.cpp", 364, (uint64_t)"input_image.bytes_per_pixel() == 4", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(a2 + 32) != *(_QWORD *)(a1 + 56)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ClassAgnosticObjectDetector.cpp",
         365,
         (uint64_t)"input_image.width() == config_.input_image_width",
         48,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0)
    || *(_QWORD *)(a2 + 48) != *(_QWORD *)(a1 + 48)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ClassAgnosticObjectDetector.cpp", 366, (uint64_t)"input_image.height() == config_.input_image_height", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(char **)(v6 + 2048);
  v8 = *(_QWORD *)(v6 + 2072);
  v9 = *(_QWORD *)(a2 + 40);
  if (v8 == v9)
  {
    v10 = *(_QWORD *)(a2 + 48) * v8;
    if (v10)
      memmove(v7, *(const void **)(a2 + 88), v10);
  }
  else if (*(_QWORD *)(a2 + 48))
  {
    v11 = *(_QWORD *)(a2 + 16) * *(_QWORD *)(a2 + 32);
    if (v11)
    {
      v12 = 0;
      v13 = *(char **)(a2 + 88);
      do
      {
        memmove(v7, v13, v11);
        v13 += v9;
        v7 += v8;
        ++v12;
      }
      while (v12 < *(_QWORD *)(a2 + 48));
    }
  }
  kdebug_trace();
  kdebug_trace();
  v14 = espresso_plan_execute_sync();
  kdebug_trace();
  v254 = a3;
  if (v14)
  {
    sub_20ED9E7A8(&v294);
    if (**(int **)(v294 + 56) > 2
      || (v15 = *(unsigned __int8 *)(v294 + 72),
          v16 = sub_20E8C31DC(v294, "OSLogSurrogateAppender", 1, 0),
          v17 = v16,
          !v15)
      && !v16)
    {
LABEL_333:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    v285 = &v294;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v287 = std::chrono::system_clock::now().__d_.__rep_;
    v288 = 2;
    v289 = "unknown file";
    v290 = 391;
    v292 = 0;
    v293 = 0;
    v291 = "unknown function";
    espresso_plan_get_error_info();
    __s = v18;
    v19 = v294;
    v20 = (const char *)(v294 + 16);
    v276 = (void *)(v294 + 16);
    if (*(char *)(v294 + 39) < 0)
    {
      v20 = *(const char **)(v294 + 16);
      v21 = *(_QWORD *)(v294 + 24);
      v282 = v15;
      v183 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v183 & 1) != 0)
        goto LABEL_225;
    }
    else
    {
      v21 = *(unsigned __int8 *)(v294 + 39);
      v282 = v15;
      v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v22 & 1) != 0)
        goto LABEL_225;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v301);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v301);
      if (v301[24] && (v301[23] & 0x80000000) != 0)
        operator delete(*(void **)v301);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_225:
    if (byte_254A4A4F8[23] >= 0)
      v184 = byte_254A4A4F8;
    else
      v184 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v185 = byte_254A4A4F8[23];
    else
      v185 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v301 = os_log_create(v184, v20);
    v186 = &v301[8];
    if (v185 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v185 >= 0x17)
    {
      v187 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v185 | 7) != 0x17)
        v187 = v185 | 7;
      v188 = v187 + 1;
      v186 = operator new(v187 + 1);
      *(_QWORD *)&v301[16] = v185;
      *(_QWORD *)&v301[24] = v188 | 0x8000000000000000;
      *(_QWORD *)&v301[8] = v186;
      a3 = v254;
    }
    else
    {
      v301[31] = v185;
      if (!v185)
      {
LABEL_239:
        v186[v185] = 0;
        v301[32] = 1;
        v189 = v302;
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v21 >= 0x17)
        {
          v190 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v190 = v21 | 7;
          v191 = v190 + 1;
          v189 = (void **)operator new(v190 + 1);
          v302[1] = (void *)v21;
          v303 = v191 | 0x8000000000000000;
          v302[0] = v189;
        }
        else
        {
          HIBYTE(v303) = v21;
          if (!v21)
          {
LABEL_247:
            *((_BYTE *)v189 + v21) = 0;
            v304 = 1;
            v192 = *(NSObject **)v301;
            if (SHIBYTE(v303) < 0)
              operator delete(v302[0]);
            v193 = v282;
            if (v301[32] && (v301[31] & 0x80000000) != 0)
              operator delete(*(void **)&v301[8]);
            if (*(_QWORD *)v301)
              os_release(*(void **)v301);
            if (!v17 || !*(_QWORD *)(v17 + 24))
            {
              os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)v301 = 136315138;
              *(_QWORD *)&v301[4] = __s;
              v200 = (void *)_os_log_send_and_compose_impl();
              if (v200)
                free(v200);
              goto LABEL_326;
            }
            v194 = _os_log_pack_size();
            v195 = (std::__shared_weak_count_vtbl *)operator new(v194, (std::align_val_t)8uLL);
            v196 = (std::__shared_weak_count *)operator new();
            v196->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v196->__shared_owners_ = 0;
            v196->__shared_weak_owners_ = 0;
            v196[1].__vftable = v195;
            *(_QWORD *)&v295 = v195;
            *((_QWORD *)&v295 + 1) = v195;
            v297 = 0;
            v298 = 0;
            v296 = v196;
            v197 = strlen(__s);
            if (v197 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v198 = v197;
            if (v197 >= 0x17)
            {
              v201 = (v197 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v197 | 7) != 0x17)
                v201 = v197 | 7;
              v202 = v201 + 1;
              p_dst = operator new(v201 + 1);
              *(_QWORD *)&v300 = v198;
              *((_QWORD *)&v300 + 1) = v202 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v300) = v197;
              p_dst = &__dst;
              if (!v197)
              {
LABEL_266:
                *((_BYTE *)p_dst + v198) = 0;
                v203 = __dst;
                v305[0] = v300;
                *(_QWORD *)((char *)v305 + 7) = *(_QWORD *)((char *)&v300 + 7);
                v204 = HIBYTE(v300);
                v205 = operator new(0x38uLL);
                v205[1] = 0;
                v205[2] = 0;
                v205[3] = off_24C9ABC20;
                *v205 = &off_24C9ABBD0;
                v206 = v305[0];
                v205[4] = v203;
                v205[5] = v206;
                *(_QWORD *)((char *)v205 + 47) = *(_QWORD *)((char *)v305 + 7);
                *((_BYTE *)v205 + 55) = v204;
                v305[0] = 0;
                *(_QWORD *)((char *)v305 + 7) = 0;
                v207 = v298;
                v297 = (char *)(v205 + 3);
                v298 = (std::__shared_weak_count *)v205;
                v193 = v282;
                if (v207)
                {
                  p_shared_owners = (unint64_t *)&v207->__shared_owners_;
                  do
                    v209 = __ldaxr(p_shared_owners);
                  while (__stlxr(v209 - 1, p_shared_owners));
                  if (!v209)
                  {
                    ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                    std::__shared_weak_count::__release_weak(v207);
                  }
                }
                *(_OWORD *)v301 = v295;
                v210 = v297;
                *(_QWORD *)&v301[16] = v296;
                if (v296)
                {
                  v211 = (unint64_t *)&v296->__shared_owners_;
                  do
                    v212 = __ldxr(v211);
                  while (__stxr(v212 + 1, v211));
                }
                v213 = v298;
                *(_QWORD *)&v301[24] = v210;
                *(_QWORD *)&v301[32] = v298;
                if (v298)
                {
                  v214 = (unint64_t *)&v298->__shared_owners_;
                  do
                    v215 = __ldxr(v214);
                  while (__stxr(v215 + 1, v214));
                  v302[0] = v210;
                  do
                    v216 = __ldaxr(v214);
                  while (__stlxr(v216 - 1, v214));
                  if (!v216)
                  {
                    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                    std::__shared_weak_count::__release_weak(v213);
                  }
                }
                else
                {
                  v302[0] = v210;
                }
                v217 = v296;
                if (v296)
                {
                  v218 = (unint64_t *)&v296->__shared_owners_;
                  do
                    v219 = __ldaxr(v218);
                  while (__stlxr(v219 - 1, v218));
                  if (!v219)
                  {
                    ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                    std::__shared_weak_count::__release_weak(v217);
                  }
                }
                v220 = *(_QWORD *)v301;
                if (*((char *)v302[0] + 31) >= 0)
                  v221 = (char *)v302[0] + 8;
                else
                  v221 = (char *)*((_QWORD *)v302[0] + 1);
                v222 = _os_log_pack_fill();
                *(_DWORD *)v222 = 136315138;
                *(_QWORD *)(v222 + 4) = v221;
                v223 = operator new();
                v224 = *(unsigned __int8 *)(v19 + 39);
                v225 = *(void **)(v19 + 16);
                v226 = *(_QWORD *)(v19 + 24);
                v227 = *(_OWORD *)&v301[24];
                *(_OWORD *)(v223 + 8) = *(_OWORD *)&v301[8];
                if ((v224 & 0x80u) != 0)
                  v224 = v226;
                else
                  v225 = v276;
                *(_QWORD *)v223 = v220;
                *(_QWORD *)&v301[8] = 0;
                *(_QWORD *)&v301[16] = 0;
                *(_OWORD *)(v223 + 24) = v227;
                *(_QWORD *)&v301[24] = 0;
                *(_QWORD *)&v301[32] = 0;
                *(_QWORD *)(v223 + 40) = v225;
                *(_QWORD *)(v223 + 48) = v224;
                *(_BYTE *)(v223 + 56) = 2;
                __dst = 0;
                *(_QWORD *)&v295 = v223;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &v295);
                v228 = v295;
                *(_QWORD *)&v295 = 0;
                if (v228)
                {
                  v229 = *(std::__shared_weak_count **)(v228 + 32);
                  if (v229)
                  {
                    v230 = (unint64_t *)&v229->__shared_owners_;
                    do
                      v231 = __ldaxr(v230);
                    while (__stlxr(v231 - 1, v230));
                    if (!v231)
                    {
                      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                      std::__shared_weak_count::__release_weak(v229);
                    }
                  }
                  v232 = *(std::__shared_weak_count **)(v228 + 16);
                  if (v232)
                  {
                    v233 = (unint64_t *)&v232->__shared_owners_;
                    do
                      v234 = __ldaxr(v233);
                    while (__stlxr(v234 - 1, v233));
                    if (!v234)
                    {
                      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                      std::__shared_weak_count::__release_weak(v232);
                    }
                  }
                  MEMORY[0x212BC6398](v228, 0x10F0C40B62ED6C6);
                  v235 = __dst;
                  __dst = 0;
                  if (v235)
                  {
                    v236 = (std::__shared_weak_count *)v235[4];
                    if (v236)
                    {
                      v237 = (unint64_t *)&v236->__shared_owners_;
                      do
                        v238 = __ldaxr(v237);
                      while (__stlxr(v238 - 1, v237));
                      if (!v238)
                      {
                        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                        std::__shared_weak_count::__release_weak(v236);
                      }
                    }
                    v239 = (std::__shared_weak_count *)v235[2];
                    if (v239)
                    {
                      v240 = (unint64_t *)&v239->__shared_owners_;
                      do
                        v241 = __ldaxr(v240);
                      while (__stlxr(v241 - 1, v240));
                      if (!v241)
                      {
                        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                        std::__shared_weak_count::__release_weak(v239);
                      }
                    }
                    MEMORY[0x212BC6398](v235, 0x10F0C40B62ED6C6);
                  }
                }
                v242 = *(std::__shared_weak_count **)&v301[32];
                if (*(_QWORD *)&v301[32])
                {
                  v243 = (unint64_t *)(*(_QWORD *)&v301[32] + 8);
                  do
                    v244 = __ldaxr(v243);
                  while (__stlxr(v244 - 1, v243));
                  if (!v244)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
                v245 = *(std::__shared_weak_count **)&v301[16];
                if (*(_QWORD *)&v301[16])
                {
                  v246 = (unint64_t *)(*(_QWORD *)&v301[16] + 8);
                  do
                    v247 = __ldaxr(v246);
                  while (__stlxr(v247 - 1, v246));
                  if (!v247)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                }
LABEL_326:
                if (v193)
                {
                  espresso_plan_get_error_info();
                  sub_20E8C003C((uint64_t)&v285, "Inference failed because %s", v248);
                  sub_20E863570((uint64_t)&v285);
                }
                sub_20E863570((uint64_t)&v285);
                v249 = v293;
                if (v293)
                {
                  v250 = (unint64_t *)&v293->__shared_owners_;
                  do
                    v251 = __ldaxr(v250);
                  while (__stlxr(v251 - 1, v250));
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                    std::__shared_weak_count::__release_weak(v249);
                  }
                }
                goto LABEL_333;
              }
            }
            memcpy(p_dst, __s, v198);
            goto LABEL_266;
          }
        }
        memmove(v189, v20, v21);
        goto LABEL_247;
      }
    }
    memmove(v186, v184, v185);
    goto LABEL_239;
  }
  memset(v301, 0, 32);
  *(_DWORD *)&v301[32] = 733222060;
  kdebug_trace();
  v23 = *(_QWORD *)(a1 + 112);
  v256 = *(float *)(a1 + 80);
  v255 = *(float **)(a1 + 128);
  v24 = *(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136);
  v25 = v24 >> 4;
  if (v24)
  {
    if (v24 < 0)
      sub_20E867F44();
    v26 = (char *)operator new(20 * v25);
    bzero(v26, 20 * ((20 * v25 - 20) / 0x14uLL) + 20);
    __p = v26;
    v253 = &v26[20 * ((20 * v25 - 20) / 0x14uLL) + 20];
  }
  else
  {
    v253 = 0;
    __p = 0;
  }
  v252 = v25;
  v27 = 0;
  v28 = 0;
  v257 = v23 + 32;
  v258 = v23 + 1040;
  v29 = 0.5;
  do
  {
    v30 = (uint64_t *)(v258 + 168 * v28);
    v31 = (uint64_t *)(v257 + 168 * v28);
    v32 = *v30;
    v33 = *v31;
    v34 = v31[11];
    v262 = v31[10];
    v35 = v31[12];
    v36 = v35 >> 2;
    v267 = v30[12] / (v35 >> 2);
    if (v267 == 1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ClassAgnosticObjectDetector.cpp", 163, (uint64_t)"num_classes > 0", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v259 = v28;
    if (v34 && v262 && v35 >= 4)
    {
      v37 = 0;
      v38 = (_QWORD *)(v258 + 168 * v28);
      v266 = v38 + 15;
      v264 = v38 + 17;
      v265 = v38 + 16;
      v39 = v257 + 168 * v28;
      v40 = *(_QWORD *)(v39 + 136);
      v260 = *(_QWORD *)(v39 + 128);
      v261 = v34;
      v41 = *(_QWORD *)(a1 + 136);
      __sa = *v255;
      v277 = v255[1];
      v274 = v255[2];
      v272 = v255[3];
      do
      {
        v42 = 0;
        v268 = v37;
        v263 = v37 * v260;
        do
        {
          v43 = 0;
          v44 = v42 + v263;
          do
          {
            if (v267 == 1)
            {
              v53 = -3.4028e38;
            }
            else
            {
              v52 = 0;
              v53 = -3.4028e38;
              v54 = v267 - 1;
              do
              {
                v55 = *v266 * v42 + *v265 * v268 + (v43 * v267 + 1 + v52) * *v264;
                if (v53 < *(float *)(v32 + 4 * v55))
                  v53 = *(float *)(v32 + 4 * v55);
                ++v52;
                --v54;
              }
              while (v54);
            }
            v283 = expf(-v53);
            v56 = *(float *)(v33 + 4 * (v44 + ((4 * v43) | 1) * v40));
            v57 = (float *)(v41 + 16 * v27);
            v58 = v57[3];
            v59 = v57[1];
            v60 = v57[2] - *v57;
            v61 = v60 * v29 + *v57;
            v62 = *(float *)(v33 + 4 * (v44 + 4 * v43 * v40)) / __sa;
            v63 = *(float *)(v33 + 4 * (v44 + ((4 * v43) | 2) * v40)) / v274;
            v64 = expf(*(float *)(v33 + 4 * (v44 + ((4 * v43) | 3) * v40)) / v272);
            v65 = expf(v63);
            v66 = v62 * v60;
            v29 = 0.5;
            v67 = (float)(v66 + v61);
            v68 = (float)(v65 * v60) * 0.5;
            v69 = v67 - v68;
            v70 = 0.0;
            if (v69 < 0.0 || (v50 = 1.0, v70 = v67 - v68, v69 <= 1.0))
              v50 = v70;
            v71 = (float)(v58 - v59) * 0.5 + v59;
            v72 = (float)((float)((float)(v56 / v277) * (float)(v58 - v59)) + v71);
            v73 = (float)(v64 * (float)(v58 - v59)) * 0.5;
            v74 = v72 - v73;
            v75 = 0.0;
            if (v74 < 0.0 || (v48 = 1.0, v75 = v72 - v73, v74 <= 1.0))
              v48 = v75;
            v76 = v68 + v67;
            v77 = 0.0;
            if (v76 < 0.0 || (v78 = 1.0, v77 = v76, v76 <= 1.0))
              v78 = v77;
            v79 = v73 + v72;
            v80 = 0.0;
            if (v79 < 0.0 || (v45 = 1.0, v80 = v79, v79 <= 1.0))
              v45 = v80;
            if (v48 <= v45)
              v47 = v45;
            else
              v47 = v48;
            if (v48 > v45)
              v48 = v45;
            if (v50 <= v78)
              v49 = v78;
            else
              v49 = v50;
            if (v50 > v78)
              v50 = v78;
            v51 = &__p[20 * v27];
            v46 = 1.0 / (v283 + 1.0);
            *(float *)v51 = v46;
            *(_QWORD *)(v51 + 4) = LODWORD(v48) | ((unint64_t)LODWORD(v50) << 32);
            *(_QWORD *)(v51 + 12) = LODWORD(v47) | ((unint64_t)LODWORD(v49) << 32);
            ++v27;
            ++v43;
          }
          while (v43 != v36);
          ++v42;
        }
        while (v42 != v262);
        v37 = v268 + 1;
      }
      while (v268 + 1 != v261);
    }
    v28 = v259 + 1;
  }
  while (v259 != 5);
  v81 = v253;
  v82 = (void **)v254;
  if (0xCCCCCCCCCCCCCCCDLL * ((v253 - __p) >> 2) != v252
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ClassAgnosticObjectDetector.cpp", 206, (uint64_t)"results.size() == num_anchor_boxes", 34, (uint64_t)"Number of predictions must equal to number of anchor boxes.", 59, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *v254 = 0;
  v254[1] = 0;
  v254[2] = 0;
  if (__p == v253)
  {
    v86 = 0;
  }
  else
  {
    v83 = __p;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    do
    {
      v87 = *(float *)v83;
      if (*(float *)v83 >= v256)
      {
        if (v86 < v85)
        {
          *(float *)v86 = v87;
          *(_QWORD *)(v86 + 4) = *(_QWORD *)(v83 + 4);
          *(_QWORD *)(v86 + 12) = *(_QWORD *)(v83 + 12);
          v86 += 20;
        }
        else
        {
          v88 = 0xCCCCCCCCCCCCCCCDLL * ((v86 - v84) >> 2) + 1;
          if (v88 > 0xCCCCCCCCCCCCCCCLL)
            sub_20E867F44();
          if (0x999999999999999ALL * ((v85 - v84) >> 2) > v88)
            v88 = 0x999999999999999ALL * ((v85 - v84) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((v85 - v84) >> 2) >= 0x666666666666666)
            v89 = 0xCCCCCCCCCCCCCCCLL;
          else
            v89 = v88;
          if (v89 > 0xCCCCCCCCCCCCCCCLL)
            sub_20E877A38();
          v90 = (char *)operator new(20 * v89);
          v91 = &v90[4 * ((v86 - v84) >> 2)];
          *(float *)v91 = v87;
          *(_OWORD *)(v91 + 4) = *(_OWORD *)(v83 + 4);
          for (i = v91; v86 != v84; *(_QWORD *)(i + 12) = *(_QWORD *)(v86 + 12))
          {
            v93 = *((_DWORD *)v86 - 5);
            v86 -= 20;
            *((_DWORD *)i - 5) = v93;
            i -= 20;
            *(_QWORD *)(i + 4) = *(_QWORD *)(v86 + 4);
          }
          v85 = &v90[20 * v89];
          v86 = v91 + 20;
          *v254 = i;
          v254[1] = v91 + 20;
          v254[2] = v85;
          if (v84)
            operator delete(v84);
          v84 = i;
          v81 = v253;
        }
        v254[1] = v86;
      }
      v83 += 20;
    }
    while (v83 != v81);
  }
  if (__p)
    operator delete(__p);
  v94 = *v254;
  if (*v254 == v86)
  {
    v95 = 0;
    v96 = 0;
    v97 = 0;
    if (v86)
    {
LABEL_126:
      v254[1] = v86;
      operator delete(v86);
      *v254 = 0;
      v254[1] = 0;
      v254[2] = 0;
    }
  }
  else
  {
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v98 = *(float *)(a1 + 84);
    v99 = *(float *)(a1 + 88);
    v100 = *(float *)(a1 + 92);
    v101 = *(float *)(a1 + 96);
    v102 = *(float *)(a1 + 100);
    v103 = *(float *)(a1 + 104);
    do
    {
      v104 = vsub_f32(*(float32x2_t *)(v94 + 12), *(float32x2_t *)(v94 + 4));
      if (v104.f32[1] >= v98 && v104.f32[0] >= v99)
      {
        v106 = v104.f32[1] <= v101 || v104.f32[0] <= v102;
        v107 = v104.f32[1] * v104.f32[0];
        v108 = v106 && v107 <= v103;
        if (v108 && v107 >= v100)
        {
          if (v96 < v97)
          {
            *(_DWORD *)v96 = *(_DWORD *)v94;
            *(_QWORD *)(v96 + 4) = *(_QWORD *)(v94 + 4);
            *(_QWORD *)(v96 + 12) = *(_QWORD *)(v94 + 12);
            v96 += 20;
          }
          else
          {
            v110 = a1;
            v111 = 0xCCCCCCCCCCCCCCCDLL * ((v96 - v95) >> 2) + 1;
            if (v111 > 0xCCCCCCCCCCCCCCCLL)
              sub_20E867F44();
            if (0x999999999999999ALL * ((v97 - v95) >> 2) > v111)
              v111 = 0x999999999999999ALL * ((v97 - v95) >> 2);
            if (0xCCCCCCCCCCCCCCCDLL * ((v97 - v95) >> 2) >= 0x666666666666666)
              v112 = 0xCCCCCCCCCCCCCCCLL;
            else
              v112 = v111;
            if (v112 > 0xCCCCCCCCCCCCCCCLL)
              sub_20E877A38();
            v113 = (char *)operator new(20 * v112);
            v114 = &v113[4 * ((v96 - v95) >> 2)];
            *(_DWORD *)v114 = *(_DWORD *)v94;
            *(_QWORD *)(v114 + 4) = *(_QWORD *)(v94 + 4);
            *(_QWORD *)(v114 + 12) = *(_QWORD *)(v94 + 12);
            for (j = v114; v96 != v95; *(_QWORD *)(j + 12) = *(_QWORD *)(v96 + 12))
            {
              v116 = *((_DWORD *)v96 - 5);
              v96 -= 20;
              *((_DWORD *)j - 5) = v116;
              j -= 20;
              *(_QWORD *)(j + 4) = *(_QWORD *)(v96 + 4);
            }
            v97 = &v113[20 * v112];
            v96 = v114 + 20;
            if (v95)
              operator delete(v95);
            v95 = j;
            a1 = v110;
          }
        }
      }
      v94 += 20;
    }
    while (v94 != v86);
    v86 = *v254;
    if (*v254)
      goto LABEL_126;
  }
  *v254 = v95;
  v254[1] = v96;
  v254[2] = v97;
  v117 = *(float *)(a1 + 64);
  v273 = *(_QWORD *)(a1 + 72);
  v118 = v96 - v95;
  if (v96 == v95)
  {
    v121 = 0;
    v125 = 0;
    v269 = 0;
  }
  else
  {
    v119 = 0xCCCCCCCCCCCCCCCDLL * (v118 >> 2);
    if (v119 > 0xCCCCCCCCCCCCCCCLL)
      sub_20E867F44();
    v120 = (char *)operator new(v118);
    v121 = v120;
    v122 = 0;
    do
    {
      v123 = &v95[v122];
      v124 = &v120[v122];
      *(_DWORD *)v124 = *(_DWORD *)&v95[v122];
      *(_QWORD *)(v124 + 4) = *(_QWORD *)&v95[v122 + 4];
      *(_QWORD *)(v124 + 12) = *(_QWORD *)&v95[v122 + 12];
      v122 += 20;
    }
    while (v123 + 20 != v96);
    v269 = &v120[20 * v119];
    v125 = (unint64_t)&v120[v122];
  }
  v126 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v125 - (_QWORD)v121) >> 2));
  if ((char *)v125 == v121)
    v127 = 0;
  else
    v127 = v126;
  sub_20EDA0C6C((uint64_t)v121, v125, v127, 1);
  if ((char *)v125 != v121)
  {
    v278 = (char *)v125;
    v128 = 0;
    v129 = 0;
    v130 = 0;
    while (1)
    {
      v131 = 0xCCCCCCCCCCCCCCCDLL * ((v129 - v128) >> 2);
      if (v131 >= v273)
        goto LABEL_219;
      v284 = v121;
      if (v129 >= v130)
      {
        v132 = v131 + 1;
        if (v131 + 1 > 0xCCCCCCCCCCCCCCCLL)
          sub_20E867F44();
        if (0x999999999999999ALL * ((v130 - v128) >> 2) > v132)
          v132 = 0x999999999999999ALL * ((v130 - v128) >> 2);
        if (0xCCCCCCCCCCCCCCCDLL * ((v130 - v128) >> 2) >= 0x666666666666666)
          v133 = 0xCCCCCCCCCCCCCCCLL;
        else
          v133 = v132;
        if (v133 > 0xCCCCCCCCCCCCCCCLL)
          sub_20E877A38();
        v134 = (char *)operator new(20 * v133);
        v135 = &v134[4 * ((v129 - v128) >> 2)];
        *(_DWORD *)v135 = *(_DWORD *)v121;
        *(_QWORD *)(v135 + 4) = *(_QWORD *)(v121 + 4);
        *(_QWORD *)(v135 + 12) = *(_QWORD *)(v121 + 12);
        for (k = v135; v129 != v128; *(_QWORD *)(k + 12) = *(_QWORD *)(v129 + 12))
        {
          v137 = *((_DWORD *)v129 - 5);
          v129 -= 20;
          *((_DWORD *)k - 5) = v137;
          k -= 20;
          *(_QWORD *)(k + 4) = *(_QWORD *)(v129 + 4);
        }
        v130 = &v134[20 * v133];
        v129 = v135 + 20;
        if (v128)
          operator delete(v128);
        v128 = k;
      }
      else
      {
        *(_DWORD *)v129 = *(_DWORD *)v121;
        *(_QWORD *)(v129 + 4) = *(_QWORD *)(v121 + 4);
        *(_QWORD *)(v129 + 12) = *(_QWORD *)(v121 + 12);
        v129 += 20;
      }
      v285 = 0;
      rep = 0;
      v287 = 0;
      v138 = v278 - v121;
      v139 = 0xCCCCCCCCCCCCCCCDLL * ((v278 - v121) >> 2);
      v275 = v130;
      if (v278 == v121)
      {
        v141 = 0;
        v140 = 0;
        if (v138 == 20)
          goto LABEL_159;
      }
      else
      {
        if (v139 >> 61)
          sub_20E867F44();
        v140 = (uint64_t *)operator new(0x6666666666666668 * ((v278 - v121) >> 2));
        v141 = (char *)&v140[0xCCCCCCCCCCCCCCDLL * ((v278 - v121) >> 2)];
        v285 = v140;
        rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v140;
        v287 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v141;
        v139 = 0xCCCCCCCCCCCCCCCDLL * ((v278 - v121) >> 2);
        if (v138 == 20)
        {
LABEL_159:
          v142 = 0;
          goto LABEL_160;
        }
      }
      __pa = v128;
      v143 = v121 + 4;
      v144 = (char *)v140;
      v145 = 1;
      __sb = v139;
      do
      {
        v147 = (float *)&v121[20 * v145];
        v148 = v147[1];
        v149 = v147[2];
        v150 = v147[3];
        v151 = v147[4];
        v152 = *((float *)v121 + 1);
        v153 = *((float *)v121 + 2);
        v154 = *((float *)v121 + 3);
        v155 = *((float *)v121 + 4);
        v156 = fmaxf(fminf(v150, v154) - fmaxf(v148, v152), 0.0) * fmaxf(fminf(v151, v155) - fmaxf(v149, v153), 0.0);
        if (v156 == 0.0)
        {
          if (v117 > 0.0)
            goto LABEL_172;
        }
        else if ((float)(v156
                        / (float)((float)((float)((float)(v150 - v148) * (float)(v151 - v149))
                                        + (float)((float)(v154 - v152) * (float)(v155 - v153)))
                                - v156)) < v117)
        {
LABEL_172:
          if (v144 < v141)
          {
            *(_QWORD *)v144 = v145;
            v146 = (uint64_t)(v144 + 8);
          }
          else
          {
            v157 = (v144 - (char *)v140) >> 3;
            v158 = v157 + 1;
            if ((unint64_t)(v157 + 1) >> 61)
              sub_20E867F44();
            if ((v141 - (char *)v140) >> 2 > v158)
              v158 = (v141 - (char *)v140) >> 2;
            if ((unint64_t)(v141 - (char *)v140) >= 0x7FFFFFFFFFFFFFF8)
              v159 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v159 = v158;
            if (v159)
            {
              if (v159 >> 61)
                sub_20E877A38();
              v160 = operator new(8 * v159);
              v161 = (uint64_t *)&v160[8 * v157];
              *v161 = v145;
              v146 = (uint64_t)(v161 + 1);
              v162 = v144 - (char *)v140;
              if (v144 != (char *)v140)
              {
LABEL_182:
                v163 = v162 - 8;
                if (v163 < 0x168
                  || (v166 = (v144 - 8 - (char *)v140) & 0xFFFFFFFFFFFFFFF8,
                      &v160[v144 - (char *)v140 - 8 - v166] > &v160[v144 - (char *)v140 - 8])
                  || &v144[-v166 - 8] > v144 - 8
                  || (unint64_t)((char *)v140 - v160) < 0x20)
                {
                  v164 = v144;
                }
                else
                {
                  v167 = (v163 >> 3) + 1;
                  v168 = 8 * (v167 & 0x3FFFFFFFFFFFFFFCLL);
                  v164 = &v144[-v168];
                  v161 = (uint64_t *)((char *)v161 - v168);
                  v169 = &v160[8 * v157 - 16];
                  v170 = v144 - 16;
                  v171 = v167 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v172 = *(_OWORD *)v170;
                    *(v169 - 1) = *((_OWORD *)v170 - 1);
                    *v169 = v172;
                    v169 -= 2;
                    v170 -= 32;
                    v171 -= 4;
                  }
                  while (v171);
                  if (v167 == (v167 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_185:
                    v141 = &v160[8 * v159];
                    v285 = v161;
                    v287 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v141;
                    if (v140)
                      goto LABEL_186;
                    goto LABEL_187;
                  }
                }
                do
                {
                  v165 = *((_QWORD *)v164 - 1);
                  v164 -= 8;
                  *--v161 = v165;
                }
                while (v164 != (char *)v140);
                goto LABEL_185;
              }
            }
            else
            {
              v160 = 0;
              v161 = (uint64_t *)(8 * v157);
              *(_QWORD *)(8 * v157) = v145;
              v146 = 8 * v157 + 8;
              v162 = v144 - (char *)v140;
              if (v144 != (char *)v140)
                goto LABEL_182;
            }
            v141 = &v160[8 * v159];
            v285 = v161;
            v287 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v141;
            if (v140)
LABEL_186:
              operator delete(v140);
LABEL_187:
            v140 = v161;
            v139 = __sb;
            v121 = v284;
          }
          rep = v146;
          v144 = (char *)v146;
        }
        ++v145;
      }
      while (v145 != v139);
      if (v144 == (char *)v140)
      {
        v142 = (v144 - (char *)v140) >> 3;
        v82 = (void **)v254;
        v128 = __pa;
        v175 = v142 >= v139;
        v176 = v142 - v139;
        if (v142 <= v139)
          goto LABEL_214;
LABEL_202:
        if (0xCCCCCCCCCCCCCCCDLL * ((v269 - v278) >> 2) >= v176)
        {
          bzero(v278, 20 * ((20 * v176 - 20) / 0x14) + 20);
          v278 += 20 * ((20 * v176 - 20) / 0x14) + 20;
        }
        else
        {
          if (v142 > 0xCCCCCCCCCCCCCCCLL)
            sub_20E867F44();
          if (0x999999999999999ALL * ((v269 - v121) >> 2) > v142)
            v142 = 0x999999999999999ALL * ((v269 - v121) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((v269 - v121) >> 2) >= 0x666666666666666)
            v177 = 0xCCCCCCCCCCCCCCCLL;
          else
            v177 = v142;
          if (v177 > 0xCCCCCCCCCCCCCCCLL)
            sub_20E877A38();
          v178 = (char *)operator new(20 * v177);
          v179 = 20 * ((20 * v176 - 20) / 0x14) + 20;
          bzero(&v178[20 * __sb], v179);
          v180 = v278;
          for (m = &v178[20 * __sb]; v180 != v121; *(_QWORD *)(m + 12) = *(_QWORD *)(v180 + 12))
          {
            v182 = *((_DWORD *)v180 - 5);
            v180 -= 20;
            *((_DWORD *)m - 5) = v182;
            m -= 20;
            *(_QWORD *)(m + 4) = *(_QWORD *)(v180 + 4);
          }
          v269 = &v178[20 * v177];
          v278 = &v178[20 * __sb + v179];
          operator delete(v121);
          v121 = m;
          v128 = __pa;
        }
      }
      else
      {
        v173 = 0;
        v82 = (void **)v254;
        v128 = __pa;
        do
        {
          v174 = &v121[20 * v140[v173]];
          *((_DWORD *)v143 - 1) = *(_DWORD *)v174;
          *v143 = *(_OWORD *)(v174 + 4);
          v143 = (_OWORD *)((char *)v143 + 20);
          ++v173;
          v140 = v285;
          v142 = (rep - (uint64_t)v285) >> 3;
        }
        while (v173 < v142);
        v175 = v142 >= v139;
        v176 = v142 - v139;
        if (v142 > v139)
          goto LABEL_202;
LABEL_214:
        if (!v175)
LABEL_160:
          v278 = &v121[20 * v142];
      }
      v130 = v275;
      if (v140)
        operator delete(v140);
      if (v121 == v278)
        goto LABEL_219;
    }
  }
  v128 = 0;
  v129 = 0;
  v130 = 0;
LABEL_219:
  if (v121)
    operator delete(v121);
  if (*v82)
  {
    operator delete(*v82);
    *v82 = 0;
    v82[1] = 0;
    v82[2] = 0;
  }
  *v82 = v128;
  v82[1] = v129;
  v82[2] = v130;
  kdebug_trace();
}

void sub_20EDA04B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  if (*(_BYTE *)(v37 - 232))
  {
    if (*(char *)(v37 - 233) < 0)
      operator delete(*(void **)(v37 - 256));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20EDA04F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;

  sub_20E86E8C4(&a47);
  sub_20E86E8C4(&a52);
  sub_20E86E658(v52 - 256);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20EDA051C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20E86E658(v37 - 256);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20EDA0538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  int v47;
  void *v48;

  if (v47 < 0)
  {
    operator delete(v48);
    sub_20E86E658((uint64_t)&a47);
    sub_20E863714((uint64_t)&a37);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a47);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20EDA05A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20EDA05BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,uint64_t a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20EDA069C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  void *v36;
  uint64_t v37;
  void *v39;
  void *v40;

  v40 = v36;
  if (v40)
  {
    operator delete(v40);
    if (!a36)
      goto LABEL_6;
  }
  else if (!a36)
  {
    goto LABEL_6;
  }
  operator delete(a36);
LABEL_6:
  v39 = *(void **)a15;
  if (*(_QWORD *)a15)
  {
    *(_QWORD *)(a15 + 8) = v39;
    operator delete(v39);
  }
  sub_20E8E69C4(v37 - 256);
  _Unwind_Resume(a1);
}

void sub_20EDA06E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a31)
    JUMPOUT(0x20EDA0758);
  JUMPOUT(0x20EDA075CLL);
}

void sub_20EDA06F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37)
{
  uint64_t v37;
  void *v39;

  if (a37)
  {
    operator delete(a37);
    if (!a31)
    {
LABEL_3:
      if (!a36)
        goto LABEL_8;
LABEL_7:
      operator delete(a36);
LABEL_8:
      v39 = *(void **)a15;
      if (*(_QWORD *)a15)
      {
        *(_QWORD *)(a15 + 8) = v39;
        operator delete(v39);
      }
      sub_20E8E69C4(v37 - 256);
      _Unwind_Resume(a1);
    }
  }
  else if (!a31)
  {
    goto LABEL_3;
  }
  operator delete(a31);
  if (!a36)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20EDA0770(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EDA0794(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20ED9EA0C(result);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EDA07C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3odt28image_detection_and_tracking27ClassAgnosticObjectDetectorEE27__shar"
                     "ed_ptr_default_deleteIS4_S4_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3odt28image_detection_and_tracking27ClassAgnosticObjectDetecto"
                                "rEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3odt28image_detection_and_tracking27ClassAgnosticObjectDetectorEE27__shared_ptr_default_deleteIS4_S4_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3odt28image_detection_and_tracking27ClassAgnosticObjectDetectorEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EDA0838(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EDA0BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDA0BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDA0C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EDA0C24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EDA0C34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EDA0C6C(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  float v14;
  __int128 v15;
  float v16;
  uint64_t v17;
  __int128 v18;
  float v19;
  unint64_t v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  __int128 v26;
  float v27;
  float v28;
  uint64_t v29;
  BOOL v30;
  float v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  __int128 v35;
  float v36;
  float v37;
  __int128 v38;
  float v39;
  float v40;
  float v41;
  float v42;
  __int128 v43;
  float v44;
  float v45;
  __int128 v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  float v52;
  __int128 v53;
  unint64_t v54;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  float v61;
  float v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  float v73;
  float v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  int64_t v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  float v91;
  float v92;
  __int128 v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  float v97;
  float v98;
  __int128 v99;
  unint64_t v100;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 2);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v41 = *(float *)(a2 - 20);
        v42 = *(float *)v8;
        if (v41 > *(float *)v8)
        {
          *(float *)v8 = v41;
          v43 = *(_OWORD *)(v8 + 4);
          *(_QWORD *)(v8 + 4) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(v8 + 12) = *(_QWORD *)(a2 - 8);
          *(float *)(a2 - 20) = v42;
          *(_OWORD *)(a2 - 16) = v43;
        }
        return result;
      case 3uLL:
        return sub_20EDA1498(v8, v8 + 20, a2 - 20);
      case 4uLL:
        result = sub_20EDA1498(v8, v8 + 20, v8 + 40);
        v44 = *(float *)(a2 - 20);
        v45 = *(float *)(v8 + 40);
        if (v44 > v45)
        {
          *(float *)(v8 + 40) = v44;
          v46 = *(_OWORD *)(v8 + 44);
          *(_QWORD *)(v8 + 44) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(v8 + 52) = *(_QWORD *)(a2 - 8);
          *(float *)(a2 - 20) = v45;
          *(_OWORD *)(a2 - 16) = v46;
          v47 = *(float *)(v8 + 40);
          v48 = *(float *)(v8 + 20);
          if (v47 > v48)
          {
            *(float *)(v8 + 20) = v47;
            v49 = *(_QWORD *)(v8 + 44);
            v50 = *(_QWORD *)(v8 + 52);
            *(float *)(v8 + 40) = v48;
            v51 = *(_OWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 24) = v49;
            *(_QWORD *)(v8 + 32) = v50;
            *(_OWORD *)(v8 + 44) = v51;
            v52 = *(float *)v8;
            if (v47 > *(float *)v8)
            {
              *(float *)v8 = v47;
              *(float *)(v8 + 20) = v52;
              v53 = *(_OWORD *)(v8 + 4);
              *(_QWORD *)(v8 + 4) = v49;
              *(_QWORD *)(v8 + 12) = v50;
              *(_OWORD *)(v8 + 24) = v53;
            }
          }
        }
        return result;
      case 5uLL:
        return sub_20EDA1800(v8, v8 + 20, v8 + 40, (int *)(v8 + 60), (int *)(a2 - 20));
      default:
        if (v9 <= 479)
        {
          v54 = v8 + 20;
          v56 = v8 == a2 || v54 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = 0;
              v58 = v8;
              do
              {
                v60 = v54;
                v61 = *(float *)(v58 + 20);
                v62 = *(float *)v58;
                if (v61 > *(float *)v58)
                {
                  v63 = *(_OWORD *)(v58 + 24);
                  v64 = v57;
                  do
                  {
                    v65 = v8 + v64;
                    *(float *)(v65 + 20) = v62;
                    v66 = *(_QWORD *)(v8 + v64 + 12);
                    *(_QWORD *)(v65 + 24) = *(_QWORD *)(v8 + v64 + 4);
                    *(_QWORD *)(v65 + 32) = v66;
                    if (!v64)
                    {
                      v59 = v8;
                      goto LABEL_73;
                    }
                    v62 = *(float *)(v65 - 20);
                    v64 -= 20;
                  }
                  while (v61 > v62);
                  v59 = v8 + v64 + 20;
LABEL_73:
                  *(float *)v59 = v61;
                  *(_OWORD *)(v59 + 4) = v63;
                }
                v54 = v60 + 20;
                v57 += 20;
                v58 = v60;
              }
              while (v60 + 20 != a2);
            }
          }
          else if (!v56)
          {
            v95 = v8 + 12;
            do
            {
              v96 = v54;
              v97 = *(float *)(v7 + 20);
              v98 = *(float *)v7;
              if (v97 > *(float *)v7)
              {
                v99 = *(_OWORD *)(v7 + 24);
                v100 = v95;
                do
                {
                  *(float *)(v100 + 8) = v98;
                  *(_QWORD *)(v100 + 12) = *(_QWORD *)(v100 - 8);
                  *(_QWORD *)(v100 + 20) = *(_QWORD *)v100;
                  v98 = *(float *)(v100 - 32);
                  v100 -= 20;
                }
                while (v97 > v98);
                *(float *)(v100 + 8) = v97;
                *(_OWORD *)(v100 + 12) = v99;
              }
              v54 = v96 + 20;
              v95 += 20;
              v7 = v96;
            }
            while (v96 + 20 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v67 = (v10 - 2) >> 1;
            v68 = v67;
            do
            {
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = v8 + 20 * v70;
                if (2 * v68 + 2 < (uint64_t)v10 && *(float *)v71 > *(float *)(v71 + 20))
                {
                  v71 += 20;
                  v70 = 2 * v68 + 2;
                }
                v72 = v8 + 20 * v68;
                v73 = *(float *)v71;
                v74 = *(float *)v72;
                if (*(float *)v71 <= *(float *)v72)
                {
                  v75 = *(_OWORD *)(v8 + 20 * v68 + 4);
                  do
                  {
                    v76 = v72;
                    v72 = v71;
                    *(float *)v76 = v73;
                    *(_QWORD *)(v76 + 4) = *(_QWORD *)(v71 + 4);
                    *(_QWORD *)(v76 + 12) = *(_QWORD *)(v71 + 12);
                    if (v67 < v70)
                      break;
                    v77 = 2 * v70;
                    v70 = (2 * v70) | 1;
                    v71 = v8 + 20 * v70;
                    v78 = v77 + 2;
                    if (v78 < (uint64_t)v10 && *(float *)v71 > *(float *)(v71 + 20))
                    {
                      v71 += 20;
                      v70 = v78;
                    }
                    v73 = *(float *)v71;
                  }
                  while (*(float *)v71 <= v74);
                  *(float *)v72 = v74;
                  *(_OWORD *)(v72 + 4) = v75;
                }
              }
              v69 = v68-- <= 0;
            }
            while (!v69);
            v79 = v9 / 0x14uLL;
            do
            {
              v80 = 0;
              v81 = *(float *)v8;
              v82 = *(_QWORD *)(v8 + 4);
              v83 = *(_QWORD *)(v8 + 12);
              v84 = v8;
              do
              {
                v85 = v84;
                v84 += 20 * v80 + 20;
                v86 = 2 * v80;
                result = (2 * v80) | 1;
                v80 = result;
                v87 = v86 + 2;
                if (v87 < v79)
                {
                  result = v84 + 20;
                  if (*(float *)v84 > *(float *)(v84 + 20))
                  {
                    v84 += 20;
                    v80 = v87;
                  }
                }
                *(_DWORD *)v85 = *(_DWORD *)v84;
                *(_QWORD *)(v85 + 4) = *(_QWORD *)(v84 + 4);
                *(_QWORD *)(v85 + 12) = *(_QWORD *)(v84 + 12);
              }
              while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
              if (v84 == a2 - 20)
              {
                *(float *)v84 = v81;
                *(_QWORD *)(v84 + 4) = v82;
                *(_QWORD *)(v84 + 12) = v83;
              }
              else
              {
                *(_DWORD *)v84 = *(_DWORD *)(a2 - 20);
                *(_QWORD *)(v84 + 4) = *(_QWORD *)(a2 - 16);
                *(_QWORD *)(v84 + 12) = *(_QWORD *)(a2 - 8);
                *(float *)(a2 - 20) = v81;
                *(_QWORD *)(a2 - 16) = v82;
                *(_QWORD *)(a2 - 8) = v83;
                v88 = v84 - v8 + 20;
                if (v88 >= 21)
                {
                  v89 = (v88 / 0x14uLL - 2) >> 1;
                  v90 = v8 + 20 * v89;
                  v91 = *(float *)v90;
                  v92 = *(float *)v84;
                  if (*(float *)v90 > *(float *)v84)
                  {
                    v93 = *(_OWORD *)(v84 + 4);
                    do
                    {
                      v94 = v84;
                      v84 = v90;
                      *(float *)v94 = v91;
                      *(_QWORD *)(v94 + 4) = *(_QWORD *)(v90 + 4);
                      *(_QWORD *)(v94 + 12) = *(_QWORD *)(v90 + 12);
                      if (!v89)
                        break;
                      v89 = (v89 - 1) >> 1;
                      v90 = v8 + 20 * v89;
                      v91 = *(float *)v90;
                    }
                    while (*(float *)v90 > v92);
                    *(float *)v84 = v92;
                    *(_OWORD *)(v84 + 4) = v93;
                  }
                }
              }
              a2 -= 20;
              v69 = v79-- <= 2;
            }
            while (!v69);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (_DWORD *)(v8 + 20 * (v10 >> 1));
        if ((unint64_t)v9 < 0xA01)
        {
          result = sub_20EDA1498(v7 + 20 * (v10 >> 1), v7, a2 - 20);
          --a3;
          v16 = *(float *)v7;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          sub_20EDA1498(v7, v7 + 20 * (v10 >> 1), a2 - 20);
          v13 = v7 + 20 * v11;
          sub_20EDA1498(v7 + 20, v13 - 20, a2 - 40);
          sub_20EDA1498(v7 + 40, v7 + 20 + 20 * v11, a2 - 60);
          result = sub_20EDA1498(v13 - 20, (uint64_t)v12, v7 + 20 + 20 * v11);
          v14 = *(float *)v7;
          *(_DWORD *)v7 = *v12;
          *(float *)v12 = v14;
          v15 = *(_OWORD *)(v7 + 4);
          *(_OWORD *)(v7 + 4) = *(_OWORD *)(v13 + 4);
          *(_OWORD *)(v13 + 4) = v15;
          --a3;
          v16 = *(float *)v7;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        if (*(float *)(v7 - 20) <= v16)
        {
          if (v16 <= *(float *)(a2 - 20))
          {
            v32 = v7 + 20;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v32 += 20;
            }
            while (v16 <= *(float *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v31 = *(float *)(v8 + 20);
              v8 += 20;
            }
            while (v16 <= v31);
          }
          v33 = a2;
          if (v8 < a2)
          {
            v33 = a2;
            do
            {
              v34 = *(float *)(v33 - 20);
              v33 -= 20;
            }
            while (v16 > v34);
          }
          v35 = *(_OWORD *)(v7 + 4);
          if (v8 < v33)
          {
            v36 = *(float *)v8;
            v37 = *(float *)v33;
            do
            {
              *(float *)v8 = v37;
              v38 = *(_OWORD *)(v8 + 4);
              *(_QWORD *)(v8 + 4) = *(_QWORD *)(v33 + 4);
              *(_QWORD *)(v8 + 12) = *(_QWORD *)(v33 + 12);
              *(float *)v33 = v36;
              *(_OWORD *)(v33 + 4) = v38;
              do
              {
                v39 = *(float *)(v8 + 20);
                v8 += 20;
                v36 = v39;
              }
              while (v16 <= v39);
              do
              {
                v40 = *(float *)(v33 - 20);
                v33 -= 20;
                v37 = v40;
              }
              while (v16 > v40);
            }
            while (v8 < v33);
          }
          if (v8 - 20 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 20);
            *(_QWORD *)(v7 + 4) = *(_QWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 12) = *(_QWORD *)(v8 - 8);
          }
          a4 = 0;
          *(float *)(v8 - 20) = v16;
          *(_OWORD *)(v8 - 16) = v35;
          continue;
        }
LABEL_11:
        v17 = 0;
        v18 = *(_OWORD *)(v7 + 4);
        do
        {
          v19 = *(float *)(v7 + v17 + 20);
          v17 += 20;
        }
        while (v19 > v16);
        v20 = v7 + v17;
        v21 = (float *)a2;
        if (v17 == 20)
        {
          v21 = (float *)a2;
          do
          {
            if (v20 >= (unint64_t)v21)
              break;
            v23 = *(v21 - 5);
            v21 -= 5;
          }
          while (v23 <= v16);
        }
        else
        {
          do
          {
            v22 = *(v21 - 5);
            v21 -= 5;
          }
          while (v22 <= v16);
        }
        if (v20 >= (unint64_t)v21)
        {
          v8 = v7 + v17;
          v29 = v20 - 20;
          if (v20 - 20 != v7)
            goto LABEL_26;
        }
        else
        {
          v24 = *v21;
          v8 = v7 + v17;
          v25 = v21;
          do
          {
            *(float *)v8 = v24;
            v26 = *(_OWORD *)(v8 + 4);
            *(_QWORD *)(v8 + 4) = *(_QWORD *)(v25 + 1);
            *(_QWORD *)(v8 + 12) = *(_QWORD *)(v25 + 3);
            *v25 = v19;
            *(_OWORD *)(v25 + 1) = v26;
            do
            {
              v27 = *(float *)(v8 + 20);
              v8 += 20;
              v19 = v27;
            }
            while (v27 > v16);
            do
            {
              v28 = *(v25 - 5);
              v25 -= 5;
              v24 = v28;
            }
            while (v28 <= v16);
          }
          while (v8 < (unint64_t)v25);
          v29 = v8 - 20;
          if (v8 - 20 != v7)
          {
LABEL_26:
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 20);
            *(_QWORD *)(v7 + 4) = *(_QWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 12) = *(_QWORD *)(v8 - 8);
          }
        }
        *(float *)(v8 - 20) = v16;
        *(_OWORD *)(v8 - 16) = v18;
        if (v20 < (unint64_t)v21)
        {
LABEL_30:
          result = sub_20EDA0C6C(v7, v29, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = sub_20EDA1580(v7, v29);
        result = sub_20EDA1580(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_30;
        }
        a2 = v29;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_20EDA1498(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  float v9;
  __int128 v10;

  v3 = *(float *)a2;
  v4 = *(float *)result;
  v5 = *(float *)a3;
  if (*(float *)a2 <= *(float *)result)
  {
    if (v5 > v3)
    {
      *(float *)a2 = v5;
      v8 = *(_OWORD *)(a2 + 4);
      *(_QWORD *)(a2 + 4) = *(_QWORD *)(a3 + 4);
      *(_QWORD *)(a2 + 12) = *(_QWORD *)(a3 + 12);
      *(float *)a3 = v3;
      *(_OWORD *)(a3 + 4) = v8;
      v9 = *(float *)result;
      if (*(float *)a2 > *(float *)result)
      {
        *(_DWORD *)result = *(_DWORD *)a2;
        v10 = *(_OWORD *)(result + 4);
        *(_QWORD *)(result + 4) = *(_QWORD *)(a2 + 4);
        *(_QWORD *)(result + 12) = *(_QWORD *)(a2 + 12);
        *(float *)a2 = v9;
        *(_OWORD *)(a2 + 4) = v10;
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)(result + 4);
    v7 = *(_QWORD *)(result + 12);
    if (v5 <= v3)
    {
      *(float *)result = v3;
      *(_QWORD *)(result + 4) = *(_QWORD *)(a2 + 4);
      *(_QWORD *)(result + 12) = *(_QWORD *)(a2 + 12);
      *(float *)a2 = v4;
      *(_QWORD *)(a2 + 4) = v6;
      *(_QWORD *)(a2 + 12) = v7;
      if (*(float *)a3 <= v4)
        return result;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_QWORD *)(a2 + 4) = *(_QWORD *)(a3 + 4);
      *(_QWORD *)(a2 + 12) = *(_QWORD *)(a3 + 12);
    }
    else
    {
      *(float *)result = v5;
      *(_QWORD *)(result + 4) = *(_QWORD *)(a3 + 4);
      *(_QWORD *)(result + 12) = *(_QWORD *)(a3 + 12);
    }
    *(float *)a3 = v4;
    *(_QWORD *)(a3 + 4) = v6;
    *(_QWORD *)(a3 + 12) = v7;
  }
  return result;
}

BOOL sub_20EDA1580(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  float v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  __int128 v19;
  float v20;
  float v21;
  __int128 v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  float v28;
  __int128 v29;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v17 = *(float *)(a2 - 20);
      v18 = *(float *)a1;
      if (v17 > *(float *)a1)
      {
        *(float *)a1 = v17;
        v19 = *(_OWORD *)(a1 + 4);
        *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 - 8);
        *(float *)(a2 - 20) = v18;
        *(_OWORD *)(a2 - 16) = v19;
      }
      break;
    case 3uLL:
      sub_20EDA1498(a1, a1 + 20, a2 - 20);
      result = 1;
      break;
    case 4uLL:
      sub_20EDA1498(a1, a1 + 20, a1 + 40);
      v20 = *(float *)(a2 - 20);
      v21 = *(float *)(a1 + 40);
      if (v20 <= v21)
        goto LABEL_13;
      *(float *)(a1 + 40) = v20;
      v22 = *(_OWORD *)(a1 + 44);
      *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 - 16);
      *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 - 8);
      *(float *)(a2 - 20) = v21;
      *(_OWORD *)(a2 - 16) = v22;
      v23 = *(float *)(a1 + 40);
      v24 = *(float *)(a1 + 20);
      if (v23 <= v24)
        goto LABEL_13;
      *(float *)(a1 + 20) = v23;
      v25 = *(_QWORD *)(a1 + 44);
      v26 = *(_QWORD *)(a1 + 52);
      *(float *)(a1 + 40) = v24;
      v27 = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v25;
      *(_QWORD *)(a1 + 32) = v26;
      *(_OWORD *)(a1 + 44) = v27;
      v28 = *(float *)a1;
      if (v23 <= *(float *)a1)
        goto LABEL_13;
      *(float *)a1 = v23;
      *(float *)(a1 + 20) = v28;
      v29 = *(_OWORD *)(a1 + 4);
      *(_QWORD *)(a1 + 4) = v25;
      *(_QWORD *)(a1 + 12) = v26;
      *(_OWORD *)(a1 + 24) = v29;
      result = 1;
      break;
    case 5uLL:
      sub_20EDA1800(a1, a1 + 20, a1 + 40, (int *)(a1 + 60), (int *)(a2 - 20));
      result = 1;
      break;
    default:
      v6 = (float *)(a1 + 40);
      sub_20EDA1498(a1, a1 + 20, a1 + 40);
      v7 = a1 + 60;
      if (a1 + 60 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *(float *)v7;
          v11 = *v6;
          if (*(float *)v7 > *v6)
            break;
LABEL_12:
          v6 = (float *)v7;
          v8 += 20;
          v7 += 20;
          if (v7 == a2)
            goto LABEL_13;
        }
        v12 = *(_OWORD *)(v7 + 4);
        v13 = v8;
        do
        {
          v14 = a1 + v13;
          *(float *)(v14 + 60) = v11;
          v15 = *(_QWORD *)(a1 + v13 + 52);
          *(_QWORD *)(v14 + 64) = *(_QWORD *)(a1 + v13 + 44);
          *(_QWORD *)(v14 + 72) = v15;
          if (v13 == -40)
          {
            *(float *)a1 = v10;
            *(_OWORD *)(a1 + 4) = v12;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_22;
          }
          v11 = *(float *)(v14 + 20);
          v13 -= 20;
        }
        while (v10 > v11);
        v16 = a1 + v13;
        *(float *)(v16 + 60) = v10;
        *(_OWORD *)(v16 + 64) = v12;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_22:
        result = v7 + 20 == a2;
      }
      break;
  }
  return result;
}

uint64_t sub_20EDA1800(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t result;
  float v11;
  __int128 v12;
  float v13;
  __int128 v14;
  float v15;
  __int128 v16;
  int v17;
  __int128 v18;
  float v19;
  __int128 v20;
  float v21;
  __int128 v22;
  float v23;
  __int128 v24;

  result = sub_20EDA1498(a1, a2, a3);
  v11 = *(float *)a3;
  if (*(float *)a4 > *(float *)a3)
  {
    *(_DWORD *)a3 = *a4;
    v12 = *(_OWORD *)(a3 + 4);
    *(_QWORD *)(a3 + 4) = *(_QWORD *)(a4 + 1);
    *(_QWORD *)(a3 + 12) = *(_QWORD *)(a4 + 3);
    *(float *)a4 = v11;
    *(_OWORD *)(a4 + 1) = v12;
    v13 = *(float *)a2;
    if (*(float *)a3 > *(float *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      v14 = *(_OWORD *)(a2 + 4);
      *(_QWORD *)(a2 + 4) = *(_QWORD *)(a3 + 4);
      *(_QWORD *)(a2 + 12) = *(_QWORD *)(a3 + 12);
      *(float *)a3 = v13;
      *(_OWORD *)(a3 + 4) = v14;
      v15 = *(float *)a1;
      if (*(float *)a2 > *(float *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        v16 = *(_OWORD *)(a1 + 4);
        *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
        *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
        *(float *)a2 = v15;
        *(_OWORD *)(a2 + 4) = v16;
      }
    }
  }
  v17 = *a4;
  if (*(float *)a5 > *(float *)a4)
  {
    *a4 = *a5;
    v18 = *(_OWORD *)(a4 + 1);
    *(_QWORD *)(a4 + 1) = *(_QWORD *)(a5 + 1);
    *(_QWORD *)(a4 + 3) = *(_QWORD *)(a5 + 3);
    *a5 = v17;
    *(_OWORD *)(a5 + 1) = v18;
    v19 = *(float *)a3;
    if (*(float *)a4 > *(float *)a3)
    {
      *(_DWORD *)a3 = *a4;
      v20 = *(_OWORD *)(a3 + 4);
      *(_QWORD *)(a3 + 4) = *(_QWORD *)(a4 + 1);
      *(_QWORD *)(a3 + 12) = *(_QWORD *)(a4 + 3);
      *(float *)a4 = v19;
      *(_OWORD *)(a4 + 1) = v20;
      v21 = *(float *)a2;
      if (*(float *)a3 > *(float *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        v22 = *(_OWORD *)(a2 + 4);
        *(_QWORD *)(a2 + 4) = *(_QWORD *)(a3 + 4);
        *(_QWORD *)(a2 + 12) = *(_QWORD *)(a3 + 12);
        *(float *)a3 = v21;
        *(_OWORD *)(a3 + 4) = v22;
        v23 = *(float *)a1;
        if (*(float *)a2 > *(float *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v24 = *(_OWORD *)(a1 + 4);
          *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
          *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
          *(float *)a2 = v23;
          *(_OWORD *)(a2 + 4) = v24;
        }
      }
    }
  }
  return result;
}

float sub_20EDA1990(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a2 + 128) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a2 + 132) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a2 + 136) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 140) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a2 + 144) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a2 + 164) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 168) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a2 + 172) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 176) = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a2 + 180) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a2 + 196) = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a2 + 200) = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a2 + 204) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 208) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a2 + 212) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a2 + 216) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a2 + 224) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a2 + 228) = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a2 + 232) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a2 + 236) = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a2 + 240) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a2 + 244) = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a2 + 248) = *(_DWORD *)(a1 + 136);
  result = *(float *)(a1 + 140);
  *(float *)(a2 + 252) = result;
  return result;
}

float sub_20EDA1AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, double a7, double a8, double a9, double a10, double a11, float32x4_t a12)
{
  float v14;
  uint64_t v19;
  unint64_t v20;
  float v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int32x4_t v27;
  float32x4_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  float result;
  float32x4_t v48[9];

  v14 = *(float *)&a7;
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 32);
  if (v20 != *(_QWORD *)(a1 + 40)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ComputeLinearSystem_A64_ASM.cpp", 56, (uint64_t)"gradients.width() == gradients.widthStep()", 42, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ComputeLinearSystem_A64_ASM.cpp", 57, (uint64_t)"error.width() == error.widthStep()", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(a3 + 32) != *(_QWORD *)(a3 + 40)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ComputeLinearSystem_A64_ASM.cpp",
         58,
         (uint64_t)"mask.width() == mask.widthStep()",
         32,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v21 = sqrtf(v14 - (float)(a6 * a6)) * 4.685;
  v22 = v20 >> 1;
  memset(v48, 0, sizeof(v48));
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(float *)&a7 = v21;
  sub_20EDA1CF0(v22, v19, *(const float **)(a1 + 88), *(int8x16_t **)(a2 + 88), *(int8x8_t **)(a3 + 88), v48, (float32x4_t *)a5, (int32x2_t)LODWORD(a6), a7, a8, a9, a10, a11, a12);
  sub_20EDA22EC(v22, v19, *(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88), *(_QWORD *)(a3 + 88), v48, (float32x4_t *)a5, a6, v21, v23, v24, v25, v26, v27, v28);
  sub_20EDA1990((uint64_t)v48, a4);
  v29 = *(_DWORD *)(a4 + 64);
  v30 = *(_DWORD *)(a4 + 68);
  *(_DWORD *)(a4 + 4) = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 8) = v29;
  v31 = *(_DWORD *)(a4 + 100);
  v32 = *(_DWORD *)(a4 + 128);
  v33 = *(_DWORD *)(a4 + 132);
  *(_DWORD *)(a4 + 12) = *(_DWORD *)(a4 + 96);
  *(_DWORD *)(a4 + 16) = v32;
  v34 = *(_DWORD *)(a4 + 164);
  v35 = *(_DWORD *)(a4 + 192);
  v36 = *(_DWORD *)(a4 + 196);
  *(_DWORD *)(a4 + 20) = *(_DWORD *)(a4 + 160);
  *(_DWORD *)(a4 + 24) = v35;
  v37 = *(_DWORD *)(a4 + 228);
  *(_DWORD *)(a4 + 28) = *(_DWORD *)(a4 + 224);
  *(_DWORD *)(a4 + 40) = v30;
  *(_DWORD *)(a4 + 44) = v31;
  *(_DWORD *)(a4 + 48) = v33;
  *(_DWORD *)(a4 + 52) = v34;
  *(_DWORD *)(a4 + 56) = v36;
  *(_DWORD *)(a4 + 60) = v37;
  v38 = *(_DWORD *)(a4 + 136);
  v39 = *(_DWORD *)(a4 + 140);
  *(_DWORD *)(a4 + 76) = *(_DWORD *)(a4 + 104);
  *(_DWORD *)(a4 + 80) = v38;
  v40 = *(_DWORD *)(a4 + 172);
  v41 = *(_DWORD *)(a4 + 200);
  v42 = *(_DWORD *)(a4 + 204);
  *(_DWORD *)(a4 + 84) = *(_DWORD *)(a4 + 168);
  *(_DWORD *)(a4 + 88) = v41;
  v43 = *(_DWORD *)(a4 + 236);
  *(_DWORD *)(a4 + 92) = *(_DWORD *)(a4 + 232);
  *(_DWORD *)(a4 + 112) = v39;
  *(_DWORD *)(a4 + 116) = v40;
  *(_DWORD *)(a4 + 120) = v42;
  *(_DWORD *)(a4 + 124) = v43;
  v44 = *(_DWORD *)(a4 + 208);
  v45 = *(_DWORD *)(a4 + 212);
  *(_DWORD *)(a4 + 148) = *(_DWORD *)(a4 + 176);
  *(_DWORD *)(a4 + 152) = v44;
  v46 = *(_DWORD *)(a4 + 244);
  *(_DWORD *)(a4 + 156) = *(_DWORD *)(a4 + 240);
  *(_DWORD *)(a4 + 184) = v45;
  *(_DWORD *)(a4 + 188) = v46;
  result = *(float *)(a4 + 248);
  *(float *)(a4 + 220) = result;
  return result;
}

uint64_t sub_20EDA1CF0(uint64_t result, int a2, const float *a3, int8x16_t *a4, int8x8_t *a5, float32x4_t *a6, float32x4_t *a7, int32x2_t a8, double a9, double a10, double a11, double a12, double a13, float32x4_t a14)
{
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  const float *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  float32x4_t v102;
  float32x4x2_t v103;
  float32x4x2_t v104;

  v16 = (float32x4_t)vdupq_lane_s32(a8, 0);
  v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
  *(float *)&a9 = 1.0 / *(float *)&a9;
  v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
  v19 = 1;
  do
  {
    v20 = 1;
    do
    {
      a14.f32[0] = (float)v20;
      v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.f32, 0);
      v22 = vaddq_f32((float32x4_t)xmmword_210377C80, v21);
      v23 = vaddq_f32((float32x4_t)xmmword_210377C90, v21);
      v24 = vmovl_s8(*a5);
      v25 = vmovl_s16(*(int16x4_t *)v24.i8);
      v26 = vmovl_high_s16(v24);
      v24.i64[0] = 0x100000001;
      v24.i64[1] = 0x100000001;
      v27 = (int8x16_t)vceqq_s32(v25, (int32x4_t)v24);
      v28 = (int8x16_t)vceqq_s32(v26, (int32x4_t)v24);
      *(float *)v24.i32 = (float)(int)result;
      a14 = (float32x4_t)vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0), v22);
      v29 = vandq_s8(v27, (int8x16_t)a14);
      a14.f32[0] = (float)(int)result;
      v30 = vandq_s8(v28, (int8x16_t)vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a14.f32, 0), v23));
      v31 = (float32x4_t)vandq_s8(*a4, v29);
      v32 = (float32x4_t)vandq_s8(a4[1], v30);
      v33 = vandq_s8(v29, (int8x16_t)vcagtq_f32(v17, v31));
      v34 = vandq_s8(v30, (int8x16_t)vcagtq_f32(v17, v32));
      *(uint32x2_t *)a14.f32 = vqmovn_u64((uint64x2_t)vorrq_s8(v33, v34));
      if (a14.i64[0])
      {
        v35 = vmulq_f32(v31, v18);
        v14.i32[0] = 1.0;
        v36 = (float32x4_t)vandq_s8((int8x16_t)vmlsq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v14, 0), v35, v35), v33);
        v37 = vmulq_f32(v32, v18);
        v15.i32[0] = 1.0;
        v38 = (float32x4_t)vandq_s8((int8x16_t)vmlsq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v15, 0), v37, v37), v34);
        v103 = vld2q_f32(a3);
        v39 = a3 + 8;
        v104 = vld2q_f32(v39);
        a3 = v39 - 8;
        v103.val[0] = vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v103.val[0], v33), v36);
        v104.val[0] = vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v104.val[0], v34), v38);
        v103.val[1] = vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v103.val[1], v33), v36);
        v104.val[1] = vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v104.val[1], v34), v38);
        v40 = vmulq_f32(v103.val[0], v22);
        v41 = vmulq_f32(v104.val[0], v23);
        v42 = vmulq_f32(v103.val[1], v22);
        v43 = vmulq_f32(v104.val[1], v23);
        *(float *)&a13 = (float)(int)v19;
        v44 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a13, 0);
        v45 = vmulq_f32(v103.val[0], v44);
        v46 = vmulq_f32(v104.val[0], v44);
        v47 = vmulq_f32(v103.val[1], v44);
        v48 = vmulq_f32(v104.val[1], v44);
        v49 = vnegq_f32(vaddq_f32(v40, v47));
        v50 = vmulq_f32(v49, v22);
        v51 = vmulq_f32(v49, v44);
        v52 = vnegq_f32(vaddq_f32(v41, v48));
        v53 = vmulq_f32(v52, v23);
        v54 = vmulq_f32(v52, v44);
        v55 = vmulq_f32(vsubq_f32(v31, v16), v36);
        v56 = vmulq_f32(vsubq_f32(v32, v16), v38);
        v57 = vmlaq_f32(vmulq_f32(v40, v40), v41, v41);
        v58 = vmlaq_f32(vmulq_f32(v40, v45), v41, v46);
        v59 = vmlaq_f32(vmulq_f32(v45, v45), v46, v46);
        v60 = vmlaq_f32(vmulq_f32(v40, v103.val[0]), v41, v104.val[0]);
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v58, v58))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v57, v57))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v60, v60))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v59, v59))));
        *a6 = vaddq_f32(*a6, v102);
        v61 = vmlaq_f32(vmulq_f32(v45, v103.val[0]), v46, v104.val[0]);
        v62 = vmlaq_f32(vmulq_f32(v103.val[0], v103.val[0]), v104.val[0], v104.val[0]);
        v63 = vmlaq_f32(vmulq_f32(v40, v42), v41, v43);
        v64 = vmlaq_f32(vmulq_f32(v45, v42), v46, v43);
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v62, v62))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v61, v61))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v64, v64))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v63, v63))));
        a6[1] = vaddq_f32(a6[1], v102);
        v65 = vmlaq_f32(vmulq_f32(v103.val[0], v42), v104.val[0], v43);
        v66 = vmlaq_f32(vmulq_f32(v42, v42), v43, v43);
        v67 = vmlaq_f32(vmulq_f32(v40, v47), v41, v48);
        v68 = vmlaq_f32(vmulq_f32(v45, v47), v46, v48);
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v66, v66))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v65, v65))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v68, v68))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v67, v67))));
        a6[2] = vaddq_f32(a6[2], v102);
        v69 = vmlaq_f32(vmulq_f32(v103.val[0], v47), v104.val[0], v48);
        v70 = vmlaq_f32(vmulq_f32(v42, v47), v43, v48);
        v71 = vmlaq_f32(vmulq_f32(v47, v47), v48, v48);
        v72 = vmlaq_f32(vmulq_f32(v40, v103.val[1]), v41, v104.val[1]);
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v70, v70))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v69, v69))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v72, v72))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v71, v71))));
        a6[3] = vaddq_f32(a6[3], v102);
        v73 = vmlaq_f32(vmulq_f32(v45, v103.val[1]), v46, v104.val[1]);
        v74 = vmlaq_f32(vmulq_f32(v103.val[0], v103.val[1]), v104.val[0], v104.val[1]);
        v75 = vmlaq_f32(vmulq_f32(v42, v103.val[1]), v43, v104.val[1]);
        v76 = vmlaq_f32(vmulq_f32(v47, v103.val[1]), v48, v104.val[1]);
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v74, v74))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v73, v73))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v76, v76))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v75, v75))));
        a6[4] = vaddq_f32(a6[4], v102);
        v77 = vmlaq_f32(vmulq_f32(v103.val[1], v103.val[1]), v104.val[1], v104.val[1]);
        v78 = vmlaq_f32(vmulq_f32(v40, v50), v41, v53);
        v79 = vmlaq_f32(vmulq_f32(v45, v50), v46, v53);
        v80 = vmlaq_f32(vmulq_f32(v103.val[0], v50), v104.val[0], v53);
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v78, v78))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v77, v77))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v80, v80))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v79, v79))));
        a6[5] = vaddq_f32(a6[5], v102);
        v81 = vmlaq_f32(vmulq_f32(v42, v50), v43, v53);
        v82 = vmlaq_f32(vmulq_f32(v47, v50), v48, v53);
        v83 = vmlaq_f32(vmulq_f32(v103.val[1], v50), v104.val[1], v53);
        v84 = vmlaq_f32(vmulq_f32(v50, v50), v53, v53);
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v82, v82))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v81, v81))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v84, v84))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v83, v83))));
        a6[6] = vaddq_f32(a6[6], v102);
        v85 = vmlaq_f32(vmulq_f32(v40, v51), v41, v54);
        v86 = vmlaq_f32(vmulq_f32(v45, v51), v46, v54);
        v87 = vmlaq_f32(vmulq_f32(v103.val[0], v51), v104.val[0], v54);
        v88 = vmlaq_f32(vmulq_f32(v42, v51), v43, v54);
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v86, v86))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v85, v85))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v88, v88))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v87, v87))));
        a6[7] = vaddq_f32(a6[7], v102);
        v89 = vmlaq_f32(vmulq_f32(v47, v51), v48, v54);
        v90 = vmlaq_f32(vmulq_f32(v103.val[1], v51), v104.val[1], v54);
        v91 = vmlaq_f32(vmulq_f32(v50, v51), v53, v54);
        v92 = vmlaq_f32(vmulq_f32(v51, v51), v54, v54);
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v90, v90))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v89, v89))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v92, v92))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v91, v91))));
        a6[8] = vaddq_f32(a6[8], v102);
        v93 = vmlaq_f32(vmulq_f32(v40, v55), v41, v56);
        v94 = vmlaq_f32(vmulq_f32(v45, v55), v46, v56);
        v95 = vmlaq_f32(vmulq_f32(v103.val[0], v55), v104.val[0], v56);
        v96 = vmlaq_f32(vmulq_f32(v42, v55), v43, v56);
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v94, v94))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v93, v93))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v96, v96))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v95, v95))));
        *a7 = vaddq_f32(*a7, v102);
        a14 = vmlaq_f32(vmulq_f32(v47, v55), v48, v56);
        v97 = vmlaq_f32(vmulq_f32(v103.val[1], v55), v104.val[1], v56);
        v98 = vmlaq_f32(vmulq_f32(v50, v55), v53, v56);
        v99 = vmlaq_f32(vmulq_f32(v51, v55), v54, v56);
        v14 = (float32x2_t)vpaddq_f32(v97, v97).u64[0];
        v15 = (float32x2_t)vpaddq_f32(v98, v98).u64[0];
        *(_QWORD *)&a13 = vpaddq_f32(v99, v99).u64[0];
        v102.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32(v14)), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(a14, a14))));
        v102.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32(*(float32x2_t *)&a13)), COERCE_UNSIGNED_INT(vaddv_f32(v15)));
        a14.i32[1] = v102.i32[1];
        a7[1] = vaddq_f32(a7[1], v102);
      }
      a3 += 16;
      a4 += 2;
      ++a5;
      v20 += 8;
    }
    while (v20 <= (int)result);
    v100 = -(uint64_t)(int)result & 7;
    a5 = (int8x8_t *)((char *)a5 - v100);
    v100 *= 4;
    a4 = (int8x16_t *)((char *)a4 - v100);
    a3 = (const float *)((char *)a3 - 2 * v100);
  }
  while (v19++ < a2 - 1);
  return result;
}

uint64_t sub_20EDA22EC(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float a8, float a9, double a10, double a11, double a12, double a13, int32x4_t a14, float32x4_t a15)
{
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float *v25;
  uint64_t v26;
  float v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;

  if ((int)result >= 1)
  {
    v19 = 0;
    v20 = (a2 - 1) * result;
    v21 = 2 * v20;
    v22 = a4 + 4 * v20;
    v23 = a5 + v20;
    v24 = (float)a2;
    v25 = (float *)(a3 + 4 * v21 + 4);
    do
    {
      v26 = v19 + 1;
      v27 = *(float *)(v22 + 4 * v19);
      if (vabds_f32(v27, a8) < a9 && *(_BYTE *)(v23 + v19) == 1)
      {
        a15.f32[0] = *(v25 - 1);
        *(float *)v16.i32 = (float)(int)v26;
        a15.f32[1] = (float)(int)v26;
        *(float *)&v16.i32[1] = (float)a2;
        v28.f32[0] = 1.0 - (float)((float)((float)(1.0 / a9) * v27) * (float)((float)(1.0 / a9) * v27));
        v30 = a6[2];
        v29 = a6[3];
        v32 = a6[4];
        v31 = a6[5];
        v33 = (float)(v27 - a8) * v28.f32[0];
        *(float *)a14.i32 = *v25 * v28.f32[0];
        v28.f32[1] = *(float *)a14.i32;
        *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)a15.f32, v28);
        v34 = (float32x4_t)vzip1q_s32((int32x4_t)v17, (int32x4_t)v17);
        a15.f32[0] = *(float *)a14.i32 * v24;
        *(float32x2_t *)v15.f32 = vmul_n_f32(*(float32x2_t *)v16.i8, v17.f32[0]);
        v35 = (float32x4_t)vzip1q_s32((int32x4_t)v15, vrev64q_s32((int32x4_t)v15));
        *(int32x2_t *)v36.f32 = vdup_lane_s32(*(int32x2_t *)v15.f32, 0);
        v37 = (float32x4_t)vuzp2q_s32((int32x4_t)v15, vzip1q_s32((int32x4_t)v15, (int32x4_t)v15));
        v37.i32[1] = v17.i32[0];
        v38.i64[0] = v17.i64[0];
        v38.i64[1] = v15.i64[0];
        v18.i32[0] = vdup_lane_s32(*(int32x2_t *)v17.f32, 1).u32[0];
        *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v15.f32, *(int8x8_t *)v17.f32, 4uLL);
        v15.i64[1] = v17.i64[0];
        v17.i32[3] = v36.i32[1];
        *(float32x2_t *)v16.i8 = vmul_n_f32(*(float32x2_t *)v16.i8, -(float)(v15.f32[0] + (float)(*(float *)a14.i32 * v24)));
        v36.i64[1] = v39.i64[0];
        v40 = vaddq_f32(vmulq_f32(v36, v35), *a6);
        v41 = a6[6];
        v42 = a6[7];
        v43 = vmulq_f32(v34, v37);
        v44 = a6[8];
        v45 = vaddq_f32(v43, a6[1]);
        *a6 = v40;
        a6[1] = v45;
        v39.i32[2] = v18.i32[0];
        v18.f32[1] = *(float *)a14.i32 * v24;
        v46 = (int32x4_t)a15;
        v46.i32[1] = a14.i32[0];
        v47 = (float32x4_t)vzip1q_s32(v46, v46);
        v47.f32[2] = *(float *)a14.i32 * v24;
        v17.f32[2] = *(float *)a14.i32 * v24;
        a6[2] = vaddq_f32(vmulq_f32(v38, (float32x4_t)vzip1q_s32((int32x4_t)v18, (int32x4_t)v18)), v30);
        a6[3] = vaddq_f32(vmulq_f32(v47, v17), v29);
        v39.f32[3] = *(float *)a14.i32 * v24;
        v36.i32[0] = a14.i32[0];
        v48 = vzip1q_s32(a14, v16);
        v18.i64[1] = __PAIR64__(v16.u32[0], a14.u32[0]);
        a6[4] = vaddq_f32(vmulq_n_f32(v39, *(float *)a14.i32), v32);
        a6[5] = vaddq_f32(vmulq_f32(v36, (float32x4_t)vzip1q_s32(v48, vdupq_lane_s32(*(int32x2_t *)v48.i8, 1))), v31);
        a15.i32[1] = a14.i32[0];
        a15.i64[1] = v16.i64[0];
        a6[6] = vaddq_f32(vmulq_n_f32(v18, *(float *)v16.i32), v41);
        a6[7] = vaddq_f32(vmulq_lane_f32(v15, *(float32x2_t *)v16.i8, 1), v42);
        a6[8] = vaddq_f32(vmulq_lane_f32(a15, *(float32x2_t *)v16.i8, 1), v44);
        a14 = (int32x4_t)vaddq_f32(vmulq_n_f32(v15, v33), *a7);
        v49 = vaddq_f32(vmulq_n_f32(a15, v33), a7[1]);
        *a7 = (float32x4_t)a14;
        a7[1] = v49;
      }
      v25 += 2;
      ++v19;
    }
    while (result != v26);
  }
  return result;
}

uint64_t sub_20EDA24B4(uint64_t a1, int a2, double a3, double a4, double a5)
{
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_24C9E9458;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 112) = 0xBFF0000000000000;
  if (a3 <= 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 126, (uint64_t)"tau_alpha > 0", 13, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0)|| (*(double *)(a1 + 24) = a3, a4 <= 0.0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 137, (uint64_t)"tau_beta > 0", 12, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0)|| (*(double *)(a1 + 32) = a4, a5 <= 0.0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 115, (uint64_t)"expected_input_time_interval > 0", 32, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0)|| (*(double *)(a1 + 48) = a5, a2)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 149, (uint64_t)"!is_input_quaternion || NumDim == 4", 35, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_BYTE *)(a1 + 40) = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return a1;
}

__n128 sub_20EDA2630@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  unint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  unint64_t v26;
  float64x2_t v27;
  __n128 result;
  float64_t v29;
  float64x2_t v30;

  if (a4 < 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 46, (uint64_t)"timestamp >= 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0)|| (v8 = a4 - *(double *)(a1 + 112), v8 <= 0.0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 48, (uint64_t)"delta_time > 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(double *)(a1 + 112) = a4;
  if (*(_BYTE *)(a1 + 104))
  {
    v9 = *(double *)(a1 + 48);
    v10 = -v8 / v9;
    v11.f64[0] = 1.0 - exp(v10 * *(double *)(a1 + 24));
    v30 = v11;
    *(float64_t *)(a1 + 8) = v11.f64[0];
    v12 = *(double *)(a1 + 32);
    v13.f64[0] = 1.0 - exp(v10 * v12);
    *(float64_t *)(a1 + 16) = v13.f64[0];
    v18.f64[0] = *(float64_t *)(a1 + 72);
    v19 = *(float64x2_t *)(a1 + 56);
    if (v9 == 0.0)
      v14.f64[0] = 1.0;
    else
      v14.f64[0] = v9;
    v14.f64[0] = v8 / v14.f64[0];
    v15.f64[0] = *(float64_t *)(a1 + 96);
    v20 = *(float64x2_t *)(a1 + 80);
    v21 = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    v22 = vmulq_n_f64(v20, v14.f64[0]);
    v16.f64[0] = 1.0 - v30.f64[0];
    v17.f64[0] = a2[1].f64[0];
    v23 = vaddq_f64(vmulq_f64(v30, v17), vmulq_f64(v16, vaddq_f64(v18, vmulq_f64(v14, v15))));
    v27 = vaddq_f64(vmulq_n_f64(*a2, v30.f64[0]), vmulq_n_f64(vaddq_f64(v19, v22), 1.0 - v30.f64[0]));
    *(float64x2_t *)(a1 + 56) = v27;
    *(float64_t *)(a1 + 72) = v23.f64[0];
    v24 = vsubq_f64(v23, v18);
    v25 = vsubq_f64(v27, v19);
    v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
    v27.f64[0] = v9 / v8 * v13.f64[0];
    if (v8 < 0.0001)
      v27.f64[0] = v9 * v12;
    v13.f64[0] = 1.0 - v13.f64[0];
    *(_QWORD *)&v25.f64[1] = v26;
    *(_QWORD *)&v20.f64[1] = v21;
    *(float64x2_t *)(a1 + 80) = vaddq_f64(vmulq_n_f64(v20, v13.f64[0]), vmulq_n_f64(v25, v27.f64[0]));
    *(_QWORD *)(a1 + 96) = *(_OWORD *)&vaddq_f64(vmulq_f64(v15, v13), vmulq_f64(v24, v27));
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 32))(a1, a4);
  }
  else
  {
    v29 = a2[1].f64[0];
    *(float64x2_t *)(a1 + 56) = *a2;
    *(float64_t *)(a1 + 72) = v29;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    result = *(__n128 *)a2;
    *a3 = *a2;
    a3[1].f64[0] = a2[1].f64[0];
  }
  return result;
}

uint64_t sub_20EDA2860(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t sub_20EDA2868@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>, float64x2_t a4@<Q2>)
{
  double v4;
  uint64_t v5;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  double v22;
  double v23;
  float64x2_t v24;

  v4 = a3.f64[0];
  v5 = result;
  if (!*(_BYTE *)(result + 104))
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 86, (uint64_t)"first_value_observed_", 21, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_16;
  }
  v7 = *(double *)(v5 + 112);
  if (v7 > v4)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 87, (uint64_t)"timestamp >= latest_timestamp_observed_", 39, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      goto LABEL_16;
    v7 = *(double *)(v5 + 112);
  }
  v8 = v4 - v7;
  v9 = *(double *)(v5 + 48);
  if (v9 == 0.0)
    v9 = 1.0;
  a4.f64[0] = v8 / v9;
  if (v8 / v9 < 0.0)
  {
    v24 = a4;
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 90, (uint64_t)"num_steps >= 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0);
    a4 = v24;
    if ((_DWORD)result)
LABEL_16:
      abort();
  }
  a3.f64[0] = *(float64_t *)(v5 + 96);
  v10 = vmulq_f64(a4, a3);
  v11 = vmulq_n_f64(*(float64x2_t *)(v5 + 80), a4.f64[0]);
  a4.f64[0] = *(float64_t *)(v5 + 72);
  *(float64x2_t *)a2 = vaddq_f64(*(float64x2_t *)(v5 + 56), v11);
  *(_QWORD *)(a2 + 16) = *(_OWORD *)&vaddq_f64(a4, v10);
  if (*(_BYTE *)(v5 + 40))
  {
    _Q1 = *(float64x2_t *)a2;
    _Q0 = *(float64x2_t *)(a2 + 16);
    _D3 = *(_QWORD *)(a2 + 8);
    __asm { FMLA            D2, D3, V1.D[1] }
    _D3 = _Q0.f64[1];
    __asm { FMLA            D2, D3, V0.D[1] }
    v22 = sqrt(_D2);
    if (v22 == 0.0)
      v23 = 1.0;
    else
      v23 = 1.0 / v22;
    *(float64x2_t *)a2 = vmulq_n_f64(_Q1, v23);
    *(float64x2_t *)(a2 + 16) = vmulq_n_f64(_Q0, v23);
  }
  return result;
}

double sub_20EDA29E8(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 112) = 0xBFF0000000000000;
  return result;
}

uint64_t sub_20EDA2A08(uint64_t a1, char a2, double a3, double a4, double a5)
{
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_24C9E9498;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 128) = 0xBFF0000000000000;
  if (a3 <= 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 126, (uint64_t)"tau_alpha > 0", 13, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0)|| (*(double *)(a1 + 24) = a3, a4 <= 0.0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 137, (uint64_t)"tau_beta > 0", 12, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0)|| (*(double *)(a1 + 32) = a4, a5 <= 0.0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 115, (uint64_t)"expected_input_time_interval > 0", 32, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(double *)(a1 + 48) = a5;
  *(_BYTE *)(a1 + 40) = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return a1;
}

__n128 sub_20EDA2B4C@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  double v25;
  __n128 result;
  float64x2_t v27;
  float64x2_t v28;
  double v29;

  if (a4 < 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 46, (uint64_t)"timestamp >= 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0)|| (v8 = a4 - *(double *)(a1 + 128), v8 <= 0.0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 48, (uint64_t)"delta_time > 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(double *)(a1 + 128) = a4;
  if (*(_BYTE *)(a1 + 120))
  {
    v9 = *(double *)(a1 + 48);
    v10 = -v8 / v9;
    v29 = 1.0 - exp(v10 * *(double *)(a1 + 24));
    *(double *)(a1 + 8) = v29;
    v11 = *(double *)(a1 + 32);
    v12 = 1.0 - exp(v10 * v11);
    *(double *)(a1 + 16) = v12;
    v13 = *(float64x2_t *)(a1 + 56);
    v14 = *(float64x2_t *)(a1 + 72);
    if (v9 == 0.0)
      v15 = 1.0;
    else
      v15 = v9;
    v16 = v8 / v15;
    v17 = *(float64x2_t *)(a1 + 104);
    v18 = *(float64x2_t *)(a1 + 88);
    v19 = vmulq_n_f64(v18, v16);
    v20 = vaddq_f64(vmulq_n_f64(a2[1], v29), vmulq_n_f64(vaddq_f64(v14, vmulq_n_f64(v17, v16)), 1.0 - v29));
    v21 = vaddq_f64(vmulq_n_f64(*a2, v29), vmulq_n_f64(vaddq_f64(v13, v19), 1.0 - v29));
    *(float64x2_t *)(a1 + 56) = v21;
    *(float64x2_t *)(a1 + 72) = v20;
    v22 = vsubq_f64(v20, v14);
    v23 = vsubq_f64(v21, v13);
    v24 = v9 / v8 * v12;
    if (v8 < 0.0001)
      v24 = v9 * v11;
    v25 = 1.0 - v12;
    *(float64x2_t *)(a1 + 104) = vaddq_f64(vmulq_n_f64(v17, v25), vmulq_n_f64(v22, v24));
    *(float64x2_t *)(a1 + 88) = vaddq_f64(vmulq_n_f64(v18, v25), vmulq_n_f64(v23, v24));
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 32))(a1, a4);
  }
  else
  {
    v27 = *a2;
    *(float64x2_t *)(a1 + 72) = a2[1];
    *(float64x2_t *)(a1 + 56) = v27;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_BYTE *)(a1 + 120) = 1;
    result = *(__n128 *)a2;
    v28 = a2[1];
    *a3 = *a2;
    a3[1] = v28;
  }
  return result;
}

uint64_t sub_20EDA2D64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120);
}

uint64_t sub_20EDA2D6C@<X0>(uint64_t result@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  double v6;
  double v7;
  double v8;
  double v22;
  double v23;
  double v24;

  v4 = result;
  if (!*(_BYTE *)(result + 120))
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 86, (uint64_t)"first_value_observed_", 21, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_16;
  }
  v6 = *(double *)(v4 + 128);
  if (v6 > a3)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 87, (uint64_t)"timestamp >= latest_timestamp_observed_", 39, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      goto LABEL_16;
    v6 = *(double *)(v4 + 128);
  }
  v7 = a3 - v6;
  v8 = *(double *)(v4 + 48);
  if (v8 == 0.0)
    v8 = 1.0;
  _D6 = v7 / v8;
  if (v7 / v8 < 0.0)
  {
    v24 = v7 / v8;
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/DoubleExponentialSmoothingFilterHolt.cpp", 90, (uint64_t)"num_steps >= 0", 14, (uint64_t)&unk_21026041A, 0, (void (*)(void **))sub_21023DDB0);
    _D6 = v24;
    if ((_DWORD)result)
LABEL_16:
      abort();
  }
  _Q3 = *(float64x2_t *)(v4 + 88);
  _Q2 = *(float64x2_t *)(v4 + 104);
  _Q0 = vaddq_f64(*(float64x2_t *)(v4 + 56), vmulq_n_f64(_Q3, _D6));
  _Q1 = vmlaq_n_f64(*(float64x2_t *)(v4 + 72), _Q2, _D6);
  *a2 = _Q0;
  a2[1] = _Q1;
  if (*(_BYTE *)(v4 + 40))
  {
    __asm
    {
      FMLA            D5, D6, V3.D[1]
      FMLA            D4, D6, V2.D[1]
      FMLA            D2, D5, V0.D[1]
      FMLA            D2, D4, V1.D[1]
    }
    v22 = sqrt(_D2);
    if (v22 == 0.0)
      v23 = 1.0;
    else
      v23 = 1.0 / v22;
    *a2 = vmulq_n_f64(_Q0, v23);
    a2[1] = vmulq_n_f64(_Q1, v23);
  }
  return result;
}

double sub_20EDA2EF4(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 128) = 0xBFF0000000000000;
  return result;
}

void sub_20EDA2F1C()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EDA2F34()
{
  JUMPOUT(0x212BC6398);
}

int8x16_t *sub_20EDA2F48(int8x16_t *result, int a2, _DWORD *a3, int8x16_t a4)
{
  int v4;
  unsigned __int16 v5;
  int8x16_t v6;
  unsigned __int16 v7;
  _DWORD *v8;
  int v9;
  int8x16_t v10;

  if (a2 >= 4)
  {
    v4 = a2 / 4;
    do
    {
      v5 = vaddlvq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[1], a4)));
      v6 = result[3];
      v7 = vaddlvq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[2], a4)));
      *a3 = vaddlvq_u8((uint8x16_t)vcntq_s8(veorq_s8(*result, a4)));
      a3[1] = v5;
      v8 = a3 + 4;
      a3[2] = v7;
      a3[3] = vaddlvq_u8((uint8x16_t)vcntq_s8(veorq_s8(v6, a4)));
      result += 4;
      a3 += 4;
      --v4;
    }
    while (v4);
    a3 = v8;
  }
  v9 = a2 % 4;
  if (a2 >= 4 * (a2 / 4) && a2 % 4 != 0)
  {
    do
    {
      v10 = *result++;
      *a3++ = vaddlvq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10, a4)));
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_20EDA3010(_QWORD *a1, uint64_t a2, unsigned int a3, uint32x4_t a4)
{
  uint64_t v7;
  int64_t v8;
  __n128 *v9;
  uint32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 *v16;
  unsigned __int32 v17;
  uint64_t v18;
  uint32x4_t v19;
  uint64_t v20;
  uint32x4_t *v21;
  uint32x4_t v22;
  unint64_t v23;
  unsigned __int32 *v24;
  unsigned __int32 v25;
  unsigned __int32 v26;
  __n128 *v27;
  uint64_t v28;
  unsigned __int32 *v29;
  unint64_t v30;
  uint64_t v31;
  int8x16_t *v32;
  unint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  __n128 *v36;
  unint64_t v37;
  _QWORD *v38;
  __n128 *v39;
  unsigned int v40;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - *(_QWORD *)a2;
  if (v7 == *(_QWORD *)a2)
  {
    v27 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (v8 < 0)
      sub_20E867F44();
    v9 = (__n128 *)operator new(v7 - *(_QWORD *)a2);
    bzero(v9, v8);
    v10 = (uint32x4_t *)operator new((unint64_t)v8 >> 2);
    v40 = a3;
    v11 = v8 >> 4;
    v39 = (__n128 *)((char *)v9 + v8);
    bzero(v10, (unint64_t)v8 >> 2);
    if ((unint64_t)(v8 >> 4) <= 1)
      v12 = 1;
    else
      v12 = v8 >> 4;
    if ((int)v11 > 0)
    {
      v38 = a1;
      v13 = 0;
      v14 = (v8 >> 4);
      v15 = ((unint64_t)v8 >> 4) & 7;
      while (1)
      {
        sub_20EDA2F48(*(int8x16_t **)a2, v11, v10, *(int8x16_t *)(*(_QWORD *)a2 + 16 * v13));
        v17 = -1;
        v10->i32[v13] = -1;
        if (v14 < 8)
          break;
        v19.i64[0] = -1;
        v19.i64[1] = -1;
        v20 = v11 - v15;
        v21 = v10 + 1;
        v22.i64[0] = -1;
        v22.i64[1] = -1;
        do
        {
          v19 = vminq_u32(v21[-1], v19);
          v22 = vminq_u32(*v21, v22);
          v21 += 2;
          v20 -= 8;
        }
        while (v20);
        a4 = vminq_u32(v19, v22);
        a4.i32[0] = vminvq_u32(a4);
        v17 = a4.i32[0];
        v18 = v11 - v15;
        if (v15)
          goto LABEL_14;
LABEL_8:
        v16 = &v9[v13];
        v16->n128_u64[0] = v13;
        v16->n128_u32[2] = v17;
        if (++v13 == v12)
        {
          a1 = v38;
          goto LABEL_23;
        }
      }
      v18 = 0;
LABEL_14:
      v23 = v14 - v18;
      v24 = (unsigned __int32 *)v10 + v18;
      do
      {
        v26 = *v24++;
        v25 = v26;
        if (v26 < v17)
          v17 = v25;
        --v23;
      }
      while (v23);
      goto LABEL_8;
    }
    v28 = 0;
    v29 = &v9->n128_u32[2];
    do
    {
      sub_20EDA2F48(*(int8x16_t **)a2, v8 >> 4, v10, *(int8x16_t *)(*(_QWORD *)a2 + 16 * v28));
      v10->i32[v28] = -1;
      *((_QWORD *)v29 - 1) = v28;
      *v29 = -1;
      v29 += 4;
      ++v28;
    }
    while (v12 != v28);
LABEL_23:
    a3 = v40;
    v27 = v39;
  }
  v30 = 126 - 2 * __clz(v27 - v9);
  if (v27 == v9)
    v31 = 0;
  else
    v31 = v30;
  sub_20EDA5C7C(v9, v27, v31, 1, (__n128)a4);
  v32 = *(int8x16_t **)a2;
  v33 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  a1[1] = 0;
  a1[2] = 0;
  if (v33 >= a3)
    v34 = a3;
  else
    v34 = v33;
  *a1 = 0;
  if (v34)
  {
    v35 = operator new(16 * v34);
    *a1 = v35;
    a1[2] = &v35[v34];
    bzero(v35, 16 * v34);
    a1[1] = &v35[v34];
    v36 = v9;
    do
    {
      v37 = v36->n128_u64[0];
      ++v36;
      *v35++ = v32[v37];
      --v34;
    }
    while (v34);
  }
  if (v10)
    operator delete(v10);
  if (v9)
    operator delete(v9);
}

void sub_20EDA3294(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    if (!v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDA32CC(uint64_t *a1, unint64_t a2, uint32x4_t ***a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  uint32x4_t **v46;
  uint32x4_t **v47;
  uint32x4_t *v48;
  uint32x4_t *v49;
  uint64_t v50;
  size_t v51;
  uint32x4_t *v52;
  uint64_t v53;
  uint32x4_t *v54;
  uint32x4_t v55;
  uint32x4_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  _QWORD *v71;
  _QWORD *v72;
  __int128 v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  void *v77;
  unsigned __int8 v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  __int128 v92;
  __int128 *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  __int128 v101;
  void *p_p;
  uint64_t v103;
  char v104;
  size_t v105;
  void *v106;
  unint64_t v107;
  const void *v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  const char *v113;
  size_t v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  const char *v117;
  size_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  void **v122;
  NSObject *v123;
  uint64_t v124;
  uint64_t v125;
  size_t v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  size_t v129;
  size_t v130;
  _BYTE *v131;
  void *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  _QWORD *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *p_shared_owners;
  unint64_t v142;
  void *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  const char *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  const char *v186;
  void *v187;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v189;
  int v190;
  const char *v191;
  int v192;
  const char *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  void *__p;
  size_t v197;
  int64_t v198;
  void *v199;
  char *v200;
  _QWORD v201[3];
  const void *v202;
  uint64_t v203;
  const void *v204;
  unint64_t v205;
  void *v206;
  char v207;
  unint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  __int128 v215;
  std::__shared_weak_count *v216;
  char *v217;
  std::__shared_weak_count *v218;
  _BYTE __dst[24];
  __int128 v220;
  uint64_t v221;
  _BYTE v222[24];
  __int128 v223;
  void *v224[2];
  unint64_t v225;
  char v226;
  uint64_t v227;

  v4 = a2;
  v227 = *MEMORY[0x24BDAC8D0];
  v212 = a2;
  v6 = a1[1];
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(_QWORD **)(*a1 + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return 0;
            }
            else if ((v12 & (v6 - 1)) != v8)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return 0;
          }
          else
          {
            if (v11 >= v6)
              v11 %= v6;
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
LABEL_23:
    if (v7.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v6 <= a2)
        v3 = a2 % v6;
    }
    else
    {
      v3 = (v6 - 1) & a2;
    }
    v14 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == a2)
            {
              if (v15[2] == a2)
                goto LABEL_112;
            }
            else if ((v17 & (v6 - 1)) != v3)
            {
              goto LABEL_42;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_42;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == a2)
          {
            if (v15[2] == a2)
              goto LABEL_112;
          }
          else
          {
            if (v16 >= v6)
              v16 %= v6;
            if (v16 != v3)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_42:
  v18 = a1 + 2;
  v15 = operator new(0x30uLL);
  v199 = v15;
  v200 = (char *)(a1 + 2);
  *v15 = 0;
  v15[1] = v4;
  v15[2] = v4;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  LOBYTE(v201[0]) = 1;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (v6 && (float)(v20 * (float)v6) >= v19)
  {
    v4 = v3;
    v21 = *a1;
    v22 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v22)
      goto LABEL_104;
LABEL_92:
    *v15 = *v22;
LABEL_110:
    *v22 = v15;
    goto LABEL_111;
  }
  v23 = 1;
  if (v6 >= 3)
    v23 = (v6 & (v6 - 1)) != 0;
  v24 = v23 | (2 * v6);
  v25 = vcvtps_u32_f32(v19 / v20);
  if (v24 <= v25)
    prime = v25;
  else
    prime = v24;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = a1[1];
  }
  if (prime > v6)
  {
LABEL_56:
    if (prime >> 61)
      sub_20E877A38();
    v27 = operator new(8 * prime);
    v28 = (void *)*a1;
    *a1 = (uint64_t)v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v29++) = 0;
    while (prime != v29);
    v30 = (_QWORD *)*v18;
    if (!*v18)
      goto LABEL_88;
    v31 = v30[1];
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(*a1 + 8 * v33) = v18;
      for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v30 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v35))
        {
          *v30 = *i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(*a1 + v36);
          **(_QWORD **)(*a1 + v36) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v35) = v30;
          v30 = i;
          v33 = v35;
        }
      }
      goto LABEL_88;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(*a1 + 8 * v31) = v18;
    v40 = (_QWORD *)*v30;
    if (!*v30)
    {
LABEL_88:
      v6 = prime;
      v43 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_89;
LABEL_103:
      v4 &= v43;
      v21 = *a1;
      v22 = *(_QWORD **)(*a1 + 8 * v4);
      if (!v22)
        goto LABEL_104;
      goto LABEL_92;
    }
    while (1)
    {
      v42 = v40[1];
      if (v42 >= prime)
        v42 %= prime;
      if (v42 == v31)
        goto LABEL_82;
      if (*(_QWORD *)(*a1 + 8 * v42))
      {
        *v30 = *v40;
        v41 = 8 * v42;
        *v40 = **(_QWORD **)(*a1 + v41);
        **(_QWORD **)(*a1 + v41) = v40;
        v40 = v30;
LABEL_82:
        v30 = v40;
        v40 = (_QWORD *)*v40;
        if (!v40)
          goto LABEL_88;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v42) = v30;
        v30 = v40;
        v40 = (_QWORD *)*v40;
        v31 = v42;
        if (!v40)
          goto LABEL_88;
      }
    }
  }
  if (prime < v6)
  {
    v37 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v6 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
    {
      v37 = std::__next_prime(v37);
    }
    else
    {
      v39 = 1 << -(char)__clz(v37 - 1);
      if (v37 >= 2)
        v37 = v39;
    }
    if (prime <= v37)
      prime = v37;
    if (prime < v6)
    {
      if (!prime)
      {
        v44 = (void *)*a1;
        *a1 = 0;
        if (v44)
          operator delete(v44);
        v6 = 0;
        a1[1] = 0;
        v43 = -1;
        goto LABEL_103;
      }
      goto LABEL_56;
    }
    v6 = a1[1];
  }
  v43 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
    goto LABEL_103;
LABEL_89:
  if (v6 <= v4)
    v4 %= v6;
  v21 = *a1;
  v22 = *(_QWORD **)(*a1 + 8 * v4);
  if (v22)
    goto LABEL_92;
LABEL_104:
  *v15 = *v18;
  *v18 = v15;
  *(_QWORD *)(v21 + 8 * v4) = v18;
  if (*v15)
  {
    v45 = *(_QWORD *)(*v15 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v45 >= v6)
        v45 %= v6;
    }
    else
    {
      v45 &= v6 - 1;
    }
    v22 = (_QWORD *)(*a1 + 8 * v45);
    goto LABEL_110;
  }
LABEL_111:
  ++a1[3];
LABEL_112:
  v46 = *a3;
  v47 = a3[1];
  if (*a3 != v47)
  {
    do
    {
      v49 = *v46;
      v48 = v46[1];
      v50 = (char *)v48 - (char *)*v46;
      if (v48 == *v46)
      {
        v52 = 0;
        memset(v222, 0, sizeof(v222));
        v61 = v15[4];
        v60 = v15[5];
        if (v61 >= v60)
          goto LABEL_125;
      }
      else
      {
        if (v50 < 0)
          sub_20E867F44();
        v51 = (unint64_t)v50 >> 2;
        v52 = (uint32x4_t *)operator new((unint64_t)v50 >> 2);
        v199 = v52;
        v201[0] = &v52[v50 >> 6];
        bzero(v52, (unint64_t)v50 >> 2);
        v200 = &v52->i8[(unint64_t)v50 >> 2];
        if ((unint64_t)(v50 >> 6) <= 1)
          v53 = 1;
        else
          v53 = v50 >> 6;
        v54 = v52;
        do
        {
          v55 = *v49;
          v49 += 4;
          v56 = v55;
          *v54++ = v55;
          --v53;
        }
        while (v53);
        v57 = (unint64_t)v50 >> 6;
        if (v57 >= 0xC9)
        {
          sub_20EDA3010(v222, (uint64_t)&v199, 0xC8u, v56);
        }
        else
        {
          v58 = (char *)operator new(v51);
          v59 = &v58[16 * v57];
          *(_QWORD *)v222 = v58;
          *(_QWORD *)&v222[16] = v59;
          memcpy(v58, v52, v51);
          *(_QWORD *)&v222[8] = v59;
        }
        v61 = v15[4];
        v60 = v15[5];
        if (v61 >= v60)
        {
LABEL_125:
          v62 = v15[3];
          v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - v62) >> 3);
          v64 = v63 + 1;
          if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - v62) >> 3);
          if (2 * v65 > v64)
            v64 = 2 * v65;
          if (v65 >= 0x555555555555555)
            v66 = 0xAAAAAAAAAAAAAAALL;
          else
            v66 = v64;
          if (v66 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v67 = (char *)operator new(24 * v66);
          v68 = &v67[24 * v63];
          v69 = &v67[24 * v66];
          *(_OWORD *)v68 = *(_OWORD *)v222;
          *((_QWORD *)v68 + 2) = *(_QWORD *)&v222[16];
          v70 = v68 + 24;
          v71 = (_QWORD *)v15[3];
          v72 = (_QWORD *)v15[4];
          if (v72 == v71)
          {
            v15[3] = v68;
            v15[4] = v70;
            v15[5] = v69;
          }
          else
          {
            do
            {
              v73 = *(_OWORD *)(v72 - 3);
              v72 -= 3;
              *(_OWORD *)(v68 - 24) = v73;
              v68 -= 24;
              *((_QWORD *)v68 + 2) = v72[2];
              *v72 = 0;
              v72[1] = 0;
              v72[2] = 0;
            }
            while (v72 != v71);
            v72 = (_QWORD *)v15[3];
            v74 = (_QWORD *)v15[4];
            v15[3] = v68;
            v15[4] = v70;
            v15[5] = v69;
            if (v74 != v72)
            {
              v75 = v74;
              do
              {
                v77 = (void *)*(v75 - 3);
                v75 -= 3;
                v76 = v77;
                if (v77)
                {
                  *(v74 - 2) = v76;
                  operator delete(v76);
                }
                v74 = v75;
              }
              while (v75 != v72);
            }
          }
          if (v72)
            operator delete(v72);
          goto LABEL_145;
        }
      }
      *(_OWORD *)v61 = *(_OWORD *)v222;
      *(_QWORD *)(v61 + 16) = *(_QWORD *)&v222[16];
      v70 = (char *)(v61 + 24);
LABEL_145:
      v15[4] = v70;
      if (v52)
        operator delete(v52);
      v46 += 3;
    }
    while (v46 != v47);
  }
  v78 = atomic_load((unsigned __int8 *)&qword_254A5F950);
  if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F950))
  {
    sub_21021D3D8(v222);
    sub_20E8610C0(&v199, "cv3d.odt.image_detection_and_tracking");
    sub_20E8C4068((uint64_t **)v222, (uint64_t)&v199, &qword_254A5F948);
    if (SHIBYTE(v201[0]) < 0)
      operator delete(v199);
    __cxa_guard_release(&qword_254A5F950);
  }
  v211 = qword_254A5F948;
  if (**(int **)(qword_254A5F948 + 56) <= 2)
  {
    v79 = *(unsigned __int8 *)(qword_254A5F948 + 72);
    v80 = sub_20E8C31DC(qword_254A5F948, "OSLogSurrogateAppender", 1, 0);
    v81 = v80;
    if (v79 || v80 != 0)
    {
      sub_20E863438((uint64_t)&v199);
      v83 = sub_20E86A980(v201, (uint64_t)"Model ", 6);
      sub_20E9F6CBC(&v212);
      if (v189 >= 0)
        v84 = &v187;
      else
        v84 = v187;
      if (v189 >= 0)
        v85 = HIBYTE(v189);
      else
        v85 = rep;
      v86 = sub_20E86A980(v83, (uint64_t)v84, v85);
      v87 = sub_20E86A980(v86, (uint64_t)": ", 2);
      v88 = (char *)*a3;
      v89 = (char *)a3[1];
      memset(v222, 0, sizeof(v222));
      v90 = v89 - v88;
      if (v89 == v88)
      {
        v92 = 0uLL;
      }
      else
      {
        v91 = 0xAAAAAAAAAAAAAAABLL * (v90 >> 3);
        if (v91 >> 61)
          sub_20E867F44();
        *(_QWORD *)v222 = operator new(0x5555555555555558 * (v90 >> 3));
        *(_QWORD *)&v222[8] = *(_QWORD *)v222;
        *(_QWORD *)&v222[16] = *(_QWORD *)v222 + 8 * v91;
        __p = v222;
        do
        {
          *(_QWORD *)&v220 = (uint64_t)(*((_QWORD *)v88 + 1) - *(_QWORD *)v88) >> 6;
          sub_20EDA6C78((uint64_t *)&__p, &v220);
          v88 += 24;
        }
        while (v88 != v89);
        v92 = *(_OWORD *)v222;
        v90 = *(_QWORD *)&v222[16];
      }
      *(_OWORD *)__dst = v92;
      *(_QWORD *)&__dst[16] = v90;
      LODWORD(v223) = 0;
      sub_20EAE00A0((uint64_t)&__p, (uint64_t)v222, (unint64_t **)__dst);
      if ((_DWORD)v223 == -1)
        sub_20E877AB8();
      __p = &v220;
      ((void (*)(__int128 *__return_ptr, void **, _BYTE *))off_24C9E9530[v223])(&v215, &__p, v222);
      if ((_DWORD)v223 != -1)
        ((void (*)(void **, _BYTE *))off_24C9E9518[v223])(&__p, v222);
      if (SHIBYTE(v216) >= 0)
        v93 = &v215;
      else
        v93 = (__int128 *)v215;
      if (SHIBYTE(v216) >= 0)
        v94 = HIBYTE(v216);
      else
        v94 = *((_QWORD *)&v215 + 1);
      v95 = sub_20E86A980(v87, (uint64_t)v93, v94);
      v96 = sub_20E86A980(v95, (uint64_t)" -> ", 4);
      v98 = (char *)v15[3];
      v97 = (char *)v15[4];
      memset(v222, 0, sizeof(v222));
      v99 = v97 - v98;
      if (v97 == v98)
      {
        v101 = 0uLL;
      }
      else
      {
        v100 = 0xAAAAAAAAAAAAAAABLL * (v99 >> 3);
        if (v100 >> 61)
          sub_20E867F44();
        *(_QWORD *)v222 = operator new(0x5555555555555558 * (v99 >> 3));
        *(_QWORD *)&v222[8] = *(_QWORD *)v222;
        *(_QWORD *)&v222[16] = *(_QWORD *)v222 + 8 * v100;
        v214 = (uint64_t *)v222;
        do
        {
          v213 = (uint64_t)(*((_QWORD *)v98 + 1) - *(_QWORD *)v98) >> 4;
          sub_20EDA6C78((uint64_t *)&v214, &v213);
          v98 += 24;
        }
        while (v98 != v97);
        v101 = *(_OWORD *)v222;
        v99 = *(_QWORD *)&v222[16];
      }
      v220 = v101;
      v221 = v99;
      LODWORD(v223) = 0;
      sub_20EAE00A0((uint64_t)&v214, (uint64_t)v222, (unint64_t **)&v220);
      if ((_DWORD)v223 == -1)
        sub_20E877AB8();
      v214 = &v213;
      ((void (*)(void **__return_ptr, uint64_t **, _BYTE *))off_24C9E9530[v223])(&__p, &v214, v222);
      if ((_DWORD)v223 != -1)
        ((void (*)(uint64_t **, _BYTE *))off_24C9E9518[v223])(&v214, v222);
      if (v198 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v198 >= 0)
        v103 = HIBYTE(v198);
      else
        v103 = v197;
      sub_20E86A980(v96, (uint64_t)p_p, v103);
      if (SHIBYTE(v198) < 0)
        operator delete(__p);
      if ((_QWORD)v220)
      {
        *((_QWORD *)&v220 + 1) = v220;
        operator delete((void *)v220);
      }
      if (SHIBYTE(v216) < 0)
        operator delete((void *)v215);
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      if (SHIBYTE(v189) < 0)
      {
        operator delete(v187);
        v104 = v209;
        v184 = v79;
        if ((v209 & 0x10) == 0)
        {
LABEL_199:
          if ((v104 & 8) == 0)
          {
            v105 = 0;
            HIBYTE(v198) = 0;
            v106 = &__p;
            goto LABEL_212;
          }
          v108 = v202;
          v105 = v203 - (_QWORD)v202;
          if ((unint64_t)(v203 - (_QWORD)v202) > 0x7FFFFFFFFFFFFFF7)
LABEL_257:
            sub_20E860B7C();
LABEL_205:
          if (v105 >= 0x17)
          {
            v109 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v105 | 7) != 0x17)
              v109 = v105 | 7;
            v110 = v109 + 1;
            v106 = operator new(v109 + 1);
            v197 = v105;
            v198 = v110 | 0x8000000000000000;
            __p = v106;
          }
          else
          {
            HIBYTE(v198) = v105;
            v106 = &__p;
            if (!v105)
            {
LABEL_212:
              *((_BYTE *)v106 + v105) = 0;
              v187 = &v211;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v189 = std::chrono::system_clock::now().__d_.__rep_;
              v190 = 2;
              v191 = "unknown file";
              v192 = 345;
              v194 = 0;
              v195 = 0;
              v193 = "unknown function";
              if (v198 >= 0)
                v111 = (const char *)&__p;
              else
                v111 = (const char *)__p;
              v112 = *(_QWORD *)v187;
              v113 = (const char *)(*(_QWORD *)v187 + 16);
              v186 = v113;
              if (*(char *)(*(_QWORD *)v187 + 39) < 0)
              {
                v113 = *(const char **)(v112 + 16);
                v114 = *(_QWORD *)(v112 + 24);
                v116 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v116 & 1) != 0)
                  goto LABEL_219;
              }
              else
              {
                v114 = *(unsigned __int8 *)(*(_QWORD *)v187 + 39);
                v115 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v115 & 1) != 0)
                  goto LABEL_219;
              }
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v222);
                sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)v222);
                if ((_BYTE)v223 && (v222[23] & 0x80000000) != 0)
                  operator delete(*(void **)v222);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
LABEL_219:
              if (byte_254A4A50F >= 0)
                v117 = (const char *)&xmmword_254A4A4F8;
              else
                v117 = (const char *)xmmword_254A4A4F8;
              if (byte_254A4A50F >= 0)
                v118 = byte_254A4A50F;
              else
                v118 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
              *(_QWORD *)v222 = os_log_create(v117, v113);
              v119 = &v222[8];
              if (v118 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v118 >= 0x17)
              {
                v120 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v118 | 7) != 0x17)
                  v120 = v118 | 7;
                v121 = v120 + 1;
                v119 = operator new(v120 + 1);
                *(_QWORD *)&v222[16] = v118;
                *(_QWORD *)&v223 = v121 | 0x8000000000000000;
                *(_QWORD *)&v222[8] = v119;
              }
              else
              {
                BYTE7(v223) = v118;
                if (!v118)
                {
LABEL_233:
                  v119[v118] = 0;
                  BYTE8(v223) = 1;
                  v122 = v224;
                  if (v114 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v114 >= 0x17)
                  {
                    v124 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v114 | 7) != 0x17)
                      v124 = v114 | 7;
                    v125 = v124 + 1;
                    v122 = (void **)operator new(v124 + 1);
                    v224[1] = (void *)v114;
                    v225 = v125 | 0x8000000000000000;
                    v224[0] = v122;
                  }
                  else
                  {
                    HIBYTE(v225) = v114;
                    if (!v114)
                    {
                      LOBYTE(v224[0]) = 0;
                      v226 = 1;
                      v123 = *(NSObject **)v222;
                      if ((SHIBYTE(v225) & 0x80000000) == 0)
                        goto LABEL_237;
                      goto LABEL_243;
                    }
                  }
                  memmove(v122, v113, v114);
                  *((_BYTE *)v122 + v114) = 0;
                  v226 = 1;
                  v123 = *(NSObject **)v222;
                  if ((SHIBYTE(v225) & 0x80000000) == 0)
                  {
LABEL_237:
                    if (!BYTE8(v223))
                      goto LABEL_246;
                    goto LABEL_244;
                  }
LABEL_243:
                  operator delete(v224[0]);
                  if (!BYTE8(v223))
                    goto LABEL_246;
LABEL_244:
                  if (SBYTE7(v223) < 0)
                    operator delete(*(void **)&v222[8]);
LABEL_246:
                  if (*(_QWORD *)v222)
                    os_release(*(void **)v222);
                  if (!v81 || !*(_QWORD *)(v81 + 24))
                  {
                    os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v222 = 136315138;
                    *(_QWORD *)&v222[4] = v111;
                    v132 = (void *)_os_log_send_and_compose_impl();
                    v133 = v184;
                    if (v132)
                      free(v132);
                    goto LABEL_321;
                  }
                  v126 = _os_log_pack_size();
                  v127 = (std::__shared_weak_count_vtbl *)operator new(v126, (std::align_val_t)8uLL);
                  v128 = (std::__shared_weak_count *)operator new();
                  v128->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v128->__shared_owners_ = 0;
                  v128->__shared_weak_owners_ = 0;
                  v128[1].__vftable = v127;
                  *(_QWORD *)&v215 = v127;
                  *((_QWORD *)&v215 + 1) = v127;
                  v217 = 0;
                  v218 = 0;
                  v216 = v128;
                  v129 = strlen(v111);
                  if (v129 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v130 = v129;
                  if (v129 >= 0x17)
                  {
                    v134 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v129 | 7) != 0x17)
                      v134 = v129 | 7;
                    v135 = v134 + 1;
                    v131 = operator new(v134 + 1);
                    *(_QWORD *)&__dst[8] = v130;
                    *(_QWORD *)&__dst[16] = v135 | 0x8000000000000000;
                    *(_QWORD *)__dst = v131;
                  }
                  else
                  {
                    __dst[23] = v129;
                    v131 = __dst;
                    if (!v129)
                    {
LABEL_262:
                      v131[v130] = 0;
                      v136 = *(_QWORD *)__dst;
                      *(_QWORD *)&v220 = *(_QWORD *)&__dst[8];
                      *(_QWORD *)((char *)&v220 + 7) = *(_QWORD *)&__dst[15];
                      v137 = __dst[23];
                      v138 = operator new(0x38uLL);
                      v138[1] = 0;
                      v138[2] = 0;
                      v138[3] = off_24C9ABC20;
                      *v138 = &off_24C9ABBD0;
                      v139 = v220;
                      v138[4] = v136;
                      v138[5] = v139;
                      *(_QWORD *)((char *)v138 + 47) = *(_QWORD *)((char *)&v220 + 7);
                      *((_BYTE *)v138 + 55) = v137;
                      *(_QWORD *)&v220 = 0;
                      *(_QWORD *)((char *)&v220 + 7) = 0;
                      v140 = v218;
                      v217 = (char *)(v138 + 3);
                      v218 = (std::__shared_weak_count *)v138;
                      if (v140)
                      {
                        p_shared_owners = (unint64_t *)&v140->__shared_owners_;
                        do
                          v142 = __ldaxr(p_shared_owners);
                        while (__stlxr(v142 - 1, p_shared_owners));
                        if (!v142)
                        {
                          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                          std::__shared_weak_count::__release_weak(v140);
                        }
                      }
                      *(_OWORD *)v222 = v215;
                      v143 = v217;
                      *(_QWORD *)&v222[16] = v216;
                      if (v216)
                      {
                        v144 = (unint64_t *)&v216->__shared_owners_;
                        do
                          v145 = __ldxr(v144);
                        while (__stxr(v145 + 1, v144));
                      }
                      v146 = v218;
                      *(_QWORD *)&v223 = v143;
                      *((_QWORD *)&v223 + 1) = v218;
                      if (v218)
                      {
                        v147 = (unint64_t *)&v218->__shared_owners_;
                        do
                          v148 = __ldxr(v147);
                        while (__stxr(v148 + 1, v147));
                        v224[0] = v143;
                        do
                          v149 = __ldaxr(v147);
                        while (__stlxr(v149 - 1, v147));
                        if (!v149)
                        {
                          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                          std::__shared_weak_count::__release_weak(v146);
                        }
                      }
                      else
                      {
                        v224[0] = v143;
                      }
                      v150 = v216;
                      if (v216)
                      {
                        v151 = (unint64_t *)&v216->__shared_owners_;
                        do
                          v152 = __ldaxr(v151);
                        while (__stlxr(v152 - 1, v151));
                        if (!v152)
                        {
                          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                          std::__shared_weak_count::__release_weak(v150);
                        }
                      }
                      v153 = *(_QWORD *)v222;
                      if (*((char *)v224[0] + 31) >= 0)
                        v154 = (char *)v224[0] + 8;
                      else
                        v154 = (char *)*((_QWORD *)v224[0] + 1);
                      v155 = _os_log_pack_fill();
                      *(_DWORD *)v155 = 136315138;
                      *(_QWORD *)(v155 + 4) = v154;
                      v156 = operator new();
                      v157 = *(unsigned __int8 *)(v112 + 39);
                      v158 = v186;
                      if ((v157 & 0x80u) != 0)
                      {
                        v158 = *(const char **)(v112 + 16);
                        v157 = *(_QWORD *)(v112 + 24);
                      }
                      *(_QWORD *)v156 = v153;
                      *(_OWORD *)(v156 + 8) = *(_OWORD *)&v222[8];
                      *(_QWORD *)&v222[8] = 0;
                      *(_QWORD *)&v222[16] = 0;
                      *(_OWORD *)(v156 + 24) = v223;
                      v223 = 0uLL;
                      *(_QWORD *)(v156 + 40) = v158;
                      *(_QWORD *)(v156 + 48) = v157;
                      *(_BYTE *)(v156 + 56) = 2;
                      *(_QWORD *)__dst = 0;
                      *(_QWORD *)&v215 = v156;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v81 + 24) + 40))(*(_QWORD *)(v81 + 24), &v215);
                      v159 = v215;
                      *(_QWORD *)&v215 = 0;
                      v133 = v184;
                      if (v159)
                      {
                        v160 = *(std::__shared_weak_count **)(v159 + 32);
                        if (v160)
                        {
                          v161 = (unint64_t *)&v160->__shared_owners_;
                          do
                            v162 = __ldaxr(v161);
                          while (__stlxr(v162 - 1, v161));
                          if (!v162)
                          {
                            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                            std::__shared_weak_count::__release_weak(v160);
                          }
                        }
                        v163 = *(std::__shared_weak_count **)(v159 + 16);
                        if (v163)
                        {
                          v164 = (unint64_t *)&v163->__shared_owners_;
                          do
                            v165 = __ldaxr(v164);
                          while (__stlxr(v165 - 1, v164));
                          if (!v165)
                          {
                            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                            std::__shared_weak_count::__release_weak(v163);
                          }
                        }
                        MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
                        v166 = *(_QWORD *)__dst;
                        *(_QWORD *)__dst = 0;
                        if (v166)
                        {
                          v167 = *(std::__shared_weak_count **)(v166 + 32);
                          if (v167)
                          {
                            v168 = (unint64_t *)&v167->__shared_owners_;
                            do
                              v169 = __ldaxr(v168);
                            while (__stlxr(v169 - 1, v168));
                            if (!v169)
                            {
                              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                              std::__shared_weak_count::__release_weak(v167);
                            }
                          }
                          v170 = *(std::__shared_weak_count **)(v166 + 16);
                          if (v170)
                          {
                            v171 = (unint64_t *)&v170->__shared_owners_;
                            do
                              v172 = __ldaxr(v171);
                            while (__stlxr(v172 - 1, v171));
                            if (!v172)
                            {
                              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                              std::__shared_weak_count::__release_weak(v170);
                            }
                          }
                          MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
                        }
                      }
                      v173 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
                      if (*((_QWORD *)&v223 + 1))
                      {
                        v174 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
                        do
                          v175 = __ldaxr(v174);
                        while (__stlxr(v175 - 1, v174));
                        if (!v175)
                        {
                          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                          std::__shared_weak_count::__release_weak(v173);
                        }
                      }
                      v176 = *(std::__shared_weak_count **)&v222[16];
                      if (*(_QWORD *)&v222[16])
                      {
                        v177 = (unint64_t *)(*(_QWORD *)&v222[16] + 8);
                        do
                          v178 = __ldaxr(v177);
                        while (__stlxr(v178 - 1, v177));
                        if (!v178)
                        {
                          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                          std::__shared_weak_count::__release_weak(v176);
                        }
                      }
LABEL_321:
                      if (v133)
                      {
                        v179 = (const char *)&__p;
                        if (v198 < 0)
                          v179 = (const char *)__p;
                        sub_20E8C003C((uint64_t)&v187, "%s", v179);
                        sub_20E863570((uint64_t)&v187);
                      }
                      sub_20E863570((uint64_t)&v187);
                      v180 = v195;
                      if (v195)
                      {
                        v181 = (unint64_t *)&v195->__shared_owners_;
                        do
                          v182 = __ldaxr(v181);
                        while (__stlxr(v182 - 1, v181));
                        if (!v182)
                        {
                          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                          std::__shared_weak_count::__release_weak(v180);
                        }
                      }
                      if (SHIBYTE(v198) < 0)
                        operator delete(__p);
                      v199 = (void *)*MEMORY[0x24BEDB7F0];
                      v183 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(void **)((char *)&v199 + *((_QWORD *)v199 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                      v201[0] = v183;
                      v201[1] = MEMORY[0x24BEDB848] + 16;
                      if (v207 < 0)
                        operator delete(v206);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v210);
                      return 1;
                    }
                  }
                  memcpy(v131, v111, v130);
                  goto LABEL_262;
                }
              }
              memmove(v119, v117, v118);
              goto LABEL_233;
            }
          }
          memmove(v106, v108, v105);
          goto LABEL_212;
        }
      }
      else
      {
        v104 = v209;
        v184 = v79;
        if ((v209 & 0x10) == 0)
          goto LABEL_199;
      }
      v107 = v208;
      if (v208 < v205)
      {
        v208 = v205;
        v107 = v205;
      }
      v108 = v204;
      v105 = v107 - (_QWORD)v204;
      if (v107 - (unint64_t)v204 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_257;
      goto LABEL_205;
    }
  }
  return 1;
}

void sub_20EDA47E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  if (*(_BYTE *)(v4 - 152) && *(char *)(v4 - 153) < 0)
    operator delete(*(void **)(v4 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EDA4A80(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 176);
  if (v4)
    operator delete(v4);
  if (!v1)
    JUMPOUT(0x20EDA4AA0);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EDA4AB8(_QWORD *a1@<X0>, uint32x4_t **a2@<X1>, unint64_t a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  __n128 v10;
  void *v11;
  __n128 v12;
  char *v13;
  __n128 v14;
  char *v15;
  uint64_t v16;
  __n128 *v17;

  v6 = (_QWORD *)a1[2];
  v7 = a1[3];
  v14 = 0uLL;
  v15 = 0;
  if (v7)
  {
    if (v7 >> 61)
      sub_20E92CED8();
    v8 = (char *)operator new(8 * v7);
    v9 = &v8[8 * v7];
    v14.n128_u64[0] = (unint64_t)v8;
    v14.n128_u64[1] = (unint64_t)v8;
    v15 = v9;
    v17 = &v14;
    if (v6)
      goto LABEL_4;
LABEL_7:
    v10 = (__n128)vdupq_n_s64((unint64_t)v8);
    goto LABEL_8;
  }
  v9 = 0;
  v8 = 0;
  v17 = &v14;
  if (!v6)
    goto LABEL_7;
  do
  {
LABEL_4:
    v16 = v6[2];
    sub_20E9B2D04((uint64_t *)&v17, &v16);
    v6 = (_QWORD *)*v6;
  }
  while (v6);
  v10 = v14;
  v9 = v15;
LABEL_8:
  v11 = (void *)v10.n128_u64[0];
  v12 = v10;
  v13 = v9;
  sub_20EDA4BE0(a1, a2, (unint64_t **)&v12, a3, v10);
  if (v11)
  {
    v12.n128_u64[1] = (unint64_t)v11;
    operator delete(v11);
  }
}

void sub_20EDA4BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  _Unwind_Resume(exception_object);
}

void sub_20EDA4BE0(_QWORD *a1@<X0>, uint32x4_t **a2@<X1>, unint64_t **a3@<X2>, unint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint32x4_t *v8;
  uint32x4_t *v9;
  unint64_t v10;
  uint32x4_t *v11;
  uint64_t v12;
  uint32x4_t *v13;
  uint32x4_t v14;
  uint32x4_t v15;
  int8x16_t *v16;
  char *v17;
  unint64_t *v18;
  unint64_t *v19;
  int8x8_t v20;
  char *v21;
  int8x16_t *v22;
  __n128 *v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  char *v40;
  int8x16_t *v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int8x16_t *v48;
  char *v49;
  size_t v50;
  char *v51;
  unint64_t v52;
  int8x16_t *v53;
  size_t v54;
  int v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int8x16_t *v59;
  unsigned int v60;
  unsigned int v61;
  uint32x4_t v62;
  uint64_t i64;
  int v64;
  int8x16_t *v65;
  int8x16_t v66;
  int8x16_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  int8x16_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  __int32 v77;
  char *v78;
  int64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  __n128 *v97;
  __n128 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 *v102;
  __n128 *v103;
  uint64_t v104;
  char *v105;
  BOOL v106;
  unsigned __int32 v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  __n128 *v116;
  char *v117;
  char *v118;
  signed __int32 v119;
  char *v120;
  char *v121;
  char *v122;
  signed __int32 v123;
  signed __int32 v124;
  BOOL v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t *v129;
  _QWORD *v130;
  __n128 *v131;
  uint64_t v132;
  __n128 *v133;
  unint64_t v134;
  unsigned __int32 v135;
  unint64_t v136;
  uint8x8_t v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  float v144;
  float v145;
  uint64_t v146;
  _QWORD *v147;
  _BOOL8 v148;
  unint64_t v149;
  unint64_t v150;
  size_t prime;
  unint64_t v152;
  unint64_t v153;
  uint8x8_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _BYTE *v164;
  _QWORD *v165;
  int64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  char *v176;
  uint64_t v177;
  __int128 v178;
  unint64_t *v179;
  _QWORD *v180;
  unint64_t *v181;
  __n128 *v182;
  unint64_t v183;
  __n128 *v184;
  __n128 *__p;
  __n128 *__pa;
  unint64_t v187;
  uint64_t v188;
  size_t v189;
  char *v190;
  int8x16_t *v191;
  char *v192;
  char *v193;
  char *v194;
  unsigned __int32 v195;
  unint64_t v196;
  uint32x4_t v197;
  __n128 v198;
  uint32x4_t v199;
  uint32x4_t v200;
  __n128 v201;
  char *v202;
  char *v203;
  char *v204;
  int8x16_t *v205;
  char *v206;
  unint64_t v207;
  int8x16_t *v208;
  int8x16_t *v209;
  char *v210;
  uint32x4_t *v211;
  char *v212;
  char *i8;

  v9 = *a2;
  v8 = a2[1];
  v212 = 0;
  i8 = 0;
  v211 = 0;
  v10 = (char *)v8 - (char *)v9;
  v196 = a4;
  if (v8 == v9)
  {
    v208 = 0;
    v209 = 0;
    v210 = 0;
  }
  else
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v11 = (uint32x4_t *)operator new(v10 >> 2);
    v211 = v11;
    i8 = v11[(uint64_t)v10 >> 6].i8;
    bzero(v11, v10 >> 2);
    v212 = &v11->i8[v10 >> 2];
    if ((unint64_t)((uint64_t)v10 >> 6) <= 1)
      v12 = 1;
    else
      v12 = (uint64_t)v10 >> 6;
    v13 = v11;
    do
    {
      v14 = *v9;
      v9 += 4;
      v15 = v14;
      *v13++ = v14;
      --v12;
    }
    while (v12);
    if (v10 >> 6 >= 0x1F5)
    {
      sub_20EDA3010(&v208, (uint64_t)&v211, 0x1F4u, v15);
    }
    else
    {
      v16 = (int8x16_t *)operator new(v10 >> 2);
      v17 = v16[v10 >> 6].i8;
      v208 = v16;
      v210 = v17;
      memcpy(v16, v11, v10 >> 2);
      v209 = (int8x16_t *)v17;
    }
  }
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v18 = *a3;
  v19 = a3[1];
  if (*a3 == v19 || (v20 = (int8x8_t)a1[1], !*(_QWORD *)&v20))
  {
    v24 = 0;
    v23 = 0;
  }
  else
  {
    v21 = 0;
    v187 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v184 = 0;
    v179 = a3[1];
    v180 = a1;
LABEL_16:
    v25 = *v18;
    a5.n128_u64[0] = (unint64_t)vcnt_s8(v20);
    a5.n128_u16[0] = vaddlv_u8((uint8x8_t)a5.n128_u64[0]);
    if (a5.n128_u32[0] > 1uLL)
    {
      v26 = *v18;
      if (v25 >= *(_QWORD *)&v20)
        v26 = v25 % *(_QWORD *)&v20;
    }
    else
    {
      v26 = v25 & (*(_QWORD *)&v20 - 1);
    }
    v27 = *(uint64_t ***)(*a1 + 8 * v26);
    if (v27)
    {
      v28 = *v27;
      if (*v27)
      {
        if (a5.n128_u32[0] < 2uLL)
        {
          v29 = *(_QWORD *)&v20 - 1;
          while (1)
          {
            v31 = v28[1];
            if (v31 == v25)
            {
              if (v28[2] == v25)
                goto LABEL_35;
            }
            else if ((v31 & v29) != v26)
            {
              goto LABEL_172;
            }
            v28 = (uint64_t *)*v28;
            if (!v28)
              goto LABEL_172;
          }
        }
        do
        {
          v30 = v28[1];
          if (v30 == v25)
          {
            if (v28[2] == v25)
            {
LABEL_35:
              v183 = *v18;
              v202 = 0;
              v203 = 0;
              v32 = *(_OWORD *)(v28 + 3);
              v33 = v28[4];
              v204 = 0;
              v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v32) >> 3);
              __p = v23;
              if (v34 >> 62)
                sub_20EABADD4();
              v35 = (char *)operator new(0xAAAAAAAAAAAAAAACLL * ((v33 - (uint64_t)v32) >> 3));
              v36 = v35;
              v202 = v35;
              v203 = v35;
              v192 = &v35[4 * v34];
              v204 = v192;
              v37 = v28[3];
              v188 = v28[4];
              if (v37 == v188)
              {
                v107 = *(_DWORD *)v35;
                if (v24 >= v184)
                  goto LABEL_144;
                goto LABEL_160;
              }
              v181 = v18;
              v182 = v24;
              v39 = v208;
              v38 = v209;
              v40 = v35;
              v41 = v22;
              v191 = v208;
              while (2)
              {
                v42 = *(_QWORD *)(v37 + 8) - *(_QWORD *)v37;
                v43 = v42 >> 4;
                v44 = v21 - (char *)v41;
                v45 = (v21 - (char *)v41) >> 2;
                v46 = (v42 >> 4) - v45;
                v193 = v36;
                v194 = v40;
                if (v42 >> 4 > v45)
                {
                  if (v46 > (uint64_t)(v187 - (_QWORD)v21) >> 2)
                  {
                    if (v42 < 0)
                      sub_20E867F44();
                    if ((uint64_t)(v187 - (_QWORD)v41) >> 1 > v43)
                      v43 = (uint64_t)(v187 - (_QWORD)v41) >> 1;
                    if (v187 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                      v47 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v47 = v43;
                    if (v47 >> 62)
                      sub_20E877A38();
                    v48 = (int8x16_t *)v21;
                    v49 = (char *)operator new(4 * v47);
                    v50 = 4 * v46;
                    v51 = &v49[4 * v45];
                    v189 = v50;
                    bzero(v51, v50);
                    if (v48 == v41)
                    {
                      v22 = (int8x16_t *)&v49[4 * v45];
                    }
                    else
                    {
                      v52 = (char *)v48 - (char *)v41 - 4;
                      if (v52 < 0xBC)
                      {
                        v53 = v48;
                        v22 = (int8x16_t *)&v49[4 * v45];
                        goto LABEL_101;
                      }
                      v71 = v48;
                      v72 = ((char *)&v48[-1].u64[1] + 4 - (char *)v41) & 0xFFFFFFFFFFFFFFFCLL;
                      v73 = (unint64_t)&v49[v44 - 4];
                      v74 = v73 - v72;
                      v75 = (unint64_t)&v48[-1].u64[1] - v72 + 4;
                      v76 = v74 > v73 || v75 > (unint64_t)&v48[-1].u64[1] + 4;
                      if (v76 || (unint64_t)((char *)v48 - &v49[v44]) < 0x20)
                      {
                        v53 = v48;
                        v22 = (int8x16_t *)&v49[4 * v45];
                        goto LABEL_101;
                      }
                      v100 = (v52 >> 2) + 1;
                      v101 = 4 * (v100 & 0x7FFFFFFFFFFFFFF8);
                      v53 = (int8x16_t *)((char *)v48 - v101);
                      v22 = (int8x16_t *)&v51[-v101];
                      v102 = (__n128 *)&v49[4 * v45 - 16];
                      v103 = (__n128 *)&v71[-1];
                      v104 = v100 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        a5 = *v103;
                        v102[-1] = v103[-1];
                        *v102 = a5;
                        v102 -= 2;
                        v103 -= 2;
                        v104 -= 8;
                      }
                      while (v104);
                      if (v100 != (v100 & 0x7FFFFFFFFFFFFFF8))
                      {
                        do
                        {
LABEL_101:
                          v77 = v53[-1].i32[3];
                          v53 = (int8x16_t *)((char *)v53 - 4);
                          v22[-1].i32[3] = v77;
                          v22 = (int8x16_t *)((char *)v22 - 4);
                        }
                        while (v53 != v41);
                      }
                    }
                    v43 = (unint64_t)&v49[4 * v47];
                    v21 = &v51[v189];
                    v205 = v22;
                    v206 = &v51[v189];
                    v187 = v43;
                    v207 = v43;
                    if (v41)
                      operator delete(v41);
                    v41 = v22;
                    v36 = v193;
                    v40 = v194;
                    v39 = v191;
                    if (v191 == v38)
                    {
LABEL_105:
                      v55 = 0;
                      if (v36 < v192)
                        goto LABEL_38;
                      goto LABEL_106;
                    }
LABEL_53:
                    v190 = v21;
                    v55 = 0;
                    v56 = (unint64_t)v42 >> 4;
                    v57 = v43 & 0xFFFFFFFC;
                    v58 = v56 - (v43 & 0xFFFFFFFC);
                    v59 = v39;
                    do
                    {
                      sub_20EDA2F48(*(int8x16_t **)v37, (*(_QWORD *)(v37 + 8) - *(_QWORD *)v37) >> 4, v22, *v59);
                      v62.i64[0] = -1;
                      v62.i64[1] = -1;
                      a5.n128_u64[0] = -1;
                      a5.n128_u64[1] = -1;
                      i64 = (uint64_t)v22;
                      if ((int)v56 >= 4)
                      {
                        v64 = (int)v56 / 4;
                        v65 = v22;
                        do
                        {
                          v66 = *v65++;
                          v67 = (int8x16_t)vcgtq_u32((uint32x4_t)a5, (uint32x4_t)v66);
                          v62 = (uint32x4_t)vbslq_s8(v67, (int8x16_t)a5, (int8x16_t)vminq_u32((uint32x4_t)v66, v62));
                          a5 = (__n128)vbslq_s8(v67, v66, (int8x16_t)a5);
                          --v64;
                        }
                        while (v64);
                        i64 = (uint64_t)v22[((int)v56 / 4 - 1) + 1].i64;
                      }
                      if ((int)v56 > v57)
                      {
                        v68 = 0;
                        do
                        {
                          v69 = *(_DWORD *)(i64 + 4 * v68);
                          v201 = a5;
                          v70 = *(_DWORD *)((unint64_t)&v201 & 0xFFFFFFFFFFFFFFF3 | (4 * (v68 & 3)));
                          if (v69 < v70)
                          {
                            v197 = v62;
                            *(_DWORD *)((unint64_t)&v197 & 0xFFFFFFFFFFFFFFF3 | (4 * (v68 & 3))) = v70;
                            v62 = v197;
                            v198 = a5;
                            *(_DWORD *)((unint64_t)&v198 & 0xFFFFFFFFFFFFFFF3 | (4 * (v68 & 3))) = v69;
                            a5 = v198;
                          }
                          else
                          {
                            v200 = v62;
                            if (v69 < *(_DWORD *)((unint64_t)&v200 & 0xFFFFFFFFFFFFFFF3 | (4 * (v68 & 3))))
                            {
                              v199 = v62;
                              *(_DWORD *)((unint64_t)&v199 & 0xFFFFFFFFFFFFFFF3 | (4 * (v68 & 3))) = v69;
                              v62 = v199;
                            }
                          }
                          ++v68;
                        }
                        while (v58 != v68);
                      }
                      v60 = a5.n128_u32[0];
                      v61 = v62.i32[0];
                      if (a5.n128_u32[1] < v62.i32[0])
                        v61 = a5.n128_u32[1];
                      if (a5.n128_u32[1] < a5.n128_u32[0])
                      {
                        v61 = a5.n128_u32[0];
                        v60 = a5.n128_u32[1];
                      }
                      if (v62.i32[1] < v61)
                        v61 = v62.u32[1];
                      if (v62.i32[1] < v60)
                      {
                        v61 = v60;
                        v60 = v62.u32[1];
                      }
                      if (a5.n128_u32[2] < v61)
                        v61 = a5.n128_u32[2];
                      if (a5.n128_u32[2] < v60)
                      {
                        v61 = v60;
                        v60 = a5.n128_u32[2];
                      }
                      if (v62.i32[2] < v61)
                        v61 = v62.u32[2];
                      if (v62.i32[2] < v60)
                      {
                        v61 = v60;
                        v60 = v62.u32[2];
                      }
                      if (a5.n128_u32[3] < v61)
                        v61 = a5.n128_u32[3];
                      if (a5.n128_u32[3] < v60)
                      {
                        v61 = v60;
                        v60 = a5.n128_u32[3];
                      }
                      if (v62.i32[3] < v61)
                        v61 = v62.u32[3];
                      if (v62.i32[3] < v60)
                      {
                        v61 = v60;
                        v60 = v62.u32[3];
                      }
                      a5.n128_f32[0] = (float)v60;
                      if ((float)((float)v61 * 0.6) > (float)v60)
                        ++v55;
                      ++v59;
                    }
                    while (v59 != v38);
                    v41 = v22;
                    v21 = v190;
                    v39 = v191;
                    v36 = v193;
                    v40 = v194;
                    if (v193 < v192)
                    {
LABEL_38:
                      *(_DWORD *)v36 = v55;
                      v36 += 4;
                      v203 = v36;
                      v37 += 24;
                      if (v37 == v188)
                        goto LABEL_138;
                      continue;
                    }
LABEL_106:
                    v78 = v21;
                    v79 = v36 - v40;
                    v80 = (v36 - v40) >> 2;
                    v81 = v80 + 1;
                    if ((unint64_t)(v80 + 1) >> 62)
                      sub_20EABADD4();
                    v82 = v192 - v40;
                    v83 = (v192 - v40) >> 1;
                    if (v83 > v81)
                      v81 = v83;
                    if (v82 >= 0x7FFFFFFFFFFFFFFCLL)
                      v84 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v84 = v81;
                    if (v84)
                    {
                      if (v84 >> 62)
                        sub_20E877A38();
                      v85 = v84;
                      v86 = (char *)operator new(4 * v84);
                      v36 = v193;
                      v87 = v194;
                      v84 = v85;
                      v88 = &v86[4 * v80];
                      *(_DWORD *)v88 = v55;
                      v89 = (uint64_t)(v88 + 4);
                      v90 = (char *)(v193 - v194);
                      if (v193 != v194)
                      {
LABEL_115:
                        v91 = (unint64_t)(v90 - 4);
                        if (v91 < 0xBC)
                        {
                          v92 = v36;
                          v21 = v78;
                          goto LABEL_125;
                        }
                        v93 = (v36 - 4 - v87) & 0xFFFFFFFFFFFFFFFCLL;
                        if (&v86[v79 - 4 - v93] > &v86[v79 - 4] || &v36[-v93 - 4] > v36 - 4)
                        {
                          v92 = v193;
                          goto LABEL_124;
                        }
                        if ((unint64_t)(v193 - &v86[v79]) < 0x20)
                        {
                          v92 = v193;
LABEL_124:
                          v21 = v78;
                          v87 = v194;
                          goto LABEL_125;
                        }
                        v95 = (v91 >> 2) + 1;
                        v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
                        v92 = &v193[-v96];
                        v88 -= v96;
                        v97 = (__n128 *)&v86[4 * v80 - 16];
                        v98 = (__n128 *)(v193 - 16);
                        v99 = v95 & 0x7FFFFFFFFFFFFFF8;
                        v21 = v78;
                        do
                        {
                          a5 = *v98;
                          v97[-1] = v98[-1];
                          *v97 = a5;
                          v97 -= 2;
                          v98 -= 2;
                          v99 -= 8;
                        }
                        while (v99);
                        v87 = v194;
                        if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
                        {
                          do
                          {
LABEL_125:
                            v94 = *((_DWORD *)v92 - 1);
                            v92 -= 4;
                            *((_DWORD *)v88 - 1) = v94;
                            v88 -= 4;
                          }
                          while (v92 != v87);
                        }
LABEL_126:
                        v202 = v88;
                        v192 = &v86[4 * v84];
                        v204 = v192;
                        if (v87)
                          operator delete(v87);
                        v40 = v88;
                        v36 = (char *)v89;
                        v39 = v191;
                        v203 = v36;
                        v37 += 24;
                        if (v37 == v188)
                        {
LABEL_138:
                          v105 = v40 + 4;
                          v106 = v40 == v36 || v105 == v36;
                          a1 = v180;
                          v18 = v181;
                          v19 = v179;
                          if (v106)
                          {
                            v36 = v40;
                            v23 = __p;
                            v24 = v182;
                            v107 = *(_DWORD *)v40;
                            if (v182 >= v184)
                              goto LABEL_144;
                          }
                          else
                          {
                            v118 = v40;
                            v119 = *(_DWORD *)v40;
                            v120 = v118;
                            v121 = v36;
                            v122 = v105;
                            v23 = __p;
                            v24 = v182;
                            do
                            {
                              v124 = *(_DWORD *)v122;
                              v122 += 4;
                              v123 = v124;
                              v125 = v119 < v124;
                              if (v119 <= v124)
                                v119 = v123;
                              if (v125)
                                v118 = v105;
                              v105 = v122;
                            }
                            while (v122 != v121);
                            v36 = v120;
                            v107 = *(_DWORD *)v118;
                            if (v182 >= v184)
                            {
LABEL_144:
                              v108 = v24 - v23;
                              v109 = v108 + 1;
                              if ((unint64_t)(v108 + 1) >> 60)
                                sub_20E867F44();
                              if (((char *)v184 - (char *)v23) >> 3 > v109)
                                v109 = ((char *)v184 - (char *)v23) >> 3;
                              if ((unint64_t)((char *)v184 - (char *)v23) >= 0x7FFFFFFFFFFFFFF0)
                                v110 = 0xFFFFFFFFFFFFFFFLL;
                              else
                                v110 = v109;
                              if (v110)
                              {
                                v195 = v107;
                                if (v110 >> 60)
                                  sub_20E877A38();
                                v111 = v36;
                                v112 = v110;
                                v113 = (char *)operator new(16 * v110);
                                v36 = v111;
                                v110 = v112;
                                v114 = (uint64_t)&v113[16 * v108];
                                *(_QWORD *)v114 = v183;
                                *(_DWORD *)(v114 + 8) = v195;
                                if (v24 != v23)
                                {
LABEL_153:
                                  v115 = v114;
                                  do
                                  {
                                    a5 = v24[-1];
                                    v116 = (__n128 *)(v115 - 16);
                                    *(__n128 *)(v115 - 16) = a5;
                                    --v24;
                                    v115 -= 16;
                                  }
                                  while (v24 != v23);
                                  v184 = (__n128 *)&v113[16 * v110];
                                  v24 = (__n128 *)(v114 + 16);
                                  if (v23)
                                  {
LABEL_156:
                                    v117 = v36;
                                    operator delete(v23);
                                    v36 = v117;
                                  }
LABEL_157:
                                  v23 = v116;
                                  if (!v36)
                                    goto LABEL_172;
LABEL_161:
                                  operator delete(v36);
                                  goto LABEL_172;
                                }
                              }
                              else
                              {
                                v113 = 0;
                                v114 = 16 * v108;
                                *(_QWORD *)v114 = v183;
                                *(_DWORD *)(v114 + 8) = v107;
                                if (v24 != v23)
                                  goto LABEL_153;
                              }
                              v116 = (__n128 *)v114;
                              v184 = (__n128 *)&v113[16 * v110];
                              v24 = (__n128 *)(v114 + 16);
                              if (v23)
                                goto LABEL_156;
                              goto LABEL_157;
                            }
                          }
LABEL_160:
                          v24->n128_u64[0] = v183;
                          v24->n128_u32[2] = v107;
                          ++v24;
                          if (!v36)
                            goto LABEL_172;
                          goto LABEL_161;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      v86 = 0;
                      v87 = v194;
                      v88 = (char *)(4 * v80);
                      *(_DWORD *)(4 * v80) = v55;
                      v89 = 4 * v80 + 4;
                      v90 = (char *)(v36 - v194);
                      if (v36 != v194)
                        goto LABEL_115;
                    }
                    v21 = v78;
                    goto LABEL_126;
                  }
                  v54 = 4 * v46;
                  bzero(v21, v54);
                  v36 = v193;
                  v40 = v194;
                  v21 += v54;
                  v206 = v21;
                }
                break;
              }
              if (v39 == v38)
                goto LABEL_105;
              goto LABEL_53;
            }
          }
          else
          {
            if (v30 >= *(_QWORD *)&v20)
              v30 %= *(_QWORD *)&v20;
            if (v30 != v26)
              break;
          }
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
LABEL_172:
    while (++v18 != v19)
    {
      v20 = (int8x8_t)a1[1];
      if (v20)
        goto LABEL_16;
    }
    a4 = v196;
  }
  v126 = 126 - 2 * __clz(v24 - v23);
  if (v24 == v23)
    v127 = 0;
  else
    v127 = v126;
  sub_20EDA6DE8(v23, v24, v127, 1, a5);
  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 56) = 1065353216;
  __pa = v23;
  if (v24 == v23)
    goto LABEL_268;
  v128 = 0;
  v129 = (uint64_t *)(a4 + 24);
  v130 = (_QWORD *)(a4 + 40);
  v131 = __pa;
  while (2)
  {
    v133 = v24;
    v134 = v131->n128_u64[0];
    v135 = v131->n128_u32[2];
    v136 = *(_QWORD *)(a4 + 32);
    if (!v136)
      goto LABEL_204;
    v137 = (uint8x8_t)vcnt_s8((int8x8_t)v136);
    v137.i16[0] = vaddlv_u8(v137);
    if (v137.u32[0] > 1uLL)
    {
      a4 = v131->n128_u64[0];
      if (v136 <= v134)
        a4 = v134 % v136;
    }
    else
    {
      a4 = (v136 - 1) & v134;
    }
    v138 = *(_QWORD **)(*v129 + 8 * a4);
    if (!v138 || (v139 = (_QWORD *)*v138) == 0)
    {
LABEL_204:
      v143 = operator new(0x20uLL);
      *v143 = 0;
      v143[1] = v134;
      v143[2] = v134;
      *((_DWORD *)v143 + 6) = v135;
      v144 = (float)(unint64_t)(*(_QWORD *)(v196 + 48) + 1);
      v145 = *(float *)(v196 + 56);
      if (v136 && (float)(v145 * (float)v136) >= v144)
      {
        v146 = *v129;
        v147 = *(_QWORD **)(*v129 + 8 * a4);
        if (v147)
        {
LABEL_207:
          *v143 = *v147;
          a4 = v196;
          goto LABEL_242;
        }
      }
      else
      {
        v148 = (v136 & (v136 - 1)) != 0;
        if (v136 < 3)
          v148 = 1;
        v149 = v148 | (2 * v136);
        v150 = vcvtps_u32_f32(v144 / v145);
        if (v149 <= v150)
          prime = v150;
        else
          prime = v149;
        if (prime == 1)
        {
          prime = 2;
          v152 = v196;
        }
        else
        {
          v152 = v196;
          if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v136 = *(_QWORD *)(v196 + 32);
          }
        }
        if (prime > v136)
          goto LABEL_218;
        if (prime < v136)
        {
          v153 = vcvtps_u32_f32((float)*(unint64_t *)(v152 + 48) / *(float *)(v152 + 56));
          if (v136 < 3
            || (v154 = (uint8x8_t)vcnt_s8((int8x8_t)v136), v154.i16[0] = vaddlv_u8(v154), v154.u32[0] > 1uLL))
          {
            v153 = std::__next_prime(v153);
          }
          else
          {
            v155 = 1 << -(char)__clz(v153 - 1);
            if (v153 >= 2)
              v153 = v155;
          }
          if (prime <= v153)
            prime = v153;
          if (prime < v136)
LABEL_218:
            sub_20E8D2B3C((uint64_t)v129, prime);
        }
        v136 = *(_QWORD *)(v152 + 32);
        v156 = v136 - 1;
        if ((v136 & (v136 - 1)) != 0)
        {
          if (v136 <= v134)
          {
            a4 = v134 % v136;
            v146 = *v129;
            v147 = *(_QWORD **)(*v129 + 8 * (v134 % v136));
            if (v147)
              goto LABEL_207;
          }
          else
          {
            a4 = v134;
            v146 = *v129;
            v147 = *(_QWORD **)(*v129 + 8 * v134);
            if (v147)
              goto LABEL_207;
          }
        }
        else
        {
          a4 = v156 & v134;
          v146 = *v129;
          v147 = *(_QWORD **)(*v129 + 8 * (v156 & v134));
          if (v147)
            goto LABEL_207;
        }
      }
      *v143 = *v130;
      *v130 = v143;
      *(_QWORD *)(v146 + 8 * a4) = v130;
      a4 = v196;
      if (!*v143)
        goto LABEL_243;
      v157 = *(_QWORD *)(*v143 + 8);
      if ((v136 & (v136 - 1)) != 0)
      {
        if (v157 >= v136)
          v157 %= v136;
      }
      else
      {
        v157 &= v136 - 1;
      }
      v147 = (_QWORD *)(*v129 + 8 * v157);
LABEL_242:
      *v147 = v143;
LABEL_243:
      ++*(_QWORD *)(a4 + 48);
      v128 = *(char **)(a4 + 8);
      v142 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v128 >= v142)
        goto LABEL_244;
      goto LABEL_180;
    }
    if (v137.u32[0] < 2uLL)
    {
      while (1)
      {
        v141 = v139[1];
        if (v141 == v134)
        {
          if (v139[2] == v134)
            goto LABEL_202;
        }
        else if ((v141 & (v136 - 1)) != a4)
        {
          goto LABEL_204;
        }
        v139 = (_QWORD *)*v139;
        if (!v139)
          goto LABEL_204;
      }
    }
    while (1)
    {
      v140 = v139[1];
      if (v140 == v134)
        break;
      if (v140 >= v136)
        v140 %= v136;
      if (v140 != a4)
        goto LABEL_204;
LABEL_192:
      v139 = (_QWORD *)*v139;
      if (!v139)
        goto LABEL_204;
    }
    if (v139[2] != v134)
      goto LABEL_192;
LABEL_202:
    a4 = v196;
    v142 = *(_QWORD *)(v196 + 16);
    if ((unint64_t)v128 < v142)
    {
LABEL_180:
      *(_QWORD *)v128 = v131->n128_u64[0];
      v132 = (uint64_t)(v128 + 8);
      v24 = v133;
      goto LABEL_181;
    }
LABEL_244:
    v158 = *(char **)a4;
    v159 = (uint64_t)&v128[-*(_QWORD *)a4];
    v160 = v159 >> 3;
    v161 = (v159 >> 3) + 1;
    if (v161 >> 61)
      sub_20E92CED8();
    v162 = v142 - (_QWORD)v158;
    if (v162 >> 2 > v161)
      v161 = v162 >> 2;
    if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8)
      v163 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v163 = v161;
    if (!v163)
    {
      v164 = 0;
      v165 = (_QWORD *)(8 * v160);
      *(_QWORD *)(8 * v160) = v131->n128_u64[0];
      v132 = 8 * v160 + 8;
      v166 = v128 - v158;
      if (v128 != v158)
        goto LABEL_253;
LABEL_259:
      v24 = v133;
      v171 = &v164[8 * v163];
      a4 = v196;
      *(_QWORD *)v196 = v165;
      *(_QWORD *)(v196 + 8) = v132;
      *(_QWORD *)(v196 + 16) = v171;
      if (!v158)
        goto LABEL_181;
      goto LABEL_260;
    }
    if (v163 >> 61)
      sub_20E877A38();
    v164 = operator new(8 * v163);
    v165 = &v164[8 * v160];
    *v165 = v131->n128_u64[0];
    v132 = (uint64_t)(v165 + 1);
    v166 = v128 - v158;
    if (v128 == v158)
      goto LABEL_259;
LABEL_253:
    v167 = v166 - 8;
    if (v167 < 0x168
      || (v172 = (v128 - 8 - v158) & 0xFFFFFFFFFFFFFFF8, &v164[v159 - 8 - v172] > &v164[v159 - 8])
      || &v128[-v172 - 8] > v128 - 8
      || (unint64_t)(v128 - &v164[v159]) < 0x20)
    {
      v168 = v128;
      v24 = v133;
      do
      {
LABEL_255:
        v169 = *((_QWORD *)v168 - 1);
        v168 -= 8;
        *--v165 = v169;
      }
      while (v168 != v158);
      goto LABEL_256;
    }
    v173 = (v167 >> 3) + 1;
    v174 = 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
    v168 = &v128[-v174];
    v165 = (_QWORD *)((char *)v165 - v174);
    v175 = &v164[8 * v160 - 16];
    v176 = v128 - 16;
    v177 = v173 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v178 = *(_OWORD *)v176;
      *(v175 - 1) = *((_OWORD *)v176 - 1);
      *v175 = v178;
      v175 -= 2;
      v176 -= 32;
      v177 -= 4;
    }
    while (v177);
    v24 = v133;
    if (v173 != (v173 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_255;
LABEL_256:
    v170 = &v164[8 * v163];
    a4 = v196;
    *(_QWORD *)v196 = v165;
    *(_QWORD *)(v196 + 8) = v132;
    *(_QWORD *)(v196 + 16) = v170;
    if (v158)
LABEL_260:
      operator delete(v158);
LABEL_181:
    *(_QWORD *)(a4 + 8) = v132;
    ++v131;
    v128 = (char *)v132;
    if (v131 != v24)
      continue;
    break;
  }
LABEL_268:
  if (__pa)
    operator delete(__pa);
  if (v205)
    operator delete(v205);
  if (v208)
    operator delete(v208);
  if (v211)
    operator delete(v211);
}

void sub_20EDA5B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v26 = *(void **)(v24 - 184);
  if (v26)
  {
    *(_QWORD *)(v24 - 176) = v26;
    operator delete(v26);
    if (!__p)
    {
LABEL_3:
      v27 = *(void **)(v24 - 160);
      if (!v27)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if (!__p)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  v27 = *(void **)(v24 - 160);
  if (!v27)
  {
LABEL_4:
    v28 = *(void **)(v24 - 136);
    if (!v28)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *(_QWORD *)(v24 - 152) = v27;
  operator delete(v27);
  v28 = *(void **)(v24 - 136);
  if (!v28)
  {
LABEL_5:
    v29 = *(void **)(v24 - 112);
    if (!v29)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v28);
  v29 = *(void **)(v24 - 112);
  if (!v29)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDA5C24(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_20EDA5C7C(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  signed __int32 v17;
  signed __int32 v18;
  signed __int32 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  signed __int32 v23;
  signed __int32 v24;
  __n128 v25;
  __n128 v26;
  signed __int32 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  signed __int32 v32;
  signed __int32 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  signed __int32 v37;
  signed __int32 v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int32 v41;
  signed __int32 v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  signed __int32 v46;
  __n128 *v47;
  signed __int32 v48;
  __n128 *v49;
  signed __int32 v50;
  signed __int32 v51;
  __n128 *v52;
  BOOL v53;
  __n128 v54;
  __n128 *v55;
  signed __int32 v56;
  __n128 *v57;
  signed __int32 v58;
  __n128 *v59;
  __n128 *v60;
  signed __int32 v61;
  unint64_t v62;
  unsigned __int32 v63;
  signed __int32 v64;
  signed __int32 v65;
  __n128 *v66;
  __n128 *v67;
  signed __int32 v68;
  signed __int32 v69;
  __n128 v70;
  __n128 *v71;
  __n128 *v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 *v76;
  BOOL v78;
  uint64_t v79;
  __n128 *v80;
  uint64_t v81;
  __n128 *v82;
  signed __int32 v83;
  unint64_t v84;
  unsigned __int32 v85;
  uint64_t v86;
  signed __int32 v87;
  int64_t v88;
  int64_t v89;
  BOOL v90;
  uint64_t v91;
  __n128 *v92;
  signed __int32 v93;
  signed __int32 v94;
  __n128 *v95;
  signed __int32 v96;
  unint64_t v97;
  unsigned __int32 v98;
  __n128 *v99;
  uint64_t v100;
  uint64_t v101;
  signed __int32 v102;
  signed __int32 v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  __n128 *v114;
  signed __int32 v115;
  uint64_t v116;
  int v117;
  _OWORD *v118;
  __n128 v119;
  __n128 *v120;
  signed __int32 v121;
  unint64_t v122;
  unsigned __int32 v123;
  __n128 *v124;
  signed __int32 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;

BOOL sub_20EDA67D8(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 v7;
  __n128 *v8;
  __n128 *v9;
  signed __int32 v10;
  signed __int32 v11;
  __n128 v12;
  __n128 *v13;
  __n128 *v14;
  signed __int32 v15;
  signed __int32 v16;
  signed __int32 v17;
  __n128 v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  uint64_t v33;
  int v34;
  signed __int32 v35;
  unint64_t v36;
  unsigned __int32 v37;
  uint64_t v38;
  signed __int32 v39;
  char *v40;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((signed __int32)a2[-1].n128_u32[2] > (signed __int32)a1->n128_u32[2])
      {
        v7 = *a1;
        *a1 = a2[-1];
        a2[-1] = v7;
      }
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a2 - 1;
      v10 = a1[1].n128_i32[2];
      v11 = a2[-1].n128_i32[2];
      if (v10 <= (signed __int32)a1->n128_u32[2])
      {
        if (v11 > v10)
        {
          v26 = *v8;
          *v8 = *v9;
          *v9 = v26;
          if ((signed __int32)a1[1].n128_u32[2] > (signed __int32)a1->n128_u32[2])
          {
            v27 = *a1;
            *a1 = *v8;
            *v8 = v27;
          }
        }
      }
      else
      {
        if (v11 <= v10)
        {
          v30 = *a1;
          *a1 = *v8;
          *v8 = v30;
          if ((signed __int32)a2[-1].n128_u32[2] <= (signed __int32)a1[1].n128_u32[2])
            return result;
          v12 = *v8;
          *v8 = *v9;
        }
        else
        {
          v12 = *a1;
          *a1 = *v9;
        }
        *v9 = v12;
      }
      return result;
    case 4:
      sub_20EDA6B74(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v19 = a1 + 1;
      v20 = a1 + 2;
      v21 = a1 + 3;
      sub_20EDA6B74(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if ((signed __int32)a2[-1].n128_u32[2] > (signed __int32)a1[3].n128_u32[2])
      {
        v22 = *v21;
        *v21 = a2[-1];
        a2[-1] = v22;
        if ((signed __int32)a1[3].n128_u32[2] > (signed __int32)a1[2].n128_u32[2])
        {
          v23 = *v20;
          *v20 = *v21;
          *v21 = v23;
          if ((signed __int32)a1[2].n128_u32[2] > (signed __int32)a1[1].n128_u32[2])
          {
            v24 = *v19;
            *v19 = *v20;
            *v20 = v24;
            if ((signed __int32)a1[1].n128_u32[2] > (signed __int32)a1->n128_u32[2])
            {
              v25 = *a1;
              *a1 = *v19;
              *v19 = v25;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 2;
      v14 = a1 + 1;
      v15 = a1[1].n128_i32[2];
      v16 = a1->n128_i32[2];
      v17 = a1[2].n128_i32[2];
      if (v15 <= v16)
      {
        if (v17 > v15)
        {
          v28 = *v14;
          *v14 = *v13;
          *v13 = v28;
          if ((signed __int32)a1[1].n128_u32[2] > v16)
          {
            v29 = *a1;
            *a1 = *v14;
            *v14 = v29;
          }
        }
      }
      else
      {
        if (v17 <= v15)
        {
          v31 = *a1;
          *a1 = *v14;
          *v14 = v31;
          if (v17 <= (signed __int32)a1[1].n128_u32[2])
            goto LABEL_29;
          v18 = *v14;
          *v14 = *v13;
        }
        else
        {
          v18 = *a1;
          *a1 = *v13;
        }
        *v13 = v18;
      }
LABEL_29:
      v32 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      break;
  }
  while (1)
  {
    v35 = v32->n128_i32[2];
    if (v35 > (signed __int32)v13->n128_u32[2])
      break;
LABEL_32:
    v13 = v32;
    v33 += 16;
    if (++v32 == a2)
      return 1;
  }
  v36 = v32->n128_u64[0];
  v37 = v32->n128_u32[3];
  v38 = v33;
  do
  {
    *(__n128 *)((char *)a1 + v38 + 48) = *(__n128 *)((char *)a1 + v38 + 32);
    if (v38 == -32)
    {
      a1->n128_u64[0] = v36;
      a1->n128_u32[2] = v35;
      a1->n128_u32[3] = v37;
      if (++v34 != 8)
        goto LABEL_32;
      return &v32[1] == a2;
    }
    v39 = *(__int32 *)((char *)&a1[1].n128_i32[2] + v38);
    v38 -= 16;
  }
  while (v35 > v39);
  v40 = (char *)a1 + v38;
  *((_QWORD *)v40 + 6) = v36;
  v40 += 48;
  *((_DWORD *)v40 + 2) = v35;
  *((_DWORD *)v40 + 3) = v37;
  if (++v34 != 8)
    goto LABEL_32;
  return &v32[1] == a2;
}

__n128 sub_20EDA6B74(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  signed __int32 v5;
  signed __int32 v6;

  v5 = a2->n128_i32[2];
  v6 = a3->n128_i32[2];
  if (v5 <= (signed __int32)a1->n128_u32[2])
  {
    if (v6 > v5)
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if ((signed __int32)a2->n128_u32[2] > (signed __int32)a1->n128_u32[2])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 > v5)
    {
      result = *a1;
      *a1 = *a3;
LABEL_9:
      *a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if ((signed __int32)a3->n128_u32[2] > (signed __int32)a2->n128_u32[2])
    {
      result = *a2;
      *a2 = *a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((signed __int32)a4->n128_u32[2] > (signed __int32)a3->n128_u32[2])
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    if ((signed __int32)a3->n128_u32[2] > (signed __int32)a2->n128_u32[2])
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if ((signed __int32)a2->n128_u32[2] > (signed __int32)a1->n128_u32[2])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

uint64_t *sub_20EDA6C78(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_20E867F44();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E877A38();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void sub_20EDA6DE8(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  signed __int32 v17;
  signed __int32 v18;
  signed __int32 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  signed __int32 v23;
  signed __int32 v24;
  __n128 v25;
  __n128 v26;
  signed __int32 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  signed __int32 v32;
  signed __int32 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  signed __int32 v37;
  signed __int32 v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int32 v41;
  signed __int32 v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  signed __int32 v46;
  __n128 *v47;
  signed __int32 v48;
  __n128 *v49;
  signed __int32 v50;
  signed __int32 v51;
  __n128 *v52;
  BOOL v53;
  __n128 v54;
  __n128 *v55;
  signed __int32 v56;
  __n128 *v57;
  signed __int32 v58;
  __n128 *v59;
  __n128 *v60;
  signed __int32 v61;
  unint64_t v62;
  unsigned __int32 v63;
  signed __int32 v64;
  signed __int32 v65;
  __n128 *v66;
  __n128 *v67;
  signed __int32 v68;
  signed __int32 v69;
  __n128 v70;
  __n128 *v71;
  __n128 *v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 *v76;
  BOOL v78;
  uint64_t v79;
  __n128 *v80;
  uint64_t v81;
  __n128 *v82;
  signed __int32 v83;
  unint64_t v84;
  unsigned __int32 v85;
  uint64_t v86;
  signed __int32 v87;
  int64_t v88;
  int64_t v89;
  BOOL v90;
  uint64_t v91;
  __n128 *v92;
  signed __int32 v93;
  signed __int32 v94;
  __n128 *v95;
  signed __int32 v96;
  unint64_t v97;
  unsigned __int32 v98;
  __n128 *v99;
  uint64_t v100;
  uint64_t v101;
  signed __int32 v102;
  signed __int32 v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  __n128 *v114;
  signed __int32 v115;
  uint64_t v116;
  int v117;
  _OWORD *v118;
  __n128 v119;
  __n128 *v120;
  signed __int32 v121;
  unint64_t v122;
  unsigned __int32 v123;
  __n128 *v124;
  signed __int32 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;

BOOL sub_20EDA7944(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 v7;
  __n128 *v8;
  __n128 *v9;
  signed __int32 v10;
  signed __int32 v11;
  __n128 v12;
  __n128 *v13;
  __n128 *v14;
  signed __int32 v15;
  signed __int32 v16;
  signed __int32 v17;
  __n128 v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  uint64_t v33;
  int v34;
  signed __int32 v35;
  unint64_t v36;
  unsigned __int32 v37;
  uint64_t v38;
  signed __int32 v39;
  char *v40;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((signed __int32)a2[-1].n128_u32[2] > (signed __int32)a1->n128_u32[2])
      {
        v7 = *a1;
        *a1 = a2[-1];
        a2[-1] = v7;
      }
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a2 - 1;
      v10 = a1[1].n128_i32[2];
      v11 = a2[-1].n128_i32[2];
      if (v10 <= (signed __int32)a1->n128_u32[2])
      {
        if (v11 > v10)
        {
          v26 = *v8;
          *v8 = *v9;
          *v9 = v26;
          if ((signed __int32)a1[1].n128_u32[2] > (signed __int32)a1->n128_u32[2])
          {
            v27 = *a1;
            *a1 = *v8;
            *v8 = v27;
          }
        }
      }
      else
      {
        if (v11 <= v10)
        {
          v30 = *a1;
          *a1 = *v8;
          *v8 = v30;
          if ((signed __int32)a2[-1].n128_u32[2] <= (signed __int32)a1[1].n128_u32[2])
            return result;
          v12 = *v8;
          *v8 = *v9;
        }
        else
        {
          v12 = *a1;
          *a1 = *v9;
        }
        *v9 = v12;
      }
      return result;
    case 4:
      sub_20EDA6B74(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v19 = a1 + 1;
      v20 = a1 + 2;
      v21 = a1 + 3;
      sub_20EDA6B74(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if ((signed __int32)a2[-1].n128_u32[2] > (signed __int32)a1[3].n128_u32[2])
      {
        v22 = *v21;
        *v21 = a2[-1];
        a2[-1] = v22;
        if ((signed __int32)a1[3].n128_u32[2] > (signed __int32)a1[2].n128_u32[2])
        {
          v23 = *v20;
          *v20 = *v21;
          *v21 = v23;
          if ((signed __int32)a1[2].n128_u32[2] > (signed __int32)a1[1].n128_u32[2])
          {
            v24 = *v19;
            *v19 = *v20;
            *v20 = v24;
            if ((signed __int32)a1[1].n128_u32[2] > (signed __int32)a1->n128_u32[2])
            {
              v25 = *a1;
              *a1 = *v19;
              *v19 = v25;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 2;
      v14 = a1 + 1;
      v15 = a1[1].n128_i32[2];
      v16 = a1->n128_i32[2];
      v17 = a1[2].n128_i32[2];
      if (v15 <= v16)
      {
        if (v17 > v15)
        {
          v28 = *v14;
          *v14 = *v13;
          *v13 = v28;
          if ((signed __int32)a1[1].n128_u32[2] > v16)
          {
            v29 = *a1;
            *a1 = *v14;
            *v14 = v29;
          }
        }
      }
      else
      {
        if (v17 <= v15)
        {
          v31 = *a1;
          *a1 = *v14;
          *v14 = v31;
          if (v17 <= (signed __int32)a1[1].n128_u32[2])
            goto LABEL_29;
          v18 = *v14;
          *v14 = *v13;
        }
        else
        {
          v18 = *a1;
          *a1 = *v13;
        }
        *v13 = v18;
      }
LABEL_29:
      v32 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      break;
  }
  while (1)
  {
    v35 = v32->n128_i32[2];
    if (v35 > (signed __int32)v13->n128_u32[2])
      break;
LABEL_32:
    v13 = v32;
    v33 += 16;
    if (++v32 == a2)
      return 1;
  }
  v36 = v32->n128_u64[0];
  v37 = v32->n128_u32[3];
  v38 = v33;
  do
  {
    *(__n128 *)((char *)a1 + v38 + 48) = *(__n128 *)((char *)a1 + v38 + 32);
    if (v38 == -32)
    {
      a1->n128_u64[0] = v36;
      a1->n128_u32[2] = v35;
      a1->n128_u32[3] = v37;
      if (++v34 != 8)
        goto LABEL_32;
      return &v32[1] == a2;
    }
    v39 = *(__int32 *)((char *)&a1[1].n128_i32[2] + v38);
    v38 -= 16;
  }
  while (v35 > v39);
  v40 = (char *)a1 + v38;
  *((_QWORD *)v40 + 6) = v36;
  v40 += 48;
  *((_DWORD *)v40 + 2) = v35;
  *((_DWORD *)v40 + 3) = v37;
  if (++v34 != 8)
    goto LABEL_32;
  return &v32[1] == a2;
}

uint64_t sub_20EDA7CE0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          v6 = v2[4];
          do
          {
            v8 = *(void **)(v6 - 24);
            v6 -= 24;
            v7 = v8;
            if (v8)
            {
              *(_QWORD *)(v4 - 16) = v7;
              operator delete(v7);
            }
            v4 = v6;
          }
          while (v6 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20EDA7D70(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const char *v15;
  unsigned __int8 v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  const char *v24;
  unsigned __int8 v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  const char *v31;
  size_t v32;
  void *v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned __int8 v80;
  const char *v81;
  size_t v82;
  void *v83;
  unint64_t v84;
  const char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *p_p;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  size_t v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  unint64_t *v127;
  uint64_t *v129;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v131;
  int v132;
  const char *v133;
  int v134;
  const char *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  void *object;
  void *v140[2];
  __int128 v141;
  void *__p;
  size_t v143;
  unint64_t v144;
  char v145;
  uint64_t v146;
  _QWORD v147[2];

  if (!a3)
  {
    sub_20EDA8D18(&v138);
    if (**(int **)(v138 + 56) > 2)
      return 0;
    v17 = *(unsigned __int8 *)(v138 + 72);
    v18 = sub_20E8C31DC(v138, "OSLogSurrogateAppender", 1, 0);
    v19 = v18;
    if (!v17 && v18 == 0)
      return 0;
    v129 = &v138;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v131 = std::chrono::system_clock::now().__d_.__rep_;
    v132 = 2;
    v133 = "unknown file";
    v134 = 116;
    v136 = 0;
    v137 = 0;
    v135 = "unknown function";
    v21 = v138;
    v22 = v138 + 16;
    if (*(char *)(v138 + 39) < 0)
    {
      v24 = *(const char **)(v138 + 16);
      v23 = *(_QWORD *)(v138 + 24);
      v80 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v80 & 1) != 0)
        goto LABEL_111;
    }
    else
    {
      v23 = *(unsigned __int8 *)(v138 + 39);
      v24 = (const char *)(*v129 + 16);
      v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v25 & 1) != 0)
        goto LABEL_111;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v141 && SHIBYTE(v140[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_111:
    if (byte_254A4A50F >= 0)
      v81 = (const char *)&xmmword_254A4A4F8;
    else
      v81 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v82 = byte_254A4A50F;
    else
      v82 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    object = os_log_create(v81, v24);
    v83 = v140;
    if (v82 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v82 >= 0x17)
    {
      v84 = v19;
      v85 = v24;
      v86 = v21;
      v87 = v17;
      v88 = v22;
      v89 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v82 | 7) != 0x17)
        v89 = v82 | 7;
      v90 = v89 + 1;
      v83 = operator new(v89 + 1);
      v140[1] = (void *)v82;
      *(_QWORD *)&v141 = v90 | 0x8000000000000000;
      v140[0] = v83;
      v22 = v88;
      v17 = v87;
      v21 = v86;
      v24 = v85;
      v19 = v84;
    }
    else
    {
      BYTE7(v141) = v82;
      if (!v82)
      {
LABEL_125:
        *((_BYTE *)v83 + v82) = 0;
        BYTE8(v141) = 1;
        p_p = &__p;
        if (v23 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v23 >= 0x17)
        {
          v92 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v92 = v23 | 7;
          v93 = v92 + 1;
          p_p = operator new(v92 + 1);
          v143 = v23;
          v144 = v93 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v144) = v23;
          if (!v23)
            goto LABEL_133;
        }
        memmove(p_p, v24, v23);
LABEL_133:
        *((_BYTE *)p_p + v23) = 0;
        v145 = 1;
        v94 = object;
        if (SHIBYTE(v144) < 0)
          operator delete(__p);
        if (BYTE8(v141) && SBYTE7(v141) < 0)
          operator delete(v140[0]);
        if (object)
          os_release(object);
        if (v19 && *(_QWORD *)(v19 + 24))
        {
          v95 = _os_log_pack_size();
          v96 = (std::__shared_weak_count_vtbl *)operator new(v95, (std::align_val_t)8uLL);
          v97 = (std::__shared_weak_count *)operator new();
          v98 = v97;
          v97->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v97->__shared_owners_;
          v97->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v97->__shared_weak_owners_ = 0;
          v97[1].__vftable = v96;
          object = v96;
          v140[0] = v96;
          v140[1] = v97;
          do
            v100 = __ldxr(p_shared_owners);
          while (__stxr(v100 + 1, p_shared_owners));
          v141 = 0uLL;
          __p = 0;
          do
            v101 = __ldaxr(p_shared_owners);
          while (__stlxr(v101 - 1, p_shared_owners));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v98);
          }
          v102 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v103 = operator new();
          v104 = *(unsigned __int8 *)(v21 + 39);
          if ((v104 & 0x80u) == 0)
            v105 = v22;
          else
            v105 = *(_QWORD *)(v21 + 16);
          if ((v104 & 0x80u) != 0)
            v104 = *(_QWORD *)(v21 + 24);
          *(_QWORD *)v103 = v102;
          *(_OWORD *)(v103 + 8) = *(_OWORD *)v140;
          v140[0] = 0;
          v140[1] = 0;
          *(_OWORD *)(v103 + 24) = v141;
          v141 = 0uLL;
          *(_QWORD *)(v103 + 40) = v105;
          *(_QWORD *)(v103 + 48) = v104;
          *(_BYTE *)(v103 + 56) = 2;
          v146 = 0;
          v147[0] = v103;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), v147);
          v106 = v147[0];
          v147[0] = 0;
          if (v106)
          {
            v107 = *(std::__shared_weak_count **)(v106 + 32);
            if (v107)
            {
              v108 = (unint64_t *)&v107->__shared_owners_;
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            v110 = *(std::__shared_weak_count **)(v106 + 16);
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            MEMORY[0x212BC6398](v106, 0x10F0C40B62ED6C6);
            v113 = v146;
            v146 = 0;
            if (v113)
            {
              v114 = *(std::__shared_weak_count **)(v113 + 32);
              if (v114)
              {
                v115 = (unint64_t *)&v114->__shared_owners_;
                do
                  v116 = __ldaxr(v115);
                while (__stlxr(v116 - 1, v115));
                if (!v116)
                {
                  ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                  std::__shared_weak_count::__release_weak(v114);
                }
              }
              v117 = *(std::__shared_weak_count **)(v113 + 16);
              if (v117)
              {
                v118 = (unint64_t *)&v117->__shared_owners_;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
              MEMORY[0x212BC6398](v113, 0x10F0C40B62ED6C6);
            }
          }
          v120 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
          if (*((_QWORD *)&v141 + 1))
          {
            v121 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          v123 = (std::__shared_weak_count *)v140[1];
          if (v140[1])
          {
            v124 = (unint64_t *)((char *)v140[1] + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
        }
        else
        {
          os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG);
          LOWORD(object) = 0;
          v126 = (void *)_os_log_send_and_compose_impl();
          if (v126)
            free(v126);
        }
        if (v17)
        {
          sub_20E8C003C((uint64_t)&v129, "Number of tiles should be positive");
          sub_20E863570((uint64_t)&v129);
        }
        sub_20E863570((uint64_t)&v129);
        v77 = v137;
        if (!v137)
          return 0;
        v127 = (unint64_t *)&v137->__shared_owners_;
        do
          v79 = __ldaxr(v127);
        while (__stlxr(v79 - 1, v127));
LABEL_193:
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
        return 0;
      }
    }
    memmove(v83, v81, v82);
    goto LABEL_125;
  }
  v5 = *(_QWORD *)(a2 + 32);
  if (a3 > v5 >> 2 || (v7 = *(_QWORD *)(a2 + 48), a3 > v7 >> 2))
  {
    sub_20EDA8D18(&v138);
    if (**(int **)(v138 + 56) > 2)
      return 0;
    v8 = *(unsigned __int8 *)(v138 + 72);
    v9 = sub_20E8C31DC(v138, "OSLogSurrogateAppender", 1, 0);
    v10 = v9;
    if (!v8 && v9 == 0)
      return 0;
    v129 = &v138;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v131 = std::chrono::system_clock::now().__d_.__rep_;
    v132 = 2;
    v133 = "unknown file";
    v134 = 123;
    v136 = 0;
    v137 = 0;
    v135 = "unknown function";
    v12 = v138;
    v13 = v138 + 16;
    if (*(char *)(v138 + 39) < 0)
    {
      v15 = *(const char **)(v138 + 16);
      v14 = *(_QWORD *)(v138 + 24);
      v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v30 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v14 = *(unsigned __int8 *)(v138 + 39);
      v15 = (const char *)(*v129 + 16);
      v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v16 & 1) != 0)
        goto LABEL_27;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v141 && SHIBYTE(v140[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_27:
    if (byte_254A4A50F >= 0)
      v31 = (const char *)&xmmword_254A4A4F8;
    else
      v31 = (const char *)xmmword_254A4A4F8;
    if (byte_254A4A50F >= 0)
      v32 = byte_254A4A50F;
    else
      v32 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
    object = os_log_create(v31, v15);
    v33 = v140;
    if (v32 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v32 >= 0x17)
    {
      v34 = v10;
      v35 = v15;
      v36 = v12;
      v37 = v8;
      v38 = v13;
      v39 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v39 = v32 | 7;
      v40 = v39 + 1;
      v33 = operator new(v39 + 1);
      v140[1] = (void *)v32;
      *(_QWORD *)&v141 = v40 | 0x8000000000000000;
      v140[0] = v33;
      v13 = v38;
      v8 = v37;
      v12 = v36;
      v15 = v35;
      v10 = v34;
    }
    else
    {
      BYTE7(v141) = v32;
      if (!v32)
      {
LABEL_41:
        *((_BYTE *)v33 + v32) = 0;
        BYTE8(v141) = 1;
        v41 = &__p;
        if (v14 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v14 >= 0x17)
        {
          v42 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v42 = v14 | 7;
          v43 = v42 + 1;
          v41 = operator new(v42 + 1);
          v143 = v14;
          v144 = v43 | 0x8000000000000000;
          __p = v41;
        }
        else
        {
          HIBYTE(v144) = v14;
          if (!v14)
            goto LABEL_49;
        }
        memmove(v41, v15, v14);
LABEL_49:
        *((_BYTE *)v41 + v14) = 0;
        v145 = 1;
        v44 = object;
        if (SHIBYTE(v144) < 0)
          operator delete(__p);
        if (BYTE8(v141) && SBYTE7(v141) < 0)
          operator delete(v140[0]);
        if (object)
          os_release(object);
        if (v10 && *(_QWORD *)(v10 + 24))
        {
          v45 = _os_log_pack_size();
          v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
          v47 = (std::__shared_weak_count *)operator new();
          v48 = v47;
          v47->__shared_owners_ = 0;
          v49 = (unint64_t *)&v47->__shared_owners_;
          v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v47->__shared_weak_owners_ = 0;
          v47[1].__vftable = v46;
          object = v46;
          v140[0] = v46;
          v140[1] = v47;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
          v141 = 0uLL;
          __p = 0;
          do
            v51 = __ldaxr(v49);
          while (__stlxr(v51 - 1, v49));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v48);
          }
          v52 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v53 = operator new();
          v54 = *(unsigned __int8 *)(v12 + 39);
          if ((v54 & 0x80u) == 0)
            v55 = v13;
          else
            v55 = *(_QWORD *)(v12 + 16);
          if ((v54 & 0x80u) != 0)
            v54 = *(_QWORD *)(v12 + 24);
          *(_QWORD *)v53 = v52;
          *(_OWORD *)(v53 + 8) = *(_OWORD *)v140;
          v140[0] = 0;
          v140[1] = 0;
          *(_OWORD *)(v53 + 24) = v141;
          v141 = 0uLL;
          *(_QWORD *)(v53 + 40) = v55;
          *(_QWORD *)(v53 + 48) = v54;
          *(_BYTE *)(v53 + 56) = 2;
          v146 = 0;
          v147[0] = v53;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), v147);
          v56 = v147[0];
          v147[0] = 0;
          if (v56)
          {
            v57 = *(std::__shared_weak_count **)(v56 + 32);
            if (v57)
            {
              v58 = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v60 = *(std::__shared_weak_count **)(v56 + 16);
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            MEMORY[0x212BC6398](v56, 0x10F0C40B62ED6C6);
            v63 = v146;
            v146 = 0;
            if (v63)
            {
              v64 = *(std::__shared_weak_count **)(v63 + 32);
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              v67 = *(std::__shared_weak_count **)(v63 + 16);
              if (v67)
              {
                v68 = (unint64_t *)&v67->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
            }
          }
          v70 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
          if (*((_QWORD *)&v141 + 1))
          {
            v71 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          v73 = (std::__shared_weak_count *)v140[1];
          if (v140[1])
          {
            v74 = (unint64_t *)((char *)v140[1] + 8);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
        }
        else
        {
          os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG);
          LOWORD(object) = 0;
          v76 = (void *)_os_log_send_and_compose_impl();
          if (v76)
            free(v76);
        }
        if (v8)
        {
          sub_20E8C003C((uint64_t)&v129, "Not enough pixels in tile");
          sub_20E863570((uint64_t)&v129);
        }
        sub_20E863570((uint64_t)&v129);
        v77 = v137;
        if (!v137)
          return 0;
        v78 = (unint64_t *)&v137->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        goto LABEL_193;
      }
    }
    memmove(v33, v31, v32);
    goto LABEL_41;
  }
  *(_DWORD *)(a1 + 288) = a3;
  sub_20EDA8E0C((_QWORD *)a1, v5, *(_QWORD *)(a2 + 40), v7, *(_QWORD *)(a2 + 16), 0, 0);
  memcpy(*(void **)(a1 + 88), *(const void **)(a2 + 88), *(_QWORD *)(a2 + 48) * *(_QWORD *)(a2 + 40));
  if (!*(_QWORD *)(a4 + 88))
    return 1;
  v27 = *(_QWORD *)(a4 + 32);
  if (v27 != *(_QWORD *)(a2 + 32))
    return 0;
  v28 = 0;
  v29 = *(_QWORD *)(a4 + 48);
  if (v29 == *(_QWORD *)(a2 + 48) && *(_QWORD *)(a4 + 16) == 1)
  {
    v28 = 1;
    sub_20EDA8E0C((_QWORD *)(a1 + 144), v27, *(_QWORD *)(a4 + 40), v29, 1, 0, 0);
    memcpy(*(void **)(a1 + 232), *(const void **)(a4 + 88), *(_QWORD *)(a4 + 48) * *(_QWORD *)(a4 + 40));
  }
  return v28;
}

void sub_20EDA8B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EDA8BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v3 - 96));
  sub_20E86E8C4((uint64_t *)(v3 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDA8C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDA8C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDA8C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EDA8D18(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F960);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F960))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.odt.image_detection_and_tracking");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F958);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F960);
  }
  *a1 = qword_254A5F958;
}

void sub_20EDA8DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F960);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F960);
  _Unwind_Resume(a1);
}

void sub_20EDA8E0C(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;

  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[2] = a5;
  v14 = operator new[]();
  *(_QWORD *)&v21 = v14;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24C9E9558;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v14;
  *((_QWORD *)&v21 + 1) = v15;
  LOBYTE(v19) = 0;
  v20 = 0;
  sub_20E8E9964((uint64_t)a1, &v21, a2, a3, a4, a5, a6, a7, &v19);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20EDA8F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EDA8F38(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x212BC6368](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_20EDA8F5C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EDA8F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(a2 + 88))
  {
    v4 = *(_QWORD *)(a2 + 32);
    if (v4 == *(_QWORD *)(a1 + 32)
      && ((v5 = *(_QWORD *)(a2 + 48), v5 == *(_QWORD *)(a1 + 48)) ? (v6 = *(_QWORD *)(a2 + 16) == 1) : (v6 = 0), v6))
    {
      sub_20EDA8E0C((_QWORD *)(a1 + 144), v4, *(_QWORD *)(a2 + 40), v5, 1, 0, 0);
      memcpy(*(void **)(a1 + 232), *(const void **)(a2 + 88), *(_QWORD *)(a2 + 48) * *(_QWORD *)(a2 + 40));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v8 = *(std::__shared_weak_count **)(a1 + 240);
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a1 + 152) = 0;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_BYTE *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    v11 = *(_QWORD *)(a1 + 264);
    if (*(_QWORD *)(a1 + 272) != v11)
      *(_QWORD *)(a1 + 272) = v11;
    return 1;
  }
}

void sub_20EDA90AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EDA90D0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x212BC6368);
  return result;
}

uint64_t sub_20EDA90F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3vio8cv_types12ArrayDeleterIhEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIhEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3vio8cv_types12ArrayDeleterIhEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIhEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EDA9160(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20EDB196C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20EDA91BC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[5];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20EDA923C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_20EDA9294(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v7 = (_QWORD *)*v3;
        v8 = v3[3];
        if (v8)
        {
          v9 = v3[4];
          v6 = (void *)v3[3];
          if (v9 != v8)
          {
            v10 = v3[4];
            do
            {
              v12 = *(void **)(v10 - 24);
              v10 -= 24;
              v11 = v12;
              if (v12)
              {
                *(_QWORD *)(v9 - 16) = v11;
                operator delete(v11);
              }
              v9 = v10;
            }
            while (v10 != v8);
            v6 = (void *)v3[3];
          }
          v3[4] = v8;
          operator delete(v6);
        }
        operator delete(v3);
        v3 = v7;
      }
      while (v7);
    }
    v4 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
      operator delete(v4);
    MEMORY[0x212BC6398](v2, 0x10A0C408EF24B1CLL);
  }
  return a1;
}

uint64_t *sub_20EDA9360(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)(v2 + 400) = &off_24C9E9620;
    v3 = *(_QWORD *)(v2 + 408);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 416);
      v5 = *(void **)(v2 + 408);
      if (v4 != v3)
      {
        do
        {
          v7 = *(_QWORD *)(v4 - 48);
          v4 -= 48;
          v6 = v7;
          if (v7)
            MEMORY[0x212BC6368](v6, 0x1000C8052888210);
        }
        while (v4 != v3);
        v5 = *(void **)(v2 + 408);
      }
      *(_QWORD *)(v2 + 416) = v3;
      operator delete(v5);
    }
    if (*(_BYTE *)(v2 + 392))
      sub_20EDB165C((void **)(v2 + 16));
    MEMORY[0x212BC6398](v2, 0x10F2C40CE21C6C7);
  }
  return a1;
}

uint64_t *sub_20EDA9418(uint64_t *a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  void **v6;
  __int128 *v7;
  char v8;
  __int128 v9;
  void *v10;
  size_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  void *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  size_t v46;
  std::__shared_weak_count_vtbl *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *category;
  int v86;
  _QWORD v87[3];
  int v88;
  const char *v89;
  int v90;
  const char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  void *object;
  void *v96[2];
  __int128 v97;
  void *__p[2];
  unint64_t v99;
  char v100;
  _BYTE v101[224];
  uint64_t v102;
  uint64_t v103;

  *((_OWORD *)a1 + 1) = 0u;
  *(_OWORD *)((char *)a1 + 57) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 5) = xmmword_210377ED0;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_DWORD *)a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  *((_DWORD *)a1 + 42) = 1065353216;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_DWORD *)a1 + 52) = 1065353216;
  *(_OWORD *)(a1 + 27) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  *((_DWORD *)a1 + 62) = 1065353216;
  a1[2] = *(_QWORD *)a2;
  v4 = a1 + 3;
  if (a1 + 2 != (uint64_t *)a2)
  {
    if ((*(char *)(a2 + 31) & 0x80000000) == 0)
    {
      v5 = *(_OWORD *)(a2 + 8);
      a1[5] = *(_QWORD *)(a2 + 24);
      *v4 = v5;
      v6 = (void **)(a1 + 6);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
        v7 = (__int128 *)(a2 + 32);
LABEL_7:
        v9 = *v7;
        v6[2] = (void *)*((_QWORD *)v7 + 2);
        *(_OWORD *)v6 = v9;
        goto LABEL_16;
      }
      goto LABEL_8;
    }
    sub_20E867BF8(a1 + 3, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v6 = (void **)(a1 + 6);
    v7 = (__int128 *)(a2 + 32);
    v8 = *(_BYTE *)(a2 + 55);
    if ((*((char *)a1 + 71) & 0x80000000) == 0)
    {
      if ((*(_BYTE *)(a2 + 55) & 0x80) == 0)
        goto LABEL_7;
LABEL_8:
      sub_20E867BF8(v6, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
      goto LABEL_16;
    }
    if (v8 >= 0)
      v10 = (void *)(a2 + 32);
    else
      v10 = *(void **)(a2 + 32);
    if (v8 >= 0)
      v11 = *(unsigned __int8 *)(a2 + 55);
    else
      v11 = *(_QWORD *)(a2 + 40);
    sub_20E867CBC(v6, v10, v11);
  }
LABEL_16:
  v12 = *(_OWORD *)(a2 + 56);
  a1[11] = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 9) = v12;
  if (*((char *)a1 + 47) < 0)
  {
    if (!a1[4])
      goto LABEL_22;
  }
  else if (!*((_BYTE *)a1 + 47))
  {
LABEL_22:
    if (!*((_BYTE *)a1 + 72))
      goto LABEL_45;
    goto LABEL_40;
  }
  if (*((char *)a1 + 71) < 0)
  {
    if (!a1[7])
      goto LABEL_22;
  }
  else if (!*((_BYTE *)a1 + 71))
  {
    goto LABEL_22;
  }
  sub_20F42C6A0((uint64_t)v4, (uint64_t)(a1 + 6), 0, 0, (uint64_t)&object);
  if (!v101[216])
  {
    sub_20EDB1780((char **)&object);
    goto LABEL_144;
  }
  v13 = operator new();
  sub_20F431E80(v13, (uint64_t *)&object, (uint64_t)v101);
  v14 = *a1;
  *a1 = v13;
  if (v14)
  {
    *(_QWORD *)(v14 + 400) = &off_24C9E9620;
    v15 = *(_QWORD *)(v14 + 408);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 416);
      v17 = *(void **)(v14 + 408);
      if (v16 != v15)
      {
        do
        {
          v19 = *(_QWORD *)(v16 - 48);
          v16 -= 48;
          v18 = v19;
          if (v19)
            MEMORY[0x212BC6368](v18, 0x1000C8052888210);
        }
        while (v16 != v15);
        v17 = *(void **)(v14 + 408);
      }
      *(_QWORD *)(v14 + 416) = v15;
      operator delete(v17);
    }
    if (*(_BYTE *)(v14 + 392))
      sub_20EDB165C((void **)(v14 + 16));
    MEMORY[0x212BC6398](v14, 0x10F2C40CE21C6C7);
  }
  sub_20EDB1780((char **)&object);
  if (*((_BYTE *)a1 + 72))
  {
LABEL_40:
    v20 = operator new();
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_DWORD *)(v20 + 32) = 1065353216;
    v21 = a1[1];
    a1[1] = v20;
    if (v21)
    {
      v22 = *(_QWORD **)(v21 + 16);
      if (v22)
      {
        do
        {
          v28 = (_QWORD *)*v22;
          v29 = v22[3];
          if (v29)
          {
            v30 = v22[4];
            v27 = (void *)v22[3];
            if (v30 != v29)
            {
              v31 = v22[4];
              do
              {
                v33 = *(void **)(v31 - 24);
                v31 -= 24;
                v32 = v33;
                if (v33)
                {
                  *(_QWORD *)(v30 - 16) = v32;
                  operator delete(v32);
                }
                v30 = v31;
              }
              while (v31 != v29);
              v27 = (void *)v22[3];
            }
            v22[4] = v29;
            operator delete(v27);
          }
          operator delete(v22);
          v22 = v28;
        }
        while (v28);
      }
      v23 = *(void **)v21;
      *(_QWORD *)v21 = 0;
      if (v23)
        operator delete(v23);
      MEMORY[0x212BC6398](v21, 0x10A0C408EF24B1CLL);
    }
  }
LABEL_45:
  if (*a1 || a1[1])
    return a1;
  sub_20EDAA398(&v94);
  if (**(int **)(v94 + 56) <= 5)
  {
    v86 = *(unsigned __int8 *)(v94 + 72);
    v24 = sub_20E8C31DC(v94, "OSLogSurrogateAppender", 1, 0);
    v25 = v24;
    if (v86 || v24)
    {
      v87[0] = &v94;
      v87[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v87[2] = std::chrono::system_clock::now().__d_.__rep_;
      v88 = 5;
      v89 = "unknown file";
      v90 = 87;
      v92 = 0;
      v93 = 0;
      v91 = "unknown function";
      if (*(char *)(v94 + 39) < 0)
      {
        v26 = *(_QWORD *)(v94 + 24);
        category = *(char **)(v94 + 16);
      }
      else
      {
        v26 = *(unsigned __int8 *)(v94 + 39);
        category = (char *)(*(_QWORD *)v87[0] + 16);
      }
      v82 = v94 + 16;
      v83 = v94;
      v84 = v25;
      v34 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v97 && SHIBYTE(v96[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A50F >= 0)
        v35 = (const char *)&xmmword_254A4A4F8;
      else
        v35 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v36 = byte_254A4A50F;
      else
        v36 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      object = os_log_create(v35, category);
      v37 = v96;
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v36 >= 0x17)
      {
        v38 = v26;
        v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v39 = v36 | 7;
        v40 = v39 + 1;
        v37 = operator new(v39 + 1);
        v96[1] = (void *)v36;
        *(_QWORD *)&v97 = v40 | 0x8000000000000000;
        v96[0] = v37;
        v26 = v38;
      }
      else
      {
        BYTE7(v97) = v36;
        if (!v36)
        {
LABEL_77:
          *((_BYTE *)v37 + v36) = 0;
          BYTE8(v97) = 1;
          v41 = __p;
          if (v26 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v26 >= 0x17)
          {
            v42 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17)
              v42 = v26 | 7;
            v43 = (void *)v26;
            v44 = v42 + 1;
            v41 = operator new(v42 + 1);
            __p[1] = v43;
            v99 = v44 | 0x8000000000000000;
            __p[0] = v41;
            v26 = (size_t)v43;
          }
          else
          {
            HIBYTE(v99) = v26;
            if (!v26)
              goto LABEL_85;
          }
          memmove(v41, category, v26);
LABEL_85:
          *((_BYTE *)v41 + v26) = 0;
          v100 = 1;
          v45 = object;
          if (SHIBYTE(v99) < 0)
            operator delete(__p[0]);
          if (BYTE8(v97) && SBYTE7(v97) < 0)
            operator delete(v96[0]);
          if (object)
            os_release(object);
          if (v84 && *(_QWORD *)(v84 + 24))
          {
            v46 = _os_log_pack_size();
            v47 = (std::__shared_weak_count_vtbl *)operator new(v46, (std::align_val_t)8uLL);
            v48 = (std::__shared_weak_count *)operator new();
            v49 = v48;
            v48->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v48->__shared_owners_;
            v48->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v48->__shared_weak_owners_ = 0;
            v48[1].__vftable = v47;
            object = v47;
            v96[0] = v47;
            v96[1] = v48;
            do
              v51 = __ldxr(p_shared_owners);
            while (__stxr(v51 + 1, p_shared_owners));
            v97 = 0uLL;
            __p[0] = 0;
            do
              v52 = __ldaxr(p_shared_owners);
            while (__stlxr(v52 - 1, p_shared_owners));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v49);
            }
            v53 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v54 = operator new();
            v55 = *(unsigned __int8 *)(v83 + 39);
            v56 = v82;
            if ((v55 & 0x80u) != 0)
            {
              v56 = *(_QWORD *)(v83 + 16);
              v55 = *(_QWORD *)(v83 + 24);
            }
            *(_QWORD *)v54 = v53;
            *(_OWORD *)(v54 + 8) = *(_OWORD *)v96;
            v96[0] = 0;
            v96[1] = 0;
            *(_OWORD *)(v54 + 24) = v97;
            v97 = 0uLL;
            *(_QWORD *)(v54 + 40) = v56;
            *(_QWORD *)(v54 + 48) = v55;
            *(_BYTE *)(v54 + 56) = 16;
            v102 = 0;
            v103 = v54;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v84 + 24) + 40))(*(_QWORD *)(v84 + 24), &v103);
            v57 = v103;
            v103 = 0;
            if (v57)
            {
              v58 = *(std::__shared_weak_count **)(v57 + 32);
              if (v58)
              {
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v61 = *(std::__shared_weak_count **)(v57 + 16);
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              MEMORY[0x212BC6398](v57, 0x10F0C40B62ED6C6);
              v64 = v102;
              v102 = 0;
              if (v64)
              {
                v65 = *(std::__shared_weak_count **)(v64 + 32);
                if (v65)
                {
                  v66 = (unint64_t *)&v65->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
                v68 = *(std::__shared_weak_count **)(v64 + 16);
                if (v68)
                {
                  v69 = (unint64_t *)&v68->__shared_owners_;
                  do
                    v70 = __ldaxr(v69);
                  while (__stlxr(v70 - 1, v69));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                }
                MEMORY[0x212BC6398](v64, 0x10F0C40B62ED6C6);
              }
            }
            v71 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
            if (*((_QWORD *)&v97 + 1))
            {
              v72 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            v74 = (std::__shared_weak_count *)v96[1];
            if (v96[1])
            {
              v75 = (unint64_t *)((char *)v96[1] + 8);
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
          }
          else
          {
            os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
            LOWORD(object) = 0;
            v77 = (void *)_os_log_send_and_compose_impl();
            if (v77)
              free(v77);
          }
          if (v86)
          {
            sub_20E8C003C((uint64_t)v87, "Neither VLAD nor brute-force ranker was initialized");
            sub_20E863570((uint64_t)v87);
          }
          sub_20E863570((uint64_t)v87);
          v78 = v93;
          if (v93)
          {
            v79 = (unint64_t *)&v93->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          goto LABEL_144;
        }
      }
      memmove(v37, v35, v36);
      goto LABEL_77;
    }
  }
LABEL_144:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 58, (uint64_t)"InitImageRanking() == ObjectRankingReturn::kObjectRankingReturnLoadModelOk", 74, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20EDA9E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  sub_20EDA9160(v41);
  sub_20EDA91BC(v40);
  sub_20EDA91BC(v39);
  sub_20E9DEEC4(a14);
  sub_20EDA923C(v38);
  sub_20EDA9294(v37 + 1);
  sub_20EDA9360(v37);
  _Unwind_Resume(a1);
}

unint64_t sub_20EDA9FDC@<X0>(int8x8_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  uint64_t v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;

  result = sub_20EDAA1F4(a1, a3);
  if (result >= a2)
  {
    v20 = 0uLL;
    v21 = 0;
    if (!a2)
    {
      v19 = 0;
      v18 = 0uLL;
      goto LABEL_29;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 62, (uint64_t)"GetNumberOfReferencesForThisSession(session_id) >= k", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v20 = 0uLL;
    v21 = 0;
  }
  if (a2 >> 61)
    sub_20E92CED8();
  v9 = 0;
  *(_QWORD *)&v20 = operator new(8 * a2);
  *((_QWORD *)&v20 + 1) = v20;
  v21 = v20 + 8 * a2;
  v23 = &v20;
  do
  {
    v10 = a1[13];
    if (!*(_QWORD *)&v10)
      goto LABEL_31;
    v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = a3;
      if (*(_QWORD *)&v10 <= a3)
        v12 = a3 % *(_QWORD *)&v10;
    }
    else
    {
      v12 = (*(_QWORD *)&v10 - 1) & a3;
    }
    v13 = *(_QWORD **)(*(_QWORD *)&a1[12] + 8 * v12);
    if (!v13 || (v14 = (_QWORD *)*v13) == 0)
LABEL_31:
      sub_20E89FD20("unordered_map::at: key not found");
    if (v11.u32[0] < 2uLL)
    {
      v15 = *(_QWORD *)&v10 - 1;
      while (1)
      {
        v17 = v14[1];
        if (v17 == a3)
        {
          if (v14[2] == a3)
            goto LABEL_27;
        }
        else if ((v17 & v15) != v12)
        {
          goto LABEL_31;
        }
        v14 = (_QWORD *)*v14;
        if (!v14)
          goto LABEL_31;
      }
    }
    while (1)
    {
      v16 = v14[1];
      if (v16 == a3)
        break;
      if (v16 >= *(_QWORD *)&v10)
        v16 %= *(_QWORD *)&v10;
      if (v16 != v12)
        goto LABEL_31;
LABEL_17:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_31;
    }
    if (v14[2] != a3)
      goto LABEL_17;
LABEL_27:
    v22 = *(_QWORD *)(v14[3] + 8 * v9);
    result = (unint64_t)sub_20E9B2D04((uint64_t *)&v23, &v22);
    ++v9;
  }
  while (v9 != a2);
  v18 = v20;
  v19 = v21;
LABEL_29:
  *(_OWORD *)a4 = v18;
  *(_QWORD *)(a4 + 16) = v19;
  return result;
}

void sub_20EDAA1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDAA1F4(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  int8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;

  v2 = a1[23];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = a1[22];
  v6 = *(_QWORD **)(*(_QWORD *)&v5 + 8 * v4);
  if (!v6)
    return 0;
  v7 = (_QWORD *)*v6;
  if (!*v6)
    return 0;
  v8 = *(_QWORD *)&v2 - 1;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = v7[1];
      if (v9 == a2)
      {
        if (v7[2] == a2)
          goto LABEL_22;
      }
      else if ((v9 & v8) != v4)
      {
        return 0;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v10 = v7[1];
    if (v10 == a2)
      break;
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
    if (v10 != v4)
      return 0;
LABEL_16:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return 0;
  }
  if (v7[2] != a2)
    goto LABEL_16;
LABEL_22:
  if (v3.u32[0] > 1uLL)
  {
    v12 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v12 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v12 = v8 & a2;
  }
  v13 = *(_QWORD **)(*(_QWORD *)&v5 + 8 * v12);
  if (!v13 || (v14 = (_QWORD *)*v13) == 0)
LABEL_42:
    sub_20E89FD20("unordered_map::at: key not found");
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v14[1];
      if (v15 == a2)
      {
        if (v14[2] == a2)
          return v14[6];
      }
      else if ((v15 & v8) != v12)
      {
        goto LABEL_42;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_42;
    }
  }
  while (2)
  {
    v16 = v14[1];
    if (v16 != a2)
    {
      if (v16 >= *(_QWORD *)&v2)
        v16 %= *(_QWORD *)&v2;
      if (v16 != v12)
        goto LABEL_42;
      goto LABEL_36;
    }
    if (v14[2] != a2)
    {
LABEL_36:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_42;
      continue;
    }
    return v14[6];
  }
}

void sub_20EDAA398(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5F970);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5F970))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.odt.image_detection_and_tracking");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5F968);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5F970);
  }
  *a1 = qword_254A5F968;
}

void sub_20EDAA434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5F970);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5F970);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDAA48C(uint64_t a1, char **a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint8x8_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  char *v27;
  char *v28;
  int64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  int64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  void *v38;
  char *v39;
  void *v40;
  void *v41;
  char *v42;
  void *__p;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  _QWORD *v49;
  char v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v46 = a4;
  v47 = a3;
  v8 = (uint64_t *)(a1 + 176);
  v9 = *(int8x8_t *)(a1 + 184);
  if (!*(_QWORD *)&v9)
    goto LABEL_43;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a4;
    if (*(_QWORD *)&v9 <= a4)
      v11 = a4 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & a4;
  }
  v12 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v12)
    goto LABEL_43;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_43;
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == a4)
      {
        if (v13[2] == a4)
          goto LABEL_22;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_43;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_43;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == a4)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_43;
LABEL_11:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_43;
  }
  if (v13[2] != a4)
    goto LABEL_11;
LABEL_22:
  v17 = (int8x8_t)v13[4];
  if (v17)
  {
    v18 = (uint8x8_t)vcnt_s8(v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      v19 = a3;
      if (*(_QWORD *)&v17 <= a3)
        v19 = a3 % *(_QWORD *)&v17;
    }
    else
    {
      v19 = (*(_QWORD *)&v17 - 1) & a3;
    }
    v20 = *(_QWORD **)(v13[3] + 8 * v19);
    if (v20)
    {
      v21 = (_QWORD *)*v20;
      if (v21)
      {
        if (v18.u32[0] < 2uLL)
        {
          v22 = *(_QWORD *)&v17 - 1;
          while (1)
          {
            v24 = v21[1];
            if (v24 == a3)
            {
              if (v21[2] == a3)
                return 1;
            }
            else if ((v24 & v22) != v19)
            {
              goto LABEL_43;
            }
            v21 = (_QWORD *)*v21;
            if (!v21)
              goto LABEL_43;
          }
        }
        do
        {
          v23 = v21[1];
          if (v23 == a3)
          {
            if (v21[2] == a3)
              return 1;
          }
          else
          {
            if (v23 >= *(_QWORD *)&v17)
              v23 %= *(_QWORD *)&v17;
            if (v23 != v19)
              break;
          }
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
    }
  }
LABEL_43:
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)&v48 = a4;
    *((_QWORD *)&v48 + 1) = a3;
    LODWORD(v49) = -1;
    sub_20EDAA9A0((char ***)&__p, *a2, a2[1]);
    sub_20F432B30(*(_QWORD ***)a1, &v48, (uint64_t *)&__p, 1);
    if (__p)
    {
      v44 = (char *)__p;
      operator delete(__p);
    }
  }
  v26 = *(uint64_t **)(a1 + 8);
  if (v26)
  {
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v28 = *a2;
    v27 = a2[1];
    v29 = v27 - *a2;
    if (v27 == *a2)
    {
      v31 = 0;
      v30 = 0;
    }
    else
    {
      if (v29 < 0)
        sub_20ED343A8();
      v30 = (char *)operator new(v27 - *a2);
      v31 = &v30[64 * (v29 >> 6)];
      v53 = v30;
      v55 = v31;
      memcpy(v30, v28, v29);
      v54 = v31;
    }
    __p = 0;
    v44 = 0;
    v45 = 0;
    v32 = operator new(0x18uLL);
    __p = v32;
    v44 = (char *)v32;
    v45 = v32 + 3;
    v51 = v32;
    v52 = v32;
    *(_QWORD *)&v48 = &v45;
    *((_QWORD *)&v48 + 1) = &v51;
    v49 = &v52;
    v50 = 0;
    v32[1] = 0;
    v32[2] = 0;
    *v32 = 0;
    v33 = v31 - v30;
    if (v31 != v30)
    {
      if (v33 < 0)
        sub_20ED343A8();
      v34 = (char *)operator new(v31 - v30);
      *v32 = v34;
      v35 = &v34[64 * (v33 >> 6)];
      v32[2] = v35;
      memcpy(v34, v30, v33);
      v32[1] = v35;
    }
    v44 = (char *)(v32 + 3);
    sub_20EDA32CC(v26, a3, (uint32x4_t ***)&__p);
    v36 = (char *)__p;
    if (__p)
    {
      v37 = v44;
      v38 = __p;
      if (v44 != __p)
      {
        v39 = v44;
        do
        {
          v41 = (void *)*((_QWORD *)v39 - 3);
          v39 -= 24;
          v40 = v41;
          if (v41)
          {
            *((_QWORD *)v37 - 2) = v40;
            operator delete(v40);
          }
          v37 = v39;
        }
        while (v39 != v36);
        v38 = __p;
      }
      v44 = v36;
      operator delete(v38);
    }
    if (v30)
      operator delete(v30);
  }
  v42 = sub_20EDB1A04(v8, a4, &v46);
  sub_20EDB1F30((uint64_t)(v42 + 24), &v47, &v47);
  return 0;
}

void sub_20EDAA890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  char *v23;
  char *v25;
  void *v26;
  void *v27;

  sub_20E96AC74((uint64_t)&a15);
  if (__p)
  {
    if (v23 != __p)
    {
      v25 = v23;
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v23 - 2) = v26;
          operator delete(v26);
        }
        v23 = v25;
      }
      while (v25 != __p);
      v23 = __p;
    }
    operator delete(v23);
    if (!v22)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_12;
  }
  a22 = (uint64_t)v22;
  operator delete(v22);
  _Unwind_Resume(a1);
}

char ***sub_20EDAA9A0(char ***result, char *a2, char *a3)
{
  char ***v3;
  uint64_t v4;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char **v10;
  __int128 v11;
  char **v12;
  _OWORD v13[4];
  char **v14;

  v3 = result;
  v11 = 0uLL;
  v12 = 0;
  v4 = a3 - a2;
  if (a3 == a2)
  {
    v10 = 0;
    v9 = 0uLL;
  }
  else
  {
    if (v4 < 0)
      sub_20E867F44();
    v6 = a2;
    *(_QWORD *)&v11 = operator new(a3 - a2);
    *((_QWORD *)&v11 + 1) = v11;
    v12 = (char **)(v11 + (v4 >> 6 << 6));
    v14 = (char **)&v11;
    do
    {
      v7 = *((_OWORD *)v6 + 1);
      v13[0] = *(_OWORD *)v6;
      v13[1] = v7;
      v8 = *((_OWORD *)v6 + 3);
      v13[2] = *((_OWORD *)v6 + 2);
      v13[3] = v8;
      result = sub_20EDB1848(&v14, v13);
      v6 += 64;
    }
    while (v6 != a3);
    v9 = v11;
    v10 = v12;
  }
  *(_OWORD *)v3 = v9;
  v3[2] = v10;
  return result;
}

void sub_20EDAAA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDAAA78(_QWORD *a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint8x8_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  int8x8_t v27;
  uint8x8_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  uint8x8_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  unint64_t *v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  int8x8_t v70;
  uint8x8_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint8x8_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  float v89;
  float v90;
  uint64_t v91;
  _QWORD *v92;
  _BOOL8 v93;
  unint64_t v94;
  unint64_t v95;
  size_t prime;
  unint64_t v97;
  uint8x8_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  void *v104;
  int64_t v105;
  char *v106;
  char *v107;
  uint64_t *v108;
  unint64_t v109;
  uint8x8_t v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  float v117;
  float v118;
  uint64_t v119;
  _QWORD *v120;
  _BOOL8 v121;
  unint64_t v122;
  unint64_t v123;
  size_t v124;
  int8x8_t v125;
  unint64_t v126;
  uint8x8_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  _BYTE *v138;
  _BYTE *v139;
  int64_t v140;
  void *v141;
  unint64_t v142;
  char *v143;
  char *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  __int128 v152;
  char *v153;
  char *v154;
  void *v155;
  void *v156;
  void *v157;
  char *v158;
  char *v159;
  void *v160;
  char *v161;
  void *v162;
  void *v163;
  char *v164;
  uint64_t *v165;
  unint64_t v166;
  _QWORD ***v167;
  __int128 v169;
  uint64_t v170;
  char *v171;
  void *v172;
  char *v173;
  char *v174;
  unint64_t v175;
  unint64_t v176;
  void *__p;
  char *v178;
  char *v179;

  v5 = a4;
  v6 = a3;
  v7 = a1;
  v175 = a4;
  v176 = a3;
  v8 = a1[2];
  if (v8 + 1 != 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 129, (uint64_t)"ranking_config_.num_additional_features + 1 == features.size()", 62, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_324;
    }
    v8 = v7[2];
  }
  v9 = (int8x8_t)v7[23];
  if (!*(_QWORD *)&v9)
    goto LABEL_46;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = v5;
    if (*(_QWORD *)&v9 <= v5)
      v11 = v5 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & v5;
  }
  v12 = *(_QWORD **)(v7[22] + 8 * v11);
  if (!v12)
    goto LABEL_46;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_46;
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == v5)
      {
        if (v13[2] == v5)
          goto LABEL_25;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_46;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_46;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == v5)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_46;
LABEL_14:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_46;
  }
  if (v13[2] != v5)
    goto LABEL_14;
LABEL_25:
  v17 = (int8x8_t)v13[4];
  if (v17)
  {
    v18 = (uint8x8_t)vcnt_s8(v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      v19 = v6;
      if (*(_QWORD *)&v17 <= v6)
        v19 = v6 % *(_QWORD *)&v17;
    }
    else
    {
      v19 = (*(_QWORD *)&v17 - 1) & v6;
    }
    v20 = *(_QWORD **)(v13[3] + 8 * v19);
    if (v20)
    {
      v21 = (_QWORD *)*v20;
      if (v21)
      {
        if (v18.u32[0] < 2uLL)
        {
          v22 = *(_QWORD *)&v17 - 1;
          while (1)
          {
            v24 = v21[1];
            if (v24 == v6)
            {
              if (v21[2] == v6)
                return 1;
            }
            else if ((v24 & v22) != v19)
            {
              goto LABEL_46;
            }
            v21 = (_QWORD *)*v21;
            if (!v21)
              goto LABEL_46;
          }
        }
        do
        {
          v23 = v21[1];
          if (v23 == v6)
          {
            if (v21[2] == v6)
              return 1;
          }
          else
          {
            if (v23 >= *(_QWORD *)&v17)
              v23 %= *(_QWORD *)&v17;
            if (v23 != v19)
              break;
          }
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
    }
  }
LABEL_46:
  v165 = v7 + 22;
  v167 = (_QWORD ***)v7;
  if (!*v7)
    goto LABEL_277;
  v26 = v7 + 27;
  v27 = (int8x8_t)v7[28];
  if (!*(_QWORD *)&v27)
    goto LABEL_90;
  v28 = (uint8x8_t)vcnt_s8(v27);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    v29 = v5;
    if (*(_QWORD *)&v27 <= v5)
      v29 = v5 % *(_QWORD *)&v27;
  }
  else
  {
    v29 = (*(_QWORD *)&v27 - 1) & v5;
  }
  v30 = *(_QWORD **)(*v26 + 8 * v29);
  if (!v30)
    goto LABEL_90;
  v31 = (_QWORD *)*v30;
  if (!v31)
    goto LABEL_90;
  if (v28.u32[0] < 2uLL)
  {
    v32 = *(_QWORD *)&v27 - 1;
    while (1)
    {
      v34 = v31[1];
      if (v34 == v5)
      {
        if (v31[2] == v5)
          goto LABEL_68;
      }
      else if ((v34 & v32) != v29)
      {
        goto LABEL_90;
      }
      v31 = (_QWORD *)*v31;
      if (!v31)
        goto LABEL_90;
    }
  }
  while (2)
  {
    v33 = v31[1];
    if (v33 != v5)
    {
      if (v33 >= *(_QWORD *)&v27)
        v33 %= *(_QWORD *)&v27;
      if (v33 != v29)
        goto LABEL_90;
      goto LABEL_57;
    }
    if (v31[2] != v5)
    {
LABEL_57:
      v31 = (_QWORD *)*v31;
      if (!v31)
        goto LABEL_90;
      continue;
    }
    break;
  }
LABEL_68:
  v35 = (int8x8_t)v31[4];
  if (v35)
  {
    v36 = (uint8x8_t)vcnt_s8(v35);
    v36.i16[0] = vaddlv_u8(v36);
    if (v36.u32[0] > 1uLL)
    {
      v37 = v6;
      if (*(_QWORD *)&v35 <= v6)
        v37 = v6 % *(_QWORD *)&v35;
    }
    else
    {
      v37 = (*(_QWORD *)&v35 - 1) & v6;
    }
    v38 = *(_QWORD **)(v31[3] + 8 * v37);
    if (v38)
    {
      v39 = (_QWORD *)*v38;
      if (v39)
      {
        if (v36.u32[0] < 2uLL)
        {
          v40 = *(_QWORD *)&v35 - 1;
          while (1)
          {
            v42 = v39[1];
            if (v42 == v6)
            {
              if (v39[2] == v6)
                goto LABEL_89;
            }
            else if ((v42 & v40) != v37)
            {
              goto LABEL_90;
            }
            v39 = (_QWORD *)*v39;
            if (!v39)
              goto LABEL_90;
          }
        }
        do
        {
          v41 = v39[1];
          if (v41 == v6)
          {
            if (v39[2] == v6)
            {
LABEL_89:
              if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 141, (uint64_t)"mul_sess_iter == multiple_obj_ids_info_.end() || mul_sess_iter->second.obj_id_to_vlad_obj_id.find(object_id) == mul_sess_iter->second.obj_id_to_vlad_obj_id.end()", 161, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))break;
LABEL_324:
              abort();
            }
          }
          else
          {
            if (v41 >= *(_QWORD *)&v35)
              v41 %= *(_QWORD *)&v35;
            if (v41 != v37)
              break;
          }
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
    }
  }
LABEL_90:
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v43 = a2[1] - *a2;
  if (v43)
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * (v43 >> 6);
    if (v44 >> 61)
      sub_20E92CED8();
    v45 = (char *)operator new(0x5555555555555558 * (v43 >> 6));
    v46 = 0;
    v166 = v44;
    v47 = &v45[8 * v44];
    v48 = v6 + v6 * v8;
    v172 = v45;
    v173 = v45;
    v174 = v47;
    while (1)
    {
      v49 = (char *)v172;
      v50 = v173;
      if (v172 != v173)
      {
        while (*(_QWORD *)v49 != v48)
        {
          v49 += 8;
          if (v49 == v173)
          {
            v49 = v173;
            break;
          }
        }
      }
      if (v49 != v173)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 148, (uint64_t)"!Contains(vlad_obj_ids, vlad_obj_id)", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_318;
        }
        v50 = v173;
      }
      if (v50 < v174)
      {
        *(_QWORD *)v50 = v48;
        v51 = (uint64_t)(v50 + 8);
        goto LABEL_124;
      }
      v52 = (char *)v172;
      v4 = v50 - (_BYTE *)v172;
      v53 = (v50 - (_BYTE *)v172) >> 3;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61)
        sub_20E92CED8();
      v55 = v174 - (_BYTE *)v172;
      if ((v174 - (_BYTE *)v172) >> 2 > v54)
        v54 = v55 >> 2;
      v56 = (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v54;
      if (v56)
      {
        if (v56 >> 61)
          sub_20E877A38();
        v57 = operator new(8 * v56);
        v58 = (unint64_t *)&v57[8 * v53];
        *v58 = v48;
        v51 = (uint64_t)(v58 + 1);
        v59 = v50 - v52;
        if (v50 == v52)
          goto LABEL_122;
      }
      else
      {
        v57 = 0;
        v58 = (unint64_t *)(8 * v53);
        *(_QWORD *)(8 * v53) = v48;
        v51 = 8 * v53 + 8;
        v59 = v50 - v52;
        if (v50 == v52)
          goto LABEL_122;
      }
      v60 = v59 - 8;
      if (v60 < 0x58)
        break;
      if (v50 - v57 - v4 < 0x20)
      {
        v61 = v50;
        do
        {
LABEL_121:
          v68 = *((_QWORD *)v61 - 1);
          v61 -= 8;
          *--v58 = v68;
        }
        while (v61 != v52);
        goto LABEL_122;
      }
      v62 = (v60 >> 3) + 1;
      v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
      v61 = &v50[-v63];
      v58 = (unint64_t *)((char *)v58 - v63);
      v64 = &v57[8 * v53 - 16];
      v65 = v50 - 16;
      v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *(_OWORD *)v65;
        *(v64 - 1) = *((_OWORD *)v65 - 1);
        *v64 = v67;
        v64 -= 2;
        v65 -= 32;
        v66 -= 4;
      }
      while (v66);
      if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_121;
LABEL_122:
      v172 = v58;
      v173 = (char *)v51;
      v174 = &v57[8 * v56];
      if (v52)
        operator delete(v52);
LABEL_124:
      v173 = (char *)v51;
      v5 = v175;
      v69 = sub_20EDB2250(v26, v175, &v175);
      v70 = *(int8x8_t *)(v69 + 72);
      if (!*(_QWORD *)&v70)
        goto LABEL_144;
      v71 = (uint8x8_t)vcnt_s8(v70);
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        v72 = v48;
        if (v48 >= *(_QWORD *)&v70)
          v72 = v48 % *(_QWORD *)&v70;
      }
      else
      {
        v72 = (*(_QWORD *)&v70 - 1) & v48;
      }
      v73 = *(_QWORD **)(*((_QWORD *)v69 + 8) + 8 * v72);
      if (v73)
      {
        v74 = (_QWORD *)*v73;
        if (*v73)
        {
          if (v71.u32[0] < 2uLL)
          {
            v75 = *(_QWORD *)&v70 - 1;
            while (1)
            {
              v77 = v74[1];
              if (v77 == v48)
              {
                if (v74[2] == v48)
                  goto LABEL_145;
              }
              else if ((v77 & v75) != v72)
              {
                goto LABEL_144;
              }
              v74 = (_QWORD *)*v74;
              if (!v74)
                goto LABEL_145;
            }
          }
          do
          {
            v76 = v74[1];
            if (v76 == v48)
            {
              if (v74[2] == v48)
                break;
            }
            else
            {
              if (v76 >= *(_QWORD *)&v70)
                v76 %= *(_QWORD *)&v70;
              if (v76 != v72)
                goto LABEL_144;
            }
            v74 = (_QWORD *)*v74;
          }
          while (v74);
        }
      }
      else
      {
LABEL_144:
        v74 = 0;
      }
LABEL_145:
      sub_20EDB2250(v26, v5, &v175);
      if (v74
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 152, (uint64_t)"multiple_obj_ids_info_[session_id].vlad_obj_id_to_obj_id.find(vlad_obj_id) == multiple_obj_ids_info_[session_id].vlad_obj_id_to_obj_id.end()", 140, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_318:
        abort();
      }
      v78 = sub_20EDB2250(v26, v5, &v175);
      v79 = v26;
      v80 = (uint64_t *)(v78 + 64);
      v81 = v176;
      v82 = *((_QWORD *)v78 + 9);
      if (v82)
      {
        v83 = (uint8x8_t)vcnt_s8((int8x8_t)v82);
        v83.i16[0] = vaddlv_u8(v83);
        if (v83.u32[0] > 1uLL)
        {
          v4 = v48;
          if (v82 <= v48)
            v4 = v48 % v82;
        }
        else
        {
          v4 = (v82 - 1) & v48;
        }
        v84 = *(_QWORD **)(*v80 + 8 * v4);
        if (v84)
        {
          v85 = (_QWORD *)*v84;
          if (v85)
          {
            if (v83.u32[0] < 2uLL)
            {
              while (1)
              {
                v87 = v85[1];
                if (v87 == v48)
                {
                  if (v85[2] == v48)
                    goto LABEL_207;
                }
                else if ((v87 & (v82 - 1)) != v4)
                {
                  goto LABEL_167;
                }
                v85 = (_QWORD *)*v85;
                if (!v85)
                  goto LABEL_167;
              }
            }
            do
            {
              v86 = v85[1];
              if (v86 == v48)
              {
                if (v85[2] == v48)
                  goto LABEL_207;
              }
              else
              {
                if (v86 >= v82)
                  v86 %= v82;
                if (v86 != v4)
                  break;
              }
              v85 = (_QWORD *)*v85;
            }
            while (v85);
          }
        }
      }
LABEL_167:
      v88 = operator new(0x20uLL);
      *v88 = 0;
      v88[1] = v48;
      v88[2] = v48;
      v88[3] = v81;
      v89 = (float)(unint64_t)(*((_QWORD *)v78 + 11) + 1);
      v90 = *((float *)v78 + 24);
      if (v82 && (float)(v90 * (float)v82) >= v89)
      {
        v91 = *v80;
        v92 = *(_QWORD **)(*v80 + 8 * v4);
        if (v92)
          goto LABEL_170;
      }
      else
      {
        v93 = (v82 & (v82 - 1)) != 0;
        if (v82 < 3)
          v93 = 1;
        v94 = v93 | (2 * v82);
        v95 = vcvtps_u32_f32(v89 / v90);
        if (v94 <= v95)
          prime = v95;
        else
          prime = v94;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v82 = *((_QWORD *)v78 + 9);
        }
        if (prime > v82)
          goto LABEL_181;
        if (prime < v82)
        {
          v97 = vcvtps_u32_f32((float)*((unint64_t *)v78 + 11) / *((float *)v78 + 24));
          if (v82 < 3 || (v98 = (uint8x8_t)vcnt_s8((int8x8_t)v82), v98.i16[0] = vaddlv_u8(v98), v98.u32[0] > 1uLL))
          {
            v97 = std::__next_prime(v97);
          }
          else
          {
            v99 = 1 << -(char)__clz(v97 - 1);
            if (v97 >= 2)
              v97 = v99;
          }
          if (prime <= v97)
            prime = v97;
          if (prime < v82)
LABEL_181:
            sub_20E8D2B3C((uint64_t)v80, prime);
        }
        v82 = *((_QWORD *)v78 + 9);
        v100 = v82 - 1;
        if ((v82 & (v82 - 1)) != 0)
        {
          if (v82 <= v48)
          {
            v4 = v48 % v82;
            v91 = *v80;
            v92 = *(_QWORD **)(*v80 + 8 * (v48 % v82));
            if (v92)
            {
LABEL_170:
              *v88 = *v92;
              goto LABEL_205;
            }
          }
          else
          {
            v4 = v48;
            v91 = *v80;
            v92 = *(_QWORD **)(*v80 + 8 * v48);
            if (v92)
              goto LABEL_170;
          }
        }
        else
        {
          v4 = v100 & v48;
          v91 = *v80;
          v92 = *(_QWORD **)(*v80 + 8 * (v100 & v48));
          if (v92)
            goto LABEL_170;
        }
      }
      *v88 = *((_QWORD *)v78 + 10);
      *((_QWORD *)v78 + 10) = v88;
      *(_QWORD *)(v91 + 8 * v4) = v78 + 80;
      if (!*v88)
        goto LABEL_206;
      v101 = *(_QWORD *)(*v88 + 8);
      if ((v82 & (v82 - 1)) != 0)
      {
        if (v101 >= v82)
          v101 %= v82;
      }
      else
      {
        v101 &= v82 - 1;
      }
      v92 = (_QWORD *)(*v80 + 8 * v101);
LABEL_205:
      *v92 = v88;
LABEL_206:
      ++*((_QWORD *)v78 + 11);
LABEL_207:
      *(_QWORD *)&v169 = v5;
      *((_QWORD *)&v169 + 1) = v48;
      LODWORD(v170) = -1;
      sub_20EDAA9A0((char ***)&__p, *(char **)(*a2 + 192 * v46 + 80), *(char **)(*a2 + 192 * v46 + 88));
      v7 = v167;
      sub_20F432B30(*v167, &v169, (uint64_t *)&__p, 1);
      v6 = v81;
      v26 = v79;
      if (__p)
      {
        v178 = (char *)__p;
        operator delete(__p);
      }
      ++v48;
      if (++v46 == v166)
        goto LABEL_209;
    }
    v61 = v50;
    goto LABEL_121;
  }
LABEL_209:
  v102 = sub_20EDB2250(v26, v5, &v175);
  v103 = v102;
  v169 = v6;
  v170 = 0;
  v171 = 0;
  v104 = v172;
  v105 = v173 - (_BYTE *)v172;
  if (v173 == v172)
  {
    v107 = 0;
    v106 = 0;
    v108 = (uint64_t *)(v102 + 24);
    v109 = *((_QWORD *)v102 + 4);
    if (!v109)
      goto LABEL_233;
  }
  else
  {
    if (v105 < 0)
      sub_20E92CED8();
    v106 = (char *)operator new(v173 - (_BYTE *)v172);
    v107 = &v106[8 * (v105 >> 3)];
    *((_QWORD *)&v169 + 1) = v106;
    v171 = v107;
    memcpy(v106, v104, v105);
    v108 = (uint64_t *)(v103 + 24);
    v109 = *((_QWORD *)v103 + 4);
    if (!v109)
    {
LABEL_233:
      v115 = operator new(0x30uLL);
      v116 = v103 + 40;
      __p = v115;
      v178 = v103 + 40;
      *v115 = 0;
      v115[1] = v6;
      v115[2] = v6;
      v115[3] = v106;
      v115[4] = v107;
      v115[5] = v107;
      LOBYTE(v179) = 1;
      v117 = (float)(unint64_t)(*((_QWORD *)v103 + 6) + 1);
      v118 = *((float *)v103 + 14);
      if (v109 && (float)(v118 * (float)v109) >= v117)
      {
        v119 = *v108;
        v120 = *(_QWORD **)(*v108 + 8 * v4);
        if (v120)
        {
LABEL_236:
          *v115 = *v120;
          goto LABEL_273;
        }
      }
      else
      {
        v121 = 1;
        if (v109 >= 3)
          v121 = (v109 & (v109 - 1)) != 0;
        v122 = v121 | (2 * v109);
        v123 = vcvtps_u32_f32(v117 / v118);
        if (v122 <= v123)
          v124 = v123;
        else
          v124 = v122;
        if (v124 == 1)
        {
          v124 = 2;
        }
        else if ((v124 & (v124 - 1)) != 0)
        {
          v124 = std::__next_prime(v124);
        }
        v125 = *(int8x8_t *)(v103 + 32);
        if (v124 > *(_QWORD *)&v125)
          goto LABEL_247;
        if (v124 < *(_QWORD *)&v125)
        {
          v126 = vcvtps_u32_f32((float)*((unint64_t *)v103 + 6) / *((float *)v103 + 14));
          if (*(_QWORD *)&v125 < 3uLL
            || (v127 = (uint8x8_t)vcnt_s8(v125), v127.i16[0] = vaddlv_u8(v127), v127.u32[0] > 1uLL))
          {
            v126 = std::__next_prime(v126);
          }
          else
          {
            v128 = 1 << -(char)__clz(v126 - 1);
            if (v126 >= 2)
              v126 = v128;
          }
          if (v124 <= v126)
            v124 = v126;
          if (v124 < *(_QWORD *)&v125)
LABEL_247:
            sub_20E8D2B3C((uint64_t)v108, v124);
        }
        v109 = *((_QWORD *)v103 + 4);
        v129 = v109 - 1;
        if ((v109 & (v109 - 1)) != 0)
        {
          if (v109 <= v6)
          {
            v4 = v6 % v109;
            v119 = *v108;
            v120 = *(_QWORD **)(*v108 + 8 * (v6 % v109));
            if (v120)
              goto LABEL_236;
          }
          else
          {
            v4 = v6;
            v119 = *v108;
            v120 = *(_QWORD **)(*v108 + 8 * v6);
            if (v120)
              goto LABEL_236;
          }
        }
        else
        {
          v4 = v129 & v6;
          v119 = *v108;
          v120 = *(_QWORD **)(*v108 + 8 * (v129 & v6));
          if (v120)
            goto LABEL_236;
        }
      }
      *v115 = *v116;
      *v116 = v115;
      *(_QWORD *)(v119 + 8 * v4) = v116;
      if (!*v115)
      {
LABEL_274:
        ++*((_QWORD *)v103 + 6);
        goto LABEL_275;
      }
      v130 = *(_QWORD *)(*v115 + 8);
      if ((v109 & (v109 - 1)) != 0)
      {
        if (v130 >= v109)
          v130 %= v109;
      }
      else
      {
        v130 &= v109 - 1;
      }
      v120 = (_QWORD *)(*v108 + 8 * v130);
LABEL_273:
      *v120 = v115;
      goto LABEL_274;
    }
  }
  v110 = (uint8x8_t)vcnt_s8((int8x8_t)v109);
  v110.i16[0] = vaddlv_u8(v110);
  if (v110.u32[0] > 1uLL)
  {
    v4 = v6;
    if (v109 <= v6)
      v4 = v6 % v109;
  }
  else
  {
    v4 = (v109 - 1) & v6;
  }
  v111 = *(_QWORD **)(*v108 + 8 * v4);
  if (!v111)
    goto LABEL_233;
  v112 = (_QWORD *)*v111;
  if (!v112)
    goto LABEL_233;
  if (v110.u32[0] < 2uLL)
  {
    while (1)
    {
      v114 = v112[1];
      if (v114 == v6)
      {
        if (v112[2] == v6)
          goto LABEL_254;
      }
      else if ((v114 & (v109 - 1)) != v4)
      {
        goto LABEL_233;
      }
      v112 = (_QWORD *)*v112;
      if (!v112)
        goto LABEL_233;
    }
  }
  while (1)
  {
    v113 = v112[1];
    if (v113 == v6)
      break;
    if (v113 >= v109)
      v113 %= v109;
    if (v113 != v4)
      goto LABEL_233;
LABEL_223:
    v112 = (_QWORD *)*v112;
    if (!v112)
      goto LABEL_233;
  }
  if (v112[2] != v6)
    goto LABEL_223;
LABEL_254:
  if (v106)
    operator delete(v106);
LABEL_275:
  if (v172)
  {
    v173 = (char *)v172;
    operator delete(v172);
  }
LABEL_277:
  v131 = (uint64_t *)v7[1];
  if (!v131)
    goto LABEL_317;
  v133 = *a2;
  v132 = a2[1];
  v178 = 0;
  v179 = 0;
  __p = 0;
  v134 = v132 - v133;
  if (v132 == v133)
  {
    v137 = 0;
LABEL_308:
    v157 = v137;
    goto LABEL_309;
  }
  v135 = v134 >> 6;
  v136 = 0xAAAAAAAAAAAAAAABLL * v135;
  if (0xAAAAAAAAAAAAAAABLL * v135 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v137 = (char *)operator new(8 * v135);
  v134 = (uint64_t)&v137[24 * v136];
  __p = v137;
  v178 = v137;
  v179 = (char *)v134;
  if (v132 == v133)
    goto LABEL_308;
  while (2)
  {
    while (1)
    {
      v139 = *(_BYTE **)(v133 + 80);
      v138 = *(_BYTE **)(v133 + 88);
      v169 = 0uLL;
      v170 = 0;
      v140 = v138 - v139;
      if (v138 != v139)
        break;
      v142 = 0;
      v141 = 0;
      v143 = v179;
      if (v137 >= v179)
        goto LABEL_288;
LABEL_282:
      *(_QWORD *)v137 = v141;
      *((_QWORD *)v137 + 1) = v142;
      *((_QWORD *)v137 + 2) = v142;
      v137 += 24;
      v178 = v137;
      v133 += 192;
      if (v133 == v132)
        goto LABEL_306;
    }
    if (v140 < 0)
      sub_20ED343A8();
    v141 = operator new(v138 - v139);
    v142 = (unint64_t)v141 + 64 * (v140 >> 6);
    memcpy(v141, v139, v140);
    v143 = v179;
    if (v137 < v179)
      goto LABEL_282;
LABEL_288:
    v144 = (char *)__p;
    v145 = 0xAAAAAAAAAAAAAAABLL * ((v137 - (_BYTE *)__p) >> 3);
    v146 = v145 + 1;
    if (v145 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v147 = 0xAAAAAAAAAAAAAAABLL * ((v143 - (_BYTE *)__p) >> 3);
    if (2 * v147 > v146)
      v146 = 2 * v147;
    if (v147 >= 0x555555555555555)
      v148 = 0xAAAAAAAAAAAAAAALL;
    else
      v148 = v146;
    if (v148 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v149 = (char *)operator new(24 * v148);
    v150 = &v149[24 * v145];
    *((_QWORD *)v150 + 1) = 0;
    *((_QWORD *)v150 + 2) = 0;
    *(_QWORD *)v150 = v141;
    *(int64x2_t *)(v150 + 8) = vdupq_n_s64(v142);
    v170 = 0;
    v169 = 0uLL;
    v151 = v150 + 24;
    if (v137 == v144)
    {
      __p = &v149[24 * v145];
      v178 = v150 + 24;
      v179 = &v149[24 * v148];
    }
    else
    {
      do
      {
        v152 = *(_OWORD *)(v137 - 24);
        v137 -= 24;
        *(_OWORD *)(v150 - 24) = v152;
        v150 -= 24;
        *((_QWORD *)v150 + 2) = *((_QWORD *)v137 + 2);
        *(_QWORD *)v137 = 0;
        *((_QWORD *)v137 + 1) = 0;
        *((_QWORD *)v137 + 2) = 0;
      }
      while (v137 != v144);
      v137 = (char *)__p;
      v153 = v178;
      __p = v150;
      v178 = v151;
      v179 = &v149[24 * v148];
      if (v153 != v137)
      {
        v154 = v153;
        do
        {
          v156 = (void *)*((_QWORD *)v154 - 3);
          v154 -= 24;
          v155 = v156;
          if (v156)
          {
            *((_QWORD *)v153 - 2) = v155;
            operator delete(v155);
          }
          v153 = v154;
        }
        while (v154 != v137);
      }
    }
    if (v137)
      operator delete(v137);
    v137 = v151;
    v178 = v151;
    v133 += 192;
    if (v133 != v132)
      continue;
    break;
  }
LABEL_306:
  v157 = __p;
  v134 = (uint64_t)v179;
  v131 = (uint64_t *)v167[1];
LABEL_309:
  v172 = v157;
  v173 = v137;
  v174 = (char *)v134;
  sub_20EDA32CC(v131, v6, (uint32x4_t ***)&v172);
  v158 = (char *)v172;
  if (v172)
  {
    v159 = v173;
    v160 = v172;
    if (v173 != v172)
    {
      v161 = v173;
      do
      {
        v163 = (void *)*((_QWORD *)v161 - 3);
        v161 -= 24;
        v162 = v163;
        if (v163)
        {
          *((_QWORD *)v159 - 2) = v162;
          operator delete(v162);
        }
        v159 = v161;
      }
      while (v161 != v158);
      v160 = v172;
    }
    v173 = v158;
    operator delete(v160);
  }
LABEL_317:
  v164 = sub_20EDB1A04(v165, v175, &v175);
  sub_20EDB1F30((uint64_t)(v164 + 24), &v176, &v176);
  return 0;
}

void sub_20EDABB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  sub_20EAFA1EC((uint64_t)&a22);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EDABC78(int8x8_t *a1, unint64_t a2, unint64_t a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  uint64_t *v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v3 = a1[18];
  if (!*(_QWORD *)&v3)
    goto LABEL_43;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a3;
    if (*(_QWORD *)&v3 <= a3)
      v5 = a3 % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & a3;
  }
  v6 = *(_QWORD **)(*(_QWORD *)&a1[17] + 8 * v5);
  if (!v6 || (v7 = (_QWORD *)*v6) == 0)
  {
LABEL_43:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 300, (uint64_t)"unc_sess_iter != unchecked_object_ids_.end()", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a3)
      {
        if (v7[2] == a3)
          goto LABEL_21;
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_43;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        goto LABEL_43;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a3)
      break;
    if (v9 >= *(_QWORD *)&v3)
      v9 %= *(_QWORD *)&v3;
    if (v9 != v5)
      goto LABEL_43;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_43;
  }
  if (v7[2] != a3)
    goto LABEL_11;
LABEL_21:
  v11 = (int8x8_t)v7[4];
  if (v11)
  {
    v12 = v7 + 3;
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = a2;
      if (*(_QWORD *)&v11 <= a2)
        v14 = a2 % *(_QWORD *)&v11;
    }
    else
    {
      v14 = (*(_QWORD *)&v11 - 1) & a2;
    }
    v15 = *(_QWORD **)(*v12 + 8 * v14);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (v16)
      {
        if (v13.u32[0] < 2uLL)
        {
          v17 = *(_QWORD *)&v11 - 1;
          while (1)
          {
            v19 = v16[1];
            if (v19 == a2)
            {
              if (v16[2] == a2)
                goto LABEL_42;
            }
            else if ((v19 & v17) != v14)
            {
              return;
            }
            v16 = (_QWORD *)*v16;
            if (!v16)
              return;
          }
        }
        do
        {
          v18 = v16[1];
          if (v18 == a2)
          {
            if (v16[2] == a2)
            {
LABEL_42:
              sub_20EDB2768(v12, a2);
              return;
            }
          }
          else
          {
            if (v18 >= *(_QWORD *)&v11)
              v18 %= *(_QWORD *)&v11;
            if (v18 != v14)
              return;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
}

void sub_20EDABE64(int8x8_t *a1, char **a2)
{
  unint64_t v2;
  int8x8_t *v3;
  _QWORD *v4;
  unint64_t v5;
  int8x8_t v6;
  int8x8_t *v7;
  _QWORD *v8;
  int8x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t v17;
  uint8x8_t v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _QWORD *v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  _QWORD *v68;
  _QWORD **v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  _QWORD *v82;
  int64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  void *v93;
  std::string *p_p;
  std::string::size_type size;
  char v96;
  size_t v97;
  __int128 *p_dst;
  unint64_t v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  size_t v105;
  const char *v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  const char *v109;
  size_t v110;
  std::string::size_type *p_size;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  size_t v118;
  void *v119;
  _QWORD *v120;
  size_t v121;
  std::string::size_type v122;
  std::string *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  std::string::size_type v127;
  char v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *p_shared_owners;
  unint64_t v133;
  char *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::string::size_type v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  std::string::size_type v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::string::size_type v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  const char *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  int8x8_t v178;
  uint64_t v179;
  unint64_t *v180;
  _QWORD *v181;
  unint64_t v182;
  int8x8_t v183;
  uint8x8_t v184;
  unint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  _BYTE *v202;
  unint64_t *v203;
  int64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  _OWORD *v209;
  char *v210;
  uint64_t v211;
  __int128 v212;
  unint64_t v213;
  _QWORD *v214;
  void *v215;
  int v216;
  unint64_t v217;
  unint64_t v218;
  _QWORD *v220;
  unint64_t *i;
  std::string::size_type v222;
  __int128 v223;
  std::string *v224;
  __int128 v225;
  unint64_t v226;
  unint64_t v227;
  uint8x8_t v228;
  int **v229;
  int *v230;
  unint64_t v231;
  uint64_t v232;
  float v233;
  _QWORD *v234;
  int **v235;
  _BOOL8 v236;
  unint64_t v237;
  unint64_t v238;
  size_t prime;
  unint64_t v240;
  uint8x8_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  std::string *v245;
  std::string::size_type v246;
  std::string *v247;
  __int128 v248;
  uint64_t v249;
  __int128 *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  size_t v255;
  __int128 *v256;
  unint64_t v257;
  const void *v258;
  uint64_t v259;
  uint64_t v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  size_t v264;
  const char *v265;
  unsigned __int8 v266;
  unsigned __int8 v267;
  const char *v268;
  size_t v269;
  std::string::size_type *v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  NSObject *v276;
  size_t v277;
  void *v278;
  _QWORD *v279;
  size_t v280;
  size_t v281;
  _BYTE *v282;
  uint64_t v283;
  void *v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  _QWORD *v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  char *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::string::size_type v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  std::string::size_type v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  const char *v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  _QWORD *v337;
  void *v338;
  _QWORD *j;
  uint64_t v340;
  uint64_t v341;
  int v343;
  int8x8_t *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  std::string::size_type v348;
  int8x8_t *v349;
  uint64_t v350;
  std::string __p;
  void *v352;
  std::__shared_weak_count *v353;
  void *v354;
  unint64_t v355;
  float v356;
  std::string v357;
  int v358;
  const char *v359;
  int v360;
  const char *v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  const void *v368;
  uint64_t v369;
  const void *v370;
  unint64_t v371;
  void *v372;
  char v373;
  unint64_t v374;
  int v375;
  _BYTE v376[152];
  __int128 v377;
  unint64_t v378;
  unint64_t v379;
  std::string v380;
  char *v381;
  std::__shared_weak_count *v382;
  _BYTE v383[24];
  __int128 v384;
  unint64_t v385;
  __int128 __dst;
  int64_t v387;
  std::string v388;
  __int128 v389;
  char *v390;
  size_t v391;
  unint64_t v392;
  char v393;
  uint64_t v394;

  v3 = a1;
  v394 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)a1[24];
  if (!v4)
  {
    v6 = a1[2];
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    v5 += sub_20EDAA1F4(v3, v4[2]);
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  v6 = v3[2];
  if (!v5)
  {
LABEL_7:
    v5 = 0;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 311, (uint64_t)"num_ref", 7, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  v349 = v3;
  if (!*(_QWORD *)v3)
    goto LABEL_304;
  v7 = v3 + 12;
  if (v3[15])
  {
    v8 = (_QWORD *)v3[14];
    if (v8)
    {
      do
      {
        v13 = (_QWORD *)*v8;
        v14 = (void *)v8[3];
        if (v14)
        {
          v8[4] = v14;
          operator delete(v14);
        }
        operator delete(v8);
        v8 = v13;
      }
      while (v13);
    }
    v3[14] = 0;
    v9 = v3[13];
    if (v9)
    {
      v10 = 0;
      do
        *(_QWORD *)(*(_QWORD *)v7 + 8 * v10++) = 0;
      while (*(_QWORD *)&v9 != v10);
    }
    v3[15] = 0;
  }
  sub_20EDAA9A0((char ***)v383, *a2, a2[1]);
  if (v6)
  {
    sub_20F432CF4(*(uint64_t **)v3, (uint64_t *)v383, (uint64_t)&unk_210377EF0, v5 + v5 * *(_QWORD *)&v6, 1, (uint64_t *)&v377);
    v11 = *((_QWORD *)&v377 + 1);
    v12 = v377;
    if ((_QWORD)v377 != *((_QWORD *)&v377 + 1))
    {
      v346 = *((_QWORD *)&v377 + 1);
      do
      {
        v15 = *(unsigned int *)(v12 + 8);
        v16 = *(_QWORD *)v12;
        v364 = *(_QWORD *)v12;
        v17 = v3[28];
        if (!*(_QWORD *)&v17)
          goto LABEL_626;
        v18 = (uint8x8_t)vcnt_s8(v17);
        v18.i16[0] = vaddlv_u8(v18);
        v19 = v18.u32[0];
        if (v18.u32[0] > 1uLL)
        {
          v20 = v16;
          if (v16 >= *(_QWORD *)&v17)
            v20 = v16 % *(_QWORD *)&v17;
        }
        else
        {
          v20 = (*(_QWORD *)&v17 - 1) & v16;
        }
        v21 = v3[27];
        v22 = *(_QWORD **)(*(_QWORD *)&v21 + 8 * v20);
        if (!v22 || (v23 = (_QWORD *)*v22) == 0)
        {
LABEL_626:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 334, (uint64_t)"mul_sess_iter != multiple_obj_ids_info_.end()", 45, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v24 = *(_QWORD *)&v17 - 1;
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            v25 = v23[1];
            if (v25 == v16)
            {
              if (v23[2] == v16)
                goto LABEL_37;
            }
            else if ((v25 & v24) != v20)
            {
              goto LABEL_626;
            }
            v23 = (_QWORD *)*v23;
            if (!v23)
              goto LABEL_626;
          }
        }
        while (1)
        {
          v29 = v23[1];
          if (v29 == v16)
            break;
          if (v29 >= *(_QWORD *)&v17)
            v29 %= *(_QWORD *)&v17;
          if (v29 != v20)
            goto LABEL_626;
LABEL_41:
          v23 = (_QWORD *)*v23;
          if (!v23)
            goto LABEL_626;
        }
        if (v23[2] != v16)
          goto LABEL_41;
LABEL_37:
        v26 = (int8x8_t)v23[9];
        if (!*(_QWORD *)&v26)
          goto LABEL_59;
        v27 = (uint8x8_t)vcnt_s8(v26);
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.u32[0] > 1uLL)
        {
          v28 = v15;
          if (*(_QWORD *)&v26 <= v15)
            v28 = v15 % *(_QWORD *)&v26;
        }
        else
        {
          v28 = (v26.i32[0] - 1) & v15;
        }
        v30 = *(_QWORD **)(v23[8] + 8 * v28);
        if (!v30)
        {
LABEL_59:
          v31 = 0;
          if (v19 <= 1)
            goto LABEL_68;
          goto LABEL_60;
        }
        v31 = (_QWORD *)*v30;
        if (!*v30)
          goto LABEL_67;
        if (v27.u32[0] >= 2uLL)
        {
          while (1)
          {
            v33 = v31[1];
            if (v33 == v15)
            {
              if (v31[2] == v15)
                goto LABEL_67;
            }
            else
            {
              if (v33 >= *(_QWORD *)&v26)
                v33 %= *(_QWORD *)&v26;
              if (v33 != v28)
                goto LABEL_59;
            }
            v31 = (_QWORD *)*v31;
            if (!v31)
              goto LABEL_67;
          }
        }
        v32 = *(_QWORD *)&v26 - 1;
        while (2)
        {
          v35 = v31[1];
          if (v35 == v15)
          {
            if (v31[2] == v15)
              goto LABEL_67;
LABEL_63:
            v31 = (_QWORD *)*v31;
            if (!v31)
              goto LABEL_67;
            continue;
          }
          break;
        }
        if ((v35 & v32) == v28)
          goto LABEL_63;
        v31 = 0;
LABEL_67:
        if (v19 <= 1)
        {
LABEL_68:
          v34 = v24 & v16;
          goto LABEL_69;
        }
LABEL_60:
        v34 = v16;
        if (v16 >= *(_QWORD *)&v17)
          v34 = v16 % *(_QWORD *)&v17;
LABEL_69:
        v36 = *(_QWORD **)(*(_QWORD *)&v21 + 8 * v34);
        if (!v36 || (v37 = (_QWORD *)*v36) == 0)
LABEL_627:
          sub_20E89FD20("unordered_map::at: key not found");
        if (v19 < 2)
        {
          while (1)
          {
            v38 = v37[1];
            if (v38 == v16)
            {
              if (v37[2] == v16)
                goto LABEL_77;
            }
            else if ((v38 & v24) != v34)
            {
              goto LABEL_627;
            }
            v37 = (_QWORD *)*v37;
            if (!v37)
              goto LABEL_627;
          }
        }
        while (2)
        {
          v43 = v37[1];
          if (v43 != v16)
          {
            if (v43 >= *(_QWORD *)&v17)
              v43 %= *(_QWORD *)&v17;
            if (v43 != v34)
              goto LABEL_627;
LABEL_87:
            v37 = (_QWORD *)*v37;
            if (!v37)
              goto LABEL_627;
            continue;
          }
          break;
        }
        if (v37[2] != v16)
          goto LABEL_87;
LABEL_77:
        if (!v31
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 339, (uint64_t)"vlad_obj_id_iter != multiple_obj_ids_info_.at(sess_id).vlad_obj_id_to_obj_id.end()", 82, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v39 = v31[3];
        v40 = sub_20EDB2938((uint64_t)v7, v16, &v364);
        v41 = (_QWORD *)v40[3];
        v42 = (_QWORD *)v40[4];
        if (v41 != v42)
        {
          v3 = v349;
          while (*v41 != v39)
          {
            if (++v41 == v42)
            {
              v41 = (_QWORD *)v40[4];
              break;
            }
          }
          if (v41 != v42)
            goto LABEL_23;
        }
        v44 = sub_20EDB2938((uint64_t)v7, v16, &v364);
        v46 = (char *)v44[4];
        v45 = v44[5];
        if ((unint64_t)v46 < v45)
        {
          *(_QWORD *)v46 = v39;
          v2 = (unint64_t)(v46 + 8);
          goto LABEL_22;
        }
        v47 = (char *)v44[3];
        v48 = (v46 - v47) >> 3;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61)
          sub_20E92CED8();
        v50 = v45 - (_QWORD)v47;
        if (v50 >> 2 > v49)
          v49 = v50 >> 2;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (!v51)
        {
          v52 = 0;
          v53 = (_QWORD *)(8 * v48);
          *(_QWORD *)(8 * v48) = v39;
          v2 = 8 * v48 + 8;
          v54 = v46 - v47;
          if (v46 == v47)
            goto LABEL_111;
LABEL_105:
          v55 = v54 - 8;
          if (v55 < 0x58)
            goto LABEL_657;
          if ((unint64_t)(v47 - v52) < 0x20)
            goto LABEL_657;
          v56 = (v55 >> 3) + 1;
          v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v46[-v57];
          v53 = (_QWORD *)((char *)v53 - v57);
          v59 = &v52[8 * v48 - 16];
          v60 = v46 - 16;
          v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v62 = *(_OWORD *)v60;
            *(v59 - 1) = *((_OWORD *)v60 - 1);
            *v59 = v62;
            v59 -= 2;
            v60 -= 32;
            v61 -= 4;
          }
          while (v61);
          v46 = v58;
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_657:
            do
            {
              v63 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *--v53 = v63;
            }
            while (v46 != v47);
          }
          goto LABEL_111;
        }
        if (v51 >> 61)
          sub_20E877A38();
        v52 = operator new(8 * v51);
        v53 = &v52[8 * v48];
        *v53 = v39;
        v2 = (unint64_t)(v53 + 1);
        v54 = v46 - v47;
        if (v46 != v47)
          goto LABEL_105;
LABEL_111:
        v44[3] = v53;
        v44[4] = v2;
        v44[5] = &v52[8 * v51];
        if (v47)
          operator delete(v47);
LABEL_22:
        v11 = v346;
        v3 = v349;
        v44[4] = v2;
LABEL_23:
        v12 += 32;
      }
      while (v12 != v11);
    }
    sub_20EDAA398(&v379);
    if (**(int **)(v379 + 56) > 2
      || ((v64 = *(unsigned __int8 *)(v379 + 72),
           v65 = sub_20E8C31DC(v379, "OSLogSurrogateAppender", 1, 0),
           v66 = v65,
           !v64)
        ? (v67 = v65 == 0)
        : (v67 = 0),
          v67))
    {
LABEL_299:
      v93 = (void *)v377;
      if ((_QWORD)v377)
      {
        *((_QWORD *)&v377 + 1) = v377;
LABEL_301:
        operator delete(v93);
      }
      goto LABEL_302;
    }
    sub_20E863438((uint64_t)&v364);
    v68 = sub_20E86A980(&v366, (uint64_t)"VLAD: ", 6);
    v358 = 0;
    if (v3[14])
    {
      sub_20E89FDB0(&v357, "{");
      v69 = (_QWORD **)v3[14];
      sub_20EDB2C30((uint64_t)&v357, (uint64_t)(v69 + 2));
      v70 = *v69;
      if (v70)
      {
        while (1)
        {
          v388.__r_.__value_.__r.__words[0] = (std::string::size_type)&v357;
          v388.__r_.__value_.__l.__size_ = (std::string::size_type)",";
          v388.__r_.__value_.__r.__words[2] = (std::string::size_type)&v357;
          *(_QWORD *)&v389 = ",";
          *((_QWORD *)&v389 + 1) = ",";
          if (v358 == -1)
            break;
          v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v388;
          ((void (*)(std::string *, std::string *))off_24C9E95F8[v358])(&v380, &v357);
          sub_20EDB2C30((uint64_t)&v357, (uint64_t)(v70 + 2));
          v70 = (_QWORD *)*v70;
          if (!v70)
            goto LABEL_122;
        }
LABEL_633:
        sub_20E877AB8();
      }
LABEL_122:
      v388.__r_.__value_.__r.__words[0] = (std::string::size_type)&v357;
      v388.__r_.__value_.__l.__size_ = (std::string::size_type)"}";
      v388.__r_.__value_.__r.__words[2] = (std::string::size_type)&v357;
      *(_QWORD *)&v389 = "}";
      *((_QWORD *)&v389 + 1) = "}";
      if (v358 == -1)
        goto LABEL_633;
      v380.__r_.__value_.__r.__words[0] = (std::string::size_type)&v388;
      ((void (*)(std::string *, std::string *))off_24C9E95F8[v358])(&v380, &v357);
    }
    else
    {
      sub_20EA5D220(&v357, "{}");
    }
    if (v358 == -1)
      sub_20E877AB8();
    v388.__r_.__value_.__r.__words[0] = (std::string::size_type)&v380;
    ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24C9E95C8[v358])(&__p, &v388, &v357);
    if (v358 != -1)
      ((void (*)(std::string *, std::string *))off_24C9E95B0[v358])(&v388, &v357);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_20E86A980(v68, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v96 = v375;
      if ((v375 & 0x10) == 0)
      {
LABEL_163:
        if ((v96 & 8) == 0)
        {
          v97 = 0;
          HIBYTE(v387) = 0;
          p_dst = &__dst;
          goto LABEL_176;
        }
        v100 = v368;
        v97 = v369 - (_QWORD)v368;
        if ((unint64_t)(v369 - (_QWORD)v368) > 0x7FFFFFFFFFFFFFF7)
LABEL_221:
          sub_20E860B7C();
LABEL_169:
        if (v97 >= 0x17)
        {
          v101 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v97 | 7) != 0x17)
            v101 = v97 | 7;
          v102 = v101 + 1;
          p_dst = (__int128 *)operator new(v101 + 1);
          *((_QWORD *)&__dst + 1) = v97;
          v387 = v102 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v387) = v97;
          p_dst = &__dst;
          if (!v97)
          {
LABEL_176:
            *((_BYTE *)p_dst + v97) = 0;
            v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&v379;
            v357.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v357.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v358 = 2;
            v359 = "unknown file";
            v360 = 349;
            v362 = 0;
            v363 = 0;
            v361 = "unknown function";
            if (v387 >= 0)
              v103 = (const char *)&__dst;
            else
              v103 = (const char *)__dst;
            v104 = *(_QWORD *)v357.__r_.__value_.__l.__data_;
            if (*(char *)(*(_QWORD *)v357.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v106 = *(const char **)(v104 + 16);
              v105 = *(_QWORD *)(v104 + 24);
              v347 = *(_QWORD *)v357.__r_.__value_.__l.__data_ + 16;
              v108 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v108 & 1) != 0)
                goto LABEL_183;
            }
            else
            {
              v105 = *(unsigned __int8 *)(*(_QWORD *)v357.__r_.__value_.__l.__data_ + 39);
              v106 = (const char *)(*(_QWORD *)v357.__r_.__value_.__l.__data_ + 16);
              v347 = (uint64_t)v106;
              v107 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v107 & 1) != 0)
                goto LABEL_183;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v388);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v388);
              if ((_BYTE)v389 && SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v388.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_183:
            if (byte_254A4A4F8[23] >= 0)
              v109 = byte_254A4A4F8;
            else
              v109 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v110 = byte_254A4A4F8[23];
            else
              v110 = *(_QWORD *)&byte_254A4A4F8[8];
            v388.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v109, v106);
            p_size = &v388.__r_.__value_.__l.__size_;
            if (v110 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v110 >= 0x17)
            {
              v112 = v64;
              v113 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v110 | 7) != 0x17)
                v113 = v110 | 7;
              v114 = v113 + 1;
              p_size = (std::string::size_type *)operator new(v113 + 1);
              v388.__r_.__value_.__r.__words[2] = v110;
              *(_QWORD *)&v389 = v114 | 0x8000000000000000;
              v388.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
              v64 = v112;
            }
            else
            {
              BYTE7(v389) = v110;
              if (!v110)
              {
LABEL_197:
                *((_BYTE *)p_size + v110) = 0;
                BYTE8(v389) = 1;
                v2 = (unint64_t)&v390;
                if (v105 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v3 = v349;
                if (v105 >= 0x17)
                {
                  v115 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v105 | 7) != 0x17)
                    v115 = v105 | 7;
                  v116 = v115 + 1;
                  v2 = (unint64_t)operator new(v115 + 1);
                  v391 = v105;
                  v392 = v116 | 0x8000000000000000;
                  v390 = (char *)v2;
                }
                else
                {
                  HIBYTE(v392) = v105;
                  if (!v105)
                  {
LABEL_205:
                    *(_BYTE *)(v2 + v105) = 0;
                    v393 = 1;
                    v117 = v388.__r_.__value_.__r.__words[0];
                    if (SHIBYTE(v392) < 0)
                      operator delete(v390);
                    if (BYTE8(v389) && SBYTE7(v389) < 0)
                      operator delete((void *)v388.__r_.__value_.__l.__size_);
                    if (v388.__r_.__value_.__r.__words[0])
                      os_release(v388.__r_.__value_.__l.__data_);
                    if (!v66 || !*(_QWORD *)(v66 + 24))
                    {
                      os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG);
                      LODWORD(v388.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)v388.__r_.__value_.__r.__words + 4) = (std::string::size_type)v103;
                      v124 = (void *)_os_log_send_and_compose_impl();
                      if (v124)
                        free(v124);
                      goto LABEL_285;
                    }
                    v118 = _os_log_pack_size();
                    v119 = operator new(v118, (std::align_val_t)8uLL);
                    v120 = (_QWORD *)operator new();
                    *v120 = &off_24C9ABB80;
                    v120[1] = 0;
                    v120[2] = 0;
                    v120[3] = v119;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
                    v352 = 0;
                    v353 = 0;
                    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v120;
                    v121 = strlen(v103);
                    if (v121 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v122 = v121;
                    if (v121 >= 0x17)
                    {
                      v125 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v121 | 7) != 0x17)
                        v125 = v121 | 7;
                      v126 = v125 + 1;
                      v123 = (std::string *)operator new(v125 + 1);
                      v380.__r_.__value_.__r.__words[2] = v126 | 0x8000000000000000;
                      v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
                      v380.__r_.__value_.__l.__size_ = v122;
                    }
                    else
                    {
                      *((_BYTE *)&v380.__r_.__value_.__s + 23) = v121;
                      v123 = &v380;
                      if (!v121)
                      {
LABEL_226:
                        v123->__r_.__value_.__s.__data_[v122] = 0;
                        *(_QWORD *)&v384 = v380.__r_.__value_.__l.__size_;
                        v127 = v380.__r_.__value_.__r.__words[0];
                        v2 = (unint64_t)&v377;
                        *(_QWORD *)((char *)&v384 + 7) = *(std::string::size_type *)((char *)&v380.__r_.__value_.__r.__words[1]
                                                                                   + 7);
                        v128 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
                        v129 = (std::__shared_weak_count *)operator new(0x38uLL);
                        v129->__shared_owners_ = 0;
                        v129->__shared_weak_owners_ = 0;
                        v129[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9ABC20;
                        v129->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
                        v130 = v384;
                        v129[1].__shared_owners_ = v127;
                        v129[1].__shared_weak_owners_ = v130;
                        *(uint64_t *)((char *)&v129[1].__shared_weak_owners_ + 7) = *(_QWORD *)((char *)&v384 + 7);
                        HIBYTE(v129[2].__vftable) = v128;
                        *(_QWORD *)&v384 = 0;
                        *(_QWORD *)((char *)&v384 + 7) = 0;
                        v131 = v353;
                        v352 = &v129[1];
                        v353 = v129;
                        if (v131)
                        {
                          p_shared_owners = (unint64_t *)&v131->__shared_owners_;
                          do
                            v133 = __ldaxr(p_shared_owners);
                          while (__stlxr(v133 - 1, p_shared_owners));
                          if (!v133)
                          {
                            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                            std::__shared_weak_count::__release_weak(v131);
                          }
                        }
                        v388 = __p;
                        v134 = (char *)v352;
                        if (__p.__r_.__value_.__r.__words[2])
                        {
                          v135 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                          do
                            v136 = __ldxr(v135);
                          while (__stxr(v136 + 1, v135));
                        }
                        v137 = v353;
                        *(_QWORD *)&v389 = v134;
                        *((_QWORD *)&v389 + 1) = v353;
                        if (v353)
                        {
                          v138 = (unint64_t *)&v353->__shared_owners_;
                          do
                            v139 = __ldxr(v138);
                          while (__stxr(v139 + 1, v138));
                          v390 = v134;
                          do
                            v140 = __ldaxr(v138);
                          while (__stlxr(v140 - 1, v138));
                          if (!v140)
                          {
                            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                            std::__shared_weak_count::__release_weak(v137);
                          }
                        }
                        else
                        {
                          v390 = v134;
                        }
                        v141 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                        if (__p.__r_.__value_.__r.__words[2])
                        {
                          v142 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                          do
                            v143 = __ldaxr(v142);
                          while (__stlxr(v143 - 1, v142));
                          if (!v143)
                          {
                            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                            std::__shared_weak_count::__release_weak(v141);
                          }
                        }
                        v144 = v388.__r_.__value_.__r.__words[0];
                        if (v390[31] >= 0)
                          v145 = v390 + 8;
                        else
                          v145 = (char *)*((_QWORD *)v390 + 1);
                        v146 = _os_log_pack_fill();
                        *(_DWORD *)v146 = 136315138;
                        *(_QWORD *)(v146 + 4) = v145;
                        v147 = operator new();
                        v148 = *(unsigned __int8 *)(v104 + 39);
                        v149 = v347;
                        if ((v148 & 0x80u) != 0)
                        {
                          v149 = *(_QWORD *)(v104 + 16);
                          v148 = *(_QWORD *)(v104 + 24);
                        }
                        *(_QWORD *)v147 = v144;
                        *(_OWORD *)(v147 + 8) = *(_OWORD *)&v388.__r_.__value_.__r.__words[1];
                        *(_OWORD *)&v388.__r_.__value_.__r.__words[1] = 0uLL;
                        *(_OWORD *)(v147 + 24) = v389;
                        v389 = 0uLL;
                        *(_QWORD *)(v147 + 40) = v149;
                        *(_QWORD *)(v147 + 48) = v148;
                        *(_BYTE *)(v147 + 56) = 2;
                        v380.__r_.__value_.__r.__words[0] = 0;
                        __p.__r_.__value_.__r.__words[0] = v147;
                        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v66 + 24) + 40))(*(_QWORD *)(v66 + 24), &__p);
                        v150 = __p.__r_.__value_.__r.__words[0];
                        __p.__r_.__value_.__r.__words[0] = 0;
                        if (v150)
                        {
                          v151 = *(std::__shared_weak_count **)(v150 + 32);
                          if (v151)
                          {
                            v152 = (unint64_t *)&v151->__shared_owners_;
                            do
                              v153 = __ldaxr(v152);
                            while (__stlxr(v153 - 1, v152));
                            if (!v153)
                            {
                              ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                              std::__shared_weak_count::__release_weak(v151);
                            }
                          }
                          v154 = *(std::__shared_weak_count **)(v150 + 16);
                          if (v154)
                          {
                            v155 = (unint64_t *)&v154->__shared_owners_;
                            do
                              v156 = __ldaxr(v155);
                            while (__stlxr(v156 - 1, v155));
                            if (!v156)
                            {
                              ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                              std::__shared_weak_count::__release_weak(v154);
                            }
                          }
                          MEMORY[0x212BC6398](v150, 0x10F0C40B62ED6C6);
                          v157 = v380.__r_.__value_.__r.__words[0];
                          v380.__r_.__value_.__r.__words[0] = 0;
                          if (v157)
                          {
                            v158 = *(std::__shared_weak_count **)(v157 + 32);
                            if (v158)
                            {
                              v159 = (unint64_t *)&v158->__shared_owners_;
                              do
                                v160 = __ldaxr(v159);
                              while (__stlxr(v160 - 1, v159));
                              if (!v160)
                              {
                                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                                std::__shared_weak_count::__release_weak(v158);
                              }
                            }
                            v161 = *(std::__shared_weak_count **)(v157 + 16);
                            if (v161)
                            {
                              v162 = (unint64_t *)&v161->__shared_owners_;
                              do
                                v163 = __ldaxr(v162);
                              while (__stlxr(v163 - 1, v162));
                              if (!v163)
                              {
                                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                                std::__shared_weak_count::__release_weak(v161);
                              }
                            }
                            MEMORY[0x212BC6398](v157, 0x10F0C40B62ED6C6);
                          }
                        }
                        v164 = (std::__shared_weak_count *)*((_QWORD *)&v389 + 1);
                        if (*((_QWORD *)&v389 + 1))
                        {
                          v165 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
                          do
                            v166 = __ldaxr(v165);
                          while (__stlxr(v166 - 1, v165));
                          if (!v166)
                          {
                            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                            std::__shared_weak_count::__release_weak(v164);
                          }
                        }
                        v167 = (std::__shared_weak_count *)v388.__r_.__value_.__r.__words[2];
                        if (v388.__r_.__value_.__r.__words[2])
                        {
                          v168 = (unint64_t *)(v388.__r_.__value_.__r.__words[2] + 8);
                          do
                            v169 = __ldaxr(v168);
                          while (__stlxr(v169 - 1, v168));
                          if (!v169)
                          {
                            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                            std::__shared_weak_count::__release_weak(v167);
                          }
                        }
LABEL_285:
                        if (v64)
                        {
                          v170 = (const char *)&__dst;
                          if (v387 < 0)
                            v170 = (const char *)__dst;
                          sub_20E8C003C((uint64_t)&v357, "%s", v170);
                          sub_20E863570((uint64_t)&v357);
                        }
                        sub_20E863570((uint64_t)&v357);
                        v171 = v363;
                        if (v363)
                        {
                          v172 = (unint64_t *)&v363->__shared_owners_;
                          do
                            v173 = __ldaxr(v172);
                          while (__stlxr(v173 - 1, v172));
                          if (!v173)
                          {
                            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                            std::__shared_weak_count::__release_weak(v171);
                          }
                        }
                        if (SHIBYTE(v387) < 0)
                          operator delete((void *)__dst);
                        v364 = *MEMORY[0x24BEDB7F0];
                        v174 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(uint64_t *)((char *)&v364 + *(_QWORD *)(v364 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        v366 = v174;
                        v367 = MEMORY[0x24BEDB848] + 16;
                        if (v373 < 0)
                          operator delete(v372);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](v376);
                        goto LABEL_299;
                      }
                    }
                    memcpy(v123, v103, v122);
                    goto LABEL_226;
                  }
                }
                memmove((void *)v2, v106, v105);
                goto LABEL_205;
              }
            }
            memmove(p_size, v109, v110);
            goto LABEL_197;
          }
        }
        memmove(p_dst, v100, v97);
        goto LABEL_176;
      }
    }
    else
    {
      v96 = v375;
      if ((v375 & 0x10) == 0)
        goto LABEL_163;
    }
    v99 = v374;
    if (v374 < v371)
    {
      v374 = v371;
      v99 = v371;
    }
    v100 = v370;
    v97 = v99 - (_QWORD)v370;
    if (v99 - (unint64_t)v370 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_221;
    goto LABEL_169;
  }
  sub_20F432CF4(*(uint64_t **)v3, (uint64_t *)v383, (uint64_t)&unk_210377EF0, v5, 1, &v364);
  v72 = v364;
  v71 = v365;
  if (v364 == v365)
  {
    if (v364)
      goto LABEL_150;
    goto LABEL_302;
  }
  do
  {
    v73 = sub_20EDB2938((uint64_t)v7, *(_QWORD *)v72, (_QWORD *)v72);
    v75 = (char *)v73[4];
    v74 = v73[5];
    if ((unint64_t)v75 < v74)
    {
      *(_QWORD *)v75 = *(unsigned int *)(v72 + 8);
      v2 = (unint64_t)(v75 + 8);
      goto LABEL_128;
    }
    v76 = (char *)v73[3];
    v77 = (v75 - v76) >> 3;
    v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 61)
      sub_20E92CED8();
    v79 = v74 - (_QWORD)v76;
    if (v79 >> 2 > v78)
      v78 = v79 >> 2;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
      v80 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    if (v80)
    {
      if (v80 >> 61)
        sub_20E877A38();
      v81 = operator new(8 * v80);
      v82 = &v81[8 * v77];
      *v82 = *(unsigned int *)(v72 + 8);
      v2 = (unint64_t)(v82 + 1);
      v83 = v75 - v76;
      if (v75 == v76)
        goto LABEL_147;
LABEL_141:
      v84 = v83 - 8;
      if (v84 < 0x58)
        goto LABEL_658;
      if ((unint64_t)(v76 - v81) < 0x20)
        goto LABEL_658;
      v85 = (v84 >> 3) + 1;
      v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
      v87 = &v75[-v86];
      v82 = (_QWORD *)((char *)v82 - v86);
      v88 = &v81[8 * v77 - 16];
      v89 = v75 - 16;
      v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v91 = *(_OWORD *)v89;
        *(v88 - 1) = *((_OWORD *)v89 - 1);
        *v88 = v91;
        v88 -= 2;
        v89 -= 32;
        v90 -= 4;
      }
      while (v90);
      v75 = v87;
      if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_658:
        do
        {
          v92 = *((_QWORD *)v75 - 1);
          v75 -= 8;
          *--v82 = v92;
        }
        while (v75 != v76);
      }
      goto LABEL_147;
    }
    v81 = 0;
    v82 = (_QWORD *)(8 * v77);
    *(_QWORD *)(8 * v77) = *(unsigned int *)(v72 + 8);
    v2 = 8 * v77 + 8;
    v83 = v75 - v76;
    if (v75 != v76)
      goto LABEL_141;
LABEL_147:
    v73[3] = v82;
    v73[4] = v2;
    v73[5] = &v81[8 * v80];
    if (v76)
      operator delete(v76);
LABEL_128:
    v3 = v349;
    v73[4] = v2;
    v72 += 32;
  }
  while (v72 != v71);
  v72 = v364;
  if (v364)
  {
LABEL_150:
    v365 = v72;
    v93 = (void *)v72;
    goto LABEL_301;
  }
LABEL_302:
  if (*(_QWORD *)v383)
  {
    *(_QWORD *)&v383[8] = *(_QWORD *)v383;
    operator delete(*(void **)v383);
  }
LABEL_304:
  v175 = (_QWORD *)v3[1];
  if (!v175)
    goto LABEL_619;
  v176 = (uint64_t)&v3[12];
  v344 = v3 + 12;
  if (v3[15])
  {
    v177 = (_QWORD *)v3[14];
    if (v177)
    {
      do
      {
        v214 = (_QWORD *)*v177;
        v215 = (void *)v177[3];
        if (v215)
        {
          v177[4] = v215;
          operator delete(v215);
        }
        operator delete(v177);
        v177 = v214;
      }
      while (v214);
    }
    v3[14] = 0;
    v178 = v3[13];
    v176 = (uint64_t)&v3[12];
    if (v178)
    {
      v179 = 0;
      do
        *(_QWORD *)(*(_QWORD *)v344 + 8 * v179++) = 0;
      while (*(_QWORD *)&v178 != v179);
    }
    v3[15] = 0;
    v175 = (_QWORD *)v3[1];
  }
  sub_20EDA4AB8(v175, (uint32x4_t **)a2, (unint64_t)&__p);
  v348 = __p.__r_.__value_.__l.__size_;
  v180 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
    goto LABEL_369;
  v181 = (_QWORD *)v349[24];
  if (!v181)
    goto LABEL_369;
  v182 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
LABEL_319:
  while (2)
  {
    v183 = (int8x8_t)v181[4];
    if (!*(_QWORD *)&v183)
      goto LABEL_318;
    v184 = (uint8x8_t)vcnt_s8(v183);
    v184.i16[0] = vaddlv_u8(v184);
    if (v184.u32[0] > 1uLL)
    {
      v185 = v182;
      if (v182 >= *(_QWORD *)&v183)
        v185 = v182 % *(_QWORD *)&v183;
    }
    else
    {
      v185 = (*(_QWORD *)&v183 - 1) & v182;
    }
    v186 = *(_QWORD **)(v181[3] + 8 * v185);
    if (!v186)
      goto LABEL_318;
    v187 = (_QWORD *)*v186;
    if (!v187)
      goto LABEL_318;
    if (v184.u32[0] < 2uLL)
    {
      v188 = *(_QWORD *)&v183 - 1;
      while (1)
      {
        v190 = v187[1];
        if (v182 == v190)
        {
          if (v187[2] == v182)
            goto LABEL_340;
        }
        else if ((v190 & v188) != v185)
        {
          goto LABEL_318;
        }
        v187 = (_QWORD *)*v187;
        if (!v187)
          goto LABEL_318;
      }
    }
    while (2)
    {
      v189 = v187[1];
      if (v182 != v189)
      {
        if (v189 >= *(_QWORD *)&v183)
          v189 %= *(_QWORD *)&v183;
        if (v189 != v185)
          goto LABEL_318;
        goto LABEL_329;
      }
      if (v187[2] != v182)
      {
LABEL_329:
        v187 = (_QWORD *)*v187;
        if (!v187)
          goto LABEL_318;
        continue;
      }
      break;
    }
LABEL_340:
    v191 = sub_20EDB2938(v176, v181[2], v181 + 2);
    v192 = (_QWORD *)v191[3];
    v193 = (_QWORD *)v191[4];
    if (v192 != v193)
    {
      while (*v192 != v182)
      {
        if (++v192 == v193)
        {
          v192 = (_QWORD *)v191[4];
          break;
        }
      }
    }
    if (v192 == v193)
    {
      v194 = sub_20EDB2938(v176, v181[2], v181 + 2);
      v196 = (char *)v194[4];
      v195 = v194[5];
      if ((unint64_t)v196 < v195)
      {
        *(_QWORD *)v196 = v182;
        v197 = (uint64_t)(v196 + 8);
LABEL_365:
        v194[4] = v197;
        v176 = (uint64_t)v344;
        goto LABEL_318;
      }
      v198 = (char *)v194[3];
      v199 = (v196 - v198) >> 3;
      v200 = v199 + 1;
      if ((unint64_t)(v199 + 1) >> 61)
        sub_20E92CED8();
      v201 = v195 - (_QWORD)v198;
      if (v201 >> 2 > v200)
        v200 = v201 >> 2;
      if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8)
        v2 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v2 = v200;
      if (v2)
      {
        if (v2 >> 61)
          sub_20E877A38();
        v202 = operator new(8 * v2);
        v203 = (unint64_t *)&v202[8 * v199];
        *v203 = v182;
        v197 = (uint64_t)(v203 + 1);
        v204 = v196 - v198;
        if (v196 == v198)
          goto LABEL_363;
      }
      else
      {
        v202 = 0;
        v203 = (unint64_t *)(8 * v199);
        *(_QWORD *)(8 * v199) = v182;
        v197 = 8 * v199 + 8;
        v204 = v196 - v198;
        if (v196 == v198)
        {
LABEL_363:
          v194[3] = v203;
          v194[4] = v197;
          v194[5] = &v202[8 * v2];
          if (v198)
            operator delete(v198);
          goto LABEL_365;
        }
      }
      v205 = v204 - 8;
      if (v205 < 0x58)
        goto LABEL_659;
      if ((unint64_t)(v198 - v202) < 0x20)
        goto LABEL_659;
      v206 = (v205 >> 3) + 1;
      v207 = 8 * (v206 & 0x3FFFFFFFFFFFFFFCLL);
      v208 = &v196[-v207];
      v203 = (unint64_t *)((char *)v203 - v207);
      v209 = &v202[8 * v199 - 16];
      v210 = v196 - 16;
      v211 = v206 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v212 = *(_OWORD *)v210;
        *(v209 - 1) = *((_OWORD *)v210 - 1);
        *v209 = v212;
        v209 -= 2;
        v210 -= 32;
        v211 -= 4;
      }
      while (v211);
      v196 = v208;
      if (v206 != (v206 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_659:
        do
        {
          v213 = *((_QWORD *)v196 - 1);
          v196 -= 8;
          *--v203 = v213;
        }
        while (v196 != v198);
      }
      goto LABEL_363;
    }
LABEL_318:
    v181 = (_QWORD *)*v181;
    if (v181)
      continue;
    break;
  }
  while (++v180 != (unint64_t *)v348)
  {
    v181 = (_QWORD *)v349[24];
    v182 = *v180;
    if (v181)
      goto LABEL_319;
  }
LABEL_369:
  sub_20EDAA398(&v350);
  v3 = v349;
  if (**(int **)(v350 + 56) > 2)
    goto LABEL_613;
  v216 = *(unsigned __int8 *)(v350 + 72);
  v217 = sub_20E8C31DC(v350, "OSLogSurrogateAppender", 1, 0);
  v218 = v217;
  if (!v216 && v217 == 0)
    goto LABEL_613;
  sub_20E863438((uint64_t)&v364);
  v220 = sub_20E86A980(&v366, (uint64_t)"BFFM: ", 6);
  v345 = v218;
  v343 = v216;
  v378 = 0;
  v377 = 0uLL;
  sub_20E9099B8((uint64_t)&v377, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
  v222 = __p.__r_.__value_.__l.__size_;
  for (i = (unint64_t *)__p.__r_.__value_.__r.__words[0]; i != (unint64_t *)v222; ++i)
  {
    v379 = *i;
    sub_20E9F6CBC(&v379);
    v224 = std::string::append(&v357, ":", 1uLL);
    v225 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
    v388.__r_.__value_.__r.__words[2] = v224->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v388.__r_.__value_.__l.__data_ = v225;
    v224->__r_.__value_.__l.__size_ = 0;
    v224->__r_.__value_.__r.__words[2] = 0;
    v224->__r_.__value_.__r.__words[0] = 0;
    v226 = v379;
    v227 = (unint64_t)v353;
    if (v353)
    {
      v228 = (uint8x8_t)vcnt_s8((int8x8_t)v353);
      v228.i16[0] = vaddlv_u8(v228);
      if (v228.u32[0] > 1uLL)
      {
        v2 = v379;
        if ((unint64_t)v353 <= v379)
          v2 = v379 % (unint64_t)v353;
      }
      else
      {
        v2 = ((unint64_t)&v353[-1].__shared_weak_owners_ + 7) & v379;
      }
      v229 = (int **)*((_QWORD *)v352 + v2);
      if (v229)
      {
        v230 = *v229;
        if (*v229)
        {
          if (v228.u32[0] < 2uLL)
          {
            while (1)
            {
              v232 = *((_QWORD *)v230 + 1);
              if (v232 == v379)
              {
                if (*((_QWORD *)v230 + 2) == v379)
                  goto LABEL_439;
              }
              else if ((v232 & ((unint64_t)&v353[-1].__shared_weak_owners_ + 7)) != v2)
              {
                goto LABEL_398;
              }
              v230 = *(int **)v230;
              if (!v230)
                goto LABEL_398;
            }
          }
          do
          {
            v231 = *((_QWORD *)v230 + 1);
            if (v231 == v379)
            {
              if (*((_QWORD *)v230 + 2) == v379)
                goto LABEL_439;
            }
            else
            {
              if (v231 >= (unint64_t)v353)
                v231 %= (unint64_t)v353;
              if (v231 != v2)
                break;
            }
            v230 = *(int **)v230;
          }
          while (v230);
        }
      }
    }
LABEL_398:
    v230 = (int *)operator new(0x20uLL);
    *(_QWORD *)v230 = 0;
    *((_QWORD *)v230 + 1) = v226;
    *((_QWORD *)v230 + 2) = v226;
    v230[6] = 0;
    v233 = (float)(v355 + 1);
    if (v227 && (float)(v356 * (float)v227) >= v233)
    {
      v234 = v352;
      v235 = (int **)*((_QWORD *)v352 + v2);
      if (v235)
        goto LABEL_401;
    }
    else
    {
      v236 = v227 < 3 || (v227 & (v227 - 1)) != 0;
      v237 = v236 | (2 * v227);
      v238 = vcvtps_u32_f32(v233 / v356);
      if (v237 <= v238)
        prime = v238;
      else
        prime = v237;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v227 = (unint64_t)v353;
      }
      if (prime > v227)
        goto LABEL_413;
      if (prime < v227)
      {
        v240 = vcvtps_u32_f32((float)v355 / v356);
        if (v227 < 3 || (v241 = (uint8x8_t)vcnt_s8((int8x8_t)v227), v241.i16[0] = vaddlv_u8(v241), v241.u32[0] > 1uLL))
        {
          v240 = std::__next_prime(v240);
        }
        else
        {
          v242 = 1 << -(char)__clz(v240 - 1);
          if (v240 >= 2)
            v240 = v242;
        }
        if (prime <= v240)
          prime = v240;
        if (prime < v227)
LABEL_413:
          sub_20E8D2B3C((uint64_t)&v352, prime);
      }
      v227 = (unint64_t)v353;
      v243 = (uint64_t)&v353[-1].__shared_weak_owners_ + 7;
      if (((unint64_t)v353 & ((unint64_t)&v353[-1].__shared_weak_owners_ + 7)) != 0)
      {
        if ((unint64_t)v353 <= v226)
        {
          v2 = v226 % (unint64_t)v353;
          v234 = v352;
          v235 = (int **)*((_QWORD *)v352 + v226 % (unint64_t)v353);
          if (v235)
          {
LABEL_401:
            *(_QWORD *)v230 = *v235;
LABEL_437:
            *v235 = v230;
            goto LABEL_438;
          }
        }
        else
        {
          v2 = v226;
          v234 = v352;
          v235 = (int **)*((_QWORD *)v352 + v226);
          if (v235)
            goto LABEL_401;
        }
      }
      else
      {
        v2 = v243 & v226;
        v234 = v352;
        v235 = (int **)*((_QWORD *)v352 + (v243 & v226));
        if (v235)
          goto LABEL_401;
      }
    }
    *(_QWORD *)v230 = v354;
    v354 = v230;
    v234[v2] = &v354;
    if (*(_QWORD *)v230)
    {
      v244 = *(_QWORD *)(*(_QWORD *)v230 + 8);
      if ((v227 & (v227 - 1)) != 0)
      {
        if (v244 >= v227)
          v244 %= v227;
      }
      else
      {
        v244 &= v227 - 1;
      }
      v235 = (int **)((char *)v352 + 8 * v244);
      goto LABEL_437;
    }
LABEL_438:
    ++v355;
LABEL_439:
    sub_20E8A9280(v230 + 6);
    if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v245 = &v380;
    else
      v245 = (std::string *)v380.__r_.__value_.__r.__words[0];
    if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v246 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
    else
      v246 = v380.__r_.__value_.__l.__size_;
    v247 = std::string::append(&v388, (const std::string::value_type *)v245, v246);
    v248 = *(_OWORD *)&v247->__r_.__value_.__l.__data_;
    *(_QWORD *)&v383[16] = *((_QWORD *)&v247->__r_.__value_.__l + 2);
    *(_OWORD *)v383 = v248;
    v247->__r_.__value_.__l.__size_ = 0;
    v247->__r_.__value_.__r.__words[2] = 0;
    v247->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v380.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_447:
        if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_448;
        goto LABEL_452;
      }
    }
    else if ((SHIBYTE(v388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_447;
    }
    operator delete(v388.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_448:
      v249 = *((_QWORD *)&v377 + 1);
      if (*((_QWORD *)&v377 + 1) >= v378)
        goto LABEL_453;
      goto LABEL_376;
    }
LABEL_452:
    operator delete(v357.__r_.__value_.__l.__data_);
    v249 = *((_QWORD *)&v377 + 1);
    if (*((_QWORD *)&v377 + 1) >= v378)
    {
LABEL_453:
      *((_QWORD *)&v377 + 1) = sub_20E8780F0((void **)&v377, (uint64_t)v383);
      if ((v383[23] & 0x80000000) != 0)
        operator delete(*(void **)v383);
      continue;
    }
LABEL_376:
    v223 = *(_OWORD *)v383;
    *(_QWORD *)(v249 + 16) = *(_QWORD *)&v383[16];
    *(_OWORD *)v249 = v223;
    *((_QWORD *)&v377 + 1) = v249 + 24;
  }
  v384 = v377;
  v385 = v378;
  LODWORD(v389) = 0;
  sub_20EB98F28((uint64_t)&v357, (uint64_t)&v388, (const char **)&v384);
  if ((_DWORD)v389 == -1)
    sub_20E877AB8();
  v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&v380;
  ((void (*)(__int128 *__return_ptr, std::string *, std::string *))off_24C9E95C8[v389])(&__dst, &v357, &v388);
  if ((_DWORD)v389 != -1)
    ((void (*)(std::string *, std::string *))off_24C9E95B0[v389])(&v357, &v388);
  if (v387 >= 0)
    v250 = &__dst;
  else
    v250 = (__int128 *)__dst;
  if (v387 >= 0)
    v251 = HIBYTE(v387);
  else
    v251 = *((_QWORD *)&__dst + 1);
  sub_20E86A980(v220, (uint64_t)v250, v251);
  if (SHIBYTE(v387) < 0)
    operator delete((void *)__dst);
  v252 = v384;
  if ((_QWORD)v384)
  {
    v253 = *((_QWORD *)&v384 + 1);
    v254 = (void *)v384;
    if (*((_QWORD *)&v384 + 1) != (_QWORD)v384)
    {
      do
      {
        if (*(char *)(v253 - 1) < 0)
          operator delete(*(void **)(v253 - 24));
        v253 -= 24;
      }
      while (v253 != v252);
      v254 = (void *)v384;
    }
    *((_QWORD *)&v384 + 1) = v252;
    operator delete(v254);
  }
  if ((v375 & 0x10) != 0)
  {
    v257 = v374;
    if (v374 < v371)
    {
      v374 = v371;
      v257 = v371;
    }
    v258 = v370;
    v255 = v257 - (_QWORD)v370;
    if (v257 - (unint64_t)v370 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_532;
  }
  else
  {
    if ((v375 & 8) == 0)
    {
      v255 = 0;
      HIBYTE(v378) = 0;
      v256 = &v377;
      goto LABEL_487;
    }
    v258 = v368;
    v255 = v369 - (_QWORD)v368;
    if ((unint64_t)(v369 - (_QWORD)v368) > 0x7FFFFFFFFFFFFFF7)
LABEL_532:
      sub_20E860B7C();
  }
  if (v255 >= 0x17)
  {
    v259 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v255 | 7) != 0x17)
      v259 = v255 | 7;
    v260 = v259 + 1;
    v256 = (__int128 *)operator new(v259 + 1);
    *((_QWORD *)&v377 + 1) = v255;
    v378 = v260 | 0x8000000000000000;
    *(_QWORD *)&v377 = v256;
    goto LABEL_486;
  }
  HIBYTE(v378) = v255;
  v256 = &v377;
  if (v255)
LABEL_486:
    memmove(v256, v258, v255);
LABEL_487:
  *((_BYTE *)v256 + v255) = 0;
  v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&v350;
  v357.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v357.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v358 = 2;
  v359 = "unknown file";
  v360 = 373;
  v362 = 0;
  v363 = 0;
  v361 = "unknown function";
  if ((v378 & 0x8000000000000000) == 0)
    v261 = (const char *)&v377;
  else
    v261 = (const char *)v377;
  v262 = *(_QWORD *)v357.__r_.__value_.__l.__data_;
  v263 = *(_QWORD *)v357.__r_.__value_.__l.__data_ + 16;
  if (*(char *)(*(_QWORD *)v357.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v265 = *(const char **)(v262 + 16);
    v264 = *(_QWORD *)(v262 + 24);
    v267 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v267 & 1) == 0)
    {
LABEL_638:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v388);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v388);
        if ((_BYTE)v389 && SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v388.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v264 = *(unsigned __int8 *)(*(_QWORD *)v357.__r_.__value_.__l.__data_ + 39);
    v265 = (const char *)(*(_QWORD *)v357.__r_.__value_.__l.__data_ + 16);
    v266 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v266 & 1) == 0)
      goto LABEL_638;
  }
  if (byte_254A4A4F8[23] >= 0)
    v268 = byte_254A4A4F8;
  else
    v268 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v269 = byte_254A4A4F8[23];
  else
    v269 = *(_QWORD *)&byte_254A4A4F8[8];
  v388.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v268, v265);
  v270 = &v388.__r_.__value_.__l.__size_;
  if (v269 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v269 >= 0x17)
  {
    v271 = (v269 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v269 | 7) != 0x17)
      v271 = v269 | 7;
    v272 = v271 + 1;
    v270 = (std::string::size_type *)operator new(v271 + 1);
    v388.__r_.__value_.__r.__words[2] = v269;
    *(_QWORD *)&v389 = v272 | 0x8000000000000000;
    v388.__r_.__value_.__l.__size_ = (std::string::size_type)v270;
    v3 = v349;
    goto LABEL_507;
  }
  BYTE7(v389) = v269;
  v3 = v349;
  if (v269)
LABEL_507:
    memmove(v270, v268, v269);
  *((_BYTE *)v270 + v269) = 0;
  BYTE8(v389) = 1;
  v273 = (char *)&v390;
  if (v264 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v264 >= 0x17)
  {
    v274 = (v264 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v264 | 7) != 0x17)
      v274 = v264 | 7;
    v275 = v274 + 1;
    v273 = (char *)operator new(v274 + 1);
    v391 = v264;
    v392 = v275 | 0x8000000000000000;
    v390 = v273;
    goto LABEL_515;
  }
  HIBYTE(v392) = v264;
  if (v264)
LABEL_515:
    memmove(v273, v265, v264);
  v273[v264] = 0;
  v393 = 1;
  v276 = v388.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v392) < 0)
    operator delete(v390);
  if (BYTE8(v389) && SBYTE7(v389) < 0)
    operator delete((void *)v388.__r_.__value_.__l.__size_);
  if (v388.__r_.__value_.__r.__words[0])
    os_release(v388.__r_.__value_.__l.__data_);
  if (!v345 || !*(_QWORD *)(v345 + 24))
  {
    os_log_type_enabled(v276, OS_LOG_TYPE_DEBUG);
    LODWORD(v388.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v388.__r_.__value_.__r.__words + 4) = (std::string::size_type)v261;
    v284 = (void *)_os_log_send_and_compose_impl();
    v285 = v343;
    if (v284)
      free(v284);
    goto LABEL_599;
  }
  v277 = _os_log_pack_size();
  v278 = operator new(v277, (std::align_val_t)8uLL);
  v279 = (_QWORD *)operator new();
  *v279 = &off_24C9ABB80;
  v279[1] = 0;
  v279[2] = 0;
  v279[3] = v278;
  v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
  v380.__r_.__value_.__l.__size_ = (std::string::size_type)v278;
  v382 = 0;
  v380.__r_.__value_.__r.__words[2] = (std::string::size_type)v279;
  v381 = 0;
  v280 = strlen(v261);
  if (v280 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v281 = v280;
  if (v280 >= 0x17)
  {
    v286 = (v280 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v280 | 7) != 0x17)
      v286 = v280 | 7;
    v287 = v286 + 1;
    v282 = operator new(v286 + 1);
    *(_QWORD *)&v383[8] = v281;
    *(_QWORD *)&v383[16] = v287 | 0x8000000000000000;
    *(_QWORD *)v383 = v282;
    goto LABEL_536;
  }
  v383[23] = v280;
  v282 = v383;
  if (v280)
  {
LABEL_536:
    v283 = v263;
    memcpy(v282, v261, v281);
    goto LABEL_537;
  }
  v283 = v263;
LABEL_537:
  v282[v281] = 0;
  v288 = *(_QWORD *)v383;
  *(_QWORD *)&__dst = *(_QWORD *)&v383[8];
  *(_QWORD *)((char *)&__dst + 7) = *(_QWORD *)&v383[15];
  v289 = v383[23];
  v290 = operator new(0x38uLL);
  v290[1] = 0;
  v290[2] = 0;
  v290[3] = off_24C9ABC20;
  *v290 = &off_24C9ABBD0;
  v291 = __dst;
  v290[4] = v288;
  v290[5] = v291;
  *(_QWORD *)((char *)v290 + 47) = *(_QWORD *)((char *)&__dst + 7);
  *((_BYTE *)v290 + 55) = v289;
  *(_QWORD *)&__dst = 0;
  *(_QWORD *)((char *)&__dst + 7) = 0;
  v292 = v382;
  v381 = (char *)(v290 + 3);
  v382 = (std::__shared_weak_count *)v290;
  if (v292)
  {
    v293 = (unint64_t *)&v292->__shared_owners_;
    do
      v294 = __ldaxr(v293);
    while (__stlxr(v294 - 1, v293));
    if (!v294)
    {
      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
      std::__shared_weak_count::__release_weak(v292);
    }
  }
  v388 = v380;
  v295 = v381;
  if (v380.__r_.__value_.__r.__words[2])
  {
    v296 = (unint64_t *)(v380.__r_.__value_.__r.__words[2] + 8);
    do
      v297 = __ldxr(v296);
    while (__stxr(v297 + 1, v296));
  }
  v298 = v382;
  *(_QWORD *)&v389 = v295;
  *((_QWORD *)&v389 + 1) = v382;
  if (v382)
  {
    v299 = (unint64_t *)&v382->__shared_owners_;
    do
      v300 = __ldxr(v299);
    while (__stxr(v300 + 1, v299));
    v390 = v295;
    do
      v301 = __ldaxr(v299);
    while (__stlxr(v301 - 1, v299));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  else
  {
    v390 = v295;
  }
  v302 = (std::__shared_weak_count *)v380.__r_.__value_.__r.__words[2];
  if (v380.__r_.__value_.__r.__words[2])
  {
    v303 = (unint64_t *)(v380.__r_.__value_.__r.__words[2] + 8);
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
    }
  }
  v305 = v388.__r_.__value_.__r.__words[0];
  if (v390[31] >= 0)
    v306 = v390 + 8;
  else
    v306 = (char *)*((_QWORD *)v390 + 1);
  v307 = _os_log_pack_fill();
  *(_DWORD *)v307 = 136315138;
  *(_QWORD *)(v307 + 4) = v306;
  v308 = operator new();
  v309 = *(unsigned __int8 *)(v262 + 39);
  if ((v309 & 0x80u) == 0)
    v310 = v283;
  else
    v310 = *(_QWORD *)(v262 + 16);
  if ((v309 & 0x80u) != 0)
    v309 = *(_QWORD *)(v262 + 24);
  *(_QWORD *)v308 = v305;
  *(_OWORD *)(v308 + 8) = *(_OWORD *)&v388.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v388.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v308 + 24) = v389;
  v389 = 0uLL;
  *(_QWORD *)(v308 + 40) = v310;
  *(_QWORD *)(v308 + 48) = v309;
  *(_BYTE *)(v308 + 56) = 2;
  *(_QWORD *)v383 = 0;
  v380.__r_.__value_.__r.__words[0] = v308;
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v345 + 24) + 40))(*(_QWORD *)(v345 + 24), &v380);
  v311 = v380.__r_.__value_.__r.__words[0];
  v380.__r_.__value_.__r.__words[0] = 0;
  if (v311)
  {
    v312 = *(std::__shared_weak_count **)(v311 + 32);
    if (v312)
    {
      v313 = (unint64_t *)&v312->__shared_owners_;
      do
        v314 = __ldaxr(v313);
      while (__stlxr(v314 - 1, v313));
      if (!v314)
      {
        ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
        std::__shared_weak_count::__release_weak(v312);
      }
    }
    v315 = *(std::__shared_weak_count **)(v311 + 16);
    if (v315)
    {
      v316 = (unint64_t *)&v315->__shared_owners_;
      do
        v317 = __ldaxr(v316);
      while (__stlxr(v317 - 1, v316));
      if (!v317)
      {
        ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
        std::__shared_weak_count::__release_weak(v315);
      }
    }
    MEMORY[0x212BC6398](v311, 0x10F0C40B62ED6C6);
    v318 = *(_QWORD *)v383;
    *(_QWORD *)v383 = 0;
    if (v318)
    {
      v319 = *(std::__shared_weak_count **)(v318 + 32);
      if (v319)
      {
        v320 = (unint64_t *)&v319->__shared_owners_;
        do
          v321 = __ldaxr(v320);
        while (__stlxr(v321 - 1, v320));
        if (!v321)
        {
          ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
          std::__shared_weak_count::__release_weak(v319);
        }
      }
      v322 = *(std::__shared_weak_count **)(v318 + 16);
      if (v322)
      {
        v323 = (unint64_t *)&v322->__shared_owners_;
        do
          v324 = __ldaxr(v323);
        while (__stlxr(v324 - 1, v323));
        if (!v324)
        {
          ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
          std::__shared_weak_count::__release_weak(v322);
        }
      }
      MEMORY[0x212BC6398](v318, 0x10F0C40B62ED6C6);
    }
  }
  v325 = (std::__shared_weak_count *)*((_QWORD *)&v389 + 1);
  v285 = v343;
  if (*((_QWORD *)&v389 + 1))
  {
    v326 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  v328 = (std::__shared_weak_count *)v388.__r_.__value_.__r.__words[2];
  if (v388.__r_.__value_.__r.__words[2])
  {
    v329 = (unint64_t *)(v388.__r_.__value_.__r.__words[2] + 8);
    do
      v330 = __ldaxr(v329);
    while (__stlxr(v330 - 1, v329));
    if (!v330)
    {
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
    }
  }
LABEL_599:
  if (v285)
  {
    v331 = (const char *)&v377;
    if ((v378 & 0x8000000000000000) != 0)
      v331 = (const char *)v377;
    sub_20E8C003C((uint64_t)&v357, "%s", v331);
    sub_20E863570((uint64_t)&v357);
  }
  sub_20E863570((uint64_t)&v357);
  v332 = v363;
  if (v363)
  {
    v333 = (unint64_t *)&v363->__shared_owners_;
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
    }
  }
  if (SHIBYTE(v378) < 0)
    operator delete((void *)v377);
  v364 = *MEMORY[0x24BEDB7F0];
  v335 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&v364 + *(_QWORD *)(v364 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v366 = v335;
  v367 = MEMORY[0x24BEDB848] + 16;
  if (v373 < 0)
    operator delete(v372);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v376);
LABEL_613:
  v336 = v354;
  if (v354)
  {
    do
    {
      v337 = (_QWORD *)*v336;
      operator delete(v336);
      v336 = v337;
    }
    while (v337);
  }
  v338 = v352;
  v352 = 0;
  if (v338)
    operator delete(v338);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_619:
  for (j = (_QWORD *)v3[14]; j; j = (_QWORD *)*j)
  {
    v341 = j[3];
    v340 = j[4];
    if ((v340 - v341) >> 3 != sub_20EDAA1F4(v3, j[2])
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 378, (uint64_t)"ranked_obj_id.second.size() == GetNumberOfReferencesForThisSession(ranked_obj_id.first)", 87, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
}

void sub_20EDAE4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a70;
  uint64_t v70;
  void *v72;

  if (*(_BYTE *)(v70 - 152) && *(char *)(v70 - 153) < 0)
    operator delete(*(void **)(v70 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a25);
  if (*(char *)(v70 - 177) < 0)
    operator delete(*(void **)(v70 - 200));
  sub_20E863784((uint64_t)&a34);
  if (__p)
  {
    a70 = (uint64_t)__p;
    operator delete(__p);
  }
  v72 = *(void **)(v70 - 256);
  if (!v72)
    _Unwind_Resume(a1);
  *(_QWORD *)(v70 - 248) = v72;
  operator delete(v72);
  _Unwind_Resume(a1);
}

void sub_20EDAE924(int8x8_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int8x8_t *v6;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int8x8_t v26;
  uint8x8_t v27;
  unint64_t v28;
  int8x8_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _QWORD *v75;
  uint64_t v76;
  int64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _BYTE *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  int64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _BYTE *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  _OWORD *v129;
  char *v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  char *v134;
  int8x8_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;

  v6 = a1;
  v138 = a4;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  if (a3)
    sub_20EDABE64(a1, (char **)(a2 + 80));
  v8 = (_QWORD *)v6[24];
  if (v8)
  {
    v9 = 0;
    do
    {
      v9 += sub_20EDAA1F4(v6, v8[2]);
      v8 = (_QWORD *)*v8;
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }
  if (v9 >= *(_QWORD *)&v6[10])
    v10 = (unint64_t)v6[10];
  else
    v10 = v9;
  v11 = (char *)*a5;
  v135 = v6;
  if (v10 > (uint64_t)(a5[2] - *a5) >> 3)
  {
    if (v10 >> 61)
      sub_20E92CED8();
    v12 = (_BYTE *)a5[1];
    v13 = (char *)operator new(8 * v10);
    v14 = v12 - v11;
    v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
    v16 = v15;
    if (v12 == v11)
      goto LABEL_21;
    if ((unint64_t)(v14 - 8) >= 0x58)
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v12[-(v14 & 0xFFFFFFFFFFFFFFF8)] - v13) >= 0x20)
      {
        v17 = v14 >> 3;
        v18 = ((unint64_t)(v14 - 8) >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v20 = &v12[-v19];
        v16 = &v15[-v19];
        v21 = &v13[8 * v17 - 16];
        v22 = (__int128 *)(v12 - 16);
        v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *v22;
          *((_OWORD *)v21 - 1) = *(v22 - 1);
          *(_OWORD *)v21 = v24;
          v21 -= 32;
          v22 -= 2;
          v23 -= 4;
        }
        while (v23);
        v12 = v20;
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_21:
          *a5 = v16;
          a5[1] = v15;
          a5[2] = &v13[8 * v10];
          v6 = v135;
          if (v11)
            operator delete(v11);
          goto LABEL_23;
        }
      }
    }
    else
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v25 = *((_QWORD *)v12 - 1);
      v12 -= 8;
      *((_QWORD *)v16 - 1) = v25;
      v16 -= 8;
    }
    while (v12 != v11);
    goto LABEL_21;
  }
LABEL_23:
  if (*(_QWORD *)&v6[11] > v10)
  {
    v6 = v135;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 403, (uint64_t)"ranking_config_.num_carryover <= num_detect", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  v26 = v6[13];
  if (v26)
  {
    v27 = (uint8x8_t)vcnt_s8(v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      v28 = a4;
      v29 = v135;
      if (*(_QWORD *)&v26 <= a4)
        v28 = a4 % *(_QWORD *)&v26;
    }
    else
    {
      v28 = (*(_QWORD *)&v26 - 1) & a4;
      v29 = v135;
    }
    v30 = *(_QWORD **)(*(_QWORD *)&v29[12] + 8 * v28);
    if (v30)
    {
      v31 = (_QWORD *)*v30;
      if (*v30)
      {
        if (v27.u32[0] < 2uLL)
        {
          v32 = *(_QWORD *)&v26 - 1;
          while (1)
          {
            v34 = v31[1];
            if (v34 == a4)
            {
              if (v31[2] == a4)
                goto LABEL_47;
            }
            else if ((v34 & v32) != v28)
            {
              goto LABEL_45;
            }
            v31 = (_QWORD *)*v31;
            if (!v31)
              goto LABEL_45;
          }
        }
        do
        {
          v33 = v31[1];
          if (v33 == a4)
          {
            if (v31[2] == a4)
              goto LABEL_47;
          }
          else
          {
            if (v33 >= *(_QWORD *)&v26)
              v33 %= *(_QWORD *)&v26;
            if (v33 != v28)
              break;
          }
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
    }
  }
LABEL_45:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ODT/ImageDetectionAndTracking/src/ImageRanking.cpp", 405, (uint64_t)"rank_sess_iter != ranked_object_ids_.end()", 42, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v31 = 0;
LABEL_47:
  v134 = sub_20EDB1A04((uint64_t *)&v135[17], a4, &v138);
  v137 = v10;
  if (!*((_QWORD *)v134 + 6))
  {
    if (!v10)
    {
LABEL_80:
      if (v9)
      {
        v63 = 0;
        do
        {
          sub_20EDB1F30((uint64_t)(v134 + 24), (unint64_t *)(v31[3] + v63), (_QWORD *)(v31[3] + v63));
          v63 += 8;
          --v9;
        }
        while (v9);
      }
      return;
    }
    v39 = 0;
    v40 = (char *)a5[1];
    while (1)
    {
      v42 = v31[3];
      v43 = a5[2];
      if ((unint64_t)v40 < v43)
      {
        *(_QWORD *)v40 = *(_QWORD *)(v42 + 8 * v39);
        v41 = (uint64_t)(v40 + 8);
      }
      else
      {
        v44 = (char *)*a5;
        v45 = (uint64_t)&v40[-*a5];
        v46 = v45 >> 3;
        v47 = (v45 >> 3) + 1;
        if (v47 >> 61)
          sub_20E92CED8();
        v48 = v43 - (_QWORD)v44;
        if (v48 >> 2 > v47)
          v47 = v48 >> 2;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 >> 61)
            sub_20E877A38();
          v50 = operator new(8 * v49);
          v51 = &v50[8 * v46];
          *v51 = *(_QWORD *)(v42 + 8 * v39);
          v41 = (uint64_t)(v51 + 1);
          v52 = v40 - v44;
          if (v40 != v44)
          {
LABEL_65:
            v53 = v52 - 8;
            if (v53 < 0x168
              || (v56 = (v40 - 8 - v44) & 0xFFFFFFFFFFFFFFF8, &v50[v45 - 8 - v56] > &v50[v45 - 8])
              || &v40[-v56 - 8] > v40 - 8
              || (unint64_t)(v40 - v50 - v45) < 0x20)
            {
              v54 = v40;
              v10 = v137;
            }
            else
            {
              v57 = (v53 >> 3) + 1;
              v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
              v54 = &v40[-v58];
              v51 = (_QWORD *)((char *)v51 - v58);
              v59 = &v50[8 * v46 - 16];
              v60 = v40 - 16;
              v61 = v57 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v62 = *(_OWORD *)v60;
                *(v59 - 1) = *((_OWORD *)v60 - 1);
                *v59 = v62;
                v59 -= 2;
                v60 -= 32;
                v61 -= 4;
              }
              while (v61);
              v10 = v137;
              if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_68:
                *a5 = v51;
                a5[1] = v41;
                a5[2] = &v50[8 * v49];
                if (!v44)
                  goto LABEL_54;
LABEL_72:
                operator delete(v44);
                goto LABEL_54;
              }
            }
            do
            {
              v55 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *--v51 = v55;
            }
            while (v54 != v44);
            goto LABEL_68;
          }
        }
        else
        {
          v50 = 0;
          v51 = (_QWORD *)(8 * v46);
          *(_QWORD *)(8 * v46) = *(_QWORD *)(v42 + 8 * v39);
          v41 = 8 * v46 + 8;
          v52 = v40 - v44;
          if (v40 != v44)
            goto LABEL_65;
        }
        v10 = v137;
        *a5 = v51;
        a5[1] = v41;
        a5[2] = &v50[8 * v49];
        if (v44)
          goto LABEL_72;
      }
LABEL_54:
      a5[1] = v41;
      ++v39;
      v40 = (char *)v41;
      if (v39 == v10)
        goto LABEL_80;
    }
  }
  v35 = v135[11];
  v36 = v10;
  v37 = v10 - *(_QWORD *)&v35;
  if (v10 != *(_QWORD *)&v35)
  {
    v64 = 0;
    v65 = (char *)a5[1];
    v136 = v10 - *(_QWORD *)&v35;
    while (1)
    {
      while (1)
      {
        v66 = v31[3];
        v67 = a5[2];
        if ((unint64_t)v65 >= v67)
          break;
        *(_QWORD *)v65 = *(_QWORD *)(v66 + 8 * v64);
        v65 += 8;
        a5[1] = v65;
        if (++v64 == v37)
          goto LABEL_115;
      }
      v68 = (char *)*a5;
      v69 = (uint64_t)&v65[-*a5];
      v70 = v69 >> 3;
      v71 = (v69 >> 3) + 1;
      if (v71 >> 61)
        sub_20E92CED8();
      v72 = v67 - (_QWORD)v68;
      if (v72 >> 2 > v71)
        v71 = v72 >> 2;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
        v73 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
      {
        if (v73 >> 61)
          sub_20E877A38();
        v74 = operator new(8 * v73);
        v75 = &v74[8 * v70];
        *v75 = *(_QWORD *)(v66 + 8 * v64);
        v76 = (uint64_t)(v75 + 1);
        v77 = v65 - v68;
        if (v65 == v68)
          goto LABEL_101;
      }
      else
      {
        v74 = 0;
        v75 = (_QWORD *)(8 * v70);
        *(_QWORD *)(8 * v70) = *(_QWORD *)(v66 + 8 * v64);
        v76 = 8 * v70 + 8;
        v77 = v65 - v68;
        if (v65 == v68)
          goto LABEL_101;
      }
      v78 = v77 - 8;
      if (v78 >= 0x168)
      {
        v81 = (v65 - 8 - v68) & 0xFFFFFFFFFFFFFFF8;
        if (&v74[v69 - 8 - v81] > &v74[v69 - 8])
        {
          v79 = v65;
        }
        else if (&v65[-v81 - 8] > v65 - 8)
        {
          v79 = v65;
        }
        else if ((unint64_t)(v65 - v74 - v69) >= 0x20)
        {
          v82 = (v78 >> 3) + 1;
          v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
          v79 = &v65[-v83];
          v75 = (_QWORD *)((char *)v75 - v83);
          v84 = &v74[8 * v70 - 16];
          v85 = v65 - 16;
          v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v87 = *(_OWORD *)v85;
            *(v84 - 1) = *((_OWORD *)v85 - 1);
            *v84 = v87;
            v84 -= 2;
            v85 -= 32;
            v86 -= 4;
          }
          while (v86);
          if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_101;
        }
        else
        {
          v79 = v65;
        }
      }
      else
      {
        v79 = v65;
      }
      do
      {
        v80 = *((_QWORD *)v79 - 1);
        v79 -= 8;
        *--v75 = v80;
      }
      while (v79 != v68);
LABEL_101:
      *a5 = v75;
      a5[1] = v76;
      a5[2] = &v74[8 * v73];
      if (v68)
        operator delete(v68);
      v37 = v136;
      a5[1] = v76;
      ++v64;
      v65 = (char *)v76;
      if (v64 == v136)
      {
LABEL_115:
        v36 = (unint64_t)v135[11];
        v10 = v137;
        v38 = (_QWORD *)*((_QWORD *)v134 + 5);
        if (!v38)
          goto LABEL_116;
LABEL_161:
        while (2)
        {
          if (!v36)
            return;
          v114 = (char *)*a5;
          v115 = (char *)a5[1];
          if ((char *)*a5 != v115)
          {
            v116 = (char *)*a5;
            while (*(_QWORD *)v116 != v38[2])
            {
              v116 += 8;
              if (v116 == v115)
              {
                v116 = (char *)a5[1];
                break;
              }
            }
            if (v116 != v115)
              goto LABEL_160;
          }
          v117 = a5[2];
          if ((unint64_t)v115 < v117)
          {
            *(_QWORD *)v115 = v38[2];
            v113 = (uint64_t)(v115 + 8);
            goto LABEL_159;
          }
          v118 = v115 - v114;
          v119 = (v115 - v114) >> 3;
          v120 = v119 + 1;
          if ((unint64_t)(v119 + 1) >> 61)
            sub_20E92CED8();
          v121 = v117 - (_QWORD)v114;
          if (v121 >> 2 > v120)
            v120 = v121 >> 2;
          if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
            v122 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v122 = v120;
          if (v122)
          {
            if (v122 >> 61)
              sub_20E877A38();
            v123 = v122;
            v124 = operator new(8 * v122);
            v122 = v123;
            v125 = &v124[8 * v119];
            *v125 = v38[2];
            v113 = (uint64_t)(v125 + 1);
            if (v114 == v115)
            {
LABEL_186:
              *a5 = v125;
              a5[1] = v113;
              a5[2] = &v124[8 * v122];
              if (v114)
                operator delete(v114);
LABEL_159:
              a5[1] = v113;
              --v36;
              v10 = v137;
LABEL_160:
              v38 = (_QWORD *)*v38;
              if (!v38)
                goto LABEL_116;
              continue;
            }
          }
          else
          {
            v124 = 0;
            v125 = (_QWORD *)(8 * v119);
            *(_QWORD *)(8 * v119) = v38[2];
            v113 = 8 * v119 + 8;
            if (v114 == v115)
              goto LABEL_186;
          }
          break;
        }
        if ((unint64_t)(v118 - 8) < 0x58)
          goto LABEL_202;
        if ((unint64_t)(v114 - v124) < 0x20)
          goto LABEL_202;
        v126 = ((unint64_t)(v118 - 8) >> 3) + 1;
        v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
        v128 = &v115[-v127];
        v125 = (_QWORD *)((char *)v125 - v127);
        v129 = &v124[8 * v119 - 16];
        v130 = v115 - 16;
        v131 = v126 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v132 = *(_OWORD *)v130;
          *(v129 - 1) = *((_OWORD *)v130 - 1);
          *v129 = v132;
          v129 -= 2;
          v130 -= 32;
          v131 -= 4;
        }
        while (v131);
        v115 = v128;
        if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_202:
          do
          {
            v133 = *((_QWORD *)v115 - 1);
            v115 -= 8;
            *--v125 = v133;
          }
          while (v115 != v114);
        }
        goto LABEL_186;
      }
    }
  }
  v38 = (_QWORD *)*((_QWORD *)v134 + 5);
  if (v38)
    goto LABEL_161;
LABEL_116:
  if (v36)
  {
    v88 = v10 - *(_QWORD *)&v135[11];
    if (v88 < v9)
    {
      v89 = (char *)*a5;
      v90 = (char *)a5[1];
      while (1)
      {
        v91 = v31[3];
        v92 = v90;
        if (v89 != v90)
        {
          v92 = v89;
          while (*(_QWORD *)v92 != *(_QWORD *)(v91 + 8 * v88))
          {
            v92 += 8;
            if (v92 == v90)
            {
              v92 = v90;
              break;
            }
          }
        }
        if (v92 != v90)
          goto LABEL_145;
        v93 = a5[2];
        if ((unint64_t)v90 >= v93)
          break;
        *(_QWORD *)v90 = *(_QWORD *)(v91 + 8 * v88);
        v94 = (uint64_t)(v90 + 8);
LABEL_144:
        a5[1] = v94;
        --v36;
        v90 = (char *)v94;
LABEL_145:
        if (++v88 >= v9 || !v36)
          return;
      }
      v95 = v90 - v89;
      v96 = (v90 - v89) >> 3;
      v97 = v96 + 1;
      if ((unint64_t)(v96 + 1) >> 61)
        sub_20E92CED8();
      v98 = v93 - (_QWORD)v89;
      if (v98 >> 2 > v97)
        v97 = v98 >> 2;
      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
        v99 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v99 = v97;
      if (v99)
      {
        if (v99 >> 61)
          sub_20E877A38();
        v100 = v36;
        v101 = v99;
        v102 = operator new(8 * v99);
        v99 = v101;
        v36 = v100;
        v95 = v90 - v89;
        v103 = &v102[8 * v96];
        *(_QWORD *)v103 = *(_QWORD *)(v91 + 8 * v88);
        v94 = (uint64_t)(v103 + 8);
        if (v89 == v90)
          goto LABEL_141;
      }
      else
      {
        v102 = 0;
        v103 = (char *)(8 * v96);
        *(_QWORD *)(8 * v96) = *(_QWORD *)(v91 + 8 * v88);
        v94 = 8 * v96 + 8;
        if (v89 == v90)
          goto LABEL_141;
      }
      if ((unint64_t)(v95 - 8) >= 0x168)
      {
        v106 = (v90 - 8 - v89) & 0xFFFFFFFFFFFFFFF8;
        if (&v102[v95 - 8 - v106] > &v102[v95 - 8])
        {
          v104 = v90;
        }
        else if (&v90[-v106 - 8] > v90 - 8)
        {
          v104 = v90;
        }
        else if ((unint64_t)(v90 - v102 - v95) >= 0x20)
        {
          v107 = ((unint64_t)(v95 - 8) >> 3) + 1;
          v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
          v104 = &v90[-v108];
          v103 -= v108;
          v109 = &v102[8 * v96 - 16];
          v110 = (__int128 *)(v90 - 16);
          v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v112 = *v110;
            *(v109 - 1) = *(v110 - 1);
            *v109 = v112;
            v109 -= 2;
            v110 -= 2;
            v111 -= 4;
          }
          while (v111);
          if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_141;
        }
        else
        {
          v104 = v90;
        }
      }
      else
      {
        v104 = v90;
      }
      do
      {
        v105 = *((_QWORD *)v104 - 1);
        v104 -= 8;
        *((_QWORD *)v103 - 1) = v105;
        v103 -= 8;
      }
      while (v104 != v89);
LABEL_141:
      *a5 = v103;
      a5[1] = v94;
      a5[2] = &v102[8 * v99];
      if (v89)
      {
        operator delete(v89);
        v89 = (char *)*a5;
      }
      else
      {
        v89 = v103;
      }
      goto LABEL_144;
    }
  }
}

void sub_20EDAF3F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EDAF448(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24C9E9620;
  v2 = a1[1];
  if (v2)
  {
    v3 = a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 48);
        v3 -= 48;
        v5 = v6;
        if (v6)
          MEMORY[0x212BC6368](v5, 0x1000C8052888210);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EDAF4CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24C9E9620;
  v2 = a1[1];
  if (v2)
  {
    v3 = a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 48);
        v3 -= 48;
        v5 = v6;
        if (v6)
          MEMORY[0x212BC6368](v5, 0x1000C8052888210);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EDAF560(_QWORD *result, uint64_t a2, __int128 *a3)
{
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  size_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;

  v4 = result;
  v6 = result[1];
  v7 = result[2];
  v5 = (void **)(result + 1);
  if (v6 == v7)
  {
LABEL_12:
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = *a3;
    LODWORD(v22) = *((_DWORD *)a3 + 4);
    if (&v18 == (_QWORD **)a2)
    {
      LODWORD(v12) = 0;
      v14 = 0;
      v15 = 0;
      if (v7 < result[3])
      {
LABEL_20:
        *(_QWORD *)v7 = v15;
        *(_QWORD *)(v7 + 8) = v14;
        *(_DWORD *)(v7 + 16) = v12;
        v17 = v21;
        *(_QWORD *)(v7 + 40) = v22;
        *(_OWORD *)(v7 + 24) = v17;
        v4[2] = v7 + 48;
        return result;
      }
    }
    else
    {
      v12 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v12)
      {
        v13 = (4 * v12 + 31) & 0x7FFFFFFE0;
        v14 = v13 >> 2;
        v19 = v13 >> 2;
        v15 = operator new(v13, (std::align_val_t)0x20uLL);
        v18 = v15;
        result = memcpy(v15, *(const void **)a2, 4 * v12);
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v20 = v12;
      if (v7 < v4[3])
        goto LABEL_20;
    }
    v16 = sub_20EDAFFA0(v5, (uint64_t *)&v18);
    result = v18;
    v4[2] = v16;
    if (result)
      return (_QWORD *)MEMORY[0x212BC6368](result, 0x1000C8052888210);
    return result;
  }
  while (*(_DWORD *)(v6 + 40) != *((_DWORD *)a3 + 4)
       || *(_QWORD *)(v6 + 24) != *(_QWORD *)a3
       || *(_DWORD *)(v6 + 32) != *((_DWORD *)a3 + 2))
  {
    v6 += 48;
    if (v6 == v7)
      goto LABEL_12;
  }
  if (v6 != a2)
  {
    v8 = *(unsigned int *)(a2 + 16);
    if (*(_QWORD *)(v6 + 8) < v8)
    {
      if (*(_QWORD *)v6)
        MEMORY[0x212BC6368](*(_QWORD *)v6, 0x1000C8052888210);
      v9 = 4 * v8;
      v10 = (v9 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = v10 >> 2;
      v11 = operator new(v10, (std::align_val_t)0x20uLL);
      *(_QWORD *)v6 = v11;
      goto LABEL_24;
    }
    if ((_DWORD)v8)
    {
      v11 = *(void **)v6;
      v9 = 4 * v8;
LABEL_24:
      result = memcpy(v11, *(const void **)a2, v9);
      *(_DWORD *)(v6 + 16) = *(_DWORD *)(a2 + 16);
      return result;
    }
    *(_DWORD *)(v6 + 16) = 0;
  }
  return result;
}

void sub_20EDAF768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x212BC6368](a9, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDAF790(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = *(_QWORD **)(result + 8);
  v3 = *(_QWORD **)(result + 16);
  if (v2 != v3)
  {
    v4 = result;
    v5 = 0;
    while (1)
    {
      if (LODWORD(v2[v5 + 5]) == *(_DWORD *)(a2 + 16) && v2[v5 + 3] == *(_QWORD *)a2)
      {
        v6 = &v2[v5];
        if (LODWORD(v2[v5 + 4]) == *(_DWORD *)(a2 + 8))
          break;
      }
      v5 += 6;
      if (&v2[v5] == v3)
        return result;
    }
    if (v6 + 6 != v3)
    {
      v7 = &v2[v5];
      do
      {
        v8 = v7[6];
        v7 += 6;
        v9 = *v6;
        v10 = v6[1];
        v11 = v6[7];
        *v6 = v8;
        v6[1] = v11;
        v6[7] = v10;
        *((_DWORD *)v6 + 4) = *((_DWORD *)v6 + 16);
        *((_DWORD *)v6 + 16) = 0;
        *(_OWORD *)(v6 + 3) = *(_OWORD *)(v6 + 9);
        *((_DWORD *)v6 + 10) = *((_DWORD *)v6 + 22);
        v12 = v6 + 12;
        v6 = v7;
        *v7 = v9;
      }
      while (v12 != v3);
      v3 = *(_QWORD **)(result + 16);
      v6 = v7;
    }
    while (v3 != v6)
    {
      v13 = *(v3 - 6);
      v3 -= 6;
      result = v13;
      if (v13)
        result = MEMORY[0x212BC6368](result, 0x1000C8052888210);
    }
    *(_QWORD *)(v4 + 16) = v6;
  }
  return result;
}

void sub_20EDAF898(uint64_t a1@<X0>, float **a2@<X1>, _QWORD *a3@<X8>, __n128 a4@<Q0>)
{
  _OWORD *v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0xBFF0000000000000;
  *((_DWORD *)a3 + 4) = -1;
  sub_20EDAF900(a1, a2, 1uLL, (uint64_t *)&v7, a4);
  v5 = v7;
  if (v7 == v8)
  {
    if (!v7)
      return;
  }
  else
  {
    v6 = v7[1];
    *(_OWORD *)a3 = *v7;
    *((_OWORD *)a3 + 1) = v6;
  }
  v8 = v5;
  operator delete(v5);
}

void sub_20EDAF900(uint64_t a1@<X0>, float **a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  _BYTE *v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  unint64_t v17;
  float *v18;
  unint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  __n128 *v36;
  __n128 v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 *v41;
  __n128 v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  __n128 v46;
  __n128 *v47;
  __n128 v48;
  __n128 *v49;
  char *v50;
  __n128 v51;
  _BYTE *v52;
  unint64_t v53;
  __n128 v54;
  __n128 *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  __int128 v61;
  char *v62;
  char *v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  __n128 *v69;
  __n128 v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  __n128 *v74;
  __n128 v75;
  uint64_t v76;
  unint64_t v77;
  __n128 v78;
  __n128 *v79;
  __n128 v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *__p;
  _BYTE *v86;
  uint64_t v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  uint64_t v91;

  __p = 0;
  v86 = 0;
  v87 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 != v8)
  {
    while (1)
    {
      v12 = *(unsigned int *)(v7 + 16);
      if (!(_DWORD)v12)
      {
        v15 = 0.0;
        goto LABEL_18;
      }
      v13 = *(float **)v7;
      v14 = *a2;
      v15 = (float)(**(float **)v7 - **a2) * (float)(**(float **)v7 - **a2);
      if ((_DWORD)v12 == 1)
        goto LABEL_18;
      v16 = v13 + 1;
      v17 = (v12 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
      if (v17 < 7)
        break;
      v19 = v17 + 1;
      v20 = (v17 + 1) & 0x7FFFFFFFFFFFFFF8;
      v16 += v20;
      v18 = &v14[v20];
      v21 = (float32x4_t *)(v14 + 5);
      v22 = (float32x4_t *)(v13 + 5);
      v23 = v20;
      do
      {
        v24 = vsubq_f32(v22[-1], v21[-1]);
        v25 = vsubq_f32(*v22, *v21);
        v26 = vmulq_f32(v24, v24);
        v27 = vmulq_f32(v25, v25);
        v15 = (float)((float)((float)((float)((float)((float)((float)(v15 + v26.f32[0]) + v26.f32[1]) + v26.f32[2])
                                            + v26.f32[3])
                                    + v27.f32[0])
                            + v27.f32[1])
                    + v27.f32[2])
            + v27.f32[3];
        v21 += 2;
        v22 += 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != v20)
        goto LABEL_16;
LABEL_18:
      a5.n128_f64[0] = v15;
      v33 = __p;
      v11 = v86;
      v34 = (v86 - (_BYTE *)__p) >> 5;
      if (v34 >= a3)
      {
        if (*((double *)__p + 3) <= a5.n128_f64[0])
          goto LABEL_7;
        if (v86 - (_BYTE *)__p >= 33)
        {
          v35 = 0;
          v88 = *(__n128 *)__p;
          v89 = *((__n128 *)__p + 1);
          v36 = (__n128 *)__p;
          do
          {
            v38 = v36;
            v36 += 2 * v35 + 2;
            v39 = 2 * v35;
            v35 = (2 * v35) | 1;
            v40 = v39 + 2;
            if (v40 < v34 && v36[1].n128_f64[1] < v36[3].n128_f64[1])
            {
              v36 += 2;
              v35 = v40;
            }
            v37 = v36[1];
            *v38 = *v36;
            v38[1] = v37;
          }
          while (v35 <= (uint64_t)((unint64_t)(v34 - 2) >> 1));
          v41 = (__n128 *)(v11 - 32);
          if (v36 == v41)
          {
            v10 = v89;
            *v36 = v88;
            v36[1] = v10;
          }
          else
          {
            v42 = v41[1];
            *v36 = *v41;
            v36[1] = v42;
            *v41 = v88;
            v41[1] = v89;
            v43 = (char *)v36 - v33 + 32;
            if (v43 >= 33)
            {
              v44 = (((unint64_t)v43 >> 5) - 2) >> 1;
              v45 = v36[1].n128_f64[1];
              if (*(double *)&v33[32 * v44 + 24] < v45)
              {
                v46 = *v36;
                v91 = v36[1].n128_i64[0];
                v90 = v46;
                do
                {
                  v47 = v36;
                  v36 = (__n128 *)&v33[32 * v44];
                  v48 = v36[1];
                  *v47 = *v36;
                  v47[1] = v48;
                  if (!v44)
                    break;
                  v44 = (v44 - 1) >> 1;
                }
                while (*(double *)&v33[32 * v44 + 24] < v45);
                *v36 = v90;
                v36[1].n128_u64[0] = v91;
                v36[1].n128_f64[1] = v45;
              }
            }
          }
          v11 = v86;
        }
        v86 = v11 - 32;
      }
      v89.n128_u64[0] = 0;
      v88 = *(__n128 *)(v7 + 24);
      v89.n128_u32[0] = *(_DWORD *)(v7 + 40);
      v89.n128_u64[1] = a5.n128_u64[0];
      sub_20EDB0128((char **)&__p, &v88);
LABEL_7:
      v7 += 48;
      if (v7 == v8)
        goto LABEL_33;
    }
    v18 = *a2;
LABEL_16:
    v28 = &v13[v12];
    v29 = v18 + 1;
    do
    {
      v30 = *v16++;
      v31 = v30;
      v32 = *v29++;
      v15 = v15 + (float)((float)(v31 - v32) * (float)(v31 - v32));
    }
    while (v16 != v28);
    goto LABEL_18;
  }
LABEL_33:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    if (a3 >> 59)
LABEL_80:
      sub_20E867F44();
    v49 = (__n128 *)operator new(32 * a3);
    *a4 = (uint64_t)v49;
    a4[1] = (uint64_t)v49;
    a4[2] = (uint64_t)&v49[2 * a3];
    v50 = (char *)__p;
    if (__p != v86)
      goto LABEL_40;
    goto LABEL_73;
  }
  v49 = 0;
  v50 = (char *)__p;
  if (__p != v86)
  {
LABEL_40:
    while (1)
    {
      v53 = a4[2];
      if ((unint64_t)v49 >= v53)
        break;
      a5 = *(__n128 *)v50;
      v54 = *((__n128 *)v50 + 1);
      *v49 = *(__n128 *)v50;
      v49[1] = v54;
      v49 += 2;
LABEL_55:
      a4[1] = (uint64_t)v49;
      v50 = (char *)__p;
      v52 = v86;
      v65 = v86 - (_BYTE *)__p;
      if (v86 - (_BYTE *)__p >= 33)
      {
        v66 = 0;
        v67 = v65 >> 5;
        v88 = *(__n128 *)__p;
        v89 = *((__n128 *)__p + 1);
        v68 = (unint64_t)((v65 >> 5) - 2) >> 1;
        v69 = (__n128 *)__p;
        do
        {
          v71 = v69;
          v69 += 2 * v66 + 2;
          v72 = 2 * v66;
          v66 = (2 * v66) | 1;
          v73 = v72 + 2;
          if (v73 < v67 && v69[1].n128_f64[1] < v69[3].n128_f64[1])
          {
            v69 += 2;
            v66 = v73;
          }
          v70 = v69[1];
          *v71 = *v69;
          v71[1] = v70;
        }
        while (v66 <= v68);
        v74 = (__n128 *)(v52 - 32);
        if (v69 == v74)
        {
          a5 = v88;
          v51 = v89;
          *v69 = v88;
          v69[1] = v51;
        }
        else
        {
          v75 = v74[1];
          *v69 = *v74;
          v69[1] = v75;
          *v74 = v88;
          a5 = v89;
          v74[1] = v89;
          v76 = (char *)v69 - v50 + 32;
          if (v76 >= 33)
          {
            v77 = (((unint64_t)v76 >> 5) - 2) >> 1;
            a5.n128_u64[0] = v69[1].n128_u64[1];
            if (*(double *)&v50[32 * v77 + 24] < a5.n128_f64[0])
            {
              v78 = *v69;
              v91 = v69[1].n128_i64[0];
              v90 = v78;
              do
              {
                v79 = v69;
                v69 = (__n128 *)&v50[32 * v77];
                v80 = v69[1];
                *v79 = *v69;
                v79[1] = v80;
                if (!v77)
                  break;
                v77 = (v77 - 1) >> 1;
              }
              while (*(double *)&v50[32 * v77 + 24] < a5.n128_f64[0]);
              *v69 = v90;
              v69[1].n128_u64[0] = v91;
              v69[1].n128_u64[1] = a5.n128_u64[0];
            }
          }
        }
        v50 = (char *)__p;
        v52 = v86;
      }
      v86 = v52 - 32;
      if (v50 == v52 - 32)
      {
        v82 = *a4;
        goto LABEL_74;
      }
    }
    v55 = (__n128 *)*a4;
    v56 = ((uint64_t)v49 - *a4) >> 5;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 59)
      goto LABEL_80;
    v58 = v53 - (_QWORD)v55;
    if (v58 >> 4 > v57)
      v57 = v58 >> 4;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFE0)
      v59 = 0x7FFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    if (v59)
    {
      if (v59 >> 59)
        sub_20E877A38();
      v60 = (char *)operator new(32 * v59);
      a5 = *(__n128 *)v50;
      v61 = *((_OWORD *)v50 + 1);
      v62 = &v60[32 * v56];
      *(_OWORD *)v62 = *(_OWORD *)v50;
      *((_OWORD *)v62 + 1) = v61;
      if (v49 != v55)
      {
LABEL_51:
        v63 = v62;
        do
        {
          a5 = v49[-2];
          v64 = v49[-1];
          *((__n128 *)v63 - 2) = a5;
          *((__n128 *)v63 - 1) = v64;
          v63 -= 32;
          v49 -= 2;
        }
        while (v49 != v55);
        v49 = (__n128 *)(v62 + 32);
        *a4 = (uint64_t)v63;
        a4[1] = (uint64_t)(v62 + 32);
        a4[2] = (uint64_t)&v60[32 * v59];
        if (!v55)
          goto LABEL_55;
LABEL_54:
        operator delete(v55);
        goto LABEL_55;
      }
    }
    else
    {
      v60 = 0;
      a5 = *(__n128 *)v50;
      v81 = *((_OWORD *)v50 + 1);
      v62 = (char *)(32 * v56);
      *(_OWORD *)v62 = *(_OWORD *)v50;
      *((_OWORD *)v62 + 1) = v81;
      if (v49 != v55)
        goto LABEL_51;
    }
    v55 = v49;
    v49 = (__n128 *)(v62 + 32);
    *a4 = (uint64_t)v62;
    a4[1] = (uint64_t)(v62 + 32);
    a4[2] = (uint64_t)&v60[32 * v59];
    if (!v55)
      goto LABEL_55;
    goto LABEL_54;
  }
LABEL_73:
  v82 = (uint64_t)v49;
LABEL_74:
  v83 = 126 - 2 * __clz(((uint64_t)v49 - v82) >> 5);
  if (v49 == (__n128 *)v82)
    v84 = 0;
  else
    v84 = v83;
  sub_20EDB02B0(v82, v49->n128_f64, (uint64_t)&v88, v84, 1, a5);
  if (__p)
  {
    v86 = __p;
    operator delete(__p);
  }
}

void sub_20EDAFECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  void *v13;

  if (v11)
  {
    *(_QWORD *)(v10 + 8) = v11;
    operator delete(v11);
    v13 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20EDAFF24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    while (*(_DWORD *)(v2 + 40) != *(_DWORD *)(a2 + 16)
         || *(_QWORD *)(v2 + 24) != *(_QWORD *)a2
         || *(_DWORD *)(v2 + 32) != *(_DWORD *)(a2 + 8))
    {
      v2 += 48;
      if (v2 == v3)
        return 0;
    }
  }
  v4 = v2 == v3;
  v5 = v2 & 0xFFFFFFFFFFFFFF00;
  v2 = v2;
  if (v4)
  {
    v2 = 0;
    v5 = 0;
  }
  return v5 | v2;
}

char *sub_20EDAFFA0(void **a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_20E877A38();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  v9 = &v7[48 * v6];
  v10 = *a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)v8 = v10;
  *((_QWORD *)v8 + 1) = v11;
  *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 3);
  *((_QWORD *)v8 + 5) = a2[5];
  v12 = v8 + 48;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v8[v15];
      v17 = &v14[v15];
      *((_QWORD *)v16 - 5) = 0;
      v18 = *(_QWORD *)&v14[v15 - 40];
      *((_QWORD *)v16 - 6) = *(_QWORD *)&v14[v15 - 48];
      *((_QWORD *)v16 - 5) = v18;
      *((_QWORD *)v17 - 6) = 0;
      *((_QWORD *)v17 - 5) = 0;
      *((_DWORD *)v16 - 8) = *(_DWORD *)&v14[v15 - 32];
      *((_DWORD *)v17 - 8) = 0;
      v19 = *(_OWORD *)&v14[v15 - 24];
      *((_QWORD *)v16 - 1) = *(_QWORD *)&v14[v15 - 8];
      *(_OWORD *)(v16 - 24) = v19;
      v15 -= 48;
    }
    while (&v14[v15] != v13);
    v14 = (char *)*a1;
    v20 = (char *)a1[1];
    *a1 = &v8[v15];
    a1[1] = v12;
    a1[2] = v9;
    while (v20 != v14)
    {
      v22 = *((_QWORD *)v20 - 6);
      v20 -= 48;
      v21 = v22;
      if (v22)
        MEMORY[0x212BC6368](v21, 0x1000C8052888210);
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EDB0128(char **a1, _OWORD *a2)
{
  unint64_t v4;
  double *v5;
  __int128 v6;
  double *v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  double *v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  double *v21;
  double *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v5 = (double *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = (double *)*a1;
    v9 = ((char *)v5 - *a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      sub_20E867F44();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 59)
        sub_20E877A38();
      v13 = (char *)operator new(32 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[32 * v9];
    v15 = a2[1];
    *(_OWORD *)v14 = *a2;
    *((_OWORD *)v14 + 1) = v15;
    v7 = (double *)(v14 + 32);
    if (v5 != v8)
    {
      do
      {
        v16 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v14 - 1) = v16;
        v14 -= 32;
        v5 -= 4;
      }
      while (v5 != v8);
      v5 = (double *)*a1;
    }
    *a1 = v14;
    a1[1] = (char *)v7;
    a1[2] = &v13[32 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = a2[1];
    *(_OWORD *)v5 = *a2;
    *((_OWORD *)v5 + 1) = v6;
    v7 = v5 + 4;
  }
  a1[1] = (char *)v7;
  v17 = (double *)*a1;
  v18 = (char *)v7 - *a1;
  if (v18 >= 33)
  {
    v19 = (((unint64_t)v18 >> 5) - 2) >> 1;
    v20 = *(v7 - 1);
    if (v17[4 * v19 + 3] < v20)
    {
      v21 = v7 - 4;
      v25 = *((_QWORD *)v7 - 2);
      v24 = *((_OWORD *)v7 - 2);
      do
      {
        v22 = v21;
        v21 = &v17[4 * v19];
        v23 = *((_OWORD *)v21 + 1);
        *(_OWORD *)v22 = *(_OWORD *)v21;
        *((_OWORD *)v22 + 1) = v23;
        if (!v19)
          break;
        v19 = (v19 - 1) >> 1;
      }
      while (v17[4 * v19 + 3] < v20);
      *(_OWORD *)v21 = v24;
      *((_QWORD *)v21 + 2) = v25;
      v21[3] = v20;
    }
  }
}

__n128 sub_20EDB02B0(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, char a5, __n128 result)
{
  double *v11;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 *v17;
  double v18;
  double *v19;
  double v20;
  __int128 v21;
  double v22;
  double *v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __int128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __int128 *v31;
  unint64_t v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __n128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  unint64_t v49;
  double *v50;
  double v51;
  double v52;
  double *v53;
  double v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  double v64;
  double v65;
  __int128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  uint64_t v72;
  double v73;
  unint64_t v74;
  double *v75;
  double *v76;
  double v77;
  double *v78;
  double v79;
  double *v80;
  __int128 v81;
  double v82;
  double v83;
  __n128 *v84;
  __int128 v85;
  BOOL v86;
  __n128 v87;
  unint64_t v88;
  double v89;
  unint64_t v90;
  double v91;
  double *v92;
  double *v93;
  double v94;
  __int128 v95;
  double v96;
  double v97;
  __n128 *v98;
  __int128 v99;
  __int128 v100;
  unint64_t v101;
  double v102;
  __int128 v103;
  __int128 v104;
  __n128 *v105;
  double v106;
  double v107;
  __int128 v108;
  double *v109;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __n128 v120;
  __int128 v121;
  __int128 v122;
  double v123;
  double *v124;
  __int128 v125;
  double v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __n128 v130;
  __int128 v131;
  __int128 v132;
  __n128 v133;
  __int128 v134;
  __int128 v135;
  double *v136;
  __n128 v137;
  __n128 v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __int128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __int128 v163;
  __n128 v164;
  __int128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __int128 v173;
  __n128 v174;
  __n128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __n128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;

BOOL sub_20EDB0D28(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4;
  __int128 *v5;
  double v6;
  double v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (*(double *)(a2 - 8) >= *(double *)(a1 + 24))
        return 1;
      v13 = *(_OWORD *)a1;
      v12 = *(_OWORD *)(a1 + 16);
      v14 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 16) = v14;
      *(_OWORD *)(a2 - 32) = v13;
      *(_OWORD *)(a2 - 16) = v12;
      return 1;
    case 3:
      v15 = (_OWORD *)(a1 + 32);
      v16 = (_OWORD *)(a2 - 32);
      v17 = *(double *)(a1 + 56);
      v18 = *(double *)(a2 - 8);
      if (v17 < *(double *)(a1 + 24))
      {
        if (v18 >= v17)
        {
          v57 = *(_OWORD *)a1;
          v56 = *(_OWORD *)(a1 + 16);
          v58 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v15;
          *(_OWORD *)(a1 + 16) = v58;
          *v15 = v57;
          *(_OWORD *)(a1 + 48) = v56;
          if (*(double *)(a2 - 8) >= *(double *)(a1 + 56))
            return 1;
          v20 = *v15;
          v19 = *(_OWORD *)(a1 + 48);
          v59 = *(_OWORD *)(a2 - 16);
          *v15 = *v16;
          *(_OWORD *)(a1 + 48) = v59;
        }
        else
        {
          v20 = *(_OWORD *)a1;
          v19 = *(_OWORD *)(a1 + 16);
          v21 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)a1 = *v16;
          *(_OWORD *)(a1 + 16) = v21;
        }
        *v16 = v20;
        *(_OWORD *)(a2 - 16) = v19;
        return 1;
      }
      if (v18 >= v17)
        return 1;
      v36 = *v15;
      v35 = *(_OWORD *)(a1 + 48);
      v37 = *(_OWORD *)(a2 - 16);
      *v15 = *v16;
      *(_OWORD *)(a1 + 48) = v37;
      *v16 = v36;
      *(_OWORD *)(a2 - 16) = v35;
      if (*(double *)(a1 + 56) >= *(double *)(a1 + 24))
        return 1;
      goto LABEL_47;
    case 4:
      v15 = (_OWORD *)(a1 + 32);
      v22 = (_OWORD *)(a1 + 64);
      v23 = *(double *)(a1 + 56);
      v24 = *(double *)(a1 + 24);
      v25 = *(double *)(a1 + 88);
      if (v23 >= v24)
      {
        if (v25 < v23)
        {
          v39 = *v15;
          v38 = *(_OWORD *)(a1 + 48);
          v40 = *(_OWORD *)(a1 + 80);
          *v15 = *v22;
          *(_OWORD *)(a1 + 48) = v40;
          *v22 = v39;
          *(_OWORD *)(a1 + 80) = v38;
          if (*(double *)(a1 + 56) < v24)
          {
            v42 = *(_OWORD *)a1;
            v41 = *(_OWORD *)(a1 + 16);
            v43 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)a1 = *v15;
            *(_OWORD *)(a1 + 16) = v43;
            *v15 = v42;
            *(_OWORD *)(a1 + 48) = v41;
          }
        }
      }
      else
      {
        if (v25 >= v23)
        {
          v61 = *(_OWORD *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v62 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v15;
          *(_OWORD *)(a1 + 16) = v62;
          *v15 = v61;
          *(_OWORD *)(a1 + 48) = v60;
          if (v25 >= *(double *)(a1 + 56))
            goto LABEL_44;
          v27 = *v15;
          v26 = *(_OWORD *)(a1 + 48);
          v63 = *(_OWORD *)(a1 + 80);
          *v15 = *v22;
          *(_OWORD *)(a1 + 48) = v63;
        }
        else
        {
          v27 = *(_OWORD *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v28 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)a1 = *v22;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *v22 = v27;
        *(_OWORD *)(a1 + 80) = v26;
      }
LABEL_44:
      if (*(double *)(a2 - 8) >= *(double *)(a1 + 88))
        return 1;
      v64 = (_OWORD *)(a2 - 32);
      v66 = *v22;
      v65 = *(_OWORD *)(a1 + 80);
      v67 = *(_OWORD *)(a2 - 16);
      *v22 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 80) = v67;
      *v64 = v66;
      v64[1] = v65;
      if (*(double *)(a1 + 88) >= *(double *)(a1 + 56))
        return 1;
      v69 = *v15;
      v68 = *(_OWORD *)(a1 + 48);
      v70 = *(_OWORD *)(a1 + 80);
      *v15 = *v22;
      *(_OWORD *)(a1 + 48) = v70;
      *v22 = v69;
      *(_OWORD *)(a1 + 80) = v68;
      if (*(double *)(a1 + 56) >= *(double *)(a1 + 24))
        return 1;
LABEL_47:
      v72 = *(_OWORD *)a1;
      v71 = *(_OWORD *)(a1 + 16);
      v73 = v15[1];
      *(_OWORD *)a1 = *v15;
      *(_OWORD *)(a1 + 16) = v73;
      *v15 = v72;
      v15[1] = v71;
      return 1;
    case 5:
      sub_20EDB10FC((double *)a1, (double *)(a1 + 32), (double *)(a1 + 64), (double *)(a1 + 96), (__int128 *)(a2 - 32), a3);
      return 1;
    default:
      v4 = a1 + 64;
      v5 = (__int128 *)(a1 + 32);
      v6 = *(double *)(a1 + 56);
      v7 = *(double *)(a1 + 24);
      v8 = *(double *)(a1 + 88);
      if (v6 >= v7)
      {
        if (v8 < v6)
        {
          v30 = *v5;
          v29 = *(_OWORD *)(a1 + 48);
          v31 = *(_OWORD *)(a1 + 80);
          *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 48) = v31;
          *(_OWORD *)v4 = v30;
          *(_OWORD *)(a1 + 80) = v29;
          if (*(double *)(a1 + 56) < v7)
          {
            v33 = *(_OWORD *)a1;
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)a1 = *v5;
            *(_OWORD *)(a1 + 16) = v34;
            *v5 = v33;
            *(_OWORD *)(a1 + 48) = v32;
          }
        }
      }
      else
      {
        if (v8 >= v6)
        {
          v45 = *(_OWORD *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v5;
          *(_OWORD *)(a1 + 16) = v46;
          *v5 = v45;
          *(_OWORD *)(a1 + 48) = v44;
          if (v8 >= *(double *)(a1 + 56))
            goto LABEL_28;
          v10 = *v5;
          v9 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 48) = v47;
        }
        else
        {
          v10 = *(_OWORD *)a1;
          v9 = *(_OWORD *)(a1 + 16);
          v11 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)a1 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 16) = v11;
        }
        *(_OWORD *)v4 = v10;
        *(_OWORD *)(a1 + 80) = v9;
      }
LABEL_28:
      v48 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      break;
  }
  while (1)
  {
    v52 = *(double *)(v48 + 24);
    if (v52 < *(double *)(v4 + 24))
    {
      v74 = *(_OWORD *)v48;
      v75 = *(_QWORD *)(v48 + 16);
      v53 = v49;
      do
      {
        v54 = a1 + v53;
        v55 = *(_OWORD *)(a1 + v53 + 80);
        *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + v53 + 64);
        *(_OWORD *)(v54 + 112) = v55;
        if (v53 == -64)
        {
          v51 = a1;
          goto LABEL_31;
        }
        v53 -= 32;
      }
      while (v52 < *(double *)(v54 + 56));
      v51 = a1 + v53 + 96;
LABEL_31:
      *(_OWORD *)v51 = v74;
      *(_QWORD *)(v51 + 16) = v75;
      *(double *)(v51 + 24) = v52;
      if (++v50 == 8)
        return v48 + 32 == a2;
    }
    v4 = v48;
    v49 += 32;
    v48 += 32;
    if (v48 == a2)
      return 1;
  }
}

__n128 sub_20EDB10FC(double *a1, double *a2, double *a3, double *a4, __int128 *a5, __n128 result)
{
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v6 = a2[3];
  v7 = a3[3];
  if (v6 >= a1[3])
  {
    if (v7 < v6)
    {
      v10 = *(_OWORD *)a2;
      result = *(__n128 *)(a2 + 2);
      v11 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v11;
      *(_OWORD *)a3 = v10;
      *((__n128 *)a3 + 1) = result;
      if (a2[3] < a1[3])
      {
        v12 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 2);
        v13 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v13;
        *(_OWORD *)a2 = v12;
        *((__n128 *)a2 + 1) = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      v8 = *(_OWORD *)a1;
      result = *(__n128 *)(a1 + 2);
      v9 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_OWORD *)a1 + 1) = v9;
LABEL_9:
      *(_OWORD *)a3 = v8;
      *((__n128 *)a3 + 1) = result;
      goto LABEL_10;
    }
    v14 = *(_OWORD *)a1;
    result = *(__n128 *)(a1 + 2);
    v15 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v15;
    *(_OWORD *)a2 = v14;
    *((__n128 *)a2 + 1) = result;
    if (a3[3] < a2[3])
    {
      v8 = *(_OWORD *)a2;
      result = *(__n128 *)(a2 + 2);
      v16 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4[3] < a3[3])
  {
    v17 = *(_OWORD *)a3;
    result = *(__n128 *)(a3 + 2);
    v18 = *((_OWORD *)a4 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_OWORD *)a3 + 1) = v18;
    *(_OWORD *)a4 = v17;
    *((__n128 *)a4 + 1) = result;
    if (a3[3] < a2[3])
    {
      v19 = *(_OWORD *)a2;
      result = *(__n128 *)(a2 + 2);
      v20 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v20;
      *(_OWORD *)a3 = v19;
      *((__n128 *)a3 + 1) = result;
      if (a2[3] < a1[3])
      {
        v21 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 2);
        v22 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v22;
        *(_OWORD *)a2 = v21;
        *((__n128 *)a2 + 1) = result;
      }
    }
  }
  result.n128_u64[0] = *((_QWORD *)a5 + 3);
  if (result.n128_f64[0] < a4[3])
  {
    v23 = *(_OWORD *)a4;
    result = *(__n128 *)(a4 + 2);
    v24 = a5[1];
    *(_OWORD *)a4 = *a5;
    *((_OWORD *)a4 + 1) = v24;
    *a5 = v23;
    a5[1] = (__int128)result;
    result.n128_f64[0] = a4[3];
    if (result.n128_f64[0] < a3[3])
    {
      v25 = *(_OWORD *)a3;
      result = *(__n128 *)(a3 + 2);
      v26 = *((_OWORD *)a4 + 1);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_OWORD *)a3 + 1) = v26;
      *(_OWORD *)a4 = v25;
      *((__n128 *)a4 + 1) = result;
      result.n128_f64[0] = a3[3];
      if (result.n128_f64[0] < a2[3])
      {
        v27 = *(_OWORD *)a2;
        result = *(__n128 *)(a2 + 2);
        v28 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v28;
        *(_OWORD *)a3 = v27;
        *((__n128 *)a3 + 1) = result;
        result.n128_f64[0] = a2[3];
        if (result.n128_f64[0] < a1[3])
        {
          v29 = *(_OWORD *)a1;
          result = *(__n128 *)(a1 + 2);
          v30 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v30;
          *(_OWORD *)a2 = v29;
          *((__n128 *)a2 + 1) = result;
        }
      }
    }
  }
  return result;
}

double *sub_20EDB1288(double *a1, double *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double *v14;
  uint64_t v15;
  double v16;
  double *v17;
  double *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  double *v25;
  __int128 v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  double *v34;
  __int128 v35;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  double *v40;
  double v41;
  __int128 *v42;
  __int128 *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;

  if (a1 == a2)
    return a3;
  v3 = (char *)a2 - (char *)a1;
  v4 = ((char *)a2 - (char *)a1) >> 5;
  if ((char *)a2 - (char *)a1 >= 33 && (unint64_t)v3 >= 0x40)
  {
    v37 = (unint64_t)(v4 - 2) >> 1;
    v38 = v37;
    do
    {
      if (v37 >= v38)
      {
        v39 = (2 * v38) | 1;
        v40 = &a1[4 * v39];
        if (2 * v38 + 2 < v4 && v40[3] < v40[7])
        {
          v40 += 4;
          v39 = 2 * v38 + 2;
        }
        v41 = a1[4 * v38 + 3];
        if (v40[3] >= v41)
        {
          v42 = (__int128 *)&a1[4 * v38];
          v49 = *v42;
          v52 = *((_QWORD *)v42 + 2);
          do
          {
            v43 = v42;
            v42 = (__int128 *)v40;
            v44 = *((_OWORD *)v40 + 1);
            *v43 = *(_OWORD *)v40;
            v43[1] = v44;
            if (v37 < v39)
              break;
            v45 = 2 * v39;
            v39 = (2 * v39) | 1;
            v40 = &a1[4 * v39];
            v46 = v45 + 2;
            if (v46 < v4 && v40[3] < v40[7])
            {
              v40 += 4;
              v39 = v46;
            }
          }
          while (v40[3] >= v41);
          *((_QWORD *)v42 + 2) = v52;
          *v42 = v49;
          *((double *)v42 + 3) = v41;
        }
      }
      v23 = v38-- <= 0;
    }
    while (!v23);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 64)
    {
      v6 = a2;
      do
      {
        if (v6[3] < a1[3])
        {
          v8 = *(_OWORD *)v6;
          v7 = *((_OWORD *)v6 + 1);
          v9 = *((_OWORD *)a1 + 1);
          *(_OWORD *)v6 = *(_OWORD *)a1;
          *((_OWORD *)v6 + 1) = v9;
          *(_OWORD *)a1 = v8;
          *((_OWORD *)a1 + 1) = v7;
        }
        v6 += 4;
      }
      while (v6 != a3);
LABEL_25:
      v5 = a3;
      goto LABEL_26;
    }
    v10 = a2;
    while (1)
    {
      if (v10[3] < a1[3])
      {
        v12 = *(_OWORD *)v10;
        v11 = *((_OWORD *)v10 + 1);
        v13 = *((_OWORD *)a1 + 1);
        *(_OWORD *)v10 = *(_OWORD *)a1;
        *((_OWORD *)v10 + 1) = v13;
        *(_OWORD *)a1 = v12;
        *((_OWORD *)a1 + 1) = v11;
        if (v3 == 64 || a1[7] >= a1[11])
        {
          v14 = a1 + 4;
          v15 = 1;
          v16 = a1[3];
          if (a1[7] >= v16)
          {
LABEL_19:
            v47 = *(_OWORD *)a1;
            v50 = *((_QWORD *)a1 + 2);
            v17 = a1;
            do
            {
              v18 = v17;
              v17 = v14;
              v19 = *((_OWORD *)v14 + 1);
              *(_OWORD *)v18 = *(_OWORD *)v14;
              *((_OWORD *)v18 + 1) = v19;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15)
                break;
              v20 = 2 * v15;
              v15 = (2 * v15) | 1;
              v14 = &a1[4 * v15];
              v21 = v20 + 2;
              if (v21 < v4 && v14[3] < v14[7])
              {
                v14 += 4;
                v15 = v21;
              }
            }
            while (v14[3] >= v16);
            *((_QWORD *)v17 + 2) = v50;
            *(_OWORD *)v17 = v47;
            v17[3] = v16;
          }
        }
        else
        {
          v14 = a1 + 8;
          v15 = 2;
          v16 = a1[3];
          if (a1[11] >= v16)
            goto LABEL_19;
        }
      }
      v10 += 4;
      if (v10 == a3)
        goto LABEL_25;
    }
  }
LABEL_26:
  if (v3 >= 33)
  {
    v22 = (unint64_t)v3 >> 5;
    do
    {
      v24 = 0;
      v48 = *(_OWORD *)a1;
      v51 = *((_OWORD *)a1 + 1);
      v25 = a1;
      do
      {
        v27 = v25;
        v25 += 4 * v24 + 4;
        v28 = 2 * v24;
        v24 = (2 * v24) | 1;
        v29 = v28 + 2;
        if (v29 < v22 && v25[3] < v25[7])
        {
          v25 += 4;
          v24 = v29;
        }
        v26 = *((_OWORD *)v25 + 1);
        *(_OWORD *)v27 = *(_OWORD *)v25;
        *((_OWORD *)v27 + 1) = v26;
      }
      while (v24 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
      a2 -= 4;
      if (v25 == a2)
      {
        *(_OWORD *)v25 = v48;
        *((_OWORD *)v25 + 1) = v51;
      }
      else
      {
        v30 = *((_OWORD *)a2 + 1);
        *(_OWORD *)v25 = *(_OWORD *)a2;
        *((_OWORD *)v25 + 1) = v30;
        *(_OWORD *)a2 = v48;
        *((_OWORD *)a2 + 1) = v51;
        v31 = (char *)v25 - (char *)a1 + 32;
        if (v31 >= 33)
        {
          v32 = (((unint64_t)v31 >> 5) - 2) >> 1;
          v33 = v25[3];
          if (a1[4 * v32 + 3] < v33)
          {
            v54 = *((_QWORD *)v25 + 2);
            v53 = *(_OWORD *)v25;
            do
            {
              v34 = v25;
              v25 = &a1[4 * v32];
              v35 = *((_OWORD *)v25 + 1);
              *(_OWORD *)v34 = *(_OWORD *)v25;
              *((_OWORD *)v34 + 1) = v35;
              if (!v32)
                break;
              v32 = (v32 - 1) >> 1;
            }
            while (a1[4 * v32 + 3] < v33);
            *(_OWORD *)v25 = v53;
            *((_QWORD *)v25 + 2) = v54;
            v25[3] = v33;
          }
        }
      }
      v23 = v22-- <= 2;
    }
    while (!v23);
  }
  return v5;
}

void **sub_20EDB165C(void **a1)
{
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v2 = a1[41];
  if (v2)
  {
    a1[42] = v2;
    operator delete(v2);
  }
  v3 = (char *)a1[38];
  if (v3)
  {
    v4 = (char *)a1[39];
    v5 = a1[38];
    if (v4 != v3)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 3);
        if (v6)
          MEMORY[0x212BC6368](v6, 0x1000C8052888210);
        v4 -= 48;
      }
      while (v4 != v3);
      v5 = a1[38];
    }
    a1[39] = v3;
    operator delete(v5);
  }
  sub_20F42FE8C(a1 + 11);
  v7 = a1[8];
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8052888210);
  v8 = (char *)*a1;
  if (*a1)
  {
    v9 = (char *)a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        v11 = (void *)*((_QWORD *)v9 - 3);
        if (v11)
        {
          *((_QWORD *)v9 - 2) = v11;
          operator delete(v11);
        }
        v12 = *((_QWORD *)v9 - 7);
        if (v12)
          MEMORY[0x212BC6368](v12, 0x1000C80BDFB0063);
        v13 = (void *)*((_QWORD *)v9 - 14);
        if (v13)
        {
          *((_QWORD *)v9 - 13) = v13;
          operator delete(v13);
        }
        v9 -= 112;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

char **sub_20EDB1780(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  if (*((_BYTE *)a1 + 304))
  {
    sub_20F42FE8C(a1 + 11);
    v2 = a1[8];
    if (v2)
      MEMORY[0x212BC6368](v2, 0x1000C8052888210);
    v3 = *a1;
    if (*a1)
    {
      v4 = a1[1];
      v5 = *a1;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v6)
          {
            *((_QWORD *)v4 - 2) = v6;
            operator delete(v6);
          }
          v7 = *((_QWORD *)v4 - 7);
          if (v7)
            MEMORY[0x212BC6368](v7, 0x1000C80BDFB0063);
          v8 = (void *)*((_QWORD *)v4 - 14);
          if (v8)
          {
            *((_QWORD *)v4 - 13) = v8;
            operator delete(v8);
          }
          v4 -= 112;
        }
        while (v4 != v3);
        v5 = *a1;
      }
      a1[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

char ***sub_20EDB1848(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v11 = *v4;
    v12 = (v6 - *v4) >> 6;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58)
      sub_20E867F44();
    v14 = v5 - (_QWORD)v11;
    if (v14 >> 5 > v13)
      v13 = v14 >> 5;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
      v15 = 0x3FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 58)
        sub_20E877A38();
      v16 = (char *)operator new(v15 << 6);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[64 * v12];
    v18 = a2[1];
    *(_OWORD *)v17 = *a2;
    *((_OWORD *)v17 + 1) = v18;
    v19 = a2[3];
    *((_OWORD *)v17 + 2) = a2[2];
    *((_OWORD *)v17 + 3) = v19;
    v10 = v17 + 64;
    if (v6 != v11)
    {
      do
      {
        v20 = *((_OWORD *)v6 - 4);
        v21 = *((_OWORD *)v6 - 3);
        v22 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v17 - 1) = v22;
        *((_OWORD *)v17 - 4) = v20;
        *((_OWORD *)v17 - 3) = v21;
        v17 -= 64;
        v6 -= 64;
      }
      while (v6 != v11);
      v6 = *v4;
    }
    *v4 = v17;
    v4[1] = v10;
    v4[2] = &v16[64 * v15];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[3];
    *((_OWORD *)v6 + 2) = a2[2];
    *((_OWORD *)v6 + 3) = v9;
    *(_OWORD *)v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    v10 = v6 + 64;
  }
  v4[1] = v10;
  return a1;
}

void sub_20EDB196C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;

  v2 = (_QWORD *)a1[8];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[6];
  a1[6] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[3];
  if (v5)
  {
    do
    {
      v7 = (_QWORD *)*v5;
      v8 = (void *)v5[3];
      if (v8)
      {
        v5[4] = v8;
        operator delete(v8);
      }
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = (void *)a1[1];
  a1[1] = 0;
  if (v6)
    operator delete(v6);
}

char *sub_20EDB1A04(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *(_QWORD *)v10 = *v17;
LABEL_90:
    *v17 = v10;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_20E877A38();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_68;
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v13;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v13;
    v35 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v16 = *a1;
      v17 = *(_QWORD **)(*a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*a1 + 8 * v37))
      {
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
LABEL_62:
        v25 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v37) = v25;
        v25 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        a1[1] = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = a1[1];
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v5) = v13;
  if (*(_QWORD *)v10)
  {
    v40 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_20EDB1EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EDB1EC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDB1EC4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_20EDB1F30(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20EDB223C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20EDB2250(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = (char *)operator new(0x68uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 24) = 1065353216;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *(_QWORD *)v10 = *v17;
LABEL_90:
    *v17 = v10;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_20E877A38();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_68;
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v13;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v13;
    v35 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v16 = *a1;
      v17 = *(_QWORD **)(*a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*a1 + 8 * v37))
      {
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
LABEL_62:
        v25 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v37) = v25;
        v25 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        a1[1] = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = a1[1];
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v5) = v13;
  if (*(_QWORD *)v10)
  {
    v40 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_20EDB2710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EDB2724((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDB2724(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20EDB196C(v2 + 2);
    operator delete(v2);
  }
  return a1;
}

void sub_20EDB2768(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

_QWORD *sub_20EDB2938(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v5) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20EDB2C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EAFA1EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EDB2C30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  uint64_t *v15;

  v10 = a1;
  v11 = (std::string *)"{";
  v12 = a1;
  v13 = (std::string *)"{";
  v14 = (std::string *)"{";
  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 == -1)
    goto LABEL_8;
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, uint64_t))off_24C9E95F8[v2])(&v9, a1);
  std::to_string(&v9, *(_QWORD *)a2);
  v10 = a1;
  v11 = &v9;
  v12 = a1;
  v13 = &v9;
  v14 = &v9;
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    sub_20E877AB8();
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C9E9598[v5])(&v15, a1);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v10 = a1;
  v11 = (std::string *)",";
  v12 = a1;
  v13 = (std::string *)",";
  v14 = (std::string *)",";
  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_8;
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, uint64_t))off_24C9E95F8[v6])(&v9, a1);
  sub_20EDB2DA4((uint64_t)&v10, a1, (unint64_t **)(a2 + 8));
  v10 = a1;
  v11 = (std::string *)"}";
  v12 = a1;
  v13 = (std::string *)"}";
  v14 = (std::string *)"}";
  v7 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v7 == -1)
LABEL_8:
    sub_20E877AB8();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C9E95F8[v7])(&v9, a1);
}

void sub_20EDB2D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDB2DA4(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t *v21;

  if ((char *)a3[1] - (char *)*a3 <= 7)
  {
    v16 = a2;
    v17 = (std::string *)"{}";
    v18 = a2;
    v19 = (std::string *)"{}";
    v20 = (std::string *)"{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
      return ((uint64_t (*)(std::string *, uint64_t))off_24C9E95E0[v4])(&v15, a2);
    }
LABEL_19:
    sub_20E877AB8();
  }
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = a2;
  v19 = (std::string *)"{";
  v20 = (std::string *)"{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, uint64_t))off_24C9E95F8[v6])(&v15, a2);
  v8 = *a3;
  std::to_string(&v15, **a3);
  v16 = a2;
  v17 = &v15;
  v18 = a2;
  v19 = &v15;
  v20 = &v15;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9E9598[v9])(&v21, a2);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    v10 = a3[1];
    v11 = v8 + 1;
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v16 = a2;
        v17 = (std::string *)",";
        v18 = a2;
        v19 = (std::string *)",";
        v20 = (std::string *)",";
        v12 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_19;
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
        ((void (*)(std::string *, uint64_t))off_24C9E95F8[v12])(&v15, a2);
        std::to_string(&v15, *v11);
        v16 = a2;
        v17 = &v15;
        v18 = a2;
        v19 = &v15;
        v20 = &v15;
        v13 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v13 == -1)
          sub_20E877AB8();
        v21 = &v16;
        ((void (*)(uint64_t **, uint64_t))off_24C9E9598[v13])(&v21, a2);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        ++v11;
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = a3[1];
    v11 = v8 + 1;
    if (v11 != v10)
      goto LABEL_12;
  }
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = a2;
  v19 = (std::string *)"}";
  v20 = (std::string *)"}";
  v14 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v14 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C9E95F8[v14])(&v15, a2);
}

void sub_20EDB2FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EDB2FF0(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

uint64_t sub_20EDB3030(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

uint64_t sub_20EDB3070(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

__n128 sub_20EDB30B0(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  __n128 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __n128 *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int32 v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unsigned __int32 v41;
  __n128 *v42;
  unsigned __int32 v43;
  __n128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  int v49;
  __int32 v50;
  __n128 *v51;
  __n128 *v52;
  __n128 *v53;
  uint64_t v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  __n128 *v59;
  uint64_t v60;
  char *v61;
  __n128 *v62;
  __n128 result;
  __n128 *v64;
  __n128 *v65;
  __n128 *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  __n128 *v73;
  __n128 *v74;
  int64_t v75;
  unint64_t v76;
  char *v77;
  __n128 *v78;
  uint64_t v79;
  uint64_t v80;
  __n128 *v81;
  __n128 *v82;
  uint64_t v83;
  __n128 v84;
  unint64_t v85;
  char *v86;
  __n128 *v87;
  uint64_t v88;
  uint64_t v89;
  __n128 *v90;
  __n128 *v91;
  uint64_t v92;
  __n128 v93;
  unsigned __int32 v94;
  unsigned __int32 v95;
  _BOOL4 v96;
  unsigned __int32 v97;
  __n128 *v98;
  unsigned int v99;
  unsigned int v100;
  BOOL v101;
  unint64_t v102;
  __n128 *v103;
  char *v104;
  unsigned __int32 *v105;
  unsigned __int32 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 *v111;
  unsigned __int32 v112;
  unsigned __int32 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  if (!a6)
    return result;
  v9 = a6;
  while (a5 > a8 && v9 > a8)
  {
    if (!a5)
      return result;
    v14 = 0;
    v15 = a2->n128_u32[0];
    v16 = -a5;
    while (1)
    {
      v17 = a1->n128_u32[v14 / 4];
      if (v15 < v17)
        break;
      v14 += 4;
      v101 = __CFADD__(v16++, 1);
      if (v101)
        return result;
    }
    v18 = (__n128 *)((char *)a1 + v14);
    if (-v16 >= v9)
    {
      if (v16 == -1)
      {
        a1->n128_u32[v14 / 4] = v15;
        a2->n128_u32[0] = v17;
        return result;
      }
      if (v16 <= 0)
        v36 = -v16;
      else
        v36 = 1 - v16;
      v28 = v36 >> 1;
      v22 = (__n128 *)((char *)a1 + 4 * (v36 >> 1) + v14);
      v21 = (char *)a2;
      if (a2 != a3)
      {
        v37 = ((char *)a3 - (char *)a2) >> 2;
        v21 = (char *)a2;
        do
        {
          v38 = v37 >> 1;
          v39 = &v21[4 * (v37 >> 1)];
          v41 = *(_DWORD *)v39;
          v40 = v39 + 4;
          v37 += ~(v37 >> 1);
          if (v41 < v22->n128_u32[0])
            v21 = v40;
          else
            v37 = v38;
        }
        while (v37);
      }
      v20 = (v21 - (char *)a2) >> 2;
      if (v22 != a2)
      {
LABEL_22:
        v29 = v21 - (char *)a2;
        if (v21 == (char *)a2)
        {
          a2 = v22;
        }
        else
        {
          v30 = (__n128 *)&v22->n128_u8[4];
          v119 = v20;
          if (&v22->n128_u8[4] == (unsigned __int8 *)a2)
          {
            v112 = v22->n128_u32[0];
            v115 = a7;
            v117 = a4;
            v42 = a3;
            v114 = v28;
            memmove(v22, a2, v21 - (char *)a2);
            a4 = v117;
            v20 = v119;
            v28 = v114;
            a7 = v115;
            v18 = (__n128 *)((char *)a1 + v14);
            a3 = v42;
            a2 = (__n128 *)((char *)v22 + v29);
            *(unsigned __int32 *)((char *)v22->n128_u32 + v29) = v112;
          }
          else
          {
            v31 = v28;
            v32 = &a2->n128_i8[4];
            if (&a2->n128_u8[4] == (unsigned __int8 *)v21)
            {
              v43 = *((_DWORD *)v21 - 1);
              a2 = (__n128 *)&v22->n128_u8[4];
              if (v21 - 4 != (char *)v22)
              {
                v116 = a7;
                v118 = a4;
                v44 = a3;
                v113 = *((_DWORD *)v21 - 1);
                memmove(&v22->n128_u8[4], v22, v21 - 4 - (char *)v22);
                v43 = v113;
                v18 = (__n128 *)((char *)a1 + v14);
                a7 = v116;
                a4 = v118;
                a3 = v44;
              }
              v22->n128_u32[0] = v43;
              v28 = v31;
              v20 = v119;
            }
            else
            {
              v33 = ((char *)a2 - (char *)v22) >> 2;
              if (v33 == v29 >> 2)
              {
                do
                {
                  v34 = v30[-1].n128_i32[3];
                  v30[-1].n128_u32[3] = *((_DWORD *)v32 - 1);
                  *((_DWORD *)v32 - 1) = v34;
                  if (v30 == a2)
                    break;
                  v30 = (__n128 *)((char *)v30 + 4);
                  v35 = v32 == v21;
                  v32 += 4;
                }
                while (!v35);
              }
              else
              {
                v45 = v29 >> 2;
                v46 = ((char *)a2 - (char *)v22) >> 2;
                do
                {
                  v47 = v46;
                  v46 = v45;
                  v45 = v47 % v45;
                }
                while (v45);
                if (v46)
                {
                  v48 = (__n128 *)((char *)v22 + 4 * v46);
                  do
                  {
                    v50 = v48[-1].n128_i32[3];
                    v48 = (__n128 *)((char *)v48 - 4);
                    v49 = v50;
                    v51 = (__n128 *)((char *)v48 + 4 * v33);
                    v52 = v48;
                    do
                    {
                      v53 = v51;
                      v52->n128_u32[0] = v51->n128_u32[0];
                      v54 = (v21 - (char *)v51) >> 2;
                      v55 = __OFSUB__(v33, v54);
                      v57 = v33 - v54;
                      v56 = (v57 < 0) ^ v55;
                      v51 = (__n128 *)((char *)v22 + 4 * v57);
                      if (v56)
                        v51 = (__n128 *)((char *)v53 + 4 * v33);
                      v52 = v53;
                    }
                    while (v51 != v48);
                    v53->n128_u32[0] = v49;
                  }
                  while (v48 != v22);
                }
                a2 = (__n128 *)((char *)v22 + 4 * (v29 >> 2));
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v9 >= 0)
        v19 = v9;
      else
        v19 = v9 + 1;
      v20 = v19 >> 1;
      v21 = (char *)a2 + 4 * (v19 >> 1);
      v22 = a2;
      if ((char *)a2 - (char *)a1 != v14)
      {
        v23 = (uint64_t)((char *)a2 - (char *)a1 - v14) >> 2;
        v22 = (__n128 *)((char *)a1 + v14);
        do
        {
          v24 = v23 >> 1;
          v25 = (_DWORD *)v22 + (v23 >> 1);
          v27 = *v25;
          v26 = (__n128 *)(v25 + 1);
          v23 += ~(v23 >> 1);
          if (*(_DWORD *)v21 < v27)
            v23 = v24;
          else
            v22 = v26;
        }
        while (v23);
      }
      v28 = (uint64_t)((char *)v22 - (char *)a1 - v14) >> 2;
      if (v22 != a2)
        goto LABEL_22;
    }
    a2 = (__n128 *)v21;
LABEL_57:
    a5 = -(v28 + v16);
    v58 = v9 - v20;
    if (v28 + v20 >= v9 - (v28 + v20) - v16)
    {
      v65 = a2;
      v66 = a2;
      v67 = v21;
      v68 = a4;
      v69 = v28;
      v70 = v20;
      v71 = v9 - v20;
      v72 = a7;
      v73 = v18;
      sub_20EDB30B0(v66, v67, a3, a4, a5, v71, a7, a8);
      v74 = v73;
      a4 = v68;
      a7 = v72;
      a2 = v22;
      a5 = v69;
      a3 = v65;
      v9 = v70;
      a1 = v74;
      if (!v70)
        return result;
    }
    else
    {
      v59 = (__n128 *)((char *)a1 + v14);
      v60 = a4;
      v61 = a7;
      v62 = a3;
      sub_20EDB30B0(v59, v22, a2, a4, v28, v20, a7, a8);
      a4 = v60;
      a3 = v62;
      a7 = v61;
      v64 = a2;
      a2 = (__n128 *)v21;
      v9 = v58;
      a1 = v64;
      if (!v58)
        return result;
    }
  }
  if (a5 <= v9)
  {
    if (a1 != a2)
    {
      v85 = (char *)a2 - (char *)a1 - 4;
      v86 = a7;
      v87 = a1;
      if (v85 < 0x1C)
        goto LABEL_108;
      v86 = a7;
      v87 = a1;
      if ((unint64_t)(a7 - (char *)a1) < 0x20)
        goto LABEL_108;
      v88 = (v85 >> 2) + 1;
      v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
      v86 = &a7[v89];
      v87 = (__n128 *)((char *)a1 + v89);
      v90 = a1 + 1;
      v91 = (__n128 *)(a7 + 16);
      v92 = v88 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        result = v90[-1];
        v93 = *v90;
        v91[-1] = result;
        *v91 = v93;
        v90 += 2;
        v91 += 2;
        v92 -= 8;
      }
      while (v92);
      if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_108:
        do
        {
          v94 = v87->n128_u32[0];
          v87 = (__n128 *)((char *)v87 + 4);
          *(_DWORD *)v86 = v94;
          v86 += 4;
        }
        while (v87 != a2);
      }
      if (v86 != a7)
      {
        while (a2 != a3)
        {
          v95 = a2->n128_u32[0];
          v96 = a2->n128_u32[0] >= *(_DWORD *)a7;
          if (a2->n128_u32[0] >= *(_DWORD *)a7)
            v95 = *(_DWORD *)a7;
          a2 = (__n128 *)((char *)a2 + 4 * (a2->n128_u32[0] < *(_DWORD *)a7));
          a7 += 4 * v96;
          a1->n128_u32[0] = v95;
          a1 = (__n128 *)((char *)a1 + 4);
          if (a7 == v86)
            return result;
        }
        memmove(a1, a7, v86 - a7);
      }
    }
    return result;
  }
  v75 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v76 = v75 - 4;
  if ((unint64_t)(v75 - 4) < 0x1C)
  {
    v77 = a7;
    v78 = a2;
    do
    {
LABEL_86:
      v97 = v78->n128_u32[0];
      v78 = (__n128 *)((char *)v78 + 4);
      *(_DWORD *)v77 = v97;
      v77 += 4;
    }
    while (v78 != a3);
    goto LABEL_87;
  }
  v77 = a7;
  v78 = a2;
  if ((unint64_t)(a7 - (char *)a2) < 0x20)
    goto LABEL_86;
  v79 = (v76 >> 2) + 1;
  v80 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
  v77 = &a7[v80];
  v78 = (__n128 *)((char *)a2 + v80);
  v81 = a2 + 1;
  v82 = (__n128 *)(a7 + 16);
  v83 = v79 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    result = v81[-1];
    v84 = *v81;
    v82[-1] = result;
    *v82 = v84;
    v81 += 2;
    v82 += 2;
    v83 -= 8;
  }
  while (v83);
  if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_86;
LABEL_87:
  if (v77 != a7)
  {
    v98 = a3;
    while (a2 != a1)
    {
      v99 = *((_DWORD *)v77 - 1);
      v100 = a2[-1].n128_u32[3];
      v101 = v99 >= v100;
      if (v99 <= v100)
        v99 = a2[-1].n128_u32[3];
      if (v101)
        v77 -= 4;
      else
        a2 = (__n128 *)((char *)a2 - 4);
      a3[-1].n128_u32[3] = v99;
      a3 = (__n128 *)((char *)a3 - 4);
      v98 = (__n128 *)((char *)v98 - 4);
      if (v77 == a7)
        return result;
    }
    v102 = v77 - a7 - 4;
    if (v102 < 0x2C || (unint64_t)(v77 - (char *)v98) < 0x20)
    {
      v103 = a3;
      v104 = v77;
      goto LABEL_100;
    }
    v107 = 0;
    v108 = (v102 >> 2) + 1;
    v109 = 4 * (v108 & 0x7FFFFFFFFFFFFFF8);
    v103 = (__n128 *)((char *)a3 - v109);
    v104 = &v77[-v109];
    v110 = v108 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      result = *(__n128 *)&v77[v107 * 16 - 16];
      v111 = &a3[v107];
      v111[-2] = *(__n128 *)&v77[v107 * 16 - 32];
      v111[-1] = result;
      v107 -= 2;
      v110 -= 8;
    }
    while (v110);
    if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_100:
      v105 = &v103[-1].n128_u32[3];
      do
      {
        v106 = *((_DWORD *)v104 - 1);
        v104 -= 4;
        *v105-- = v106;
      }
      while (v104 != a7);
    }
  }
  return result;
}

