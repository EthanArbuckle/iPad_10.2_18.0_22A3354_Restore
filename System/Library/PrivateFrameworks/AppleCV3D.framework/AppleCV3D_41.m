uint64_t sub_20FA21F14(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  int8x16_t v17;
  int64x2_t v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  char *i8;
  int8x16_t v23;
  int64x2_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  int8x16_t v34;
  int8x16_t v35;
  int64x2_t v36;
  __int128 v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  int64x2_t v53;
  unint64_t v54;
  unint64_t v55;
  int8x16_t v56;
  unint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unsigned int v71;
  int8x16_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  int64x2_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  _OWORD *v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  _OWORD *v111;
  size_t v112;
  BOOL v113;
  uint64_t v114;
  int64x2_t v115;
  int64x2_t *v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  int64x2_t *v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _OWORD *v127;
  __int128 *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  int8x16_t *v136;
  int8x16_t v137;
  int8x16_t *v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t *v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t *v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t *v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t *v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t *v156;
  int8x16_t *v157;
  int8x16_t *v158;
  unint64_t v159;
  unint64_t v160;
  int8x16_t v161;
  int8x16_t v162;
  float64x2_t v163;
  float64x2_t *v164;
  unint64_t v165;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  __int128 v190;
  unint64_t v191;
  int8x16_t v192;
  unint64_t v193;
  __int128 v194;
  __int128 v195;
  int8x16_t v196;
  __int128 v197;
  __int128 v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  _BYTE *v208;
  int8x16_t v209;
  unint64_t v210;
  int64x2_t v211;
  uint64_t v212[2];

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      v9 = a2;
      v173 = 0;
      v10 = (unint64_t *)(result + 16);
      result = 24;
      while (1)
      {
        v11 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v11)
          break;
LABEL_5:
        if (++v173 >= v5)
          return result;
      }
      v12 = 0;
      v13 = *(_DWORD *)(*a4 + 4 * v173);
      v14 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v173);
      v172 = *(unsigned int *)(v6 + 8);
      v171 = v13;
      v170 = v14;
      while (1)
      {
        v71 = *(_DWORD *)(*v8 + 4 * v12);
        v72 = *(int8x16_t **)v9;
        v73 = *(unsigned int *)(v9 + 16);
        v74 = *(_QWORD *)(v14 + 8 * v12);
        if (v7 && v71 > v13)
        {
          if (v74 == -1)
          {
            v75 = *(_QWORD *)(v6 + 80);
            if (v75)
            {
              v77 = *(_QWORD *)(v6 + 48);
              v76 = *(_QWORD *)(v6 + 56);
              v78 = ((v76 - v77) << 6) - 1;
              v79 = *(_QWORD *)(v6 + 72);
              if (v76 == v77)
                v78 = 0;
              v15 = *(_QWORD *)(v6 + 16)
                  + 8
                  * *(_QWORD *)(*(_QWORD *)(v77 + (((unint64_t)(v79 + v75 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((v79 + v75 - 1) & 0x1FF));
              *(_QWORD *)(v6 + 80) = v75 - 1;
              if ((unint64_t)(v78 - (v75 + v79) + 1) >= 0x400)
              {
                operator delete(*(void **)(v76 - 8));
                v14 = v170;
                v13 = v171;
                v11 = v172;
                result = 24;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v85 = *(void **)(v6 + 24);
              v211.i64[0] = 0;
              sub_20F1C5A3C(v10, v85, 0x36uLL, v211.i64);
              v14 = v170;
              v13 = v171;
              v11 = v172;
              result = 24;
              v15 = *(_QWORD *)(v6 + 24) - 432;
            }
            *(_QWORD *)(v14 + 8 * v12) = (v15 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v173);
          }
          else
          {
            v15 = *v10 + 8 * v74;
          }
          v16 = (int8x16_t *)((char *)v72 + 8 * v13 + 8 * (_DWORD)v73 * v71);
          v209 = v16[3];
          v18 = *(int64x2_t *)v16;
          v17 = v16[1];
          v19 = &v16->i8[8 * v73];
          v51 = *((_OWORD *)v19 + 2);
          v62 = *((int8x16_t *)v19 + 3);
          v21 = *(int64x2_t *)v19;
          v20 = *((_OWORD *)v19 + 1);
          i8 = v16[v73].i8;
          v23 = *((int8x16_t *)i8 + 3);
          v24 = *(int64x2_t *)i8;
          v194 = *((_OWORD *)i8 + 1);
          *((_QWORD *)&v47 + 1) = *((_QWORD *)i8 + 3);
          v195 = *((_OWORD *)i8 + 2);
          v25 = &v16->i8[24 * v73];
          v26 = *((_OWORD *)v25 + 2);
          v61 = *((int8x16_t *)v25 + 3);
          v56 = *(int8x16_t *)v25;
          v27 = *((_OWORD *)v25 + 1);
          v28 = v16[2 * v73].i8;
          v190 = *((_OWORD *)v28 + 3);
          v192 = v16[2];
          v197 = *((_OWORD *)v28 + 1);
          v29 = *((_QWORD *)v28 + 3);
          v198 = *((_OWORD *)v28 + 2);
          v41 = *(int64x2_t *)v28;
          v30 = vzip1q_s64(*(int64x2_t *)i8, *(int64x2_t *)v25);
          v31 = &v16->i8[40 * v73];
          v58 = *((int8x16_t *)v31 + 2);
          v32 = *((_OWORD *)v31 + 3);
          v53 = *(int64x2_t *)v31;
          v33 = *((_OWORD *)v31 + 1);
          v34.i64[0] = v16[4].i64[0];
          v193 = *((_QWORD *)v19 + 8);
          v35.i64[0] = *((_QWORD *)i8 + 8);
          v202 = *((_QWORD *)v25 + 8);
          v196.i64[0] = *((_QWORD *)v28 + 8);
          v204 = *((_QWORD *)v31 + 8);
          *(int64x2_t *)v15 = vzip1q_s64(*(int64x2_t *)v16, *(int64x2_t *)v19);
          *(int64x2_t *)(v15 + 16) = v30;
          v36 = vzip1q_s64(v41, v53);
          *(_QWORD *)&v37 = v18.i64[1];
          v38 = v21.u64[1];
          *(_QWORD *)&v39 = v24.i64[1];
          v40 = v56.u64[1];
          v41.i64[0] = v41.i64[1];
          v42 = v53.u64[1];
          v43 = v51;
          *(_QWORD *)&v44 = v17.i64[1];
          *(int64x2_t *)(v15 + 32) = v36;
          v45 = v20;
          v46 = *((_QWORD *)&v20 + 1);
          *(_QWORD *)&v47 = *((_QWORD *)&v47 + 1);
          v199 = v58.i64[0];
          v48 = *((_QWORD *)&v27 + 1);
          v200 = v27;
          *(_QWORD *)&v49 = v29;
          v50 = *((_QWORD *)&v33 + 1);
          *(_QWORD *)&v51 = v192.i64[1];
          v52 = *((_QWORD *)&v43 + 1);
          v53.i64[0] = *((_QWORD *)&v195 + 1);
          v54 = v26;
          v55 = *((_QWORD *)&v26 + 1);
          v56.i64[0] = *((_QWORD *)&v198 + 1);
          v57 = v58.u64[1];
          v58.i64[0] = v209.i64[1];
          v201 = v62.u64[1];
          v207 = v62.i64[0];
          v59.i64[0] = v23.i64[1];
          v203 = v61.u64[1];
          v206 = v61.i64[0];
          v60.i64[0] = v190;
          v61.i64[0] = v17.i64[0];
          v62.i64[0] = *((_QWORD *)&v190 + 1);
          v205 = v32;
          v63 = *((_QWORD *)&v32 + 1);
          goto LABEL_10;
        }
        if (v74 == -1)
          break;
        v15 = *v10 + 8 * v74;
LABEL_84:
        v136 = (int8x16_t *)((char *)v72 + 8 * v71 + 8 * (_DWORD)v73 * v13);
        v162 = v136[1];
        v137 = v136[2];
        v161 = *v136;
        v138 = (int8x16_t *)((char *)v136 + 8 * v73);
        v140 = v138[1];
        v139 = v138[2];
        v141 = *v138;
        v142 = &v136[v73];
        v143 = v142[1];
        v144 = v142[2];
        v61 = *v142;
        v145 = (int8x16_t *)((char *)v136 + 24 * v73);
        v147 = v145[1];
        v146 = v145[2];
        v56 = *v145;
        v148 = &v136[2 * v73];
        v149 = v148[1];
        v150 = v148[2];
        v151 = *v148;
        v152 = (int8x16_t *)((char *)v136 + 40 * v73);
        v154 = v152[1];
        v153 = v152[2];
        v155 = *v152;
        v156 = &v136[3 * v73];
        v157 = (int8x16_t *)((char *)v136 + 56 * v73);
        v158 = &v136[4 * v73];
        v159 = vextq_s8(v137, v137, 8uLL).u64[0];
        v183 = v146.i64[0];
        v184 = vextq_s8(v139, v139, 8uLL).u64[0];
        v181 = v141.i64[0];
        v182 = v140.i64[0];
        v185 = vextq_s8(v140, v140, 8uLL).u64[0];
        v186 = vextq_s8(v141, v141, 8uLL).u64[0];
        *(_QWORD *)&v197 = v144.i64[0];
        *(_QWORD *)&v198 = v150.i64[0];
        v187 = vextq_s8(v144, v144, 8uLL).u64[0];
        *(_QWORD *)&v194 = v143.i64[0];
        *(_QWORD *)&v195 = v149.i64[0];
        v200 = vextq_s8(v143, v143, 8uLL).u64[0];
        v188 = vextq_s8(v61, v61, 8uLL).u64[0];
        v180 = v56.i64[0];
        v177 = vextq_s8(v146, v146, 8uLL).u64[0];
        v178 = vextq_s8(v147, v147, 8uLL).u64[0];
        v179 = vextq_s8(v56, v56, 8uLL).u64[0];
        v199 = vextq_s8(v150, v150, 8uLL).u64[0];
        v160 = vextq_s8(v149, v149, 8uLL).u64[0];
        v192.i64[0] = v151.i64[0];
        v189 = vextq_s8(v151, v151, 8uLL).u64[0];
        v56.i64[0] = v153.i64[0];
        v53.i64[0] = v154.i64[0];
        v174 = vextq_s8(v153, v153, 8uLL).u64[0];
        v175 = vextq_s8(v154, v154, 8uLL).u64[0];
        *(_QWORD *)&v51 = v155.i64[0];
        v176 = vextq_s8(v155, v155, 8uLL).u64[0];
        v23 = v156[1];
        v60 = v156[2];
        v205 = vextq_s8(v60, v60, 8uLL).u64[0];
        v206 = vextq_s8(v23, v23, 8uLL).u64[0];
        v207 = vextq_s8(*v156, *v156, 8uLL).u64[0];
        v209 = *v156;
        v62 = v157[2];
        v191 = vextq_s8(v62, v62, 8uLL).u64[0];
        v59 = v157[1];
        v203 = vextq_s8(v59, v59, 8uLL).u64[0];
        v58 = *v157;
        v201 = vextq_s8(v58, v58, 8uLL).u64[0];
        v35 = v158[1];
        v196 = v158[2];
        v204 = vextq_s8(v196, v196, 8uLL).u64[0];
        v202 = vextq_s8(v35, v35, 8uLL).u64[0];
        v34 = *v158;
        v193 = vextq_s8(v34, v34, 8uLL).u64[0];
        v161.i64[1] = vextq_s8(v161, v161, 8uLL).u64[0];
        v162.i64[1] = vextq_s8(v162, v162, 8uLL).u64[0];
        if (v72 == (int8x16_t *)v15)
        {
          *v72 = v161;
          v72[1] = v162;
          v137.i64[1] = v159;
          v72[2] = v137;
          v15 = (uint64_t)v72;
        }
        else
        {
          *(int8x16_t *)v15 = v161;
          *(int8x16_t *)(v15 + 16) = v162;
          v137.i64[1] = v159;
          *(int8x16_t *)(v15 + 32) = v137;
        }
        *(_QWORD *)&v43 = v189;
        v63 = v191;
        *(_QWORD *)&v33 = v187;
        v45 = v188;
        v54 = v160;
        v40 = v185;
        v38 = v186;
        v41.i64[0] = v139.i64[0];
        v42 = v184;
        *(_QWORD *)&v39 = v182;
        *(_QWORD *)&v49 = v183;
        *(_QWORD *)&v47 = v147.i64[0];
        *(_QWORD *)&v37 = v181;
        v46 = v179;
        *(_QWORD *)&v44 = v180;
        v50 = v177;
        v48 = v178;
        v55 = v175;
        v52 = v176;
        v57 = v174;
LABEL_10:
        *((_QWORD *)&v37 + 1) = v38;
        *((_QWORD *)&v39 + 1) = v40;
        v41.i64[1] = v42;
        v61.i64[1] = v45;
        *(_QWORD *)&v64 = v194;
        *((_QWORD *)&v64 + 1) = v200;
        *(_QWORD *)&v65 = v197;
        *((_QWORD *)&v65 + 1) = v33;
        *((_QWORD *)&v44 + 1) = v46;
        *((_QWORD *)&v47 + 1) = v48;
        *((_QWORD *)&v49 + 1) = v50;
        *(_QWORD *)&v66 = v192.i64[0];
        *((_QWORD *)&v66 + 1) = v43;
        *(_QWORD *)&v67 = v195;
        *((_QWORD *)&v67 + 1) = v54;
        *(_QWORD *)&v68 = v198;
        *((_QWORD *)&v68 + 1) = v199;
        *((_QWORD *)&v51 + 1) = v52;
        v53.i64[1] = v55;
        v56.i64[1] = v57;
        *(_OWORD *)(v15 + 48) = v37;
        *(_OWORD *)(v15 + 64) = v39;
        *(int64x2_t *)(v15 + 80) = v41;
        *(int8x16_t *)(v15 + 96) = v61;
        *(_OWORD *)(v15 + 112) = v64;
        *(_OWORD *)(v15 + 128) = v65;
        *(_OWORD *)(v15 + 144) = v44;
        *(_OWORD *)(v15 + 160) = v47;
        *(_OWORD *)(v15 + 176) = v49;
        *(_OWORD *)(v15 + 192) = v66;
        *(_OWORD *)(v15 + 208) = v67;
        *(_OWORD *)(v15 + 224) = v68;
        *(_OWORD *)(v15 + 240) = v51;
        *(int64x2_t *)(v15 + 256) = v53;
        *(_QWORD *)&v69 = v209.i64[0];
        *((_QWORD *)&v69 + 1) = v207;
        *(int8x16_t *)(v15 + 272) = v56;
        *(_OWORD *)(v15 + 288) = v69;
        v23.i64[1] = v206;
        v60.i64[1] = v205;
        *(int8x16_t *)(v15 + 304) = v23;
        *(int8x16_t *)(v15 + 320) = v60;
        v58.i64[1] = v201;
        v59.i64[1] = v203;
        *(int8x16_t *)(v15 + 336) = v58;
        *(int8x16_t *)(v15 + 352) = v59;
        v62.i64[1] = v63;
        v34.i64[1] = v193;
        *(int8x16_t *)(v15 + 368) = v62;
        *(int8x16_t *)(v15 + 384) = v34;
        v35.i64[1] = v202;
        *(_QWORD *)&v70 = v196.i64[0];
        *((_QWORD *)&v70 + 1) = v204;
        ++v12;
        *(int8x16_t *)(v15 + 400) = v35;
        *(_OWORD *)(v15 + 416) = v70;
        if (v12 == v11)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v80 = *(_QWORD *)(v6 + 80);
      if (v80)
      {
        v82 = *(_QWORD *)(v6 + 48);
        v81 = *(_QWORD *)(v6 + 56);
        v83 = ((v81 - v82) << 6) - 1;
        v84 = *(_QWORD *)(v6 + 72);
        if (v81 == v82)
          v83 = 0;
        v15 = *(_QWORD *)(v6 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v82 + (((unint64_t)(v84 + v80 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v84 + v80 - 1) & 0x1FF));
        *(_QWORD *)(v6 + 80) = v80 - 1;
        if ((unint64_t)(v83 - (v80 + v84) + 1) >= 0x400)
        {
          operator delete(*(void **)(v81 - 8));
          v14 = v170;
          v13 = v171;
          v11 = v172;
          result = 24;
          *(_QWORD *)(v6 + 56) -= 8;
        }
        goto LABEL_83;
      }
      v211.i64[0] = 0;
      v87 = *(_QWORD *)(v6 + 16);
      v86 = *(int64x2_t **)(v6 + 24);
      v88 = (uint64_t)v86->i64 - v87;
      v89 = (uint64_t)((uint64_t)v86->i64 - v87) >> 3;
      v90 = (uint64_t *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8));
      v91 = *(_QWORD *)(v6 + 32);
      if ((unint64_t)(v91 - (_QWORD)v86) < 0x1B0)
      {
        v92 = v89 + 54;
        if ((unint64_t)(v89 + 54) >> 61)
          sub_20E867F44();
        v93 = v91 - v87;
        if (v93 >> 2 > v92)
          v92 = v93 >> 2;
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        v210 = v92;
        if (v92)
        {
          if (v92 >> 61)
            sub_20E877A38();
          v94 = operator new(8 * v92);
          v89 = (uint64_t)((uint64_t)v86->i64 - v87) >> 3;
        }
        else
        {
          v94 = 0;
        }
        v101 = &v94[8 * v89];
        v101[25] = 0u;
        v101[26] = 0u;
        v101[23] = 0u;
        v101[24] = 0u;
        v101[21] = 0u;
        v101[22] = 0u;
        v101[19] = 0u;
        v101[20] = 0u;
        v101[17] = 0u;
        v101[18] = 0u;
        v101[15] = 0u;
        v101[16] = 0u;
        v101[13] = 0u;
        v101[14] = 0u;
        v101[11] = 0u;
        v101[12] = 0u;
        v101[9] = 0u;
        v101[10] = 0u;
        v101[7] = 0u;
        v101[8] = 0u;
        v101[5] = 0u;
        v101[6] = 0u;
        v101[3] = 0u;
        v101[4] = 0u;
        v101[1] = 0u;
        v101[2] = 0u;
        *v101 = 0u;
        if ((int64x2_t *)v87 == v86)
        {
          v103 = &v94[8 * v89];
        }
        else
        {
          if ((unint64_t)(v88 - 8) >= 0x68)
          {
            v102 = (char *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8));
            v103 = &v94[8 * v89];
            if (v87 + (v88 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v94[v88 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v104 = ((unint64_t)(v88 - 8) >> 3) + 1;
              v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
              v102 = (char *)&v90[v105 / 0xFFFFFFFFFFFFFFF8];
              v103 = (char *)v101 - v105;
              v106 = &v94[8 * v89 - 16];
              v107 = (__int128 *)(v87 + 8 * v89 - 16);
              v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v109 = *v107;
                *(v106 - 1) = *(v107 - 1);
                *v106 = v109;
                v106 -= 2;
                v107 -= 2;
                v108 -= 4;
              }
              while (v108);
              if (v104 == (v104 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_51;
            }
          }
          else
          {
            v102 = (char *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8));
            v103 = &v94[8 * v89];
          }
          do
          {
            v110 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *((_QWORD *)v103 - 1) = v110;
            v103 -= 8;
          }
          while (v102 != (char *)v87);
        }
LABEL_51:
        v111 = v101 + 27;
        v112 = (char *)v86 - (char *)v90;
        if (v112)
        {
          v208 = v94;
          memmove(v101 + 27, v90, v112);
          v94 = v208;
        }
        *(_QWORD *)(v6 + 16) = v103;
        *(_QWORD *)(v6 + 24) = (char *)v111 + v112;
        *(_QWORD *)(v6 + 32) = &v94[8 * v210];
        v7 = a5;
        result = 24;
        v11 = v172;
        v13 = v171;
        v14 = v170;
        if (v87)
        {
          operator delete((void *)v87);
          v14 = v170;
          v13 = v171;
          v11 = v172;
          result = 24;
        }
        goto LABEL_82;
      }
      v95 = (char *)v86 - (char *)v90;
      if ((unint64_t)((char *)v86 - (char *)v90) > 0x1AF)
      {
        v97 = *(uint64_t **)(v6 + 24);
        v96 = 54;
        goto LABEL_62;
      }
      v96 = v95 >> 3;
      v97 = &v86->i64[54 - (v95 >> 3)];
      v98 = v95 & 0xFFFFFFFFFFFFFFF8;
      v99 = 424 - v98;
      if (424 - v98 >= 0x68)
      {
        v113 = &v211 < (int64x2_t *)((char *)&v86[27] - v98);
        if (v86 >= (int64x2_t *)v212 || (v100 = *(uint64_t **)(v6 + 24), !v113))
        {
          v114 = (v99 >> 3) + 1;
          v100 = &v86->i64[v114 & 0x3FFFFFFFFFFFFFFCLL];
          v115 = vdupq_lane_s64(v211.i64[0], 0);
          v116 = v86 + 1;
          v117 = v114 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116[-1] = v115;
            *v116 = v115;
            v116 += 2;
            v117 -= 4;
          }
          while (v117);
          if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_61:
            *(_QWORD *)(v6 + 24) = v97;
            if (v86 == (int64x2_t *)v90)
              goto LABEL_82;
LABEL_62:
            v118 = (char *)v97 - (char *)(v90 + 54);
            v119 = v118 >> 3;
            v120 = (int64x2_t *)(v97 - 54);
            v121 = v97;
            if (v97 - 54 < (uint64_t *)v86)
            {
              v122 = (v88 & 0xFFFFFFFFFFFFFFF8) + v118;
              v123 = v87 + v122 + 8;
              if ((unint64_t)v86 > v123)
                v123 = (unint64_t)v86;
              v124 = v123 + ~v87 - v122;
              if (v124 >= 0x58)
              {
                v125 = (v124 >> 3) + 1;
                v126 = v125 & 0x3FFFFFFFFFFFFFFCLL;
                v120 = (int64x2_t *)((char *)v120 + v126 * 8);
                v121 = &v97[v126];
                v127 = v97 + 2;
                v128 = (__int128 *)(v87 + 8 * v119 + 8 * v89 + 16);
                v129 = v125 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v130 = *v128;
                  *(v127 - 1) = *(v128 - 1);
                  *v127 = v130;
                  v127 += 2;
                  v128 += 2;
                  v129 -= 4;
                }
                while (v129);
                if (v125 == (v125 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_71;
              }
              else
              {
                v121 = v97;
              }
              do
              {
                v131 = v120->i64[0];
                v120 = (int64x2_t *)((char *)v120 + 8);
                *v121++ = v131;
              }
              while (v120 < v86);
            }
LABEL_71:
            *(_QWORD *)(v6 + 24) = v121;
            if (v97 != v90 + 54)
            {
              v132 = v96;
              memmove(&v97[-v119], (const void *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8)), v118);
              v96 = v132;
              v89 = (uint64_t)((uint64_t)v86->i64 - v87) >> 3;
              v14 = v170;
              v13 = v171;
              v11 = v172;
              result = 24;
            }
            v133 = (uint64_t *)&v211;
            if (v90 <= (uint64_t *)&v211)
            {
              v134 = 54;
              if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v211)
                v134 = 0;
              v133 = &v211.i64[v134];
            }
            if (v96 >= 0xA
              && (v90 >= v133 + 1
               || (unint64_t)v133 >= v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8) + 8 * v96))
            {
              v90 += v96 & 0xFFFFFFFFFFFFFFFCLL;
              v135 = v96 & 3;
              v163 = vld1q_dup_f64((const double *)v133);
              v164 = (float64x2_t *)(v87 + 8 * v89 + 16);
              v165 = v96 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v164[-1] = v163;
                *v164 = v163;
                v164 += 2;
                v165 -= 4;
              }
              while (v165);
              v7 = a5;
              if (v96 == (v96 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_82;
            }
            else
            {
              v135 = v96;
              v7 = a5;
            }
            do
            {
              *v90++ = *v133;
              --v135;
            }
            while (v135);
LABEL_82:
            v15 = *(_QWORD *)(v6 + 24) - 432;
            v9 = a2;
            v8 = a3;
            v10 = (unint64_t *)(v6 + 16);
LABEL_83:
            *(_QWORD *)(v14 + 8 * v12) = (v15 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v173);
            goto LABEL_84;
          }
        }
      }
      else
      {
        v100 = *(uint64_t **)(v6 + 24);
      }
      do
        *v100++ = v211.i64[0];
      while (v100 != v97);
      goto LABEL_61;
    }
  }
  return result;
}

uint64_t sub_20FA22A24(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  int64x2_t v18;
  int8x16_t v19;
  int64x2_t *v20;
  int64x2_t v21;
  unint64_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int64x2_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  unint64_t v35;
  int8x16_t v36;
  unint64_t v37;
  unsigned int v38;
  int8x16_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  int64x2_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  _OWORD *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _OWORD *v78;
  size_t v79;
  BOOL v80;
  uint64_t v81;
  int64x2_t v82;
  int64x2_t *v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;
  int64x2_t *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  const double *v100;
  uint64_t v101;
  unint64_t v102;
  float64x2_t v103;
  float64x2_t *v104;
  unint64_t v105;
  int8x16_t *v106;
  unint64_t v107;
  int8x16_t *v108;
  int8x16_t *v109;
  int8x16_t v110;
  int8x16_t v111;
  _BYTE *v114;
  unint64_t v115;
  unint64_t *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      v9 = a2;
      v122 = 0;
      v10 = (unint64_t *)(result + 16);
      v118 = (unint64_t *)(result + 16);
      while (1)
      {
        result = *(unsigned int *)(v6 + 8);
        if ((_DWORD)result)
          break;
LABEL_5:
        if (++v122 >= v5)
          return result;
      }
      v11 = 0;
      v12 = *(_DWORD *)(*a4 + 4 * v122);
      v13 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v122);
      v121 = *(unsigned int *)(v6 + 8);
      v120 = v12;
      v119 = v13;
      while (1)
      {
        v38 = *(_DWORD *)(*v8 + 4 * v11);
        v39 = *(int8x16_t **)v9;
        v40 = *(unsigned int *)(v9 + 16);
        v41 = *(_QWORD *)(v13 + 8 * v11);
        if (v7 && v38 > v12)
        {
          if (v41 == -1)
          {
            v42 = *(_QWORD *)(v6 + 80);
            if (v42)
            {
              v44 = *(_QWORD *)(v6 + 48);
              v43 = *(_QWORD *)(v6 + 56);
              v45 = ((v43 - v44) << 6) - 1;
              v46 = *(_QWORD *)(v6 + 72);
              if (v43 == v44)
                v45 = 0;
              v14 = *(_QWORD *)(v6 + 16)
                  + 8
                  * *(_QWORD *)(*(_QWORD *)(v44 + (((unint64_t)(v46 + v42 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((v46 + v42 - 1) & 0x1FF));
              *(_QWORD *)(v6 + 80) = v42 - 1;
              if ((unint64_t)(v45 - (v42 + v46) + 1) >= 0x400)
              {
                operator delete(*(void **)(v43 - 8));
                v13 = v119;
                v12 = v120;
                result = v121;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v52 = *(void **)(v6 + 24);
              v123 = 0;
              sub_20F1C5A3C(v10, v52, 0x12uLL, &v123);
              v13 = v119;
              v12 = v120;
              result = v121;
              v14 = *(_QWORD *)(v6 + 24) - 144;
            }
            *(_QWORD *)(v13 + 8 * v11) = (v14 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v122);
          }
          else
          {
            v14 = *v10 + 8 * v41;
          }
          v15 = (int64x2_t *)((char *)v39 + 8 * v12 + 8 * (_DWORD)v40 * v38);
          v16 = (int64x2_t *)((char *)v15 + 8 * v40);
          v17 = &v15[v40];
          v18 = *v17;
          v19.i64[0] = v17[1].i64[0];
          v20 = (int64x2_t *)((char *)v15 + 24 * v40);
          v21 = *v20;
          v22 = v20[1].u64[0];
          v23 = &v15[2 * v40];
          v24 = *v23;
          v25.i64[0] = v23->i64[1];
          v26.i64[0] = v23[1].i64[0];
          v27 = (int64x2_t *)((char *)v15 + 40 * v40);
          v28 = v27->u64[1];
          v29 = v27[1].u64[0];
          v30 = v16[1].u64[0];
          v31.i64[0] = v15[1].i64[0];
          v32 = vzip1q_s64(v18, v21);
          v33 = (int8x16_t)vzip1q_s64(v24, *v27);
          v34 = (int8x16_t)vzip2q_s64(*v15, *v16);
          v35 = v21.u64[1];
          v36.i64[0] = v18.i64[1];
          v37 = vextq_s8(v34, v34, 8uLL).u64[0];
          *(int64x2_t *)v14 = vzip1q_s64(*v15, *v16);
          *(int64x2_t *)(v14 + 16) = v32;
          goto LABEL_10;
        }
        if (v41 == -1)
          break;
        v14 = *v10 + 8 * v41;
LABEL_89:
        v106 = (int8x16_t *)((char *)v39 + 8 * v38 + 8 * (_DWORD)v40 * v12);
        v111 = v106[1];
        v33 = v106[2];
        v110 = *v106;
        v107 = vextq_s8(v33, v33, 8uLL).u64[0];
        v108 = (int8x16_t *)((char *)v106 + 8 * v40);
        v36 = v108[1];
        v25 = v108[2];
        v34 = *v108;
        v28 = vextq_s8(v25, v25, 8uLL).u64[0];
        v35 = vextq_s8(v36, v36, 8uLL).u64[0];
        v37 = vextq_s8(v34, v34, 8uLL).u64[0];
        v109 = &v106[v40];
        v19 = v109[1];
        v26 = v109[2];
        v31 = *v109;
        v29 = vextq_s8(v26, v26, 8uLL).u64[0];
        v22 = vextq_s8(v19, v19, 8uLL).u64[0];
        v30 = vextq_s8(v31, v31, 8uLL).u64[0];
        v110.i64[1] = vextq_s8(v110, v110, 8uLL).u64[0];
        v111.i64[1] = vextq_s8(v111, v111, 8uLL).u64[0];
        if (v39 == (int8x16_t *)v14)
        {
          *v39 = v110;
          v39[1] = v111;
          v33.i64[1] = v107;
          v39[2] = v33;
          v14 = (uint64_t)v39;
          goto LABEL_11;
        }
        *(int8x16_t *)v14 = v110;
        *(int8x16_t *)(v14 + 16) = v111;
        v33.i64[1] = v107;
LABEL_10:
        *(int8x16_t *)(v14 + 32) = v33;
LABEL_11:
        v34.i64[1] = v37;
        v36.i64[1] = v35;
        *(int8x16_t *)(v14 + 48) = v34;
        *(int8x16_t *)(v14 + 64) = v36;
        v25.i64[1] = v28;
        v31.i64[1] = v30;
        *(int8x16_t *)(v14 + 80) = v25;
        *(int8x16_t *)(v14 + 96) = v31;
        v19.i64[1] = v22;
        v26.i64[1] = v29;
        *(int8x16_t *)(v14 + 112) = v19;
        *(int8x16_t *)(v14 + 128) = v26;
        if (++v11 == result)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v47 = *(_QWORD *)(v6 + 80);
      if (v47)
      {
        v49 = *(_QWORD *)(v6 + 48);
        v48 = *(_QWORD *)(v6 + 56);
        v50 = ((v48 - v49) << 6) - 1;
        v51 = *(_QWORD *)(v6 + 72);
        if (v48 == v49)
          v50 = 0;
        v14 = *(_QWORD *)(v6 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v49 + (((unint64_t)(v51 + v47 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v51 + v47 - 1) & 0x1FF));
        *(_QWORD *)(v6 + 80) = v47 - 1;
        if ((unint64_t)(v50 - (v47 + v51) + 1) >= 0x400)
        {
          operator delete(*(void **)(v48 - 8));
          v13 = v119;
          v12 = v120;
          result = v121;
          *(_QWORD *)(v6 + 56) -= 8;
        }
        goto LABEL_88;
      }
      v123 = 0;
      v54 = *(_QWORD *)(v6 + 16);
      v53 = *(int64x2_t **)(v6 + 24);
      v55 = (unint64_t)v53 - v54;
      v56 = (uint64_t)((uint64_t)v53->i64 - v54) >> 3;
      v57 = (uint64_t *)(v54 + (((unint64_t)v53 - v54) & 0xFFFFFFFFFFFFFFF8));
      v58 = *(_QWORD *)(v6 + 32);
      if ((unint64_t)(v58 - (_QWORD)v53) < 0x90)
      {
        v59 = v56 + 18;
        if ((unint64_t)(v56 + 18) >> 61)
          sub_20E867F44();
        v60 = v58 - v54;
        if (v60 >> 2 > v59)
          v59 = v60 >> 2;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        v115 = v59;
        if (v59)
        {
          if (v59 >> 61)
            sub_20E877A38();
          v61 = operator new(8 * v59);
          v56 = (uint64_t)((uint64_t)v53->i64 - v54) >> 3;
        }
        else
        {
          v61 = 0;
        }
        v68 = &v61[8 * v56];
        v68[7] = 0u;
        v68[8] = 0u;
        v68[5] = 0u;
        v68[6] = 0u;
        v68[3] = 0u;
        v68[4] = 0u;
        v68[1] = 0u;
        v68[2] = 0u;
        *v68 = 0u;
        if ((int64x2_t *)v54 == v53)
        {
          v70 = &v61[8 * v56];
        }
        else
        {
          if (v55 - 8 >= 0x68)
          {
            v69 = (char *)(v54 + (((unint64_t)v53 - v54) & 0xFFFFFFFFFFFFFFF8));
            v70 = &v61[8 * v56];
            if (v54 + (v55 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v61[v55 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v71 = ((v55 - 8) >> 3) + 1;
              v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
              v69 = (char *)&v57[v72 / 0xFFFFFFFFFFFFFFF8];
              v70 = (char *)v68 - v72;
              v73 = &v61[8 * v56 - 16];
              v74 = (__int128 *)(v54 + 8 * v56 - 16);
              v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v76 = *v74;
                *(v73 - 1) = *(v74 - 1);
                *v73 = v76;
                v73 -= 2;
                v74 -= 2;
                v75 -= 4;
              }
              while (v75);
              if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_52;
            }
          }
          else
          {
            v69 = (char *)(v54 + (((unint64_t)v53 - v54) & 0xFFFFFFFFFFFFFFF8));
            v70 = &v61[8 * v56];
          }
          do
          {
            v77 = *((_QWORD *)v69 - 1);
            v69 -= 8;
            *((_QWORD *)v70 - 1) = v77;
            v70 -= 8;
          }
          while (v69 != (char *)v54);
        }
LABEL_52:
        v78 = v68 + 9;
        v79 = (char *)v53 - (char *)v57;
        if (v79)
        {
          v114 = v61;
          memmove(v68 + 9, v57, v79);
          v61 = v114;
        }
        *(_QWORD *)(v6 + 16) = v70;
        *(_QWORD *)(v6 + 24) = (char *)v78 + v79;
        *(_QWORD *)(v6 + 32) = &v61[8 * v115];
        v7 = a5;
        result = v121;
        v12 = v120;
        v13 = v119;
        if (v54)
        {
          operator delete((void *)v54);
          v13 = v119;
          v12 = v120;
          result = v121;
        }
        goto LABEL_87;
      }
      v62 = (char *)v53 - (char *)v57;
      if ((unint64_t)((char *)v53 - (char *)v57) > 0x8F)
      {
        v64 = *(uint64_t **)(v6 + 24);
        v63 = 18;
        goto LABEL_63;
      }
      v63 = v62 >> 3;
      v64 = &v53->i64[18 - (v62 >> 3)];
      v65 = v62 & 0xFFFFFFFFFFFFFFF8;
      v66 = 136 - v65;
      if (136 - v65 >= 0x68)
      {
        v80 = &v123 < (uint64_t *)((char *)v53[9].i64 - v65);
        if (v53 >= (int64x2_t *)&v124 || (v67 = *(uint64_t **)(v6 + 24), !v80))
        {
          v81 = (v66 >> 3) + 1;
          v67 = &v53->i64[v81 & 0x3FFFFFFFFFFFFFFCLL];
          v82 = vdupq_lane_s64(v123, 0);
          v83 = v53 + 1;
          v84 = v81 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83[-1] = v82;
            *v83 = v82;
            v83 += 2;
            v84 -= 4;
          }
          while (v84);
          if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_62:
            *(_QWORD *)(v6 + 24) = v64;
            if (v53 == (int64x2_t *)v57)
              goto LABEL_87;
LABEL_63:
            v85 = (char *)v64 - (char *)(v57 + 18);
            v86 = v85 >> 3;
            v87 = (int64x2_t *)(v64 - 18);
            v88 = (char *)v64;
            if (v64 - 18 < (uint64_t *)v53)
            {
              v89 = (v55 & 0xFFFFFFFFFFFFFFF8) + v85;
              v90 = v54 + v89 + 8;
              if ((unint64_t)v53 > v90)
                v90 = (unint64_t)v53;
              v91 = v90 + ~v54 - v89;
              if (v91 >= 0x58)
              {
                v92 = (v91 >> 3) + 1;
                v93 = v92 & 0x3FFFFFFFFFFFFFFCLL;
                v87 = (int64x2_t *)((char *)v87 + v93 * 8);
                v88 = (char *)&v64[v93];
                v94 = v64 + 2;
                v95 = (__int128 *)(v54 + 8 * v86 + 8 * v56 + 16);
                v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v97 = *v95;
                  *(v94 - 1) = *(v95 - 1);
                  *v94 = v97;
                  v94 += 2;
                  v95 += 2;
                  v96 -= 4;
                }
                while (v96);
                if (v92 == (v92 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_72;
              }
              else
              {
                v88 = (char *)v64;
              }
              do
              {
                v98 = v87->i64[0];
                v87 = (int64x2_t *)((char *)v87 + 8);
                *(_QWORD *)v88 = v98;
                v88 += 8;
              }
              while (v87 < v53);
            }
LABEL_72:
            *(_QWORD *)(v6 + 24) = v88;
            if (v64 != v57 + 18)
            {
              v99 = v63;
              memmove(&v64[-v86], (const void *)(v54 + (((unint64_t)v53 - v54) & 0xFFFFFFFFFFFFFFF8)), v85);
              v63 = v99;
              v56 = (uint64_t)((uint64_t)v53->i64 - v54) >> 3;
              v13 = v119;
              v12 = v120;
              result = v121;
            }
            v100 = (const double *)&v123;
            if (v57 <= &v123)
            {
              v101 = 144;
              if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v123)
                v101 = 0;
              v100 = (const double *)((char *)&v123 + v101);
            }
            if (v63 >= 0xA)
            {
              if (v57 >= (uint64_t *)v100 + 1
                || (unint64_t)v100 >= v54 + (((unint64_t)v53 - v54) & 0xFFFFFFFFFFFFFFF8) + 8 * v63)
              {
                v57 += v63 & 0xFFFFFFFFFFFFFFFCLL;
                v102 = v63 & 3;
                v103 = vld1q_dup_f64(v100);
                v104 = (float64x2_t *)(v54 + 8 * v56 + 16);
                v105 = v63 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v104[-1] = v103;
                  *v104 = v103;
                  v104 += 2;
                  v105 -= 4;
                }
                while (v105);
                if (v63 == (v63 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_87;
              }
              else
              {
                v102 = v63;
              }
            }
            else
            {
              v102 = v63;
            }
            do
            {
              *v57++ = *(_QWORD *)v100;
              --v102;
            }
            while (v102);
LABEL_87:
            v14 = *(_QWORD *)(v6 + 24) - 144;
            v9 = a2;
            v8 = a3;
            v10 = v118;
LABEL_88:
            *(_QWORD *)(v13 + 8 * v11) = (v14 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v122);
            goto LABEL_89;
          }
        }
      }
      else
      {
        v67 = *(uint64_t **)(v6 + 24);
      }
      do
        *v67++ = v123;
      while (v67 != v64);
      goto LABEL_62;
    }
  }
  return result;
}

uint64_t sub_20FA2321C(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  int8x16_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  int64x2_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _OWORD *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _OWORD *v62;
  size_t v63;
  uint64_t *v64;
  _OWORD *v65;
  BOOL v66;
  uint64_t v67;
  int64x2_t v68;
  int64x2_t *v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  int64x2_t *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  __int128 *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  const double *v87;
  uint64_t v88;
  unint64_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  unint64_t v92;
  int8x16_t *v93;
  int8x16_t v94;
  unint64_t v95;
  int8x16_t v96;
  int8x16_t v97;
  unint64_t v99;
  unint64_t *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      v108 = 0;
      v10 = (unint64_t *)(result + 16);
      v102 = (unint64_t *)(result + 16);
      while (1)
      {
        result = *(unsigned int *)(v6 + 8);
        if ((_DWORD)result)
          break;
LABEL_5:
        if (++v108 >= v5)
          return result;
      }
      v11 = 0;
      v12 = *(_DWORD *)(*a4 + 4 * v108);
      v13 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v108);
      v107 = *(unsigned int *)(v6 + 8);
      v106 = v12;
      v105 = v13;
      while (1)
      {
        v19 = *(_DWORD *)(*v8 + 4 * v11);
        v20 = *(int8x16_t **)a2;
        v21 = *(unsigned int *)(a2 + 16);
        v22 = *(_QWORD *)(v13 + 8 * v11);
        if (v7 && v19 > v12)
        {
          if (v22 == -1)
          {
            v23 = *(_QWORD *)(v6 + 80);
            if (v23)
            {
              v25 = *(_QWORD *)(v6 + 48);
              v24 = *(_QWORD *)(v6 + 56);
              v26 = ((v24 - v25) << 6) - 1;
              v27 = *(_QWORD *)(v6 + 72);
              if (v24 == v25)
                v26 = 0;
              v14 = (_OWORD *)(*(_QWORD *)(v6 + 16)
                             + 8
                             * *(_QWORD *)(*(_QWORD *)(v25
                                                     + (((unint64_t)(v27 + v23 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                         + 8 * ((v27 + v23 - 1) & 0x1FF)));
              *(_QWORD *)(v6 + 80) = v23 - 1;
              if ((unint64_t)(v26 - (v23 + v27) + 1) >= 0x400)
              {
                operator delete(*(void **)(v24 - 8));
                v13 = v105;
                v12 = v106;
                result = v107;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v34 = *(void **)(v6 + 24);
              v109 = 0;
              sub_20F1C5A3C(v10, v34, 6uLL, &v109);
              v13 = v105;
              v12 = v106;
              result = v107;
              v14 = (_OWORD *)(*(_QWORD *)(v6 + 24) - 48);
            }
            *(_QWORD *)(v13 + 8 * v11) = ((uint64_t)v14 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v108);
          }
          else
          {
            v14 = (_OWORD *)(*v10 + 8 * v22);
          }
          v15 = &v20->i64[v12 + (_DWORD)v21 * v19];
          *(_QWORD *)&v16 = v15[2 * v21];
          *(_QWORD *)&v17 = v15[4 * v21];
          *((_QWORD *)&v16 + 1) = v15[3 * v21];
          *((_QWORD *)&v17 + 1) = v15[5 * v21];
          *(_QWORD *)&v18 = *v15;
          *((_QWORD *)&v18 + 1) = v15[v21];
          v14[1] = v16;
          v14[2] = v17;
          *v14 = v18;
          goto LABEL_10;
        }
        if (v22 != -1)
        {
          v28 = (int8x16_t *)(*v10 + 8 * v22);
          goto LABEL_87;
        }
        v29 = *(_QWORD *)(v6 + 80);
        if (v29)
        {
          v31 = *(_QWORD *)(v6 + 48);
          v30 = *(_QWORD *)(v6 + 56);
          v32 = ((v30 - v31) << 6) - 1;
          v33 = *(_QWORD *)(v6 + 72);
          if (v30 == v31)
            v32 = 0;
          v28 = (int8x16_t *)(*(_QWORD *)(v6 + 16)
                            + 8
                            * *(_QWORD *)(*(_QWORD *)(v31
                                                    + (((unint64_t)(v33 + v29 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * ((v33 + v29 - 1) & 0x1FF)));
          *(_QWORD *)(v6 + 80) = v29 - 1;
          if ((unint64_t)(v32 - (v29 + v33) + 1) >= 0x400)
          {
            operator delete(*(void **)(v30 - 8));
            v13 = v105;
            v12 = v106;
            result = v107;
            *(_QWORD *)(v6 + 56) -= 8;
          }
          goto LABEL_86;
        }
        v109 = 0;
        v36 = *(_QWORD *)(v6 + 16);
        v35 = *(int64x2_t **)(v6 + 24);
        v37 = (unint64_t)v35 - v36;
        v38 = (uint64_t)((uint64_t)v35->i64 - v36) >> 3;
        v39 = (uint64_t *)(v36 + (((unint64_t)v35 - v36) & 0xFFFFFFFFFFFFFFF8));
        v40 = *(_QWORD *)(v6 + 32);
        if ((unint64_t)(v40 - (_QWORD)v35) < 0x30)
        {
          v41 = v38 + 6;
          if ((unint64_t)(v38 + 6) >> 61)
            sub_20E867F44();
          v42 = v40 - v36;
          if (v42 >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          v99 = v41;
          if (v41)
          {
            if (v41 >> 61)
              sub_20E877A38();
            v43 = operator new(8 * v41);
            v38 = (uint64_t)((uint64_t)v35->i64 - v36) >> 3;
            v44 = &v43[8 * v38];
            v44[1] = 0u;
            v44[2] = 0u;
            *v44 = 0u;
            if ((int64x2_t *)v36 != v35)
            {
LABEL_37:
              v45 = (char *)(v37 - 8);
              if (v37 - 8 < 0x68)
              {
                v46 = (char *)(v36 + (((unint64_t)v35 - v36) & 0xFFFFFFFFFFFFFFF8));
                v47 = (char *)v44;
                goto LABEL_49;
              }
              v54 = v36 + (v37 & 0xFFFFFFFFFFFFFFF8) - (_QWORD)&v43[v37 & 0xFFFFFFFFFFFFFFF8];
              v46 = (char *)(v36 + (((unint64_t)v35 - v36) & 0xFFFFFFFFFFFFFFF8));
              v47 = (char *)v44;
              if (v54 < 0x20)
                goto LABEL_95;
              v55 = ((unint64_t)v45 >> 3) + 1;
              v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
              v46 = (char *)&v39[v56 / 0xFFFFFFFFFFFFFFF8];
              v47 = (char *)v44 - v56;
              v57 = &v43[8 * v38 - 16];
              v58 = (__int128 *)(v36 + 8 * v38 - 16);
              v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v60 = *v58;
                *(v57 - 1) = *(v58 - 1);
                *v57 = v60;
                v57 -= 2;
                v58 -= 2;
                v59 -= 4;
              }
              while (v59);
              if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_95:
                do
                {
LABEL_49:
                  v61 = *((_QWORD *)v46 - 1);
                  v46 -= 8;
                  *((_QWORD *)v47 - 1) = v61;
                  v47 -= 8;
                }
                while (v46 != (char *)v36);
              }
LABEL_50:
              v62 = v44 + 3;
              v63 = (char *)v35 - (char *)v39;
              if (v63)
              {
                v103 = v43;
                v64 = v39;
                v65 = v44 + 3;
                memmove(v44 + 3, v64, v63);
                v62 = v65;
                v43 = v103;
              }
              *(_QWORD *)(v6 + 16) = v47;
              *(_QWORD *)(v6 + 24) = (char *)v62 + v63;
              *(_QWORD *)(v6 + 32) = &v43[8 * v99];
              result = v107;
              v12 = v106;
              v13 = v105;
              if (v36)
              {
                operator delete((void *)v36);
                v13 = v105;
                v12 = v106;
                result = v107;
              }
              goto LABEL_85;
            }
          }
          else
          {
            v43 = 0;
            v44 = (_OWORD *)(8 * v38);
            v44[1] = 0u;
            v44[2] = 0u;
            *v44 = 0u;
            if ((int64x2_t *)v36 != v35)
              goto LABEL_37;
          }
          v47 = (char *)v44;
          goto LABEL_50;
        }
        v48 = (char *)v35 - (char *)v39;
        if ((unint64_t)((char *)v35 - (char *)v39) > 0x2F)
        {
          v50 = *(uint64_t **)(v6 + 24);
          v49 = 6;
          goto LABEL_61;
        }
        v49 = v48 >> 3;
        v50 = &v35->i64[6 - (v48 >> 3)];
        v51 = v48 & 0xFFFFFFFFFFFFFFF8;
        v52 = 40 - v51;
        if (40 - v51 < 0x68)
          break;
        v66 = &v109 < (uint64_t *)((char *)v35[3].i64 - v51);
        if (v35 < (int64x2_t *)&v110)
        {
          v53 = *(uint64_t **)(v6 + 24);
          if (v66)
            goto LABEL_59;
        }
        v67 = (v52 >> 3) + 1;
        v53 = &v35->i64[v67 & 0x3FFFFFFFFFFFFFFCLL];
        v68 = vdupq_lane_s64(v109, 0);
        v69 = v35 + 1;
        v70 = v67 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v69[-1] = v68;
          *v69 = v68;
          v69 += 2;
          v70 -= 4;
        }
        while (v70);
        if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_59;
LABEL_60:
        *(_QWORD *)(v6 + 24) = v50;
        if (v35 == (int64x2_t *)v39)
          goto LABEL_85;
LABEL_61:
        v71 = (char *)v50 - (char *)(v39 + 6);
        v72 = v71 >> 3;
        v73 = (int64x2_t *)(v50 - 6);
        v74 = (char *)v50;
        if (v50 - 6 < (uint64_t *)v35)
        {
          v75 = (v37 & 0xFFFFFFFFFFFFFFF8) + v71;
          v76 = v36 + v75 + 8;
          if ((unint64_t)v35 > v76)
            v76 = (unint64_t)v35;
          v77 = v76 + ~v36 - v75;
          if (v77 >= 0x58)
          {
            v78 = (v77 >> 3) + 1;
            v79 = v78 & 0x3FFFFFFFFFFFFFFCLL;
            v73 = (int64x2_t *)((char *)v73 + v79 * 8);
            v74 = (char *)&v50[v79];
            v80 = v50 + 2;
            v81 = (__int128 *)(v36 + 8 * v72 + 8 * v38 + 16);
            v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v83 = *v81;
              *(v80 - 1) = *(v81 - 1);
              *v80 = v83;
              v80 += 2;
              v81 += 2;
              v82 -= 4;
            }
            while (v82);
            if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_70;
          }
          else
          {
            v74 = (char *)v50;
          }
          do
          {
            v84 = v73->i64[0];
            v73 = (int64x2_t *)((char *)v73 + 8);
            *(_QWORD *)v74 = v84;
            v74 += 8;
          }
          while (v73 < v35);
        }
LABEL_70:
        *(_QWORD *)(v6 + 24) = v74;
        if (v50 != v39 + 6)
        {
          v85 = (char *)(v36 + (((unint64_t)v35 - v36) & 0xFFFFFFFFFFFFFFF8));
          v104 = (uint64_t)((uint64_t)v35->i64 - v36) >> 3;
          v86 = v49;
          memmove(&v50[-v72], v85, v71);
          v49 = v86;
          v38 = v104;
          v13 = v105;
          v12 = v106;
          result = v107;
        }
        v87 = (const double *)&v109;
        if (v39 <= &v109)
        {
          v88 = 48;
          if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v109)
            v88 = 0;
          v87 = (const double *)((char *)&v109 + v88);
        }
        if (v49 >= 0xA)
        {
          if (v39 >= (uint64_t *)v87 + 1 || (unint64_t)v87 >= v36 + (v37 & 0xFFFFFFFFFFFFFFF8) + 8 * v49)
          {
            v39 += v49 & 0xFFFFFFFFFFFFFFFCLL;
            v89 = v49 & 3;
            v90 = vld1q_dup_f64(v87);
            v91 = (float64x2_t *)(v36 + 8 * v38 + 16);
            v92 = v49 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v91[-1] = v90;
              *v91 = v90;
              v91 += 2;
              v92 -= 4;
            }
            while (v92);
            if (v49 == (v49 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_85;
          }
          else
          {
            v89 = v49;
          }
        }
        else
        {
          v89 = v49;
        }
        do
        {
          *v39++ = *(_QWORD *)v87;
          --v89;
        }
        while (v89);
LABEL_85:
        v28 = (int8x16_t *)(*(_QWORD *)(v6 + 24) - 48);
        v7 = a5;
        v8 = a3;
        v10 = v102;
LABEL_86:
        *(_QWORD *)(v13 + 8 * v11) = ((uint64_t)v28->i64 - *(_QWORD *)(v6 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v108);
LABEL_87:
        v93 = (int8x16_t *)((char *)v20 + 8 * v19 + 8 * (_DWORD)v21 * v12);
        v97 = v93[1];
        v94 = v93[2];
        v96 = *v93;
        v95 = vextq_s8(v94, v94, 8uLL).u64[0];
        v96.i64[1] = vextq_s8(v96, v96, 8uLL).u64[0];
        v97.i64[1] = vextq_s8(v97, v97, 8uLL).u64[0];
        if (v20 == v28)
        {
          *v20 = v96;
          v20[1] = v97;
          v94.i64[1] = v95;
          v20[2] = v94;
        }
        else
        {
          *v28 = v96;
          v28[1] = v97;
          v94.i64[1] = v95;
          v28[2] = v94;
        }
LABEL_10:
        if (++v11 == result)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v53 = *(uint64_t **)(v6 + 24);
      do
LABEL_59:
        *v53++ = v109;
      while (v53 != v50);
      goto LABEL_60;
    }
  }
  return result;
}

uint64_t sub_20FA23994(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int8x16_t *v14;
  int64x2_t *v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t *v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  int64x2_t v28;
  int64x2_t *v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int8x16_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  int64x2_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  _OWORD *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  __int128 *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  _OWORD *v91;
  size_t v92;
  BOOL v93;
  uint64_t v94;
  int64x2_t v95;
  int64x2_t *v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  int64x2_t *v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  const double *v113;
  uint64_t v114;
  unint64_t v115;
  float64x2_t v116;
  float64x2_t *v117;
  unint64_t v118;
  int8x16_t *v119;
  int8x16_t v120;
  unint64_t v121;
  int8x16_t *v122;
  int8x16_t *v123;
  int8x16_t *v124;
  int8x16_t v125;
  int8x16_t v126;
  _BYTE *v129;
  unint64_t v130;
  unint64_t *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      v9 = a2;
      v137 = 0;
      v10 = (unint64_t *)(result + 16);
      v133 = (unint64_t *)(result + 16);
      while (1)
      {
        result = *(unsigned int *)(v6 + 8);
        if ((_DWORD)result)
          break;
LABEL_5:
        if (++v137 >= v5)
          return result;
      }
      v11 = 0;
      v12 = *(_DWORD *)(*a4 + 4 * v137);
      v13 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v137);
      v136 = *(unsigned int *)(v6 + 8);
      v135 = v12;
      v134 = v13;
      while (1)
      {
        v51 = *(_DWORD *)(*v8 + 4 * v11);
        v52 = *(int8x16_t **)v9;
        v53 = *(unsigned int *)(v9 + 16);
        v54 = *(_QWORD *)(v13 + 8 * v11);
        if (v7 && v51 > v12)
        {
          if (v54 == -1)
          {
            v55 = *(_QWORD *)(v6 + 80);
            if (v55)
            {
              v57 = *(_QWORD *)(v6 + 48);
              v56 = *(_QWORD *)(v6 + 56);
              v58 = ((v56 - v57) << 6) - 1;
              v59 = *(_QWORD *)(v6 + 72);
              if (v56 == v57)
                v58 = 0;
              v14 = (int8x16_t *)(*(_QWORD *)(v6 + 16)
                                + 8
                                * *(_QWORD *)(*(_QWORD *)(v57
                                                        + (((unint64_t)(v59 + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                            + 8 * ((v59 + v55 - 1) & 0x1FF)));
              *(_QWORD *)(v6 + 80) = v55 - 1;
              if ((unint64_t)(v58 - (v55 + v59) + 1) >= 0x400)
              {
                operator delete(*(void **)(v56 - 8));
                v13 = v134;
                v12 = v135;
                result = v136;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v65 = *(void **)(v6 + 24);
              v138 = 0;
              sub_20F1C5A3C(v10, v65, 0x18uLL, &v138);
              v13 = v134;
              v12 = v135;
              result = v136;
              v14 = (int8x16_t *)(*(_QWORD *)(v6 + 24) - 192);
            }
            *(_QWORD *)(v13 + 8 * v11) = ((uint64_t)v14->i64 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v137);
          }
          else
          {
            v14 = (int8x16_t *)(*v10 + 8 * v54);
          }
          v15 = (int64x2_t *)((char *)v52 + 8 * v12 + 8 * (_DWORD)v53 * v51);
          v16 = *v15;
          v17 = v15[1];
          v18 = (int64x2_t *)((char *)v15 + 8 * v53);
          v19 = *v18;
          v20 = v18[1];
          v21 = &v15[v53];
          v22 = *v21;
          v23 = v21[1];
          v24 = (int64x2_t *)((char *)v15 + 24 * v53);
          v25 = *v24;
          v26 = v24[1];
          v27 = &v15[2 * v53];
          v28 = v27[1];
          v29 = (int64x2_t *)((char *)v15 + 40 * v53);
          v30 = vzip1q_s64(v16, v19);
          v31 = vzip1q_s64(v22, v25);
          v32 = vzip1q_s64(*v27, *v29);
          v33 = (int8x16_t)vzip2q_s64(v16, v19);
          v34.i64[0] = vdupq_laneq_s64(v22, 1).u64[0];
          v34.i64[1] = v25.i64[1];
          v35.i64[0] = vdupq_laneq_s64(*v27, 1).u64[0];
          v35.i64[1] = v29->i64[1];
          v36 = vextq_s8(v35, v35, 8uLL).u64[0];
          v37 = vextq_s8(v34, v34, 8uLL).u64[0];
          v38 = vextq_s8(v33, v33, 8uLL).u64[0];
          v39 = (int8x16_t)vzip1q_s64(v17, v20);
          v40 = (int8x16_t)vzip1q_s64(v23, v26);
          v41 = (int8x16_t)vzip1q_s64(v28, v29[1]);
          v42 = vextq_s8(v41, v41, 8uLL).u64[0];
          v43 = vextq_s8(v40, v40, 8uLL).u64[0];
          v44 = vextq_s8(v39, v39, 8uLL).u64[0];
          v45 = (int8x16_t)vzip2q_s64(v17, v20);
          v46.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
          v46.i64[1] = v26.i64[1];
          v47.i64[0] = vdupq_laneq_s64(v28, 1).u64[0];
          v47.i64[1] = v29[1].i64[1];
          v48 = vextq_s8(v47, v47, 8uLL).u64[0];
          v49 = vextq_s8(v46, v46, 8uLL).u64[0];
          v50 = vextq_s8(v45, v45, 8uLL).u64[0];
          *v14 = (int8x16_t)v30;
          v14[1] = (int8x16_t)v31;
          v14[2] = (int8x16_t)v32;
          goto LABEL_10;
        }
        if (v54 != -1)
        {
          v14 = (int8x16_t *)(*v10 + 8 * v54);
          goto LABEL_88;
        }
        v60 = *(_QWORD *)(v6 + 80);
        if (v60)
        {
          v62 = *(_QWORD *)(v6 + 48);
          v61 = *(_QWORD *)(v6 + 56);
          v63 = ((v61 - v62) << 6) - 1;
          v64 = *(_QWORD *)(v6 + 72);
          if (v61 == v62)
            v63 = 0;
          v14 = (int8x16_t *)(*(_QWORD *)(v6 + 16)
                            + 8
                            * *(_QWORD *)(*(_QWORD *)(v62
                                                    + (((unint64_t)(v64 + v60 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * ((v64 + v60 - 1) & 0x1FF)));
          *(_QWORD *)(v6 + 80) = v60 - 1;
          if ((unint64_t)(v63 - (v60 + v64) + 1) >= 0x400)
          {
            operator delete(*(void **)(v61 - 8));
            v13 = v134;
            v12 = v135;
            result = v136;
            *(_QWORD *)(v6 + 56) -= 8;
          }
          goto LABEL_87;
        }
        v138 = 0;
        v67 = *(_QWORD *)(v6 + 16);
        v66 = *(int64x2_t **)(v6 + 24);
        v68 = (unint64_t)v66 - v67;
        v69 = (uint64_t)((uint64_t)v66->i64 - v67) >> 3;
        v70 = (uint64_t *)(v67 + (((unint64_t)v66 - v67) & 0xFFFFFFFFFFFFFFF8));
        v71 = *(_QWORD *)(v6 + 32);
        if ((unint64_t)(v71 - (_QWORD)v66) < 0xC0)
        {
          v72 = v69 + 24;
          if ((unint64_t)(v69 + 24) >> 61)
            sub_20E867F44();
          v73 = v71 - v67;
          if (v73 >> 2 > v72)
            v72 = v73 >> 2;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
            v72 = 0x1FFFFFFFFFFFFFFFLL;
          v130 = v72;
          if (v72)
          {
            if (v72 >> 61)
              sub_20E877A38();
            v74 = operator new(8 * v72);
            v69 = (uint64_t)((uint64_t)v66->i64 - v67) >> 3;
          }
          else
          {
            v74 = 0;
          }
          v81 = &v74[8 * v69];
          v81[10] = 0u;
          v81[11] = 0u;
          v81[8] = 0u;
          v81[9] = 0u;
          v81[6] = 0u;
          v81[7] = 0u;
          v81[4] = 0u;
          v81[5] = 0u;
          v81[2] = 0u;
          v81[3] = 0u;
          *v81 = 0u;
          v81[1] = 0u;
          if ((int64x2_t *)v67 == v66)
          {
            v83 = &v74[8 * v69];
          }
          else
          {
            if (v68 - 8 < 0x68)
            {
              v82 = (char *)(v67 + (((unint64_t)v66 - v67) & 0xFFFFFFFFFFFFFFF8));
              v83 = &v74[8 * v69];
              goto LABEL_50;
            }
            v82 = (char *)(v67 + (((unint64_t)v66 - v67) & 0xFFFFFFFFFFFFFFF8));
            v83 = &v74[8 * v69];
            if (v67 + (v68 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v74[v68 & 0xFFFFFFFFFFFFFFF8] < 0x20)
              goto LABEL_96;
            v84 = ((v68 - 8) >> 3) + 1;
            v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
            v82 = (char *)&v70[v85 / 0xFFFFFFFFFFFFFFF8];
            v83 = (char *)v81 - v85;
            v86 = &v74[8 * v69 - 16];
            v87 = (__int128 *)(v67 + 8 * v69 - 16);
            v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v89 = *v87;
              *(v86 - 1) = *(v87 - 1);
              *v86 = v89;
              v86 -= 2;
              v87 -= 2;
              v88 -= 4;
            }
            while (v88);
            if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_96:
              do
              {
LABEL_50:
                v90 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v83 - 1) = v90;
                v83 -= 8;
              }
              while (v82 != (char *)v67);
            }
          }
          v91 = v81 + 12;
          v92 = (char *)v66 - (char *)v70;
          if (v92)
          {
            v129 = v74;
            memmove(v81 + 12, v70, v92);
            v74 = v129;
          }
          *(_QWORD *)(v6 + 16) = v83;
          *(_QWORD *)(v6 + 24) = (char *)v91 + v92;
          *(_QWORD *)(v6 + 32) = &v74[8 * v130];
          v7 = a5;
          result = v136;
          v12 = v135;
          v13 = v134;
          if (v67)
          {
            operator delete((void *)v67);
            v13 = v134;
            v12 = v135;
            result = v136;
          }
          goto LABEL_86;
        }
        v75 = (char *)v66 - (char *)v70;
        if ((unint64_t)((char *)v66 - (char *)v70) > 0xBF)
        {
          v77 = *(uint64_t **)(v6 + 24);
          v76 = 24;
          goto LABEL_62;
        }
        v76 = v75 >> 3;
        v77 = &v66->i64[24 - (v75 >> 3)];
        v78 = v75 & 0xFFFFFFFFFFFFFFF8;
        v79 = 184 - v78;
        if (184 - v78 < 0x68)
          break;
        v93 = &v138 < (uint64_t *)((char *)v66[12].i64 - v78);
        if (v66 < (int64x2_t *)&v139)
        {
          v80 = *(uint64_t **)(v6 + 24);
          if (v93)
            goto LABEL_60;
        }
        v94 = (v79 >> 3) + 1;
        v80 = &v66->i64[v94 & 0x3FFFFFFFFFFFFFFCLL];
        v95 = vdupq_lane_s64(v138, 0);
        v96 = v66 + 1;
        v97 = v94 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v96[-1] = v95;
          *v96 = v95;
          v96 += 2;
          v97 -= 4;
        }
        while (v97);
        if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_60;
LABEL_61:
        *(_QWORD *)(v6 + 24) = v77;
        if (v66 == (int64x2_t *)v70)
          goto LABEL_86;
LABEL_62:
        v98 = (char *)v77 - (char *)(v70 + 24);
        v99 = v98 >> 3;
        v100 = (int64x2_t *)(v77 - 24);
        v101 = (char *)v77;
        if (v77 - 24 < (uint64_t *)v66)
        {
          v102 = (v68 & 0xFFFFFFFFFFFFFFF8) + v98;
          v103 = v67 + v102 + 8;
          if ((unint64_t)v66 > v103)
            v103 = (unint64_t)v66;
          v104 = v103 + ~v67 - v102;
          if (v104 >= 0x58)
          {
            v105 = (v104 >> 3) + 1;
            v106 = v105 & 0x3FFFFFFFFFFFFFFCLL;
            v100 = (int64x2_t *)((char *)v100 + v106 * 8);
            v101 = (char *)&v77[v106];
            v107 = v77 + 2;
            v108 = (__int128 *)(v67 + 8 * v99 + 8 * v69 + 16);
            v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v110 = *v108;
              *(v107 - 1) = *(v108 - 1);
              *v107 = v110;
              v107 += 2;
              v108 += 2;
              v109 -= 4;
            }
            while (v109);
            if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_71;
          }
          else
          {
            v101 = (char *)v77;
          }
          do
          {
            v111 = v100->i64[0];
            v100 = (int64x2_t *)((char *)v100 + 8);
            *(_QWORD *)v101 = v111;
            v101 += 8;
          }
          while (v100 < v66);
        }
LABEL_71:
        *(_QWORD *)(v6 + 24) = v101;
        if (v77 != v70 + 24)
        {
          v112 = v76;
          memmove(&v77[-v99], (const void *)(v67 + (((unint64_t)v66 - v67) & 0xFFFFFFFFFFFFFFF8)), v98);
          v76 = v112;
          v69 = (uint64_t)((uint64_t)v66->i64 - v67) >> 3;
          v13 = v134;
          v12 = v135;
          result = v136;
        }
        v113 = (const double *)&v138;
        if (v70 <= &v138)
        {
          v114 = 192;
          if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v138)
            v114 = 0;
          v113 = (const double *)((char *)&v138 + v114);
        }
        if (v76 >= 0xA)
        {
          if (v70 >= (uint64_t *)v113 + 1
            || (unint64_t)v113 >= v67 + (((unint64_t)v66 - v67) & 0xFFFFFFFFFFFFFFF8) + 8 * v76)
          {
            v70 += v76 & 0xFFFFFFFFFFFFFFFCLL;
            v115 = v76 & 3;
            v116 = vld1q_dup_f64(v113);
            v117 = (float64x2_t *)(v67 + 8 * v69 + 16);
            v118 = v76 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v117[-1] = v116;
              *v117 = v116;
              v117 += 2;
              v118 -= 4;
            }
            while (v118);
            if (v76 == (v76 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_86;
          }
          else
          {
            v115 = v76;
          }
        }
        else
        {
          v115 = v76;
        }
        do
        {
          *v70++ = *(_QWORD *)v113;
          --v115;
        }
        while (v115);
LABEL_86:
        v14 = (int8x16_t *)(*(_QWORD *)(v6 + 24) - 192);
        v9 = a2;
        v8 = a3;
        v10 = v133;
LABEL_87:
        *(_QWORD *)(v13 + 8 * v11) = ((uint64_t)v14->i64 - *(_QWORD *)(v6 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v137);
LABEL_88:
        v119 = (int8x16_t *)((char *)v52 + 8 * v51 + 8 * (_DWORD)v53 * v12);
        v126 = v119[1];
        v120 = v119[2];
        v125 = *v119;
        v121 = vextq_s8(v120, v120, 8uLL).u64[0];
        v122 = (int8x16_t *)((char *)v119 + 8 * v53);
        v34 = v122[1];
        v35 = v122[2];
        v33 = *v122;
        v36 = vextq_s8(v35, v35, 8uLL).u64[0];
        v37 = vextq_s8(v34, v34, 8uLL).u64[0];
        v38 = vextq_s8(v33, v33, 8uLL).u64[0];
        v123 = &v119[v53];
        v40 = v123[1];
        v41 = v123[2];
        v39 = *v123;
        v42 = vextq_s8(v41, v41, 8uLL).u64[0];
        v43 = vextq_s8(v40, v40, 8uLL).u64[0];
        v44 = vextq_s8(v39, v39, 8uLL).u64[0];
        v124 = (int8x16_t *)((char *)v119 + 24 * v53);
        v46 = v124[1];
        v47 = v124[2];
        v45 = *v124;
        v48 = vextq_s8(v47, v47, 8uLL).u64[0];
        v49 = vextq_s8(v46, v46, 8uLL).u64[0];
        v50 = vextq_s8(v45, v45, 8uLL).u64[0];
        v125.i64[1] = vextq_s8(v125, v125, 8uLL).u64[0];
        v126.i64[1] = vextq_s8(v126, v126, 8uLL).u64[0];
        if (v52 == v14)
        {
          *v52 = v125;
          v52[1] = v126;
          v120.i64[1] = v121;
          v52[2] = v120;
          v14 = v52;
        }
        else
        {
          *v14 = v125;
          v14[1] = v126;
          v120.i64[1] = v121;
          v14[2] = v120;
        }
LABEL_10:
        v33.i64[1] = v38;
        v34.i64[1] = v37;
        v14[3] = v33;
        v14[4] = v34;
        v35.i64[1] = v36;
        v39.i64[1] = v44;
        v14[5] = v35;
        v14[6] = v39;
        v40.i64[1] = v43;
        v41.i64[1] = v42;
        v14[7] = v40;
        v14[8] = v41;
        v45.i64[1] = v50;
        v46.i64[1] = v49;
        v14[9] = v45;
        v14[10] = v46;
        v47.i64[1] = v48;
        ++v11;
        v14[11] = v47;
        if (v11 == result)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v80 = *(uint64_t **)(v6 + 24);
      do
LABEL_60:
        *v80++ = v138;
      while (v80 != v77);
      goto LABEL_61;
    }
  }
  return result;
}

uint64_t sub_20FA241FC(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int8x16_t v17;
  int8x16_t v18;
  int64x2_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  uint64_t *v23;
  __int128 v24;
  int8x16_t v25;
  int64x2_t v26;
  __int128 v27;
  __int128 v28;
  int8x16_t v29;
  uint64_t *v30;
  int64x2_t v31;
  int8x16_t *v32;
  int8x16_t v33;
  int8x16_t v34;
  int64x2_t v35;
  int64x2_t *v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t *v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t *v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int8x16_t v48;
  int8x16_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  __int128 v52;
  int64x2_t v53;
  int8x16_t v54;
  int64x2_t v55;
  __int128 v56;
  int8x16_t v57;
  unint64_t v58;
  int64x2_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int64x2_t v63;
  int8x16_t v64;
  unint64_t v65;
  int64x2_t v66;
  unint64_t v67;
  int8x16_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int8x16_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  int64x2_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  _OWORD *v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  _OWORD *v111;
  size_t v112;
  BOOL v113;
  uint64_t v114;
  int64x2_t v115;
  int64x2_t *v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  int64x2_t *v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _OWORD *v127;
  __int128 *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  int8x16_t *v136;
  uint64_t v137;
  int8x16_t v138;
  int8x16_t v139;
  unint64_t v140;
  unint64_t v141;
  int8x16_t *v142;
  int8x16_t *v143;
  uint64_t v144;
  int8x16_t *v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t *v149;
  int8x16_t *v150;
  unint64_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  float64x2_t v155;
  float64x2_t *v156;
  unint64_t v157;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  int8x16_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int8x16_t v172;
  int8x16_t v173;
  unint64_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  unint64_t v178;
  int8x16_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  __int128 v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  __int128 v196;
  _BYTE *v197;
  unint64_t v198;
  unint64_t v199;
  int64x2_t v200;
  uint64_t v201[2];

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      v9 = a2;
      v165 = 0;
      v10 = (unint64_t *)(result + 16);
      result = 24;
      while (1)
      {
        v11 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v11)
          break;
LABEL_5:
        if (++v165 >= v5)
          return result;
      }
      v12 = 0;
      v13 = *(_DWORD *)(*a4 + 4 * v165);
      v14 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v165);
      v164 = *(unsigned int *)(v6 + 8);
      v163 = v13;
      v162 = v14;
      while (1)
      {
        v71 = *(_DWORD *)(*v8 + 4 * v12);
        v72 = *(int8x16_t **)v9;
        v73 = *(unsigned int *)(v9 + 16);
        v74 = *(_QWORD *)(v14 + 8 * v12);
        if (v7 && v71 > v13)
        {
          if (v74 == -1)
          {
            v75 = *(_QWORD *)(v6 + 80);
            if (v75)
            {
              v77 = *(_QWORD *)(v6 + 48);
              v76 = *(_QWORD *)(v6 + 56);
              v78 = ((v76 - v77) << 6) - 1;
              v79 = *(_QWORD *)(v6 + 72);
              if (v76 == v77)
                v78 = 0;
              v15 = *(_QWORD *)(v6 + 16)
                  + 8
                  * *(_QWORD *)(*(_QWORD *)(v77 + (((unint64_t)(v79 + v75 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((v79 + v75 - 1) & 0x1FF));
              *(_QWORD *)(v6 + 80) = v75 - 1;
              if ((unint64_t)(v78 - (v75 + v79) + 1) >= 0x400)
              {
                operator delete(*(void **)(v76 - 8));
                v14 = v162;
                v13 = v163;
                v11 = v164;
                result = 24;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v85 = *(void **)(v6 + 24);
              v200.i64[0] = 0;
              sub_20F1C5A3C(v10, v85, 0x36uLL, v200.i64);
              v14 = v162;
              v13 = v163;
              v11 = v164;
              result = 24;
              v15 = *(_QWORD *)(v6 + 24) - 432;
            }
            *(_QWORD *)(v14 + 8 * v12) = (v15 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v165);
          }
          else
          {
            v15 = *v10 + 8 * v74;
          }
          v16 = &v72->i64[v13 + (_DWORD)v73 * v71];
          v17 = *((int8x16_t *)v16 + 1);
          v18 = *((int8x16_t *)v16 + 2);
          v19 = (int64x2_t *)&v16[v73];
          v20 = v19[1];
          v21 = v19[2];
          v22 = *v19;
          v23 = &v16[2 * v73];
          v24 = *((_OWORD *)v23 + 1);
          v25 = *((int8x16_t *)v23 + 2);
          v26 = *(int64x2_t *)v23;
          *(_QWORD *)&v27 = v23[1];
          *(_QWORD *)&v28 = v23[3];
          v29.i64[0] = v23[5];
          v30 = &v16[3 * v73];
          v31 = *(int64x2_t *)v30;
          v196 = *((_OWORD *)v30 + 1);
          v198 = v30[1];
          v190 = v30[3];
          v186 = *((_OWORD *)v30 + 2);
          v187 = v30[5];
          v32 = (int8x16_t *)&v16[4 * v73];
          v33 = v32[1];
          v34 = v32[2];
          v35 = *(int64x2_t *)v32;
          v36 = (int64x2_t *)&v16[5 * v73];
          v37 = v36[1];
          v63 = v36[2];
          v38 = *v36;
          v39 = (int64x2_t *)&v16[6 * v73];
          v40 = v39[1];
          v41 = v39[2];
          v42 = *v39;
          v59 = vzip1q_s64(*(int64x2_t *)v16, v22);
          v43 = (int64x2_t *)&v16[7 * v73];
          v45 = v43[1];
          v44 = v43[2];
          v46 = *v43;
          v66 = vzip1q_s64(v26, v31);
          v47 = v37;
          v48 = (int8x16_t)vzip2q_s64(*(int64x2_t *)v16, v22);
          v49 = (int8x16_t *)&v16[8 * v73];
          v64 = v49[1];
          v50 = v49[2];
          v51 = *v49;
          *(int64x2_t *)v15 = v59;
          *(int64x2_t *)(v15 + 16) = v66;
          *(_QWORD *)&v52 = v35.i64[1];
          v53 = vzip1q_s64(v35, v38);
          v54 = v64;
          *(int64x2_t *)(v15 + 32) = v53;
          *(int64x2_t *)(v15 + 48) = vzip1q_s64(v42, v46);
          v55 = v20;
          *(_QWORD *)&v56 = v33.i64[1];
          v57.i64[0] = v34.i64[1];
          v58 = v38.u64[1];
          v59.i64[0] = v42.i64[1];
          v60 = v46.u64[1];
          *(_QWORD *)(v15 + 64) = v51.i64[0];
          v61 = v51.i64[1];
          v62 = v47.u64[1];
          v191 = v63.u64[1];
          v195 = v63.i64[0];
          v63.i64[0] = v40.i64[1];
          v64.i64[0] = v41.i64[1];
          v188 = v45.u64[1];
          v184 = v44.u64[1];
          v194 = v44.i64[0];
          v193 = v54.i64[1];
          v192 = v50.i64[1];
          v185 = v50.i64[0];
          v189 = v21.u64[1];
          v65 = v21.i64[0];
          v66.i64[0] = v18.i64[1];
          v67 = vextq_s8(v48, v48, 8uLL).u64[0];
          v68 = (int8x16_t)vzip2q_s64((int64x2_t)v17, v55);
          v69 = vextq_s8(v68, v68, 8uLL).u64[0];
          goto LABEL_10;
        }
        if (v74 == -1)
          break;
        v15 = *v10 + 8 * v74;
LABEL_84:
        v136 = (int8x16_t *)((char *)v72 + 8 * v71 + 8 * (_DWORD)v73 * v13);
        v137 = v136[4].i64[0];
        v139 = v136[2];
        v138 = v136[3];
        v153 = *v136;
        v154 = v136[1];
        v140 = vextq_s8(v138, v138, 8uLL).u64[0];
        v141 = vextq_s8(v139, v139, 8uLL).u64[0];
        v142 = (int8x16_t *)((char *)v136 + 8 * v73);
        v48 = *v142;
        v181 = v142[4].i64[0];
        v172 = v142[2];
        v173 = v142[3];
        v178 = vextq_s8(v173, v173, 8uLL).u64[0];
        v179 = v142[1];
        v174 = vextq_s8(v172, v172, 8uLL).u64[0];
        v198 = vextq_s8(v179, v179, 8uLL).u64[0];
        v170 = vextq_s8(v48, v48, 8uLL).u64[0];
        v143 = &v136[v73];
        v144 = v143[4].i64[0];
        v175 = v143[3];
        v176 = v143[2];
        v180 = vextq_s8(v175, v175, 8uLL).u64[0];
        v182 = vextq_s8(v176, v176, 8uLL).u64[0];
        v177 = v143[1];
        *(_QWORD *)&v196 = vextq_s8(v177, v177, 8uLL).u64[0];
        v17 = *v143;
        v183 = vextq_s8(v17, v17, 8uLL).u64[0];
        v145 = (int8x16_t *)((char *)v136 + 24 * v73);
        v146 = v145[2];
        v147 = v145[3];
        v68 = *v145;
        v148 = v145[1];
        v193 = v145[4].i64[0];
        v149 = &v136[2 * v73];
        v150 = (int8x16_t *)((char *)v136 + 40 * v73);
        v168 = v147.i64[0];
        v188 = vextq_s8(v147, v147, 8uLL).u64[0];
        v171 = v146.i64[0];
        v169 = vextq_s8(v146, v146, 8uLL).u64[0];
        *(_QWORD *)&v28 = v148.i64[0];
        v190 = vextq_s8(v148, v148, 8uLL).u64[0];
        v18 = *v149;
        v166 = v149[3];
        v167 = vextq_s8(v68, v68, 8uLL).u64[0];
        v34 = v149[2];
        v194 = vextq_s8(v166, v166, 8uLL).u64[0];
        v195 = vextq_s8(v34, v34, 8uLL).u64[0];
        v25 = v149[1];
        v151 = vextq_s8(v18, v18, 8uLL).u64[0];
        v152 = *v150;
        v192 = v150[4].i64[0];
        v64 = v150[3];
        v57 = v150[2];
        v191 = vextq_s8(v57, v57, 8uLL).u64[0];
        v29 = v150[1];
        v189 = vextq_s8(v152, v152, 8uLL).u64[0];
        *(_QWORD *)&v186 = vextq_s8(v25, v25, 8uLL).u64[0];
        v187 = vextq_s8(v29, v29, 8uLL).u64[0];
        v184 = vextq_s8(v64, v64, 8uLL).u64[0];
        v185 = v149[4].i64[0];
        v153.i64[1] = vextq_s8(v153, v153, 8uLL).u64[0];
        v154.i64[1] = vextq_s8(v154, v154, 8uLL).u64[0];
        if (v72 == (int8x16_t *)v15)
        {
          *v72 = v153;
          v72[1] = v154;
          v139.i64[1] = v141;
          v72[4].i64[0] = v137;
          v138.i64[1] = v140;
          v72[2] = v139;
          v72[3] = v138;
          v15 = (uint64_t)v72;
        }
        else
        {
          v139.i64[1] = v141;
          *(int8x16_t *)v15 = v153;
          *(int8x16_t *)(v15 + 16) = v154;
          *(_QWORD *)(v15 + 64) = v137;
          v138.i64[1] = v140;
          *(int8x16_t *)(v15 + 32) = v139;
          *(int8x16_t *)(v15 + 48) = v138;
        }
        v47.i64[0] = v182;
        v55.i64[0] = v183;
        v61 = v181;
        v54.i64[0] = v144;
        v65 = v151;
        *(_QWORD *)&v27 = v179.i64[0];
        v45.i64[0] = v180;
        *(_QWORD *)&v24 = v177.i64[0];
        v60 = v178;
        v40.i64[0] = v175.i64[0];
        v33.i64[0] = v176.i64[0];
        v59.i64[0] = v173.i64[0];
        v58 = v174;
        *(_QWORD *)&v56 = v171;
        *(_QWORD *)&v52 = v172.i64[0];
        v62 = v169;
        v67 = v170;
        v69 = v167;
        v63.i64[0] = v168;
        v41.i64[0] = v166.i64[0];
        v66.i64[0] = v152.i64[0];
LABEL_10:
        *((_QWORD *)&v27 + 1) = v198;
        v68.i64[1] = v69;
        v18.i64[1] = v65;
        v48.i64[1] = v67;
        *((_QWORD *)&v52 + 1) = v58;
        v59.i64[1] = v60;
        *((_QWORD *)&v24 + 1) = v196;
        v17.i64[1] = v55.i64[0];
        v33.i64[1] = v47.i64[0];
        v40.i64[1] = v45.i64[0];
        *((_QWORD *)&v28 + 1) = v190;
        *((_QWORD *)&v56 + 1) = v62;
        *(int8x16_t *)(v15 + 216) = v68;
        v70 = v15 + 216;
        *(int8x16_t *)(v70 + 72) = v18;
        v70 += 72;
        *(_OWORD *)(v70 - 200) = v27;
        *(int8x16_t *)(v70 - 216) = v48;
        *(_OWORD *)(v70 - 184) = v52;
        *(_QWORD *)(v70 - 152) = v61;
        *(int64x2_t *)(v70 - 168) = v59;
        *(int8x16_t *)(v70 - 144) = v17;
        *(_OWORD *)(v70 - 128) = v24;
        *(_QWORD *)(v70 - 80) = v54.i64[0];
        *(int8x16_t *)(v70 - 112) = v33;
        *(int64x2_t *)(v70 - 96) = v40;
        *(_OWORD *)(v70 - 56) = v28;
        *(_OWORD *)(v70 - 40) = v56;
        *(_QWORD *)(v70 - 8) = v193;
        v63.i64[1] = v188;
        v25.i64[1] = v186;
        *(int64x2_t *)(v70 - 24) = v63;
        v34.i64[1] = v195;
        *(int8x16_t *)(v70 + 16) = v25;
        *(int8x16_t *)(v70 + 32) = v34;
        *(_QWORD *)(v70 + 64) = v185;
        v41.i64[1] = v194;
        *(int64x2_t *)(v70 + 48) = v41;
        v29.i64[1] = v187;
        *(int8x16_t *)(v70 + 88) = v29;
        v66.i64[1] = v189;
        *(int64x2_t *)(v70 + 72) = v66;
        v57.i64[1] = v191;
        *(int8x16_t *)(v70 + 104) = v57;
        *(_QWORD *)(v70 + 136) = v192;
        v64.i64[1] = v184;
        ++v12;
        *(int8x16_t *)(v70 + 120) = v64;
        if (v12 == v11)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v80 = *(_QWORD *)(v6 + 80);
      if (v80)
      {
        v82 = *(_QWORD *)(v6 + 48);
        v81 = *(_QWORD *)(v6 + 56);
        v83 = ((v81 - v82) << 6) - 1;
        v84 = *(_QWORD *)(v6 + 72);
        if (v81 == v82)
          v83 = 0;
        v15 = *(_QWORD *)(v6 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v82 + (((unint64_t)(v84 + v80 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v84 + v80 - 1) & 0x1FF));
        *(_QWORD *)(v6 + 80) = v80 - 1;
        if ((unint64_t)(v83 - (v80 + v84) + 1) >= 0x400)
        {
          operator delete(*(void **)(v81 - 8));
          v14 = v162;
          v13 = v163;
          v11 = v164;
          result = 24;
          *(_QWORD *)(v6 + 56) -= 8;
        }
        goto LABEL_83;
      }
      v200.i64[0] = 0;
      v87 = *(_QWORD *)(v6 + 16);
      v86 = *(int64x2_t **)(v6 + 24);
      v88 = (uint64_t)v86->i64 - v87;
      v89 = (uint64_t)((uint64_t)v86->i64 - v87) >> 3;
      v90 = (uint64_t *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8));
      v91 = *(_QWORD *)(v6 + 32);
      if ((unint64_t)(v91 - (_QWORD)v86) < 0x1B0)
      {
        v92 = v89 + 54;
        if ((unint64_t)(v89 + 54) >> 61)
          sub_20E867F44();
        v93 = v91 - v87;
        if (v93 >> 2 > v92)
          v92 = v93 >> 2;
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        v199 = v92;
        if (v92)
        {
          if (v92 >> 61)
            sub_20E877A38();
          v94 = operator new(8 * v92);
          v89 = (uint64_t)((uint64_t)v86->i64 - v87) >> 3;
        }
        else
        {
          v94 = 0;
        }
        v101 = &v94[8 * v89];
        v101[25] = 0u;
        v101[26] = 0u;
        v101[23] = 0u;
        v101[24] = 0u;
        v101[21] = 0u;
        v101[22] = 0u;
        v101[19] = 0u;
        v101[20] = 0u;
        v101[17] = 0u;
        v101[18] = 0u;
        v101[15] = 0u;
        v101[16] = 0u;
        v101[13] = 0u;
        v101[14] = 0u;
        v101[11] = 0u;
        v101[12] = 0u;
        v101[9] = 0u;
        v101[10] = 0u;
        v101[7] = 0u;
        v101[8] = 0u;
        v101[5] = 0u;
        v101[6] = 0u;
        v101[3] = 0u;
        v101[4] = 0u;
        v101[1] = 0u;
        v101[2] = 0u;
        *v101 = 0u;
        if ((int64x2_t *)v87 == v86)
        {
          v103 = &v94[8 * v89];
        }
        else
        {
          if ((unint64_t)(v88 - 8) >= 0x68)
          {
            v102 = (char *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8));
            v103 = &v94[8 * v89];
            if (v87 + (v88 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v94[v88 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v104 = ((unint64_t)(v88 - 8) >> 3) + 1;
              v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
              v102 = (char *)&v90[v105 / 0xFFFFFFFFFFFFFFF8];
              v103 = (char *)v101 - v105;
              v106 = &v94[8 * v89 - 16];
              v107 = (__int128 *)(v87 + 8 * v89 - 16);
              v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v109 = *v107;
                *(v106 - 1) = *(v107 - 1);
                *v106 = v109;
                v106 -= 2;
                v107 -= 2;
                v108 -= 4;
              }
              while (v108);
              if (v104 == (v104 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_51;
            }
          }
          else
          {
            v102 = (char *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8));
            v103 = &v94[8 * v89];
          }
          do
          {
            v110 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *((_QWORD *)v103 - 1) = v110;
            v103 -= 8;
          }
          while (v102 != (char *)v87);
        }
LABEL_51:
        v111 = v101 + 27;
        v112 = (char *)v86 - (char *)v90;
        if (v112)
        {
          v197 = v94;
          memmove(v101 + 27, v90, v112);
          v94 = v197;
        }
        *(_QWORD *)(v6 + 16) = v103;
        *(_QWORD *)(v6 + 24) = (char *)v111 + v112;
        *(_QWORD *)(v6 + 32) = &v94[8 * v199];
        v7 = a5;
        result = 24;
        v11 = v164;
        v13 = v163;
        v14 = v162;
        if (v87)
        {
          operator delete((void *)v87);
          v14 = v162;
          v13 = v163;
          v11 = v164;
          result = 24;
        }
        goto LABEL_82;
      }
      v95 = (char *)v86 - (char *)v90;
      if ((unint64_t)((char *)v86 - (char *)v90) > 0x1AF)
      {
        v97 = *(uint64_t **)(v6 + 24);
        v96 = 54;
        goto LABEL_62;
      }
      v96 = v95 >> 3;
      v97 = &v86->i64[54 - (v95 >> 3)];
      v98 = v95 & 0xFFFFFFFFFFFFFFF8;
      v99 = 424 - v98;
      if (424 - v98 >= 0x68)
      {
        v113 = &v200 < (int64x2_t *)((char *)&v86[27] - v98);
        if (v86 >= (int64x2_t *)v201 || (v100 = *(uint64_t **)(v6 + 24), !v113))
        {
          v114 = (v99 >> 3) + 1;
          v100 = &v86->i64[v114 & 0x3FFFFFFFFFFFFFFCLL];
          v115 = vdupq_lane_s64(v200.i64[0], 0);
          v116 = v86 + 1;
          v117 = v114 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116[-1] = v115;
            *v116 = v115;
            v116 += 2;
            v117 -= 4;
          }
          while (v117);
          if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_61:
            *(_QWORD *)(v6 + 24) = v97;
            if (v86 == (int64x2_t *)v90)
              goto LABEL_82;
LABEL_62:
            v118 = (char *)v97 - (char *)(v90 + 54);
            v119 = v118 >> 3;
            v120 = (int64x2_t *)(v97 - 54);
            v121 = v97;
            if (v97 - 54 < (uint64_t *)v86)
            {
              v122 = (v88 & 0xFFFFFFFFFFFFFFF8) + v118;
              v123 = v87 + v122 + 8;
              if ((unint64_t)v86 > v123)
                v123 = (unint64_t)v86;
              v124 = v123 + ~v87 - v122;
              if (v124 >= 0x58)
              {
                v125 = (v124 >> 3) + 1;
                v126 = v125 & 0x3FFFFFFFFFFFFFFCLL;
                v120 = (int64x2_t *)((char *)v120 + v126 * 8);
                v121 = &v97[v126];
                v127 = v97 + 2;
                v128 = (__int128 *)(v87 + 8 * v119 + 8 * v89 + 16);
                v129 = v125 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v130 = *v128;
                  *(v127 - 1) = *(v128 - 1);
                  *v127 = v130;
                  v127 += 2;
                  v128 += 2;
                  v129 -= 4;
                }
                while (v129);
                if (v125 == (v125 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_71;
              }
              else
              {
                v121 = v97;
              }
              do
              {
                v131 = v120->i64[0];
                v120 = (int64x2_t *)((char *)v120 + 8);
                *v121++ = v131;
              }
              while (v120 < v86);
            }
LABEL_71:
            *(_QWORD *)(v6 + 24) = v121;
            if (v97 != v90 + 54)
            {
              v132 = v96;
              memmove(&v97[-v119], (const void *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8)), v118);
              v96 = v132;
              v89 = (uint64_t)((uint64_t)v86->i64 - v87) >> 3;
              v14 = v162;
              v13 = v163;
              v11 = v164;
              result = 24;
            }
            v133 = (uint64_t *)&v200;
            if (v90 <= (uint64_t *)&v200)
            {
              v134 = 54;
              if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v200)
                v134 = 0;
              v133 = &v200.i64[v134];
            }
            if (v96 >= 0xA
              && (v90 >= v133 + 1
               || (unint64_t)v133 >= v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8) + 8 * v96))
            {
              v90 += v96 & 0xFFFFFFFFFFFFFFFCLL;
              v135 = v96 & 3;
              v155 = vld1q_dup_f64((const double *)v133);
              v156 = (float64x2_t *)(v87 + 8 * v89 + 16);
              v157 = v96 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v156[-1] = v155;
                *v156 = v155;
                v156 += 2;
                v157 -= 4;
              }
              while (v157);
              v7 = a5;
              if (v96 == (v96 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_82;
            }
            else
            {
              v135 = v96;
              v7 = a5;
            }
            do
            {
              *v90++ = *v133;
              --v135;
            }
            while (v135);
LABEL_82:
            v15 = *(_QWORD *)(v6 + 24) - 432;
            v9 = a2;
            v8 = a3;
            v10 = (unint64_t *)(v6 + 16);
LABEL_83:
            *(_QWORD *)(v14 + 8 * v12) = (v15 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v165);
            goto LABEL_84;
          }
        }
      }
      else
      {
        v100 = *(uint64_t **)(v6 + 24);
      }
      do
        *v100++ = v200.i64[0];
      while (v100 != v97);
      goto LABEL_61;
    }
  }
  return result;
}

uint64_t sub_20FA24D2C(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  int64x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t *v25;
  int64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t *v29;
  int64x2_t v30;
  unint64_t v31;
  unint64_t v32;
  int64x2_t *v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int64x2_t *v37;
  int64x2_t v38;
  unint64_t v39;
  unint64_t v40;
  int64x2_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int64x2_t v46;
  int8x16_t v47;
  int8x16_t v48;
  unsigned int v49;
  int8x16_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  int64x2_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  char *v79;
  char *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  size_t v90;
  BOOL v91;
  uint64_t v92;
  int64x2_t v93;
  int64x2_t *v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  int64x2_t *v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;
  const double *v111;
  uint64_t v112;
  unint64_t v113;
  float64x2_t v114;
  float64x2_t *v115;
  unint64_t v116;
  int8x16_t *v117;
  uint64_t v118;
  int8x16_t v119;
  int8x16_t v120;
  unint64_t v121;
  unint64_t v122;
  int8x16_t *v123;
  int8x16_t *v124;
  int8x16_t v125;
  int8x16_t v126;
  _BYTE *v129;
  unint64_t v130;
  unint64_t *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      v9 = a2;
      v137 = 0;
      v10 = (unint64_t *)(result + 16);
      v133 = (unint64_t *)(result + 16);
      while (1)
      {
        result = *(unsigned int *)(v6 + 8);
        if ((_DWORD)result)
          break;
LABEL_5:
        if (++v137 >= v5)
          return result;
      }
      v11 = 0;
      v12 = *(_DWORD *)(*a4 + 4 * v137);
      v13 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v137);
      v136 = *(unsigned int *)(v6 + 8);
      v135 = v12;
      v134 = v13;
      while (1)
      {
        v49 = *(_DWORD *)(*v8 + 4 * v11);
        v50 = *(int8x16_t **)v9;
        v51 = *(unsigned int *)(v9 + 16);
        v52 = *(_QWORD *)(v13 + 8 * v11);
        if (v7 && v49 > v12)
        {
          if (v52 == -1)
          {
            v53 = *(_QWORD *)(v6 + 80);
            if (v53)
            {
              v55 = *(_QWORD *)(v6 + 48);
              v54 = *(_QWORD *)(v6 + 56);
              v56 = ((v54 - v55) << 6) - 1;
              v57 = *(_QWORD *)(v6 + 72);
              if (v54 == v55)
                v56 = 0;
              v14 = *(_QWORD *)(v6 + 16)
                  + 8
                  * *(_QWORD *)(*(_QWORD *)(v55 + (((unint64_t)(v57 + v53 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((v57 + v53 - 1) & 0x1FF));
              *(_QWORD *)(v6 + 80) = v53 - 1;
              if ((unint64_t)(v56 - (v53 + v57) + 1) >= 0x400)
              {
                operator delete(*(void **)(v54 - 8));
                v13 = v134;
                v12 = v135;
                result = v136;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v63 = *(void **)(v6 + 24);
              v138 = 0;
              sub_20F1C5A3C(v10, v63, 0x1BuLL, &v138);
              v13 = v134;
              v12 = v135;
              result = v136;
              v14 = *(_QWORD *)(v6 + 24) - 216;
            }
            *(_QWORD *)(v13 + 8 * v11) = (v14 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v137);
          }
          else
          {
            v14 = *v10 + 8 * v52;
          }
          v15 = (int64x2_t *)((char *)v50 + 8 * v12 + 8 * (_DWORD)v51 * v49);
          v16 = (int64x2_t *)((char *)v15 + 8 * v51);
          v17 = &v15[v51];
          v18 = *v17;
          v19.i64[0] = v17->i64[1];
          v20.i64[0] = v17[1].i64[0];
          v21 = (int64x2_t *)((char *)v15 + 24 * v51);
          v22 = *v21;
          v23 = v21->u64[1];
          v24 = v21[1].u64[0];
          v25 = &v15[2 * v51];
          v26 = *v25;
          v27.i64[0] = v25->i64[1];
          v28.i64[0] = v25[1].i64[0];
          v29 = (int64x2_t *)((char *)v15 + 40 * v51);
          v30 = *v29;
          v31 = v29->u64[1];
          v32 = v29[1].u64[0];
          v33 = &v15[3 * v51];
          v34 = *v33;
          v35.i64[0] = v33->i64[1];
          v36.i64[0] = v33[1].i64[0];
          v37 = (int64x2_t *)((char *)v15 + 56 * v51);
          v38 = *v37;
          v39 = v37->u64[1];
          v40 = v37[1].u64[0];
          v41 = &v15[4 * v51];
          v42 = v41->i64[1];
          v43 = v41[1].i64[0];
          v44 = v16->u64[1];
          v45 = v16[1].u64[0];
          v46 = vzip1q_s64(*v15, *v16);
          v47.i64[0] = v15->i64[1];
          v48.i64[0] = v15[1].i64[0];
          *(_QWORD *)(v14 + 64) = v41->i64[0];
          *(int64x2_t *)v14 = v46;
          *(int64x2_t *)(v14 + 16) = vzip1q_s64(v18, v22);
          *(int64x2_t *)(v14 + 32) = vzip1q_s64(v26, v30);
          *(int64x2_t *)(v14 + 48) = vzip1q_s64(v34, v38);
          goto LABEL_10;
        }
        if (v52 != -1)
        {
          v14 = *v10 + 8 * v52;
          goto LABEL_88;
        }
        v58 = *(_QWORD *)(v6 + 80);
        if (v58)
        {
          v60 = *(_QWORD *)(v6 + 48);
          v59 = *(_QWORD *)(v6 + 56);
          v61 = ((v59 - v60) << 6) - 1;
          v62 = *(_QWORD *)(v6 + 72);
          if (v59 == v60)
            v61 = 0;
          v14 = *(_QWORD *)(v6 + 16)
              + 8
              * *(_QWORD *)(*(_QWORD *)(v60 + (((unint64_t)(v62 + v58 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v62 + v58 - 1) & 0x1FF));
          *(_QWORD *)(v6 + 80) = v58 - 1;
          if ((unint64_t)(v61 - (v58 + v62) + 1) >= 0x400)
          {
            operator delete(*(void **)(v59 - 8));
            v13 = v134;
            v12 = v135;
            result = v136;
            *(_QWORD *)(v6 + 56) -= 8;
          }
          goto LABEL_87;
        }
        v138 = 0;
        v65 = *(_QWORD *)(v6 + 16);
        v64 = *(int64x2_t **)(v6 + 24);
        v66 = (unint64_t)v64 - v65;
        v67 = (uint64_t)((uint64_t)v64->i64 - v65) >> 3;
        v68 = (uint64_t *)(v65 + (((unint64_t)v64 - v65) & 0xFFFFFFFFFFFFFFF8));
        v69 = *(_QWORD *)(v6 + 32);
        if ((unint64_t)(v69 - (_QWORD)v64) < 0xD8)
        {
          v70 = v67 + 27;
          if ((unint64_t)(v67 + 27) >> 61)
            sub_20E867F44();
          v71 = v69 - v65;
          if (v71 >> 2 > v70)
            v70 = v71 >> 2;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          v130 = v70;
          if (v70)
          {
            if (v70 >> 61)
              sub_20E877A38();
            v72 = operator new(8 * v70);
            v67 = (uint64_t)((uint64_t)v64->i64 - v65) >> 3;
          }
          else
          {
            v72 = 0;
          }
          v79 = &v72[8 * v67];
          *((_QWORD *)v79 + 26) = 0;
          *((_OWORD *)v79 + 11) = 0u;
          *((_OWORD *)v79 + 12) = 0u;
          *((_OWORD *)v79 + 9) = 0u;
          *((_OWORD *)v79 + 10) = 0u;
          *((_OWORD *)v79 + 7) = 0u;
          *((_OWORD *)v79 + 8) = 0u;
          *((_OWORD *)v79 + 5) = 0u;
          *((_OWORD *)v79 + 6) = 0u;
          *((_OWORD *)v79 + 3) = 0u;
          *((_OWORD *)v79 + 4) = 0u;
          *((_OWORD *)v79 + 1) = 0u;
          *((_OWORD *)v79 + 2) = 0u;
          *(_OWORD *)v79 = 0u;
          if ((int64x2_t *)v65 == v64)
          {
            v81 = &v72[8 * v67];
          }
          else
          {
            if (v66 - 8 < 0x68)
            {
              v80 = (char *)(v65 + (((unint64_t)v64 - v65) & 0xFFFFFFFFFFFFFFF8));
              v81 = &v72[8 * v67];
              goto LABEL_50;
            }
            v80 = (char *)(v65 + (((unint64_t)v64 - v65) & 0xFFFFFFFFFFFFFFF8));
            v81 = &v72[8 * v67];
            if (v65 + (v66 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v72[v66 & 0xFFFFFFFFFFFFFFF8] < 0x20)
              goto LABEL_96;
            v82 = ((v66 - 8) >> 3) + 1;
            v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
            v80 = (char *)&v68[v83 / 0xFFFFFFFFFFFFFFF8];
            v81 = &v79[-v83];
            v84 = &v72[8 * v67 - 16];
            v85 = (__int128 *)(v65 + 8 * v67 - 16);
            v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v87 = *v85;
              *(v84 - 1) = *(v85 - 1);
              *v84 = v87;
              v84 -= 2;
              v85 -= 2;
              v86 -= 4;
            }
            while (v86);
            if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_96:
              do
              {
LABEL_50:
                v88 = *((_QWORD *)v80 - 1);
                v80 -= 8;
                *((_QWORD *)v81 - 1) = v88;
                v81 -= 8;
              }
              while (v80 != (char *)v65);
            }
          }
          v89 = v79 + 216;
          v90 = (char *)v64 - (char *)v68;
          if (v90)
          {
            v129 = v72;
            memmove(v79 + 216, v68, v90);
            v72 = v129;
          }
          *(_QWORD *)(v6 + 16) = v81;
          *(_QWORD *)(v6 + 24) = &v89[v90];
          *(_QWORD *)(v6 + 32) = &v72[8 * v130];
          v7 = a5;
          result = v136;
          v12 = v135;
          v13 = v134;
          if (v65)
          {
            operator delete((void *)v65);
            v13 = v134;
            v12 = v135;
            result = v136;
          }
          goto LABEL_86;
        }
        v73 = (char *)v64 - (char *)v68;
        if ((unint64_t)((char *)v64 - (char *)v68) > 0xD7)
        {
          v75 = *(uint64_t **)(v6 + 24);
          v74 = 27;
          goto LABEL_62;
        }
        v74 = v73 >> 3;
        v75 = &v64->i64[27 - (v73 >> 3)];
        v76 = v73 & 0xFFFFFFFFFFFFFFF8;
        v77 = 208 - v76;
        if (208 - v76 < 0x68)
          break;
        v91 = &v138 < (uint64_t *)((char *)&v64[13].i64[1] - v76);
        if (v64 < (int64x2_t *)&v139)
        {
          v78 = *(uint64_t **)(v6 + 24);
          if (v91)
            goto LABEL_60;
        }
        v92 = (v77 >> 3) + 1;
        v78 = &v64->i64[v92 & 0x3FFFFFFFFFFFFFFCLL];
        v93 = vdupq_lane_s64(v138, 0);
        v94 = v64 + 1;
        v95 = v92 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v94[-1] = v93;
          *v94 = v93;
          v94 += 2;
          v95 -= 4;
        }
        while (v95);
        if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_60;
LABEL_61:
        *(_QWORD *)(v6 + 24) = v75;
        if (v64 == (int64x2_t *)v68)
          goto LABEL_86;
LABEL_62:
        v96 = (char *)v75 - (char *)(v68 + 27);
        v97 = v96 >> 3;
        v98 = (int64x2_t *)(v75 - 27);
        v99 = (char *)v75;
        if (v75 - 27 < (uint64_t *)v64)
        {
          v100 = (v66 & 0xFFFFFFFFFFFFFFF8) + v96;
          v101 = v65 + v100 + 8;
          if ((unint64_t)v64 > v101)
            v101 = (unint64_t)v64;
          v102 = v101 + ~v65 - v100;
          if (v102 >= 0x58)
          {
            v103 = (v102 >> 3) + 1;
            v104 = v103 & 0x3FFFFFFFFFFFFFFCLL;
            v98 = (int64x2_t *)((char *)v98 + v104 * 8);
            v99 = (char *)&v75[v104];
            v105 = v75 + 2;
            v106 = (__int128 *)(v65 + 8 * v97 + 8 * v67 + 16);
            v107 = v103 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v108 = *v106;
              *(v105 - 1) = *(v106 - 1);
              *v105 = v108;
              v105 += 2;
              v106 += 2;
              v107 -= 4;
            }
            while (v107);
            if (v103 == (v103 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_71;
          }
          else
          {
            v99 = (char *)v75;
          }
          do
          {
            v109 = v98->i64[0];
            v98 = (int64x2_t *)((char *)v98 + 8);
            *(_QWORD *)v99 = v109;
            v99 += 8;
          }
          while (v98 < v64);
        }
LABEL_71:
        *(_QWORD *)(v6 + 24) = v99;
        if (v75 != v68 + 27)
        {
          v110 = v74;
          memmove(&v75[-v97], (const void *)(v65 + (((unint64_t)v64 - v65) & 0xFFFFFFFFFFFFFFF8)), v96);
          v74 = v110;
          v67 = (uint64_t)((uint64_t)v64->i64 - v65) >> 3;
          v13 = v134;
          v12 = v135;
          result = v136;
        }
        v111 = (const double *)&v138;
        if (v68 <= &v138)
        {
          v112 = 216;
          if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v138)
            v112 = 0;
          v111 = (const double *)((char *)&v138 + v112);
        }
        if (v74 >= 0xA)
        {
          if (v68 >= (uint64_t *)v111 + 1
            || (unint64_t)v111 >= v65 + (((unint64_t)v64 - v65) & 0xFFFFFFFFFFFFFFF8) + 8 * v74)
          {
            v68 += v74 & 0xFFFFFFFFFFFFFFFCLL;
            v113 = v74 & 3;
            v114 = vld1q_dup_f64(v111);
            v115 = (float64x2_t *)(v65 + 8 * v67 + 16);
            v116 = v74 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v115[-1] = v114;
              *v115 = v114;
              v115 += 2;
              v116 -= 4;
            }
            while (v116);
            if (v74 == (v74 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_86;
          }
          else
          {
            v113 = v74;
          }
        }
        else
        {
          v113 = v74;
        }
        do
        {
          *v68++ = *(_QWORD *)v111;
          --v113;
        }
        while (v113);
LABEL_86:
        v14 = *(_QWORD *)(v6 + 24) - 216;
        v9 = a2;
        v8 = a3;
        v10 = v133;
LABEL_87:
        *(_QWORD *)(v13 + 8 * v11) = (v14 - *(_QWORD *)(v6 + 16)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v137);
LABEL_88:
        v117 = (int8x16_t *)((char *)v50 + 8 * v49 + 8 * (_DWORD)v51 * v12);
        v118 = v117[4].i64[0];
        v120 = v117[2];
        v119 = v117[3];
        v125 = *v117;
        v126 = v117[1];
        v121 = vextq_s8(v119, v119, 8uLL).u64[0];
        v122 = vextq_s8(v120, v120, 8uLL).u64[0];
        v123 = (int8x16_t *)((char *)v117 + 8 * v51);
        v27 = v123[2];
        v35 = v123[3];
        v47 = *v123;
        v19 = v123[1];
        v42 = v123[4].i64[0];
        v39 = vextq_s8(v35, v35, 8uLL).u64[0];
        v31 = vextq_s8(v27, v27, 8uLL).u64[0];
        v23 = vextq_s8(v19, v19, 8uLL).u64[0];
        v44 = vextq_s8(v47, v47, 8uLL).u64[0];
        v124 = &v117[v51];
        v28 = v124[2];
        v36 = v124[3];
        v48 = *v124;
        v20 = v124[1];
        v43 = v124[4].i64[0];
        v40 = vextq_s8(v36, v36, 8uLL).u64[0];
        v32 = vextq_s8(v28, v28, 8uLL).u64[0];
        v24 = vextq_s8(v20, v20, 8uLL).u64[0];
        v45 = vextq_s8(v48, v48, 8uLL).u64[0];
        v125.i64[1] = vextq_s8(v125, v125, 8uLL).u64[0];
        v126.i64[1] = vextq_s8(v126, v126, 8uLL).u64[0];
        if (v50 == (int8x16_t *)v14)
        {
          *v50 = v125;
          v50[1] = v126;
          v120.i64[1] = v122;
          v50[4].i64[0] = v118;
          v119.i64[1] = v121;
          v50[2] = v120;
          v50[3] = v119;
          v14 = (uint64_t)v50;
        }
        else
        {
          v120.i64[1] = v122;
          *(int8x16_t *)v14 = v125;
          *(int8x16_t *)(v14 + 16) = v126;
          *(_QWORD *)(v14 + 64) = v118;
          v119.i64[1] = v121;
          *(int8x16_t *)(v14 + 32) = v120;
          *(int8x16_t *)(v14 + 48) = v119;
        }
LABEL_10:
        v47.i64[1] = v44;
        v19.i64[1] = v23;
        *(int8x16_t *)(v14 + 72) = v47;
        *(int8x16_t *)(v14 + 88) = v19;
        v27.i64[1] = v31;
        *(int8x16_t *)(v14 + 104) = v27;
        *(_QWORD *)(v14 + 136) = v42;
        v35.i64[1] = v39;
        v48.i64[1] = v45;
        v20.i64[1] = v24;
        *(int8x16_t *)(v14 + 120) = v35;
        *(int8x16_t *)(v14 + 144) = v48;
        *(int8x16_t *)(v14 + 160) = v20;
        v28.i64[1] = v32;
        *(_QWORD *)(v14 + 208) = v43;
        v36.i64[1] = v40;
        ++v11;
        *(int8x16_t *)(v14 + 176) = v28;
        *(int8x16_t *)(v14 + 192) = v36;
        if (v11 == result)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v78 = *(uint64_t **)(v6 + 24);
      do
LABEL_60:
        *v78++ = v138;
      while (v78 != v75);
      goto LABEL_61;
    }
  }
  return result;
}

uint64_t sub_20FA255C8(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t *v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t *v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t *v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t *v37;
  int8x16_t *v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int8x16_t *v70;
  unsigned int v71;
  int8x16_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  int64x2_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  _OWORD *v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  _OWORD *v111;
  size_t v112;
  BOOL v113;
  uint64_t v114;
  int64x2_t v115;
  int64x2_t *v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  int64x2_t *v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _OWORD *v127;
  __int128 *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  float64x2_t v136;
  float64x2_t *v137;
  unint64_t v138;
  int8x16_t *v139;
  uint64_t v140;
  int8x16_t v141;
  int8x16_t v142;
  unint64_t v143;
  unint64_t v144;
  int8x16_t *v145;
  int8x16_t *v146;
  int8x16_t *v147;
  int8x16_t v148;
  int8x16_t v149;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _BYTE *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  int64x2_t v168;
  uint64_t v169[2];

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = result;
    if (*(_DWORD *)(result + 8))
    {
      v7 = a5;
      v8 = a3;
      v9 = a2;
      v157 = 0;
      v10 = (unint64_t *)(result + 16);
      result = 24;
      while (1)
      {
        v11 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v11)
          break;
LABEL_5:
        if (++v157 >= v5)
          return result;
      }
      v12 = 0;
      v13 = *(_DWORD *)(*a4 + 4 * v157);
      v14 = *(_QWORD *)(v6 + 88) + 8 * (*(_DWORD *)(v6 + 112) * v157);
      v156 = *(unsigned int *)(v6 + 8);
      v155 = v13;
      v154 = v14;
      while (1)
      {
        v71 = *(_DWORD *)(*v8 + 4 * v12);
        v72 = *(int8x16_t **)v9;
        v73 = *(unsigned int *)(v9 + 16);
        v74 = *(_QWORD *)(v14 + 8 * v12);
        if (v7 && v71 > v13)
        {
          if (v74 == -1)
          {
            v75 = *(_QWORD *)(v6 + 80);
            if (v75)
            {
              v77 = *(_QWORD *)(v6 + 48);
              v76 = *(_QWORD *)(v6 + 56);
              v78 = ((v76 - v77) << 6) - 1;
              v79 = *(_QWORD *)(v6 + 72);
              if (v76 == v77)
                v78 = 0;
              v15 = *(_QWORD *)(v6 + 16)
                  + 8
                  * *(_QWORD *)(*(_QWORD *)(v77 + (((unint64_t)(v79 + v75 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((v79 + v75 - 1) & 0x1FF));
              *(_QWORD *)(v6 + 80) = v75 - 1;
              if ((unint64_t)(v78 - (v75 + v79) + 1) >= 0x400)
              {
                operator delete(*(void **)(v76 - 8));
                v14 = v154;
                v13 = v155;
                v11 = v156;
                result = 24;
                *(_QWORD *)(v6 + 56) -= 8;
              }
            }
            else
            {
              v85 = *(void **)(v6 + 24);
              v168.i64[0] = 0;
              sub_20F1C5A3C(v10, v85, 0x24uLL, v168.i64);
              v14 = v154;
              v13 = v155;
              v11 = v156;
              result = 24;
              v15 = *(_QWORD *)(v6 + 24) - 288;
            }
            *(_QWORD *)(v14 + 8 * v12) = (v15 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v157);
          }
          else
          {
            v15 = *v10 + 8 * v74;
          }
          v16 = (int64x2_t *)((char *)v72 + 8 * v13 + 8 * (_DWORD)v73 * v71);
          v17 = *v16;
          v18 = v16[1];
          v19 = (int64x2_t *)((char *)v16 + 8 * v73);
          v20 = *v19;
          v21 = v19[1];
          v22 = &v16[v73];
          v23 = *v22;
          v24 = v22[1];
          v25 = (int64x2_t *)((char *)v16 + 24 * v73);
          v26 = *v25;
          v27 = v25[1];
          v28 = &v16[2 * v73];
          v29 = *v28;
          v30 = v28[1];
          v31 = (int64x2_t *)((char *)v16 + 40 * v73);
          v32 = *v31;
          v33 = v31[1];
          v34 = &v16[3 * v73];
          v35 = *v34;
          v36 = v34[1];
          v37 = (int64x2_t *)((char *)v16 + 56 * v73);
          v38 = (int8x16_t *)&v16[4 * v73];
          v39 = vzip1q_s64(v17, v20);
          v40 = vzip1q_s64(v23, v26);
          v41 = vzip1q_s64(v29, v32);
          v42 = vzip1q_s64(v35, *v37);
          v43 = (int8x16_t)vzip2q_s64(v17, v20);
          v44.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
          v44.i64[1] = v26.i64[1];
          v45.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
          v45.i64[1] = v32.i64[1];
          v46.i64[0] = vdupq_laneq_s64(v35, 1).u64[0];
          v46.i64[1] = v37->i64[1];
          v47 = vextq_s8(v46, v46, 8uLL).u64[0];
          v48 = vextq_s8(v45, v45, 8uLL).u64[0];
          v49 = vextq_s8(v44, v44, 8uLL).u64[0];
          v50 = vextq_s8(*v38, *v38, 8uLL).u64[0];
          v51 = vextq_s8(v43, v43, 8uLL).u64[0];
          v52 = (int8x16_t)vzip1q_s64(v18, v21);
          v53 = (int8x16_t)vzip1q_s64(v24, v27);
          v54 = (int8x16_t)vzip1q_s64(v30, v33);
          v55 = (int8x16_t)vzip1q_s64(v36, v37[1]);
          v56 = vextq_s8(v55, v55, 8uLL).u64[0];
          v57 = vextq_s8(v54, v54, 8uLL).u64[0];
          v58 = vextq_s8(v53, v53, 8uLL).u64[0];
          v59 = vextq_s8(v52, v52, 8uLL).u64[0];
          v60 = (int8x16_t)vzip2q_s64(v18, v21);
          v61 = v38[1];
          v62.i64[0] = vdupq_laneq_s64(v24, 1).u64[0];
          v62.i64[1] = v27.i64[1];
          v63.i64[0] = vdupq_laneq_s64(v30, 1).u64[0];
          v63.i64[1] = v33.i64[1];
          v64.i64[0] = vdupq_laneq_s64(v36, 1).u64[0];
          v64.i64[1] = v37[1].i64[1];
          v65 = vextq_s8(v64, v64, 8uLL).u64[0];
          v66 = vextq_s8(v63, v63, 8uLL).u64[0];
          v67 = vextq_s8(v62, v62, 8uLL).u64[0];
          v68 = vextq_s8(v61, v61, 8uLL).u64[0];
          v69 = vextq_s8(v60, v60, 8uLL).u64[0];
          *(_QWORD *)(v15 + 64) = v38->i64[0];
          *(int64x2_t *)v15 = v39;
          *(int64x2_t *)(v15 + 16) = v40;
          *(int64x2_t *)(v15 + 32) = v41;
          *(int64x2_t *)(v15 + 48) = v42;
          goto LABEL_10;
        }
        if (v74 == -1)
          break;
        v15 = *v10 + 8 * v74;
LABEL_88:
        v139 = (int8x16_t *)((char *)v72 + 8 * v71 + 8 * (_DWORD)v73 * v13);
        v140 = v139[4].i64[0];
        v142 = v139[2];
        v141 = v139[3];
        v148 = *v139;
        v149 = v139[1];
        v143 = vextq_s8(v141, v141, 8uLL).u64[0];
        v144 = vextq_s8(v142, v142, 8uLL).u64[0];
        v145 = (int8x16_t *)((char *)v139 + 8 * v73);
        v45 = v145[2];
        v46 = v145[3];
        v43 = *v145;
        v44 = v145[1];
        v165 = v145[4].u64[0];
        v167 = vextq_s8(v46, v46, 8uLL).u64[0];
        v162 = vextq_s8(v44, v44, 8uLL).u64[0];
        v163 = vextq_s8(v45, v45, 8uLL).u64[0];
        v160 = vextq_s8(v43, v43, 8uLL).u64[0];
        v146 = &v139[v73];
        v54 = v146[2];
        v55 = v146[3];
        v52 = *v146;
        v53 = v146[1];
        v158 = v146[4].i64[0];
        v56 = vextq_s8(v55, v55, 8uLL).u64[0];
        v57 = vextq_s8(v54, v54, 8uLL).u64[0];
        v161 = vextq_s8(v53, v53, 8uLL).u64[0];
        v159 = vextq_s8(v52, v52, 8uLL).u64[0];
        v147 = (int8x16_t *)((char *)v139 + 24 * v73);
        v63 = v147[2];
        v64 = v147[3];
        v60 = *v147;
        v62 = v147[1];
        v68 = v147[4].u64[0];
        v65 = vextq_s8(v64, v64, 8uLL).u64[0];
        v66 = vextq_s8(v63, v63, 8uLL).u64[0];
        v67 = vextq_s8(v62, v62, 8uLL).u64[0];
        v69 = vextq_s8(v60, v60, 8uLL).u64[0];
        v148.i64[1] = vextq_s8(v148, v148, 8uLL).u64[0];
        v149.i64[1] = vextq_s8(v149, v149, 8uLL).u64[0];
        if (v72 == (int8x16_t *)v15)
        {
          *v72 = v148;
          v72[1] = v149;
          v142.i64[1] = v144;
          v72[4].i64[0] = v140;
          v141.i64[1] = v143;
          v72[2] = v142;
          v72[3] = v141;
          v15 = (uint64_t)v72;
        }
        else
        {
          v142.i64[1] = v144;
          *(int8x16_t *)v15 = v148;
          *(int8x16_t *)(v15 + 16) = v149;
          *(_QWORD *)(v15 + 64) = v140;
          v141.i64[1] = v143;
          *(int8x16_t *)(v15 + 32) = v142;
          *(int8x16_t *)(v15 + 48) = v141;
        }
        v47 = v167;
        v48 = v163;
        v50 = v165;
        v58 = v161;
        v49 = v162;
        v59 = v159;
        v51 = v160;
        v61.i64[0] = v158;
LABEL_10:
        v43.i64[1] = v51;
        v60.i64[1] = v69;
        *(int8x16_t *)(v15 + 216) = v60;
        v70 = (int8x16_t *)(v15 + 216);
        v44.i64[1] = v49;
        v70[-9] = v43;
        v70[-8] = v44;
        v45.i64[1] = v48;
        v70[-5].i64[0] = v50;
        v46.i64[1] = v47;
        v52.i64[1] = v59;
        v70[-7] = v45;
        v70[-6] = v46;
        *(int8x16_t *)((char *)v70 - 72) = v52;
        v53.i64[1] = v58;
        v54.i64[1] = v57;
        *(int8x16_t *)((char *)v70 - 56) = v53;
        *(int8x16_t *)((char *)v70 - 40) = v54;
        v70[-1].i64[1] = v61.i64[0];
        v55.i64[1] = v56;
        *(int8x16_t *)((char *)v70 - 24) = v55;
        v62.i64[1] = v67;
        v63.i64[1] = v66;
        v70[1] = v62;
        v70[2] = v63;
        v70[4].i64[0] = v68;
        v64.i64[1] = v65;
        ++v12;
        v70[3] = v64;
        if (v12 == v11)
        {
          v5 = *(unsigned int *)(v6 + 12);
          goto LABEL_5;
        }
      }
      v80 = *(_QWORD *)(v6 + 80);
      if (v80)
      {
        v82 = *(_QWORD *)(v6 + 48);
        v81 = *(_QWORD *)(v6 + 56);
        v83 = ((v81 - v82) << 6) - 1;
        v84 = *(_QWORD *)(v6 + 72);
        if (v81 == v82)
          v83 = 0;
        v15 = *(_QWORD *)(v6 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v82 + (((unint64_t)(v84 + v80 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v84 + v80 - 1) & 0x1FF));
        *(_QWORD *)(v6 + 80) = v80 - 1;
        if ((unint64_t)(v83 - (v80 + v84) + 1) >= 0x400)
        {
          operator delete(*(void **)(v81 - 8));
          v14 = v154;
          v13 = v155;
          v11 = v156;
          result = 24;
          *(_QWORD *)(v6 + 56) -= 8;
        }
        goto LABEL_87;
      }
      v168.i64[0] = 0;
      v87 = *(_QWORD *)(v6 + 16);
      v86 = *(int64x2_t **)(v6 + 24);
      v88 = (uint64_t)v86->i64 - v87;
      v89 = (uint64_t)((uint64_t)v86->i64 - v87) >> 3;
      v90 = (uint64_t *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8));
      v91 = *(_QWORD *)(v6 + 32);
      if ((unint64_t)(v91 - (_QWORD)v86) < 0x120)
      {
        v92 = v89 + 36;
        if ((unint64_t)(v89 + 36) >> 61)
          sub_20E867F44();
        v93 = v91 - v87;
        if (v93 >> 2 > v92)
          v92 = v93 >> 2;
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        v166 = v92;
        if (v92)
        {
          if (v92 >> 61)
            sub_20E877A38();
          v94 = operator new(8 * v92);
          v89 = (uint64_t)((uint64_t)v86->i64 - v87) >> 3;
        }
        else
        {
          v94 = 0;
        }
        v101 = &v94[8 * v89];
        v101[16] = 0u;
        v101[17] = 0u;
        v101[14] = 0u;
        v101[15] = 0u;
        v101[12] = 0u;
        v101[13] = 0u;
        v101[10] = 0u;
        v101[11] = 0u;
        v101[8] = 0u;
        v101[9] = 0u;
        v101[6] = 0u;
        v101[7] = 0u;
        v101[4] = 0u;
        v101[5] = 0u;
        v101[2] = 0u;
        v101[3] = 0u;
        *v101 = 0u;
        v101[1] = 0u;
        if ((int64x2_t *)v87 == v86)
        {
          v103 = &v94[8 * v89];
        }
        else
        {
          if ((unint64_t)(v88 - 8) >= 0x68)
          {
            v102 = (char *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8));
            v103 = &v94[8 * v89];
            if (v87 + (v88 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v94[v88 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v104 = ((unint64_t)(v88 - 8) >> 3) + 1;
              v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
              v102 = (char *)&v90[v105 / 0xFFFFFFFFFFFFFFF8];
              v103 = (char *)v101 - v105;
              v106 = &v94[8 * v89 - 16];
              v107 = (__int128 *)(v87 + 8 * v89 - 16);
              v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v109 = *v107;
                *(v106 - 1) = *(v107 - 1);
                *v106 = v109;
                v106 -= 2;
                v107 -= 2;
                v108 -= 4;
              }
              while (v108);
              if (v104 == (v104 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_51;
            }
          }
          else
          {
            v102 = (char *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8));
            v103 = &v94[8 * v89];
          }
          do
          {
            v110 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *((_QWORD *)v103 - 1) = v110;
            v103 -= 8;
          }
          while (v102 != (char *)v87);
        }
LABEL_51:
        v111 = v101 + 18;
        v112 = (char *)v86 - (char *)v90;
        if (v112)
        {
          v164 = v94;
          memmove(v101 + 18, v90, v112);
          v94 = v164;
        }
        *(_QWORD *)(v6 + 16) = v103;
        *(_QWORD *)(v6 + 24) = (char *)v111 + v112;
        *(_QWORD *)(v6 + 32) = &v94[8 * v166];
        v7 = a5;
        result = 24;
        v11 = v156;
        v13 = v155;
        v14 = v154;
        if (v87)
        {
          operator delete((void *)v87);
          v14 = v154;
          v13 = v155;
          v11 = v156;
          result = 24;
        }
        goto LABEL_86;
      }
      v95 = (char *)v86 - (char *)v90;
      if ((unint64_t)((char *)v86 - (char *)v90) > 0x11F)
      {
        v97 = *(uint64_t **)(v6 + 24);
        v96 = 36;
        goto LABEL_62;
      }
      v96 = v95 >> 3;
      v97 = &v86->i64[36 - (v95 >> 3)];
      v98 = v95 & 0xFFFFFFFFFFFFFFF8;
      v99 = 280 - v98;
      if (280 - v98 >= 0x68)
      {
        v113 = &v168 < (int64x2_t *)((char *)&v86[18] - v98);
        if (v86 >= (int64x2_t *)v169 || (v100 = *(uint64_t **)(v6 + 24), !v113))
        {
          v114 = (v99 >> 3) + 1;
          v100 = &v86->i64[v114 & 0x3FFFFFFFFFFFFFFCLL];
          v115 = vdupq_lane_s64(v168.i64[0], 0);
          v116 = v86 + 1;
          v117 = v114 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116[-1] = v115;
            *v116 = v115;
            v116 += 2;
            v117 -= 4;
          }
          while (v117);
          if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_61:
            *(_QWORD *)(v6 + 24) = v97;
            if (v86 == (int64x2_t *)v90)
              goto LABEL_86;
LABEL_62:
            v118 = (char *)v97 - (char *)(v90 + 36);
            v119 = v118 >> 3;
            v120 = (int64x2_t *)(v97 - 36);
            v121 = v97;
            if (v97 - 36 < (uint64_t *)v86)
            {
              v122 = (v88 & 0xFFFFFFFFFFFFFFF8) + v118;
              v123 = v87 + v122 + 8;
              if ((unint64_t)v86 > v123)
                v123 = (unint64_t)v86;
              v124 = v123 + ~v87 - v122;
              if (v124 >= 0x58)
              {
                v125 = (v124 >> 3) + 1;
                v126 = v125 & 0x3FFFFFFFFFFFFFFCLL;
                v120 = (int64x2_t *)((char *)v120 + v126 * 8);
                v121 = &v97[v126];
                v127 = v97 + 2;
                v128 = (__int128 *)(v87 + 8 * v119 + 8 * v89 + 16);
                v129 = v125 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v130 = *v128;
                  *(v127 - 1) = *(v128 - 1);
                  *v127 = v130;
                  v127 += 2;
                  v128 += 2;
                  v129 -= 4;
                }
                while (v129);
                if (v125 == (v125 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_71;
              }
              else
              {
                v121 = v97;
              }
              do
              {
                v131 = v120->i64[0];
                v120 = (int64x2_t *)((char *)v120 + 8);
                *v121++ = v131;
              }
              while (v120 < v86);
            }
LABEL_71:
            *(_QWORD *)(v6 + 24) = v121;
            if (v97 != v90 + 36)
            {
              v132 = v96;
              memmove(&v97[-v119], (const void *)(v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8)), v118);
              v96 = v132;
              v89 = (uint64_t)((uint64_t)v86->i64 - v87) >> 3;
              v14 = v154;
              v13 = v155;
              v11 = v156;
              result = 24;
            }
            v133 = (uint64_t *)&v168;
            if (v90 <= (uint64_t *)&v168)
            {
              v134 = 36;
              if (*(_QWORD *)(v6 + 24) <= (unint64_t)&v168)
                v134 = 0;
              v133 = &v168.i64[v134];
            }
            if (v96 >= 0xA)
            {
              if (v90 >= v133 + 1
                || (unint64_t)v133 >= v87 + (((unint64_t)v86 - v87) & 0xFFFFFFFFFFFFFFF8) + 8 * v96)
              {
                v90 += v96 & 0xFFFFFFFFFFFFFFFCLL;
                v135 = v96 & 3;
                v136 = vld1q_dup_f64((const double *)v133);
                v137 = (float64x2_t *)(v87 + 8 * v89 + 16);
                v138 = v96 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v137[-1] = v136;
                  *v137 = v136;
                  v137 += 2;
                  v138 -= 4;
                }
                while (v138);
                if (v96 == (v96 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_86;
              }
              else
              {
                v135 = v96;
              }
            }
            else
            {
              v135 = v96;
            }
            do
            {
              *v90++ = *v133;
              --v135;
            }
            while (v135);
LABEL_86:
            v15 = *(_QWORD *)(v6 + 24) - 288;
            v9 = a2;
            v8 = a3;
            v10 = (unint64_t *)(v6 + 16);
LABEL_87:
            *(_QWORD *)(v14 + 8 * v12) = (v15 - *(_QWORD *)(v6 + 16)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v157);
            goto LABEL_88;
          }
        }
      }
      else
      {
        v100 = *(uint64_t **)(v6 + 24);
      }
      do
        *v100++ = v168.i64[0];
      while (v100 != v97);
      goto LABEL_61;
    }
  }
  return result;
}

void sub_20FA25F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,float64x2_t a21,float64x2_t a22,float64x2_t a23,int64x2_t a24,int a25)
{
  int64x2_t v25;
  float64x2_t **v26;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  float64x2_t **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  char v58;
  uint64_t v59;
  unsigned int v60;
  char *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  unint64_t *v78;
  unint64_t *v79;
  float64x2_t *v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  float64_t v86;
  unint64_t *v87;
  int v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t i;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  float64x2_t *v99;
  unsigned int v100;
  float64x2_t *v101;
  int8x16_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  int8x16_t v108;
  float64x2_t v109;
  unint64_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int v116;
  int v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  __int128 v126;
  float64x2_t v127;
  unint64_t v128;
  unint64_t v129;
  __int128 v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  int8x16_t v134;
  float64x2_t v135;
  unint64_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  unint64_t *v140;
  unint64_t *v141;
  uint64_t v142;
  __int128 *v143;
  __int128 v144;
  __int128 v145;
  double v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  double v151;
  float64x2_t v152;
  float64x2_t v153;
  uint64_t v154;
  double v156;
  float64x2_t v157;
  __int128 v158;
  __int128 v159;
  double v160;
  unsigned __int8 v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 v164;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v177;
  float64x2_t v181;
  double v183;
  float64x2_t v187;
  float64x2_t v188;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  int v196;
  int v197;
  uint64_t v198;
  float64x2_t v200;
  double v201;
  double v203;
  double v204;
  int v205;
  double v206;
  float64x2_t v207;
  double v208;
  float64x2_t v212;
  float64x2_t v213;
  unsigned __int8 v214;
  uint64_t j;
  uint64_t v216;
  unsigned __int8 v217;
  float64x2_t v218;
  float64x2_t v219;
  double v220;
  float64x2_t *v223;
  float64x2_t *v224;
  float64x2_t v225;
  unsigned int v226;
  unsigned int v227;
  double v228;
  double v229;
  unsigned int v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  BOOL v235;
  char *v236;
  __int128 v237;
  __int128 v238;
  float32x2_t v239;
  float v240;
  float64x2_t *v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  unint64_t *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  float64x2_t v250;
  float64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  float64x2_t *v256;
  int8x16_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  int8x16_t v265;
  float64x2_t v266;
  unint64_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  float64x2_t v271;
  float64x2_t v272;
  unsigned int v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  __int128 v278;
  float64x2_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  float64x2_t v283;
  float64x2_t v284;
  int8x16_t v285;
  float64x2_t v286;
  unint64_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  float64x2_t v292;
  uint64_t v293;
  float64_t v294;
  int64x2_t v295;
  int64x2_t v296;
  double v297;
  float64x2_t v298;
  uint64_t v299;
  float64x2_t v301;
  float64x2_t v302;
  unint64_t v307;
  __int128 v308;
  double v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  int8x16_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  int64x2_t v321;
  int8x16_t v322;
  double v323;
  int8x16_t v324;
  _BOOL4 v325;
  double v329;
  double v330;
  float64x2_t v331;
  double v332;
  long double v333;
  long double v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  double v338;
  float64x2_t v339;
  int8x16_t v340;
  float64x2_t v341;
  int8x16_t v342;
  int8x16_t v343;
  float64x2_t v346;
  int8x16_t v347;
  int8x16_t v353;
  float64x2_t v354;
  double v355;
  float64x2_t v358;
  double v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v376;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  double v386;
  float64x2_t v387;
  double v388;
  float64x2_t v389;
  double v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v441;
  int v443;
  __int128 v445;
  double v446;
  double v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  int8x16_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  int64x2_t v458;
  int8x16_t v459;
  double v460;
  int8x16_t v461;
  unsigned int v462;
  int v463;
  unint64_t v464;
  float64x2_t *v465;
  unsigned int *v466;
  unsigned int v467;
  int v468;
  int v469;
  unsigned int v470;
  int v471;
  unint64_t v472;
  uint64_t v473;
  unsigned int v474;
  int v475;
  int v476;
  float64x2_t **v477;
  unsigned int *v478;
  float64x2_t *v479;
  uint64_t v480;
  double v481;
  double v482;
  float64x2_t *v483;
  unint64_t v484;
  float64x2_t *v485;
  float64x2_t *v486;
  double v490;
  double *v491;
  double *v492;
  uint64_t v493;
  float64x2_t *v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  double v499;
  float64x2_t v500;
  double v501;
  float64x2_t v502;
  float64x2_t v503;
  uint64_t v504;
  int8x16_t v505;
  float64x2_t v506;
  uint64_t v510;
  int v511;
  int v512;
  const double *f64;
  unsigned int v515;
  uint64_t v516;
  uint64_t v517;
  double v518;
  double v520;
  double v521;
  double v522;
  double v525;
  float64x2_t v526;
  double v529;
  float64_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  int64x2_t v535;
  double v536;
  uint64_t v537;
  double v538;
  double v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v543;
  double v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v549;
  int8x16_t v550;
  int8x16_t v551;
  float64x2_t v553;
  float64x2_t v554;
  uint64_t v565;
  const double *v566;
  uint64_t v567;
  double v568;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  unint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  double v582;
  double v583;
  double v584;
  float64x2_t v585;
  double v588;
  float64x2_t v589;
  float64x2_t v592;
  double v593;
  float64_t v594;
  float64x2_t v595;
  int64x2_t v596;
  float64x2_t v597;
  double v598;
  uint64_t v599;
  double *v600;
  char *v601;
  char *v602;
  float64x2_t *v603;
  float64x2_t *v604;
  float64x2_t *v605;
  float64x2_t v606;
  _BOOL4 v608;
  uint64_t v609;
  uint64_t v610;
  float64x2_t *v611;
  double v612;
  float64x2_t v613;
  double v614;
  uint64_t v617;
  float64x2_t *v618;
  char *v619;
  double v620;
  uint64_t v621;
  float64x2_t v622;
  uint64_t v625;
  char v626;
  float64x2_t *v627;
  float64x2_t *v628;
  float64x2_t **v629;
  uint64_t v630;
  uint64_t v631;
  double v632;
  unint64_t *v633;
  uint64_t v634;
  unsigned int v635;
  uint64_t vars0;
  unint64_t vars8;
  float64_t v638;
  _DWORD *v639;
  unsigned int v640;
  _QWORD *v641;
  _QWORD *v642;
  double v643;
  unint64_t *v644;
  double v645;
  unsigned int v646;
  uint64_t v647;
  unint64_t v648;
  uint64_t v649;
  unint64_t v650;
  unint64_t v651;
  float64_t v652;
  unint64_t v653;
  int8x16_t v654;
  unint64_t v655;
  float64x2_t v656;
  int8x16_t v657;
  unint64_t v658;
  float64x2_t v659;
  double v660;
  double v661;
  float64x2_t v662;
  float32x2_t v663;
  double v664;
  float v665;
  double v666;
  double v667;
  int v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  int8x16_t v685;
  float64x2_t v686;
  int8x16_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2x3_t v695;
  float64x2x3_t v696;

  MEMORY[0x24BDAC7A8](a1);
  STACK[0xECF8] = *MEMORY[0x24BDAC8D0];
  v33 = *v26;
  v34 = *v26 + 1954;
  v629 = v26;
  v627 = v34;
  v628 = *v26;
  if (LODWORD(v34->f64[0]))
  {
    v35 = v26[1] + 36168;
    v36 = LODWORD(v26[1][36168].f64[1]);
    LODWORD(STACK[0x4FC]) = 0;
    if ((_DWORD)v36)
    {
      LODWORD(v37) = 0;
      v38 = 4 * v36;
      do
      {
        v39 = LODWORD(v35->f64[0]);
        v35 = (float64x2_t *)((char *)v35 + 4);
        *((_DWORD *)&STACK[0x4F4] + v37) = v39;
        v37 = (LODWORD(STACK[0x4FC]) + 1);
        LODWORD(STACK[0x4FC]) = v37;
        v38 -= 4;
      }
      while (v38);
      _Q2.f64[1] = 0.0;
      _Q1 = vaddq_f64(v33[2739], (float64x2_t)0);
      _Q0 = vaddq_f64(v33[2738], (float64x2_t)0);
      v33[2738] = _Q0;
      v33[2739] = _Q1;
      if ((_DWORD)v37)
      {
        v625 = v37;
        v40 = 0;
        v638 = _Q0.f64[0];
        *(float64x2_t *)&STACK[0x390] = _Q0;
        *(float64x2_t *)&STACK[0x370] = _Q0;
        *(float64x2_t *)&STACK[0x3A0] = _Q0;
        v653 = *(_QWORD *)&_Q0.f64[0];
        *(float64x2_t *)&STACK[0x3B0] = _Q0;
        *(float64x2_t *)&STACK[0x380] = _Q0;
        v657.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v655 = *(_QWORD *)&_Q0.f64[0];
        v659 = _Q0;
        v632 = 0.0;
        v41 = v26;
        while (1)
        {
          LODWORD(v42) = *((_DWORD *)&STACK[0x4F4] + v40);
          if ((_DWORD)v42)
            break;
LABEL_7:
          if (++v40 == v625)
            goto LABEL_183;
        }
        v43 = 0;
        v649 = *((unsigned int *)&STACK[0x4F4] + v40);
        while (1)
        {
          LODWORD(STACK[0xCFC]) = 0;
          LODWORD(STACK[0xE2C]) = 0;
          LODWORD(STACK[0x108C]) = 0;
          LODWORD(STACK[0x1540]) = 0;
          v647 = v43;
          v44 = (uint64_t)v41[1] + 339548 * v40 + 169772 * v43;
          v45 = (unsigned int *)(v44 + 578704);
          if (v43)
            v46 = 1;
          else
            v46 = v42;
          v635 = v46;
          STACK[0x500] = *(_QWORD *)(v44 + 578704);
          LODWORD(STACK[0x508]) = *(_DWORD *)(v44 + 578712);
          v47 = *(_DWORD *)(v44 + 578716);
          LODWORD(STACK[0x50C]) = 0;
          if (v47)
          {
            v48 = 0;
            LOBYTE(v49) = 0;
            v50 = 0;
            v51 = v44 + 578720;
            do
            {
              v52 = v48 >> 5;
              v53 = 1 << v48;
              v54 = ((*(_DWORD *)(v51 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v49) & 1) << v48++;
              *((_DWORD *)&STACK[0x510] + v52) = v54 | *((_DWORD *)&STACK[0x510] + v52) & ~v53;
              v49 = v50 + 1;
              v50 = (v50 + 1);
            }
            while (v47 != v49);
            LODWORD(STACK[0x50C]) = v48;
          }
          v55 = v45[511];
          LODWORD(STACK[0xCFC]) = 0;
          if ((_DWORD)v55)
          {
            v56 = 0;
            v57 = (char *)(v45 + 436);
            do
            {
              v58 = *v57++;
              *((_BYTE *)&STACK[0xBD0] + v56) = v58;
              v56 = LODWORD(STACK[0xCFC]) + 1;
              LODWORD(STACK[0xCFC]) = v56;
              --v55;
            }
            while (v55);
          }
          v59 = v45[587];
          LODWORD(STACK[0xE2C]) = 0;
          if ((_DWORD)v59)
          {
            v60 = 0;
            v61 = (char *)(v45 + 512);
            do
            {
              v62 = *v61++;
              *((_BYTE *)&STACK[0xD00] + v60) = v62;
              v60 = LODWORD(STACK[0xE2C]) + 1;
              LODWORD(STACK[0xE2C]) = v60;
              --v59;
            }
            while (v59);
          }
          v63 = v45[739];
          if ((_DWORD)v63)
            memcpy(&STACK[0xE30], v45 + 588, 2 * v63);
          LODWORD(STACK[0x108C]) = v63;
          v64 = v45[1040];
          LODWORD(STACK[0x1540]) = 0;
          if ((_DWORD)v64)
          {
            v65 = 0;
            v66 = (int *)(v45 + 740);
            v67 = 4 * v64;
            do
            {
              v68 = *v66++;
              *((_DWORD *)&STACK[0x1090] + v65) = v68;
              v65 = LODWORD(STACK[0x1540]) + 1;
              LODWORD(STACK[0x1540]) = v65;
              v67 -= 4;
            }
            while (v67);
          }
          _Q2.f64[1] = 0.0;
          _Q1 = vaddq_f64(v33[2739], (float64x2_t)0);
          _Q0 = vaddq_f64(v33[2738], (float64x2_t)0);
          v33[2738] = _Q0;
          v33[2739] = _Q1;
          v42 = v649;
          v630 = LODWORD(STACK[0x500]);
          if ((_DWORD)v630)
            break;
LABEL_10:
          v43 = v647 + 1;
          v41 = v629;
          if (v647 + 1 == v42)
            goto LABEL_7;
        }
        v69 = 0;
        v626 = v635 > 1;
        if (v635 <= 1)
          v70 = 1;
        else
          v70 = v635;
        *(_QWORD *)&a22.f64[0] = v70;
        while (1)
        {
          while (1)
          {
            v71 = *((unsigned __int16 *)&STACK[0xE30] + v69);
            v72 = v71 >> 1;
            if (((*(_DWORD *)((char *)&STACK[0x510] + ((v71 >> 4) & 0xFFC)) >> (v71 >> 1)) & 1) != 0)
              break;
            if (++v69 == v630)
              goto LABEL_10;
          }
          a18 = *((unsigned int *)&STACK[0x1090] + v69);
          v634 = *((unsigned __int8 *)&STACK[0xD00] + v69);
          v646 = *((unsigned __int8 *)&STACK[0xBD0] + v69);
          v631 = v69 + 1;
          v73 = *((unsigned __int16 *)&STACK[0xE30] + v69 + 1) - (_DWORD)v71;
          v74 = v73 >> 1;
          if (v73 >= 2)
          {
            v75 = (uint64_t)&v629[1][36169] + 339548 * v40 + 169772 * v647;
            v76 = *(unsigned __int16 *)(v75 + 2 * v69 + 2352);
            v77 = (const void *)(v75 + 4 * v76 + 114568);
            memcpy(&STACK[0x454], (const void *)(v75 + 8 * v76 + 4164), 8 * ((_DWORD)v74 << v626));
            v42 = v649;
            memcpy(&STACK[0x3EC], v77, 4 * ((_DWORD)v74 << v626));
          }
          v78 = (unint64_t *)((char *)&STACK[0x3EC] + 4 * v74);
          v633 = &STACK[0x454] + v74;
          if (v635 <= 1)
            v79 = 0;
          else
            v79 = &STACK[0x454] + v74;
          *(_QWORD *)&a21.f64[0] = v79;
          if (v635 <= 1)
            v78 = 0;
          v644 = v78;
          _Q2.f64[1] = 0.0;
          _Q1 = vaddq_f64(v33[2739], (float64x2_t)0);
          _Q0 = vaddq_f64(v33[2738], (float64x2_t)0);
          v33[2738] = _Q0;
          v33[2739] = _Q1;
          v661 = 0.0;
          if (v73 >= 2)
            break;
LABEL_34:
          v632 = v632 + v661;
          v69 = v631;
          v34 = v627;
          v33 = v628;
          if (v631 == v630)
            goto LABEL_10;
        }
        STACK[0x3D0] = 0;
        v80 = v629[2];
        v81 = v647;
        v82 = *(_QWORD *)&v80->f64[0] + 4080 * v40 + 2024 + 1016 * v647;
        v83 = v72;
        STACK[0x3C0] = (unint64_t)v80;
        v641 = (_QWORD *)&v80->f64[1];
        v642 = (_QWORD *)&v80[11].f64[1];
        if (v74 <= 1)
          v84 = 1;
        else
          v84 = v74;
        vars0 = v84;
        v661 = 0.0;
        while (1)
        {
          vars8 = v83;
          if (((*(_DWORD *)((char *)&STACK[0x510] + ((v83 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v83) & 1) != 0)
            break;
LABEL_48:
          v85 = STACK[0x3D0] + 1;
          v83 = (vars8 + 1);
          STACK[0x3D0] = v85;
          if (v85 == vars0)
            goto LABEL_34;
        }
        v86 = a22.f64[0];
        if (v635 < 2)
          goto LABEL_64;
        v87 = &v633[STACK[0x3D0]];
        v235 = (*(_DWORD *)v87 & 0x7FFFFFFFu) < 0x7F800000;
        v88 = *((_DWORD *)v87 + 1) & 0x7FFFFFFF;
        if (v235)
        {
          if (v88 >= 2139095040)
            goto LABEL_56;
        }
        else if (v88 < 2139095040)
        {
LABEL_56:
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/LinearCameraSystemRegularDepthLP.hpp", 156, (uint64_t)"!has_secondary_observations || (meas_secondary[observation_index_in_track].e().isFinite().all() == meas_secondary[observation_index_in_track].e().isFinite().any())", 163, (uint64_t)"Both coordinates in secondary observation track must be finite or not.", 70, (void (*)(void **))sub_21023DDB0);
          v89 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v90 = qword_254A6DE40;
            for (i = qword_254A6DE48; v90 != i; v90 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v90)(*(_QWORD *)(v90 + 8), "!has_secondary_observations || (meas_secondary[observation_index_in_track].e().isFinite().all() == meas_secondary[observation_index_in_track].e().isFinite().any())", 163, "Both coordinates in secondary observation track must be finite or not.", 70);
          }
          v92 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "!has_secondary_observations || (meas_secondary[observation_index_in_track].e().isFinite().all() == meas_secondary[observation_index_in_track].e().isFinite().any())", 163, "Both coordinates in secondary observation track must be finite or not.", 70);
          v42 = v649;
          v86 = a22.f64[0];
        }
LABEL_64:
        v93 = 0;
        v639 = (_DWORD *)(*(_QWORD *)&a21.f64[0] + 8 * STACK[0x3D0]);
        STACK[0x360] = STACK[0x3D0] + v634;
        while (1)
        {
          if (!(v93 | STACK[0x3D0]) || v93 && (*v639 & 0x7FFFFFFFu) > 0x7F7FFFFF)
            goto LABEL_66;
          v94 = *(_QWORD *)STACK[0x3C0];
          v95 = v94 + 4080 * v40 + 2024;
          v96 = v93 + v81;
          v97 = v95 + 1016 * v96;
          v98 = v40;
          v99 = (float64x2_t *)&v642[9 * v96
                                   + 9 * *((_DWORD *)v641 + v40)
                                   + 9 * STACK[0x360] * *(_DWORD *)(STACK[0x3C0] + 172)];
          v100 = *(_DWORD *)(v97 + 568);
          if (v100 == -1)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v118 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v120 = qword_254A6DE40;
              v119 = qword_254A6DE48;
              while (v120 != v119)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v120)(*(_QWORD *)(v120 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                v120 += 16;
              }
            }
            v121 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v121 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v42 = v649;
            if (!byte_254A6DE68)
              goto LABEL_298;
            qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            v94 = *(_QWORD *)STACK[0x3C0];
            v116 = -1;
            *(_QWORD *)&v123.f64[0] = v657.i64[0];
            v32 = v659;
            v125 = *(float64x2_t *)&STACK[0x3A0];
            v124 = *(float64x2_t *)&STACK[0x3B0];
            v126 = *(_OWORD *)&STACK[0x380];
            v127 = *(float64x2_t *)&STACK[0x390];
            v129 = v653;
            v128 = v655;
            v130 = *(_OWORD *)&STACK[0x370];
          }
          else
          {
            v101 = (float64x2_t *)(v97 + 96);
            if (v100 <= 1)
            {
              if (!v100)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_298:
                abort();
              }
              _Q0.f64[0] = *(float64_t *)(v97 + 160);
              v102 = *(int8x16_t *)v101;
              v103 = *(float64x2_t *)(v97 + 112);
              v104 = *(float64x2_t *)(v97 + 128);
              v105 = *(float64x2_t *)(v97 + 144);
              a23 = *(float64x2_t *)(v97 + 264);
              _Q5.f64[1] = *(float64_t *)(v97 + 272);
              a24 = *(int64x2_t *)(v97 + 280);
              v638 = *(double *)(v97 + 296);
              a25 = *(_DWORD *)(v97 + 308);
              _Q5.f64[0] = v99[4].f64[0];
              _Q7 = v99[1];
              v106 = v99[2];
              v107 = v99[3];
              v108 = (int8x16_t)vabdq_f64(*v99, *v101);
              v109 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
              v32 = (float64x2_t)vcgeq_f64(v109, (float64x2_t)vextq_s8(v108, v108, 8uLL));
              if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)vcgeq_f64(v109, vabdq_f64(_Q7, v103))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v109, vabdq_f64(v106, v104)), (int32x4_t)vcgeq_f64(v109, vabdq_f64(v107, v105))))))) & 1 | (vabdq_f64(_Q5, _Q0).f64[0] > 1.0e-10))v110 = -1;
              else
                v110 = 0;
              v111 = (int8x16_t)vdupq_n_s64(v110);
              *(int8x8_t *)&_Q0.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)&_Q5.f64[0], (int8x8_t)v110), vand_s8(*(int8x8_t *)&_Q0.f64[0], (int8x8_t)*(_OWORD *)&vmvnq_s8(v111)));
              v659 = _Q0;
              v112 = vbslq_s8(v111, (int8x16_t)v106, (int8x16_t)v104);
              v113 = vbslq_s8(v111, (int8x16_t)_Q7, (int8x16_t)v103);
              v114 = vbslq_s8(v111, *(int8x16_t *)v99, v102);
              v657 = vbslq_s8(v111, (int8x16_t)v107, (int8x16_t)v105);
              *(int8x16_t *)&STACK[0x3A0] = v113;
              *(int8x16_t *)&STACK[0x3B0] = v112;
              *(int8x16_t *)&STACK[0x380] = vextq_s8(v112, v112, 8uLL);
              *(int8x16_t *)&STACK[0x390] = v114;
              v653 = vextq_s8(v113, v113, 8uLL).u64[0];
              v655 = vextq_s8(v657, v657, 8uLL).u64[0];
              v115 = vextq_s8(v114, v114, 8uLL);
              *(int8x16_t *)&STACK[0x370] = v115;
              v116 = 1;
              v117 = 1;
              goto LABEL_91;
            }
            v32.f64[0] = *(float64_t *)(v97 + 160);
            v124 = *(float64x2_t *)(v97 + 128);
            v123 = *(float64x2_t *)(v97 + 144);
            v127 = *v101;
            v125 = *(float64x2_t *)(v97 + 112);
            v128 = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u64[0];
            *(_QWORD *)&v126 = vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL).u64[0];
            v129 = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u64[0];
            *(_QWORD *)&v130 = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
            a23 = *(float64x2_t *)(v97 + 264);
            v122.f64[1] = *(float64_t *)(v97 + 272);
            a24 = *(int64x2_t *)(v97 + 280);
            v638 = *(double *)(v97 + 296);
            a25 = *(_DWORD *)(v97 + 308);
            v116 = 2;
          }
          v117 = 0;
          v122.f64[0] = v99[4].f64[0];
          v132 = v99[2];
          v131 = v99[3];
          v133 = v99[1];
          *(_QWORD *)&v127.f64[1] = v130;
          *(_QWORD *)&v123.f64[1] = v128;
          *(_QWORD *)&v124.f64[1] = v126;
          *(_QWORD *)&v125.f64[1] = v129;
          v134 = (int8x16_t)vabdq_f64(*v99, v127);
          v135 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
          _Q7 = (float64x2_t)vcgeq_f64(v135, vabdq_f64(v131, v123));
          if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v135, (float64x2_t)vextq_s8(v134, v134, 8uLL)), (int32x4_t)vcgeq_f64(v135, vabdq_f64(v133, v125))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v135, vabdq_f64(v132, v124)), (int32x4_t)_Q7))))) & 1 | (vabdq_f64(v122, v32).f64[0] > 1.0e-10))v136 = -1;
          else
            v136 = 0;
          _Q5 = (float64x2_t)vdupq_n_s64(v136);
          *(int8x8_t *)&v122.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)&v122.f64[0], (int8x8_t)v136), vand_s8(*(int8x8_t *)&v32.f64[0], (int8x8_t)*(_OWORD *)&vmvnq_s8((int8x16_t)_Q5)));
          v137 = vbslq_s8((int8x16_t)_Q5, (int8x16_t)v132, (int8x16_t)v124);
          v138 = vbslq_s8((int8x16_t)_Q5, (int8x16_t)v133, (int8x16_t)v125);
          v139 = vbslq_s8((int8x16_t)_Q5, *(int8x16_t *)v99, (int8x16_t)v127);
          v657 = vbslq_s8((int8x16_t)_Q5, (int8x16_t)v131, (int8x16_t)v123);
          v659 = v122;
          *(int8x16_t *)&STACK[0x3A0] = v138;
          *(int8x16_t *)&STACK[0x3B0] = v137;
          *(int8x16_t *)&STACK[0x380] = vextq_s8(v137, v137, 8uLL);
          *(int8x16_t *)&STACK[0x390] = v139;
          v653 = vextq_s8(v138, v138, 8uLL).u64[0];
          v655 = vextq_s8(v657, v657, 8uLL).u64[0];
          v115 = vextq_s8(v139, v139, 8uLL);
          *(int8x16_t *)&STACK[0x370] = v115;
LABEL_91:
          v140 = &STACK[0x3EC];
          if (v93)
            v140 = v644;
          v665 = *((float *)v140 + STACK[0x3D0]);
          v141 = &STACK[0x454];
          if (v93)
            v141 = *(unint64_t **)&a21.f64[0];
          v663 = (float32x2_t)v141[STACK[0x3D0]];
          v668 = *(unsigned __int8 *)(STACK[0x3C0] + 3072);
          v142 = v94 + 32 * a18;
          v115.i64[0] = *(_QWORD *)(v142 + 21280);
          v694 = (float64x2_t)v115;
          v143 = (__int128 *)(v94 + 168 * STACK[0x360]);
          *(_QWORD *)&v144 = *((_QWORD *)v143 + 2);
          v145 = *v143;
          *(_OWORD *)&STACK[0x310] = *(__int128 *)((char *)v143 + 24);
          *(_OWORD *)&STACK[0x320] = v145;
          v146 = *((double *)v143 + 8);
          v147 = v143[3];
          v148 = v143[9];
          *(_OWORD *)&STACK[0x2E0] = v148;
          *(_QWORD *)&v148 = *((_QWORD *)v143 + 20);
          *(_OWORD *)&STACK[0x330] = v148;
          *(_OWORD *)&STACK[0x340] = v147;
          v149 = v94 + 168 * v646;
          _D9 = *(_QWORD *)(v149 + 40);
          v686 = *(float64x2_t *)(v149 + 24);
          *((_QWORD *)&v148 + 1) = *(_QWORD *)(v149 + 32);
          v688 = *(float64x2_t *)v149;
          v151 = *(double *)(v149 + 64);
          v152 = *(float64x2_t *)(v149 + 48);
          *(_QWORD *)&v148 = *(_QWORD *)(v149 + 160);
          *(_OWORD *)&STACK[0x300] = v148;
          v153 = *(float64x2_t *)(v149 + 144);
          v690 = v152;
          v692 = v153;
          v154 = v95 + 1016 * v96;
          v153.f64[0] = *(float64_t *)(v142 + 21272);
          v680 = v153;
          v672 = *(float64x2_t *)v82;
          v674 = *(float64x2_t *)(v142 + 21256);
          _D11 = *(_QWORD *)(v82 + 40);
          v670 = *(float64x2_t *)(v82 + 24);
          v153.f64[1] = *(float64_t *)(v82 + 32);
          v156 = *(double *)(v82 + 64);
          v157 = *(float64x2_t *)(v82 + 48);
          v153.f64[0] = *(float64_t *)(v82 + 88);
          v682 = v153;
          *((_QWORD *)&v144 + 1) = *((_QWORD *)v143 + 5);
          *(_OWORD *)&STACK[0x350] = v144;
          v676 = *(float64x2_t *)(v82 + 72);
          v678 = v157;
          *(_QWORD *)&v144 = *(_QWORD *)(v97 + 16);
          v158 = *(_OWORD *)v97;
          v159 = *(_OWORD *)(v97 + 24);
          v160 = *(double *)(v97 + 64);
          *((_QWORD *)&v144 + 1) = *(_QWORD *)(v97 + 40);
          *(_OWORD *)&STACK[0x2F0] = v144;
          *(_OWORD *)&STACK[0x2C0] = *(_OWORD *)(v97 + 48);
          *(_OWORD *)&STACK[0x2D0] = v158;
          v684 = *(float64x2_t *)(v154 + 72);
          *((_QWORD *)&v144 + 1) = *(_QWORD *)(v154 + 80);
          *(_QWORD *)&v144 = *(_QWORD *)(v154 + 88);
          *(_OWORD *)&STACK[0x2A0] = v159;
          *(_OWORD *)&STACK[0x2B0] = v144;
          v40 = v98;
          v81 = v647;
          v86 = a22.f64[0];
          if (v116 == -1)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v161 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v161 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v163 = qword_254A6DE40;
              v162 = qword_254A6DE48;
              while (v163 != v162)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v163)(*(_QWORD *)(v163 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                v163 += 16;
              }
            }
            v164 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v164 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v42 = v649;
            if (!byte_254A6DE68)
LABEL_296:
              abort();
            qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
          }
          _Q0 = vmulq_n_f64(v674, v694.f64[0]);
          v166.f64[1] = v670.f64[1];
          v167 = vmlaq_laneq_f64(vmulq_n_f64(v672, _Q0.f64[0]), v670, _Q0, 1);
          __asm { FMLA            D2, D11, V0.D[1] }
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(v694, v680);
          v166.f64[0] = vmlad_n_f64(_D2, v156, _Q0.f64[0]);
          _Q0 = vaddq_f64(vmlaq_n_f64(v167, v678, _Q0.f64[0]), v676);
          v173.f64[1] = v686.f64[1];
          v174 = vmlaq_laneq_f64(vmulq_n_f64(v688, _Q0.f64[0]), v686, _Q0, 1);
          __asm { FMLA            D3, D9, V0.D[1] }
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vaddq_f64(v166, v682);
          v173.f64[0] = vmlad_n_f64(_D3, v151, _Q0.f64[0]);
          _Q0 = vsubq_f64(vaddq_f64(v692, vmlaq_n_f64(v174, v690, _Q0.f64[0])), *(float64x2_t *)&STACK[0x2E0]);
          v177 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0x320], *(int64x2_t *)&STACK[0x310]), _Q0.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&STACK[0x320], *(int64x2_t *)&STACK[0x310]), _Q0, 1);
          _Q4 = *(_OWORD *)&STACK[0x340];
          _Q2 = vmulq_f64(*(float64x2_t *)&STACK[0x340], _Q0);
          _Q0.f64[0] = _Q0.f64[1];
          __asm { FMLA            D2, D0, V4.D[1] }
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(vaddq_f64(*(float64x2_t *)&STACK[0x300], v173), *(float64x2_t *)&STACK[0x330]);
          _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v146, _Q0.f64[0]);
          _Q3 = vsubq_f64(vmlaq_n_f64(v177, *(float64x2_t *)&STACK[0x350], _Q0.f64[0]), v684);
          v181 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&STACK[0x2D0], *(int64x2_t *)&STACK[0x2A0]), _Q3.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&STACK[0x2D0], *(int64x2_t *)&STACK[0x2A0]), _Q3, 1);
          _Q4 = *(_OWORD *)&STACK[0x2C0];
          _Q1 = vmulq_f64(*(float64x2_t *)&STACK[0x2C0], _Q3);
          _Q3.f64[0] = _Q3.f64[1];
          __asm { FMLA            D1, D3, V4.D[1] }
          _Q2 = vsubq_f64(_Q2, *(float64x2_t *)&STACK[0x2B0]);
          _Q0 = vmlaq_n_f64(v181, *(float64x2_t *)&STACK[0x2F0], _Q2.f64[0]);
          _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v160, _Q2.f64[0]);
          if (!v117)
          {
            _D2 = _Q0.f64[1];
            __asm { FMLA            D16, D2, V0.D[1] }
            v191 = sqrt(_D16);
            v192 = fabs(_Q1.f64[0]);
            v193 = fabs(v191);
            v194 = v192 / v193;
            if (v192 >= v193)
              v194 = v193 / v192;
            v195 = (v193 - v192) / (v192 + v193);
            if (v192 >= v193)
              v195 = -v195;
            if (v194 > 0.414213562)
              v196 = 1;
            else
              v196 = 2;
            if (v194 > 0.414213562)
              v197 = -1;
            else
              v197 = 1;
            if (v194 <= 0.414213562)
              v195 = v194;
            if (_D16 < 0.00000001)
            {
              _Q0 = vmulq_n_f64(_Q0, 1.0 / _Q1.f64[0]);
              *(float64x2_t *)&STACK[0x350] = _Q0;
              if (v100 == -1)
                goto LABEL_150;
LABEL_158:
              _Q5 = *(float64x2_t *)&STACK[0x380];
              v218 = *(float64x2_t *)&STACK[0x390];
              *(_QWORD *)&v218.f64[1] = STACK[0x370];
              v218.f64[0] = vaddvq_f64(vmulq_f64(v218, *(float64x2_t *)&STACK[0x350]));
              v219 = *(float64x2_t *)&STACK[0x3A0];
              *(_QWORD *)&v219.f64[1] = STACK[0x380];
              v218.f64[1] = vmuld_lane_f64(*(double *)&STACK[0x3B0], *(float64x2_t *)&STACK[0x350], 1);
              _Q1 = vsubq_f64(vaddq_f64(v219, v218), vcvtq_f64_f32(v663));
              v220 = 1.0 / v665;
              _Q3 = vmulq_n_f64(_Q1, v220);
              _D8 = vmuld_lane_f64(v220, _Q1, 1);
              _Q2 = vmulq_f64(_Q3, _Q3);
              __asm { FMLA            D2, D8, V3.D[1] }
              if (v668 && _Q2.f64[0] >= 0.00000000999999994)
              {
                *(float64x2_t *)&STACK[0x340] = _Q2;
                *(float64x2_t *)&STACK[0x350] = _Q3;
                _Q0.f64[0] = sqrt(log1p(_Q2.f64[0]) / *(double *)&STACK[0x340]);
                _Q1 = vmulq_n_f64(*(float64x2_t *)&STACK[0x350], _Q0.f64[0]);
                _Q0.f64[0] = _D8 * _Q0.f64[0];
                _Q2 = vmulq_f64(_Q1, _Q1);
                __asm { FMLA            D2, D0, V1.D[1] }
              }
              v661 = v661 + _Q2.f64[0];
              goto LABEL_66;
            }
            v198 = *(_QWORD *)&_Q1.f64[0];
            if (v192 < v193)
              v197 = -v197;
            else
              v196 = v194 > 0.414213562;
            _ZF = v191 == INFINITY && v192 == INFINITY;
            _Q7.f64[1] = 1.0;
            v200 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v195 * v195), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v195 * v195), (float64x2_t)xmmword_210315370), v195 * v195 * (v195 * v195))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v195 * v195), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v195 * v195), (float64x2_t)xmmword_210315380), v195 * v195 * (v195 * v195))),
                       v195 * v195 * (v195 * v195) * (v195 * v195 * (v195 * v195))));
            v201 = v195 + v195 * vdivq_f64(v200, (float64x2_t)vdupq_laneq_s64((int64x2_t)v200, 1)).f64[0];
            if (_ZF)
              v201 = 0.785398163;
            if (v191 == 0.0 && _Q1.f64[0] == 0.0)
              v203 = 0.0;
            else
              v203 = v201;
            if (v198 < 0)
            {
              v196 = 4 - v196;
              v197 = -v197;
            }
            if (v191 < 0.0)
              v196 = -v196;
            v204 = (double)v196;
            if (v191 >= 0.0)
              v205 = v197;
            else
              v205 = -v197;
            v206 = v204 * 3.061617e-17 + v204 * 0.785398163 + v203 * (double)v205;
            v207 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64((int64x2_t)a23, a24), vmulq_n_f64((float64x2_t)vzip2q_s64((int64x2_t)a23, a24), v206 * v206)), v206 * v206);
            _Q0 = vmulq_n_f64(_Q0, 1.0 / v191 * (v206 + v206 * (v207.f64[0] + vmuld_lane_f64(v206 * v206 * (v206 * v206), v207, 1))));
            *(float64x2_t *)&STACK[0x350] = _Q0;
            if (v100 != -1)
              goto LABEL_158;
LABEL_150:
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v214 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v214 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v216 = qword_254A6DE40;
              for (j = qword_254A6DE48; v216 != j; v216 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v216)(*(_QWORD *)(v216 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            }
            v217 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v217 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v42 = v649;
            if (!byte_254A6DE68)
              goto LABEL_296;
            qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            goto LABEL_158;
          }
          if (a25)
          {
            if (_Q1.f64[0] >= 0.00000001)
            {
              v183 = 1.0 / _Q1.f64[0];
              _Q2 = vmulq_n_f64(_Q0, v183);
              _D0 = vmuld_lane_f64(v183, _Q0, 1);
              __asm { FMLA            D1, D0, V2.D[1] }
              v187 = (float64x2_t)vdupq_laneq_s64(a24, 1);
              v188.f64[1] = v187.f64[1];
              v188.f64[0] = v638;
              v187.f64[1] = v638;
              _Q0 = vaddq_f64(vaddq_f64(vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(v187, v187), _Q2.f64[0]), _Q2, 1), vmulq_f64(v188, vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))))), vmulq_n_f64(_Q2, *(double *)&_D1 * a23.f64[0]+ 1.0+ *(double *)&_D1 * vmuld_lane_f64(*(double *)&_D1, a23, 1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)&_D1 * *(double *)a24.i64))));
              *(float64x2_t *)&STACK[0x350] = _Q0;
              if (v100 != -1)
                goto LABEL_158;
              goto LABEL_150;
            }
          }
          else
          {
            if (_Q1.f64[0] >= 0.00000001)
            {
              v208 = 1.0 / _Q1.f64[0];
              _Q2 = vmulq_n_f64(_Q0, v208);
              _D0 = vmuld_lane_f64(v208, _Q0, 1);
              __asm { FMLA            D1, D0, V2.D[1] }
              v212.f64[1] = a23.f64[1];
              v212.f64[0] = 1.0;
              v213 = vaddq_f64(v212, vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)a23, a24), _D1));
              _Q0 = vmulq_n_f64(_Q2, v213.f64[0] + vmuld_lane_f64(_D1 * _D1, v213, 1));
              *(float64x2_t *)&STACK[0x350] = _Q0;
              if (v100 != -1)
                goto LABEL_158;
              goto LABEL_150;
            }
            a25 = 0;
          }
LABEL_66:
          if (++v93 == *(_QWORD *)&v86)
            goto LABEL_48;
        }
      }
    }
    else
    {
      _Q2.f64[1] = 0.0;
      _Q1 = vaddq_f64(v33[2739], (float64x2_t)0);
      _Q0 = vaddq_f64(v33[2738], (float64x2_t)0);
      v33[2738] = _Q0;
      v33[2739] = _Q1;
    }
    v632 = 0.0;
    v41 = v26;
LABEL_183:
    v223 = v41[3];
    v223[1].f64[0] = v632 * 0.5;
    v629[4]->f64[0] = v632 * 0.5 + v629[4]->f64[0];
    v26 = v629;
  }
  else
  {
    v223 = v26[3];
    v223[1].f64[0] = 0.0;
  }
  v224 = v26[1];
  LODWORD(v224[134092].f64[0]) = 1012;
  if (!HIDWORD(v34->f64[0]))
  {
    v223->f64[1] = 0.0;
    goto LABEL_237;
  }
  STACK[0x500] = 0;
  STACK[0x508] = 0;
  LODWORD(STACK[0xE610]) = 0;
  LODWORD(STACK[0xEBB8]) = 0;
  LODWORD(STACK[0xEBC0]) = 0;
  LODWORD(STACK[0xEC28]) = 0;
  sub_20F904EFC((uint64_t)&STACK[0x500], (uint64_t)&v224[24680]);
  _Q2.f64[1] = 0.0;
  _Q1 = vaddq_f64(v33[2741], (float64x2_t)0);
  _Q0 = vaddq_f64(v33[2740], (float64x2_t)0);
  v33[2740] = _Q0;
  v33[2741] = _Q1;
  v226 = STACK[0xE610];
  if (!LODWORD(STACK[0xE610]))
  {
    v477 = v629;
    v629[3]->f64[1] = 0.0;
    goto LABEL_236;
  }
  v227 = 0;
  v228 = *(double *)&STACK[0x500];
  v229 = *(double *)&STACK[0x508];
  do
  {
    *((_DWORD *)&STACK[0x458] + (v227 >> 5)) &= ~(1 << v227);
    ++v227;
  }
  while (v226 != v227);
  v230 = 0;
  LODWORD(STACK[0x454]) = v226;
  do
  {
    *((_DWORD *)&STACK[0x3F0] + (v230 >> 5)) |= 1 << v230;
    ++v230;
  }
  while (v226 != v230);
  v231 = 0;
  v232 = 0;
  LODWORD(STACK[0x3EC]) = v226;
  v640 = v226;
  v648 = ((unint64_t)&STACK[0x500] | 0x10) + 72 * v226;
  v233 = 16;
  *(float64x2_t *)&STACK[0x3A0] = _Q0;
  v650 = *(_QWORD *)&_Q0.f64[0];
  *(float64x2_t *)&STACK[0x3B0] = _Q0;
  v651 = *(_QWORD *)&_Q0.f64[0];
  *(float64x2_t *)&STACK[0x3C0] = _Q0;
  *(float64x2_t *)&STACK[0x390] = _Q0;
  v654.i64[0] = *(_QWORD *)&_Q0.f64[0];
  v652 = _Q0.f64[0];
  v656 = _Q0;
  v645 = _Q0.f64[0];
  v643 = 0.0;
  do
  {
    STACK[0x370] = v231;
    v236 = (char *)&STACK[0x500] + v233;
    v237 = *(_OWORD *)((char *)&STACK[0x500] + v233 + 24);
    *(_OWORD *)&STACK[0x380] = v237;
    *(_QWORD *)&v237 = *(unint64_t *)((char *)&STACK[0x500] + v233 + 40);
    *(_OWORD *)&STACK[0x3D0] = v237;
    v238 = *(_OWORD *)((char *)&STACK[0x500] + v233 + 48);
    *(_QWORD *)&v237 = *(unint64_t *)((char *)&STACK[0x500] + v233 + 64);
    *(_OWORD *)&STACK[0x300] = v237;
    v239 = *(float32x2_t *)((char *)&STACK[0x500] + v233 + 16);
    v240 = *(float *)((char *)&STACK[0x500] + v233 + 12);
    v241 = v629[2];
    v243 = *(_DWORD *)((char *)&STACK[0x500] + v233);
    v242 = *(unsigned int *)((char *)&STACK[0x500] + v233 + 4);
    v244 = *(_DWORD *)((char *)&STACK[0x500] + v233 + 8);
    v245 = &STACK[0xE618] + 18 * v243;
    v246 = *(_OWORD *)v245;
    *(_OWORD *)&STACK[0x2C0] = v238;
    *(_OWORD *)&STACK[0x2D0] = v246;
    v247 = *((_OWORD *)v245 + 2);
    *(_OWORD *)&STACK[0x2E0] = *((_OWORD *)v245 + 1);
    *(_OWORD *)&STACK[0x2F0] = v247;
    v248 = *((_OWORD *)v245 + 4);
    *(_OWORD *)&STACK[0x310] = *((_OWORD *)v245 + 3);
    *(_OWORD *)&STACK[0x320] = v248;
    v249 = *((_OWORD *)v245 + 6);
    *(_OWORD *)&STACK[0x330] = *((_OWORD *)v245 + 5);
    *(_OWORD *)&STACK[0x340] = v249;
    v250 = *((float64x2_t *)v245 + 8);
    *(_OWORD *)&STACK[0x350] = *((_OWORD *)v245 + 7);
    *(float64x2_t *)&STACK[0x360] = v250;
    v251 = v241->f64[0];
    v252 = *(_QWORD *)&v241->f64[0] + 4080 * v242 + 2024;
    v253 = v252 + 1016 * v244;
    v254 = (uint64_t)&v241[11].f64[9 * *((_DWORD *)&v241->f64[1] + v242)
                                + 1
                                + 9 * v244
                                + 9 * HIDWORD(v241[10].f64[1]) * v243];
    v255 = *(_DWORD *)(v253 + 568);
    if (v255 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_302;
      }
      v251 = v241->f64[0];
      v273 = -1;
      *(_QWORD *)&v275.f64[0] = v654.i64[0];
      v225 = v656;
      v277 = *(float64x2_t *)&STACK[0x3B0];
      v276 = *(float64x2_t *)&STACK[0x3C0];
      v278 = *(_OWORD *)&STACK[0x390];
      v279 = *(float64x2_t *)&STACK[0x3A0];
      v281 = v651;
      v280 = *(_QWORD *)&v652;
      v282 = v650;
      goto LABEL_207;
    }
    v256 = (float64x2_t *)(v253 + 96);
    if (v255 > 1)
    {
      v225.f64[0] = *(float64_t *)(v253 + 160);
      v276 = *(float64x2_t *)(v253 + 128);
      v275 = *(float64x2_t *)(v253 + 144);
      v279 = *v256;
      v277 = *(float64x2_t *)(v253 + 112);
      v280 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
      *(_QWORD *)&v278 = vextq_s8((int8x16_t)v276, (int8x16_t)v276, 8uLL).u64[0];
      v281 = vextq_s8((int8x16_t)v277, (int8x16_t)v277, 8uLL).u64[0];
      v282 = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u64[0];
      a21 = *(float64x2_t *)(v253 + 264);
      v274.f64[1] = *(float64_t *)(v253 + 272);
      a22 = *(float64x2_t *)(v253 + 280);
      v645 = *(double *)(v253 + 296);
      LODWORD(a18) = *(_DWORD *)(v253 + 308);
      v273 = 2;
LABEL_207:
      v274.f64[0] = *(float64_t *)(v254 + 64);
      v284 = *(float64x2_t *)(v254 + 32);
      v283 = *(float64x2_t *)(v254 + 48);
      v272 = *(float64x2_t *)(v254 + 16);
      *(_QWORD *)&v279.f64[1] = v282;
      *(_QWORD *)&v275.f64[1] = v280;
      *(_QWORD *)&v276.f64[1] = v278;
      *(_QWORD *)&v277.f64[1] = v281;
      v285 = (int8x16_t)vabdq_f64(*(float64x2_t *)v254, v279);
      v286 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v286, (float64x2_t)vextq_s8(v285, v285, 8uLL)), (int32x4_t)vcgeq_f64(v286, vabdq_f64(v272, v277))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v286, vabdq_f64(v284, v276)), (int32x4_t)vcgeq_f64(v286, vabdq_f64(v283, v275))))))) & 1 | (vabdq_f64(v274, v225).f64[0] > 1.0e-10))v287 = -1;
      else
        v287 = 0;
      v288 = (int8x16_t)vdupq_n_s64(v287);
      *(int8x8_t *)&v274.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)&v274.f64[0], (int8x8_t)v287), vand_s8(*(int8x8_t *)&v225.f64[0], (int8x8_t)*(_OWORD *)&vmvnq_s8(v288)));
      v289 = vbslq_s8(v288, (int8x16_t)v284, (int8x16_t)v276);
      v290 = vbslq_s8(v288, (int8x16_t)v272, (int8x16_t)v277);
      v291 = vbslq_s8(v288, *(int8x16_t *)v254, (int8x16_t)v279);
      v654 = vbslq_s8(v288, (int8x16_t)v283, (int8x16_t)v275);
      v656 = v274;
      v271 = (float64x2_t)vextq_s8(v654, v654, 8uLL);
      *(int8x16_t *)&STACK[0x3B0] = v290;
      *(int8x16_t *)&STACK[0x3C0] = v289;
      *(int8x16_t *)&STACK[0x390] = vextq_s8(v289, v289, 8uLL);
      *(int8x16_t *)&STACK[0x3A0] = v291;
      v651 = vextq_s8(v290, v290, 8uLL).u64[0];
      v652 = v271.f64[0];
      v650 = vextq_s8(v291, v291, 8uLL).u64[0];
      goto LABEL_211;
    }
    if (!v255)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_302:
      abort();
    }
    v250.f64[0] = *(float64_t *)(v253 + 160);
    v257 = *(int8x16_t *)v256;
    v258 = *(float64x2_t *)(v253 + 112);
    v259 = *(float64x2_t *)(v253 + 128);
    v260 = *(float64x2_t *)(v253 + 144);
    a21 = *(float64x2_t *)(v253 + 264);
    v261.f64[1] = *(float64_t *)(v253 + 272);
    a22 = *(float64x2_t *)(v253 + 280);
    v645 = *(double *)(v253 + 296);
    LODWORD(a18) = *(_DWORD *)(v253 + 308);
    v261.f64[0] = *(float64_t *)(v254 + 64);
    v262 = *(float64x2_t *)(v254 + 16);
    v263 = *(float64x2_t *)(v254 + 32);
    v264 = *(float64x2_t *)(v254 + 48);
    v265 = (int8x16_t)vabdq_f64(*(float64x2_t *)v254, *v256);
    v266 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
    v225 = (float64x2_t)vcgeq_f64(v266, (float64x2_t)vextq_s8(v265, v265, 8uLL));
    if (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v225, (int32x4_t)vcgeq_f64(v266, vabdq_f64(v262, v258))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v266, vabdq_f64(v263, v259)), (int32x4_t)vcgeq_f64(v266, vabdq_f64(v264, v260))))))) & 1 | (vabdq_f64(v261, v250).f64[0] > 1.0e-10))v267 = -1;
    else
      v267 = 0;
    v268 = (int8x16_t)vdupq_n_s64(v267);
    *(int8x8_t *)&v250.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)&v261.f64[0], (int8x8_t)v267), vand_s8(*(int8x8_t *)&v250.f64[0], (int8x8_t)*(_OWORD *)&vmvnq_s8(v268)));
    v656 = v250;
    v269 = vbslq_s8(v268, (int8x16_t)v263, (int8x16_t)v259);
    v270 = vbslq_s8(v268, (int8x16_t)v262, (int8x16_t)v258);
    v271 = (float64x2_t)vbslq_s8(v268, *(int8x16_t *)v254, v257);
    v654 = vbslq_s8(v268, (int8x16_t)v264, (int8x16_t)v260);
    v272 = (float64x2_t)vextq_s8(v654, v654, 8uLL);
    *(int8x16_t *)&STACK[0x3B0] = v270;
    *(int8x16_t *)&STACK[0x3C0] = v269;
    *(int8x16_t *)&STACK[0x390] = vextq_s8(v269, v269, 8uLL);
    *(float64x2_t *)&STACK[0x3A0] = v271;
    v651 = vextq_s8(v270, v270, 8uLL).u64[0];
    v652 = v272.f64[0];
    v650 = vextq_s8((int8x16_t)v271, (int8x16_t)v271, 8uLL).u64[0];
    v273 = 1;
LABEL_211:
    v292 = *(float64x2_t *)&STACK[0x380];
    v293 = *(_QWORD *)&v251 + 168 * v243;
    v294 = *(double *)(v293 + 16);
    v295 = *(int64x2_t *)v293;
    v272.f64[0] = *(float64_t *)(v293 + 40);
    v296 = *(int64x2_t *)(v293 + 24);
    v297 = *(double *)(v293 + 64);
    _Q3 = *(float64x2_t *)(v293 + 48);
    v271.f64[0] = *(float64_t *)(v293 + 160);
    v298 = *(float64x2_t *)(v293 + 144);
    v299 = v252 + 1016 * v244;
    *(_QWORD *)&v292.f64[1] = vextq_s8((int8x16_t)v292, (int8x16_t)v292, 8uLL).u64[0];
    _Q0 = vsubq_f64(v292, v298);
    v301 = vsubq_f64(*(float64x2_t *)&STACK[0x3D0], v271);
    v691 = (float64x2_t)v296;
    v693 = (float64x2_t)v295;
    *(float64x2_t *)&STACK[0x2A0] = v272;
    v298.f64[0] = v294;
    v298.f64[1] = v272.f64[0];
    v302 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v295, v296), _Q0.f64[0]), (float64x2_t)vzip2q_s64(v295, v296), _Q0, 1), v298, v301.f64[0]);
    _Q6 = vmulq_f64(_Q3, _Q0);
    _Q0.f64[0] = _Q0.f64[1];
    *(float64x2_t *)&STACK[0x2B0] = _Q3;
    __asm { FMLA            D6, D0, V3.D[1] }
    _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v297, v301.f64[0]);
    v298.f64[0] = *(float64_t *)(v253 + 16);
    _Q3.f64[0] = *(float64_t *)(v253 + 40);
    _Q7 = *(float64x2_t *)(v253 + 24);
    v272.f64[0] = *(float64_t *)(v253 + 64);
    _Q5 = *(float64x2_t *)(v253 + 48);
    v301.f64[0] = *(float64_t *)(v299 + 88);
    v671 = _Q6;
    v673 = *(float64x2_t *)v253;
    *(_QWORD *)&v301.f64[0] = *(_OWORD *)&vsubq_f64(_Q6, v301);
    v687 = (int8x16_t)v298;
    v689 = v302;
    _Q0 = vsubq_f64(v302, *(float64x2_t *)(v299 + 72));
    v679 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v253, (int64x2_t)_Q7);
    v681 = _Q5;
    v675 = _Q7;
    v677 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v253, (int64x2_t)_Q7);
    v683 = v272;
    v685 = (int8x16_t)_Q3;
    v298.f64[1] = _Q3.f64[0];
    v669 = v298;
    *(float64x2_t *)&STACK[0x380] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v679, _Q0.f64[0]), v677, _Q0, 1), v298, v301.f64[0]);
    _Q2 = vmulq_f64(_Q5, _Q0);
    _Q0.f64[0] = _Q0.f64[1];
    __asm { FMLA            D2, D0, V5.D[1] }
    _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v272.f64[0], v301.f64[0]);
    *(float64x2_t *)&STACK[0x3D0] = _Q2;
    if (v255 == -1)
    {
      v325 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v307 = STACK[0x370];
      if (v325)
        goto LABEL_300;
    }
    else
    {
      v307 = STACK[0x370];
      if (v273 <= 1)
      {
        if ((_DWORD)a18)
        {
          v308 = *(_OWORD *)&STACK[0x3D0];
          if (*(double *)&STACK[0x3D0] < 0.00000001)
            goto LABEL_195;
          _Q0 = vmulq_n_f64(*(float64x2_t *)&STACK[0x380], 1.0 / *(double *)&v308);
          _D5 = vmuld_lane_f64(1.0 / *(double *)&v308, *(float64x2_t *)&STACK[0x380], 1);
          __asm { FMLA            D6, D5, V0.D[1] }
          v312 = *(double *)&_D6 * a21.f64[0]
               + 1.0
               + *(double *)&_D6 * *(double *)&_D6 * (a21.f64[1] + *(double *)&_D6 * a22.f64[0]);
          v313 = vmulq_n_f64((float64x2_t)xmmword_2103B8490, v645);
          v314 = vmulq_n_f64(_Q0, a21.f64[0]+ a21.f64[0]+ *(double *)&_D6 * (vmuld_lane_f64(4.0, a21, 1) + 6.0 * a22.f64[0] * *(double *)&_D6));
          v315 = vmulq_n_f64(v314, _Q0.f64[0]);
          v316 = vmulq_n_f64(v314, _D5);
          v317 = (int8x16_t)vmulq_n_f64(_Q0, a22.f64[1] + a22.f64[1]);
          v318.f64[1] = a22.f64[1];
          v318.f64[0] = v645;
          v319 = vaddq_f64((float64x2_t)vextq_s8(v317, v317, 8uLL), vmulq_f64(v313, _Q0));
          v315.f64[0] = v312 + v315.f64[0];
          *(_QWORD *)&v313.f64[0] = vdupq_laneq_s64((int64x2_t)v313, 1).u64[0];
          v313.f64[1] = vmuld_lane_f64(6.0, a22, 1);
          v320 = vmulq_f64(v313, _Q0);
          v662 = vmlaq_n_f64(vaddq_f64(vmulq_laneq_f64((float64x2_t)vzip1q_s64((int64x2_t)v317, (int64x2_t)v320), _Q0, 1), vmulq_f64(v318, vaddq_f64((float64x2_t)vdupq_lane_s64(_D6, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))))), _Q0, v312);
          v316.f64[1] = v312 + v316.f64[1];
          v321 = (int64x2_t)vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v319, 1), (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v320, 1), v320)), v316), 1.0 / *(double *)&v308);
          v322 = (int8x16_t)vmulq_n_f64(vaddq_f64(v319, v315), 1.0 / *(double *)&v308);
          v658 = vextq_s8(v322, v322, 8uLL).u64[0];
          v660 = *(double *)v322.i64;
          v323 = -(vmuld_n_f64(*(double *)v322.i64, _Q0.f64[0]) + *(double *)&v322.i64[1] * _Q0.f64[1]);
          v322.i64[1] = v321.i64[1];
          *(double *)v322.i64 = v323;
          *(_QWORD *)&v316.f64[0] = vdupq_laneq_s64(v321, 1).u64[0];
          v324 = (int8x16_t)vzip1q_s64((int64x2_t)v322, v321);
          v316.f64[1] = -(vmuld_n_f64(*(double *)v321.i64, _Q0.f64[0]) + *(double *)&v321.i64[1] * _Q0.f64[1]);
          *(int8x16_t *)&STACK[0x380] = vextq_s8((int8x16_t)v316, (int8x16_t)v316, 8uLL);
          *(int8x16_t *)&STACK[0x3D0] = v324;
          *(_QWORD *)&v664 = vextq_s8(v324, v324, 8uLL).u64[0];
          v666 = v316.f64[0];
        }
        else
        {
          v445 = *(_OWORD *)&STACK[0x3D0];
          if (*(double *)&STACK[0x3D0] < 0.00000001)
            goto LABEL_195;
          v446 = 1.0 / *(double *)&v445;
          _Q1 = vmulq_n_f64(*(float64x2_t *)&STACK[0x380], 1.0 / *(double *)&v445);
          _D3 = vmuld_lane_f64(v446, *(float64x2_t *)&STACK[0x380], 1);
          __asm { FMLA            D4, D3, V1.D[1] }
          v450 = _D4 * a21.f64[0] + 1.0 + _D4 * _D4 * (a21.f64[1] + _D4 * a22.f64[0]);
          v451 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v450, 0);
          v452 = vmulq_n_f64(_Q1, v450);
          v453 = vmulq_n_f64(_Q1, a21.f64[0] + a21.f64[0] + _D4 * (vmuld_lane_f64(4.0, a21, 1) + 6.0 * a22.f64[0] * _D4));
          v454 = (int8x16_t)vmulq_n_f64(v453, _Q1.f64[0]);
          v455 = vmulq_n_f64(v453, _D3);
          *(_QWORD *)&v456.f64[0] = v454.i64[0];
          v456.f64[1] = v455.f64[1];
          v457 = vaddq_f64(v451, v456);
          v451.f64[0] = v457.f64[0];
          *(_QWORD *)&v451.f64[1] = v454.i64[1];
          v457.f64[0] = v455.f64[0];
          v458 = (int64x2_t)vmulq_n_f64(v457, v446);
          v459 = (int8x16_t)vmulq_n_f64(v451, v446);
          v658 = vextq_s8(v459, v459, 8uLL).u64[0];
          v660 = *(double *)v459.i64;
          v662 = v452;
          v460 = -(vmuld_n_f64(*(double *)v459.i64, _Q1.f64[0]) + *(double *)&v459.i64[1] * _Q1.f64[1]);
          v459.i64[1] = v458.i64[1];
          *(double *)v459.i64 = v460;
          v454.i64[0] = vdupq_laneq_s64(v458, 1).u64[0];
          v461 = (int8x16_t)vzip1q_s64((int64x2_t)v459, v458);
          *(double *)&v454.i64[1] = -(vmuld_n_f64(*(double *)v458.i64, _Q1.f64[0]) + *(double *)&v458.i64[1]
                                                                                   * _Q1.f64[1]);
          *(int8x16_t *)&STACK[0x380] = vextq_s8(v454, v454, 8uLL);
          *(int8x16_t *)&STACK[0x3D0] = v461;
          *(_QWORD *)&v664 = vextq_s8(v461, v461, 8uLL).u64[0];
          v666 = *(double *)v454.i64;
        }
        goto LABEL_222;
      }
    }
    _Q6 = *(float64x2_t *)&STACK[0x380];
    _D0 = STACK[0x388];
    __asm { FMLA            D2, D0, V6.D[1] }
    if (_D2 >= 0.00000001)
    {
      v332 = *(double *)&STACK[0x3D0] * *(double *)&STACK[0x3D0] + _D2;
      v333 = sqrt(_D2);
      v667 = _D2;
      v334 = atan2(v333, *(long double *)&STACK[0x3D0]);
      v335 = (float64x2_t)vzip2q_s64((int64x2_t)a21, (int64x2_t)a22);
      v336 = (float64x2_t)vzip1q_s64((int64x2_t)a21, (int64x2_t)a22);
      v337 = vmulq_n_f64(vaddq_f64(vmulq_f64(v336, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v335, (float64x2_t)xmmword_210312E20), v334 * v334)), v334 * v334);
      v338 = v334 * v334 * (v334 * v334);
      _Q6 = *(float64x2_t *)&STACK[0x380];
      v339 = vmulq_n_f64(vaddq_f64(v336, vmulq_n_f64(v335, v334 * v334)), v334 * v334);
      v329 = (v334 + v334 * (v339.f64[0] + vmuld_lane_f64(v338, v339, 1))) / v333;
      v339.f64[0] = (v337.f64[0] + vmuld_lane_f64(v338, v337, 1) + 1.0) / v332;
      v331 = vmulq_n_f64(*(float64x2_t *)&STACK[0x380], (*(double *)&STACK[0x3D0] * v339.f64[0] - v329) / v667);
      v330 = -v339.f64[0];
      _Q3 = (float64x2_t)vextq_s8((int8x16_t)v331, (int8x16_t)v331, 8uLL);
    }
    else
    {
      v329 = 1.0 / *(double *)&STACK[0x3D0];
      v330 = -(v329 * v329);
      v331.f64[0] = 0.0;
      _Q3.f64[0] = 0.0;
    }
    v331.f64[1] = _Q3.f64[0];
    v340 = (int8x16_t)vmulq_n_f64(v331, _Q6.f64[0]);
    _Q3.f64[0] = v330 * _Q6.f64[0];
    *(float64x2_t *)&STACK[0x3D0] = _Q3;
    v341 = vmulq_laneq_f64(v331, _Q6, 1);
    v342 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(v330 * *(double *)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).i64), 0);
    *(double *)v340.i64 = v329 + *(double *)v340.i64;
    v662 = vmulq_n_f64(_Q6, v329);
    v664 = v341.f64[0];
    v658 = vextq_s8(v340, v340, 8uLL).u64[0];
    v660 = *(double *)v340.i64;
    *(double *)v342.i64 = v329 + v341.f64[1];
    v666 = v329 + v341.f64[1];
    *(int8x16_t *)&STACK[0x380] = vextq_s8(v342, v342, 8uLL);
    if (v255 == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_300:
      abort();
    }
LABEL_222:
    v343 = (int8x16_t)vmlsq_laneq_f64(vmulq_n_f64(v677, v671.f64[0]), v669, v689, 1);
    _V26.D[1] = v681.f64[1];
    _Q0 = (float64x2_t)vextq_s8((int8x16_t)v681, v687, 8uLL);
    v346 = vmulq_f64(_Q0, v671);
    v347 = (int8x16_t)vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)_Q0, v685, 8uLL), v689.f64[0]), v679, v671.f64[0], 0);
    _V3.D[1] = v673.f64[1];
    _V18.D[1] = v675.f64[1];
    _Q4 = *(_OWORD *)&STACK[0x2A0];
    __asm
    {
      FMLA            D0, D4, V3.D[1]
      FMLA            D3, D4, V18.D[1]
      FMLA            D5, D4, V26.D[1]
    }
    v353 = (int8x16_t)vmlsq_lane_f64(vmulq_laneq_f64(v679, v689, 1), v677, v689.f64[0], 0);
    v354 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v693, v673.f64[0]), v691, v673, 1), *(float64x2_t *)&STACK[0x2B0], *(double *)v687.i64);
    v355 = _Q0.f64[0] + v297 * *(double *)v687.i64;
    _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v693, v675.f64[0]), v691, v675, 1), *(float64x2_t *)&STACK[0x2B0], *(double *)v685.i64);
    _D22 = _D3 + v297 * *(double *)v685.i64;
    v358 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v693, v681.f64[0]), v691, v681, 1), *(float64x2_t *)&STACK[0x2B0], v683.f64[0]);
    v359 = _D5 + v297 * v683.f64[0];
    v360 = *(float64x2_t *)&STACK[0x3B0];
    *(_QWORD *)&v361.f64[0] = STACK[0x3A0];
    *(_QWORD *)&v361.f64[1] = STACK[0x3C0];
    *(_QWORD *)&v360.f64[1] = STACK[0x390];
    v362.f64[0] = v664;
    v363 = vmlaq_f64(v360, v361, v662);
    v364.f64[0] = 0.0;
    *(_QWORD *)&v364.f64[1] = STACK[0x3C0];
    v365.f64[0] = v660;
    *(_QWORD *)&v365.f64[1] = v658;
    v366 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)STACK[0x3A0], v660), v364, v664);
    v367 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)STACK[0x3A0], *(double *)&v658), v364, v666);
    v368 = vmlaq_n_f64(vmulq_n_f64(v366, *(double *)v343.i64), v367, *(double *)vextq_s8(v343, v343, 8uLL).i64);
    v369 = vmlaq_n_f64(vmulq_n_f64(v366, *(double *)v347.i64), v367, *(double *)vextq_s8(v347, v347, 8uLL).i64);
    v370 = vmlaq_n_f64(vmulq_n_f64(v366, *(double *)v353.i64), v367, *(double *)vextq_s8(v353, v353, 8uLL).i64);
    v371 = vmlaq_n_f64(vmulq_n_f64(v366, v354.f64[0]), v367, _Q19.f64[0]);
    v372 = vmlaq_laneq_f64(vmulq_laneq_f64(v366, v354, 1), v367, _Q19, 1);
    v373 = vmlaq_n_f64(vmulq_n_f64(v366, v355), v367, _D22);
    v362.f64[1] = v666;
    _Q27 = vmlaq_f64(vmulq_n_f64(v365, *(double *)&STACK[0x3A0]), (float64x2_t)0, v362);
    _Q26 = vmlaq_n_f64(vmulq_f64(v365, (float64x2_t)0), v362, *(double *)&STACK[0x3C0]);
    v376 = vmlaq_laneq_f64(vmulq_n_f64(v354, _Q27.f64[0]), _Q19, _Q27, 1);
    __asm { FMLA            D29, D22, V27.D[1] }
    v378 = vmlaq_laneq_f64(vmulq_n_f64(v354, _Q26.f64[0]), _Q19, _Q26, 1);
    __asm { FMLA            D19, D22, V26.D[1] }
    v379 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)STACK[0x3A0], *(double *)&STACK[0x3D0]), v364, *(double *)&STACK[0x380]);
    v380 = vmlaq_n_f64(v368, v379, vmlsq_laneq_f64(v346, v683, v689, 1).f64[0]);
    v381 = vmlaq_n_f64(v369, v379, vmlsq_f64(vmulq_n_f64(v689, v683.f64[0]), v681, v671).f64[0]);
    v382 = vmlaq_n_f64(v370, v379, vmlsq_laneq_f64(vmulq_laneq_f64(v681, v689, 1), v689, v681, 1).f64[0]);
    v383 = vmlaq_n_f64(v371, v379, v358.f64[0]);
    v384 = vmlaq_laneq_f64(v372, v379, v358, 1);
    v385 = vmlaq_n_f64(v373, v379, v359);
    v346.f64[0] = *(double *)&STACK[0x3D0] * *(double *)&STACK[0x3A0] + *(double *)&STACK[0x380] * 0.0;
    v386 = *(double *)&STACK[0x3D0] * 0.0 + *(double *)&STACK[0x380] * *(double *)&STACK[0x3C0];
    v387 = vmlaq_n_f64(v376, v358, v346.f64[0]);
    v388 = _D29 + v359 * v346.f64[0];
    v389 = vmlaq_n_f64(v378, v358, v386);
    v390 = _Q19.f64[0] + v359 * v386;
    _Q19.f64[0] = COERCE_FLOAT(HIDWORD(STACK[0x2C0]));
    v379.f64[0] = COERCE_FLOAT(HIDWORD(*(_OWORD *)&STACK[0x2C0]));
    v358.f64[0] = COERCE_FLOAT(*(_OWORD *)&STACK[0x300]);
    v391 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, COERCE_FLOAT(*(_OWORD *)&STACK[0x2C0])), v384, _Q19.f64[0]), v385, v379.f64[0]);
    v392 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, _Q19.f64[0]), v384, COERCE_FLOAT(STACK[0x2C8])), v385, v358.f64[0]);
    v393 = vmlaq_laneq_f64(vmulq_n_f64(v391, v387.f64[0]), v392, v387, 1);
    v394 = vmlaq_laneq_f64(vmulq_n_f64(v391, v389.f64[0]), v392, v389, 1);
    v395 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v383, v379.f64[0]), v384, v358.f64[0]), v385, COERCE_FLOAT(HIDWORD(STACK[0x300])));
    _Q7 = vmlaq_n_f64(v393, v395, v388);
    v396 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x2D0]);
    v397 = vcvtq_f64_f32((float32x2_t)STACK[0x2D0]);
    v398 = vmlaq_n_f64(v394, v395, v390);
    v399 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x2E0]);
    v400 = vcvtq_f64_f32((float32x2_t)STACK[0x2E0]);
    v401.f64[0] = _Q7.f64[0];
    v401.f64[1] = v398.f64[1];
    v402 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x2F0]);
    v403 = vcvtq_f64_f32((float32x2_t)STACK[0x2F0]);
    v404 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v240 * v240), 0), v401);
    v405 = vcvtq_f64_f32((float32x2_t)STACK[0x310]);
    v406 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x320]);
    v407 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v380, v397.f64[0]), v381, v397, 1), v382, v396.f64[0]), v383, v396, 1), v384, v400.f64[0], 0), v385, v400, 1);
    v408 = vmlaq_laneq_f64(vmulq_n_f64(v380, v399.f64[0]), v381, v399, 1);
    v409 = vcvtq_f64_f32((float32x2_t)STACK[0x340]);
    v410 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x350]);
    v411 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(v408, v382, v403.f64[0]), v383, v403, 1), v384, v402.f64[0], 0), v385, v402, 1);
    v412 = vmlaq_laneq_f64(vmulq_n_f64(v380, v405.f64[0]), v381, v405, 1);
    v413 = vmlaq_laneq_f64(vmulq_n_f64(v380, v406.f64[0]), v381, v406, 1);
    v414 = vmlaq_laneq_f64(vmulq_n_f64(v380, v409.f64[0]), v381, v409, 1);
    v415 = vmlaq_laneq_f64(vmulq_n_f64(v380, v410.f64[0]), v381, v410, 1);
    v416 = vmlaq_n_f64(vmulq_n_f64(v407, v380.f64[0]), v411, v381.f64[0]);
    v417 = vmlaq_laneq_f64(vmulq_laneq_f64(v407, v380, 1), v411, v381, 1);
    v381.f64[0] = vmuld_lane_f64(v404.f64[0], v404, 1) - vmuld_lane_f64(_Q7.f64[1], _Q7, 1);
    v418 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x310]);
    v419 = vmlsq_laneq_f64(vmlaq_n_f64(v412, v382, v418.f64[0]), v383, v418, 1);
    v420 = vcvtq_f64_f32((float32x2_t)STACK[0x320]);
    v421 = vmlsq_laneq_f64(vmlsq_lane_f64(v419, v384, v420.f64[0], 0), v385, v420, 1);
    v422 = vcvtq_f64_f32((float32x2_t)STACK[0x330]);
    v423 = vmlsq_laneq_f64(vmlaq_n_f64(v413, v382, v422.f64[0]), v383, v422, 1);
    v424 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x330]);
    v225 = vmlsq_laneq_f64(vmlsq_lane_f64(v423, v384, v424.f64[0], 0), v385, v424, 1);
    v425 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x340]);
    v426 = vmlsq_laneq_f64(vmlaq_n_f64(v414, v382, v425.f64[0]), v383, v425, 1);
    v427 = vcvtq_f64_f32((float32x2_t)STACK[0x360]);
    v428 = vmlsq_laneq_f64(vmlaq_n_f64(v415, v382, v427.f64[0]), v383, v427, 1);
    v429 = vmlsq_lane_f64(vmlaq_n_f64(v416, v421, v382.f64[0]), v225, v383.f64[0], 0);
    _Q3 = vmlsq_laneq_f64(vmlaq_laneq_f64(v417, v421, v382, 1), v225, v383, 1);
    v383.f64[0] = sqrt(v381.f64[0]);
    _Q5.f64[0] = v404.f64[1] + v383.f64[0];
    v407.f64[0] = -_Q7.f64[1];
    _Q5.f64[1] = -_Q7.f64[1];
    v407.f64[1] = v404.f64[0] + v383.f64[0];
    v431 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v381.f64[0] * (vaddvq_f64(v404) + v383.f64[0] + v383.f64[0]))), 0);
    v432 = vsubq_f64(v363, vcvtq_f64_f32(v239));
    _Q0 = vmlaq_laneq_f64(vmulq_n_f64(vdivq_f64(_Q5, v431), v432.f64[0]), vdivq_f64(v407, v431), v432, 1);
    v434 = vcvtq_f64_f32((float32x2_t)STACK[0x350]);
    v435 = vmlsq_laneq_f64(vmlsq_lane_f64(v426, v384, v434.f64[0], 0), v385, v434, 1);
    v436 = vcvt_hight_f64_f32(*(float32x4_t *)&STACK[0x360]);
    v437 = vmlsq_laneq_f64(vmlsq_lane_f64(v428, v384, v436.f64[0], 0), v385, v436, 1);
    v438 = vmlsq_lane_f64(vmlsq_lane_f64(v429, v435, v384.f64[0], 0), v437, v385.f64[0], 0);
    v439 = vaddq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(_Q3, v435, v384, 1), v437, v385, 1), v404);
    v404.f64[1] = _Q7.f64[1];
    _Q2 = vaddq_f64(v438, v404);
    v439.f64[0] = vmuld_lane_f64(_Q2.f64[0], v439, 1) - vmuld_lane_f64(_Q2.f64[1], _Q2, 1);
    _Q7.f64[0] = sqrt(v439.f64[0]);
    v436.f64[0] = v439.f64[1] + _Q7.f64[0];
    _Q3.f64[0] = -_Q2.f64[1];
    v436.f64[1] = -_Q2.f64[1];
    _Q3.f64[1] = _Q2.f64[0] + _Q7.f64[0];
    v441 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v439.f64[0] * (_Q2.f64[0] + v439.f64[1] + _Q7.f64[0] + _Q7.f64[0]))), 0);
    _Q3.f64[0] = vmlaq_laneq_f64(vmulq_n_f64(vdivq_f64(v436, v441), *(double *)&v432), vdivq_f64(_Q3, v441), v432, 1).f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    _Q3.f64[0] = _Q0.f64[1];
    __asm { FMLA            D1, D3, V0.D[1] }
    v443 = _D1 > v229;
    if (_Q2.f64[0] > v228)
      v443 = 1;
    if (v443 == 1)
      _Q0 = vmulq_n_f64(_Q0, sqrt(v229 / _D1));
    _D1 = _Q0.f64[1];
    v235 = (*(_QWORD *)&_Q0.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)&_Q0.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (!v235)
    {
LABEL_195:
      *(_DWORD *)((char *)&STACK[0x3F0] + ((v232 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) ^= 1 << v232;
      goto LABEL_196;
    }
    __asm { FMLA            D2, D1, V0.D[1] }
    *(_DWORD *)((char *)&STACK[0x458] + ((v307 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) = *(_DWORD *)((_BYTE *)&STACK[0x458]
                                                                                          + ((v307 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) & ~(1 << v307) | (v443 << v307);
    v643 = v643 + _D2;
LABEL_196:
    v231 = (v307 + 1);
    v232 = (v232 + 1);
    v233 += 72;
  }
  while (v236 + 72 != (char *)v648);
  v462 = 0;
  LOBYTE(v463) = 0;
  v464 = 0;
  v629[3]->f64[1] = v643 * 0.5;
  v629[4]->f64[0] = v643 * 0.5 + v629[4]->f64[0];
  v465 = v629[1];
  v466 = (unsigned int *)&v465[28372];
  LODWORD(v465[28372].f64[0]) = 0;
  do
  {
    v467 = v462 >> 5;
    v468 = 1 << v462;
    v469 = ((*(_DWORD *)((char *)&STACK[0x458] + ((v464 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v463) & 1) << v462++;
    *((_DWORD *)v465[28372].f64 + v467 + 1) = v469 | *((_DWORD *)v465[28372].f64 + v467 + 1) & ~v468;
    v463 = v464 + 1;
    v464 = (v464 + 1);
  }
  while (v640 != v463);
  v470 = 0;
  LOBYTE(v471) = 0;
  v472 = 0;
  *v466 = v462;
  LODWORD(v465[28378].f64[1]) = 0;
  v473 = (uint64_t)&v465[28378].f64[1] + 4;
  v34 = v627;
  v33 = v628;
  do
  {
    v474 = v470 >> 5;
    v475 = 1 << v470;
    v476 = ((*(_DWORD *)((char *)&STACK[0x3F0] + ((v472 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v471) & 1) << v470++;
    *(_DWORD *)(v473 + 4 * v474) = v476 | *(_DWORD *)(v473 + 4 * v474) & ~v475;
    v471 = v472 + 1;
    v472 = (v472 + 1);
  }
  while (v640 != v471);
  v466[26] = v470;
  _Q2.f64[1] = 0.0;
  _Q1 = vaddq_f64(v628[2741], (float64x2_t)0);
  _Q0 = vaddq_f64(v628[2740], (float64x2_t)0);
  v628[2740] = _Q0;
  v628[2741] = _Q1;
  v477 = v629;
LABEL_236:
  v224 = v477[1];
LABEL_237:
  v478 = (unsigned int *)&v33[2023].f64[1];
  v479 = v33 + 1977;
  LODWORD(v224[134092].f64[0]) = 1013;
  v480 = LODWORD(v34[22].f64[1]);
  v481 = 0.0;
  v482 = 0.0;
  if ((_DWORD)v480)
  {
    v483 = (float64x2_t *)((char *)v34 + 40);
    do
    {
      if (*((_DWORD *)&v33[1951].f64[1] + LODWORD(v483->f64[1]) + 1) != -1)
      {
        v484 = (unint64_t)&v629[5][4 * (unint64_t)LODWORD(v483->f64[0])];
        v485 = (float64x2_t *)(v484 + 18376);
        v486 = (float64x2_t *)(v484 + 18344);
        if (HIDWORD(v483->f64[0]))
          v486 = v485;
        _Q5 = v483[4];
        _Q1 = vmulq_f64(vsubq_f64(v486[1], v483[2]), _Q5);
        _Q5.f64[0] = vmulq_f64(vsubq_f64(*v486, v483[16]), v483[48]).f64[1];
        __asm { FMLA            D4, D5, V3.D[1] }
        _D3 = _Q1.f64[1];
        __asm { FMLA            D4, D3, V1.D[1] }
        v482 = v482 + _D4;
      }
      v483 += 5;
      --v480;
    }
    while (v480);
  }
  v490 = v482 * 0.5;
  v491 = (double *)v629[3];
  v491[3] = v490;
  v492 = (double *)v629[4];
  *v492 = v490 + *v492;
  v493 = LODWORD(v33[2023].f64[0]);
  if ((_DWORD)v493)
  {
    v494 = v33 + 1983;
    v481 = 0.0;
    do
    {
      v510 = 4 * LODWORD(v494->f64[1]);
      v511 = *(_DWORD *)((char *)&v33[1949].f64[1] + v510 + 4);
      v512 = *(_DWORD *)((char *)&v33[1950].f64[1] + v510 + 4);
      if (v511 != -1 || v512 != -1)
      {
        f64 = v494[1].f64;
        v695 = vld3q_f64(f64);
        v515 = HIDWORD(v494->f64[0]);
        v516 = (uint64_t)&v629[5][255 * LODWORD(v494->f64[0]) + 126].f64[1];
        v517 = v516 + 1016 * v515;
        v518 = v494[5].f64[0];
        _Q21 = v494[4];
        v520 = *(double *)(v517 + 16);
        v521 = *(double *)(v517 + 40);
        _Q17 = *(float64x2_t *)(v517 + 24);
        v522 = *(double *)(v517 + 64);
        v500 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v695.val[0], *(double *)v517), v695.val[1], *(float64x2_t *)v517, 1), v695.val[2], v520);
        _D6 = *(_QWORD *)(v517 + 8);
        __asm { FMLA            D24, D6, V21.D[1] }
        v525 = _D24 + v518 * v520;
        v526 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v695.val[0], _Q17.f64[0]), v695.val[1], _Q17, 1), v695.val[2], v521);
        _Q17.f64[0] = *(float64_t *)(v517 + 32);
        __asm { FMLA            D24, D17, V21.D[1] }
        _Q17.f64[0] = _D24 + v518 * v521;
        v496 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v695.val[0], *(double *)(v517 + 48)), v695.val[1], *(float64x2_t *)(v517 + 48), 1), v695.val[2], v522);
        v695.val[1].f64[0] = *(float64_t *)(v517 + 56);
        __asm { FMLA            D18, D19, V21.D[1] }
        v529 = v695.val[0].f64[0] + v518 * v522;
        if (v529 >= 0.0)
        {
          v532 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v500, 1);
          if (v500.f64[0] >= -v526.f64[1])
          {
            v495 = (float64x2_t)vzip1q_s64((int64x2_t)_Q17, (int64x2_t)v496);
            *(_QWORD *)&v496.f64[0] = vdupq_laneq_s64((int64x2_t)v496, 1).u64[0];
            v496.f64[1] = v525;
            v497 = vsubq_f64(v495, v496);
            *(_QWORD *)&v498.f64[0] = *(_OWORD *)&vsubq_f64(v532, v526);
            v499 = v529 + 1.0 + v500.f64[0] + v526.f64[1];
            v500.f64[0] = v499;
          }
          else
          {
            v497.f64[0] = v496.f64[0] + v525;
            v497.f64[1] = _Q17.f64[0] + v496.f64[1];
            v500.f64[0] = v529 + 1.0 - (v500.f64[0] + v526.f64[1]);
            v498.f64[0] = v500.f64[0];
            *(_QWORD *)&v499 = *(_OWORD *)&vsubq_f64(v532, v526);
          }
        }
        else if (v500.f64[0] <= v526.f64[1])
        {
          v533.f64[1] = _Q17.f64[0];
          v533.f64[0] = 1.0 - v529;
          v534.f64[1] = v496.f64[1];
          v534.f64[0] = v526.f64[1] - v500.f64[0];
          v535 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v500, 1), v526);
          v500 = vaddq_f64(v533, v534);
          v498.f64[0] = v500.f64[1];
          v497 = (float64x2_t)vzip1q_s64(v535, (int64x2_t)v500);
          v499 = v496.f64[0] - v525;
        }
        else
        {
          v530 = v500.f64[0] - v526.f64[1];
          v500.f64[0] = 1.0 - v529;
          v531 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v526.f64[0], 0);
          v531.f64[0] = v530;
          v497 = vaddq_f64(v500, v531);
          v498.f64[0] = v496.f64[0] + v525;
          v499 = _Q17.f64[0] - v496.f64[1];
          v500.f64[0] = v497.f64[0];
        }
        v498.f64[1] = v499;
        v501 = 0.5 / sqrt(v500.f64[0]);
        v502 = vmulq_n_f64(v498, v501);
        v503 = vmulq_n_f64(v497, v501);
        v504 = v516 + 1016 * v515;
        v496.f64[0] = *(float64_t *)(v504 + 88);
        v497.f64[0] = v494[6].f64[1];
        v505 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v504 + 72), *(float64x2_t *)((char *)v494 + 88));
        v506 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v502, v502), (int64x2_t)v505);
        _Q6 = vmulq_f64((float64x2_t)vextq_s8(v505, (int8x16_t)vsubq_f64(v496, v497), 8uLL), v494[9]);
        _Q5 = vmulq_f64(v506, v494[8]);
        _Q4 = vmulq_f64(vaddq_f64(v503, v503), v494[7]);
        _Q7 = vmulq_f64(_Q4, _Q4);
        _D16 = _Q4.f64[1];
        __asm { FMLA            D7, D16, V4.D[1] }
        _Q4.f64[0] = _Q5.f64[1];
        __asm { FMLA            D7, D4, V5.D[1] }
        _Q4.f64[0] = _Q6.f64[1];
        __asm { FMLA            D7, D4, V6.D[1] }
        v481 = v481 + _Q7.f64[0];
      }
      v494 += 10;
      --v493;
    }
    while (v493);
  }
  v536 = v481 * 0.5;
  v491[5] = v536;
  *v492 = v536 + *v492;
  v537 = LODWORD(v33[2208].f64[1]);
  v538 = 0.0;
  v539 = 0.0;
  if ((_DWORD)v537)
  {
    do
    {
      v565 = *v478;
      if (*((_DWORD *)v33[1942].f64 + v565 + 1) != -1)
      {
        v566 = (const double *)(v478 + 2);
        v696 = vld3q_f64(v566);
        v567 = (uint64_t)v629[5] + 168 * v565;
        v568 = *((double *)v478 + 9);
        _Q28 = *(float64x2_t *)(v478 + 14);
        v570 = *((float64x2_t *)v478 + 9);
        v571 = *((float64x2_t *)v478 + 10);
        v572 = *((float64x2_t *)v478 + 7);
        v573 = *((float64x2_t *)v478 + 8);
        v575 = *((float64x2_t *)v478 + 5);
        v574 = *((float64x2_t *)v478 + 6);
        v576 = vextq_s8((int8x16_t)v571, (int8x16_t)v571, 8uLL).u64[0];
        v577 = vextq_s8((int8x16_t)v570, (int8x16_t)v570, 8uLL).u64[0];
        v578 = vextq_s8((int8x16_t)v573, (int8x16_t)v573, 8uLL).u64[0];
        v579 = vextq_s8((int8x16_t)v572, (int8x16_t)v572, 8uLL).u64[0];
        v580 = vextq_s8((int8x16_t)v574, (int8x16_t)v574, 8uLL).u64[0];
        v581 = vextq_s8((int8x16_t)v575, (int8x16_t)v575, 8uLL).u64[0];
        v582 = *(double *)(v567 + 16);
        v583 = *(double *)(v567 + 40);
        v584 = *(double *)(v567 + 64);
        v585 = *(float64x2_t *)(v567 + 48);
        v543 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v696.val[0], *(double *)v567), v696.val[1], *(float64x2_t *)v567, 1), v696.val[2], v582);
        _D30 = *(_QWORD *)(v567 + 8);
        __asm { FMLA            D31, D30, V28.D[1] }
        v588 = _D31 + v568 * v582;
        v589 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v696.val[0], *(double *)(v567 + 24)), v696.val[1], *(float64x2_t *)(v567 + 24), 1), v696.val[2], v583);
        _D10 = *(_QWORD *)(v567 + 32);
        __asm { FMLA            D30, D10, V28.D[1] }
        *(double *)v25.i64 = _D30 + v568 * v583;
        v592 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v696.val[0], v585.f64[0]), v696.val[1], v585, 1), v696.val[2], v584);
        _Q25 = vmulq_f64(_Q28, v585);
        v696.val[1].f64[0] = *(float64_t *)(v567 + 56);
        __asm { FMLA            D25, D26, V28.D[1] }
        v593 = _Q25.f64[0] + v568 * v584;
        if (v593 >= 0.0)
        {
          if (v543.f64[0] >= -v589.f64[1])
          {
            *(_QWORD *)&v540.f64[0] = vdupq_laneq_s64((int64x2_t)v592, 1).u64[0];
            v540.f64[1] = v588;
            v541 = vsubq_f64((float64x2_t)vzip1q_s64(v25, (int64x2_t)v592), v540);
            _Q25 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v543, 1), v589);
            v543.f64[0] = v593 + 1.0 + v543.f64[0] + v589.f64[1];
          }
          else
          {
            v541.f64[0] = v592.f64[0] + v588;
            _Q25.f64[0] = v593 + 1.0 - (v543.f64[0] + v589.f64[1]);
            v541.f64[1] = *(double *)v25.i64 + v592.f64[1];
            v543.f64[0] = _Q25.f64[0];
          }
        }
        else if (v543.f64[0] <= v589.f64[1])
        {
          v596 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v543, 1), v589);
          *(_QWORD *)&v597.f64[1] = v25.i64[0];
          v597.f64[0] = 1.0 - v593;
          v592.f64[0] = v589.f64[1] - v543.f64[0];
          v543 = vaddq_f64(v597, v592);
          v541 = (float64x2_t)vzip1q_s64(v596, (int64x2_t)v543);
          _Q25 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v543, 1);
        }
        else
        {
          v594 = v543.f64[0] - v589.f64[1];
          v543.f64[0] = 1.0 - v593;
          v595 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v589.f64[0], 0);
          v595.f64[0] = v594;
          v541 = vaddq_f64(v543, v595);
          _Q25.f64[0] = v592.f64[0] + v588;
          v543.f64[0] = v541.f64[0];
        }
        v544 = 0.5 / sqrt(v543.f64[0]);
        v545 = vmulq_n_f64(_Q25, v544);
        v546 = vmulq_n_f64(v541, v544);
        *(_QWORD *)&v547.f64[0] = *(_OWORD *)&vaddq_f64(v545, v545);
        *(_QWORD *)&v571.f64[1] = v576;
        *(_QWORD *)&v573.f64[1] = v578;
        *(_QWORD *)&v575.f64[1] = v581;
        _Q17 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v567 + 72), v575);
        *(_QWORD *)&v570.f64[1] = v577;
        *(_QWORD *)&v574.f64[1] = v580;
        v549 = vsubq_f64(*(float64x2_t *)(v567 + 136), v570);
        v550 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v567 + 88), v574);
        *(_QWORD *)&v572.f64[1] = v579;
        v551 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v567 + 104), v572);
        _Q6 = (float64x2_t)vextq_s8(v550, v551, 8uLL);
        v553 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v551, 1);
        v547.f64[1] = v549.f64[1];
        v554 = (float64x2_t)vdupq_lane_s64(_Q17.i64[0], 0);
        v554.f64[0] = v553.f64[0];
        v553.f64[0] = *((float64_t *)v478 + 36);
        _Q5 = vmulq_f64((float64x2_t)vextq_s8(_Q17, v550, 8uLL), *((float64x2_t *)v478 + 16));
        *(_QWORD *)&v553.f64[0] = *(_OWORD *)&vmulq_f64(v549, v553);
        _Q4 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v567 + 120), v573), *((float64x2_t *)v478 + 17));
        _Q7 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v567 + 152), v571), *((float64x2_t *)v478 + 13));
        _D20 = vmulq_f64(vaddq_f64(v546, v546), *(float64x2_t *)(v478 + 176)).f64[1];
        __asm { FMLA            D19, D20, V17.D[1] }
        _Q17.i64[0] = *(_QWORD *)&vmulq_f64(v547, *(float64x2_t *)(v478 + 192)).f64[1];
        __asm { FMLA            D19, D17, V16.D[1] }
        _D16 = _Q7.f64[1];
        __asm { FMLA            D19, D16, V7.D[1] }
        _Q7.f64[0] = vmulq_f64(_Q6, *(float64x2_t *)(v478 + 224)).f64[1];
        __asm { FMLA            D19, D7, V6.D[1] }
        _Q6.f64[0] = vmulq_f64(v554, *(float64x2_t *)(v478 + 240)).f64[1];
        __asm { FMLA            D19, D6, V18.D[1] }
        _Q6.f64[0] = _Q5.f64[1];
        __asm { FMLA            D19, D6, V5.D[1] }
        _Q5.f64[0] = _Q4.f64[1];
        __asm { FMLA            D19, D5, V4.D[1] }
        v539 = v539 + vmlad_n_f64(_D19, v553.f64[0], v553.f64[0]);
      }
      v478 += 74;
      --v537;
    }
    while (v537);
  }
  v598 = v539 * 0.5;
  v491[6] = v598;
  *v492 = v598 + *v492;
  v599 = LODWORD(v33[1980].f64[1]);
  v600 = v491;
  if ((_DWORD)v599)
  {
    STACK[0x3D0] = (unint64_t)v491;
    v601 = (char *)&v33[113].f64[1];
    v602 = (char *)&v33[1952].f64[1] + 4;
    v603 = v33 + 118;
    v604 = (float64x2_t *)((char *)v33 + 1864);
    v538 = 0.0;
    do
    {
      if (*(_DWORD *)&v602[4 * HIDWORD(v479->f64[0])] != -1)
      {
        v605 = (float64x2_t *)v601;
        switch(LODWORD(v479->f64[0]))
        {
          case 3:
            break;
          case 4:
            v605 = (float64x2_t *)(v601 + 24);
            break;
          case 5:
            v605 = v604;
            break;
          case 6:
            v605 = v603;
            break;
          default:
            v608 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 600, (uint64_t)"false && \"Shall not reach to an undefined type.\"", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v605 = v604;
            if (v608)
              abort();
            return;
        }
        _Q0.f64[0] = v605[1].f64[0];
        _Q2.f64[0] = v479[1].f64[1];
        v606 = vsubq_f64(_Q0, _Q2);
        _Q2.f64[0] = v479[3].f64[0];
        _Q0 = vmulq_f64(v606, _Q2);
        _Q1 = vmulq_f64(vsubq_f64(*v605, *(float64x2_t *)((char *)v479 + 8)), v479[2]);
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = _Q1.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v538 = v538 + vmlad_n_f64(_Q2.f64[0], _Q0.f64[0], _Q0.f64[0]);
      }
      v479 = (float64x2_t *)((char *)v479 + 56);
      --v599;
    }
    while (v599);
    v600 = (double *)v629[3];
    v492 = (double *)v629[4];
    v33 = v628;
    v491 = (double *)STACK[0x3D0];
  }
  v491[9] = v538 * 0.5;
  *v492 = v538 + *v492;
  _Q1.f64[0] = v33[2209].f64[0];
  v600[7] = 0.0;
  v609 = LODWORD(v33[2210].f64[0]);
  if ((_DWORD)v609)
  {
    v610 = 0;
    v611 = v33 + 10;
    v612 = 0.0;
    v613.f64[0] = _Q1.f64[0];
    v613.f64[1] = _Q1.f64[0];
    v614 = 0.0;
    do
    {
      if (((*((_DWORD *)v33[2210].f64 + (v610 >> 5) + 1) >> v610) & 1) != 0)
      {
        _Q5.f64[0] = v611[1].f64[0];
        _Q5 = vmulq_f64(_Q1, _Q5);
        _Q6 = vmulq_f64(v613, *v611);
        _Q7 = vmulq_f64(_Q6, _Q6);
        _D16 = _Q6.f64[1];
        __asm { FMLA            D7, D16, V6.D[1] }
        v614 = v614 + vmlad_n_f64(_Q7.f64[0], _Q5.f64[0], _Q5.f64[0]) * 0.5;
        v600[7] = v614;
        v612 = v612 + v614;
      }
      ++v610;
      v611 = (float64x2_t *)((char *)v611 + 168);
    }
    while (v609 != v610);
  }
  else
  {
    v612 = 0.0;
  }
  _Q1.f64[0] = v33[2209].f64[1];
  v600[8] = 0.0;
  v617 = LODWORD(v33[2210].f64[1]);
  if (v617 >= 2)
  {
    v618 = (float64x2_t *)((char *)v33 + 376);
    v619 = (char *)&v33[2210].f64[1] + 4;
    v620 = 0.0;
    v621 = 1;
    v622.f64[0] = _Q1.f64[0];
    v622.f64[1] = _Q1.f64[0];
    do
    {
      if (((*(_DWORD *)&v619[4 * ((v621 - 1) >> 5)] >> (v621 - 1)) & 1) != 0
        && ((*(_DWORD *)&v619[4 * (v621 >> 5)] >> v621) & 1) != 0)
      {
        _Q5.f64[0] = v618[1].f64[0];
        _Q7.f64[0] = v618[-10].f64[1];
        _Q5 = vmulq_f64(_Q1, vsubq_f64(_Q5, _Q7));
        _Q6 = vmulq_f64(v622, vsubq_f64(*v618, *(float64x2_t *)((char *)v618 - 168)));
        _Q7 = vmulq_f64(_Q6, _Q6);
        _D16 = _Q6.f64[1];
        __asm { FMLA            D7, D16, V6.D[1] }
        v620 = v620 + vmlad_n_f64(_Q7.f64[0], _Q5.f64[0], _Q5.f64[0]) * 0.5;
        v600[8] = v620;
        v612 = v612 + v620;
      }
      ++v621;
      v618 = (float64x2_t *)((char *)v618 + 168);
    }
    while (v617 != v621);
  }
  *v492 = v612 + *v492;
}

void *sub_20FA28D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  unint64_t *v43;
  int64x2_t v44;
  unsigned int **v45;
  float64x2_t *v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  __int128 *v50;
  uint64_t v51;
  unint64_t *v52;
  __int128 v53;
  __int128 v54;
  unint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int *v58;
  uint64_t v59;
  unint64_t *v60;
  __int128 v61;
  unint64_t *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  uint64_t v66;
  unint64_t *v67;
  __int128 v68;
  __int128 v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t *v99;
  int v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  float64x2_t v118;
  unsigned int *v119;
  __int128 v120;
  uint64_t v121;
  char v122;
  char *v123;
  uint64_t v124;
  double v125;
  char *v146;
  float64x2_t v147;
  unsigned int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  void *result;
  float64x2_t v169;
  uint64_t v170;
  double *f64;
  double v172;
  uint64_t v173;
  double v174;
  double v175;
  unsigned int *v176;
  float64x2_t *v177;
  float64x2_t *v178;
  unsigned int **v179;
  _OWORD var10[2];

  MEMORY[0x24BDAC7A8](a1);
  STACK[0x2D4B8] = *MEMORY[0x24BDAC8D0];
  LODWORD(STACK[0x2A0]) = 0;
  LODWORD(STACK[0x5A8]) = 0;
  LODWORD(STACK[0xE070]) = 0;
  LOWORD(STACK[0xE080]) = 0;
  v43 = &STACK[0xE080];
  v44 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)&STACK[0xE088] = v44;
  LOWORD(STACK[0xEFE0]) = 0;
  *(int64x2_t *)&STACK[0xEFE8] = v44;
  LOWORD(STACK[0xFF40]) = 0;
  *(int64x2_t *)&STACK[0xFF48] = v44;
  LOWORD(STACK[0x10EA0]) = 0;
  *(int64x2_t *)&STACK[0x10EA8] = v44;
  LOWORD(STACK[0x11E00]) = 0;
  *(int64x2_t *)&STACK[0x11E08] = v44;
  LOWORD(STACK[0x12D60]) = 0;
  *(int64x2_t *)&STACK[0x12D68] = v44;
  LOWORD(STACK[0x13CC0]) = 0;
  *(int64x2_t *)&STACK[0x13CC8] = v44;
  LOWORD(STACK[0x14C20]) = 0;
  *(int64x2_t *)&STACK[0x14C28] = v44;
  LOWORD(STACK[0x15B80]) = 0;
  *(int64x2_t *)&STACK[0x15B88] = v44;
  v47 = *v45;
  v46 = (float64x2_t *)v45[1];
  v179 = v45;
  LODWORD(STACK[0x16C20]) = 0;
  v48 = v47[113624];
  if ((_DWORD)v48)
  {
    v49 = 0;
    v50 = (__int128 *)(v47 + 113552);
    v51 = 32 * v48;
    do
    {
      v52 = &STACK[0x16B00] + 4 * v49;
      v53 = *v50;
      v54 = v50[1];
      v50 += 2;
      *(_OWORD *)v52 = v53;
      *((_OWORD *)v52 + 1) = v54;
      v49 = LODWORD(STACK[0x16C20]) + 1;
      LODWORD(STACK[0x16C20]) = v49;
      v51 -= 32;
    }
    while (v51);
    v55 = &STACK[0x16C28];
    LODWORD(STACK[0x16F28]) = 0;
    v56 = v47[113818];
    if ((_DWORD)v56)
      goto LABEL_5;
LABEL_9:
    v57 = 0;
    goto LABEL_10;
  }
  v49 = 0;
  v55 = &STACK[0x16C28];
  LODWORD(STACK[0x16F28]) = 0;
  v56 = v47[113818];
  if (!(_DWORD)v56)
    goto LABEL_9;
LABEL_5:
  v57 = 0;
  v58 = v47 + 113626;
  v59 = 24 * v56;
  do
  {
    v60 = &STACK[0x16C28] + 3 * v57;
    v61 = *(_OWORD *)v58;
    v60[2] = *((_QWORD *)v58 + 2);
    *(_OWORD *)v60 = v61;
    v58 += 6;
    v57 = LODWORD(STACK[0x16F28]) + 1;
    LODWORD(STACK[0x16F28]) = v57;
    v59 -= 24;
  }
  while (v59);
LABEL_10:
  v177 = v46;
  v178 = v46 + 1955;
  v62 = &STACK[0x16F30];
  LODWORD(STACK[0x249F0]) = 0;
  v63 = v47[127820];
  v64 = 0;
  if (v63)
  {
    v65 = v47 + 113820;
    v66 = (uint64_t)&v47[14 * v63 + 113820];
    v67 = &STACK[0x16F50];
    do
    {
      *(v67 - 4) = *(_QWORD *)v65;
      v68 = *(_OWORD *)(v65 + 2);
      *(v67 - 1) = *((_QWORD *)v65 + 3);
      *(_OWORD *)(v67 - 3) = v68;
      v69 = *((_OWORD *)v65 + 2);
      v67[2] = *((_QWORD *)v65 + 6);
      *(_OWORD *)v67 = v69;
      v67 += 7;
      ++v64;
      v65 += 14;
    }
    while (v65 != (unsigned int *)v66);
    LODWORD(STACK[0x249F0]) = v64;
  }
  v176 = v47;
  v70 = v47 + 127824;
  v71 = 9;
  v72 = 57088;
  do
  {
    v73 = (char *)&STACK[0x16B00] + v72;
    v74 = *(_OWORD *)v70;
    *((_QWORD *)v73 + 2) = *((_QWORD *)v70 + 2);
    *(_OWORD *)v73 = v74;
    v75 = *(_OWORD *)(v70 + 14);
    v76 = *(_OWORD *)(v70 + 18);
    v77 = *((_QWORD *)v70 + 11);
    *(_OWORD *)(v73 + 40) = *(_OWORD *)(v70 + 10);
    *((_QWORD *)v73 + 11) = v77;
    *(_OWORD *)(v73 + 72) = v76;
    *(_OWORD *)(v73 + 56) = v75;
    *(_OWORD *)(v73 + 24) = *(_OWORD *)(v70 + 6);
    v79 = *((_OWORD *)v70 + 6);
    v78 = *((_OWORD *)v70 + 7);
    v80 = *((_OWORD *)v70 + 9);
    *((_OWORD *)v73 + 8) = *((_OWORD *)v70 + 8);
    *((_OWORD *)v73 + 9) = v80;
    *((_OWORD *)v73 + 6) = v79;
    *((_OWORD *)v73 + 7) = v78;
    v82 = *((_OWORD *)v70 + 11);
    v81 = *((_OWORD *)v70 + 12);
    v83 = *((_OWORD *)v70 + 10);
    *((_QWORD *)v73 + 26) = *((_QWORD *)v70 + 26);
    *((_OWORD *)v73 + 11) = v82;
    *((_OWORD *)v73 + 12) = v81;
    *((_OWORD *)v73 + 10) = v83;
    v84 = (_OWORD *)((char *)&STACK[0x16B00] + v72 + 216);
    v85 = *(_OWORD *)(v70 + 54);
    v86 = *(_OWORD *)(v70 + 58);
    v87 = *(_OWORD *)(v70 + 62);
    v84[3] = *(_OWORD *)(v70 + 66);
    *(_OWORD *)(v73 + 248) = v87;
    *(_OWORD *)(v73 + 232) = v86;
    *(_OWORD *)(v73 + 216) = v85;
    v88 = *(_OWORD *)(v70 + 70);
    v89 = *(_OWORD *)(v70 + 74);
    v90 = *(_OWORD *)(v70 + 78);
    *((_QWORD *)v73 + 41) = *((_QWORD *)v70 + 41);
    v84[5] = v89;
    v84[6] = v90;
    v84[4] = v88;
    memcpy((char *)&STACK[0x16B00] + v72 + 336, v70 + 84, 0x168uLL);
    memcpy((char *)&STACK[0x16B00] + v72 + 696, v70 + 174, 0x168uLL);
    memcpy((char *)&STACK[0x16B00] + v72 + 1056, v70 + 264, 0x438uLL);
    memcpy((char *)&STACK[0x16B00] + v72 + 2136, v70 + 534, 0x168uLL);
    memcpy((char *)&STACK[0x16B00] + v72 + 2496, v70 + 624, 0x168uLL);
    memcpy((char *)&STACK[0x16B00] + v72 + 2856, v70 + 714, 0x438uLL);
    v72 += 3936;
    v70 += 984;
    --v71;
  }
  while (v71);
  STACK[0x2D460] = *((_QWORD *)v176 + 68340);
  LOBYTE(STACK[0x2D468]) = *((_BYTE *)v176 + 546728);
  LODWORD(STACK[0x2A0]) = 0;
  v91 = 0;
  if (!v49)
  {
    LODWORD(STACK[0x16C20]) = 0;
    LODWORD(STACK[0x5A8]) = 0;
    if (!v57)
      goto LABEL_24;
    goto LABEL_22;
  }
  v92 = 32 * v49;
  v93 = &STACK[0x16B00];
  do
  {
    v94 = &a43 + 32 * v91;
    v95 = *(_OWORD *)v93;
    v96 = *((_OWORD *)v93 + 1);
    v93 += 4;
    *(_OWORD *)v94 = v95;
    *((_OWORD *)v94 + 1) = v96;
    v91 = LODWORD(STACK[0x2A0]) + 1;
    LODWORD(STACK[0x2A0]) = v91;
    v92 -= 32;
  }
  while (v92);
  LODWORD(STACK[0x16C20]) = 0;
  LODWORD(STACK[0x5A8]) = 0;
  if (v57)
  {
LABEL_22:
    v97 = 0;
    v98 = 24 * v57;
    do
    {
      v99 = &STACK[0x2A8] + 3 * v97;
      *(_OWORD *)v99 = *(_OWORD *)v55;
      v99[2] = v55[2];
      v55 += 3;
      v97 = LODWORD(STACK[0x5A8]) + 1;
      LODWORD(STACK[0x5A8]) = v97;
      v98 -= 24;
    }
    while (v98);
  }
LABEL_24:
  LODWORD(STACK[0x16F28]) = 0;
  LODWORD(STACK[0xE070]) = 0;
  if (v64)
  {
    v100 = 0;
    v101 = &STACK[0x5D0];
    do
    {
      *(v101 - 4) = *v62;
      *(_OWORD *)(v101 - 3) = *(_OWORD *)(v62 + 1);
      *(v101 - 1) = v62[3];
      *(_OWORD *)v101 = *((_OWORD *)v62 + 2);
      v101[2] = v62[6];
      ++v100;
      v101 += 7;
      v62 += 7;
    }
    while (v62 != &STACK[0x16F30] + 7 * v64);
    LODWORD(STACK[0xE070]) = v100;
  }
  v102 = 9;
  v103 = 57088;
  do
  {
    v104 = &a43 + v103;
    *(_OWORD *)v104 = *(_OWORD *)((char *)&STACK[0x16B00] + v103);
    *((_QWORD *)v104 + 2) = *(unint64_t *)((char *)&STACK[0x16B00] + v103 + 16);
    *(_OWORD *)(v104 + 40) = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 40);
    *(_OWORD *)(v104 + 56) = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 56);
    *(_OWORD *)(v104 + 72) = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 72);
    *((_QWORD *)v104 + 11) = *(unint64_t *)((char *)&STACK[0x16B00] + v103 + 88);
    *(_OWORD *)(v104 + 24) = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 24);
    v105 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 96);
    v106 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 112);
    v107 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 144);
    *((_OWORD *)v104 + 8) = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 128);
    *((_OWORD *)v104 + 9) = v107;
    *((_OWORD *)v104 + 6) = v105;
    *((_OWORD *)v104 + 7) = v106;
    v108 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 160);
    v109 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 176);
    v110 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 192);
    *((_QWORD *)v104 + 26) = *(unint64_t *)((char *)&STACK[0x16B00] + v103 + 208);
    *((_OWORD *)v104 + 11) = v109;
    *((_OWORD *)v104 + 12) = v110;
    *((_OWORD *)v104 + 10) = v108;
    v111 = &a43 + v103 + 216;
    v112 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 216);
    v113 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 232);
    *(_OWORD *)(v104 + 248) = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 248);
    *(_OWORD *)(v104 + 232) = v113;
    v114 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 264);
    v115 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 280);
    v116 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 296);
    v117 = *(_OWORD *)((char *)&STACK[0x16B00] + v103 + 312);
    *((_QWORD *)v104 + 41) = *(unint64_t *)((char *)&STACK[0x16B00] + v103 + 328);
    *((_OWORD *)v111 + 5) = v116;
    *((_OWORD *)v111 + 6) = v117;
    *((_OWORD *)v111 + 3) = v114;
    *((_OWORD *)v111 + 4) = v115;
    *(_OWORD *)(v104 + 216) = v112;
    memcpy(&a43 + v103 + 336, (char *)&STACK[0x16B00] + v103 + 336, 0x168uLL);
    memcpy(&a43 + v103 + 696, (char *)&STACK[0x16B00] + v103 + 696, 0x168uLL);
    memcpy(&a43 + v103 + 1056, (char *)&STACK[0x16B00] + v103 + 1056, 0x438uLL);
    memcpy(&a43 + v103 + 2136, (char *)&STACK[0x16B00] + v103 + 2136, 0x168uLL);
    memcpy(&a43 + v103 + 2496, (char *)&STACK[0x16B00] + v103 + 2496, 0x168uLL);
    memcpy(&a43 + v103 + 2856, (char *)&STACK[0x16B00] + v103 + 2856, 0x438uLL);
    v103 += 3936;
    --v102;
  }
  while (v102);
  STACK[0x16AE0] = STACK[0x2D460];
  LOBYTE(STACK[0x16AE8]) = STACK[0x2D468];
  v118 = vaddq_f64(v177[2741], (float64x2_t)0);
  v177[2740] = vaddq_f64(v177[2740], (float64x2_t)0);
  v177[2741] = v118;
  v119 = v179[2];
  v120 = *(_OWORD *)(v119 + 426);
  var10[0] = *(_OWORD *)(v119 + 422);
  var10[1] = v120;
  LODWORD(STACK[0x180E0]) = 0;
  if (v91)
  {
    v121 = 0;
    v122 = 0;
    v123 = &a43 + 32 * v91;
    v124 = 92512;
    v125 = 0.0;
    do
    {
      if (LOBYTE(v178->f64[0]))
        v43[1] = 0x7FF8000000000000;
      v146 = &a43 + v121;
      if ((sub_20FA196E4((uint64_t)v179[3], *(unsigned int *)(&a43 + v121), *(unsigned int *)(&a43 + v121 + 4), *(unsigned int *)(&a43 + v121 + 8), *(&a43 + v121 + 12), (uint64_t)&STACK[0x2A8], (uint64_t)v43, (uint64_t)var10, (uint64_t)&STACK[0x16B00]) & 1) != 0)
      {
        _X8 = v43 + 996;
        *(&a43 + v124) = 1;
        __asm { PRFM            #0, [X8] }
        _Q7 = *((_OWORD *)v43 + 6);
        _D17 = v43[13];
        __asm { FMLA            D16, D17, V7.D[1] }
        *(_QWORD *)&_Q7 = v43[15];
        __asm { FMLA            D16, D7, V6.D[1] }
        _D6 = v43[17];
        __asm { FMLA            D16, D6, V5.D[1] }
        _D5 = v43[19];
        __asm { FMLA            D16, D5, V4.D[1] }
        _D4 = v43[21];
        __asm { FMLA            D16, D4, V3.D[1] }
        _D3 = v43[23];
        __asm { FMLA            D16, D3, V2.D[1] }
        _D2 = v43[25];
        __asm { FMLA            D16, D2, V1.D[1] }
        v125 = v125 + _D16 + *((double *)v43 + 26) * *((double *)v43 + 26);
      }
      else
      {
        *(&a43 + v124) = 0;
        v122 = 1;
      }
      v43 += 492;
      ++v124;
      v121 += 32;
    }
    while (v146 + 32 != v123);
  }
  else
  {
    v122 = 0;
    v125 = 0.0;
  }
  *(double *)v179[4] = v125 * 0.5;
  *(double *)v179[5] = v125 * 0.5 + *(double *)v179[5];
  v147 = vaddq_f64(v177[2747], (float64x2_t)0);
  v177[2746] = vaddq_f64(v177[2746], (float64x2_t)0);
  v177[2747] = v147;
  LOBYTE(v178->f64[0]) = v122 & 1;
  v148 = *v179;
  v149 = (uint64_t)(*v179 + 127824);
  v150 = 9;
  v151 = 57088;
  do
  {
    v152 = *(_OWORD *)(&a43 + v151);
    *(_QWORD *)(v149 + 16) = *(_QWORD *)(&a43 + v151 + 16);
    *(_OWORD *)v149 = v152;
    v153 = *(_OWORD *)(&a43 + v151 + 56);
    v154 = *(_OWORD *)(&a43 + v151 + 72);
    v155 = *(_QWORD *)(&a43 + v151 + 88);
    *(_OWORD *)(v149 + 40) = *(_OWORD *)(&a43 + v151 + 40);
    *(_QWORD *)(v149 + 88) = v155;
    *(_OWORD *)(v149 + 72) = v154;
    *(_OWORD *)(v149 + 56) = v153;
    *(_OWORD *)(v149 + 24) = *(_OWORD *)(&a43 + v151 + 24);
    v157 = *(_OWORD *)(&a43 + v151 + 176);
    v156 = *(_OWORD *)(&a43 + v151 + 192);
    v158 = *(_OWORD *)(&a43 + v151 + 160);
    *(_QWORD *)(v149 + 208) = *(_QWORD *)(&a43 + v151 + 208);
    *(_OWORD *)(v149 + 176) = v157;
    *(_OWORD *)(v149 + 192) = v156;
    *(_OWORD *)(v149 + 160) = v158;
    v159 = *(_OWORD *)(&a43 + v151 + 96);
    v160 = *(_OWORD *)(&a43 + v151 + 112);
    v161 = *(_OWORD *)(&a43 + v151 + 144);
    *(_OWORD *)(v149 + 128) = *(_OWORD *)(&a43 + v151 + 128);
    *(_OWORD *)(v149 + 144) = v161;
    *(_OWORD *)(v149 + 96) = v159;
    *(_OWORD *)(v149 + 112) = v160;
    v162 = *(_OWORD *)(&a43 + v151 + 216);
    v163 = *(_OWORD *)(&a43 + v151 + 232);
    v164 = *(_OWORD *)(&a43 + v151 + 248);
    *(_OWORD *)(v149 + 264) = *(_OWORD *)(&a43 + v151 + 264);
    *(_OWORD *)(v149 + 248) = v164;
    *(_OWORD *)(v149 + 232) = v163;
    *(_OWORD *)(v149 + 216) = v162;
    v165 = *(_OWORD *)(&a43 + v151 + 280);
    v166 = *(_OWORD *)(&a43 + v151 + 296);
    v167 = *(_OWORD *)(&a43 + v151 + 312);
    *(_QWORD *)(v149 + 328) = *(_QWORD *)(&a43 + v151 + 328);
    *(_OWORD *)(v149 + 296) = v166;
    *(_OWORD *)(v149 + 312) = v167;
    *(_OWORD *)(v149 + 280) = v165;
    memcpy((void *)(v149 + 336), &a43 + v151 + 336, 0x168uLL);
    memcpy((void *)(v149 + 696), &a43 + v151 + 696, 0x168uLL);
    memcpy((void *)(v149 + 1056), &a43 + v151 + 1056, 0x438uLL);
    memcpy((void *)(v149 + 2136), &a43 + v151 + 2136, 0x168uLL);
    memcpy((void *)(v149 + 2496), &a43 + v151 + 2496, 0x168uLL);
    result = memcpy((void *)(v149 + 2856), &a43 + v151 + 2856, 0x438uLL);
    v149 += 3936;
    v151 += 3936;
    --v150;
  }
  while (v150);
  *((_QWORD *)v148 + 68340) = STACK[0x16AE0];
  *((_BYTE *)v148 + 546728) = STACK[0x16AE8];
  v169 = vaddq_f64(v177[2741], (float64x2_t)0);
  v177[2740] = vaddq_f64(v177[2740], (float64x2_t)0);
  v177[2741] = v169;
  v170 = LODWORD(v178[27].f64[1]);
  if ((_DWORD)v170)
  {
    f64 = v177[1982].f64;
    v172 = 0.0;
    do
    {
      v173 = *((unsigned int *)f64 - 4);
      if (*((_DWORD *)v177[1953].f64 + v173) != -1)
      {
        v174 = *f64 * (*(double *)&v179[2][2 * v173 + 498] - *(f64 - 1));
        v172 = v172 + v174 * v174;
      }
      f64 += 3;
      --v170;
    }
    while (v170);
  }
  else
  {
    v172 = 0.0;
  }
  v175 = v172 * 0.5;
  *((double *)v179[4] + 4) = v175;
  *(double *)v179[5] = v175 + *(double *)v179[5];
  return result;
}

void sub_20FA29820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, float64x2_t *a16)
{
  float64x2_t v16;

  v16 = vaddq_f64(a16[2747], (float64x2_t)0);
  a16[2746] = vaddq_f64(a16[2746], (float64x2_t)0);
  a16[2747] = v16;
  _Unwind_Resume(a1);
}

float64x2_t sub_20FA29844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  float64x2_t *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t result;
  uint64_t v109;
  uint64_t v110;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  va_list va;

  va_start(va, a13);
  MEMORY[0x24BDAC7A8](a1);
  v18 = v13;
  STACK[0xFA58] = *MEMORY[0x24BDAC8D0];
  v20 = *(float64x2_t **)v13;
  v19 = *(_QWORD *)(v13 + 8);
  LODWORD(STACK[0xFA30]) = 0;
  v21 = *(_DWORD *)(v19 + 578672);
  if (v21)
  {
    v109 = v13;
    v22 = 0;
    v23 = 0;
    v124 = v19 + 546752;
    v123 = v19 + 553136;
    v122 = 3192 * v21;
    v121 = v19 + 549936;
    v120 = v19 + 549912;
    v119 = v19 + 548112;
    v118 = v19 + 548088;
    v117 = v19 + 548064;
    v116 = v19 + 547416;
    v115 = v19 + 547344;
    v114 = v19 + 547272;
    v113 = v19 + 547200;
    vars8 = v19 + 547128;
    vars0 = v19 + 547056;
    v110 = v19 + 546984;
    v24 = v19 + 546912;
    v25 = v19 + 546840;
    v26 = v19 + 546808;
    v27 = v19 + 546784;
    v28 = v19 + 546760;
    do
    {
      _X19 = v123 + v22;
      __asm { PRFM            #0, [X19] }
      v35 = &STACK[0x7D80] + 399 * v23;
      *v35 = *(_QWORD *)(v124 + v22);
      *(_OWORD *)(v35 + 1) = *(_OWORD *)(v28 + v22);
      v35[3] = *(_QWORD *)(v28 + v22 + 16);
      *((_OWORD *)v35 + 2) = *(_OWORD *)(v27 + v22);
      v35[6] = *(_QWORD *)(v27 + v22 + 16);
      v36 = *(_OWORD *)(v26 + v22 + 16);
      *(_OWORD *)(v35 + 7) = *(_OWORD *)(v26 + v22);
      *(_OWORD *)(v35 + 9) = v36;
      v37 = *(_OWORD *)(v25 + v22 + 16);
      *(_OWORD *)(v35 + 11) = *(_OWORD *)(v25 + v22);
      v38 = *(_OWORD *)(v25 + v22 + 32);
      v39 = *(_OWORD *)(v25 + v22 + 48);
      v35[19] = *(_QWORD *)(v25 + v22 + 64);
      *(_OWORD *)(v35 + 17) = v39;
      *(_OWORD *)(v35 + 15) = v38;
      *(_OWORD *)(v35 + 13) = v37;
      v40 = *(_OWORD *)(v24 + v22);
      v41 = *(_OWORD *)(v24 + v22 + 16);
      v42 = *(_OWORD *)(v24 + v22 + 32);
      v43 = *(_OWORD *)(v24 + v22 + 48);
      v35[28] = *(_QWORD *)(v24 + v22 + 64);
      *((_OWORD *)v35 + 12) = v42;
      *((_OWORD *)v35 + 13) = v43;
      *((_OWORD *)v35 + 10) = v40;
      *((_OWORD *)v35 + 11) = v41;
      v44 = *(_OWORD *)(v110 + v22 + 16);
      *(_OWORD *)(v35 + 29) = *(_OWORD *)(v110 + v22);
      v45 = *(_OWORD *)(v110 + v22 + 32);
      v46 = *(_OWORD *)(v110 + v22 + 48);
      v35[37] = *(_QWORD *)(v110 + v22 + 64);
      *(_OWORD *)(v35 + 33) = v45;
      *(_OWORD *)(v35 + 35) = v46;
      *(_OWORD *)(v35 + 31) = v44;
      v47 = *(_OWORD *)(vars0 + v22);
      v48 = *(_OWORD *)(vars0 + v22 + 16);
      v49 = *(_OWORD *)(vars0 + v22 + 32);
      v50 = *(_OWORD *)(vars0 + v22 + 48);
      v35[46] = *(_QWORD *)(vars0 + v22 + 64);
      *((_OWORD *)v35 + 21) = v49;
      *((_OWORD *)v35 + 22) = v50;
      *((_OWORD *)v35 + 19) = v47;
      *((_OWORD *)v35 + 20) = v48;
      v51 = *(_OWORD *)(vars8 + v22);
      v52 = *(_OWORD *)(vars8 + v22 + 16);
      v53 = *(_OWORD *)(vars8 + v22 + 32);
      v54 = *(_OWORD *)(vars8 + v22 + 48);
      v35[55] = *(_QWORD *)(vars8 + v22 + 64);
      *(_OWORD *)(v35 + 51) = v53;
      *(_OWORD *)(v35 + 53) = v54;
      *(_OWORD *)(v35 + 47) = v51;
      *(_OWORD *)(v35 + 49) = v52;
      v55 = *(_OWORD *)(v113 + v22);
      v56 = *(_OWORD *)(v113 + v22 + 16);
      v57 = *(_OWORD *)(v113 + v22 + 32);
      v58 = *(_OWORD *)(v113 + v22 + 48);
      v35[64] = *(_QWORD *)(v113 + v22 + 64);
      *((_OWORD *)v35 + 30) = v57;
      *((_OWORD *)v35 + 31) = v58;
      *((_OWORD *)v35 + 28) = v55;
      *((_OWORD *)v35 + 29) = v56;
      v59 = *(_OWORD *)(v114 + v22);
      v60 = *(_OWORD *)(v114 + v22 + 16);
      v61 = *(_OWORD *)(v114 + v22 + 32);
      v62 = *(_OWORD *)(v114 + v22 + 48);
      v35[73] = *(_QWORD *)(v114 + v22 + 64);
      *(_OWORD *)(v35 + 69) = v61;
      *(_OWORD *)(v35 + 71) = v62;
      *(_OWORD *)(v35 + 65) = v59;
      *(_OWORD *)(v35 + 67) = v60;
      v63 = *(_OWORD *)(v115 + v22);
      v64 = *(_OWORD *)(v115 + v22 + 16);
      v65 = *(_OWORD *)(v115 + v22 + 32);
      v66 = *(_OWORD *)(v115 + v22 + 48);
      v35[82] = *(_QWORD *)(v115 + v22 + 64);
      *((_OWORD *)v35 + 39) = v65;
      *((_OWORD *)v35 + 40) = v66;
      *((_OWORD *)v35 + 37) = v63;
      *((_OWORD *)v35 + 38) = v64;
      memcpy(v35 + 83, (const void *)(v116 + v22), 0x288uLL);
      *((_OWORD *)v35 + 82) = *(_OWORD *)(v117 + v22);
      v35[166] = *(_QWORD *)(v117 + v22 + 16);
      *(_OWORD *)(v35 + 167) = *(_OWORD *)(v118 + v22);
      v35[169] = *(_QWORD *)(v118 + v22 + 16);
      memcpy(v35 + 170, (const void *)(v119 + v22), 0x708uLL);
      *(_OWORD *)(v35 + 395) = *(_OWORD *)(v120 + v22);
      v35[397] = *(_QWORD *)(v120 + v22 + 16);
      __asm { PRFM            #0, [X19,#0xC70] }
      v35[398] = *(_QWORD *)(v121 + v22);
      v23 = LODWORD(STACK[0xFA30]) + 1;
      LODWORD(STACK[0xFA30]) = v23;
      v22 += 3192;
    }
    while (v122 != v22);
    LODWORD(STACK[0x7D70]) = 0;
    v18 = v109;
    if (v23)
    {
      v68 = 0;
      v69 = 0;
      v70 = 3192 * v23;
      do
      {
        _X24 = (char *)&STACK[0x7D80] + v68;
        __asm { PRFM            #0, [X24,#0x18F0] }
        v73 = &(*(unsigned int (*)[798])va)[798 * v69];
        *(_QWORD *)v73 = *(unint64_t *)((char *)&STACK[0x7D80] + v68);
        *(_OWORD *)(v73 + 2) = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 8);
        *((_QWORD *)v73 + 3) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 24);
        *((_OWORD *)v73 + 2) = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 32);
        *((_QWORD *)v73 + 6) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 48);
        *(_OWORD *)(v73 + 14) = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 56);
        *(_OWORD *)(v73 + 18) = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 72);
        *(_OWORD *)(v73 + 22) = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 88);
        v74 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 104);
        v75 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 120);
        v76 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 136);
        *((_QWORD *)v73 + 19) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 152);
        *(_OWORD *)(v73 + 34) = v76;
        *(_OWORD *)(v73 + 30) = v75;
        *(_OWORD *)(v73 + 26) = v74;
        v77 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 160);
        v78 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 176);
        v79 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 192);
        v80 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 208);
        *((_QWORD *)v73 + 28) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 224);
        *((_OWORD *)v73 + 12) = v79;
        *((_OWORD *)v73 + 13) = v80;
        *((_OWORD *)v73 + 10) = v77;
        *((_OWORD *)v73 + 11) = v78;
        *(_OWORD *)(v73 + 58) = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 232);
        v81 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 248);
        v82 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 264);
        v83 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 280);
        *((_QWORD *)v73 + 37) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 296);
        *(_OWORD *)(v73 + 66) = v82;
        *(_OWORD *)(v73 + 70) = v83;
        *(_OWORD *)(v73 + 62) = v81;
        v84 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 304);
        v85 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 320);
        v86 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 336);
        v87 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 352);
        *((_QWORD *)v73 + 46) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 368);
        *((_OWORD *)v73 + 21) = v86;
        *((_OWORD *)v73 + 22) = v87;
        *((_OWORD *)v73 + 19) = v84;
        *((_OWORD *)v73 + 20) = v85;
        v88 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 376);
        v89 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 392);
        v90 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 408);
        v91 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 424);
        *((_QWORD *)v73 + 55) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 440);
        *(_OWORD *)(v73 + 102) = v90;
        *(_OWORD *)(v73 + 106) = v91;
        *(_OWORD *)(v73 + 94) = v88;
        *(_OWORD *)(v73 + 98) = v89;
        v92 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 448);
        v93 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 464);
        v94 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 480);
        v95 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 496);
        *((_QWORD *)v73 + 64) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 512);
        *((_OWORD *)v73 + 30) = v94;
        *((_OWORD *)v73 + 31) = v95;
        *((_OWORD *)v73 + 28) = v92;
        *((_OWORD *)v73 + 29) = v93;
        v96 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 520);
        v97 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 536);
        v98 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 552);
        v99 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 568);
        *((_QWORD *)v73 + 73) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 584);
        *(_OWORD *)(v73 + 138) = v98;
        *(_OWORD *)(v73 + 142) = v99;
        *(_OWORD *)(v73 + 130) = v96;
        *(_OWORD *)(v73 + 134) = v97;
        v100 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 592);
        v101 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 608);
        v102 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 624);
        v103 = *(_OWORD *)((char *)&STACK[0x7D80] + v68 + 640);
        *((_QWORD *)v73 + 82) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 656);
        *((_OWORD *)v73 + 39) = v102;
        *((_OWORD *)v73 + 40) = v103;
        *((_OWORD *)v73 + 37) = v100;
        *((_OWORD *)v73 + 38) = v101;
        memcpy(v73 + 166, (char *)&STACK[0x7D80] + v68 + 664, 0x2B8uLL);
        memcpy(v73 + 340, (char *)&STACK[0x7D80] + v68 + 1360, 0x720uLL);
        __asm { PRFM            #0, [X24,#0x2560] }
        *((_QWORD *)v73 + 398) = *(unint64_t *)((char *)&STACK[0x7D80] + v68 + 3184);
        v69 = LODWORD(STACK[0x7D70]) + 1;
        LODWORD(STACK[0x7D70]) = v69;
        v68 += 3192;
      }
      while (v70 != v68);
    }
  }
  else
  {
    LODWORD(STACK[0x7D70]) = 0;
  }
  v105 = vaddq_f64(v20[2741], (float64x2_t)0);
  v106 = vaddq_f64(v20[2740], (float64x2_t)0);
  v20[2740] = v106;
  v20[2741] = v105;
  **(double **)(v18 + 16) = sub_20FA29F20((uint64_t)v20, (unsigned int *)va, *(_QWORD *)(v18 + 24), v106.f64[0], v105.f64[0], 0.0, v14, v15, v16, v17)+ **(double **)(v18 + 16);
  v107 = vaddq_f64(v20[2749], (float64x2_t)0);
  result = vaddq_f64(v20[2748], (float64x2_t)0);
  v20[2748] = result;
  v20[2749] = v107;
  return result;
}

void sub_20FA29E30(_Unwind_Exception *a1)
{
  float64x2_t *v1;
  float64x2_t v2;

  v2 = vaddq_f64(v1[2749], (float64x2_t)0);
  v1[2748] = vaddq_f64(v1[2748], (float64x2_t)0);
  v1[2749] = v2;
  _Unwind_Resume(a1);
}

BOOL sub_20FA29E50(float64x2_t *a1, float64x2_t *a2, double *a3, double *a4)
{
  double v4;
  float64x2_t v12;

  v4 = a2[1].f64[0];
  if (v4 >= 0.00000001)
  {
    _Q5 = vmulq_n_f64(*a2, 1.0 / v4);
    _D3 = vmuld_lane_f64(1.0 / v4, *a2, 1);
    __asm { FMLA            D4, D3, V5.D[1] }
    v12 = vmulq_n_f64(_Q5, *a3 * _D4 + 1.0 + _D4 * (a3[1] * _D4) + _D4 * (_D4 * (a3[2] * _D4)));
    *a1 = v12;
    a1->f64[0] = (_D4 + (_Q5.f64[0] + _Q5.f64[0]) * _Q5.f64[0]) * a4[1]
               + vmuld_lane_f64((*a4 + *a4) * _Q5.f64[0], _Q5, 1)
               + v12.f64[0];
    a1->f64[1] = v12.f64[1]
               + (_D4 + vmuld_lane_f64(_Q5.f64[1] + _Q5.f64[1], _Q5, 1)) * *a4
               + vmuld_lane_f64((a4[1] + a4[1]) * _Q5.f64[0], _Q5, 1);
  }
  return v4 >= 0.00000001;
}

double sub_20FA29F20(uint64_t a1, unsigned int *_X1, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v20;
  uint64_t v21;
  float64x2_t v22;
  int64x2_t v23;
  double v24;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  float64x2_t v29;
  uint64_t v33;
  int64x2_t v34;
  double v35;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  __n128 v42;
  double v58;
  double result;
  float64x2_t *v60;
  int v61;
  float64x2_t *v62;
  int v63;
  float64x2_t *v64;
  int v65;
  float64x2_t *v66;
  int v67;
  float64x2_t *v68;
  int v69;
  float64x2_t *v70;
  int v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  double v79;
  float64x2_t v80[7];
  uint64_t v81;
  uint64_t v82;
  float64x2_t v83[7];
  uint64_t v84;
  uint64_t v85;

  v11 = _X1[7980];
  if (v11)
  {
    v12 = a1 + 64;
    v13 = 3192 * v11;
    do
    {
      v14 = _X1 + 798;
      __asm { PRFM            #0, [X1,#0xC78] }
      v20 = _X1[1];
      v21 = v12 + 168 * *_X1;
      v22.f64[0] = *(float64_t *)(v21 + 16);
      v23 = *(int64x2_t *)(v21 + 24);
      v24 = *(double *)(v21 + 64);
      _Q4 = *(int64x2_t *)(v21 + 48);
      v26 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v21, v23);
      v27 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v21, v23);
      v22.f64[1] = *(float64_t *)(v21 + 40);
      v28 = vextq_s8((int8x16_t)v27, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      a10.f64[0] = *(float64_t *)(v21 + 160);
      v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, *(double *)(v21 + 144)), v27, *(float64x2_t *)(v21 + 144), 1), v22, a10.f64[0]);
      _D7 = *(_QWORD *)(v21 + 152);
      __asm { FMLA            D17, D7, V4.D[1] }
      a10.f64[0] = _D17 + v24 * a10.f64[0];
      _Q7 = vnegq_f64(v29);
      v29.f64[0] = *(float64_t *)(v21 + 48);
      *(_QWORD *)&v27.f64[1] = v28.i64[0];
      v83[0] = v26;
      v83[1] = (float64x2_t)*(unint64_t *)&v29.f64[0];
      v83[4] = v22;
      v83[5] = (float64x2_t)*(unint64_t *)&v24;
      v83[2] = v27;
      v83[3] = (float64x2_t)v28.u64[1];
      v83[6] = _Q7;
      v84 = *(_OWORD *)&vnegq_f64(a10);
      v85 = 0x3FF0000000000000;
      v33 = v12 + 168 * v20;
      v22.f64[0] = *(float64_t *)(v33 + 16);
      v34 = *(int64x2_t *)(v33 + 24);
      v35 = *(double *)(v33 + 64);
      _Q4 = *(int64x2_t *)(v33 + 48);
      v37 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v33, v34);
      v38 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v33, v34);
      v22.f64[1] = *(float64_t *)(v33 + 40);
      v39 = (float64x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      v40 = *(double *)(v33 + 160);
      _Q7.f64[0] = *(float64_t *)(v33 + 152);
      __asm { FMLA            D17, D7, V4.D[1] }
      v42 = (__n128)vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, *(double *)(v33 + 144)), v38, *(float64x2_t *)(v33 + 144), 1), v22, v40));
      v29.f64[0] = *(float64_t *)(v33 + 48);
      v38.f64[1] = v39.f64[0];
      v80[0] = v37;
      v80[1] = (float64x2_t)*(unint64_t *)&v29.f64[0];
      v80[4] = v22;
      v80[5] = (float64x2_t)*(unint64_t *)&v35;
      v80[2] = v38;
      v80[3] = (float64x2_t)*(unint64_t *)&v39.f64[1];
      v80[6] = (float64x2_t)v42;
      v81 = *(_OWORD *)&vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(_D17 + v35 * v40));
      v82 = 0x3FF0000000000000;
      v70 = (float64x2_t *)(v21 + 96);
      v71 = 0;
      v68 = (float64x2_t *)(v33 + 96);
      v69 = 0;
      v66 = (float64x2_t *)(v21 + 72);
      v67 = 0;
      v64 = (float64x2_t *)(v33 + 72);
      v65 = 0;
      v62 = (float64x2_t *)(v21 + 120);
      v63 = 0;
      v60 = (float64x2_t *)(v33 + 120);
      v61 = 0;
      sub_20F4D7C54((uint64_t)(_X1 + 2), (uint64_t)v83, (uint64_t)v80, &v70, &v68, &v66, &v64, &v62, (uint64_t)&v72, (float64x2_t)0, v39, v42, &v60, 0, 0, 0, 0);
      _V1.D[1] = *((_QWORD *)&v72 + 1);
      _D5 = *((_QWORD *)&v72 + 1);
      __asm { FMLA            D2, D5, V1.D[1] }
      _D1 = *((_QWORD *)&v73 + 1);
      __asm { FMLA            D2, D1, V0.D[1] }
      _D0 = *((_QWORD *)&v74 + 1);
      __asm { FMLA            D2, D0, V4.D[1] }
      _D0 = *((_QWORD *)&v75 + 1);
      __asm { FMLA            D2, D0, V3.D[1] }
      _D0 = *((_QWORD *)&v76 + 1);
      __asm { FMLA            D2, D0, V4.D[1] }
      _D3 = *((_QWORD *)&v77 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      _D1 = *((_QWORD *)&v78 + 1);
      __asm { FMLA            D2, D1, V0.D[1] }
      v58 = *(double *)(a3 + 80) + _D2 + v79 * v79;
      *(double *)(a3 + 80) = v58;
      _X1 = v14;
      v13 -= 3192;
    }
    while (v13);
  }
  else
  {
    v58 = *(double *)(a3 + 80);
  }
  result = v58 * 0.5;
  *(double *)(a3 + 80) = result;
  return result;
}

uint64_t sub_20FA2A1D4(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, int64x2_t a7, float64x2_t a8)
{
  double *v10;
  double *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v10 = *(double **)a1;
  v11 = *(double **)(a1 + 8);
  v12 = *(_QWORD **)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
  }
  if (v14)
  {
    *(_QWORD *)(v14 + 64) = 0;
    a3 = 0.0;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
  }
  if (v13)
    return sub_20EB27398(v10, v13, v11, (int64x2_t *)(a2 + 168), 20, a3, a4, a5, a6, a7);
  else
    return sub_20EB23DF0((uint64_t)v10, v11, (int64x2_t *)(a2 + 168), 20, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20FA2A228(uint64_t *a1, uint64_t a2, int8x16_t a3, double a4, int8x16_t a5, int8x16_t a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  float64x2_t *v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t *v18;
  float64x2_t *v19;

  v11 = *a1;
  v10 = a1[1];
  v12 = (_QWORD *)a1[2];
  v13 = (float64x2_t *)a1[3];
  v14 = a1[4];
  if (v12)
  {
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
  }
  if (v14)
  {
    *(_QWORD *)(v14 + 64) = 0;
    a3 = 0uLL;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
  }
  if (v13)
  {
    if (!*(_BYTE *)(a2 + 468))
    {
      a3.i64[0] = sub_20EB27C0C(a2 + 204, (double *)(a2 + 168), 0x32uLL, a3, a4, a5, a6).u64[0];
      *(_BYTE *)(a2 + 468) = 1;
    }
    v15 = (float *)(a2 + 204);
    v16 = v11;
    v17 = v10;
    v18 = (int64x2_t *)(a2 + 168);
    v19 = v13;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 468))
    {
      a3.i64[0] = sub_20EB27C0C(a2 + 204, (double *)(a2 + 168), 0x32uLL, a3, a4, a5, a6).u64[0];
      *(_BYTE *)(a2 + 468) = 1;
    }
    v15 = (float *)(a2 + 204);
    v16 = v11;
    v17 = v10;
    v18 = (int64x2_t *)(a2 + 168);
    v19 = 0;
  }
  return sub_20EA8D684(v16, v17, v18, v15, v19, 5, *(double *)a3.i64, a4, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9);
}

uint64_t sub_20FA2A308(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v5 = (double *)a1[1];
  v6 = (_QWORD *)a1[2];
  v7 = a1[3];
  v8 = a1[4];
  if (v6)
  {
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  if (v8)
  {
    *(_QWORD *)(v8 + 64) = 0;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
  }
  if (v7)
    return sub_20EB28F10(v4, v7, v5, a2 + 168, 5);
  else
    return sub_20EB2886C(v4, v5, a2 + 168, 5);
}

uint64_t sub_20FA2A35C(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, int32x4_t a6, int32x4_t a7)
{
  uint64_t v9;
  double *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double v15;

  v9 = *a1;
  v10 = (double *)a1[1];
  v11 = (_QWORD *)a1[2];
  v12 = a1[3];
  v13 = a1[4];
  if (v11)
  {
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
  }
  if (v13)
  {
    *(_QWORD *)(v13 + 64) = 0;
    a3 = 0.0;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
  }
  if (v12)
    return sub_20EB277C4(v9, v12, v10, a2 + 168, 20, a3, a4, a5, a6, a7);
  v15 = sqrt(*v10 * *v10 + v10[1] * v10[1]);
  return sub_20EB24018(v9, v10, (double *)(a2 + 168), 20, v15, v15, a5, a6, a7);
}

uint64_t sub_20FA2A3C8(uint64_t *a1, double *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  uint64_t result;
  int v11;
  int8x16_t v12;
  float64x2_t v13;
  __int128 v14;
  __int128 v22;
  __int128 v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  float64x2_t v29;
  uint64_t v30;
  float64x2_t v31;
  int8x16_t v32;
  int64x2_t v33;
  int64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  int8x16_t v37;
  float64_t v38;
  __int128 v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;

  v4 = *a1;
  v3 = a1[1];
  v5 = (_QWORD *)a1[2];
  v6 = a1[3];
  v7 = a1[4];
  if (v5)
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  if (v7)
  {
    *(_QWORD *)(v7 + 64) = 0;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
  }
  v8 = a2 + 21;
  v9 = (*a2 + a2[4]) * 0.5;
  LODWORD(result) = sub_20EB24F38(v4, v3, (uint64_t)(a2 + 21), a2 + 35, 0x14u, v9);
  v11 = result;
  if (v6)
    result = 0;
  else
    result = result;
  if (v6)
  {
    if (v11)
    {
      result = sub_20EB2450C(&v31, (uint64_t)&v32, &v29, v4, v8, v9);
      if ((_DWORD)result)
      {
        v12.i64[0] = *(_QWORD *)(v4 + 16);
        v13 = *(float64x2_t *)v4;
        *(_QWORD *)&v14 = v33.i64[0];
        _Q3 = v32;
        v35 = v13;
        v36 = v12.i64[0];
        v30 = 0;
        *(_QWORD *)&_Q5.f64[0] = v12.i64[0];
        _Q5.f64[1] = v13.f64[0];
        _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v34, _Q5), (float64x2_t)vzip2q_s64(v34, v33), (float64x2_t)vextq_s8(*(int8x16_t *)&v13, v12, 8uLL)).f64[1];
        __asm { FMLA            D6, D5, V3.D[1] }
        if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v33, v13), 1), (float64x2_t)v34, v13).f64[0], *(double *)v33.i64)) >= 0.00000001)
        {
          *(_QWORD *)&v22 = vextq_s8(v32, v32, 8uLL).u64[0];
          _Q3.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
          *((_QWORD *)&v22 + 1) = v34.i64[0];
          *((_QWORD *)&v14 + 1) = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
          v37 = _Q3;
          v38 = v13.f64[0];
          v40 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
          v39 = v22;
          v42 = v12.i64[0];
          v41 = v14;
          sub_20E8BE424((uint64_t)&v25);
          *(_QWORD *)&v23 = v26;
          v24 = vzip2q_s64(v25, v27);
          *((_QWORD *)&v23 + 1) = v28;
          *(int64x2_t *)v6 = vzip1q_s64(v25, v27);
          *(int64x2_t *)(v6 + 16) = v24;
          *(_OWORD *)(v6 + 32) = v23;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FA2A57C(uint64_t *a1, double *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  uint64_t result;
  int v11;
  int8x16_t v12;
  float64x2_t v13;
  __int128 v14;
  __int128 v22;
  __int128 v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  float64x2_t v29;
  uint64_t v30;
  float64x2_t v31;
  int8x16_t v32;
  int64x2_t v33;
  int64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  int8x16_t v37;
  float64_t v38;
  __int128 v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;

  v4 = *a1;
  v3 = a1[1];
  v5 = (_QWORD *)a1[2];
  v6 = a1[3];
  v7 = a1[4];
  if (v5)
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  if (v7)
  {
    *(_QWORD *)(v7 + 64) = 0;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
  }
  v8 = a2 + 21;
  v9 = (*a2 + a2[4]) * 0.5;
  LODWORD(result) = sub_20EB253A0(v4, v3, a2 + 21, a2 + 49, 0x14u, v9);
  v11 = result;
  if (v6)
    result = 0;
  else
    result = result;
  if (v6)
  {
    if (v11)
    {
      result = sub_20EB2498C(&v31, (uint64_t)&v32, &v29, v4, v8, v9);
      if ((_DWORD)result)
      {
        v12.i64[0] = *(_QWORD *)(v4 + 16);
        v13 = *(float64x2_t *)v4;
        *(_QWORD *)&v14 = v33.i64[0];
        _Q3 = v32;
        v35 = v13;
        v36 = v12.i64[0];
        v30 = 0;
        *(_QWORD *)&_Q5.f64[0] = v12.i64[0];
        _Q5.f64[1] = v13.f64[0];
        _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v34, _Q5), (float64x2_t)vzip2q_s64(v34, v33), (float64x2_t)vextq_s8(*(int8x16_t *)&v13, v12, 8uLL)).f64[1];
        __asm { FMLA            D6, D5, V3.D[1] }
        if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v33, v13), 1), (float64x2_t)v34, v13).f64[0], *(double *)v33.i64)) >= 0.00000001)
        {
          *(_QWORD *)&v22 = vextq_s8(v32, v32, 8uLL).u64[0];
          _Q3.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
          *((_QWORD *)&v22 + 1) = v34.i64[0];
          *((_QWORD *)&v14 + 1) = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
          v37 = _Q3;
          v38 = v13.f64[0];
          v40 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
          v39 = v22;
          v42 = v12.i64[0];
          v41 = v14;
          sub_20E8BE424((uint64_t)&v25);
          *(_QWORD *)&v23 = v26;
          v24 = vzip2q_s64(v25, v27);
          *((_QWORD *)&v23 + 1) = v28;
          *(int64x2_t *)v6 = vzip1q_s64(v25, v27);
          *(int64x2_t *)(v6 + 16) = v24;
          *(_OWORD *)(v6 + 32) = v23;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20FA2A730(uint64_t result, uint64_t a2, char **a3)
{
  uint64_t v4;
  int v5;
  unint64_t v7;
  size_t v8;
  size_t v9;
  char *v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  char *v14;
  double *v15;
  unsigned __int8 v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;

  v4 = result;
  v5 = *(_DWORD *)(result + 28);
  if (a3 != (char **)a2)
  {
    v7 = *(unsigned int *)(a2 + 16);
    if ((unint64_t)a3[1] >= v7)
    {
      if (!(_DWORD)v7)
      {
        v11 = 0;
        goto LABEL_9;
      }
      v10 = *a3;
      v8 = 8 * v7;
    }
    else
    {
      if (*a3)
        MEMORY[0x212BC6368](*a3, 0x1000C8000313F17);
      v8 = 8 * v7;
      v9 = (v8 + 31) & 0xFFFFFFFE0;
      *a3 = 0;
      a3[1] = (char *)(v9 >> 3);
      v10 = (char *)operator new(v9, (std::align_val_t)0x20uLL);
      *a3 = v10;
    }
    result = (uint64_t)memcpy(v10, *(const void **)a2, v8);
    v11 = *(_DWORD *)(a2 + 16);
LABEL_9:
    *((_DWORD *)a3 + 4) = v11;
  }
  if (v5)
  {
    v12 = atomic_load((unsigned __int8 *)&qword_254A6B838);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B838))
    {
      v16 = atomic_load((unsigned __int8 *)&qword_254A6B840);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B840))
      {
        byte_254A6B803 = (int)sub_20E8BE300() > 1;
        __cxa_guard_release(&qword_254A6B840);
      }
      byte_254A6B802 = byte_254A6B803 ^ 1;
      __cxa_guard_release(&qword_254A6B838);
    }
    if (byte_254A6B802)
      v13 = 117;
    else
      v13 = 108;
    v14 = *a3;
    v15 = *(double **)(v4 + 8);
    if (*(_BYTE *)(v4 + 1))
    {
      v21 = v13;
      v19 = 1;
      v20 = v5;
      v18 = -1;
      v17 = 0x100000001;
      return sub_20E834644(&v17, (uint64_t)&v21, &v20, &v19, v15, (int *)&v20, v14, (int *)&v20, &v18);
    }
    else
    {
      v21 = v13;
      v19 = 1;
      v20 = v5;
      v18 = -1;
      v17 = 0x100000001;
      result = sub_20E83443C(&v17, (uint64_t)&v21, (int *)&v20, &v19, v15, (int *)&v20, v14, (int *)&v20, &v18);
      *(_BYTE *)(v4 + 1) = v18 == 0;
    }
  }
  return result;
}

void sub_20FA2A940(_Unwind_Exception *a1)
{
  __guard *v1;

  __cxa_guard_abort(v1 + 1);
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FA2A95C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  v2 = (_QWORD *)(a1 + 48080);
  v3 = *(_QWORD *)(a1 + 48128);
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8077774924);
  v4 = (_QWORD *)(a1 + 46984);
  v5 = v2[3];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  if (*v2)
    MEMORY[0x212BC6368](*v2, 0x1000C8000313F17);
  sub_20F89E908(a1 + 47840);
  sub_20F89E908(a1 + 47600);
  sub_20F89E908(a1 + 47352);
  sub_20F89E908(a1 + 47112);
  v6 = *(_QWORD *)(a1 + 47088);
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = *(_QWORD *)(a1 + 47056);
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = *(_QWORD *)(a1 + 47032);
  if (v8)
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  v9 = (void **)(a1 + 43736);
  v10 = *(_QWORD *)(a1 + 47008);
  if (v10)
    MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  if (*v4)
    MEMORY[0x212BC6368](*v4, 0x1000C8000313F17);
  sub_20F89E908(a1 + 46744);
  sub_20F89E908(a1 + 46504);
  sub_20F89E908(a1 + 46264);
  sub_20F89E908(a1 + 46024);
  sub_20F89E908(a1 + 45784);
  sub_20F89E908(a1 + 45544);
  sub_20E86872C(a1 + 45520, *(_QWORD **)(a1 + 45528));
  sub_20F89E9C8(a1 + 45496, *(_QWORD **)(a1 + 45504));
  sub_20E8E9428(a1 + 43808);
  v11 = *(std::__shared_weak_count **)(a1 + 43800);
  if (!v11)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = *(std::__shared_weak_count **)(a1 + 43784);
    if (!v14)
      goto LABEL_27;
  }
  else
  {
LABEL_21:
    v14 = *(std::__shared_weak_count **)(a1 + 43784);
    if (!v14)
      goto LABEL_27;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_27:
  v17 = (_QWORD *)(a1 + 42784);
  v18 = *(_QWORD **)(a1 + 43752);
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = *v9;
  *v9 = 0;
  if (v20)
    operator delete(v20);
  sub_20F2C539C((_QWORD *)(a1 + 42904));
  *(_QWORD *)(a1 + 4856) = off_24CA04008;
  v21 = *(_QWORD *)(a1 + 42880);
  if (v21)
    MEMORY[0x212BC6368](v21, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 4856) = off_24CA04150;
  v22 = *(_QWORD *)(a1 + 42832);
  if (v22)
    MEMORY[0x212BC6368](v22, 0x1000C8000313F17);
  v23 = *(_QWORD *)(a1 + 42808);
  if (v23)
    MEMORY[0x212BC6368](v23, 0x1000C8000313F17);
  if (*v17)
    MEMORY[0x212BC6368](*v17, 0x1000C8000313F17);
  sub_20FA2FED8((_QWORD *)(a1 + 4856));
  sub_20F89E908(a1 + 4608);
  sub_20F89E908(a1 + 4368);
  v24 = *(void **)(a1 + 3192);
  if (v24)
    operator delete(v24);
  v25 = *(void **)(a1 + 3168);
  if (v25)
  {
    *(_QWORD *)(a1 + 3176) = v25;
    operator delete(v25);
  }
  v26 = *(_QWORD **)(a1 + 3120);
  if (v26)
  {
    do
    {
      v27 = (_QWORD *)*v26;
      operator delete(v26);
      v26 = v27;
    }
    while (v27);
  }
  v28 = *(void **)(a1 + 3104);
  *(_QWORD *)(a1 + 3104) = 0;
  if (v28)
    operator delete(v28);
  sub_20F0287BC((_QWORD *)(a1 + 2192));
  sub_20F6304A4(a1 + 528);
  v29 = *(std::__shared_weak_count **)(a1 + 512);
  if (!v29)
    goto LABEL_51;
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v32 = *(char **)(a1 + 480);
    if (!v32)
      goto LABEL_62;
  }
  else
  {
LABEL_51:
    v32 = *(char **)(a1 + 480);
    if (!v32)
      goto LABEL_62;
  }
  v33 = *(char **)(a1 + 488);
  v34 = v32;
  if (v33 != v32)
  {
    do
    {
      v35 = (std::__shared_weak_count *)*((_QWORD *)v33 - 1);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v33 -= 16;
    }
    while (v33 != v32);
    v34 = *(char **)(a1 + 480);
  }
  *(_QWORD *)(a1 + 488) = v32;
  operator delete(v34);
LABEL_62:
  v38 = *(void **)(a1 + 152);
  if (v38)
  {
    *(_QWORD *)(a1 + 160) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(a1 + 72);
  if (v39)
  {
    *(_QWORD *)(a1 + 80) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(a1 + 48);
  if (v40)
  {
    *(_QWORD *)(a1 + 56) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(a1 + 24);
  if (v41)
  {
    *(_QWORD *)(a1 + 32) = v41;
    operator delete(v41);
  }
  return a1;
}

uint64_t sub_20FA2ADEC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + 4741;
  *a1 = off_24CA04008;
  v3 = a1[4753];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  *a1 = off_24CA04150;
  v4 = v2[6];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = v2[3];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  if (*v2)
    MEMORY[0x212BC6368](*v2, 0x1000C8000313F17);
  return sub_20FA2FED8(a1);
}

void sub_20FA2AE9C(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4[24];
  char v5;

  v5 = 10;
  strcpy(v4, "\nDenseSchur");
  strcpy((char *)__p, "ARCholesky");
  v2 = std::string::append((std::string *)&v4[1], (const std::string::value_type *)__p, 0xAuLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4[0] & 0x80000000) == 0)
  {
    if ((v5 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)&v4[1]);
    return;
  }
  operator delete(__p[0]);
  if (v5 < 0)
    goto LABEL_5;
}

void sub_20FA2AF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FA2AFA0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  __n128 v207;
  void **v208;
  unint64_t v209;
  size_t v210;
  _QWORD *v211;
  _QWORD *v212;
  float64x2_t v213;
  double v214;
  double v215;
  __n128 v216;
  unsigned int *v217;
  float64_t v218;
  int v219;
  int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  float64x2_t *v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  unsigned int *v230;
  int v231;
  int v232;
  unsigned int *v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  __int128 v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  unsigned int *v247;
  int v248;
  int v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  float64x2_t *v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  unsigned int *v259;
  int v260;
  int v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  float64x2_t *v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  unsigned int *v271;
  int v272;
  int v273;
  unsigned int *v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  unsigned int *v282;
  int v283;
  int v284;
  unsigned int *v285;
  unsigned int v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int *v291;
  int v292;
  int v293;
  unsigned int *v294;
  unsigned int v295;
  unsigned int v296;
  uint64_t v297;
  uint64_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  unsigned int *v302;
  int v303;
  int v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int v307;
  uint64_t v308;
  float64x2_t *v309;
  float64x2_t v310;
  float64x2_t v311;
  unsigned int *v312;
  int v313;
  int v314;
  unsigned int *v315;
  unsigned int v316;
  unsigned int v317;
  uint64_t v318;
  float64x2_t *v319;
  float64x2_t v320;
  float64x2_t v321;
  unsigned int *v322;
  int v323;
  int v324;
  unsigned int *v325;
  unsigned int v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64_t v333;
  char v334;
  unsigned int *v336;
  unsigned int *v337;
  unsigned int *v338;
  unsigned int *v339;
  unsigned int *v340;
  unsigned int *v341;
  unsigned int *v342;
  unsigned int *v343;
  unsigned int *v344;
  unsigned int *v345;
  int v346;
  char v347;
  int32x2_t v348;
  uint64_t v349;
  unsigned int v350;
  float64x2_t *v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  __int128 v360;
  uint64_t v361;
  float64x2_t v362;
  float64x2_t v363;
  uint64_t v364;

  v364 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (sub_20FA3158C((_QWORD *)a1))
  {
    v2 = 1;
  }
  else if (*(_BYTE *)(a1 + 3009))
  {
    v2 = 0;
  }
  else
  {
    v3 = *(void **)(a1 + 4464);
    v4 = *(_QWORD *)(a1 + 4472) - (_QWORD)v3;
    if (v4 >= 1)
      bzero(v3, 8 * (((unint64_t)v4 >> 3) - ((unint64_t)v4 > 7)) + 8);
    v5 = *(void **)(a1 + 5904);
    v6 = *(_QWORD *)(a1 + 5912) - (_QWORD)v5;
    if (v6 >= 1)
      bzero(v5, 8 * (((unint64_t)v6 >> 3) - ((unint64_t)v6 > 7)) + 8);
    v7 = *(void **)(a1 + 7344);
    v8 = *(_QWORD *)(a1 + 7352) - (_QWORD)v7;
    if (v8 >= 1)
      bzero(v7, 8 * (((unint64_t)v8 >> 3) - ((unint64_t)v8 > 7)) + 8);
    v9 = *(void **)(a1 + 8784);
    v10 = *(_QWORD *)(a1 + 8792) - (_QWORD)v9;
    if (v10 >= 1)
      bzero(v9, 8 * (((unint64_t)v10 >> 3) - ((unint64_t)v10 > 7)) + 8);
    v11 = *(void **)(a1 + 10224);
    v12 = *(_QWORD *)(a1 + 10232) - (_QWORD)v11;
    if (v12 >= 1)
      bzero(v11, 8 * (((unint64_t)v12 >> 3) - ((unint64_t)v12 > 7)) + 8);
    v13 = *(void **)(a1 + 11664);
    v14 = *(_QWORD *)(a1 + 11672) - (_QWORD)v13;
    if (v14 >= 1)
      bzero(v13, 8 * (((unint64_t)v14 >> 3) - ((unint64_t)v14 > 7)) + 8);
    v15 = *(void **)(a1 + 13104);
    v16 = *(_QWORD *)(a1 + 13112) - (_QWORD)v15;
    if (v16 >= 1)
      bzero(v15, 8 * (((unint64_t)v16 >> 3) - ((unint64_t)v16 > 7)) + 8);
    v17 = *(void **)(a1 + 14544);
    v18 = *(_QWORD *)(a1 + 14552) - (_QWORD)v17;
    if (v18 >= 1)
      bzero(v17, 8 * (((unint64_t)v18 >> 3) - ((unint64_t)v18 > 7)) + 8);
    v19 = *(void **)(a1 + 15984);
    v20 = *(_QWORD *)(a1 + 15992) - (_QWORD)v19;
    if (v20 >= 1)
      bzero(v19, 8 * (((unint64_t)v20 >> 3) - ((unint64_t)v20 > 7)) + 8);
    v21 = *(void **)(a1 + 17424);
    v22 = *(_QWORD *)(a1 + 17432) - (_QWORD)v21;
    if (v22 >= 1)
      bzero(v21, 8 * (((unint64_t)v22 >> 3) - ((unint64_t)v22 > 7)) + 8);
    v23 = *(void **)(a1 + 4320);
    v24 = *(_QWORD *)(a1 + 4328) - (_QWORD)v23;
    if (v24 >= 1)
      bzero(v23, 8 * (((unint64_t)v24 >> 3) - ((unint64_t)v24 > 7)) + 8);
    v25 = *(void **)(a1 + 5760);
    v26 = *(_QWORD *)(a1 + 5768) - (_QWORD)v25;
    if (v26 >= 1)
      bzero(v25, 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
    v27 = *(void **)(a1 + 7200);
    v28 = *(_QWORD *)(a1 + 7208) - (_QWORD)v27;
    if (v28 >= 1)
      bzero(v27, 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
    v29 = *(void **)(a1 + 8640);
    v30 = *(_QWORD *)(a1 + 8648) - (_QWORD)v29;
    if (v30 >= 1)
      bzero(v29, 8 * (((unint64_t)v30 >> 3) - ((unint64_t)v30 > 7)) + 8);
    v31 = *(void **)(a1 + 10080);
    v32 = *(_QWORD *)(a1 + 10088) - (_QWORD)v31;
    if (v32 >= 1)
      bzero(v31, 8 * (((unint64_t)v32 >> 3) - ((unint64_t)v32 > 7)) + 8);
    v33 = *(void **)(a1 + 11520);
    v34 = *(_QWORD *)(a1 + 11528) - (_QWORD)v33;
    if (v34 >= 1)
      bzero(v33, 8 * (((unint64_t)v34 >> 3) - ((unint64_t)v34 > 7)) + 8);
    v35 = *(void **)(a1 + 12960);
    v36 = *(_QWORD *)(a1 + 12968) - (_QWORD)v35;
    if (v36 >= 1)
      bzero(v35, 8 * (((unint64_t)v36 >> 3) - ((unint64_t)v36 > 7)) + 8);
    v37 = *(void **)(a1 + 14400);
    v38 = *(_QWORD *)(a1 + 14408) - (_QWORD)v37;
    if (v38 >= 1)
      bzero(v37, 8 * (((unint64_t)v38 >> 3) - ((unint64_t)v38 > 7)) + 8);
    v39 = *(void **)(a1 + 15840);
    v40 = *(_QWORD *)(a1 + 15848) - (_QWORD)v39;
    if (v40 >= 1)
      bzero(v39, 8 * (((unint64_t)v40 >> 3) - ((unint64_t)v40 > 7)) + 8);
    v41 = *(void **)(a1 + 17280);
    v42 = *(_QWORD *)(a1 + 17288) - (_QWORD)v41;
    if (v42 >= 1)
      bzero(v41, 8 * (((unint64_t)v42 >> 3) - ((unint64_t)v42 > 7)) + 8);
    v43 = *(void **)(a1 + 4176);
    v44 = *(_QWORD *)(a1 + 4184) - (_QWORD)v43;
    if (v44 >= 1)
      bzero(v43, 8 * (((unint64_t)v44 >> 3) - ((unint64_t)v44 > 7)) + 8);
    v45 = *(void **)(a1 + 5616);
    v46 = *(_QWORD *)(a1 + 5624) - (_QWORD)v45;
    if (v46 >= 1)
      bzero(v45, 8 * (((unint64_t)v46 >> 3) - ((unint64_t)v46 > 7)) + 8);
    v47 = *(void **)(a1 + 7056);
    v48 = *(_QWORD *)(a1 + 7064) - (_QWORD)v47;
    if (v48 >= 1)
      bzero(v47, 8 * (((unint64_t)v48 >> 3) - ((unint64_t)v48 > 7)) + 8);
    v49 = *(void **)(a1 + 8496);
    v50 = *(_QWORD *)(a1 + 8504) - (_QWORD)v49;
    if (v50 >= 1)
      bzero(v49, 8 * (((unint64_t)v50 >> 3) - ((unint64_t)v50 > 7)) + 8);
    v51 = *(void **)(a1 + 9936);
    v52 = *(_QWORD *)(a1 + 9944) - (_QWORD)v51;
    if (v52 >= 1)
      bzero(v51, 8 * (((unint64_t)v52 >> 3) - ((unint64_t)v52 > 7)) + 8);
    v53 = *(void **)(a1 + 11376);
    v54 = *(_QWORD *)(a1 + 11384) - (_QWORD)v53;
    if (v54 >= 1)
      bzero(v53, 8 * (((unint64_t)v54 >> 3) - ((unint64_t)v54 > 7)) + 8);
    v55 = *(void **)(a1 + 12816);
    v56 = *(_QWORD *)(a1 + 12824) - (_QWORD)v55;
    if (v56 >= 1)
      bzero(v55, 8 * (((unint64_t)v56 >> 3) - ((unint64_t)v56 > 7)) + 8);
    v57 = *(void **)(a1 + 14256);
    v58 = *(_QWORD *)(a1 + 14264) - (_QWORD)v57;
    if (v58 >= 1)
      bzero(v57, 8 * (((unint64_t)v58 >> 3) - ((unint64_t)v58 > 7)) + 8);
    v59 = *(void **)(a1 + 15696);
    v60 = *(_QWORD *)(a1 + 15704) - (_QWORD)v59;
    if (v60 >= 1)
      bzero(v59, 8 * (((unint64_t)v60 >> 3) - ((unint64_t)v60 > 7)) + 8);
    v61 = *(void **)(a1 + 17136);
    v62 = *(_QWORD *)(a1 + 17144) - (_QWORD)v61;
    if (v62 >= 1)
      bzero(v61, 8 * (((unint64_t)v62 >> 3) - ((unint64_t)v62 > 7)) + 8);
    v63 = *(void **)(a1 + 4032);
    v64 = *(_QWORD *)(a1 + 4040) - (_QWORD)v63;
    if (v64 >= 1)
      bzero(v63, 8 * (((unint64_t)v64 >> 3) - ((unint64_t)v64 > 7)) + 8);
    v65 = *(void **)(a1 + 5472);
    v66 = *(_QWORD *)(a1 + 5480) - (_QWORD)v65;
    if (v66 >= 1)
      bzero(v65, 8 * (((unint64_t)v66 >> 3) - ((unint64_t)v66 > 7)) + 8);
    v67 = *(void **)(a1 + 6912);
    v68 = *(_QWORD *)(a1 + 6920) - (_QWORD)v67;
    if (v68 >= 1)
      bzero(v67, 8 * (((unint64_t)v68 >> 3) - ((unint64_t)v68 > 7)) + 8);
    v69 = *(void **)(a1 + 8352);
    v70 = *(_QWORD *)(a1 + 8360) - (_QWORD)v69;
    if (v70 >= 1)
      bzero(v69, 8 * (((unint64_t)v70 >> 3) - ((unint64_t)v70 > 7)) + 8);
    v71 = *(void **)(a1 + 9792);
    v72 = *(_QWORD *)(a1 + 9800) - (_QWORD)v71;
    if (v72 >= 1)
      bzero(v71, 8 * (((unint64_t)v72 >> 3) - ((unint64_t)v72 > 7)) + 8);
    v73 = *(void **)(a1 + 11232);
    v74 = *(_QWORD *)(a1 + 11240) - (_QWORD)v73;
    if (v74 >= 1)
      bzero(v73, 8 * (((unint64_t)v74 >> 3) - ((unint64_t)v74 > 7)) + 8);
    v75 = *(void **)(a1 + 12672);
    v76 = *(_QWORD *)(a1 + 12680) - (_QWORD)v75;
    if (v76 >= 1)
      bzero(v75, 8 * (((unint64_t)v76 >> 3) - ((unint64_t)v76 > 7)) + 8);
    v77 = *(void **)(a1 + 14112);
    v78 = *(_QWORD *)(a1 + 14120) - (_QWORD)v77;
    if (v78 >= 1)
      bzero(v77, 8 * (((unint64_t)v78 >> 3) - ((unint64_t)v78 > 7)) + 8);
    v79 = *(void **)(a1 + 15552);
    v80 = *(_QWORD *)(a1 + 15560) - (_QWORD)v79;
    if (v80 >= 1)
      bzero(v79, 8 * (((unint64_t)v80 >> 3) - ((unint64_t)v80 > 7)) + 8);
    v81 = *(void **)(a1 + 16992);
    v82 = *(_QWORD *)(a1 + 17000) - (_QWORD)v81;
    if (v82 >= 1)
      bzero(v81, 8 * (((unint64_t)v82 >> 3) - ((unint64_t)v82 > 7)) + 8);
    v83 = *(void **)(a1 + 3888);
    v84 = *(_QWORD *)(a1 + 3896) - (_QWORD)v83;
    if (v84 >= 1)
      bzero(v83, 8 * (((unint64_t)v84 >> 3) - ((unint64_t)v84 > 7)) + 8);
    v85 = *(void **)(a1 + 5328);
    v86 = *(_QWORD *)(a1 + 5336) - (_QWORD)v85;
    if (v86 >= 1)
      bzero(v85, 8 * (((unint64_t)v86 >> 3) - ((unint64_t)v86 > 7)) + 8);
    v87 = *(void **)(a1 + 6768);
    v88 = *(_QWORD *)(a1 + 6776) - (_QWORD)v87;
    if (v88 >= 1)
      bzero(v87, 8 * (((unint64_t)v88 >> 3) - ((unint64_t)v88 > 7)) + 8);
    v89 = *(void **)(a1 + 8208);
    v90 = *(_QWORD *)(a1 + 8216) - (_QWORD)v89;
    if (v90 >= 1)
      bzero(v89, 8 * (((unint64_t)v90 >> 3) - ((unint64_t)v90 > 7)) + 8);
    v91 = *(void **)(a1 + 9648);
    v92 = *(_QWORD *)(a1 + 9656) - (_QWORD)v91;
    if (v92 >= 1)
      bzero(v91, 8 * (((unint64_t)v92 >> 3) - ((unint64_t)v92 > 7)) + 8);
    v93 = *(void **)(a1 + 11088);
    v94 = *(_QWORD *)(a1 + 11096) - (_QWORD)v93;
    if (v94 >= 1)
      bzero(v93, 8 * (((unint64_t)v94 >> 3) - ((unint64_t)v94 > 7)) + 8);
    v95 = *(void **)(a1 + 12528);
    v96 = *(_QWORD *)(a1 + 12536) - (_QWORD)v95;
    if (v96 >= 1)
      bzero(v95, 8 * (((unint64_t)v96 >> 3) - ((unint64_t)v96 > 7)) + 8);
    v97 = *(void **)(a1 + 13968);
    v98 = *(_QWORD *)(a1 + 13976) - (_QWORD)v97;
    if (v98 >= 1)
      bzero(v97, 8 * (((unint64_t)v98 >> 3) - ((unint64_t)v98 > 7)) + 8);
    v99 = *(void **)(a1 + 15408);
    v100 = *(_QWORD *)(a1 + 15416) - (_QWORD)v99;
    if (v100 >= 1)
      bzero(v99, 8 * (((unint64_t)v100 >> 3) - ((unint64_t)v100 > 7)) + 8);
    v101 = *(void **)(a1 + 16848);
    v102 = *(_QWORD *)(a1 + 16856) - (_QWORD)v101;
    if (v102 >= 1)
      bzero(v101, 8 * (((unint64_t)v102 >> 3) - ((unint64_t)v102 > 7)) + 8);
    v103 = *(void **)(a1 + 3744);
    v104 = *(_QWORD *)(a1 + 3752) - (_QWORD)v103;
    if (v104 >= 1)
      bzero(v103, 8 * (((unint64_t)v104 >> 3) - ((unint64_t)v104 > 7)) + 8);
    v105 = *(void **)(a1 + 5184);
    v106 = *(_QWORD *)(a1 + 5192) - (_QWORD)v105;
    if (v106 >= 1)
      bzero(v105, 8 * (((unint64_t)v106 >> 3) - ((unint64_t)v106 > 7)) + 8);
    v107 = *(void **)(a1 + 6624);
    v108 = *(_QWORD *)(a1 + 6632) - (_QWORD)v107;
    if (v108 >= 1)
      bzero(v107, 8 * (((unint64_t)v108 >> 3) - ((unint64_t)v108 > 7)) + 8);
    v109 = *(void **)(a1 + 8064);
    v110 = *(_QWORD *)(a1 + 8072) - (_QWORD)v109;
    if (v110 >= 1)
      bzero(v109, 8 * (((unint64_t)v110 >> 3) - ((unint64_t)v110 > 7)) + 8);
    v111 = *(void **)(a1 + 9504);
    v112 = *(_QWORD *)(a1 + 9512) - (_QWORD)v111;
    if (v112 >= 1)
      bzero(v111, 8 * (((unint64_t)v112 >> 3) - ((unint64_t)v112 > 7)) + 8);
    v113 = *(void **)(a1 + 10944);
    v114 = *(_QWORD *)(a1 + 10952) - (_QWORD)v113;
    if (v114 >= 1)
      bzero(v113, 8 * (((unint64_t)v114 >> 3) - ((unint64_t)v114 > 7)) + 8);
    v115 = *(void **)(a1 + 12384);
    v116 = *(_QWORD *)(a1 + 12392) - (_QWORD)v115;
    if (v116 >= 1)
      bzero(v115, 8 * (((unint64_t)v116 >> 3) - ((unint64_t)v116 > 7)) + 8);
    v117 = *(void **)(a1 + 13824);
    v118 = *(_QWORD *)(a1 + 13832) - (_QWORD)v117;
    if (v118 >= 1)
      bzero(v117, 8 * (((unint64_t)v118 >> 3) - ((unint64_t)v118 > 7)) + 8);
    v119 = *(void **)(a1 + 15264);
    v120 = *(_QWORD *)(a1 + 15272) - (_QWORD)v119;
    if (v120 >= 1)
      bzero(v119, 8 * (((unint64_t)v120 >> 3) - ((unint64_t)v120 > 7)) + 8);
    v121 = *(void **)(a1 + 16704);
    v122 = *(_QWORD *)(a1 + 16712) - (_QWORD)v121;
    if (v122 >= 1)
      bzero(v121, 8 * (((unint64_t)v122 >> 3) - ((unint64_t)v122 > 7)) + 8);
    v123 = *(void **)(a1 + 3600);
    v124 = *(_QWORD *)(a1 + 3608) - (_QWORD)v123;
    if (v124 >= 1)
      bzero(v123, 8 * (((unint64_t)v124 >> 3) - ((unint64_t)v124 > 7)) + 8);
    v125 = *(void **)(a1 + 5040);
    v126 = *(_QWORD *)(a1 + 5048) - (_QWORD)v125;
    if (v126 >= 1)
      bzero(v125, 8 * (((unint64_t)v126 >> 3) - ((unint64_t)v126 > 7)) + 8);
    v127 = *(void **)(a1 + 6480);
    v128 = *(_QWORD *)(a1 + 6488) - (_QWORD)v127;
    if (v128 >= 1)
      bzero(v127, 8 * (((unint64_t)v128 >> 3) - ((unint64_t)v128 > 7)) + 8);
    v129 = *(void **)(a1 + 7920);
    v130 = *(_QWORD *)(a1 + 7928) - (_QWORD)v129;
    if (v130 >= 1)
      bzero(v129, 8 * (((unint64_t)v130 >> 3) - ((unint64_t)v130 > 7)) + 8);
    v131 = *(void **)(a1 + 9360);
    v132 = *(_QWORD *)(a1 + 9368) - (_QWORD)v131;
    if (v132 >= 1)
      bzero(v131, 8 * (((unint64_t)v132 >> 3) - ((unint64_t)v132 > 7)) + 8);
    v133 = *(void **)(a1 + 10800);
    v134 = *(_QWORD *)(a1 + 10808) - (_QWORD)v133;
    if (v134 >= 1)
      bzero(v133, 8 * (((unint64_t)v134 >> 3) - ((unint64_t)v134 > 7)) + 8);
    v135 = *(void **)(a1 + 12240);
    v136 = *(_QWORD *)(a1 + 12248) - (_QWORD)v135;
    if (v136 >= 1)
      bzero(v135, 8 * (((unint64_t)v136 >> 3) - ((unint64_t)v136 > 7)) + 8);
    v137 = *(void **)(a1 + 13680);
    v138 = *(_QWORD *)(a1 + 13688) - (_QWORD)v137;
    if (v138 >= 1)
      bzero(v137, 8 * (((unint64_t)v138 >> 3) - ((unint64_t)v138 > 7)) + 8);
    v139 = *(void **)(a1 + 15120);
    v140 = *(_QWORD *)(a1 + 15128) - (_QWORD)v139;
    if (v140 >= 1)
      bzero(v139, 8 * (((unint64_t)v140 >> 3) - ((unint64_t)v140 > 7)) + 8);
    v141 = *(void **)(a1 + 16560);
    v142 = *(_QWORD *)(a1 + 16568) - (_QWORD)v141;
    if (v142 >= 1)
      bzero(v141, 8 * (((unint64_t)v142 >> 3) - ((unint64_t)v142 > 7)) + 8);
    v143 = *(void **)(a1 + 3456);
    v144 = *(_QWORD *)(a1 + 3464) - (_QWORD)v143;
    if (v144 >= 1)
      bzero(v143, 8 * (((unint64_t)v144 >> 3) - ((unint64_t)v144 > 7)) + 8);
    v145 = *(void **)(a1 + 4896);
    v146 = *(_QWORD *)(a1 + 4904) - (_QWORD)v145;
    if (v146 >= 1)
      bzero(v145, 8 * (((unint64_t)v146 >> 3) - ((unint64_t)v146 > 7)) + 8);
    v147 = *(void **)(a1 + 6336);
    v148 = *(_QWORD *)(a1 + 6344) - (_QWORD)v147;
    if (v148 >= 1)
      bzero(v147, 8 * (((unint64_t)v148 >> 3) - ((unint64_t)v148 > 7)) + 8);
    v149 = *(void **)(a1 + 7776);
    v150 = *(_QWORD *)(a1 + 7784) - (_QWORD)v149;
    if (v150 >= 1)
      bzero(v149, 8 * (((unint64_t)v150 >> 3) - ((unint64_t)v150 > 7)) + 8);
    v151 = *(void **)(a1 + 9216);
    v152 = *(_QWORD *)(a1 + 9224) - (_QWORD)v151;
    if (v152 >= 1)
      bzero(v151, 8 * (((unint64_t)v152 >> 3) - ((unint64_t)v152 > 7)) + 8);
    v153 = *(void **)(a1 + 10656);
    v154 = *(_QWORD *)(a1 + 10664) - (_QWORD)v153;
    if (v154 >= 1)
      bzero(v153, 8 * (((unint64_t)v154 >> 3) - ((unint64_t)v154 > 7)) + 8);
    v155 = *(void **)(a1 + 12096);
    v156 = *(_QWORD *)(a1 + 12104) - (_QWORD)v155;
    if (v156 >= 1)
      bzero(v155, 8 * (((unint64_t)v156 >> 3) - ((unint64_t)v156 > 7)) + 8);
    v157 = *(void **)(a1 + 13536);
    v158 = *(_QWORD *)(a1 + 13544) - (_QWORD)v157;
    if (v158 >= 1)
      bzero(v157, 8 * (((unint64_t)v158 >> 3) - ((unint64_t)v158 > 7)) + 8);
    v159 = *(void **)(a1 + 14976);
    v160 = *(_QWORD *)(a1 + 14984) - (_QWORD)v159;
    if (v160 >= 1)
      bzero(v159, 8 * (((unint64_t)v160 >> 3) - ((unint64_t)v160 > 7)) + 8);
    v161 = *(void **)(a1 + 16416);
    v162 = *(_QWORD *)(a1 + 16424) - (_QWORD)v161;
    if (v162 >= 1)
      bzero(v161, 8 * (((unint64_t)v162 >> 3) - ((unint64_t)v162 > 7)) + 8);
    v163 = *(void **)(a1 + 3312);
    v164 = *(_QWORD *)(a1 + 3320) - (_QWORD)v163;
    if (v164 >= 1)
      bzero(v163, 8 * (((unint64_t)v164 >> 3) - ((unint64_t)v164 > 7)) + 8);
    v165 = *(void **)(a1 + 4752);
    v166 = *(_QWORD *)(a1 + 4760) - (_QWORD)v165;
    if (v166 >= 1)
      bzero(v165, 8 * (((unint64_t)v166 >> 3) - ((unint64_t)v166 > 7)) + 8);
    v167 = *(void **)(a1 + 6192);
    v168 = *(_QWORD *)(a1 + 6200) - (_QWORD)v167;
    if (v168 >= 1)
      bzero(v167, 8 * (((unint64_t)v168 >> 3) - ((unint64_t)v168 > 7)) + 8);
    v169 = *(void **)(a1 + 7632);
    v170 = *(_QWORD *)(a1 + 7640) - (_QWORD)v169;
    if (v170 >= 1)
      bzero(v169, 8 * (((unint64_t)v170 >> 3) - ((unint64_t)v170 > 7)) + 8);
    v171 = *(void **)(a1 + 9072);
    v172 = *(_QWORD *)(a1 + 9080) - (_QWORD)v171;
    if (v172 >= 1)
      bzero(v171, 8 * (((unint64_t)v172 >> 3) - ((unint64_t)v172 > 7)) + 8);
    v173 = *(void **)(a1 + 10512);
    v174 = *(_QWORD *)(a1 + 10520) - (_QWORD)v173;
    if (v174 >= 1)
      bzero(v173, 8 * (((unint64_t)v174 >> 3) - ((unint64_t)v174 > 7)) + 8);
    v175 = *(void **)(a1 + 11952);
    v176 = *(_QWORD *)(a1 + 11960) - (_QWORD)v175;
    if (v176 >= 1)
      bzero(v175, 8 * (((unint64_t)v176 >> 3) - ((unint64_t)v176 > 7)) + 8);
    v177 = *(void **)(a1 + 13392);
    v178 = *(_QWORD *)(a1 + 13400) - (_QWORD)v177;
    if (v178 >= 1)
      bzero(v177, 8 * (((unint64_t)v178 >> 3) - ((unint64_t)v178 > 7)) + 8);
    v179 = *(void **)(a1 + 14832);
    v180 = *(_QWORD *)(a1 + 14840) - (_QWORD)v179;
    if (v180 >= 1)
      bzero(v179, 8 * (((unint64_t)v180 >> 3) - ((unint64_t)v180 > 7)) + 8);
    v181 = *(void **)(a1 + 16272);
    v182 = *(_QWORD *)(a1 + 16280) - (_QWORD)v181;
    if (v182 >= 1)
      bzero(v181, 8 * (((unint64_t)v182 >> 3) - ((unint64_t)v182 > 7)) + 8);
    v183 = *(void **)(a1 + 3168);
    v184 = *(_QWORD *)(a1 + 3176) - (_QWORD)v183;
    if (v184 >= 1)
      bzero(v183, 8 * (((unint64_t)v184 >> 3) - ((unint64_t)v184 > 7)) + 8);
    v185 = *(void **)(a1 + 4608);
    v186 = *(_QWORD *)(a1 + 4616) - (_QWORD)v185;
    if (v186 >= 1)
      bzero(v185, 8 * (((unint64_t)v186 >> 3) - ((unint64_t)v186 > 7)) + 8);
    v187 = *(void **)(a1 + 6048);
    v188 = *(_QWORD *)(a1 + 6056) - (_QWORD)v187;
    if (v188 >= 1)
      bzero(v187, 8 * (((unint64_t)v188 >> 3) - ((unint64_t)v188 > 7)) + 8);
    v189 = *(void **)(a1 + 7488);
    v190 = *(_QWORD *)(a1 + 7496) - (_QWORD)v189;
    if (v190 >= 1)
      bzero(v189, 8 * (((unint64_t)v190 >> 3) - ((unint64_t)v190 > 7)) + 8);
    v191 = *(void **)(a1 + 8928);
    v192 = *(_QWORD *)(a1 + 8936) - (_QWORD)v191;
    if (v192 >= 1)
      bzero(v191, 8 * (((unint64_t)v192 >> 3) - ((unint64_t)v192 > 7)) + 8);
    v193 = *(void **)(a1 + 10368);
    v194 = *(_QWORD *)(a1 + 10376) - (_QWORD)v193;
    if (v194 >= 1)
      bzero(v193, 8 * (((unint64_t)v194 >> 3) - ((unint64_t)v194 > 7)) + 8);
    v195 = *(void **)(a1 + 11808);
    v196 = *(_QWORD *)(a1 + 11816) - (_QWORD)v195;
    if (v196 >= 1)
      bzero(v195, 8 * (((unint64_t)v196 >> 3) - ((unint64_t)v196 > 7)) + 8);
    v197 = *(void **)(a1 + 13248);
    v198 = *(_QWORD *)(a1 + 13256) - (_QWORD)v197;
    if (v198 >= 1)
      bzero(v197, 8 * (((unint64_t)v198 >> 3) - ((unint64_t)v198 > 7)) + 8);
    v199 = *(void **)(a1 + 14688);
    v200 = *(_QWORD *)(a1 + 14696) - (_QWORD)v199;
    if (v200 >= 1)
      bzero(v199, 8 * (((unint64_t)v200 >> 3) - ((unint64_t)v200 > 7)) + 8);
    v201 = *(void **)(a1 + 16128);
    v202 = *(_QWORD *)(a1 + 16136) - (_QWORD)v201;
    if (v202 >= 1)
      bzero(v201, 8 * (((unint64_t)v202 >> 3) - ((unint64_t)v202 > 7)) + 8);
    v203 = a1 + 35704;
    v204 = *(unsigned int *)(a1 + 3064);
    if ((_DWORD)v204)
      bzero(*(void **)(a1 + 3048), 8 * v204);
    v205 = *(_DWORD *)(a1 + 3040);
    if (v205 == 1)
    {
      v206 = *(unsigned int *)(a1 + 37840);
      if ((_DWORD)v206)
        bzero(*(void **)(a1 + 37824), 8 * v206);
    }
    if (((*(_QWORD *)(v203 + 32) - *(_QWORD *)(v203 + 24)) >> 2)
       + ((*(_QWORD *)(v203 + 8) - *(_QWORD *)v203) >> 2)
       + ((*(_QWORD *)(v203 + 56) - *(_QWORD *)(v203 + 48)) >> 2)
       + ((*(_QWORD *)(v203 + 80) - *(_QWORD *)(v203 + 72)) >> 2)
       + ((*(_QWORD *)(v203 + 104) - *(_QWORD *)(v203 + 96)) >> 2)
       + ((*(_QWORD *)(v203 + 128) - *(_QWORD *)(v203 + 120)) >> 2)
       + ((*(_QWORD *)(v203 + 152) - *(_QWORD *)(v203 + 144)) >> 2)
       + ((*(_QWORD *)(v203 + 176) - *(_QWORD *)(v203 + 168)) >> 2)
       + ((*(_QWORD *)(v203 + 200) - *(_QWORD *)(v203 + 192)) >> 2)
       + ((*(_QWORD *)(v203 + 224) - *(_QWORD *)(v203 + 216)) >> 2))
    {
      kdebug_trace();
      v207 = sub_20FA45280(a1 + 3048, a1 + 20400, (char **)(a1 + 36704), (int **)(a1 + 36944));
      v208 = (void **)(a1 + 37424);
      v209 = 9 * ((*(_QWORD *)(v203 + 32) - *(_QWORD *)(v203 + 24)) >> 2)
           + 6
           * (((*(_QWORD *)(v203 + 56) - *(_QWORD *)(v203 + 48)) >> 2)
            + ((*(_QWORD *)(v203 + 8) - *(_QWORD *)v203) >> 2)
            + ((*(_QWORD *)(v203 + 80) - *(_QWORD *)(v203 + 72)) >> 2))
           + ((*(_QWORD *)(v203 + 128) - *(_QWORD *)(v203 + 120)) >> 2)
           + ((*(_DWORD *)(v203 + 176) - *(_DWORD *)(v203 + 168)) & 0xFFFFFFFC)
           + ((*(_DWORD *)(v203 + 200) - *(_DWORD *)(v203 + 192)) & 0xFFFFFFFC)
           + 3
           * (((*(_QWORD *)(v203 + 152) - *(_QWORD *)(v203 + 144)) >> 2)
            + ((*(_QWORD *)(v203 + 104) - *(_QWORD *)(v203 + 96)) >> 2)
            + ((*(_QWORD *)(v203 + 224) - *(_QWORD *)(v203 + 216)) >> 2));
      *(_DWORD *)(a1 + 37440) = v209;
      if (*(_QWORD *)(a1 + 37432) < v209)
      {
        if (*v208)
          MEMORY[0x212BC6368](*v208, 0x1000C8000313F17, v207);
        v210 = (8 * v209 + 31) & 0xFFFFFFFE0;
        *v208 = 0;
        *(_QWORD *)(a1 + 37432) = v210 >> 3;
        *v208 = operator new(v210, (std::align_val_t)0x20uLL);
      }
      v211 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 20368) + 24))(a1 + 20368);
      sub_20FA44008(v211, v203, (_QWORD *)(a1 + 37424));
      if (((*(_QWORD *)(v203 + 32) - *(_QWORD *)(v203 + 24)) >> 2)
         + ((*(_QWORD *)(v203 + 8) - *(_QWORD *)v203) >> 2)
         + ((*(_QWORD *)(v203 + 56) - *(_QWORD *)(v203 + 48)) >> 2)
         + ((*(_QWORD *)(v203 + 80) - *(_QWORD *)(v203 + 72)) >> 2)
         + ((*(_QWORD *)(v203 + 104) - *(_QWORD *)(v203 + 96)) >> 2)
         + ((*(_QWORD *)(v203 + 128) - *(_QWORD *)(v203 + 120)) >> 2)
         + ((*(_QWORD *)(v203 + 152) - *(_QWORD *)(v203 + 144)) >> 2)
         + ((*(_QWORD *)(v203 + 176) - *(_QWORD *)(v203 + 168)) >> 2)
         + ((*(_QWORD *)(v203 + 200) - *(_QWORD *)(v203 + 192)) >> 2)
         + ((*(_QWORD *)(v203 + 224) - *(_QWORD *)(v203 + 216)) >> 2))
      {
        sub_20FA5A44C((_QWORD *)(a1 + 20504), (void **)(a1 + 37448));
        sub_20F20B6B0(a1 + 37448);
        v212 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 20368) + 32))(a1 + 20368);
        sub_20FA5B1C0(v212, a1 + 37544, v203, a1 + 20376, v213, v214, v215, v216);
        v217 = *(unsigned int **)v203;
        v336 = *(unsigned int **)(a1 + 35712);
        *(_QWORD *)&v218 = a1 + 37544;
        if (v217 != v336)
        {
          v219 = 0;
          v220 = 0;
          v221 = *(unsigned int **)(a1 + 18352);
          do
          {
            if (*v221 < *v217)
            {
              do
              {
                v222 = v221[1];
                ++v221;
                ++v219;
              }
              while (v222 < *v217);
            }
            v223 = *(_DWORD *)(a1 + 20464) + 6 * v220;
            v224 = *(_QWORD *)(a1 + 37448);
            v348 = vrev64_s32(*(int32x2_t *)(a1 + 37464));
            v349 = v224 + 8 * v223;
            v350 = v223;
            v225 = (float64x2_t *)(*(_QWORD *)(a1 + 3048) + 8 * (*(_DWORD *)(a1 + 3112) + 6 * v219));
            v226 = *v225;
            v227 = v225[2];
            v358 = v225[1];
            v359 = v227;
            v357 = v226;
            v351 = &v357;
            *(_QWORD *)&v362.f64[1] = &v348;
            *(_QWORD *)&v363.f64[0] = a1 + 37544;
            v363.f64[1] = 1.0;
            sub_20F3DA5F4(&v352, (uint64_t)&v362);
            v228 = vsubq_f64(*v351, v352);
            v229 = vsubq_f64(v351[2], v354);
            v225[1] = vsubq_f64(v351[1], v353);
            v225[2] = v229;
            *v225 = v228;
            ++v217;
            ++v220;
          }
          while (v217 != v336);
        }
        v230 = *(unsigned int **)(a1 + 35728);
        v337 = *(unsigned int **)(a1 + 35736);
        if (v230 != v337)
        {
          v231 = 0;
          v232 = 0;
          v233 = *(unsigned int **)(a1 + 18376);
          do
          {
            if (*v233 < *v230)
            {
              do
              {
                v234 = v233[1];
                ++v233;
                ++v231;
              }
              while (v234 < *v230);
            }
            v235 = *(_DWORD *)(a1 + 20468) + 9 * v232;
            v236 = *(_QWORD *)(a1 + 37448);
            v348 = vrev64_s32(*(int32x2_t *)(a1 + 37464));
            v349 = v236 + 8 * v235;
            v350 = v235;
            v237 = *(_QWORD *)(a1 + 3048) + 8 * (*(_DWORD *)(a1 + 3116) + 9 * v231);
            v238 = *(float64x2_t *)v237;
            v239 = *(float64x2_t *)(v237 + 16);
            v240 = *(float64x2_t *)(v237 + 32);
            v241 = *(_OWORD *)(v237 + 48);
            v361 = *(_QWORD *)(v237 + 64);
            v359 = v240;
            v360 = v241;
            v358 = v239;
            v357 = v238;
            v351 = &v357;
            *(_QWORD *)&v362.f64[1] = &v348;
            *(_QWORD *)&v363.f64[0] = a1 + 37544;
            v363.f64[1] = 1.0;
            sub_20F5BCC94((uint64_t)&v352, (uint64_t)&v362);
            v242.f64[0] = v351[4].f64[0];
            v243.f64[0] = v356;
            v244 = vsubq_f64(*v351, v352);
            v245 = vsubq_f64(v351[3], v355);
            v246 = vsubq_f64(v351[1], v353);
            *(float64x2_t *)(v237 + 32) = vsubq_f64(v351[2], v354);
            *(float64x2_t *)(v237 + 48) = v245;
            *(float64x2_t *)v237 = v244;
            *(float64x2_t *)(v237 + 16) = v246;
            *(_QWORD *)(v237 + 64) = *(_OWORD *)&vsubq_f64(v242, v243);
            ++v230;
            ++v232;
          }
          while (v230 != v337);
        }
        v247 = *(unsigned int **)(a1 + 35752);
        v338 = *(unsigned int **)(a1 + 35760);
        if (v247 != v338)
        {
          v248 = 0;
          v249 = 0;
          v250 = *(unsigned int **)(a1 + 18400);
          do
          {
            if (*v250 < *v247)
            {
              do
              {
                v251 = v250[1];
                ++v250;
                ++v248;
              }
              while (v251 < *v247);
            }
            v252 = *(_DWORD *)(a1 + 20472) + 6 * v249;
            v253 = *(_QWORD *)(a1 + 37448);
            v348 = vrev64_s32(*(int32x2_t *)(a1 + 37464));
            v349 = v253 + 8 * v252;
            v350 = v252;
            v254 = (float64x2_t *)(*(_QWORD *)(a1 + 3048) + 8 * (*(_DWORD *)(a1 + 3120) + 6 * v248));
            v255 = *v254;
            v256 = v254[2];
            v358 = v254[1];
            v359 = v256;
            v357 = v255;
            v351 = &v357;
            *(_QWORD *)&v362.f64[1] = &v348;
            *(_QWORD *)&v363.f64[0] = a1 + 37544;
            v363.f64[1] = 1.0;
            sub_20F3DA5F4(&v352, (uint64_t)&v362);
            v257 = vsubq_f64(*v351, v352);
            v258 = vsubq_f64(v351[2], v354);
            v254[1] = vsubq_f64(v351[1], v353);
            v254[2] = v258;
            *v254 = v257;
            ++v247;
            ++v249;
          }
          while (v247 != v338);
        }
        v259 = *(unsigned int **)(a1 + 35776);
        v339 = *(unsigned int **)(a1 + 35784);
        if (v259 != v339)
        {
          v260 = 0;
          v261 = 0;
          v262 = *(unsigned int **)(a1 + 18424);
          do
          {
            if (*v262 < *v259)
            {
              do
              {
                v263 = v262[1];
                ++v262;
                ++v260;
              }
              while (v263 < *v259);
            }
            v264 = *(_DWORD *)(a1 + 20476) + 6 * v261;
            v265 = *(_QWORD *)(a1 + 37448);
            v348 = vrev64_s32(*(int32x2_t *)(a1 + 37464));
            v349 = v265 + 8 * v264;
            v350 = v264;
            v266 = (float64x2_t *)(*(_QWORD *)(a1 + 3048) + 8 * (*(_DWORD *)(a1 + 3124) + 6 * v260));
            v267 = *v266;
            v268 = v266[2];
            v358 = v266[1];
            v359 = v268;
            v357 = v267;
            v351 = &v357;
            *(_QWORD *)&v362.f64[1] = &v348;
            *(_QWORD *)&v363.f64[0] = a1 + 37544;
            v363.f64[1] = 1.0;
            sub_20F3DA5F4(&v352, (uint64_t)&v362);
            v269 = vsubq_f64(*v351, v352);
            v270 = vsubq_f64(v351[2], v354);
            v266[1] = vsubq_f64(v351[1], v353);
            v266[2] = v270;
            *v266 = v269;
            ++v259;
            ++v261;
          }
          while (v259 != v339);
        }
        v271 = *(unsigned int **)(a1 + 35800);
        v340 = *(unsigned int **)(a1 + 35808);
        if (v271 != v340)
        {
          v272 = 0;
          v273 = 0;
          v274 = *(unsigned int **)(a1 + 18448);
          do
          {
            if (*v274 < *v271)
            {
              do
              {
                v275 = v274[1];
                ++v274;
                ++v272;
              }
              while (v275 < *v271);
            }
            v276 = *(_DWORD *)(a1 + 20480) + 3 * v273;
            v277 = *(_QWORD *)(a1 + 37448);
            v348 = vrev64_s32(*(int32x2_t *)(a1 + 37464));
            v349 = v277 + 8 * v276;
            v350 = v276;
            v278 = *(_QWORD *)(a1 + 3048) + 8 * (*(_DWORD *)(a1 + 3128) + 3 * v272);
            v279 = *(float64x2_t *)v278;
            v363.f64[0] = *(float64_t *)(v278 + 16);
            v362 = v279;
            v351 = &v362;
            *(_QWORD *)&v357.f64[1] = &v348;
            *(_QWORD *)&v358.f64[0] = a1 + 37544;
            v358.f64[1] = 1.0;
            sub_20F3A2AA0(&v352, (uint64_t)&v357);
            v280.f64[0] = v351[1].f64[0];
            v281.f64[0] = v353.f64[0];
            *(float64x2_t *)v278 = vsubq_f64(*v351, v352);
            *(_QWORD *)(v278 + 16) = *(_OWORD *)&vsubq_f64(v280, v281);
            ++v271;
            ++v273;
          }
          while (v271 != v340);
        }
        v282 = *(unsigned int **)(a1 + 35824);
        v341 = *(unsigned int **)(a1 + 35832);
        if (v282 != v341)
        {
          v283 = 0;
          v284 = 0;
          v285 = *(unsigned int **)(a1 + 18472);
          do
          {
            if (*v285 < *v282)
            {
              do
              {
                v286 = v285[1];
                ++v285;
                ++v283;
              }
              while (v286 < *v282);
            }
            v287 = *(_DWORD *)(a1 + 20484) + v284;
            v288 = *(_QWORD *)(a1 + 37448);
            *(int32x2_t *)&v362.f64[0] = vrev64_s32(*(int32x2_t *)(a1 + 37464));
            *(_QWORD *)&v362.f64[1] = v288 + 8 * v287;
            LODWORD(v363.f64[0]) = v287;
            v289 = (*(_DWORD *)(a1 + 3132) + v283);
            v290 = *(_QWORD *)(a1 + 3048);
            v348 = *(int32x2_t *)(v290 + 8 * v289);
            *(_QWORD *)&v357.f64[0] = &v348;
            *(_QWORD *)&v352.f64[0] = &v362;
            *(_QWORD *)&v352.f64[1] = a1 + 37544;
            v353.f64[0] = 1.0;
            sub_20F2BF1EC(&v357.f64[1], (uint64_t)&v351);
            *(double *)(v290 + 8 * v289) = **(double **)&v357.f64[0] - v357.f64[1];
            ++v282;
            ++v284;
            *(_QWORD *)&v218 = a1 + 37544;
          }
          while (v282 != v341);
        }
        v291 = *(unsigned int **)(a1 + 35848);
        v342 = *(unsigned int **)(a1 + 35856);
        if (v291 != v342)
        {
          v292 = 0;
          v293 = 0;
          v294 = *(unsigned int **)(a1 + 18496);
          do
          {
            if (*v294 < *v291)
            {
              do
              {
                v295 = v294[1];
                ++v294;
                ++v292;
              }
              while (v295 < *v291);
            }
            v296 = *(_DWORD *)(a1 + 20488) + 3 * v293;
            v297 = *(_QWORD *)(a1 + 37448);
            v348 = vrev64_s32(*(int32x2_t *)(a1 + 37464));
            v349 = v297 + 8 * v296;
            v350 = v296;
            v298 = *(_QWORD *)(a1 + 3048) + 8 * (*(_DWORD *)(a1 + 3136) + 3 * v292);
            v299 = *(float64x2_t *)v298;
            v363.f64[0] = *(float64_t *)(v298 + 16);
            v362 = v299;
            v351 = &v362;
            *(_QWORD *)&v357.f64[1] = &v348;
            v358.f64[0] = v218;
            v358.f64[1] = 1.0;
            sub_20F3A2AA0(&v352, (uint64_t)&v357);
            v300.f64[0] = v351[1].f64[0];
            v301.f64[0] = v353.f64[0];
            *(float64x2_t *)v298 = vsubq_f64(*v351, v352);
            *(_QWORD *)(v298 + 16) = *(_OWORD *)&vsubq_f64(v300, v301);
            ++v291;
            ++v293;
          }
          while (v291 != v342);
        }
        v302 = *(unsigned int **)(a1 + 35872);
        v343 = *(unsigned int **)(a1 + 35880);
        if (v302 != v343)
        {
          v303 = 0;
          v304 = 0;
          v305 = *(unsigned int **)(a1 + 18520);
          do
          {
            if (*v305 < *v302)
            {
              do
              {
                v306 = v305[1];
                ++v305;
                ++v303;
              }
              while (v306 < *v302);
            }
            v307 = *(_DWORD *)(a1 + 20492) + 4 * v304;
            v308 = *(_QWORD *)(a1 + 37448);
            v348 = vrev64_s32(*(int32x2_t *)(a1 + 37464));
            v349 = v308 + 8 * v307;
            v350 = v307;
            v309 = (float64x2_t *)(*(_QWORD *)(a1 + 3048) + 8 * (*(_DWORD *)(a1 + 3140) + 4 * v303));
            v310 = *v309;
            v363 = v309[1];
            v362 = v310;
            v351 = &v362;
            *(_QWORD *)&v357.f64[1] = &v348;
            v358.f64[0] = v218;
            v358.f64[1] = 1.0;
            sub_20F3DA534(&v352, (uint64_t)&v357);
            v311 = vsubq_f64(v351[1], v353);
            *v309 = vsubq_f64(*v351, v352);
            v309[1] = v311;
            ++v302;
            ++v304;
          }
          while (v302 != v343);
        }
        v312 = *(unsigned int **)(a1 + 35896);
        v344 = *(unsigned int **)(a1 + 35904);
        if (v312 != v344)
        {
          v313 = 0;
          v314 = 0;
          v315 = *(unsigned int **)(a1 + 18544);
          do
          {
            if (*v315 < *v312)
            {
              do
              {
                v316 = v315[1];
                ++v315;
                ++v313;
              }
              while (v316 < *v312);
            }
            v317 = *(_DWORD *)(a1 + 20496) + 4 * v314;
            v318 = *(_QWORD *)(a1 + 37448);
            v348 = vrev64_s32(*(int32x2_t *)(a1 + 37464));
            v349 = v318 + 8 * v317;
            v350 = v317;
            v319 = (float64x2_t *)(*(_QWORD *)(a1 + 3048) + 8 * (*(_DWORD *)(a1 + 3144) + 4 * v313));
            v320 = *v319;
            v363 = v319[1];
            v362 = v320;
            v351 = &v362;
            *(_QWORD *)&v357.f64[1] = &v348;
            v358.f64[0] = v218;
            v358.f64[1] = 1.0;
            sub_20F3DA534(&v352, (uint64_t)&v357);
            v321 = vsubq_f64(v351[1], v353);
            *v319 = vsubq_f64(*v351, v352);
            v319[1] = v321;
            ++v312;
            ++v314;
          }
          while (v312 != v344);
        }
        v322 = *(unsigned int **)(a1 + 35920);
        v345 = *(unsigned int **)(a1 + 35928);
        if (v322 != v345)
        {
          v323 = 0;
          v324 = 0;
          v325 = *(unsigned int **)(a1 + 18568);
          do
          {
            if (*v325 < *v322)
            {
              do
              {
                v326 = v325[1];
                ++v325;
                ++v323;
              }
              while (v326 < *v322);
            }
            v327 = *(_DWORD *)(a1 + 20500) + 3 * v324;
            v328 = *(_QWORD *)(a1 + 37448);
            v348 = vrev64_s32(*(int32x2_t *)(a1 + 37464));
            v349 = v328 + 8 * v327;
            v350 = v327;
            v329 = *(_QWORD *)(a1 + 3048) + 8 * (*(_DWORD *)(a1 + 3148) + 3 * v323);
            v330 = *(float64x2_t *)v329;
            v363.f64[0] = *(float64_t *)(v329 + 16);
            v362 = v330;
            v351 = &v362;
            *(_QWORD *)&v357.f64[1] = &v348;
            v358.f64[0] = v218;
            v358.f64[1] = 1.0;
            sub_20F3A2AA0(&v352, (uint64_t)&v357);
            v331.f64[0] = v351[1].f64[0];
            v332.f64[0] = v353.f64[0];
            *(float64x2_t *)v329 = vsubq_f64(*v351, v352);
            *(_QWORD *)(v329 + 16) = *(_OWORD *)&vsubq_f64(v331, v332);
            ++v322;
            ++v324;
          }
          while (v322 != v345);
        }
      }
      kdebug_trace();
      v205 = *(_DWORD *)(a1 + 3040);
    }
    v333 = *(double *)(a1 + 18592);
    v334 = *(_BYTE *)(a1 + 3024);
    v357.f64[0] = *(float64_t *)(a1 + 3032);
    v362.f64[0] = v333;
    v347 = v334;
    v348.i32[0] = 2;
    v346 = v205;
    v351 = (float64x2_t *)(a1 + 18600);
    *(_QWORD *)&v352.f64[0] = &v346;
    *(_QWORD *)&v352.f64[1] = a1 + 8;
    *(_QWORD *)&v353.f64[0] = &v348;
    *(_QWORD *)&v353.f64[1] = &v347;
    *(_QWORD *)&v354.f64[0] = &v357;
    *(_QWORD *)&v354.f64[1] = &v362;
    sub_20FA5BE38(&v351);
    v2 = 0;
    *(_WORD *)(a1 + 3009) = 1;
  }
  kdebug_trace();
  return v2;
}

void sub_20FA2D088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FA2D0EC(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  size_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  double v37;
  unsigned int v38;
  double *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  double v43;
  double *v44;
  unsigned int v45;
  double *v46;
  double v47;
  unint64_t v48;
  size_t v49;
  int v50;
  unsigned int v51;
  unsigned int v53;
  unint64_t v54;
  BOOL v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned __int8 v66;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v7 = a1 + 37936;
  v8 = (void **)(a1 + 37928);
  if ((v6 & (v5 ^ 1) & 1) != 0)
  {
    v66 = 1;
    v9 = *(_QWORD *)(a1 + 17552);
    v10 = *(_DWORD *)(v9 + 12);
    v11 = 9 * *(_DWORD *)(*(_QWORD *)(a1 + 17632) + 8)
        + 6
        * (*(_DWORD *)(*(_QWORD *)(a1 + 17712) + 8) + *(_DWORD *)(v9 + 8) + *(_DWORD *)(*(_QWORD *)(a1 + 17792) + 8))
        + *(_DWORD *)(*(_QWORD *)(a1 + 17952) + 8)
        + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 18192) + 8) + *(_DWORD *)(*(_QWORD *)(a1 + 18112) + 8))
        + 3
        * (*(_DWORD *)(*(_QWORD *)(a1 + 18032) + 8)
         + *(_DWORD *)(*(_QWORD *)(a1 + 17872) + 8)
         + *(_DWORD *)(*(_QWORD *)(a1 + 18272) + 8));
    v12 = 9 * *(_DWORD *)(*(_QWORD *)(a1 + 17560) + 12)
        + 6 * (*(_DWORD *)(*(_QWORD *)(a1 + 17568) + 12) + v10 + *(_DWORD *)(*(_QWORD *)(a1 + 17576) + 12))
        + *(_DWORD *)(*(_QWORD *)(a1 + 17592) + 12)
        + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 17616) + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 17608) + 12))
        + 3
        * (*(_DWORD *)(*(_QWORD *)(a1 + 17600) + 12)
         + *(_DWORD *)(*(_QWORD *)(a1 + 17584) + 12)
         + *(_DWORD *)(*(_QWORD *)(a1 + 17624) + 12));
    *(_DWORD *)(a1 + 37944) = v11;
    *(_DWORD *)(a1 + 37948) = v12;
    v13 = v12 * (unint64_t)v11;
    if (*(_QWORD *)v7 < v13)
    {
      if (*v8)
        MEMORY[0x212BC6368](*v8, 0x1000C8000313F17);
      *v8 = 0;
      v14 = (8 * v13 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)v7 = v14 >> 3;
      *v8 = operator new(v14, (std::align_val_t)0x20uLL);
      v11 = *(_DWORD *)(a1 + 37944);
      v12 = *(_DWORD *)(a1 + 37948);
    }
    v15 = v11 * v12;
    if (v15)
      bzero(*v8, 8 * v15);
    sub_20FB27900(a1 + 3152, a1 + 37928, (uint64_t *)(a1 + 19888), (unsigned int **)(a1 + 19888), &v66);
    if (!*(_BYTE *)(a1 + 3024))
      goto LABEL_53;
    goto LABEL_38;
  }
  v61 = v6;
  v62 = a1 + 3152;
  if (v5)
    v16 = -8;
  else
    v16 = -1;
  if (v5)
    v17 = 7;
  else
    v17 = 0;
  v63 = 9 * *(_DWORD *)(*(_QWORD *)(a1 + 17632) + 8)
      + 6
      * (*(_DWORD *)(*(_QWORD *)(a1 + 17712) + 8)
       + *(_DWORD *)(*(_QWORD *)(a1 + 17552) + 8)
       + *(_DWORD *)(*(_QWORD *)(a1 + 17792) + 8))
      + *(_DWORD *)(*(_QWORD *)(a1 + 17952) + 8)
      + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 18192) + 8) + *(_DWORD *)(*(_QWORD *)(a1 + 18112) + 8))
      + 3
      * (*(_DWORD *)(*(_QWORD *)(a1 + 18032) + 8)
       + *(_DWORD *)(*(_QWORD *)(a1 + 17872) + 8)
       + *(_DWORD *)(*(_QWORD *)(a1 + 18272) + 8));
  v18 = (v63 + v17) & v16;
  *(_DWORD *)(a1 + 37944) = v18;
  *(_DWORD *)(a1 + 37948) = v18;
  v19 = v18 * (unint64_t)v18;
  v20 = v18;
  v21 = v18;
  if (*(_QWORD *)(a1 + 37936) < v19)
  {
    if (*v8)
      MEMORY[0x212BC6368](*v8, 0x1000C8000313F17);
    v22 = (8 * v19 + 31) & 0xFFFFFFFFFFFFFFE0;
    *v8 = 0;
    *(_QWORD *)(a1 + 37936) = v22 >> 3;
    *v8 = operator new(v22, (std::align_val_t)0x20uLL);
    v21 = *(_DWORD *)(a1 + 37944);
    v20 = *(_DWORD *)(a1 + 37948);
  }
  v60 = (uint64_t *)(a1 + 19888);
  if (v21 * v20)
    bzero(*v8, 8 * v21 * v20);
  v23 = v18 - v63;
  if (v18 > v63)
  {
    v59 = v18 - v63;
    v24 = v21 - v23 + (v20 - v23) * v21;
    v25 = (char *)*v8;
    v26 = (uint64_t)*v8 + 8 * v24;
    v27 = -v23;
    do
    {
      bzero(&v25[8 * v24], 8 * (v18 - v63));
      v24 += v21;
      v28 = __CFADD__(v27++, 1);
    }
    while (!v28);
    v7 = a1 + 37936;
    if (v18 != v63)
    {
      v29 = v21 + 1;
      if (v59 < 2)
      {
        v30 = 0;
LABEL_31:
        v31 = v30 - v59;
        v32 = v29 * v30;
        do
        {
          *(_QWORD *)(v26 + 8 * v32) = 0x3FF0000000000000;
          v32 += v29;
          v28 = __CFADD__(v31++, 1);
        }
        while (!v28);
        goto LABEL_34;
      }
      v30 = 0;
      if (v29 < 0)
        v53 = ~v21;
      else
        v53 = v21 + 1;
      v54 = (v59 - 1) * (unint64_t)v53;
      v55 = v21 != -1 && (unint64_t)(v59 - 1) >> 32 != 0;
      if ((_DWORD)v54)
        v56 = v29 < 0;
      else
        v56 = 0;
      if (v56)
        goto LABEL_31;
      if ((v54 & 0xFFFFFFFF00000000) != 0)
        goto LABEL_31;
      if (v55)
        goto LABEL_31;
      v57 = 0;
      v30 = v59 & 0xFFFFFFFE;
      v58 = v30;
      do
      {
        *(_QWORD *)(v26 + 8 * v57) = 0x3FF0000000000000;
        *(_QWORD *)(v26 + 8 * (v29 + v57)) = 0x3FF0000000000000;
        v57 += 2 * v21 + 2;
        v58 -= 2;
      }
      while (v58);
      if (v30 != v59)
        goto LABEL_31;
    }
  }
LABEL_34:
  if (v61)
  {
    v64 = 1;
    sub_20FB27900(v62, a1 + 37928, v60, (unsigned int **)v60, &v64);
    if (!*(_BYTE *)(a1 + 3024))
      goto LABEL_53;
LABEL_38:
    v33 = *(_DWORD *)(a1 + 3040);
    if (v33 == 1)
    {
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 160))(a1, a2);
      v41 = *(_DWORD *)(v7 + 8);
      LODWORD(v40) = *(_DWORD *)(v7 + 12);
      if (v40 >= v41)
        v40 = v41;
      else
        v40 = v40;
      if ((_DWORD)v40)
      {
        v42 = 0;
        v43 = *(double *)(a1 + 3032);
        v44 = *(double **)a2;
        v45 = v41 + 1;
        v46 = (double *)*v8;
        do
        {
          v47 = *v44++;
          v46[v42] = v43 * v47 + v46[v42];
          v42 += v45;
          --v40;
        }
        while (v40);
      }
    }
    else if (!v33)
    {
      v35 = *(_DWORD *)(v7 + 8);
      LODWORD(v34) = *(_DWORD *)(v7 + 12);
      v34 = v34 >= v35 ? v35 : v34;
      if ((_DWORD)v34)
      {
        v36 = 0;
        v37 = *(double *)(a1 + 3032);
        v38 = v35 + 1;
        v39 = (double *)*v8;
        do
        {
          v39[v36] = v37 + v39[v36];
          v36 += v38;
          --v34;
        }
        while (v34);
      }
    }
    goto LABEL_53;
  }
  v65 = 1;
  sub_20FB34340(v62, (uint64_t *)(a1 + 37928), v60, (unsigned int **)v60, &v65);
  if (*(_BYTE *)(a1 + 3024))
    goto LABEL_38;
LABEL_53:
  v48 = *(unsigned int *)(v7 + 8);
  a2[4] = v48;
  if (*((_QWORD *)a2 + 1) < v48)
  {
    if (*(_QWORD *)a2)
      MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
    v49 = (8 * v48 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = v49 >> 3;
    *(_QWORD *)a2 = operator new(v49, (std::align_val_t)0x20uLL);
  }
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 152))(a1, a2);
  v50 = a2[4];
  v51 = *(_DWORD *)(v7 + 8);
  sub_20F20CEEC(a2, v51, 1u);
  if (v51 != v50)
    bzero((void *)(*(_QWORD *)a2 + 8 * (a2[4] - (v51 - v50))), 8 * (v51 - v50));
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 56))(a1, a2))
  {
    v4 = 1;
  }
  else
  {
    sub_20F20CEEC(a2, 9 * *(_DWORD *)(*(_QWORD *)(a1 + 17560) + 12)+ 6* (*(_DWORD *)(*(_QWORD *)(a1 + 17568) + 12)+ *(_DWORD *)(*(_QWORD *)(a1 + 17552) + 12)+ *(_DWORD *)(*(_QWORD *)(a1 + 17576) + 12))+ *(_DWORD *)(*(_QWORD *)(a1 + 17592) + 12)+ 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 17616) + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 17608) + 12))+ 3* (*(_DWORD *)(*(_QWORD *)(a1 + 17600) + 12)+ *(_DWORD *)(*(_QWORD *)(a1 + 17584) + 12)+ *(_DWORD *)(*(_QWORD *)(a1 + 17624) + 12)), 1u);
    v4 = 0;
    *(_BYTE *)(a1 + 3013) = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_20FA2D81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  sub_20EDB4004((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20FA2D830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16, char a17, char a18)
{
  sub_20EDB4044((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20FA2D844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  sub_20EDB4004((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20FA2D858(uint64_t a1)
{
  return a1 + 37952;
}

double sub_20FA2D864(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  double **v4;
  _QWORD *v5;
  float64x2_t v6;
  double v7;
  double v8;
  __n128 v9;
  uint64_t v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double *v15;
  unint64_t v16;
  double *v17;
  double result;
  unint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  float64x2_t *v31;
  uint64_t i;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  double *v38;
  double *v39;
  double v40;
  double v41;
  double *v42;
  uint64_t v43;
  float64x2_t *v44;
  float64x2_t *v45;
  float64x2_t v46;
  float64x2_t v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  float64x2_t *v52;
  float64x2_t *v53;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t *v62;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  double *v68;
  double v69;

  v1 = (uint64_t)(a1 + 4463);
  if (!(((a1[4467] - a1[4466]) >> 2)
       + ((a1[4464] - a1[4463]) >> 2)
       + ((a1[4470] - a1[4469]) >> 2)
       + ((a1[4473] - a1[4472]) >> 2)
       + ((a1[4476] - a1[4475]) >> 2)
       + ((a1[4479] - a1[4478]) >> 2)
       + ((a1[4482] - a1[4481]) >> 2)
       + ((a1[4485] - a1[4484]) >> 2)
       + ((a1[4488] - a1[4487]) >> 2)
       + ((a1[4491] - a1[4490]) >> 2)))
    return 0.0;
  v3 = (uint64_t)(a1 + 4681);
  v4 = (double **)(a1 + 4693);
  v5 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(a1[2546] + 32))(a1 + 2546);
  sub_20FA5B1C0(v5, v3 + 96, v1, (uint64_t)(a1 + 2547), v6, v7, v8, v9);
  sub_20FA5A44C(a1 + 2563, (void **)v3);
  sub_20F20B6B0(v3);
  v10 = *(unsigned int *)(v3 + 112);
  if (!(_DWORD)v10)
    return -0.0;
  v11 = *v4;
  v12 = (double *)a1[2550];
  v13 = **v4;
  v14 = v13 * *v12;
  if ((_DWORD)v10 != 1)
  {
    v15 = v11 + 1;
    v16 = (v10 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v16 < 3)
    {
      v17 = (double *)a1[2550];
LABEL_12:
      v26 = v17 + 1;
      do
      {
        v27 = *v15++;
        v28 = v27;
        v29 = *v26++;
        v14 = v14 + v28 * v29;
      }
      while (v15 != &v11[v10]);
      goto LABEL_14;
    }
    v19 = v16 + 1;
    v20 = (v16 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v15 += v20;
    v17 = &v12[v20];
    v21 = (float64x2_t *)(v12 + 3);
    v22 = (float64x2_t *)(v11 + 3);
    v23 = v20;
    do
    {
      v24 = vmulq_f64(v22[-1], v21[-1]);
      v25 = vmulq_f64(*v22, *v21);
      v14 = v14 + v24.f64[0] + v24.f64[1] + v25.f64[0] + v25.f64[1];
      v21 += 2;
      v22 += 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != v20)
      goto LABEL_12;
  }
LABEL_14:
  result = -v14;
  v30 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v30)
  {
    if (v10 >= 4)
    {
      v33 = v10 & 0xFFFFFFFC;
      v62 = (float64x2_t *)(v11 + 2);
      __asm { FMOV            V1.2D, #0.5 }
      v64 = v33;
      do
      {
        v65 = vmulq_f64(vmulq_f64(v62[-1], _Q1), (float64x2_t)0);
        v66 = vmulq_f64(vmulq_f64(*v62, _Q1), (float64x2_t)0);
        result = result + v65.f64[0] + v65.f64[1] + v66.f64[0] + v66.f64[1];
        v62 += 2;
        v64 -= 4;
      }
      while (v64);
      if (v33 == v10)
        return result;
    }
    else
    {
      v33 = 0;
    }
    v67 = v10 - v33;
    v68 = &v11[v33];
    do
    {
      v69 = *v68++;
      result = result + v69 * 0.5 * 0.0;
      --v67;
    }
    while (v67);
    return result;
  }
  v31 = *(float64x2_t **)v3;
  if ((_DWORD)v30 != 1)
  {
    v34 = 0;
    v35 = 0;
    v36 = (v30 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    v37 = (v36 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v38 = &v31->f64[(v30 * v35)];
      v40 = *v38;
      v39 = v38 + 1;
      v41 = v13 * v40;
      if (v36 >= 3)
      {
        v39 += v37;
        v43 = (v36 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v44 = (float64x2_t *)(v11 + 3);
        v45 = (float64x2_t *)((char *)v31 + 8 * v34 + 24);
        do
        {
          v46 = vmulq_f64(v45[-1], v44[-1]);
          v47 = vmulq_f64(*v45, *v44);
          v41 = v41 + v46.f64[0] + v46.f64[1] + v47.f64[0] + v47.f64[1];
          v44 += 2;
          v45 += 2;
          v43 -= 4;
        }
        while (v43);
        v42 = &v11[v37];
        if (v36 + 1 == v37)
          goto LABEL_21;
      }
      else
      {
        v42 = *v4;
      }
      v48 = v42 + 1;
      do
      {
        v49 = *v39++;
        v50 = v49;
        v51 = *v48++;
        v41 = v41 + v50 * v51;
      }
      while (v39 != &v31->f64[(v30 * v35) + v30]);
LABEL_21:
      result = result + v11[v35++] * 0.5 * v41;
      v34 += v30;
      if (v35 == v10)
        return result;
    }
  }
  if (v10 < 4)
  {
    for (i = 0; i != v10; ++i)
LABEL_33:
      result = result + v11[i] * 0.5 * (v13 * v31->f64[i]);
    return result;
  }
  i = v10 & 0xFFFFFFFC;
  v52 = (float64x2_t *)(v11 + 2);
  v53 = v31 + 1;
  __asm { FMOV            V2.2D, #0.5 }
  v59 = i;
  do
  {
    v60 = vmulq_f64(vmulq_f64(v52[-1], _Q2), vmulq_n_f64(v53[-1], v13));
    v61 = vmulq_f64(vmulq_f64(*v52, _Q2), vmulq_n_f64(*v53, v13));
    result = result + v60.f64[0] + v60.f64[1] + v61.f64[0] + v61.f64[1];
    v52 += 2;
    v53 += 2;
    v59 -= 4;
  }
  while (v59);
  if (i != v10)
    goto LABEL_33;
  return result;
}

double sub_20FA2DC94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  uint64_t v5;
  uint64_t j;
  uint64_t v16;
  uint64_t v25;
  uint64_t k;
  uint64_t v27;
  uint64_t v33;
  uint64_t m;
  uint64_t v35;
  uint64_t n;
  uint64_t v42;
  uint64_t ii;
  uint64_t v47;
  uint64_t jj;
  uint64_t v49;
  uint64_t kk;
  uint64_t v54;
  uint64_t mm;
  uint64_t v60;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  double v76;

  v2 = a1[42];
  v3 = a1[43];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v5 + 4) & 2) == 0 && *(_BYTE *)(v5 + 20))
    {
      v72 = 3;
      v73 = v5 + 32;
      v74 = 0;
      v76 = 0.0;
      v75 = 0uLL;
      sub_20F053450(&v72, (double *)&v75);
      _V1.D[1] = *((_QWORD *)&v75 + 1);
      _D5 = *((_QWORD *)&v75 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v5 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v5 + 120) * *(double *)(v5 + 120);
    }
  }
  for (j = a1[54]; j != a1[55]; j += 16)
  {
    v16 = *(_QWORD *)(j + 8);
    if ((*(_BYTE *)(v16 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v16 + 20))
      {
        _Q4 = *(_OWORD *)(v16 + 32);
        _D6 = *(_QWORD *)(v16 + 40);
        __asm { FMLA            D5, D6, V4.D[1] }
        *(_QWORD *)&_Q4 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D5, D4, V3.D[1] }
        _D3 = *(_QWORD *)(v16 + 72);
        __asm { FMLA            D5, D3, V2.D[1] }
        _D2 = *(_QWORD *)(v16 + 88);
        __asm { FMLA            D5, D2, V1.D[1] }
        i = i + _D5 + *(double *)(v16 + 96) * *(double *)(v16 + 96);
      }
    }
  }
  v25 = a1[66];
  for (k = a1[67]; v25 != k; v25 += 16)
  {
    v27 = *(_QWORD *)(v25 + 8);
    if ((*(_BYTE *)(v27 + 4) & 2) == 0 && *(_BYTE *)(v27 + 20))
    {
      v72 = 3;
      v73 = v27 + 32;
      v74 = 0;
      v76 = 0.0;
      v75 = 0uLL;
      sub_20F053450(&v72, (double *)&v75);
      _V1.D[1] = *((_QWORD *)&v75 + 1);
      _D5 = *((_QWORD *)&v75 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v27 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v27 + 120) * *(double *)(v27 + 120);
    }
  }
  v33 = a1[78];
  for (m = a1[79]; v33 != m; v33 += 16)
  {
    v35 = *(_QWORD *)(v33 + 8);
    if ((*(_BYTE *)(v35 + 4) & 2) == 0 && *(_BYTE *)(v35 + 20))
    {
      v72 = 3;
      v73 = v35 + 32;
      v74 = 0;
      v76 = 0.0;
      v75 = 0uLL;
      sub_20F053450(&v72, (double *)&v75);
      _V1.D[1] = *((_QWORD *)&v75 + 1);
      _D5 = *((_QWORD *)&v75 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v35 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v35 + 120) * *(double *)(v35 + 120);
    }
  }
  for (n = a1[90]; n != a1[91]; n += 16)
  {
    v42 = *(_QWORD *)(n + 8);
    if ((*(_BYTE *)(v42 + 4) & 2) == 0 && *(_BYTE *)(v42 + 20))
    {
      _Q1 = *(_OWORD *)(v42 + 32);
      _D3 = *(_QWORD *)(v42 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + *(double *)(v42 + 48) * *(double *)(v42 + 48);
    }
  }
  for (ii = a1[102]; ii != a1[103]; ii += 16)
  {
    v47 = *(_QWORD *)(ii + 8);
    if ((*(_BYTE *)(v47 + 4) & 2) == 0 && *(_BYTE *)(v47 + 20))
      i = i + *(double *)(v47 + 32) * *(double *)(v47 + 32);
  }
  for (jj = a1[114]; jj != a1[115]; jj += 16)
  {
    v49 = *(_QWORD *)(jj + 8);
    if ((*(_BYTE *)(v49 + 4) & 2) == 0 && *(_BYTE *)(v49 + 20))
    {
      _Q1 = *(_OWORD *)(v49 + 32);
      _D3 = *(_QWORD *)(v49 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + *(double *)(v49 + 48) * *(double *)(v49 + 48);
    }
  }
  for (kk = a1[126]; kk != a1[127]; kk += 16)
  {
    v54 = *(_QWORD *)(kk + 8);
    if ((*(_BYTE *)(v54 + 4) & 2) == 0 && *(_BYTE *)(v54 + 20))
    {
      _Q1 = *(_OWORD *)(v54 + 32);
      _D3 = *(_QWORD *)(v54 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v54 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  for (mm = a1[138]; mm != a1[139]; mm += 16)
  {
    v60 = *(_QWORD *)(mm + 8);
    if ((*(_BYTE *)(v60 + 4) & 2) == 0 && *(_BYTE *)(v60 + 20))
    {
      _Q1 = *(_OWORD *)(v60 + 32);
      _D3 = *(_QWORD *)(v60 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v60 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  v65 = a1[150];
  v66 = a1[151];
  while (v65 != v66)
  {
    v67 = *(_QWORD *)(v65 + 8);
    if ((*(_BYTE *)(v67 + 4) & 2) == 0 && *(_BYTE *)(v67 + 20))
    {
      v75 = 0uLL;
      v76 = 0.0;
      sub_20E9733B8((float64x2_t *)(v67 + 32), (double *)&v75);
      _V1.D[1] = *((_QWORD *)&v75 + 1);
      _D3 = *((_QWORD *)&v75 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + v76 * v76;
    }
    v65 += 16;
  }
  return i;
}

uint64_t sub_20FA2E0D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double *v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  __int128 *v16;
  _QWORD *v17;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  __int128 *v48;
  _QWORD *v49;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  __int128 *v61;
  _QWORD *v62;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int *v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int *v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t v119;
  double *v120;
  float64x2_t v124;
  float64x2_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t i;
  unsigned int *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  float64x2_t v133;
  double v137;
  __double2 v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  float64x2_t v151;
  double v152;
  float64x2_t v153;
  double v154;
  float64x2_t v155;
  float64x2_t v156;
  uint64_t v157;
  uint64_t v158;
  float64x2_t *v159;
  uint64_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  uint64_t v167;
  float64x2_t v168;
  float64x2_t v169;
  uint64_t v170;
  uint64_t j;
  unsigned int *v172;
  uint64_t v173;
  float64x2_t v174;
  __int128 v175;
  uint64_t v176;
  double v180;
  __double2 v181;
  float64x2_t v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  float64x2_t v192;
  double v193;
  float64x2_t v194;
  float64x2_t v195;
  double v196;
  float64x2_t v197;
  double v198;
  float64x2_t v199;
  uint64_t v200;
  uint64_t k;
  unsigned int *v202;
  uint64_t v203;
  float64x2_t v204;
  __int128 v205;
  uint64_t v206;
  double v210;
  __double2 v211;
  float64x2_t v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  float64x2_t v222;
  double v223;
  float64x2_t v224;
  float64x2_t v225;
  double v226;
  float64x2_t v227;
  double v228;
  float64x2_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  uint64_t v233;
  float64x2_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  double *v239;
  uint64_t v240;
  double v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  float64x2_t *v245;
  uint64_t v246;
  float64x2_t v247;
  float64x2_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int *v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  float64x2_t *v256;
  float64x2_t *v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int *v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  float64x2_t v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  float64x2_t v275;
  float64x2_t *v276;
  __n128 v277;
  uint64_t **m;
  uint64_t v279;
  uint64_t n;
  double v281;
  double cosval;
  __double2 v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  float64x2_t v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  float64x2_t v299;
  float64x2_t v300;
  double v301;
  double v303;
  double v305;
  double v307;
  float64x2_t v309;
  double v311;
  unsigned int *v314;
  uint64_t v315;
  __int128 v316;
  __int128 v317;
  uint64_t v318;
  double v322;
  uint64_t result;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  double v327;
  double v328;
  double v329;

  kdebug_trace();
  v4 = *(_QWORD *)(a1 + 19496);
  v5 = *(_QWORD *)(a1 + 19504);
  if (v4 != v5)
  {
    v6 = *a2;
    do
    {
      v8 = *(double **)v4;
      if (**(_DWORD **)v4 != -1)
      {
        v9 = *(double *)(v4 + 16);
        v10 = *(_QWORD **)(v4 + 136);
        v11 = *(_QWORD *)(v4 + 24);
        v12 = *(_QWORD *)(v4 + 56);
        if (v12)
        {
          v13 = v10[49];
          v14 = (unsigned int *)(v13 + 16 * (v12 + v11));
          v15 = (unsigned int *)(v13 + 16 * v11);
          do
          {
            v16 = (__int128 *)(v10[9] + 8 * *((_QWORD *)v15 + 1));
            v17 = (_QWORD *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 19888) + 4 * *v15));
            _Q2 = v16[1];
            _Q1 = v16[2];
            _Q3 = *v16;
            _D5 = v17[1];
            __asm { FMLA            D7, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = v17[3];
            __asm { FMLA            D7, D3, V2.D[1] }
            *(_QWORD *)&_Q2 = v17[5];
            __asm { FMLA            D7, D2, V1.D[1] }
            v9 = v9 - _D7;
            v15 += 4;
          }
          while (v15 != v14);
        }
        v29 = *(_QWORD *)(v4 + 64);
        if (v29)
        {
          v30 = v10[52];
          v31 = (unsigned int *)(v30 + 16 * (v29 + v11));
          v32 = (unsigned int *)(v30 + 16 * v11);
          do
          {
            v33 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 19912) + 4 * *v32);
            v34 = v10[12] + 8 * *((_QWORD *)v32 + 1);
            _Q3 = *(_OWORD *)v34;
            _Q2 = *(_OWORD *)(v34 + 16);
            _Q16 = *(_OWORD *)(v34 + 32);
            _Q7 = *(_OWORD *)(v34 + 48);
            _D5 = *(_QWORD *)(v33 + 8);
            __asm { FMLA            D6, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = *(_QWORD *)(v33 + 24);
            __asm { FMLA            D6, D3, V2.D[1] }
            *(_QWORD *)&_Q2 = *(_QWORD *)(v33 + 40);
            __asm { FMLA            D6, D2, V16.D[1] }
            *(_QWORD *)&_Q3 = *(_QWORD *)(v33 + 56);
            __asm { FMLA            D6, D3, V7.D[1] }
            v9 = v9 - (_D6 + *(double *)(v34 + 64) * *(double *)(v33 + 64));
            v32 += 4;
          }
          while (v32 != v31);
        }
        v44 = *(_QWORD *)(v4 + 72);
        if (v44)
        {
          v45 = v10[55];
          v46 = (unsigned int *)(v45 + 16 * (v44 + v11));
          v47 = (unsigned int *)(v45 + 16 * v11);
          do
          {
            v48 = (__int128 *)(v10[15] + 8 * *((_QWORD *)v47 + 1));
            v49 = (_QWORD *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 19936) + 4 * *v47));
            _Q2 = v48[1];
            _Q1 = v48[2];
            _Q3 = *v48;
            _D5 = v49[1];
            __asm { FMLA            D7, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = v49[3];
            __asm { FMLA            D7, D3, V2.D[1] }
            *(_QWORD *)&_Q2 = v49[5];
            __asm { FMLA            D7, D2, V1.D[1] }
            v9 = v9 - _D7;
            v47 += 4;
          }
          while (v47 != v46);
        }
        v57 = *(_QWORD *)(v4 + 80);
        if (v57)
        {
          v58 = v10[58];
          v59 = (unsigned int *)(v58 + 16 * (v57 + v11));
          v60 = (unsigned int *)(v58 + 16 * v11);
          do
          {
            v61 = (__int128 *)(v10[18] + 8 * *((_QWORD *)v60 + 1));
            v62 = (_QWORD *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 19960) + 4 * *v60));
            _Q2 = v61[1];
            _Q1 = v61[2];
            _Q3 = *v61;
            _D5 = v62[1];
            __asm { FMLA            D7, D5, V3.D[1] }
            *(_QWORD *)&_Q3 = v62[3];
            __asm { FMLA            D7, D3, V2.D[1] }
            *(_QWORD *)&_Q2 = v62[5];
            __asm { FMLA            D7, D2, V1.D[1] }
            v9 = v9 - _D7;
            v60 += 4;
          }
          while (v60 != v59);
        }
        v70 = *(_QWORD *)(v4 + 88);
        if (v70)
        {
          v71 = v10[61];
          v72 = (unsigned int *)(v71 + 16 * (v70 + v11));
          v73 = (unsigned int *)(v71 + 16 * v11);
          do
          {
            v74 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 19984) + 4 * *v73);
            v75 = v10[21] + 8 * *((_QWORD *)v73 + 1);
            _Q2 = *(_OWORD *)v75;
            _D4 = *(_QWORD *)(v74 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            v9 = v9 - (_D5 + *(double *)(v75 + 16) * *(double *)(v74 + 16));
            v73 += 4;
          }
          while (v73 != v72);
        }
        v79 = *(_QWORD *)(v4 + 96);
        if (v79)
        {
          v80 = v10[64];
          v81 = (unsigned int *)(v80 + 16 * (v79 + v11));
          v82 = (unsigned int *)(v80 + 16 * v11);
          do
          {
            v9 = v9
               - *(double *)(v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 20008) + 4 * *v82))
               * *(double *)(v10[24] + 8 * *((_QWORD *)v82 + 1));
            v82 += 4;
          }
          while (v82 != v81);
        }
        v83 = *(_QWORD *)(v4 + 104);
        if (v83)
        {
          v84 = v10[67];
          v85 = (unsigned int *)(v84 + 16 * (v83 + v11));
          v86 = (unsigned int *)(v84 + 16 * v11);
          do
          {
            v87 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 20032) + 4 * *v86);
            v88 = v10[27] + 8 * *((_QWORD *)v86 + 1);
            _Q2 = *(_OWORD *)v88;
            _D4 = *(_QWORD *)(v87 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            v9 = v9 - (_D5 + *(double *)(v88 + 16) * *(double *)(v87 + 16));
            v86 += 4;
          }
          while (v86 != v85);
        }
        v92 = *(_QWORD *)(v4 + 112);
        if (v92)
        {
          v93 = v10[70];
          v94 = (unsigned int *)(v93 + 16 * (v92 + v11));
          v95 = (unsigned int *)(v93 + 16 * v11);
          do
          {
            v96 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 20056) + 4 * *v95);
            v97 = (__int128 *)(v10[30] + 8 * *((_QWORD *)v95 + 1));
            _Q2 = *v97;
            _Q1 = v97[1];
            _D4 = *(_QWORD *)(v96 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            *(_QWORD *)&_Q2 = *(_QWORD *)(v96 + 24);
            __asm { FMLA            D5, D2, V1.D[1] }
            v9 = v9 - _D5;
            v95 += 4;
          }
          while (v95 != v94);
        }
        v103 = *(_QWORD *)(v4 + 120);
        if (v103)
        {
          v104 = v10[73];
          v105 = (unsigned int *)(v104 + 16 * (v103 + v11));
          v106 = (unsigned int *)(v104 + 16 * v11);
          do
          {
            v107 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 20080) + 4 * *v106);
            v108 = (__int128 *)(v10[33] + 8 * *((_QWORD *)v106 + 1));
            _Q2 = *v108;
            _Q1 = v108[1];
            _D4 = *(_QWORD *)(v107 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            *(_QWORD *)&_Q2 = *(_QWORD *)(v107 + 24);
            __asm { FMLA            D5, D2, V1.D[1] }
            v9 = v9 - _D5;
            v106 += 4;
          }
          while (v106 != v105);
        }
        v114 = *(_QWORD *)(v4 + 128);
        if (v114)
        {
          v115 = v10[76];
          v116 = (unsigned int *)(v115 + 16 * (v114 + v11));
          v117 = (unsigned int *)(v115 + 16 * v11);
          v118 = v10[36];
          do
          {
            v119 = v6 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 20104) + 4 * *v117);
            v120 = (double *)(v118 + 8 * *((_QWORD *)v117 + 1));
            _Q2 = *(_OWORD *)v120;
            _D4 = *(_QWORD *)(v119 + 8);
            __asm { FMLA            D5, D4, V2.D[1] }
            v9 = v9 - (_D5 + v120[2] * *(double *)(v119 + 16));
            v117 += 4;
          }
          while (v117 != v116);
        }
        v7 = v8[4];
        v8[4] = v7 + v9 * *(double *)(v4 + 8);
        v8[5] = v7;
      }
      v4 += 144;
    }
    while (v4 != v5);
  }
  kdebug_trace();
  kdebug_trace();
  v126 = *(_QWORD **)(a1 + 18600);
  v127 = v126[1];
  for (i = v126[2]; v127 != i; v127 += 16)
  {
    v129 = *(unsigned int **)(v127 + 8);
    v130 = *v129;
    if ((_DWORD)v130 != -1)
    {
      v133 = *((float64x2_t *)v129 + 2);
      *(_OWORD *)(v129 + 50) = *((_OWORD *)v129 + 3);
      v131 = *((_OWORD *)v129 + 5);
      *(_OWORD *)(v129 + 54) = *((_OWORD *)v129 + 4);
      *(_OWORD *)(v129 + 58) = v131;
      *((_QWORD *)v129 + 31) = *((_QWORD *)v129 + 12);
      *(float64x2_t *)(v129 + 46) = v133;
      *((_OWORD *)v129 + 16) = *(_OWORD *)(v129 + 26);
      *((_QWORD *)v129 + 34) = *((_QWORD *)v129 + 15);
      v132 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 19888) + 4 * v130);
      v133.f64[0] = *(float64_t *)(v132 + 16);
      _Q2 = *(float64x2_t *)v132;
      _D3 = *(_QWORD *)(v132 + 8);
      __asm { FMLA            D0, D3, V2.D[1] }
      v137 = sqrt(_D0 + v133.f64[0] * v133.f64[0]);
      v124.f64[0] = 1.0 / v137;
      if (v137 == 0.0)
        v124.f64[0] = 1.0;
      v324 = vmulq_n_f64(_Q2, v124.f64[0]);
      v327 = vmulq_f64(v133, v124).f64[0];
      v138 = __sincos_stret(v137);
      v125 = v324;
      v124.f64[0] = v138.__cosval + (1.0 - v138.__cosval) * vmuld_n_f64(v125.f64[0], v125.f64[0]);
      v139 = (1.0 - v138.__cosval) * vmuld_lane_f64(v125.f64[0], v125, 1);
      v140 = v139 - v138.__sinval * v327;
      v141 = (1.0 - v138.__cosval) * vmuld_n_f64(v324.f64[0], v327);
      v142 = vmuld_lane_f64(v138.__sinval, v324, 1);
      v143 = v142 + v141;
      v144 = v138.__sinval * v327 + v139;
      v145 = v138.__cosval + (1.0 - v138.__cosval) * vmuld_lane_f64(v324.f64[1], v324, 1);
      v146 = (1.0 - v138.__cosval) * vmuld_lane_f64(v327, v324, 1);
      v125.f64[0] = v146 - v138.__sinval * v324.f64[0];
      v147 = v141 - v142;
      v148 = v138.__sinval * v324.f64[0] + v146;
      v149 = v138.__cosval + (1.0 - v138.__cosval) * vmuld_n_f64(v327, v327);
      v150 = *((double *)v129 + 6);
      v151 = *((float64x2_t *)v129 + 2);
      v152 = *((double *)v129 + 9);
      v153 = *(float64x2_t *)(v129 + 14);
      v154 = *((double *)v129 + 12);
      v155 = *((float64x2_t *)v129 + 5);
      *((float64x2_t *)v129 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v151, v124.f64[0]), v153, v144), v155, v147);
      *((double *)v129 + 6) = v150 * v124.f64[0] + v152 * v144 + v154 * v147;
      *(float64x2_t *)(v129 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v151, v140), v153, v145), v155, v148);
      *((double *)v129 + 9) = v150 * v140 + v152 * v145 + v154 * v148;
      *((float64x2_t *)v129 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v151, v143), v153, v125.f64[0]), v155, v149);
      *((double *)v129 + 12) = v150 * v143 + v152 * v125.f64[0] + v154 * v149;
      v156.f64[0] = *((float64_t *)v129 + 15);
      v124.f64[0] = *(float64_t *)(v132 + 40);
      *(float64x2_t *)(v129 + 26) = vaddq_f64(*(float64x2_t *)(v129 + 26), *(float64x2_t *)(v132 + 24));
      *((_QWORD *)v129 + 15) = *(_OWORD *)&vaddq_f64(v156, v124);
      *((_BYTE *)v129 + 128) = 0;
    }
  }
  v157 = v126[13];
  v158 = v126[14];
  while (v157 != v158)
  {
    v159 = *(float64x2_t **)(v157 + 8);
    v160 = LODWORD(v159->f64[0]);
    if ((_DWORD)v160 != -1)
    {
      v161 = v159[3];
      v163 = v159[4];
      v162 = v159[5];
      v159[9] = v163;
      v159[10] = v162;
      v159[11].f64[0] = v159[6].f64[0];
      v164 = v159[2];
      v165 = v159[3];
      v166 = v164;
      v159[7] = v164;
      v159[8] = v165;
      v167 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 19912) + 4 * v160);
      v164.f64[0] = v159[6].f64[0];
      v125.f64[0] = *(float64_t *)(v167 + 64);
      v168 = vaddq_f64(v159[5], *(float64x2_t *)(v167 + 48));
      v124 = vaddq_f64(v163, *(float64x2_t *)(v167 + 32));
      v169 = vaddq_f64(v161, *(float64x2_t *)(v167 + 16));
      v159[2] = vaddq_f64(v166, *(float64x2_t *)v167);
      v159[3] = v169;
      v159[4] = v124;
      v159[5] = v168;
      *(_QWORD *)&v159[6].f64[0] = *(_OWORD *)&vaddq_f64(v164, v125);
      LOBYTE(v159[6].f64[1]) = 0;
    }
    v157 += 16;
  }
  v170 = v126[25];
  for (j = v126[26]; v170 != j; v170 += 16)
  {
    v172 = *(unsigned int **)(v170 + 8);
    v173 = *v172;
    if ((_DWORD)v173 != -1)
    {
      v174 = *((float64x2_t *)v172 + 3);
      *(_OWORD *)(v172 + 34) = *((_OWORD *)v172 + 2);
      v175 = *((_OWORD *)v172 + 4);
      *(_OWORD *)(v172 + 46) = *((_OWORD *)v172 + 5);
      *(_OWORD *)(v172 + 42) = v175;
      *((_QWORD *)v172 + 25) = *((_QWORD *)v172 + 12);
      *(float64x2_t *)(v172 + 38) = v174;
      *((_OWORD *)v172 + 13) = *(_OWORD *)(v172 + 26);
      *((_QWORD *)v172 + 28) = *((_QWORD *)v172 + 15);
      if (*((_BYTE *)v172 + 20))
      {
        if (*((_BYTE *)v172 + 129))
        {
          v176 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 19936) + 4 * v173);
          v174.f64[0] = *(float64_t *)(v176 + 16);
          _Q2 = *(float64x2_t *)v176;
          _D3 = *(_QWORD *)(v176 + 8);
          __asm { FMLA            D0, D3, V2.D[1] }
          v180 = sqrt(_D0 + v174.f64[0] * v174.f64[0]);
          v124.f64[0] = 1.0 / v180;
          if (v180 == 0.0)
            v124.f64[0] = 1.0;
          v325 = vmulq_n_f64(_Q2, v124.f64[0]);
          v328 = vmulq_f64(v174, v124).f64[0];
          v181 = __sincos_stret(v180);
          v182 = v325;
          v124.f64[0] = v181.__cosval + (1.0 - v181.__cosval) * vmuld_n_f64(v182.f64[0], v182.f64[0]);
          v183 = (1.0 - v181.__cosval) * vmuld_lane_f64(v182.f64[0], v182, 1);
          v184 = v183 - v181.__sinval * v328;
          v185 = (1.0 - v181.__cosval) * vmuld_n_f64(v325.f64[0], v328);
          v186 = vmuld_lane_f64(v181.__sinval, v325, 1);
          v187 = v186 + v185;
          v188 = v181.__sinval * v328 + v183;
          v189 = v181.__cosval + (1.0 - v181.__cosval) * vmuld_lane_f64(v325.f64[1], v325, 1);
          v190 = (1.0 - v181.__cosval) * vmuld_lane_f64(v328, v325, 1);
          v182.f64[0] = v190 - v181.__sinval * v325.f64[0];
          v191 = v185 - v186;
          v192.f64[0] = v181.__sinval * v325.f64[0] + v190;
          v193 = v181.__cosval + (1.0 - v181.__cosval) * vmuld_n_f64(v328, v328);
          v194.f64[0] = *((float64_t *)v172 + 6);
          v195 = *((float64x2_t *)v172 + 2);
          v196 = *((double *)v172 + 9);
          v197 = *(float64x2_t *)(v172 + 14);
          v198 = *((double *)v172 + 12);
          v199 = *((float64x2_t *)v172 + 5);
          *((float64x2_t *)v172 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v195, v124.f64[0]), v197, v188), v199, v191);
          *((double *)v172 + 6) = v194.f64[0] * v124.f64[0] + v196 * v188 + v198 * v191;
          *(float64x2_t *)(v172 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v195, v184), v197, v189), v199, v192.f64[0]);
          *((double *)v172 + 9) = v194.f64[0] * v184 + v196 * v189 + v198 * v192.f64[0];
          *((float64x2_t *)v172 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v195, v187), v197, v182.f64[0]), v199, v193);
          *((double *)v172 + 12) = v194.f64[0] * v187 + v196 * v182.f64[0] + v198 * v193;
          if (*((_BYTE *)v172 + 128))
          {
            v192.f64[0] = *((float64_t *)v172 + 15);
            v194.f64[0] = *(float64_t *)(v176 + 40);
            v124 = *(float64x2_t *)(v176 + 24);
            *(float64x2_t *)(v172 + 26) = vaddq_f64(*(float64x2_t *)(v172 + 26), v124);
            *((_QWORD *)v172 + 15) = *(_OWORD *)&vaddq_f64(v192, v194);
          }
        }
      }
    }
  }
  v200 = v126[37];
  for (k = v126[38]; v200 != k; v200 += 16)
  {
    v202 = *(unsigned int **)(v200 + 8);
    v203 = *v202;
    if ((_DWORD)v203 != -1)
    {
      v204 = *((float64x2_t *)v202 + 3);
      *(_OWORD *)(v202 + 34) = *((_OWORD *)v202 + 2);
      v205 = *((_OWORD *)v202 + 4);
      *(_OWORD *)(v202 + 46) = *((_OWORD *)v202 + 5);
      *(_OWORD *)(v202 + 42) = v205;
      *((_QWORD *)v202 + 25) = *((_QWORD *)v202 + 12);
      *(float64x2_t *)(v202 + 38) = v204;
      *((_OWORD *)v202 + 13) = *(_OWORD *)(v202 + 26);
      *((_QWORD *)v202 + 28) = *((_QWORD *)v202 + 15);
      if (*((_BYTE *)v202 + 20))
      {
        if (*((_BYTE *)v202 + 129))
        {
          v206 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 19960) + 4 * v203);
          v204.f64[0] = *(float64_t *)(v206 + 16);
          _Q2 = *(float64x2_t *)v206;
          _D3 = *(_QWORD *)(v206 + 8);
          __asm { FMLA            D0, D3, V2.D[1] }
          v210 = sqrt(_D0 + v204.f64[0] * v204.f64[0]);
          v124.f64[0] = 1.0 / v210;
          if (v210 == 0.0)
            v124.f64[0] = 1.0;
          v326 = vmulq_n_f64(_Q2, v124.f64[0]);
          v329 = vmulq_f64(v204, v124).f64[0];
          v211 = __sincos_stret(v210);
          v212 = v326;
          v124.f64[0] = v211.__cosval + (1.0 - v211.__cosval) * vmuld_n_f64(v212.f64[0], v212.f64[0]);
          v213 = (1.0 - v211.__cosval) * vmuld_lane_f64(v212.f64[0], v212, 1);
          v214 = v213 - v211.__sinval * v329;
          v215 = (1.0 - v211.__cosval) * vmuld_n_f64(v326.f64[0], v329);
          v216 = vmuld_lane_f64(v211.__sinval, v326, 1);
          v217 = v216 + v215;
          v218 = v211.__sinval * v329 + v213;
          v219 = v211.__cosval + (1.0 - v211.__cosval) * vmuld_lane_f64(v326.f64[1], v326, 1);
          v220 = (1.0 - v211.__cosval) * vmuld_lane_f64(v329, v326, 1);
          v212.f64[0] = v220 - v211.__sinval * v326.f64[0];
          v221 = v215 - v216;
          v222.f64[0] = v211.__sinval * v326.f64[0] + v220;
          v223 = v211.__cosval + (1.0 - v211.__cosval) * vmuld_n_f64(v329, v329);
          v224.f64[0] = *((float64_t *)v202 + 6);
          v225 = *((float64x2_t *)v202 + 2);
          v226 = *((double *)v202 + 9);
          v227 = *(float64x2_t *)(v202 + 14);
          v228 = *((double *)v202 + 12);
          v229 = *((float64x2_t *)v202 + 5);
          *((float64x2_t *)v202 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v225, v124.f64[0]), v227, v218), v229, v221);
          *((double *)v202 + 6) = v224.f64[0] * v124.f64[0] + v226 * v218 + v228 * v221;
          *(float64x2_t *)(v202 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v225, v214), v227, v219), v229, v222.f64[0]);
          *((double *)v202 + 9) = v224.f64[0] * v214 + v226 * v219 + v228 * v222.f64[0];
          *((float64x2_t *)v202 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v225, v217), v227, v212.f64[0]), v229, v223);
          *((double *)v202 + 12) = v224.f64[0] * v217 + v226 * v212.f64[0] + v228 * v223;
          if (*((_BYTE *)v202 + 128))
          {
            v222.f64[0] = *((float64_t *)v202 + 15);
            v224.f64[0] = *(float64_t *)(v206 + 40);
            v124 = *(float64x2_t *)(v206 + 24);
            *(float64x2_t *)(v202 + 26) = vaddq_f64(*(float64x2_t *)(v202 + 26), v124);
            *((_QWORD *)v202 + 15) = *(_OWORD *)&vaddq_f64(v222, v224);
          }
        }
      }
    }
  }
  v230 = v126[49];
  v231 = v126[50];
  while (v230 != v231)
  {
    v232 = *(unsigned int **)(v230 + 8);
    v233 = *v232;
    if ((_DWORD)v233 != -1)
    {
      v234 = *((float64x2_t *)v232 + 2);
      *(float64x2_t *)(v232 + 14) = v234;
      *((_QWORD *)v232 + 9) = *((_QWORD *)v232 + 6);
      v235 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 19984) + 4 * v233);
      v234.f64[0] = *((float64_t *)v232 + 6);
      v124.f64[0] = *(float64_t *)(v235 + 16);
      *((float64x2_t *)v232 + 2) = vaddq_f64(*((float64x2_t *)v232 + 2), *(float64x2_t *)v235);
      *((_QWORD *)v232 + 6) = *(_OWORD *)&vaddq_f64(v234, v124);
    }
    v230 += 16;
  }
  v236 = v126[61];
  v237 = v126[62];
  if (v236 != v237)
  {
    v238 = *a2;
    do
    {
      v239 = *(double **)(v236 + 8);
      v240 = *(unsigned int *)v239;
      if ((_DWORD)v240 != -1)
      {
        v241 = v239[4];
        v242 = *(unsigned int *)(*(_QWORD *)(a1 + 20008) + 4 * v240);
        v239[6] = v241;
        v239[4] = v241 + *(double *)(v238 + 8 * v242);
        *((_BYTE *)v239 + 40) = 0;
      }
      v236 += 16;
    }
    while (v236 != v237);
  }
  v243 = v126[73];
  v244 = v126[74];
  while (v243 != v244)
  {
    v245 = *(float64x2_t **)(v243 + 8);
    v246 = LODWORD(v245->f64[0]);
    if ((_DWORD)v246 != -1)
    {
      v247 = v245[2];
      v245[4] = v247;
      v245[5].f64[0] = v245[3].f64[0];
      if (LOBYTE(v245[3].f64[1]))
      {
        v248 = v245 + 2;
        v249 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 20032) + 4 * v246);
        v247.f64[0] = v248[1].f64[0];
        v124.f64[0] = *(float64_t *)(v249 + 16);
        *v248 = vaddq_f64(*v248, *(float64x2_t *)v249);
        *(_QWORD *)&v248[1].f64[0] = *(_OWORD *)&vaddq_f64(v247, v124);
      }
    }
    v243 += 16;
  }
  v250 = v126[85];
  v251 = v126[86];
  while (v250 != v251)
  {
    v252 = *(unsigned int **)(v250 + 8);
    v253 = *v252;
    if ((_DWORD)v253 != -1)
    {
      v254 = *((_OWORD *)v252 + 2);
      *(_OWORD *)(v252 + 42) = *((_OWORD *)v252 + 3);
      *(_OWORD *)(v252 + 38) = v254;
      *((_QWORD *)v252 + 23) = *((_QWORD *)v252 + 8);
      *((_BYTE *)v252 + 192) = *((_BYTE *)v252 + 72);
      if (*((_BYTE *)v252 + 20))
      {
        if (*((_BYTE *)v252 + 144))
        {
          v255 = (uint64_t)(v252 + 4);
          v256 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 20056) + 4 * v253));
          v258 = *((float64x2_t *)v252 + 2);
          v259 = *((float64x2_t *)v252 + 3);
          v257 = (float64x2_t *)(v252 + 8);
          v260 = vaddq_f64(v259, v256[1]);
          *v257 = vaddq_f64(v258, *v256);
          v257[1] = v260;
          sub_20F6169C8(v255);
          sub_20F616F2C(v255);
        }
      }
    }
    v250 += 16;
  }
  v261 = v126[97];
  v262 = v126[98];
  while (v261 != v262)
  {
    v263 = *(unsigned int **)(v261 + 8);
    v264 = *v263;
    if ((_DWORD)v264 != -1)
    {
      v265 = *((_OWORD *)v263 + 5);
      v266 = *((_OWORD *)v263 + 7);
      v267 = *((_OWORD *)v263 + 8);
      *(_OWORD *)(v263 + 98) = *((_OWORD *)v263 + 6);
      *(_OWORD *)(v263 + 102) = v266;
      v268 = *((float64x2_t *)v263 + 3);
      *(_OWORD *)(v263 + 90) = *((_OWORD *)v263 + 4);
      *(_OWORD *)(v263 + 94) = v265;
      v269 = *((_OWORD *)v263 + 9);
      v270 = *((_OWORD *)v263 + 11);
      v271 = *((_OWORD *)v263 + 12);
      *(_OWORD *)(v263 + 114) = *((_OWORD *)v263 + 10);
      *(_OWORD *)(v263 + 118) = v270;
      *(_OWORD *)(v263 + 106) = v267;
      *(_OWORD *)(v263 + 110) = v269;
      v272 = *((_OWORD *)v263 + 15);
      v273 = *((_OWORD *)v263 + 13);
      *(_OWORD *)(v263 + 130) = *((_OWORD *)v263 + 14);
      *(_OWORD *)(v263 + 134) = v272;
      *(_OWORD *)(v263 + 122) = v271;
      *(_OWORD *)(v263 + 126) = v273;
      v274 = *((_OWORD *)v263 + 3);
      v275 = *((float64x2_t *)v263 + 2);
      *(float64x2_t *)(v263 + 82) = v275;
      *(_OWORD *)(v263 + 86) = v274;
      v276 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 20080) + 4 * v264));
      v277 = (__n128)vaddq_f64(v268, v276[1]);
      *((float64x2_t *)v263 + 2) = vaddq_f64(v275, *v276);
      *((__n128 *)v263 + 3) = v277;
      for (m = (uint64_t **)*((_QWORD *)v263 + 37); m; m = (uint64_t **)*m)
        v277.n128_f64[0] = sub_20F6182A0((char *)m[5], (float64x2_t *)v263 + 2, v277);
      sub_20F6178A8((uint64_t)(v263 + 4));
    }
    v261 += 16;
  }
  v279 = v126[109];
  for (n = v126[110]; v279 != n; v279 += 16)
  {
    v314 = *(unsigned int **)(v279 + 8);
    v315 = *v314;
    if ((_DWORD)v315 != -1)
    {
      *((_QWORD *)v314 + 30) = *((_QWORD *)v314 + 12);
      v316 = *((_OWORD *)v314 + 5);
      *((_OWORD *)v314 + 13) = *((_OWORD *)v314 + 4);
      *((_OWORD *)v314 + 14) = v316;
      v317 = *((_OWORD *)v314 + 3);
      *((_OWORD *)v314 + 11) = *((_OWORD *)v314 + 2);
      *((_OWORD *)v314 + 12) = v317;
      if (*((_BYTE *)v314 + 20))
      {
        v318 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 20104) + 4 * v315);
        _Q1 = *(_OWORD *)v318;
        _D3 = *(_QWORD *)(v318 + 8);
        __asm { FMLA            D2, D3, V1.D[1] }
        v322 = _D2 + *(double *)(v318 + 16) * *(double *)(v318 + 16);
        if (v322 >= 0.0000002635)
        {
          v281 = sqrt(v322);
          v283 = __sincos_stret(v281);
          cosval = v283.__cosval;
          v284 = v283.__sinval / v281;
          v285 = 1.0 / v322 * (1.0 - v283.__cosval);
        }
        else
        {
          v285 = 0.5 - v322 * (v322 / -720.0 + 0.0416666667);
          v284 = 1.0 - v322 * (0.166666667 - v322 * (v322 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v322 * v285;
        }
        v286 = *(double *)(v318 + 8);
        v287 = v285 * *(double *)v318;
        v288 = v285 * v286;
        v289 = *(double *)(v318 + 16);
        v290.f64[0] = cosval + *(double *)v318 * v287;
        v291 = cosval + v286 * (v285 * v286);
        v292 = cosval + v289 * (v285 * v289);
        v293 = v287 * v286;
        v294 = v287 * v289;
        v295 = v288 * v289;
        v296 = v284 * *(double *)v318;
        v297 = v284 * v286;
        v298 = v284 * v289;
        v299.f64[0] = v293 - v298;
        v300.f64[0] = v297 + v294;
        v290.f64[1] = v293 + v298;
        v301 = v295 - v296;
        v299.f64[1] = v291;
        _D3 = v296 + v295;
        v300.f64[1] = v301;
        v303 = *((double *)v314 + 6);
        _Q4 = *((float64x2_t *)v314 + 2);
        v305 = *((double *)v314 + 9);
        _Q6 = *(float64x2_t *)(v314 + 14);
        v307 = *((double *)v314 + 12);
        _Q19 = *((float64x2_t *)v314 + 5);
        v309 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v290, _Q4.f64[0]), v299, _Q4, 1), v300, v303);
        __asm { FMLA            D21, D3, V4.D[1] }
        v311 = _D21 + v292 * v303;
        __asm
        {
          FMLA            D21, D3, V6.D[1]
          FMLA            D2, D3, V19.D[1]
        }
        *((double *)v314 + 6) = v311;
        *((float64x2_t *)v314 + 2) = v309;
        *((double *)v314 + 9) = _D21 + v292 * v305;
        *(float64x2_t *)(v314 + 14) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v290, _Q6.f64[0]), v299, _Q6, 1), v300, v305);
        *((double *)v314 + 12) = _D2 + v292 * v307;
        *((float64x2_t *)v314 + 5) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v290, _Q19.f64[0]), v299, _Q19, 1), v300, v307);
        sub_20F811C04((uint64_t)(v314 + 4));
      }
    }
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 3010) = *(_BYTE *)(a1 + 3009);
  *(_BYTE *)(a1 + 3013) = 0;
  *(_WORD *)(a1 + 3008) = 0;
  *(_WORD *)(a1 + 3011) = 0;
  return result;
}

void sub_20FA2F0C0(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

BOOL sub_20FA2F0F8(uint64_t a1, char **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  void *v11;
  _BOOL8 result;

  v4 = a1 + 37928;
  v5 = *(_DWORD *)(a1 + 37944);
  v6 = *(_DWORD *)(a1 + 37948);
  v7 = (v6 * v5);
  if (*(_QWORD *)(a1 + 38032) >= v7)
  {
    if (!(_DWORD)v7)
      goto LABEL_8;
    v11 = *(void **)(a1 + 38024);
    v9 = 8 * v7;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 38024);
    if (v8)
      MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
    v9 = 8 * v7;
    v10 = (v9 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 104) = v10 >> 3;
    v11 = operator new(v10, (std::align_val_t)0x20uLL);
    *(_QWORD *)(v4 + 96) = v11;
  }
  memcpy(v11, *(const void **)v4, v9);
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(_DWORD *)(v4 + 20);
LABEL_8:
  *(_DWORD *)(v4 + 112) = v5;
  *(_DWORD *)(v4 + 116) = v6;
  result = 1;
  *(_WORD *)(v4 + 88) = 1;
  *(_BYTE *)(a1 + 3008) = v5 == v6;
  if (v5 == v6)
  {
    sub_20FA2A730(a1 + 38016, (uint64_t)a2, a2);
    return *(_BYTE *)(a1 + 3008) == 0;
  }
  return result;
}

uint64_t sub_20FA2F1D4()
{
  unsigned __int8 v0;
  unsigned __int8 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6B838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A6B838))
    return byte_254A6B802;
  v2 = atomic_load((unsigned __int8 *)&qword_254A6B840);
  if ((v2 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6B840))
    {
      byte_254A6B803 = (int)sub_20E8BE300() > 1;
      __cxa_guard_release(&qword_254A6B840);
    }
  }
  byte_254A6B802 = byte_254A6B803 ^ 1;
  __cxa_guard_release(&qword_254A6B838);
  return byte_254A6B802;
}

void sub_20FA2F288(_Unwind_Exception *a1)
{
  __guard *v1;

  __cxa_guard_abort(v1 + 1);
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FA2F2A4()
{
  unsigned __int8 v0;
  unsigned __int8 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6B848);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A6B848))
    return byte_254A6B804;
  v2 = atomic_load((unsigned __int8 *)&qword_254A6B840);
  if ((v2 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6B840))
    {
      byte_254A6B803 = (int)sub_20E8BE300() > 1;
      __cxa_guard_release(&qword_254A6B840);
    }
  }
  byte_254A6B804 = byte_254A6B803;
  __cxa_guard_release(&qword_254A6B848);
  return byte_254A6B804;
}

void sub_20FA2F350(_Unwind_Exception *a1)
{
  __guard *v1;

  __cxa_guard_abort(v1);
  __cxa_guard_abort(v1 + 1);
  _Unwind_Resume(a1);
}

void sub_20FA2F36C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + 4741;
  *a1 = off_24CA04008;
  v3 = a1[4753];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  *a1 = off_24CA04150;
  v4 = v2[6];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = v2[3];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  if (*v2)
    MEMORY[0x212BC6368](*v2, 0x1000C8000313F17);
  sub_20FA2FED8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FA2F430(uint64_t result, double a2, double a3, float64x2_t a4, double a5, double a6, float64x2_t a7)
{
  uint64_t v7;
  unsigned int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  float64_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  float64_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  float64_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  float64_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  float64_t *v49;
  float64x2_t v50;
  double v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  float64_t *v61;
  float64x2_t v62;
  double v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  float64_t *v68;
  float64x2_t v69;
  float64x2_t v70;
  double v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  float64_t *v76;
  float64x2_t v77;
  float64x2_t v78;
  double v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  float64_t *v84;
  float64x2_t v85;
  double v86;

  v7 = *(unsigned int *)(result + 3160);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0.0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(result + 3240) + 8 * v8);
      if (v10 != -1)
      {
        v11 = *(_QWORD *)(result + 3168);
        if (v11)
        {
          v12 = (float64_t *)(v11 + 8 * v10);
          v13.f64[0] = *v12;
          v14.f64[0] = v12[14];
          v15.f64[0] = v12[28];
          v13.f64[1] = v12[7];
          v15.f64[1] = v12[35];
          v14.f64[1] = v12[21];
          a4 = vabsq_f64(v14);
          v16 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v13), vabsq_f64(v15)), a4));
          if (v9 < v16)
            v9 = v16;
        }
      }
      v8 += *(_DWORD *)(result + 3264) + 1;
      --v7;
    }
    while (v7);
  }
  else
  {
    v9 = 0.0;
  }
  v17 = *(unsigned int *)(result + 4744);
  if ((_DWORD)v17)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(result + 4824) + 8 * v18);
      if (v19 != -1)
      {
        v20 = *(_QWORD *)(result + 4752);
        if (v20)
        {
          v21 = (float64_t *)(v20 + 8 * v19);
          v22.f64[0] = *v21;
          v23.f64[0] = v21[20];
          v24.f64[0] = v21[40];
          v25.f64[0] = v21[60];
          v23.f64[1] = v21[30];
          v25.f64[1] = v21[70];
          v22.f64[1] = v21[10];
          a7.f64[0] = v21[80];
          v24.f64[1] = v21[50];
          *(_QWORD *)&a7.f64[0] = *(_OWORD *)&vabsq_f64(a7);
          a4 = vmaxnmq_f64(vabsq_f64(v23), vabsq_f64(v25));
          a7.f64[1] = NAN;
          v26 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v22), a7), vabsq_f64(v24)), a4));
          if (v9 < v26)
            v9 = v26;
        }
      }
      v18 += *(_DWORD *)(result + 4848) + 1;
      --v17;
    }
    while (v17);
  }
  v27 = *(unsigned int *)(result + 6328);
  if ((_DWORD)v27)
  {
    v28 = 0;
    do
    {
      v29 = *(_QWORD *)(*(_QWORD *)(result + 6408) + 8 * v28);
      if (v29 != -1)
      {
        v30 = *(_QWORD *)(result + 6336);
        if (v30)
        {
          v31 = (float64_t *)(v30 + 8 * v29);
          v32.f64[0] = *v31;
          v33.f64[0] = v31[14];
          v34.f64[0] = v31[28];
          v32.f64[1] = v31[7];
          v34.f64[1] = v31[35];
          v33.f64[1] = v31[21];
          a4 = vabsq_f64(v33);
          v35 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v32), vabsq_f64(v34)), a4));
          if (v9 < v35)
            v9 = v35;
        }
      }
      v28 += *(_DWORD *)(result + 6432) + 1;
      --v27;
    }
    while (v27);
  }
  v36 = *(unsigned int *)(result + 7912);
  if ((_DWORD)v36)
  {
    v37 = 0;
    do
    {
      v38 = *(_QWORD *)(*(_QWORD *)(result + 7992) + 8 * v37);
      if (v38 != -1)
      {
        v39 = *(_QWORD *)(result + 7920);
        if (v39)
        {
          v40 = (float64_t *)(v39 + 8 * v38);
          v41.f64[0] = *v40;
          v42.f64[0] = v40[14];
          v43.f64[0] = v40[28];
          v41.f64[1] = v40[7];
          v43.f64[1] = v40[35];
          v42.f64[1] = v40[21];
          a4 = vabsq_f64(v42);
          v44 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v41), vabsq_f64(v43)), a4));
          if (v9 < v44)
            v9 = v44;
        }
      }
      v37 += *(_DWORD *)(result + 8016) + 1;
      --v36;
    }
    while (v36);
  }
  v45 = *(unsigned int *)(result + 9496);
  if ((_DWORD)v45)
  {
    v46 = 0;
    do
    {
      v47 = *(_QWORD *)(*(_QWORD *)(result + 9576) + 8 * v46);
      if (v47 != -1)
      {
        v48 = *(_QWORD *)(result + 9504);
        if (v48)
        {
          v49 = (float64_t *)(v48 + 8 * v47);
          v50.f64[0] = *v49;
          a4.f64[0] = v49[8];
          v50.f64[1] = v49[4];
          *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
          a4.f64[1] = NAN;
          v51 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v50), a4));
          if (v9 < v51)
            v9 = v51;
        }
      }
      v46 += *(_DWORD *)(result + 9600) + 1;
      --v45;
    }
    while (v45);
  }
  v52 = *(unsigned int *)(result + 11080);
  if ((_DWORD)v52)
  {
    v53 = 0;
    do
    {
      v54 = *(_QWORD *)(*(_QWORD *)(result + 11160) + 8 * v53);
      if (v54 != -1)
      {
        v55 = *(_QWORD *)(result + 11088);
        if (v55)
        {
          v56 = fabs(*(double *)(v55 + 8 * v54));
          if (v9 < v56)
            v9 = v56;
        }
      }
      v53 += *(_DWORD *)(result + 11184) + 1;
      --v52;
    }
    while (v52);
  }
  v57 = *(unsigned int *)(result + 12664);
  if ((_DWORD)v57)
  {
    v58 = 0;
    do
    {
      v59 = *(_QWORD *)(*(_QWORD *)(result + 12744) + 8 * v58);
      if (v59 != -1)
      {
        v60 = *(_QWORD *)(result + 12672);
        if (v60)
        {
          v61 = (float64_t *)(v60 + 8 * v59);
          v62.f64[0] = *v61;
          a4.f64[0] = v61[8];
          v62.f64[1] = v61[4];
          *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
          a4.f64[1] = NAN;
          v63 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v62), a4));
          if (v9 < v63)
            v9 = v63;
        }
      }
      v58 += *(_DWORD *)(result + 12768) + 1;
      --v57;
    }
    while (v57);
  }
  v64 = *(unsigned int *)(result + 14248);
  if ((_DWORD)v64)
  {
    v65 = 0;
    do
    {
      v66 = *(_QWORD *)(*(_QWORD *)(result + 14328) + 8 * v65);
      if (v66 != -1)
      {
        v67 = *(_QWORD *)(result + 14256);
        if (v67)
        {
          v68 = (float64_t *)(v67 + 8 * v66);
          v69.f64[0] = *v68;
          v70.f64[0] = v68[10];
          v69.f64[1] = v68[5];
          v70.f64[1] = v68[15];
          a4 = vabsq_f64(v70);
          v71 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v69), a4));
          if (v9 < v71)
            v9 = v71;
        }
      }
      v65 += *(_DWORD *)(result + 14352) + 1;
      --v64;
    }
    while (v64);
  }
  v72 = *(unsigned int *)(result + 15832);
  if ((_DWORD)v72)
  {
    v73 = 0;
    do
    {
      v74 = *(_QWORD *)(*(_QWORD *)(result + 15912) + 8 * v73);
      if (v74 != -1)
      {
        v75 = *(_QWORD *)(result + 15840);
        if (v75)
        {
          v76 = (float64_t *)(v75 + 8 * v74);
          v77.f64[0] = *v76;
          v78.f64[0] = v76[10];
          v77.f64[1] = v76[5];
          v78.f64[1] = v76[15];
          a4 = vabsq_f64(v78);
          v79 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v77), a4));
          if (v9 < v79)
            v9 = v79;
        }
      }
      v73 += *(_DWORD *)(result + 15936) + 1;
      --v72;
    }
    while (v72);
  }
  v80 = *(unsigned int *)(result + 17416);
  if ((_DWORD)v80)
  {
    v81 = 0;
    do
    {
      v82 = *(_QWORD *)(*(_QWORD *)(result + 17496) + 8 * v81);
      if (v82 != -1)
      {
        v83 = *(_QWORD *)(result + 17424);
        if (v83)
        {
          v84 = (float64_t *)(v83 + 8 * v82);
          v85.f64[0] = *v84;
          a4.f64[0] = v84[8];
          v85.f64[1] = v84[4];
          *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
          a4.f64[1] = NAN;
          v86 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v85), a4));
          if (v9 < v86)
            v9 = v86;
        }
      }
      v81 += *(_DWORD *)(result + 17520) + 1;
      --v80;
    }
    while (v80);
  }
  return result;
}

uint64_t sub_20FA2F930(uint64_t result, double a2)
{
  if (*(double *)(result + 3032) != a2)
    *(_BYTE *)(result + 3009) = 0;
  *(double *)(result + 3032) = a2;
  return result;
}

uint64_t sub_20FA2F950(uint64_t result, char a2)
{
  *(_BYTE *)(result + 35944) = a2;
  return result;
}

uint64_t sub_20FA2F95C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 35944);
}

BOOL sub_20FA2F968(_QWORD *a1)
{
  return ((a1[4467] - a1[4466]) >> 2)
       + ((a1[4464] - a1[4463]) >> 2)
       + ((a1[4470] - a1[4469]) >> 2)
       + ((a1[4473] - a1[4472]) >> 2)
       + ((a1[4476] - a1[4475]) >> 2)
       + ((a1[4479] - a1[4478]) >> 2)
       + ((a1[4482] - a1[4481]) >> 2)
       + ((a1[4485] - a1[4484]) >> 2)
       + ((a1[4488] - a1[4487]) >> 2)
       + ((a1[4491] - a1[4490]) >> 2) != 0;
}

uint64_t sub_20FA2FA14(uint64_t a1)
{
  return a1 + 20400;
}

uint64_t sub_20FA2FA20(uint64_t a1)
{
  return a1 + 20400;
}

double sub_20FA2FA2C(uint64_t a1, void **a2)
{
  unint64_t v4;
  size_t v5;
  double result;

  v4 = *(unsigned int *)(a1 + 3064);
  if (*((_DWORD *)a2 + 4) != (_DWORD)v4)
  {
    *((_DWORD *)a2 + 4) = v4;
    if ((unint64_t)a2[1] < v4)
    {
      if (*a2)
        MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *a2 = 0;
      a2[1] = (void *)(v5 >> 3);
      *a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  *(_QWORD *)&result = sub_20FB40000((_QWORD *)(a1 + 19888), a1 + 3048, a2).n128_u64[0];
  return result;
}

double sub_20FA2FAC0(uint64_t a1, void **a2)
{
  unint64_t v4;
  size_t v5;
  double result;

  v4 = *(unsigned int *)(a1 + 37840);
  if (*((_DWORD *)a2 + 4) != (_DWORD)v4)
  {
    *((_DWORD *)a2 + 4) = v4;
    if ((unint64_t)a2[1] < v4)
    {
      if (*a2)
        MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *a2 = 0;
      a2[1] = (void *)(v5 >> 3);
      *a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  *(_QWORD *)&result = sub_20FB40000((_QWORD *)(a1 + 19888), a1 + 37824, a2).n128_u64[0];
  return result;
}

uint64_t sub_20FA2FB5C(uint64_t a1)
{
  char **v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  unint64_t v12;
  char *v13;
  unsigned __int8 v14;
  uint64_t result;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  double *v24;
  char *v25;
  unsigned __int8 v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;

  v1 = (char **)(a1 + 37976);
  *(_QWORD *)(a1 + 38000) = *(_QWORD *)(a1 + 18608) + 15304;
  v2 = (_QWORD *)(a1 + 38000);
  *(_QWORD *)(a1 + 38008) = a1 + 19648;
  if (!*(_BYTE *)(a1 + 38016) || (v3 = *(unsigned int *)(a1 + 38040), (_DWORD)v3 != *(_DWORD *)(a1 + 38044)))
  {
    result = 0;
    *v2 = 0;
    v2[1] = 0;
    return result;
  }
  v4 = 8 * (v3 * v3);
  v5 = operator new((v4 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v6 = v5;
  if ((_DWORD)v3 * (_DWORD)v3)
    bzero(v5, 8 * (v3 * v3));
  if ((_DWORD)v3)
  {
    v7 = v3 + 1;
    if ((_DWORD)v3 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      if (v7 < 0)
        v16 = ~(_DWORD)v3;
      else
        v16 = v3 + 1;
      v17 = (v3 - 1) * (unint64_t)v16;
      v18 = (_DWORD)v3 != -1 && (unint64_t)(v3 - 1) >> 32 != 0;
      if ((_DWORD)v17)
        v19 = v7 < 0;
      else
        v19 = 0;
      if (!v19 && (v17 & 0xFFFFFFFF00000000) == 0 && !v18)
      {
        v20 = 0;
        v8 = v3 & 0xFFFFFFFE;
        v21 = v8;
        do
        {
          v6[v20] = 0x3FF0000000000000;
          v6[v7 + v20] = 0x3FF0000000000000;
          v20 += 2 * v3 + 2;
          v21 -= 2;
        }
        while (v21);
        if (v8 == v3)
        {
LABEL_10:
          if ((_DWORD)v3 * (_DWORD)v3)
          {
            v11 = operator new((v4 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
            v12 = ((v4 + 31) & 0xFFFFFFFE0uLL) >> 3;
            memcpy(v11, v6, 8 * (v3 * v3));
            v13 = (char *)v11;
            v14 = atomic_load((unsigned __int8 *)&qword_254A6B838);
            if ((v14 & 1) == 0)
            {
LABEL_41:
              if (__cxa_guard_acquire(&qword_254A6B838))
              {
                v26 = atomic_load((unsigned __int8 *)&qword_254A6B840);
                if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B840))
                {
                  byte_254A6B803 = (int)sub_20E8BE300() > 1;
                  __cxa_guard_release(&qword_254A6B840);
                }
                byte_254A6B802 = byte_254A6B803 ^ 1;
                __cxa_guard_release(&qword_254A6B838);
              }
            }
          }
          else
          {
            v13 = 0;
            v12 = 0;
            v22 = atomic_load((unsigned __int8 *)&qword_254A6B838);
            if ((v22 & 1) == 0)
              goto LABEL_41;
          }
          if (byte_254A6B802)
            v23 = 117;
          else
            v23 = 108;
          v24 = (double *)v1[6];
          if (*((_BYTE *)v1 + 41))
          {
            v31 = v23;
            v29 = v3;
            v30 = v3;
            v28 = -1;
            v27 = 0x100000001;
            sub_20E834644(&v27, (uint64_t)&v31, &v30, &v29, v24, (int *)&v30, v13, (int *)&v30, &v28);
          }
          else
          {
            v31 = v23;
            v29 = v3;
            v30 = v3;
            v28 = -1;
            v27 = 0x100000001;
            sub_20E83443C(&v27, (uint64_t)&v31, (int *)&v30, &v29, v24, (int *)&v30, v13, (int *)&v30, &v28);
            *((_BYTE *)v1 + 41) = v28 == 0;
          }
          goto LABEL_38;
        }
      }
    }
    v9 = v3 - v8;
    v10 = v7 * v8;
    do
    {
      v6[v10] = 0x3FF0000000000000;
      v10 += v7;
      --v9;
    }
    while (v9);
    goto LABEL_10;
  }
  v12 = 0;
  v13 = 0;
LABEL_38:
  MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v25 = *v1;
  *v1 = v13;
  v1[1] = (char *)v12;
  *((_DWORD *)v1 + 4) = v3;
  *((_DWORD *)v1 + 5) = v3;
  if (v25)
    MEMORY[0x212BC6368](v25, 0x1000C8000313F17);
  return 1;
}

void sub_20FA2FE80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  __guard *v3;

  __cxa_guard_abort(v3 + 1);
  __cxa_guard_abort(v3);
  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20FA2FED8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + 4494;
  *a1 = &unk_24CA04210;
  v3 = a1[4728];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  a1[2546] = off_24CA042C8;
  sub_20F8ADB48(a1 + 4498);
  v4 = (_QWORD *)v2[3];
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
    v2 = (_QWORD *)v2[3];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_8:
  sub_20F89E908((uint64_t)(a1 + 4463));
  sub_20F8A4000(a1 + 2563);
  v6 = a1[2550];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = a1[2547];
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  sub_20FA30180(a1 + 2325);
  return sub_20FA300B8((uint64_t)a1);
}

void sub_20FA2FFD0(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "DenseSchur");
}

_QWORD *sub_20FA30000(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_24CA042C8;
  sub_20F8ADB48(a1 + 1952);
  v2 = (_QWORD *)a1[1951];
  if (v2 == a1 + 1948)
  {
    v3 = 4;
    v2 = a1 + 1948;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_20F89E908((uint64_t)(a1 + 1917));
  sub_20F8A4000(a1 + 17);
  v4 = a1[4];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[1];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  return a1;
}

uint64_t sub_20FA300B8(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24CA04318;
  sub_20F89E908(a1 + 18352);
  sub_20F8A4000((_QWORD *)(a1 + 3152));
  v2 = *(_QWORD *)(a1 + 3048);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  *(_QWORD *)a1 = &unk_24CA043D0;
  *(_QWORD *)(a1 + 328) = &off_24CA04440;
  sub_20F8ADA70(a1 + 2744);
  sub_20F8ADA70(a1 + 2480);
  sub_20F8ADA70(a1 + 2216);
  sub_20F8ADA70(a1 + 1952);
  v3 = *(void **)(a1 + 1872);
  if (v3)
  {
    *(_QWORD *)(a1 + 1880) = v3;
    operator delete(v3);
  }
  sub_20FA308E8((void **)(a1 + 1392));
  sub_20FA31494(a1 + 336);
  return a1;
}

_QWORD *sub_20FA30180(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  sub_20F89E908((uint64_t)(a1 + 191));
  sub_20F89E908((uint64_t)(a1 + 161));
  sub_20F89E908((uint64_t)(a1 + 131));
  v2 = (void *)a1[118];
  if (v2)
  {
    a1[119] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[115];
  if (v3)
  {
    a1[116] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[112];
  if (v4)
  {
    a1[113] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[109];
  if (v5)
  {
    a1[110] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[106];
  if (v6)
  {
    a1[107] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[103];
  if (v7)
  {
    a1[104] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[100];
  if (v8)
  {
    a1[101] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[97];
  if (v9)
  {
    a1[98] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[94];
  if (v10)
  {
    a1[95] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[91];
  if (v11)
  {
    a1[92] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[88];
  if (v12)
  {
    a1[89] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[85];
  if (v13)
  {
    a1[86] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[82];
  if (v14)
  {
    a1[83] = v14;
    operator delete(v14);
  }
  sub_20F89E908((uint64_t)(a1 + 42));
  v15 = (void *)a1[39];
  if (v15)
  {
    a1[40] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[36];
  if (v16)
  {
    a1[37] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[33];
  if (v17)
  {
    a1[34] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[30];
  if (v18)
  {
    a1[31] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[27];
  if (v19)
  {
    a1[28] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[24];
  if (v20)
  {
    a1[25] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[21];
  if (v21)
  {
    a1[22] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[18];
  if (v22)
  {
    a1[19] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[15];
  if (v23)
  {
    a1[16] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[12];
  if (v24)
  {
    a1[13] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[9];
  if (v25)
  {
    a1[10] = v25;
    operator delete(v25);
  }
  v26 = (void *)a1[6];
  if (v26)
  {
    a1[7] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[3];
  if (v27)
  {
    a1[4] = v27;
    operator delete(v27);
  }
  return a1;
}

double sub_20FA30364()
{
  return 0.0;
}

double sub_20FA3036C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  uint64_t v5;
  uint64_t j;
  uint64_t v16;
  uint64_t v25;
  uint64_t k;
  uint64_t v27;
  uint64_t v33;
  uint64_t m;
  uint64_t v35;
  uint64_t n;
  uint64_t v42;
  uint64_t ii;
  uint64_t v47;
  uint64_t jj;
  uint64_t v49;
  uint64_t kk;
  uint64_t v54;
  uint64_t mm;
  uint64_t v60;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t nn;
  uint64_t v72;
  unsigned int v74;
  uint64_t v75;
  int v76;
  __int128 v77;
  double v78;

  v2 = a1[42];
  v3 = a1[43];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v5 + 4) & 2) == 0 && *(_BYTE *)(v5 + 20))
    {
      v74 = 3;
      v75 = v5 + 32;
      v76 = 0;
      v78 = 0.0;
      v77 = 0uLL;
      sub_20F053450(&v74, (double *)&v77);
      _V1.D[1] = *((_QWORD *)&v77 + 1);
      _D5 = *((_QWORD *)&v77 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v5 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v5 + 120) * *(double *)(v5 + 120);
    }
  }
  for (j = a1[54]; j != a1[55]; j += 16)
  {
    v16 = *(_QWORD *)(j + 8);
    if ((*(_BYTE *)(v16 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v16 + 20))
      {
        _Q4 = *(_OWORD *)(v16 + 32);
        _D6 = *(_QWORD *)(v16 + 40);
        __asm { FMLA            D5, D6, V4.D[1] }
        *(_QWORD *)&_Q4 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D5, D4, V3.D[1] }
        _D3 = *(_QWORD *)(v16 + 72);
        __asm { FMLA            D5, D3, V2.D[1] }
        _D2 = *(_QWORD *)(v16 + 88);
        __asm { FMLA            D5, D2, V1.D[1] }
        i = i + _D5 + *(double *)(v16 + 96) * *(double *)(v16 + 96);
      }
    }
  }
  v25 = a1[66];
  for (k = a1[67]; v25 != k; v25 += 16)
  {
    v27 = *(_QWORD *)(v25 + 8);
    if ((*(_BYTE *)(v27 + 4) & 2) == 0 && *(_BYTE *)(v27 + 20))
    {
      v74 = 3;
      v75 = v27 + 32;
      v76 = 0;
      v78 = 0.0;
      v77 = 0uLL;
      sub_20F053450(&v74, (double *)&v77);
      _V1.D[1] = *((_QWORD *)&v77 + 1);
      _D5 = *((_QWORD *)&v77 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v27 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v27 + 120) * *(double *)(v27 + 120);
    }
  }
  v33 = a1[78];
  for (m = a1[79]; v33 != m; v33 += 16)
  {
    v35 = *(_QWORD *)(v33 + 8);
    if ((*(_BYTE *)(v35 + 4) & 2) == 0 && *(_BYTE *)(v35 + 20))
    {
      v74 = 3;
      v75 = v35 + 32;
      v76 = 0;
      v78 = 0.0;
      v77 = 0uLL;
      sub_20F053450(&v74, (double *)&v77);
      _V1.D[1] = *((_QWORD *)&v77 + 1);
      _D5 = *((_QWORD *)&v77 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v35 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v35 + 120) * *(double *)(v35 + 120);
    }
  }
  for (n = a1[90]; n != a1[91]; n += 16)
  {
    v42 = *(_QWORD *)(n + 8);
    if ((*(_BYTE *)(v42 + 4) & 2) == 0 && *(_BYTE *)(v42 + 20))
    {
      _Q1 = *(_OWORD *)(v42 + 32);
      _D3 = *(_QWORD *)(v42 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + *(double *)(v42 + 48) * *(double *)(v42 + 48);
    }
  }
  for (ii = a1[102]; ii != a1[103]; ii += 16)
  {
    v47 = *(_QWORD *)(ii + 8);
    if ((*(_BYTE *)(v47 + 4) & 2) == 0 && *(_BYTE *)(v47 + 20))
      i = i + *(double *)(v47 + 32) * *(double *)(v47 + 32);
  }
  for (jj = a1[114]; jj != a1[115]; jj += 16)
  {
    v49 = *(_QWORD *)(jj + 8);
    if ((*(_BYTE *)(v49 + 4) & 2) == 0 && *(_BYTE *)(v49 + 20))
    {
      _Q1 = *(_OWORD *)(v49 + 32);
      _D3 = *(_QWORD *)(v49 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + *(double *)(v49 + 48) * *(double *)(v49 + 48);
    }
  }
  for (kk = a1[126]; kk != a1[127]; kk += 16)
  {
    v54 = *(_QWORD *)(kk + 8);
    if ((*(_BYTE *)(v54 + 4) & 2) == 0 && *(_BYTE *)(v54 + 20))
    {
      _Q1 = *(_OWORD *)(v54 + 32);
      _D3 = *(_QWORD *)(v54 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v54 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  for (mm = a1[138]; mm != a1[139]; mm += 16)
  {
    v60 = *(_QWORD *)(mm + 8);
    if ((*(_BYTE *)(v60 + 4) & 2) == 0 && *(_BYTE *)(v60 + 20))
    {
      _Q1 = *(_OWORD *)(v60 + 32);
      _D3 = *(_QWORD *)(v60 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v60 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  v65 = a1[150];
  v66 = a1[151];
  while (v65 != v66)
  {
    v67 = *(_QWORD *)(v65 + 8);
    if ((*(_BYTE *)(v67 + 4) & 2) == 0 && *(_BYTE *)(v67 + 20))
    {
      v77 = 0uLL;
      v78 = 0.0;
      sub_20E9733B8((float64x2_t *)(v67 + 32), (double *)&v77);
      _V1.D[1] = *((_QWORD *)&v77 + 1);
      _D3 = *((_QWORD *)&v77 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + v78 * v78;
    }
    v65 += 16;
  }
  for (nn = a1[162]; nn != a1[163]; nn += 16)
  {
    v72 = *(_QWORD *)(nn + 8);
    if ((*(_BYTE *)(v72 + 4) & 2) == 0 && *(_BYTE *)(v72 + 20))
      i = i + *(double *)(v72 + 32) * *(double *)(v72 + 32);
  }
  return i;
}

uint64_t sub_20FA307F8(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA04440;
  sub_20F8ADA70(a1 + 2416);
  sub_20F8ADA70(a1 + 2152);
  sub_20F8ADA70(a1 + 1888);
  sub_20F8ADA70(a1 + 1624);
  v2 = *(void **)(a1 + 1544);
  if (v2)
  {
    *(_QWORD *)(a1 + 1552) = v2;
    operator delete(v2);
  }
  sub_20FA308E8((void **)(a1 + 1064));
  sub_20FA31494(a1 + 8);
  return a1;
}

void sub_20FA30868(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA04440;
  sub_20F8ADA70(a1 + 2416);
  sub_20F8ADA70(a1 + 2152);
  sub_20F8ADA70(a1 + 1888);
  sub_20F8ADA70(a1 + 1624);
  v2 = *(void **)(a1 + 1544);
  if (v2)
  {
    *(_QWORD *)(a1 + 1552) = v2;
    operator delete(v2);
  }
  sub_20FA308E8((void **)(a1 + 1064));
  sub_20FA31494(a1 + 8);
  JUMPOUT(0x212BC6398);
}

void **sub_20FA308E8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char *v86;
  char *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  char *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  char *v98;
  char *v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  char *v116;
  char *v117;
  void *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  char *v125;
  char *v126;
  void *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  char *v134;
  char *v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;

  v2 = (char *)a1[57];
  if (v2)
  {
    v3 = (char *)a1[58];
    v4 = a1[57];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 184;
      }
      while (v3 != v2);
      v4 = a1[57];
    }
    a1[58] = v2;
    operator delete(v4);
  }
  v8 = (char *)a1[54];
  if (v8)
  {
    v9 = (char *)a1[55];
    v10 = a1[54];
    if (v9 != v8)
    {
      do
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 2);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 208;
      }
      while (v9 != v8);
      v10 = a1[54];
    }
    a1[55] = v8;
    operator delete(v10);
  }
  v14 = (char *)a1[51];
  if (v14)
  {
    v15 = (char *)a1[52];
    v16 = a1[51];
    if (v15 != v14)
    {
      do
      {
        v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 2);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 184;
      }
      while (v15 != v14);
      v16 = a1[51];
    }
    a1[52] = v14;
    operator delete(v16);
  }
  v20 = (char *)a1[48];
  if (v20)
  {
    v21 = (char *)a1[49];
    v22 = a1[48];
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 2);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 216;
      }
      while (v21 != v20);
      v22 = a1[48];
    }
    a1[49] = v20;
    operator delete(v22);
  }
  v26 = (char *)a1[45];
  if (v26)
  {
    v27 = (char *)a1[46];
    v28 = a1[45];
    if (v27 != v26)
    {
      do
      {
        v29 = (std::__shared_weak_count *)*((_QWORD *)v27 - 2);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v27 -= 176;
      }
      while (v27 != v26);
      v28 = a1[45];
    }
    a1[46] = v26;
    operator delete(v28);
  }
  v32 = (char *)a1[42];
  if (v32)
  {
    v33 = (char *)a1[43];
    v34 = a1[42];
    if (v33 != v32)
    {
      do
      {
        v35 = (std::__shared_weak_count *)*((_QWORD *)v33 - 2);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 176;
      }
      while (v33 != v32);
      v34 = a1[42];
    }
    a1[43] = v32;
    operator delete(v34);
  }
  v38 = (char *)a1[39];
  if (v38)
  {
    v39 = (char *)a1[40];
    v40 = a1[39];
    if (v39 != v38)
    {
      do
      {
        v41 = (std::__shared_weak_count *)*((_QWORD *)v39 - 2);
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v39 -= 208;
      }
      while (v39 != v38);
      v40 = a1[39];
    }
    a1[40] = v38;
    operator delete(v40);
  }
  v44 = (char *)a1[36];
  if (v44)
  {
    v45 = (char *)a1[37];
    v46 = a1[36];
    if (v45 != v44)
    {
      do
      {
        v47 = (std::__shared_weak_count *)*((_QWORD *)v45 - 2);
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v45 -= 208;
      }
      while (v45 != v44);
      v46 = a1[36];
    }
    a1[37] = v44;
    operator delete(v46);
  }
  v50 = (char *)a1[33];
  if (v50)
  {
    v51 = (char *)a1[34];
    v52 = a1[33];
    if (v51 != v50)
    {
      do
      {
        v53 = (std::__shared_weak_count *)*((_QWORD *)v51 - 2);
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v51 -= 112;
      }
      while (v51 != v50);
      v52 = a1[33];
    }
    a1[34] = v50;
    operator delete(v52);
  }
  v56 = (char *)a1[30];
  if (v56)
  {
    v57 = (char *)a1[31];
    v58 = a1[30];
    if (v57 != v56)
    {
      do
      {
        v59 = (std::__shared_weak_count *)*((_QWORD *)v57 - 2);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v57 -= 360;
      }
      while (v57 != v56);
      v58 = a1[30];
    }
    a1[31] = v56;
    operator delete(v58);
  }
  v62 = (char *)a1[27];
  if (v62)
  {
    v63 = (char *)a1[28];
    v64 = a1[27];
    if (v63 != v62)
    {
      do
      {
        v65 = (std::__shared_weak_count *)*((_QWORD *)v63 - 2);
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v63 -= 304;
      }
      while (v63 != v62);
      v64 = a1[27];
    }
    a1[28] = v62;
    operator delete(v64);
  }
  v68 = (char *)a1[24];
  if (v68)
  {
    v69 = (char *)a1[25];
    v70 = a1[24];
    if (v69 == v68)
    {
LABEL_138:
      a1[25] = v68;
      operator delete(v70);
      goto LABEL_139;
    }
    while (1)
    {
      v71 = (std::__shared_weak_count *)*((_QWORD *)v69 - 2);
      if (!v71)
        goto LABEL_130;
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
        v74 = (std::__shared_weak_count *)*((_QWORD *)v69 - 15);
        if (v74)
        {
LABEL_131:
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
      }
      else
      {
LABEL_130:
        v74 = (std::__shared_weak_count *)*((_QWORD *)v69 - 15);
        if (v74)
          goto LABEL_131;
      }
      v69 -= 152;
      if (v69 == v68)
      {
        v70 = a1[24];
        goto LABEL_138;
      }
    }
  }
LABEL_139:
  v77 = (char *)a1[21];
  if (!v77)
    goto LABEL_156;
  v78 = (char *)a1[22];
  v79 = a1[21];
  if (v78 != v77)
  {
    while (1)
    {
      v80 = (std::__shared_weak_count *)*((_QWORD *)v78 - 2);
      if (!v80)
        goto LABEL_147;
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
        v83 = (std::__shared_weak_count *)*((_QWORD *)v78 - 14);
        if (v83)
        {
LABEL_148:
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
      }
      else
      {
LABEL_147:
        v83 = (std::__shared_weak_count *)*((_QWORD *)v78 - 14);
        if (v83)
          goto LABEL_148;
      }
      v78 -= 144;
      if (v78 == v77)
      {
        v79 = a1[21];
        break;
      }
    }
  }
  a1[22] = v77;
  operator delete(v79);
LABEL_156:
  v86 = (char *)a1[18];
  if (v86)
  {
    v87 = (char *)a1[19];
    v88 = a1[18];
    if (v87 != v86)
    {
      do
      {
        v89 = (std::__shared_weak_count *)*((_QWORD *)v87 - 2);
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v87 -= 5336;
      }
      while (v87 != v86);
      v88 = a1[18];
    }
    a1[19] = v86;
    operator delete(v88);
  }
  v92 = (char *)a1[15];
  if (v92)
  {
    v93 = (char *)a1[16];
    v94 = a1[15];
    if (v93 != v92)
    {
      do
      {
        v95 = (std::__shared_weak_count *)*((_QWORD *)v93 - 2);
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v93 -= 9616;
      }
      while (v93 != v92);
      v94 = a1[15];
    }
    a1[16] = v92;
    operator delete(v94);
  }
  v98 = (char *)a1[12];
  if (v98)
  {
    v99 = (char *)a1[13];
    v100 = a1[12];
    if (v99 == v98)
    {
LABEL_194:
      a1[13] = v98;
      operator delete(v100);
      goto LABEL_195;
    }
    while (1)
    {
      v101 = (std::__shared_weak_count *)*((_QWORD *)v99 - 2);
      if (!v101)
        goto LABEL_186;
      v102 = (unint64_t *)&v101->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
        v104 = (std::__shared_weak_count *)*((_QWORD *)v99 - 13);
        if (v104)
        {
LABEL_187:
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
      }
      else
      {
LABEL_186:
        v104 = (std::__shared_weak_count *)*((_QWORD *)v99 - 13);
        if (v104)
          goto LABEL_187;
      }
      v99 -= 160;
      if (v99 == v98)
      {
        v100 = a1[12];
        goto LABEL_194;
      }
    }
  }
LABEL_195:
  v107 = (char *)a1[9];
  if (!v107)
    goto LABEL_212;
  v108 = (char *)a1[10];
  v109 = a1[9];
  if (v108 != v107)
  {
    while (1)
    {
      v110 = (std::__shared_weak_count *)*((_QWORD *)v108 - 2);
      if (!v110)
        goto LABEL_203;
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
        v113 = (std::__shared_weak_count *)*((_QWORD *)v108 - 19);
        if (v113)
        {
LABEL_204:
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
      }
      else
      {
LABEL_203:
        v113 = (std::__shared_weak_count *)*((_QWORD *)v108 - 19);
        if (v113)
          goto LABEL_204;
      }
      v108 -= 280;
      if (v108 == v107)
      {
        v109 = a1[9];
        break;
      }
    }
  }
  a1[10] = v107;
  operator delete(v109);
LABEL_212:
  v116 = (char *)a1[6];
  if (!v116)
    goto LABEL_229;
  v117 = (char *)a1[7];
  v118 = a1[6];
  if (v117 != v116)
  {
    while (1)
    {
      v119 = (std::__shared_weak_count *)*((_QWORD *)v117 - 2);
      if (!v119)
        goto LABEL_220;
      v120 = (unint64_t *)&v119->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
        v122 = (std::__shared_weak_count *)*((_QWORD *)v117 - 19);
        if (v122)
        {
LABEL_221:
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
      }
      else
      {
LABEL_220:
        v122 = (std::__shared_weak_count *)*((_QWORD *)v117 - 19);
        if (v122)
          goto LABEL_221;
      }
      v117 -= 280;
      if (v117 == v116)
      {
        v118 = a1[6];
        break;
      }
    }
  }
  a1[7] = v116;
  operator delete(v118);
LABEL_229:
  v125 = (char *)a1[3];
  if (!v125)
    goto LABEL_246;
  v126 = (char *)a1[4];
  v127 = a1[3];
  if (v126 != v125)
  {
    while (1)
    {
      v128 = (std::__shared_weak_count *)*((_QWORD *)v126 - 2);
      if (!v128)
        goto LABEL_237;
      v129 = (unint64_t *)&v128->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
        v131 = (std::__shared_weak_count *)*((_QWORD *)v126 - 19);
        if (v131)
        {
LABEL_238:
          v132 = (unint64_t *)&v131->__shared_owners_;
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
      }
      else
      {
LABEL_237:
        v131 = (std::__shared_weak_count *)*((_QWORD *)v126 - 19);
        if (v131)
          goto LABEL_238;
      }
      v126 -= 280;
      if (v126 == v125)
      {
        v127 = a1[3];
        break;
      }
    }
  }
  a1[4] = v125;
  operator delete(v127);
LABEL_246:
  v134 = (char *)*a1;
  if (*a1)
  {
    v135 = (char *)a1[1];
    v136 = *a1;
    if (v135 == v134)
    {
LABEL_262:
      a1[1] = v134;
      operator delete(v136);
      return a1;
    }
    while (1)
    {
      v137 = (std::__shared_weak_count *)*((_QWORD *)v135 - 2);
      if (!v137)
        goto LABEL_254;
      v138 = (unint64_t *)&v137->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
        v140 = (std::__shared_weak_count *)*((_QWORD *)v135 - 38);
        if (v140)
        {
LABEL_255:
          v141 = (unint64_t *)&v140->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
      }
      else
      {
LABEL_254:
        v140 = (std::__shared_weak_count *)*((_QWORD *)v135 - 38);
        if (v140)
          goto LABEL_255;
      }
      v135 -= 504;
      if (v135 == v134)
      {
        v136 = *a1;
        goto LABEL_262;
      }
    }
  }
  return a1;
}

uint64_t sub_20FA313C4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 9600);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20FA3142C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 9592);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20FA31494(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  sub_20F393270(a1 + 984);
  v2 = *(void **)(a1 + 960);
  if (v2)
  {
    *(_QWORD *)(a1 + 968) = v2;
    operator delete(v2);
  }
  sub_20F4EEA20(a1 + 864);
  sub_20F4EFD04(a1 + 768);
  sub_20F4F0FE8(a1 + 672);
  sub_20F8AF748(a1 + 600);
  v3 = *(void **)(a1 + 576);
  if (v3)
  {
    *(_QWORD *)(a1 + 584) = v3;
    operator delete(v3);
  }
  sub_20F4F2E90(a1 + 504);
  v4 = *(void **)(a1 + 480);
  if (v4)
  {
    *(_QWORD *)(a1 + 488) = v4;
    operator delete(v4);
  }
  sub_20F8B047C(a1 + 408);
  v5 = *(void **)(a1 + 384);
  if (v5)
  {
    *(_QWORD *)(a1 + 392) = v5;
    operator delete(v5);
  }
  sub_20F8B11B0(a1 + 312);
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  sub_20F4F22CC(a1 + 216);
  v7 = *(void **)(a1 + 192);
  if (v7)
  {
    *(_QWORD *)(a1 + 200) = v7;
    operator delete(v7);
  }
  sub_20F4F3BC4(a1 + 120);
  v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(_QWORD *)(a1 + 104) = v8;
    operator delete(v8);
  }
  sub_20F3C8180(a1 + 24);
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

BOOL sub_20FA3158C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char **v25;
  char **v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char **v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unsigned int v38;
  int64_t v39;
  uint64_t v40;
  unsigned int v41;
  char **v42;
  char *v43;
  char *v44;
  char **v45;
  char **v46;
  char *v47;
  char *v48;
  char **v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  int v62;
  _BOOL4 v63;
  size_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  size_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char **v74;
  char *v75;
  char **v76;
  char **v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  void *v93;
  unint64_t v94;
  char *v95;
  int *v96;
  int *v97;
  uint64_t v98;
  int v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _DWORD *v109;
  int64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  _OWORD *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  int v119;
  void *v120;
  unint64_t v121;
  char *v122;
  int *v123;
  int *v124;
  uint64_t v125;
  int v126;
  char *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  _BYTE *v135;
  _DWORD *v136;
  int64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  _OWORD *v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  int v146;
  void *v147;
  unint64_t v148;
  char *v149;
  int *v150;
  int *v151;
  uint64_t v152;
  int v153;
  char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  _DWORD *v163;
  int64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  _OWORD *v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  int v173;
  char **v174;
  char **v175;
  uint64_t j;
  char **v177;
  char *v178;
  char *v179;
  char **v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  unsigned int v185;
  int64_t v186;
  unint64_t v187;
  void **v188;
  size_t v189;
  _QWORD *v190;
  int64x2_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  _DWORD *v195;
  _DWORD *v196;
  _QWORD *v197;
  int v198;
  uint64_t v199;
  int v200;
  void *v201;
  unint64_t v202;
  char *v203;
  int *v204;
  int *v205;
  uint64_t v206;
  int v207;
  char *v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  _BYTE *v216;
  _DWORD *v217;
  int64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  _OWORD *v223;
  char *v224;
  uint64_t v225;
  __int128 v226;
  int v227;
  void *v228;
  unint64_t v229;
  char *v230;
  int *v231;
  int *v232;
  uint64_t v233;
  int v234;
  char *v235;
  unint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  _BYTE *v243;
  _DWORD *v244;
  int64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  _OWORD *v250;
  char *v251;
  uint64_t v252;
  __int128 v253;
  int v254;
  void *v255;
  unint64_t v256;
  char *v257;
  int *v258;
  int *k;
  _DWORD *v260;
  int v261;
  char *v262;
  unint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _BYTE *v270;
  _DWORD *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  _OWORD *v276;
  char *v277;
  uint64_t v278;
  __int128 v279;
  int v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _DWORD **v284;
  uint64_t v285;
  _DWORD *v286;
  _DWORD *v287;
  uint64_t v288;
  uint64_t v289;
  _DWORD *v290;
  _DWORD *v291;
  int v293;
  uint64_t v294;
  int v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _DWORD **v299;
  uint64_t v300;
  _DWORD *v301;
  _DWORD *v302;
  uint64_t v303;
  uint64_t v304;
  _DWORD *v305;
  _DWORD *v306;
  int v308;
  uint64_t v309;
  int v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _DWORD **v314;
  uint64_t v315;
  _DWORD *v316;
  _DWORD *v317;
  uint64_t v318;
  uint64_t v319;
  _DWORD *v320;
  _DWORD *v321;
  int v323;
  uint64_t v324;
  int v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _DWORD **v329;
  uint64_t v330;
  _DWORD *v331;
  _DWORD *v332;
  uint64_t v333;
  uint64_t v334;
  _DWORD *v335;
  _DWORD *v336;
  int v338;
  uint64_t v339;
  int v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _DWORD **v344;
  uint64_t v345;
  _DWORD *v346;
  _DWORD *v347;
  uint64_t v348;
  uint64_t v349;
  _DWORD *v350;
  _DWORD *v351;
  int v353;
  uint64_t v354;
  int v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _DWORD **v359;
  uint64_t v360;
  _DWORD *v361;
  _DWORD *v362;
  uint64_t v363;
  uint64_t v364;
  _DWORD *v365;
  _DWORD *v366;
  int v368;
  uint64_t v369;
  int v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _DWORD **v374;
  uint64_t v375;
  _DWORD *v376;
  _DWORD *v377;
  uint64_t v378;
  uint64_t v379;
  _DWORD *v380;
  _DWORD *v381;
  int v383;
  uint64_t v384;
  int v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  _DWORD **v389;
  uint64_t v390;
  _DWORD *v391;
  _DWORD *v392;
  uint64_t v393;
  uint64_t v394;
  _DWORD *v395;
  _DWORD *v396;
  int v398;
  uint64_t v399;
  int v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _DWORD **v404;
  uint64_t v405;
  _DWORD *v406;
  _DWORD *v407;
  uint64_t v408;
  uint64_t v409;
  _DWORD *v410;
  _DWORD *v411;
  int v413;
  uint64_t v414;
  int v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _DWORD **v419;
  uint64_t v420;
  _DWORD *v421;
  _DWORD *v422;
  _QWORD *v423;
  uint64_t v424;
  uint64_t v425;
  __n128 v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  int **v431;
  uint64_t v432;
  __n128 v433;
  uint64_t v434;
  uint64_t v435;
  void **v436;
  _QWORD *v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  uint64_t *v441;
  __n128 v442;
  uint64_t v443;
  _DWORD *v444;
  uint64_t v445;
  int v446;
  _QWORD *v447;
  char *v448;
  uint64_t *v449;
  char **v450;
  char *v451;
  char *v452;
  char **v453;
  size_t v454;
  unint64_t v455;
  char *v456;
  uint64_t v457;
  char *v458;
  char *v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  _QWORD *v463;
  char *v464;
  char *v465;
  char *v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  char *v470;
  char *v471;
  __int128 *v472;
  uint64_t v473;
  __int128 v474;
  int v475;
  char *v476;
  int v477;
  uint64_t v478;
  char *v479;
  char *v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  _BYTE *v486;
  char *v487;
  int64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  char *v492;
  _OWORD *v493;
  char *v494;
  uint64_t v495;
  __int128 v496;
  int v497;
  _DWORD *v498;
  _DWORD *v499;
  uint64_t v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  char *v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  unint64_t v510;
  char *v511;
  char *v512;
  _QWORD *v513;
  uint64_t v514;
  unint64_t v515;
  unint64_t v516;
  uint64_t v517;
  char *v518;
  __int128 *v519;
  uint64_t v520;
  __int128 v521;
  void *v522;
  unint64_t v523;
  char *v524;
  int *v525;
  int *m;
  _DWORD *v527;
  int v528;
  char *v529;
  unint64_t v530;
  char *v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  unint64_t v536;
  _BYTE *v537;
  _DWORD *v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  char *v542;
  _OWORD *v543;
  char *v544;
  uint64_t v545;
  __int128 v546;
  int v547;
  _DWORD *v548;
  void *v549;
  unint64_t v550;
  char *v551;
  int *v552;
  int *n;
  _DWORD *v554;
  int v555;
  char *v556;
  unint64_t v557;
  char *v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unint64_t v563;
  _BYTE *v564;
  _DWORD *v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  char *v569;
  _OWORD *v570;
  char *v571;
  uint64_t v572;
  __int128 v573;
  int v574;
  uint64_t v575;
  _DWORD *v576;
  int v577;
  int v578;
  uint64_t v579;
  char *v580;
  char *v581;
  unint64_t v582;
  unint64_t v583;
  int *v584;
  uint64_t v585;
  char *v586;
  uint64_t v587;
  uint64_t v588;
  char *v589;
  uint64_t v590;
  void *v591;
  unint64_t v592;
  char *v593;
  int *v594;
  int *ii;
  _DWORD *v596;
  int v597;
  char *v598;
  unint64_t v599;
  char *v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  unint64_t v605;
  _BYTE *v606;
  _DWORD *v607;
  unint64_t v608;
  uint64_t v609;
  uint64_t v610;
  char *v611;
  _OWORD *v612;
  char *v613;
  uint64_t v614;
  __int128 v615;
  int v616;
  void *v617;
  unint64_t v618;
  char *v619;
  int *v620;
  int *jj;
  _DWORD *v622;
  int v623;
  char *v624;
  unint64_t v625;
  char *v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  unint64_t v631;
  _BYTE *v632;
  _DWORD *v633;
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  char *v637;
  _OWORD *v638;
  char *v639;
  uint64_t v640;
  __int128 v641;
  int v642;
  uint64_t v643;
  uint64_t v644;
  __int128 v645;
  uint64_t v646;
  int v647;
  int v648;
  int v649;
  int v650;
  int v651;
  _DWORD *v652;
  int *v653;
  int *v654;
  _QWORD *v655;
  unsigned int *v656;
  int v657;
  unint64_t v658;
  _DWORD *v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  char *v663;
  char *v664;
  char *v665;
  uint64_t v666;
  int v667;
  char *v668;
  char *v669;
  int *v670;
  int *v671;
  _QWORD *v672;
  unsigned int *v673;
  int v674;
  unint64_t v675;
  _DWORD *v676;
  unint64_t v677;
  unint64_t v678;
  unint64_t v679;
  char *v680;
  char *v681;
  char *v682;
  uint64_t v683;
  int v684;
  char *v685;
  char *v686;
  int *v687;
  int *v688;
  unsigned int *v689;
  int v690;
  unint64_t v691;
  _DWORD *v692;
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  char *v696;
  char *v697;
  char *v698;
  uint64_t v699;
  unsigned int v700;
  char *v701;
  char *v702;
  int *v703;
  int *v704;
  unsigned int *v705;
  int v706;
  unint64_t v707;
  _DWORD *v708;
  unint64_t v709;
  unint64_t v710;
  unint64_t v711;
  char *v712;
  char *v713;
  char *v714;
  uint64_t v715;
  unsigned int v716;
  char *v717;
  char *v718;
  int *v719;
  int *v720;
  unsigned int *v721;
  int v722;
  unint64_t v723;
  _DWORD *v724;
  unint64_t v725;
  unint64_t v726;
  unint64_t v727;
  char *v728;
  char *v729;
  char *v730;
  uint64_t v731;
  unsigned int v732;
  char *v733;
  char *v734;
  int *v735;
  int *v736;
  unsigned int *v737;
  int v738;
  unint64_t v739;
  _DWORD *v740;
  unint64_t v741;
  unint64_t v742;
  unint64_t v743;
  char *v744;
  char *v745;
  char *v746;
  uint64_t v747;
  unsigned int v748;
  char *v749;
  char *v750;
  int *v751;
  int *v752;
  unsigned int *v753;
  int v754;
  unint64_t v755;
  _DWORD *v756;
  unint64_t v757;
  unint64_t v758;
  unint64_t v759;
  char *v760;
  char *v761;
  char *v762;
  uint64_t v763;
  unsigned int v764;
  char *v765;
  char *v766;
  int *v767;
  int *v768;
  unsigned int *v769;
  unsigned int v770;
  unint64_t v771;
  _DWORD *v772;
  unint64_t v773;
  unint64_t v774;
  unint64_t v775;
  char *v776;
  char *v777;
  char *v778;
  uint64_t v779;
  unsigned int v780;
  char *v781;
  char *v782;
  unsigned int *v783;
  unsigned int *v784;
  unsigned int *v785;
  unsigned int v786;
  unint64_t v787;
  _DWORD *v788;
  unint64_t v789;
  unint64_t v790;
  unint64_t v791;
  char *v792;
  char *v793;
  char *v794;
  uint64_t v795;
  unsigned int v796;
  char *v797;
  char *v798;
  unsigned int *v799;
  unsigned int *v800;
  unsigned int *v801;
  unsigned int v802;
  unint64_t v803;
  _DWORD *v804;
  unint64_t v805;
  unint64_t v806;
  unint64_t v807;
  char *v808;
  char *v809;
  char *v810;
  uint64_t v811;
  unsigned int v812;
  char *v813;
  char *v814;
  _QWORD *v815;
  unint64_t v816;
  unint64_t v817;
  uint64_t v818;
  int *v819;
  int *v820;
  uint64_t v821;
  unint64_t v822;
  uint64_t v823;
  int v824;
  int v825;
  int v826;
  uint64_t v827;
  _QWORD *v828;
  _QWORD *v829;
  int32x4_t **v830;
  unint64_t v831;
  int32x4_t *v832;
  int32x4_t **v833;
  int32x4_t *v834;
  unint64_t v835;
  unint64_t v836;
  uint64_t v837;
  int32x4_t *v838;
  uint64_t v839;
  int32x4_t *v840;
  uint64_t v841;
  int32x4_t v842;
  int32x4_t v843;
  int32x4_t v844;
  unint64_t v845;
  _QWORD *v846;
  _QWORD *v847;
  uint64_t v848;
  _DWORD *v849;
  unint64_t v850;
  _DWORD *v851;
  _DWORD *v852;
  _QWORD *v853;
  void *v854;
  unint64_t v855;
  char *v856;
  uint64_t v857;
  uint64_t v858;
  __int128 v859;
  char *v860;
  uint64_t v861;
  int64x2_t *v862;
  uint64_t v863;
  char *v864;
  unint64_t v865;
  char *v866;
  unint64_t v867;
  unint64_t v868;
  unint64_t v869;
  char *v870;
  char *v871;
  uint64_t v872;
  char *v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  uint64_t v880;
  _BYTE *v881;
  _BYTE *v882;
  char *v883;
  char *v884;
  char *v885;
  uint64_t v886;
  char *v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  uint64_t v894;
  uint64_t v895;
  __int128 v896;
  char *v897;
  uint64_t v898;
  char *v899;
  unint64_t v900;
  char *v901;
  unint64_t v902;
  unint64_t v903;
  unint64_t v904;
  char *v905;
  char *v906;
  uint64_t v907;
  char *v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  uint64_t v915;
  unint64_t v916;
  unint64_t v917;
  BOOL v918;
  uint64_t v919;
  unint64_t v920;
  uint64_t v921;
  unint64_t v922;
  uint64_t v923;
  unint64_t v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  unint64_t v930;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  unint64_t v934;
  uint64_t v935;
  unint64_t v936;
  uint64_t v937;
  unint64_t v938;
  uint64_t v939;
  unint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unsigned int *v945;
  unsigned int v946;
  uint64_t v947;
  uint64_t v948;
  unint64_t *v949;
  uint64_t v950;
  _QWORD *v951;
  unsigned int v952;
  uint64_t v953;
  uint64_t v954;
  _QWORD *v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  size_t v961;
  unsigned int v962;
  uint64_t v963;
  unsigned int v964;
  uint64_t v965;
  uint64_t v966;
  _QWORD *v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  size_t v973;
  unsigned int v974;
  uint64_t v975;
  uint64_t *v976;
  unsigned int v977;
  uint64_t v978;
  unint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  size_t v983;
  unsigned int v984;
  uint64_t v985;
  unsigned int v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  size_t v992;
  unsigned int v993;
  uint64_t v994;
  unsigned int v995;
  uint64_t v996;
  uint64_t v997;
  _QWORD *v998;
  uint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  size_t v1004;
  unsigned int v1005;
  uint64_t v1006;
  unsigned int v1007;
  uint64_t v1008;
  uint64_t v1009;
  _QWORD *v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  size_t v1016;
  unsigned int v1017;
  uint64_t v1018;
  unsigned int v1019;
  uint64_t v1020;
  uint64_t v1021;
  _QWORD *v1022;
  uint64_t v1023;
  unint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  size_t v1028;
  unsigned int v1029;
  uint64_t v1030;
  unsigned int v1031;
  uint64_t v1032;
  uint64_t v1033;
  _QWORD *v1034;
  uint64_t v1035;
  unint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  size_t v1040;
  unsigned int v1041;
  uint64_t v1042;
  unsigned int v1043;
  uint64_t v1044;
  uint64_t v1045;
  _QWORD *v1046;
  uint64_t v1047;
  unint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  size_t v1052;
  unsigned int v1053;
  uint64_t v1054;
  unsigned int v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  size_t v1064;
  unsigned int v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  unsigned int *v1072;
  unsigned int v1073;
  uint64_t v1074;
  uint64_t v1075;
  unint64_t *v1076;
  uint64_t v1077;
  _QWORD *v1078;
  unsigned int v1079;
  uint64_t v1080;
  uint64_t v1081;
  _QWORD *v1082;
  uint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  size_t v1088;
  unsigned int v1089;
  uint64_t v1090;
  unsigned int v1091;
  uint64_t v1092;
  uint64_t v1093;
  _QWORD *v1094;
  uint64_t v1095;
  unint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  size_t v1100;
  unsigned int v1101;
  uint64_t v1102;
  uint64_t *v1103;
  unsigned int v1104;
  uint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  size_t v1110;
  unsigned int v1111;
  uint64_t v1112;
  unsigned int v1113;
  uint64_t v1114;
  unint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  size_t v1119;
  unsigned int v1120;
  uint64_t v1121;
  unsigned int v1122;
  uint64_t v1123;
  uint64_t v1124;
  _QWORD *v1125;
  uint64_t v1126;
  unint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  size_t v1131;
  unsigned int v1132;
  uint64_t v1133;
  unsigned int v1134;
  uint64_t v1135;
  uint64_t v1136;
  _QWORD *v1137;
  uint64_t v1138;
  unint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  size_t v1143;
  unsigned int v1144;
  uint64_t v1145;
  unsigned int v1146;
  uint64_t v1147;
  uint64_t v1148;
  _QWORD *v1149;
  uint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  size_t v1155;
  unsigned int v1156;
  uint64_t v1157;
  unsigned int v1158;
  uint64_t v1159;
  uint64_t v1160;
  _QWORD *v1161;
  uint64_t v1162;
  unint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  size_t v1167;
  unsigned int v1168;
  uint64_t v1169;
  unsigned int v1170;
  uint64_t v1171;
  uint64_t v1172;
  _QWORD *v1173;
  uint64_t v1174;
  unint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  size_t v1179;
  unsigned int v1180;
  uint64_t v1181;
  unsigned int v1182;
  uint64_t v1183;
  uint64_t v1184;
  _QWORD *v1185;
  uint64_t v1186;
  unint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  size_t v1191;
  unsigned int v1192;
  uint64_t v1193;
  uint64_t v1194;
  _QWORD *v1195;
  _QWORD *v1196;
  uint64_t v1197;
  uint64_t v1198;
  int *v1199;
  int *v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  unsigned int *v1205;
  unsigned int v1206;
  uint64_t v1207;
  uint64_t v1208;
  unint64_t *v1209;
  uint64_t v1210;
  _QWORD *v1211;
  unsigned int v1212;
  uint64_t v1213;
  uint64_t v1214;
  _QWORD *v1215;
  uint64_t v1216;
  unint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  size_t v1221;
  unsigned int v1222;
  uint64_t v1223;
  uint64_t *v1224;
  unsigned int v1225;
  uint64_t v1226;
  unint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  size_t v1231;
  unsigned int v1232;
  uint64_t v1233;
  unsigned int v1234;
  uint64_t v1235;
  unint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  size_t v1240;
  unsigned int v1241;
  uint64_t v1242;
  unsigned int v1243;
  uint64_t v1244;
  uint64_t v1245;
  _QWORD *v1246;
  uint64_t v1247;
  unint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  size_t v1252;
  unsigned int v1253;
  uint64_t v1254;
  unsigned int v1255;
  uint64_t v1256;
  uint64_t v1257;
  _QWORD *v1258;
  uint64_t v1259;
  unint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  size_t v1264;
  unsigned int v1265;
  uint64_t v1266;
  unsigned int v1267;
  uint64_t v1268;
  uint64_t v1269;
  _QWORD *v1270;
  uint64_t v1271;
  unint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  size_t v1276;
  unsigned int v1277;
  uint64_t v1278;
  uint64_t v1279;
  unint64_t v1280;
  uint64_t v1281;
  unint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  unint64_t v1286;
  uint64_t v1287;
  unint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  unint64_t v1292;
  uint64_t v1293;
  unint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  unint64_t v1298;
  uint64_t v1299;
  unint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unint64_t v1304;
  uint64_t v1305;
  unint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  unint64_t v1310;
  uint64_t v1311;
  unint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  unint64_t v1316;
  uint64_t v1317;
  unint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  unint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  unint64_t v1328;
  uint64_t v1329;
  unint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  unint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t kk;
  uint64_t v1342;
  uint64_t v1344;
  uint64_t v1345;
  unsigned int v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t mm;
  uint64_t v1352;
  uint64_t nn;
  uint64_t v1354;
  uint64_t i1;
  uint64_t v1356;
  uint64_t i2;
  uint64_t v1358;
  uint64_t i3;
  uint64_t v1360;
  uint64_t i4;
  uint64_t v1362;
  uint64_t i5;
  uint64_t v1364;
  uint64_t i6;
  uint64_t v1366;
  uint64_t i7;
  uint64_t v1368;
  uint64_t i8;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  unint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  int v1409;
  uint64_t v1410;
  int v1411;
  uint64_t v1412;
  int v1413;
  uint64_t v1414;
  int v1415;
  uint64_t v1416;
  int v1417;
  int v1418;
  uint64_t v1419;
  int v1420;
  uint64_t v1421;
  int v1422;
  uint64_t v1423;
  int v1424;
  uint64_t v1425;
  int v1426;
  uint64_t v1427;
  int v1428;
  uint64_t v1429;
  int v1430;
  uint64_t v1431;
  uint64_t v1432;
  unint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  unint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  unint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  unint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  unint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  unint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  unint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  unint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  _QWORD *v1468;
  _QWORD *v1469;
  uint64_t v1470;
  uint64_t v1471;
  _QWORD *v1472;
  _QWORD *v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  unint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  unint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  _QWORD *v1488;
  _QWORD *v1489;
  uint64_t v1490;
  _QWORD *v1491;
  _QWORD *v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  unint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  unint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  unint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  unint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  unint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  unint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  unint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  unint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  _QWORD *v1542;
  _QWORD *v1543;
  uint64_t v1544;
  _QWORD *v1545;
  _QWORD *v1546;
  uint64_t v1547;
  uint64_t v1548;
  unint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  char *v1552;
  __int128 *v1553;
  uint64_t v1554;
  __int128 v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  char *v1561;
  uint64_t v1562;
  unint64_t v1563;
  uint64_t v1564;
  unint64_t v1565;
  char *v1566;
  char *v1567;
  char *v1568;
  uint64_t v1569;
  unint64_t v1570;
  unint64_t v1571;
  uint64_t v1572;
  char *v1573;
  char *v1574;
  uint64_t v1575;
  __int128 v1576;
  uint64_t v1577;
  int v1578;
  _DWORD *v1579;
  int v1580;
  uint64_t v1581;
  char *v1582;
  char *v1583;
  unint64_t v1584;
  unint64_t v1585;
  int *v1586;
  uint64_t v1587;
  char *v1588;
  uint64_t v1589;
  uint64_t v1590;
  char *v1591;
  uint64_t v1592;
  uint64_t v1593;
  unint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  char *v1597;
  __int128 *v1598;
  uint64_t v1599;
  __int128 v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  char *v1606;
  uint64_t v1607;
  unint64_t v1608;
  uint64_t v1609;
  unint64_t v1610;
  char *v1611;
  char *v1612;
  char *v1613;
  uint64_t v1614;
  unint64_t v1615;
  unint64_t v1616;
  uint64_t v1617;
  char *v1618;
  char *v1619;
  uint64_t v1620;
  __int128 v1621;
  uint64_t v1622;
  int v1623;
  _DWORD *v1624;
  int v1625;
  uint64_t v1626;
  char *v1627;
  char *v1628;
  unint64_t v1629;
  unint64_t v1630;
  int *v1631;
  uint64_t v1632;
  char *v1633;
  uint64_t v1634;
  uint64_t v1635;
  char *v1636;
  uint64_t v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  char *v1642;
  __int128 *v1643;
  uint64_t v1644;
  __int128 v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  char *v1651;
  uint64_t v1652;
  unint64_t v1653;
  uint64_t v1654;
  unint64_t v1655;
  char *v1656;
  char *v1657;
  char *v1658;
  uint64_t v1659;
  unint64_t v1660;
  unint64_t v1661;
  uint64_t v1662;
  char *v1663;
  char *v1664;
  uint64_t v1665;
  __int128 v1666;
  uint64_t v1667;
  int v1668;
  _DWORD *v1669;
  int v1670;
  uint64_t v1671;
  char *v1672;
  char *v1673;
  unint64_t v1674;
  unint64_t v1675;
  int *v1676;
  uint64_t v1677;
  char *v1678;
  uint64_t v1679;
  uint64_t v1680;
  char *v1681;
  uint64_t v1682;
  uint64_t v1683;
  unint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  char *v1687;
  __int128 *v1688;
  uint64_t v1689;
  __int128 v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  char *v1696;
  uint64_t v1697;
  unint64_t v1698;
  uint64_t v1699;
  unint64_t v1700;
  char *v1701;
  char *v1702;
  char *v1703;
  uint64_t v1704;
  unint64_t v1705;
  unint64_t v1706;
  uint64_t v1707;
  char *v1708;
  char *v1709;
  uint64_t v1710;
  __int128 v1711;
  uint64_t v1712;
  int v1713;
  _DWORD *v1714;
  int v1715;
  uint64_t v1716;
  unsigned int *v1717;
  unsigned int *v1718;
  unint64_t v1719;
  unint64_t v1720;
  char *v1721;
  char *v1722;
  char *v1723;
  char *v1724;
  uint64_t v1725;
  char *v1726;
  uint64_t v1727;
  uint64_t v1728;
  unint64_t v1729;
  uint64_t v1730;
  char *v1731;
  char *v1732;
  char *v1733;
  uint64_t v1734;
  __int128 v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t v1740;
  char *v1741;
  uint64_t v1742;
  unint64_t v1743;
  uint64_t v1744;
  unint64_t v1745;
  char *v1746;
  char *v1747;
  char *v1748;
  uint64_t v1749;
  unint64_t v1750;
  unint64_t v1751;
  uint64_t v1752;
  char *v1753;
  char *v1754;
  uint64_t v1755;
  __int128 v1756;
  uint64_t v1757;
  int v1758;
  _DWORD *v1759;
  int v1760;
  uint64_t v1761;
  char *v1762;
  char *v1763;
  unint64_t v1764;
  unint64_t v1765;
  char *v1766;
  char *v1767;
  char *v1768;
  char *v1769;
  uint64_t v1770;
  char *v1771;
  char *v1772;
  uint64_t v1773;
  unint64_t v1774;
  uint64_t v1775;
  char *v1776;
  char *v1777;
  char *v1778;
  uint64_t v1779;
  __int128 v1780;
  uint64_t v1781;
  uint64_t v1782;
  char *v1783;
  uint64_t v1784;
  uint64_t v1785;
  char *v1786;
  uint64_t v1787;
  unint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  char *v1791;
  char *v1792;
  char *v1793;
  uint64_t v1794;
  unint64_t v1795;
  unint64_t v1796;
  uint64_t v1797;
  char *v1798;
  char *v1799;
  uint64_t v1800;
  __int128 v1801;
  uint64_t v1802;
  int v1803;
  _DWORD *v1804;
  int v1805;
  uint64_t v1806;
  char *v1807;
  char *v1808;
  unint64_t v1809;
  unint64_t v1810;
  char *v1811;
  char *v1812;
  char *v1813;
  char *v1814;
  uint64_t v1815;
  char *v1816;
  char *v1817;
  uint64_t v1818;
  unint64_t v1819;
  uint64_t v1820;
  char *v1821;
  char *v1822;
  char *v1823;
  uint64_t v1824;
  __int128 v1825;
  uint64_t v1826;
  uint64_t v1827;
  char *v1828;
  uint64_t v1829;
  uint64_t v1830;
  char *v1831;
  uint64_t v1832;
  unint64_t v1833;
  uint64_t v1834;
  unint64_t v1835;
  char *v1836;
  char *v1837;
  char *v1838;
  uint64_t v1839;
  unint64_t v1840;
  unint64_t v1841;
  uint64_t v1842;
  char *v1843;
  char *v1844;
  uint64_t v1845;
  __int128 v1846;
  uint64_t v1847;
  int v1848;
  _DWORD *v1849;
  int v1850;
  uint64_t v1851;
  char *v1852;
  char *v1853;
  unint64_t v1854;
  unint64_t v1855;
  char *v1856;
  char *v1857;
  char *v1858;
  char *v1859;
  uint64_t v1860;
  char *v1861;
  char *v1862;
  uint64_t v1863;
  unint64_t v1864;
  uint64_t v1865;
  char *v1866;
  char *v1867;
  char *v1868;
  uint64_t v1869;
  __int128 v1870;
  uint64_t v1871;
  uint64_t v1872;
  char *v1873;
  uint64_t v1874;
  uint64_t v1875;
  char *v1876;
  uint64_t v1877;
  unint64_t v1878;
  uint64_t v1879;
  unint64_t v1880;
  char *v1881;
  char *v1882;
  char *v1883;
  uint64_t v1884;
  unint64_t v1885;
  unint64_t v1886;
  uint64_t v1887;
  char *v1888;
  char *v1889;
  uint64_t v1890;
  __int128 v1891;
  uint64_t v1892;
  int v1893;
  _DWORD *v1894;
  int v1895;
  uint64_t v1896;
  char *v1897;
  char *v1898;
  unint64_t v1899;
  unint64_t v1900;
  char *v1901;
  char *v1902;
  char *v1903;
  char *v1904;
  uint64_t v1905;
  char *v1906;
  char *v1907;
  uint64_t v1908;
  unint64_t v1909;
  uint64_t v1910;
  char *v1911;
  char *v1912;
  char *v1913;
  uint64_t v1914;
  __int128 v1915;
  uint64_t v1916;
  uint64_t v1917;
  char *v1918;
  uint64_t v1919;
  uint64_t v1920;
  char *v1921;
  uint64_t v1922;
  unint64_t v1923;
  uint64_t v1924;
  unint64_t v1925;
  char *v1926;
  char *v1927;
  char *v1928;
  uint64_t v1929;
  unint64_t v1930;
  unint64_t v1931;
  uint64_t v1932;
  char *v1933;
  char *v1934;
  uint64_t v1935;
  __int128 v1936;
  uint64_t v1937;
  int v1938;
  _DWORD *v1939;
  int v1940;
  uint64_t v1941;
  int v1942;
  int v1943;
  int v1944;
  int v1945;
  int v1946;
  int v1947;
  int v1948;
  int v1949;
  int v1950;
  unint64_t v1951;
  uint64_t v1952;
  int v1953;
  int v1954;
  int v1955;
  int v1956;
  int v1957;
  void *v1958;
  uint64_t v1959;
  _QWORD *v1960;
  size_t v1961;
  int v1962;
  int v1963;
  int v1964;
  int v1965;
  int v1966;
  int v1967;
  int v1968;
  int v1969;
  int v1970;
  int v1971;
  int v1972;
  int v1973;
  int v1974;
  void **v1975;
  void **v1976;
  void **v1977;
  uint64_t v1978;
  char **v1979;
  void **v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  _QWORD *v2001;
  void **v2002;
  uint64_t v2003;
  _QWORD *v2004;
  void **v2005;
  int v2006;
  _QWORD *v2007;
  void **v2008;
  int64x2_t *v2009;
  char **v2010;
  void **v2011;
  unsigned int v2012;
  int v2013;
  void **v2014;
  _QWORD *v2015;
  int v2016;
  char **v2017;
  _DWORD *v2018;
  void **v2019;
  char *v2020;
  uint64_t v2021;
  uint64_t v2022;
  _QWORD *v2023;
  _QWORD *v2024;
  char **v2025;
  char **v2026;
  uint64_t v2027;
  char **v2028;
  uint64_t v2029;
  int v2030;
  _QWORD *v2031;
  __int128 v2032;
  __int128 v2033;
  __int128 v2034;
  __int128 v2035;
  __int128 v2036;
  _BYTE v2037[12];
  int64x2_t v2038;
  int64x2_t v2039[2];
  int64x2_t v2040;
  int64x2_t v2041;
  int64x2_t v2042;
  int64x2_t v2043;
  int64x2_t v2044;
  __int128 v2045;
  __int128 v2046;
  __int128 v2047;
  __int128 v2048;
  __int128 v2049;
  __int128 v2050;
  __int128 v2051;
  uint64_t v2052;

  v1 = a1;
  v2052 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t)(a1 + 4463);
  v3 = a1[4463];
  v4 = a1[4464];
  v6 = a1[4466];
  v5 = a1[4467];
  v8 = a1[4469];
  v7 = a1[4470];
  v9 = a1[4472];
  v10 = a1[4473];
  v11 = a1[4475];
  v12 = *(_QWORD *)(v2 + 104);
  v14 = *(_QWORD *)(v2 + 120);
  v13 = *(_QWORD *)(v2 + 128);
  v16 = *(_QWORD *)(v2 + 144);
  v15 = *(_QWORD *)(v2 + 152);
  v17 = *(_QWORD *)(v2 + 168);
  v18 = *(_QWORD *)(v2 + 176);
  v19 = *(_QWORD *)(v2 + 192);
  v20 = *(_QWORD *)(v2 + 200);
  v22 = *(_QWORD *)(v2 + 216);
  v21 = *(_QWORD *)(v2 + 224);
  v2009 = (int64x2_t *)(v1 + 41);
  if (*((_BYTE *)v1 + 1944))
    goto LABEL_1523;
  v1981 = v6;
  v1982 = v3;
  v1983 = v5;
  v1984 = v4;
  v1985 = v8;
  v1986 = v9;
  v1987 = v7;
  v1988 = v10;
  v1989 = v11;
  v1990 = *(_QWORD *)(v2 + 120);
  v1991 = *(_QWORD *)(v2 + 104);
  v1992 = *(_QWORD *)(v2 + 128);
  v1993 = *(_QWORD *)(v2 + 144);
  v1994 = *(_QWORD *)(v2 + 152);
  v1995 = *(_QWORD *)(v2 + 168);
  v1996 = *(_QWORD *)(v2 + 192);
  kdebug_trace();
  v2031 = v1;
  v1999 = v22;
  v2000 = v21;
  v1997 = v18;
  v1998 = v20;
  if (!*((_BYTE *)v1 + 1945))
    goto LABEL_67;
  if (*((_DWORD *)v1 + 761) == 1)
    v23 = 3;
  else
    v23 = 1;
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD *))(v1[2546] + 24))(v1 + 2546) + 1616))
    goto LABEL_7;
  v24 = (*(uint64_t (**)(_QWORD *))(v1[2546] + 24))(v1 + 2546);
  v25 = (char **)sub_20FA3FF3C(v24);
  v2021 = (uint64_t)(v1 + 4498);
  sub_20FA43AB8((char **)v1 + 4498, v25);
  v2025 = v25 + 33;
  if (v1[4498] == v1[4499]
    && v1[4501] == v1[4502]
    && v1[4504] == v1[4505]
    && v1[4507] == v1[4508]
    && v1[4510] == v1[4511]
    && v1[4513] == v1[4514]
    && v1[4516] == v1[4517]
    && v1[4519] == v1[4520]
    && v1[4522] == v1[4523]
    && v1[4525] == v1[4526])
  {
    v26 = (char **)((*(uint64_t (**)(_QWORD *))(v1[2546] + 40))(v1 + 2546) + 15304);
    v27 = (uint64_t)(v1 + 4528);
    if (v1 + 4528 != v26)
      sub_20F8EE574((char **)v1 + 4528, v26);
    for (i = 0; i != 10; ++i)
    {
      v29 = dword_2103B98E8[i];
      if ((v29 & 0x80000000) == 0)
      {
        v30 = v27 + 24 * i;
        v31 = *(char **)v30;
        v34 = *(char **)(v30 + 8);
        v33 = (char **)(v30 + 8);
        v32 = v34;
        if (v31 != v34)
        {
          v35 = v2025[3 * v29 + 1];
          v36 = v2025[3 * v29];
          v37 = v31;
          while (v36 != v35)
          {
            v38 = *(_DWORD *)v37;
            if (*(_DWORD *)v37 >= *(_DWORD *)v36)
            {
              v37 += 4 * (*(_DWORD *)v36 >= v38);
              v36 += 4;
              if (v37 == v32)
                goto LABEL_29;
            }
            else
            {
              *(_DWORD *)v31 = v38;
              v31 += 4;
              v37 += 4;
              if (v37 == v32)
              {
LABEL_29:
                if (v31 == v32)
                  goto LABEL_21;
                goto LABEL_33;
              }
            }
          }
          if (v37 != v31)
          {
            v39 = v32 - v37;
            memmove(v31, v37, v32 - v37);
            v31 += v39;
            if (v31 != *v33)
            {
LABEL_33:
              *v33 = v31;
              continue;
            }
          }
        }
      }
LABEL_21:
      ;
    }
    sub_20FA43BF4(&v2032, v2, v27);
    v2051 = 0u;
    v2050 = 0u;
    v2049 = 0u;
    v2048 = 0u;
    v2047 = 0u;
    v2046 = 0u;
    v2045 = 0u;
    v2044 = 0u;
    v2043 = 0u;
    v2042 = 0u;
    v2041 = 0u;
    v2040 = 0u;
    memset(v2039, 0, sizeof(v2039));
    v2038 = 0u;
    sub_20FA46484((_DWORD *)v2031 + 5100, (uint64_t)&v2032, (uint64_t)&v2038);
    sub_20F89E908((uint64_t)&v2038);
    sub_20F89E908((uint64_t)&v2032);
    goto LABEL_67;
  }
  v2010 = (char **)(v1 + 4558);
  sub_20F8EE574((char **)v1 + 4558, (char **)v1 + 4498);
  v2012 = v23;
  v1979 = v25;
  v40 = 0;
  v2004 = v1 + 4531;
  v2007 = v1 + 4696;
  v2001 = v1 + 4564;
  v2015 = v1 + 2546;
  v2018 = v1 + 2549;
  do
  {
    v41 = dword_2103B98E8[v40];
    if ((v41 & 0x80000000) != 0)
      goto LABEL_36;
    v42 = &v2010[3 * v40];
    v43 = *v42;
    v45 = v42 + 1;
    v44 = v42[1];
    v46 = &v2025[3 * v41];
    v47 = *v46;
    v50 = v46[1];
    v49 = v46 + 1;
    v48 = v50;
    if (*v42 == v44)
    {
      v51 = v42[1];
      v53 = v47;
    }
    else
    {
      v51 = *v42;
      v52 = *v42;
      v53 = v47;
      while (v53 != v48)
      {
        if (*(_DWORD *)v53 < *(_DWORD *)v52)
          goto LABEL_46;
        v53 += 4 * (*(_DWORD *)v52 >= *(_DWORD *)v53);
        v52 += 4;
        v51 += 4;
        if (v52 == v44)
        {
          v51 = v42[1];
          goto LABEL_46;
        }
      }
      v51 = v42[1];
      v53 = v48;
    }
LABEL_46:
    v54 = (v51 - v43) >> 2;
    v55 = v44 - v43;
    v56 = v55 >> 2;
    v57 = ((v48 - v47) >> 2) + (v55 >> 1) - v54;
    if (v57 <= v56)
    {
      if (v57 < v56)
        *v45 = &v43[4 * v57];
    }
    else
    {
      sub_20E93DC84((uint64_t)&v2010[3 * v40], v57 - v56);
      v43 = *v42;
    }
    v58 = &v43[4 * v56];
    v59 = *v49;
    if (v54 == v56)
    {
      v60 = &v43[4 * v56];
LABEL_57:
      v64 = v59 - v53;
      if (v59 == v53)
        goto LABEL_61;
      v65 = v60;
      v61 = v53;
    }
    else
    {
      v61 = &v43[4 * v54];
      v60 = &v43[4 * v56];
      while (v53 != v59)
      {
        v62 = *(_DWORD *)v53;
        v63 = *(_DWORD *)v53 >= *(_DWORD *)v61;
        if (*(_DWORD *)v53 >= *(_DWORD *)v61)
          v62 = *(_DWORD *)v61;
        v53 += 4 * (*(_DWORD *)v61 >= *(_DWORD *)v53);
        v61 += 4 * v63;
        *(_DWORD *)v60 = v62;
        v60 += 4;
        if (v61 == v58)
          goto LABEL_57;
      }
      v64 = v58 - v61;
      v65 = v60;
    }
    memmove(v65, v61, v64);
LABEL_61:
    v66 = &v60[v64];
    v67 = *v42;
    if (&v60[v64] != *v45)
      *v45 = v66;
    if (v54 != v56)
    {
      v68 = &v67[4 * v54];
      v69 = &v67[4 * v56];
      v70 = v66 - v69;
      if (v70)
        memmove(&v67[4 * v54], v69, v70);
      *v45 = &v68[v70];
    }
LABEL_36:
    ++v40;
  }
  while (v40 != 10);
  v174 = (char **)((*(uint64_t (**)(_QWORD *))(*v2015 + 40))(v2015) + 15304);
  v175 = (char **)(v2021 + 240);
  if ((char **)(v2021 + 240) != v174)
    sub_20F8EE574((char **)(v2021 + 240), v174);
  for (j = 0; j != 10; ++j)
  {
    v177 = &v175[3 * j];
    v178 = *v177;
    v181 = v177[1];
    v180 = v177 + 1;
    v179 = v181;
    if (v178 != v181)
    {
      v182 = v2010[3 * j + 1];
      v183 = v2010[3 * j];
      v184 = v178;
      while (v183 != v182)
      {
        v185 = *(_DWORD *)v184;
        if (*(_DWORD *)v184 >= *(_DWORD *)v183)
        {
          v184 += 4 * (*(_DWORD *)v183 >= v185);
          v183 += 4;
          if (v184 == v179)
            goto LABEL_181;
        }
        else
        {
          *(_DWORD *)v178 = v185;
          v178 += 4;
          v184 += 4;
          if (v184 == v179)
          {
LABEL_181:
            if (v178 == v179)
              goto LABEL_174;
            goto LABEL_185;
          }
        }
      }
      if (v184 != v178)
      {
        v186 = v179 - v184;
        memmove(v178, v184, v179 - v184);
        v178 += v186;
        if (v178 != *v180)
        {
LABEL_185:
          *v180 = v178;
          continue;
        }
      }
    }
LABEL_174:
    ;
  }
  sub_20F8EE574(v2010, v175);
  sub_20FA43DFC((uint64_t)v2010, v2021);
  v187 = 9 * ((v2004[1] - *v2004) >> 2)
       + 6
       * (((v2004[4] - v2004[3]) >> 2)
        + ((*(_QWORD *)(v2021 + 248) - *(_QWORD *)(v2021 + 240)) >> 2)
        + ((v2004[7] - v2004[6]) >> 2))
       + ((v2004[13] - v2004[12]) >> 2)
       + ((*((_DWORD *)v2004 + 38) - *((_DWORD *)v2004 + 36)) & 0xFFFFFFFC)
       + ((*((_DWORD *)v2004 + 44) - *((_DWORD *)v2004 + 42)) & 0xFFFFFFFC)
       + 3
       * (((v2004[16] - v2004[15]) >> 2)
        + ((v2004[10] - v2004[9]) >> 2)
        + ((v2004[25] - v2004[24]) >> 2));
  v188 = (void **)(v2031 + 2547);
  *v2018 = v187;
  if (v2031[2548] < v187)
  {
    if (*v188)
      MEMORY[0x212BC6368](*v188, 0x1000C8000313F17);
    v2031[2547] = 0;
    v189 = (8 * v187 + 31) & 0xFFFFFFFE0;
    v2031[2548] = v189 >> 3;
    *v188 = operator new(v189, (std::align_val_t)0x20uLL);
  }
  v190 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2015 + 24))(v2015);
  v191 = sub_20FA44008(v190, (uint64_t)v175, v188);
  v192 = (_QWORD *)(*(uint64_t (**)(_QWORD *, int64x2_t))(*v2015 + 24))(v2015, v191);
  v194 = v192[1];
  v193 = v192[2];
  if (v194 == v193)
  {
    v197 = v2001;
  }
  else
  {
    v195 = (_DWORD *)v2004[27];
    v196 = (_DWORD *)v2004[28];
    v197 = v2001;
    if (v195 != v196)
    {
      v198 = 0;
      do
      {
        v199 = *(_QWORD *)(v194 + 8);
        if (*v195 == *(_DWORD *)v194)
        {
          if (*(_BYTE *)(v199 + 20))
            v200 = v198;
          else
            v200 = -1;
          v198 += *(unsigned __int8 *)(v199 + 20);
          ++v195;
        }
        else
        {
          v200 = -1;
        }
        *(_DWORD *)v199 = v200;
        v194 += 16;
      }
      while (v194 != v193 && v195 != v196);
    }
  }
  if (v194 != v193)
  {
    v281 = v193 - v194 - 16;
    if (v281 < 0x10)
    {
      v282 = v194;
      goto LABEL_299;
    }
    v283 = (v281 >> 4) + 1;
    v282 = v194 + 16 * (v283 & 0x1FFFFFFFFFFFFFFELL);
    v284 = (_DWORD **)(v194 + 24);
    v285 = v283 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v286 = *(v284 - 2);
      v287 = *v284;
      v284 += 4;
      *v286 = -1;
      *v287 = -1;
      v285 -= 2;
    }
    while (v285);
    if (v283 != (v283 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_299:
        **(_DWORD **)(v282 + 8) = -1;
        v282 += 16;
      }
      while (v282 != v193);
    }
  }
  v289 = v192[13];
  v288 = v192[14];
  v290 = (_DWORD *)v2004[30];
  v291 = (_DWORD *)v2004[31];
  if (v289 != v288 && v290 != v291)
  {
    v293 = 0;
    do
    {
      v294 = *(_QWORD *)(v289 + 8);
      if (*v290 == *(_DWORD *)v289)
      {
        if (*(_BYTE *)(v294 + 20))
          v295 = v293;
        else
          v295 = -1;
        v293 += *(unsigned __int8 *)(v294 + 20);
        ++v290;
      }
      else
      {
        v295 = -1;
      }
      *(_DWORD *)v294 = v295;
      v289 += 16;
    }
    while (v289 != v288 && v290 != v291);
  }
  if (v289 != v288)
  {
    v296 = v288 - v289 - 16;
    if (v296 < 0x10)
    {
      v297 = v289;
      goto LABEL_319;
    }
    v298 = (v296 >> 4) + 1;
    v297 = v289 + 16 * (v298 & 0x1FFFFFFFFFFFFFFELL);
    v299 = (_DWORD **)(v289 + 24);
    v300 = v298 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v301 = *(v299 - 2);
      v302 = *v299;
      v299 += 4;
      *v301 = -1;
      *v302 = -1;
      v300 -= 2;
    }
    while (v300);
    if (v298 != (v298 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_319:
        **(_DWORD **)(v297 + 8) = -1;
        v297 += 16;
      }
      while (v297 != v288);
    }
  }
  v304 = v192[25];
  v303 = v192[26];
  v305 = (_DWORD *)*v197;
  v306 = (_DWORD *)v197[1];
  if (v304 != v303 && v305 != v306)
  {
    v308 = 0;
    do
    {
      v309 = *(_QWORD *)(v304 + 8);
      if (*v305 == *(_DWORD *)v304)
      {
        if (*(_BYTE *)(v309 + 20))
          v310 = v308;
        else
          v310 = -1;
        v308 += *(unsigned __int8 *)(v309 + 20);
        ++v305;
      }
      else
      {
        v310 = -1;
      }
      *(_DWORD *)v309 = v310;
      v304 += 16;
    }
    while (v304 != v303 && v305 != v306);
  }
  if (v304 != v303)
  {
    v311 = v303 - v304 - 16;
    if (v311 < 0x10)
    {
      v312 = v304;
      goto LABEL_339;
    }
    v313 = (v311 >> 4) + 1;
    v312 = v304 + 16 * (v313 & 0x1FFFFFFFFFFFFFFELL);
    v314 = (_DWORD **)(v304 + 24);
    v315 = v313 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v316 = *(v314 - 2);
      v317 = *v314;
      v314 += 4;
      *v316 = -1;
      *v317 = -1;
      v315 -= 2;
    }
    while (v315);
    if (v313 != (v313 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_339:
        **(_DWORD **)(v312 + 8) = -1;
        v312 += 16;
      }
      while (v312 != v303);
    }
  }
  v319 = v192[37];
  v318 = v192[38];
  v320 = (_DWORD *)v197[3];
  v321 = (_DWORD *)v197[4];
  if (v319 != v318 && v320 != v321)
  {
    v323 = 0;
    do
    {
      v324 = *(_QWORD *)(v319 + 8);
      if (*v320 == *(_DWORD *)v319)
      {
        if (*(_BYTE *)(v324 + 20))
          v325 = v323;
        else
          v325 = -1;
        v323 += *(unsigned __int8 *)(v324 + 20);
        ++v320;
      }
      else
      {
        v325 = -1;
      }
      *(_DWORD *)v324 = v325;
      v319 += 16;
    }
    while (v319 != v318 && v320 != v321);
  }
  if (v319 != v318)
  {
    v326 = v318 - v319 - 16;
    if (v326 < 0x10)
    {
      v327 = v319;
      goto LABEL_359;
    }
    v328 = (v326 >> 4) + 1;
    v327 = v319 + 16 * (v328 & 0x1FFFFFFFFFFFFFFELL);
    v329 = (_DWORD **)(v319 + 24);
    v330 = v328 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v331 = *(v329 - 2);
      v332 = *v329;
      v329 += 4;
      *v331 = -1;
      *v332 = -1;
      v330 -= 2;
    }
    while (v330);
    if (v328 != (v328 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_359:
        **(_DWORD **)(v327 + 8) = -1;
        v327 += 16;
      }
      while (v327 != v318);
    }
  }
  v334 = v192[49];
  v333 = v192[50];
  v335 = (_DWORD *)v197[6];
  v336 = (_DWORD *)v197[7];
  if (v334 != v333 && v335 != v336)
  {
    v338 = 0;
    do
    {
      v339 = *(_QWORD *)(v334 + 8);
      if (*v335 == *(_DWORD *)v334)
      {
        if (*(_BYTE *)(v339 + 20))
          v340 = v338;
        else
          v340 = -1;
        v338 += *(unsigned __int8 *)(v339 + 20);
        ++v335;
      }
      else
      {
        v340 = -1;
      }
      *(_DWORD *)v339 = v340;
      v334 += 16;
    }
    while (v334 != v333 && v335 != v336);
  }
  if (v334 != v333)
  {
    v341 = v333 - v334 - 16;
    if (v341 < 0x10)
    {
      v342 = v334;
      goto LABEL_379;
    }
    v343 = (v341 >> 4) + 1;
    v342 = v334 + 16 * (v343 & 0x1FFFFFFFFFFFFFFELL);
    v344 = (_DWORD **)(v334 + 24);
    v345 = v343 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v346 = *(v344 - 2);
      v347 = *v344;
      v344 += 4;
      *v346 = -1;
      *v347 = -1;
      v345 -= 2;
    }
    while (v345);
    if (v343 != (v343 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_379:
        **(_DWORD **)(v342 + 8) = -1;
        v342 += 16;
      }
      while (v342 != v333);
    }
  }
  v349 = v192[61];
  v348 = v192[62];
  v350 = (_DWORD *)v197[9];
  v351 = (_DWORD *)v197[10];
  if (v349 != v348 && v350 != v351)
  {
    v353 = 0;
    do
    {
      v354 = *(_QWORD *)(v349 + 8);
      if (*v350 == *(_DWORD *)v349)
      {
        if (*(_BYTE *)(v354 + 20))
          v355 = v353;
        else
          v355 = -1;
        v353 += *(unsigned __int8 *)(v354 + 20);
        ++v350;
      }
      else
      {
        v355 = -1;
      }
      *(_DWORD *)v354 = v355;
      v349 += 16;
    }
    while (v349 != v348 && v350 != v351);
  }
  if (v349 != v348)
  {
    v356 = v348 - v349 - 16;
    if (v356 < 0x10)
    {
      v357 = v349;
      goto LABEL_399;
    }
    v358 = (v356 >> 4) + 1;
    v357 = v349 + 16 * (v358 & 0x1FFFFFFFFFFFFFFELL);
    v359 = (_DWORD **)(v349 + 24);
    v360 = v358 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v361 = *(v359 - 2);
      v362 = *v359;
      v359 += 4;
      *v361 = -1;
      *v362 = -1;
      v360 -= 2;
    }
    while (v360);
    if (v358 != (v358 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_399:
        **(_DWORD **)(v357 + 8) = -1;
        v357 += 16;
      }
      while (v357 != v348);
    }
  }
  v363 = v192[73];
  v364 = v192[74];
  v365 = (_DWORD *)v197[12];
  v366 = (_DWORD *)v197[13];
  if (v363 != v364 && v365 != v366)
  {
    v368 = 0;
    do
    {
      v369 = *(_QWORD *)(v363 + 8);
      if (*v365 == *(_DWORD *)v363)
      {
        if (*(_BYTE *)(v369 + 20))
          v370 = v368;
        else
          v370 = -1;
        v368 += *(unsigned __int8 *)(v369 + 20);
        ++v365;
      }
      else
      {
        v370 = -1;
      }
      *(_DWORD *)v369 = v370;
      v363 += 16;
    }
    while (v363 != v364 && v365 != v366);
  }
  if (v363 != v364)
  {
    v371 = v364 - v363 - 16;
    if (v371 < 0x10)
    {
      v372 = v363;
      goto LABEL_419;
    }
    v373 = (v371 >> 4) + 1;
    v372 = v363 + 16 * (v373 & 0x1FFFFFFFFFFFFFFELL);
    v374 = (_DWORD **)(v363 + 24);
    v375 = v373 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v376 = *(v374 - 2);
      v377 = *v374;
      v374 += 4;
      *v376 = -1;
      *v377 = -1;
      v375 -= 2;
    }
    while (v375);
    if (v373 != (v373 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_419:
        **(_DWORD **)(v372 + 8) = -1;
        v372 += 16;
      }
      while (v372 != v364);
    }
  }
  v378 = v192[85];
  v379 = v192[86];
  v380 = (_DWORD *)v197[15];
  v381 = (_DWORD *)v197[16];
  if (v378 != v379 && v380 != v381)
  {
    v383 = 0;
    do
    {
      v384 = *(_QWORD *)(v378 + 8);
      if (*v380 == *(_DWORD *)v378)
      {
        if (*(_BYTE *)(v384 + 20))
          v385 = v383;
        else
          v385 = -1;
        v383 += *(unsigned __int8 *)(v384 + 20);
        ++v380;
      }
      else
      {
        v385 = -1;
      }
      *(_DWORD *)v384 = v385;
      v378 += 16;
    }
    while (v378 != v379 && v380 != v381);
  }
  if (v378 != v379)
  {
    v386 = v379 - v378 - 16;
    if (v386 < 0x10)
    {
      v387 = v378;
      goto LABEL_439;
    }
    v388 = (v386 >> 4) + 1;
    v387 = v378 + 16 * (v388 & 0x1FFFFFFFFFFFFFFELL);
    v389 = (_DWORD **)(v378 + 24);
    v390 = v388 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v391 = *(v389 - 2);
      v392 = *v389;
      v389 += 4;
      *v391 = -1;
      *v392 = -1;
      v390 -= 2;
    }
    while (v390);
    if (v388 != (v388 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_439:
        **(_DWORD **)(v387 + 8) = -1;
        v387 += 16;
      }
      while (v387 != v379);
    }
  }
  v393 = v192[97];
  v394 = v192[98];
  v395 = (_DWORD *)v197[18];
  v396 = (_DWORD *)v197[19];
  if (v393 != v394 && v395 != v396)
  {
    v398 = 0;
    do
    {
      v399 = *(_QWORD *)(v393 + 8);
      if (*v395 == *(_DWORD *)v393)
      {
        if (*(_BYTE *)(v399 + 20))
          v400 = v398;
        else
          v400 = -1;
        v398 += *(unsigned __int8 *)(v399 + 20);
        ++v395;
      }
      else
      {
        v400 = -1;
      }
      *(_DWORD *)v399 = v400;
      v393 += 16;
    }
    while (v393 != v394 && v395 != v396);
  }
  if (v393 != v394)
  {
    v401 = v394 - v393 - 16;
    if (v401 < 0x10)
    {
      v402 = v393;
      goto LABEL_459;
    }
    v403 = (v401 >> 4) + 1;
    v402 = v393 + 16 * (v403 & 0x1FFFFFFFFFFFFFFELL);
    v404 = (_DWORD **)(v393 + 24);
    v405 = v403 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v406 = *(v404 - 2);
      v407 = *v404;
      v404 += 4;
      *v406 = -1;
      *v407 = -1;
      v405 -= 2;
    }
    while (v405);
    if (v403 != (v403 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_459:
        **(_DWORD **)(v402 + 8) = -1;
        v402 += 16;
      }
      while (v402 != v394);
    }
  }
  v408 = v192[109];
  v409 = v192[110];
  v410 = (_DWORD *)v197[21];
  v411 = (_DWORD *)v197[22];
  if (v408 != v409 && v410 != v411)
  {
    v413 = 0;
    do
    {
      v414 = *(_QWORD *)(v408 + 8);
      if (*v410 == *(_DWORD *)v408)
      {
        if (*(_BYTE *)(v414 + 20))
          v415 = v413;
        else
          v415 = -1;
        v413 += *(unsigned __int8 *)(v414 + 20);
        ++v410;
      }
      else
      {
        v415 = -1;
      }
      *(_DWORD *)v414 = v415;
      v408 += 16;
    }
    while (v408 != v409 && v410 != v411);
  }
  if (v408 != v409)
  {
    v416 = v409 - v408 - 16;
    if (v416 < 0x10)
    {
      v417 = v408;
      goto LABEL_479;
    }
    v418 = (v416 >> 4) + 1;
    v417 = v408 + 16 * (v418 & 0x1FFFFFFFFFFFFFFELL);
    v419 = (_DWORD **)(v408 + 24);
    v420 = v418 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v421 = *(v419 - 2);
      v422 = *v419;
      v419 += 4;
      *v421 = -1;
      *v422 = -1;
      v420 -= 2;
    }
    while (v420);
    if (v418 != (v418 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_479:
        **(_DWORD **)(v417 + 8) = -1;
        v417 += 16;
      }
      while (v417 != v409);
    }
  }
  v423 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2015 + 40))(v2015);
  sub_20FA44434(v423, v2010);
  v424 = (*(uint64_t (**)(_QWORD *))(*v2015 + 40))(v2015);
  sub_20FA49470(v424 + 104);
  v425 = (*(uint64_t (**)(_QWORD *))(*v2015 + 40))(v2015);
  v427 = *(unsigned int *)(v425 + 16);
  if ((_DWORD)v427)
    bzero(*(void **)v425, 8 * v427);
  if (((*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 2)
     + ((*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 2)
     + ((*(_QWORD *)(v2 + 56) - *(_QWORD *)(v2 + 48)) >> 2)
     + ((*(_QWORD *)(v2 + 80) - *(_QWORD *)(v2 + 72)) >> 2)
     + ((*(_QWORD *)(v2 + 104) - *(_QWORD *)(v2 + 96)) >> 2)
     + ((*(_QWORD *)(v2 + 128) - *(_QWORD *)(v2 + 120)) >> 2)
     + ((*(_QWORD *)(v2 + 152) - *(_QWORD *)(v2 + 144)) >> 2)
     + ((*(_QWORD *)(v2 + 176) - *(_QWORD *)(v2 + 168)) >> 2)
     + ((*(_QWORD *)(v2 + 200) - *(_QWORD *)(v2 + 192)) >> 2)
     + ((*(_QWORD *)(v2 + 224) - *(_QWORD *)(v2 + 216)) >> 2))
  {
    v428 = (*(uint64_t (**)(_QWORD *))(*v2015 + 40))(v2015);
    v426 = sub_20FA45280(v428, (uint64_t)(v2031 + 2550), (char **)v2031 + 4588, (int **)v2031 + 4618);
  }
  (*(void (**)(_QWORD *, _QWORD, __n128))(*v2015 + 16))(v2015, v2012, v426);
  v429 = *(unsigned __int8 *)(v2 + 240);
  v430 = (*(uint64_t (**)(_QWORD *))(v2031[2546] + 40))(v2015);
  v431 = (int **)(v2031 + 4618);
  sub_20F8F2BC0(v2021, v430 + 15304, (uint64_t)dword_2103B9910, (uint64_t)(v2031 + 4618));
  v432 = (uint64_t)(v2031 + 4681);
  sub_20FA49CF0(v430 + 104, (void **)v2031 + 4681, (uint64_t)v431, v431);
  v2027 = (uint64_t)(v2031 + 4678);
  if (!v429)
    v433 = sub_20FA4A9E4(v430, v2027, v431);
  v434 = (*(uint64_t (**)(_QWORD *, __n128))(v2031[2546] + 40))(v2015, v433);
  sub_20F8F2BC0(v2021, v434 + 15304, (uint64_t)dword_2103B9910, (uint64_t)v431);
  sub_20F8F2BC0((uint64_t)v175, v434 + 15304, (uint64_t)dword_2103B9910, (uint64_t)(v2031 + 4648));
  v435 = (uint64_t)(v2031 + 4684);
  sub_20FA4AD9C(v434 + 104, (void **)v2031 + 4684, (uint64_t)(v2031 + 4687), (uint64_t)v431, (uint64_t)(v2031 + 4648));
  v436 = (void **)(v2031 + 2550);
  sub_20FA44434(v2031 + 2550, v175);
  v437 = v2031 + 2563;
  sub_20FA49470((uint64_t)(v2031 + 2563));
  v438 = v2018[6];
  if ((_DWORD)v438)
    bzero(*v436, 8 * v438);
  v439 = *(unsigned __int8 *)(v2 + 240);
  v440 = (*(uint64_t (**)(_QWORD *))(v2031[2546] + 40))(v2015);
  sub_20F8F2BC0((uint64_t)v175, v440 + 15304, (uint64_t)dword_2103B9910, (uint64_t)v431);
  v441 = v2031 + 4690;
  sub_20FA49CF0(v440 + 104, (void **)v2031 + 4690, (uint64_t)v431, v431);
  if (!v439)
    v442 = sub_20FA4A9E4(v440, (uint64_t)v436, v431);
  if (!*(_BYTE *)(v2 + 241))
  {
    if (sub_20F2B67A0(v432, v2027, v435, *(_BYTE *)(v2 + 240) != 0, (uint64_t)v441, (unint64_t *)v436))
      goto LABEL_495;
    goto LABEL_7;
  }
  v2038.i8[0] = *(_BYTE *)(v2 + 240);
  v443 = *(_QWORD *)(v2 + 272);
  if (!v443)
    sub_20E86D37C();
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int64x2_t *, uint64_t *, void **, __n128))(*(_QWORD *)v443 + 48))(v443, v432, v2027, v435, &v2038, v441, v436, v442) & 1) != 0)
  {
LABEL_495:
    *(_QWORD *)v2037 = 0;
    v2041 = 0u;
    v2040 = 0u;
    memset(v2039, 0, sizeof(v2039));
    v2038 = 0u;
    v2035 = 0u;
    v2036 = 0u;
    v2033 = 0u;
    v2034 = 0u;
    v2032 = 0u;
    sub_20FA51FC8(v437, (int *)&v2037[4], v2037, &v2038, &v2032);
    sub_20FA52288((uint64_t)v437, v441, (unsigned int *)&v2038, (unsigned int *)&v2032);
    v444 = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*v2015 + 40))(v2015);
    sub_20FA46484(v444, v2021, (uint64_t)v2007);
    sub_20FA43AB8(v2010, v1979 + 66);
    v1978 = (*(uint64_t (**)(_QWORD *))(*v2015 + 40))(v2015);
    v445 = 0;
    v446 = 0;
    do
    {
      v447 = &v2007[3 * v445];
      v448 = (char *)*v447;
      v2028 = (char **)v447;
      v447[1] = *v447;
      v449 = v447 + 1;
      v450 = &v2010[3 * v445];
      v451 = *v450;
      v453 = v450 + 1;
      v452 = v450[1];
      if (*v450 != v452)
      {
        v454 = v452 - v451;
        v455 = (v452 - v451) >> 2;
        v2023 = &v2007[3 * v445 + 2];
        if (v455 > (uint64_t)(*v2023 - (_QWORD)v448) >> 2)
        {
          if ((v454 & 0x8000000000000000) != 0)
            goto LABEL_2460;
          v456 = (char *)operator new(v454);
          *v2028 = v456;
          *v449 = (uint64_t)v456;
          *v2023 = &v456[4 * v455];
          if (v448)
          {
            operator delete(v448);
            v455 = (*v453 - *v450) >> 2;
          }
        }
        v2003 = v445;
        v457 = v1978 + 15304 + 24 * v445;
        v458 = *(char **)(v457 + 8);
        v2014 = (void **)v457;
        v2017 = (char **)(v457 + 8);
        v459 = *(char **)v457;
        v460 = (uint64_t)&v458[-*(_QWORD *)v457];
        v461 = v460 >> 2;
        v462 = (v460 >> 2) + v455;
        v463 = (_QWORD *)(v457 + 16);
        v2006 = v446;
        if (v462 <= (uint64_t)(*(_QWORD *)(v457 + 16) - *(_QWORD *)v457) >> 2)
        {
          v465 = *(char **)(v457 + 8);
          v466 = *(char **)v457;
          goto LABEL_516;
        }
        if (!(v462 >> 62))
        {
          v464 = (char *)operator new(4 * v462);
          v465 = &v464[4 * v461];
          v466 = v465;
          if (v458 == v459)
            goto LABEL_514;
          v467 = v458 - v459 - 4;
          if (v467 >= 0x2C)
          {
            v466 = &v464[4 * v461];
            if ((unint64_t)(&v458[-v460] - v464) >= 0x20)
            {
              v468 = (v467 >> 2) + 1;
              v469 = 4 * (v468 & 0x7FFFFFFFFFFFFFF8);
              v470 = &v458[-v469];
              v466 = &v465[-v469];
              v471 = &v464[4 * v461 - 16];
              v472 = (__int128 *)(v458 - 16);
              v473 = v468 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v474 = *v472;
                *((_OWORD *)v471 - 1) = *(v472 - 1);
                *(_OWORD *)v471 = v474;
                v471 -= 32;
                v472 -= 2;
                v473 -= 8;
              }
              while (v473);
              v458 = v470;
              if (v468 == (v468 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_514:
                *v2014 = v466;
                *v2017 = v465;
                *v463 = &v464[4 * v462];
                if (v459)
                {
                  operator delete(v459);
                  v466 = (char *)*v2014;
                  v465 = *v2017;
                }
LABEL_516:
                v476 = *v450;
                v2020 = *v453;
                if (v466 == v465)
                {
                  v477 = 0;
                  goto LABEL_526;
                }
                v477 = 0;
                do
                {
                  if (*(_DWORD *)v466 > *(_DWORD *)v476)
                  {
                    v465 = v466;
                    goto LABEL_526;
                  }
                  v466 += 4;
                  ++v477;
                }
                while (v466 != v465);
                while (1)
                {
LABEL_526:
                  if (v476 == v2020)
                  {
                    v446 = v2006 | (*v2028 != (char *)*v449);
                    v445 = v2003;
                    goto LABEL_497;
                  }
                  if (v465 == *v2017 || *(_DWORD *)v476 != *(_DWORD *)v465)
                    break;
LABEL_525:
                  v465 += 4;
                  ++v477;
                }
                v479 = (char *)*v449;
                if ((unint64_t)*v449 < *v2023)
                {
                  *(_DWORD *)v479 = v477;
                  v478 = (uint64_t)(v479 + 4);
LABEL_524:
                  *v449 = v478;
                  v465 = sub_20EDB3C7C(v2014, v465, v476);
                  v476 += 4;
                  goto LABEL_525;
                }
                v480 = *v2028;
                v481 = v479 - *v2028;
                v482 = v481 >> 2;
                v483 = (v481 >> 2) + 1;
                if (v483 >> 62)
                  goto LABEL_2460;
                v484 = *v2023 - (_QWORD)v480;
                if (v484 >> 1 > v483)
                  v483 = v484 >> 1;
                if ((unint64_t)v484 >= 0x7FFFFFFFFFFFFFFCLL)
                  v485 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v485 = v483;
                if (v485)
                {
                  if (v485 >> 62)
LABEL_2444:
                    sub_20E877A38();
                  v486 = operator new(4 * v485);
                  v487 = &v486[4 * v482];
                  *(_DWORD *)v487 = v477;
                  v478 = (uint64_t)(v487 + 4);
                  v488 = v479 - v480;
                  if (v479 == v480)
                    goto LABEL_547;
                }
                else
                {
                  v486 = 0;
                  v487 = (char *)(4 * v482);
                  *(_DWORD *)(4 * v482) = v477;
                  v478 = 4 * v482 + 4;
                  v488 = v479 - v480;
                  if (v479 == v480)
                  {
LABEL_547:
                    *v2028 = v487;
                    *v449 = v478;
                    *v2023 = &v486[4 * v485];
                    if (v480)
                      operator delete(v480);
                    goto LABEL_524;
                  }
                }
                v489 = v488 - 4;
                if (v489 < 0x2C)
                  goto LABEL_2463;
                if ((unint64_t)(v479 - &v486[v481]) < 0x20)
                  goto LABEL_2463;
                v490 = (v489 >> 2) + 1;
                v491 = 4 * (v490 & 0x7FFFFFFFFFFFFFF8);
                v492 = &v479[-v491];
                v487 -= v491;
                v493 = &v486[4 * v482 - 16];
                v494 = v479 - 16;
                v495 = v490 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v496 = *(_OWORD *)v494;
                  *(v493 - 1) = *((_OWORD *)v494 - 1);
                  *v493 = v496;
                  v493 -= 2;
                  v494 -= 32;
                  v495 -= 8;
                }
                while (v495);
                v479 = v492;
                if (v490 != (v490 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_2463:
                  do
                  {
                    v497 = *((_DWORD *)v479 - 1);
                    v479 -= 4;
                    *((_DWORD *)v487 - 1) = v497;
                    v487 -= 4;
                  }
                  while (v479 != v480);
                }
                goto LABEL_547;
              }
            }
          }
          else
          {
            v466 = &v464[4 * v461];
          }
          do
          {
            v475 = *((_DWORD *)v458 - 1);
            v458 -= 4;
            *((_DWORD *)v466 - 1) = v475;
            v466 -= 4;
          }
          while (v458 != v459);
          goto LABEL_514;
        }
LABEL_2460:
        sub_20E867F44();
      }
LABEL_497:
      ++v445;
    }
    while (v445 != 10);
    if ((v446 & 1) == 0)
      goto LABEL_67;
    sub_20F908180(v1978 + 104, v2007, (uint64_t)v2007);
    v2051 = 0u;
    v2050 = 0u;
    v2049 = 0u;
    v2048 = 0u;
    v2047 = 0u;
    v2046 = 0u;
    v2045 = 0u;
    v2044 = 0u;
    v2043 = 0u;
    v2042 = 0u;
    v2041 = 0u;
    v2040 = 0u;
    memset(v2039, 0, sizeof(v2039));
    v2038 = 0u;
    v499 = (_DWORD *)*v2007;
    v498 = (_DWORD *)v2007[1];
    v500 = (uint64_t)v498 - *v2007;
    if (v498 != (_DWORD *)*v2007)
    {
      if ((unint64_t)v500 <= 0x7FFFFFFFFFFFFFFCLL)
      {
        v501 = operator new(2 * v500);
        v2038.i64[0] = (uint64_t)v501;
        v2038.i64[1] = (uint64_t)v501;
        v2039[0].i64[0] = (uint64_t)&v501[v500 >> 2];
        while (1)
        {
          while (1)
          {
            v502 = (6 * *v499);
            v503 = v2038.i64[0];
            if ((_QWORD *)v2038.i64[0] == v501 || *((_DWORD *)v501 - 1) != (_DWORD)v502)
              break;
            *((_DWORD *)v501 - 1) = v502 + 6;
            if (++v499 == v498)
              goto LABEL_617;
          }
          v504 = (v502 + 6);
          if ((unint64_t)v501 >= v2039[0].i64[0])
          {
            v506 = (char *)v501 - v2038.i64[0];
            v507 = ((uint64_t)v501 - v2038.i64[0]) >> 3;
            v508 = v507 + 1;
            if ((unint64_t)(v507 + 1) >> 61)
              break;
            v509 = v2039[0].i64[0] - v2038.i64[0];
            if ((v2039[0].i64[0] - v2038.i64[0]) >> 2 > v508)
              v508 = v509 >> 2;
            if ((unint64_t)v509 >= 0x7FFFFFFFFFFFFFF8)
              v510 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v510 = v508;
            if (v510)
            {
              if (v510 >> 61)
LABEL_2446:
                sub_20E877A38();
              v511 = (char *)operator new(8 * v510);
              v512 = &v511[8 * v507];
              *(_QWORD *)v512 = v502 | (v504 << 32);
              v505 = (uint64_t)(v512 + 8);
              if ((_QWORD *)v503 != v501)
              {
LABEL_567:
                if ((unint64_t)(v506 - 8) < 0x168)
                {
                  v513 = v501;
                  goto LABEL_569;
                }
                v515 = ((unint64_t)v501 - v503 - 8) & 0xFFFFFFFFFFFFFFF8;
                if (&v506[(_QWORD)v511 - 8 - v515] > &v506[(_QWORD)v511 - 8])
                {
                  v513 = v501;
                  goto LABEL_569;
                }
                if ((_QWORD *)((char *)v501 - v515 - 8) > v501 - 1)
                {
                  v513 = v501;
                  goto LABEL_569;
                }
                if ((unint64_t)(v503 - (_QWORD)v511) < 0x20)
                {
                  v513 = v501;
                  goto LABEL_569;
                }
                v516 = ((unint64_t)(v506 - 8) >> 3) + 1;
                v517 = 8 * (v516 & 0x3FFFFFFFFFFFFFFCLL);
                v513 = &v501[v517 / 0xFFFFFFFFFFFFFFF8];
                v512 -= v517;
                v518 = &v511[8 * v507 - 16];
                v519 = (__int128 *)(v501 - 2);
                v520 = v516 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v521 = *v519;
                  *((_OWORD *)v518 - 1) = *(v519 - 1);
                  *(_OWORD *)v518 = v521;
                  v518 -= 32;
                  v519 -= 2;
                  v520 -= 4;
                }
                while (v520);
                if (v516 != (v516 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_569:
                    v514 = *--v513;
                    *((_QWORD *)v512 - 1) = v514;
                    v512 -= 8;
                  }
                  while (v513 != (_QWORD *)v503);
                }
                v501 = (_QWORD *)v2038.i64[0];
                v2038.i64[0] = (uint64_t)v512;
                v2039[0].i64[0] = (uint64_t)&v511[8 * v510];
                if (!v501)
                  goto LABEL_575;
LABEL_574:
                operator delete(v501);
                goto LABEL_575;
              }
            }
            else
            {
              v511 = 0;
              v512 = (char *)(8 * v507);
              *(_QWORD *)(8 * v507) = v502 | (v504 << 32);
              v505 = 8 * v507 + 8;
              if ((_QWORD *)v503 != v501)
                goto LABEL_567;
            }
            v2038.i64[0] = (uint64_t)v512;
            v2039[0].i64[0] = (uint64_t)&v511[8 * v510];
            if (v501)
              goto LABEL_574;
          }
          else
          {
            *v501 = v502 | (v504 << 32);
            v505 = (uint64_t)(v501 + 1);
          }
LABEL_575:
          v2038.i64[1] = v505;
          v501 = (_QWORD *)v505;
          if (++v499 == v498)
          {
LABEL_617:
            v548 = (_DWORD *)v2038.i64[0];
            goto LABEL_649;
          }
        }
      }
LABEL_2455:
      sub_20E92CED8();
    }
    v548 = 0;
    v501 = 0;
LABEL_649:
    if ((((char *)v501 - (char *)v548) & 0x7FFFFFFF0) != 0)
    {
      v575 = ((unint64_t)((char *)v501 - (char *)v548) >> 3);
      v578 = *v548;
      v576 = v548 + 2;
      v577 = v578;
      v579 = v575 - 1;
      do
      {
        v577 += *v576 - *(v576 - 1);
        *v576 = v577;
        v576 += 2;
        --v579;
      }
      while (v579);
    }
    LODWORD(v2032) = 6 * (*(_DWORD *)(v1978 + 24) + ((v2007[1] - *v2007) >> 2));
    v581 = (char *)v2007[3];
    v580 = (char *)v2007[4];
    v582 = v580 - v581;
    v583 = (v580 - v581) >> 2;
    v584 = (int *)v2039[0].i64[1];
    if (v583 <= (v2039[1].i64[1] - v2039[0].i64[1]) >> 3)
    {
      v589 = (char *)v2039[1].i64[0];
    }
    else
    {
      if (v582 > 0x7FFFFFFFFFFFFFFCLL)
        goto LABEL_2455;
      v585 = v2039[1].i64[0];
      v586 = (char *)operator new(2 * v582);
      v587 = (uint64_t)&v586[8 * v583];
      v588 = v585 - (_QWORD)v584;
      v589 = &v586[(v585 - (_QWORD)v584) & 0xFFFFFFFFFFFFFFF8];
      v590 = (uint64_t)v589;
      if ((int *)v585 != v584)
      {
        if ((unint64_t)(v588 - 8) < 0x58)
        {
          v590 = (uint64_t)&v586[(v585 - (_QWORD)v584) & 0xFFFFFFFFFFFFFFF8];
          goto LABEL_1959;
        }
        v590 = (uint64_t)&v586[(v585 - (_QWORD)v584) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v585 - (_QWORD)&v586[v588 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
          goto LABEL_2464;
        v1548 = v588 >> 3;
        v1549 = ((unint64_t)(v588 - 8) >> 3) + 1;
        v1550 = 8 * (v1549 & 0x3FFFFFFFFFFFFFFCLL);
        v1551 = v585 - v1550;
        v590 = (uint64_t)&v589[-v1550];
        v1552 = &v586[8 * v1548 - 16];
        v1553 = (__int128 *)(v585 - 16);
        v1554 = v1549 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1555 = *v1553;
          *((_OWORD *)v1552 - 1) = *(v1553 - 1);
          *(_OWORD *)v1552 = v1555;
          v1552 -= 32;
          v1553 -= 2;
          v1554 -= 4;
        }
        while (v1554);
        v585 = v1551;
        if (v1549 != (v1549 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_2464:
          do
          {
LABEL_1959:
            v1556 = *(_QWORD *)(v585 - 8);
            v585 -= 8;
            *(_QWORD *)(v590 - 8) = v1556;
            v590 -= 8;
          }
          while ((int *)v585 != v584);
        }
      }
      v2039[0].i64[1] = v590;
      v2039[1].i64[0] = (uint64_t)v589;
      v2039[1].i64[1] = v587;
      if (v584)
      {
        operator delete(v584);
        v581 = (char *)v2007[3];
        v580 = (char *)v2007[4];
      }
      v584 = (int *)v590;
    }
    if (v581 == v580)
      goto LABEL_2000;
    while (2)
    {
      while (1)
      {
        v1557 = (9 * *(_DWORD *)v581);
        v1558 = v2039[0].i64[1];
        if ((char *)v2039[0].i64[1] == v589 || *((_DWORD *)v589 - 1) != (_DWORD)v1557)
          break;
        *((_DWORD *)v589 - 1) = v1557 + 9;
        v581 += 4;
        if (v581 == v580)
          goto LABEL_1999;
      }
      v1559 = (v1557 + 9);
      if ((unint64_t)v589 < v2039[1].i64[1])
      {
        *(_QWORD *)v589 = v1557 | (v1559 << 32);
        v1560 = (uint64_t)(v589 + 8);
        goto LABEL_1987;
      }
      v1561 = &v589[-v2039[0].i64[1]];
      v1562 = (uint64_t)&v589[-v2039[0].i64[1]] >> 3;
      v1563 = v1562 + 1;
      if ((unint64_t)(v1562 + 1) >> 61)
        goto LABEL_2455;
      v1564 = v2039[1].i64[1] - v2039[0].i64[1];
      if ((v2039[1].i64[1] - v2039[0].i64[1]) >> 2 > v1563)
        v1563 = v1564 >> 2;
      if ((unint64_t)v1564 >= 0x7FFFFFFFFFFFFFF8)
        v1565 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1565 = v1563;
      if (v1565)
      {
        if (v1565 >> 61)
          goto LABEL_2446;
        v1566 = (char *)operator new(8 * v1565);
        v1567 = &v1566[8 * v1562];
        *(_QWORD *)v1567 = v1557 | (v1559 << 32);
        v1560 = (uint64_t)(v1567 + 8);
        if ((char *)v1558 != v589)
        {
LABEL_1979:
          if ((unint64_t)(v1561 - 8) < 0x168)
          {
            v1568 = v589;
            goto LABEL_1981;
          }
          v1570 = (unint64_t)&v589[-v1558 - 8] & 0xFFFFFFFFFFFFFFF8;
          if (&v1561[(_QWORD)v1566 - 8 - v1570] > &v1561[(_QWORD)v1566 - 8])
          {
            v1568 = v589;
            goto LABEL_1981;
          }
          if (&v589[-v1570 - 8] > v589 - 8)
          {
            v1568 = v589;
            goto LABEL_1981;
          }
          if ((unint64_t)(v1558 - (_QWORD)v1566) < 0x20)
          {
            v1568 = v589;
            goto LABEL_1981;
          }
          v1571 = ((unint64_t)(v1561 - 8) >> 3) + 1;
          v1572 = 8 * (v1571 & 0x3FFFFFFFFFFFFFFCLL);
          v1568 = &v589[-v1572];
          v1567 -= v1572;
          v1573 = &v1566[8 * v1562 - 16];
          v1574 = v589 - 16;
          v1575 = v1571 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1576 = *(_OWORD *)v1574;
            *((_OWORD *)v1573 - 1) = *((_OWORD *)v1574 - 1);
            *(_OWORD *)v1573 = v1576;
            v1573 -= 32;
            v1574 -= 32;
            v1575 -= 4;
          }
          while (v1575);
          if (v1571 != (v1571 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_1981:
              v1569 = *((_QWORD *)v1568 - 1);
              v1568 -= 8;
              *((_QWORD *)v1567 - 1) = v1569;
              v1567 -= 8;
            }
            while (v1568 != (char *)v1558);
          }
          v589 = (char *)v2039[0].i64[1];
          v2039[0].i64[1] = (uint64_t)v1567;
          v2039[1].i64[1] = (uint64_t)&v1566[8 * v1565];
          if (!v589)
          {
LABEL_1987:
            v2039[1].i64[0] = v1560;
            v589 = (char *)v1560;
            v581 += 4;
            if (v581 != v580)
              continue;
LABEL_1999:
            v584 = (int *)v2039[0].i64[1];
LABEL_2000:
            if (((v589 - (char *)v584) & 0x7FFFFFFF0) != 0)
            {
              v1577 = ((unint64_t)(v589 - (char *)v584) >> 3);
              v1580 = *v584;
              v1579 = v584 + 2;
              v1578 = v1580;
              v1581 = v1577 - 1;
              do
              {
                v1578 += *v1579 - *(v1579 - 1);
                *v1579 = v1578;
                v1579 += 2;
                --v1581;
              }
              while (v1581);
            }
            DWORD1(v2032) = 9 * (*(_DWORD *)(v1978 + 28) + ((v2007[4] - v2007[3]) >> 2));
            v1583 = (char *)v2007[6];
            v1582 = (char *)v2007[7];
            v1584 = v1582 - v1583;
            v1585 = (v1582 - v1583) >> 2;
            v1586 = (int *)v2040.i64[0];
            if (v1585 <= (v2041.i64[0] - v2040.i64[0]) >> 3)
            {
              v1591 = (char *)v2040.i64[1];
              goto LABEL_2017;
            }
            if (v1584 > 0x7FFFFFFFFFFFFFFCLL)
              goto LABEL_2455;
            v1587 = v2040.i64[1];
            v1588 = (char *)operator new(2 * v1584);
            v1589 = (uint64_t)&v1588[8 * v1585];
            v1590 = v1587 - (_QWORD)v1586;
            v1591 = &v1588[(v1587 - (_QWORD)v1586) & 0xFFFFFFFFFFFFFFF8];
            v1592 = (uint64_t)v1591;
            if ((int *)v1587 != v1586)
            {
              if ((unint64_t)(v1590 - 8) < 0x58)
              {
                v1592 = (uint64_t)&v1588[(v1587 - (_QWORD)v1586) & 0xFFFFFFFFFFFFFFF8];
                goto LABEL_2013;
              }
              v1592 = (uint64_t)&v1588[(v1587 - (_QWORD)v1586) & 0xFFFFFFFFFFFFFFF8];
              if (v1587 - (v1590 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v1588 < 0x20)
                goto LABEL_2465;
              v1593 = v1590 >> 3;
              v1594 = ((unint64_t)(v1590 - 8) >> 3) + 1;
              v1595 = 8 * (v1594 & 0x3FFFFFFFFFFFFFFCLL);
              v1596 = v1587 - v1595;
              v1592 = (uint64_t)&v1591[-v1595];
              v1597 = &v1588[8 * v1593 - 16];
              v1598 = (__int128 *)(v1587 - 16);
              v1599 = v1594 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1600 = *v1598;
                *((_OWORD *)v1597 - 1) = *(v1598 - 1);
                *(_OWORD *)v1597 = v1600;
                v1597 -= 32;
                v1598 -= 2;
                v1599 -= 4;
              }
              while (v1599);
              v1587 = v1596;
              if (v1594 != (v1594 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_2465:
                do
                {
LABEL_2013:
                  v1601 = *(_QWORD *)(v1587 - 8);
                  v1587 -= 8;
                  *(_QWORD *)(v1592 - 8) = v1601;
                  v1592 -= 8;
                }
                while ((int *)v1587 != v1586);
              }
            }
            v2040.i64[0] = v1592;
            v2040.i64[1] = (uint64_t)v1591;
            v2041.i64[0] = v1589;
            if (v1586)
            {
              operator delete(v1586);
              v1583 = (char *)v2007[6];
              v1582 = (char *)v2007[7];
            }
            v1586 = (int *)v1592;
LABEL_2017:
            if (v1583 == v1582)
              goto LABEL_2054;
            while (2)
            {
              while (1)
              {
                v1602 = (6 * *(_DWORD *)v1583);
                v1603 = v2040.i64[0];
                if ((char *)v2040.i64[0] == v1591 || *((_DWORD *)v1591 - 1) != (_DWORD)v1602)
                  break;
                *((_DWORD *)v1591 - 1) = v1602 + 6;
                v1583 += 4;
                if (v1583 == v1582)
                  goto LABEL_2053;
              }
              v1604 = (v1602 + 6);
              if ((unint64_t)v1591 < v2041.i64[0])
              {
                *(_QWORD *)v1591 = v1602 | (v1604 << 32);
                v1605 = (uint64_t)(v1591 + 8);
                goto LABEL_2041;
              }
              v1606 = &v1591[-v2040.i64[0]];
              v1607 = (uint64_t)&v1591[-v2040.i64[0]] >> 3;
              v1608 = v1607 + 1;
              if ((unint64_t)(v1607 + 1) >> 61)
                goto LABEL_2455;
              v1609 = v2041.i64[0] - v2040.i64[0];
              if ((v2041.i64[0] - v2040.i64[0]) >> 2 > v1608)
                v1608 = v1609 >> 2;
              if ((unint64_t)v1609 >= 0x7FFFFFFFFFFFFFF8)
                v1610 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v1610 = v1608;
              if (v1610)
              {
                if (v1610 >> 61)
                  goto LABEL_2446;
                v1611 = (char *)operator new(8 * v1610);
                v1612 = &v1611[8 * v1607];
                *(_QWORD *)v1612 = v1602 | (v1604 << 32);
                v1605 = (uint64_t)(v1612 + 8);
                if ((char *)v1603 != v1591)
                {
LABEL_2033:
                  if ((unint64_t)(v1606 - 8) < 0x168)
                  {
                    v1613 = v1591;
                    goto LABEL_2035;
                  }
                  v1615 = (unint64_t)&v1591[-v1603 - 8] & 0xFFFFFFFFFFFFFFF8;
                  if (&v1606[(_QWORD)v1611 - 8 - v1615] > &v1606[(_QWORD)v1611 - 8])
                  {
                    v1613 = v1591;
                    goto LABEL_2035;
                  }
                  if (&v1591[-v1615 - 8] > v1591 - 8)
                  {
                    v1613 = v1591;
                    goto LABEL_2035;
                  }
                  if ((unint64_t)(v1603 - (_QWORD)v1611) < 0x20)
                  {
                    v1613 = v1591;
                    goto LABEL_2035;
                  }
                  v1616 = ((unint64_t)(v1606 - 8) >> 3) + 1;
                  v1617 = 8 * (v1616 & 0x3FFFFFFFFFFFFFFCLL);
                  v1613 = &v1591[-v1617];
                  v1612 -= v1617;
                  v1618 = &v1611[8 * v1607 - 16];
                  v1619 = v1591 - 16;
                  v1620 = v1616 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v1621 = *(_OWORD *)v1619;
                    *((_OWORD *)v1618 - 1) = *((_OWORD *)v1619 - 1);
                    *(_OWORD *)v1618 = v1621;
                    v1618 -= 32;
                    v1619 -= 32;
                    v1620 -= 4;
                  }
                  while (v1620);
                  if (v1616 != (v1616 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_2035:
                      v1614 = *((_QWORD *)v1613 - 1);
                      v1613 -= 8;
                      *((_QWORD *)v1612 - 1) = v1614;
                      v1612 -= 8;
                    }
                    while (v1613 != (char *)v1603);
                  }
                  v1591 = (char *)v2040.i64[0];
                  v2040.i64[0] = (uint64_t)v1612;
                  v2041.i64[0] = (uint64_t)&v1611[8 * v1610];
                  if (!v1591)
                  {
LABEL_2041:
                    v2040.i64[1] = v1605;
                    v1591 = (char *)v1605;
                    v1583 += 4;
                    if (v1583 != v1582)
                      continue;
LABEL_2053:
                    v1586 = (int *)v2040.i64[0];
LABEL_2054:
                    if (((v1591 - (char *)v1586) & 0x7FFFFFFF0) != 0)
                    {
                      v1622 = ((unint64_t)(v1591 - (char *)v1586) >> 3);
                      v1625 = *v1586;
                      v1624 = v1586 + 2;
                      v1623 = v1625;
                      v1626 = v1622 - 1;
                      do
                      {
                        v1623 += *v1624 - *(v1624 - 1);
                        *v1624 = v1623;
                        v1624 += 2;
                        --v1626;
                      }
                      while (v1626);
                    }
                    DWORD2(v2032) = 6 * (*(_DWORD *)(v1978 + 32) + ((v2007[7] - v2007[6]) >> 2));
                    v1628 = (char *)v2007[9];
                    v1627 = (char *)v2007[10];
                    v1629 = v1627 - v1628;
                    v1630 = (v1627 - v1628) >> 2;
                    v1631 = (int *)v2041.i64[1];
                    if (v1630 <= (v2042.i64[1] - v2041.i64[1]) >> 3)
                    {
                      v1636 = (char *)v2042.i64[0];
                      goto LABEL_2071;
                    }
                    if (v1629 > 0x7FFFFFFFFFFFFFFCLL)
                      goto LABEL_2455;
                    v1632 = v2042.i64[0];
                    v1633 = (char *)operator new(2 * v1629);
                    v1634 = (uint64_t)&v1633[8 * v1630];
                    v1635 = v1632 - (_QWORD)v1631;
                    v1636 = &v1633[(v1632 - (_QWORD)v1631) & 0xFFFFFFFFFFFFFFF8];
                    v1637 = (uint64_t)v1636;
                    if ((int *)v1632 != v1631)
                    {
                      if ((unint64_t)(v1635 - 8) < 0x58)
                      {
                        v1637 = (uint64_t)&v1633[(v1632 - (_QWORD)v1631) & 0xFFFFFFFFFFFFFFF8];
                        goto LABEL_2067;
                      }
                      v1637 = (uint64_t)&v1633[(v1632 - (_QWORD)v1631) & 0xFFFFFFFFFFFFFFF8];
                      if ((unint64_t)(v1632 - (_QWORD)&v1633[v1635 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                        goto LABEL_2466;
                      v1638 = v1635 >> 3;
                      v1639 = ((unint64_t)(v1635 - 8) >> 3) + 1;
                      v1640 = 8 * (v1639 & 0x3FFFFFFFFFFFFFFCLL);
                      v1641 = v1632 - v1640;
                      v1637 = (uint64_t)&v1636[-v1640];
                      v1642 = &v1633[8 * v1638 - 16];
                      v1643 = (__int128 *)(v1632 - 16);
                      v1644 = v1639 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v1645 = *v1643;
                        *((_OWORD *)v1642 - 1) = *(v1643 - 1);
                        *(_OWORD *)v1642 = v1645;
                        v1642 -= 32;
                        v1643 -= 2;
                        v1644 -= 4;
                      }
                      while (v1644);
                      v1632 = v1641;
                      if (v1639 != (v1639 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_2466:
                        do
                        {
LABEL_2067:
                          v1646 = *(_QWORD *)(v1632 - 8);
                          v1632 -= 8;
                          *(_QWORD *)(v1637 - 8) = v1646;
                          v1637 -= 8;
                        }
                        while ((int *)v1632 != v1631);
                      }
                    }
                    v2041.i64[1] = v1637;
                    v2042.i64[0] = (uint64_t)v1636;
                    v2042.i64[1] = v1634;
                    if (v1631)
                    {
                      operator delete(v1631);
                      v1628 = (char *)v2007[9];
                      v1627 = (char *)v2007[10];
                    }
                    v1631 = (int *)v1637;
LABEL_2071:
                    if (v1628 == v1627)
                      goto LABEL_2108;
                    while (2)
                    {
                      while (1)
                      {
                        v1647 = (6 * *(_DWORD *)v1628);
                        v1648 = v2041.i64[1];
                        if ((char *)v2041.i64[1] == v1636 || *((_DWORD *)v1636 - 1) != (_DWORD)v1647)
                          break;
                        *((_DWORD *)v1636 - 1) = v1647 + 6;
                        v1628 += 4;
                        if (v1628 == v1627)
                          goto LABEL_2107;
                      }
                      v1649 = (v1647 + 6);
                      if ((unint64_t)v1636 < v2042.i64[1])
                      {
                        *(_QWORD *)v1636 = v1647 | (v1649 << 32);
                        v1650 = (uint64_t)(v1636 + 8);
                        goto LABEL_2095;
                      }
                      v1651 = &v1636[-v2041.i64[1]];
                      v1652 = (uint64_t)&v1636[-v2041.i64[1]] >> 3;
                      v1653 = v1652 + 1;
                      if ((unint64_t)(v1652 + 1) >> 61)
                        goto LABEL_2455;
                      v1654 = v2042.i64[1] - v2041.i64[1];
                      if ((v2042.i64[1] - v2041.i64[1]) >> 2 > v1653)
                        v1653 = v1654 >> 2;
                      if ((unint64_t)v1654 >= 0x7FFFFFFFFFFFFFF8)
                        v1655 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v1655 = v1653;
                      if (v1655)
                      {
                        if (v1655 >> 61)
                          goto LABEL_2446;
                        v1656 = (char *)operator new(8 * v1655);
                        v1657 = &v1656[8 * v1652];
                        *(_QWORD *)v1657 = v1647 | (v1649 << 32);
                        v1650 = (uint64_t)(v1657 + 8);
                        if ((char *)v1648 != v1636)
                        {
LABEL_2087:
                          if ((unint64_t)(v1651 - 8) < 0x168)
                          {
                            v1658 = v1636;
                            goto LABEL_2089;
                          }
                          v1660 = (unint64_t)&v1636[-v1648 - 8] & 0xFFFFFFFFFFFFFFF8;
                          if (&v1651[(_QWORD)v1656 - 8 - v1660] > &v1651[(_QWORD)v1656 - 8])
                          {
                            v1658 = v1636;
                            goto LABEL_2089;
                          }
                          if (&v1636[-v1660 - 8] > v1636 - 8)
                          {
                            v1658 = v1636;
                            goto LABEL_2089;
                          }
                          if ((unint64_t)(v1648 - (_QWORD)v1656) < 0x20)
                          {
                            v1658 = v1636;
                            goto LABEL_2089;
                          }
                          v1661 = ((unint64_t)(v1651 - 8) >> 3) + 1;
                          v1662 = 8 * (v1661 & 0x3FFFFFFFFFFFFFFCLL);
                          v1658 = &v1636[-v1662];
                          v1657 -= v1662;
                          v1663 = &v1656[8 * v1652 - 16];
                          v1664 = v1636 - 16;
                          v1665 = v1661 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v1666 = *(_OWORD *)v1664;
                            *((_OWORD *)v1663 - 1) = *((_OWORD *)v1664 - 1);
                            *(_OWORD *)v1663 = v1666;
                            v1663 -= 32;
                            v1664 -= 32;
                            v1665 -= 4;
                          }
                          while (v1665);
                          if (v1661 != (v1661 & 0x3FFFFFFFFFFFFFFCLL))
                          {
                            do
                            {
LABEL_2089:
                              v1659 = *((_QWORD *)v1658 - 1);
                              v1658 -= 8;
                              *((_QWORD *)v1657 - 1) = v1659;
                              v1657 -= 8;
                            }
                            while (v1658 != (char *)v1648);
                          }
                          v1636 = (char *)v2041.i64[1];
                          v2041.i64[1] = (uint64_t)v1657;
                          v2042.i64[1] = (uint64_t)&v1656[8 * v1655];
                          if (!v1636)
                          {
LABEL_2095:
                            v2042.i64[0] = v1650;
                            v1636 = (char *)v1650;
                            v1628 += 4;
                            if (v1628 != v1627)
                              continue;
LABEL_2107:
                            v1631 = (int *)v2041.i64[1];
LABEL_2108:
                            if (((v1636 - (char *)v1631) & 0x7FFFFFFF0) != 0)
                            {
                              v1667 = ((unint64_t)(v1636 - (char *)v1631) >> 3);
                              v1670 = *v1631;
                              v1669 = v1631 + 2;
                              v1668 = v1670;
                              v1671 = v1667 - 1;
                              do
                              {
                                v1668 += *v1669 - *(v1669 - 1);
                                *v1669 = v1668;
                                v1669 += 2;
                                --v1671;
                              }
                              while (v1671);
                            }
                            HIDWORD(v2032) = 6 * (*(_DWORD *)(v1978 + 36) + ((v2007[10] - v2007[9]) >> 2));
                            v1673 = (char *)v2007[12];
                            v1672 = (char *)v2007[13];
                            v1674 = v1672 - v1673;
                            v1675 = (v1672 - v1673) >> 2;
                            v1676 = (int *)v2043.i64[0];
                            if (v1675 <= (v2044.i64[0] - v2043.i64[0]) >> 3)
                            {
                              v1681 = (char *)v2043.i64[1];
                              goto LABEL_2125;
                            }
                            if (v1674 > 0x7FFFFFFFFFFFFFFCLL)
                              goto LABEL_2455;
                            v1677 = v2043.i64[1];
                            v1678 = (char *)operator new(2 * v1674);
                            v1679 = (uint64_t)&v1678[8 * v1675];
                            v1680 = v1677 - (_QWORD)v1676;
                            v1681 = &v1678[(v1677 - (_QWORD)v1676) & 0xFFFFFFFFFFFFFFF8];
                            v1682 = (uint64_t)v1681;
                            if ((int *)v1677 != v1676)
                            {
                              if ((unint64_t)(v1680 - 8) < 0x58)
                              {
                                v1682 = (uint64_t)&v1678[(v1677 - (_QWORD)v1676) & 0xFFFFFFFFFFFFFFF8];
                                goto LABEL_2121;
                              }
                              v1682 = (uint64_t)&v1678[(v1677 - (_QWORD)v1676) & 0xFFFFFFFFFFFFFFF8];
                              if ((unint64_t)(v1677 - (_QWORD)&v1678[v1680 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                                goto LABEL_2467;
                              v1683 = v1680 >> 3;
                              v1684 = ((unint64_t)(v1680 - 8) >> 3) + 1;
                              v1685 = 8 * (v1684 & 0x3FFFFFFFFFFFFFFCLL);
                              v1686 = v1677 - v1685;
                              v1682 = (uint64_t)&v1681[-v1685];
                              v1687 = &v1678[8 * v1683 - 16];
                              v1688 = (__int128 *)(v1677 - 16);
                              v1689 = v1684 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v1690 = *v1688;
                                *((_OWORD *)v1687 - 1) = *(v1688 - 1);
                                *(_OWORD *)v1687 = v1690;
                                v1687 -= 32;
                                v1688 -= 2;
                                v1689 -= 4;
                              }
                              while (v1689);
                              v1677 = v1686;
                              if (v1684 != (v1684 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_2467:
                                do
                                {
LABEL_2121:
                                  v1691 = *(_QWORD *)(v1677 - 8);
                                  v1677 -= 8;
                                  *(_QWORD *)(v1682 - 8) = v1691;
                                  v1682 -= 8;
                                }
                                while ((int *)v1677 != v1676);
                              }
                            }
                            v2043.i64[0] = v1682;
                            v2043.i64[1] = (uint64_t)v1681;
                            v2044.i64[0] = v1679;
                            if (v1676)
                            {
                              operator delete(v1676);
                              v1673 = (char *)v2007[12];
                              v1672 = (char *)v2007[13];
                            }
                            v1676 = (int *)v1682;
LABEL_2125:
                            if (v1673 == v1672)
                              goto LABEL_2162;
                            while (2)
                            {
                              while (1)
                              {
                                v1692 = (3 * *(_DWORD *)v1673);
                                v1693 = v2043.i64[0];
                                if ((char *)v2043.i64[0] == v1681 || *((_DWORD *)v1681 - 1) != (_DWORD)v1692)
                                  break;
                                *((_DWORD *)v1681 - 1) = v1692 + 3;
                                v1673 += 4;
                                if (v1673 == v1672)
                                  goto LABEL_2161;
                              }
                              v1694 = (v1692 + 3);
                              if ((unint64_t)v1681 < v2044.i64[0])
                              {
                                *(_QWORD *)v1681 = v1692 | (v1694 << 32);
                                v1695 = (uint64_t)(v1681 + 8);
                                goto LABEL_2149;
                              }
                              v1696 = &v1681[-v2043.i64[0]];
                              v1697 = (uint64_t)&v1681[-v2043.i64[0]] >> 3;
                              v1698 = v1697 + 1;
                              if ((unint64_t)(v1697 + 1) >> 61)
                                goto LABEL_2455;
                              v1699 = v2044.i64[0] - v2043.i64[0];
                              if ((v2044.i64[0] - v2043.i64[0]) >> 2 > v1698)
                                v1698 = v1699 >> 2;
                              if ((unint64_t)v1699 >= 0x7FFFFFFFFFFFFFF8)
                                v1700 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v1700 = v1698;
                              if (v1700)
                              {
                                if (v1700 >> 61)
                                  goto LABEL_2446;
                                v1701 = (char *)operator new(8 * v1700);
                                v1702 = &v1701[8 * v1697];
                                *(_QWORD *)v1702 = v1692 | (v1694 << 32);
                                v1695 = (uint64_t)(v1702 + 8);
                                if ((char *)v1693 != v1681)
                                {
LABEL_2141:
                                  if ((unint64_t)(v1696 - 8) < 0x168)
                                  {
                                    v1703 = v1681;
                                    goto LABEL_2143;
                                  }
                                  v1705 = (unint64_t)&v1681[-v1693 - 8] & 0xFFFFFFFFFFFFFFF8;
                                  if (&v1696[(_QWORD)v1701 - 8 - v1705] > &v1696[(_QWORD)v1701 - 8])
                                  {
                                    v1703 = v1681;
                                    goto LABEL_2143;
                                  }
                                  if (&v1681[-v1705 - 8] > v1681 - 8)
                                  {
                                    v1703 = v1681;
                                    goto LABEL_2143;
                                  }
                                  if ((unint64_t)(v1693 - (_QWORD)v1701) < 0x20)
                                  {
                                    v1703 = v1681;
                                    goto LABEL_2143;
                                  }
                                  v1706 = ((unint64_t)(v1696 - 8) >> 3) + 1;
                                  v1707 = 8 * (v1706 & 0x3FFFFFFFFFFFFFFCLL);
                                  v1703 = &v1681[-v1707];
                                  v1702 -= v1707;
                                  v1708 = &v1701[8 * v1697 - 16];
                                  v1709 = v1681 - 16;
                                  v1710 = v1706 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    v1711 = *(_OWORD *)v1709;
                                    *((_OWORD *)v1708 - 1) = *((_OWORD *)v1709 - 1);
                                    *(_OWORD *)v1708 = v1711;
                                    v1708 -= 32;
                                    v1709 -= 32;
                                    v1710 -= 4;
                                  }
                                  while (v1710);
                                  if (v1706 != (v1706 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
                                    do
                                    {
LABEL_2143:
                                      v1704 = *((_QWORD *)v1703 - 1);
                                      v1703 -= 8;
                                      *((_QWORD *)v1702 - 1) = v1704;
                                      v1702 -= 8;
                                    }
                                    while (v1703 != (char *)v1693);
                                  }
                                  v1681 = (char *)v2043.i64[0];
                                  v2043.i64[0] = (uint64_t)v1702;
                                  v2044.i64[0] = (uint64_t)&v1701[8 * v1700];
                                  if (!v1681)
                                  {
LABEL_2149:
                                    v2043.i64[1] = v1695;
                                    v1681 = (char *)v1695;
                                    v1673 += 4;
                                    if (v1673 != v1672)
                                      continue;
LABEL_2161:
                                    v1676 = (int *)v2043.i64[0];
LABEL_2162:
                                    if (((v1681 - (char *)v1676) & 0x7FFFFFFF0) != 0)
                                    {
                                      v1712 = ((unint64_t)(v1681 - (char *)v1676) >> 3);
                                      v1715 = *v1676;
                                      v1714 = v1676 + 2;
                                      v1713 = v1715;
                                      v1716 = v1712 - 1;
                                      do
                                      {
                                        v1713 += *v1714 - *(v1714 - 1);
                                        *v1714 = v1713;
                                        v1714 += 2;
                                        --v1716;
                                      }
                                      while (v1716);
                                    }
                                    LODWORD(v2033) = 3 * (*(_DWORD *)(v1978 + 40) + ((v2007[13] - v2007[12]) >> 2));
                                    v1718 = (unsigned int *)v2007[15];
                                    v1717 = (unsigned int *)v2007[16];
                                    v1719 = (char *)v1717 - (char *)v1718;
                                    v1720 = v1717 - v1718;
                                    v1721 = (char *)v2044.i64[1];
                                    if (v1720 <= (*((_QWORD *)&v2045 + 1) - v2044.i64[1]) >> 3)
                                    {
                                      v1726 = (char *)v2045;
                                      goto LABEL_2179;
                                    }
                                    if (v1719 > 0x7FFFFFFFFFFFFFFCLL)
                                      goto LABEL_2455;
                                    v1722 = (char *)v2045;
                                    v1723 = (char *)operator new(2 * v1719);
                                    v1724 = &v1723[8 * v1720];
                                    v1725 = v1722 - v1721;
                                    v1726 = &v1723[(v1722 - v1721) & 0xFFFFFFFFFFFFFFF8];
                                    v1727 = (uint64_t)v1726;
                                    if (v1722 != v1721)
                                    {
                                      if ((unint64_t)(v1725 - 8) < 0x58)
                                      {
                                        v1727 = (uint64_t)&v1723[(v1722 - v1721) & 0xFFFFFFFFFFFFFFF8];
                                        goto LABEL_2175;
                                      }
                                      v1727 = (uint64_t)&v1723[(v1722 - v1721) & 0xFFFFFFFFFFFFFFF8];
                                      if ((unint64_t)(&v1722[-(v1725 & 0xFFFFFFFFFFFFFFF8)] - v1723) < 0x20)
                                        goto LABEL_2468;
                                      v1728 = v1725 >> 3;
                                      v1729 = ((unint64_t)(v1725 - 8) >> 3) + 1;
                                      v1730 = 8 * (v1729 & 0x3FFFFFFFFFFFFFFCLL);
                                      v1731 = &v1722[-v1730];
                                      v1727 = (uint64_t)&v1726[-v1730];
                                      v1732 = &v1723[8 * v1728 - 16];
                                      v1733 = v1722 - 16;
                                      v1734 = v1729 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v1735 = *(_OWORD *)v1733;
                                        *((_OWORD *)v1732 - 1) = *((_OWORD *)v1733 - 1);
                                        *(_OWORD *)v1732 = v1735;
                                        v1732 -= 32;
                                        v1733 -= 32;
                                        v1734 -= 4;
                                      }
                                      while (v1734);
                                      v1722 = v1731;
                                      if (v1729 != (v1729 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_2468:
                                        do
                                        {
LABEL_2175:
                                          v1736 = *((_QWORD *)v1722 - 1);
                                          v1722 -= 8;
                                          *(_QWORD *)(v1727 - 8) = v1736;
                                          v1727 -= 8;
                                        }
                                        while (v1722 != v1721);
                                      }
                                    }
                                    v2044.i64[1] = v1727;
                                    *(_QWORD *)&v2045 = v1726;
                                    *((_QWORD *)&v2045 + 1) = v1724;
                                    if (v1721)
                                    {
                                      operator delete(v1721);
                                      v1718 = (unsigned int *)v2007[15];
                                      v1717 = (unsigned int *)v2007[16];
                                    }
                                    v1721 = (char *)v1727;
LABEL_2179:
                                    if (v1718 == v1717)
                                      goto LABEL_2216;
                                    while (2)
                                    {
                                      while (1)
                                      {
                                        v1737 = *v1718;
                                        v1738 = v2044.i64[1];
                                        if ((char *)v2044.i64[1] == v1726 || *((_DWORD *)v1726 - 1) != (_DWORD)v1737)
                                          break;
                                        *((_DWORD *)v1726 - 1) = v1737 + 1;
                                        if (++v1718 == v1717)
                                          goto LABEL_2215;
                                      }
                                      v1739 = (v1737 + 1);
                                      if ((unint64_t)v1726 < *((_QWORD *)&v2045 + 1))
                                      {
                                        *(_QWORD *)v1726 = v1737 | (v1739 << 32);
                                        v1740 = (uint64_t)(v1726 + 8);
                                        goto LABEL_2203;
                                      }
                                      v1741 = &v1726[-v2044.i64[1]];
                                      v1742 = (uint64_t)&v1726[-v2044.i64[1]] >> 3;
                                      v1743 = v1742 + 1;
                                      if ((unint64_t)(v1742 + 1) >> 61)
                                        goto LABEL_2455;
                                      v1744 = *((_QWORD *)&v2045 + 1) - v2044.i64[1];
                                      if ((*((_QWORD *)&v2045 + 1) - v2044.i64[1]) >> 2 > v1743)
                                        v1743 = v1744 >> 2;
                                      if ((unint64_t)v1744 >= 0x7FFFFFFFFFFFFFF8)
                                        v1745 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v1745 = v1743;
                                      if (v1745)
                                      {
                                        if (v1745 >> 61)
                                          goto LABEL_2446;
                                        v1746 = (char *)operator new(8 * v1745);
                                        v1747 = &v1746[8 * v1742];
                                        *(_QWORD *)v1747 = v1737 | (v1739 << 32);
                                        v1740 = (uint64_t)(v1747 + 8);
                                        if ((char *)v1738 != v1726)
                                        {
LABEL_2195:
                                          if ((unint64_t)(v1741 - 8) < 0x168)
                                          {
                                            v1748 = v1726;
                                            goto LABEL_2197;
                                          }
                                          v1750 = (unint64_t)&v1726[-v1738 - 8] & 0xFFFFFFFFFFFFFFF8;
                                          if (&v1741[(_QWORD)v1746 - 8 - v1750] > &v1741[(_QWORD)v1746 - 8])
                                          {
                                            v1748 = v1726;
                                            goto LABEL_2197;
                                          }
                                          if (&v1726[-v1750 - 8] > v1726 - 8)
                                          {
                                            v1748 = v1726;
                                            goto LABEL_2197;
                                          }
                                          if ((unint64_t)(v1738 - (_QWORD)v1746) < 0x20)
                                          {
                                            v1748 = v1726;
                                            goto LABEL_2197;
                                          }
                                          v1751 = ((unint64_t)(v1741 - 8) >> 3) + 1;
                                          v1752 = 8 * (v1751 & 0x3FFFFFFFFFFFFFFCLL);
                                          v1748 = &v1726[-v1752];
                                          v1747 -= v1752;
                                          v1753 = &v1746[8 * v1742 - 16];
                                          v1754 = v1726 - 16;
                                          v1755 = v1751 & 0x3FFFFFFFFFFFFFFCLL;
                                          do
                                          {
                                            v1756 = *(_OWORD *)v1754;
                                            *((_OWORD *)v1753 - 1) = *((_OWORD *)v1754 - 1);
                                            *(_OWORD *)v1753 = v1756;
                                            v1753 -= 32;
                                            v1754 -= 32;
                                            v1755 -= 4;
                                          }
                                          while (v1755);
                                          if (v1751 != (v1751 & 0x3FFFFFFFFFFFFFFCLL))
                                          {
                                            do
                                            {
LABEL_2197:
                                              v1749 = *((_QWORD *)v1748 - 1);
                                              v1748 -= 8;
                                              *((_QWORD *)v1747 - 1) = v1749;
                                              v1747 -= 8;
                                            }
                                            while (v1748 != (char *)v1738);
                                          }
                                          v1726 = (char *)v2044.i64[1];
                                          v2044.i64[1] = (uint64_t)v1747;
                                          *((_QWORD *)&v2045 + 1) = &v1746[8 * v1745];
                                          if (!v1726)
                                          {
LABEL_2203:
                                            *(_QWORD *)&v2045 = v1740;
                                            v1726 = (char *)v1740;
                                            if (++v1718 != v1717)
                                              continue;
LABEL_2215:
                                            v1721 = (char *)v2044.i64[1];
LABEL_2216:
                                            if (((v1726 - v1721) & 0x7FFFFFFF0) != 0)
                                            {
                                              v1757 = ((unint64_t)(v1726 - v1721) >> 3);
                                              v1760 = *(_DWORD *)v1721;
                                              v1759 = v1721 + 8;
                                              v1758 = v1760;
                                              v1761 = v1757 - 1;
                                              do
                                              {
                                                v1758 += *v1759 - *(v1759 - 1);
                                                *v1759 = v1758;
                                                v1759 += 2;
                                                --v1761;
                                              }
                                              while (v1761);
                                            }
                                            DWORD1(v2033) = *(_DWORD *)(v1978 + 44) + ((v2007[16] - v2007[15]) >> 2);
                                            v1763 = (char *)v2007[18];
                                            v1762 = (char *)v2007[19];
                                            v1764 = v1762 - v1763;
                                            v1765 = (v1762 - v1763) >> 2;
                                            v1766 = (char *)v2046;
                                            if (v1765 <= (uint64_t)(v2047 - v2046) >> 3)
                                            {
                                              v1771 = (char *)*((_QWORD *)&v2046 + 1);
                                              goto LABEL_2233;
                                            }
                                            if (v1764 > 0x7FFFFFFFFFFFFFFCLL)
                                              goto LABEL_2455;
                                            v1767 = (char *)*((_QWORD *)&v2046 + 1);
                                            v1768 = (char *)operator new(2 * v1764);
                                            v1769 = &v1768[8 * v1765];
                                            v1770 = v1767 - v1766;
                                            v1771 = &v1768[(v1767 - v1766) & 0xFFFFFFFFFFFFFFF8];
                                            v1772 = v1771;
                                            if (v1767 != v1766)
                                            {
                                              if ((unint64_t)(v1770 - 8) < 0x58)
                                              {
                                                v1772 = &v1768[(v1767 - v1766) & 0xFFFFFFFFFFFFFFF8];
                                                goto LABEL_2229;
                                              }
                                              v1772 = &v1768[(v1767 - v1766) & 0xFFFFFFFFFFFFFFF8];
                                              if ((unint64_t)(&v1767[-(v1770 & 0xFFFFFFFFFFFFFFF8)] - v1768) < 0x20)
                                                goto LABEL_2469;
                                              v1773 = v1770 >> 3;
                                              v1774 = ((unint64_t)(v1770 - 8) >> 3) + 1;
                                              v1775 = 8 * (v1774 & 0x3FFFFFFFFFFFFFFCLL);
                                              v1776 = &v1767[-v1775];
                                              v1772 = &v1771[-v1775];
                                              v1777 = &v1768[8 * v1773 - 16];
                                              v1778 = v1767 - 16;
                                              v1779 = v1774 & 0x3FFFFFFFFFFFFFFCLL;
                                              do
                                              {
                                                v1780 = *(_OWORD *)v1778;
                                                *((_OWORD *)v1777 - 1) = *((_OWORD *)v1778 - 1);
                                                *(_OWORD *)v1777 = v1780;
                                                v1777 -= 32;
                                                v1778 -= 32;
                                                v1779 -= 4;
                                              }
                                              while (v1779);
                                              v1767 = v1776;
                                              if (v1774 != (v1774 & 0x3FFFFFFFFFFFFFFCLL))
                                              {
LABEL_2469:
                                                do
                                                {
LABEL_2229:
                                                  v1781 = *((_QWORD *)v1767 - 1);
                                                  v1767 -= 8;
                                                  *((_QWORD *)v1772 - 1) = v1781;
                                                  v1772 -= 8;
                                                }
                                                while (v1767 != v1766);
                                              }
                                            }
                                            *(_QWORD *)&v2046 = v1772;
                                            *((_QWORD *)&v2046 + 1) = v1771;
                                            *(_QWORD *)&v2047 = v1769;
                                            if (v1766)
                                            {
                                              operator delete(v1766);
                                              v1763 = (char *)v2007[18];
                                              v1762 = (char *)v2007[19];
                                            }
                                            v1766 = v1772;
LABEL_2233:
                                            if (v1763 == v1762)
                                              goto LABEL_2270;
                                            while (2)
                                            {
                                              while (1)
                                              {
                                                v1782 = (3 * *(_DWORD *)v1763);
                                                v1783 = (char *)v2046;
                                                if ((char *)v2046 == v1771 || *((_DWORD *)v1771 - 1) != (_DWORD)v1782)
                                                  break;
                                                *((_DWORD *)v1771 - 1) = v1782 + 3;
                                                v1763 += 4;
                                                if (v1763 == v1762)
                                                  goto LABEL_2269;
                                              }
                                              v1784 = (v1782 + 3);
                                              if ((unint64_t)v1771 < (unint64_t)v2047)
                                              {
                                                *(_QWORD *)v1771 = v1782 | (v1784 << 32);
                                                v1785 = (uint64_t)(v1771 + 8);
                                                goto LABEL_2257;
                                              }
                                              v1786 = &v1771[-v2046];
                                              v1787 = (uint64_t)&v1771[-v2046] >> 3;
                                              v1788 = v1787 + 1;
                                              if ((unint64_t)(v1787 + 1) >> 61)
                                                goto LABEL_2455;
                                              v1789 = v2047 - v2046;
                                              if ((uint64_t)(v2047 - v2046) >> 2 > v1788)
                                                v1788 = v1789 >> 2;
                                              if ((unint64_t)v1789 >= 0x7FFFFFFFFFFFFFF8)
                                                v1790 = 0x1FFFFFFFFFFFFFFFLL;
                                              else
                                                v1790 = v1788;
                                              if (v1790)
                                              {
                                                if (v1790 >> 61)
                                                  goto LABEL_2446;
                                                v1791 = (char *)operator new(8 * v1790);
                                                v1792 = &v1791[8 * v1787];
                                                *(_QWORD *)v1792 = v1782 | (v1784 << 32);
                                                v1785 = (uint64_t)(v1792 + 8);
                                                if (v1783 != v1771)
                                                {
LABEL_2249:
                                                  if ((unint64_t)(v1786 - 8) < 0x168)
                                                  {
                                                    v1793 = v1771;
                                                    goto LABEL_2251;
                                                  }
                                                  v1795 = (v1771 - 8 - v1783) & 0xFFFFFFFFFFFFFFF8;
                                                  if (&v1786[(_QWORD)v1791 - 8 - v1795] > &v1786[(_QWORD)v1791 - 8])
                                                  {
                                                    v1793 = v1771;
                                                    goto LABEL_2251;
                                                  }
                                                  if (&v1771[-v1795 - 8] > v1771 - 8)
                                                  {
                                                    v1793 = v1771;
                                                    goto LABEL_2251;
                                                  }
                                                  if ((unint64_t)(v1783 - v1791) < 0x20)
                                                  {
                                                    v1793 = v1771;
                                                    goto LABEL_2251;
                                                  }
                                                  v1796 = ((unint64_t)(v1786 - 8) >> 3) + 1;
                                                  v1797 = 8 * (v1796 & 0x3FFFFFFFFFFFFFFCLL);
                                                  v1793 = &v1771[-v1797];
                                                  v1792 -= v1797;
                                                  v1798 = &v1791[8 * v1787 - 16];
                                                  v1799 = v1771 - 16;
                                                  v1800 = v1796 & 0x3FFFFFFFFFFFFFFCLL;
                                                  do
                                                  {
                                                    v1801 = *(_OWORD *)v1799;
                                                    *((_OWORD *)v1798 - 1) = *((_OWORD *)v1799 - 1);
                                                    *(_OWORD *)v1798 = v1801;
                                                    v1798 -= 32;
                                                    v1799 -= 32;
                                                    v1800 -= 4;
                                                  }
                                                  while (v1800);
                                                  if (v1796 != (v1796 & 0x3FFFFFFFFFFFFFFCLL))
                                                  {
                                                    do
                                                    {
LABEL_2251:
                                                      v1794 = *((_QWORD *)v1793 - 1);
                                                      v1793 -= 8;
                                                      *((_QWORD *)v1792 - 1) = v1794;
                                                      v1792 -= 8;
                                                    }
                                                    while (v1793 != v1783);
                                                  }
                                                  v1771 = (char *)v2046;
                                                  *(_QWORD *)&v2046 = v1792;
                                                  *(_QWORD *)&v2047 = &v1791[8 * v1790];
                                                  if (!v1771)
                                                  {
LABEL_2257:
                                                    *((_QWORD *)&v2046 + 1) = v1785;
                                                    v1771 = (char *)v1785;
                                                    v1763 += 4;
                                                    if (v1763 != v1762)
                                                      continue;
LABEL_2269:
                                                    v1766 = (char *)v2046;
LABEL_2270:
                                                    if (((v1771 - v1766) & 0x7FFFFFFF0) != 0)
                                                    {
                                                      v1802 = ((unint64_t)(v1771 - v1766) >> 3);
                                                      v1805 = *(_DWORD *)v1766;
                                                      v1804 = v1766 + 8;
                                                      v1803 = v1805;
                                                      v1806 = v1802 - 1;
                                                      do
                                                      {
                                                        v1803 += *v1804 - *(v1804 - 1);
                                                        *v1804 = v1803;
                                                        v1804 += 2;
                                                        --v1806;
                                                      }
                                                      while (v1806);
                                                    }
                                                    DWORD2(v2033) = 3
                                                                  * (*(_DWORD *)(v1978 + 48)
                                                                   + ((v2007[19] - v2007[18]) >> 2));
                                                    v1808 = (char *)v2007[21];
                                                    v1807 = (char *)v2007[22];
                                                    v1809 = v1807 - v1808;
                                                    v1810 = (v1807 - v1808) >> 2;
                                                    v1811 = (char *)*((_QWORD *)&v2047 + 1);
                                                    if (v1810 <= (uint64_t)(*((_QWORD *)&v2048 + 1)
                                                                          - *((_QWORD *)&v2047 + 1)) >> 3)
                                                    {
                                                      v1816 = (char *)v2048;
                                                      goto LABEL_2287;
                                                    }
                                                    if (v1809 > 0x7FFFFFFFFFFFFFFCLL)
                                                      goto LABEL_2455;
                                                    v1812 = (char *)v2048;
                                                    v1813 = (char *)operator new(2 * v1809);
                                                    v1814 = &v1813[8 * v1810];
                                                    v1815 = v1812 - v1811;
                                                    v1816 = &v1813[(v1812 - v1811) & 0xFFFFFFFFFFFFFFF8];
                                                    v1817 = v1816;
                                                    if (v1812 != v1811)
                                                    {
                                                      if ((unint64_t)(v1815 - 8) < 0x58)
                                                      {
                                                        v1817 = &v1813[(v1812 - v1811) & 0xFFFFFFFFFFFFFFF8];
                                                        goto LABEL_2283;
                                                      }
                                                      v1817 = &v1813[(v1812 - v1811) & 0xFFFFFFFFFFFFFFF8];
                                                      if ((unint64_t)(&v1812[-(v1815 & 0xFFFFFFFFFFFFFFF8)]
                                                                            - v1813) < 0x20)
                                                        goto LABEL_2470;
                                                      v1818 = v1815 >> 3;
                                                      v1819 = ((unint64_t)(v1815 - 8) >> 3) + 1;
                                                      v1820 = 8 * (v1819 & 0x3FFFFFFFFFFFFFFCLL);
                                                      v1821 = &v1812[-v1820];
                                                      v1817 = &v1816[-v1820];
                                                      v1822 = &v1813[8 * v1818 - 16];
                                                      v1823 = v1812 - 16;
                                                      v1824 = v1819 & 0x3FFFFFFFFFFFFFFCLL;
                                                      do
                                                      {
                                                        v1825 = *(_OWORD *)v1823;
                                                        *((_OWORD *)v1822 - 1) = *((_OWORD *)v1823 - 1);
                                                        *(_OWORD *)v1822 = v1825;
                                                        v1822 -= 32;
                                                        v1823 -= 32;
                                                        v1824 -= 4;
                                                      }
                                                      while (v1824);
                                                      v1812 = v1821;
                                                      if (v1819 != (v1819 & 0x3FFFFFFFFFFFFFFCLL))
                                                      {
LABEL_2470:
                                                        do
                                                        {
LABEL_2283:
                                                          v1826 = *((_QWORD *)v1812 - 1);
                                                          v1812 -= 8;
                                                          *((_QWORD *)v1817 - 1) = v1826;
                                                          v1817 -= 8;
                                                        }
                                                        while (v1812 != v1811);
                                                      }
                                                    }
                                                    *((_QWORD *)&v2047 + 1) = v1817;
                                                    *(_QWORD *)&v2048 = v1816;
                                                    *((_QWORD *)&v2048 + 1) = v1814;
                                                    if (v1811)
                                                    {
                                                      operator delete(v1811);
                                                      v1808 = (char *)v2007[21];
                                                      v1807 = (char *)v2007[22];
                                                    }
                                                    v1811 = v1817;
LABEL_2287:
                                                    if (v1808 == v1807)
                                                      goto LABEL_2324;
                                                    while (2)
                                                    {
                                                      while (1)
                                                      {
                                                        v1827 = (4 * *(_DWORD *)v1808);
                                                        v1828 = (char *)*((_QWORD *)&v2047 + 1);
                                                        if (*((char **)&v2047 + 1) == v1816
                                                          || *((_DWORD *)v1816 - 1) != (_DWORD)v1827)
                                                        {
                                                          break;
                                                        }
                                                        *((_DWORD *)v1816 - 1) = v1827 + 4;
                                                        v1808 += 4;
                                                        if (v1808 == v1807)
                                                          goto LABEL_2323;
                                                      }
                                                      v1829 = (v1827 + 4);
                                                      if ((unint64_t)v1816 < *((_QWORD *)&v2048 + 1))
                                                      {
                                                        *(_QWORD *)v1816 = v1827 | (v1829 << 32);
                                                        v1830 = (uint64_t)(v1816 + 8);
                                                        goto LABEL_2311;
                                                      }
                                                      v1831 = &v1816[-*((_QWORD *)&v2047 + 1)];
                                                      v1832 = (uint64_t)&v1816[-*((_QWORD *)&v2047 + 1)] >> 3;
                                                      v1833 = v1832 + 1;
                                                      if ((unint64_t)(v1832 + 1) >> 61)
                                                        goto LABEL_2455;
                                                      v1834 = *((_QWORD *)&v2048 + 1) - *((_QWORD *)&v2047 + 1);
                                                      if ((uint64_t)(*((_QWORD *)&v2048 + 1) - *((_QWORD *)&v2047 + 1)) >> 2 > v1833)
                                                        v1833 = v1834 >> 2;
                                                      if ((unint64_t)v1834 >= 0x7FFFFFFFFFFFFFF8)
                                                        v1835 = 0x1FFFFFFFFFFFFFFFLL;
                                                      else
                                                        v1835 = v1833;
                                                      if (v1835)
                                                      {
                                                        if (v1835 >> 61)
                                                          goto LABEL_2446;
                                                        v1836 = (char *)operator new(8 * v1835);
                                                        v1837 = &v1836[8 * v1832];
                                                        *(_QWORD *)v1837 = v1827 | (v1829 << 32);
                                                        v1830 = (uint64_t)(v1837 + 8);
                                                        if (v1828 != v1816)
                                                        {
LABEL_2303:
                                                          if ((unint64_t)(v1831 - 8) < 0x168)
                                                          {
                                                            v1838 = v1816;
                                                            goto LABEL_2305;
                                                          }
                                                          v1840 = (v1816 - 8 - v1828) & 0xFFFFFFFFFFFFFFF8;
                                                          if (&v1831[(_QWORD)v1836 - 8 - v1840] > &v1831[(_QWORD)v1836 - 8])
                                                          {
                                                            v1838 = v1816;
                                                            goto LABEL_2305;
                                                          }
                                                          if (&v1816[-v1840 - 8] > v1816 - 8)
                                                          {
                                                            v1838 = v1816;
                                                            goto LABEL_2305;
                                                          }
                                                          if ((unint64_t)(v1828 - v1836) < 0x20)
                                                          {
                                                            v1838 = v1816;
                                                            goto LABEL_2305;
                                                          }
                                                          v1841 = ((unint64_t)(v1831 - 8) >> 3) + 1;
                                                          v1842 = 8 * (v1841 & 0x3FFFFFFFFFFFFFFCLL);
                                                          v1838 = &v1816[-v1842];
                                                          v1837 -= v1842;
                                                          v1843 = &v1836[8 * v1832 - 16];
                                                          v1844 = v1816 - 16;
                                                          v1845 = v1841 & 0x3FFFFFFFFFFFFFFCLL;
                                                          do
                                                          {
                                                            v1846 = *(_OWORD *)v1844;
                                                            *((_OWORD *)v1843 - 1) = *((_OWORD *)v1844 - 1);
                                                            *(_OWORD *)v1843 = v1846;
                                                            v1843 -= 32;
                                                            v1844 -= 32;
                                                            v1845 -= 4;
                                                          }
                                                          while (v1845);
                                                          if (v1841 != (v1841 & 0x3FFFFFFFFFFFFFFCLL))
                                                          {
                                                            do
                                                            {
LABEL_2305:
                                                              v1839 = *((_QWORD *)v1838 - 1);
                                                              v1838 -= 8;
                                                              *((_QWORD *)v1837 - 1) = v1839;
                                                              v1837 -= 8;
                                                            }
                                                            while (v1838 != v1828);
                                                          }
                                                          v1816 = (char *)*((_QWORD *)&v2047 + 1);
                                                          *((_QWORD *)&v2047 + 1) = v1837;
                                                          *((_QWORD *)&v2048 + 1) = &v1836[8 * v1835];
                                                          if (!v1816)
                                                          {
LABEL_2311:
                                                            *(_QWORD *)&v2048 = v1830;
                                                            v1816 = (char *)v1830;
                                                            v1808 += 4;
                                                            if (v1808 != v1807)
                                                              continue;
LABEL_2323:
                                                            v1811 = (char *)*((_QWORD *)&v2047 + 1);
LABEL_2324:
                                                            if (((v1816 - v1811) & 0x7FFFFFFF0) != 0)
                                                            {
                                                              v1847 = ((unint64_t)(v1816 - v1811) >> 3);
                                                              v1850 = *(_DWORD *)v1811;
                                                              v1849 = v1811 + 8;
                                                              v1848 = v1850;
                                                              v1851 = v1847 - 1;
                                                              do
                                                              {
                                                                v1848 += *v1849 - *(v1849 - 1);
                                                                *v1849 = v1848;
                                                                v1849 += 2;
                                                                --v1851;
                                                              }
                                                              while (v1851);
                                                            }
                                                            HIDWORD(v2033) = (*((_DWORD *)v2007 + 44)
                                                                            - *((_DWORD *)v2007 + 42)
                                                                            + 4 * *(_DWORD *)(v1978 + 52)) & 0xFFFFFFFC;
                                                            v1853 = (char *)v2007[24];
                                                            v1852 = (char *)v2007[25];
                                                            v1854 = v1852 - v1853;
                                                            v1855 = (v1852 - v1853) >> 2;
                                                            v1856 = (char *)v2049;
                                                            if (v1855 <= (uint64_t)(v2050 - v2049) >> 3)
                                                            {
                                                              v1861 = (char *)*((_QWORD *)&v2049 + 1);
                                                              goto LABEL_2341;
                                                            }
                                                            if (v1854 > 0x7FFFFFFFFFFFFFFCLL)
                                                              goto LABEL_2455;
                                                            v1857 = (char *)*((_QWORD *)&v2049 + 1);
                                                            v1858 = (char *)operator new(2 * v1854);
                                                            v1859 = &v1858[8 * v1855];
                                                            v1860 = v1857 - v1856;
                                                            v1861 = &v1858[(v1857 - v1856) & 0xFFFFFFFFFFFFFFF8];
                                                            v1862 = v1861;
                                                            if (v1857 != v1856)
                                                            {
                                                              if ((unint64_t)(v1860 - 8) < 0x58)
                                                              {
                                                                v1862 = &v1858[(v1857 - v1856) & 0xFFFFFFFFFFFFFFF8];
                                                                goto LABEL_2337;
                                                              }
                                                              v1862 = &v1858[(v1857 - v1856) & 0xFFFFFFFFFFFFFFF8];
                                                              if ((unint64_t)(&v1857[-(v1860 & 0xFFFFFFFFFFFFFFF8)]
                                                                                    - v1858) < 0x20)
                                                                goto LABEL_2471;
                                                              v1863 = v1860 >> 3;
                                                              v1864 = ((unint64_t)(v1860 - 8) >> 3) + 1;
                                                              v1865 = 8 * (v1864 & 0x3FFFFFFFFFFFFFFCLL);
                                                              v1866 = &v1857[-v1865];
                                                              v1862 = &v1861[-v1865];
                                                              v1867 = &v1858[8 * v1863 - 16];
                                                              v1868 = v1857 - 16;
                                                              v1869 = v1864 & 0x3FFFFFFFFFFFFFFCLL;
                                                              do
                                                              {
                                                                v1870 = *(_OWORD *)v1868;
                                                                *((_OWORD *)v1867 - 1) = *((_OWORD *)v1868 - 1);
                                                                *(_OWORD *)v1867 = v1870;
                                                                v1867 -= 32;
                                                                v1868 -= 32;
                                                                v1869 -= 4;
                                                              }
                                                              while (v1869);
                                                              v1857 = v1866;
                                                              if (v1864 != (v1864 & 0x3FFFFFFFFFFFFFFCLL))
                                                              {
LABEL_2471:
                                                                do
                                                                {
LABEL_2337:
                                                                  v1871 = *((_QWORD *)v1857 - 1);
                                                                  v1857 -= 8;
                                                                  *((_QWORD *)v1862 - 1) = v1871;
                                                                  v1862 -= 8;
                                                                }
                                                                while (v1857 != v1856);
                                                              }
                                                            }
                                                            *(_QWORD *)&v2049 = v1862;
                                                            *((_QWORD *)&v2049 + 1) = v1861;
                                                            *(_QWORD *)&v2050 = v1859;
                                                            if (v1856)
                                                            {
                                                              operator delete(v1856);
                                                              v1853 = (char *)v2007[24];
                                                              v1852 = (char *)v2007[25];
                                                            }
                                                            v1856 = v1862;
LABEL_2341:
                                                            if (v1853 == v1852)
                                                              goto LABEL_2378;
                                                            while (2)
                                                            {
                                                              while (1)
                                                              {
                                                                v1872 = (4 * *(_DWORD *)v1853);
                                                                v1873 = (char *)v2049;
                                                                if ((char *)v2049 == v1861
                                                                  || *((_DWORD *)v1861 - 1) != (_DWORD)v1872)
                                                                {
                                                                  break;
                                                                }
                                                                *((_DWORD *)v1861 - 1) = v1872 + 4;
                                                                v1853 += 4;
                                                                if (v1853 == v1852)
                                                                  goto LABEL_2377;
                                                              }
                                                              v1874 = (v1872 + 4);
                                                              if ((unint64_t)v1861 < (unint64_t)v2050)
                                                              {
                                                                *(_QWORD *)v1861 = v1872 | (v1874 << 32);
                                                                v1875 = (uint64_t)(v1861 + 8);
                                                                goto LABEL_2365;
                                                              }
                                                              v1876 = &v1861[-v2049];
                                                              v1877 = (uint64_t)&v1861[-v2049] >> 3;
                                                              v1878 = v1877 + 1;
                                                              if ((unint64_t)(v1877 + 1) >> 61)
                                                                goto LABEL_2455;
                                                              v1879 = v2050 - v2049;
                                                              if ((uint64_t)(v2050 - v2049) >> 2 > v1878)
                                                                v1878 = v1879 >> 2;
                                                              if ((unint64_t)v1879 >= 0x7FFFFFFFFFFFFFF8)
                                                                v1880 = 0x1FFFFFFFFFFFFFFFLL;
                                                              else
                                                                v1880 = v1878;
                                                              if (v1880)
                                                              {
                                                                if (v1880 >> 61)
                                                                  goto LABEL_2446;
                                                                v1881 = (char *)operator new(8 * v1880);
                                                                v1882 = &v1881[8 * v1877];
                                                                *(_QWORD *)v1882 = v1872 | (v1874 << 32);
                                                                v1875 = (uint64_t)(v1882 + 8);
                                                                if (v1873 != v1861)
                                                                {
LABEL_2357:
                                                                  if ((unint64_t)(v1876 - 8) < 0x168)
                                                                  {
                                                                    v1883 = v1861;
                                                                    goto LABEL_2359;
                                                                  }
                                                                  v1885 = (v1861 - 8 - v1873) & 0xFFFFFFFFFFFFFFF8;
                                                                  if (&v1876[(_QWORD)v1881 - 8 - v1885] > &v1876[(_QWORD)v1881 - 8])
                                                                  {
                                                                    v1883 = v1861;
                                                                    goto LABEL_2359;
                                                                  }
                                                                  if (&v1861[-v1885 - 8] > v1861 - 8)
                                                                  {
                                                                    v1883 = v1861;
                                                                    goto LABEL_2359;
                                                                  }
                                                                  if ((unint64_t)(v1873 - v1881) < 0x20)
                                                                  {
                                                                    v1883 = v1861;
                                                                    goto LABEL_2359;
                                                                  }
                                                                  v1886 = ((unint64_t)(v1876 - 8) >> 3) + 1;
                                                                  v1887 = 8 * (v1886 & 0x3FFFFFFFFFFFFFFCLL);
                                                                  v1883 = &v1861[-v1887];
                                                                  v1882 -= v1887;
                                                                  v1888 = &v1881[8 * v1877 - 16];
                                                                  v1889 = v1861 - 16;
                                                                  v1890 = v1886 & 0x3FFFFFFFFFFFFFFCLL;
                                                                  do
                                                                  {
                                                                    v1891 = *(_OWORD *)v1889;
                                                                    *((_OWORD *)v1888 - 1) = *((_OWORD *)v1889 - 1);
                                                                    *(_OWORD *)v1888 = v1891;
                                                                    v1888 -= 32;
                                                                    v1889 -= 32;
                                                                    v1890 -= 4;
                                                                  }
                                                                  while (v1890);
                                                                  if (v1886 != (v1886 & 0x3FFFFFFFFFFFFFFCLL))
                                                                  {
                                                                    do
                                                                    {
LABEL_2359:
                                                                      v1884 = *((_QWORD *)v1883 - 1);
                                                                      v1883 -= 8;
                                                                      *((_QWORD *)v1882 - 1) = v1884;
                                                                      v1882 -= 8;
                                                                    }
                                                                    while (v1883 != v1873);
                                                                  }
                                                                  v1861 = (char *)v2049;
                                                                  *(_QWORD *)&v2049 = v1882;
                                                                  *(_QWORD *)&v2050 = &v1881[8 * v1880];
                                                                  if (!v1861)
                                                                  {
LABEL_2365:
                                                                    *((_QWORD *)&v2049 + 1) = v1875;
                                                                    v1861 = (char *)v1875;
                                                                    v1853 += 4;
                                                                    if (v1853 != v1852)
                                                                      continue;
LABEL_2377:
                                                                    v1856 = (char *)v2049;
LABEL_2378:
                                                                    if (((v1861 - v1856) & 0x7FFFFFFF0) != 0)
                                                                    {
                                                                      v1892 = ((unint64_t)(v1861 - v1856) >> 3);
                                                                      v1895 = *(_DWORD *)v1856;
                                                                      v1894 = v1856 + 8;
                                                                      v1893 = v1895;
                                                                      v1896 = v1892 - 1;
                                                                      do
                                                                      {
                                                                        v1893 += *v1894 - *(v1894 - 1);
                                                                        *v1894 = v1893;
                                                                        v1894 += 2;
                                                                        --v1896;
                                                                      }
                                                                      while (v1896);
                                                                    }
                                                                    LODWORD(v2034) = (*((_DWORD *)v2007 + 50)
                                                                                    - *((_DWORD *)v2007 + 48)
                                                                                    + 4 * *(_DWORD *)(v1978 + 56)) & 0xFFFFFFFC;
                                                                    v1898 = (char *)v2007[27];
                                                                    v1897 = (char *)v2007[28];
                                                                    v1899 = v1897 - v1898;
                                                                    v1900 = (v1897 - v1898) >> 2;
                                                                    v1901 = (char *)*((_QWORD *)&v2050 + 1);
                                                                    if (v1900 <= (uint64_t)(*((_QWORD *)&v2051 + 1)
                                                                                          - *((_QWORD *)&v2050 + 1)) >> 3)
                                                                    {
                                                                      v1906 = (char *)v2051;
                                                                      goto LABEL_2395;
                                                                    }
                                                                    if (v1899 > 0x7FFFFFFFFFFFFFFCLL)
                                                                      goto LABEL_2455;
                                                                    v1902 = (char *)v2051;
                                                                    v1903 = (char *)operator new(2 * v1899);
                                                                    v1904 = &v1903[8 * v1900];
                                                                    v1905 = v1902 - v1901;
                                                                    v1906 = &v1903[(v1902 - v1901) & 0xFFFFFFFFFFFFFFF8];
                                                                    v1907 = v1906;
                                                                    if (v1902 != v1901)
                                                                    {
                                                                      if ((unint64_t)(v1905 - 8) < 0x58)
                                                                      {
                                                                        v1907 = &v1903[(v1902 - v1901) & 0xFFFFFFFFFFFFFFF8];
                                                                        goto LABEL_2391;
                                                                      }
                                                                      v1907 = &v1903[(v1902 - v1901) & 0xFFFFFFFFFFFFFFF8];
                                                                      if ((unint64_t)(&v1902[-(v1905 & 0xFFFFFFFFFFFFFFF8)]
                                                                                            - v1903) < 0x20)
                                                                        goto LABEL_2472;
                                                                      v1908 = v1905 >> 3;
                                                                      v1909 = ((unint64_t)(v1905 - 8) >> 3) + 1;
                                                                      v1910 = 8 * (v1909 & 0x3FFFFFFFFFFFFFFCLL);
                                                                      v1911 = &v1902[-v1910];
                                                                      v1907 = &v1906[-v1910];
                                                                      v1912 = &v1903[8 * v1908 - 16];
                                                                      v1913 = v1902 - 16;
                                                                      v1914 = v1909 & 0x3FFFFFFFFFFFFFFCLL;
                                                                      do
                                                                      {
                                                                        v1915 = *(_OWORD *)v1913;
                                                                        *((_OWORD *)v1912 - 1) = *((_OWORD *)v1913 - 1);
                                                                        *(_OWORD *)v1912 = v1915;
                                                                        v1912 -= 32;
                                                                        v1913 -= 32;
                                                                        v1914 -= 4;
                                                                      }
                                                                      while (v1914);
                                                                      v1902 = v1911;
                                                                      if (v1909 != (v1909 & 0x3FFFFFFFFFFFFFFCLL))
                                                                      {
LABEL_2472:
                                                                        do
                                                                        {
LABEL_2391:
                                                                          v1916 = *((_QWORD *)v1902 - 1);
                                                                          v1902 -= 8;
                                                                          *((_QWORD *)v1907 - 1) = v1916;
                                                                          v1907 -= 8;
                                                                        }
                                                                        while (v1902 != v1901);
                                                                      }
                                                                    }
                                                                    *((_QWORD *)&v2050 + 1) = v1907;
                                                                    *(_QWORD *)&v2051 = v1906;
                                                                    *((_QWORD *)&v2051 + 1) = v1904;
                                                                    if (v1901)
                                                                    {
                                                                      operator delete(v1901);
                                                                      v1898 = (char *)v2007[27];
                                                                      v1897 = (char *)v2007[28];
                                                                    }
                                                                    v1901 = v1907;
LABEL_2395:
                                                                    if (v1898 == v1897)
                                                                      goto LABEL_2432;
                                                                    while (2)
                                                                    {
                                                                      while (1)
                                                                      {
                                                                        v1917 = (3 * *(_DWORD *)v1898);
                                                                        v1918 = (char *)*((_QWORD *)&v2050 + 1);
                                                                        if (*((char **)&v2050 + 1) == v1906
                                                                          || *((_DWORD *)v1906 - 1) != (_DWORD)v1917)
                                                                        {
                                                                          break;
                                                                        }
                                                                        *((_DWORD *)v1906 - 1) = v1917 + 3;
                                                                        v1898 += 4;
                                                                        if (v1898 == v1897)
                                                                          goto LABEL_2431;
                                                                      }
                                                                      v1919 = (v1917 + 3);
                                                                      if ((unint64_t)v1906 < *((_QWORD *)&v2051 + 1))
                                                                      {
                                                                        *(_QWORD *)v1906 = v1917 | (v1919 << 32);
                                                                        v1920 = (uint64_t)(v1906 + 8);
                                                                        goto LABEL_2419;
                                                                      }
                                                                      v1921 = &v1906[-*((_QWORD *)&v2050 + 1)];
                                                                      v1922 = (uint64_t)&v1906[-*((_QWORD *)&v2050 + 1)] >> 3;
                                                                      v1923 = v1922 + 1;
                                                                      if ((unint64_t)(v1922 + 1) >> 61)
                                                                        goto LABEL_2455;
                                                                      v1924 = *((_QWORD *)&v2051 + 1)
                                                                            - *((_QWORD *)&v2050 + 1);
                                                                      if ((uint64_t)(*((_QWORD *)&v2051 + 1)
                                                                                   - *((_QWORD *)&v2050 + 1)) >> 2 > v1923)
                                                                        v1923 = v1924 >> 2;
                                                                      if ((unint64_t)v1924 >= 0x7FFFFFFFFFFFFFF8)
                                                                        v1925 = 0x1FFFFFFFFFFFFFFFLL;
                                                                      else
                                                                        v1925 = v1923;
                                                                      if (v1925)
                                                                      {
                                                                        if (v1925 >> 61)
                                                                          goto LABEL_2446;
                                                                        v1926 = (char *)operator new(8 * v1925);
                                                                        v1927 = &v1926[8 * v1922];
                                                                        *(_QWORD *)v1927 = v1917 | (v1919 << 32);
                                                                        v1920 = (uint64_t)(v1927 + 8);
                                                                        if (v1918 != v1906)
                                                                        {
LABEL_2411:
                                                                          if ((unint64_t)(v1921 - 8) < 0x168)
                                                                          {
                                                                            v1928 = v1906;
                                                                            goto LABEL_2413;
                                                                          }
                                                                          v1930 = (v1906 - 8 - v1918) & 0xFFFFFFFFFFFFFFF8;
                                                                          if (&v1921[(_QWORD)v1926 - 8 - v1930] > &v1921[(_QWORD)v1926 - 8])
                                                                          {
                                                                            v1928 = v1906;
                                                                            goto LABEL_2413;
                                                                          }
                                                                          if (&v1906[-v1930 - 8] > v1906 - 8)
                                                                          {
                                                                            v1928 = v1906;
                                                                            goto LABEL_2413;
                                                                          }
                                                                          if ((unint64_t)(v1918 - v1926) < 0x20)
                                                                          {
                                                                            v1928 = v1906;
                                                                            goto LABEL_2413;
                                                                          }
                                                                          v1931 = ((unint64_t)(v1921 - 8) >> 3)
                                                                                + 1;
                                                                          v1932 = 8 * (v1931 & 0x3FFFFFFFFFFFFFFCLL);
                                                                          v1928 = &v1906[-v1932];
                                                                          v1927 -= v1932;
                                                                          v1933 = &v1926[8 * v1922 - 16];
                                                                          v1934 = v1906 - 16;
                                                                          v1935 = v1931 & 0x3FFFFFFFFFFFFFFCLL;
                                                                          do
                                                                          {
                                                                            v1936 = *(_OWORD *)v1934;
                                                                            *((_OWORD *)v1933 - 1) = *((_OWORD *)v1934 - 1);
                                                                            *(_OWORD *)v1933 = v1936;
                                                                            v1933 -= 32;
                                                                            v1934 -= 32;
                                                                            v1935 -= 4;
                                                                          }
                                                                          while (v1935);
                                                                          if (v1931 != (v1931 & 0x3FFFFFFFFFFFFFFCLL))
                                                                          {
                                                                            do
                                                                            {
LABEL_2413:
                                                                              v1929 = *((_QWORD *)v1928 - 1);
                                                                              v1928 -= 8;
                                                                              *((_QWORD *)v1927 - 1) = v1929;
                                                                              v1927 -= 8;
                                                                            }
                                                                            while (v1928 != v1918);
                                                                          }
                                                                          v1906 = (char *)*((_QWORD *)&v2050 + 1);
                                                                          *((_QWORD *)&v2050 + 1) = v1927;
                                                                          *((_QWORD *)&v2051 + 1) = &v1926[8 * v1925];
                                                                          if (!v1906)
                                                                          {
LABEL_2419:
                                                                            *(_QWORD *)&v2051 = v1920;
                                                                            v1906 = (char *)v1920;
                                                                            v1898 += 4;
                                                                            if (v1898 != v1897)
                                                                              continue;
LABEL_2431:
                                                                            v1901 = (char *)*((_QWORD *)&v2050 + 1);
LABEL_2432:
                                                                            if (((v1906 - v1901) & 0x7FFFFFFF0) != 0)
                                                                            {
                                                                              v1937 = ((unint64_t)(v1906 - v1901) >> 3);
                                                                              v1940 = *(_DWORD *)v1901;
                                                                              v1939 = v1901 + 8;
                                                                              v1938 = v1940;
                                                                              v1941 = v1937 - 1;
                                                                              do
                                                                              {
                                                                                v1938 += *v1939 - *(v1939 - 1);
                                                                                *v1939 = v1938;
                                                                                v1939 += 2;
                                                                                --v1941;
                                                                              }
                                                                              while (v1941);
                                                                            }
                                                                            DWORD1(v2034) = 3
                                                                                          * (*(_DWORD *)(v1978 + 60)
                                                                                           + ((v2007[28] - v2007[27]) >> 2));
                                                                            v1942 = v2032;
                                                                            v1943 = DWORD1(v2032);
                                                                            v1944 = DWORD2(v2032);
                                                                            v1945 = HIDWORD(v2032);
                                                                            v1946 = v2033;
                                                                            v1947 = DWORD1(v2033);
                                                                            v1948 = DWORD2(v2033);
                                                                            v1949 = HIDWORD(v2033);
                                                                            v1950 = v2034;
                                                                            v1951 = (DWORD1(v2032)
                                                                                                 + v2032
                                                                                                 + DWORD2(v2032)
                                                                                                 + HIDWORD(v2032)
                                                                                                 + v2033
                                                                                                 + DWORD1(v2033)
                                                                                                 + DWORD2(v2033)
                                                                                                 + DWORD1(v2034)
                                                                                                 + HIDWORD(v2033)
                                                                                                 + v2034);
                                                                            if (v1951 <= *(_DWORD *)(v1978 + 8))
                                                                            {
                                                                              *(_QWORD *)&v2037[4] = *(_QWORD *)v1978;
                                                                              sub_20FA54D68(&v2038, v1978, &v2037[4], (unsigned int *)&v2032);
                                                                              v1960 = (_QWORD *)v1978;
                                                                              *(_DWORD *)(v1978 + 16) = v1951;
                                                                              if (*(_QWORD *)(v1978 + 8) < v1951)
                                                                              {
                                                                                if (*(_QWORD *)v1978)
                                                                                {
                                                                                  MEMORY[0x212BC6368](*(_QWORD *)v1978, 0x1000C8000313F17);
                                                                                  v1960 = (_QWORD *)v1978;
                                                                                }
                                                                                v1961 = (8 * v1951 + 31) & 0xFFFFFFFE0;
                                                                                *v1960 = 0;
                                                                                v1960[1] = v1961 >> 3;
                                                                                *v1960 = operator new(v1961, (std::align_val_t)0x20uLL);
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              v1952 = *(_QWORD *)((char *)&v2032 + 4);
                                                                              v2030 = HIDWORD(v2032);
                                                                              v1953 = v2033;
                                                                              v1954 = DWORD1(v2033);
                                                                              v1955 = DWORD2(v2033);
                                                                              v1956 = HIDWORD(v2033);
                                                                              v1957 = v2034;
                                                                              v1958 = operator new((8* (DWORD1(v2032) + v2032 + DWORD2(v2032) + HIDWORD(v2032) + v2033 + DWORD1(v2033) + DWORD2(v2033) + DWORD1(v2034) + HIDWORD(v2033) + v2034)+ 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
                                                                              *(_QWORD *)&v2037[4] = v1958;
                                                                              sub_20FA54D68(&v2038, v1978, &v2037[4], (unsigned int *)&v2032);
                                                                              v1959 = *(_QWORD *)v1978;
                                                                              *(_QWORD *)v1978 = v1958;
                                                                              *(_QWORD *)(v1978 + 8) = ((8 * v1951 + 31) & 0xFFFFFFFE0uLL) >> 3;
                                                                              *(_DWORD *)(v1978 + 16) = v1951;
                                                                              v1950 = v1957;
                                                                              v1949 = v1956;
                                                                              v1948 = v1955;
                                                                              v1947 = v1954;
                                                                              v1946 = v1953;
                                                                              v1945 = v2030;
                                                                              v1944 = HIDWORD(v1952);
                                                                              v1943 = v1952;
                                                                              if (v1959)
                                                                                MEMORY[0x212BC6368](v1959, 0x1000C8000313F17);
                                                                            }
                                                                            v1962 = *(_DWORD *)(v1978 + 28);
                                                                            *(_DWORD *)(v1978 + 24) += (v2007[1] - *v2007) >> 2;
                                                                            *(_DWORD *)(v1978 + 28) = v1962 + ((v2007[4] - v2007[3]) >> 2);
                                                                            v1963 = *(_DWORD *)(v1978 + 64) + v1942;
                                                                            *(_DWORD *)(v1978 + 68) = v1963;
                                                                            v1964 = *(_DWORD *)(v1978 + 36);
                                                                            *(_DWORD *)(v1978 + 32) += (v2007[7] - v2007[6]) >> 2;
                                                                            v1965 = v1963 + v1943;
                                                                            *(_DWORD *)(v1978 + 72) = v1965;
                                                                            *(_DWORD *)(v1978 + 36) = v1964 + ((v2007[10] - v2007[9]) >> 2);
                                                                            v1966 = v1965 + v1944;
                                                                            *(_DWORD *)(v1978 + 76) = v1966;
                                                                            v1967 = *(_DWORD *)(v1978 + 44);
                                                                            *(_DWORD *)(v1978 + 40) += (v2007[13] - v2007[12]) >> 2;
                                                                            v1968 = v1966 + v1945;
                                                                            *(_DWORD *)(v1978 + 80) = v1968;
                                                                            *(_DWORD *)(v1978 + 44) = v1967 + ((v2007[16] - v2007[15]) >> 2);
                                                                            v1969 = v1968 + v1946;
                                                                            *(_DWORD *)(v1978 + 84) = v1969;
                                                                            v1970 = *(_DWORD *)(v1978 + 52);
                                                                            *(_DWORD *)(v1978 + 48) += (v2007[19] - v2007[18]) >> 2;
                                                                            v1971 = v1969 + v1947;
                                                                            *(_DWORD *)(v1978 + 88) = v1971;
                                                                            *(_DWORD *)(v1978 + 52) = v1970 + ((v2007[22] - v2007[21]) >> 2);
                                                                            v1972 = v1971 + v1948;
                                                                            *(_DWORD *)(v1978 + 92) = v1972;
                                                                            v1973 = *(_DWORD *)(v1978 + 60);
                                                                            *(_DWORD *)(v1978 + 56) += (v2007[25] - v2007[24]) >> 2;
                                                                            v1974 = v1972 + v1949;
                                                                            *(_DWORD *)(v1978 + 96) = v1974;
                                                                            *(_DWORD *)(v1978 + 60) = v1973 + ((v2007[28] - v2007[27]) >> 2);
                                                                            *(_DWORD *)(v1978 + 100) = v1974 + v1950;
                                                                            sub_20F89E908((uint64_t)&v2038);
LABEL_67:
                                                                            sub_20FA3B3BC(v2009);
                                                                            v71 = v2031;
                                                                            v2013 = *((_DWORD *)v2031 + 755);
                                                                            v2016 = *((_DWORD *)v2031 + 760);
                                                                            v2026 = (char **)(v2031 + 2516);
                                                                            v72 = v2031[2325];
                                                                            if (!*(_BYTE *)(v72 + 1616))
                                                                              goto LABEL_718;
                                                                            v73 = 0;
                                                                            v2031[2517] = v2031[2516];
                                                                            v2019 = (void **)(v2031 + 2519);
                                                                            v2022 = v72;
                                                                            v2031[2520] = v2031[2519];
                                                                            v2011 = (void **)(v2031 + 2522);
                                                                            v2031[2523] = v2031[2522];
                                                                            v2008 = (void **)(v2031 + 2525);
                                                                            v2031[2526] = v2031[2525];
                                                                            v2005 = (void **)(v2031 + 2528);
                                                                            v2031[2529] = v2031[2528];
                                                                            v2002 = (void **)(v2031 + 2531);
                                                                            v2031[2532] = v2031[2531];
                                                                            v1980 = (void **)(v2031 + 2534);
                                                                            v2031[2535] = v2031[2534];
                                                                            v1977 = (void **)(v2031 + 2537);
                                                                            v2031[2538] = v2031[2537];
                                                                            v1976 = (void **)(v2031 + 2540);
                                                                            v2031[2541] = v2031[2540];
                                                                            v1975 = (void **)(v2031 + 2543);
                                                                            v2031[2544] = v2031[2543];
                                                                            while (2)
                                                                            {
                                                                              v74 = &v2026[3 * v73];
                                                                              v75 = *v74;
                                                                              if ((unint64_t)(v74[2] - *v74) <= 0xFF)
                                                                              {
                                                                                v76 = &v2026[3 * v73];
                                                                                v79 = v76[1];
                                                                                v77 = v76 + 1;
                                                                                v78 = v79;
                                                                                v80 = (char *)operator new(0x100uLL);
                                                                                v81 = v79 - v75;
                                                                                v82 = &v80[(v79 - v75) & 0xFFFFFFFFFFFFFFFCLL];
                                                                                v83 = v82;
                                                                                if (v79 != v75)
                                                                                {
                                                                                  if ((unint64_t)(v81 - 4) < 0x2C)
                                                                                  {
                                                                                    v83 = &v80[(v78 - v75) & 0xFFFFFFFFFFFFFFFCLL];
                                                                                    goto LABEL_78;
                                                                                  }
                                                                                  v83 = &v80[(v78 - v75) & 0xFFFFFFFFFFFFFFFCLL];
                                                                                  if (v78
                                                                                     - v80
                                                                                     - (v81 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
                                                                                    goto LABEL_2473;
                                                                                  v84 = v81 >> 2;
                                                                                  v85 = ((unint64_t)(v81 - 4) >> 2)
                                                                                      + 1;
                                                                                  v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
                                                                                  v87 = &v78[-v86];
                                                                                  v83 = &v82[-v86];
                                                                                  v88 = &v80[4 * v84 - 16];
                                                                                  v89 = (__int128 *)(v78 - 16);
                                                                                  v90 = v85 & 0x7FFFFFFFFFFFFFF8;
                                                                                  do
                                                                                  {
                                                                                    v91 = *v89;
                                                                                    *((_OWORD *)v88 - 1) = *(v89 - 1);
                                                                                    *(_OWORD *)v88 = v91;
                                                                                    v88 -= 32;
                                                                                    v89 -= 2;
                                                                                    v90 -= 8;
                                                                                  }
                                                                                  while (v90);
                                                                                  v78 = v87;
                                                                                  if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
                                                                                  {
LABEL_2473:
                                                                                    do
                                                                                    {
LABEL_78:
                                                                                      v92 = *((_DWORD *)v78 - 1);
                                                                                      v78 -= 4;
                                                                                      *((_DWORD *)v83 - 1) = v92;
                                                                                      v83 -= 4;
                                                                                    }
                                                                                    while (v78 != v75);
                                                                                  }
                                                                                }
                                                                                *v74 = v83;
                                                                                *v77 = v82;
                                                                                v74[2] = v80 + 256;
                                                                                v71 = v2031;
                                                                                if (v75)
                                                                                  operator delete(v75);
                                                                              }
                                                                              if (++v73 != 10)
                                                                                continue;
                                                                              break;
                                                                            }
                                                                            if (*(_BYTE *)(v2022 + 1616))
                                                                            {
                                                                              v93 = (void *)v71[2516];
                                                                              v71[2517] = v93;
                                                                              v94 = ((*(_QWORD *)(v2022 + 16)
                                                                                                  - *(_QWORD *)(v2022 + 8)) >> 4);
                                                                              if (v94 > (uint64_t)(v71[2518]
                                                                                                 - (_QWORD)v93) >> 2)
                                                                              {
                                                                                v95 = (char *)operator new(4 * v94);
                                                                                v71 = v2031;
                                                                                v2031[2516] = v95;
                                                                                v2031[2517] = v95;
                                                                                v2031[2518] = &v95[4 * v94];
                                                                                if (v93)
                                                                                  operator delete(v93);
                                                                              }
                                                                              v96 = *(int **)(v2022 + 8);
                                                                              v97 = *(int **)(v2022 + 16);
                                                                              if (v96 != v97)
                                                                              {
                                                                                while (2)
                                                                                {
                                                                                  if (!*(_BYTE *)(*((_QWORD *)v96 + 1)
                                                                                                 + 20))
                                                                                    goto LABEL_89;
                                                                                  v99 = *v96;
                                                                                  v100 = (char *)v71[2517];
                                                                                  v101 = v71[2518];
                                                                                  if ((unint64_t)v100 >= v101)
                                                                                  {
                                                                                    v102 = *v2026;
                                                                                    v103 = v100 - *v2026;
                                                                                    v104 = v103 >> 2;
                                                                                    v105 = (v103 >> 2) + 1;
                                                                                    if (v105 >> 62)
                                                                                      goto LABEL_2460;
                                                                                    v106 = v101 - (_QWORD)v102;
                                                                                    if (v106 >> 1 > v105)
                                                                                      v105 = v106 >> 1;
                                                                                    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                                      v107 = 0x3FFFFFFFFFFFFFFFLL;
                                                                                    else
                                                                                      v107 = v105;
                                                                                    if (v107)
                                                                                    {
                                                                                      if (v107 >> 62)
                                                                                        goto LABEL_2444;
                                                                                      v108 = operator new(4 * v107);
                                                                                      v109 = &v108[4 * v104];
                                                                                      *v109 = v99;
                                                                                      v98 = (uint64_t)(v109 + 1);
                                                                                      v110 = v100 - v102;
                                                                                      if (v100 == v102)
                                                                                      {
LABEL_109:
                                                                                        v71 = v2031;
                                                                                        v2031[2516] = v109;
                                                                                        v2031[2517] = v98;
                                                                                        v2031[2518] = &v108[4 * v107];
                                                                                        if (v102)
                                                                                          operator delete(v102);
LABEL_88:
                                                                                        v71[2517] = v98;
LABEL_89:
                                                                                        v96 += 4;
                                                                                        if (v96 == v97)
                                                                                          goto LABEL_111;
                                                                                        continue;
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v108 = 0;
                                                                                      v109 = (_DWORD *)(4 * v104);
                                                                                      *(_DWORD *)(4 * v104) = v99;
                                                                                      v98 = 4 * v104 + 4;
                                                                                      v110 = v100 - v102;
                                                                                      if (v100 == v102)
                                                                                        goto LABEL_109;
                                                                                    }
                                                                                    v111 = v110 - 4;
                                                                                    if (v111 < 0x2C)
                                                                                      goto LABEL_2474;
                                                                                    if ((unint64_t)(v100 - v108 - v103) < 0x20)
                                                                                      goto LABEL_2474;
                                                                                    v112 = (v111 >> 2) + 1;
                                                                                    v113 = 4
                                                                                         * (v112 & 0x7FFFFFFFFFFFFFF8);
                                                                                    v114 = &v100[-v113];
                                                                                    v109 = (_DWORD *)((char *)v109 - v113);
                                                                                    v115 = &v108[4 * v104 - 16];
                                                                                    v116 = v100 - 16;
                                                                                    v117 = v112 & 0x7FFFFFFFFFFFFFF8;
                                                                                    do
                                                                                    {
                                                                                      v118 = *(_OWORD *)v116;
                                                                                      *(v115 - 1) = *((_OWORD *)v116 - 1);
                                                                                      *v115 = v118;
                                                                                      v115 -= 2;
                                                                                      v116 -= 32;
                                                                                      v117 -= 8;
                                                                                    }
                                                                                    while (v117);
                                                                                    v100 = v114;
                                                                                    if (v112 != (v112 & 0x7FFFFFFFFFFFFFF8))
                                                                                    {
LABEL_2474:
                                                                                      do
                                                                                      {
                                                                                        v119 = *((_DWORD *)v100 - 1);
                                                                                        v100 -= 4;
                                                                                        *--v109 = v119;
                                                                                      }
                                                                                      while (v100 != v102);
                                                                                    }
                                                                                    goto LABEL_109;
                                                                                  }
                                                                                  break;
                                                                                }
                                                                                *(_DWORD *)v100 = v99;
                                                                                v98 = (uint64_t)(v100 + 4);
                                                                                v71 = v2031;
                                                                                goto LABEL_88;
                                                                              }
LABEL_111:
                                                                              if (*(_BYTE *)(v2022 + 1616))
                                                                              {
                                                                                v120 = (void *)v71[2519];
                                                                                v71[2520] = v120;
                                                                                v121 = ((*(_QWORD *)(v2022 + 112) - *(_QWORD *)(v2022 + 104)) >> 4);
                                                                                if (v121 > (uint64_t)(v71[2521] - (_QWORD)v120) >> 2)
                                                                                {
                                                                                  v122 = (char *)operator new(4 * v121);
                                                                                  v71 = v2031;
                                                                                  v2031[2519] = v122;
                                                                                  v2031[2520] = v122;
                                                                                  v2031[2521] = &v122[4 * v121];
                                                                                  if (v120)
                                                                                    operator delete(v120);
                                                                                }
                                                                                v123 = *(int **)(v2022 + 104);
                                                                                v124 = *(int **)(v2022 + 112);
                                                                                if (v123 != v124)
                                                                                {
                                                                                  while (2)
                                                                                  {
                                                                                    if (!*(_BYTE *)(*((_QWORD *)v123 + 1) + 20))
                                                                                      goto LABEL_119;
                                                                                    v126 = *v123;
                                                                                    v127 = (char *)v71[2520];
                                                                                    v128 = v71[2521];
                                                                                    if ((unint64_t)v127 >= v128)
                                                                                    {
                                                                                      v129 = (char *)*v2019;
                                                                                      v130 = v127 - (_BYTE *)*v2019;
                                                                                      v131 = v130 >> 2;
                                                                                      v132 = (v130 >> 2) + 1;
                                                                                      if (v132 >> 62)
                                                                                        goto LABEL_2460;
                                                                                      v133 = v128 - (_QWORD)v129;
                                                                                      if (v133 >> 1 > v132)
                                                                                        v132 = v133 >> 1;
                                                                                      if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                                        v134 = 0x3FFFFFFFFFFFFFFFLL;
                                                                                      else
                                                                                        v134 = v132;
                                                                                      if (v134)
                                                                                      {
                                                                                        if (v134 >> 62)
                                                                                          goto LABEL_2444;
                                                                                        v135 = operator new(4 * v134);
                                                                                        v136 = &v135[4 * v131];
                                                                                        *v136 = v126;
                                                                                        v125 = (uint64_t)(v136 + 1);
                                                                                        v137 = v127 - v129;
                                                                                        if (v127 == v129)
                                                                                        {
LABEL_139:
                                                                                          v2031[2519] = v136;
                                                                                          v2031[2520] = v125;
                                                                                          v2031[2521] = &v135[4 * v134];
                                                                                          if (v129)
                                                                                            operator delete(v129);
LABEL_118:
                                                                                          v71 = v2031;
                                                                                          v2031[2520] = v125;
LABEL_119:
                                                                                          v123 += 4;
                                                                                          if (v123 == v124)
                                                                                            goto LABEL_141;
                                                                                          continue;
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v135 = 0;
                                                                                        v136 = (_DWORD *)(4 * v131);
                                                                                        *(_DWORD *)(4 * v131) = v126;
                                                                                        v125 = 4 * v131 + 4;
                                                                                        v137 = v127 - v129;
                                                                                        if (v127 == v129)
                                                                                          goto LABEL_139;
                                                                                      }
                                                                                      v138 = v137 - 4;
                                                                                      if (v138 < 0x2C)
                                                                                        goto LABEL_2475;
                                                                                      if ((unint64_t)(v127 - v135 - v130) < 0x20)
                                                                                        goto LABEL_2475;
                                                                                      v139 = (v138 >> 2) + 1;
                                                                                      v140 = 4
                                                                                           * (v139 & 0x7FFFFFFFFFFFFFF8);
                                                                                      v141 = &v127[-v140];
                                                                                      v136 = (_DWORD *)((char *)v136 - v140);
                                                                                      v142 = &v135[4 * v131 - 16];
                                                                                      v143 = v127 - 16;
                                                                                      v144 = v139 & 0x7FFFFFFFFFFFFFF8;
                                                                                      do
                                                                                      {
                                                                                        v145 = *(_OWORD *)v143;
                                                                                        *(v142 - 1) = *((_OWORD *)v143 - 1);
                                                                                        *v142 = v145;
                                                                                        v142 -= 2;
                                                                                        v143 -= 32;
                                                                                        v144 -= 8;
                                                                                      }
                                                                                      while (v144);
                                                                                      v127 = v141;
                                                                                      if (v139 != (v139 & 0x7FFFFFFFFFFFFFF8))
                                                                                      {
LABEL_2475:
                                                                                        do
                                                                                        {
                                                                                          v146 = *((_DWORD *)v127 - 1);
                                                                                          v127 -= 4;
                                                                                          *--v136 = v146;
                                                                                        }
                                                                                        while (v127 != v129);
                                                                                      }
                                                                                      goto LABEL_139;
                                                                                    }
                                                                                    break;
                                                                                  }
                                                                                  *(_DWORD *)v127 = v126;
                                                                                  v125 = (uint64_t)(v127 + 4);
                                                                                  goto LABEL_118;
                                                                                }
LABEL_141:
                                                                                if (*(_BYTE *)(v2022 + 1616))
                                                                                {
                                                                                  v147 = (void *)v71[2522];
                                                                                  v71[2523] = v147;
                                                                                  v148 = ((*(_QWORD *)(v2022 + 208) - *(_QWORD *)(v2022 + 200)) >> 4);
                                                                                  if (v148 > (uint64_t)(v71[2524] - (_QWORD)v147) >> 2)
                                                                                  {
                                                                                    v149 = (char *)operator new(4 * v148);
                                                                                    v71 = v2031;
                                                                                    v2031[2522] = v149;
                                                                                    v2031[2523] = v149;
                                                                                    v2031[2524] = &v149[4 * v148];
                                                                                    if (v147)
                                                                                      operator delete(v147);
                                                                                  }
                                                                                  v150 = *(int **)(v2022 + 200);
                                                                                  v151 = *(int **)(v2022 + 208);
                                                                                  if (v150 != v151)
                                                                                  {
                                                                                    while (2)
                                                                                    {
                                                                                      if (!*(_BYTE *)(*((_QWORD *)v150 + 1) + 20))
                                                                                        goto LABEL_149;
                                                                                      v153 = *v150;
                                                                                      v154 = (char *)v71[2523];
                                                                                      v155 = v71[2524];
                                                                                      if ((unint64_t)v154 >= v155)
                                                                                      {
                                                                                        v156 = (char *)*v2011;
                                                                                        v157 = v154 - (_BYTE *)*v2011;
                                                                                        v158 = v157 >> 2;
                                                                                        v159 = (v157 >> 2) + 1;
                                                                                        if (v159 >> 62)
                                                                                          goto LABEL_2460;
                                                                                        v160 = v155 - (_QWORD)v156;
                                                                                        if (v160 >> 1 > v159)
                                                                                          v159 = v160 >> 1;
                                                                                        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                                          v161 = 0x3FFFFFFFFFFFFFFFLL;
                                                                                        else
                                                                                          v161 = v159;
                                                                                        if (v161)
                                                                                        {
                                                                                          if (v161 >> 62)
                                                                                            goto LABEL_2444;
                                                                                          v162 = operator new(4 * v161);
                                                                                          v163 = &v162[4 * v158];
                                                                                          *v163 = v153;
                                                                                          v152 = (uint64_t)(v163 + 1);
                                                                                          v164 = v154 - v156;
                                                                                          if (v154 == v156)
                                                                                          {
LABEL_169:
                                                                                            v71 = v2031;
                                                                                            v2031[2522] = v163;
                                                                                            v2031[2523] = v152;
                                                                                            v2031[2524] = &v162[4 * v161];
                                                                                            if (v156)
                                                                                              operator delete(v156);
LABEL_148:
                                                                                            v71[2523] = v152;
LABEL_149:
                                                                                            v150 += 4;
                                                                                            if (v150 == v151)
                                                                                              goto LABEL_202;
                                                                                            continue;
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v162 = 0;
                                                                                          v163 = (_DWORD *)(4 * v158);
                                                                                          *(_DWORD *)(4 * v158) = v153;
                                                                                          v152 = 4 * v158 + 4;
                                                                                          v164 = v154 - v156;
                                                                                          if (v154 == v156)
                                                                                            goto LABEL_169;
                                                                                        }
                                                                                        v165 = v164 - 4;
                                                                                        if (v165 < 0x2C)
                                                                                          goto LABEL_2476;
                                                                                        if ((unint64_t)(v154 - v162 - v157) < 0x20)
                                                                                          goto LABEL_2476;
                                                                                        v166 = (v165 >> 2) + 1;
                                                                                        v167 = 4
                                                                                             * (v166 & 0x7FFFFFFFFFFFFFF8);
                                                                                        v168 = &v154[-v167];
                                                                                        v163 = (_DWORD *)((char *)v163 - v167);
                                                                                        v169 = &v162[4 * v158 - 16];
                                                                                        v170 = v154 - 16;
                                                                                        v171 = v166 & 0x7FFFFFFFFFFFFFF8;
                                                                                        do
                                                                                        {
                                                                                          v172 = *(_OWORD *)v170;
                                                                                          *(v169 - 1) = *((_OWORD *)v170 - 1);
                                                                                          *v169 = v172;
                                                                                          v169 -= 2;
                                                                                          v170 -= 32;
                                                                                          v171 -= 8;
                                                                                        }
                                                                                        while (v171);
                                                                                        v154 = v168;
                                                                                        if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
                                                                                        {
LABEL_2476:
                                                                                          do
                                                                                          {
                                                                                            v173 = *((_DWORD *)v154 - 1);
                                                                                            v154 -= 4;
                                                                                            *--v163 = v173;
                                                                                          }
                                                                                          while (v154 != v156);
                                                                                        }
                                                                                        goto LABEL_169;
                                                                                      }
                                                                                      break;
                                                                                    }
                                                                                    *(_DWORD *)v154 = v153;
                                                                                    v152 = (uint64_t)(v154 + 4);
                                                                                    v71 = v2031;
                                                                                    goto LABEL_148;
                                                                                  }
LABEL_202:
                                                                                  if (*(_BYTE *)(v2022 + 1616))
                                                                                  {
                                                                                    v201 = (void *)v71[2525];
                                                                                    v71[2526] = v201;
                                                                                    v202 = ((*(_QWORD *)(v2022 + 304) - *(_QWORD *)(v2022 + 296)) >> 4);
                                                                                    if (v202 > (uint64_t)(v71[2527] - (_QWORD)v201) >> 2)
                                                                                    {
                                                                                      v203 = (char *)operator new(4 * v202);
                                                                                      v71 = v2031;
                                                                                      v2031[2525] = v203;
                                                                                      v2031[2526] = v203;
                                                                                      v2031[2527] = &v203[4 * v202];
                                                                                      if (v201)
                                                                                        operator delete(v201);
                                                                                    }
                                                                                    v204 = *(int **)(v2022 + 296);
                                                                                    v205 = *(int **)(v2022 + 304);
                                                                                    if (v204 != v205)
                                                                                    {
                                                                                      while (2)
                                                                                      {
                                                                                        if (!*(_BYTE *)(*((_QWORD *)v204 + 1) + 20))
                                                                                          goto LABEL_210;
                                                                                        v207 = *v204;
                                                                                        v208 = (char *)v71[2526];
                                                                                        v209 = v71[2527];
                                                                                        if ((unint64_t)v208 >= v209)
                                                                                        {
                                                                                          v210 = (char *)*v2008;
                                                                                          v211 = v208 - (_BYTE *)*v2008;
                                                                                          v212 = v211 >> 2;
                                                                                          v213 = (v211 >> 2) + 1;
                                                                                          if (v213 >> 62)
                                                                                            goto LABEL_2460;
                                                                                          v214 = v209 - (_QWORD)v210;
                                                                                          if (v214 >> 1 > v213)
                                                                                            v213 = v214 >> 1;
                                                                                          if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                                            v215 = 0x3FFFFFFFFFFFFFFFLL;
                                                                                          else
                                                                                            v215 = v213;
                                                                                          if (v215)
                                                                                          {
                                                                                            if (v215 >> 62)
                                                                                              goto LABEL_2444;
                                                                                            v216 = operator new(4 * v215);
                                                                                            v217 = &v216[4 * v212];
                                                                                            *v217 = v207;
                                                                                            v206 = (uint64_t)(v217 + 1);
                                                                                            v218 = v208 - v210;
                                                                                            if (v208 == v210)
                                                                                            {
LABEL_230:
                                                                                              v71 = v2031;
                                                                                              v2031[2525] = v217;
                                                                                              v2031[2526] = v206;
                                                                                              v2031[2527] = &v216[4 * v215];
                                                                                              if (v210)
                                                                                                operator delete(v210);
LABEL_209:
                                                                                              v71[2526] = v206;
LABEL_210:
                                                                                              v204 += 4;
                                                                                              if (v204 == v205)
                                                                                                goto LABEL_232;
                                                                                              continue;
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v216 = 0;
                                                                                            v217 = (_DWORD *)(4 * v212);
                                                                                            *(_DWORD *)(4 * v212) = v207;
                                                                                            v206 = 4 * v212 + 4;
                                                                                            v218 = v208 - v210;
                                                                                            if (v208 == v210)
                                                                                              goto LABEL_230;
                                                                                          }
                                                                                          v219 = v218 - 4;
                                                                                          if (v219 < 0x2C)
                                                                                            goto LABEL_2477;
                                                                                          if ((unint64_t)(v208 - v216 - v211) < 0x20)
                                                                                            goto LABEL_2477;
                                                                                          v220 = (v219 >> 2) + 1;
                                                                                          v221 = 4
                                                                                               * (v220 & 0x7FFFFFFFFFFFFFF8);
                                                                                          v222 = &v208[-v221];
                                                                                          v217 = (_DWORD *)((char *)v217 - v221);
                                                                                          v223 = &v216[4 * v212 - 16];
                                                                                          v224 = v208 - 16;
                                                                                          v225 = v220 & 0x7FFFFFFFFFFFFFF8;
                                                                                          do
                                                                                          {
                                                                                            v226 = *(_OWORD *)v224;
                                                                                            *(v223 - 1) = *((_OWORD *)v224 - 1);
                                                                                            *v223 = v226;
                                                                                            v223 -= 2;
                                                                                            v224 -= 32;
                                                                                            v225 -= 8;
                                                                                          }
                                                                                          while (v225);
                                                                                          v208 = v222;
                                                                                          if (v220 != (v220 & 0x7FFFFFFFFFFFFFF8))
                                                                                          {
LABEL_2477:
                                                                                            do
                                                                                            {
                                                                                              v227 = *((_DWORD *)v208 - 1);
                                                                                              v208 -= 4;
                                                                                              *--v217 = v227;
                                                                                            }
                                                                                            while (v208 != v210);
                                                                                          }
                                                                                          goto LABEL_230;
                                                                                        }
                                                                                        break;
                                                                                      }
                                                                                      *(_DWORD *)v208 = v207;
                                                                                      v206 = (uint64_t)(v208 + 4);
                                                                                      v71 = v2031;
                                                                                      goto LABEL_209;
                                                                                    }
LABEL_232:
                                                                                    if (*(_BYTE *)(v2022 + 1616))
                                                                                    {
                                                                                      v228 = (void *)v71[2528];
                                                                                      v71[2529] = v228;
                                                                                      v229 = ((*(_QWORD *)(v2022 + 400) - *(_QWORD *)(v2022 + 392)) >> 4);
                                                                                      if (v229 > (uint64_t)(v71[2530] - (_QWORD)v228) >> 2)
                                                                                      {
                                                                                        v230 = (char *)operator new(4 * v229);
                                                                                        v71 = v2031;
                                                                                        v2031[2528] = v230;
                                                                                        v2031[2529] = v230;
                                                                                        v2031[2530] = &v230[4 * v229];
                                                                                        if (v228)
                                                                                          operator delete(v228);
                                                                                      }
                                                                                      v231 = *(int **)(v2022 + 392);
                                                                                      v232 = *(int **)(v2022 + 400);
                                                                                      if (v231 != v232)
                                                                                      {
                                                                                        while (2)
                                                                                        {
                                                                                          if (!*(_BYTE *)(*((_QWORD *)v231 + 1) + 20))
                                                                                            goto LABEL_240;
                                                                                          v234 = *v231;
                                                                                          v235 = (char *)v71[2529];
                                                                                          v236 = v71[2530];
                                                                                          if ((unint64_t)v235 >= v236)
                                                                                          {
                                                                                            v237 = (char *)*v2005;
                                                                                            v238 = v235
                                                                                                 - (_BYTE *)*v2005;
                                                                                            v239 = v238 >> 2;
                                                                                            v240 = (v238 >> 2) + 1;
                                                                                            if (v240 >> 62)
                                                                                              goto LABEL_2460;
                                                                                            v241 = v236 - (_QWORD)v237;
                                                                                            if (v241 >> 1 > v240)
                                                                                              v240 = v241 >> 1;
                                                                                            if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                                              v242 = 0x3FFFFFFFFFFFFFFFLL;
                                                                                            else
                                                                                              v242 = v240;
                                                                                            if (v242)
                                                                                            {
                                                                                              if (v242 >> 62)
                                                                                                goto LABEL_2444;
                                                                                              v243 = operator new(4 * v242);
                                                                                              v244 = &v243[4 * v239];
                                                                                              *v244 = v234;
                                                                                              v233 = (uint64_t)(v244 + 1);
                                                                                              v245 = v235 - v237;
                                                                                              if (v235 == v237)
                                                                                              {
LABEL_260:
                                                                                                v71 = v2031;
                                                                                                v2031[2528] = v244;
                                                                                                v2031[2529] = v233;
                                                                                                v2031[2530] = &v243[4 * v242];
                                                                                                if (v237)
                                                                                                  operator delete(v237);
LABEL_239:
                                                                                                v71[2529] = v233;
LABEL_240:
                                                                                                v231 += 4;
                                                                                                if (v231 == v232)
                                                                                                  goto LABEL_262;
                                                                                                continue;
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v243 = 0;
                                                                                              v244 = (_DWORD *)(4 * v239);
                                                                                              *(_DWORD *)(4 * v239) = v234;
                                                                                              v233 = 4 * v239 + 4;
                                                                                              v245 = v235 - v237;
                                                                                              if (v235 == v237)
                                                                                                goto LABEL_260;
                                                                                            }
                                                                                            v246 = v245 - 4;
                                                                                            if (v246 < 0x2C)
                                                                                              goto LABEL_2478;
                                                                                            if ((unint64_t)(v235 - v243 - v238) < 0x20)
                                                                                              goto LABEL_2478;
                                                                                            v247 = (v246 >> 2) + 1;
                                                                                            v248 = 4
                                                                                                 * (v247 & 0x7FFFFFFFFFFFFFF8);
                                                                                            v249 = &v235[-v248];
                                                                                            v244 = (_DWORD *)((char *)v244 - v248);
                                                                                            v250 = &v243[4 * v239 - 16];
                                                                                            v251 = v235 - 16;
                                                                                            v252 = v247 & 0x7FFFFFFFFFFFFFF8;
                                                                                            do
                                                                                            {
                                                                                              v253 = *(_OWORD *)v251;
                                                                                              *(v250 - 1) = *((_OWORD *)v251 - 1);
                                                                                              *v250 = v253;
                                                                                              v250 -= 2;
                                                                                              v251 -= 32;
                                                                                              v252 -= 8;
                                                                                            }
                                                                                            while (v252);
                                                                                            v235 = v249;
                                                                                            if (v247 != (v247 & 0x7FFFFFFFFFFFFFF8))
                                                                                            {
LABEL_2478:
                                                                                              do
                                                                                              {
                                                                                                v254 = *((_DWORD *)v235 - 1);
                                                                                                v235 -= 4;
                                                                                                *--v244 = v254;
                                                                                              }
                                                                                              while (v235 != v237);
                                                                                            }
                                                                                            goto LABEL_260;
                                                                                          }
                                                                                          break;
                                                                                        }
                                                                                        *(_DWORD *)v235 = v234;
                                                                                        v233 = (uint64_t)(v235 + 4);
                                                                                        v71 = v2031;
                                                                                        goto LABEL_239;
                                                                                      }
LABEL_262:
                                                                                      if (*(_BYTE *)(v2022 + 1616))
                                                                                      {
                                                                                        v255 = (void *)v71[2531];
                                                                                        v71[2532] = v255;
                                                                                        v256 = ((*(_QWORD *)(v2022 + 496) - *(_QWORD *)(v2022 + 488)) >> 4);
                                                                                        if (v256 > (uint64_t)(v71[2533] - (_QWORD)v255) >> 2)
                                                                                        {
                                                                                          v257 = (char *)operator new(4 * v256);
                                                                                          v71 = v2031;
                                                                                          v2031[2531] = v257;
                                                                                          v2031[2532] = v257;
                                                                                          v2031[2533] = &v257[4 * v256];
                                                                                          if (v255)
                                                                                            operator delete(v255);
                                                                                        }
                                                                                        v258 = *(int **)(v2022 + 488);
                                                                                        for (k = *(int **)(v2022 + 496);
                                                                                              v258 != k;
                                                                                              v258 += 4)
                                                                                        {
                                                                                          if (*(_BYTE *)(*((_QWORD *)v258 + 1) + 20))
                                                                                          {
                                                                                            v261 = *v258;
                                                                                            v262 = (char *)v71[2532];
                                                                                            v263 = v71[2533];
                                                                                            if ((unint64_t)v262 < v263)
                                                                                            {
                                                                                              *(_DWORD *)v262 = v261;
                                                                                              v260 = v262 + 4;
                                                                                              v71 = v2031;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v264 = (char *)*v2002;
                                                                                              v265 = v262 - (_BYTE *)*v2002;
                                                                                              v266 = v265 >> 2;
                                                                                              v267 = (v265 >> 2) + 1;
                                                                                              if (v267 >> 62)
                                                                                                goto LABEL_2460;
                                                                                              v268 = v263 - (_QWORD)v264;
                                                                                              if (v268 >> 1 > v267)
                                                                                                v267 = v268 >> 1;
                                                                                              if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                                                v269 = 0x3FFFFFFFFFFFFFFFLL;
                                                                                              else
                                                                                                v269 = v267;
                                                                                              if (v269)
                                                                                              {
                                                                                                if (v269 >> 62)
                                                                                                  goto LABEL_2444;
                                                                                                v270 = operator new(4 * v269);
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v270 = 0;
                                                                                              }
                                                                                              v271 = &v270[4 * v266];
                                                                                              *v271 = v261;
                                                                                              v260 = v271 + 1;
                                                                                              if (v262 != v264)
                                                                                              {
                                                                                                v272 = v262 - v264 - 4;
                                                                                                if (v272 < 0x2C)
                                                                                                  goto LABEL_2479;
                                                                                                if ((unint64_t)(v262 - v270 - v265) < 0x20)
                                                                                                  goto LABEL_2479;
                                                                                                v273 = (v272 >> 2) + 1;
                                                                                                v274 = 4 * (v273 & 0x7FFFFFFFFFFFFFF8);
                                                                                                v275 = &v262[-v274];
                                                                                                v271 = (_DWORD *)((char *)v271 - v274);
                                                                                                v276 = &v270[4 * v266 - 16];
                                                                                                v277 = v262 - 16;
                                                                                                v278 = v273 & 0x7FFFFFFFFFFFFFF8;
                                                                                                do
                                                                                                {
                                                                                                  v279 = *(_OWORD *)v277;
                                                                                                  *(v276 - 1) = *((_OWORD *)v277 - 1);
                                                                                                  *v276 = v279;
                                                                                                  v276 -= 2;
                                                                                                  v277 -= 32;
                                                                                                  v278 -= 8;
                                                                                                }
                                                                                                while (v278);
                                                                                                v262 = v275;
                                                                                                if (v273 != (v273 & 0x7FFFFFFFFFFFFFF8))
                                                                                                {
LABEL_2479:
                                                                                                  do
                                                                                                  {
                                                                                                    v280 = *((_DWORD *)v262 - 1);
                                                                                                    v262 -= 4;
                                                                                                    *--v271 = v280;
                                                                                                  }
                                                                                                  while (v262 != v264);
                                                                                                }
                                                                                              }
                                                                                              v71 = v2031;
                                                                                              v2031[2531] = v271;
                                                                                              v2031[2532] = v260;
                                                                                              v2031[2533] = &v270[4 * v269];
                                                                                              if (v264)
                                                                                                operator delete(v264);
                                                                                            }
                                                                                            v71[2532] = v260;
                                                                                          }
                                                                                        }
                                                                                        if (*(_BYTE *)(v2022 + 1616))
                                                                                        {
                                                                                          v522 = (void *)v71[2534];
                                                                                          v71[2535] = v522;
                                                                                          v523 = ((*(_QWORD *)(v2022 + 592) - *(_QWORD *)(v2022 + 584)) >> 4);
                                                                                          if (v523 > (uint64_t)(v71[2536] - (_QWORD)v522) >> 2)
                                                                                          {
                                                                                            v524 = (char *)operator new(4 * v523);
                                                                                            v71 = v2031;
                                                                                            v2031[2534] = v524;
                                                                                            v2031[2535] = v524;
                                                                                            v2031[2536] = &v524[4 * v523];
                                                                                            if (v522)
                                                                                              operator delete(v522);
                                                                                          }
                                                                                          v525 = *(int **)(v2022 + 584);
                                                                                          for (m = *(int **)(v2022 + 592);
                                                                                                v525 != m;
                                                                                                v525 += 4)
                                                                                          {
                                                                                            if (*(_BYTE *)(*((_QWORD *)v525 + 1) + 20))
                                                                                            {
                                                                                              v528 = *v525;
                                                                                              v529 = (char *)v71[2535];
                                                                                              v530 = v71[2536];
                                                                                              if ((unint64_t)v529 < v530)
                                                                                              {
                                                                                                *(_DWORD *)v529 = v528;
                                                                                                v527 = v529 + 4;
                                                                                                v71 = v2031;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v531 = (char *)*v1980;
                                                                                                v532 = v529 - (_BYTE *)*v1980;
                                                                                                v533 = v532 >> 2;
                                                                                                v534 = (v532 >> 2) + 1;
                                                                                                if (v534 >> 62)
                                                                                                  goto LABEL_2460;
                                                                                                v535 = v530 - (_QWORD)v531;
                                                                                                if (v535 >> 1 > v534)
                                                                                                  v534 = v535 >> 1;
                                                                                                if ((unint64_t)v535 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                                                  v536 = 0x3FFFFFFFFFFFFFFFLL;
                                                                                                else
                                                                                                  v536 = v534;
                                                                                                if (v536)
                                                                                                {
                                                                                                  if (v536 >> 62)
                                                                                                    goto LABEL_2444;
                                                                                                  v537 = operator new(4 * v536);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v537 = 0;
                                                                                                }
                                                                                                v538 = &v537[4 * v533];
                                                                                                *v538 = v528;
                                                                                                v527 = v538 + 1;
                                                                                                if (v529 != v531)
                                                                                                {
                                                                                                  v539 = v529 - v531 - 4;
                                                                                                  if (v539 < 0x2C)
                                                                                                    goto LABEL_2480;
                                                                                                  if ((unint64_t)(v529 - v537 - v532) < 0x20)
                                                                                                    goto LABEL_2480;
                                                                                                  v540 = (v539 >> 2) + 1;
                                                                                                  v541 = 4 * (v540 & 0x7FFFFFFFFFFFFFF8);
                                                                                                  v542 = &v529[-v541];
                                                                                                  v538 = (_DWORD *)((char *)v538 - v541);
                                                                                                  v543 = &v537[4 * v533 - 16];
                                                                                                  v544 = v529 - 16;
                                                                                                  v545 = v540 & 0x7FFFFFFFFFFFFFF8;
                                                                                                  do
                                                                                                  {
                                                                                                    v546 = *(_OWORD *)v544;
                                                                                                    *(v543 - 1) = *((_OWORD *)v544 - 1);
                                                                                                    *v543 = v546;
                                                                                                    v543 -= 2;
                                                                                                    v544 -= 32;
                                                                                                    v545 -= 8;
                                                                                                  }
                                                                                                  while (v545);
                                                                                                  v529 = v542;
                                                                                                  if (v540 != (v540 & 0x7FFFFFFFFFFFFFF8))
                                                                                                  {
LABEL_2480:
                                                                                                    do
                                                                                                    {
                                                                                                      v547 = *((_DWORD *)v529 - 1);
                                                                                                      v529 -= 4;
                                                                                                      *--v538 = v547;
                                                                                                    }
                                                                                                    while (v529 != v531);
                                                                                                  }
                                                                                                }
                                                                                                v71 = v2031;
                                                                                                v2031[2534] = v538;
                                                                                                v2031[2535] = v527;
                                                                                                v2031[2536] = &v537[4 * v536];
                                                                                                if (v531)
                                                                                                  operator delete(v531);
                                                                                              }
                                                                                              v71[2535] = v527;
                                                                                            }
                                                                                          }
                                                                                          if (*(_BYTE *)(v2022 + 1616))
                                                                                          {
                                                                                            v549 = (void *)v71[2537];
                                                                                            v71[2538] = v549;
                                                                                            v550 = ((*(_QWORD *)(v2022 + 688) - *(_QWORD *)(v2022 + 680)) >> 4);
                                                                                            if (v550 > (uint64_t)(v71[2539] - (_QWORD)v549) >> 2)
                                                                                            {
                                                                                              v551 = (char *)operator new(4 * v550);
                                                                                              v71 = v2031;
                                                                                              v2031[2537] = v551;
                                                                                              v2031[2538] = v551;
                                                                                              v2031[2539] = &v551[4 * v550];
                                                                                              if (v549)
                                                                                                operator delete(v549);
                                                                                            }
                                                                                            v552 = *(int **)(v2022 + 680);
                                                                                            for (n = *(int **)(v2022 + 688);
                                                                                                  v552 != n;
                                                                                                  v552 += 4)
                                                                                            {
                                                                                              if (*(_BYTE *)(*((_QWORD *)v552 + 1) + 20))
                                                                                              {
                                                                                                v555 = *v552;
                                                                                                v556 = (char *)v71[2538];
                                                                                                v557 = v71[2539];
                                                                                                if ((unint64_t)v556 < v557)
                                                                                                {
                                                                                                  *(_DWORD *)v556 = v555;
                                                                                                  v554 = v556 + 4;
                                                                                                  v71 = v2031;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v558 = (char *)*v1977;
                                                                                                  v559 = v556 - (_BYTE *)*v1977;
                                                                                                  v560 = v559 >> 2;
                                                                                                  v561 = (v559 >> 2) + 1;
                                                                                                  if (v561 >> 62)
                                                                                                    goto LABEL_2460;
                                                                                                  v562 = v557 - (_QWORD)v558;
                                                                                                  if (v562 >> 1 > v561)
                                                                                                    v561 = v562 >> 1;
                                                                                                  if ((unint64_t)v562 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                                                    v563 = 0x3FFFFFFFFFFFFFFFLL;
                                                                                                  else
                                                                                                    v563 = v561;
                                                                                                  if (v563)
                                                                                                  {
                                                                                                    if (v563 >> 62)
                                                                                                      goto LABEL_2444;
                                                                                                    v564 = operator new(4 * v563);
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v564 = 0;
                                                                                                  }
                                                                                                  v565 = &v564[4 * v560];
                                                                                                  *v565 = v555;
                                                                                                  v554 = v565 + 1;
                                                                                                  if (v556 != v558)
                                                                                                  {
                                                                                                    v566 = v556 - v558 - 4;
                                                                                                    if (v566 < 0x2C)
                                                                                                      goto LABEL_2481;
                                                                                                    if ((unint64_t)(v556 - v564 - v559) < 0x20)
                                                                                                      goto LABEL_2481;
                                                                                                    v567 = (v566 >> 2) + 1;
                                                                                                    v568 = 4 * (v567 & 0x7FFFFFFFFFFFFFF8);
                                                                                                    v569 = &v556[-v568];
                                                                                                    v565 = (_DWORD *)((char *)v565 - v568);
                                                                                                    v570 = &v564[4 * v560 - 16];
                                                                                                    v571 = v556 - 16;
                                                                                                    v572 = v567 & 0x7FFFFFFFFFFFFFF8;
                                                                                                    do
                                                                                                    {
                                                                                                      v573 = *(_OWORD *)v571;
                                                                                                      *(v570 - 1) = *((_OWORD *)v571 - 1);
                                                                                                      *v570 = v573;
                                                                                                      v570 -= 2;
                                                                                                      v571 -= 32;
                                                                                                      v572 -= 8;
                                                                                                    }
                                                                                                    while (v572);
                                                                                                    v556 = v569;
                                                                                                    if (v567 != (v567 & 0x7FFFFFFFFFFFFFF8))
                                                                                                    {
LABEL_2481:
                                                                                                      do
                                                                                                      {
                                                                                                        v574 = *((_DWORD *)v556 - 1);
                                                                                                        v556 -= 4;
                                                                                                        *--v565 = v574;
                                                                                                      }
                                                                                                      while (v556 != v558);
                                                                                                    }
                                                                                                  }
                                                                                                  v71 = v2031;
                                                                                                  v2031[2537] = v565;
                                                                                                  v2031[2538] = v554;
                                                                                                  v2031[2539] = &v564[4 * v563];
                                                                                                  if (v558)
                                                                                                    operator delete(v558);
                                                                                                }
                                                                                                v71[2538] = v554;
                                                                                              }
                                                                                            }
                                                                                            if (*(_BYTE *)(v2022 + 1616))
                                                                                            {
                                                                                              v591 = (void *)v71[2540];
                                                                                              v71[2541] = v591;
                                                                                              v592 = ((*(_QWORD *)(v2022 + 784) - *(_QWORD *)(v2022 + 776)) >> 4);
                                                                                              if (v592 > (uint64_t)(v71[2542] - (_QWORD)v591) >> 2)
                                                                                              {
                                                                                                v593 = (char *)operator new(4 * v592);
                                                                                                v71 = v2031;
                                                                                                v2031[2540] = v593;
                                                                                                v2031[2541] = v593;
                                                                                                v2031[2542] = &v593[4 * v592];
                                                                                                if (v591)
                                                                                                  operator delete(v591);
                                                                                              }
                                                                                              v594 = *(int **)(v2022 + 776);
                                                                                              for (ii = *(int **)(v2022 + 784);
                                                                                                    v594 != ii;
                                                                                                    v594 += 4)
                                                                                              {
                                                                                                if (*(_BYTE *)(*((_QWORD *)v594 + 1) + 20))
                                                                                                {
                                                                                                  v597 = *v594;
                                                                                                  v598 = (char *)v71[2541];
                                                                                                  v599 = v71[2542];
                                                                                                  if ((unint64_t)v598 < v599)
                                                                                                  {
                                                                                                    *(_DWORD *)v598 = v597;
                                                                                                    v596 = v598 + 4;
                                                                                                    v71 = v2031;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v600 = (char *)*v1976;
                                                                                                    v601 = v598 - (_BYTE *)*v1976;
                                                                                                    v602 = v601 >> 2;
                                                                                                    v603 = (v601 >> 2) + 1;
                                                                                                    if (v603 >> 62)
                                                                                                      goto LABEL_2460;
                                                                                                    v604 = v599 - (_QWORD)v600;
                                                                                                    if (v604 >> 1 > v603)
                                                                                                      v603 = v604 >> 1;
                                                                                                    if ((unint64_t)v604 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                                                      v605 = 0x3FFFFFFFFFFFFFFFLL;
                                                                                                    else
                                                                                                      v605 = v603;
                                                                                                    if (v605)
                                                                                                    {
                                                                                                      if (v605 >> 62)
                                                                                                        goto LABEL_2444;
                                                                                                      v606 = operator new(4 * v605);
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v606 = 0;
                                                                                                    }
                                                                                                    v607 = &v606[4 * v602];
                                                                                                    *v607 = v597;
                                                                                                    v596 = v607 + 1;
                                                                                                    if (v598 != v600)
                                                                                                    {
                                                                                                      v608 = v598 - v600 - 4;
                                                                                                      if (v608 < 0x2C)
                                                                                                        goto LABEL_2482;
                                                                                                      if ((unint64_t)(v598 - v606 - v601) < 0x20)
                                                                                                        goto LABEL_2482;
                                                                                                      v609 = (v608 >> 2) + 1;
                                                                                                      v610 = 4 * (v609 & 0x7FFFFFFFFFFFFFF8);
                                                                                                      v611 = &v598[-v610];
                                                                                                      v607 = (_DWORD *)((char *)v607 - v610);
                                                                                                      v612 = &v606[4 * v602 - 16];
                                                                                                      v613 = v598 - 16;
                                                                                                      v614 = v609 & 0x7FFFFFFFFFFFFFF8;
                                                                                                      do
                                                                                                      {
                                                                                                        v615 = *(_OWORD *)v613;
                                                                                                        *(v612 - 1) = *((_OWORD *)v613 - 1);
                                                                                                        *v612 = v615;
                                                                                                        v612 -= 2;
                                                                                                        v613 -= 32;
                                                                                                        v614 -= 8;
                                                                                                      }
                                                                                                      while (v614);
                                                                                                      v598 = v611;
                                                                                                      if (v609 != (v609 & 0x7FFFFFFFFFFFFFF8))
                                                                                                      {
LABEL_2482:
                                                                                                        do
                                                                                                        {
                                                                                                          v616 = *((_DWORD *)v598 - 1);
                                                                                                          v598 -= 4;
                                                                                                          *--v607 = v616;
                                                                                                        }
                                                                                                        while (v598 != v600);
                                                                                                      }
                                                                                                    }
                                                                                                    v71 = v2031;
                                                                                                    v2031[2540] = v607;
                                                                                                    v2031[2541] = v596;
                                                                                                    v2031[2542] = &v606[4 * v605];
                                                                                                    if (v600)
                                                                                                      operator delete(v600);
                                                                                                  }
                                                                                                  v71[2541] = v596;
                                                                                                }
                                                                                              }
                                                                                              if (*(_BYTE *)(v2022 + 1616))
                                                                                              {
                                                                                                v617 = (void *)v71[2543];
                                                                                                v71[2544] = v617;
                                                                                                v618 = ((*(_QWORD *)(v2022 + 880) - *(_QWORD *)(v2022 + 872)) >> 4);
                                                                                                if (v618 > (uint64_t)(v71[2545] - (_QWORD)v617) >> 2)
                                                                                                {
                                                                                                  v619 = (char *)operator new(4 * v618);
                                                                                                  v71 = v2031;
                                                                                                  v2031[2543] = v619;
                                                                                                  v2031[2544] = v619;
                                                                                                  v2031[2545] = &v619[4 * v618];
                                                                                                  if (v617)
                                                                                                    operator delete(v617);
                                                                                                }
                                                                                                v620 = *(int **)(v2022 + 872);
                                                                                                for (jj = *(int **)(v2022 + 880);
                                                                                                      v620 != jj;
                                                                                                      v620 += 4)
                                                                                                {
                                                                                                  if (*(_BYTE *)(*((_QWORD *)v620 + 1) + 20))
                                                                                                  {
                                                                                                    v623 = *v620;
                                                                                                    v624 = (char *)v71[2544];
                                                                                                    v625 = v71[2545];
                                                                                                    if ((unint64_t)v624 < v625)
                                                                                                    {
                                                                                                      *(_DWORD *)v624 = v623;
                                                                                                      v622 = v624 + 4;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v626 = (char *)*v1975;
                                                                                                      v627 = v624 - (_BYTE *)*v1975;
                                                                                                      v628 = v627 >> 2;
                                                                                                      v629 = (v627 >> 2) + 1;
                                                                                                      if (v629 >> 62)
                                                                                                        goto LABEL_2460;
                                                                                                      v630 = v625 - (_QWORD)v626;
                                                                                                      if (v630 >> 1 > v629)
                                                                                                        v629 = v630 >> 1;
                                                                                                      if ((unint64_t)v630 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                                                        v631 = 0x3FFFFFFFFFFFFFFFLL;
                                                                                                      else
                                                                                                        v631 = v629;
                                                                                                      if (v631)
                                                                                                      {
                                                                                                        if (v631 >> 62)
                                                                                                          goto LABEL_2444;
                                                                                                        v632 = operator new(4 * v631);
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        v632 = 0;
                                                                                                      }
                                                                                                      v633 = &v632[4 * v628];
                                                                                                      *v633 = v623;
                                                                                                      v622 = v633 + 1;
                                                                                                      if (v624 != v626)
                                                                                                      {
                                                                                                        v634 = v624 - v626 - 4;
                                                                                                        if (v634 < 0x2C)
                                                                                                          goto LABEL_2483;
                                                                                                        if ((unint64_t)(v624 - v632 - v627) < 0x20)
                                                                                                          goto LABEL_2483;
                                                                                                        v635 = (v634 >> 2) + 1;
                                                                                                        v636 = 4 * (v635 & 0x7FFFFFFFFFFFFFF8);
                                                                                                        v637 = &v624[-v636];
                                                                                                        v633 = (_DWORD *)((char *)v633 - v636);
                                                                                                        v638 = &v632[4 * v628 - 16];
                                                                                                        v639 = v624 - 16;
                                                                                                        v640 = v635 & 0x7FFFFFFFFFFFFFF8;
                                                                                                        do
                                                                                                        {
                                                                                                          v641 = *(_OWORD *)v639;
                                                                                                          *(v638 - 1) = *((_OWORD *)v639 - 1);
                                                                                                          *v638 = v641;
                                                                                                          v638 -= 2;
                                                                                                          v639 -= 32;
                                                                                                          v640 -= 8;
                                                                                                        }
                                                                                                        while (v640);
                                                                                                        v624 = v637;
                                                                                                        if (v635 != (v635 & 0x7FFFFFFFFFFFFFF8))
                                                                                                        {
LABEL_2483:
                                                                                                          do
                                                                                                          {
                                                                                                            v642 = *((_DWORD *)v624 - 1);
                                                                                                            v624 -= 4;
                                                                                                            *--v633 = v642;
                                                                                                          }
                                                                                                          while (v624 != v626);
                                                                                                        }
                                                                                                      }
                                                                                                      v71 = v2031;
                                                                                                      v2031[2543] = v633;
                                                                                                      v2031[2544] = v622;
                                                                                                      v2031[2545] = &v632[4 * v631];
                                                                                                      if (v626)
                                                                                                        operator delete(v626);
                                                                                                    }
                                                                                                    v71[2544] = v622;
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
LABEL_718:
                                                                            sub_20FA44434((_QWORD *)v71[2326], v2026);
                                                                            if (v2016 == 1)
                                                                            {
                                                                              v643 = v2031[2327];
                                                                              v644 = v2031[2326];
                                                                              v645 = *(_OWORD *)(v644 + 40);
                                                                              v646 = *(_QWORD *)(v644 + 56);
                                                                              *(_OWORD *)(v643 + 24) = *(_OWORD *)(v644 + 24);
                                                                              *(_QWORD *)(v643 + 56) = v646;
                                                                              *(_OWORD *)(v643 + 40) = v645;
                                                                              LODWORD(v646) = *(_DWORD *)(v643 + 28);
                                                                              LODWORD(v644) = 6 * *(_DWORD *)(v643 + 24);
                                                                              *(_DWORD *)(v643 + 64) = 0;
                                                                              *(_DWORD *)(v643 + 68) = v644;
                                                                              LODWORD(v644) = 9 * v646 + v644;
                                                                              v647 = *(_DWORD *)(v643 + 36);
                                                                              v648 = v644 + 6 * *(_DWORD *)(v643 + 32);
                                                                              *(_DWORD *)(v643 + 72) = v644;
                                                                              *(_DWORD *)(v643 + 76) = v648;
                                                                              LODWORD(v644) = v648 + 6 * v647;
                                                                              v649 = *(_DWORD *)(v643 + 44);
                                                                              LODWORD(v646) = 3 * *(_DWORD *)(v643 + 40)
                                                                                            + v644;
                                                                              *(_DWORD *)(v643 + 80) = v644;
                                                                              *(_DWORD *)(v643 + 84) = v646;
                                                                              LODWORD(v644) = v649 + v646;
                                                                              v650 = *(_DWORD *)(v643 + 52);
                                                                              LODWORD(v646) = 3 * *(_DWORD *)(v643 + 48)
                                                                                            + v644;
                                                                              *(_DWORD *)(v643 + 88) = v644;
                                                                              *(_DWORD *)(v643 + 92) = v646;
                                                                              v651 = *(_DWORD *)(v643 + 60);
                                                                              LODWORD(v644) = v646
                                                                                            + 4
                                                                                            * (*(_DWORD *)(v643 + 56)
                                                                                             + v650);
                                                                              *(_DWORD *)(v643 + 96) = v646 + 4 * v650;
                                                                              *(_DWORD *)(v643 + 100) = v644;
                                                                              sub_20F20CEEC((_DWORD *)v643, 3 * v651 + v644, 1u);
                                                                            }
                                                                            v652 = (_DWORD *)v2031[2443];
                                                                            v2031[2444] = v652;
                                                                            *((_OWORD *)v2031 + 1223) = 0u;
                                                                            *((_OWORD *)v2031 + 1224) = 0u;
                                                                            *((_OWORD *)v2031 + 1225) = 0u;
                                                                            *((_OWORD *)v2031 + 1226) = 0u;
                                                                            *((_OWORD *)v2031 + 1227) = 0u;
                                                                            v653 = (int *)v2031[2516];
                                                                            v654 = (int *)v2031[2517];
                                                                            if (v653 != v654)
                                                                            {
                                                                              v655 = v2031;
                                                                              while (1)
                                                                              {
                                                                                v657 = *v653;
                                                                                v658 = v655[2445];
                                                                                if ((unint64_t)v652 < v658)
                                                                                {
                                                                                  *v652 = 0;
                                                                                  v652[1] = v657;
                                                                                  v656 = v652 + 3;
                                                                                  v652[2] = 6;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v659 = (_DWORD *)v655[2443];
                                                                                  v660 = 0xAAAAAAAAAAAAAAABLL
                                                                                       * (v652 - v659)
                                                                                       + 1;
                                                                                  if (v660 > 0x1555555555555555)
LABEL_2443:
                                                                                    sub_20E867F44();
                                                                                  v661 = 0xAAAAAAAAAAAAAAABLL
                                                                                       * ((uint64_t)(v658 - (_QWORD)v659) >> 2);
                                                                                  if (2 * v661 > v660)
                                                                                    v660 = 2 * v661;
                                                                                  if (v661 >= 0xAAAAAAAAAAAAAAALL)
                                                                                    v662 = 0x1555555555555555;
                                                                                  else
                                                                                    v662 = v660;
                                                                                  if (v662)
                                                                                  {
                                                                                    if (v662 > 0x1555555555555555)
                                                                                      goto LABEL_2444;
                                                                                    v663 = (char *)operator new(12 * v662);
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v663 = 0;
                                                                                  }
                                                                                  v664 = &v663[4 * (v652 - v659)];
                                                                                  *(_DWORD *)v664 = 0;
                                                                                  *((_DWORD *)v664 + 1) = v657;
                                                                                  *((_DWORD *)v664 + 2) = 6;
                                                                                  v665 = v664;
                                                                                  if (v652 != v659)
                                                                                  {
                                                                                    do
                                                                                    {
                                                                                      v666 = *(_QWORD *)(v652 - 3);
                                                                                      v652 -= 3;
                                                                                      v667 = v652[2];
                                                                                      *(_QWORD *)(v665 - 12) = v666;
                                                                                      v665 -= 12;
                                                                                      *((_DWORD *)v665 + 2) = v667;
                                                                                    }
                                                                                    while (v652 != v659);
                                                                                    v652 = (_DWORD *)v2031[2443];
                                                                                    v668 = &v663[12 * v662];
                                                                                    v2031[2443] = v665;
                                                                                    v656 = v664 + 12;
                                                                                    v2031[2444] = v664 + 12;
                                                                                    v2031[2445] = v668;
                                                                                    if (!v652)
                                                                                      goto LABEL_723;
LABEL_740:
                                                                                    operator delete(v652);
                                                                                    goto LABEL_723;
                                                                                  }
                                                                                  v669 = &v663[12 * v662];
                                                                                  v2031[2443] = v664;
                                                                                  v656 = v664 + 12;
                                                                                  v2031[2444] = v664 + 12;
                                                                                  v2031[2445] = v669;
                                                                                  if (v652)
                                                                                    goto LABEL_740;
                                                                                }
LABEL_723:
                                                                                v655 = v2031;
                                                                                v2031[2444] = v656;
                                                                                ++v653;
                                                                                v652 = v656;
                                                                                if (v653 == v654)
                                                                                  goto LABEL_742;
                                                                              }
                                                                            }
                                                                            v656 = v652;
                                                                            v655 = v2031;
LABEL_742:
                                                                            v670 = (int *)v655[2519];
                                                                            v671 = (int *)v655[2520];
                                                                            v672 = v655;
                                                                            if (v670 != v671)
                                                                            {
                                                                              while (2)
                                                                              {
                                                                                v674 = *v670;
                                                                                v675 = v672[2445];
                                                                                if ((unint64_t)v656 < v675)
                                                                                {
                                                                                  *v656 = 1;
                                                                                  v656[1] = v674;
                                                                                  v673 = v656 + 3;
                                                                                  v656[2] = 9;
                                                                                  goto LABEL_745;
                                                                                }
                                                                                v676 = (_DWORD *)v672[2443];
                                                                                v677 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * (v656 - v676)
                                                                                     + 1;
                                                                                if (v677 > 0x1555555555555555)
                                                                                  goto LABEL_2443;
                                                                                v678 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * ((uint64_t)(v675 - (_QWORD)v676) >> 2);
                                                                                if (2 * v678 > v677)
                                                                                  v677 = 2 * v678;
                                                                                if (v678 >= 0xAAAAAAAAAAAAAAALL)
                                                                                  v679 = 0x1555555555555555;
                                                                                else
                                                                                  v679 = v677;
                                                                                if (v679)
                                                                                {
                                                                                  if (v679 > 0x1555555555555555)
                                                                                    goto LABEL_2444;
                                                                                  v680 = (char *)operator new(12 * v679);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v680 = 0;
                                                                                }
                                                                                v681 = &v680[4 * (v656 - v676)];
                                                                                *(_DWORD *)v681 = 1;
                                                                                *((_DWORD *)v681 + 1) = v674;
                                                                                *((_DWORD *)v681 + 2) = 9;
                                                                                v682 = v681;
                                                                                if (v656 == v676)
                                                                                {
                                                                                  v672 = v2031;
                                                                                  v686 = &v680[12 * v679];
                                                                                  v2031[2443] = v681;
                                                                                  v673 = (unsigned int *)(v681 + 12);
                                                                                  v2031[2444] = v681 + 12;
                                                                                  v2031[2445] = v686;
                                                                                  if (!v656)
                                                                                    goto LABEL_745;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v672 = v2031;
                                                                                  do
                                                                                  {
                                                                                    v683 = *(_QWORD *)(v656 - 3);
                                                                                    v656 -= 3;
                                                                                    v684 = v656[2];
                                                                                    *(_QWORD *)(v682 - 12) = v683;
                                                                                    v682 -= 12;
                                                                                    *((_DWORD *)v682 + 2) = v684;
                                                                                  }
                                                                                  while (v656 != v676);
                                                                                  v656 = (_DWORD *)v2031[2443];
                                                                                  v685 = &v680[12 * v679];
                                                                                  v2031[2443] = v682;
                                                                                  v673 = (unsigned int *)(v681 + 12);
                                                                                  v2031[2444] = v681 + 12;
                                                                                  v2031[2445] = v685;
                                                                                  if (!v656)
                                                                                  {
LABEL_745:
                                                                                    v672[2444] = v673;
                                                                                    ++v670;
                                                                                    v656 = v673;
                                                                                    if (v670 == v671)
                                                                                      goto LABEL_765;
                                                                                    continue;
                                                                                  }
                                                                                }
                                                                                break;
                                                                              }
                                                                              operator delete(v656);
                                                                              goto LABEL_745;
                                                                            }
                                                                            v673 = v656;
LABEL_765:
                                                                            v687 = (int *)v672[2522];
                                                                            v688 = (int *)v672[2523];
                                                                            if (v687 != v688)
                                                                            {
                                                                              while (2)
                                                                              {
                                                                                v690 = *v687;
                                                                                v691 = v672[2445];
                                                                                if ((unint64_t)v673 < v691)
                                                                                {
                                                                                  *v673 = 2;
                                                                                  v673[1] = v690;
                                                                                  v689 = v673 + 3;
                                                                                  v673[2] = 6;
                                                                                  goto LABEL_768;
                                                                                }
                                                                                v692 = (_DWORD *)v672[2443];
                                                                                v693 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * (v673 - v692)
                                                                                     + 1;
                                                                                if (v693 > 0x1555555555555555)
                                                                                  goto LABEL_2443;
                                                                                v694 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * ((uint64_t)(v691 - (_QWORD)v692) >> 2);
                                                                                if (2 * v694 > v693)
                                                                                  v693 = 2 * v694;
                                                                                if (v694 >= 0xAAAAAAAAAAAAAAALL)
                                                                                  v695 = 0x1555555555555555;
                                                                                else
                                                                                  v695 = v693;
                                                                                if (v695)
                                                                                {
                                                                                  if (v695 > 0x1555555555555555)
                                                                                    goto LABEL_2444;
                                                                                  v696 = (char *)operator new(12 * v695);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v696 = 0;
                                                                                }
                                                                                v697 = &v696[4 * (v673 - v692)];
                                                                                *(_DWORD *)v697 = 2;
                                                                                *((_DWORD *)v697 + 1) = v690;
                                                                                *((_DWORD *)v697 + 2) = 6;
                                                                                v698 = v697;
                                                                                if (v673 == v692)
                                                                                {
                                                                                  v672 = v2031;
                                                                                  v702 = &v696[12 * v695];
                                                                                  v2031[2443] = v697;
                                                                                  v689 = (unsigned int *)(v697 + 12);
                                                                                  v2031[2444] = v697 + 12;
                                                                                  v2031[2445] = v702;
                                                                                  if (!v673)
                                                                                    goto LABEL_768;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v672 = v2031;
                                                                                  do
                                                                                  {
                                                                                    v699 = *(_QWORD *)(v673 - 3);
                                                                                    v673 -= 3;
                                                                                    v700 = v673[2];
                                                                                    *(_QWORD *)(v698 - 12) = v699;
                                                                                    v698 -= 12;
                                                                                    *((_DWORD *)v698 + 2) = v700;
                                                                                  }
                                                                                  while (v673 != v692);
                                                                                  v673 = (unsigned int *)v2031[2443];
                                                                                  v701 = &v696[12 * v695];
                                                                                  v2031[2443] = v698;
                                                                                  v689 = (unsigned int *)(v697 + 12);
                                                                                  v2031[2444] = v697 + 12;
                                                                                  v2031[2445] = v701;
                                                                                  if (!v673)
                                                                                  {
LABEL_768:
                                                                                    v672[2444] = v689;
                                                                                    ++v687;
                                                                                    v673 = v689;
                                                                                    if (v687 == v688)
                                                                                      goto LABEL_788;
                                                                                    continue;
                                                                                  }
                                                                                }
                                                                                break;
                                                                              }
                                                                              operator delete(v673);
                                                                              goto LABEL_768;
                                                                            }
                                                                            v689 = v673;
LABEL_788:
                                                                            v703 = (int *)v672[2525];
                                                                            v704 = (int *)v672[2526];
                                                                            if (v703 != v704)
                                                                            {
                                                                              while (2)
                                                                              {
                                                                                v706 = *v703;
                                                                                v707 = v672[2445];
                                                                                if ((unint64_t)v689 < v707)
                                                                                {
                                                                                  *v689 = 3;
                                                                                  v689[1] = v706;
                                                                                  v705 = v689 + 3;
                                                                                  v689[2] = 6;
                                                                                  goto LABEL_791;
                                                                                }
                                                                                v708 = (_DWORD *)v672[2443];
                                                                                v709 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * (v689 - v708)
                                                                                     + 1;
                                                                                if (v709 > 0x1555555555555555)
                                                                                  goto LABEL_2443;
                                                                                v710 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * ((uint64_t)(v707 - (_QWORD)v708) >> 2);
                                                                                if (2 * v710 > v709)
                                                                                  v709 = 2 * v710;
                                                                                if (v710 >= 0xAAAAAAAAAAAAAAALL)
                                                                                  v711 = 0x1555555555555555;
                                                                                else
                                                                                  v711 = v709;
                                                                                if (v711)
                                                                                {
                                                                                  if (v711 > 0x1555555555555555)
                                                                                    goto LABEL_2444;
                                                                                  v712 = (char *)operator new(12 * v711);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v712 = 0;
                                                                                }
                                                                                v713 = &v712[4 * (v689 - v708)];
                                                                                *(_DWORD *)v713 = 3;
                                                                                *((_DWORD *)v713 + 1) = v706;
                                                                                *((_DWORD *)v713 + 2) = 6;
                                                                                v714 = v713;
                                                                                if (v689 == v708)
                                                                                {
                                                                                  v672 = v2031;
                                                                                  v718 = &v712[12 * v711];
                                                                                  v2031[2443] = v713;
                                                                                  v705 = (unsigned int *)(v713 + 12);
                                                                                  v2031[2444] = v713 + 12;
                                                                                  v2031[2445] = v718;
                                                                                  if (!v689)
                                                                                    goto LABEL_791;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v672 = v2031;
                                                                                  do
                                                                                  {
                                                                                    v715 = *(_QWORD *)(v689 - 3);
                                                                                    v689 -= 3;
                                                                                    v716 = v689[2];
                                                                                    *(_QWORD *)(v714 - 12) = v715;
                                                                                    v714 -= 12;
                                                                                    *((_DWORD *)v714 + 2) = v716;
                                                                                  }
                                                                                  while (v689 != v708);
                                                                                  v689 = (unsigned int *)v2031[2443];
                                                                                  v717 = &v712[12 * v711];
                                                                                  v2031[2443] = v714;
                                                                                  v705 = (unsigned int *)(v713 + 12);
                                                                                  v2031[2444] = v713 + 12;
                                                                                  v2031[2445] = v717;
                                                                                  if (!v689)
                                                                                  {
LABEL_791:
                                                                                    v672[2444] = v705;
                                                                                    ++v703;
                                                                                    v689 = v705;
                                                                                    if (v703 == v704)
                                                                                      goto LABEL_811;
                                                                                    continue;
                                                                                  }
                                                                                }
                                                                                break;
                                                                              }
                                                                              operator delete(v689);
                                                                              goto LABEL_791;
                                                                            }
                                                                            v705 = v689;
LABEL_811:
                                                                            v719 = (int *)v672[2528];
                                                                            v720 = (int *)v672[2529];
                                                                            if (v719 != v720)
                                                                            {
                                                                              while (2)
                                                                              {
                                                                                v722 = *v719;
                                                                                v723 = v672[2445];
                                                                                if ((unint64_t)v705 < v723)
                                                                                {
                                                                                  *v705 = 4;
                                                                                  v705[1] = v722;
                                                                                  v721 = v705 + 3;
                                                                                  v705[2] = 3;
                                                                                  goto LABEL_814;
                                                                                }
                                                                                v724 = (_DWORD *)v672[2443];
                                                                                v725 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * (v705 - v724)
                                                                                     + 1;
                                                                                if (v725 > 0x1555555555555555)
                                                                                  goto LABEL_2443;
                                                                                v726 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * ((uint64_t)(v723 - (_QWORD)v724) >> 2);
                                                                                if (2 * v726 > v725)
                                                                                  v725 = 2 * v726;
                                                                                if (v726 >= 0xAAAAAAAAAAAAAAALL)
                                                                                  v727 = 0x1555555555555555;
                                                                                else
                                                                                  v727 = v725;
                                                                                if (v727)
                                                                                {
                                                                                  if (v727 > 0x1555555555555555)
                                                                                    goto LABEL_2444;
                                                                                  v728 = (char *)operator new(12 * v727);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v728 = 0;
                                                                                }
                                                                                v729 = &v728[4 * (v705 - v724)];
                                                                                *(_DWORD *)v729 = 4;
                                                                                *((_DWORD *)v729 + 1) = v722;
                                                                                *((_DWORD *)v729 + 2) = 3;
                                                                                v730 = v729;
                                                                                if (v705 == v724)
                                                                                {
                                                                                  v672 = v2031;
                                                                                  v734 = &v728[12 * v727];
                                                                                  v2031[2443] = v729;
                                                                                  v721 = (unsigned int *)(v729 + 12);
                                                                                  v2031[2444] = v729 + 12;
                                                                                  v2031[2445] = v734;
                                                                                  if (!v705)
                                                                                    goto LABEL_814;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v672 = v2031;
                                                                                  do
                                                                                  {
                                                                                    v731 = *(_QWORD *)(v705 - 3);
                                                                                    v705 -= 3;
                                                                                    v732 = v705[2];
                                                                                    *(_QWORD *)(v730 - 12) = v731;
                                                                                    v730 -= 12;
                                                                                    *((_DWORD *)v730 + 2) = v732;
                                                                                  }
                                                                                  while (v705 != v724);
                                                                                  v705 = (unsigned int *)v2031[2443];
                                                                                  v733 = &v728[12 * v727];
                                                                                  v2031[2443] = v730;
                                                                                  v721 = (unsigned int *)(v729 + 12);
                                                                                  v2031[2444] = v729 + 12;
                                                                                  v2031[2445] = v733;
                                                                                  if (!v705)
                                                                                  {
LABEL_814:
                                                                                    v672[2444] = v721;
                                                                                    ++v719;
                                                                                    v705 = v721;
                                                                                    if (v719 == v720)
                                                                                      goto LABEL_834;
                                                                                    continue;
                                                                                  }
                                                                                }
                                                                                break;
                                                                              }
                                                                              operator delete(v705);
                                                                              goto LABEL_814;
                                                                            }
                                                                            v721 = v705;
LABEL_834:
                                                                            v735 = (int *)v672[2531];
                                                                            v736 = (int *)v672[2532];
                                                                            if (v735 != v736)
                                                                            {
                                                                              while (2)
                                                                              {
                                                                                v738 = *v735;
                                                                                v739 = v672[2445];
                                                                                if ((unint64_t)v721 < v739)
                                                                                {
                                                                                  *v721 = 5;
                                                                                  v721[1] = v738;
                                                                                  v737 = v721 + 3;
                                                                                  v721[2] = 1;
                                                                                  goto LABEL_837;
                                                                                }
                                                                                v740 = (_DWORD *)v672[2443];
                                                                                v741 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * (v721 - v740)
                                                                                     + 1;
                                                                                if (v741 > 0x1555555555555555)
                                                                                  goto LABEL_2443;
                                                                                v742 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * ((uint64_t)(v739 - (_QWORD)v740) >> 2);
                                                                                if (2 * v742 > v741)
                                                                                  v741 = 2 * v742;
                                                                                if (v742 >= 0xAAAAAAAAAAAAAAALL)
                                                                                  v743 = 0x1555555555555555;
                                                                                else
                                                                                  v743 = v741;
                                                                                if (v743)
                                                                                {
                                                                                  if (v743 > 0x1555555555555555)
                                                                                    goto LABEL_2444;
                                                                                  v744 = (char *)operator new(12 * v743);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v744 = 0;
                                                                                }
                                                                                v745 = &v744[4 * (v721 - v740)];
                                                                                *(_DWORD *)v745 = 5;
                                                                                *((_DWORD *)v745 + 1) = v738;
                                                                                *((_DWORD *)v745 + 2) = 1;
                                                                                v746 = v745;
                                                                                if (v721 == v740)
                                                                                {
                                                                                  v672 = v2031;
                                                                                  v750 = &v744[12 * v743];
                                                                                  v2031[2443] = v745;
                                                                                  v737 = (unsigned int *)(v745 + 12);
                                                                                  v2031[2444] = v745 + 12;
                                                                                  v2031[2445] = v750;
                                                                                  if (!v721)
                                                                                    goto LABEL_837;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v672 = v2031;
                                                                                  do
                                                                                  {
                                                                                    v747 = *(_QWORD *)(v721 - 3);
                                                                                    v721 -= 3;
                                                                                    v748 = v721[2];
                                                                                    *(_QWORD *)(v746 - 12) = v747;
                                                                                    v746 -= 12;
                                                                                    *((_DWORD *)v746 + 2) = v748;
                                                                                  }
                                                                                  while (v721 != v740);
                                                                                  v721 = (unsigned int *)v2031[2443];
                                                                                  v749 = &v744[12 * v743];
                                                                                  v2031[2443] = v746;
                                                                                  v737 = (unsigned int *)(v745 + 12);
                                                                                  v2031[2444] = v745 + 12;
                                                                                  v2031[2445] = v749;
                                                                                  if (!v721)
                                                                                  {
LABEL_837:
                                                                                    v672[2444] = v737;
                                                                                    ++v735;
                                                                                    v721 = v737;
                                                                                    if (v735 == v736)
                                                                                      goto LABEL_857;
                                                                                    continue;
                                                                                  }
                                                                                }
                                                                                break;
                                                                              }
                                                                              operator delete(v721);
                                                                              goto LABEL_837;
                                                                            }
                                                                            v737 = v721;
LABEL_857:
                                                                            v751 = (int *)v672[2534];
                                                                            v752 = (int *)v672[2535];
                                                                            if (v751 != v752)
                                                                            {
                                                                              while (2)
                                                                              {
                                                                                v754 = *v751;
                                                                                v755 = v672[2445];
                                                                                if ((unint64_t)v737 < v755)
                                                                                {
                                                                                  *v737 = 6;
                                                                                  v737[1] = v754;
                                                                                  v753 = v737 + 3;
                                                                                  v737[2] = 3;
                                                                                  goto LABEL_860;
                                                                                }
                                                                                v756 = (_DWORD *)v672[2443];
                                                                                v757 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * (v737 - v756)
                                                                                     + 1;
                                                                                if (v757 > 0x1555555555555555)
                                                                                  goto LABEL_2443;
                                                                                v758 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * ((uint64_t)(v755 - (_QWORD)v756) >> 2);
                                                                                if (2 * v758 > v757)
                                                                                  v757 = 2 * v758;
                                                                                if (v758 >= 0xAAAAAAAAAAAAAAALL)
                                                                                  v759 = 0x1555555555555555;
                                                                                else
                                                                                  v759 = v757;
                                                                                if (v759)
                                                                                {
                                                                                  if (v759 > 0x1555555555555555)
                                                                                    goto LABEL_2444;
                                                                                  v760 = (char *)operator new(12 * v759);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v760 = 0;
                                                                                }
                                                                                v761 = &v760[4 * (v737 - v756)];
                                                                                *(_DWORD *)v761 = 6;
                                                                                *((_DWORD *)v761 + 1) = v754;
                                                                                *((_DWORD *)v761 + 2) = 3;
                                                                                v762 = v761;
                                                                                if (v737 == v756)
                                                                                {
                                                                                  v672 = v2031;
                                                                                  v766 = &v760[12 * v759];
                                                                                  v2031[2443] = v761;
                                                                                  v753 = (unsigned int *)(v761 + 12);
                                                                                  v2031[2444] = v761 + 12;
                                                                                  v2031[2445] = v766;
                                                                                  if (!v737)
                                                                                    goto LABEL_860;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v672 = v2031;
                                                                                  do
                                                                                  {
                                                                                    v763 = *(_QWORD *)(v737 - 3);
                                                                                    v737 -= 3;
                                                                                    v764 = v737[2];
                                                                                    *(_QWORD *)(v762 - 12) = v763;
                                                                                    v762 -= 12;
                                                                                    *((_DWORD *)v762 + 2) = v764;
                                                                                  }
                                                                                  while (v737 != v756);
                                                                                  v737 = (unsigned int *)v2031[2443];
                                                                                  v765 = &v760[12 * v759];
                                                                                  v2031[2443] = v762;
                                                                                  v753 = (unsigned int *)(v761 + 12);
                                                                                  v2031[2444] = v761 + 12;
                                                                                  v2031[2445] = v765;
                                                                                  if (!v737)
                                                                                  {
LABEL_860:
                                                                                    v672[2444] = v753;
                                                                                    ++v751;
                                                                                    v737 = v753;
                                                                                    if (v751 == v752)
                                                                                      goto LABEL_880;
                                                                                    continue;
                                                                                  }
                                                                                }
                                                                                break;
                                                                              }
                                                                              operator delete(v737);
                                                                              goto LABEL_860;
                                                                            }
                                                                            v753 = v737;
LABEL_880:
                                                                            v767 = (int *)v672[2537];
                                                                            v768 = (int *)v672[2538];
                                                                            if (v767 != v768)
                                                                            {
                                                                              while (2)
                                                                              {
                                                                                v770 = *v767;
                                                                                v771 = v672[2445];
                                                                                if ((unint64_t)v753 < v771)
                                                                                {
                                                                                  *v753 = 7;
                                                                                  v753[1] = v770;
                                                                                  v769 = v753 + 3;
                                                                                  v753[2] = 4;
                                                                                  goto LABEL_883;
                                                                                }
                                                                                v772 = (_DWORD *)v672[2443];
                                                                                v773 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * (v753 - v772)
                                                                                     + 1;
                                                                                if (v773 > 0x1555555555555555)
                                                                                  goto LABEL_2443;
                                                                                v774 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * ((uint64_t)(v771 - (_QWORD)v772) >> 2);
                                                                                if (2 * v774 > v773)
                                                                                  v773 = 2 * v774;
                                                                                if (v774 >= 0xAAAAAAAAAAAAAAALL)
                                                                                  v775 = 0x1555555555555555;
                                                                                else
                                                                                  v775 = v773;
                                                                                if (v775)
                                                                                {
                                                                                  if (v775 > 0x1555555555555555)
                                                                                    goto LABEL_2444;
                                                                                  v776 = (char *)operator new(12 * v775);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v776 = 0;
                                                                                }
                                                                                v777 = &v776[4 * (v753 - v772)];
                                                                                *(_DWORD *)v777 = 7;
                                                                                *((_DWORD *)v777 + 1) = v770;
                                                                                *((_DWORD *)v777 + 2) = 4;
                                                                                v778 = v777;
                                                                                if (v753 == v772)
                                                                                {
                                                                                  v672 = v2031;
                                                                                  v782 = &v776[12 * v775];
                                                                                  v2031[2443] = v777;
                                                                                  v769 = (unsigned int *)(v777 + 12);
                                                                                  v2031[2444] = v777 + 12;
                                                                                  v2031[2445] = v782;
                                                                                  if (!v753)
                                                                                    goto LABEL_883;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v672 = v2031;
                                                                                  do
                                                                                  {
                                                                                    v779 = *(_QWORD *)(v753 - 3);
                                                                                    v753 -= 3;
                                                                                    v780 = v753[2];
                                                                                    *(_QWORD *)(v778 - 12) = v779;
                                                                                    v778 -= 12;
                                                                                    *((_DWORD *)v778 + 2) = v780;
                                                                                  }
                                                                                  while (v753 != v772);
                                                                                  v753 = (unsigned int *)v2031[2443];
                                                                                  v781 = &v776[12 * v775];
                                                                                  v2031[2443] = v778;
                                                                                  v769 = (unsigned int *)(v777 + 12);
                                                                                  v2031[2444] = v777 + 12;
                                                                                  v2031[2445] = v781;
                                                                                  if (!v753)
                                                                                  {
LABEL_883:
                                                                                    v672[2444] = v769;
                                                                                    ++v767;
                                                                                    v753 = v769;
                                                                                    if (v767 == v768)
                                                                                      goto LABEL_903;
                                                                                    continue;
                                                                                  }
                                                                                }
                                                                                break;
                                                                              }
                                                                              operator delete(v753);
                                                                              goto LABEL_883;
                                                                            }
                                                                            v769 = v753;
LABEL_903:
                                                                            v783 = (unsigned int *)v672[2540];
                                                                            v784 = (unsigned int *)v672[2541];
                                                                            if (v783 != v784)
                                                                            {
                                                                              while (2)
                                                                              {
                                                                                v786 = *v783;
                                                                                v787 = v672[2445];
                                                                                if ((unint64_t)v769 < v787)
                                                                                {
                                                                                  *v769 = 8;
                                                                                  v769[1] = v786;
                                                                                  v785 = v769 + 3;
                                                                                  v769[2] = 4;
                                                                                  goto LABEL_906;
                                                                                }
                                                                                v788 = (_DWORD *)v672[2443];
                                                                                v789 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * (v769 - v788)
                                                                                     + 1;
                                                                                if (v789 > 0x1555555555555555)
                                                                                  goto LABEL_2443;
                                                                                v790 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * ((uint64_t)(v787 - (_QWORD)v788) >> 2);
                                                                                if (2 * v790 > v789)
                                                                                  v789 = 2 * v790;
                                                                                if (v790 >= 0xAAAAAAAAAAAAAAALL)
                                                                                  v791 = 0x1555555555555555;
                                                                                else
                                                                                  v791 = v789;
                                                                                if (v791)
                                                                                {
                                                                                  if (v791 > 0x1555555555555555)
                                                                                    goto LABEL_2444;
                                                                                  v792 = (char *)operator new(12 * v791);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v792 = 0;
                                                                                }
                                                                                v793 = &v792[4 * (v769 - v788)];
                                                                                *(_DWORD *)v793 = 8;
                                                                                *((_DWORD *)v793 + 1) = v786;
                                                                                *((_DWORD *)v793 + 2) = 4;
                                                                                v794 = v793;
                                                                                if (v769 == v788)
                                                                                {
                                                                                  v672 = v2031;
                                                                                  v798 = &v792[12 * v791];
                                                                                  v2031[2443] = v793;
                                                                                  v785 = (unsigned int *)(v793 + 12);
                                                                                  v2031[2444] = v793 + 12;
                                                                                  v2031[2445] = v798;
                                                                                  if (!v769)
                                                                                    goto LABEL_906;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v672 = v2031;
                                                                                  do
                                                                                  {
                                                                                    v795 = *(_QWORD *)(v769 - 3);
                                                                                    v769 -= 3;
                                                                                    v796 = v769[2];
                                                                                    *(_QWORD *)(v794 - 12) = v795;
                                                                                    v794 -= 12;
                                                                                    *((_DWORD *)v794 + 2) = v796;
                                                                                  }
                                                                                  while (v769 != v788);
                                                                                  v769 = (unsigned int *)v2031[2443];
                                                                                  v797 = &v792[12 * v791];
                                                                                  v2031[2443] = v794;
                                                                                  v785 = (unsigned int *)(v793 + 12);
                                                                                  v2031[2444] = v793 + 12;
                                                                                  v2031[2445] = v797;
                                                                                  if (!v769)
                                                                                  {
LABEL_906:
                                                                                    v672[2444] = v785;
                                                                                    ++v783;
                                                                                    v769 = v785;
                                                                                    if (v783 == v784)
                                                                                      goto LABEL_926;
                                                                                    continue;
                                                                                  }
                                                                                }
                                                                                break;
                                                                              }
                                                                              operator delete(v769);
                                                                              goto LABEL_906;
                                                                            }
                                                                            v785 = v769;
LABEL_926:
                                                                            v799 = (unsigned int *)v672[2543];
                                                                            v800 = (unsigned int *)v672[2544];
                                                                            if (v799 != v800)
                                                                            {
                                                                              while (2)
                                                                              {
                                                                                v802 = *v799;
                                                                                v803 = v672[2445];
                                                                                if ((unint64_t)v785 < v803)
                                                                                {
                                                                                  *v785 = 9;
                                                                                  v785[1] = v802;
                                                                                  v801 = v785 + 3;
                                                                                  v785[2] = 3;
                                                                                  goto LABEL_929;
                                                                                }
                                                                                v804 = (_DWORD *)v672[2443];
                                                                                v805 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * (v785 - v804)
                                                                                     + 1;
                                                                                if (v805 > 0x1555555555555555)
                                                                                  goto LABEL_2443;
                                                                                v806 = 0xAAAAAAAAAAAAAAABLL
                                                                                     * ((uint64_t)(v803 - (_QWORD)v804) >> 2);
                                                                                if (2 * v806 > v805)
                                                                                  v805 = 2 * v806;
                                                                                if (v806 >= 0xAAAAAAAAAAAAAAALL)
                                                                                  v807 = 0x1555555555555555;
                                                                                else
                                                                                  v807 = v805;
                                                                                if (v807)
                                                                                {
                                                                                  if (v807 > 0x1555555555555555)
                                                                                    goto LABEL_2444;
                                                                                  v808 = (char *)operator new(12 * v807);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v808 = 0;
                                                                                }
                                                                                v809 = &v808[4 * (v785 - v804)];
                                                                                *(_DWORD *)v809 = 9;
                                                                                *((_DWORD *)v809 + 1) = v802;
                                                                                *((_DWORD *)v809 + 2) = 3;
                                                                                v810 = v809;
                                                                                if (v785 == v804)
                                                                                {
                                                                                  v672 = v2031;
                                                                                  v814 = &v808[12 * v807];
                                                                                  v2031[2443] = v809;
                                                                                  v801 = (unsigned int *)(v809 + 12);
                                                                                  v2031[2444] = v809 + 12;
                                                                                  v2031[2445] = v814;
                                                                                  if (!v785)
                                                                                    goto LABEL_929;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v672 = v2031;
                                                                                  do
                                                                                  {
                                                                                    v811 = *(_QWORD *)(v785 - 3);
                                                                                    v785 -= 3;
                                                                                    v812 = v785[2];
                                                                                    *(_QWORD *)(v810 - 12) = v811;
                                                                                    v810 -= 12;
                                                                                    *((_DWORD *)v810 + 2) = v812;
                                                                                  }
                                                                                  while (v785 != v804);
                                                                                  v785 = (unsigned int *)v2031[2443];
                                                                                  v813 = &v808[12 * v807];
                                                                                  v2031[2443] = v810;
                                                                                  v801 = (unsigned int *)(v809 + 12);
                                                                                  v2031[2444] = v809 + 12;
                                                                                  v2031[2445] = v813;
                                                                                  if (!v785)
                                                                                  {
LABEL_929:
                                                                                    v672[2444] = v801;
                                                                                    ++v799;
                                                                                    v785 = v801;
                                                                                    if (v799 == v800)
                                                                                      goto LABEL_949;
                                                                                    continue;
                                                                                  }
                                                                                }
                                                                                break;
                                                                              }
                                                                              operator delete(v785);
                                                                              goto LABEL_929;
                                                                            }
                                                                            v801 = v785;
LABEL_949:
                                                                            v815 = v672 + 2446;
                                                                            if (v2013 == 1)
                                                                            {
                                                                              v821 = v672[2443];
                                                                              v822 = 126
                                                                                   - 2
                                                                                   * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v801 - v821) >> 2));
                                                                              if (v801 == (unsigned int *)v821)
                                                                                v823 = 0;
                                                                              else
                                                                                v823 = v822;
                                                                              sub_20FA587C4(v821, v801, v823, 1);
                                                                              v819 = (int *)v672[2443];
                                                                              v820 = (int *)v672[2444];
                                                                              if (v819 == v820)
                                                                                goto LABEL_963;
                                                                            }
                                                                            else
                                                                            {
                                                                              if (!v2013)
                                                                              {
                                                                                v816 = v672[2443];
                                                                                v817 = 126
                                                                                     - 2
                                                                                     * __clz(0xAAAAAAAAAAAAAAABLL* ((uint64_t)((uint64_t)v801 - v816) >> 2));
                                                                                if (v801 == (unsigned int *)v816)
                                                                                  v818 = 0;
                                                                                else
                                                                                  v818 = v817;
                                                                                sub_20FA570FC(v816, v801, v818, 1);
                                                                              }
                                                                              v819 = (int *)v672[2443];
                                                                              v820 = (int *)v672[2444];
                                                                              if (v819 == v820)
                                                                              {
LABEL_963:
                                                                                v827 = 0;
                                                                                v828 = v672 + 2456;
                                                                                v672[2457] = v672[2456];
                                                                                v829 = v672 + 2486;
                                                                                v672[2487] = v672[2486];
                                                                                v672[2460] = v672[2459];
                                                                                v672[2490] = v672[2489];
                                                                                v672[2463] = v672[2462];
                                                                                v672[2493] = v672[2492];
                                                                                v672[2466] = v672[2465];
                                                                                v672[2496] = v672[2495];
                                                                                v672[2469] = v672[2468];
                                                                                v672[2499] = v672[2498];
                                                                                v672[2472] = v672[2471];
                                                                                v672[2502] = v672[2501];
                                                                                v672[2475] = v672[2474];
                                                                                v672[2505] = v672[2504];
                                                                                v672[2478] = v672[2477];
                                                                                v672[2508] = v672[2507];
                                                                                v672[2481] = v672[2480];
                                                                                v672[2511] = v672[2510];
                                                                                v672[2484] = v672[2483];
                                                                                v672[2514] = v672[2513];
                                                                                while (1)
                                                                                {
                                                                                  v830 = (int32x4_t **)&v828[3 * v827];
                                                                                  v831 = v815[v827];
                                                                                  v833 = v830 + 1;
                                                                                  v832 = v830[1];
                                                                                  v834 = *v830;
                                                                                  v835 = ((char *)v832 - (char *)*v830) >> 2;
                                                                                  if (v831 <= v835)
                                                                                  {
                                                                                    if (v831 < v835)
                                                                                    {
                                                                                      v832 = (int32x4_t *)((char *)v834 + 4 * v831);
                                                                                      *v833 = v832;
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    sub_20E93DC84((uint64_t)&v828[3 * v827], v831 - v835);
                                                                                    v834 = *v830;
                                                                                    v832 = *v833;
                                                                                  }
                                                                                  if (v834 == v832)
                                                                                    goto LABEL_976;
                                                                                  v836 = (char *)v832 - (char *)v834 - 4;
                                                                                  if (v836 >= 0x1C)
                                                                                  {
                                                                                    v839 = (v836 >> 2) + 1;
                                                                                    v837 = v839 & 0x7FFFFFFFFFFFFFF8;
                                                                                    v838 = (int32x4_t *)((char *)v834 + 4 * (v839 & 0x7FFFFFFFFFFFFFF8));
                                                                                    v840 = v834 + 1;
                                                                                    v841 = v839 & 0x7FFFFFFFFFFFFFF8;
                                                                                    v842 = (int32x4_t)xmmword_210365350;
                                                                                    v843.i64[0] = 0x400000004;
                                                                                    v843.i64[1] = 0x400000004;
                                                                                    v844.i64[0] = 0x800000008;
                                                                                    v844.i64[1] = 0x800000008;
                                                                                    do
                                                                                    {
                                                                                      v840[-1] = v842;
                                                                                      *v840 = vaddq_s32(v842, v843);
                                                                                      v842 = vaddq_s32(v842, v844);
                                                                                      v840 += 2;
                                                                                      v841 -= 8;
                                                                                    }
                                                                                    while (v841);
                                                                                    if (v839 == v837)
                                                                                      goto LABEL_976;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    LODWORD(v837) = 0;
                                                                                    v838 = v834;
                                                                                  }
                                                                                  do
                                                                                  {
                                                                                    v838->i32[0] = v837;
                                                                                    v838 = (int32x4_t *)((char *)v838 + 4);
                                                                                    LODWORD(v837) = v837 + 1;
                                                                                  }
                                                                                  while (v838 != v832);
LABEL_976:
                                                                                  v845 = v815[v827];
                                                                                  v846 = &v829[3 * v827];
                                                                                  v848 = v846[1];
                                                                                  v847 = v846 + 1;
                                                                                  v849 = (_DWORD *)v829[3 * v827];
                                                                                  v850 = (v848 - (uint64_t)v849) >> 2;
                                                                                  if (v845 <= v850)
                                                                                  {
                                                                                    if (v845 < v850)
                                                                                      *v847 = &v849[v845];
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    sub_20E93DC84((uint64_t)&v829[3 * v827], v845 - v850);
                                                                                    v849 = (_DWORD *)v829[3 * v827];
                                                                                  }
                                                                                  v851 = (_DWORD *)v672[2443];
                                                                                  v852 = (_DWORD *)v672[2444];
                                                                                  while (v851 != v852)
                                                                                  {
                                                                                    if (v827 == *v851)
                                                                                      *v849++ = v851[2];
                                                                                    v851 += 3;
                                                                                  }
                                                                                  if (++v827 == 10)
                                                                                  {
                                                                                    v853 = (_QWORD *)v672[2325];
                                                                                    v2038.i64[0] = 0;
                                                                                    v854 = (void *)v672[2437];
                                                                                    v672[2438] = v854;
                                                                                    v672[2441] = v672[2440];
                                                                                    v2024 = v853;
                                                                                    v855 = ((v853[122] - v853[121]) >> 4);
                                                                                    if (0x8E38E38E38E38E39
                                                                                       * ((uint64_t)(v672[2439]
                                                                                                  - (_QWORD)v854) >> 4) < v855)
                                                                                    {
                                                                                      v856 = (char *)operator new(144 * v855);
                                                                                      v672 = v2031;
                                                                                      v2031[2437] = v856;
                                                                                      v2031[2438] = v856;
                                                                                      v2031[2439] = &v856[144 * v855];
                                                                                      if (v854)
                                                                                        operator delete(v854);
                                                                                    }
                                                                                    v2029 = (uint64_t)(v672 + 2358);
                                                                                    *(_QWORD *)&v2032 = 0;
                                                                                    v857 = v2024[121];
                                                                                    v858 = v2024[122];
                                                                                    if (v857 == v858)
                                                                                      goto LABEL_1051;
                                                                                    v859 = 0uLL;
                                                                                    while (2)
                                                                                    {
                                                                                      v863 = *(_QWORD *)(v857 + 8);
                                                                                      if (*(_DWORD *)v863 == -1)
                                                                                      {
                                                                                        if ((*(_BYTE *)(v863 + 4) & 2) == 0)
                                                                                        {
                                                                                          v862 = (int64x2_t *)&v2032;
                                                                                          v861 = 1;
                                                                                          goto LABEL_992;
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v864 = (char *)v2031[2438];
                                                                                        v865 = v2031[2439];
                                                                                        if ((unint64_t)v864 < v865)
                                                                                        {
                                                                                          *(_QWORD *)v864 = v863;
                                                                                          *((_QWORD *)v864 + 3) = -1;
                                                                                          *((_OWORD *)v864 + 2) = v859;
                                                                                          *((_OWORD *)v864 + 3) = v859;
                                                                                          *((_OWORD *)v864 + 4) = v859;
                                                                                          *((_OWORD *)v864 + 5) = v859;
                                                                                          *((_OWORD *)v864 + 6) = v859;
                                                                                          *((_OWORD *)v864 + 7) = v859;
                                                                                          v860 = v864 + 144;
                                                                                          *((_QWORD *)v864 + 16) = 0;
                                                                                          *((_QWORD *)v864 + 17) = v2029;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v866 = (char *)v2031[2437];
                                                                                          v867 = 0x8E38E38E38E38E39
                                                                                               * ((v864 - v866) >> 4)
                                                                                               + 1;
                                                                                          if (v867 > 0x1C71C71C71C71C7)
                                                                                            sub_20E867F44();
                                                                                          v868 = 0x8E38E38E38E38E39
                                                                                               * ((uint64_t)(v865 - (_QWORD)v866) >> 4);
                                                                                          if (2 * v868 > v867)
                                                                                            v867 = 2 * v868;
                                                                                          if (v868 >= 0xE38E38E38E38E3)
                                                                                            v869 = 0x1C71C71C71C71C7;
                                                                                          else
                                                                                            v869 = v867;
                                                                                          if (v869)
                                                                                          {
                                                                                            if (v869 > 0x1C71C71C71C71C7)
                                                                                              goto LABEL_2444;
                                                                                            v870 = (char *)operator new(144 * v869);
                                                                                            v859 = 0uLL;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v870 = 0;
                                                                                          }
                                                                                          v871 = &v870[16 * ((v864 - v866) >> 4)];
                                                                                          *(_QWORD *)v871 = v863;
                                                                                          *((_QWORD *)v871 + 3) = -1;
                                                                                          *((_OWORD *)v871 + 2) = v859;
                                                                                          *((_OWORD *)v871 + 3) = v859;
                                                                                          *((_OWORD *)v871 + 4) = v859;
                                                                                          *((_OWORD *)v871 + 5) = v859;
                                                                                          *((_OWORD *)v871 + 6) = v859;
                                                                                          *((_OWORD *)v871 + 7) = v859;
                                                                                          *((_QWORD *)v871 + 16) = 0;
                                                                                          *((_QWORD *)v871 + 17) = v2029;
                                                                                          if (v864 == v866)
                                                                                          {
                                                                                            v2031[2437] = v871;
                                                                                            v860 = v871 + 144;
                                                                                            v2031[2438] = v871 + 144;
                                                                                            v2031[2439] = &v870[144 * v869];
                                                                                            if (v864)
                                                                                              goto LABEL_1012;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v872 = 0;
                                                                                            do
                                                                                            {
                                                                                              v873 = &v871[v872];
                                                                                              *((_QWORD *)v873 - 18) = *(_QWORD *)&v864[v872 - 144];
                                                                                              *((_QWORD *)v873 - 17) = *(_QWORD *)&v864[v872 - 136];
                                                                                              *((_QWORD *)v873 - 16) = *(_QWORD *)&v864[v872 - 128];
                                                                                              v874 = *(_OWORD *)&v864[v872 - 120];
                                                                                              v875 = *(_OWORD *)&v864[v872 - 104];
                                                                                              v876 = *(_OWORD *)&v864[v872 - 88];
                                                                                              *(_OWORD *)(v873 - 72) = *(_OWORD *)&v864[v872 - 72];
                                                                                              *(_OWORD *)(v873 - 88) = v876;
                                                                                              *(_OWORD *)(v873 - 104) = v875;
                                                                                              *(_OWORD *)(v873 - 120) = v874;
                                                                                              v877 = *(_OWORD *)&v864[v872 - 56];
                                                                                              v878 = *(_OWORD *)&v864[v872 - 40];
                                                                                              v879 = *(_OWORD *)&v864[v872 - 24];
                                                                                              *((_QWORD *)v873 - 1) = *(_QWORD *)&v864[v872 - 8];
                                                                                              *(_OWORD *)(v873 - 24) = v879;
                                                                                              *(_OWORD *)(v873 - 40) = v878;
                                                                                              *(_OWORD *)(v873 - 56) = v877;
                                                                                              v872 -= 144;
                                                                                            }
                                                                                            while (&v864[v872] != v866);
                                                                                            v864 = (char *)v2031[2437];
                                                                                            v2031[2437] = &v871[v872];
                                                                                            v860 = v871 + 144;
                                                                                            v2031[2438] = v871 + 144;
                                                                                            v2031[2439] = &v870[144 * v869];
                                                                                            if (v864)
                                                                                            {
LABEL_1012:
                                                                                              operator delete(v864);
                                                                                              v859 = 0uLL;
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                        v2031[2438] = v860;
                                                                                        *((_QWORD *)v860 - 15) = v2038.i64[0];
                                                                                        *((_OWORD *)v860 - 7) = v859;
                                                                                        *((_OWORD *)v860 - 6) = v859;
                                                                                        *((_OWORD *)v860 - 5) = v859;
                                                                                        *((_OWORD *)v860 - 4) = v859;
                                                                                        *((_OWORD *)v860 - 3) = v859;
                                                                                        *((_OWORD *)v860 - 2) = v859;
                                                                                        *((_QWORD *)v860 - 2) = 0;
                                                                                        v861 = (11 * *(_DWORD *)(v863 + 8));
                                                                                        v862 = &v2038;
LABEL_992:
                                                                                        v862->i64[0] += v861;
                                                                                      }
                                                                                      v857 += 16;
                                                                                      if (v857 != v858)
                                                                                        continue;
                                                                                      break;
                                                                                    }
                                                                                    v880 = v2032;
                                                                                    if ((_QWORD)v2032)
                                                                                    {
                                                                                      v881 = (_BYTE *)v2031[2440];
                                                                                      if (0x8E38E38E38E38E39
                                                                                         * ((uint64_t)(v2031[2442] - (_QWORD)v881) >> 4) < (unint64_t)v2032)
                                                                                      {
                                                                                        if ((unint64_t)v2032 > 0x1C71C71C71C71C7)
                                                                                          sub_20E867F44();
                                                                                        v882 = (_BYTE *)v2031[2441];
                                                                                        v883 = (char *)operator new(144 * v2032);
                                                                                        v884 = &v883[v882 - v881];
                                                                                        v885 = v884;
                                                                                        if (v882 != v881)
                                                                                        {
                                                                                          v886 = 0;
                                                                                          do
                                                                                          {
                                                                                            v887 = &v884[v886];
                                                                                            *((_QWORD *)v887 - 18) = *(_QWORD *)&v882[v886 - 144];
                                                                                            *((_QWORD *)v887 - 17) = *(_QWORD *)&v882[v886 - 136];
                                                                                            *((_QWORD *)v887 - 16) = *(_QWORD *)&v882[v886 - 128];
                                                                                            v888 = *(_OWORD *)&v882[v886 - 120];
                                                                                            v889 = *(_OWORD *)&v882[v886 - 104];
                                                                                            v890 = *(_OWORD *)&v882[v886 - 88];
                                                                                            *(_OWORD *)(v887 - 72) = *(_OWORD *)&v882[v886 - 72];
                                                                                            *(_OWORD *)(v887 - 88) = v890;
                                                                                            *(_OWORD *)(v887 - 104) = v889;
                                                                                            *(_OWORD *)(v887 - 120) = v888;
                                                                                            v891 = *(_OWORD *)&v882[v886 - 56];
                                                                                            v892 = *(_OWORD *)&v882[v886 - 40];
                                                                                            v893 = *(_OWORD *)&v882[v886 - 24];
                                                                                            *((_QWORD *)v887 - 1) = *(_QWORD *)&v882[v886 - 8];
                                                                                            *(_OWORD *)(v887 - 24) = v893;
                                                                                            *(_OWORD *)(v887 - 40) = v892;
                                                                                            *(_OWORD *)(v887 - 56) = v891;
                                                                                            v886 -= 144;
                                                                                          }
                                                                                          while (&v882[v886] != v881);
                                                                                          v885 = &v884[v886];
                                                                                        }
                                                                                        v2031[2440] = v885;
                                                                                        v2031[2441] = v884;
                                                                                        v2031[2442] = &v883[144 * v880];
                                                                                        if (v881)
                                                                                          operator delete(v881);
                                                                                      }
                                                                                      v894 = v2024[121];
                                                                                      v895 = v2024[122];
                                                                                      if (v894 != v895)
                                                                                      {
                                                                                        v896 = 0uLL;
                                                                                        while (2)
                                                                                        {
                                                                                          v898 = *(_QWORD *)(v894 + 8);
                                                                                          if (*(_DWORD *)v898 != -1
                                                                                            || (*(_BYTE *)(v898 + 4) & 2) != 0)
                                                                                          {
                                                                                            goto LABEL_1029;
                                                                                          }
                                                                                          v899 = (char *)v2031[2441];
                                                                                          v900 = v2031[2442];
                                                                                          if ((unint64_t)v899 < v900)
                                                                                          {
                                                                                            *(_QWORD *)v899 = v898;
                                                                                            *((_QWORD *)v899 + 3) = -1;
                                                                                            *((_OWORD *)v899 + 2) = v896;
                                                                                            *((_OWORD *)v899 + 3) = v896;
                                                                                            *((_OWORD *)v899 + 4) = v896;
                                                                                            *((_OWORD *)v899 + 5) = v896;
                                                                                            *((_OWORD *)v899 + 6) = v896;
                                                                                            *((_OWORD *)v899 + 7) = v896;
                                                                                            v897 = v899 + 144;
                                                                                            *((_QWORD *)v899 + 16) = 0;
                                                                                            *((_QWORD *)v899 + 17) = v2029;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v901 = (char *)v2031[2440];
                                                                                            v902 = 0x8E38E38E38E38E39
                                                                                                 * ((v899 - v901) >> 4)
                                                                                                 + 1;
                                                                                            if (v902 > 0x1C71C71C71C71C7)
                                                                                              sub_20E867F44();
                                                                                            v903 = 0x8E38E38E38E38E39
                                                                                                 * ((uint64_t)(v900 - (_QWORD)v901) >> 4);
                                                                                            if (2 * v903 > v902)
                                                                                              v902 = 2 * v903;
                                                                                            if (v903 >= 0xE38E38E38E38E3)
                                                                                              v904 = 0x1C71C71C71C71C7;
                                                                                            else
                                                                                              v904 = v902;
                                                                                            if (v904)
                                                                                            {
                                                                                              if (v904 > 0x1C71C71C71C71C7)
                                                                                                sub_20E877A38();
                                                                                              v905 = (char *)operator new(144 * v904);
                                                                                              v896 = 0uLL;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v905 = 0;
                                                                                            }
                                                                                            v906 = &v905[16 * ((v899 - v901) >> 4)];
                                                                                            *(_QWORD *)v906 = v898;
                                                                                            *((_QWORD *)v906 + 3) = -1;
                                                                                            *((_OWORD *)v906 + 2) = v896;
                                                                                            *((_OWORD *)v906 + 3) = v896;
                                                                                            *((_OWORD *)v906 + 4) = v896;
                                                                                            *((_OWORD *)v906 + 5) = v896;
                                                                                            *((_OWORD *)v906 + 6) = v896;
                                                                                            *((_OWORD *)v906 + 7) = v896;
                                                                                            *((_QWORD *)v906 + 16) = 0;
                                                                                            *((_QWORD *)v906 + 17) = v2029;
                                                                                            if (v899 == v901)
                                                                                            {
                                                                                              v2031[2440] = v906;
                                                                                              v897 = v906 + 144;
                                                                                              v2031[2441] = v906 + 144;
                                                                                              v2031[2442] = &v905[144 * v904];
                                                                                              if (v899)
                                                                                                goto LABEL_1047;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v907 = 0;
                                                                                              do
                                                                                              {
                                                                                                v908 = &v906[v907];
                                                                                                *((_QWORD *)v908 - 18) = *(_QWORD *)&v899[v907 - 144];
                                                                                                *((_QWORD *)v908 - 17) = *(_QWORD *)&v899[v907 - 136];
                                                                                                *((_QWORD *)v908 - 16) = *(_QWORD *)&v899[v907 - 128];
                                                                                                v909 = *(_OWORD *)&v899[v907 - 120];
                                                                                                v910 = *(_OWORD *)&v899[v907 - 104];
                                                                                                v911 = *(_OWORD *)&v899[v907 - 88];
                                                                                                *(_OWORD *)(v908 - 72) = *(_OWORD *)&v899[v907 - 72];
                                                                                                *(_OWORD *)(v908 - 88) = v911;
                                                                                                *(_OWORD *)(v908 - 104) = v910;
                                                                                                *(_OWORD *)(v908 - 120) = v909;
                                                                                                v912 = *(_OWORD *)&v899[v907 - 56];
                                                                                                v913 = *(_OWORD *)&v899[v907 - 40];
                                                                                                v914 = *(_OWORD *)&v899[v907 - 24];
                                                                                                *((_QWORD *)v908 - 1) = *(_QWORD *)&v899[v907 - 8];
                                                                                                *(_OWORD *)(v908 - 24) = v914;
                                                                                                *(_OWORD *)(v908 - 40) = v913;
                                                                                                *(_OWORD *)(v908 - 56) = v912;
                                                                                                v907 -= 144;
                                                                                              }
                                                                                              while (&v899[v907] != v901);
                                                                                              v899 = (char *)v2031[2440];
                                                                                              v2031[2440] = &v906[v907];
                                                                                              v897 = v906 + 144;
                                                                                              v2031[2441] = v906 + 144;
                                                                                              v2031[2442] = &v905[144 * v904];
                                                                                              if (v899)
                                                                                              {
LABEL_1047:
                                                                                                operator delete(v899);
                                                                                                v896 = 0uLL;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          v2031[2441] = v897;
                                                                                          *((_QWORD *)v897 - 15) = v2038.i64[0];
                                                                                          *((_OWORD *)v897 - 7) = v896;
                                                                                          *((_OWORD *)v897 - 6) = v896;
                                                                                          *((_OWORD *)v897 - 5) = v896;
                                                                                          *((_OWORD *)v897 - 4) = v896;
                                                                                          *((_OWORD *)v897 - 3) = v896;
                                                                                          *((_OWORD *)v897 - 2) = v896;
                                                                                          *((_QWORD *)v897 - 2) = 0;
                                                                                          v2038.i64[0] += (11 * *(_DWORD *)(v898 + 8));
                                                                                          *(_DWORD *)v898 = 954437177 * ((v2031[2441] - v2031[2440]) >> 4) - 1;
LABEL_1029:
                                                                                          v894 += 16;
                                                                                          if (v894 == v895)
                                                                                            break;
                                                                                          continue;
                                                                                        }
                                                                                      }
                                                                                    }
LABEL_1051:
                                                                                    v2031[2359] = v2031[2358];
                                                                                    v915 = v2031[2361];
                                                                                    v2031[2362] = v915;
                                                                                    v2031[2365] = v2031[2364];
                                                                                    v2031[2368] = v2031[2367];
                                                                                    v2031[2371] = v2031[2370];
                                                                                    v2031[2374] = v2031[2373];
                                                                                    v2031[2377] = v2031[2376];
                                                                                    v2031[2380] = v2031[2379];
                                                                                    v2031[2383] = v2031[2382];
                                                                                    v2031[2386] = v2031[2385];
                                                                                    v2031[2389] = v2031[2388];
                                                                                    v2031[2392] = v2031[2391];
                                                                                    v2031[2395] = v2031[2394];
                                                                                    *(_OWORD *)(v2031 + 2403) = 0u;
                                                                                    *(_OWORD *)(v2031 + 2405) = 0u;
                                                                                    *(_OWORD *)(v2031 + 2399) = 0u;
                                                                                    *(_OWORD *)(v2031 + 2401) = 0u;
                                                                                    *(_OWORD *)(v2031 + 2397) = 0u;
                                                                                    v2031[2408] = v2031[2407];
                                                                                    v2031[2411] = v2031[2410];
                                                                                    v2031[2414] = v2031[2413];
                                                                                    v2031[2417] = v2031[2416];
                                                                                    v2031[2420] = v2031[2419];
                                                                                    v2031[2423] = v2031[2422];
                                                                                    v2031[2426] = v2031[2425];
                                                                                    v2031[2429] = v2031[2428];
                                                                                    v2031[2432] = v2031[2431];
                                                                                    v2031[2435] = v2031[2434];
                                                                                    v916 = v2038.i64[0];
                                                                                    if (v2038.i64[0])
                                                                                    {
                                                                                      sub_20EAC9ECC(v2029, v2038.u64[0]);
                                                                                      v915 = v2031[2361];
                                                                                      v917 = (v2031[2362] - v915) >> 3;
                                                                                      v918 = v916 >= v917;
                                                                                      if (v916 > v917)
                                                                                      {
                                                                                        sub_20EAC9ECC((uint64_t)(v2031 + 2361), v916 - v917);
                                                                                        goto LABEL_1057;
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v918 = 1;
                                                                                    }
                                                                                    if (!v918)
                                                                                      v2031[2362] = v915 + 8 * v916;
LABEL_1057:
                                                                                    v919 = v2031[2364];
                                                                                    v920 = (v2031[2365] - v919) >> 3;
                                                                                    if (v916 <= v920)
                                                                                    {
                                                                                      if (v916 < v920)
                                                                                        v2031[2365] = v919 + 8 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20EAC9ECC((uint64_t)(v2031 + 2364), v916 - v920);
                                                                                    }
                                                                                    v921 = v2031[2407];
                                                                                    v922 = (v2031[2408] - v921) >> 4;
                                                                                    if (v916 <= v922)
                                                                                    {
                                                                                      if (v916 < v922)
                                                                                        v2031[2408] = v921 + 16 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20F5BB76C(v2031 + 2407, v916 - v922);
                                                                                    }
                                                                                    v923 = v2031[2410];
                                                                                    v924 = (v2031[2411] - v923) >> 4;
                                                                                    if (v916 <= v924)
                                                                                    {
                                                                                      if (v916 < v924)
                                                                                        v2031[2411] = v923 + 16 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20F5BB76C(v2031 + 2410, v916 - v924);
                                                                                    }
                                                                                    v925 = v2031[2413];
                                                                                    v926 = (v2031[2414] - v925) >> 4;
                                                                                    if (v916 <= v926)
                                                                                    {
                                                                                      if (v916 < v926)
                                                                                        v2031[2414] = v925 + 16 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20F5BB76C(v2031 + 2413, v916 - v926);
                                                                                    }
                                                                                    v927 = v2031[2416];
                                                                                    v928 = (v2031[2417] - v927) >> 4;
                                                                                    if (v916 <= v928)
                                                                                    {
                                                                                      if (v916 < v928)
                                                                                        v2031[2417] = v927 + 16 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20F5BB76C(v2031 + 2416, v916 - v928);
                                                                                    }
                                                                                    v929 = v2031[2419];
                                                                                    v930 = (v2031[2420] - v929) >> 4;
                                                                                    if (v916 <= v930)
                                                                                    {
                                                                                      if (v916 < v930)
                                                                                        v2031[2420] = v929 + 16 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20F5BB76C(v2031 + 2419, v916 - v930);
                                                                                    }
                                                                                    v931 = v2031[2422];
                                                                                    v932 = (v2031[2423] - v931) >> 4;
                                                                                    if (v916 <= v932)
                                                                                    {
                                                                                      if (v916 < v932)
                                                                                        v2031[2423] = v931 + 16 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20F5BB76C(v2031 + 2422, v916 - v932);
                                                                                    }
                                                                                    v933 = v2031[2425];
                                                                                    v934 = (v2031[2426] - v933) >> 4;
                                                                                    if (v916 <= v934)
                                                                                    {
                                                                                      if (v916 < v934)
                                                                                        v2031[2426] = v933 + 16 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20F5BB76C(v2031 + 2425, v916 - v934);
                                                                                    }
                                                                                    v935 = v2031[2428];
                                                                                    v936 = (v2031[2429] - v935) >> 4;
                                                                                    if (v916 <= v936)
                                                                                    {
                                                                                      if (v916 < v936)
                                                                                        v2031[2429] = v935 + 16 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20F5BB76C(v2031 + 2428, v916 - v936);
                                                                                    }
                                                                                    v937 = v2031[2431];
                                                                                    v938 = (v2031[2432] - v937) >> 4;
                                                                                    if (v916 <= v938)
                                                                                    {
                                                                                      if (v916 < v938)
                                                                                        v2031[2432] = v937 + 16 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20F5BB76C(v2031 + 2431, v916 - v938);
                                                                                    }
                                                                                    v939 = v2031[2434];
                                                                                    v940 = (v2031[2435] - v939) >> 4;
                                                                                    if (v916 <= v940)
                                                                                    {
                                                                                      if (v916 < v940)
                                                                                        v2031[2435] = v939 + 16 * v916;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20F5BB76C(v2031 + 2434, v916 - v940);
                                                                                    }
                                                                                    v941 = v2024[181];
                                                                                    v942 = v2024[182];
                                                                                    if (v941 != v942)
                                                                                    {
                                                                                      v943 = 0;
                                                                                      while (2)
                                                                                      {
                                                                                        if (!sub_20F556208((_QWORD *)(v941 + 56)))
                                                                                          goto LABEL_1106;
                                                                                        v945 = *(unsigned int **)(v941 + 136);
                                                                                        v946 = *v945;
                                                                                        if (*((_BYTE *)v945 + 20))
                                                                                        {
                                                                                          v947 = v2031[2437];
                                                                                          v948 = v947 + 144 * v946;
                                                                                          v950 = *(_QWORD *)(v948 + 24);
                                                                                          v949 = (unint64_t *)(v948 + 24);
                                                                                          v951 = (_QWORD *)v949[14];
                                                                                          *(_QWORD *)(*v951 + 8 * (v949[1] + v950)) = v943;
                                                                                          ++v949[1];
                                                                                          v952 = **(_DWORD **)(v941 + 56);
                                                                                          if (v952 != -1)
                                                                                          {
                                                                                            v953 = v947 + 144 * v946;
                                                                                            v956 = *(_QWORD *)(v953 + 72);
                                                                                            v955 = (_QWORD *)(v953 + 72);
                                                                                            v954 = v956;
                                                                                            v957 = v956 + *v949;
                                                                                            v958 = v951[55];
                                                                                            if (v957 <= *v949)
                                                                                            {
LABEL_1114:
                                                                                              v963 = v958 + 16 * v957;
                                                                                              goto LABEL_1115;
                                                                                            }
                                                                                            v959 = 16 * *v949;
                                                                                            v960 = v954 + 1;
                                                                                            v961 = 16 * v954 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v962 = *(_DWORD *)(v958 + v959);
                                                                                              if (v962 >= v952)
                                                                                                break;
                                                                                              v959 += 16;
                                                                                              --v960;
                                                                                              v961 -= 16;
                                                                                              if (v960 == 1)
                                                                                                goto LABEL_1114;
                                                                                            }
                                                                                            if (v962 > v952)
                                                                                            {
                                                                                              if (v960)
                                                                                              {
                                                                                                memmove((void *)(v958 + 16 * v957 - v961 + 32), (const void *)(v958 + v959), v961);
                                                                                                v958 = v951[55];
                                                                                              }
                                                                                              v963 = v958 + v959;
LABEL_1115:
                                                                                              *(_DWORD *)v963 = v952;
                                                                                              *(_QWORD *)(v963 + 8) = -1;
                                                                                              ++v951[41];
                                                                                              ++*v955;
                                                                                            }
                                                                                          }
                                                                                          v964 = **(_DWORD **)(v941 + 64);
                                                                                          if (v964 != -1)
                                                                                          {
                                                                                            v965 = v947 + 144 * v946;
                                                                                            v968 = *(_QWORD *)(v965 + 72);
                                                                                            v967 = (_QWORD *)(v965 + 72);
                                                                                            v966 = v968;
                                                                                            v969 = v968 + *v949;
                                                                                            v970 = v951[55];
                                                                                            if (v969 <= *v949)
                                                                                            {
LABEL_1121:
                                                                                              v975 = v970 + 16 * v969;
                                                                                              goto LABEL_1122;
                                                                                            }
                                                                                            v971 = 16 * *v949;
                                                                                            v972 = v966 + 1;
                                                                                            v973 = 16 * v966 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v974 = *(_DWORD *)(v970 + v971);
                                                                                              if (v974 >= v964)
                                                                                                break;
                                                                                              v971 += 16;
                                                                                              --v972;
                                                                                              v973 -= 16;
                                                                                              if (v972 == 1)
                                                                                                goto LABEL_1121;
                                                                                            }
                                                                                            if (v974 > v964)
                                                                                            {
                                                                                              if (v972)
                                                                                              {
                                                                                                memmove((void *)(v970 + 16 * v969 - v973 + 32), (const void *)(v970 + v971), v973);
                                                                                                v970 = v951[55];
                                                                                              }
                                                                                              v975 = v970 + v971;
LABEL_1122:
                                                                                              *(_DWORD *)v975 = v964;
                                                                                              *(_QWORD *)(v975 + 8) = -1;
                                                                                              ++v951[41];
                                                                                              ++*v967;
                                                                                            }
                                                                                          }
                                                                                          v976 = (uint64_t *)(v949 + 4);
                                                                                          v977 = **(_DWORD **)(v941 + 72);
                                                                                          if (v977 != -1)
                                                                                          {
                                                                                            v978 = *v976;
                                                                                            v979 = *v976 + *v949;
                                                                                            v980 = v951[49];
                                                                                            if (v979 <= *v949)
                                                                                            {
LABEL_1128:
                                                                                              v985 = v980 + 16 * v979;
                                                                                              goto LABEL_1129;
                                                                                            }
                                                                                            v981 = 16 * *v949;
                                                                                            v982 = v978 + 1;
                                                                                            v983 = 16 * v978 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v984 = *(_DWORD *)(v980 + v981);
                                                                                              if (v984 >= v977)
                                                                                                break;
                                                                                              v981 += 16;
                                                                                              --v982;
                                                                                              v983 -= 16;
                                                                                              if (v982 == 1)
                                                                                                goto LABEL_1128;
                                                                                            }
                                                                                            if (v984 > v977)
                                                                                            {
                                                                                              if (v982)
                                                                                              {
                                                                                                memmove((void *)(v980 + 16 * v979 - v983 + 32), (const void *)(v980 + v981), v983);
                                                                                                v980 = v951[49];
                                                                                              }
                                                                                              v985 = v980 + v981;
LABEL_1129:
                                                                                              *(_DWORD *)v985 = v977;
                                                                                              *(_QWORD *)(v985 + 8) = -1;
                                                                                              ++v951[39];
                                                                                              ++*v976;
                                                                                            }
                                                                                          }
                                                                                          v986 = **(_DWORD **)(v941 + 80);
                                                                                          if (v986 != -1)
                                                                                          {
                                                                                            v987 = *v976;
                                                                                            v988 = *v976 + *v949;
                                                                                            v989 = v951[49];
                                                                                            if (v988 <= *v949)
                                                                                            {
LABEL_1135:
                                                                                              v994 = v989 + 16 * v988;
                                                                                              goto LABEL_1136;
                                                                                            }
                                                                                            v990 = 16 * *v949;
                                                                                            v991 = v987 + 1;
                                                                                            v992 = 16 * v987 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v993 = *(_DWORD *)(v989 + v990);
                                                                                              if (v993 >= v986)
                                                                                                break;
                                                                                              v990 += 16;
                                                                                              --v991;
                                                                                              v992 -= 16;
                                                                                              if (v991 == 1)
                                                                                                goto LABEL_1135;
                                                                                            }
                                                                                            if (v993 > v986)
                                                                                            {
                                                                                              if (v991)
                                                                                              {
                                                                                                memmove((void *)(v989 + 16 * v988 - v992 + 32), (const void *)(v989 + v990), v992);
                                                                                                v989 = v951[49];
                                                                                              }
                                                                                              v994 = v989 + v990;
LABEL_1136:
                                                                                              *(_DWORD *)v994 = v986;
                                                                                              *(_QWORD *)(v994 + 8) = -1;
                                                                                              ++v951[39];
                                                                                              ++*v976;
                                                                                            }
                                                                                          }
                                                                                          v995 = **(_DWORD **)(v941 + 88);
                                                                                          if (v995 != -1)
                                                                                          {
                                                                                            v996 = v947 + 144 * v946;
                                                                                            v999 = *(_QWORD *)(v996 + 112);
                                                                                            v998 = (_QWORD *)(v996 + 112);
                                                                                            v997 = v999;
                                                                                            v1000 = v999 + *v949;
                                                                                            v1001 = v951[70];
                                                                                            if (v1000 <= *v949)
                                                                                            {
LABEL_1142:
                                                                                              v1006 = v1001 + 16 * v1000;
                                                                                              goto LABEL_1143;
                                                                                            }
                                                                                            v1002 = 16 * *v949;
                                                                                            v1003 = v997 + 1;
                                                                                            v1004 = 16 * v997 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1005 = *(_DWORD *)(v1001 + v1002);
                                                                                              if (v1005 >= v995)
                                                                                                break;
                                                                                              v1002 += 16;
                                                                                              --v1003;
                                                                                              v1004 -= 16;
                                                                                              if (v1003 == 1)
                                                                                                goto LABEL_1142;
                                                                                            }
                                                                                            if (v1005 > v995)
                                                                                            {
                                                                                              if (v1003)
                                                                                              {
                                                                                                memmove((void *)(v1001 + 16 * v1000 - v1004 + 32), (const void *)(v1001 + v1002), v1004);
                                                                                                v1001 = v951[70];
                                                                                              }
                                                                                              v1006 = v1001 + v1002;
LABEL_1143:
                                                                                              *(_DWORD *)v1006 = v995;
                                                                                              *(_QWORD *)(v1006 + 8) = -1;
                                                                                              ++v951[46];
                                                                                              ++*v998;
                                                                                            }
                                                                                          }
                                                                                          v1007 = **(_DWORD **)(v941 + 96);
                                                                                          if (v1007 != -1)
                                                                                          {
                                                                                            v1008 = v947 + 144 * v946;
                                                                                            v1011 = *(_QWORD *)(v1008 + 112);
                                                                                            v1010 = (_QWORD *)(v1008 + 112);
                                                                                            v1009 = v1011;
                                                                                            v1012 = v1011 + *v949;
                                                                                            v1013 = v951[70];
                                                                                            if (v1012 <= *v949)
                                                                                            {
LABEL_1149:
                                                                                              v1018 = v1013 + 16 * v1012;
                                                                                              goto LABEL_1150;
                                                                                            }
                                                                                            v1014 = 16 * *v949;
                                                                                            v1015 = v1009 + 1;
                                                                                            v1016 = 16 * v1009 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1017 = *(_DWORD *)(v1013 + v1014);
                                                                                              if (v1017 >= v1007)
                                                                                                break;
                                                                                              v1014 += 16;
                                                                                              --v1015;
                                                                                              v1016 -= 16;
                                                                                              if (v1015 == 1)
                                                                                                goto LABEL_1149;
                                                                                            }
                                                                                            if (v1017 > v1007)
                                                                                            {
                                                                                              if (v1015)
                                                                                              {
                                                                                                memmove((void *)(v1013 + 16 * v1012 - v1016 + 32), (const void *)(v1013 + v1014), v1016);
                                                                                                v1013 = v951[70];
                                                                                              }
                                                                                              v1018 = v1013 + v1014;
LABEL_1150:
                                                                                              *(_DWORD *)v1018 = v1007;
                                                                                              *(_QWORD *)(v1018 + 8) = -1;
                                                                                              ++v951[46];
                                                                                              ++*v1010;
                                                                                            }
                                                                                          }
                                                                                          v1019 = **(_DWORD **)(v941 + 104);
                                                                                          if (v1019 != -1)
                                                                                          {
                                                                                            v1020 = v947 + 144 * v946;
                                                                                            v1023 = *(_QWORD *)(v1020 + 120);
                                                                                            v1022 = (_QWORD *)(v1020 + 120);
                                                                                            v1021 = v1023;
                                                                                            v1024 = v1023 + *v949;
                                                                                            v1025 = v951[73];
                                                                                            if (v1024 <= *v949)
                                                                                            {
LABEL_1156:
                                                                                              v1030 = v1025 + 16 * v1024;
                                                                                              goto LABEL_1157;
                                                                                            }
                                                                                            v1026 = 16 * *v949;
                                                                                            v1027 = v1021 + 1;
                                                                                            v1028 = 16 * v1021 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1029 = *(_DWORD *)(v1025 + v1026);
                                                                                              if (v1029 >= v1019)
                                                                                                break;
                                                                                              v1026 += 16;
                                                                                              --v1027;
                                                                                              v1028 -= 16;
                                                                                              if (v1027 == 1)
                                                                                                goto LABEL_1156;
                                                                                            }
                                                                                            if (v1029 > v1019)
                                                                                            {
                                                                                              if (v1027)
                                                                                              {
                                                                                                memmove((void *)(v1025 + 16 * v1024 - v1028 + 32), (const void *)(v1025 + v1026), v1028);
                                                                                                v1025 = v951[73];
                                                                                              }
                                                                                              v1030 = v1025 + v1026;
LABEL_1157:
                                                                                              *(_DWORD *)v1030 = v1019;
                                                                                              *(_QWORD *)(v1030 + 8) = -1;
                                                                                              ++v951[47];
                                                                                              ++*v1022;
                                                                                            }
                                                                                          }
                                                                                          v1031 = **(_DWORD **)(v941 + 112);
                                                                                          if (v1031 != -1)
                                                                                          {
                                                                                            v1032 = v947 + 144 * v946;
                                                                                            v1035 = *(_QWORD *)(v1032 + 120);
                                                                                            v1034 = (_QWORD *)(v1032 + 120);
                                                                                            v1033 = v1035;
                                                                                            v1036 = v1035 + *v949;
                                                                                            v1037 = v951[73];
                                                                                            if (v1036 <= *v949)
                                                                                            {
LABEL_1163:
                                                                                              v1042 = v1037 + 16 * v1036;
                                                                                              goto LABEL_1164;
                                                                                            }
                                                                                            v1038 = 16 * *v949;
                                                                                            v1039 = v1033 + 1;
                                                                                            v1040 = 16 * v1033 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1041 = *(_DWORD *)(v1037 + v1038);
                                                                                              if (v1041 >= v1031)
                                                                                                break;
                                                                                              v1038 += 16;
                                                                                              --v1039;
                                                                                              v1040 -= 16;
                                                                                              if (v1039 == 1)
                                                                                                goto LABEL_1163;
                                                                                            }
                                                                                            if (v1041 > v1031)
                                                                                            {
                                                                                              if (v1039)
                                                                                              {
                                                                                                memmove((void *)(v1037 + 16 * v1036 - v1040 + 32), (const void *)(v1037 + v1038), v1040);
                                                                                                v1037 = v951[73];
                                                                                              }
                                                                                              v1042 = v1037 + v1038;
LABEL_1164:
                                                                                              *(_DWORD *)v1042 = v1031;
                                                                                              *(_QWORD *)(v1042 + 8) = -1;
                                                                                              ++v951[47];
                                                                                              ++*v1034;
                                                                                            }
                                                                                          }
                                                                                          v1043 = **(_DWORD **)(v941 + 120);
                                                                                          if (v1043 != -1)
                                                                                          {
                                                                                            v1044 = v947 + 144 * v946;
                                                                                            v1047 = *(_QWORD *)(v1044 + 128);
                                                                                            v1046 = (_QWORD *)(v1044 + 128);
                                                                                            v1045 = v1047;
                                                                                            v1048 = v1047 + *v949;
                                                                                            v1049 = v951[76];
                                                                                            if (v1048 <= *v949)
                                                                                            {
LABEL_1170:
                                                                                              v1054 = v1049 + 16 * v1048;
                                                                                              goto LABEL_1171;
                                                                                            }
                                                                                            v1050 = 16 * *v949;
                                                                                            v1051 = v1045 + 1;
                                                                                            v1052 = 16 * v1045 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1053 = *(_DWORD *)(v1049 + v1050);
                                                                                              if (v1053 >= v1043)
                                                                                                break;
                                                                                              v1050 += 16;
                                                                                              --v1051;
                                                                                              v1052 -= 16;
                                                                                              if (v1051 == 1)
                                                                                                goto LABEL_1170;
                                                                                            }
                                                                                            if (v1053 > v1043)
                                                                                            {
                                                                                              if (v1051)
                                                                                              {
                                                                                                memmove((void *)(v1049 + 16 * v1048 - v1052 + 32), (const void *)(v1049 + v1050), v1052);
                                                                                                v1049 = v951[76];
                                                                                              }
                                                                                              v1054 = v1049 + v1050;
LABEL_1171:
                                                                                              *(_DWORD *)v1054 = v1043;
                                                                                              *(_QWORD *)(v1054 + 8) = -1;
                                                                                              ++v951[48];
                                                                                              ++*v1046;
                                                                                            }
                                                                                          }
                                                                                          v1055 = **(_DWORD **)(v941 + 128);
                                                                                          if (v1055 == -1)
                                                                                            goto LABEL_1106;
                                                                                          v1056 = v947 + 144 * v946;
                                                                                          v1059 = *(_QWORD *)(v1056 + 128);
                                                                                          v1058 = v1056 + 128;
                                                                                          v1057 = v1059;
                                                                                          v1060 = v1059 + *v949;
                                                                                          v1061 = v951[76];
                                                                                          if (v1060 <= *v949)
                                                                                          {
LABEL_1103:
                                                                                            v944 = v1061 + 16 * v1060;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v1062 = 16 * *v949;
                                                                                            v1063 = v1057 + 1;
                                                                                            v1064 = 16 * v1057 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1065 = *(_DWORD *)(v1061 + v1062);
                                                                                              if (v1065 >= v1055)
                                                                                                break;
                                                                                              v1062 += 16;
                                                                                              --v1063;
                                                                                              v1064 -= 16;
                                                                                              if (v1063 == 1)
                                                                                                goto LABEL_1103;
                                                                                            }
                                                                                            if (v1065 <= v1055)
                                                                                              goto LABEL_1106;
                                                                                            if (v1063)
                                                                                            {
                                                                                              memmove((void *)(v1061 + 16 * v1060 - v1064 + 32), (const void *)(v1061 + v1062), v1064);
                                                                                              v1061 = v951[76];
                                                                                            }
                                                                                            v944 = v1061 + v1062;
                                                                                          }
                                                                                          *(_DWORD *)v944 = v1055;
                                                                                          *(_QWORD *)(v944 + 8) = -1;
                                                                                          ++v951[48];
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if ((v945[1] & 2) != 0)
                                                                                            goto LABEL_1106;
                                                                                          v1066 = v2031[2440]
                                                                                                + 144 * v946;
                                                                                          v1067 = *(_QWORD *)(v1066 + 32);
                                                                                          v1058 = v1066 + 32;
                                                                                          *(_QWORD *)(**(_QWORD **)(v1058 + 104) + 8 * (v1067 + *(_QWORD *)(v1058 - 8))) = v943;
                                                                                        }
                                                                                        ++*(_QWORD *)v1058;
LABEL_1106:
                                                                                        v941 += 216;
                                                                                        ++v943;
                                                                                        if (v941 == v942)
                                                                                          break;
                                                                                        continue;
                                                                                      }
                                                                                    }
                                                                                    v1068 = v2024[187];
                                                                                    v1069 = v2024[188];
                                                                                    if (v1068 != v1069)
                                                                                    {
                                                                                      v1070 = 0;
                                                                                      while (2)
                                                                                      {
                                                                                        if (!sub_20F556208((_QWORD *)(v1068 + 64)))
                                                                                          goto LABEL_1225;
                                                                                        v1072 = *(unsigned int **)(v1068 + 144);
                                                                                        v1073 = *v1072;
                                                                                        if (*((_BYTE *)v1072 + 20))
                                                                                        {
                                                                                          v1074 = v2031[2437];
                                                                                          v1075 = v1074 + 144 * v1073;
                                                                                          v1077 = *(_QWORD *)(v1075 + 24);
                                                                                          v1076 = (unint64_t *)(v1075 + 24);
                                                                                          v1078 = (_QWORD *)v1076[14];
                                                                                          *(_QWORD *)(v1078[3] + 8 * (v1076[2] + v1077)) = v1070;
                                                                                          ++v1076[2];
                                                                                          v1079 = **(_DWORD **)(v1068 + 64);
                                                                                          if (v1079 != -1)
                                                                                          {
                                                                                            v1080 = v1074 + 144 * v1073;
                                                                                            v1083 = *(_QWORD *)(v1080 + 72);
                                                                                            v1082 = (_QWORD *)(v1080 + 72);
                                                                                            v1081 = v1083;
                                                                                            v1084 = v1083 + *v1076;
                                                                                            v1085 = v1078[55];
                                                                                            if (v1084 <= *v1076)
                                                                                            {
LABEL_1233:
                                                                                              v1090 = v1085 + 16 * v1084;
                                                                                              goto LABEL_1234;
                                                                                            }
                                                                                            v1086 = 16 * *v1076;
                                                                                            v1087 = v1081 + 1;
                                                                                            v1088 = 16 * v1081 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1089 = *(_DWORD *)(v1085 + v1086);
                                                                                              if (v1089 >= v1079)
                                                                                                break;
                                                                                              v1086 += 16;
                                                                                              --v1087;
                                                                                              v1088 -= 16;
                                                                                              if (v1087 == 1)
                                                                                                goto LABEL_1233;
                                                                                            }
                                                                                            if (v1089 > v1079)
                                                                                            {
                                                                                              if (v1087)
                                                                                              {
                                                                                                memmove((void *)(v1085 + 16 * v1084 - v1088 + 32), (const void *)(v1085 + v1086), v1088);
                                                                                                v1085 = v1078[55];
                                                                                              }
                                                                                              v1090 = v1085 + v1086;
LABEL_1234:
                                                                                              *(_DWORD *)v1090 = v1079;
                                                                                              *(_QWORD *)(v1090 + 8) = -1;
                                                                                              ++v1078[41];
                                                                                              ++*v1082;
                                                                                            }
                                                                                          }
                                                                                          v1091 = **(_DWORD **)(v1068 + 72);
                                                                                          if (v1091 != -1)
                                                                                          {
                                                                                            v1092 = v1074 + 144 * v1073;
                                                                                            v1095 = *(_QWORD *)(v1092 + 72);
                                                                                            v1094 = (_QWORD *)(v1092 + 72);
                                                                                            v1093 = v1095;
                                                                                            v1096 = v1095 + *v1076;
                                                                                            v1097 = v1078[55];
                                                                                            if (v1096 <= *v1076)
                                                                                            {
LABEL_1240:
                                                                                              v1102 = v1097 + 16 * v1096;
                                                                                              goto LABEL_1241;
                                                                                            }
                                                                                            v1098 = 16 * *v1076;
                                                                                            v1099 = v1093 + 1;
                                                                                            v1100 = 16 * v1093 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1101 = *(_DWORD *)(v1097 + v1098);
                                                                                              if (v1101 >= v1091)
                                                                                                break;
                                                                                              v1098 += 16;
                                                                                              --v1099;
                                                                                              v1100 -= 16;
                                                                                              if (v1099 == 1)
                                                                                                goto LABEL_1240;
                                                                                            }
                                                                                            if (v1101 > v1091)
                                                                                            {
                                                                                              if (v1099)
                                                                                              {
                                                                                                memmove((void *)(v1097 + 16 * v1096 - v1100 + 32), (const void *)(v1097 + v1098), v1100);
                                                                                                v1097 = v1078[55];
                                                                                              }
                                                                                              v1102 = v1097 + v1098;
LABEL_1241:
                                                                                              *(_DWORD *)v1102 = v1091;
                                                                                              *(_QWORD *)(v1102 + 8) = -1;
                                                                                              ++v1078[41];
                                                                                              ++*v1094;
                                                                                            }
                                                                                          }
                                                                                          v1103 = (uint64_t *)(v1076 + 4);
                                                                                          v1104 = **(_DWORD **)(v1068 + 80);
                                                                                          if (v1104 != -1)
                                                                                          {
                                                                                            v1105 = *v1103;
                                                                                            v1106 = *v1103 + *v1076;
                                                                                            v1107 = v1078[49];
                                                                                            if (v1106 <= *v1076)
                                                                                            {
LABEL_1247:
                                                                                              v1112 = v1107 + 16 * v1106;
                                                                                              goto LABEL_1248;
                                                                                            }
                                                                                            v1108 = 16 * *v1076;
                                                                                            v1109 = v1105 + 1;
                                                                                            v1110 = 16 * v1105 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1111 = *(_DWORD *)(v1107 + v1108);
                                                                                              if (v1111 >= v1104)
                                                                                                break;
                                                                                              v1108 += 16;
                                                                                              --v1109;
                                                                                              v1110 -= 16;
                                                                                              if (v1109 == 1)
                                                                                                goto LABEL_1247;
                                                                                            }
                                                                                            if (v1111 > v1104)
                                                                                            {
                                                                                              if (v1109)
                                                                                              {
                                                                                                memmove((void *)(v1107 + 16 * v1106 - v1110 + 32), (const void *)(v1107 + v1108), v1110);
                                                                                                v1107 = v1078[49];
                                                                                              }
                                                                                              v1112 = v1107 + v1108;
LABEL_1248:
                                                                                              *(_DWORD *)v1112 = v1104;
                                                                                              *(_QWORD *)(v1112 + 8) = -1;
                                                                                              ++v1078[39];
                                                                                              ++*v1103;
                                                                                            }
                                                                                          }
                                                                                          v1113 = **(_DWORD **)(v1068 + 88);
                                                                                          if (v1113 != -1)
                                                                                          {
                                                                                            v1114 = *v1103;
                                                                                            v1115 = *v1103 + *v1076;
                                                                                            v1116 = v1078[49];
                                                                                            if (v1115 <= *v1076)
                                                                                            {
LABEL_1254:
                                                                                              v1121 = v1116 + 16 * v1115;
                                                                                              goto LABEL_1255;
                                                                                            }
                                                                                            v1117 = 16 * *v1076;
                                                                                            v1118 = v1114 + 1;
                                                                                            v1119 = 16 * v1114 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1120 = *(_DWORD *)(v1116 + v1117);
                                                                                              if (v1120 >= v1113)
                                                                                                break;
                                                                                              v1117 += 16;
                                                                                              --v1118;
                                                                                              v1119 -= 16;
                                                                                              if (v1118 == 1)
                                                                                                goto LABEL_1254;
                                                                                            }
                                                                                            if (v1120 > v1113)
                                                                                            {
                                                                                              if (v1118)
                                                                                              {
                                                                                                memmove((void *)(v1116 + 16 * v1115 - v1119 + 32), (const void *)(v1116 + v1117), v1119);
                                                                                                v1116 = v1078[49];
                                                                                              }
                                                                                              v1121 = v1116 + v1117;
LABEL_1255:
                                                                                              *(_DWORD *)v1121 = v1113;
                                                                                              *(_QWORD *)(v1121 + 8) = -1;
                                                                                              ++v1078[39];
                                                                                              ++*v1103;
                                                                                            }
                                                                                          }
                                                                                          v1122 = **(_DWORD **)(v1068 + 96);
                                                                                          if (v1122 != -1)
                                                                                          {
                                                                                            v1123 = v1074 + 144 * v1073;
                                                                                            v1126 = *(_QWORD *)(v1123 + 112);
                                                                                            v1125 = (_QWORD *)(v1123 + 112);
                                                                                            v1124 = v1126;
                                                                                            v1127 = v1126 + *v1076;
                                                                                            v1128 = v1078[70];
                                                                                            if (v1127 <= *v1076)
                                                                                            {
LABEL_1261:
                                                                                              v1133 = v1128 + 16 * v1127;
                                                                                              goto LABEL_1262;
                                                                                            }
                                                                                            v1129 = 16 * *v1076;
                                                                                            v1130 = v1124 + 1;
                                                                                            v1131 = 16 * v1124 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1132 = *(_DWORD *)(v1128 + v1129);
                                                                                              if (v1132 >= v1122)
                                                                                                break;
                                                                                              v1129 += 16;
                                                                                              --v1130;
                                                                                              v1131 -= 16;
                                                                                              if (v1130 == 1)
                                                                                                goto LABEL_1261;
                                                                                            }
                                                                                            if (v1132 > v1122)
                                                                                            {
                                                                                              if (v1130)
                                                                                              {
                                                                                                memmove((void *)(v1128 + 16 * v1127 - v1131 + 32), (const void *)(v1128 + v1129), v1131);
                                                                                                v1128 = v1078[70];
                                                                                              }
                                                                                              v1133 = v1128 + v1129;
LABEL_1262:
                                                                                              *(_DWORD *)v1133 = v1122;
                                                                                              *(_QWORD *)(v1133 + 8) = -1;
                                                                                              ++v1078[46];
                                                                                              ++*v1125;
                                                                                            }
                                                                                          }
                                                                                          v1134 = **(_DWORD **)(v1068 + 104);
                                                                                          if (v1134 != -1)
                                                                                          {
                                                                                            v1135 = v1074 + 144 * v1073;
                                                                                            v1138 = *(_QWORD *)(v1135 + 112);
                                                                                            v1137 = (_QWORD *)(v1135 + 112);
                                                                                            v1136 = v1138;
                                                                                            v1139 = v1138 + *v1076;
                                                                                            v1140 = v1078[70];
                                                                                            if (v1139 <= *v1076)
                                                                                            {
LABEL_1268:
                                                                                              v1145 = v1140 + 16 * v1139;
                                                                                              goto LABEL_1269;
                                                                                            }
                                                                                            v1141 = 16 * *v1076;
                                                                                            v1142 = v1136 + 1;
                                                                                            v1143 = 16 * v1136 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1144 = *(_DWORD *)(v1140 + v1141);
                                                                                              if (v1144 >= v1134)
                                                                                                break;
                                                                                              v1141 += 16;
                                                                                              --v1142;
                                                                                              v1143 -= 16;
                                                                                              if (v1142 == 1)
                                                                                                goto LABEL_1268;
                                                                                            }
                                                                                            if (v1144 > v1134)
                                                                                            {
                                                                                              if (v1142)
                                                                                              {
                                                                                                memmove((void *)(v1140 + 16 * v1139 - v1143 + 32), (const void *)(v1140 + v1141), v1143);
                                                                                                v1140 = v1078[70];
                                                                                              }
                                                                                              v1145 = v1140 + v1141;
LABEL_1269:
                                                                                              *(_DWORD *)v1145 = v1134;
                                                                                              *(_QWORD *)(v1145 + 8) = -1;
                                                                                              ++v1078[46];
                                                                                              ++*v1137;
                                                                                            }
                                                                                          }
                                                                                          v1146 = **(_DWORD **)(v1068 + 112);
                                                                                          if (v1146 != -1)
                                                                                          {
                                                                                            v1147 = v1074 + 144 * v1073;
                                                                                            v1150 = *(_QWORD *)(v1147 + 120);
                                                                                            v1149 = (_QWORD *)(v1147 + 120);
                                                                                            v1148 = v1150;
                                                                                            v1151 = v1150 + *v1076;
                                                                                            v1152 = v1078[73];
                                                                                            if (v1151 <= *v1076)
                                                                                            {
LABEL_1275:
                                                                                              v1157 = v1152 + 16 * v1151;
                                                                                              goto LABEL_1276;
                                                                                            }
                                                                                            v1153 = 16 * *v1076;
                                                                                            v1154 = v1148 + 1;
                                                                                            v1155 = 16 * v1148 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1156 = *(_DWORD *)(v1152 + v1153);
                                                                                              if (v1156 >= v1146)
                                                                                                break;
                                                                                              v1153 += 16;
                                                                                              --v1154;
                                                                                              v1155 -= 16;
                                                                                              if (v1154 == 1)
                                                                                                goto LABEL_1275;
                                                                                            }
                                                                                            if (v1156 > v1146)
                                                                                            {
                                                                                              if (v1154)
                                                                                              {
                                                                                                memmove((void *)(v1152 + 16 * v1151 - v1155 + 32), (const void *)(v1152 + v1153), v1155);
                                                                                                v1152 = v1078[73];
                                                                                              }
                                                                                              v1157 = v1152 + v1153;
LABEL_1276:
                                                                                              *(_DWORD *)v1157 = v1146;
                                                                                              *(_QWORD *)(v1157 + 8) = -1;
                                                                                              ++v1078[47];
                                                                                              ++*v1149;
                                                                                            }
                                                                                          }
                                                                                          v1158 = **(_DWORD **)(v1068 + 120);
                                                                                          if (v1158 != -1)
                                                                                          {
                                                                                            v1159 = v1074 + 144 * v1073;
                                                                                            v1162 = *(_QWORD *)(v1159 + 120);
                                                                                            v1161 = (_QWORD *)(v1159 + 120);
                                                                                            v1160 = v1162;
                                                                                            v1163 = v1162 + *v1076;
                                                                                            v1164 = v1078[73];
                                                                                            if (v1163 <= *v1076)
                                                                                            {
LABEL_1282:
                                                                                              v1169 = v1164 + 16 * v1163;
                                                                                              goto LABEL_1283;
                                                                                            }
                                                                                            v1165 = 16 * *v1076;
                                                                                            v1166 = v1160 + 1;
                                                                                            v1167 = 16 * v1160 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1168 = *(_DWORD *)(v1164 + v1165);
                                                                                              if (v1168 >= v1158)
                                                                                                break;
                                                                                              v1165 += 16;
                                                                                              --v1166;
                                                                                              v1167 -= 16;
                                                                                              if (v1166 == 1)
                                                                                                goto LABEL_1282;
                                                                                            }
                                                                                            if (v1168 > v1158)
                                                                                            {
                                                                                              if (v1166)
                                                                                              {
                                                                                                memmove((void *)(v1164 + 16 * v1163 - v1167 + 32), (const void *)(v1164 + v1165), v1167);
                                                                                                v1164 = v1078[73];
                                                                                              }
                                                                                              v1169 = v1164 + v1165;
LABEL_1283:
                                                                                              *(_DWORD *)v1169 = v1158;
                                                                                              *(_QWORD *)(v1169 + 8) = -1;
                                                                                              ++v1078[47];
                                                                                              ++*v1161;
                                                                                            }
                                                                                          }
                                                                                          v1170 = **(_DWORD **)(v1068 + 128);
                                                                                          if (v1170 != -1)
                                                                                          {
                                                                                            v1171 = v1074 + 144 * v1073;
                                                                                            v1174 = *(_QWORD *)(v1171 + 128);
                                                                                            v1173 = (_QWORD *)(v1171 + 128);
                                                                                            v1172 = v1174;
                                                                                            v1175 = v1174 + *v1076;
                                                                                            v1176 = v1078[76];
                                                                                            if (v1175 <= *v1076)
                                                                                            {
LABEL_1289:
                                                                                              v1181 = v1176 + 16 * v1175;
                                                                                              goto LABEL_1290;
                                                                                            }
                                                                                            v1177 = 16 * *v1076;
                                                                                            v1178 = v1172 + 1;
                                                                                            v1179 = 16 * v1172 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1180 = *(_DWORD *)(v1176 + v1177);
                                                                                              if (v1180 >= v1170)
                                                                                                break;
                                                                                              v1177 += 16;
                                                                                              --v1178;
                                                                                              v1179 -= 16;
                                                                                              if (v1178 == 1)
                                                                                                goto LABEL_1289;
                                                                                            }
                                                                                            if (v1180 > v1170)
                                                                                            {
                                                                                              if (v1178)
                                                                                              {
                                                                                                memmove((void *)(v1176 + 16 * v1175 - v1179 + 32), (const void *)(v1176 + v1177), v1179);
                                                                                                v1176 = v1078[76];
                                                                                              }
                                                                                              v1181 = v1176 + v1177;
LABEL_1290:
                                                                                              *(_DWORD *)v1181 = v1170;
                                                                                              *(_QWORD *)(v1181 + 8) = -1;
                                                                                              ++v1078[48];
                                                                                              ++*v1173;
                                                                                            }
                                                                                          }
                                                                                          v1182 = **(_DWORD **)(v1068 + 136);
                                                                                          if (v1182 == -1)
                                                                                            goto LABEL_1225;
                                                                                          v1183 = v1074 + 144 * v1073;
                                                                                          v1186 = *(_QWORD *)(v1183 + 128);
                                                                                          v1185 = (_QWORD *)(v1183 + 128);
                                                                                          v1184 = v1186;
                                                                                          v1187 = v1186 + *v1076;
                                                                                          v1188 = v1078[76];
                                                                                          if (v1187 <= *v1076)
                                                                                          {
LABEL_1222:
                                                                                            v1071 = v1188 + 16 * v1187;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v1189 = 16 * *v1076;
                                                                                            v1190 = v1184 + 1;
                                                                                            v1191 = 16 * v1184 + 16;
                                                                                            while (1)
                                                                                            {
                                                                                              v1192 = *(_DWORD *)(v1188 + v1189);
                                                                                              if (v1192 >= v1182)
                                                                                                break;
                                                                                              v1189 += 16;
                                                                                              --v1190;
                                                                                              v1191 -= 16;
                                                                                              if (v1190 == 1)
                                                                                                goto LABEL_1222;
                                                                                            }
                                                                                            if (v1192 <= v1182)
                                                                                              goto LABEL_1225;
                                                                                            if (v1190)
                                                                                            {
                                                                                              memmove((void *)(v1188 + 16 * v1187 - v1191 + 32), (const void *)(v1188 + v1189), v1191);
                                                                                              v1188 = v1078[76];
                                                                                            }
                                                                                            v1071 = v1188 + v1189;
                                                                                          }
                                                                                          *(_DWORD *)v1071 = v1182;
                                                                                          *(_QWORD *)(v1071 + 8) = -1;
                                                                                          ++v1078[48];
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if ((v1072[1] & 2) != 0)
                                                                                            goto LABEL_1225;
                                                                                          v1193 = v2031[2440]
                                                                                                + 144 * v1073;
                                                                                          v1194 = *(_QWORD *)(v1193 + 40);
                                                                                          v1185 = (_QWORD *)(v1193 + 40);
                                                                                          *(_QWORD *)(*(_QWORD *)(v1185[12] + 24) + 8 * (v1194 + *(v1185 - 2))) = v1070;
                                                                                        }
                                                                                        ++*v1185;
LABEL_1225:
                                                                                        v1068 += 208;
                                                                                        ++v1070;
                                                                                        if (v1068 == v1069)
                                                                                          break;
                                                                                        continue;
                                                                                      }
                                                                                    }
                                                                                    v1195 = (_QWORD *)v2024[190];
                                                                                    v1196 = (_QWORD *)v2024[191];
                                                                                    if (v1195 != v1196)
                                                                                    {
                                                                                      v1197 = 0;
                                                                                      while (1)
                                                                                      {
                                                                                        v1199 = (int *)v1195[7];
                                                                                        if (*((_BYTE *)v1199 + 20)
                                                                                          && *v1199 == -1)
                                                                                        {
                                                                                          goto LABEL_1344;
                                                                                        }
                                                                                        v1200 = (int *)v1195[8];
                                                                                        if (*((_BYTE *)v1200 + 20))
                                                                                        {
                                                                                          if (*v1200 == -1)
                                                                                            goto LABEL_1344;
                                                                                        }
                                                                                        v1201 = v1195[9];
                                                                                        if (*(_BYTE *)(v1201 + 20))
                                                                                        {
                                                                                          if (*(_DWORD *)v1201 == -1)
                                                                                            goto LABEL_1344;
                                                                                        }
                                                                                        v1202 = v1195[10];
                                                                                        if (*(_BYTE *)(v1202 + 20))
                                                                                        {
                                                                                          if (*(_DWORD *)v1202 == -1)
                                                                                            goto LABEL_1344;
                                                                                        }
                                                                                        v1203 = v1195[11];
                                                                                        if (*(_BYTE *)(v1203 + 20))
                                                                                        {
                                                                                          if (*(_DWORD *)v1203 == -1)
                                                                                            goto LABEL_1344;
                                                                                        }
                                                                                        v1204 = v1195[12];
                                                                                        if (*(_BYTE *)(v1204 + 20))
                                                                                        {
                                                                                          if (*(_DWORD *)v1204 == -1)
                                                                                            goto LABEL_1344;
                                                                                        }
                                                                                        v1205 = (unsigned int *)v1195[13];
                                                                                        v1206 = *v1205;
                                                                                        if (*((_BYTE *)v1205 + 20))
                                                                                          break;
                                                                                        if ((v1205[1] & 2) != 0)
                                                                                          goto LABEL_1344;
                                                                                        v1278 = v2031[2440]
                                                                                              + 144 * v1206;
                                                                                        v1279 = *(_QWORD *)(v1278 + 48);
                                                                                        v1270 = (_QWORD *)(v1278 + 48);
                                                                                        *(_QWORD *)(*(_QWORD *)(v1270[11] + 48)
                                                                                                  + 8 * (v1279 + *(v1270 - 3))) = v1197;
LABEL_1343:
                                                                                        ++*v1270;
LABEL_1344:
                                                                                        v1195 += 23;
                                                                                        ++v1197;
                                                                                        if (v1195 == v1196)
                                                                                          goto LABEL_1426;
                                                                                      }
                                                                                      if (v1206 == -1)
                                                                                        goto LABEL_1344;
                                                                                      v1207 = v2031[2437];
                                                                                      v1208 = v1207 + 144 * v1206;
                                                                                      v1210 = *(_QWORD *)(v1208 + 24);
                                                                                      v1209 = (unint64_t *)(v1208 + 24);
                                                                                      v1211 = (_QWORD *)v1209[14];
                                                                                      *(_QWORD *)(v1211[6]
                                                                                                + 8 * (v1209[3] + v1210)) = v1197;
                                                                                      ++v1209[3];
                                                                                      v1212 = *v1199;
                                                                                      if (*v1199 != -1)
                                                                                      {
                                                                                        v1213 = v1207 + 144 * v1206;
                                                                                        v1216 = *(_QWORD *)(v1213 + 72);
                                                                                        v1215 = (_QWORD *)(v1213 + 72);
                                                                                        v1214 = v1216;
                                                                                        v1217 = v1216 + *v1209;
                                                                                        v1218 = v1211[55];
                                                                                        if (v1217 <= *v1209)
                                                                                        {
LABEL_1364:
                                                                                          v1223 = v1218 + 16 * v1217;
                                                                                          goto LABEL_1365;
                                                                                        }
                                                                                        v1219 = 16 * *v1209;
                                                                                        v1220 = v1214 + 1;
                                                                                        v1221 = 16 * v1214 + 16;
                                                                                        while (1)
                                                                                        {
                                                                                          v1222 = *(_DWORD *)(v1218 + v1219);
                                                                                          if (v1222 >= v1212)
                                                                                            break;
                                                                                          v1219 += 16;
                                                                                          --v1220;
                                                                                          v1221 -= 16;
                                                                                          if (v1220 == 1)
                                                                                            goto LABEL_1364;
                                                                                        }
                                                                                        if (v1222 > v1212)
                                                                                        {
                                                                                          if (v1220)
                                                                                          {
                                                                                            memmove((void *)(v1218 + 16 * v1217 - v1221 + 32), (const void *)(v1218 + v1219), v1221);
                                                                                            v1218 = v1211[55];
                                                                                            v1200 = (int *)v1195[8];
                                                                                          }
                                                                                          v1223 = v1218 + v1219;
LABEL_1365:
                                                                                          *(_DWORD *)v1223 = v1212;
                                                                                          *(_QWORD *)(v1223 + 8) = -1;
                                                                                          ++v1211[41];
                                                                                          ++*v1215;
                                                                                        }
                                                                                      }
                                                                                      v1224 = (uint64_t *)(v1209 + 4);
                                                                                      v1225 = *v1200;
                                                                                      if (*v1200 != -1)
                                                                                      {
                                                                                        v1226 = *v1224;
                                                                                        v1227 = *v1224 + *v1209;
                                                                                        v1228 = v1211[49];
                                                                                        if (v1227 <= *v1209)
                                                                                        {
LABEL_1371:
                                                                                          v1233 = v1228 + 16 * v1227;
                                                                                          goto LABEL_1372;
                                                                                        }
                                                                                        v1229 = 16 * *v1209;
                                                                                        v1230 = v1226 + 1;
                                                                                        v1231 = 16 * v1226 + 16;
                                                                                        while (1)
                                                                                        {
                                                                                          v1232 = *(_DWORD *)(v1228 + v1229);
                                                                                          if (v1232 >= v1225)
                                                                                            break;
                                                                                          v1229 += 16;
                                                                                          --v1230;
                                                                                          v1231 -= 16;
                                                                                          if (v1230 == 1)
                                                                                            goto LABEL_1371;
                                                                                        }
                                                                                        if (v1232 > v1225)
                                                                                        {
                                                                                          if (v1230)
                                                                                          {
                                                                                            memmove((void *)(v1228 + 16 * v1227 - v1231 + 32), (const void *)(v1228 + v1229), v1231);
                                                                                            v1228 = v1211[49];
                                                                                          }
                                                                                          v1233 = v1228 + v1229;
LABEL_1372:
                                                                                          *(_DWORD *)v1233 = v1225;
                                                                                          *(_QWORD *)(v1233 + 8) = -1;
                                                                                          ++v1211[39];
                                                                                          ++*v1224;
                                                                                        }
                                                                                      }
                                                                                      v1234 = *(_DWORD *)v1195[9];
                                                                                      if (v1234 != -1)
                                                                                      {
                                                                                        v1235 = *v1224;
                                                                                        v1236 = *v1224 + *v1209;
                                                                                        v1237 = v1211[49];
                                                                                        if (v1236 <= *v1209)
                                                                                        {
LABEL_1378:
                                                                                          v1242 = v1237 + 16 * v1236;
                                                                                          goto LABEL_1379;
                                                                                        }
                                                                                        v1238 = 16 * *v1209;
                                                                                        v1239 = v1235 + 1;
                                                                                        v1240 = 16 * v1235 + 16;
                                                                                        while (1)
                                                                                        {
                                                                                          v1241 = *(_DWORD *)(v1237 + v1238);
                                                                                          if (v1241 >= v1234)
                                                                                            break;
                                                                                          v1238 += 16;
                                                                                          --v1239;
                                                                                          v1240 -= 16;
                                                                                          if (v1239 == 1)
                                                                                            goto LABEL_1378;
                                                                                        }
                                                                                        if (v1241 > v1234)
                                                                                        {
                                                                                          if (v1239)
                                                                                          {
                                                                                            memmove((void *)(v1237 + 16 * v1236 - v1240 + 32), (const void *)(v1237 + v1238), v1240);
                                                                                            v1237 = v1211[49];
                                                                                          }
                                                                                          v1242 = v1237 + v1238;
LABEL_1379:
                                                                                          *(_DWORD *)v1242 = v1234;
                                                                                          *(_QWORD *)(v1242 + 8) = -1;
                                                                                          ++v1211[39];
                                                                                          ++*v1224;
                                                                                        }
                                                                                      }
                                                                                      v1243 = *(_DWORD *)v1195[10];
                                                                                      if (v1243 != -1)
                                                                                      {
                                                                                        v1244 = v1207 + 144 * v1206;
                                                                                        v1247 = *(_QWORD *)(v1244 + 112);
                                                                                        v1246 = (_QWORD *)(v1244 + 112);
                                                                                        v1245 = v1247;
                                                                                        v1248 = v1247 + *v1209;
                                                                                        v1249 = v1211[70];
                                                                                        if (v1248 <= *v1209)
                                                                                        {
LABEL_1385:
                                                                                          v1254 = v1249 + 16 * v1248;
                                                                                          goto LABEL_1386;
                                                                                        }
                                                                                        v1250 = 16 * *v1209;
                                                                                        v1251 = v1245 + 1;
                                                                                        v1252 = 16 * v1245 + 16;
                                                                                        while (1)
                                                                                        {
                                                                                          v1253 = *(_DWORD *)(v1249 + v1250);
                                                                                          if (v1253 >= v1243)
                                                                                            break;
                                                                                          v1250 += 16;
                                                                                          --v1251;
                                                                                          v1252 -= 16;
                                                                                          if (v1251 == 1)
                                                                                            goto LABEL_1385;
                                                                                        }
                                                                                        if (v1253 > v1243)
                                                                                        {
                                                                                          if (v1251)
                                                                                          {
                                                                                            memmove((void *)(v1249 + 16 * v1248 - v1252 + 32), (const void *)(v1249 + v1250), v1252);
                                                                                            v1249 = v1211[70];
                                                                                          }
                                                                                          v1254 = v1249 + v1250;
LABEL_1386:
                                                                                          *(_DWORD *)v1254 = v1243;
                                                                                          *(_QWORD *)(v1254 + 8) = -1;
                                                                                          ++v1211[46];
                                                                                          ++*v1246;
                                                                                        }
                                                                                      }
                                                                                      v1255 = *(_DWORD *)v1195[11];
                                                                                      if (v1255 != -1)
                                                                                      {
                                                                                        v1256 = v1207 + 144 * v1206;
                                                                                        v1259 = *(_QWORD *)(v1256 + 120);
                                                                                        v1258 = (_QWORD *)(v1256 + 120);
                                                                                        v1257 = v1259;
                                                                                        v1260 = v1259 + *v1209;
                                                                                        v1261 = v1211[73];
                                                                                        if (v1260 <= *v1209)
                                                                                        {
LABEL_1392:
                                                                                          v1266 = v1261 + 16 * v1260;
                                                                                          goto LABEL_1393;
                                                                                        }
                                                                                        v1262 = 16 * *v1209;
                                                                                        v1263 = v1257 + 1;
                                                                                        v1264 = 16 * v1257 + 16;
                                                                                        while (1)
                                                                                        {
                                                                                          v1265 = *(_DWORD *)(v1261 + v1262);
                                                                                          if (v1265 >= v1255)
                                                                                            break;
                                                                                          v1262 += 16;
                                                                                          --v1263;
                                                                                          v1264 -= 16;
                                                                                          if (v1263 == 1)
                                                                                            goto LABEL_1392;
                                                                                        }
                                                                                        if (v1265 > v1255)
                                                                                        {
                                                                                          if (v1263)
                                                                                          {
                                                                                            memmove((void *)(v1261 + 16 * v1260 - v1264 + 32), (const void *)(v1261 + v1262), v1264);
                                                                                            v1261 = v1211[73];
                                                                                          }
                                                                                          v1266 = v1261 + v1262;
LABEL_1393:
                                                                                          *(_DWORD *)v1266 = v1255;
                                                                                          *(_QWORD *)(v1266 + 8) = -1;
                                                                                          ++v1211[47];
                                                                                          ++*v1258;
                                                                                        }
                                                                                      }
                                                                                      v1267 = *(_DWORD *)v1195[12];
                                                                                      if (v1267 == -1)
                                                                                        goto LABEL_1344;
                                                                                      v1268 = v1207 + 144 * v1206;
                                                                                      v1271 = *(_QWORD *)(v1268 + 128);
                                                                                      v1270 = (_QWORD *)(v1268 + 128);
                                                                                      v1269 = v1271;
                                                                                      v1272 = v1271 + *v1209;
                                                                                      v1273 = v1211[76];
                                                                                      if (v1272 <= *v1209)
                                                                                      {
LABEL_1341:
                                                                                        v1198 = v1273 + 16 * v1272;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1274 = 16 * *v1209;
                                                                                        v1275 = v1269 + 1;
                                                                                        v1276 = 16 * v1269 + 16;
                                                                                        while (1)
                                                                                        {
                                                                                          v1277 = *(_DWORD *)(v1273 + v1274);
                                                                                          if (v1277 >= v1267)
                                                                                            break;
                                                                                          v1274 += 16;
                                                                                          --v1275;
                                                                                          v1276 -= 16;
                                                                                          if (v1275 == 1)
                                                                                            goto LABEL_1341;
                                                                                        }
                                                                                        if (v1277 <= v1267)
                                                                                          goto LABEL_1344;
                                                                                        if (v1275)
                                                                                        {
                                                                                          memmove((void *)(v1273 + 16 * v1272 - v1276 + 32), (const void *)(v1273 + v1274), v1276);
                                                                                          v1273 = v1211[76];
                                                                                        }
                                                                                        v1198 = v1273 + v1274;
                                                                                      }
                                                                                      *(_DWORD *)v1198 = v1267;
                                                                                      *(_QWORD *)(v1198 + 8) = -1;
                                                                                      ++v1211[48];
                                                                                      goto LABEL_1343;
                                                                                    }
LABEL_1426:
                                                                                    v1 = v2031;
                                                                                    v1280 = 6 * v2031[2397];
                                                                                    v1281 = v2031[2367];
                                                                                    v1282 = (v2031[2368] - v1281) >> 3;
                                                                                    if (v1280 <= v1282)
                                                                                    {
                                                                                      v22 = v1999;
                                                                                      v21 = v2000;
                                                                                      v18 = v1997;
                                                                                      v20 = v1998;
                                                                                      if (v1280 < v1282)
                                                                                        v2031[2368] = v1281 + 48 * v2031[2397];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20E93D8FC((uint64_t)(v2031 + 2367), v1280 - v1282);
                                                                                      v22 = v1999;
                                                                                      v21 = v2000;
                                                                                      v18 = v1997;
                                                                                      v20 = v1998;
                                                                                    }
                                                                                    v1283 = v2031[2407];
                                                                                    v1284 = v2031[2408];
                                                                                    if (v1283 != v1284)
                                                                                    {
                                                                                      v1285 = 0;
                                                                                      do
                                                                                      {
                                                                                        if (*(_DWORD *)v1283 != -1)
                                                                                        {
                                                                                          *(_QWORD *)(v1283 + 8) = v1285;
                                                                                          v1285 += 6;
                                                                                        }
                                                                                        v1283 += 16;
                                                                                      }
                                                                                      while (v1283 != v1284);
                                                                                    }
                                                                                    v1286 = 9 * v2031[2398];
                                                                                    v1287 = v2031[2370];
                                                                                    v1288 = (v2031[2371] - v1287) >> 3;
                                                                                    if (v1286 <= v1288)
                                                                                    {
                                                                                      if (v1286 < v1288)
                                                                                        v2031[2371] = v1287 + 72 * v2031[2398];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20E93D8FC((uint64_t)(v2031 + 2370), v1286 - v1288);
                                                                                    }
                                                                                    v1289 = v2031[2410];
                                                                                    v1290 = v2031[2411];
                                                                                    if (v1289 != v1290)
                                                                                    {
                                                                                      v1291 = 0;
                                                                                      do
                                                                                      {
                                                                                        if (*(_DWORD *)v1289 != -1)
                                                                                        {
                                                                                          *(_QWORD *)(v1289 + 8) = v1291;
                                                                                          v1291 += 9;
                                                                                        }
                                                                                        v1289 += 16;
                                                                                      }
                                                                                      while (v1289 != v1290);
                                                                                    }
                                                                                    v1292 = 6 * v2031[2399];
                                                                                    v1293 = v2031[2373];
                                                                                    v1294 = (v2031[2374] - v1293) >> 3;
                                                                                    if (v1292 <= v1294)
                                                                                    {
                                                                                      if (v1292 < v1294)
                                                                                        v2031[2374] = v1293 + 48 * v2031[2399];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20E93D8FC((uint64_t)(v2031 + 2373), v1292 - v1294);
                                                                                    }
                                                                                    v1295 = v2031[2413];
                                                                                    v1296 = v2031[2414];
                                                                                    if (v1295 != v1296)
                                                                                    {
                                                                                      v1297 = 0;
                                                                                      do
                                                                                      {
                                                                                        if (*(_DWORD *)v1295 != -1)
                                                                                        {
                                                                                          *(_QWORD *)(v1295 + 8) = v1297;
                                                                                          v1297 += 6;
                                                                                        }
                                                                                        v1295 += 16;
                                                                                      }
                                                                                      while (v1295 != v1296);
                                                                                    }
                                                                                    v1298 = 6 * v2031[2400];
                                                                                    v1299 = v2031[2376];
                                                                                    v1300 = (v2031[2377] - v1299) >> 3;
                                                                                    if (v1298 <= v1300)
                                                                                    {
                                                                                      if (v1298 < v1300)
                                                                                        v2031[2377] = v1299 + 48 * v2031[2400];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20E93D8FC((uint64_t)(v2031 + 2376), v1298 - v1300);
                                                                                    }
                                                                                    v1301 = v2031[2416];
                                                                                    v1302 = v2031[2417];
                                                                                    if (v1301 != v1302)
                                                                                    {
                                                                                      v1303 = 0;
                                                                                      do
                                                                                      {
                                                                                        if (*(_DWORD *)v1301 != -1)
                                                                                        {
                                                                                          *(_QWORD *)(v1301 + 8) = v1303;
                                                                                          v1303 += 6;
                                                                                        }
                                                                                        v1301 += 16;
                                                                                      }
                                                                                      while (v1301 != v1302);
                                                                                    }
                                                                                    v1304 = 3 * v2031[2401];
                                                                                    v1305 = v2031[2379];
                                                                                    v1306 = (v2031[2380] - v1305) >> 3;
                                                                                    if (v1304 <= v1306)
                                                                                    {
                                                                                      if (v1304 < v1306)
                                                                                        v2031[2380] = v1305 + 24 * v2031[2401];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20E93D8FC((uint64_t)(v2031 + 2379), v1304 - v1306);
                                                                                    }
                                                                                    v1307 = v2031[2419];
                                                                                    v1308 = v2031[2420];
                                                                                    if (v1307 != v1308)
                                                                                    {
                                                                                      v1309 = 0;
                                                                                      do
                                                                                      {
                                                                                        if (*(_DWORD *)v1307 != -1)
                                                                                        {
                                                                                          *(_QWORD *)(v1307 + 8) = v1309;
                                                                                          v1309 += 3;
                                                                                        }
                                                                                        v1307 += 16;
                                                                                      }
                                                                                      while (v1307 != v1308);
                                                                                    }
                                                                                    v1310 = v2031[2402];
                                                                                    v1311 = v2031[2382];
                                                                                    v1312 = (v2031[2383] - v1311) >> 3;
                                                                                    if (v1310 <= v1312)
                                                                                    {
                                                                                      if (v1310 < v1312)
                                                                                        v2031[2383] = v1311 + 8 * v1310;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20E93D8FC((uint64_t)(v2031 + 2382), v1310 - v1312);
                                                                                    }
                                                                                    v1313 = v2031[2422];
                                                                                    v1314 = v2031[2423];
                                                                                    if (v1313 != v1314)
                                                                                    {
                                                                                      v1315 = 0;
                                                                                      do
                                                                                      {
                                                                                        if (*(_DWORD *)v1313 != -1)
                                                                                          *(_QWORD *)(v1313 + 8) = v1315++;
                                                                                        v1313 += 16;
                                                                                      }
                                                                                      while (v1313 != v1314);
                                                                                    }
                                                                                    v1316 = 3 * v2031[2403];
                                                                                    v1317 = v2031[2385];
                                                                                    v1318 = (v2031[2386] - v1317) >> 3;
                                                                                    if (v1316 <= v1318)
                                                                                    {
                                                                                      if (v1316 < v1318)
                                                                                        v2031[2386] = v1317 + 24 * v2031[2403];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20E93D8FC((uint64_t)(v2031 + 2385), v1316 - v1318);
                                                                                    }
                                                                                    v1319 = v2031[2425];
                                                                                    v1320 = v2031[2426];
                                                                                    if (v1319 != v1320)
                                                                                    {
                                                                                      v1321 = 0;
                                                                                      do
                                                                                      {
                                                                                        if (*(_DWORD *)v1319 != -1)
                                                                                        {
                                                                                          *(_QWORD *)(v1319 + 8) = v1321;
                                                                                          v1321 += 3;
                                                                                        }
                                                                                        v1319 += 16;
                                                                                      }
                                                                                      while (v1319 != v1320);
                                                                                    }
                                                                                    v1322 = 4 * v2031[2404];
                                                                                    v1323 = v2031[2388];
                                                                                    v1324 = (v2031[2389] - v1323) >> 3;
                                                                                    if (v1322 <= v1324)
                                                                                    {
                                                                                      if (v1322 < v1324)
                                                                                        v2031[2389] = v1323 + 32 * v2031[2404];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20E93D8FC((uint64_t)(v2031 + 2388), v1322 - v1324);
                                                                                    }
                                                                                    v1325 = v2031[2428];
                                                                                    v1326 = v2031[2429];
                                                                                    if (v1325 != v1326)
                                                                                    {
                                                                                      v1327 = 0;
                                                                                      do
                                                                                      {
                                                                                        if (*(_DWORD *)v1325 != -1)
                                                                                        {
                                                                                          *(_QWORD *)(v1325 + 8) = v1327;
                                                                                          v1327 += 4;
                                                                                        }
                                                                                        v1325 += 16;
                                                                                      }
                                                                                      while (v1325 != v1326);
                                                                                    }
                                                                                    v1328 = 4 * v2031[2405];
                                                                                    v1329 = v2031[2391];
                                                                                    v1330 = (v2031[2392] - v1329) >> 3;
                                                                                    if (v1328 <= v1330)
                                                                                    {
                                                                                      if (v1328 < v1330)
                                                                                        v2031[2392] = v1329 + 32 * v2031[2405];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20E93D8FC((uint64_t)(v2031 + 2391), v1328 - v1330);
                                                                                    }
                                                                                    v1331 = v2031[2431];
                                                                                    v1332 = v2031[2432];
                                                                                    if (v1331 != v1332)
                                                                                    {
                                                                                      v1333 = 0;
                                                                                      do
                                                                                      {
                                                                                        if (*(_DWORD *)v1331 != -1)
                                                                                        {
                                                                                          *(_QWORD *)(v1331 + 8) = v1333;
                                                                                          v1333 += 4;
                                                                                        }
                                                                                        v1331 += 16;
                                                                                      }
                                                                                      while (v1331 != v1332);
                                                                                    }
                                                                                    v1334 = 3 * v2031[2406];
                                                                                    v1335 = v2031[2394];
                                                                                    v1336 = (v2031[2395] - v1335) >> 3;
                                                                                    if (v1334 <= v1336)
                                                                                    {
                                                                                      if (v1334 < v1336)
                                                                                        v2031[2395] = v1335 + 24 * v2031[2406];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      sub_20E93D8FC((uint64_t)(v2031 + 2394), v1334 - v1336);
                                                                                    }
                                                                                    v1337 = v2031[2434];
                                                                                    v1338 = v2031[2435];
                                                                                    if (v1337 != v1338)
                                                                                    {
                                                                                      v1339 = 0;
                                                                                      do
                                                                                      {
                                                                                        if (*(_DWORD *)v1337 != -1)
                                                                                        {
                                                                                          *(_QWORD *)(v1337 + 8) = v1339;
                                                                                          v1339 += 3;
                                                                                        }
                                                                                        v1337 += 16;
                                                                                      }
                                                                                      while (v1337 != v1338);
                                                                                    }
                                                                                    if ((_QWORD)v2032)
                                                                                    {
                                                                                      v1340 = v2024[121];
                                                                                      for (kk = v2024[122];
                                                                                            v1340 != kk;
                                                                                            v1340 += 16)
                                                                                      {
                                                                                        v1342 = *(_QWORD *)(v1340 + 8);
                                                                                        if (!*(_BYTE *)(v1342 + 20))
                                                                                          *(_DWORD *)v1342 = -1;
                                                                                      }
                                                                                    }
                                                                                    kdebug_trace();
                                                                                    v17 = v1995;
                                                                                    v19 = v1996;
                                                                                    v16 = v1993;
                                                                                    v15 = v1994;
                                                                                    v12 = v1991;
                                                                                    v13 = v1992;
                                                                                    v11 = v1989;
                                                                                    v14 = v1990;
                                                                                    v7 = v1987;
                                                                                    v10 = v1988;
                                                                                    v8 = v1985;
                                                                                    v9 = v1986;
                                                                                    v5 = v1983;
                                                                                    v4 = v1984;
                                                                                    v6 = v1981;
                                                                                    v3 = v1982;
LABEL_1523:
                                                                                    if (((unint64_t)(v5 - v6) >> 2)
                                                                                       + ((unint64_t)(v4 - v3) >> 2)
                                                                                       + ((unint64_t)(v7 - v8) >> 2)
                                                                                       + ((unint64_t)(v10 - v9) >> 2)
                                                                                       + ((unint64_t)(v12 - v11) >> 2)
                                                                                       + ((unint64_t)(v13 - v14) >> 2)
                                                                                       + ((unint64_t)(v15 - v16) >> 2)
                                                                                       + ((unint64_t)(v18 - v17) >> 2)
                                                                                       + ((unint64_t)(v20 - v19) >> 2)
                                                                                       + ((unint64_t)(v21 - v22) >> 2))
                                                                                    {
                                                                                      return 0;
                                                                                    }
                                                                                    if (*((_BYTE *)v1 + 1944))
                                                                                    {
                                                                                      v1344 = v1[42];
                                                                                      v1345 = v1[43];
                                                                                      if (v1344 == v1345)
                                                                                      {
                                                                                        v1346 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1346 = 0;
                                                                                        do
                                                                                        {
                                                                                          v1347 = *(_QWORD *)(v1344 + 8);
                                                                                          if ((*(_BYTE *)(v1347 + 4) & 6) == 0
                                                                                            && *(_BYTE *)(v1347 + 20))
                                                                                          {
                                                                                            v1346 += 6;
                                                                                          }
                                                                                          v1344 += 16;
                                                                                        }
                                                                                        while (v1344 != v1345);
                                                                                      }
                                                                                      for (mm = v1[54];
                                                                                            mm != v1[55];
                                                                                            mm += 16)
                                                                                      {
                                                                                        v1352 = *(_QWORD *)(mm + 8);
                                                                                        if ((*(_BYTE *)(v1352 + 4) & 6) == 0
                                                                                          && *(_BYTE *)(v1352 + 20))
                                                                                        {
                                                                                          v1346 += 9;
                                                                                        }
                                                                                      }
                                                                                      for (nn = v1[66];
                                                                                            nn != v1[67];
                                                                                            nn += 16)
                                                                                      {
                                                                                        v1354 = *(_QWORD *)(nn + 8);
                                                                                        if ((*(_BYTE *)(v1354 + 4) & 6) == 0
                                                                                          && *(_BYTE *)(v1354 + 20))
                                                                                        {
                                                                                          v1346 += 6;
                                                                                        }
                                                                                      }
                                                                                      for (i1 = v1[78];
                                                                                            i1 != v1[79];
                                                                                            i1 += 16)
                                                                                      {
                                                                                        v1356 = *(_QWORD *)(i1 + 8);
                                                                                        if ((*(_BYTE *)(v1356 + 4) & 6) == 0
                                                                                          && *(_BYTE *)(v1356 + 20))
                                                                                        {
                                                                                          v1346 += 6;
                                                                                        }
                                                                                      }
                                                                                      for (i2 = v1[90];
                                                                                            i2 != v1[91];
                                                                                            i2 += 16)
                                                                                      {
                                                                                        v1358 = *(_QWORD *)(i2 + 8);
                                                                                        if ((*(_BYTE *)(v1358 + 4) & 6) == 0
                                                                                          && *(_BYTE *)(v1358 + 20))
                                                                                        {
                                                                                          v1346 += 3;
                                                                                        }
                                                                                      }
                                                                                      for (i3 = v1[102];
                                                                                            i3 != v1[103];
                                                                                            i3 += 16)
                                                                                      {
                                                                                        v1360 = *(_QWORD *)(i3 + 8);
                                                                                        if ((*(_BYTE *)(v1360 + 4) & 6) == 0)
                                                                                          v1346 += *(unsigned __int8 *)(v1360 + 20);
                                                                                      }
                                                                                      for (i4 = v1[114];
                                                                                            i4 != v1[115];
                                                                                            i4 += 16)
                                                                                      {
                                                                                        v1362 = *(_QWORD *)(i4 + 8);
                                                                                        if ((*(_BYTE *)(v1362 + 4) & 6) == 0
                                                                                          && *(_BYTE *)(v1362 + 20))
                                                                                        {
                                                                                          v1346 += 3;
                                                                                        }
                                                                                      }
                                                                                      for (i5 = v1[126];
                                                                                            i5 != v1[127];
                                                                                            i5 += 16)
                                                                                      {
                                                                                        v1364 = *(_QWORD *)(i5 + 8);
                                                                                        if ((*(_BYTE *)(v1364 + 4) & 6) == 0
                                                                                          && *(_BYTE *)(v1364 + 20))
                                                                                        {
                                                                                          v1346 += 4;
                                                                                        }
                                                                                      }
                                                                                      for (i6 = v1[138];
                                                                                            i6 != v1[139];
                                                                                            i6 += 16)
                                                                                      {
                                                                                        v1366 = *(_QWORD *)(i6 + 8);
                                                                                        if ((*(_BYTE *)(v1366 + 4) & 6) == 0
                                                                                          && *(_BYTE *)(v1366 + 20))
                                                                                        {
                                                                                          v1346 += 4;
                                                                                        }
                                                                                      }
                                                                                      for (i7 = v1[150];
                                                                                            i7 != v1[151];
                                                                                            i7 += 16)
                                                                                      {
                                                                                        v1368 = *(_QWORD *)(i7 + 8);
                                                                                        if ((*(_BYTE *)(v1368 + 4) & 6) == 0
                                                                                          && *(_BYTE *)(v1368 + 20))
                                                                                        {
                                                                                          v1346 += 3;
                                                                                        }
                                                                                      }
                                                                                      for (i8 = v1[162];
                                                                                            i8 != v1[163];
                                                                                            i8 += 16)
                                                                                      {
                                                                                        v1370 = *(_QWORD *)(i8 + 8);
                                                                                        if ((*(_BYTE *)(v1370 + 4) & 6) == 0)
                                                                                          v1346 += *(unsigned __int8 *)(v1370 + 20);
                                                                                      }
                                                                                      goto LABEL_1600;
                                                                                    }
                                                                                    memset(v2039, 0, 28);
                                                                                    v2038 = 0u;
                                                                                    if (sub_20F8DEE48(v2009, v2038.i32, &v2032, 0))
                                                                                    {
                                                                                      v1[344] = v1[343];
                                                                                      v1[347] = v1[346];
                                                                                      v1[350] = v1[349];
                                                                                      v1[353] = v1[352];
                                                                                      v1[356] = v1[355];
                                                                                      v1[359] = v1[358];
                                                                                      v1[362] = v1[361];
                                                                                      v1[365] = v1[364];
                                                                                      v1[368] = v1[367];
                                                                                      v1[371] = v1[370];
                                                                                      v1[374] = v1[373];
                                                                                      v1348 = v1[174];
                                                                                      v1349 = v1[175];
                                                                                      while (v1348 != v1349)
                                                                                      {
                                                                                        v1350 = *(_QWORD *)(v1348 + 208);
                                                                                        if (*(_BYTE *)(v1348 + 496)
                                                                                          || (*(_BYTE *)(v1350 + 4) & 6) != 0
                                                                                          || (*(_BYTE *)(*(_QWORD *)(v1348 + 216) + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F394A20((uint64_t)(v1 + 343), v1350);
                                                                                          sub_20F3D35E0(v1 + 343, *(_QWORD *)(v1348 + 216));
                                                                                        }
                                                                                        v1348 += 504;
                                                                                      }
                                                                                      v1375 = v1[177];
                                                                                      v1376 = v1[178];
                                                                                      while (v1375 != v1376)
                                                                                      {
                                                                                        v1377 = *(_QWORD *)(v1375 + 136);
                                                                                        if (*(_BYTE *)(v1375 + 272)
                                                                                          || (*(_BYTE *)(v1377 + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F394A20((uint64_t)(v1 + 343), v1377);
                                                                                        }
                                                                                        v1375 += 280;
                                                                                      }
                                                                                      v1378 = v1[180];
                                                                                      v1379 = v1[181];
                                                                                      while (v1378 != v1379)
                                                                                      {
                                                                                        v1380 = *(_QWORD *)(v1378 + 136);
                                                                                        if (*(_BYTE *)(v1378 + 272)
                                                                                          || (*(_BYTE *)(v1380 + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F599C88(v1 + 343, v1380);
                                                                                        }
                                                                                        v1378 += 280;
                                                                                      }
                                                                                      v1381 = v1[183];
                                                                                      v1382 = v1[184];
                                                                                      while (v1381 != v1382)
                                                                                      {
                                                                                        v1383 = *(_QWORD *)(v1381 + 136);
                                                                                        if (*(_BYTE *)(v1381 + 272)
                                                                                          || (*(_BYTE *)(v1383 + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F59A480(v1 + 343, v1383);
                                                                                        }
                                                                                        v1381 += 280;
                                                                                      }
                                                                                      v1384 = v1[186];
                                                                                      v1385 = v1[187];
                                                                                      while (v1384 != v1385)
                                                                                      {
                                                                                        v1386 = *(_QWORD *)(v1384 + 64);
                                                                                        if (*(_BYTE *)(v1384 + 152)
                                                                                          || (*(_BYTE *)(v1386 + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F59A2E8(v1 + 343, v1386);
                                                                                        }
                                                                                        v1384 += 160;
                                                                                      }
                                                                                      sub_20FA5640C(v1[189], v1[190], v1 + 343);
                                                                                      sub_20F5B85BC(v1[192], v1[193], v1 + 343);
                                                                                      v1387 = v1[195];
                                                                                      v1388 = v1[196];
                                                                                      while (v1387 != v1388)
                                                                                      {
                                                                                        v1389 = *(_QWORD *)(v1387 + 48);
                                                                                        if (*(_BYTE *)(v1387 + 136)
                                                                                          || (*(_BYTE *)(v1389 + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F3D35E0(v1 + 343, v1389);
                                                                                        }
                                                                                        v1387 += 144;
                                                                                      }
                                                                                      v1390 = v1[198];
                                                                                      v1391 = v1[199];
                                                                                      while (v1390 != v1391)
                                                                                      {
                                                                                        v1392 = *(_QWORD *)(v1390 + 48);
                                                                                        if (*(_BYTE *)(v1390 + 144)
                                                                                          || (*(_BYTE *)(v1392 + 4) & 6) != 0
                                                                                          || (*(_BYTE *)(*(_QWORD *)(v1390 + 56) + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F394A20((uint64_t)(v1 + 343), v1392);
                                                                                          sub_20F394A20((uint64_t)(v1 + 343), *(_QWORD *)(v1390 + 56));
                                                                                        }
                                                                                        v1390 += 152;
                                                                                      }
                                                                                      sub_20FA56358(v1[201], v1[202], v1 + 343);
                                                                                      sub_20F8DF65C(v1[204], v1[205], v1 + 343);
                                                                                      v1393 = v1[207];
                                                                                      v1394 = v1[208];
                                                                                      while (v1393 != v1394)
                                                                                      {
                                                                                        v1395 = *(_QWORD *)(v1393 + 48);
                                                                                        if (*(_BYTE *)(v1393 + 104)
                                                                                          || (*(_BYTE *)(v1395 + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F59A150(v1 + 343, v1395);
                                                                                        }
                                                                                        v1393 += 112;
                                                                                      }
                                                                                      v1396 = v1[210];
                                                                                      v1397 = v1[211];
                                                                                      while (v1396 != v1397)
                                                                                      {
                                                                                        v1398 = *(_QWORD *)(v1396 + 96);
                                                                                        if (*(_BYTE *)(v1396 + 200)
                                                                                          || (*(_BYTE *)(v1398 + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F599E20(v1 + 343, v1398);
                                                                                        }
                                                                                        v1396 += 208;
                                                                                      }
                                                                                      v1399 = v1[213];
                                                                                      v1400 = v1[214];
                                                                                      while (v1399 != v1400)
                                                                                      {
                                                                                        v1401 = *(_QWORD *)(v1399 + 96);
                                                                                        if (*(_BYTE *)(v1399 + 200)
                                                                                          || (*(_BYTE *)(v1401 + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F8DAC28(v1 + 343, v1401);
                                                                                        }
                                                                                        v1399 += 208;
                                                                                      }
                                                                                      v1402 = v1[216];
                                                                                      v1403 = v1[217];
                                                                                      while (v1402 != v1403)
                                                                                      {
                                                                                        v1404 = *(_QWORD *)(v1402 + 80);
                                                                                        if (*(_BYTE *)(v1402 + 168)
                                                                                          || (*(_BYTE *)(v1404 + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F8DADC0(v1 + 343, v1404);
                                                                                        }
                                                                                        v1402 += 176;
                                                                                      }
                                                                                      v1405 = v1[219];
                                                                                      v1406 = v1[220];
                                                                                      while (v1405 != v1406)
                                                                                      {
                                                                                        v1407 = *(_QWORD *)(v1405 + 80);
                                                                                        if (*(_BYTE *)(v1405 + 168)
                                                                                          || (*(_BYTE *)(v1407 + 4) & 6) != 0)
                                                                                        {
                                                                                          sub_20F599FB8(v1 + 343, v1407);
                                                                                        }
                                                                                        v1405 += 176;
                                                                                      }
                                                                                      sub_20FA561E0(v1[222], v1[223], v1 + 343);
                                                                                      sub_20FA560F4(v1[225], v1[226], v1 + 343);
                                                                                      sub_20FA55F7C(v1[228], v1[229], v1 + 343);
                                                                                      sub_20FA55E74(v1[231], v1[232], v1 + 343);
                                                                                      v1408 = (v1[344] - v1[343]) >> 2;
                                                                                      if (v2038.i32[0] > v1408)
                                                                                        LODWORD(v1408) = v2038.i32[0];
                                                                                      v918 = v2032 >= v1408;
                                                                                      v1409 = v2032 - v1408;
                                                                                      if (!v918)
                                                                                        v1409 = 0;
                                                                                      v1410 = (v1[347] - v1[346]) >> 2;
                                                                                      if (v2038.i32[1] > v1410)
                                                                                        LODWORD(v1410) = v2038.i32[1];
                                                                                      v918 = DWORD1(v2032) >= v1410;
                                                                                      v1411 = DWORD1(v2032) - v1410;
                                                                                      if (!v918)
                                                                                        v1411 = 0;
                                                                                      v1412 = (v1[350] - v1[349]) >> 2;
                                                                                      if (v2038.i32[2] > v1412)
                                                                                        LODWORD(v1412) = v2038.i32[2];
                                                                                      v918 = DWORD2(v2032) >= v1412;
                                                                                      v1413 = DWORD2(v2032) - v1412;
                                                                                      if (!v918)
                                                                                        v1413 = 0;
                                                                                      v1414 = (v1[353] - v1[352]) >> 2;
                                                                                      if (v2038.i32[3] > v1414)
                                                                                        LODWORD(v1414) = v2038.i32[3];
                                                                                      v918 = HIDWORD(v2032) >= v1414;
                                                                                      v1415 = HIDWORD(v2032) - v1414;
                                                                                      if (!v918)
                                                                                        v1415 = 0;
                                                                                      v1416 = (v1[356] - v1[355]) >> 2;
                                                                                      if (v2039[0].i32[0] > v1416)
                                                                                        LODWORD(v1416) = v2039[0].i32[0];
                                                                                      v918 = v2033 >= v1416;
                                                                                      v1417 = v2033 - v1416;
                                                                                      if (v918)
                                                                                        v1418 = v1417;
                                                                                      else
                                                                                        v1418 = 0;
                                                                                      v1419 = (v1[359] - v1[358]) >> 2;
                                                                                      if (v2039[0].i32[1] > v1419)
                                                                                        LODWORD(v1419) = v2039[0].i32[1];
                                                                                      v918 = DWORD1(v2033) >= v1419;
                                                                                      v1420 = DWORD1(v2033) - v1419;
                                                                                      if (!v918)
                                                                                        v1420 = 0;
                                                                                      v1421 = (v1[362] - v1[361]) >> 2;
                                                                                      if (v2039[0].i32[2] > v1421)
                                                                                        LODWORD(v1421) = v2039[0].i32[2];
                                                                                      v918 = DWORD2(v2033) >= v1421;
                                                                                      v1422 = DWORD2(v2033) - v1421;
                                                                                      if (!v918)
                                                                                        v1422 = 0;
                                                                                      v1423 = (v1[365] - v1[364]) >> 2;
                                                                                      if (v2039[0].i32[3] > v1423)
                                                                                        LODWORD(v1423) = v2039[0].i32[3];
                                                                                      v918 = HIDWORD(v2033) >= v1423;
                                                                                      v1424 = HIDWORD(v2033) - v1423;
                                                                                      if (!v918)
                                                                                        v1424 = 0;
                                                                                      v1425 = (v1[368] - v1[367]) >> 2;
                                                                                      if (v2039[1].i32[0] > v1425)
                                                                                        LODWORD(v1425) = v2039[1].i32[0];
                                                                                      v918 = v2034 >= v1425;
                                                                                      v1426 = v2034 - v1425;
                                                                                      if (!v918)
                                                                                        v1426 = 0;
                                                                                      v1427 = (v1[371] - v1[370]) >> 2;
                                                                                      if (v2039[1].i32[1] > v1427)
                                                                                        LODWORD(v1427) = v2039[1].i32[1];
                                                                                      v918 = DWORD1(v2034) >= v1427;
                                                                                      v1428 = DWORD1(v2034) - v1427;
                                                                                      if (!v918)
                                                                                        v1428 = 0;
                                                                                      v1429 = (v1[374] - v1[373]) >> 2;
                                                                                      if (v2039[1].i32[2] > v1429)
                                                                                        LODWORD(v1429) = v2039[1].i32[2];
                                                                                      v918 = DWORD2(v2034) >= v1429;
                                                                                      v1430 = DWORD2(v2034) - v1429;
                                                                                      if (!v918)
                                                                                        v1430 = 0;
                                                                                      v1346 = 9 * v1411
                                                                                            + 6
                                                                                            * (v1413 + v1409 + v1415)
                                                                                            + v1420
                                                                                            + 4 * (v1426 + v1424)
                                                                                            + 3
                                                                                            * (v1422 + v1418 + v1428)
                                                                                            + v1430;
                                                                                      sub_20FA485B8(v2009);
                                                                                      if (!v1346)
                                                                                        return 1;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v1346 = DWORD1(v2033)
                                                                                            + 9 * DWORD1(v2032)
                                                                                            + 6
                                                                                            * (DWORD2(v2032)
                                                                                             + v2032
                                                                                             + HIDWORD(v2032))
                                                                                            + DWORD2(v2034)
                                                                                            + 4
                                                                                            * (v2034 + HIDWORD(v2033))
                                                                                            + 3
                                                                                            * (DWORD2(v2033)
                                                                                             + v2033
                                                                                             + DWORD1(v2034));
LABEL_1600:
                                                                                      if (!v1346)
                                                                                        return 1;
                                                                                    }
                                                                                    if (*((_BYTE *)v1 + 1944)
                                                                                      || !sub_20F9210FC(v2009))
                                                                                    {
                                                                                      v1374 = v1[242];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v1371 = v1[174];
                                                                                      v1372 = v1[175];
                                                                                      if (v1371 == v1372)
                                                                                      {
                                                                                        v1373 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1373 = 0;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1371 + 208) + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(*(_QWORD *)(v1371 + 216) + 4) & 6) == 0)
                                                                                          {
                                                                                            ++v1373;
                                                                                          }
                                                                                          v1371 += 504;
                                                                                        }
                                                                                        while (v1371 != v1372);
                                                                                      }
                                                                                      v2038.i64[0] = 15 * v1373;
                                                                                      v1431 = v1[177];
                                                                                      v1432 = v1[178];
                                                                                      if (v1431 == v1432)
                                                                                      {
                                                                                        v1434 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1433 = v1432 - v1431 - 280;
                                                                                        if (v1433 < 0x118)
                                                                                        {
                                                                                          v1434 = 0;
                                                                                          v1435 = v1[177];
                                                                                          goto LABEL_1748;
                                                                                        }
                                                                                        v1436 = 0;
                                                                                        v1437 = 0;
                                                                                        v1438 = v1433 / 0x118 + 1;
                                                                                        v1435 = v1431
                                                                                              + 280
                                                                                              * (v1438 & 0x1FFFFFFFFFFFFFELL);
                                                                                        v1439 = v1438 & 0x1FFFFFFFFFFFFFELL;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1431 + 136) + 4) & 6) == 0)
                                                                                            ++v1436;
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1431 + 416) + 4) & 6) == 0)
                                                                                            ++v1437;
                                                                                          v1431 += 560;
                                                                                          v1439 -= 2;
                                                                                        }
                                                                                        while (v1439);
                                                                                        v1434 = v1437 + v1436;
                                                                                        if (v1438 != (v1438 & 0x1FFFFFFFFFFFFFELL))
                                                                                        {
                                                                                          do
                                                                                          {
LABEL_1748:
                                                                                            if ((*(_BYTE *)(*(_QWORD *)(v1435 + 136) + 4) & 6) == 0)
                                                                                              ++v1434;
                                                                                            v1435 += 280;
                                                                                          }
                                                                                          while (v1435 != v1432);
                                                                                        }
                                                                                      }
                                                                                      v2038.i64[1] = 6 * v1434;
                                                                                      v1440 = v1[180];
                                                                                      v1441 = v1[181];
                                                                                      if (v1440 == v1441)
                                                                                      {
                                                                                        v1443 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1442 = v1441 - v1440 - 280;
                                                                                        if (v1442 < 0x118)
                                                                                        {
                                                                                          v1443 = 0;
                                                                                          v1444 = v1[180];
                                                                                          goto LABEL_1762;
                                                                                        }
                                                                                        v1445 = 0;
                                                                                        v1446 = 0;
                                                                                        v1447 = v1442 / 0x118 + 1;
                                                                                        v1444 = v1440
                                                                                              + 280
                                                                                              * (v1447 & 0x1FFFFFFFFFFFFFELL);
                                                                                        v1448 = v1447 & 0x1FFFFFFFFFFFFFELL;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1440 + 136) + 4) & 6) == 0)
                                                                                            ++v1445;
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1440 + 416) + 4) & 6) == 0)
                                                                                            ++v1446;
                                                                                          v1440 += 560;
                                                                                          v1448 -= 2;
                                                                                        }
                                                                                        while (v1448);
                                                                                        v1443 = v1446 + v1445;
                                                                                        if (v1447 != (v1447 & 0x1FFFFFFFFFFFFFELL))
                                                                                        {
                                                                                          do
                                                                                          {
LABEL_1762:
                                                                                            if ((*(_BYTE *)(*(_QWORD *)(v1444 + 136) + 4) & 6) == 0)
                                                                                              ++v1443;
                                                                                            v1444 += 280;
                                                                                          }
                                                                                          while (v1444 != v1441);
                                                                                        }
                                                                                      }
                                                                                      v2039[0].i64[0] = 6 * v1443;
                                                                                      v1449 = v1[183];
                                                                                      v1450 = v1[184];
                                                                                      if (v1449 == v1450)
                                                                                      {
                                                                                        v1452 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1451 = v1450 - v1449 - 280;
                                                                                        if (v1451 < 0x118)
                                                                                        {
                                                                                          v1452 = 0;
                                                                                          v1453 = v1[183];
                                                                                          goto LABEL_1776;
                                                                                        }
                                                                                        v1454 = 0;
                                                                                        v1455 = 0;
                                                                                        v1456 = v1451 / 0x118 + 1;
                                                                                        v1453 = v1449
                                                                                              + 280
                                                                                              * (v1456 & 0x1FFFFFFFFFFFFFELL);
                                                                                        v1457 = v1456 & 0x1FFFFFFFFFFFFFELL;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1449 + 136) + 4) & 6) == 0)
                                                                                            ++v1454;
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1449 + 416) + 4) & 6) == 0)
                                                                                            ++v1455;
                                                                                          v1449 += 560;
                                                                                          v1457 -= 2;
                                                                                        }
                                                                                        while (v1457);
                                                                                        v1452 = v1455 + v1454;
                                                                                        if (v1456 != (v1456 & 0x1FFFFFFFFFFFFFELL))
                                                                                        {
                                                                                          do
                                                                                          {
LABEL_1776:
                                                                                            if ((*(_BYTE *)(*(_QWORD *)(v1453 + 136) + 4) & 6) == 0)
                                                                                              ++v1452;
                                                                                            v1453 += 280;
                                                                                          }
                                                                                          while (v1453 != v1450);
                                                                                        }
                                                                                      }
                                                                                      v2039[0].i64[1] = 6 * v1452;
                                                                                      v1458 = v1[186];
                                                                                      v1459 = v1[187];
                                                                                      if (v1458 == v1459)
                                                                                      {
                                                                                        v1461 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1460 = v1459 - v1458 - 160;
                                                                                        if (v1460 < 0xA0)
                                                                                        {
                                                                                          v1461 = 0;
                                                                                          v1462 = v1[186];
                                                                                          goto LABEL_1790;
                                                                                        }
                                                                                        v1463 = 0;
                                                                                        v1464 = 0;
                                                                                        v1465 = v1460 / 0xA0 + 1;
                                                                                        v1462 = v1458
                                                                                              + 160
                                                                                              * (v1465 & 0x3FFFFFFFFFFFFFELL);
                                                                                        v1466 = v1458 + 224;
                                                                                        v1467 = v1465 & 0x3FFFFFFFFFFFFFELL;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1466 - 160) + 4) & 6) == 0)
                                                                                            ++v1463;
                                                                                          if ((*(_BYTE *)(*(_QWORD *)v1466 + 4) & 6) == 0)
                                                                                            ++v1464;
                                                                                          v1466 += 320;
                                                                                          v1467 -= 2;
                                                                                        }
                                                                                        while (v1467);
                                                                                        v1461 = v1464 + v1463;
                                                                                        if (v1465 != (v1465 & 0x3FFFFFFFFFFFFFELL))
                                                                                        {
                                                                                          do
                                                                                          {
LABEL_1790:
                                                                                            if ((*(_BYTE *)(*(_QWORD *)(v1462 + 64) + 4) & 6) == 0)
                                                                                              ++v1461;
                                                                                            v1462 += 160;
                                                                                          }
                                                                                          while (v1462 != v1459);
                                                                                        }
                                                                                      }
                                                                                      v2039[1].i64[0] = 3 * v1461;
                                                                                      v1468 = (_QWORD *)v1[189];
                                                                                      v1469 = (_QWORD *)v1[190];
                                                                                      if (v1468 == v1469)
                                                                                      {
                                                                                        v1470 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1470 = 0;
                                                                                        v1471 = 0;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(v1468[1157] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1468[1158] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1468[1159] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1468[1160] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1468[1161] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1468[1162] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1468[1163] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1468[1164] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1468[1165] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1468[1166] + 4) & 6) == 0)
                                                                                          {
                                                                                            v1470 = ++v1471;
                                                                                          }
                                                                                          v1468 += 1202;
                                                                                        }
                                                                                        while (v1468 != v1469);
                                                                                      }
                                                                                      v2039[1].i64[1] = 15 * v1470;
                                                                                      v1472 = (_QWORD *)v1[192];
                                                                                      v1473 = (_QWORD *)v1[193];
                                                                                      if (v1472 == v1473)
                                                                                      {
                                                                                        v1474 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1474 = 0;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(v1472[628] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1472[629] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1472[630] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1472[631] + 4) & 6) == 0)
                                                                                          {
                                                                                            ++v1474;
                                                                                          }
                                                                                          v1472 += 667;
                                                                                        }
                                                                                        while (v1472 != v1473);
                                                                                      }
                                                                                      v2040.i64[0] = 15 * v1474;
                                                                                      v1475 = v1[195];
                                                                                      v1476 = v1[196];
                                                                                      if (v1475 == v1476)
                                                                                      {
                                                                                        v1478 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1477 = v1476 - v1475 - 144;
                                                                                        if (v1477 < 0x90)
                                                                                        {
                                                                                          v1478 = 0;
                                                                                          v1479 = v1[195];
                                                                                          goto LABEL_1830;
                                                                                        }
                                                                                        v1480 = 0;
                                                                                        v1481 = 0;
                                                                                        v1482 = v1477 / 0x90 + 1;
                                                                                        v1479 = v1475
                                                                                              + 144
                                                                                              * (v1482 & 0x3FFFFFFFFFFFFFELL);
                                                                                        v1483 = v1475 + 192;
                                                                                        v1484 = v1482 & 0x3FFFFFFFFFFFFFELL;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1483 - 144) + 4) & 6) == 0)
                                                                                            ++v1480;
                                                                                          if ((*(_BYTE *)(*(_QWORD *)v1483 + 4) & 6) == 0)
                                                                                            ++v1481;
                                                                                          v1483 += 288;
                                                                                          v1484 -= 2;
                                                                                        }
                                                                                        while (v1484);
                                                                                        v1478 = v1481 + v1480;
                                                                                        if (v1482 != (v1482 & 0x3FFFFFFFFFFFFFELL))
                                                                                        {
                                                                                          do
                                                                                          {
LABEL_1830:
                                                                                            if ((*(_BYTE *)(*(_QWORD *)(v1479 + 48) + 4) & 6) == 0)
                                                                                              ++v1478;
                                                                                            v1479 += 144;
                                                                                          }
                                                                                          while (v1479 != v1476);
                                                                                        }
                                                                                      }
                                                                                      v2040.i64[1] = 3 * v1478;
                                                                                      v1485 = v1[198];
                                                                                      v1486 = v1[199];
                                                                                      if (v1485 == v1486)
                                                                                      {
                                                                                        v1487 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1487 = 0;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1485 + 48) + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(*(_QWORD *)(v1485 + 56) + 4) & 6) == 0)
                                                                                          {
                                                                                            ++v1487;
                                                                                          }
                                                                                          v1485 += 152;
                                                                                        }
                                                                                        while (v1485 != v1486);
                                                                                      }
                                                                                      v2041.i64[0] = 3 * v1487;
                                                                                      v1488 = (_QWORD *)v1[201];
                                                                                      v1489 = (_QWORD *)v1[202];
                                                                                      if (v1488 == v1489)
                                                                                      {
                                                                                        v1490 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1490 = 0;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(v1488[25] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1488[26] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1488[27] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1488[28] + 4) & 6) == 0)
                                                                                          {
                                                                                            ++v1490;
                                                                                          }
                                                                                          v1488 += 38;
                                                                                        }
                                                                                        while (v1488 != v1489);
                                                                                      }
                                                                                      v2041.i64[1] = 2 * v1490;
                                                                                      v1491 = (_QWORD *)v1[204];
                                                                                      v1492 = (_QWORD *)v1[205];
                                                                                      if (v1491 == v1492)
                                                                                      {
                                                                                        v1493 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1493 = 0;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(v1491[28] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1491[29] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1491[30] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1491[31] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1491[32] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1491[33] + 4) & 6) == 0)
                                                                                          {
                                                                                            ++v1493;
                                                                                          }
                                                                                          v1491 += 45;
                                                                                        }
                                                                                        while (v1491 != v1492);
                                                                                      }
                                                                                      v2042 = (int64x2_t)(unint64_t)(3 * v1493);
                                                                                      v1494 = v1[207];
                                                                                      v1495 = v1[208];
                                                                                      if (v1494 != v1495)
                                                                                      {
                                                                                        v1496 = 0;
                                                                                        v1497 = 0;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1494 + 48) + 4) & 6) == 0)
                                                                                            v1496 = ++v1497;
                                                                                          v1494 += 112;
                                                                                        }
                                                                                        while (v1494 != v1495);
                                                                                        v2042.i64[1] = v1496;
                                                                                      }
                                                                                      v1498 = v1[210];
                                                                                      v1499 = v1[211];
                                                                                      if (v1498 == v1499)
                                                                                      {
                                                                                        v1503 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1500 = v1499 - v1498 - 208;
                                                                                        if (v1500 < 0xD0)
                                                                                        {
                                                                                          v1501 = 0;
                                                                                          v1502 = v1[210];
                                                                                          goto LABEL_1880;
                                                                                        }
                                                                                        v1504 = 0;
                                                                                        v1505 = 0;
                                                                                        v1506 = v1500 / 0xD0 + 1;
                                                                                        v1502 = v1498
                                                                                              + 208
                                                                                              * (v1506 & 0x3FFFFFFFFFFFFFELL);
                                                                                        v1507 = v1498 + 304;
                                                                                        v1508 = v1506 & 0x3FFFFFFFFFFFFFELL;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1507 - 208) + 4) & 6) == 0)
                                                                                            ++v1504;
                                                                                          if ((*(_BYTE *)(*(_QWORD *)v1507 + 4) & 6) == 0)
                                                                                            ++v1505;
                                                                                          v1507 += 416;
                                                                                          v1508 -= 2;
                                                                                        }
                                                                                        while (v1508);
                                                                                        v1501 = v1505 + v1504;
                                                                                        if (v1506 != (v1506 & 0x3FFFFFFFFFFFFFELL))
                                                                                        {
                                                                                          do
                                                                                          {
LABEL_1880:
                                                                                            if ((*(_BYTE *)(*(_QWORD *)(v1502 + 96) + 4) & 6) == 0)
                                                                                              ++v1501;
                                                                                            v1502 += 208;
                                                                                          }
                                                                                          while (v1502 != v1499);
                                                                                        }
                                                                                        v1503 = 4 * v1501;
                                                                                      }
                                                                                      v2043.i64[0] = v1503;
                                                                                      v1509 = v1[213];
                                                                                      v1510 = v1[214];
                                                                                      if (v1509 == v1510)
                                                                                      {
                                                                                        v1514 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1511 = v1510 - v1509 - 208;
                                                                                        if (v1511 < 0xD0)
                                                                                        {
                                                                                          v1512 = 0;
                                                                                          v1513 = v1[213];
                                                                                          goto LABEL_1895;
                                                                                        }
                                                                                        v1515 = 0;
                                                                                        v1516 = 0;
                                                                                        v1517 = v1511 / 0xD0 + 1;
                                                                                        v1513 = v1509
                                                                                              + 208
                                                                                              * (v1517 & 0x3FFFFFFFFFFFFFELL);
                                                                                        v1518 = v1509 + 304;
                                                                                        v1519 = v1517 & 0x3FFFFFFFFFFFFFELL;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1518 - 208) + 4) & 6) == 0)
                                                                                            ++v1515;
                                                                                          if ((*(_BYTE *)(*(_QWORD *)v1518 + 4) & 6) == 0)
                                                                                            ++v1516;
                                                                                          v1518 += 416;
                                                                                          v1519 -= 2;
                                                                                        }
                                                                                        while (v1519);
                                                                                        v1512 = v1516 + v1515;
                                                                                        if (v1517 != (v1517 & 0x3FFFFFFFFFFFFFELL))
                                                                                        {
                                                                                          do
                                                                                          {
LABEL_1895:
                                                                                            if ((*(_BYTE *)(*(_QWORD *)(v1513 + 96) + 4) & 6) == 0)
                                                                                              ++v1512;
                                                                                            v1513 += 208;
                                                                                          }
                                                                                          while (v1513 != v1510);
                                                                                        }
                                                                                        v1514 = 4 * v1512;
                                                                                      }
                                                                                      v2043.i64[1] = v1514;
                                                                                      v1520 = v1[216];
                                                                                      v1521 = v1[217];
                                                                                      if (v1520 == v1521)
                                                                                      {
                                                                                        v1525 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1522 = v1521 - v1520 - 176;
                                                                                        if (v1522 < 0xB0)
                                                                                        {
                                                                                          v1523 = 0;
                                                                                          v1524 = v1[216];
                                                                                          goto LABEL_1910;
                                                                                        }
                                                                                        v1526 = 0;
                                                                                        v1527 = 0;
                                                                                        v1528 = v1522 / 0xB0 + 1;
                                                                                        v1524 = v1520
                                                                                              + 176
                                                                                              * (v1528 & 0x3FFFFFFFFFFFFFELL);
                                                                                        v1529 = v1520 + 256;
                                                                                        v1530 = v1528 & 0x3FFFFFFFFFFFFFELL;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1529 - 176) + 4) & 6) == 0)
                                                                                            ++v1526;
                                                                                          if ((*(_BYTE *)(*(_QWORD *)v1529 + 4) & 6) == 0)
                                                                                            ++v1527;
                                                                                          v1529 += 352;
                                                                                          v1530 -= 2;
                                                                                        }
                                                                                        while (v1530);
                                                                                        v1523 = v1527 + v1526;
                                                                                        if (v1528 != (v1528 & 0x3FFFFFFFFFFFFFELL))
                                                                                        {
                                                                                          do
                                                                                          {
LABEL_1910:
                                                                                            if ((*(_BYTE *)(*(_QWORD *)(v1524 + 80) + 4) & 6) == 0)
                                                                                              ++v1523;
                                                                                            v1524 += 176;
                                                                                          }
                                                                                          while (v1524 != v1521);
                                                                                        }
                                                                                        v1525 = 3 * v1523;
                                                                                      }
                                                                                      v2044.i64[0] = v1525;
                                                                                      v1531 = v1[219];
                                                                                      v1532 = v1[220];
                                                                                      if (v1531 == v1532)
                                                                                      {
                                                                                        v1536 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1533 = v1532 - v1531 - 176;
                                                                                        if (v1533 < 0xB0)
                                                                                        {
                                                                                          v1534 = 0;
                                                                                          v1535 = v1[219];
                                                                                          goto LABEL_1925;
                                                                                        }
                                                                                        v1537 = 0;
                                                                                        v1538 = 0;
                                                                                        v1539 = v1533 / 0xB0 + 1;
                                                                                        v1535 = v1531
                                                                                              + 176
                                                                                              * (v1539 & 0x3FFFFFFFFFFFFFELL);
                                                                                        v1540 = v1531 + 256;
                                                                                        v1541 = v1539 & 0x3FFFFFFFFFFFFFELL;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(*(_QWORD *)(v1540 - 176) + 4) & 6) == 0)
                                                                                            ++v1537;
                                                                                          if ((*(_BYTE *)(*(_QWORD *)v1540 + 4) & 6) == 0)
                                                                                            ++v1538;
                                                                                          v1540 += 352;
                                                                                          v1541 -= 2;
                                                                                        }
                                                                                        while (v1541);
                                                                                        v1534 = v1538 + v1537;
                                                                                        if (v1539 != (v1539 & 0x3FFFFFFFFFFFFFELL))
                                                                                        {
                                                                                          do
                                                                                          {
LABEL_1925:
                                                                                            if ((*(_BYTE *)(*(_QWORD *)(v1535 + 80) + 4) & 6) == 0)
                                                                                              ++v1534;
                                                                                            v1535 += 176;
                                                                                          }
                                                                                          while (v1535 != v1532);
                                                                                        }
                                                                                        v1536 = 3 * v1534;
                                                                                      }
                                                                                      v2044.i64[1] = v1536;
                                                                                      sub_20F9235BC((_QWORD *)v1[222], (_QWORD *)v1[223], (uint64_t)&v2038);
                                                                                      *(_QWORD *)&v2045 = 2 * v2045;
                                                                                      v1542 = (_QWORD *)v1[225];
                                                                                      v1543 = (_QWORD *)v1[226];
                                                                                      if (v1542 == v1543)
                                                                                      {
                                                                                        v1544 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1544 = 0;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(v1542[8] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1542[9] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1542[10] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1542[11] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1542[12] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1542[13] + 4) & 6) == 0)
                                                                                          {
                                                                                            ++v1544;
                                                                                          }
                                                                                          v1542 += 23;
                                                                                        }
                                                                                        while (v1542 != v1543);
                                                                                      }
                                                                                      *((_QWORD *)&v2045 + 1) = 2 * v1544;
                                                                                      sub_20F921AD8((_QWORD *)v1[228], (_QWORD *)v1[229], (uint64_t)&v2038);
                                                                                      v1545 = (_QWORD *)v1[231];
                                                                                      v1546 = (_QWORD *)v1[232];
                                                                                      if (v1545 == v1546)
                                                                                      {
                                                                                        v1547 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1547 = 0;
                                                                                        do
                                                                                        {
                                                                                          if ((*(_BYTE *)(v1545[7] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1545[8] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1545[9] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1545[10] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1545[11] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1545[12] + 4) & 6) == 0
                                                                                            && (*(_BYTE *)(v1545[13] + 4) & 6) == 0)
                                                                                          {
                                                                                            ++v1547;
                                                                                          }
                                                                                          v1545 += 23;
                                                                                        }
                                                                                        while (v1545 != v1546);
                                                                                      }
                                                                                      v1374 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v2038, v2041), vaddq_s64(v2039[1], v2043)), vaddq_s64(vaddq_s64(v2039[0], v2042), vaddq_s64(v2040, v2044))))+ v2045+ *((_QWORD *)&v2045 + 1)+ v2046+ 2 * v1547;
                                                                                    }
                                                                                    return v1374 < v1346;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            v824 = 0;
                                                                            do
                                                                            {
                                                                              v825 = v819[2];
                                                                              v819[2] = v824;
                                                                              v826 = *v819;
                                                                              v819 += 3;
                                                                              v824 += v825;
                                                                              ++v815[v826];
                                                                            }
                                                                            while (v819 != v820);
                                                                            goto LABEL_963;
                                                                          }
LABEL_2418:
                                                                          operator delete(v1906);
                                                                          goto LABEL_2419;
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        v1926 = 0;
                                                                        v1927 = (char *)(8 * v1922);
                                                                        *(_QWORD *)(8 * v1922) = v1917 | (v1919 << 32);
                                                                        v1920 = 8 * v1922 + 8;
                                                                        if (v1918 != v1906)
                                                                          goto LABEL_2411;
                                                                      }
                                                                      break;
                                                                    }
                                                                    *((_QWORD *)&v2050 + 1) = v1927;
                                                                    *((_QWORD *)&v2051 + 1) = &v1926[8 * v1925];
                                                                    if (!v1906)
                                                                      goto LABEL_2419;
                                                                    goto LABEL_2418;
                                                                  }
LABEL_2364:
                                                                  operator delete(v1861);
                                                                  goto LABEL_2365;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                v1881 = 0;
                                                                v1882 = (char *)(8 * v1877);
                                                                *(_QWORD *)(8 * v1877) = v1872 | (v1874 << 32);
                                                                v1875 = 8 * v1877 + 8;
                                                                if (v1873 != v1861)
                                                                  goto LABEL_2357;
                                                              }
                                                              break;
                                                            }
                                                            *(_QWORD *)&v2049 = v1882;
                                                            *(_QWORD *)&v2050 = &v1881[8 * v1880];
                                                            if (!v1861)
                                                              goto LABEL_2365;
                                                            goto LABEL_2364;
                                                          }
LABEL_2310:
                                                          operator delete(v1816);
                                                          goto LABEL_2311;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v1836 = 0;
                                                        v1837 = (char *)(8 * v1832);
                                                        *(_QWORD *)(8 * v1832) = v1827 | (v1829 << 32);
                                                        v1830 = 8 * v1832 + 8;
                                                        if (v1828 != v1816)
                                                          goto LABEL_2303;
                                                      }
                                                      break;
                                                    }
                                                    *((_QWORD *)&v2047 + 1) = v1837;
                                                    *((_QWORD *)&v2048 + 1) = &v1836[8 * v1835];
                                                    if (!v1816)
                                                      goto LABEL_2311;
                                                    goto LABEL_2310;
                                                  }
LABEL_2256:
                                                  operator delete(v1771);
                                                  goto LABEL_2257;
                                                }
                                              }
                                              else
                                              {
                                                v1791 = 0;
                                                v1792 = (char *)(8 * v1787);
                                                *(_QWORD *)(8 * v1787) = v1782 | (v1784 << 32);
                                                v1785 = 8 * v1787 + 8;
                                                if (v1783 != v1771)
                                                  goto LABEL_2249;
                                              }
                                              break;
                                            }
                                            *(_QWORD *)&v2046 = v1792;
                                            *(_QWORD *)&v2047 = &v1791[8 * v1790];
                                            if (!v1771)
                                              goto LABEL_2257;
                                            goto LABEL_2256;
                                          }
LABEL_2202:
                                          operator delete(v1726);
                                          goto LABEL_2203;
                                        }
                                      }
                                      else
                                      {
                                        v1746 = 0;
                                        v1747 = (char *)(8 * v1742);
                                        *(_QWORD *)(8 * v1742) = v1737 | (v1739 << 32);
                                        v1740 = 8 * v1742 + 8;
                                        if ((char *)v1738 != v1726)
                                          goto LABEL_2195;
                                      }
                                      break;
                                    }
                                    v2044.i64[1] = (uint64_t)v1747;
                                    *((_QWORD *)&v2045 + 1) = &v1746[8 * v1745];
                                    if (!v1726)
                                      goto LABEL_2203;
                                    goto LABEL_2202;
                                  }
LABEL_2148:
                                  operator delete(v1681);
                                  goto LABEL_2149;
                                }
                              }
                              else
                              {
                                v1701 = 0;
                                v1702 = (char *)(8 * v1697);
                                *(_QWORD *)(8 * v1697) = v1692 | (v1694 << 32);
                                v1695 = 8 * v1697 + 8;
                                if ((char *)v1693 != v1681)
                                  goto LABEL_2141;
                              }
                              break;
                            }
                            v2043.i64[0] = (uint64_t)v1702;
                            v2044.i64[0] = (uint64_t)&v1701[8 * v1700];
                            if (!v1681)
                              goto LABEL_2149;
                            goto LABEL_2148;
                          }
LABEL_2094:
                          operator delete(v1636);
                          goto LABEL_2095;
                        }
                      }
                      else
                      {
                        v1656 = 0;
                        v1657 = (char *)(8 * v1652);
                        *(_QWORD *)(8 * v1652) = v1647 | (v1649 << 32);
                        v1650 = 8 * v1652 + 8;
                        if ((char *)v1648 != v1636)
                          goto LABEL_2087;
                      }
                      break;
                    }
                    v2041.i64[1] = (uint64_t)v1657;
                    v2042.i64[1] = (uint64_t)&v1656[8 * v1655];
                    if (!v1636)
                      goto LABEL_2095;
                    goto LABEL_2094;
                  }
LABEL_2040:
                  operator delete(v1591);
                  goto LABEL_2041;
                }
              }
              else
              {
                v1611 = 0;
                v1612 = (char *)(8 * v1607);
                *(_QWORD *)(8 * v1607) = v1602 | (v1604 << 32);
                v1605 = 8 * v1607 + 8;
                if ((char *)v1603 != v1591)
                  goto LABEL_2033;
              }
              break;
            }
            v2040.i64[0] = (uint64_t)v1612;
            v2041.i64[0] = (uint64_t)&v1611[8 * v1610];
            if (!v1591)
              goto LABEL_2041;
            goto LABEL_2040;
          }
LABEL_1986:
          operator delete(v589);
          goto LABEL_1987;
        }
      }
      else
      {
        v1566 = 0;
        v1567 = (char *)(8 * v1562);
        *(_QWORD *)(8 * v1562) = v1557 | (v1559 << 32);
        v1560 = 8 * v1562 + 8;
        if ((char *)v1558 != v589)
          goto LABEL_1979;
      }
      break;
    }
    v2039[0].i64[1] = (uint64_t)v1567;
    v2039[1].i64[1] = (uint64_t)&v1566[8 * v1565];
    if (!v589)
      goto LABEL_1987;
    goto LABEL_1986;
  }
LABEL_7:
  kdebug_trace();
  return 1;
}

void sub_20FA3B178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  sub_20F89E908((uint64_t)&STACK[0x230]);
  sub_20EDB3070((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FA3B3BC(int64x2_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  BOOL v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int64x2_t v53;
  _QWORD *v54;
  _QWORD *v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  int64x2_t v86;
  _QWORD *v87;
  _QWORD *v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  int64x2_t v119;
  _QWORD *v120;
  _QWORD *v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  int64x2_t v152;
  _QWORD *v153;
  _QWORD *v154;
  __int128 v155;
  __int128 v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  __int128 v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  int64x2_t v199;
  _QWORD *v200;
  _QWORD *v201;
  __int128 v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t j;
  uint64_t v216;
  uint64_t v217;
  uint64_t k;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  int64x2_t v241;
  _QWORD *v242;
  __int128 v243;
  uint64_t v244;
  _QWORD *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  __int128 v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int64x2_t v268;
  _QWORD *v269;
  __int128 v270;
  _QWORD *v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  __int128 v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t m;
  uint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  int64x2_t v296;
  _QWORD *v297;
  int64x2_t v298;
  _QWORD *v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  __int128 v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  int64x2_t v315;
  _QWORD *v316;
  _QWORD *v317;
  __int128 v318;
  _OWORD *v319;
  _OWORD *v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;
  __int128 v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  int64x2_t v338;
  _QWORD *v339;
  _QWORD *v340;
  __int128 v341;
  _OWORD *v342;
  _OWORD *v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  uint64_t v348;
  __int128 v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  int64x2_t v361;
  _QWORD *v362;
  _QWORD *v363;
  __int128 v364;
  _OWORD *v365;
  __int128 *v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  uint64_t v371;
  __int128 v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  uint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  _QWORD *v382;
  _QWORD *v383;
  int64x2_t v384;
  _QWORD *v385;
  _QWORD *v386;
  __int128 v387;
  _OWORD *v388;
  __int128 *v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  uint64_t v394;
  __int128 v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int64x2_t v411;
  _QWORD *v412;
  __int128 v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  __int128 v420;
  uint64_t v421;
  __int128 v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t n;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int64x2_t v438;
  _QWORD *v439;
  __int128 v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  __int128 v445;
  uint64_t v446;
  __int128 v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int64x2_t v463;
  _QWORD *v464;
  __int128 v465;
  int64x2_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  _QWORD *v472;
  __int128 v473;
  __int128 v474;
  uint64_t v475;
  __int128 v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t ii;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int64x2_t v492;
  _QWORD *v493;
  __int128 v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  __int128 v499;
  uint64_t v500;
  __int128 v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t jj;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  int v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  int v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  int v672;
  uint64_t v673;
  int v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  uint64_t v681;
  int v682;
  uint64_t v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  int v687;
  uint64_t v688;
  int v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  int v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  uint64_t v698;
  int v699;
  uint64_t v700;
  uint64_t v701;
  int v702;
  uint64_t v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  int v707;
  uint64_t v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  int v712;
  uint64_t v713;
  int v714;
  uint64_t v715;
  uint64_t v716;
  int v717;
  uint64_t v718;
  int v719;

  sub_20FA3FF3C((uint64_t)a1);
  if (!a1[101].i8[1])
    goto LABEL_647;
  v2 = a1[66].i64[1];
  v3 = a1[67].i64[0];
  if (v2 == v3)
    goto LABEL_24;
  v4 = a1[67].i64[0];
  while (!*(_BYTE *)(v2 + 496))
  {
    v2 += 504;
    if (v2 == v3)
      goto LABEL_25;
  }
  v5 = *(_QWORD *)(v2 + 216);
  --*(_DWORD *)(*(_QWORD *)(v2 + 208) + 8);
  --*(_DWORD *)(v5 + 8);
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  v6 = (int64x2_t)xmmword_2103B4950;
  a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B4950);
  if (v2 != v3)
  {
    v7 = (_QWORD *)(v2 + 504);
    if (v2 + 504 != v3)
    {
      v4 = v2;
      do
      {
        while (1)
        {
          v8 = v7;
          v9 = (__int128 *)(v2 + 696);
          if (!*(_BYTE *)(v2 + 1000))
            break;
          --*(_DWORD *)(*(_QWORD *)(v2 + 712) + 8);
          --*(_DWORD *)(*(_QWORD *)(v2 + 720) + 8);
          *(_QWORD *)(v2 + 712) = 0;
          *(_QWORD *)(v2 + 720) = 0;
          a1[100] = vaddq_s64(a1[100], v6);
          v7 += 63;
          v2 = (uint64_t)v8;
          if (v8 + 63 == (_QWORD *)v3)
            goto LABEL_25;
        }
        *(_QWORD *)v4 = *v7;
        *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 512);
        v10 = *(_OWORD *)(v2 + 608);
        v11 = *(_OWORD *)(v2 + 624);
        v12 = *(_OWORD *)(v2 + 592);
        *(_OWORD *)(v4 + 72) = *(_OWORD *)(v2 + 576);
        *(_OWORD *)(v4 + 120) = v11;
        *(_OWORD *)(v4 + 104) = v10;
        *(_OWORD *)(v4 + 88) = v12;
        v14 = *(_OWORD *)(v2 + 656);
        v13 = *(_OWORD *)(v2 + 672);
        v15 = *(_QWORD *)(v2 + 688);
        *(_OWORD *)(v4 + 136) = *(_OWORD *)(v2 + 640);
        *(_QWORD *)(v4 + 184) = v15;
        *(_OWORD *)(v4 + 168) = v13;
        *(_OWORD *)(v4 + 152) = v14;
        v16 = *(_OWORD *)(v2 + 528);
        v17 = *(_OWORD *)(v2 + 544);
        *(_OWORD *)(v4 + 56) = *(_OWORD *)(v2 + 560);
        *(_OWORD *)(v4 + 40) = v17;
        *(_OWORD *)(v4 + 24) = v16;
        v18 = *v9;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v2 + 704) = 0;
        v19 = *(std::__shared_weak_count **)(v4 + 200);
        *(_OWORD *)(v4 + 192) = v18;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
            v6 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_QWORD *)(v4 + 208) = *(_QWORD *)(v2 + 712);
        *(_QWORD *)(v4 + 216) = *(_QWORD *)(v2 + 720);
        v22 = *(_OWORD *)(v2 + 728);
        v23 = *(_OWORD *)(v2 + 744);
        v24 = *(_OWORD *)(v2 + 776);
        *(_OWORD *)(v4 + 256) = *(_OWORD *)(v2 + 760);
        *(_OWORD *)(v4 + 272) = v24;
        *(_OWORD *)(v4 + 224) = v22;
        *(_OWORD *)(v4 + 240) = v23;
        v25 = *(_OWORD *)(v2 + 792);
        v26 = *(_OWORD *)(v2 + 808);
        v27 = *(_OWORD *)(v2 + 824);
        *(_QWORD *)(v4 + 336) = *(_QWORD *)(v2 + 840);
        *(_OWORD *)(v4 + 304) = v26;
        *(_OWORD *)(v4 + 320) = v27;
        *(_OWORD *)(v4 + 288) = v25;
        v29 = *(_OWORD *)(v2 + 928);
        v28 = *(_OWORD *)(v2 + 944);
        v30 = *(_OWORD *)(v2 + 912);
        *(_QWORD *)(v4 + 456) = *(_QWORD *)(v2 + 960);
        *(_OWORD *)(v4 + 424) = v29;
        *(_OWORD *)(v4 + 440) = v28;
        *(_OWORD *)(v4 + 408) = v30;
        v31 = *(_OWORD *)(v2 + 848);
        v32 = *(_OWORD *)(v2 + 864);
        v33 = *(_OWORD *)(v2 + 896);
        *(_OWORD *)(v4 + 376) = *(_OWORD *)(v2 + 880);
        *(_OWORD *)(v4 + 392) = v33;
        *(_OWORD *)(v4 + 344) = v31;
        *(_OWORD *)(v4 + 360) = v32;
        v34 = *(_QWORD *)(v2 + 968);
        *(_BYTE *)(v4 + 472) = *(_BYTE *)(v2 + 976);
        *(_QWORD *)(v4 + 464) = v34;
        v35 = *(_OWORD *)(v2 + 984);
        *(_QWORD *)(v2 + 984) = 0;
        *(_QWORD *)(v2 + 992) = 0;
        v36 = *(std::__shared_weak_count **)(v4 + 488);
        *(_OWORD *)(v4 + 480) = v35;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
            v6 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_BYTE *)(v4 + 496) = *(_BYTE *)(v2 + 1000);
        v4 += 504;
        v7 = v8 + 63;
        v2 = (uint64_t)v8;
      }
      while (v8 + 63 != (_QWORD *)v3);
      goto LABEL_25;
    }
LABEL_24:
    v4 = v2;
  }
LABEL_25:
  v39 = a1[67].i64[0];
  if (v4 == v39)
    goto LABEL_28;
  v40 = sub_20F5B64A0(v39, a1[67].i64[0], v4);
  for (i = a1[67].i64[0]; i != v40; i -= 504)
  {
    v47 = *(std::__shared_weak_count **)(i - 16);
    if (!v47)
      goto LABEL_39;
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      v50 = *(std::__shared_weak_count **)(i - 304);
      if (v50)
      {
LABEL_40:
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
    else
    {
LABEL_39:
      v50 = *(std::__shared_weak_count **)(i - 304);
      if (v50)
        goto LABEL_40;
    }
  }
  a1[67].i64[0] = v40;
LABEL_28:
  v42 = a1[68].i64[0];
  v43 = (_QWORD *)a1[68].i64[1];
  if ((_QWORD *)v42 == v43)
  {
    v44 = a1[68].i64[0];
  }
  else
  {
    v44 = a1[68].i64[1];
    v45 = (_QWORD *)(v42 + 280);
    while (!*((_BYTE *)v45 - 8))
    {
      v46 = v45 == v43;
      v45 += 35;
      if (v46)
        goto LABEL_65;
    }
    --*(_DWORD *)(*(v45 - 18) + 8);
    *(v45 - 18) = 0;
    v53 = (int64x2_t)xmmword_2103B2310;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B2310);
    v54 = v45 - 35;
    if (v45 - 35 != v43)
    {
      if (v45 == v43)
      {
        v44 = (uint64_t)(v45 - 35);
      }
      else
      {
        v44 = (uint64_t)(v45 - 35);
        do
        {
          while (1)
          {
            v55 = v45;
            if (!*((_BYTE *)v54 + 552))
              break;
            --*(_DWORD *)(v54[52] + 8);
            v54[52] = 0;
            a1[100] = vaddq_s64(a1[100], v53);
            v45 += 35;
            v54 = v55;
            if (v55 + 35 == v43)
              goto LABEL_65;
          }
          *(_QWORD *)v44 = *v45;
          *(_OWORD *)(v44 + 8) = *((_OWORD *)v54 + 18);
          v57 = *((_OWORD *)v54 + 21);
          v56 = *((_OWORD *)v54 + 22);
          v58 = v54[46];
          *(_OWORD *)(v44 + 40) = *((_OWORD *)v54 + 20);
          *(_QWORD *)(v44 + 88) = v58;
          *(_OWORD *)(v44 + 72) = v56;
          *(_OWORD *)(v44 + 56) = v57;
          *(_OWORD *)(v44 + 24) = *((_OWORD *)v54 + 19);
          v59 = *(_OWORD *)(v54 + 47);
          *(_QWORD *)(v44 + 112) = v54[49];
          *(_OWORD *)(v44 + 96) = v59;
          v60 = *((_OWORD *)v54 + 25);
          v54[50] = 0;
          v54[51] = 0;
          v61 = *(std::__shared_weak_count **)(v44 + 128);
          *(_OWORD *)(v44 + 120) = v60;
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
              v53 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_QWORD *)(v44 + 136) = v54[52];
          v64 = *(_OWORD *)(v54 + 53);
          v65 = *(_OWORD *)(v54 + 57);
          *(_OWORD *)(v44 + 160) = *(_OWORD *)(v54 + 55);
          *(_OWORD *)(v44 + 176) = v65;
          *(_OWORD *)(v44 + 144) = v64;
          v66 = *(_OWORD *)(v54 + 59);
          v67 = *(_OWORD *)(v54 + 63);
          *(_OWORD *)(v44 + 208) = *(_OWORD *)(v54 + 61);
          *(_OWORD *)(v44 + 224) = v67;
          *(_OWORD *)(v44 + 192) = v66;
          v68 = v54[65];
          *(_BYTE *)(v44 + 248) = *((_BYTE *)v54 + 528);
          *(_QWORD *)(v44 + 240) = v68;
          v69 = *(_OWORD *)(v54 + 67);
          v54[68] = 0;
          v54[67] = 0;
          v70 = *(std::__shared_weak_count **)(v44 + 264);
          *(_OWORD *)(v44 + 256) = v69;
          if (v70)
          {
            v71 = (unint64_t *)&v70->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
              v53 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_BYTE *)(v44 + 272) = *((_BYTE *)v54 + 552);
          v44 += 280;
          v45 = v55 + 35;
          v54 = v55;
        }
        while (v55 + 35 != v43);
      }
    }
  }
LABEL_65:
  v73 = a1[68].i64[1];
  if (v44 != v73)
  {
    v74 = sub_20F5B6660(v73, a1[68].i64[1], v44);
    v75 = a1[68].i64[1];
    if (v75 == v74)
    {
LABEL_67:
      a1[68].i64[1] = v74;
      goto LABEL_68;
    }
    while (1)
    {
      v80 = *(std::__shared_weak_count **)(v75 - 16);
      if (!v80)
        goto LABEL_79;
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
        v83 = *(std::__shared_weak_count **)(v75 - 152);
        if (v83)
        {
LABEL_80:
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
      }
      else
      {
LABEL_79:
        v83 = *(std::__shared_weak_count **)(v75 - 152);
        if (v83)
          goto LABEL_80;
      }
      v75 -= 280;
      if (v75 == v74)
        goto LABEL_67;
    }
  }
LABEL_68:
  v76 = a1[69].i64[1];
  v77 = (_QWORD *)a1[70].i64[0];
  if ((_QWORD *)v76 == v77)
  {
    v78 = a1[69].i64[1];
  }
  else
  {
    v78 = a1[70].i64[0];
    v79 = (_QWORD *)(v76 + 280);
    while (!*((_BYTE *)v79 - 8))
    {
      v46 = v79 == v77;
      v79 += 35;
      if (v46)
        goto LABEL_105;
    }
    --*(_DWORD *)(*(v79 - 18) + 8);
    *(v79 - 18) = 0;
    v86 = (int64x2_t)xmmword_2103B2310;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B2310);
    v87 = v79 - 35;
    if (v79 - 35 != v77)
    {
      if (v79 == v77)
      {
        v78 = (uint64_t)(v79 - 35);
      }
      else
      {
        v78 = (uint64_t)(v79 - 35);
        do
        {
          while (1)
          {
            v88 = v79;
            if (!*((_BYTE *)v87 + 552))
              break;
            --*(_DWORD *)(v87[52] + 8);
            v87[52] = 0;
            a1[100] = vaddq_s64(a1[100], v86);
            v79 += 35;
            v87 = v88;
            if (v88 + 35 == v77)
              goto LABEL_105;
          }
          *(_QWORD *)v78 = *v79;
          *(_OWORD *)(v78 + 8) = *((_OWORD *)v87 + 18);
          v90 = *((_OWORD *)v87 + 21);
          v89 = *((_OWORD *)v87 + 22);
          v91 = v87[46];
          *(_OWORD *)(v78 + 40) = *((_OWORD *)v87 + 20);
          *(_QWORD *)(v78 + 88) = v91;
          *(_OWORD *)(v78 + 72) = v89;
          *(_OWORD *)(v78 + 56) = v90;
          *(_OWORD *)(v78 + 24) = *((_OWORD *)v87 + 19);
          v92 = *(_OWORD *)(v87 + 47);
          *(_QWORD *)(v78 + 112) = v87[49];
          *(_OWORD *)(v78 + 96) = v92;
          v93 = *((_OWORD *)v87 + 25);
          v87[50] = 0;
          v87[51] = 0;
          v94 = *(std::__shared_weak_count **)(v78 + 128);
          *(_OWORD *)(v78 + 120) = v93;
          if (v94)
          {
            v95 = (unint64_t *)&v94->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
              v86 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_QWORD *)(v78 + 136) = v87[52];
          v97 = *(_OWORD *)(v87 + 53);
          v98 = *(_OWORD *)(v87 + 57);
          *(_OWORD *)(v78 + 160) = *(_OWORD *)(v87 + 55);
          *(_OWORD *)(v78 + 176) = v98;
          *(_OWORD *)(v78 + 144) = v97;
          v99 = *(_OWORD *)(v87 + 59);
          v100 = *(_OWORD *)(v87 + 63);
          *(_OWORD *)(v78 + 208) = *(_OWORD *)(v87 + 61);
          *(_OWORD *)(v78 + 224) = v100;
          *(_OWORD *)(v78 + 192) = v99;
          v101 = v87[65];
          *(_BYTE *)(v78 + 248) = *((_BYTE *)v87 + 528);
          *(_QWORD *)(v78 + 240) = v101;
          v102 = *(_OWORD *)(v87 + 67);
          v87[68] = 0;
          v87[67] = 0;
          v103 = *(std::__shared_weak_count **)(v78 + 264);
          *(_OWORD *)(v78 + 256) = v102;
          if (v103)
          {
            v104 = (unint64_t *)&v103->__shared_owners_;
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
              v86 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_BYTE *)(v78 + 272) = *((_BYTE *)v87 + 552);
          v78 += 280;
          v79 = v88 + 35;
          v87 = v88;
        }
        while (v88 + 35 != v77);
      }
    }
  }
LABEL_105:
  v106 = a1[70].i64[0];
  if (v78 != v106)
  {
    v107 = sub_20F5B6660(v106, a1[70].i64[0], v78);
    v108 = a1[70].i64[0];
    if (v108 == v107)
    {
LABEL_107:
      a1[70].i64[0] = v107;
      goto LABEL_108;
    }
    while (1)
    {
      v113 = *(std::__shared_weak_count **)(v108 - 16);
      if (!v113)
        goto LABEL_119;
      v114 = (unint64_t *)&v113->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
        v116 = *(std::__shared_weak_count **)(v108 - 152);
        if (v116)
        {
LABEL_120:
          v117 = (unint64_t *)&v116->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
      }
      else
      {
LABEL_119:
        v116 = *(std::__shared_weak_count **)(v108 - 152);
        if (v116)
          goto LABEL_120;
      }
      v108 -= 280;
      if (v108 == v107)
        goto LABEL_107;
    }
  }
LABEL_108:
  v109 = a1[71].i64[0];
  v110 = (_QWORD *)a1[71].i64[1];
  if ((_QWORD *)v109 == v110)
  {
    v111 = a1[71].i64[0];
  }
  else
  {
    v111 = a1[71].i64[1];
    v112 = (_QWORD *)(v109 + 280);
    while (!*((_BYTE *)v112 - 8))
    {
      v46 = v112 == v110;
      v112 += 35;
      if (v46)
        goto LABEL_145;
    }
    --*(_DWORD *)(*(v112 - 18) + 8);
    *(v112 - 18) = 0;
    v119 = (int64x2_t)xmmword_2103B2310;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B2310);
    v120 = v112 - 35;
    if (v112 - 35 != v110)
    {
      if (v112 == v110)
      {
        v111 = (uint64_t)(v112 - 35);
      }
      else
      {
        v111 = (uint64_t)(v112 - 35);
        do
        {
          while (1)
          {
            v121 = v112;
            if (!*((_BYTE *)v120 + 552))
              break;
            --*(_DWORD *)(v120[52] + 8);
            v120[52] = 0;
            a1[100] = vaddq_s64(a1[100], v119);
            v112 += 35;
            v120 = v121;
            if (v121 + 35 == v110)
              goto LABEL_145;
          }
          *(_QWORD *)v111 = *v112;
          *(_OWORD *)(v111 + 8) = *((_OWORD *)v120 + 18);
          v123 = *((_OWORD *)v120 + 21);
          v122 = *((_OWORD *)v120 + 22);
          v124 = v120[46];
          *(_OWORD *)(v111 + 40) = *((_OWORD *)v120 + 20);
          *(_QWORD *)(v111 + 88) = v124;
          *(_OWORD *)(v111 + 72) = v122;
          *(_OWORD *)(v111 + 56) = v123;
          *(_OWORD *)(v111 + 24) = *((_OWORD *)v120 + 19);
          v125 = *(_OWORD *)(v120 + 47);
          *(_QWORD *)(v111 + 112) = v120[49];
          *(_OWORD *)(v111 + 96) = v125;
          v126 = *((_OWORD *)v120 + 25);
          v120[50] = 0;
          v120[51] = 0;
          v127 = *(std::__shared_weak_count **)(v111 + 128);
          *(_OWORD *)(v111 + 120) = v126;
          if (v127)
          {
            v128 = (unint64_t *)&v127->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
              v119 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_QWORD *)(v111 + 136) = v120[52];
          v130 = *(_OWORD *)(v120 + 53);
          v131 = *(_OWORD *)(v120 + 57);
          *(_OWORD *)(v111 + 160) = *(_OWORD *)(v120 + 55);
          *(_OWORD *)(v111 + 176) = v131;
          *(_OWORD *)(v111 + 144) = v130;
          v132 = *(_OWORD *)(v120 + 59);
          v133 = *(_OWORD *)(v120 + 63);
          *(_OWORD *)(v111 + 208) = *(_OWORD *)(v120 + 61);
          *(_OWORD *)(v111 + 224) = v133;
          *(_OWORD *)(v111 + 192) = v132;
          v134 = v120[65];
          *(_BYTE *)(v111 + 248) = *((_BYTE *)v120 + 528);
          *(_QWORD *)(v111 + 240) = v134;
          v135 = *(_OWORD *)(v120 + 67);
          v120[68] = 0;
          v120[67] = 0;
          v136 = *(std::__shared_weak_count **)(v111 + 264);
          *(_OWORD *)(v111 + 256) = v135;
          if (v136)
          {
            v137 = (unint64_t *)&v136->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
              v119 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_BYTE *)(v111 + 272) = *((_BYTE *)v120 + 552);
          v111 += 280;
          v112 = v121 + 35;
          v120 = v121;
        }
        while (v121 + 35 != v110);
      }
    }
  }
LABEL_145:
  v139 = a1[71].i64[1];
  if (v111 != v139)
  {
    v140 = sub_20F5B6660(v139, a1[71].i64[1], v111);
    v141 = a1[71].i64[1];
    if (v141 == v140)
    {
LABEL_147:
      a1[71].i64[1] = v140;
      goto LABEL_148;
    }
    while (1)
    {
      v146 = *(std::__shared_weak_count **)(v141 - 16);
      if (!v146)
        goto LABEL_159;
      v147 = (unint64_t *)&v146->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
        v149 = *(std::__shared_weak_count **)(v141 - 152);
        if (v149)
        {
LABEL_160:
          v150 = (unint64_t *)&v149->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
      }
      else
      {
LABEL_159:
        v149 = *(std::__shared_weak_count **)(v141 - 152);
        if (v149)
          goto LABEL_160;
      }
      v141 -= 280;
      if (v141 == v140)
        goto LABEL_147;
    }
  }
LABEL_148:
  v142 = a1[72].i64[1];
  v143 = (_QWORD *)a1[73].i64[0];
  if ((_QWORD *)v142 == v143)
  {
    v144 = a1[72].i64[1];
  }
  else
  {
    v144 = a1[73].i64[0];
    v145 = (_QWORD *)(v142 + 160);
    while (!*((_BYTE *)v145 - 8))
    {
      v46 = v145 == v143;
      v145 += 20;
      if (v46)
        goto LABEL_185;
    }
    --*(_DWORD *)(*(v145 - 12) + 8);
    *(v145 - 12) = 0;
    v152 = (int64x2_t)xmmword_2103B8430;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B8430);
    v153 = v145 - 20;
    if (v145 - 20 != v143)
    {
      if (v145 == v143)
      {
        v144 = (uint64_t)(v145 - 20);
      }
      else
      {
        v144 = (uint64_t)(v145 - 20);
        do
        {
          while (1)
          {
            v154 = v145;
            if (!*((_BYTE *)v153 + 312))
              break;
            --*(_DWORD *)(v153[28] + 8);
            v153[28] = 0;
            a1[100] = vaddq_s64(a1[100], v152);
            v145 += 20;
            v153 = v154;
            if (v154 + 20 == v143)
              goto LABEL_185;
          }
          *(_QWORD *)v144 = *v145;
          *(_OWORD *)(v144 + 8) = *(_OWORD *)(v153 + 21);
          v155 = *(_OWORD *)(v153 + 23);
          *(_QWORD *)(v144 + 40) = v153[25];
          *(_OWORD *)(v144 + 24) = v155;
          v156 = *((_OWORD *)v153 + 13);
          v153[26] = 0;
          v153[27] = 0;
          v157 = *(std::__shared_weak_count **)(v144 + 56);
          *(_OWORD *)(v144 + 48) = v156;
          if (v157)
          {
            v158 = (unint64_t *)&v157->__shared_owners_;
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
              v152 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *(_QWORD *)(v144 + 64) = v153[28];
          v160 = *(_OWORD *)(v153 + 29);
          *(_QWORD *)(v144 + 88) = v153[31];
          *(_OWORD *)(v144 + 72) = v160;
          v161 = *((_OWORD *)v153 + 16);
          *(_QWORD *)(v144 + 112) = v153[34];
          *(_OWORD *)(v144 + 96) = v161;
          v162 = v153[35];
          *(_BYTE *)(v144 + 128) = *((_BYTE *)v153 + 288);
          *(_QWORD *)(v144 + 120) = v162;
          v163 = *(_OWORD *)(v153 + 37);
          v153[37] = 0;
          v153[38] = 0;
          v164 = *(std::__shared_weak_count **)(v144 + 144);
          *(_OWORD *)(v144 + 136) = v163;
          if (v164)
          {
            v165 = (unint64_t *)&v164->__shared_owners_;
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
              v152 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *(_BYTE *)(v144 + 152) = *((_BYTE *)v153 + 312);
          v144 += 160;
          v145 = v154 + 20;
          v153 = v154;
        }
        while (v154 + 20 != v143);
      }
    }
  }
LABEL_185:
  v167 = a1[73].i64[0];
  if (v144 != v167)
  {
    v168 = sub_20F91EB0C(v167, a1[73].i64[0], v144);
    v169 = a1[73].i64[0];
    if (v169 == v168)
    {
LABEL_187:
      a1[73].i64[0] = v168;
      goto LABEL_188;
    }
    while (1)
    {
      v173 = *(std::__shared_weak_count **)(v169 - 16);
      if (!v173)
        goto LABEL_198;
      v174 = (unint64_t *)&v173->__shared_owners_;
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
        v176 = *(std::__shared_weak_count **)(v169 - 104);
        if (v176)
        {
LABEL_199:
          v177 = (unint64_t *)&v176->__shared_owners_;
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
          }
        }
      }
      else
      {
LABEL_198:
        v176 = *(std::__shared_weak_count **)(v169 - 104);
        if (v176)
          goto LABEL_199;
      }
      v169 -= 160;
      if (v169 == v168)
        goto LABEL_187;
    }
  }
LABEL_188:
  v170 = a1[74].i64[0];
  v171 = a1[74].i64[1];
  if (v170 == v171)
    goto LABEL_212;
  v172 = a1[74].i64[1];
  while (!*(_BYTE *)(v170 + 9608))
  {
    v170 += 9616;
    if (v170 == v171)
      goto LABEL_213;
  }
  --*(_DWORD *)(*(_QWORD *)(v170 + 9256) + 8);
  --*(_DWORD *)(*(_QWORD *)(v170 + 9264) + 8);
  *(_OWORD *)(v170 + 9256) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v170 + 9272) + 8);
  --*(_DWORD *)(*(_QWORD *)(v170 + 9280) + 8);
  *(_OWORD *)(v170 + 9272) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v170 + 9288) + 8);
  --*(_DWORD *)(*(_QWORD *)(v170 + 9296) + 8);
  *(_OWORD *)(v170 + 9288) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v170 + 9304) + 8);
  v179 = *(_QWORD *)(v170 + 9312);
  *(_OWORD *)(v170 + 9304) = 0u;
  --*(_DWORD *)(v179 + 8);
  --*(_DWORD *)(*(_QWORD *)(v170 + 9320) + 8);
  --*(_DWORD *)(*(_QWORD *)(v170 + 9328) + 8);
  *(_OWORD *)(v170 + 9320) = 0u;
  a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B4950);
  if (v170 != v171)
  {
    if (v170 + 9616 != v171)
    {
      v172 = v170;
      do
      {
        while (!*(_BYTE *)(v170 + 19224))
        {
          *(_QWORD *)v172 = *(_QWORD *)(v170 + 9616);
          sub_20FA553A0(v172 + 8, v170 + 9624);
          *(_BYTE *)(v172 + 9608) = *(_BYTE *)(v170 + 19224);
          v172 += 9616;
          v180 = v170 + 19232;
          v170 += 9616;
          if (v180 == v171)
            goto LABEL_213;
        }
        --*(_DWORD *)(*(_QWORD *)(v170 + 18872) + 8);
        --*(_DWORD *)(*(_QWORD *)(v170 + 18880) + 8);
        --*(_DWORD *)(*(_QWORD *)(v170 + 18888) + 8);
        --*(_DWORD *)(*(_QWORD *)(v170 + 18896) + 8);
        *(_OWORD *)(v170 + 18872) = 0u;
        *(_OWORD *)(v170 + 18888) = 0u;
        --*(_DWORD *)(*(_QWORD *)(v170 + 18904) + 8);
        --*(_DWORD *)(*(_QWORD *)(v170 + 18912) + 8);
        --*(_DWORD *)(*(_QWORD *)(v170 + 18920) + 8);
        --*(_DWORD *)(*(_QWORD *)(v170 + 18928) + 8);
        *(_OWORD *)(v170 + 18904) = 0u;
        *(_OWORD *)(v170 + 18920) = 0u;
        --*(_DWORD *)(*(_QWORD *)(v170 + 18936) + 8);
        --*(_DWORD *)(*(_QWORD *)(v170 + 18944) + 8);
        *(_OWORD *)(v170 + 18936) = 0u;
        a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B4950);
        v181 = v170 + 19232;
        v170 += 9616;
      }
      while (v181 != v171);
      goto LABEL_213;
    }
LABEL_212:
    v172 = v170;
  }
LABEL_213:
  v182 = a1[74].i64[1];
  if (v182 != v172)
  {
    do
    {
      v183 = *(std::__shared_weak_count **)(v182 - 16);
      if (v183)
      {
        v184 = (unint64_t *)&v183->__shared_owners_;
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
      v182 -= 9616;
    }
    while (v182 != v172);
    a1[74].i64[1] = v172;
  }
  v186 = a1[75].i64[1];
  v187 = a1[76].i64[0];
  if (v186 == v187)
    goto LABEL_234;
  v188 = a1[76].i64[0];
  while (!*(_BYTE *)(v186 + 5328))
  {
    v186 += 5336;
    if (v186 == v187)
      goto LABEL_235;
  }
  --*(_DWORD *)(*(_QWORD *)(v186 + 5024) + 8);
  --*(_DWORD *)(*(_QWORD *)(v186 + 5032) + 8);
  *(_OWORD *)(v186 + 5024) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v186 + 5040) + 8);
  --*(_DWORD *)(*(_QWORD *)(v186 + 5048) + 8);
  *(_OWORD *)(v186 + 5040) = 0u;
  a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B4950);
  if (v186 != v187)
  {
    v189 = v186 + 5336;
    if (v186 + 5336 != v187)
    {
      v190 = (_BYTE *)(v186 + 10664);
      v188 = v186;
      do
      {
        while (!*v190)
        {
          sub_20F5B6B10(v188, v189);
          v188 += 5336;
          v189 += 5336;
          v190 += 5336;
          if (v189 == v187)
            goto LABEL_235;
        }
        --*(_DWORD *)(*((_QWORD *)v190 - 38) + 8);
        --*(_DWORD *)(*(_QWORD *)(v189 + 5032) + 8);
        *((_OWORD *)v190 - 19) = 0u;
        --*(_DWORD *)(*((_QWORD *)v190 - 36) + 8);
        --*(_DWORD *)(*((_QWORD *)v190 - 35) + 8);
        *((_OWORD *)v190 - 18) = 0u;
        a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B4950);
        v189 += 5336;
        v190 += 5336;
      }
      while (v189 != v187);
      goto LABEL_235;
    }
LABEL_234:
    v188 = v186;
  }
LABEL_235:
  v191 = a1[76].i64[0];
  if (v191 != v188)
  {
    do
    {
      v192 = *(std::__shared_weak_count **)(v191 - 16);
      if (v192)
      {
        v193 = (unint64_t *)&v192->__shared_owners_;
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
      }
      v191 -= 5336;
    }
    while (v191 != v188);
    a1[76].i64[0] = v188;
  }
  v195 = a1[77].i64[0];
  v196 = (_QWORD *)a1[77].i64[1];
  if ((_QWORD *)v195 == v196)
  {
    v197 = a1[77].i64[0];
  }
  else
  {
    v197 = a1[77].i64[1];
    v198 = (_QWORD *)(v195 + 144);
    while (!*((_BYTE *)v198 - 8))
    {
      v46 = v198 == v196;
      v198 += 18;
      if (v46)
        goto LABEL_269;
    }
    --*(_DWORD *)(*(v198 - 12) + 8);
    *(v198 - 12) = 0;
    v199 = (int64x2_t)xmmword_2103B8430;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B8430);
    v200 = v198 - 18;
    if (v198 - 18 != v196)
    {
      if (v198 == v196)
      {
        v197 = (uint64_t)(v198 - 18);
      }
      else
      {
        v197 = (uint64_t)(v198 - 18);
        do
        {
          while (1)
          {
            v201 = v198;
            if (!*((_BYTE *)v200 + 280))
              break;
            --*(_DWORD *)(v200[24] + 8);
            v200[24] = 0;
            a1[100] = vaddq_s64(a1[100], v199);
            v198 += 18;
            v200 = v201;
            if (v201 + 18 == v196)
              goto LABEL_269;
          }
          *(_QWORD *)v197 = *v198;
          *(_OWORD *)(v197 + 8) = *(_OWORD *)(v200 + 19);
          v202 = *(_OWORD *)(v200 + 21);
          v200[21] = 0;
          v200[22] = 0;
          v203 = *(std::__shared_weak_count **)(v197 + 32);
          *(_OWORD *)(v197 + 24) = v202;
          if (v203)
          {
            v204 = (unint64_t *)&v203->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
              v199 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *(_BYTE *)(v197 + 40) = *((_BYTE *)v200 + 184);
          *(_QWORD *)(v197 + 48) = v200[24];
          v206 = *(_OWORD *)(v200 + 25);
          *(_QWORD *)(v197 + 72) = v200[27];
          *(_OWORD *)(v197 + 56) = v206;
          v207 = *((_OWORD *)v200 + 14);
          *(_QWORD *)(v197 + 96) = v200[30];
          *(_OWORD *)(v197 + 80) = v207;
          v208 = v200[31];
          *(_BYTE *)(v197 + 112) = *((_BYTE *)v200 + 256);
          *(_QWORD *)(v197 + 104) = v208;
          v209 = *(_OWORD *)(v200 + 33);
          v200[33] = 0;
          v200[34] = 0;
          v210 = *(std::__shared_weak_count **)(v197 + 128);
          *(_OWORD *)(v197 + 120) = v209;
          if (v210)
          {
            v211 = (unint64_t *)&v210->__shared_owners_;
            do
              v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v210);
              v199 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *(_BYTE *)(v197 + 136) = *((_BYTE *)v200 + 280);
          v197 += 144;
          v198 = v201 + 18;
          v200 = v201;
        }
        while (v201 + 18 != v196);
      }
    }
  }
LABEL_269:
  v213 = a1[77].i64[1];
  if (v197 == v213)
    goto LABEL_272;
  v214 = sub_20F91EC44(v213, a1[77].i64[1], v197);
  for (j = a1[77].i64[1]; j != v214; j -= 144)
  {
    v220 = *(std::__shared_weak_count **)(j - 16);
    if (!v220)
      goto LABEL_283;
    v221 = (unint64_t *)&v220->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
      v223 = *(std::__shared_weak_count **)(j - 112);
      if (v223)
      {
LABEL_284:
        v224 = (unint64_t *)&v223->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
    }
    else
    {
LABEL_283:
      v223 = *(std::__shared_weak_count **)(j - 112);
      if (v223)
        goto LABEL_284;
    }
  }
  a1[77].i64[1] = v214;
LABEL_272:
  v216 = a1[78].i64[1];
  v217 = a1[79].i64[0];
  if (v216 == v217)
  {
    k = a1[78].i64[1];
  }
  else
  {
    k = a1[79].i64[0];
    v219 = v216 + 152;
    while (!*(_BYTE *)(v219 - 8))
    {
      v46 = v219 == v217;
      v219 += 152;
      if (v46)
        goto LABEL_297;
    }
    v226 = *(_QWORD *)(v219 - 96);
    --*(_DWORD *)(*(_QWORD *)(v219 - 104) + 8);
    --*(_DWORD *)(v226 + 8);
    *(_QWORD *)(v219 - 104) = 0;
    *(_QWORD *)(v219 - 96) = 0;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B8430);
    if (v219 - 152 != v217)
    {
      for (k = v219 - 152; v219 != v217; v219 += 152)
      {
        while (!*(_BYTE *)(v219 + 144))
        {
          sub_20F91ED74(k, v219);
          k += 152;
          v219 += 152;
          if (v219 == v217)
            goto LABEL_297;
        }
        v227 = *(_QWORD *)(v219 + 56);
        --*(_DWORD *)(*(_QWORD *)(v219 + 48) + 8);
        --*(_DWORD *)(v227 + 8);
        *(_QWORD *)(v219 + 48) = 0;
        *(_QWORD *)(v219 + 56) = 0;
        a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B8430);
      }
    }
  }
LABEL_297:
  v228 = a1[79].i64[0];
  if (k == v228)
    goto LABEL_313;
  while (v228 != k)
  {
    v229 = *(std::__shared_weak_count **)(v228 - 16);
    if (!v229)
      goto LABEL_305;
    v230 = (unint64_t *)&v229->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
      v232 = *(std::__shared_weak_count **)(v228 - 120);
      if (!v232)
        goto LABEL_299;
    }
    else
    {
LABEL_305:
      v232 = *(std::__shared_weak_count **)(v228 - 120);
      if (!v232)
        goto LABEL_299;
    }
    v233 = (unint64_t *)&v232->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
LABEL_299:
    v228 -= 152;
  }
  a1[79].i64[0] = k;
LABEL_313:
  v235 = a1[80].i64[0];
  v236 = (_QWORD *)a1[80].i64[1];
  if ((_QWORD *)v235 == v236)
  {
    v237 = (_QWORD *)a1[80].i64[0];
  }
  else
  {
    v237 = (_QWORD *)a1[80].i64[1];
    v238 = (_QWORD *)(v235 + 304);
    while (!*((_BYTE *)v238 - 8))
    {
      v46 = v238 == v236;
      v238 += 38;
      if (v46)
        goto LABEL_333;
    }
    v239 = *(v238 - 12);
    --*(_DWORD *)(*(v238 - 13) + 8);
    --*(_DWORD *)(v239 + 8);
    v240 = *(v238 - 10);
    --*(_DWORD *)(*(v238 - 11) + 8);
    *(_OWORD *)(v238 - 13) = 0u;
    --*(_DWORD *)(v240 + 8);
    *(_OWORD *)(v238 - 11) = 0u;
    v241 = (int64x2_t)xmmword_210378050;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_210378050);
    v242 = v238 - 38;
    if (v238 - 38 != v236)
    {
      if (v238 == v236)
      {
        v237 = v238 - 38;
      }
      else
      {
        v243 = 0uLL;
        v237 = v238 - 38;
        do
        {
          while (1)
          {
            v245 = v238;
            if (!*((_BYTE *)v242 + 600))
              break;
            v244 = v242[64];
            --*(_DWORD *)(v242[63] + 8);
            --*(_DWORD *)(v244 + 8);
            --*(_DWORD *)(v242[65] + 8);
            --*(_DWORD *)(v242[66] + 8);
            *(_OWORD *)(v242 + 63) = v243;
            *(_OWORD *)(v242 + 65) = v243;
            a1[100] = vaddq_s64(a1[100], v241);
            v238 += 38;
            v242 = v245;
            if (v245 + 38 == v236)
              goto LABEL_333;
          }
          *v237 = *v238;
          v237[1] = v242[39];
          *((_OWORD *)v237 + 1) = *((_OWORD *)v242 + 20);
          v246 = *((_OWORD *)v242 + 21);
          v237[6] = v242[44];
          *((_OWORD *)v237 + 2) = v246;
          v247 = *(_OWORD *)(v242 + 49);
          v248 = *(_OWORD *)(v242 + 51);
          v249 = *(_OWORD *)(v242 + 47);
          v237[15] = v242[53];
          *(_OWORD *)(v237 + 11) = v247;
          *(_OWORD *)(v237 + 13) = v248;
          *(_OWORD *)(v237 + 9) = v249;
          *(_OWORD *)(v237 + 7) = *(_OWORD *)(v242 + 45);
          v250 = *((_OWORD *)v242 + 27);
          *((_OWORD *)v237 + 9) = *((_OWORD *)v242 + 28);
          *((_OWORD *)v237 + 8) = v250;
          v251 = *((_OWORD *)v242 + 29);
          v252 = *((_OWORD *)v242 + 30);
          *((_DWORD *)v237 + 48) = *((_DWORD *)v242 + 124);
          *((_OWORD *)v237 + 11) = v252;
          *((_OWORD *)v237 + 10) = v251;
          v237[25] = v242[63];
          v237[26] = v242[64];
          v237[27] = v242[65];
          v237[28] = v242[66];
          *(_OWORD *)(v237 + 29) = *(_OWORD *)(v242 + 67);
          *(_OWORD *)(v237 + 31) = *(_OWORD *)(v242 + 69);
          v253 = v242[71];
          *((_BYTE *)v237 + 272) = *((_BYTE *)v242 + 576);
          v237[33] = v253;
          v254 = *(_OWORD *)(v242 + 73);
          v242[73] = 0;
          v242[74] = 0;
          v255 = (std::__shared_weak_count *)v237[36];
          *(_OWORD *)(v237 + 35) = v254;
          if (v255)
          {
            v256 = (unint64_t *)&v255->__shared_owners_;
            do
              v257 = __ldaxr(v256);
            while (__stlxr(v257 - 1, v256));
            if (!v257)
            {
              ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
              std::__shared_weak_count::__release_weak(v255);
              v243 = 0uLL;
              v241 = (int64x2_t)xmmword_210378050;
            }
          }
          *((_BYTE *)v237 + 296) = *((_BYTE *)v242 + 600);
          v237 += 38;
          v238 = v245 + 38;
          v242 = v245;
        }
        while (v245 + 38 != v236);
      }
    }
  }
LABEL_333:
  v258 = a1[80].i64[1];
  if (v237 != (_QWORD *)v258)
  {
    while ((_QWORD *)v258 != v237)
    {
      v259 = *(std::__shared_weak_count **)(v258 - 16);
      if (v259)
      {
        v260 = (unint64_t *)&v259->__shared_owners_;
        do
          v261 = __ldaxr(v260);
        while (__stlxr(v261 - 1, v260));
        if (!v261)
        {
          ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
          std::__shared_weak_count::__release_weak(v259);
        }
      }
      v258 -= 304;
    }
    a1[80].i64[1] = (uint64_t)v237;
  }
  v262 = a1[81].i64[1];
  v263 = a1[82].i64[0];
  if (v262 == v263)
    goto LABEL_360;
  v264 = a1[82].i64[0];
  while (!*(_BYTE *)(v262 + 352))
  {
    v262 += 360;
    if (v262 == v263)
      goto LABEL_361;
  }
  v265 = *(_QWORD *)(v262 + 232);
  --*(_DWORD *)(*(_QWORD *)(v262 + 224) + 8);
  --*(_DWORD *)(v265 + 8);
  v266 = *(_QWORD *)(v262 + 248);
  --*(_DWORD *)(*(_QWORD *)(v262 + 240) + 8);
  --*(_DWORD *)(v266 + 8);
  v267 = *(_QWORD *)(v262 + 264);
  --*(_DWORD *)(*(_QWORD *)(v262 + 256) + 8);
  *(_OWORD *)(v262 + 224) = 0u;
  *(_OWORD *)(v262 + 240) = 0u;
  --*(_DWORD *)(v267 + 8);
  *(_OWORD *)(v262 + 256) = 0u;
  v268 = (int64x2_t)xmmword_2103B8430;
  a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B8430);
  if (v262 != v263)
  {
    v269 = (_QWORD *)(v262 + 360);
    if (v262 + 360 != v263)
    {
      v270 = 0uLL;
      v264 = v262;
      do
      {
        while (1)
        {
          v271 = v269;
          if (!*(_BYTE *)(v262 + 712))
            break;
          --*(_DWORD *)(*(_QWORD *)(v262 + 584) + 8);
          --*(_DWORD *)(*(_QWORD *)(v262 + 592) + 8);
          --*(_DWORD *)(*(_QWORD *)(v262 + 600) + 8);
          --*(_DWORD *)(*(_QWORD *)(v262 + 608) + 8);
          *(_OWORD *)(v262 + 584) = v270;
          *(_OWORD *)(v262 + 600) = v270;
          --*(_DWORD *)(*(_QWORD *)(v262 + 616) + 8);
          --*(_DWORD *)(*(_QWORD *)(v262 + 624) + 8);
          *(_OWORD *)(v262 + 616) = v270;
          a1[100] = vaddq_s64(a1[100], v268);
          v269 += 45;
          v262 = (uint64_t)v271;
          if (v271 + 45 == (_QWORD *)v263)
            goto LABEL_361;
        }
        *(_QWORD *)v264 = *v269;
        *(_QWORD *)(v264 + 8) = *(_QWORD *)(v262 + 368);
        v272 = *(_OWORD *)(v262 + 376);
        *(_OWORD *)(v264 + 32) = *(_OWORD *)(v262 + 392);
        *(_OWORD *)(v264 + 16) = v272;
        v273 = *(_OWORD *)(v262 + 408);
        *(_OWORD *)(v264 + 64) = *(_OWORD *)(v262 + 424);
        *(_OWORD *)(v264 + 48) = v273;
        *(_BYTE *)(v264 + 88) = *(_BYTE *)(v262 + 448);
        v274 = *(_OWORD *)(v262 + 456);
        *(_QWORD *)(v264 + 112) = *(_QWORD *)(v262 + 472);
        *(_OWORD *)(v264 + 96) = v274;
        *(_BYTE *)(v264 + 128) = *(_BYTE *)(v262 + 488);
        v275 = *(_OWORD *)(v262 + 496);
        *(_QWORD *)(v264 + 152) = *(_QWORD *)(v262 + 512);
        *(_OWORD *)(v264 + 136) = v275;
        v276 = *(_OWORD *)(v262 + 520);
        *(_QWORD *)(v264 + 176) = *(_QWORD *)(v262 + 536);
        *(_OWORD *)(v264 + 160) = v276;
        v277 = *(_OWORD *)(v262 + 544);
        v278 = *(_OWORD *)(v262 + 560);
        *(_DWORD *)(v264 + 216) = *(_DWORD *)(v262 + 576);
        *(_OWORD *)(v264 + 184) = v277;
        *(_OWORD *)(v264 + 200) = v278;
        *(_QWORD *)(v264 + 224) = *(_QWORD *)(v262 + 584);
        *(_QWORD *)(v264 + 232) = *(_QWORD *)(v262 + 592);
        *(_QWORD *)(v264 + 240) = *(_QWORD *)(v262 + 600);
        *(_QWORD *)(v264 + 248) = *(_QWORD *)(v262 + 608);
        *(_QWORD *)(v264 + 256) = *(_QWORD *)(v262 + 616);
        *(_QWORD *)(v264 + 264) = *(_QWORD *)(v262 + 624);
        v279 = *(_OWORD *)(v262 + 632);
        *(_QWORD *)(v264 + 288) = *(_QWORD *)(v262 + 648);
        *(_OWORD *)(v264 + 272) = v279;
        v280 = *(_OWORD *)(v262 + 656);
        *(_QWORD *)(v264 + 312) = *(_QWORD *)(v262 + 672);
        *(_OWORD *)(v264 + 296) = v280;
        v281 = *(_QWORD *)(v262 + 680);
        *(_BYTE *)(v264 + 328) = *(_BYTE *)(v262 + 688);
        *(_QWORD *)(v264 + 320) = v281;
        v282 = *(_OWORD *)(v262 + 696);
        *(_QWORD *)(v262 + 696) = 0;
        *(_QWORD *)(v262 + 704) = 0;
        v283 = *(std::__shared_weak_count **)(v264 + 344);
        *(_OWORD *)(v264 + 336) = v282;
        if (v283)
        {
          v284 = (unint64_t *)&v283->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
            v270 = 0uLL;
            v268 = (int64x2_t)xmmword_2103B8430;
          }
        }
        *(_BYTE *)(v264 + 352) = *(_BYTE *)(v262 + 712);
        v264 += 360;
        v269 = v271 + 45;
        v262 = (uint64_t)v271;
      }
      while (v271 + 45 != (_QWORD *)v263);
      goto LABEL_361;
    }
LABEL_360:
    v264 = v262;
  }
LABEL_361:
  v286 = a1[82].i64[0];
  if (v286 != v264)
  {
    v287 = sub_20F91EE88(v286, a1[82].i64[0], v264);
    for (m = a1[82].i64[0]; m != v287; m -= 360)
    {
      v293 = *(std::__shared_weak_count **)(m - 16);
      if (v293)
      {
        v294 = (unint64_t *)&v293->__shared_owners_;
        do
          v295 = __ldaxr(v294);
        while (__stlxr(v295 - 1, v294));
        if (!v295)
        {
          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
          std::__shared_weak_count::__release_weak(v293);
        }
      }
    }
    a1[82].i64[0] = v287;
  }
  v289 = a1[83].i64[0];
  v290 = (_QWORD *)a1[83].i64[1];
  if ((_QWORD *)v289 == v290)
  {
    v291 = (_QWORD *)a1[83].i64[0];
  }
  else
  {
    v291 = (_QWORD *)a1[83].i64[1];
    v292 = (_QWORD *)(v289 + 112);
    while (!*((_BYTE *)v292 - 8))
    {
      v46 = v292 == v290;
      v292 += 14;
      if (v46)
        goto LABEL_390;
    }
    --*(_DWORD *)(*(v292 - 8) + 8);
    *(v292 - 8) = 0;
    v296.i64[0] = -1;
    v296.i64[1] = -1;
    a1[100] = vaddq_s64(a1[100], v296);
    v297 = v292 - 14;
    if (v292 - 14 != v290)
    {
      if (v292 == v290)
      {
        v291 = v292 - 14;
      }
      else
      {
        v298.i64[0] = -1;
        v298.i64[1] = -1;
        v291 = v292 - 14;
        do
        {
          while (1)
          {
            v299 = v292;
            if (!*((_BYTE *)v297 + 216))
              break;
            --*(_DWORD *)(v297[20] + 8);
            v297[20] = 0;
            a1[100] = vaddq_s64(a1[100], v298);
            v292 += 14;
            v297 = v299;
            if (v299 + 14 == v290)
              goto LABEL_390;
          }
          *v291 = *v292;
          v300 = *(_OWORD *)(v297 + 15);
          v301 = *(_OWORD *)(v297 + 17);
          v291[5] = v297[19];
          *(_OWORD *)(v291 + 3) = v301;
          *(_OWORD *)(v291 + 1) = v300;
          v291[6] = v297[20];
          v291[7] = v297[21];
          v291[8] = v297[22];
          v302 = v297[23];
          *((_BYTE *)v291 + 80) = *((_BYTE *)v297 + 192);
          v291[9] = v302;
          v303 = *(_OWORD *)(v297 + 25);
          v297[25] = 0;
          v297[26] = 0;
          v304 = (std::__shared_weak_count *)v291[12];
          *(_OWORD *)(v291 + 11) = v303;
          if (v304)
          {
            v305 = (unint64_t *)&v304->__shared_owners_;
            do
              v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
              std::__shared_weak_count::__release_weak(v304);
              v298.i64[0] = -1;
              v298.i64[1] = -1;
            }
          }
          *((_BYTE *)v291 + 104) = *((_BYTE *)v297 + 216);
          v291 += 14;
          v292 = v299 + 14;
          v297 = v299;
        }
        while (v299 + 14 != v290);
      }
    }
  }
LABEL_390:
  v307 = a1[83].i64[1];
  if (v291 != (_QWORD *)v307)
  {
    while ((_QWORD *)v307 != v291)
    {
      v308 = *(std::__shared_weak_count **)(v307 - 16);
      if (v308)
      {
        v309 = (unint64_t *)&v308->__shared_owners_;
        do
          v310 = __ldaxr(v309);
        while (__stlxr(v310 - 1, v309));
        if (!v310)
        {
          ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
          std::__shared_weak_count::__release_weak(v308);
        }
      }
      v307 -= 112;
    }
    a1[83].i64[1] = (uint64_t)v291;
  }
  v311 = a1[84].i64[1];
  v312 = (_QWORD *)a1[85].i64[0];
  if ((_QWORD *)v311 == v312)
  {
    v313 = (_QWORD *)a1[84].i64[1];
  }
  else
  {
    v313 = (_QWORD *)a1[85].i64[0];
    v314 = (_QWORD *)(v311 + 208);
    while (!*((_BYTE *)v314 - 8))
    {
      v46 = v314 == v312;
      v314 += 26;
      if (v46)
        goto LABEL_426;
    }
    --*(_DWORD *)(*(v314 - 14) + 8);
    *(v314 - 14) = 0;
    v315 = (int64x2_t)xmmword_2103B8440;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B8440);
    v316 = v314 - 26;
    if (v314 - 26 != v312)
    {
      if (v314 == v312)
      {
        v313 = v314 - 26;
      }
      else
      {
        v313 = v314 - 26;
        do
        {
          while (1)
          {
            v317 = v314;
            if (!*((_BYTE *)v316 + 408))
              break;
            --*(_DWORD *)(v316[38] + 8);
            v316[38] = 0;
            a1[100] = vaddq_s64(a1[100], v315);
            v314 += 26;
            v316 = v317;
            if (v317 + 26 == v312)
              goto LABEL_426;
          }
          *v313 = *v314;
          *(_OWORD *)(v313 + 1) = *(_OWORD *)(v316 + 27);
          v318 = *(_OWORD *)(v316 + 29);
          *(_OWORD *)(v313 + 5) = *(_OWORD *)(v316 + 31);
          *(_OWORD *)(v313 + 3) = v318;
          v319 = v313 + 7;
          v320 = v316 + 33;
          if (*((unsigned __int8 *)v313 + 88) == *((unsigned __int8 *)v316 + 296))
          {
            if (*((_BYTE *)v313 + 88))
            {
              v321 = *(_OWORD *)(v316 + 35);
              *v319 = *v320;
              *(_OWORD *)(v313 + 9) = v321;
            }
          }
          else if (*((_BYTE *)v313 + 88))
          {
            *((_BYTE *)v313 + 88) = 0;
          }
          else
          {
            v322 = *(_OWORD *)(v316 + 35);
            *v319 = *v320;
            *(_OWORD *)(v313 + 9) = v322;
            *((_BYTE *)v313 + 88) = 1;
          }
          v313[12] = v316[38];
          v323 = *(_OWORD *)(v316 + 39);
          *(_OWORD *)(v313 + 15) = *(_OWORD *)(v316 + 41);
          *(_OWORD *)(v313 + 13) = v323;
          v324 = *(_OWORD *)(v316 + 43);
          *(_OWORD *)(v313 + 19) = *(_OWORD *)(v316 + 45);
          *(_OWORD *)(v313 + 17) = v324;
          v325 = v316[47];
          *((_BYTE *)v313 + 176) = *((_BYTE *)v316 + 384);
          v313[21] = v325;
          v326 = *(_OWORD *)(v316 + 49);
          v316[50] = 0;
          v316[49] = 0;
          v327 = (std::__shared_weak_count *)v313[24];
          *(_OWORD *)(v313 + 23) = v326;
          if (v327)
          {
            v328 = (unint64_t *)&v327->__shared_owners_;
            do
              v329 = __ldaxr(v328);
            while (__stlxr(v329 - 1, v328));
            if (!v329)
            {
              ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
              std::__shared_weak_count::__release_weak(v327);
              v315 = (int64x2_t)xmmword_2103B8440;
            }
          }
          *((_BYTE *)v313 + 200) = *((_BYTE *)v316 + 408);
          v313 += 26;
          v314 = v317 + 26;
          v316 = v317;
        }
        while (v317 + 26 != v312);
      }
    }
  }
LABEL_426:
  v330 = a1[85].i64[0];
  if (v313 != (_QWORD *)v330)
  {
    while ((_QWORD *)v330 != v313)
    {
      v331 = *(std::__shared_weak_count **)(v330 - 16);
      if (v331)
      {
        v332 = (unint64_t *)&v331->__shared_owners_;
        do
          v333 = __ldaxr(v332);
        while (__stlxr(v333 - 1, v332));
        if (!v333)
        {
          ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
          std::__shared_weak_count::__release_weak(v331);
        }
      }
      v330 -= 208;
    }
    a1[85].i64[0] = (uint64_t)v313;
  }
  v334 = a1[86].i64[0];
  v335 = (_QWORD *)a1[86].i64[1];
  if ((_QWORD *)v334 == v335)
  {
    v336 = (_QWORD *)a1[86].i64[0];
  }
  else
  {
    v336 = (_QWORD *)a1[86].i64[1];
    v337 = (_QWORD *)(v334 + 208);
    while (!*((_BYTE *)v337 - 8))
    {
      v46 = v337 == v335;
      v337 += 26;
      if (v46)
        goto LABEL_462;
    }
    --*(_DWORD *)(*(v337 - 14) + 8);
    *(v337 - 14) = 0;
    v338 = (int64x2_t)xmmword_2103B8440;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B8440);
    v339 = v337 - 26;
    if (v337 - 26 != v335)
    {
      if (v337 == v335)
      {
        v336 = v337 - 26;
      }
      else
      {
        v336 = v337 - 26;
        do
        {
          while (1)
          {
            v340 = v337;
            if (!*((_BYTE *)v339 + 408))
              break;
            --*(_DWORD *)(v339[38] + 8);
            v339[38] = 0;
            a1[100] = vaddq_s64(a1[100], v338);
            v337 += 26;
            v339 = v340;
            if (v340 + 26 == v335)
              goto LABEL_462;
          }
          *v336 = *v337;
          *(_OWORD *)(v336 + 1) = *(_OWORD *)(v339 + 27);
          v341 = *(_OWORD *)(v339 + 29);
          *(_OWORD *)(v336 + 5) = *(_OWORD *)(v339 + 31);
          *(_OWORD *)(v336 + 3) = v341;
          v342 = v336 + 7;
          v343 = v339 + 33;
          if (*((unsigned __int8 *)v336 + 88) == *((unsigned __int8 *)v339 + 296))
          {
            if (*((_BYTE *)v336 + 88))
            {
              v344 = *(_OWORD *)(v339 + 35);
              *v342 = *v343;
              *(_OWORD *)(v336 + 9) = v344;
            }
          }
          else if (*((_BYTE *)v336 + 88))
          {
            *((_BYTE *)v336 + 88) = 0;
          }
          else
          {
            v345 = *(_OWORD *)(v339 + 35);
            *v342 = *v343;
            *(_OWORD *)(v336 + 9) = v345;
            *((_BYTE *)v336 + 88) = 1;
          }
          v336[12] = v339[38];
          v346 = *(_OWORD *)(v339 + 39);
          *(_OWORD *)(v336 + 15) = *(_OWORD *)(v339 + 41);
          *(_OWORD *)(v336 + 13) = v346;
          v347 = *(_OWORD *)(v339 + 43);
          *(_OWORD *)(v336 + 19) = *(_OWORD *)(v339 + 45);
          *(_OWORD *)(v336 + 17) = v347;
          v348 = v339[47];
          *((_BYTE *)v336 + 176) = *((_BYTE *)v339 + 384);
          v336[21] = v348;
          v349 = *(_OWORD *)(v339 + 49);
          v339[50] = 0;
          v339[49] = 0;
          v350 = (std::__shared_weak_count *)v336[24];
          *(_OWORD *)(v336 + 23) = v349;
          if (v350)
          {
            v351 = (unint64_t *)&v350->__shared_owners_;
            do
              v352 = __ldaxr(v351);
            while (__stlxr(v352 - 1, v351));
            if (!v352)
            {
              ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
              std::__shared_weak_count::__release_weak(v350);
              v338 = (int64x2_t)xmmword_2103B8440;
            }
          }
          *((_BYTE *)v336 + 200) = *((_BYTE *)v339 + 408);
          v336 += 26;
          v337 = v340 + 26;
          v339 = v340;
        }
        while (v340 + 26 != v335);
      }
    }
  }
LABEL_462:
  v353 = a1[86].i64[1];
  if (v336 != (_QWORD *)v353)
  {
    while ((_QWORD *)v353 != v336)
    {
      v354 = *(std::__shared_weak_count **)(v353 - 16);
      if (v354)
      {
        v355 = (unint64_t *)&v354->__shared_owners_;
        do
          v356 = __ldaxr(v355);
        while (__stlxr(v356 - 1, v355));
        if (!v356)
        {
          ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
          std::__shared_weak_count::__release_weak(v354);
        }
      }
      v353 -= 208;
    }
    a1[86].i64[1] = (uint64_t)v336;
  }
  v357 = a1[87].i64[1];
  v358 = (_QWORD *)a1[88].i64[0];
  if ((_QWORD *)v357 == v358)
  {
    v359 = (_QWORD *)a1[87].i64[1];
  }
  else
  {
    v359 = (_QWORD *)a1[88].i64[0];
    v360 = (_QWORD *)(v357 + 176);
    while (!*((_BYTE *)v360 - 8))
    {
      v46 = v360 == v358;
      v360 += 22;
      if (v46)
        goto LABEL_498;
    }
    --*(_DWORD *)(*(v360 - 12) + 8);
    *(v360 - 12) = 0;
    v361 = (int64x2_t)xmmword_2103B8430;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B8430);
    v362 = v360 - 22;
    if (v360 - 22 != v358)
    {
      if (v360 == v358)
      {
        v359 = v360 - 22;
      }
      else
      {
        v359 = v360 - 22;
        do
        {
          while (1)
          {
            v363 = v360;
            if (!*((_BYTE *)v362 + 344))
              break;
            --*(_DWORD *)(v362[32] + 8);
            v362[32] = 0;
            a1[100] = vaddq_s64(a1[100], v361);
            v360 += 22;
            v362 = v363;
            if (v363 + 22 == v358)
              goto LABEL_498;
          }
          *v359 = *v360;
          *(_OWORD *)(v359 + 1) = *(_OWORD *)(v362 + 23);
          v364 = *(_OWORD *)(v362 + 25);
          v359[5] = v362[27];
          *(_OWORD *)(v359 + 3) = v364;
          v365 = v359 + 6;
          v366 = (__int128 *)(v362 + 28);
          if (*((unsigned __int8 *)v359 + 72) == *((unsigned __int8 *)v362 + 248))
          {
            if (*((_BYTE *)v359 + 72))
            {
              v367 = *v366;
              v359[8] = v362[30];
              *v365 = v367;
            }
          }
          else if (*((_BYTE *)v359 + 72))
          {
            *((_BYTE *)v359 + 72) = 0;
          }
          else
          {
            v368 = *v366;
            v359[8] = v362[30];
            *v365 = v368;
            *((_BYTE *)v359 + 72) = 1;
          }
          v359[10] = v362[32];
          v369 = *(_OWORD *)(v362 + 33);
          v359[13] = v362[35];
          *(_OWORD *)(v359 + 11) = v369;
          v370 = *((_OWORD *)v362 + 18);
          v359[16] = v362[38];
          *((_OWORD *)v359 + 7) = v370;
          v371 = v362[39];
          *((_BYTE *)v359 + 144) = *((_BYTE *)v362 + 320);
          v359[17] = v371;
          v372 = *(_OWORD *)(v362 + 41);
          v362[42] = 0;
          v362[41] = 0;
          v373 = (std::__shared_weak_count *)v359[20];
          *(_OWORD *)(v359 + 19) = v372;
          if (v373)
          {
            v374 = (unint64_t *)&v373->__shared_owners_;
            do
              v375 = __ldaxr(v374);
            while (__stlxr(v375 - 1, v374));
            if (!v375)
            {
              ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
              std::__shared_weak_count::__release_weak(v373);
              v361 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *((_BYTE *)v359 + 168) = *((_BYTE *)v362 + 344);
          v359 += 22;
          v360 = v363 + 22;
          v362 = v363;
        }
        while (v363 + 22 != v358);
      }
    }
  }
LABEL_498:
  v376 = a1[88].i64[0];
  if (v359 != (_QWORD *)v376)
  {
    while ((_QWORD *)v376 != v359)
    {
      v377 = *(std::__shared_weak_count **)(v376 - 16);
      if (v377)
      {
        v378 = (unint64_t *)&v377->__shared_owners_;
        do
          v379 = __ldaxr(v378);
        while (__stlxr(v379 - 1, v378));
        if (!v379)
        {
          ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
          std::__shared_weak_count::__release_weak(v377);
        }
      }
      v376 -= 176;
    }
    a1[88].i64[0] = (uint64_t)v359;
  }
  v380 = a1[89].i64[0];
  v381 = (_QWORD *)a1[89].i64[1];
  if ((_QWORD *)v380 == v381)
  {
    v382 = (_QWORD *)a1[89].i64[0];
  }
  else
  {
    v382 = (_QWORD *)a1[89].i64[1];
    v383 = (_QWORD *)(v380 + 176);
    while (!*((_BYTE *)v383 - 8))
    {
      v46 = v383 == v381;
      v383 += 22;
      if (v46)
        goto LABEL_534;
    }
    --*(_DWORD *)(*(v383 - 12) + 8);
    *(v383 - 12) = 0;
    v384 = (int64x2_t)xmmword_2103B8430;
    a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_2103B8430);
    v385 = v383 - 22;
    if (v383 - 22 != v381)
    {
      if (v383 == v381)
      {
        v382 = v383 - 22;
      }
      else
      {
        v382 = v383 - 22;
        do
        {
          while (1)
          {
            v386 = v383;
            if (!*((_BYTE *)v385 + 344))
              break;
            --*(_DWORD *)(v385[32] + 8);
            v385[32] = 0;
            a1[100] = vaddq_s64(a1[100], v384);
            v383 += 22;
            v385 = v386;
            if (v386 + 22 == v381)
              goto LABEL_534;
          }
          *v382 = *v383;
          *(_OWORD *)(v382 + 1) = *(_OWORD *)(v385 + 23);
          v387 = *(_OWORD *)(v385 + 25);
          v382[5] = v385[27];
          *(_OWORD *)(v382 + 3) = v387;
          v388 = v382 + 6;
          v389 = (__int128 *)(v385 + 28);
          if (*((unsigned __int8 *)v382 + 72) == *((unsigned __int8 *)v385 + 248))
          {
            if (*((_BYTE *)v382 + 72))
            {
              v390 = *v389;
              v382[8] = v385[30];
              *v388 = v390;
            }
          }
          else if (*((_BYTE *)v382 + 72))
          {
            *((_BYTE *)v382 + 72) = 0;
          }
          else
          {
            v391 = *v389;
            v382[8] = v385[30];
            *v388 = v391;
            *((_BYTE *)v382 + 72) = 1;
          }
          v382[10] = v385[32];
          v392 = *(_OWORD *)(v385 + 33);
          v382[13] = v385[35];
          *(_OWORD *)(v382 + 11) = v392;
          v393 = *((_OWORD *)v385 + 18);
          v382[16] = v385[38];
          *((_OWORD *)v382 + 7) = v393;
          v394 = v385[39];
          *((_BYTE *)v382 + 144) = *((_BYTE *)v385 + 320);
          v382[17] = v394;
          v395 = *(_OWORD *)(v385 + 41);
          v385[42] = 0;
          v385[41] = 0;
          v396 = (std::__shared_weak_count *)v382[20];
          *(_OWORD *)(v382 + 19) = v395;
          if (v396)
          {
            v397 = (unint64_t *)&v396->__shared_owners_;
            do
              v398 = __ldaxr(v397);
            while (__stlxr(v398 - 1, v397));
            if (!v398)
            {
              ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
              std::__shared_weak_count::__release_weak(v396);
              v384 = (int64x2_t)xmmword_2103B8430;
            }
          }
          *((_BYTE *)v382 + 168) = *((_BYTE *)v385 + 344);
          v382 += 22;
          v383 = v386 + 22;
          v385 = v386;
        }
        while (v386 + 22 != v381);
      }
    }
  }
LABEL_534:
  v399 = a1[89].i64[1];
  if (v382 != (_QWORD *)v399)
  {
    while ((_QWORD *)v399 != v382)
    {
      v400 = *(std::__shared_weak_count **)(v399 - 16);
      if (v400)
      {
        v401 = (unint64_t *)&v400->__shared_owners_;
        do
          v402 = __ldaxr(v401);
        while (__stlxr(v402 - 1, v401));
        if (!v402)
        {
          ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
          std::__shared_weak_count::__release_weak(v400);
        }
      }
      v399 -= 176;
    }
    a1[89].i64[1] = (uint64_t)v382;
  }
  v403 = a1[90].i64[1];
  v404 = a1[91].i64[0];
  if (v403 == v404)
    goto LABEL_561;
  v405 = a1[91].i64[0];
  while (!*(_BYTE *)(v403 + 208))
  {
    v403 += 216;
    if (v403 == v404)
      goto LABEL_562;
  }
  v406 = *(_QWORD *)(v403 + 64);
  --*(_DWORD *)(*(_QWORD *)(v403 + 56) + 8);
  --*(_DWORD *)(v406 + 8);
  v407 = *(_QWORD *)(v403 + 80);
  --*(_DWORD *)(*(_QWORD *)(v403 + 72) + 8);
  --*(_DWORD *)(v407 + 8);
  v408 = *(_QWORD *)(v403 + 96);
  --*(_DWORD *)(*(_QWORD *)(v403 + 88) + 8);
  --*(_DWORD *)(v408 + 8);
  v409 = *(_QWORD *)(v403 + 112);
  --*(_DWORD *)(*(_QWORD *)(v403 + 104) + 8);
  --*(_DWORD *)(v409 + 8);
  v410 = *(_QWORD *)(v403 + 128);
  --*(_DWORD *)(*(_QWORD *)(v403 + 120) + 8);
  *(_OWORD *)(v403 + 56) = 0u;
  *(_OWORD *)(v403 + 72) = 0u;
  *(_OWORD *)(v403 + 88) = 0u;
  *(_OWORD *)(v403 + 104) = 0u;
  --*(_DWORD *)(v410 + 8);
  *(_OWORD *)(v403 + 120) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v403 + 136) + 8);
  *(_QWORD *)(v403 + 136) = 0;
  v411 = (int64x2_t)xmmword_210378050;
  a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_210378050);
  if (v403 != v404)
  {
    v412 = (_QWORD *)(v403 + 216);
    if (v403 + 216 != v404)
    {
      v413 = 0uLL;
      v405 = v403;
      do
      {
        while (1)
        {
          v419 = v412;
          if (!*(_BYTE *)(v403 + 424))
            break;
          v414 = *(_QWORD *)(v403 + 280);
          --*(_DWORD *)(*(_QWORD *)(v403 + 272) + 8);
          --*(_DWORD *)(v414 + 8);
          v415 = *(_QWORD *)(v403 + 296);
          --*(_DWORD *)(*(_QWORD *)(v403 + 288) + 8);
          --*(_DWORD *)(v415 + 8);
          v416 = *(_QWORD *)(v403 + 312);
          --*(_DWORD *)(*(_QWORD *)(v403 + 304) + 8);
          --*(_DWORD *)(v416 + 8);
          v417 = *(_QWORD *)(v403 + 328);
          --*(_DWORD *)(*(_QWORD *)(v403 + 320) + 8);
          --*(_DWORD *)(v417 + 8);
          v418 = *(_QWORD *)(v403 + 344);
          --*(_DWORD *)(*(_QWORD *)(v403 + 336) + 8);
          *(_OWORD *)(v403 + 272) = v413;
          *(_OWORD *)(v403 + 288) = v413;
          *(_OWORD *)(v403 + 304) = v413;
          *(_OWORD *)(v403 + 320) = v413;
          --*(_DWORD *)(v418 + 8);
          *(_OWORD *)(v403 + 336) = v413;
          --*(_DWORD *)(*(_QWORD *)(v403 + 352) + 8);
          *(_QWORD *)(v403 + 352) = 0;
          a1[100] = vaddq_s64(a1[100], v411);
          v412 += 27;
          v403 = (uint64_t)v419;
          if (v419 + 27 == (_QWORD *)v404)
            goto LABEL_562;
        }
        *(_QWORD *)v405 = *v412;
        *(_QWORD *)(v405 + 8) = *(_QWORD *)(v403 + 224);
        *(_OWORD *)(v405 + 16) = *(_OWORD *)(v403 + 232);
        v420 = *(_OWORD *)(v403 + 248);
        *(_QWORD *)(v405 + 48) = *(_QWORD *)(v403 + 264);
        *(_OWORD *)(v405 + 32) = v420;
        *(_QWORD *)(v405 + 56) = *(_QWORD *)(v403 + 272);
        *(_QWORD *)(v405 + 64) = *(_QWORD *)(v403 + 280);
        *(_QWORD *)(v405 + 72) = *(_QWORD *)(v403 + 288);
        *(_QWORD *)(v405 + 80) = *(_QWORD *)(v403 + 296);
        *(_QWORD *)(v405 + 88) = *(_QWORD *)(v403 + 304);
        *(_QWORD *)(v405 + 96) = *(_QWORD *)(v403 + 312);
        *(_QWORD *)(v405 + 104) = *(_QWORD *)(v403 + 320);
        *(_QWORD *)(v405 + 112) = *(_QWORD *)(v403 + 328);
        *(_QWORD *)(v405 + 120) = *(_QWORD *)(v403 + 336);
        *(_QWORD *)(v405 + 128) = *(_QWORD *)(v403 + 344);
        *(_QWORD *)(v405 + 136) = *(_QWORD *)(v403 + 352);
        *(_OWORD *)(v405 + 144) = *(_OWORD *)(v403 + 360);
        *(_OWORD *)(v405 + 160) = *(_OWORD *)(v403 + 376);
        v421 = *(_QWORD *)(v403 + 392);
        *(_BYTE *)(v405 + 184) = *(_BYTE *)(v403 + 400);
        *(_QWORD *)(v405 + 176) = v421;
        v422 = *(_OWORD *)(v403 + 408);
        *(_QWORD *)(v403 + 416) = 0;
        *(_QWORD *)(v403 + 408) = 0;
        v423 = *(std::__shared_weak_count **)(v405 + 200);
        *(_OWORD *)(v405 + 192) = v422;
        if (v423)
        {
          v424 = (unint64_t *)&v423->__shared_owners_;
          do
            v425 = __ldaxr(v424);
          while (__stlxr(v425 - 1, v424));
          if (!v425)
          {
            ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
            std::__shared_weak_count::__release_weak(v423);
            v413 = 0uLL;
            v411 = (int64x2_t)xmmword_210378050;
          }
        }
        *(_BYTE *)(v405 + 208) = *(_BYTE *)(v403 + 424);
        v405 += 216;
        v412 = v419 + 27;
        v403 = (uint64_t)v419;
      }
      while (v419 + 27 != (_QWORD *)v404);
      goto LABEL_562;
    }
LABEL_561:
    v405 = v403;
  }
LABEL_562:
  v426 = a1[91].i64[0];
  if (v426 != v405)
  {
    v427 = sub_20F5B6E44(v426, a1[91].i64[0], v405);
    for (n = a1[91].i64[0]; n != v427; n -= 216)
    {
      v432 = *(std::__shared_weak_count **)(n - 16);
      if (v432)
      {
        v433 = (unint64_t *)&v432->__shared_owners_;
        do
          v434 = __ldaxr(v433);
        while (__stlxr(v434 - 1, v433));
        if (!v434)
        {
          ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
          std::__shared_weak_count::__release_weak(v432);
        }
      }
    }
    a1[91].i64[0] = v427;
  }
  v429 = a1[92].i64[0];
  v430 = a1[92].i64[1];
  if (v429 == v430)
    goto LABEL_588;
  v431 = a1[92].i64[1];
  while (!*(_BYTE *)(v429 + 176))
  {
    v429 += 184;
    if (v429 == v430)
      goto LABEL_589;
  }
  v435 = *(_QWORD *)(v429 + 72);
  --*(_DWORD *)(*(_QWORD *)(v429 + 64) + 8);
  --*(_DWORD *)(v435 + 8);
  v436 = *(_QWORD *)(v429 + 88);
  --*(_DWORD *)(*(_QWORD *)(v429 + 80) + 8);
  --*(_DWORD *)(v436 + 8);
  v437 = *(_QWORD *)(v429 + 104);
  --*(_DWORD *)(*(_QWORD *)(v429 + 96) + 8);
  *(_OWORD *)(v429 + 64) = 0u;
  *(_OWORD *)(v429 + 80) = 0u;
  --*(_DWORD *)(v437 + 8);
  *(_OWORD *)(v429 + 96) = 0u;
  v438 = (int64x2_t)xmmword_210378050;
  a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_210378050);
  if (v429 != v430)
  {
    v439 = (_QWORD *)(v429 + 184);
    if (v429 + 184 != v430)
    {
      v440 = 0uLL;
      v431 = v429;
      do
      {
        while (1)
        {
          v444 = v439;
          if (!*(_BYTE *)(v429 + 360))
            break;
          v441 = *(_QWORD *)(v429 + 256);
          --*(_DWORD *)(*(_QWORD *)(v429 + 248) + 8);
          --*(_DWORD *)(v441 + 8);
          v442 = *(_QWORD *)(v429 + 272);
          --*(_DWORD *)(*(_QWORD *)(v429 + 264) + 8);
          *(_OWORD *)(v429 + 248) = v440;
          --*(_DWORD *)(v442 + 8);
          v443 = *(_QWORD *)(v429 + 288);
          --*(_DWORD *)(*(_QWORD *)(v429 + 280) + 8);
          --*(_DWORD *)(v443 + 8);
          *(_OWORD *)(v429 + 264) = v440;
          *(_OWORD *)(v429 + 280) = v440;
          a1[100] = vaddq_s64(a1[100], v438);
          v439 += 23;
          v429 = (uint64_t)v444;
          if (v444 + 23 == (_QWORD *)v430)
            goto LABEL_589;
        }
        *(_QWORD *)v431 = *v439;
        *(_QWORD *)(v431 + 8) = *(_QWORD *)(v429 + 192);
        *(_OWORD *)(v431 + 16) = *(_OWORD *)(v429 + 200);
        v445 = *(_OWORD *)(v429 + 232);
        *(_OWORD *)(v431 + 32) = *(_OWORD *)(v429 + 216);
        *(_OWORD *)(v431 + 48) = v445;
        *(_QWORD *)(v431 + 64) = *(_QWORD *)(v429 + 248);
        *(_QWORD *)(v431 + 72) = *(_QWORD *)(v429 + 256);
        *(_QWORD *)(v431 + 80) = *(_QWORD *)(v429 + 264);
        *(_QWORD *)(v431 + 88) = *(_QWORD *)(v429 + 272);
        *(_QWORD *)(v431 + 96) = *(_QWORD *)(v429 + 280);
        *(_QWORD *)(v431 + 104) = *(_QWORD *)(v429 + 288);
        *(_OWORD *)(v431 + 112) = *(_OWORD *)(v429 + 296);
        *(_OWORD *)(v431 + 128) = *(_OWORD *)(v429 + 312);
        v446 = *(_QWORD *)(v429 + 328);
        *(_BYTE *)(v431 + 152) = *(_BYTE *)(v429 + 336);
        *(_QWORD *)(v431 + 144) = v446;
        v447 = *(_OWORD *)(v429 + 344);
        *(_QWORD *)(v429 + 344) = 0;
        *(_QWORD *)(v429 + 352) = 0;
        v448 = *(std::__shared_weak_count **)(v431 + 168);
        *(_OWORD *)(v431 + 160) = v447;
        if (v448)
        {
          v449 = (unint64_t *)&v448->__shared_owners_;
          do
            v450 = __ldaxr(v449);
          while (__stlxr(v450 - 1, v449));
          if (!v450)
          {
            ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
            std::__shared_weak_count::__release_weak(v448);
            v440 = 0uLL;
            v438 = (int64x2_t)xmmword_210378050;
          }
        }
        *(_BYTE *)(v431 + 176) = *(_BYTE *)(v429 + 360);
        v431 += 184;
        v439 = v444 + 23;
        v429 = (uint64_t)v444;
      }
      while (v444 + 23 != (_QWORD *)v430);
      goto LABEL_589;
    }
LABEL_588:
    v431 = v429;
  }
LABEL_589:
  v451 = a1[92].i64[1];
  if (v431 != v451)
  {
    while (v451 != v431)
    {
      v452 = *(std::__shared_weak_count **)(v451 - 16);
      if (v452)
      {
        v453 = (unint64_t *)&v452->__shared_owners_;
        do
          v454 = __ldaxr(v453);
        while (__stlxr(v454 - 1, v453));
        if (!v454)
        {
          ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
          std::__shared_weak_count::__release_weak(v452);
        }
      }
      v451 -= 184;
    }
    a1[92].i64[1] = v431;
  }
  v455 = a1[93].i64[1];
  v456 = a1[94].i64[0];
  if (v455 == v456)
    goto LABEL_616;
  v457 = a1[94].i64[0];
  while (!*(_BYTE *)(v455 + 200))
  {
    v455 += 208;
    if (v455 == v456)
      goto LABEL_617;
  }
  v458 = *(_QWORD *)(v455 + 72);
  --*(_DWORD *)(*(_QWORD *)(v455 + 64) + 8);
  --*(_DWORD *)(v458 + 8);
  v459 = *(_QWORD *)(v455 + 88);
  --*(_DWORD *)(*(_QWORD *)(v455 + 80) + 8);
  --*(_DWORD *)(v459 + 8);
  v460 = *(_QWORD *)(v455 + 104);
  --*(_DWORD *)(*(_QWORD *)(v455 + 96) + 8);
  --*(_DWORD *)(v460 + 8);
  v461 = *(_QWORD *)(v455 + 120);
  --*(_DWORD *)(*(_QWORD *)(v455 + 112) + 8);
  --*(_DWORD *)(v461 + 8);
  v462 = *(_QWORD *)(v455 + 136);
  --*(_DWORD *)(*(_QWORD *)(v455 + 128) + 8);
  *(_OWORD *)(v455 + 64) = 0u;
  *(_OWORD *)(v455 + 80) = 0u;
  *(_OWORD *)(v455 + 96) = 0u;
  *(_OWORD *)(v455 + 112) = 0u;
  --*(_DWORD *)(v462 + 8);
  *(_OWORD *)(v455 + 128) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v455 + 144) + 8);
  *(_QWORD *)(v455 + 144) = 0;
  v463.i64[0] = -1;
  v463.i64[1] = -1;
  a1[100] = vaddq_s64(a1[100], v463);
  if (v455 != v456)
  {
    v464 = (_QWORD *)(v455 + 208);
    if (v455 + 208 != v456)
    {
      v465 = 0uLL;
      v466.i64[0] = -1;
      v466.i64[1] = -1;
      v457 = v455;
      do
      {
        while (1)
        {
          v472 = v464;
          if (!*(_BYTE *)(v455 + 408))
            break;
          v467 = *(_QWORD *)(v455 + 280);
          --*(_DWORD *)(*(_QWORD *)(v455 + 272) + 8);
          --*(_DWORD *)(v467 + 8);
          v468 = *(_QWORD *)(v455 + 296);
          --*(_DWORD *)(*(_QWORD *)(v455 + 288) + 8);
          --*(_DWORD *)(v468 + 8);
          v469 = *(_QWORD *)(v455 + 312);
          --*(_DWORD *)(*(_QWORD *)(v455 + 304) + 8);
          --*(_DWORD *)(v469 + 8);
          v470 = *(_QWORD *)(v455 + 328);
          --*(_DWORD *)(*(_QWORD *)(v455 + 320) + 8);
          --*(_DWORD *)(v470 + 8);
          v471 = *(_QWORD *)(v455 + 344);
          --*(_DWORD *)(*(_QWORD *)(v455 + 336) + 8);
          *(_OWORD *)(v455 + 272) = v465;
          *(_OWORD *)(v455 + 288) = v465;
          *(_OWORD *)(v455 + 304) = v465;
          *(_OWORD *)(v455 + 320) = v465;
          --*(_DWORD *)(v471 + 8);
          *(_OWORD *)(v455 + 336) = v465;
          --*(_DWORD *)(*(_QWORD *)(v455 + 352) + 8);
          *(_QWORD *)(v455 + 352) = 0;
          a1[100] = vaddq_s64(a1[100], v466);
          v464 += 26;
          v455 = (uint64_t)v472;
          if (v472 + 26 == (_QWORD *)v456)
            goto LABEL_617;
        }
        *(_QWORD *)v457 = *v464;
        *(_QWORD *)(v457 + 8) = *(_QWORD *)(v455 + 216);
        v473 = *(_OWORD *)(v455 + 224);
        *(_QWORD *)(v457 + 32) = *(_QWORD *)(v455 + 240);
        *(_OWORD *)(v457 + 16) = v473;
        v474 = *(_OWORD *)(v455 + 248);
        *(_QWORD *)(v457 + 56) = *(_QWORD *)(v455 + 264);
        *(_OWORD *)(v457 + 40) = v474;
        *(_QWORD *)(v457 + 64) = *(_QWORD *)(v455 + 272);
        *(_QWORD *)(v457 + 72) = *(_QWORD *)(v455 + 280);
        *(_QWORD *)(v457 + 80) = *(_QWORD *)(v455 + 288);
        *(_QWORD *)(v457 + 88) = *(_QWORD *)(v455 + 296);
        *(_QWORD *)(v457 + 96) = *(_QWORD *)(v455 + 304);
        *(_QWORD *)(v457 + 104) = *(_QWORD *)(v455 + 312);
        *(_QWORD *)(v457 + 112) = *(_QWORD *)(v455 + 320);
        *(_QWORD *)(v457 + 120) = *(_QWORD *)(v455 + 328);
        *(_QWORD *)(v457 + 128) = *(_QWORD *)(v455 + 336);
        *(_QWORD *)(v457 + 136) = *(_QWORD *)(v455 + 344);
        *(_QWORD *)(v457 + 144) = *(_QWORD *)(v455 + 352);
        *(_QWORD *)(v457 + 152) = *(_QWORD *)(v455 + 360);
        *(_QWORD *)(v457 + 160) = *(_QWORD *)(v455 + 368);
        v475 = *(_QWORD *)(v455 + 376);
        *(_BYTE *)(v457 + 176) = *(_BYTE *)(v455 + 384);
        *(_QWORD *)(v457 + 168) = v475;
        v476 = *(_OWORD *)(v455 + 392);
        *(_QWORD *)(v455 + 392) = 0;
        *(_QWORD *)(v455 + 400) = 0;
        v477 = *(std::__shared_weak_count **)(v457 + 192);
        *(_OWORD *)(v457 + 184) = v476;
        if (v477)
        {
          v478 = (unint64_t *)&v477->__shared_owners_;
          do
            v479 = __ldaxr(v478);
          while (__stlxr(v479 - 1, v478));
          if (!v479)
          {
            ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
            std::__shared_weak_count::__release_weak(v477);
            v466.i64[0] = -1;
            v466.i64[1] = -1;
            v465 = 0uLL;
          }
        }
        *(_BYTE *)(v457 + 200) = *(_BYTE *)(v455 + 408);
        v457 += 208;
        v464 = v472 + 26;
        v455 = (uint64_t)v472;
      }
      while (v472 + 26 != (_QWORD *)v456);
      goto LABEL_617;
    }
LABEL_616:
    v457 = v455;
  }
LABEL_617:
  v480 = a1[94].i64[0];
  if (v480 != v457)
  {
    v481 = sub_20F91F01C(v480, a1[94].i64[0], v457);
    for (ii = a1[94].i64[0]; ii != v481; ii -= 208)
    {
      v486 = *(std::__shared_weak_count **)(ii - 16);
      if (v486)
      {
        v487 = (unint64_t *)&v486->__shared_owners_;
        do
          v488 = __ldaxr(v487);
        while (__stlxr(v488 - 1, v487));
        if (!v488)
        {
          ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
          std::__shared_weak_count::__release_weak(v486);
        }
      }
    }
    a1[94].i64[0] = v481;
  }
  v483 = a1[95].i64[0];
  v484 = a1[95].i64[1];
  if (v483 == v484)
    goto LABEL_643;
  v485 = a1[95].i64[1];
  while (!*(_BYTE *)(v483 + 176))
  {
    v483 += 184;
    if (v483 == v484)
      goto LABEL_644;
  }
  v489 = *(_QWORD *)(v483 + 64);
  --*(_DWORD *)(*(_QWORD *)(v483 + 56) + 8);
  --*(_DWORD *)(v489 + 8);
  v490 = *(_QWORD *)(v483 + 80);
  --*(_DWORD *)(*(_QWORD *)(v483 + 72) + 8);
  --*(_DWORD *)(v490 + 8);
  v491 = *(_QWORD *)(v483 + 96);
  --*(_DWORD *)(*(_QWORD *)(v483 + 88) + 8);
  *(_OWORD *)(v483 + 56) = 0u;
  *(_OWORD *)(v483 + 72) = 0u;
  --*(_DWORD *)(v491 + 8);
  *(_OWORD *)(v483 + 88) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v483 + 104) + 8);
  *(_QWORD *)(v483 + 104) = 0;
  v492 = (int64x2_t)xmmword_210378050;
  a1[100] = vaddq_s64(a1[100], (int64x2_t)xmmword_210378050);
  if (v483 != v484)
  {
    v493 = (_QWORD *)(v483 + 184);
    if (v483 + 184 != v484)
    {
      v494 = 0uLL;
      v485 = v483;
      do
      {
        while (1)
        {
          v498 = v493;
          if (!*(_BYTE *)(v483 + 360))
            break;
          v495 = *(_QWORD *)(v483 + 248);
          --*(_DWORD *)(*(_QWORD *)(v483 + 240) + 8);
          --*(_DWORD *)(v495 + 8);
          v496 = *(_QWORD *)(v483 + 264);
          --*(_DWORD *)(*(_QWORD *)(v483 + 256) + 8);
          --*(_DWORD *)(v496 + 8);
          v497 = *(_QWORD *)(v483 + 280);
          --*(_DWORD *)(*(_QWORD *)(v483 + 272) + 8);
          *(_OWORD *)(v483 + 240) = v494;
          *(_OWORD *)(v483 + 256) = v494;
          --*(_DWORD *)(v497 + 8);
          *(_OWORD *)(v483 + 272) = v494;
          --*(_DWORD *)(*(_QWORD *)(v483 + 288) + 8);
          *(_QWORD *)(v483 + 288) = 0;
          a1[100] = vaddq_s64(a1[100], v492);
          v493 += 23;
          v483 = (uint64_t)v498;
          if (v498 + 23 == (_QWORD *)v484)
            goto LABEL_644;
        }
        *(_QWORD *)v485 = *v493;
        *(_QWORD *)(v485 + 8) = *(_QWORD *)(v483 + 192);
        *(_OWORD *)(v485 + 16) = *(_OWORD *)(v483 + 200);
        v499 = *(_OWORD *)(v483 + 216);
        *(_QWORD *)(v485 + 48) = *(_QWORD *)(v483 + 232);
        *(_OWORD *)(v485 + 32) = v499;
        *(_QWORD *)(v485 + 56) = *(_QWORD *)(v483 + 240);
        *(_QWORD *)(v485 + 64) = *(_QWORD *)(v483 + 248);
        *(_QWORD *)(v485 + 72) = *(_QWORD *)(v483 + 256);
        *(_QWORD *)(v485 + 80) = *(_QWORD *)(v483 + 264);
        *(_QWORD *)(v485 + 88) = *(_QWORD *)(v483 + 272);
        *(_QWORD *)(v485 + 96) = *(_QWORD *)(v483 + 280);
        *(_QWORD *)(v485 + 104) = *(_QWORD *)(v483 + 288);
        *(_OWORD *)(v485 + 112) = *(_OWORD *)(v483 + 296);
        *(_OWORD *)(v485 + 128) = *(_OWORD *)(v483 + 312);
        v500 = *(_QWORD *)(v483 + 328);
        *(_BYTE *)(v485 + 152) = *(_BYTE *)(v483 + 336);
        *(_QWORD *)(v485 + 144) = v500;
        v501 = *(_OWORD *)(v483 + 344);
        *(_QWORD *)(v483 + 352) = 0;
        *(_QWORD *)(v483 + 344) = 0;
        v502 = *(std::__shared_weak_count **)(v485 + 168);
        *(_OWORD *)(v485 + 160) = v501;
        if (v502)
        {
          v503 = (unint64_t *)&v502->__shared_owners_;
          do
            v504 = __ldaxr(v503);
          while (__stlxr(v504 - 1, v503));
          if (!v504)
          {
            ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
            std::__shared_weak_count::__release_weak(v502);
            v494 = 0uLL;
            v492 = (int64x2_t)xmmword_210378050;
          }
        }
        *(_BYTE *)(v485 + 176) = *(_BYTE *)(v483 + 360);
        v485 += 184;
        v493 = v498 + 23;
        v483 = (uint64_t)v498;
      }
      while (v498 + 23 != (_QWORD *)v484);
      goto LABEL_644;
    }
LABEL_643:
    v485 = v483;
  }
LABEL_644:
  v505 = a1[95].i64[1];
  if (v505 != v485)
  {
    v506 = sub_20FA5579C(v505, a1[95].i64[1], v485);
    for (jj = a1[95].i64[1]; jj != v506; jj -= 184)
    {
      v511 = *(std::__shared_weak_count **)(jj - 16);
      if (v511)
      {
        v512 = (unint64_t *)&v511->__shared_owners_;
        do
          v513 = __ldaxr(v512);
        while (__stlxr(v513 - 1, v512));
        if (!v513)
        {
          ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
          std::__shared_weak_count::__release_weak(v511);
        }
      }
    }
    a1[95].i64[1] = v506;
  }
LABEL_647:
  v508 = a1->i64[1];
  v509 = a1[1].i64[0];
  if (v509 != v508)
  {
    v510 = -16 - v509;
    do
    {
      while (1)
      {
        while (1)
        {
          v514 = *(_QWORD *)(v509 - 8);
          v509 -= 16;
          if ((*(_BYTE *)(v514 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v514 + 4) = 0;
          v510 += 16;
          if (v509 == v508)
            goto LABEL_666;
        }
        sub_20F3D7028((uint64_t)a1[2].i64, v514);
        v515 = v509 + 16;
        v508 = a1->i64[1];
        v516 = a1[1].i64[0];
        if (v509 + 16 != v516)
          break;
        a1[1].i64[0] = v509;
        v510 += 16;
        if (v509 == v508)
          goto LABEL_666;
      }
      v517 = v516 - v509 - 32;
      v518 = v509;
      if (v517 < 0x10)
        goto LABEL_864;
      v519 = (v517 >> 4) + 1;
      v520 = 16 * (v519 & 0x1FFFFFFFFFFFFFFELL);
      v518 = v509 + v520;
      v515 += v520;
      v521 = (((unint64_t)(v516 + v510) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v522 = v508 + 16 * ((v509 - v508) >> 4) + 24;
      do
      {
        v523 = *(_DWORD *)(v522 + 8);
        *(_DWORD *)(v522 - 24) = *(_DWORD *)(v522 - 8);
        *(_DWORD *)(v522 - 8) = v523;
        v524 = *(_QWORD *)(v522 + 16);
        *(_QWORD *)(v522 - 16) = *(_QWORD *)v522;
        *(_QWORD *)v522 = v524;
        v522 += 32;
        v521 -= 2;
      }
      while (v521);
      if (v519 != (v519 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_864:
        do
        {
          *(_DWORD *)v518 = *(_DWORD *)v515;
          *(_QWORD *)(v518 + 8) = *(_QWORD *)(v515 + 8);
          v518 += 16;
          v515 += 16;
        }
        while (v515 != v516);
      }
      a1[1].i64[0] = v518;
      v510 += 16;
    }
    while (v509 != v508);
  }
LABEL_666:
  v525 = a1[6].i64[1];
  v526 = a1[7].i64[0];
  if (v526 != v525)
  {
    v527 = -16 - v526;
    do
    {
      while (1)
      {
        while (1)
        {
          v528 = *(_QWORD *)(v526 - 8);
          v526 -= 16;
          if ((*(_BYTE *)(v528 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v528 + 4) = 0;
          v527 += 16;
          if (v526 == v525)
            goto LABEL_679;
        }
        sub_20F5B6F80((uint64_t)a1[8].i64, v528);
        v529 = v526 + 16;
        v525 = a1[6].i64[1];
        v530 = a1[7].i64[0];
        if (v526 + 16 != v530)
          break;
        a1[7].i64[0] = v526;
        v527 += 16;
        if (v526 == v525)
          goto LABEL_679;
      }
      v531 = v530 - v526 - 32;
      v532 = v526;
      if (v531 < 0x10)
        goto LABEL_865;
      v533 = (v531 >> 4) + 1;
      v534 = 16 * (v533 & 0x1FFFFFFFFFFFFFFELL);
      v532 = v526 + v534;
      v529 += v534;
      v535 = (((unint64_t)(v530 + v527) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v536 = v525 + 16 * ((v526 - v525) >> 4) + 24;
      do
      {
        v537 = *(_DWORD *)(v536 + 8);
        *(_DWORD *)(v536 - 24) = *(_DWORD *)(v536 - 8);
        *(_DWORD *)(v536 - 8) = v537;
        v538 = *(_QWORD *)(v536 + 16);
        *(_QWORD *)(v536 - 16) = *(_QWORD *)v536;
        *(_QWORD *)v536 = v538;
        v536 += 32;
        v535 -= 2;
      }
      while (v535);
      if (v533 != (v533 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_865:
        do
        {
          *(_DWORD *)v532 = *(_DWORD *)v529;
          *(_QWORD *)(v532 + 8) = *(_QWORD *)(v529 + 8);
          v532 += 16;
          v529 += 16;
        }
        while (v529 != v530);
      }
      a1[7].i64[0] = v532;
      v527 += 16;
    }
    while (v526 != v525);
  }
LABEL_679:
  v539 = a1[12].i64[1];
  v540 = a1[13].i64[0];
  if (v540 != v539)
  {
    v541 = -16 - v540;
    do
    {
      while (1)
      {
        while (1)
        {
          v542 = *(_QWORD *)(v540 - 8);
          v540 -= 16;
          if ((*(_BYTE *)(v542 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v542 + 4) = 0;
          v541 += 16;
          if (v540 == v539)
            goto LABEL_692;
        }
        sub_20F5B7580((uint64_t)a1[14].i64, v542);
        v543 = v540 + 16;
        v539 = a1[12].i64[1];
        v544 = a1[13].i64[0];
        if (v540 + 16 != v544)
          break;
        a1[13].i64[0] = v540;
        v541 += 16;
        if (v540 == v539)
          goto LABEL_692;
      }
      v545 = v544 - v540 - 32;
      v546 = v540;
      if (v545 < 0x10)
        goto LABEL_866;
      v547 = (v545 >> 4) + 1;
      v548 = 16 * (v547 & 0x1FFFFFFFFFFFFFFELL);
      v546 = v540 + v548;
      v543 += v548;
      v549 = (((unint64_t)(v544 + v541) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v550 = v539 + 16 * ((v540 - v539) >> 4) + 24;
      do
      {
        v551 = *(_DWORD *)(v550 + 8);
        *(_DWORD *)(v550 - 24) = *(_DWORD *)(v550 - 8);
        *(_DWORD *)(v550 - 8) = v551;
        v552 = *(_QWORD *)(v550 + 16);
        *(_QWORD *)(v550 - 16) = *(_QWORD *)v550;
        *(_QWORD *)v550 = v552;
        v550 += 32;
        v549 -= 2;
      }
      while (v549);
      if (v547 != (v547 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_866:
        do
        {
          *(_DWORD *)v546 = *(_DWORD *)v543;
          *(_QWORD *)(v546 + 8) = *(_QWORD *)(v543 + 8);
          v546 += 16;
          v543 += 16;
        }
        while (v543 != v544);
      }
      a1[13].i64[0] = v546;
      v541 += 16;
    }
    while (v540 != v539);
  }
LABEL_692:
  v553 = a1[18].i64[1];
  v554 = a1[19].i64[0];
  if (v554 != v553)
  {
    v555 = -16 - v554;
    do
    {
      while (1)
      {
        while (1)
        {
          v556 = *(_QWORD *)(v554 - 8);
          v554 -= 16;
          if ((*(_BYTE *)(v556 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v556 + 4) = 0;
          v555 += 16;
          if (v554 == v553)
            goto LABEL_705;
        }
        sub_20F91F160((uint64_t)a1[20].i64, v556);
        v557 = v554 + 16;
        v553 = a1[18].i64[1];
        v558 = a1[19].i64[0];
        if (v554 + 16 != v558)
          break;
        a1[19].i64[0] = v554;
        v555 += 16;
        if (v554 == v553)
          goto LABEL_705;
      }
      v559 = v558 - v554 - 32;
      v560 = v554;
      if (v559 < 0x10)
        goto LABEL_867;
      v561 = (v559 >> 4) + 1;
      v562 = 16 * (v561 & 0x1FFFFFFFFFFFFFFELL);
      v560 = v554 + v562;
      v557 += v562;
      v563 = (((unint64_t)(v558 + v555) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v564 = v553 + 16 * ((v554 - v553) >> 4) + 24;
      do
      {
        v565 = *(_DWORD *)(v564 + 8);
        *(_DWORD *)(v564 - 24) = *(_DWORD *)(v564 - 8);
        *(_DWORD *)(v564 - 8) = v565;
        v566 = *(_QWORD *)(v564 + 16);
        *(_QWORD *)(v564 - 16) = *(_QWORD *)v564;
        *(_QWORD *)v564 = v566;
        v564 += 32;
        v563 -= 2;
      }
      while (v563);
      if (v561 != (v561 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_867:
        do
        {
          *(_DWORD *)v560 = *(_DWORD *)v557;
          *(_QWORD *)(v560 + 8) = *(_QWORD *)(v557 + 8);
          v560 += 16;
          v557 += 16;
        }
        while (v557 != v558);
      }
      a1[19].i64[0] = v560;
      v555 += 16;
    }
    while (v554 != v553);
  }
LABEL_705:
  v567 = a1[24].i64[1];
  v568 = a1[25].i64[0];
  if (v568 != v567)
  {
    v569 = -16 - v568;
    do
    {
      while (1)
      {
        while (1)
        {
          v570 = *(_QWORD *)(v568 - 8);
          v568 -= 16;
          if ((*(_BYTE *)(v570 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v570 + 4) = 0;
          v569 += 16;
          if (v568 == v567)
            goto LABEL_718;
        }
        sub_20F91F46C((uint64_t)a1[26].i64, v570);
        v571 = v568 + 16;
        v567 = a1[24].i64[1];
        v572 = a1[25].i64[0];
        if (v568 + 16 != v572)
          break;
        a1[25].i64[0] = v568;
        v569 += 16;
        if (v568 == v567)
          goto LABEL_718;
      }
      v573 = v572 - v568 - 32;
      v574 = v568;
      if (v573 < 0x10)
        goto LABEL_868;
      v575 = (v573 >> 4) + 1;
      v576 = 16 * (v575 & 0x1FFFFFFFFFFFFFFELL);
      v574 = v568 + v576;
      v571 += v576;
      v577 = (((unint64_t)(v572 + v569) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v578 = v567 + 16 * ((v568 - v567) >> 4) + 24;
      do
      {
        v579 = *(_DWORD *)(v578 + 8);
        *(_DWORD *)(v578 - 24) = *(_DWORD *)(v578 - 8);
        *(_DWORD *)(v578 - 8) = v579;
        v580 = *(_QWORD *)(v578 + 16);
        *(_QWORD *)(v578 - 16) = *(_QWORD *)v578;
        *(_QWORD *)v578 = v580;
        v578 += 32;
        v577 -= 2;
      }
      while (v577);
      if (v575 != (v575 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_868:
        do
        {
          *(_DWORD *)v574 = *(_DWORD *)v571;
          *(_QWORD *)(v574 + 8) = *(_QWORD *)(v571 + 8);
          v574 += 16;
          v571 += 16;
        }
        while (v571 != v572);
      }
      a1[25].i64[0] = v574;
      v569 += 16;
    }
    while (v568 != v567);
  }
LABEL_718:
  v581 = a1[30].i64[1];
  v582 = a1[31].i64[0];
  if (v582 != v581)
  {
    v583 = -16 - v582;
    do
    {
      while (1)
      {
        while (1)
        {
          v584 = *(_QWORD *)(v582 - 8);
          v582 -= 16;
          if ((*(_BYTE *)(v584 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v584 + 4) = 0;
          v583 += 16;
          if (v582 == v581)
            goto LABEL_731;
        }
        sub_20F5B7280((uint64_t)a1[32].i64, v584);
        v585 = v582 + 16;
        v581 = a1[30].i64[1];
        v586 = a1[31].i64[0];
        if (v582 + 16 != v586)
          break;
        a1[31].i64[0] = v582;
        v583 += 16;
        if (v582 == v581)
          goto LABEL_731;
      }
      v587 = v586 - v582 - 32;
      v588 = v582;
      if (v587 < 0x10)
        goto LABEL_869;
      v589 = (v587 >> 4) + 1;
      v590 = 16 * (v589 & 0x1FFFFFFFFFFFFFFELL);
      v588 = v582 + v590;
      v585 += v590;
      v591 = (((unint64_t)(v586 + v583) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v592 = v581 + 16 * ((v582 - v581) >> 4) + 24;
      do
      {
        v593 = *(_DWORD *)(v592 + 8);
        *(_DWORD *)(v592 - 24) = *(_DWORD *)(v592 - 8);
        *(_DWORD *)(v592 - 8) = v593;
        v594 = *(_QWORD *)(v592 + 16);
        *(_QWORD *)(v592 - 16) = *(_QWORD *)v592;
        *(_QWORD *)v592 = v594;
        v592 += 32;
        v591 -= 2;
      }
      while (v591);
      if (v589 != (v589 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_869:
        do
        {
          *(_DWORD *)v588 = *(_DWORD *)v585;
          *(_QWORD *)(v588 + 8) = *(_QWORD *)(v585 + 8);
          v588 += 16;
          v585 += 16;
        }
        while (v585 != v586);
      }
      a1[31].i64[0] = v588;
      v583 += 16;
    }
    while (v582 != v581);
  }
LABEL_731:
  v595 = a1[37].i64[0];
  v596 = a1[36].i64[1];
  if (v595 != v596)
  {
    v597 = -16 - v595;
    do
    {
      while (1)
      {
        while (1)
        {
          v598 = *(_QWORD *)(v595 - 8);
          v595 -= 16;
          if ((*(_BYTE *)(v598 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v598 + 4) = 0;
          v597 += 16;
          if (v595 == v596)
            goto LABEL_744;
        }
        sub_20F91F778((uint64_t)a1[38].i64, v598);
        v596 = a1[36].i64[1];
        v599 = v595 + 16;
        v600 = a1[37].i64[0];
        if (v595 + 16 != v600)
          break;
        a1[37].i64[0] = v595;
        v597 += 16;
        if (v595 == v596)
          goto LABEL_744;
      }
      v601 = v600 - v595 - 32;
      v602 = v595;
      if (v601 < 0x10)
        goto LABEL_870;
      v603 = (v601 >> 4) + 1;
      v604 = 16 * (v603 & 0x1FFFFFFFFFFFFFFELL);
      v602 = v595 + v604;
      v599 += v604;
      v605 = (((unint64_t)(v600 + v597) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v606 = v596 + 16 * ((v595 - v596) >> 4) + 24;
      do
      {
        v607 = *(_DWORD *)(v606 + 8);
        *(_DWORD *)(v606 - 24) = *(_DWORD *)(v606 - 8);
        *(_DWORD *)(v606 - 8) = v607;
        v608 = *(_QWORD *)(v606 + 16);
        *(_QWORD *)(v606 - 16) = *(_QWORD *)v606;
        *(_QWORD *)v606 = v608;
        v606 += 32;
        v605 -= 2;
      }
      while (v605);
      if (v603 != (v603 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_870:
        do
        {
          *(_DWORD *)v602 = *(_DWORD *)v599;
          *(_QWORD *)(v602 + 8) = *(_QWORD *)(v599 + 8);
          v602 += 16;
          v599 += 16;
        }
        while (v599 != v600);
      }
      a1[37].i64[0] = v602;
      v597 += 16;
    }
    while (v595 != v596);
  }
LABEL_744:
  v609 = a1[43].i64[0];
  v610 = a1[42].i64[1];
  if (v609 != v610)
  {
    v611 = -16 - v609;
    do
    {
      while (1)
      {
        while (1)
        {
          v612 = *(_QWORD *)(v609 - 8);
          v609 -= 16;
          if ((*(_BYTE *)(v612 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v612 + 4) = 0;
          v611 += 16;
          if (v609 == v610)
            goto LABEL_757;
        }
        sub_20F5B7880((uint64_t)a1[44].i64, (_QWORD *)v612);
        v610 = a1[42].i64[1];
        v613 = v609 + 16;
        v614 = a1[43].i64[0];
        if (v609 + 16 != v614)
          break;
        a1[43].i64[0] = v609;
        v611 += 16;
        if (v609 == v610)
          goto LABEL_757;
      }
      v615 = v614 - v609 - 32;
      v616 = v609;
      if (v615 < 0x10)
        goto LABEL_871;
      v617 = (v615 >> 4) + 1;
      v618 = 16 * (v617 & 0x1FFFFFFFFFFFFFFELL);
      v616 = v609 + v618;
      v613 += v618;
      v619 = (((unint64_t)(v614 + v611) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v620 = v610 + 16 * ((v609 - v610) >> 4) + 24;
      do
      {
        v621 = *(_DWORD *)(v620 + 8);
        *(_DWORD *)(v620 - 24) = *(_DWORD *)(v620 - 8);
        *(_DWORD *)(v620 - 8) = v621;
        v622 = *(_QWORD *)(v620 + 16);
        *(_QWORD *)(v620 - 16) = *(_QWORD *)v620;
        *(_QWORD *)v620 = v622;
        v620 += 32;
        v619 -= 2;
      }
      while (v619);
      if (v617 != (v617 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_871:
        do
        {
          *(_DWORD *)v616 = *(_DWORD *)v613;
          *(_QWORD *)(v616 + 8) = *(_QWORD *)(v613 + 8);
          v616 += 16;
          v613 += 16;
        }
        while (v613 != v614);
      }
      a1[43].i64[0] = v616;
      v611 += 16;
    }
    while (v609 != v610);
  }
LABEL_757:
  v623 = a1[49].i64[0];
  v624 = a1[48].i64[1];
  if (v623 != v624)
  {
    v625 = -16 - v623;
    do
    {
      while (1)
      {
        while (1)
        {
          v626 = *(_QWORD *)(v623 - 8);
          v623 -= 16;
          if ((*(_BYTE *)(v626 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v626 + 4) = 0;
          v625 += 16;
          if (v623 == v624)
            goto LABEL_770;
        }
        sub_20F5B7B5C((uint64_t)a1[50].i64, (_QWORD *)v626);
        v624 = a1[48].i64[1];
        v627 = v623 + 16;
        v628 = a1[49].i64[0];
        if (v623 + 16 != v628)
          break;
        a1[49].i64[0] = v623;
        v625 += 16;
        if (v623 == v624)
          goto LABEL_770;
      }
      v629 = v628 - v623 - 32;
      v630 = v623;
      if (v629 < 0x10)
        goto LABEL_872;
      v631 = (v629 >> 4) + 1;
      v632 = 16 * (v631 & 0x1FFFFFFFFFFFFFFELL);
      v630 = v623 + v632;
      v627 += v632;
      v633 = (((unint64_t)(v628 + v625) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v634 = v624 + 16 * ((v623 - v624) >> 4) + 24;
      do
      {
        v635 = *(_DWORD *)(v634 + 8);
        *(_DWORD *)(v634 - 24) = *(_DWORD *)(v634 - 8);
        *(_DWORD *)(v634 - 8) = v635;
        v636 = *(_QWORD *)(v634 + 16);
        *(_QWORD *)(v634 - 16) = *(_QWORD *)v634;
        *(_QWORD *)v634 = v636;
        v634 += 32;
        v633 -= 2;
      }
      while (v633);
      if (v631 != (v631 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_872:
        do
        {
          *(_DWORD *)v630 = *(_DWORD *)v627;
          *(_QWORD *)(v630 + 8) = *(_QWORD *)(v627 + 8);
          v630 += 16;
          v627 += 16;
        }
        while (v627 != v628);
      }
      a1[49].i64[0] = v630;
      v625 += 16;
    }
    while (v623 != v624);
  }
LABEL_770:
  v637 = a1[55].i64[0];
  v638 = a1[54].i64[1];
  if (v637 != v638)
  {
    v639 = -16 - v637;
    do
    {
      while (1)
      {
        while (1)
        {
          v640 = *(_QWORD *)(v637 - 8);
          v637 -= 16;
          if ((*(_BYTE *)(v640 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v640 + 4) = 0;
          v639 += 16;
          if (v637 == v638)
            goto LABEL_783;
        }
        sub_20F5B7E38((uint64_t)a1[56].i64, (_QWORD *)v640);
        v638 = a1[54].i64[1];
        v641 = v637 + 16;
        v642 = a1[55].i64[0];
        if (v637 + 16 != v642)
          break;
        a1[55].i64[0] = v637;
        v639 += 16;
        if (v637 == v638)
          goto LABEL_783;
      }
      v643 = v642 - v637 - 32;
      v644 = v637;
      if (v643 < 0x10)
        goto LABEL_873;
      v645 = (v643 >> 4) + 1;
      v646 = 16 * (v645 & 0x1FFFFFFFFFFFFFFELL);
      v644 = v637 + v646;
      v641 += v646;
      v647 = (((unint64_t)(v642 + v639) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v648 = v638 + 16 * ((v637 - v638) >> 4) + 24;
      do
      {
        v649 = *(_DWORD *)(v648 + 8);
        *(_DWORD *)(v648 - 24) = *(_DWORD *)(v648 - 8);
        *(_DWORD *)(v648 - 8) = v649;
        v650 = *(_QWORD *)(v648 + 16);
        *(_QWORD *)(v648 - 16) = *(_QWORD *)v648;
        *(_QWORD *)v648 = v650;
        v648 += 32;
        v647 -= 2;
      }
      while (v647);
      if (v645 != (v645 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_873:
        do
        {
          *(_DWORD *)v644 = *(_DWORD *)v641;
          *(_QWORD *)(v644 + 8) = *(_QWORD *)(v641 + 8);
          v644 += 16;
          v641 += 16;
        }
        while (v641 != v642);
      }
      a1[55].i64[0] = v644;
      v639 += 16;
    }
    while (v637 != v638);
  }
LABEL_783:
  v651 = a1[61].i64[0];
  v652 = a1[60].i64[1];
  if (v651 != v652)
  {
    v653 = -16 - v651;
    do
    {
      while (1)
      {
        while (1)
        {
          v654 = *(_QWORD *)(v651 - 8);
          v651 -= 16;
          if ((*(_BYTE *)(v654 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v654 + 4) = 0;
          v653 += 16;
          if (v651 == v652)
            goto LABEL_796;
        }
        sub_20F394BB8((uint64_t)a1[62].i64, v654);
        v652 = a1[60].i64[1];
        v655 = v651 + 16;
        v656 = a1[61].i64[0];
        if (v651 + 16 != v656)
          break;
        a1[61].i64[0] = v651;
        v653 += 16;
        if (v651 == v652)
          goto LABEL_796;
      }
      v657 = v656 - v651 - 32;
      v658 = v651;
      if (v657 < 0x10)
        goto LABEL_874;
      v659 = (v657 >> 4) + 1;
      v660 = 16 * (v659 & 0x1FFFFFFFFFFFFFFELL);
      v658 = v651 + v660;
      v655 += v660;
      v661 = (((unint64_t)(v656 + v653) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v662 = v652 + 16 * ((v651 - v652) >> 4) + 24;
      do
      {
        v663 = *(_DWORD *)(v662 + 8);
        *(_DWORD *)(v662 - 24) = *(_DWORD *)(v662 - 8);
        *(_DWORD *)(v662 - 8) = v663;
        v664 = *(_QWORD *)(v662 + 16);
        *(_QWORD *)(v662 - 16) = *(_QWORD *)v662;
        *(_QWORD *)v662 = v664;
        v662 += 32;
        v661 -= 2;
      }
      while (v661);
      if (v659 != (v659 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_874:
        do
        {
          *(_DWORD *)v658 = *(_DWORD *)v655;
          *(_QWORD *)(v658 + 8) = *(_QWORD *)(v655 + 8);
          v658 += 16;
          v655 += 16;
        }
        while (v655 != v656);
      }
      a1[61].i64[0] = v658;
      v653 += 16;
    }
    while (v651 != v652);
  }
LABEL_796:
  a1[101].i16[0] = 1;
  a1[102].i64[0] = a1[101].i64[1];
  a1[118].i64[1] = a1[118].i64[0];
  a1[135].i64[0] = a1[134].i64[1];
  a1[103].i64[1] = a1[103].i64[0];
  a1[120].i64[0] = a1[119].i64[1];
  a1[136].i64[1] = a1[136].i64[0];
  a1[105].i64[0] = a1[104].i64[1];
  a1[121].i64[1] = a1[121].i64[0];
  a1[138].i64[0] = a1[137].i64[1];
  a1[106].i64[1] = a1[106].i64[0];
  a1[123].i64[0] = a1[122].i64[1];
  a1[139].i64[1] = a1[139].i64[0];
  a1[108].i64[0] = a1[107].i64[1];
  a1[124].i64[1] = a1[124].i64[0];
  a1[141].i64[0] = a1[140].i64[1];
  a1[109].i64[1] = a1[109].i64[0];
  a1[126].i64[0] = a1[125].i64[1];
  a1[142].i64[1] = a1[142].i64[0];
  a1[111].i64[0] = a1[110].i64[1];
  a1[127].i64[1] = a1[127].i64[0];
  a1[144].i64[0] = a1[143].i64[1];
  a1[112].i64[1] = a1[112].i64[0];
  a1[129].i64[0] = a1[128].i64[1];
  a1[145].i64[1] = a1[145].i64[0];
  a1[114].i64[0] = a1[113].i64[1];
  a1[130].i64[1] = a1[130].i64[0];
  a1[147].i64[0] = a1[146].i64[1];
  a1[115].i64[1] = a1[115].i64[0];
  a1[132].i64[0] = a1[131].i64[1];
  a1[148].i64[1] = a1[148].i64[0];
  a1[117].i64[0] = a1[116].i64[1];
  a1[133].i64[1] = a1[133].i64[0];
  a1[150].i64[0] = a1[149].i64[1];
  v665 = a1->i64[1];
  v666 = a1[1].i64[0];
  if (v665 != v666)
  {
    v667 = 0;
    do
    {
      v668 = *(_QWORD *)(v665 + 8);
      if (*(_BYTE *)(v668 + 20))
        v669 = v667;
      else
        v669 = -1;
      v667 += *(unsigned __int8 *)(v668 + 20);
      *(_DWORD *)v668 = v669;
      v665 += 16;
    }
    while (v665 != v666);
  }
  v670 = a1[6].i64[1];
  v671 = a1[7].i64[0];
  if (v670 != v671)
  {
    v672 = 0;
    do
    {
      v673 = *(_QWORD *)(v670 + 8);
      if (*(_BYTE *)(v673 + 20))
        v674 = v672;
      else
        v674 = -1;
      v672 += *(unsigned __int8 *)(v673 + 20);
      *(_DWORD *)v673 = v674;
      v670 += 16;
    }
    while (v670 != v671);
  }
  v675 = a1[12].i64[1];
  v676 = a1[13].i64[0];
  if (v675 != v676)
  {
    v677 = 0;
    do
    {
      v678 = *(_QWORD *)(v675 + 8);
      if (*(_BYTE *)(v678 + 20))
        v679 = v677;
      else
        v679 = -1;
      v677 += *(unsigned __int8 *)(v678 + 20);
      *(_DWORD *)v678 = v679;
      v675 += 16;
    }
    while (v675 != v676);
  }
  v680 = a1[18].i64[1];
  v681 = a1[19].i64[0];
  if (v680 != v681)
  {
    v682 = 0;
    do
    {
      v683 = *(_QWORD *)(v680 + 8);
      if (*(_BYTE *)(v683 + 20))
        v684 = v682;
      else
        v684 = -1;
      v682 += *(unsigned __int8 *)(v683 + 20);
      *(_DWORD *)v683 = v684;
      v680 += 16;
    }
    while (v680 != v681);
  }
  v685 = a1[24].i64[1];
  v686 = a1[25].i64[0];
  if (v685 != v686)
  {
    v687 = 0;
    do
    {
      v688 = *(_QWORD *)(v685 + 8);
      if (*(_BYTE *)(v688 + 20))
        v689 = v687;
      else
        v689 = -1;
      v687 += *(unsigned __int8 *)(v688 + 20);
      *(_DWORD *)v688 = v689;
      v685 += 16;
    }
    while (v685 != v686);
  }
  v690 = a1[30].i64[1];
  v691 = a1[31].i64[0];
  if (v690 != v691)
  {
    v692 = 0;
    do
    {
      v693 = *(_QWORD *)(v690 + 8);
      if (*(_BYTE *)(v693 + 20))
        v694 = v692;
      else
        v694 = -1;
      v692 += *(unsigned __int8 *)(v693 + 20);
      *(_DWORD *)v693 = v694;
      v690 += 16;
    }
    while (v690 != v691);
  }
  v695 = a1[36].i64[1];
  v696 = a1[37].i64[0];
  if (v695 != v696)
  {
    v697 = 0;
    do
    {
      v698 = *(_QWORD *)(v695 + 8);
      if (*(_BYTE *)(v698 + 20))
        v699 = v697;
      else
        v699 = -1;
      v697 += *(unsigned __int8 *)(v698 + 20);
      *(_DWORD *)v698 = v699;
      v695 += 16;
    }
    while (v695 != v696);
  }
  v700 = a1[42].i64[1];
  v701 = a1[43].i64[0];
  if (v700 != v701)
  {
    v702 = 0;
    do
    {
      v703 = *(_QWORD *)(v700 + 8);
      if (*(_BYTE *)(v703 + 20))
        v704 = v702;
      else
        v704 = -1;
      v702 += *(unsigned __int8 *)(v703 + 20);
      *(_DWORD *)v703 = v704;
      v700 += 16;
    }
    while (v700 != v701);
  }
  v705 = a1[48].i64[1];
  v706 = a1[49].i64[0];
  if (v705 != v706)
  {
    v707 = 0;
    do
    {
      v708 = *(_QWORD *)(v705 + 8);
      if (*(_BYTE *)(v708 + 20))
        v709 = v707;
      else
        v709 = -1;
      v707 += *(unsigned __int8 *)(v708 + 20);
      *(_DWORD *)v708 = v709;
      v705 += 16;
    }
    while (v705 != v706);
  }
  v710 = a1[54].i64[1];
  v711 = a1[55].i64[0];
  if (v710 != v711)
  {
    v712 = 0;
    do
    {
      v713 = *(_QWORD *)(v710 + 8);
      if (*(_BYTE *)(v713 + 20))
        v714 = v712;
      else
        v714 = -1;
      v712 += *(unsigned __int8 *)(v713 + 20);
      *(_DWORD *)v713 = v714;
      v710 += 16;
    }
    while (v710 != v711);
  }
  v715 = a1[60].i64[1];
  v716 = a1[61].i64[0];
  if (v715 != v716)
  {
    v717 = 0;
    do
    {
      v718 = *(_QWORD *)(v715 + 8);
      if (*(_BYTE *)(v718 + 20))
        v719 = v717;
      else
        v719 = -1;
      v717 += *(unsigned __int8 *)(v718 + 20);
      *(_DWORD *)v718 = v719;
      v715 += 16;
    }
    while (v715 != v716);
  }
}

uint64_t sub_20FA3FF3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t i;
  uint64_t v68;
  uint64_t v69;
  uint64_t j;
  uint64_t v71;
  uint64_t v72;
  uint64_t k;
  uint64_t v74;
  uint64_t v75;
  uint64_t m;
  uint64_t v77;
  uint64_t v78;
  uint64_t n;
  uint64_t v80;
  uint64_t ii;
  uint64_t v89;
  uint64_t v91;
  uint64_t jj;
  uint64_t v93;
  uint64_t v94;
  uint64_t kk;
  uint64_t v96;
  uint64_t v97;
  uint64_t mm;
  uint64_t v99;
  uint64_t v100;
  uint64_t nn;
  uint64_t v102;
  uint64_t v103;
  uint64_t i1;
  uint64_t v105;
  uint64_t v106;
  uint64_t i2;
  uint64_t v108;
  uint64_t v109;
  uint64_t i3;
  uint64_t v111;
  uint64_t v112;
  uint64_t i4;
  uint64_t v114;
  uint64_t v115;
  uint64_t i5;
  uint64_t v117;
  uint64_t v118;
  uint64_t i6;
  uint64_t v120;
  uint64_t v121;
  uint64_t i7;
  uint64_t v123;
  uint64_t v124;
  uint64_t i8;
  uint64_t v126;
  uint64_t v127;
  uint64_t i9;
  uint64_t v129;
  uint64_t v130;
  uint64_t i10;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int *v136;
  unint64_t v137;
  _BYTE *v138;
  unsigned int *v139;
  _BYTE *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  __int128 *v150;
  uint64_t v151;
  __int128 v152;
  int v153;
  uint64_t v154;
  unsigned int v155;
  char *v156;
  char *v157;
  unint64_t v158;
  unint64_t v159;
  unsigned int *v160;
  char *v161;
  unsigned int v162;
  char *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _BYTE *v171;
  unsigned int *v172;
  int64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  _OWORD *v178;
  char *v179;
  uint64_t v180;
  __int128 v181;
  unsigned int v182;
  __n128 *v183;
  char *v184;
  __n128 *v185;
  uint64_t v186;
  const std::nothrow_t *v187;
  char *v188;
  BOOL v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int *v194;
  unint64_t v195;
  _BYTE *v196;
  unsigned int *v197;
  _BYTE *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  __int128 *v208;
  uint64_t v209;
  __int128 v210;
  int v211;
  uint64_t v212;
  unsigned int v213;
  char *v214;
  char *v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int *v218;
  char *v219;
  unsigned int v220;
  char *v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  _BYTE *v229;
  unsigned int *v230;
  int64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  _OWORD *v236;
  char *v237;
  uint64_t v238;
  __int128 v239;
  unsigned int v240;
  __n128 *v241;
  char *v242;
  __n128 *v243;
  uint64_t v244;
  const std::nothrow_t *v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int *v250;
  unsigned int *v251;
  unint64_t v252;
  _BYTE *v253;
  unsigned int *v254;
  _BYTE *v255;
  char *v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  __int128 *v265;
  uint64_t v266;
  __int128 v267;
  int v268;
  uint64_t v269;
  unsigned int v270;
  char *v271;
  char *v272;
  unint64_t v273;
  unint64_t v274;
  unsigned int *v275;
  char *v276;
  unsigned int v277;
  char *v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  _BYTE *v286;
  unsigned int *v287;
  int64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  _OWORD *v293;
  char *v294;
  uint64_t v295;
  __int128 v296;
  unsigned int v297;
  __n128 *v298;
  char *v299;
  __n128 *v300;
  uint64_t v301;
  const std::nothrow_t *v302;
  char *v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int *v307;
  unsigned int *v308;
  unint64_t v309;
  _BYTE *v310;
  unsigned int *v311;
  _BYTE *v312;
  char *v313;
  uint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  char *v320;
  char *v321;
  __int128 *v322;
  uint64_t v323;
  __int128 v324;
  int v325;
  uint64_t v326;
  unsigned int v327;
  char *v328;
  char *v329;
  unint64_t v330;
  unint64_t v331;
  unsigned int *v332;
  char *v333;
  unsigned int v334;
  char *v335;
  unint64_t v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  _BYTE *v343;
  unsigned int *v344;
  int64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  _OWORD *v350;
  char *v351;
  uint64_t v352;
  __int128 v353;
  unsigned int v354;
  __n128 *v355;
  char *v356;
  __n128 *v357;
  uint64_t v358;
  const std::nothrow_t *v359;
  char *v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  unsigned int *v364;
  unsigned int *v365;
  unint64_t v366;
  _BYTE *v367;
  unsigned int *v368;
  _BYTE *v369;
  char *v370;
  uint64_t v371;
  char *v372;
  char *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  char *v377;
  char *v378;
  __int128 *v379;
  uint64_t v380;
  __int128 v381;
  int v382;
  uint64_t v383;
  unsigned int v384;
  char *v385;
  char *v386;
  unint64_t v387;
  unint64_t v388;
  unsigned int *v389;
  char *v390;
  unsigned int v391;
  char *v392;
  unint64_t v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  _BYTE *v400;
  unsigned int *v401;
  int64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  _OWORD *v407;
  char *v408;
  uint64_t v409;
  __int128 v410;
  unsigned int v411;
  __n128 *v412;
  char *v413;
  __n128 *v414;
  uint64_t v415;
  const std::nothrow_t *v416;
  char *v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  unsigned int *v421;
  unsigned int *v422;
  unint64_t v423;
  _BYTE *v424;
  unsigned int *v425;
  _BYTE *v426;
  char *v427;
  uint64_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  char *v434;
  char *v435;
  __int128 *v436;
  uint64_t v437;
  __int128 v438;
  int v439;
  uint64_t v440;
  unsigned int v441;
  char *v442;
  char *v443;
  unint64_t v444;
  unint64_t v445;
  unsigned int *v446;
  char *v447;
  unsigned int v448;
  char *v449;
  unint64_t v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  _BYTE *v457;
  unsigned int *v458;
  int64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  char *v463;
  _OWORD *v464;
  char *v465;
  uint64_t v466;
  __int128 v467;
  unsigned int v468;
  __n128 *v469;
  char *v470;
  __n128 *v471;
  uint64_t v472;
  const std::nothrow_t *v473;
  char *v474;
  char *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int *v478;
  unsigned int *v479;
  unint64_t v480;
  _BYTE *v481;
  unsigned int *v482;
  _BYTE *v483;
  char *v484;
  uint64_t v485;
  char *v486;
  char *v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  char *v491;
  char *v492;
  __int128 *v493;
  uint64_t v494;
  __int128 v495;
  int v496;
  uint64_t v497;
  unsigned int v498;
  char *v499;
  char *v500;
  unint64_t v501;
  unint64_t v502;
  unsigned int *v503;
  char *v504;
  unsigned int v505;
  char *v506;
  unint64_t v507;
  char *v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  _BYTE *v514;
  unsigned int *v515;
  int64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  _OWORD *v521;
  char *v522;
  uint64_t v523;
  __int128 v524;
  unsigned int v525;
  __n128 *v526;
  char *v527;
  __n128 *v528;
  uint64_t v529;
  const std::nothrow_t *v530;
  char *v531;
  char *v532;
  uint64_t v533;
  uint64_t v534;
  unsigned int *v535;
  unsigned int *v536;
  unint64_t v537;
  _BYTE *v538;
  unsigned int *v539;
  _BYTE *v540;
  char *v541;
  uint64_t v542;
  char *v543;
  char *v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  char *v548;
  char *v549;
  __int128 *v550;
  uint64_t v551;
  __int128 v552;
  int v553;
  uint64_t v554;
  unsigned int v555;
  char *v556;
  char *v557;
  unint64_t v558;
  unint64_t v559;
  unsigned int *v560;
  char *v561;
  unsigned int v562;
  char *v563;
  unint64_t v564;
  char *v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  _BYTE *v571;
  unsigned int *v572;
  int64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  char *v577;
  _OWORD *v578;
  char *v579;
  uint64_t v580;
  __int128 v581;
  unsigned int v582;
  __n128 *v583;
  char *v584;
  __n128 *v585;
  uint64_t v586;
  const std::nothrow_t *v587;
  char *v588;
  char *v589;
  uint64_t v590;
  uint64_t v591;
  unsigned int *v592;
  unsigned int *v593;
  unint64_t v594;
  _BYTE *v595;
  unsigned int *v596;
  _BYTE *v597;
  char *v598;
  uint64_t v599;
  char *v600;
  char *v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  char *v605;
  char *v606;
  __int128 *v607;
  uint64_t v608;
  __int128 v609;
  int v610;
  uint64_t v611;
  unsigned int v612;
  char *v613;
  char *v614;
  unint64_t v615;
  unint64_t v616;
  unsigned int *v617;
  char *v618;
  unsigned int v619;
  char *v620;
  unint64_t v621;
  char *v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t v625;
  uint64_t v626;
  unint64_t v627;
  _BYTE *v628;
  unsigned int *v629;
  int64_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  char *v634;
  _OWORD *v635;
  char *v636;
  uint64_t v637;
  __int128 v638;
  unsigned int v639;
  __n128 *v640;
  char *v641;
  __n128 *v642;
  uint64_t v643;
  const std::nothrow_t *v644;
  char *v645;
  char *v646;
  uint64_t v647;
  uint64_t v648;
  unsigned int *v649;
  unsigned int *v650;
  unint64_t v651;
  _BYTE *v652;
  unsigned int *v653;
  _BYTE *v654;
  char *v655;
  uint64_t v656;
  char *v657;
  char *v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  char *v662;
  char *v663;
  __int128 *v664;
  uint64_t v665;
  __int128 v666;
  int v667;
  uint64_t v668;
  unsigned int v669;
  char *v670;
  char *v671;
  unint64_t v672;
  unint64_t v673;
  unsigned int *v674;
  char *v675;
  unsigned int v676;
  char *v677;
  unint64_t v678;
  char *v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  unint64_t v684;
  _BYTE *v685;
  unsigned int *v686;
  int64_t v687;
  unint64_t v688;
  uint64_t v689;
  uint64_t v690;
  char *v691;
  _OWORD *v692;
  char *v693;
  uint64_t v694;
  __int128 v695;
  unsigned int v696;
  __n128 *v697;
  char *v698;
  __n128 *v699;
  uint64_t v700;
  const std::nothrow_t *v701;
  char *v702;
  char *v703;
  uint64_t v704;
  uint64_t v705;
  unsigned int *v706;
  unsigned int *v707;
  unint64_t v708;
  _BYTE *v709;
  unsigned int *v710;
  _BYTE *v711;
  char *v712;
  uint64_t v713;
  char *v714;
  char *v715;
  uint64_t v716;
  unint64_t v717;
  uint64_t v718;
  char *v719;
  char *v720;
  __int128 *v721;
  uint64_t v722;
  __int128 v723;
  int v724;
  uint64_t v725;
  unsigned int v726;
  char *v727;
  char *v728;
  unint64_t v729;
  unint64_t v730;
  unsigned int *v731;
  char *v732;
  unsigned int v733;
  char *v734;
  unint64_t v735;
  char *v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  unint64_t v741;
  _BYTE *v742;
  unsigned int *v743;
  int64_t v744;
  unint64_t v745;
  uint64_t v746;
  uint64_t v747;
  char *v748;
  _OWORD *v749;
  char *v750;
  uint64_t v751;
  __int128 v752;
  unsigned int v753;
  __n128 *v754;
  char *v755;
  __n128 *v756;
  uint64_t v757;
  const std::nothrow_t *v758;
  char *v759;
  char *v760;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unsigned int *v795;
  unsigned int *v796;
  unsigned int *v797;
  unsigned int *v798;
  unsigned int *v799;
  unsigned int *v800;
  unsigned int *v801;
  unsigned int *v802;
  unsigned int *v803;
  unsigned int *v804;
  unsigned int *v805;
  void **v806;
  void **v807;
  void **v808;
  void **v809;
  void **v810;
  void **v811;
  void **v812;
  void **v813;
  void **v814;
  void **v815;
  void **v816;
  char v817;

  if (!*(_BYTE *)(a1 + 1618))
  {
    if (!*(_BYTE *)(a1 + 1617))
    {
      v2 = *(_QWORD *)(a1 + 1888);
      v3 = *(_QWORD *)(a1 + 1896);
      *(_BYTE *)(a1 + 1617) = v2 != v3;
      if (v2 == v3)
      {
        v4 = *(_QWORD *)(a1 + 1912);
        v5 = *(_QWORD *)(a1 + 1920);
        *(_BYTE *)(a1 + 1617) = v4 != v5;
        if (v4 == v5)
        {
          v6 = *(_QWORD *)(a1 + 1936);
          v7 = *(_QWORD *)(a1 + 1944);
          *(_BYTE *)(a1 + 1617) = v6 != v7;
          if (v6 == v7)
          {
            v8 = *(_QWORD *)(a1 + 1960);
            v9 = *(_QWORD *)(a1 + 1968);
            *(_BYTE *)(a1 + 1617) = v8 != v9;
            if (v8 == v9)
            {
              v10 = *(_QWORD *)(a1 + 1984);
              v11 = *(_QWORD *)(a1 + 1992);
              *(_BYTE *)(a1 + 1617) = v10 != v11;
              if (v10 == v11)
              {
                v12 = *(_QWORD *)(a1 + 2008);
                v13 = *(_QWORD *)(a1 + 2016);
                *(_BYTE *)(a1 + 1617) = v12 != v13;
                if (v12 == v13)
                {
                  v14 = *(_QWORD *)(a1 + 2032);
                  v15 = *(_QWORD *)(a1 + 2040);
                  *(_BYTE *)(a1 + 1617) = v14 != v15;
                  if (v14 == v15)
                  {
                    v16 = *(_QWORD *)(a1 + 2056);
                    v17 = *(_QWORD *)(a1 + 2064);
                    *(_BYTE *)(a1 + 1617) = v16 != v17;
                    if (v16 == v17)
                    {
                      v18 = *(_QWORD *)(a1 + 2080);
                      v19 = *(_QWORD *)(a1 + 2088);
                      *(_BYTE *)(a1 + 1617) = v18 != v19;
                      if (v18 == v19)
                      {
                        v20 = *(_QWORD *)(a1 + 2104);
                        v21 = *(_QWORD *)(a1 + 2112);
                        *(_BYTE *)(a1 + 1617) = v20 != v21;
                        if (v20 == v21)
                          *(_BYTE *)(a1 + 1617) = *(_QWORD *)(a1 + 2128) != *(_QWORD *)(a1 + 2136);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 1617))
    {
LABEL_893:
      *(_BYTE *)(a1 + 1618) = 1;
      return a1 + 1624;
    }
    v22 = *(void **)(a1 + 2416);
    *(_QWORD *)(a1 + 2424) = v22;
    v23 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    v24 = v23 >> 4;
    if (v23 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2432) - (_QWORD)v22) >> 2))
    {
      if (v23 < 0)
        sub_20E867F44();
      v25 = (char *)operator new((unint64_t)v23 >> 2);
      *(_QWORD *)(a1 + 2416) = v25;
      *(_QWORD *)(a1 + 2424) = v25;
      *(_QWORD *)(a1 + 2432) = &v25[4 * v24];
      if (v22)
        operator delete(v22);
    }
    v26 = *(void **)(a1 + 2440);
    *(_QWORD *)(a1 + 2448) = v26;
    v27 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    v28 = v27 >> 4;
    if (v27 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2456) - (_QWORD)v26) >> 2))
    {
      if (v27 < 0)
        sub_20E867F44();
      v29 = (char *)operator new((unint64_t)v27 >> 2);
      *(_QWORD *)(a1 + 2440) = v29;
      *(_QWORD *)(a1 + 2448) = v29;
      *(_QWORD *)(a1 + 2456) = &v29[4 * v28];
      if (v26)
        operator delete(v26);
    }
    v30 = *(void **)(a1 + 2464);
    *(_QWORD *)(a1 + 2472) = v30;
    v31 = *(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200);
    v32 = v31 >> 4;
    if (v31 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2480) - (_QWORD)v30) >> 2))
    {
      if (v31 < 0)
        sub_20E867F44();
      v33 = (char *)operator new((unint64_t)v31 >> 2);
      *(_QWORD *)(a1 + 2464) = v33;
      *(_QWORD *)(a1 + 2472) = v33;
      *(_QWORD *)(a1 + 2480) = &v33[4 * v32];
      if (v30)
        operator delete(v30);
    }
    v34 = *(void **)(a1 + 2488);
    *(_QWORD *)(a1 + 2496) = v34;
    v35 = *(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296);
    v36 = v35 >> 4;
    if (v35 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2504) - (_QWORD)v34) >> 2))
    {
      if (v35 < 0)
        sub_20E867F44();
      v37 = (char *)operator new((unint64_t)v35 >> 2);
      *(_QWORD *)(a1 + 2488) = v37;
      *(_QWORD *)(a1 + 2496) = v37;
      *(_QWORD *)(a1 + 2504) = &v37[4 * v36];
      if (v34)
        operator delete(v34);
    }
    v38 = *(void **)(a1 + 2512);
    *(_QWORD *)(a1 + 2520) = v38;
    v39 = *(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392);
    v40 = v39 >> 4;
    if (v39 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2528) - (_QWORD)v38) >> 2))
    {
      if (v39 < 0)
        sub_20E867F44();
      v41 = (char *)operator new((unint64_t)v39 >> 2);
      *(_QWORD *)(a1 + 2512) = v41;
      *(_QWORD *)(a1 + 2520) = v41;
      *(_QWORD *)(a1 + 2528) = &v41[4 * v40];
      if (v38)
        operator delete(v38);
    }
    v42 = *(void **)(a1 + 2536);
    *(_QWORD *)(a1 + 2544) = v42;
    v43 = *(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488);
    v44 = v43 >> 4;
    if (v43 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2552) - (_QWORD)v42) >> 2))
    {
      if (v43 < 0)
        sub_20E867F44();
      v45 = (char *)operator new((unint64_t)v43 >> 2);
      *(_QWORD *)(a1 + 2536) = v45;
      *(_QWORD *)(a1 + 2544) = v45;
      *(_QWORD *)(a1 + 2552) = &v45[4 * v44];
      if (v42)
        operator delete(v42);
    }
    v46 = *(void **)(a1 + 2560);
    *(_QWORD *)(a1 + 2568) = v46;
    v47 = *(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584);
    v48 = v47 >> 4;
    if (v47 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2576) - (_QWORD)v46) >> 2))
    {
      if (v47 < 0)
        sub_20E867F44();
      v49 = (char *)operator new((unint64_t)v47 >> 2);
      *(_QWORD *)(a1 + 2560) = v49;
      *(_QWORD *)(a1 + 2568) = v49;
      *(_QWORD *)(a1 + 2576) = &v49[4 * v48];
      if (v46)
        operator delete(v46);
    }
    v50 = *(void **)(a1 + 2584);
    *(_QWORD *)(a1 + 2592) = v50;
    v51 = *(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680);
    v52 = v51 >> 4;
    if (v51 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2600) - (_QWORD)v50) >> 2))
    {
      if (v51 < 0)
        sub_20E867F44();
      v53 = (char *)operator new((unint64_t)v51 >> 2);
      *(_QWORD *)(a1 + 2584) = v53;
      *(_QWORD *)(a1 + 2592) = v53;
      *(_QWORD *)(a1 + 2600) = &v53[4 * v52];
      if (v50)
        operator delete(v50);
    }
    v54 = *(void **)(a1 + 2608);
    *(_QWORD *)(a1 + 2616) = v54;
    v55 = *(_QWORD *)(a1 + 784) - *(_QWORD *)(a1 + 776);
    v56 = v55 >> 4;
    if (v55 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2624) - (_QWORD)v54) >> 2))
    {
      if (v55 < 0)
        sub_20E867F44();
      v57 = (char *)operator new((unint64_t)v55 >> 2);
      *(_QWORD *)(a1 + 2608) = v57;
      *(_QWORD *)(a1 + 2616) = v57;
      *(_QWORD *)(a1 + 2624) = &v57[4 * v56];
      if (v54)
        operator delete(v54);
    }
    v58 = *(void **)(a1 + 2632);
    *(_QWORD *)(a1 + 2640) = v58;
    v59 = *(_QWORD *)(a1 + 880) - *(_QWORD *)(a1 + 872);
    v60 = v59 >> 4;
    if (v59 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2648) - (_QWORD)v58) >> 2))
    {
      if (v59 < 0)
        sub_20E867F44();
      v61 = (char *)operator new((unint64_t)v59 >> 2);
      *(_QWORD *)(a1 + 2632) = v61;
      *(_QWORD *)(a1 + 2640) = v61;
      *(_QWORD *)(a1 + 2648) = &v61[4 * v60];
      if (v58)
        operator delete(v58);
    }
    v62 = *(void **)(a1 + 2656);
    *(_QWORD *)(a1 + 2664) = v62;
    v63 = *(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968);
    v64 = v63 >> 4;
    if (v63 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2672) - (_QWORD)v62) >> 2))
    {
      if (v63 < 0)
        sub_20E867F44();
      v65 = (char *)operator new((unint64_t)v63 >> 2);
      *(_QWORD *)(a1 + 2656) = v65;
      *(_QWORD *)(a1 + 2664) = v65;
      *(_QWORD *)(a1 + 2672) = &v65[4 * v64];
      if (v62)
        operator delete(v62);
    }
    v66 = *(_QWORD *)(a1 + 1064);
    for (i = *(_QWORD *)(a1 + 1072); v66 != i; v66 += 504)
    {
      v68 = *(_QWORD *)(v66 + 208);
      if (*(_BYTE *)(v66 + 496)
        || (*(_BYTE *)(v68 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v66 + 216) + 4) & 6) != 0)
      {
        *(_BYTE *)(v66 + 496) = 1;
        sub_20F394A20(a1 + 2416, v68);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v66 + 216));
      }
    }
    v69 = *(_QWORD *)(a1 + 1088);
    for (j = *(_QWORD *)(a1 + 1096); v69 != j; v69 += 280)
    {
      v71 = *(_QWORD *)(v69 + 136);
      if (*(_BYTE *)(v69 + 272) || (*(_BYTE *)(v71 + 4) & 6) != 0)
      {
        *(_BYTE *)(v69 + 272) = 1;
        sub_20F394A20(a1 + 2416, v71);
      }
    }
    v72 = *(_QWORD *)(a1 + 1112);
    for (k = *(_QWORD *)(a1 + 1120); v72 != k; v72 += 280)
    {
      v74 = *(_QWORD *)(v72 + 136);
      if (*(_BYTE *)(v72 + 272) || (*(_BYTE *)(v74 + 4) & 6) != 0)
      {
        *(_BYTE *)(v72 + 272) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2416), v74);
      }
    }
    v75 = *(_QWORD *)(a1 + 1136);
    for (m = *(_QWORD *)(a1 + 1144); v75 != m; v75 += 280)
    {
      v77 = *(_QWORD *)(v75 + 136);
      if (*(_BYTE *)(v75 + 272) || (*(_BYTE *)(v77 + 4) & 6) != 0)
      {
        *(_BYTE *)(v75 + 272) = 1;
        sub_20F59A480((_QWORD *)(a1 + 2416), v77);
      }
    }
    v78 = *(_QWORD *)(a1 + 1160);
    for (n = *(_QWORD *)(a1 + 1168); v78 != n; v78 += 160)
    {
      v80 = *(_QWORD *)(v78 + 64);
      if (*(_BYTE *)(v78 + 152) || (*(_BYTE *)(v80 + 4) & 6) != 0)
      {
        *(_BYTE *)(v78 + 152) = 1;
        sub_20F59A2E8((_QWORD *)(a1 + 2416), v80);
      }
    }
    _X21 = *(_QWORD *)(a1 + 1184);
    for (ii = *(_QWORD *)(a1 + 1192); _X21 != ii; _X21 += 9616)
    {
      __asm
      {
        PRFM            #0, [X21,#0x70A8]
        PRFM            #0, [X21,#0x6F48]
      }
      v89 = *(_QWORD *)(_X21 + 9256);
      __asm { PRFM            #0, [X21,#0x6F88] }
      if (*(_BYTE *)(_X21 + 9608)
        || (*(_BYTE *)(v89 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9264) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9272) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9280) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9288) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9296) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9304) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9312) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9320) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9328) + 4) & 6) != 0)
      {
        *(_BYTE *)(_X21 + 9608) = 1;
        sub_20F394A20(a1 + 2416, v89);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(_X21 + 9264));
        sub_20F394A20(a1 + 2416, *(_QWORD *)(_X21 + 9272));
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(_X21 + 9280));
        sub_20F59A150((_QWORD *)(a1 + 2416), *(_QWORD *)(_X21 + 9288));
        sub_20F59A150((_QWORD *)(a1 + 2416), *(_QWORD *)(_X21 + 9296));
        sub_20F599FB8((_QWORD *)(a1 + 2416), *(_QWORD *)(_X21 + 9304));
        sub_20F599FB8((_QWORD *)(a1 + 2416), *(_QWORD *)(_X21 + 9312));
        sub_20F599FB8((_QWORD *)(a1 + 2416), *(_QWORD *)(_X21 + 9320));
        sub_20F599FB8((_QWORD *)(a1 + 2416), *(_QWORD *)(_X21 + 9328));
      }
    }
    v91 = *(_QWORD *)(a1 + 1208);
    for (jj = *(_QWORD *)(a1 + 1216); v91 != jj; v91 += 5336)
    {
      v93 = *(_QWORD *)(v91 + 5024);
      if (*(_BYTE *)(v91 + 5328)
        || (*(_BYTE *)(v93 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v91 + 5032) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v91 + 5040) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v91 + 5048) + 4) & 6) != 0)
      {
        *(_BYTE *)(v91 + 5328) = 1;
        sub_20F394A20(a1 + 2416, v93);
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v91 + 5032));
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v91 + 5040));
        sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v91 + 5048));
      }
    }
    v94 = *(_QWORD *)(a1 + 1232);
    for (kk = *(_QWORD *)(a1 + 1240); v94 != kk; v94 += 144)
    {
      v96 = *(_QWORD *)(v94 + 48);
      if (*(_BYTE *)(v94 + 136) || (*(_BYTE *)(v96 + 4) & 6) != 0)
      {
        *(_BYTE *)(v94 + 136) = 1;
        sub_20F3D35E0((_QWORD *)(a1 + 2416), v96);
      }
    }
    v97 = *(_QWORD *)(a1 + 1256);
    for (mm = *(_QWORD *)(a1 + 1264); v97 != mm; v97 += 152)
    {
      v99 = *(_QWORD *)(v97 + 48);
      if (*(_BYTE *)(v97 + 144) || (*(_BYTE *)(v99 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v97 + 56) + 4) & 6) != 0)
      {
        *(_BYTE *)(v97 + 144) = 1;
        sub_20F394A20(a1 + 2416, v99);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v97 + 56));
      }
    }
    v100 = *(_QWORD *)(a1 + 1280);
    for (nn = *(_QWORD *)(a1 + 1288); v100 != nn; v100 += 304)
    {
      v102 = *(_QWORD *)(v100 + 200);
      if (*(_BYTE *)(v100 + 296)
        || (*(_BYTE *)(v102 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v100 + 208) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v100 + 216) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v100 + 224) + 4) & 6) != 0)
      {
        *(_BYTE *)(v100 + 296) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2416), v102);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v100 + 208));
        sub_20F599E20((_QWORD *)(a1 + 2416), *(_QWORD *)(v100 + 216));
        sub_20F8DAC28((_QWORD *)(a1 + 2416), *(_QWORD *)(v100 + 224));
      }
    }
    v103 = *(_QWORD *)(a1 + 1304);
    for (i1 = *(_QWORD *)(a1 + 1312); v103 != i1; v103 += 360)
    {
      v105 = *(_QWORD *)(v103 + 224);
      if (*(_BYTE *)(v103 + 352)
        || (*(_BYTE *)(v105 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v103 + 232) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v103 + 240) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v103 + 248) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v103 + 256) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v103 + 264) + 4) & 6) != 0)
      {
        *(_BYTE *)(v103 + 352) = 1;
        sub_20F394A20(a1 + 2416, v105);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v103 + 232));
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v103 + 240));
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v103 + 248));
        sub_20F59A480((_QWORD *)(a1 + 2416), *(_QWORD *)(v103 + 256));
        sub_20F59A150((_QWORD *)(a1 + 2416), *(_QWORD *)(v103 + 264));
      }
    }
    v106 = *(_QWORD *)(a1 + 1328);
    for (i2 = *(_QWORD *)(a1 + 1336); v106 != i2; v106 += 112)
    {
      v108 = *(_QWORD *)(v106 + 48);
      if (*(_BYTE *)(v106 + 104) || (*(_BYTE *)(v108 + 4) & 6) != 0)
      {
        *(_BYTE *)(v106 + 104) = 1;
        sub_20F59A150((_QWORD *)(a1 + 2416), v108);
      }
    }
    v109 = *(_QWORD *)(a1 + 1352);
    for (i3 = *(_QWORD *)(a1 + 1360); v109 != i3; v109 += 208)
    {
      v111 = *(_QWORD *)(v109 + 96);
      if (*(_BYTE *)(v109 + 200) || (*(_BYTE *)(v111 + 4) & 6) != 0)
      {
        *(_BYTE *)(v109 + 200) = 1;
        sub_20F599E20((_QWORD *)(a1 + 2416), v111);
      }
    }
    v112 = *(_QWORD *)(a1 + 1376);
    for (i4 = *(_QWORD *)(a1 + 1384); v112 != i4; v112 += 208)
    {
      v114 = *(_QWORD *)(v112 + 96);
      if (*(_BYTE *)(v112 + 200) || (*(_BYTE *)(v114 + 4) & 6) != 0)
      {
        *(_BYTE *)(v112 + 200) = 1;
        sub_20F8DAC28((_QWORD *)(a1 + 2416), v114);
      }
    }
    v115 = *(_QWORD *)(a1 + 1400);
    for (i5 = *(_QWORD *)(a1 + 1408); v115 != i5; v115 += 176)
    {
      v117 = *(_QWORD *)(v115 + 80);
      if (*(_BYTE *)(v115 + 168) || (*(_BYTE *)(v117 + 4) & 6) != 0)
      {
        *(_BYTE *)(v115 + 168) = 1;
        sub_20F8DADC0((_QWORD *)(a1 + 2416), v117);
      }
    }
    v118 = *(_QWORD *)(a1 + 1424);
    for (i6 = *(_QWORD *)(a1 + 1432); v118 != i6; v118 += 176)
    {
      v120 = *(_QWORD *)(v118 + 80);
      if (*(_BYTE *)(v118 + 168) || (*(_BYTE *)(v120 + 4) & 6) != 0)
      {
        *(_BYTE *)(v118 + 168) = 1;
        sub_20F599FB8((_QWORD *)(a1 + 2416), v120);
      }
    }
    v121 = *(_QWORD *)(a1 + 1448);
    for (i7 = *(_QWORD *)(a1 + 1456); v121 != i7; v121 += 216)
    {
      v123 = *(_QWORD *)(v121 + 56);
      if (*(_BYTE *)(v121 + 208)
        || (*(_BYTE *)(v123 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v121 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v121 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v121 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v121 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v121 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v121 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v121 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v121 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v121 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v121 + 136) + 4) & 6) != 0)
      {
        *(_BYTE *)(v121 + 208) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2416), v123);
        sub_20F599C88((_QWORD *)(a1 + 2416), *(_QWORD *)(v121 + 64));
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v121 + 72));
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v121 + 80));
        sub_20F599E20((_QWORD *)(a1 + 2416), *(_QWORD *)(v121 + 88));
        sub_20F599E20((_QWORD *)(a1 + 2416), *(_QWORD *)(v121 + 96));
        sub_20F8DAC28((_QWORD *)(a1 + 2416), *(_QWORD *)(v121 + 104));
        sub_20F8DAC28((_QWORD *)(a1 + 2416), *(_QWORD *)(v121 + 112));
        sub_20F8DADC0((_QWORD *)(a1 + 2416), *(_QWORD *)(v121 + 120));
        sub_20F8DADC0((_QWORD *)(a1 + 2416), *(_QWORD *)(v121 + 128));
        sub_20F8DAF58((_QWORD *)(a1 + 2416), *(_QWORD *)(v121 + 136));
      }
    }
    v124 = *(_QWORD *)(a1 + 1472);
    for (i8 = *(_QWORD *)(a1 + 1480); v124 != i8; v124 += 184)
    {
      v126 = *(_QWORD *)(v124 + 64);
      if (*(_BYTE *)(v124 + 176)
        || (*(_BYTE *)(v126 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v124 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v124 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v124 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v124 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v124 + 104) + 4) & 6) != 0)
      {
        *(_BYTE *)(v124 + 176) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2416), v126);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v124 + 72));
        sub_20F599E20((_QWORD *)(a1 + 2416), *(_QWORD *)(v124 + 80));
        sub_20F8DAC28((_QWORD *)(a1 + 2416), *(_QWORD *)(v124 + 88));
        sub_20F8DADC0((_QWORD *)(a1 + 2416), *(_QWORD *)(v124 + 96));
        sub_20F59A2E8((_QWORD *)(a1 + 2416), *(_QWORD *)(v124 + 104));
      }
    }
    v127 = *(_QWORD *)(a1 + 1496);
    for (i9 = *(_QWORD *)(a1 + 1504); v127 != i9; v127 += 208)
    {
      v129 = *(_QWORD *)(v127 + 64);
      if (*(_BYTE *)(v127 + 200)
        || (*(_BYTE *)(v129 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v127 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v127 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v127 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v127 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v127 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v127 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v127 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v127 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v127 + 136) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v127 + 144) + 4) & 6) != 0)
      {
        *(_BYTE *)(v127 + 200) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2416), v129);
        sub_20F599C88((_QWORD *)(a1 + 2416), *(_QWORD *)(v127 + 72));
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v127 + 80));
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v127 + 88));
        sub_20F599E20((_QWORD *)(a1 + 2416), *(_QWORD *)(v127 + 96));
        sub_20F599E20((_QWORD *)(a1 + 2416), *(_QWORD *)(v127 + 104));
        sub_20F8DAC28((_QWORD *)(a1 + 2416), *(_QWORD *)(v127 + 112));
        sub_20F8DAC28((_QWORD *)(a1 + 2416), *(_QWORD *)(v127 + 120));
        sub_20F8DADC0((_QWORD *)(a1 + 2416), *(_QWORD *)(v127 + 128));
        sub_20F8DADC0((_QWORD *)(a1 + 2416), *(_QWORD *)(v127 + 136));
        sub_20F8DAF58((_QWORD *)(a1 + 2416), *(_QWORD *)(v127 + 144));
      }
    }
    v130 = *(_QWORD *)(a1 + 1520);
    for (i10 = *(_QWORD *)(a1 + 1528); v130 != i10; v130 += 184)
    {
      v132 = *(_QWORD *)(v130 + 56);
      if (*(_BYTE *)(v130 + 176)
        || (*(_BYTE *)(v132 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v130 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v130 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v130 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v130 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v130 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v130 + 104) + 4) & 6) != 0)
      {
        *(_BYTE *)(v130 + 176) = 1;
        sub_20F599C88((_QWORD *)(a1 + 2416), v132);
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v130 + 64));
        sub_20F394A20(a1 + 2416, *(_QWORD *)(v130 + 72));
        sub_20F599E20((_QWORD *)(a1 + 2416), *(_QWORD *)(v130 + 80));
        sub_20F8DAC28((_QWORD *)(a1 + 2416), *(_QWORD *)(v130 + 88));
        sub_20F8DADC0((_QWORD *)(a1 + 2416), *(_QWORD *)(v130 + 96));
        sub_20F8DAF58((_QWORD *)(a1 + 2416), *(_QWORD *)(v130 + 104));
      }
    }
    v133 = *(_QWORD *)(a1 + 1896);
    v134 = *(_QWORD *)(a1 + 1888);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v806 = (void **)(a1 + 1888);
    v135 = *(unsigned int **)(a1 + 2424);
    v136 = *(unsigned int **)(a1 + 2416);
    v137 = ((v133 - v134) >> 2) + v135 - v136;
    v138 = *(_BYTE **)(a1 + 1888);
    v762 = (v133 - v134) >> 2;
    v773 = v134;
    v784 = v133;
    if (v137 <= (uint64_t)(*(_QWORD *)(a1 + 1904) - (_QWORD)v138) >> 2)
    {
LABEL_244:
      if (v136 != v135)
      {
        v795 = v135;
        while (1)
        {
          v155 = *v136;
          v157 = *(char **)(a1 + 8);
          v156 = *(char **)(a1 + 16);
          if (v156 != v157)
          {
            v158 = (v156 - v157) >> 4;
            do
            {
              v159 = v158 >> 1;
              v160 = (unsigned int *)&v157[16 * (v158 >> 1)];
              v162 = *v160;
              v161 = (char *)(v160 + 4);
              v158 += ~(v158 >> 1);
              if (v162 < v155)
                v157 = v161;
              else
                v158 = v159;
            }
            while (v158);
          }
          if (v157 == v156 || *(_DWORD *)v157 != v155)
          {
            v155 = *(_DWORD *)v156;
            v157 = *(char **)(a1 + 16);
          }
          if ((*(_BYTE *)(*((_QWORD *)v157 + 1) + 4) & 6) != 0)
            goto LABEL_248;
          v163 = *(char **)(a1 + 1896);
          v164 = *(_QWORD *)(a1 + 1904);
          if ((unint64_t)v163 >= v164)
            break;
          *(_DWORD *)v163 = v155;
          v154 = (uint64_t)(v163 + 4);
LABEL_247:
          *(_QWORD *)(a1 + 1896) = v154;
          *(_BYTE *)(*((_QWORD *)v157 + 1) + 4) ^= 2u;
LABEL_248:
          if (++v136 == v135)
            goto LABEL_280;
        }
        v165 = (char *)*v806;
        v166 = v163 - (_BYTE *)*v806;
        v167 = v166 >> 2;
        v168 = (v166 >> 2) + 1;
        if (v168 >> 62)
          goto LABEL_895;
        v169 = v164 - (_QWORD)v165;
        if (v169 >> 1 > v168)
          v168 = v169 >> 1;
        if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
          v170 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v170 = v168;
        if (v170)
        {
          if (v170 >> 62)
LABEL_896:
            sub_20E877A38();
          v171 = operator new(4 * v170);
          v172 = (unsigned int *)&v171[4 * v167];
          *v172 = v155;
          v154 = (uint64_t)(v172 + 1);
          v173 = v163 - v165;
          if (v163 == v165)
            goto LABEL_277;
        }
        else
        {
          v171 = 0;
          v172 = (unsigned int *)(4 * v167);
          *(_DWORD *)(4 * v167) = v155;
          v154 = 4 * v167 + 4;
          v173 = v163 - v165;
          if (v163 == v165)
          {
LABEL_277:
            *(_QWORD *)(a1 + 1888) = v172;
            *(_QWORD *)(a1 + 1896) = v154;
            *(_QWORD *)(a1 + 1904) = &v171[4 * v170];
            if (v165)
              operator delete(v165);
            v135 = v795;
            goto LABEL_247;
          }
        }
        v174 = v173 - 4;
        if (v174 < 0x2C)
          goto LABEL_910;
        if ((unint64_t)(v163 - v171 - v166) < 0x20)
          goto LABEL_910;
        v175 = (v174 >> 2) + 1;
        v176 = 4 * (v175 & 0x7FFFFFFFFFFFFFF8);
        v177 = &v163[-v176];
        v172 = (unsigned int *)((char *)v172 - v176);
        v178 = &v171[4 * v167 - 16];
        v179 = v163 - 16;
        v180 = v175 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v181 = *(_OWORD *)v179;
          *(v178 - 1) = *((_OWORD *)v179 - 1);
          *v178 = v181;
          v178 -= 2;
          v179 -= 32;
          v180 -= 8;
        }
        while (v180);
        v163 = v177;
        if (v175 != (v175 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_910:
          do
          {
            v182 = *((_DWORD *)v163 - 1);
            v163 -= 4;
            *--v172 = v182;
          }
          while (v163 != v165);
        }
        goto LABEL_277;
      }
LABEL_280:
      if (v784 != v773)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v183 = *(__n128 **)(a1 + 1888);
        v184 = (char *)v183 + 4 * v762;
        v185 = *(__n128 **)(a1 + 1896);
        if (((char *)v185 - v184) >> 2 >= v762)
          v186 = v762;
        else
          v186 = ((char *)v185 - v184) >> 2;
        if (v186 < 1)
        {
LABEL_288:
          v190 = 0;
          v186 = 0;
        }
        else
        {
          v187 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v188 = (char *)operator new(4 * v186, v187);
            if (v188)
              break;
            v189 = (unint64_t)v186 > 1;
            v186 = (unint64_t)v186 >> 1;
            if (!v189)
              goto LABEL_288;
          }
          v190 = v188;
        }
        sub_20EDB30B0(v183, (__n128 *)((char *)v183 + 4 * v762), v185, (uint64_t)&v817, v762, ((char *)v185 - v184) >> 2, v190, v186);
        if (v190)
          operator delete(v190);
      }
      v191 = *(_QWORD *)(a1 + 1920);
      v192 = *(_QWORD *)(a1 + 1912);
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v807 = (void **)(a1 + 1912);
      v193 = *(unsigned int **)(a1 + 2448);
      v194 = *(unsigned int **)(a1 + 2440);
      v195 = ((v191 - v192) >> 2) + v193 - v194;
      v196 = *(_BYTE **)(a1 + 1912);
      v763 = (v191 - v192) >> 2;
      v774 = v192;
      v785 = v191;
      if (v195 <= (uint64_t)(*(_QWORD *)(a1 + 1928) - (_QWORD)v196) >> 2)
      {
LABEL_304:
        if (v194 != v193)
        {
          v796 = v193;
          while (1)
          {
            v213 = *v194;
            v215 = *(char **)(a1 + 104);
            v214 = *(char **)(a1 + 112);
            if (v214 != v215)
            {
              v216 = (v214 - v215) >> 4;
              do
              {
                v217 = v216 >> 1;
                v218 = (unsigned int *)&v215[16 * (v216 >> 1)];
                v220 = *v218;
                v219 = (char *)(v218 + 4);
                v216 += ~(v216 >> 1);
                if (v220 < v213)
                  v215 = v219;
                else
                  v216 = v217;
              }
              while (v216);
            }
            if (v215 == v214 || *(_DWORD *)v215 != v213)
            {
              v213 = *(_DWORD *)v214;
              v215 = *(char **)(a1 + 112);
            }
            if ((*(_BYTE *)(*((_QWORD *)v215 + 1) + 4) & 6) != 0)
              goto LABEL_308;
            v221 = *(char **)(a1 + 1920);
            v222 = *(_QWORD *)(a1 + 1928);
            if ((unint64_t)v221 >= v222)
              break;
            *(_DWORD *)v221 = v213;
            v212 = (uint64_t)(v221 + 4);
LABEL_307:
            *(_QWORD *)(a1 + 1920) = v212;
            *(_BYTE *)(*((_QWORD *)v215 + 1) + 4) ^= 2u;
LABEL_308:
            if (++v194 == v193)
              goto LABEL_340;
          }
          v223 = (char *)*v807;
          v224 = v221 - (_BYTE *)*v807;
          v225 = v224 >> 2;
          v226 = (v224 >> 2) + 1;
          if (v226 >> 62)
            goto LABEL_895;
          v227 = v222 - (_QWORD)v223;
          if (v227 >> 1 > v226)
            v226 = v227 >> 1;
          if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFFCLL)
            v228 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v228 = v226;
          if (v228)
          {
            if (v228 >> 62)
              goto LABEL_896;
            v229 = operator new(4 * v228);
            v230 = (unsigned int *)&v229[4 * v225];
            *v230 = v213;
            v212 = (uint64_t)(v230 + 1);
            v231 = v221 - v223;
            if (v221 == v223)
              goto LABEL_337;
          }
          else
          {
            v229 = 0;
            v230 = (unsigned int *)(4 * v225);
            *(_DWORD *)(4 * v225) = v213;
            v212 = 4 * v225 + 4;
            v231 = v221 - v223;
            if (v221 == v223)
            {
LABEL_337:
              *(_QWORD *)(a1 + 1912) = v230;
              *(_QWORD *)(a1 + 1920) = v212;
              *(_QWORD *)(a1 + 1928) = &v229[4 * v228];
              if (v223)
                operator delete(v223);
              v193 = v796;
              goto LABEL_307;
            }
          }
          v232 = v231 - 4;
          if (v232 < 0x2C)
            goto LABEL_911;
          if ((unint64_t)(v221 - v229 - v224) < 0x20)
            goto LABEL_911;
          v233 = (v232 >> 2) + 1;
          v234 = 4 * (v233 & 0x7FFFFFFFFFFFFFF8);
          v235 = &v221[-v234];
          v230 = (unsigned int *)((char *)v230 - v234);
          v236 = &v229[4 * v225 - 16];
          v237 = v221 - 16;
          v238 = v233 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v239 = *(_OWORD *)v237;
            *(v236 - 1) = *((_OWORD *)v237 - 1);
            *v236 = v239;
            v236 -= 2;
            v237 -= 32;
            v238 -= 8;
          }
          while (v238);
          v221 = v235;
          if (v233 != (v233 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_911:
            do
            {
              v240 = *((_DWORD *)v221 - 1);
              v221 -= 4;
              *--v230 = v240;
            }
            while (v221 != v223);
          }
          goto LABEL_337;
        }
LABEL_340:
        if (v785 != v774)
        {
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v241 = *(__n128 **)(a1 + 1912);
          v242 = (char *)v241 + 4 * v763;
          v243 = *(__n128 **)(a1 + 1920);
          if (((char *)v243 - v242) >> 2 >= v763)
            v244 = v763;
          else
            v244 = ((char *)v243 - v242) >> 2;
          if (v244 < 1)
          {
LABEL_348:
            v247 = 0;
            v244 = 0;
          }
          else
          {
            v245 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            while (1)
            {
              v246 = (char *)operator new(4 * v244, v245);
              if (v246)
                break;
              v189 = (unint64_t)v244 > 1;
              v244 = (unint64_t)v244 >> 1;
              if (!v189)
                goto LABEL_348;
            }
            v247 = v246;
          }
          sub_20EDB30B0(v241, (__n128 *)((char *)v241 + 4 * v763), v243, (uint64_t)&v817, v763, ((char *)v243 - v242) >> 2, v247, v244);
          if (v247)
            operator delete(v247);
        }
        v248 = *(_QWORD *)(a1 + 1944);
        v249 = *(_QWORD *)(a1 + 1936);
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v808 = (void **)(a1 + 1936);
        v250 = *(unsigned int **)(a1 + 2472);
        v251 = *(unsigned int **)(a1 + 2464);
        v252 = ((v248 - v249) >> 2) + v250 - v251;
        v253 = *(_BYTE **)(a1 + 1936);
        v764 = (v248 - v249) >> 2;
        v775 = v249;
        v786 = v248;
        if (v252 <= (uint64_t)(*(_QWORD *)(a1 + 1952) - (_QWORD)v253) >> 2)
        {
LABEL_364:
          if (v251 != v250)
          {
            v797 = v250;
            while (1)
            {
              v270 = *v251;
              v272 = *(char **)(a1 + 200);
              v271 = *(char **)(a1 + 208);
              if (v271 != v272)
              {
                v273 = (v271 - v272) >> 4;
                do
                {
                  v274 = v273 >> 1;
                  v275 = (unsigned int *)&v272[16 * (v273 >> 1)];
                  v277 = *v275;
                  v276 = (char *)(v275 + 4);
                  v273 += ~(v273 >> 1);
                  if (v277 < v270)
                    v272 = v276;
                  else
                    v273 = v274;
                }
                while (v273);
              }
              if (v272 == v271 || *(_DWORD *)v272 != v270)
              {
                v270 = *(_DWORD *)v271;
                v272 = *(char **)(a1 + 208);
              }
              if ((*(_BYTE *)(*((_QWORD *)v272 + 1) + 4) & 6) != 0)
                goto LABEL_368;
              v278 = *(char **)(a1 + 1944);
              v279 = *(_QWORD *)(a1 + 1952);
              if ((unint64_t)v278 >= v279)
                break;
              *(_DWORD *)v278 = v270;
              v269 = (uint64_t)(v278 + 4);
LABEL_367:
              *(_QWORD *)(a1 + 1944) = v269;
              *(_BYTE *)(*((_QWORD *)v272 + 1) + 4) ^= 2u;
LABEL_368:
              if (++v251 == v250)
                goto LABEL_400;
            }
            v280 = (char *)*v808;
            v281 = v278 - (_BYTE *)*v808;
            v282 = v281 >> 2;
            v283 = (v281 >> 2) + 1;
            if (v283 >> 62)
              goto LABEL_895;
            v284 = v279 - (_QWORD)v280;
            if (v284 >> 1 > v283)
              v283 = v284 >> 1;
            if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFFCLL)
              v285 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v285 = v283;
            if (v285)
            {
              if (v285 >> 62)
                goto LABEL_896;
              v286 = operator new(4 * v285);
              v287 = (unsigned int *)&v286[4 * v282];
              *v287 = v270;
              v269 = (uint64_t)(v287 + 1);
              v288 = v278 - v280;
              if (v278 == v280)
                goto LABEL_397;
            }
            else
            {
              v286 = 0;
              v287 = (unsigned int *)(4 * v282);
              *(_DWORD *)(4 * v282) = v270;
              v269 = 4 * v282 + 4;
              v288 = v278 - v280;
              if (v278 == v280)
              {
LABEL_397:
                *(_QWORD *)(a1 + 1936) = v287;
                *(_QWORD *)(a1 + 1944) = v269;
                *(_QWORD *)(a1 + 1952) = &v286[4 * v285];
                if (v280)
                  operator delete(v280);
                v250 = v797;
                goto LABEL_367;
              }
            }
            v289 = v288 - 4;
            if (v289 < 0x2C)
              goto LABEL_912;
            if ((unint64_t)(v278 - v286 - v281) < 0x20)
              goto LABEL_912;
            v290 = (v289 >> 2) + 1;
            v291 = 4 * (v290 & 0x7FFFFFFFFFFFFFF8);
            v292 = &v278[-v291];
            v287 = (unsigned int *)((char *)v287 - v291);
            v293 = &v286[4 * v282 - 16];
            v294 = v278 - 16;
            v295 = v290 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v296 = *(_OWORD *)v294;
              *(v293 - 1) = *((_OWORD *)v294 - 1);
              *v293 = v296;
              v293 -= 2;
              v294 -= 32;
              v295 -= 8;
            }
            while (v295);
            v278 = v292;
            if (v290 != (v290 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_912:
              do
              {
                v297 = *((_DWORD *)v278 - 1);
                v278 -= 4;
                *--v287 = v297;
              }
              while (v278 != v280);
            }
            goto LABEL_397;
          }
LABEL_400:
          if (v786 != v775)
          {
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v298 = *(__n128 **)(a1 + 1936);
            v299 = (char *)v298 + 4 * v764;
            v300 = *(__n128 **)(a1 + 1944);
            if (((char *)v300 - v299) >> 2 >= v764)
              v301 = v764;
            else
              v301 = ((char *)v300 - v299) >> 2;
            if (v301 < 1)
            {
LABEL_408:
              v304 = 0;
              v301 = 0;
            }
            else
            {
              v302 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
              while (1)
              {
                v303 = (char *)operator new(4 * v301, v302);
                if (v303)
                  break;
                v189 = (unint64_t)v301 > 1;
                v301 = (unint64_t)v301 >> 1;
                if (!v189)
                  goto LABEL_408;
              }
              v304 = v303;
            }
            sub_20EDB30B0(v298, (__n128 *)((char *)v298 + 4 * v764), v300, (uint64_t)&v817, v764, ((char *)v300 - v299) >> 2, v304, v301);
            if (v304)
              operator delete(v304);
          }
          v305 = *(_QWORD *)(a1 + 1968);
          v306 = *(_QWORD *)(a1 + 1960);
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v809 = (void **)(a1 + 1960);
          v307 = *(unsigned int **)(a1 + 2496);
          v308 = *(unsigned int **)(a1 + 2488);
          v309 = ((v305 - v306) >> 2) + v307 - v308;
          v310 = *(_BYTE **)(a1 + 1960);
          v765 = (v305 - v306) >> 2;
          v776 = v306;
          v787 = v305;
          if (v309 <= (uint64_t)(*(_QWORD *)(a1 + 1976) - (_QWORD)v310) >> 2)
          {
LABEL_424:
            if (v308 != v307)
            {
              v798 = v307;
              while (1)
              {
                v327 = *v308;
                v329 = *(char **)(a1 + 296);
                v328 = *(char **)(a1 + 304);
                if (v328 != v329)
                {
                  v330 = (v328 - v329) >> 4;
                  do
                  {
                    v331 = v330 >> 1;
                    v332 = (unsigned int *)&v329[16 * (v330 >> 1)];
                    v334 = *v332;
                    v333 = (char *)(v332 + 4);
                    v330 += ~(v330 >> 1);
                    if (v334 < v327)
                      v329 = v333;
                    else
                      v330 = v331;
                  }
                  while (v330);
                }
                if (v329 == v328 || *(_DWORD *)v329 != v327)
                {
                  v327 = *(_DWORD *)v328;
                  v329 = *(char **)(a1 + 304);
                }
                if ((*(_BYTE *)(*((_QWORD *)v329 + 1) + 4) & 6) != 0)
                  goto LABEL_428;
                v335 = *(char **)(a1 + 1968);
                v336 = *(_QWORD *)(a1 + 1976);
                if ((unint64_t)v335 >= v336)
                  break;
                *(_DWORD *)v335 = v327;
                v326 = (uint64_t)(v335 + 4);
LABEL_427:
                *(_QWORD *)(a1 + 1968) = v326;
                *(_BYTE *)(*((_QWORD *)v329 + 1) + 4) ^= 2u;
LABEL_428:
                if (++v308 == v307)
                  goto LABEL_460;
              }
              v337 = (char *)*v809;
              v338 = v335 - (_BYTE *)*v809;
              v339 = v338 >> 2;
              v340 = (v338 >> 2) + 1;
              if (v340 >> 62)
                goto LABEL_895;
              v341 = v336 - (_QWORD)v337;
              if (v341 >> 1 > v340)
                v340 = v341 >> 1;
              if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFFCLL)
                v342 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v342 = v340;
              if (v342)
              {
                if (v342 >> 62)
                  goto LABEL_896;
                v343 = operator new(4 * v342);
                v344 = (unsigned int *)&v343[4 * v339];
                *v344 = v327;
                v326 = (uint64_t)(v344 + 1);
                v345 = v335 - v337;
                if (v335 == v337)
                  goto LABEL_457;
              }
              else
              {
                v343 = 0;
                v344 = (unsigned int *)(4 * v339);
                *(_DWORD *)(4 * v339) = v327;
                v326 = 4 * v339 + 4;
                v345 = v335 - v337;
                if (v335 == v337)
                {
LABEL_457:
                  *(_QWORD *)(a1 + 1960) = v344;
                  *(_QWORD *)(a1 + 1968) = v326;
                  *(_QWORD *)(a1 + 1976) = &v343[4 * v342];
                  if (v337)
                    operator delete(v337);
                  v307 = v798;
                  goto LABEL_427;
                }
              }
              v346 = v345 - 4;
              if (v346 < 0x2C)
                goto LABEL_913;
              if ((unint64_t)(v335 - v343 - v338) < 0x20)
                goto LABEL_913;
              v347 = (v346 >> 2) + 1;
              v348 = 4 * (v347 & 0x7FFFFFFFFFFFFFF8);
              v349 = &v335[-v348];
              v344 = (unsigned int *)((char *)v344 - v348);
              v350 = &v343[4 * v339 - 16];
              v351 = v335 - 16;
              v352 = v347 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v353 = *(_OWORD *)v351;
                *(v350 - 1) = *((_OWORD *)v351 - 1);
                *v350 = v353;
                v350 -= 2;
                v351 -= 32;
                v352 -= 8;
              }
              while (v352);
              v335 = v349;
              if (v347 != (v347 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_913:
                do
                {
                  v354 = *((_DWORD *)v335 - 1);
                  v335 -= 4;
                  *--v344 = v354;
                }
                while (v335 != v337);
              }
              goto LABEL_457;
            }
LABEL_460:
            if (v787 != v776)
            {
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v355 = *(__n128 **)(a1 + 1960);
              v356 = (char *)v355 + 4 * v765;
              v357 = *(__n128 **)(a1 + 1968);
              if (((char *)v357 - v356) >> 2 >= v765)
                v358 = v765;
              else
                v358 = ((char *)v357 - v356) >> 2;
              if (v358 < 1)
              {
LABEL_468:
                v361 = 0;
                v358 = 0;
              }
              else
              {
                v359 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                while (1)
                {
                  v360 = (char *)operator new(4 * v358, v359);
                  if (v360)
                    break;
                  v189 = (unint64_t)v358 > 1;
                  v358 = (unint64_t)v358 >> 1;
                  if (!v189)
                    goto LABEL_468;
                }
                v361 = v360;
              }
              sub_20EDB30B0(v355, (__n128 *)((char *)v355 + 4 * v765), v357, (uint64_t)&v817, v765, ((char *)v357 - v356) >> 2, v361, v358);
              if (v361)
                operator delete(v361);
            }
            v362 = *(_QWORD *)(a1 + 1992);
            v363 = *(_QWORD *)(a1 + 1984);
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v810 = (void **)(a1 + 1984);
            v364 = *(unsigned int **)(a1 + 2520);
            v365 = *(unsigned int **)(a1 + 2512);
            v366 = ((v362 - v363) >> 2) + v364 - v365;
            v367 = *(_BYTE **)(a1 + 1984);
            v766 = (v362 - v363) >> 2;
            v777 = v363;
            v788 = v362;
            if (v366 <= (uint64_t)(*(_QWORD *)(a1 + 2000) - (_QWORD)v367) >> 2)
            {
LABEL_484:
              if (v365 != v364)
              {
                v799 = v364;
                while (1)
                {
                  v384 = *v365;
                  v386 = *(char **)(a1 + 392);
                  v385 = *(char **)(a1 + 400);
                  if (v385 != v386)
                  {
                    v387 = (v385 - v386) >> 4;
                    do
                    {
                      v388 = v387 >> 1;
                      v389 = (unsigned int *)&v386[16 * (v387 >> 1)];
                      v391 = *v389;
                      v390 = (char *)(v389 + 4);
                      v387 += ~(v387 >> 1);
                      if (v391 < v384)
                        v386 = v390;
                      else
                        v387 = v388;
                    }
                    while (v387);
                  }
                  if (v386 == v385 || *(_DWORD *)v386 != v384)
                  {
                    v384 = *(_DWORD *)v385;
                    v386 = *(char **)(a1 + 400);
                  }
                  if ((*(_BYTE *)(*((_QWORD *)v386 + 1) + 4) & 6) != 0)
                    goto LABEL_488;
                  v392 = *(char **)(a1 + 1992);
                  v393 = *(_QWORD *)(a1 + 2000);
                  if ((unint64_t)v392 >= v393)
                    break;
                  *(_DWORD *)v392 = v384;
                  v383 = (uint64_t)(v392 + 4);
LABEL_487:
                  *(_QWORD *)(a1 + 1992) = v383;
                  *(_BYTE *)(*((_QWORD *)v386 + 1) + 4) ^= 2u;
LABEL_488:
                  if (++v365 == v364)
                    goto LABEL_520;
                }
                v394 = (char *)*v810;
                v395 = v392 - (_BYTE *)*v810;
                v396 = v395 >> 2;
                v397 = (v395 >> 2) + 1;
                if (v397 >> 62)
                  goto LABEL_895;
                v398 = v393 - (_QWORD)v394;
                if (v398 >> 1 > v397)
                  v397 = v398 >> 1;
                if ((unint64_t)v398 >= 0x7FFFFFFFFFFFFFFCLL)
                  v399 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v399 = v397;
                if (v399)
                {
                  if (v399 >> 62)
                    goto LABEL_896;
                  v400 = operator new(4 * v399);
                  v401 = (unsigned int *)&v400[4 * v396];
                  *v401 = v384;
                  v383 = (uint64_t)(v401 + 1);
                  v402 = v392 - v394;
                  if (v392 == v394)
                    goto LABEL_517;
                }
                else
                {
                  v400 = 0;
                  v401 = (unsigned int *)(4 * v396);
                  *(_DWORD *)(4 * v396) = v384;
                  v383 = 4 * v396 + 4;
                  v402 = v392 - v394;
                  if (v392 == v394)
                  {
LABEL_517:
                    *(_QWORD *)(a1 + 1984) = v401;
                    *(_QWORD *)(a1 + 1992) = v383;
                    *(_QWORD *)(a1 + 2000) = &v400[4 * v399];
                    if (v394)
                      operator delete(v394);
                    v364 = v799;
                    goto LABEL_487;
                  }
                }
                v403 = v402 - 4;
                if (v403 < 0x2C)
                  goto LABEL_914;
                if ((unint64_t)(v392 - v400 - v395) < 0x20)
                  goto LABEL_914;
                v404 = (v403 >> 2) + 1;
                v405 = 4 * (v404 & 0x7FFFFFFFFFFFFFF8);
                v406 = &v392[-v405];
                v401 = (unsigned int *)((char *)v401 - v405);
                v407 = &v400[4 * v396 - 16];
                v408 = v392 - 16;
                v409 = v404 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v410 = *(_OWORD *)v408;
                  *(v407 - 1) = *((_OWORD *)v408 - 1);
                  *v407 = v410;
                  v407 -= 2;
                  v408 -= 32;
                  v409 -= 8;
                }
                while (v409);
                v392 = v406;
                if (v404 != (v404 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_914:
                  do
                  {
                    v411 = *((_DWORD *)v392 - 1);
                    v392 -= 4;
                    *--v401 = v411;
                  }
                  while (v392 != v394);
                }
                goto LABEL_517;
              }
LABEL_520:
              if (v788 != v777)
              {
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v412 = *(__n128 **)(a1 + 1984);
                v413 = (char *)v412 + 4 * v766;
                v414 = *(__n128 **)(a1 + 1992);
                if (((char *)v414 - v413) >> 2 >= v766)
                  v415 = v766;
                else
                  v415 = ((char *)v414 - v413) >> 2;
                if (v415 < 1)
                {
LABEL_528:
                  v418 = 0;
                  v415 = 0;
                }
                else
                {
                  v416 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                  while (1)
                  {
                    v417 = (char *)operator new(4 * v415, v416);
                    if (v417)
                      break;
                    v189 = (unint64_t)v415 > 1;
                    v415 = (unint64_t)v415 >> 1;
                    if (!v189)
                      goto LABEL_528;
                  }
                  v418 = v417;
                }
                sub_20EDB30B0(v412, (__n128 *)((char *)v412 + 4 * v766), v414, (uint64_t)&v817, v766, ((char *)v414 - v413) >> 2, v418, v415);
                if (v418)
                  operator delete(v418);
              }
              v419 = *(_QWORD *)(a1 + 2016);
              v420 = *(_QWORD *)(a1 + 2008);
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v811 = (void **)(a1 + 2008);
              v421 = *(unsigned int **)(a1 + 2544);
              v422 = *(unsigned int **)(a1 + 2536);
              v423 = ((v419 - v420) >> 2) + v421 - v422;
              v424 = *(_BYTE **)(a1 + 2008);
              v767 = (v419 - v420) >> 2;
              v778 = v420;
              v789 = v419;
              if (v423 <= (uint64_t)(*(_QWORD *)(a1 + 2024) - (_QWORD)v424) >> 2)
              {
LABEL_544:
                if (v422 != v421)
                {
                  v800 = v421;
                  while (1)
                  {
                    v441 = *v422;
                    v443 = *(char **)(a1 + 488);
                    v442 = *(char **)(a1 + 496);
                    if (v442 != v443)
                    {
                      v444 = (v442 - v443) >> 4;
                      do
                      {
                        v445 = v444 >> 1;
                        v446 = (unsigned int *)&v443[16 * (v444 >> 1)];
                        v448 = *v446;
                        v447 = (char *)(v446 + 4);
                        v444 += ~(v444 >> 1);
                        if (v448 < v441)
                          v443 = v447;
                        else
                          v444 = v445;
                      }
                      while (v444);
                    }
                    if (v443 == v442 || *(_DWORD *)v443 != v441)
                    {
                      v441 = *(_DWORD *)v442;
                      v443 = *(char **)(a1 + 496);
                    }
                    if ((*(_BYTE *)(*((_QWORD *)v443 + 1) + 4) & 6) != 0)
                      goto LABEL_548;
                    v449 = *(char **)(a1 + 2016);
                    v450 = *(_QWORD *)(a1 + 2024);
                    if ((unint64_t)v449 >= v450)
                      break;
                    *(_DWORD *)v449 = v441;
                    v440 = (uint64_t)(v449 + 4);
LABEL_547:
                    *(_QWORD *)(a1 + 2016) = v440;
                    *(_BYTE *)(*((_QWORD *)v443 + 1) + 4) ^= 2u;
LABEL_548:
                    if (++v422 == v421)
                      goto LABEL_580;
                  }
                  v451 = (char *)*v811;
                  v452 = v449 - (_BYTE *)*v811;
                  v453 = v452 >> 2;
                  v454 = (v452 >> 2) + 1;
                  if (v454 >> 62)
                    goto LABEL_895;
                  v455 = v450 - (_QWORD)v451;
                  if (v455 >> 1 > v454)
                    v454 = v455 >> 1;
                  if ((unint64_t)v455 >= 0x7FFFFFFFFFFFFFFCLL)
                    v456 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v456 = v454;
                  if (v456)
                  {
                    if (v456 >> 62)
                      goto LABEL_896;
                    v457 = operator new(4 * v456);
                    v458 = (unsigned int *)&v457[4 * v453];
                    *v458 = v441;
                    v440 = (uint64_t)(v458 + 1);
                    v459 = v449 - v451;
                    if (v449 == v451)
                      goto LABEL_577;
                  }
                  else
                  {
                    v457 = 0;
                    v458 = (unsigned int *)(4 * v453);
                    *(_DWORD *)(4 * v453) = v441;
                    v440 = 4 * v453 + 4;
                    v459 = v449 - v451;
                    if (v449 == v451)
                    {
LABEL_577:
                      *(_QWORD *)(a1 + 2008) = v458;
                      *(_QWORD *)(a1 + 2016) = v440;
                      *(_QWORD *)(a1 + 2024) = &v457[4 * v456];
                      if (v451)
                        operator delete(v451);
                      v421 = v800;
                      goto LABEL_547;
                    }
                  }
                  v460 = v459 - 4;
                  if (v460 < 0x2C)
                    goto LABEL_915;
                  if ((unint64_t)(v449 - v457 - v452) < 0x20)
                    goto LABEL_915;
                  v461 = (v460 >> 2) + 1;
                  v462 = 4 * (v461 & 0x7FFFFFFFFFFFFFF8);
                  v463 = &v449[-v462];
                  v458 = (unsigned int *)((char *)v458 - v462);
                  v464 = &v457[4 * v453 - 16];
                  v465 = v449 - 16;
                  v466 = v461 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v467 = *(_OWORD *)v465;
                    *(v464 - 1) = *((_OWORD *)v465 - 1);
                    *v464 = v467;
                    v464 -= 2;
                    v465 -= 32;
                    v466 -= 8;
                  }
                  while (v466);
                  v449 = v463;
                  if (v461 != (v461 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_915:
                    do
                    {
                      v468 = *((_DWORD *)v449 - 1);
                      v449 -= 4;
                      *--v458 = v468;
                    }
                    while (v449 != v451);
                  }
                  goto LABEL_577;
                }
LABEL_580:
                if (v789 != v778)
                {
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v469 = *(__n128 **)(a1 + 2008);
                  v470 = (char *)v469 + 4 * v767;
                  v471 = *(__n128 **)(a1 + 2016);
                  if (((char *)v471 - v470) >> 2 >= v767)
                    v472 = v767;
                  else
                    v472 = ((char *)v471 - v470) >> 2;
                  if (v472 < 1)
                  {
LABEL_588:
                    v475 = 0;
                    v472 = 0;
                  }
                  else
                  {
                    v473 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                    while (1)
                    {
                      v474 = (char *)operator new(4 * v472, v473);
                      if (v474)
                        break;
                      v189 = (unint64_t)v472 > 1;
                      v472 = (unint64_t)v472 >> 1;
                      if (!v189)
                        goto LABEL_588;
                    }
                    v475 = v474;
                  }
                  sub_20EDB30B0(v469, (__n128 *)((char *)v469 + 4 * v767), v471, (uint64_t)&v817, v767, ((char *)v471 - v470) >> 2, v475, v472);
                  if (v475)
                    operator delete(v475);
                }
                v476 = *(_QWORD *)(a1 + 2040);
                v477 = *(_QWORD *)(a1 + 2032);
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v812 = (void **)(a1 + 2032);
                v478 = *(unsigned int **)(a1 + 2568);
                v479 = *(unsigned int **)(a1 + 2560);
                v480 = ((v476 - v477) >> 2) + v478 - v479;
                v481 = *(_BYTE **)(a1 + 2032);
                v768 = (v476 - v477) >> 2;
                v779 = v477;
                v790 = v476;
                if (v480 <= (uint64_t)(*(_QWORD *)(a1 + 2048) - (_QWORD)v481) >> 2)
                {
LABEL_604:
                  if (v479 != v478)
                  {
                    v801 = v478;
                    while (1)
                    {
                      v498 = *v479;
                      v499 = *(char **)(a1 + 584);
                      v500 = *(char **)(a1 + 592);
                      if (v500 != v499)
                      {
                        v501 = (v500 - v499) >> 4;
                        do
                        {
                          v502 = v501 >> 1;
                          v503 = (unsigned int *)&v499[16 * (v501 >> 1)];
                          v505 = *v503;
                          v504 = (char *)(v503 + 4);
                          v501 += ~(v501 >> 1);
                          if (v505 < v498)
                            v499 = v504;
                          else
                            v501 = v502;
                        }
                        while (v501);
                      }
                      if (v499 == v500 || *(_DWORD *)v499 != v498)
                      {
                        v498 = *(_DWORD *)v500;
                        v499 = *(char **)(a1 + 592);
                      }
                      if ((*(_BYTE *)(*((_QWORD *)v499 + 1) + 4) & 6) != 0)
                        goto LABEL_608;
                      v506 = *(char **)(a1 + 2040);
                      v507 = *(_QWORD *)(a1 + 2048);
                      if ((unint64_t)v506 >= v507)
                        break;
                      *(_DWORD *)v506 = v498;
                      v497 = (uint64_t)(v506 + 4);
LABEL_607:
                      *(_QWORD *)(a1 + 2040) = v497;
                      *(_BYTE *)(*((_QWORD *)v499 + 1) + 4) ^= 2u;
LABEL_608:
                      if (++v479 == v478)
                        goto LABEL_640;
                    }
                    v508 = (char *)*v812;
                    v509 = v506 - (_BYTE *)*v812;
                    v510 = v509 >> 2;
                    v511 = (v509 >> 2) + 1;
                    if (v511 >> 62)
                      goto LABEL_895;
                    v512 = v507 - (_QWORD)v508;
                    if (v512 >> 1 > v511)
                      v511 = v512 >> 1;
                    if ((unint64_t)v512 >= 0x7FFFFFFFFFFFFFFCLL)
                      v513 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v513 = v511;
                    if (v513)
                    {
                      if (v513 >> 62)
                        goto LABEL_896;
                      v514 = operator new(4 * v513);
                      v515 = (unsigned int *)&v514[4 * v510];
                      *v515 = v498;
                      v497 = (uint64_t)(v515 + 1);
                      v516 = v506 - v508;
                      if (v506 == v508)
                        goto LABEL_637;
                    }
                    else
                    {
                      v514 = 0;
                      v515 = (unsigned int *)(4 * v510);
                      *(_DWORD *)(4 * v510) = v498;
                      v497 = 4 * v510 + 4;
                      v516 = v506 - v508;
                      if (v506 == v508)
                      {
LABEL_637:
                        *(_QWORD *)(a1 + 2032) = v515;
                        *(_QWORD *)(a1 + 2040) = v497;
                        *(_QWORD *)(a1 + 2048) = &v514[4 * v513];
                        if (v508)
                          operator delete(v508);
                        v478 = v801;
                        goto LABEL_607;
                      }
                    }
                    v517 = v516 - 4;
                    if (v517 < 0x2C)
                      goto LABEL_916;
                    if ((unint64_t)(v506 - v514 - v509) < 0x20)
                      goto LABEL_916;
                    v518 = (v517 >> 2) + 1;
                    v519 = 4 * (v518 & 0x7FFFFFFFFFFFFFF8);
                    v520 = &v506[-v519];
                    v515 = (unsigned int *)((char *)v515 - v519);
                    v521 = &v514[4 * v510 - 16];
                    v522 = v506 - 16;
                    v523 = v518 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v524 = *(_OWORD *)v522;
                      *(v521 - 1) = *((_OWORD *)v522 - 1);
                      *v521 = v524;
                      v521 -= 2;
                      v522 -= 32;
                      v523 -= 8;
                    }
                    while (v523);
                    v506 = v520;
                    if (v518 != (v518 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_916:
                      do
                      {
                        v525 = *((_DWORD *)v506 - 1);
                        v506 -= 4;
                        *--v515 = v525;
                      }
                      while (v506 != v508);
                    }
                    goto LABEL_637;
                  }
LABEL_640:
                  if (v790 != v779)
                  {
                    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                    v526 = *(__n128 **)(a1 + 2032);
                    v527 = (char *)v526 + 4 * v768;
                    v528 = *(__n128 **)(a1 + 2040);
                    if (((char *)v528 - v527) >> 2 >= v768)
                      v529 = v768;
                    else
                      v529 = ((char *)v528 - v527) >> 2;
                    if (v529 < 1)
                    {
LABEL_648:
                      v532 = 0;
                      v529 = 0;
                    }
                    else
                    {
                      v530 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                      while (1)
                      {
                        v531 = (char *)operator new(4 * v529, v530);
                        if (v531)
                          break;
                        v189 = (unint64_t)v529 > 1;
                        v529 = (unint64_t)v529 >> 1;
                        if (!v189)
                          goto LABEL_648;
                      }
                      v532 = v531;
                    }
                    sub_20EDB30B0(v526, (__n128 *)((char *)v526 + 4 * v768), v528, (uint64_t)&v817, v768, ((char *)v528 - v527) >> 2, v532, v529);
                    if (v532)
                      operator delete(v532);
                  }
                  v533 = *(_QWORD *)(a1 + 2064);
                  v534 = *(_QWORD *)(a1 + 2056);
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v813 = (void **)(a1 + 2056);
                  v535 = *(unsigned int **)(a1 + 2592);
                  v536 = *(unsigned int **)(a1 + 2584);
                  v537 = ((v533 - v534) >> 2) + v535 - v536;
                  v538 = *(_BYTE **)(a1 + 2056);
                  v769 = (v533 - v534) >> 2;
                  v780 = v534;
                  v791 = v533;
                  if (v537 <= (uint64_t)(*(_QWORD *)(a1 + 2072) - (_QWORD)v538) >> 2)
                  {
LABEL_664:
                    if (v536 != v535)
                    {
                      v802 = v535;
                      while (1)
                      {
                        v555 = *v536;
                        v556 = *(char **)(a1 + 680);
                        v557 = *(char **)(a1 + 688);
                        if (v557 != v556)
                        {
                          v558 = (v557 - v556) >> 4;
                          do
                          {
                            v559 = v558 >> 1;
                            v560 = (unsigned int *)&v556[16 * (v558 >> 1)];
                            v562 = *v560;
                            v561 = (char *)(v560 + 4);
                            v558 += ~(v558 >> 1);
                            if (v562 < v555)
                              v556 = v561;
                            else
                              v558 = v559;
                          }
                          while (v558);
                        }
                        if (v556 == v557 || *(_DWORD *)v556 != v555)
                        {
                          v555 = *(_DWORD *)v557;
                          v556 = *(char **)(a1 + 688);
                        }
                        if ((*(_BYTE *)(*((_QWORD *)v556 + 1) + 4) & 6) != 0)
                          goto LABEL_668;
                        v563 = *(char **)(a1 + 2064);
                        v564 = *(_QWORD *)(a1 + 2072);
                        if ((unint64_t)v563 >= v564)
                          break;
                        *(_DWORD *)v563 = v555;
                        v554 = (uint64_t)(v563 + 4);
LABEL_667:
                        *(_QWORD *)(a1 + 2064) = v554;
                        *(_BYTE *)(*((_QWORD *)v556 + 1) + 4) ^= 2u;
LABEL_668:
                        if (++v536 == v535)
                          goto LABEL_700;
                      }
                      v565 = (char *)*v813;
                      v566 = v563 - (_BYTE *)*v813;
                      v567 = v566 >> 2;
                      v568 = (v566 >> 2) + 1;
                      if (v568 >> 62)
                        goto LABEL_895;
                      v569 = v564 - (_QWORD)v565;
                      if (v569 >> 1 > v568)
                        v568 = v569 >> 1;
                      if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFFCLL)
                        v570 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v570 = v568;
                      if (v570)
                      {
                        if (v570 >> 62)
                          goto LABEL_896;
                        v571 = operator new(4 * v570);
                        v572 = (unsigned int *)&v571[4 * v567];
                        *v572 = v555;
                        v554 = (uint64_t)(v572 + 1);
                        v573 = v563 - v565;
                        if (v563 == v565)
                          goto LABEL_697;
                      }
                      else
                      {
                        v571 = 0;
                        v572 = (unsigned int *)(4 * v567);
                        *(_DWORD *)(4 * v567) = v555;
                        v554 = 4 * v567 + 4;
                        v573 = v563 - v565;
                        if (v563 == v565)
                        {
LABEL_697:
                          *(_QWORD *)(a1 + 2056) = v572;
                          *(_QWORD *)(a1 + 2064) = v554;
                          *(_QWORD *)(a1 + 2072) = &v571[4 * v570];
                          if (v565)
                            operator delete(v565);
                          v535 = v802;
                          goto LABEL_667;
                        }
                      }
                      v574 = v573 - 4;
                      if (v574 < 0x2C)
                        goto LABEL_917;
                      if ((unint64_t)(v563 - v571 - v566) < 0x20)
                        goto LABEL_917;
                      v575 = (v574 >> 2) + 1;
                      v576 = 4 * (v575 & 0x7FFFFFFFFFFFFFF8);
                      v577 = &v563[-v576];
                      v572 = (unsigned int *)((char *)v572 - v576);
                      v578 = &v571[4 * v567 - 16];
                      v579 = v563 - 16;
                      v580 = v575 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v581 = *(_OWORD *)v579;
                        *(v578 - 1) = *((_OWORD *)v579 - 1);
                        *v578 = v581;
                        v578 -= 2;
                        v579 -= 32;
                        v580 -= 8;
                      }
                      while (v580);
                      v563 = v577;
                      if (v575 != (v575 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_917:
                        do
                        {
                          v582 = *((_DWORD *)v563 - 1);
                          v563 -= 4;
                          *--v572 = v582;
                        }
                        while (v563 != v565);
                      }
                      goto LABEL_697;
                    }
LABEL_700:
                    if (v791 != v780)
                    {
                      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                      v583 = *(__n128 **)(a1 + 2056);
                      v584 = (char *)v583 + 4 * v769;
                      v585 = *(__n128 **)(a1 + 2064);
                      if (((char *)v585 - v584) >> 2 >= v769)
                        v586 = v769;
                      else
                        v586 = ((char *)v585 - v584) >> 2;
                      if (v586 < 1)
                      {
LABEL_708:
                        v589 = 0;
                        v586 = 0;
                      }
                      else
                      {
                        v587 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                        while (1)
                        {
                          v588 = (char *)operator new(4 * v586, v587);
                          if (v588)
                            break;
                          v189 = (unint64_t)v586 > 1;
                          v586 = (unint64_t)v586 >> 1;
                          if (!v189)
                            goto LABEL_708;
                        }
                        v589 = v588;
                      }
                      sub_20EDB30B0(v583, (__n128 *)((char *)v583 + 4 * v769), v585, (uint64_t)&v817, v769, ((char *)v585 - v584) >> 2, v589, v586);
                      if (v589)
                        operator delete(v589);
                    }
                    v590 = *(_QWORD *)(a1 + 2088);
                    v591 = *(_QWORD *)(a1 + 2080);
                    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                    v814 = (void **)(a1 + 2080);
                    v592 = *(unsigned int **)(a1 + 2616);
                    v593 = *(unsigned int **)(a1 + 2608);
                    v594 = ((v590 - v591) >> 2) + v592 - v593;
                    v595 = *(_BYTE **)(a1 + 2080);
                    v770 = (v590 - v591) >> 2;
                    v781 = v591;
                    v792 = v590;
                    if (v594 <= (uint64_t)(*(_QWORD *)(a1 + 2096) - (_QWORD)v595) >> 2)
                    {
LABEL_724:
                      if (v593 != v592)
                      {
                        v803 = v592;
                        while (1)
                        {
                          v612 = *v593;
                          v613 = *(char **)(a1 + 776);
                          v614 = *(char **)(a1 + 784);
                          if (v614 != v613)
                          {
                            v615 = (v614 - v613) >> 4;
                            do
                            {
                              v616 = v615 >> 1;
                              v617 = (unsigned int *)&v613[16 * (v615 >> 1)];
                              v619 = *v617;
                              v618 = (char *)(v617 + 4);
                              v615 += ~(v615 >> 1);
                              if (v619 < v612)
                                v613 = v618;
                              else
                                v615 = v616;
                            }
                            while (v615);
                          }
                          if (v613 == v614 || *(_DWORD *)v613 != v612)
                          {
                            v612 = *(_DWORD *)v614;
                            v613 = *(char **)(a1 + 784);
                          }
                          if ((*(_BYTE *)(*((_QWORD *)v613 + 1) + 4) & 6) != 0)
                            goto LABEL_728;
                          v620 = *(char **)(a1 + 2088);
                          v621 = *(_QWORD *)(a1 + 2096);
                          if ((unint64_t)v620 >= v621)
                            break;
                          *(_DWORD *)v620 = v612;
                          v611 = (uint64_t)(v620 + 4);
LABEL_727:
                          *(_QWORD *)(a1 + 2088) = v611;
                          *(_BYTE *)(*((_QWORD *)v613 + 1) + 4) ^= 2u;
LABEL_728:
                          if (++v593 == v592)
                            goto LABEL_760;
                        }
                        v622 = (char *)*v814;
                        v623 = v620 - (_BYTE *)*v814;
                        v624 = v623 >> 2;
                        v625 = (v623 >> 2) + 1;
                        if (v625 >> 62)
                          goto LABEL_895;
                        v626 = v621 - (_QWORD)v622;
                        if (v626 >> 1 > v625)
                          v625 = v626 >> 1;
                        if ((unint64_t)v626 >= 0x7FFFFFFFFFFFFFFCLL)
                          v627 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v627 = v625;
                        if (v627)
                        {
                          if (v627 >> 62)
                            goto LABEL_896;
                          v628 = operator new(4 * v627);
                          v629 = (unsigned int *)&v628[4 * v624];
                          *v629 = v612;
                          v611 = (uint64_t)(v629 + 1);
                          v630 = v620 - v622;
                          if (v620 == v622)
                            goto LABEL_757;
                        }
                        else
                        {
                          v628 = 0;
                          v629 = (unsigned int *)(4 * v624);
                          *(_DWORD *)(4 * v624) = v612;
                          v611 = 4 * v624 + 4;
                          v630 = v620 - v622;
                          if (v620 == v622)
                          {
LABEL_757:
                            *(_QWORD *)(a1 + 2080) = v629;
                            *(_QWORD *)(a1 + 2088) = v611;
                            *(_QWORD *)(a1 + 2096) = &v628[4 * v627];
                            if (v622)
                              operator delete(v622);
                            v592 = v803;
                            goto LABEL_727;
                          }
                        }
                        v631 = v630 - 4;
                        if (v631 < 0x2C)
                          goto LABEL_918;
                        if ((unint64_t)(v620 - v628 - v623) < 0x20)
                          goto LABEL_918;
                        v632 = (v631 >> 2) + 1;
                        v633 = 4 * (v632 & 0x7FFFFFFFFFFFFFF8);
                        v634 = &v620[-v633];
                        v629 = (unsigned int *)((char *)v629 - v633);
                        v635 = &v628[4 * v624 - 16];
                        v636 = v620 - 16;
                        v637 = v632 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v638 = *(_OWORD *)v636;
                          *(v635 - 1) = *((_OWORD *)v636 - 1);
                          *v635 = v638;
                          v635 -= 2;
                          v636 -= 32;
                          v637 -= 8;
                        }
                        while (v637);
                        v620 = v634;
                        if (v632 != (v632 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_918:
                          do
                          {
                            v639 = *((_DWORD *)v620 - 1);
                            v620 -= 4;
                            *--v629 = v639;
                          }
                          while (v620 != v622);
                        }
                        goto LABEL_757;
                      }
LABEL_760:
                      if (v792 != v781)
                      {
                        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                        v640 = *(__n128 **)(a1 + 2080);
                        v641 = (char *)v640 + 4 * v770;
                        v642 = *(__n128 **)(a1 + 2088);
                        if (((char *)v642 - v641) >> 2 >= v770)
                          v643 = v770;
                        else
                          v643 = ((char *)v642 - v641) >> 2;
                        if (v643 < 1)
                        {
LABEL_768:
                          v646 = 0;
                          v643 = 0;
                        }
                        else
                        {
                          v644 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                          while (1)
                          {
                            v645 = (char *)operator new(4 * v643, v644);
                            if (v645)
                              break;
                            v189 = (unint64_t)v643 > 1;
                            v643 = (unint64_t)v643 >> 1;
                            if (!v189)
                              goto LABEL_768;
                          }
                          v646 = v645;
                        }
                        sub_20EDB30B0(v640, (__n128 *)((char *)v640 + 4 * v770), v642, (uint64_t)&v817, v770, ((char *)v642 - v641) >> 2, v646, v643);
                        if (v646)
                          operator delete(v646);
                      }
                      v647 = *(_QWORD *)(a1 + 2112);
                      v648 = *(_QWORD *)(a1 + 2104);
                      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                      v815 = (void **)(a1 + 2104);
                      v649 = *(unsigned int **)(a1 + 2640);
                      v650 = *(unsigned int **)(a1 + 2632);
                      v651 = ((v647 - v648) >> 2) + v649 - v650;
                      v652 = *(_BYTE **)(a1 + 2104);
                      v771 = (v647 - v648) >> 2;
                      v782 = v648;
                      v793 = v647;
                      if (v651 <= (uint64_t)(*(_QWORD *)(a1 + 2120) - (_QWORD)v652) >> 2)
                      {
LABEL_784:
                        if (v650 != v649)
                        {
                          v804 = v649;
                          while (1)
                          {
                            v669 = *v650;
                            v670 = *(char **)(a1 + 872);
                            v671 = *(char **)(a1 + 880);
                            if (v671 != v670)
                            {
                              v672 = (v671 - v670) >> 4;
                              do
                              {
                                v673 = v672 >> 1;
                                v674 = (unsigned int *)&v670[16 * (v672 >> 1)];
                                v676 = *v674;
                                v675 = (char *)(v674 + 4);
                                v672 += ~(v672 >> 1);
                                if (v676 < v669)
                                  v670 = v675;
                                else
                                  v672 = v673;
                              }
                              while (v672);
                            }
                            if (v670 == v671 || *(_DWORD *)v670 != v669)
                            {
                              v669 = *(_DWORD *)v671;
                              v670 = *(char **)(a1 + 880);
                            }
                            if ((*(_BYTE *)(*((_QWORD *)v670 + 1) + 4) & 6) != 0)
                              goto LABEL_788;
                            v677 = *(char **)(a1 + 2112);
                            v678 = *(_QWORD *)(a1 + 2120);
                            if ((unint64_t)v677 >= v678)
                              break;
                            *(_DWORD *)v677 = v669;
                            v668 = (uint64_t)(v677 + 4);
LABEL_787:
                            *(_QWORD *)(a1 + 2112) = v668;
                            *(_BYTE *)(*((_QWORD *)v670 + 1) + 4) ^= 2u;
LABEL_788:
                            if (++v650 == v649)
                              goto LABEL_820;
                          }
                          v679 = (char *)*v815;
                          v680 = v677 - (_BYTE *)*v815;
                          v681 = v680 >> 2;
                          v682 = (v680 >> 2) + 1;
                          if (v682 >> 62)
                            goto LABEL_895;
                          v683 = v678 - (_QWORD)v679;
                          if (v683 >> 1 > v682)
                            v682 = v683 >> 1;
                          if ((unint64_t)v683 >= 0x7FFFFFFFFFFFFFFCLL)
                            v684 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v684 = v682;
                          if (v684)
                          {
                            if (v684 >> 62)
                              goto LABEL_896;
                            v685 = operator new(4 * v684);
                            v686 = (unsigned int *)&v685[4 * v681];
                            *v686 = v669;
                            v668 = (uint64_t)(v686 + 1);
                            v687 = v677 - v679;
                            if (v677 == v679)
                              goto LABEL_817;
                          }
                          else
                          {
                            v685 = 0;
                            v686 = (unsigned int *)(4 * v681);
                            *(_DWORD *)(4 * v681) = v669;
                            v668 = 4 * v681 + 4;
                            v687 = v677 - v679;
                            if (v677 == v679)
                            {
LABEL_817:
                              *(_QWORD *)(a1 + 2104) = v686;
                              *(_QWORD *)(a1 + 2112) = v668;
                              *(_QWORD *)(a1 + 2120) = &v685[4 * v684];
                              if (v679)
                                operator delete(v679);
                              v649 = v804;
                              goto LABEL_787;
                            }
                          }
                          v688 = v687 - 4;
                          if (v688 < 0x2C)
                            goto LABEL_919;
                          if ((unint64_t)(v677 - v685 - v680) < 0x20)
                            goto LABEL_919;
                          v689 = (v688 >> 2) + 1;
                          v690 = 4 * (v689 & 0x7FFFFFFFFFFFFFF8);
                          v691 = &v677[-v690];
                          v686 = (unsigned int *)((char *)v686 - v690);
                          v692 = &v685[4 * v681 - 16];
                          v693 = v677 - 16;
                          v694 = v689 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            v695 = *(_OWORD *)v693;
                            *(v692 - 1) = *((_OWORD *)v693 - 1);
                            *v692 = v695;
                            v692 -= 2;
                            v693 -= 32;
                            v694 -= 8;
                          }
                          while (v694);
                          v677 = v691;
                          if (v689 != (v689 & 0x7FFFFFFFFFFFFFF8))
                          {
LABEL_919:
                            do
                            {
                              v696 = *((_DWORD *)v677 - 1);
                              v677 -= 4;
                              *--v686 = v696;
                            }
                            while (v677 != v679);
                          }
                          goto LABEL_817;
                        }
LABEL_820:
                        if (v793 != v782)
                        {
                          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                          v697 = *(__n128 **)(a1 + 2104);
                          v698 = (char *)v697 + 4 * v771;
                          v699 = *(__n128 **)(a1 + 2112);
                          if (((char *)v699 - v698) >> 2 >= v771)
                            v700 = v771;
                          else
                            v700 = ((char *)v699 - v698) >> 2;
                          if (v700 < 1)
                          {
LABEL_828:
                            v703 = 0;
                            v700 = 0;
                          }
                          else
                          {
                            v701 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                            while (1)
                            {
                              v702 = (char *)operator new(4 * v700, v701);
                              if (v702)
                                break;
                              v189 = (unint64_t)v700 > 1;
                              v700 = (unint64_t)v700 >> 1;
                              if (!v189)
                                goto LABEL_828;
                            }
                            v703 = v702;
                          }
                          sub_20EDB30B0(v697, (__n128 *)((char *)v697 + 4 * v771), v699, (uint64_t)&v817, v771, ((char *)v699 - v698) >> 2, v703, v700);
                          if (v703)
                            operator delete(v703);
                        }
                        v704 = *(_QWORD *)(a1 + 2136);
                        v705 = *(_QWORD *)(a1 + 2128);
                        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                        v816 = (void **)(a1 + 2128);
                        v706 = *(unsigned int **)(a1 + 2664);
                        v707 = *(unsigned int **)(a1 + 2656);
                        v708 = ((v704 - v705) >> 2) + v706 - v707;
                        v709 = *(_BYTE **)(a1 + 2128);
                        v772 = (v704 - v705) >> 2;
                        v783 = v705;
                        v794 = v704;
                        if (v708 <= (uint64_t)(*(_QWORD *)(a1 + 2144) - (_QWORD)v709) >> 2)
                          goto LABEL_844;
                        if (!(v708 >> 62))
                        {
                          v710 = *(unsigned int **)(a1 + 2664);
                          v711 = *(_BYTE **)(a1 + 2136);
                          v712 = (char *)operator new(4 * v708);
                          v713 = v711 - v709;
                          v714 = &v712[(v711 - v709) & 0xFFFFFFFFFFFFFFFCLL];
                          v715 = v714;
                          if (v711 == v709)
                            goto LABEL_842;
                          if ((unint64_t)(v713 - 4) >= 0x2C)
                          {
                            v715 = &v712[(v711 - v709) & 0xFFFFFFFFFFFFFFFCLL];
                            if ((unint64_t)(&v711[-(v713 & 0xFFFFFFFFFFFFFFFCLL)] - v712) >= 0x20)
                            {
                              v716 = v713 >> 2;
                              v717 = ((unint64_t)(v713 - 4) >> 2) + 1;
                              v718 = 4 * (v717 & 0x7FFFFFFFFFFFFFF8);
                              v719 = &v711[-v718];
                              v715 = &v714[-v718];
                              v720 = &v712[4 * v716 - 16];
                              v721 = (__int128 *)(v711 - 16);
                              v722 = v717 & 0x7FFFFFFFFFFFFFF8;
                              do
                              {
                                v723 = *v721;
                                *((_OWORD *)v720 - 1) = *(v721 - 1);
                                *(_OWORD *)v720 = v723;
                                v720 -= 32;
                                v721 -= 2;
                                v722 -= 8;
                              }
                              while (v722);
                              v711 = v719;
                              if (v717 == (v717 & 0x7FFFFFFFFFFFFFF8))
                              {
LABEL_842:
                                *(_QWORD *)(a1 + 2128) = v715;
                                *(_QWORD *)(a1 + 2136) = v714;
                                *(_QWORD *)(a1 + 2144) = &v712[4 * v708];
                                v706 = v710;
                                if (v709)
                                {
                                  operator delete(v709);
                                  v707 = *(unsigned int **)(a1 + 2656);
                                  v706 = *(unsigned int **)(a1 + 2664);
                                }
LABEL_844:
                                if (v707 != v706)
                                {
                                  v805 = v706;
                                  while (1)
                                  {
                                    v726 = *v707;
                                    v727 = *(char **)(a1 + 968);
                                    v728 = *(char **)(a1 + 976);
                                    if (v728 != v727)
                                    {
                                      v729 = (v728 - v727) >> 4;
                                      do
                                      {
                                        v730 = v729 >> 1;
                                        v731 = (unsigned int *)&v727[16 * (v729 >> 1)];
                                        v733 = *v731;
                                        v732 = (char *)(v731 + 4);
                                        v729 += ~(v729 >> 1);
                                        if (v733 < v726)
                                          v727 = v732;
                                        else
                                          v729 = v730;
                                      }
                                      while (v729);
                                    }
                                    if (v727 == v728 || *(_DWORD *)v727 != v726)
                                    {
                                      v726 = *(_DWORD *)v728;
                                      v727 = *(char **)(a1 + 976);
                                    }
                                    if ((*(_BYTE *)(*((_QWORD *)v727 + 1) + 4) & 6) != 0)
                                      goto LABEL_848;
                                    v734 = *(char **)(a1 + 2136);
                                    v735 = *(_QWORD *)(a1 + 2144);
                                    if ((unint64_t)v734 >= v735)
                                      break;
                                    *(_DWORD *)v734 = v726;
                                    v725 = (uint64_t)(v734 + 4);
LABEL_847:
                                    *(_QWORD *)(a1 + 2136) = v725;
                                    *(_BYTE *)(*((_QWORD *)v727 + 1) + 4) ^= 2u;
LABEL_848:
                                    if (++v707 == v706)
                                      goto LABEL_880;
                                  }
                                  v736 = (char *)*v816;
                                  v737 = v734 - (_BYTE *)*v816;
                                  v738 = v737 >> 2;
                                  v739 = (v737 >> 2) + 1;
                                  if (v739 >> 62)
                                    goto LABEL_895;
                                  v740 = v735 - (_QWORD)v736;
                                  if (v740 >> 1 > v739)
                                    v739 = v740 >> 1;
                                  if ((unint64_t)v740 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v741 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v741 = v739;
                                  if (v741)
                                  {
                                    if (v741 >> 62)
                                      goto LABEL_896;
                                    v742 = operator new(4 * v741);
                                    v743 = (unsigned int *)&v742[4 * v738];
                                    *v743 = v726;
                                    v725 = (uint64_t)(v743 + 1);
                                    v744 = v734 - v736;
                                    if (v734 == v736)
                                      goto LABEL_877;
                                  }
                                  else
                                  {
                                    v742 = 0;
                                    v743 = (unsigned int *)(4 * v738);
                                    *(_DWORD *)(4 * v738) = v726;
                                    v725 = 4 * v738 + 4;
                                    v744 = v734 - v736;
                                    if (v734 == v736)
                                    {
LABEL_877:
                                      *(_QWORD *)(a1 + 2128) = v743;
                                      *(_QWORD *)(a1 + 2136) = v725;
                                      *(_QWORD *)(a1 + 2144) = &v742[4 * v741];
                                      if (v736)
                                        operator delete(v736);
                                      v706 = v805;
                                      goto LABEL_847;
                                    }
                                  }
                                  v745 = v744 - 4;
                                  if (v745 < 0x2C)
                                    goto LABEL_920;
                                  if ((unint64_t)(v734 - v742 - v737) < 0x20)
                                    goto LABEL_920;
                                  v746 = (v745 >> 2) + 1;
                                  v747 = 4 * (v746 & 0x7FFFFFFFFFFFFFF8);
                                  v748 = &v734[-v747];
                                  v743 = (unsigned int *)((char *)v743 - v747);
                                  v749 = &v742[4 * v738 - 16];
                                  v750 = v734 - 16;
                                  v751 = v746 & 0x7FFFFFFFFFFFFFF8;
                                  do
                                  {
                                    v752 = *(_OWORD *)v750;
                                    *(v749 - 1) = *((_OWORD *)v750 - 1);
                                    *v749 = v752;
                                    v749 -= 2;
                                    v750 -= 32;
                                    v751 -= 8;
                                  }
                                  while (v751);
                                  v734 = v748;
                                  if (v746 != (v746 & 0x7FFFFFFFFFFFFFF8))
                                  {
LABEL_920:
                                    do
                                    {
                                      v753 = *((_DWORD *)v734 - 1);
                                      v734 -= 4;
                                      *--v743 = v753;
                                    }
                                    while (v734 != v736);
                                  }
                                  goto LABEL_877;
                                }
LABEL_880:
                                if (v794 != v783)
                                {
                                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                                  v754 = *(__n128 **)(a1 + 2128);
                                  v755 = (char *)v754 + 4 * v772;
                                  v756 = *(__n128 **)(a1 + 2136);
                                  if (((char *)v756 - v755) >> 2 >= v772)
                                    v757 = v772;
                                  else
                                    v757 = ((char *)v756 - v755) >> 2;
                                  if (v757 < 1)
                                  {
LABEL_888:
                                    v760 = 0;
                                    v757 = 0;
                                  }
                                  else
                                  {
                                    v758 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                                    while (1)
                                    {
                                      v759 = (char *)operator new(4 * v757, v758);
                                      if (v759)
                                        break;
                                      v189 = (unint64_t)v757 > 1;
                                      v757 = (unint64_t)v757 >> 1;
                                      if (!v189)
                                        goto LABEL_888;
                                    }
                                    v760 = v759;
                                  }
                                  sub_20EDB30B0(v754, (__n128 *)((char *)v754 + 4 * v772), v756, (uint64_t)&v817, v772, ((char *)v756 - v755) >> 2, v760, v757);
                                  if (v760)
                                    operator delete(v760);
                                }
                                sub_20FA485B8((_QWORD *)a1);
                                goto LABEL_893;
                              }
                            }
                          }
                          else
                          {
                            v715 = &v712[(v711 - v709) & 0xFFFFFFFFFFFFFFFCLL];
                          }
                          do
                          {
                            v724 = *((_DWORD *)v711 - 1);
                            v711 -= 4;
                            *((_DWORD *)v715 - 1) = v724;
                            v715 -= 4;
                          }
                          while (v711 != v709);
                          goto LABEL_842;
                        }
LABEL_895:
                        sub_20E867F44();
                      }
                      if (v651 >> 62)
                        goto LABEL_895;
                      v653 = *(unsigned int **)(a1 + 2640);
                      v654 = *(_BYTE **)(a1 + 2112);
                      v655 = (char *)operator new(4 * v651);
                      v656 = v654 - v652;
                      v657 = &v655[(v654 - v652) & 0xFFFFFFFFFFFFFFFCLL];
                      v658 = v657;
                      if (v654 != v652)
                      {
                        if ((unint64_t)(v656 - 4) < 0x2C)
                        {
                          v658 = &v655[(v654 - v652) & 0xFFFFFFFFFFFFFFFCLL];
                          do
                          {
LABEL_781:
                            v667 = *((_DWORD *)v654 - 1);
                            v654 -= 4;
                            *((_DWORD *)v658 - 1) = v667;
                            v658 -= 4;
                          }
                          while (v654 != v652);
                          goto LABEL_782;
                        }
                        v658 = &v655[(v654 - v652) & 0xFFFFFFFFFFFFFFFCLL];
                        if ((unint64_t)(&v654[-(v656 & 0xFFFFFFFFFFFFFFFCLL)] - v655) < 0x20)
                          goto LABEL_781;
                        v659 = v656 >> 2;
                        v660 = ((unint64_t)(v656 - 4) >> 2) + 1;
                        v661 = 4 * (v660 & 0x7FFFFFFFFFFFFFF8);
                        v662 = &v654[-v661];
                        v658 = &v657[-v661];
                        v663 = &v655[4 * v659 - 16];
                        v664 = (__int128 *)(v654 - 16);
                        v665 = v660 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v666 = *v664;
                          *((_OWORD *)v663 - 1) = *(v664 - 1);
                          *(_OWORD *)v663 = v666;
                          v663 -= 32;
                          v664 -= 2;
                          v665 -= 8;
                        }
                        while (v665);
                        v654 = v662;
                        if (v660 != (v660 & 0x7FFFFFFFFFFFFFF8))
                          goto LABEL_781;
                      }
LABEL_782:
                      *(_QWORD *)(a1 + 2104) = v658;
                      *(_QWORD *)(a1 + 2112) = v657;
                      *(_QWORD *)(a1 + 2120) = &v655[4 * v651];
                      v649 = v653;
                      if (v652)
                      {
                        operator delete(v652);
                        v650 = *(unsigned int **)(a1 + 2632);
                        v649 = *(unsigned int **)(a1 + 2640);
                      }
                      goto LABEL_784;
                    }
                    if (v594 >> 62)
                      goto LABEL_895;
                    v596 = *(unsigned int **)(a1 + 2616);
                    v597 = *(_BYTE **)(a1 + 2088);
                    v598 = (char *)operator new(4 * v594);
                    v599 = v597 - v595;
                    v600 = &v598[(v597 - v595) & 0xFFFFFFFFFFFFFFFCLL];
                    v601 = v600;
                    if (v597 != v595)
                    {
                      if ((unint64_t)(v599 - 4) < 0x2C)
                      {
                        v601 = &v598[(v597 - v595) & 0xFFFFFFFFFFFFFFFCLL];
                        do
                        {
LABEL_721:
                          v610 = *((_DWORD *)v597 - 1);
                          v597 -= 4;
                          *((_DWORD *)v601 - 1) = v610;
                          v601 -= 4;
                        }
                        while (v597 != v595);
                        goto LABEL_722;
                      }
                      v601 = &v598[(v597 - v595) & 0xFFFFFFFFFFFFFFFCLL];
                      if ((unint64_t)(&v597[-(v599 & 0xFFFFFFFFFFFFFFFCLL)] - v598) < 0x20)
                        goto LABEL_721;
                      v602 = v599 >> 2;
                      v603 = ((unint64_t)(v599 - 4) >> 2) + 1;
                      v604 = 4 * (v603 & 0x7FFFFFFFFFFFFFF8);
                      v605 = &v597[-v604];
                      v601 = &v600[-v604];
                      v606 = &v598[4 * v602 - 16];
                      v607 = (__int128 *)(v597 - 16);
                      v608 = v603 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v609 = *v607;
                        *((_OWORD *)v606 - 1) = *(v607 - 1);
                        *(_OWORD *)v606 = v609;
                        v606 -= 32;
                        v607 -= 2;
                        v608 -= 8;
                      }
                      while (v608);
                      v597 = v605;
                      if (v603 != (v603 & 0x7FFFFFFFFFFFFFF8))
                        goto LABEL_721;
                    }
LABEL_722:
                    *(_QWORD *)(a1 + 2080) = v601;
                    *(_QWORD *)(a1 + 2088) = v600;
                    *(_QWORD *)(a1 + 2096) = &v598[4 * v594];
                    v592 = v596;
                    if (v595)
                    {
                      operator delete(v595);
                      v593 = *(unsigned int **)(a1 + 2608);
                      v592 = *(unsigned int **)(a1 + 2616);
                    }
                    goto LABEL_724;
                  }
                  if (v537 >> 62)
                    goto LABEL_895;
                  v539 = *(unsigned int **)(a1 + 2592);
                  v540 = *(_BYTE **)(a1 + 2064);
                  v541 = (char *)operator new(4 * v537);
                  v542 = v540 - v538;
                  v543 = &v541[(v540 - v538) & 0xFFFFFFFFFFFFFFFCLL];
                  v544 = v543;
                  if (v540 != v538)
                  {
                    if ((unint64_t)(v542 - 4) < 0x2C)
                    {
                      v544 = &v541[(v540 - v538) & 0xFFFFFFFFFFFFFFFCLL];
                      do
                      {
LABEL_661:
                        v553 = *((_DWORD *)v540 - 1);
                        v540 -= 4;
                        *((_DWORD *)v544 - 1) = v553;
                        v544 -= 4;
                      }
                      while (v540 != v538);
                      goto LABEL_662;
                    }
                    v544 = &v541[(v540 - v538) & 0xFFFFFFFFFFFFFFFCLL];
                    if ((unint64_t)(&v540[-(v542 & 0xFFFFFFFFFFFFFFFCLL)] - v541) < 0x20)
                      goto LABEL_661;
                    v545 = v542 >> 2;
                    v546 = ((unint64_t)(v542 - 4) >> 2) + 1;
                    v547 = 4 * (v546 & 0x7FFFFFFFFFFFFFF8);
                    v548 = &v540[-v547];
                    v544 = &v543[-v547];
                    v549 = &v541[4 * v545 - 16];
                    v550 = (__int128 *)(v540 - 16);
                    v551 = v546 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v552 = *v550;
                      *((_OWORD *)v549 - 1) = *(v550 - 1);
                      *(_OWORD *)v549 = v552;
                      v549 -= 32;
                      v550 -= 2;
                      v551 -= 8;
                    }
                    while (v551);
                    v540 = v548;
                    if (v546 != (v546 & 0x7FFFFFFFFFFFFFF8))
                      goto LABEL_661;
                  }
LABEL_662:
                  *(_QWORD *)(a1 + 2056) = v544;
                  *(_QWORD *)(a1 + 2064) = v543;
                  *(_QWORD *)(a1 + 2072) = &v541[4 * v537];
                  v535 = v539;
                  if (v538)
                  {
                    operator delete(v538);
                    v536 = *(unsigned int **)(a1 + 2584);
                    v535 = *(unsigned int **)(a1 + 2592);
                  }
                  goto LABEL_664;
                }
                if (v480 >> 62)
                  goto LABEL_895;
                v482 = *(unsigned int **)(a1 + 2568);
                v483 = *(_BYTE **)(a1 + 2040);
                v484 = (char *)operator new(4 * v480);
                v485 = v483 - v481;
                v486 = &v484[(v483 - v481) & 0xFFFFFFFFFFFFFFFCLL];
                v487 = v486;
                if (v483 != v481)
                {
                  if ((unint64_t)(v485 - 4) < 0x2C)
                  {
                    v487 = &v484[(v483 - v481) & 0xFFFFFFFFFFFFFFFCLL];
                    do
                    {
LABEL_601:
                      v496 = *((_DWORD *)v483 - 1);
                      v483 -= 4;
                      *((_DWORD *)v487 - 1) = v496;
                      v487 -= 4;
                    }
                    while (v483 != v481);
                    goto LABEL_602;
                  }
                  v487 = &v484[(v483 - v481) & 0xFFFFFFFFFFFFFFFCLL];
                  if ((unint64_t)(&v483[-(v485 & 0xFFFFFFFFFFFFFFFCLL)] - v484) < 0x20)
                    goto LABEL_601;
                  v488 = v485 >> 2;
                  v489 = ((unint64_t)(v485 - 4) >> 2) + 1;
                  v490 = 4 * (v489 & 0x7FFFFFFFFFFFFFF8);
                  v491 = &v483[-v490];
                  v487 = &v486[-v490];
                  v492 = &v484[4 * v488 - 16];
                  v493 = (__int128 *)(v483 - 16);
                  v494 = v489 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v495 = *v493;
                    *((_OWORD *)v492 - 1) = *(v493 - 1);
                    *(_OWORD *)v492 = v495;
                    v492 -= 32;
                    v493 -= 2;
                    v494 -= 8;
                  }
                  while (v494);
                  v483 = v491;
                  if (v489 != (v489 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_601;
                }
LABEL_602:
                *(_QWORD *)(a1 + 2032) = v487;
                *(_QWORD *)(a1 + 2040) = v486;
                *(_QWORD *)(a1 + 2048) = &v484[4 * v480];
                v478 = v482;
                if (v481)
                {
                  operator delete(v481);
                  v479 = *(unsigned int **)(a1 + 2560);
                  v478 = *(unsigned int **)(a1 + 2568);
                }
                goto LABEL_604;
              }
              if (v423 >> 62)
                goto LABEL_895;
              v425 = *(unsigned int **)(a1 + 2544);
              v426 = *(_BYTE **)(a1 + 2016);
              v427 = (char *)operator new(4 * v423);
              v428 = v426 - v424;
              v429 = &v427[(v426 - v424) & 0xFFFFFFFFFFFFFFFCLL];
              v430 = v429;
              if (v426 != v424)
              {
                if ((unint64_t)(v428 - 4) < 0x2C)
                {
                  v430 = &v427[(v426 - v424) & 0xFFFFFFFFFFFFFFFCLL];
                  do
                  {
LABEL_541:
                    v439 = *((_DWORD *)v426 - 1);
                    v426 -= 4;
                    *((_DWORD *)v430 - 1) = v439;
                    v430 -= 4;
                  }
                  while (v426 != v424);
                  goto LABEL_542;
                }
                v430 = &v427[(v426 - v424) & 0xFFFFFFFFFFFFFFFCLL];
                if ((unint64_t)(&v426[-(v428 & 0xFFFFFFFFFFFFFFFCLL)] - v427) < 0x20)
                  goto LABEL_541;
                v431 = v428 >> 2;
                v432 = ((unint64_t)(v428 - 4) >> 2) + 1;
                v433 = 4 * (v432 & 0x7FFFFFFFFFFFFFF8);
                v434 = &v426[-v433];
                v430 = &v429[-v433];
                v435 = &v427[4 * v431 - 16];
                v436 = (__int128 *)(v426 - 16);
                v437 = v432 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v438 = *v436;
                  *((_OWORD *)v435 - 1) = *(v436 - 1);
                  *(_OWORD *)v435 = v438;
                  v435 -= 32;
                  v436 -= 2;
                  v437 -= 8;
                }
                while (v437);
                v426 = v434;
                if (v432 != (v432 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_541;
              }
LABEL_542:
              *(_QWORD *)(a1 + 2008) = v430;
              *(_QWORD *)(a1 + 2016) = v429;
              *(_QWORD *)(a1 + 2024) = &v427[4 * v423];
              v421 = v425;
              if (v424)
              {
                operator delete(v424);
                v422 = *(unsigned int **)(a1 + 2536);
                v421 = *(unsigned int **)(a1 + 2544);
              }
              goto LABEL_544;
            }
            if (v366 >> 62)
              goto LABEL_895;
            v368 = *(unsigned int **)(a1 + 2520);
            v369 = *(_BYTE **)(a1 + 1992);
            v370 = (char *)operator new(4 * v366);
            v371 = v369 - v367;
            v372 = &v370[(v369 - v367) & 0xFFFFFFFFFFFFFFFCLL];
            v373 = v372;
            if (v369 != v367)
            {
              if ((unint64_t)(v371 - 4) < 0x2C)
              {
                v373 = &v370[(v369 - v367) & 0xFFFFFFFFFFFFFFFCLL];
                do
                {
LABEL_481:
                  v382 = *((_DWORD *)v369 - 1);
                  v369 -= 4;
                  *((_DWORD *)v373 - 1) = v382;
                  v373 -= 4;
                }
                while (v369 != v367);
                goto LABEL_482;
              }
              v373 = &v370[(v369 - v367) & 0xFFFFFFFFFFFFFFFCLL];
              if ((unint64_t)(&v369[-(v371 & 0xFFFFFFFFFFFFFFFCLL)] - v370) < 0x20)
                goto LABEL_481;
              v374 = v371 >> 2;
              v375 = ((unint64_t)(v371 - 4) >> 2) + 1;
              v376 = 4 * (v375 & 0x7FFFFFFFFFFFFFF8);
              v377 = &v369[-v376];
              v373 = &v372[-v376];
              v378 = &v370[4 * v374 - 16];
              v379 = (__int128 *)(v369 - 16);
              v380 = v375 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v381 = *v379;
                *((_OWORD *)v378 - 1) = *(v379 - 1);
                *(_OWORD *)v378 = v381;
                v378 -= 32;
                v379 -= 2;
                v380 -= 8;
              }
              while (v380);
              v369 = v377;
              if (v375 != (v375 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_481;
            }
LABEL_482:
            *(_QWORD *)(a1 + 1984) = v373;
            *(_QWORD *)(a1 + 1992) = v372;
            *(_QWORD *)(a1 + 2000) = &v370[4 * v366];
            v364 = v368;
            if (v367)
            {
              operator delete(v367);
              v365 = *(unsigned int **)(a1 + 2512);
              v364 = *(unsigned int **)(a1 + 2520);
            }
            goto LABEL_484;
          }
          if (v309 >> 62)
            goto LABEL_895;
          v311 = *(unsigned int **)(a1 + 2496);
          v312 = *(_BYTE **)(a1 + 1968);
          v313 = (char *)operator new(4 * v309);
          v314 = v312 - v310;
          v315 = &v313[(v312 - v310) & 0xFFFFFFFFFFFFFFFCLL];
          v316 = v315;
          if (v312 != v310)
          {
            if ((unint64_t)(v314 - 4) < 0x2C)
            {
              v316 = &v313[(v312 - v310) & 0xFFFFFFFFFFFFFFFCLL];
              do
              {
LABEL_421:
                v325 = *((_DWORD *)v312 - 1);
                v312 -= 4;
                *((_DWORD *)v316 - 1) = v325;
                v316 -= 4;
              }
              while (v312 != v310);
              goto LABEL_422;
            }
            v316 = &v313[(v312 - v310) & 0xFFFFFFFFFFFFFFFCLL];
            if ((unint64_t)(&v312[-(v314 & 0xFFFFFFFFFFFFFFFCLL)] - v313) < 0x20)
              goto LABEL_421;
            v317 = v314 >> 2;
            v318 = ((unint64_t)(v314 - 4) >> 2) + 1;
            v319 = 4 * (v318 & 0x7FFFFFFFFFFFFFF8);
            v320 = &v312[-v319];
            v316 = &v315[-v319];
            v321 = &v313[4 * v317 - 16];
            v322 = (__int128 *)(v312 - 16);
            v323 = v318 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v324 = *v322;
              *((_OWORD *)v321 - 1) = *(v322 - 1);
              *(_OWORD *)v321 = v324;
              v321 -= 32;
              v322 -= 2;
              v323 -= 8;
            }
            while (v323);
            v312 = v320;
            if (v318 != (v318 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_421;
          }
LABEL_422:
          *(_QWORD *)(a1 + 1960) = v316;
          *(_QWORD *)(a1 + 1968) = v315;
          *(_QWORD *)(a1 + 1976) = &v313[4 * v309];
          v307 = v311;
          if (v310)
          {
            operator delete(v310);
            v308 = *(unsigned int **)(a1 + 2488);
            v307 = *(unsigned int **)(a1 + 2496);
          }
          goto LABEL_424;
        }
        if (v252 >> 62)
          goto LABEL_895;
        v254 = *(unsigned int **)(a1 + 2472);
        v255 = *(_BYTE **)(a1 + 1944);
        v256 = (char *)operator new(4 * v252);
        v257 = v255 - v253;
        v258 = &v256[(v255 - v253) & 0xFFFFFFFFFFFFFFFCLL];
        v259 = v258;
        if (v255 != v253)
        {
          if ((unint64_t)(v257 - 4) < 0x2C)
          {
            v259 = &v256[(v255 - v253) & 0xFFFFFFFFFFFFFFFCLL];
            do
            {
LABEL_361:
              v268 = *((_DWORD *)v255 - 1);
              v255 -= 4;
              *((_DWORD *)v259 - 1) = v268;
              v259 -= 4;
            }
            while (v255 != v253);
            goto LABEL_362;
          }
          v259 = &v256[(v255 - v253) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v255[-(v257 & 0xFFFFFFFFFFFFFFFCLL)] - v256) < 0x20)
            goto LABEL_361;
          v260 = v257 >> 2;
          v261 = ((unint64_t)(v257 - 4) >> 2) + 1;
          v262 = 4 * (v261 & 0x7FFFFFFFFFFFFFF8);
          v263 = &v255[-v262];
          v259 = &v258[-v262];
          v264 = &v256[4 * v260 - 16];
          v265 = (__int128 *)(v255 - 16);
          v266 = v261 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v267 = *v265;
            *((_OWORD *)v264 - 1) = *(v265 - 1);
            *(_OWORD *)v264 = v267;
            v264 -= 32;
            v265 -= 2;
            v266 -= 8;
          }
          while (v266);
          v255 = v263;
          if (v261 != (v261 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_361;
        }
LABEL_362:
        *(_QWORD *)(a1 + 1936) = v259;
        *(_QWORD *)(a1 + 1944) = v258;
        *(_QWORD *)(a1 + 1952) = &v256[4 * v252];
        v250 = v254;
        if (v253)
        {
          operator delete(v253);
          v251 = *(unsigned int **)(a1 + 2464);
          v250 = *(unsigned int **)(a1 + 2472);
        }
        goto LABEL_364;
      }
      if (v195 >> 62)
        goto LABEL_895;
      v197 = *(unsigned int **)(a1 + 2448);
      v198 = *(_BYTE **)(a1 + 1920);
      v199 = (char *)operator new(4 * v195);
      v200 = v198 - v196;
      v201 = &v199[(v198 - v196) & 0xFFFFFFFFFFFFFFFCLL];
      v202 = v201;
      if (v198 != v196)
      {
        if ((unint64_t)(v200 - 4) < 0x2C)
        {
          v202 = &v199[(v198 - v196) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_301:
            v211 = *((_DWORD *)v198 - 1);
            v198 -= 4;
            *((_DWORD *)v202 - 1) = v211;
            v202 -= 4;
          }
          while (v198 != v196);
          goto LABEL_302;
        }
        v202 = &v199[(v198 - v196) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(&v198[-(v200 & 0xFFFFFFFFFFFFFFFCLL)] - v199) < 0x20)
          goto LABEL_301;
        v203 = v200 >> 2;
        v204 = ((unint64_t)(v200 - 4) >> 2) + 1;
        v205 = 4 * (v204 & 0x7FFFFFFFFFFFFFF8);
        v206 = &v198[-v205];
        v202 = &v201[-v205];
        v207 = &v199[4 * v203 - 16];
        v208 = (__int128 *)(v198 - 16);
        v209 = v204 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v210 = *v208;
          *((_OWORD *)v207 - 1) = *(v208 - 1);
          *(_OWORD *)v207 = v210;
          v207 -= 32;
          v208 -= 2;
          v209 -= 8;
        }
        while (v209);
        v198 = v206;
        if (v204 != (v204 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_301;
      }
LABEL_302:
      *(_QWORD *)(a1 + 1912) = v202;
      *(_QWORD *)(a1 + 1920) = v201;
      *(_QWORD *)(a1 + 1928) = &v199[4 * v195];
      v193 = v197;
      if (v196)
      {
        operator delete(v196);
        v194 = *(unsigned int **)(a1 + 2440);
        v193 = *(unsigned int **)(a1 + 2448);
      }
      goto LABEL_304;
    }
    if (v137 >> 62)
      goto LABEL_895;
    v139 = *(unsigned int **)(a1 + 2424);
    v140 = *(_BYTE **)(a1 + 1896);
    v141 = (char *)operator new(4 * v137);
    v142 = v140 - v138;
    v143 = &v141[(v140 - v138) & 0xFFFFFFFFFFFFFFFCLL];
    v144 = v143;
    if (v140 != v138)
    {
      if ((unint64_t)(v142 - 4) < 0x2C)
      {
        v144 = &v141[(v140 - v138) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_241:
          v153 = *((_DWORD *)v140 - 1);
          v140 -= 4;
          *((_DWORD *)v144 - 1) = v153;
          v144 -= 4;
        }
        while (v140 != v138);
        goto LABEL_242;
      }
      v144 = &v141[(v140 - v138) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v140[-(v142 & 0xFFFFFFFFFFFFFFFCLL)] - v141) < 0x20)
        goto LABEL_241;
      v145 = v142 >> 2;
      v146 = ((unint64_t)(v142 - 4) >> 2) + 1;
      v147 = 4 * (v146 & 0x7FFFFFFFFFFFFFF8);
      v148 = &v140[-v147];
      v144 = &v143[-v147];
      v149 = &v141[4 * v145 - 16];
      v150 = (__int128 *)(v140 - 16);
      v151 = v146 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v152 = *v150;
        *((_OWORD *)v149 - 1) = *(v150 - 1);
        *(_OWORD *)v149 = v152;
        v149 -= 32;
        v150 -= 2;
        v151 -= 8;
      }
      while (v151);
      v140 = v148;
      if (v146 != (v146 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_241;
    }
LABEL_242:
    *(_QWORD *)(a1 + 1888) = v144;
    *(_QWORD *)(a1 + 1896) = v143;
    *(_QWORD *)(a1 + 1904) = &v141[4 * v137];
    v135 = v139;
    if (v138)
    {
      operator delete(v138);
      v136 = *(unsigned int **)(a1 + 2416);
      v135 = *(unsigned int **)(a1 + 2424);
    }
    goto LABEL_244;
  }
  return a1 + 1624;
}

void sub_20FA439E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    sub_20FA485B8(v1);
    _Unwind_Resume(a1);
  }
  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

char **sub_20FA43AB8(char **a1, char **a2)
{
  if (a1 != a2)
    sub_20E867E00(a1, *a2, a2[1], (a2[1] - *a2) >> 2);
  if (a1 != a2)
  {
    sub_20E867E00(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 2);
    sub_20E867E00(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 2);
    sub_20E867E00(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 2);
    sub_20E867E00(a1 + 12, a2[12], a2[13], (a2[13] - a2[12]) >> 2);
    sub_20E867E00(a1 + 15, a2[15], a2[16], (a2[16] - a2[15]) >> 2);
    sub_20E867E00(a1 + 18, a2[18], a2[19], (a2[19] - a2[18]) >> 2);
    sub_20E867E00(a1 + 21, a2[21], a2[22], (a2[22] - a2[21]) >> 2);
    sub_20E867E00(a1 + 24, a2[24], a2[25], (a2[25] - a2[24]) >> 2);
    sub_20E867E00(a1 + 27, a2[27], a2[28], (a2[28] - a2[27]) >> 2);
  }
  return a1;
}

void sub_20FA43BF4(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  char **v8;
  char *v9;
  char **v10;
  char *v11;
  unint64_t v12;
  char **v13;
  unsigned int *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int **v21;
  unsigned int *v22;
  int64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int v26;
  char *v27;
  unsigned int *__dst;
  unsigned int *v29;

  v6 = 0;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  do
  {
    v7 = (_QWORD *)a1 + 3 * v6;
    v8 = (char **)(a2 + 24 * v6);
    v10 = v8 + 1;
    v9 = v8[1];
    v11 = *v8;
    v12 = (v9 - *v8) >> 2;
    v13 = (char **)(v7 + 1);
    v14 = (unsigned int *)*v7;
    v15 = (uint64_t)(v7[1] - *v7) >> 2;
    v16 = v12 >= v15;
    v17 = v12 - v15;
    if (v17 != 0 && v16)
    {
      sub_20E93DC84((uint64_t)a1 + 24 * v6, v17);
      v11 = *v8;
      v9 = *v10;
      v14 = (unsigned int *)*v7;
      v18 = (unsigned int **)(a3 + 24 * v6);
      v20 = *v18;
      v19 = v18[1];
      __dst = (unsigned int *)*v7;
      v29 = v20;
      if (*v8 != *v10)
        goto LABEL_14;
LABEL_10:
      v23 = 0;
      goto LABEL_20;
    }
    if (v16)
    {
      v21 = (unsigned int **)(a3 + 24 * v6);
      v22 = *v21;
      v19 = v21[1];
      __dst = (unsigned int *)*v7;
      v29 = v22;
      if (v11 != v9)
        goto LABEL_14;
      goto LABEL_10;
    }
    *v13 = (char *)&v14[v12];
    v24 = (unsigned int **)(a3 + 24 * v6);
    v25 = *v24;
    v19 = v24[1];
    __dst = v14;
    v29 = v25;
    if (v11 == v9)
      goto LABEL_10;
LABEL_14:
    while (v29 != v19)
    {
      v26 = *(_DWORD *)v11;
      if (*(_DWORD *)v11 >= *v29)
      {
        v11 += 4 * (*v29++ >= v26);
        if (v11 == v9)
          goto LABEL_17;
      }
      else
      {
        *__dst = v26;
        v11 += 4;
        ++__dst;
        if (v11 == v9)
        {
LABEL_17:
          v23 = 0;
          v14 = __dst;
          goto LABEL_20;
        }
      }
    }
    v14 = __dst;
    v23 = v9 - v11;
    if (v11 != v9)
      memmove(__dst, v11, v9 - v11);
LABEL_20:
    v27 = (char *)v14 + v23;
    if (v27 != *v13)
      *v13 = v27;
    ++v6;
  }
  while (v6 != 10);
}

void sub_20FA43DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F89E908(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FA43DFC(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  char **v5;
  char *v6;
  char *v7;
  char **v8;
  char **v9;
  char *v10;
  char *v11;
  char **v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  _BOOL4 v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  size_t v33;

  for (i = 0; i != 10; ++i)
  {
    v5 = (char **)(a1 + 24 * i);
    v6 = *v5;
    v8 = v5 + 1;
    v7 = v5[1];
    v9 = (char **)(a2 + 24 * i);
    v10 = *v9;
    v13 = v9[1];
    v12 = v9 + 1;
    v11 = v13;
    if (*v5 == v7)
    {
      v14 = v5[1];
      v16 = v10;
    }
    else
    {
      v14 = *v5;
      v15 = *v5;
      v16 = v10;
      while (v16 != v11)
      {
        if (*(_DWORD *)v16 < *(_DWORD *)v15)
          goto LABEL_12;
        v16 += 4 * (*(_DWORD *)v15 >= *(_DWORD *)v16);
        v15 += 4;
        v14 += 4;
        if (v15 == v7)
        {
          v14 = v5[1];
          goto LABEL_12;
        }
      }
      v14 = v5[1];
      v16 = v11;
    }
LABEL_12:
    v17 = (v14 - v6) >> 2;
    v18 = v7 - v6;
    v19 = v18 >> 2;
    v20 = ((v11 - v10) >> 2) + (v18 >> 1) - v17;
    if (v20 <= v18 >> 2)
    {
      if (v20 < v18 >> 2)
        *v8 = &v6[4 * v20];
    }
    else
    {
      sub_20E93DC84(a1 + 24 * i, v20 - (v18 >> 2));
      v6 = *v5;
    }
    v21 = &v6[4 * v19];
    v22 = *v12;
    if (v17 != v19)
    {
      v24 = &v6[4 * v17];
      v23 = &v6[4 * v19];
      while (v16 != v22)
      {
        v25 = *(_DWORD *)v16;
        v26 = *(_DWORD *)v16 >= *(_DWORD *)v24;
        if (*(_DWORD *)v16 >= *(_DWORD *)v24)
          v25 = *(_DWORD *)v24;
        v16 += 4 * (*(_DWORD *)v24 >= *(_DWORD *)v16);
        v24 += 4 * v26;
        *(_DWORD *)v23 = v25;
        v23 += 4;
        if (v24 == v21)
          goto LABEL_23;
      }
      v27 = v21 - v24;
      v28 = v23;
      goto LABEL_26;
    }
    v23 = &v6[4 * v19];
LABEL_23:
    v27 = v22 - v16;
    if (v22 != v16)
    {
      v28 = v23;
      v24 = v16;
LABEL_26:
      memmove(v28, v24, v27);
    }
    v29 = &v23[v27];
    v30 = *v5;
    if (&v23[v27] != *v8)
      *v8 = v29;
    if (v17 != v19)
    {
      v31 = &v30[4 * v17];
      v32 = &v30[4 * v19];
      v33 = v29 - v32;
      if (v33)
        memmove(&v30[4 * v17], v32, v33);
      *v8 = &v31[v33];
    }
  }
  return a1;
}

int64x2_t sub_20FA44008(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int64x2_t result;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int64x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  int v48;
  int64x2_t *v49;
  uint64_t v50;
  int64x2_t *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  int v59;
  int64x2_t *v60;
  uint64_t v61;
  int64x2_t *v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  uint64_t v79;
  int v80;
  float64x2_t *v81;
  int64x2_t *v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int64x2_t v86;
  uint64_t v87;

  v6 = *(_DWORD **)a2;
  v7 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 == v7)
  {
    v8 = 0;
    v17 = *(_DWORD **)(a2 + 24);
    v18 = *(_DWORD **)(a2 + 32);
    if (v17 == v18)
      goto LABEL_13;
    goto LABEL_9;
  }
  v8 = 0;
  v9 = a1[1];
  do
  {
    v9 -= 16;
    do
    {
      v10 = *(_DWORD *)(v9 + 16);
      v9 += 16;
    }
    while (*v6 != v10);
    v11 = *(_QWORD *)(v9 + 8);
    v83 = 3;
    v84 = v11 + 32;
    v85 = 0;
    v87 = 0;
    v86 = 0uLL;
    sub_20F053450(&v83, (double *)v86.i64);
    v12.i64[0] = v87;
    v13.i64[0] = *(_QWORD *)(v11 + 120);
    v14 = *(int8x16_t *)(v11 + 104);
    result = vzip1q_s64(v12, (int64x2_t)v14);
    v16 = *a3 + 8 * v8;
    *(int64x2_t *)v16 = v86;
    *(int64x2_t *)(v16 + 16) = result;
    *(int8x16_t *)(v16 + 32) = vextq_s8(v14, v13, 8uLL);
    v8 += 6;
    ++v6;
  }
  while (v6 != v7);
  v17 = *(_DWORD **)(a2 + 24);
  v18 = *(_DWORD **)(a2 + 32);
  if (v17 != v18)
  {
LABEL_9:
    v19 = a1[13];
    do
    {
      v19 -= 16;
      do
      {
        v20 = *(_DWORD *)(v19 + 16);
        v19 += 16;
      }
      while (*v17 != v20);
      v21 = *(_QWORD *)(v19 + 8);
      result.i64[0] = *(_QWORD *)(v21 + 96);
      v23 = *(_OWORD *)(v21 + 64);
      v22 = *(_OWORD *)(v21 + 80);
      v24 = *(_OWORD *)(v21 + 32);
      v25 = *(_OWORD *)(v21 + 48);
      v26 = *a3 + 8 * v8;
      *(_OWORD *)(v26 + 32) = v23;
      *(_OWORD *)(v26 + 48) = v22;
      *(_QWORD *)(v26 + 64) = result.i64[0];
      *(_OWORD *)v26 = v24;
      *(_OWORD *)(v26 + 16) = v25;
      v8 += 9;
      ++v17;
    }
    while (v17 != v18);
  }
LABEL_13:
  v27 = *(_DWORD **)(a2 + 48);
  v28 = *(_DWORD **)(a2 + 56);
  if (v27 != v28)
  {
    v29 = a1[25];
    do
    {
      v29 -= 16;
      do
      {
        v30 = *(_DWORD *)(v29 + 16);
        v29 += 16;
      }
      while (*v27 != v30);
      v31 = *(_QWORD *)(v29 + 8);
      v83 = 3;
      v84 = v31 + 32;
      v85 = 0;
      v87 = 0;
      v86 = 0uLL;
      sub_20F053450(&v83, (double *)v86.i64);
      v32.i64[0] = v87;
      v33.i64[0] = *(_QWORD *)(v31 + 120);
      v34 = *(int8x16_t *)(v31 + 104);
      result = vzip1q_s64(v32, (int64x2_t)v34);
      v35 = *a3 + 8 * v8;
      *(int64x2_t *)v35 = v86;
      *(int64x2_t *)(v35 + 16) = result;
      *(int8x16_t *)(v35 + 32) = vextq_s8(v34, v33, 8uLL);
      v8 += 6;
      ++v27;
    }
    while (v27 != v28);
  }
  v36 = *(_DWORD **)(a2 + 72);
  v37 = *(_DWORD **)(a2 + 80);
  if (v36 != v37)
  {
    v38 = a1[37];
    do
    {
      v38 -= 16;
      do
      {
        v39 = *(_DWORD *)(v38 + 16);
        v38 += 16;
      }
      while (*v36 != v39);
      v40 = *(_QWORD *)(v38 + 8);
      v83 = 3;
      v84 = v40 + 32;
      v85 = 0;
      v87 = 0;
      v86 = 0uLL;
      sub_20F053450(&v83, (double *)v86.i64);
      v41.i64[0] = v87;
      v42.i64[0] = *(_QWORD *)(v40 + 120);
      v43 = *(int8x16_t *)(v40 + 104);
      result = vzip1q_s64(v41, (int64x2_t)v43);
      v44 = *a3 + 8 * v8;
      *(int64x2_t *)v44 = v86;
      *(int64x2_t *)(v44 + 16) = result;
      *(int8x16_t *)(v44 + 32) = vextq_s8(v43, v42, 8uLL);
      v8 += 6;
      ++v36;
    }
    while (v36 != v37);
  }
  v45 = *(_DWORD **)(a2 + 96);
  v46 = *(_DWORD **)(a2 + 104);
  if (v45 != v46)
  {
    v47 = a1[49];
    do
    {
      v47 -= 16;
      do
      {
        v48 = *(_DWORD *)(v47 + 16);
        v47 += 16;
      }
      while (*v45 != v48);
      v49 = *(int64x2_t **)(v47 + 8);
      result = v49[2];
      v50 = v49[3].i64[0];
      v51 = (int64x2_t *)(*a3 + 8 * v8);
      v51[1].i64[0] = v50;
      *v51 = result;
      v8 += 3;
      ++v45;
    }
    while (v45 != v46);
  }
  v52 = *(_DWORD **)(a2 + 120);
  v53 = *(_DWORD **)(a2 + 128);
  if (v52 != v53)
  {
    v54 = a1[61];
    do
    {
      v54 -= 16;
      do
      {
        v55 = *(_DWORD *)(v54 + 16);
        v54 += 16;
      }
      while (*v52 != v55);
      result.i64[0] = *(_QWORD *)(*(_QWORD *)(v54 + 8) + 32);
      *(_QWORD *)(*a3 + 8 * v8++) = result.i64[0];
      ++v52;
    }
    while (v52 != v53);
  }
  v56 = *(_DWORD **)(a2 + 144);
  v57 = *(_DWORD **)(a2 + 152);
  if (v56 != v57)
  {
    v58 = a1[73];
    do
    {
      v58 -= 16;
      do
      {
        v59 = *(_DWORD *)(v58 + 16);
        v58 += 16;
      }
      while (*v56 != v59);
      v60 = *(int64x2_t **)(v58 + 8);
      result = v60[2];
      v61 = v60[3].i64[0];
      v62 = (int64x2_t *)(*a3 + 8 * v8);
      v62[1].i64[0] = v61;
      *v62 = result;
      v8 += 3;
      ++v56;
    }
    while (v56 != v57);
  }
  v63 = *(_DWORD **)(a2 + 168);
  v64 = *(_DWORD **)(a2 + 176);
  if (v63 != v64)
  {
    v65 = a1[85];
    do
    {
      v65 -= 16;
      do
      {
        v66 = *(_DWORD *)(v65 + 16);
        v65 += 16;
      }
      while (*v63 != v66);
      v67 = *(_QWORD *)(v65 + 8);
      result = *(int64x2_t *)(v67 + 32);
      v68 = *(_OWORD *)(v67 + 48);
      v69 = *a3 + 8 * v8;
      *(int64x2_t *)v69 = result;
      *(_OWORD *)(v69 + 16) = v68;
      v8 += 4;
      ++v63;
    }
    while (v63 != v64);
  }
  v70 = *(_DWORD **)(a2 + 192);
  v71 = *(_DWORD **)(a2 + 200);
  if (v70 != v71)
  {
    v72 = a1[97];
    do
    {
      v72 -= 16;
      do
      {
        v73 = *(_DWORD *)(v72 + 16);
        v72 += 16;
      }
      while (*v70 != v73);
      v74 = *(_QWORD *)(v72 + 8);
      result = *(int64x2_t *)(v74 + 32);
      v75 = *(_OWORD *)(v74 + 48);
      v76 = *a3 + 8 * v8;
      *(int64x2_t *)v76 = result;
      *(_OWORD *)(v76 + 16) = v75;
      v8 += 4;
      ++v70;
    }
    while (v70 != v71);
  }
  v78 = *(_DWORD **)(a2 + 216);
  v77 = *(_DWORD **)(a2 + 224);
  if (v78 != v77)
  {
    v79 = a1[109];
    do
    {
      v79 -= 16;
      do
      {
        v80 = *(_DWORD *)(v79 + 16);
        v79 += 16;
      }
      while (*v78 != v80);
      v81 = (float64x2_t *)(*(_QWORD *)(v79 + 8) + 32);
      v86 = 0uLL;
      v87 = 0;
      sub_20E9733B8(v81, (double *)v86.i64);
      result = v86;
      v82 = (int64x2_t *)(*a3 + 8 * v8);
      v82[1].i64[0] = v87;
      *v82 = result;
      v8 += 3;
      ++v78;
    }
    while (v78 != v77);
  }
  return result;
}

void *sub_20FA44434(_QWORD *a1, char **a2)
{
  uint64_t v4;
  char **v5;
  char **v6;
  char *v7;
  char **v8;
  char **v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *result;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  size_t v44;
  uint64_t v45;

  sub_20F20CEEC(a1, 0, 1u);
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  sub_20FA48CFC(a1 + 13);
  v4 = 0;
  v5 = (char **)(a1 + 1913);
  do
  {
    v6 = &v5[3 * v4];
    v7 = *v6;
    if ((unint64_t)(v6[2] - *v6) > 0xFF)
      goto LABEL_2;
    v8 = &v5[3 * v4];
    v11 = v8[1];
    v9 = v8 + 1;
    v10 = v11;
    v12 = (char *)operator new(0x100uLL);
    v13 = v11 - v7;
    v14 = &v12[(v11 - v7) & 0xFFFFFFFFFFFFFFFCLL];
    v15 = v14;
    if (v11 != v7)
    {
      if ((unint64_t)(v13 - 4) < 0x2C)
      {
        v15 = &v12[(v10 - v7) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_11:
          v24 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v15 - 1) = v24;
          v15 -= 4;
        }
        while (v10 != v7);
        goto LABEL_12;
      }
      v15 = &v12[(v10 - v7) & 0xFFFFFFFFFFFFFFFCLL];
      if (v10 - v12 - (v13 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
        goto LABEL_11;
      v16 = v13 >> 2;
      v17 = ((unint64_t)(v13 - 4) >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v19 = &v10[-v18];
      v15 = &v14[-v18];
      v20 = &v12[4 * v16 - 16];
      v21 = (__int128 *)(v10 - 16);
      v22 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *v21;
        *((_OWORD *)v20 - 1) = *(v21 - 1);
        *(_OWORD *)v20 = v23;
        v20 -= 32;
        v21 -= 2;
        v22 -= 8;
      }
      while (v22);
      v10 = v19;
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_11;
    }
LABEL_12:
    *v6 = v15;
    *v9 = v14;
    v6[2] = v12 + 256;
    if (v7)
      operator delete(v7);
LABEL_2:
    ++v4;
  }
  while (v4 != 10);
  if (v5 != a2)
    sub_20F8EE574((char **)a1 + 1913, a2);
  v25 = (a1[1917] - a1[1916]) >> 2;
  v26 = (a1[1920] - a1[1919]) >> 2;
  v27 = (a1[1923] - a1[1922]) >> 2;
  v45 = (a1[1914] - a1[1913]) >> 2;
  v28 = (a1[1926] - a1[1925]) >> 2;
  v29 = (a1[1929] - a1[1928]) >> 2;
  v30 = (a1[1932] - a1[1931]) >> 2;
  v31 = (a1[1935] - a1[1934]) >> 2;
  v32 = (a1[1938] - a1[1937]) >> 2;
  v33 = (a1[1941] - a1[1940]) >> 2;
  (*(void (**)(_QWORD *, uint64_t))(a1[175] + 24))(a1 + 175, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[355] + 24))(a1 + 355, v33, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[535] + 24))(a1 + 535, v33, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[715] + 24))(a1 + 715, v33, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[895] + 24))(a1 + 895, v33, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1075] + 24))(a1 + 1075, v33, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1255] + 24))(a1 + 1255, v33, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1435] + 24))(a1 + 1435, v33, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1615] + 24))(a1 + 1615, v33, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1795] + 24))(a1 + 1795, v33, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[157] + 24))(a1 + 157, v32, v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[337] + 24))(a1 + 337, v32, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[517] + 24))(a1 + 517, v32, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[697] + 24))(a1 + 697, v32, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[877] + 24))(a1 + 877, v32, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1057] + 24))(a1 + 1057, v32, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1237] + 24))(a1 + 1237, v32, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1417] + 24))(a1 + 1417, v32, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1597] + 24))(a1 + 1597, v32, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1777] + 24))(a1 + 1777, v32, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[139] + 24))(a1 + 139, v31, v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[319] + 24))(a1 + 319, v31, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[499] + 24))(a1 + 499, v31, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[679] + 24))(a1 + 679, v31, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[859] + 24))(a1 + 859, v31, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1039] + 24))(a1 + 1039, v31, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1219] + 24))(a1 + 1219, v31, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1399] + 24))(a1 + 1399, v31, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1579] + 24))(a1 + 1579, v31, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1759] + 24))(a1 + 1759, v31, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[121] + 24))(a1 + 121, v30, v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[301] + 24))(a1 + 301, v30, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[481] + 24))(a1 + 481, v30, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[661] + 24))(a1 + 661, v30, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[841] + 24))(a1 + 841, v30, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1021] + 24))(a1 + 1021, v30, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1201] + 24))(a1 + 1201, v30, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1381] + 24))(a1 + 1381, v30, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1561] + 24))(a1 + 1561, v30, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1741] + 24))(a1 + 1741, v30, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[103] + 24))(a1 + 103, v29, v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[283] + 24))(a1 + 283, v29, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[463] + 24))(a1 + 463, v29, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[643] + 24))(a1 + 643, v29, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[823] + 24))(a1 + 823, v29, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1003] + 24))(a1 + 1003, v29, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1183] + 24))(a1 + 1183, v29, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1363] + 24))(a1 + 1363, v29, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1543] + 24))(a1 + 1543, v29, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1723] + 24))(a1 + 1723, v29, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[85] + 24))(a1 + 85, v28, v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[265] + 24))(a1 + 265, v28, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[445] + 24))(a1 + 445, v28, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[625] + 24))(a1 + 625, v28, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[805] + 24))(a1 + 805, v28, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[985] + 24))(a1 + 985, v28, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1165] + 24))(a1 + 1165, v28, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1345] + 24))(a1 + 1345, v28, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1525] + 24))(a1 + 1525, v28, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1705] + 24))(a1 + 1705, v28, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[67] + 24))(a1 + 67, v27, v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[247] + 24))(a1 + 247, v27, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[427] + 24))(a1 + 427, v27, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[607] + 24))(a1 + 607, v27, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[787] + 24))(a1 + 787, v27, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[967] + 24))(a1 + 967, v27, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1147] + 24))(a1 + 1147, v27, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1327] + 24))(a1 + 1327, v27, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1507] + 24))(a1 + 1507, v27, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1687] + 24))(a1 + 1687, v27, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[49] + 24))(a1 + 49, v26, v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[229] + 24))(a1 + 229, v26, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[409] + 24))(a1 + 409, v26, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[589] + 24))(a1 + 589, v26, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[769] + 24))(a1 + 769, v26, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[949] + 24))(a1 + 949, v26, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1129] + 24))(a1 + 1129, v26, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1309] + 24))(a1 + 1309, v26, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1489] + 24))(a1 + 1489, v26, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1669] + 24))(a1 + 1669, v26, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[31] + 24))(a1 + 31, v25, v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[211] + 24))(a1 + 211, v25, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[391] + 24))(a1 + 391, v25, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[571] + 24))(a1 + 571, v25, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[751] + 24))(a1 + 751, v25, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[931] + 24))(a1 + 931, v25, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1111] + 24))(a1 + 1111, v25, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1291] + 24))(a1 + 1291, v25, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1471] + 24))(a1 + 1471, v25, v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1651] + 24))(a1 + 1651, v25, v33);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[13] + 24))(a1 + 13, v45, v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[193] + 24))(a1 + 193, v45, v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[373] + 24))(a1 + 373, v45, v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[553] + 24))(a1 + 553, v45, v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[733] + 24))(a1 + 733, v45, v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[913] + 24))(a1 + 913, v45, v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1093] + 24))(a1 + 1093, v45, v30);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1273] + 24))(a1 + 1273, v45, v31);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[1453] + 24))(a1 + 1453, v45, v32);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a1[1633] + 24))(a1 + 1633, v45, v33);
  *((_DWORD *)a1 + 6) = v45;
  *((_DWORD *)a1 + 7) = v25;
  *((_DWORD *)a1 + 8) = v26;
  *((_DWORD *)a1 + 9) = v27;
  *((_DWORD *)a1 + 10) = v28;
  *((_DWORD *)a1 + 11) = v29;
  *((_DWORD *)a1 + 12) = v30;
  *((_DWORD *)a1 + 13) = v31;
  *((_DWORD *)a1 + 14) = v32;
  *(_QWORD *)((char *)a1 + 60) = v33;
  *((_DWORD *)a1 + 17) = 6 * v45;
  v35 = 9 * v25 + 6 * v45;
  v36 = v35 + 6 * v26;
  *((_DWORD *)a1 + 18) = v35;
  *((_DWORD *)a1 + 19) = v36;
  v37 = v36 + 6 * v27;
  v38 = 3 * v28 + v37;
  *((_DWORD *)a1 + 20) = v37;
  *((_DWORD *)a1 + 21) = v38;
  v39 = v38 + v29;
  v40 = 3 * v30 + v38 + v29;
  *((_DWORD *)a1 + 22) = v39;
  *((_DWORD *)a1 + 23) = v40;
  v41 = v40 + 4 * v31;
  v42 = v40 + 4 * (v32 + v31);
  *((_DWORD *)a1 + 24) = v41;
  *((_DWORD *)a1 + 25) = v42;
  v43 = (3 * v33 + v42);
  *((_DWORD *)a1 + 4) = v43;
  if (a1[1] < v43)
  {
    if (*a1)
      MEMORY[0x212BC6368](*a1, 0x1000C8000313F17);
    v44 = (8 * v43 + 31) & 0xFFFFFFFE0;
    *a1 = 0;
    a1[1] = v44 >> 3;
    result = operator new(v44, (std::align_val_t)0x20uLL);
    *a1 = result;
  }
  return result;
}

__n128 sub_20FA45280(uint64_t a1, uint64_t a2, char **a3, int **a4)
{
  char **v4;
  char **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;
  int **v20;
  char **v21;
  char *v22;
  char *v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  _DWORD *v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t *v46;
  int *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  int **v58;
  __n128 result;
  int *v60;
  int *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  int *v67;
  int *i;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int *v76;
  int *j;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  int *v83;
  int *k;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  int *v90;
  int *m;
  int v92;
  int v93;
  __n128 *v94;
  __n128 *v95;
  int *v96;
  int *n;
  int v98;
  int v99;
  int *v100;
  int *ii;
  int v102;
  int v103;
  __n128 *v104;
  __n128 *v105;
  int *v106;
  int *jj;
  int v108;
  int v109;
  uint64_t v110;
  _OWORD *v111;
  __int128 v112;
  int *v113;
  int *kk;
  int v115;
  int v116;
  uint64_t v117;
  _OWORD *v118;
  __int128 v119;
  int *v120;
  int *mm;
  int v122;
  int v123;
  __n128 *v124;
  __n128 *v125;
  uint64_t v127;
  uint64_t v128;
  char **v129;
  char **v130;
  uint64_t v132;
  char *v133;
  int **v134;
  _QWORD **v135;
  int **v136;
  unint64_t v137;

  v4 = a3;
  v6 = (char **)(a1 + 15304);
  if ((char **)(a1 + 15304) != a3)
    sub_20F8EE574(a3, v6);
  v129 = v6;
  v7 = 0;
  v127 = a2;
  do
  {
    v8 = v4[3 * v7];
    v9 = v4[3 * v7 + 1];
    v10 = a2 + 15304 + 24 * v7;
    v11 = *(unsigned int **)v10;
    v12 = *(unsigned int **)(v10 + 8);
    v13 = v8 == v9 || v11 == v12;
    if (!v13)
    {
      v14 = v4[3 * v7];
      do
      {
        v15 = *(_DWORD *)v14;
        if (*(_DWORD *)v14 >= *v11)
        {
          if (*v11 >= v15)
          {
            *(_DWORD *)v8 = v15;
            v8 += 4;
            v14 += 4;
          }
          ++v11;
          if (v14 == v9)
            break;
        }
        else
        {
          v14 += 4;
          if (v14 == v9)
            break;
        }
      }
      while (v11 != v12);
    }
    if (v8 != v9)
      v4[3 * v7 + 1] = v8;
    ++v7;
  }
  while (v7 != 10);
  v128 = a2 + 15304;
  v16 = 0;
  v130 = v4;
  do
  {
    v132 = v16;
    v17 = 3 * v16;
    v18 = &a4[v17];
    v19 = a4[v17];
    a4[v17 + 1] = v19;
    v20 = &a4[v17 + 1];
    v21 = &v4[v17];
    v22 = v4[v17];
    v24 = v21 + 1;
    v23 = v21[1];
    if (v22 != v23)
    {
      v25 = v23 - v22;
      v26 = v25 >> 2;
      v136 = &a4[3 * v132 + 2];
      if (v25 >> 2 > (unint64_t)(((char *)*v136 - (char *)v19) >> 3))
      {
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFDLL)
          sub_20E92CED8();
        v27 = (char *)operator new(2 * v25);
        *v18 = v27;
        *v20 = (int *)v27;
        *v136 = (int *)&v27[8 * v26];
        if (v19)
          operator delete(v19);
      }
      v28 = *v21;
      v29 = *v24;
      v13 = *v21 == *v24;
      v30 = (uint64_t *)&a4[3 * v132 + 2];
      if (!v13)
      {
        v31 = 0;
        v32 = 0;
        v33 = *(_DWORD **)(v128 + 24 * v132);
        v34 = v129[3 * v132];
        v133 = v29;
        v134 = v20;
        v135 = (_QWORD **)v18;
        v35 = *(_DWORD *)v28;
        if (*v33 < *(_DWORD *)v28)
          goto LABEL_31;
        while (1)
        {
          if (*(_DWORD *)v34 < v35)
          {
            do
            {
              v37 = *((_DWORD *)v34 + 1);
              v34 += 4;
              v31 = (v31 + 1);
            }
            while (v37 < v35);
          }
          v38 = (char *)*v20;
          v39 = *v30;
          if ((unint64_t)*v20 >= *v30)
            break;
          *(_QWORD *)v38 = v32 | (unint64_t)(v31 << 32);
          *v20 = (int *)(v38 + 8);
          v28 += 4;
          if (v28 == v29)
            goto LABEL_20;
LABEL_30:
          v35 = *(_DWORD *)v28;
          if (*v33 < *(_DWORD *)v28)
          {
            do
            {
LABEL_31:
              v36 = v33[1];
              ++v33;
              ++v32;
            }
            while (v36 < v35);
          }
        }
        v40 = (char *)*v18;
        v41 = (uint64_t)&v38[-*v18];
        v42 = v41 >> 3;
        v43 = (v41 >> 3) + 1;
        if (v43 >> 61)
          sub_20E92CED8();
        v44 = v39 - (_QWORD)v40;
        if (v44 >> 2 > v43)
          v43 = v44 >> 2;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        v137 = v43;
        if (v43)
        {
          if (v43 >> 61)
            sub_20E877A38();
          v45 = operator new(8 * v43);
        }
        else
        {
          v45 = 0;
        }
        v46 = (unint64_t *)&v45[8 * v42];
        *v46 = v32 | (unint64_t)(v31 << 32);
        v47 = (int *)(v46 + 1);
        if (v38 == v40)
        {
          v18 = v135;
          v30 = (uint64_t *)&a4[3 * v132 + 2];
          goto LABEL_54;
        }
        v48 = v38 - v40 - 8;
        if (v48 >= 0x58)
        {
          v49 = v38 - v45 - v41;
          v30 = (uint64_t *)&a4[3 * v132 + 2];
          if (v49 >= 0x20)
          {
            v50 = (v48 >> 3) + 1;
            v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            v52 = &v38[-v51];
            v46 = (unint64_t *)((char *)v46 - v51);
            v53 = &v45[8 * v42 - 16];
            v54 = v38 - 16;
            v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *v53 = v56;
              v53 -= 2;
              v54 -= 32;
              v55 -= 4;
            }
            while (v55);
            v38 = v52;
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_53;
          }
        }
        else
        {
          v30 = (uint64_t *)&a4[3 * v132 + 2];
        }
        do
        {
          v57 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v46 = v57;
        }
        while (v38 != v40);
LABEL_53:
        v18 = v135;
        v38 = (char *)*v135;
LABEL_54:
        *v18 = v46;
        v20 = v134;
        *v134 = v47;
        *v30 = (uint64_t)&v45[8 * v137];
        if (v38)
          operator delete(v38);
        v29 = v133;
        *v134 = v47;
        v28 += 4;
        if (v28 == v133)
          goto LABEL_20;
        goto LABEL_30;
      }
    }
LABEL_20:
    v16 = v132 + 1;
    v4 = v130;
  }
  while (v132 != 9);
  v58 = a4;
  sub_20F8EE66C(a1 + 1400, v127 + 1400, a4 + 27, *a4, a4[1]);
  sub_20F8EE940(a1 + 2840, v127 + 2840, a4 + 27, v58[3], v58[4]);
  sub_20F8EE66C(a1 + 4280, v127 + 4280, a4 + 27, v58[6], v58[7]);
  sub_20F8EE66C(a1 + 5720, v127 + 5720, a4 + 27, v58[9], v58[10]);
  sub_20F8EEC2C(a1 + 7160, v127 + 7160, a4 + 27, v58[12], v58[13]);
  sub_20F8EEEEC(a1 + 8600, v127 + 8600, a4 + 27, v58[15], v58[16]);
  sub_20F8EEC2C(a1 + 10040, v127 + 10040, a4 + 27, v58[18], v58[19]);
  sub_20F8EF1A4(a1 + 11480, v127 + 11480, a4 + 27, v58[21], v58[22]);
  sub_20F8EF1A4(a1 + 12920, v127 + 12920, a4 + 27, v58[24], v58[25]);
  sub_20F8EEC2C(a1 + 14360, v127 + 14360, a4 + 27, v58[27], v58[28]);
  sub_20F8EF468(a1 + 1256, v127 + 1256, v58 + 24, *v58, v58[1]);
  sub_20F8EF744(a1 + 2696, v127 + 2696, v58 + 24, a4[3], v58[4]);
  sub_20F8EF468(a1 + 4136, v127 + 4136, v58 + 24, a4[6], v58[7]);
  sub_20F8EF468(a1 + 5576, v127 + 5576, v58 + 24, a4[9], v58[10]);
  sub_20F8EF1A4(a1 + 7016, v127 + 7016, v58 + 24, a4[12], v58[13]);
  sub_20F8EFA38(a1 + 8456, v127 + 8456, v58 + 24, a4[15], v58[16]);
  sub_20F8EF1A4(a1 + 9896, v127 + 9896, v58 + 24, a4[18], v58[19]);
  sub_20F8EFCE8(a1 + 11336, v127 + 11336, v58 + 24, a4[21], v58[22]);
  sub_20F8EFCE8(a1 + 12776, v127 + 12776, v58 + 24, v58[24], v58[25]);
  sub_20F8EF1A4(a1 + 14216, v127 + 14216, v58 + 24, v58[27], v58[28]);
  sub_20F8EF468(a1 + 1112, v127 + 1112, v58 + 21, *v58, v58[1]);
  sub_20F8EF744(a1 + 2552, v127 + 2552, v58 + 21, a4[3], v58[4]);
  sub_20F8EF468(a1 + 3992, v127 + 3992, v58 + 21, a4[6], v58[7]);
  sub_20F8EF468(a1 + 5432, v127 + 5432, v58 + 21, a4[9], v58[10]);
  sub_20F8EF1A4(a1 + 6872, v127 + 6872, v58 + 21, a4[12], v58[13]);
  sub_20F8EFA38(a1 + 8312, v127 + 8312, v58 + 21, a4[15], v58[16]);
  sub_20F8EF1A4(a1 + 9752, v127 + 9752, v58 + 21, a4[18], v58[19]);
  sub_20F8EFCE8(a1 + 11192, v127 + 11192, v58 + 21, a4[21], v58[22]);
  sub_20F8EFCE8(a1 + 12632, v127 + 12632, v58 + 21, a4[24], v58[25]);
  sub_20F8EF1A4(a1 + 14072, v127 + 14072, v58 + 21, v58[27], v58[28]);
  sub_20F8EE66C(a1 + 968, v127 + 968, v58 + 18, *v58, v58[1]);
  sub_20F8EE940(a1 + 2408, v127 + 2408, v58 + 18, a4[3], v58[4]);
  sub_20F8EE66C(a1 + 3848, v127 + 3848, v58 + 18, a4[6], v58[7]);
  sub_20F8EE66C(a1 + 5288, v127 + 5288, v58 + 18, a4[9], v58[10]);
  sub_20F8EEC2C(a1 + 6728, v127 + 6728, v58 + 18, a4[12], v58[13]);
  sub_20F8EEEEC(a1 + 8168, v127 + 8168, v58 + 18, a4[15], v58[16]);
  sub_20F8EEC2C(a1 + 9608, v127 + 9608, v58 + 18, a4[18], v58[19]);
  sub_20F8EF1A4(a1 + 11048, v127 + 11048, v58 + 18, a4[21], v58[22]);
  sub_20F8EF1A4(a1 + 12488, v127 + 12488, v58 + 18, a4[24], v58[25]);
  sub_20F8EEC2C(a1 + 13928, v127 + 13928, v58 + 18, v58[27], v58[28]);
  sub_20F8EFFB4(a1 + 824, v127 + 824, v58 + 15, *v58, v58[1]);
  sub_20F8EEC2C(a1 + 2264, v127 + 2264, v58 + 15, a4[3], v58[4]);
  sub_20F8EFFB4(a1 + 3704, v127 + 3704, v58 + 15, a4[6], v58[7]);
  sub_20F8EFFB4(a1 + 5144, v127 + 5144, v58 + 15, a4[9], v58[10]);
  sub_20F8EEEEC(a1 + 6584, v127 + 6584, v58 + 15, a4[12], v58[13]);
  sub_20F8F026C(a1 + 8024, v127 + 8024, v58 + 15, a4[15], v58[16]);
  sub_20F8EEEEC(a1 + 9464, v127 + 9464, v58 + 15, a4[18], v58[19]);
  sub_20F8EFA38(a1 + 10904, v127 + 10904, v58 + 15, a4[21], v58[22]);
  sub_20F8EFA38(a1 + 12344, v127 + 12344, v58 + 15, a4[24], v58[25]);
  sub_20F8EEEEC(a1 + 13784, v127 + 13784, v58 + 15, v58[27], v58[28]);
  sub_20F8EE66C(a1 + 680, v127 + 680, a4 + 12, *v58, v58[1]);
  sub_20F8EE940(a1 + 2120, v127 + 2120, a4 + 12, a4[3], a4[4]);
  sub_20F8EE66C(a1 + 3560, v127 + 3560, a4 + 12, a4[6], a4[7]);
  sub_20F8EE66C(a1 + 5000, v127 + 5000, a4 + 12, a4[9], a4[10]);
  sub_20F8EEC2C(a1 + 6440, v127 + 6440, a4 + 12, a4[12], a4[13]);
  sub_20F8EEEEC(a1 + 7880, v127 + 7880, a4 + 12, a4[15], a4[16]);
  sub_20F8EEC2C(a1 + 9320, v127 + 9320, a4 + 12, a4[18], a4[19]);
  sub_20F8EF1A4(a1 + 10760, v127 + 10760, a4 + 12, a4[21], a4[22]);
  sub_20F8EF1A4(a1 + 12200, v127 + 12200, a4 + 12, a4[24], a4[25]);
  sub_20F8EEC2C(a1 + 13640, v127 + 13640, a4 + 12, v58[27], v58[28]);
  sub_20F8EF744(a1 + 536, v127 + 536, a4 + 9, *v58, v58[1]);
  sub_20F8F051C(a1 + 1976, v127 + 1976, a4 + 9, a4[3], a4[4]);
  sub_20F8EF744(a1 + 3416, v127 + 3416, a4 + 9, a4[6], a4[7]);
  sub_20F8EF744(a1 + 4856, v127 + 4856, a4 + 9, a4[9], a4[10]);
  sub_20F8EE66C(a1 + 6296, v127 + 6296, a4 + 9, a4[12], a4[13]);
  sub_20F8EFFB4(a1 + 7736, v127 + 7736, a4 + 9, a4[15], a4[16]);
  sub_20F8EE66C(a1 + 9176, v127 + 9176, a4 + 9, a4[18], a4[19]);
  sub_20F8EF468(a1 + 10616, v127 + 10616, a4 + 9, a4[21], a4[22]);
  sub_20F8EF468(a1 + 12056, v127 + 12056, a4 + 9, a4[24], a4[25]);
  sub_20F8EE66C(a1 + 13496, v127 + 13496, a4 + 9, v58[27], v58[28]);
  sub_20F8EF744(a1 + 392, v127 + 392, a4 + 6, *v58, v58[1]);
  sub_20F8F051C(a1 + 1832, v127 + 1832, a4 + 6, a4[3], a4[4]);
  sub_20F8EF744(a1 + 3272, v127 + 3272, a4 + 6, a4[6], a4[7]);
  sub_20F8EF744(a1 + 4712, v127 + 4712, a4 + 6, a4[9], a4[10]);
  sub_20F8EE66C(a1 + 6152, v127 + 6152, a4 + 6, a4[12], a4[13]);
  sub_20F8EFFB4(a1 + 7592, v127 + 7592, a4 + 6, a4[15], a4[16]);
  sub_20F8EE66C(a1 + 9032, v127 + 9032, a4 + 6, a4[18], a4[19]);
  sub_20F8EF468(a1 + 10472, v127 + 10472, a4 + 6, a4[21], a4[22]);
  sub_20F8EF468(a1 + 11912, v127 + 11912, a4 + 6, a4[24], a4[25]);
  sub_20F8EE66C(a1 + 13352, v127 + 13352, a4 + 6, v58[27], v58[28]);
  sub_20F8F051C(a1 + 248, v127 + 248, a4 + 3, *v58, v58[1]);
  sub_20F8F0848(a1 + 1688, v127 + 1688, a4 + 3, a4[3], a4[4]);
  sub_20F8F051C(a1 + 3128, v127 + 3128, a4 + 3, a4[6], a4[7]);
  sub_20F8F051C(a1 + 4568, v127 + 4568, a4 + 3, a4[9], a4[10]);
  sub_20F8EE940(a1 + 6008, v127 + 6008, a4 + 3, a4[12], a4[13]);
  sub_20F8EEC2C(a1 + 7448, v127 + 7448, a4 + 3, a4[15], a4[16]);
  sub_20F8EE940(a1 + 8888, v127 + 8888, a4 + 3, a4[18], a4[19]);
  sub_20F8EF744(a1 + 10328, v127 + 10328, a4 + 3, a4[21], a4[22]);
  sub_20F8EF744(a1 + 11768, v127 + 11768, a4 + 3, a4[24], a4[25]);
  sub_20F8EE940(a1 + 13208, v127 + 13208, a4 + 3, v58[27], v58[28]);
  sub_20F8EF744(a1 + 104, v127 + 104, v58, *v58, v58[1]);
  sub_20F8F051C(a1 + 1544, v127 + 1544, v58, a4[3], v58[4]);
  sub_20F8EF744(a1 + 2984, v127 + 2984, v58, a4[6], v58[7]);
  sub_20F8EF744(a1 + 4424, v127 + 4424, v58, a4[9], v58[10]);
  sub_20F8EE66C(a1 + 5864, v127 + 5864, v58, a4[12], v58[13]);
  sub_20F8EFFB4(a1 + 7304, v127 + 7304, v58, a4[15], v58[16]);
  sub_20F8EE66C(a1 + 8744, v127 + 8744, v58, a4[18], v58[19]);
  sub_20F8EF468(a1 + 10184, v127 + 10184, v58, a4[21], v58[22]);
  sub_20F8EF468(a1 + 11624, v127 + 11624, v58, a4[24], v58[25]);
  sub_20F8EE66C(a1 + 13064, v127 + 13064, v58, v58[27], v58[28]);
  v60 = *a4;
  v61 = a4[1];
  if (*a4 != v61)
  {
    do
    {
      v62 = *v60;
      v63 = v60[1];
      v60 += 2;
      v64 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 64) + 6 * v62);
      v65 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 64) + 6 * v63);
      result = *(__n128 *)(v64 + 32);
      v66 = *(_OWORD *)v64;
      *(_OWORD *)(v65 + 16) = *(_OWORD *)(v64 + 16);
      *(__n128 *)(v65 + 32) = result;
      *(_OWORD *)v65 = v66;
    }
    while (v60 != v61);
  }
  v67 = a4[3];
  for (i = a4[4]; v67 != i; *(_OWORD *)(v72 + 16) = v75)
  {
    v69 = *v67;
    v70 = v67[1];
    v67 += 2;
    v71 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 68) + 9 * v69);
    v72 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 68) + 9 * v70);
    result.n128_u64[0] = *(_QWORD *)(v71 + 64);
    v73 = *(_OWORD *)(v71 + 48);
    v74 = *(_OWORD *)v71;
    v75 = *(_OWORD *)(v71 + 16);
    *(_OWORD *)(v72 + 32) = *(_OWORD *)(v71 + 32);
    *(_OWORD *)(v72 + 48) = v73;
    *(_QWORD *)(v72 + 64) = result.n128_u64[0];
    *(_OWORD *)v72 = v74;
  }
  v76 = a4[6];
  for (j = a4[7]; v76 != j; *(_OWORD *)v81 = v82)
  {
    v78 = *v76;
    v79 = v76[1];
    v76 += 2;
    v80 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 72) + 6 * v78);
    v81 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 72) + 6 * v79);
    result = *(__n128 *)(v80 + 32);
    v82 = *(_OWORD *)v80;
    *(_OWORD *)(v81 + 16) = *(_OWORD *)(v80 + 16);
    *(__n128 *)(v81 + 32) = result;
  }
  v83 = a4[9];
  for (k = a4[10]; v83 != k; *(_OWORD *)v88 = v89)
  {
    v85 = *v83;
    v86 = v83[1];
    v83 += 2;
    v87 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 76) + 6 * v85);
    v88 = *(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 76) + 6 * v86);
    result = *(__n128 *)(v87 + 32);
    v89 = *(_OWORD *)v87;
    *(_OWORD *)(v88 + 16) = *(_OWORD *)(v87 + 16);
    *(__n128 *)(v88 + 32) = result;
  }
  v90 = a4[12];
  for (m = a4[13]; v90 != m; *v95 = result)
  {
    v92 = *v90;
    v93 = v90[1];
    v90 += 2;
    v94 = (__n128 *)(*(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 80) + 3 * v92));
    v95 = (__n128 *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 80) + 3 * v93));
    result = *v94;
    v95[1].n128_u64[0] = v94[1].n128_u64[0];
  }
  v96 = a4[15];
  for (n = a4[16];
        v96 != n;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 84) + v99)) = result.n128_u64[0])
  {
    v98 = *v96;
    v99 = v96[1];
    v96 += 2;
    result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 84) + v98));
  }
  v100 = a4[18];
  for (ii = a4[19]; v100 != ii; *v105 = result)
  {
    v102 = *v100;
    v103 = v100[1];
    v100 += 2;
    v104 = (__n128 *)(*(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 88) + 3 * v102));
    v105 = (__n128 *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 88) + 3 * v103));
    result = *v104;
    v105[1].n128_u64[0] = v104[1].n128_u64[0];
  }
  v106 = a4[21];
  for (jj = a4[22]; v106 != jj; v111[1] = v112)
  {
    v108 = *v106;
    v109 = v106[1];
    v106 += 2;
    v110 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 92) + 4 * v108);
    v111 = (_OWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 92) + 4 * v109));
    result = *(__n128 *)v110;
    v112 = *(_OWORD *)(v110 + 16);
    *v111 = *(_OWORD *)v110;
  }
  v113 = a4[24];
  for (kk = a4[25]; v113 != kk; v118[1] = v119)
  {
    v115 = *v113;
    v116 = v113[1];
    v113 += 2;
    v117 = *(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 96) + 4 * v115);
    v118 = (_OWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 96) + 4 * v116));
    result = *(__n128 *)v117;
    v119 = *(_OWORD *)(v117 + 16);
    *v118 = *(_OWORD *)v117;
  }
  v120 = a4[27];
  for (mm = a4[28]; v120 != mm; *v125 = result)
  {
    v122 = *v120;
    v123 = v120[1];
    v120 += 2;
    v124 = (__n128 *)(*(_QWORD *)v127 + 8 * (*(_DWORD *)(v127 + 100) + 3 * v122));
    v125 = (__n128 *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 100) + 3 * v123));
    result = *v124;
    v125[1].n128_u64[0] = v124[1].n128_u64[0];
  }
  return result;
}

void sub_20FA46484(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  int v362;
  _DWORD *v363;
  uint64_t v364;
  _QWORD *v365;
  _DWORD *v366;
  _DWORD *v367;
  uint64_t v368;
  unsigned int v369;
  char *v370;
  char *v371;
  uint64_t v372;
  _BYTE *v373;
  _DWORD *v374;
  uint64_t v376;
  int v377;
  _QWORD *v379;
  uint64_t *v380;
  char **v381;
  _DWORD *v382;
  uint64_t *v383;
  char **v384;
  _QWORD *v385;
  _DWORD *v386;
  char **v387;
  _QWORD *v388;
  _QWORD *v389;
  char **v390;
  int v391;

  v3 = a3;
  v4 = 0;
  v5 = 0;
  v374 = a1 + 3826;
  do
  {
    v6 = (_QWORD *)(v3 + 24 * v4);
    v7 = v3;
    v8 = (void *)*v6;
    v389 = v6;
    v6[1] = *v6;
    v383 = v6 + 1;
    v9 = (_QWORD *)(a2 + 24 * v4);
    v10 = (_DWORD *)*v9;
    v12 = v9 + 1;
    v11 = v9[1];
    if (*v9 != v11)
    {
      v13 = v11 - (_QWORD)v10;
      v14 = (v11 - (uint64_t)v10) >> 2;
      v380 = (uint64_t *)(v7 + 24 * v4 + 16);
      if (v14 > (*v380 - (uint64_t)v8) >> 2)
      {
        if ((v13 & 0x8000000000000000) != 0)
LABEL_366:
          sub_20E867F44();
        v15 = (char *)operator new(v13);
        *v389 = v15;
        *v383 = (uint64_t)v15;
        *v380 = (uint64_t)&v15[4 * v14];
        if (v8)
          operator delete(v8);
      }
      v377 = v5;
      v376 = v4;
      v16 = &v374[6 * v4];
      v17 = (_DWORD *)*v9;
      v18 = *(_DWORD **)v16;
      v19 = v16 + 2;
      v20 = (_DWORD *)*((_QWORD *)v16 + 1);
      v21 = (_DWORD *)*v12;
      if (*(_DWORD **)v16 == v20)
      {
        v22 = 0;
        v23 = v380;
        v24 = v383;
      }
      else
      {
        v22 = 0;
        v23 = v380;
        v24 = v383;
        while (*v18 < *v17)
        {
          ++v18;
          ++v22;
          if (v18 == v20)
            goto LABEL_2;
        }
      }
      if (v17 != v21 && v18 != v20)
      {
        v386 = v21;
        v379 = v16 + 2;
        while (1)
        {
          if (*v17 != *v18)
          {
            ++v18;
            if (++v17 == v21)
              goto LABEL_2;
            goto LABEL_25;
          }
          v25 = (char *)*v24;
          v26 = *v23;
          if (*v24 < (unint64_t)*v23)
          {
            *(_DWORD *)v25 = v22;
            *v24 = (uint64_t)(v25 + 4);
            v27 = v18 + 1;
            v28 = *v19 - (_QWORD)(v18 + 1);
            if ((_DWORD *)*v19 == v18 + 1)
              goto LABEL_22;
LABEL_21:
            memmove(v18, v27, v28);
            goto LABEL_22;
          }
          v29 = (_BYTE *)*v389;
          v30 = (uint64_t)&v25[-*v389];
          v31 = v30 >> 2;
          v32 = (v30 >> 2) + 1;
          if (v32 >> 62)
            goto LABEL_366;
          v33 = v26 - (_QWORD)v29;
          if (v33 >> 1 > v32)
            v32 = v33 >> 1;
          v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v32;
          if (v34)
          {
            if (v34 >> 62)
              sub_20E877A38();
            v35 = operator new(4 * v34);
            v36 = &v35[4 * v31];
            *v36 = v22;
            v37 = (uint64_t)(v36 + 1);
            v38 = v25 - v29;
            if (v25 == v29)
            {
LABEL_39:
              v24 = v383;
              goto LABEL_45;
            }
          }
          else
          {
            v35 = 0;
            v36 = (_DWORD *)(4 * v31);
            *(_DWORD *)(4 * v31) = v22;
            v37 = 4 * v31 + 4;
            v38 = v25 - v29;
            if (v25 == v29)
              goto LABEL_39;
          }
          v39 = v38 - 4;
          if (v39 < 0x2C)
            break;
          v40 = v25 - &v35[v30];
          v24 = v383;
          if (v40 < 0x20)
            goto LABEL_44;
          v41 = (v39 >> 2) + 1;
          v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
          v43 = &v25[-v42];
          v36 = (_DWORD *)((char *)v36 - v42);
          v44 = &v35[4 * v31 - 16];
          v45 = v25 - 16;
          v46 = v41 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 8;
          }
          while (v46);
          v25 = v43;
          if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_44;
LABEL_45:
          *v389 = v36;
          *v24 = v37;
          v23 = v380;
          *v380 = (uint64_t)&v35[4 * v34];
          if (v29)
            operator delete(v29);
          v19 = v379;
          *v24 = v37;
          v27 = v18 + 1;
          v28 = *v379 - (_QWORD)(v18 + 1);
          if ((_DWORD *)*v379 != v18 + 1)
            goto LABEL_21;
LABEL_22:
          *v19 = (char *)v18 + v28;
          --v20;
          v21 = v386;
          if (++v17 == v386)
            goto LABEL_2;
LABEL_25:
          ++v22;
          if (v18 == v20)
            goto LABEL_2;
        }
        v24 = v383;
        do
        {
LABEL_44:
          v48 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *--v36 = v48;
        }
        while (v25 != v29);
        goto LABEL_45;
      }
LABEL_2:
      v5 = v377 | (*v389 != *v24);
      v4 = v376;
    }
    ++v4;
    v3 = a3;
  }
  while (v4 != 10);
  if ((v5 & 1) != 0)
  {
    v49 = (uint64_t)(a1 + 350);
    v50 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v50)
    {
      v51 = (v50 >> 2) - 1;
      do
        sub_20F8ECDF0(v49, *(_DWORD *)(*(_QWORD *)a3 + 4 * v51--));
      while (v51 != -1);
    }
    sub_20F8ECB18(v49, (char **)(a3 + 216));
    v52 = (uint64_t)(a1 + 710);
    v53 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v53)
    {
      v54 = (v53 >> 2) - 1;
      do
        sub_20F8ECDF0(v52, *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4 * v54--));
      while (v54 != -1);
    }
    v387 = (char **)(a3 + 24);
    v390 = (char **)(a3 + 216);
    sub_20F8ECB18(v52, (char **)(a3 + 216));
    v55 = (uint64_t)(a1 + 1070);
    v56 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v56)
    {
      v57 = (v56 >> 2) - 1;
      do
        sub_20F8ECDF0(v55, *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v57--));
      while (v57 != -1);
    }
    sub_20F8ECB18(v55, v390);
    v58 = (uint64_t)(a1 + 1430);
    v59 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v59)
    {
      v60 = (v59 >> 2) - 1;
      do
        sub_20F8ECDF0(v58, *(_DWORD *)(*(_QWORD *)(a3 + 72) + 4 * v60--));
      while (v60 != -1);
    }
    sub_20F8ECB18(v58, v390);
    v61 = (uint64_t)(a1 + 1790);
    v62 = (_QWORD *)(a3 + 96);
    v63 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v63)
    {
      v64 = (v63 >> 2) - 1;
      do
        sub_20F8ECDF0(v61, *(_DWORD *)(*v62 + 4 * v64--));
      while (v64 != -1);
    }
    sub_20F8ECB18(v61, v390);
    v65 = (uint64_t)(a1 + 2150);
    v66 = (_QWORD *)(a3 + 120);
    v67 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v67)
    {
      v68 = (v67 >> 2) - 1;
      do
        sub_20F8ECDF0(v65, *(_DWORD *)(*v66 + 4 * v68--));
      while (v68 != -1);
    }
    sub_20F8ECB18(v65, v390);
    v69 = (uint64_t)(a1 + 2510);
    v70 = (_QWORD *)(a3 + 144);
    v71 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v71)
    {
      v72 = (v71 >> 2) - 1;
      do
        sub_20F8ECDF0(v69, *(_DWORD *)(*v70 + 4 * v72--));
      while (v72 != -1);
    }
    sub_20F8ECB18(v69, v390);
    v73 = (uint64_t)(a1 + 2870);
    v74 = (_QWORD *)(a3 + 168);
    v75 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v75)
    {
      v76 = (v75 >> 2) - 1;
      do
        sub_20F8ECDF0(v73, *(_DWORD *)(*v74 + 4 * v76--));
      while (v76 != -1);
    }
    v381 = (char **)(a3 + 72);
    sub_20F8ECB18(v73, v390);
    v77 = (uint64_t)(a1 + 3230);
    v78 = (_QWORD *)(a3 + 192);
    v79 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v79)
    {
      v80 = (v79 >> 2) - 1;
      do
        sub_20F8ECDF0(v77, *(_DWORD *)(*v78 + 4 * v80--));
      while (v80 != -1);
    }
    sub_20F8ECB18(v77, v390);
    v81 = (uint64_t)(a1 + 3590);
    v82 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v82)
    {
      v83 = (v82 >> 2) - 1;
      do
        sub_20F8ECDF0(v81, *(_DWORD *)&(*v390)[4 * v83--]);
      while (v83 != -1);
    }
    v384 = (char **)(a3 + 48);
    sub_20F8ECB18(v81, v390);
    v84 = (uint64_t)(a1 + 314);
    v85 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v85)
    {
      v86 = (v85 >> 2) - 1;
      do
        sub_20F8ECDF0(v84, *(_DWORD *)(*(_QWORD *)a3 + 4 * v86--));
      while (v86 != -1);
    }
    sub_20F8ECB18(v84, (char **)(a3 + 192));
    v87 = (uint64_t)(a1 + 674);
    v88 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v88)
    {
      v89 = (v88 >> 2) - 1;
      do
        sub_20F8ECDF0(v87, *(_DWORD *)&(*v387)[4 * v89--]);
      while (v89 != -1);
    }
    sub_20F8ECB18(v87, (char **)(a3 + 192));
    v90 = (uint64_t)(a1 + 1034);
    v91 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v91)
    {
      v92 = (v91 >> 2) - 1;
      do
        sub_20F8ECDF0(v90, *(_DWORD *)&(*v384)[4 * v92--]);
      while (v92 != -1);
    }
    sub_20F8ECB18(v90, (char **)(a3 + 192));
    v93 = (uint64_t)(a1 + 1394);
    v94 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v94)
    {
      v95 = (v94 >> 2) - 1;
      do
        sub_20F8ECDF0(v93, *(_DWORD *)&(*v381)[4 * v95--]);
      while (v95 != -1);
    }
    sub_20F8ECB18(v93, (char **)(a3 + 192));
    v96 = (uint64_t)(a1 + 1754);
    v97 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v97)
    {
      v98 = (v97 >> 2) - 1;
      do
        sub_20F8ECDF0(v96, *(_DWORD *)(*v62 + 4 * v98--));
      while (v98 != -1);
    }
    sub_20F8ECB18(v96, (char **)(a3 + 192));
    v99 = (uint64_t)(a1 + 2114);
    v100 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v100)
    {
      v101 = (v100 >> 2) - 1;
      do
        sub_20F8ECDF0(v99, *(_DWORD *)(*v66 + 4 * v101--));
      while (v101 != -1);
    }
    sub_20F8ECB18(v99, (char **)(a3 + 192));
    v102 = (uint64_t)(a1 + 2474);
    v103 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v103)
    {
      v104 = (v103 >> 2) - 1;
      do
        sub_20F8ECDF0(v102, *(_DWORD *)(*v70 + 4 * v104--));
      while (v104 != -1);
    }
    sub_20F8ECB18(v102, (char **)(a3 + 192));
    v105 = (uint64_t)(a1 + 2834);
    v106 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v106)
    {
      v107 = (v106 >> 2) - 1;
      do
        sub_20F8ECDF0(v105, *(_DWORD *)(*v74 + 4 * v107--));
      while (v107 != -1);
    }
    sub_20F8ECB18(v105, (char **)(a3 + 192));
    v108 = (uint64_t)(a1 + 3194);
    v109 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v109)
    {
      v110 = (v109 >> 2) - 1;
      do
        sub_20F8ECDF0(v108, *(_DWORD *)(*v78 + 4 * v110--));
      while (v110 != -1);
    }
    sub_20F8ECB18(v108, (char **)(a3 + 192));
    v111 = (uint64_t)(a1 + 3554);
    v112 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v112)
    {
      v113 = (v112 >> 2) - 1;
      do
        sub_20F8ECDF0(v111, *(_DWORD *)&(*v390)[4 * v113--]);
      while (v113 != -1);
    }
    sub_20F8ECB18(v111, (char **)(a3 + 192));
    v114 = (uint64_t)(a1 + 278);
    v115 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v115)
    {
      v116 = (v115 >> 2) - 1;
      do
        sub_20F8ECDF0(v114, *(_DWORD *)(*(_QWORD *)a3 + 4 * v116--));
      while (v116 != -1);
    }
    sub_20F8ECB18(v114, (char **)(a3 + 168));
    v117 = (uint64_t)(a1 + 638);
    v118 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v118)
    {
      v119 = (v118 >> 2) - 1;
      do
        sub_20F8ECDF0(v117, *(_DWORD *)&(*v387)[4 * v119--]);
      while (v119 != -1);
    }
    sub_20F8ECB18(v117, (char **)(a3 + 168));
    v120 = (uint64_t)(a1 + 998);
    v121 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v121)
    {
      v122 = (v121 >> 2) - 1;
      do
        sub_20F8ECDF0(v120, *(_DWORD *)&(*v384)[4 * v122--]);
      while (v122 != -1);
    }
    sub_20F8ECB18(v120, (char **)(a3 + 168));
    v123 = (uint64_t)(a1 + 1358);
    v124 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v124)
    {
      v125 = (v124 >> 2) - 1;
      do
        sub_20F8ECDF0(v123, *(_DWORD *)&(*v381)[4 * v125--]);
      while (v125 != -1);
    }
    sub_20F8ECB18(v123, (char **)(a3 + 168));
    v126 = (uint64_t)(a1 + 1718);
    v127 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v127)
    {
      v128 = (v127 >> 2) - 1;
      do
        sub_20F8ECDF0(v126, *(_DWORD *)(*v62 + 4 * v128--));
      while (v128 != -1);
    }
    sub_20F8ECB18(v126, (char **)(a3 + 168));
    v129 = (uint64_t)(a1 + 2078);
    v130 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v130)
    {
      v131 = (v130 >> 2) - 1;
      do
        sub_20F8ECDF0(v129, *(_DWORD *)(*v66 + 4 * v131--));
      while (v131 != -1);
    }
    sub_20F8ECB18(v129, (char **)(a3 + 168));
    v132 = (uint64_t)(a1 + 2438);
    v133 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v133)
    {
      v134 = (v133 >> 2) - 1;
      do
        sub_20F8ECDF0(v132, *(_DWORD *)(*v70 + 4 * v134--));
      while (v134 != -1);
    }
    sub_20F8ECB18(v132, (char **)(a3 + 168));
    v135 = (uint64_t)(a1 + 2798);
    v136 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v136)
    {
      v137 = (v136 >> 2) - 1;
      do
        sub_20F8ECDF0(v135, *(_DWORD *)(*v74 + 4 * v137--));
      while (v137 != -1);
    }
    sub_20F8ECB18(v135, (char **)(a3 + 168));
    v138 = (uint64_t)(a1 + 3158);
    v139 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v139)
    {
      v140 = (v139 >> 2) - 1;
      do
        sub_20F8ECDF0(v138, *(_DWORD *)(*v78 + 4 * v140--));
      while (v140 != -1);
    }
    sub_20F8ECB18(v138, (char **)(a3 + 168));
    v141 = (uint64_t)(a1 + 3518);
    v142 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v142)
    {
      v143 = (v142 >> 2) - 1;
      do
        sub_20F8ECDF0(v141, *(_DWORD *)&(*v390)[4 * v143--]);
      while (v143 != -1);
    }
    sub_20F8ECB18(v141, (char **)(a3 + 168));
    v144 = (uint64_t)(a1 + 242);
    v145 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v145)
    {
      v146 = (v145 >> 2) - 1;
      do
        sub_20F8ECDF0(v144, *(_DWORD *)(*(_QWORD *)a3 + 4 * v146--));
      while (v146 != -1);
    }
    sub_20F8ECB18(v144, (char **)(a3 + 144));
    v147 = (uint64_t)(a1 + 602);
    v148 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v148)
    {
      v149 = (v148 >> 2) - 1;
      do
        sub_20F8ECDF0(v147, *(_DWORD *)&(*v387)[4 * v149--]);
      while (v149 != -1);
    }
    sub_20F8ECB18(v147, (char **)(a3 + 144));
    v150 = (uint64_t)(a1 + 962);
    v151 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v151)
    {
      v152 = (v151 >> 2) - 1;
      do
        sub_20F8ECDF0(v150, *(_DWORD *)&(*v384)[4 * v152--]);
      while (v152 != -1);
    }
    sub_20F8ECB18(v150, (char **)(a3 + 144));
    v153 = (uint64_t)(a1 + 1322);
    v154 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v154)
    {
      v155 = (v154 >> 2) - 1;
      do
        sub_20F8ECDF0(v153, *(_DWORD *)&(*v381)[4 * v155--]);
      while (v155 != -1);
    }
    sub_20F8ECB18(v153, (char **)(a3 + 144));
    v156 = (uint64_t)(a1 + 1682);
    v157 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v157)
    {
      v158 = (v157 >> 2) - 1;
      do
        sub_20F8ECDF0(v156, *(_DWORD *)(*v62 + 4 * v158--));
      while (v158 != -1);
    }
    sub_20F8ECB18(v156, (char **)(a3 + 144));
    v159 = (uint64_t)(a1 + 2042);
    v160 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v160)
    {
      v161 = (v160 >> 2) - 1;
      do
        sub_20F8ECDF0(v159, *(_DWORD *)(*v66 + 4 * v161--));
      while (v161 != -1);
    }
    sub_20F8ECB18(v159, (char **)(a3 + 144));
    v162 = (uint64_t)(a1 + 2402);
    v163 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v163)
    {
      v164 = (v163 >> 2) - 1;
      do
        sub_20F8ECDF0(v162, *(_DWORD *)(*v70 + 4 * v164--));
      while (v164 != -1);
    }
    sub_20F8ECB18(v162, (char **)(a3 + 144));
    v165 = (uint64_t)(a1 + 2762);
    v166 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v166)
    {
      v167 = (v166 >> 2) - 1;
      do
        sub_20F8ECDF0(v165, *(_DWORD *)(*v74 + 4 * v167--));
      while (v167 != -1);
    }
    sub_20F8ECB18(v165, (char **)(a3 + 144));
    v168 = (uint64_t)(a1 + 3122);
    v169 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v169)
    {
      v170 = (v169 >> 2) - 1;
      do
        sub_20F8ECDF0(v168, *(_DWORD *)(*v78 + 4 * v170--));
      while (v170 != -1);
    }
    sub_20F8ECB18(v168, (char **)(a3 + 144));
    v171 = (uint64_t)(a1 + 3482);
    v172 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v172)
    {
      v173 = (v172 >> 2) - 1;
      do
        sub_20F8ECDF0(v171, *(_DWORD *)&(*v390)[4 * v173--]);
      while (v173 != -1);
    }
    sub_20F8ECB18(v171, (char **)(a3 + 144));
    v174 = (uint64_t)(a1 + 206);
    v175 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v175)
    {
      v176 = (v175 >> 2) - 1;
      do
        sub_20F8ECDF0(v174, *(_DWORD *)(*(_QWORD *)a3 + 4 * v176--));
      while (v176 != -1);
    }
    sub_20F8ECB18(v174, (char **)(a3 + 120));
    v177 = (uint64_t)(a1 + 566);
    v178 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v178)
    {
      v179 = (v178 >> 2) - 1;
      do
        sub_20F8ECDF0(v177, *(_DWORD *)&(*v387)[4 * v179--]);
      while (v179 != -1);
    }
    sub_20F8ECB18(v177, (char **)(a3 + 120));
    v180 = (uint64_t)(a1 + 926);
    v181 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v181)
    {
      v182 = (v181 >> 2) - 1;
      do
        sub_20F8ECDF0(v180, *(_DWORD *)&(*v384)[4 * v182--]);
      while (v182 != -1);
    }
    sub_20F8ECB18(v180, (char **)(a3 + 120));
    v183 = (uint64_t)(a1 + 1286);
    v184 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v184)
    {
      v185 = (v184 >> 2) - 1;
      do
        sub_20F8ECDF0(v183, *(_DWORD *)&(*v381)[4 * v185--]);
      while (v185 != -1);
    }
    sub_20F8ECB18(v183, (char **)(a3 + 120));
    v186 = (uint64_t)(a1 + 1646);
    v187 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v187)
    {
      v188 = (v187 >> 2) - 1;
      do
        sub_20F8ECDF0(v186, *(_DWORD *)(*v62 + 4 * v188--));
      while (v188 != -1);
    }
    sub_20F8ECB18(v186, (char **)(a3 + 120));
    v189 = (uint64_t)(a1 + 2006);
    v190 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v190)
    {
      v191 = (v190 >> 2) - 1;
      do
        sub_20F8ECDF0(v189, *(_DWORD *)(*v66 + 4 * v191--));
      while (v191 != -1);
    }
    sub_20F8ECB18(v189, (char **)(a3 + 120));
    v192 = (uint64_t)(a1 + 2366);
    v193 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v193)
    {
      v194 = (v193 >> 2) - 1;
      do
        sub_20F8ECDF0(v192, *(_DWORD *)(*v70 + 4 * v194--));
      while (v194 != -1);
    }
    sub_20F8ECB18(v192, (char **)(a3 + 120));
    v195 = (uint64_t)(a1 + 2726);
    v196 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v196)
    {
      v197 = (v196 >> 2) - 1;
      do
        sub_20F8ECDF0(v195, *(_DWORD *)(*v74 + 4 * v197--));
      while (v197 != -1);
    }
    sub_20F8ECB18(v195, (char **)(a3 + 120));
    v198 = (uint64_t)(a1 + 3086);
    v199 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v199)
    {
      v200 = (v199 >> 2) - 1;
      do
        sub_20F8ECDF0(v198, *(_DWORD *)(*v78 + 4 * v200--));
      while (v200 != -1);
    }
    sub_20F8ECB18(v198, (char **)(a3 + 120));
    v201 = (uint64_t)(a1 + 3446);
    v202 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v202)
    {
      v203 = (v202 >> 2) - 1;
      do
        sub_20F8ECDF0(v201, *(_DWORD *)&(*v390)[4 * v203--]);
      while (v203 != -1);
    }
    sub_20F8ECB18(v201, (char **)(a3 + 120));
    v204 = (uint64_t)(a1 + 170);
    v205 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v205)
    {
      v206 = (v205 >> 2) - 1;
      do
        sub_20F8ECDF0(v204, *(_DWORD *)(*(_QWORD *)a3 + 4 * v206--));
      while (v206 != -1);
    }
    sub_20F8ECB18(v204, (char **)(a3 + 96));
    v207 = (uint64_t)(a1 + 530);
    v208 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v208)
    {
      v209 = (v208 >> 2) - 1;
      do
        sub_20F8ECDF0(v207, *(_DWORD *)&(*v387)[4 * v209--]);
      while (v209 != -1);
    }
    sub_20F8ECB18(v207, (char **)(a3 + 96));
    v210 = (uint64_t)(a1 + 890);
    v211 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v211)
    {
      v212 = (v211 >> 2) - 1;
      do
        sub_20F8ECDF0(v210, *(_DWORD *)&(*v384)[4 * v212--]);
      while (v212 != -1);
    }
    sub_20F8ECB18(v210, (char **)(a3 + 96));
    v213 = (uint64_t)(a1 + 1250);
    v214 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v214)
    {
      v215 = (v214 >> 2) - 1;
      do
        sub_20F8ECDF0(v213, *(_DWORD *)&(*v381)[4 * v215--]);
      while (v215 != -1);
    }
    sub_20F8ECB18(v213, (char **)(a3 + 96));
    v216 = (uint64_t)(a1 + 1610);
    v217 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v217)
    {
      v218 = (v217 >> 2) - 1;
      do
        sub_20F8ECDF0(v216, *(_DWORD *)(*v62 + 4 * v218--));
      while (v218 != -1);
    }
    sub_20F8ECB18(v216, (char **)(a3 + 96));
    v219 = (uint64_t)(a1 + 1970);
    v220 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v220)
    {
      v221 = (v220 >> 2) - 1;
      do
        sub_20F8ECDF0(v219, *(_DWORD *)(*v66 + 4 * v221--));
      while (v221 != -1);
    }
    sub_20F8ECB18(v219, (char **)(a3 + 96));
    v222 = (uint64_t)(a1 + 2330);
    v223 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v223)
    {
      v224 = (v223 >> 2) - 1;
      do
        sub_20F8ECDF0(v222, *(_DWORD *)(*v70 + 4 * v224--));
      while (v224 != -1);
    }
    sub_20F8ECB18(v222, (char **)(a3 + 96));
    v225 = (uint64_t)(a1 + 2690);
    v226 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v226)
    {
      v227 = (v226 >> 2) - 1;
      do
        sub_20F8ECDF0(v225, *(_DWORD *)(*v74 + 4 * v227--));
      while (v227 != -1);
    }
    sub_20F8ECB18(v225, (char **)(a3 + 96));
    v228 = (uint64_t)(a1 + 3050);
    v229 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v229)
    {
      v230 = (v229 >> 2) - 1;
      do
        sub_20F8ECDF0(v228, *(_DWORD *)(*v78 + 4 * v230--));
      while (v230 != -1);
    }
    sub_20F8ECB18(v228, (char **)(a3 + 96));
    v231 = (uint64_t)(a1 + 3410);
    v232 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v232)
    {
      v233 = (v232 >> 2) - 1;
      do
        sub_20F8ECDF0(v231, *(_DWORD *)&(*v390)[4 * v233--]);
      while (v233 != -1);
    }
    sub_20F8ECB18(v231, (char **)(a3 + 96));
    v234 = (uint64_t)(a1 + 134);
    v235 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v235)
    {
      v236 = (v235 >> 2) - 1;
      do
        sub_20F8ECDF0(v234, *(_DWORD *)(*(_QWORD *)a3 + 4 * v236--));
      while (v236 != -1);
    }
    sub_20F8ECB18(v234, v381);
    v237 = (uint64_t)(a1 + 494);
    v238 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v238)
    {
      v239 = (v238 >> 2) - 1;
      do
        sub_20F8ECDF0(v237, *(_DWORD *)&(*v387)[4 * v239--]);
      while (v239 != -1);
    }
    sub_20F8ECB18(v237, v381);
    v240 = (uint64_t)(a1 + 854);
    v241 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v241)
    {
      v242 = (v241 >> 2) - 1;
      do
        sub_20F8ECDF0(v240, *(_DWORD *)&(*v384)[4 * v242--]);
      while (v242 != -1);
    }
    sub_20F8ECB18(v240, v381);
    v243 = (uint64_t)(a1 + 1214);
    v244 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v244)
    {
      v245 = (v244 >> 2) - 1;
      do
        sub_20F8ECDF0(v243, *(_DWORD *)&(*v381)[4 * v245--]);
      while (v245 != -1);
    }
    sub_20F8ECB18(v243, v381);
    v246 = (uint64_t)(a1 + 1574);
    v247 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v247)
    {
      v248 = (v247 >> 2) - 1;
      do
        sub_20F8ECDF0(v246, *(_DWORD *)(*v62 + 4 * v248--));
      while (v248 != -1);
    }
    sub_20F8ECB18(v246, v381);
    v249 = (uint64_t)(a1 + 1934);
    v250 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v250)
    {
      v251 = (v250 >> 2) - 1;
      do
        sub_20F8ECDF0(v249, *(_DWORD *)(*v66 + 4 * v251--));
      while (v251 != -1);
    }
    sub_20F8ECB18(v249, v381);
    v252 = (uint64_t)(a1 + 2294);
    v253 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v253)
    {
      v254 = (v253 >> 2) - 1;
      do
        sub_20F8ECDF0(v252, *(_DWORD *)(*v70 + 4 * v254--));
      while (v254 != -1);
    }
    sub_20F8ECB18(v252, v381);
    v255 = (uint64_t)(a1 + 2654);
    v256 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v256)
    {
      v257 = (v256 >> 2) - 1;
      do
        sub_20F8ECDF0(v255, *(_DWORD *)(*v74 + 4 * v257--));
      while (v257 != -1);
    }
    sub_20F8ECB18(v255, v381);
    v258 = (uint64_t)(a1 + 3014);
    v259 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v259)
    {
      v260 = (v259 >> 2) - 1;
      do
        sub_20F8ECDF0(v258, *(_DWORD *)(*v78 + 4 * v260--));
      while (v260 != -1);
    }
    sub_20F8ECB18(v258, v381);
    v261 = (uint64_t)(a1 + 3374);
    v262 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v262)
    {
      v263 = (v262 >> 2) - 1;
      do
        sub_20F8ECDF0(v261, *(_DWORD *)&(*v390)[4 * v263--]);
      while (v263 != -1);
    }
    sub_20F8ECB18(v261, v381);
    v264 = (uint64_t)(a1 + 98);
    v265 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v265)
    {
      v266 = (v265 >> 2) - 1;
      do
        sub_20F8ECDF0(v264, *(_DWORD *)(*(_QWORD *)a3 + 4 * v266--));
      while (v266 != -1);
    }
    sub_20F8ECB18(v264, v384);
    v267 = (uint64_t)(a1 + 458);
    v268 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v268)
    {
      v269 = (v268 >> 2) - 1;
      do
        sub_20F8ECDF0(v267, *(_DWORD *)&(*v387)[4 * v269--]);
      while (v269 != -1);
    }
    sub_20F8ECB18(v267, v384);
    v270 = (uint64_t)(a1 + 818);
    v271 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v271)
    {
      v272 = (v271 >> 2) - 1;
      do
        sub_20F8ECDF0(v270, *(_DWORD *)&(*v384)[4 * v272--]);
      while (v272 != -1);
    }
    sub_20F8ECB18(v270, v384);
    v273 = (uint64_t)(a1 + 1178);
    v274 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v274)
    {
      v275 = (v274 >> 2) - 1;
      do
        sub_20F8ECDF0(v273, *(_DWORD *)&(*v381)[4 * v275--]);
      while (v275 != -1);
    }
    sub_20F8ECB18(v273, v384);
    v276 = (uint64_t)(a1 + 1538);
    v277 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v277)
    {
      v278 = (v277 >> 2) - 1;
      do
        sub_20F8ECDF0(v276, *(_DWORD *)(*v62 + 4 * v278--));
      while (v278 != -1);
    }
    sub_20F8ECB18(v276, v384);
    v279 = (uint64_t)(a1 + 1898);
    v280 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v280)
    {
      v281 = (v280 >> 2) - 1;
      do
        sub_20F8ECDF0(v279, *(_DWORD *)(*v66 + 4 * v281--));
      while (v281 != -1);
    }
    sub_20F8ECB18(v279, v384);
    v282 = (uint64_t)(a1 + 2258);
    v283 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v283)
    {
      v284 = (v283 >> 2) - 1;
      do
        sub_20F8ECDF0(v282, *(_DWORD *)(*v70 + 4 * v284--));
      while (v284 != -1);
    }
    sub_20F8ECB18(v282, v384);
    v285 = (uint64_t)(a1 + 2618);
    v286 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v286)
    {
      v287 = (v286 >> 2) - 1;
      do
        sub_20F8ECDF0(v285, *(_DWORD *)(*v74 + 4 * v287--));
      while (v287 != -1);
    }
    sub_20F8ECB18(v285, v384);
    v288 = (uint64_t)(a1 + 2978);
    v289 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v289)
    {
      v290 = (v289 >> 2) - 1;
      do
        sub_20F8ECDF0(v288, *(_DWORD *)(*v78 + 4 * v290--));
      while (v290 != -1);
    }
    sub_20F8ECB18(v288, v384);
    v291 = (uint64_t)(a1 + 3338);
    v292 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v292)
    {
      v293 = (v292 >> 2) - 1;
      do
        sub_20F8ECDF0(v291, *(_DWORD *)&(*v390)[4 * v293--]);
      while (v293 != -1);
    }
    sub_20F8ECB18(v291, v384);
    v294 = (uint64_t)(a1 + 62);
    v295 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v295)
    {
      v296 = (v295 >> 2) - 1;
      do
        sub_20F8ECDF0(v294, *(_DWORD *)(*(_QWORD *)a3 + 4 * v296--));
      while (v296 != -1);
    }
    sub_20F8ECB18(v294, v387);
    v297 = (uint64_t)(a1 + 422);
    v298 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v298)
    {
      v299 = (v298 >> 2) - 1;
      do
        sub_20F8ECDF0(v297, *(_DWORD *)&(*v387)[4 * v299--]);
      while (v299 != -1);
    }
    sub_20F8ECB18(v297, v387);
    v300 = (uint64_t)(a1 + 782);
    v301 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v301)
    {
      v302 = (v301 >> 2) - 1;
      do
        sub_20F8ECDF0(v300, *(_DWORD *)&(*v384)[4 * v302--]);
      while (v302 != -1);
    }
    sub_20F8ECB18(v300, v387);
    v303 = (uint64_t)(a1 + 1142);
    v304 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v304)
    {
      v305 = (v304 >> 2) - 1;
      do
        sub_20F8ECDF0(v303, *(_DWORD *)&(*v381)[4 * v305--]);
      while (v305 != -1);
    }
    sub_20F8ECB18(v303, v387);
    v306 = (uint64_t)(a1 + 1502);
    v307 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v307)
    {
      v308 = (v307 >> 2) - 1;
      do
        sub_20F8ECDF0(v306, *(_DWORD *)(*v62 + 4 * v308--));
      while (v308 != -1);
    }
    sub_20F8ECB18(v306, v387);
    v309 = (uint64_t)(a1 + 1862);
    v310 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v310)
    {
      v311 = (v310 >> 2) - 1;
      do
        sub_20F8ECDF0(v309, *(_DWORD *)(*v66 + 4 * v311--));
      while (v311 != -1);
    }
    sub_20F8ECB18(v309, v387);
    v312 = (uint64_t)(a1 + 2222);
    v313 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v313)
    {
      v314 = (v313 >> 2) - 1;
      do
        sub_20F8ECDF0(v312, *(_DWORD *)(*v70 + 4 * v314--));
      while (v314 != -1);
    }
    sub_20F8ECB18(v312, v387);
    v315 = (uint64_t)(a1 + 2582);
    v316 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v316)
    {
      v317 = (v316 >> 2) - 1;
      do
        sub_20F8ECDF0(v315, *(_DWORD *)(*v74 + 4 * v317--));
      while (v317 != -1);
    }
    sub_20F8ECB18(v315, v387);
    v318 = (uint64_t)(a1 + 2942);
    v319 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v319)
    {
      v320 = (v319 >> 2) - 1;
      do
        sub_20F8ECDF0(v318, *(_DWORD *)(*v78 + 4 * v320--));
      while (v320 != -1);
    }
    v321 = (uint64_t)(a1 + 26);
    sub_20F8ECB18(v318, v387);
    v322 = (uint64_t)(a1 + 3302);
    v323 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v323)
    {
      v324 = (v323 >> 2) - 1;
      do
        sub_20F8ECDF0(v322, *(_DWORD *)&(*v390)[4 * v324--]);
      while (v324 != -1);
    }
    sub_20F8ECB18(v322, v387);
    v325 = a3;
    v326 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v326)
    {
      v327 = (v326 >> 2) - 1;
      do
        sub_20F8ECDF0(v321, *(_DWORD *)(*(_QWORD *)a3 + 4 * v327--));
      while (v327 != -1);
    }
    sub_20F8ECB18(v321, (char **)a3);
    v328 = (uint64_t)(a1 + 386);
    v329 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    if (v329)
    {
      v330 = (v329 >> 2) - 1;
      do
        sub_20F8ECDF0(v328, *(_DWORD *)&(*v387)[4 * v330--]);
      while (v330 != -1);
    }
    sub_20F8ECB18(v328, (char **)a3);
    v331 = (uint64_t)(a1 + 746);
    v332 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
    if (v332)
    {
      v333 = (v332 >> 2) - 1;
      do
        sub_20F8ECDF0(v331, *(_DWORD *)&(*v384)[4 * v333--]);
      while (v333 != -1);
    }
    sub_20F8ECB18(v331, (char **)a3);
    v334 = (uint64_t)(a1 + 1106);
    v335 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
    if (v335)
    {
      v336 = (v335 >> 2) - 1;
      do
        sub_20F8ECDF0(v334, *(_DWORD *)&(*v381)[4 * v336--]);
      while (v336 != -1);
    }
    sub_20F8ECB18(v334, (char **)a3);
    v337 = (uint64_t)(a1 + 1466);
    v338 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96);
    if (v338)
    {
      v339 = (v338 >> 2) - 1;
      do
        sub_20F8ECDF0(v337, *(_DWORD *)(*v62 + 4 * v339--));
      while (v339 != -1);
    }
    sub_20F8ECB18(v337, (char **)a3);
    v340 = (uint64_t)(a1 + 1826);
    v341 = *(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120);
    if (v341)
    {
      v342 = (v341 >> 2) - 1;
      do
        sub_20F8ECDF0(v340, *(_DWORD *)(*v66 + 4 * v342--));
      while (v342 != -1);
    }
    sub_20F8ECB18(v340, (char **)a3);
    v343 = (uint64_t)(a1 + 2186);
    v344 = *(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144);
    if (v344)
    {
      v345 = (v344 >> 2) - 1;
      do
        sub_20F8ECDF0(v343, *(_DWORD *)(*v70 + 4 * v345--));
      while (v345 != -1);
    }
    sub_20F8ECB18(v343, (char **)a3);
    v346 = (uint64_t)(a1 + 2546);
    v347 = *(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168);
    if (v347)
    {
      v348 = (v347 >> 2) - 1;
      do
        sub_20F8ECDF0(v346, *(_DWORD *)(*v74 + 4 * v348--));
      while (v348 != -1);
    }
    sub_20F8ECB18(v346, (char **)a3);
    v349 = (uint64_t)(a1 + 2906);
    v350 = *(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192);
    if (v350)
    {
      v351 = (v350 >> 2) - 1;
      do
        sub_20F8ECDF0(v349, *(_DWORD *)(*v78 + 4 * v351--));
      while (v351 != -1);
    }
    sub_20F8ECB18(v349, (char **)a3);
    v352 = (uint64_t)(a1 + 3266);
    v353 = *(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216);
    if (v353)
    {
      v354 = (v353 >> 2) - 1;
      do
        sub_20F8ECDF0(v352, *(_DWORD *)&(*v390)[4 * v354--]);
      while (v354 != -1);
    }
    sub_20F8ECB18(v352, (char **)a3);
    v355 = 0;
    v356 = 0;
    v357 = *(_QWORD *)a1;
    v382 = a1 + 16;
    v358 = *(char **)a1;
    v359 = *(char **)a1;
    v360 = *(char **)a1;
    do
    {
      v362 = v382[v355];
      v382[v355] = v362 - v356;
      v363 = *(_DWORD **)(v325 + 24 * v355);
      v364 = v325 + 24 * v355;
      v367 = *(_DWORD **)(v364 + 8);
      v365 = (_QWORD *)(v364 + 8);
      v366 = v367;
      if (v363 != v367)
      {
        v385 = v365;
        v388 = (_QWORD *)(v325 + 24 * v355);
        v391 = v356;
        v368 = dword_2103B9910[v355];
        do
        {
          while (1)
          {
            v369 = v362 + *v363 * v368;
            v370 = (char *)(v357 + 8 * v369);
            if (v359 != v370)
              break;
            v359 += 8 * v368;
            if (++v363 == v366)
              goto LABEL_351;
          }
          v371 = (char *)(v357 + 8 * v369);
          if (v358 != v359)
          {
            v372 = v370 - v359;
            memmove(v360, v359, v370 - v359);
            v371 = &v360[v372];
            v357 = *(_QWORD *)a1;
          }
          v359 = (char *)(v357 + 8 * (v369 + v368));
          v360 = v371;
          v358 = v370;
          ++v363;
        }
        while (v363 != v366);
LABEL_351:
        v361 = (*v385 - *v388) >> 2;
        v325 = a3;
        a1[v355 + 6] -= v361;
        v356 = v391 + v368 * v361;
      }
      ++v355;
    }
    while (v355 != 10);
    if (v358 != v359)
    {
      v373 = (_BYTE *)(v357 + 8 * a1[4]);
      if (v373 != v359)
        memmove(v360, v359, v373 - v359);
    }
    sub_20F20CEEC(a1, a1[4] - v356, 1u);
  }
}

uint64_t sub_20FA485B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = a1[133];
  v3 = a1[134];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 208);
    if (*(_BYTE *)(v2 + 496) || (*(_BYTE *)(v4 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v2 + 216) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v4 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v2 + 216) + 8);
    }
    v2 += 504;
  }
  v5 = a1[136];
  v6 = a1[137];
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 136);
    if (*(_BYTE *)(v5 + 272) || (*(_BYTE *)(v7 + 4) & 6) != 0)
      ++*(_DWORD *)(v7 + 8);
    v5 += 280;
  }
  v8 = a1[139];
  v9 = a1[140];
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 136);
    if (*(_BYTE *)(v8 + 272) || (*(_BYTE *)(v10 + 4) & 6) != 0)
      ++*(_DWORD *)(v10 + 8);
    v8 += 280;
  }
  v11 = a1[142];
  v12 = a1[143];
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 136);
    if (*(_BYTE *)(v11 + 272) || (*(_BYTE *)(v13 + 4) & 6) != 0)
      ++*(_DWORD *)(v13 + 8);
    v11 += 280;
  }
  v14 = a1[145];
  v15 = a1[146];
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 64);
    if (*(_BYTE *)(v14 + 152) || (*(_BYTE *)(v16 + 4) & 6) != 0)
      ++*(_DWORD *)(v16 + 8);
    v14 += 160;
  }
  sub_20FA48B8C(a1[148], a1[149]);
  v17 = a1[151];
  for (i = a1[152]; v17 != i; v17 += 5336)
  {
    v19 = *(_QWORD *)(v17 + 5024);
    if (*(_BYTE *)(v17 + 5328)
      || (*(_BYTE *)(v19 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v17 + 5032) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v17 + 5040) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v17 + 5048) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v19 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v17 + 5032) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v17 + 5040) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v17 + 5048) + 8);
    }
  }
  v20 = a1[154];
  v21 = a1[155];
  while (v20 != v21)
  {
    v22 = *(_QWORD *)(v20 + 48);
    if (*(_BYTE *)(v20 + 136) || (*(_BYTE *)(v22 + 4) & 6) != 0)
      ++*(_DWORD *)(v22 + 8);
    v20 += 144;
  }
  v23 = a1[157];
  v24 = a1[158];
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_BYTE *)(v23 + 144) || (*(_BYTE *)(v25 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v23 + 56) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v25 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v23 + 56) + 8);
    }
    v23 += 152;
  }
  v26 = a1[160];
  for (j = a1[161]; v26 != j; v26 += 304)
  {
    v28 = *(_QWORD *)(v26 + 200);
    if (*(_BYTE *)(v26 + 296)
      || (*(_BYTE *)(v28 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v26 + 208) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v26 + 216) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v26 + 224) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v28 + 8);
      v29 = *(_QWORD *)(v26 + 216);
      ++*(_DWORD *)(*(_QWORD *)(v26 + 208) + 8);
      ++*(_DWORD *)(v29 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v26 + 224) + 8);
    }
  }
  sub_20F8DB8C0(a1[163], a1[164]);
  v30 = a1[166];
  v31 = a1[167];
  while (v30 != v31)
  {
    v32 = *(_QWORD *)(v30 + 48);
    if (*(_BYTE *)(v30 + 104) || (*(_BYTE *)(v32 + 4) & 6) != 0)
      ++*(_DWORD *)(v32 + 8);
    v30 += 112;
  }
  v33 = a1[169];
  v34 = a1[170];
  while (v33 != v34)
  {
    v35 = *(_QWORD *)(v33 + 96);
    if (*(_BYTE *)(v33 + 200) || (*(_BYTE *)(v35 + 4) & 6) != 0)
      ++*(_DWORD *)(v35 + 8);
    v33 += 208;
  }
  v36 = a1[172];
  v37 = a1[173];
  while (v36 != v37)
  {
    v38 = *(_QWORD *)(v36 + 96);
    if (*(_BYTE *)(v36 + 200) || (*(_BYTE *)(v38 + 4) & 6) != 0)
      ++*(_DWORD *)(v38 + 8);
    v36 += 208;
  }
  v39 = a1[175];
  v40 = a1[176];
  while (v39 != v40)
  {
    v41 = *(_QWORD *)(v39 + 80);
    if (*(_BYTE *)(v39 + 168) || (*(_BYTE *)(v41 + 4) & 6) != 0)
      ++*(_DWORD *)(v41 + 8);
    v39 += 176;
  }
  v42 = a1[178];
  v43 = a1[179];
  while (v42 != v43)
  {
    v44 = *(_QWORD *)(v42 + 80);
    if (*(_BYTE *)(v42 + 168) || (*(_BYTE *)(v44 + 4) & 6) != 0)
      ++*(_DWORD *)(v44 + 8);
    v42 += 176;
  }
  sub_20F59A8B0(a1[181], a1[182]);
  sub_20F8DB7EC(a1[184], a1[185]);
  sub_20F8DB684(a1[187], a1[188]);
  return sub_20FA48A9C(a1[190], a1[191]);
}

uint64_t sub_20FA48A9C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  for (; result != a2; result += 184)
  {
    v2 = *(_QWORD *)(result + 56);
    if (*(_BYTE *)(result + 176)
      || (*(_BYTE *)(v2 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 64) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 72) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 80) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 88) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 96) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 104) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v2 + 8);
      v3 = *(_QWORD *)(result + 72);
      ++*(_DWORD *)(*(_QWORD *)(result + 64) + 8);
      ++*(_DWORD *)(v3 + 8);
      v4 = *(_QWORD *)(result + 88);
      ++*(_DWORD *)(*(_QWORD *)(result + 80) + 8);
      ++*(_DWORD *)(v4 + 8);
      v5 = *(_QWORD *)(result + 104);
      ++*(_DWORD *)(*(_QWORD *)(result + 96) + 8);
      ++*(_DWORD *)(v5 + 8);
    }
  }
  return result;
}

uint64_t sub_20FA48B8C(uint64_t result, uint64_t a2)
{
  uint64_t v8;

  for (; result != a2; result += 9616)
  {
    __asm
    {
      PRFM            #0, [X0,#0x70A8]
      PRFM            #0, [X0,#0x6F48]
    }
    v8 = *(_QWORD *)(result + 9256);
    __asm { PRFM            #0, [X0,#0x6F88] }
    if (*(_BYTE *)(result + 9608)
      || (*(_BYTE *)(v8 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 9264) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 9272) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 9280) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 9288) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 9296) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 9304) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 9312) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 9320) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(result + 9328) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v8 + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 9264) + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 9272) + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 9280) + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 9288) + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 9296) + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 9304) + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 9312) + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 9320) + 8);
      ++*(_DWORD *)(*(_QWORD *)(result + 9328) + 8);
    }
  }
  return result;
}

uint64_t sub_20FA48CFC(_QWORD *a1)
{
  (*(void (**)(_QWORD *))(a1[162] + 16))(a1 + 162);
  (*(void (**)(_QWORD *))(a1[342] + 16))(a1 + 342);
  (*(void (**)(_QWORD *))(a1[522] + 16))(a1 + 522);
  (*(void (**)(_QWORD *))(a1[702] + 16))(a1 + 702);
  (*(void (**)(_QWORD *))(a1[882] + 16))(a1 + 882);
  (*(void (**)(_QWORD *))(a1[1062] + 16))(a1 + 1062);
  (*(void (**)(_QWORD *))(a1[1242] + 16))(a1 + 1242);
  (*(void (**)(_QWORD *))(a1[1422] + 16))(a1 + 1422);
  (*(void (**)(_QWORD *))(a1[1602] + 16))(a1 + 1602);
  (*(void (**)(_QWORD *))(a1[1782] + 16))(a1 + 1782);
  (*(void (**)(_QWORD *))(a1[144] + 16))(a1 + 144);
  (*(void (**)(_QWORD *))(a1[324] + 16))(a1 + 324);
  (*(void (**)(_QWORD *))(a1[504] + 16))(a1 + 504);
  (*(void (**)(_QWORD *))(a1[684] + 16))(a1 + 684);
  (*(void (**)(_QWORD *))(a1[864] + 16))(a1 + 864);
  (*(void (**)(_QWORD *))(a1[1044] + 16))(a1 + 1044);
  (*(void (**)(_QWORD *))(a1[1224] + 16))(a1 + 1224);
  (*(void (**)(_QWORD *))(a1[1404] + 16))(a1 + 1404);
  (*(void (**)(_QWORD *))(a1[1584] + 16))(a1 + 1584);
  (*(void (**)(_QWORD *))(a1[1764] + 16))(a1 + 1764);
  (*(void (**)(_QWORD *))(a1[126] + 16))(a1 + 126);
  (*(void (**)(_QWORD *))(a1[306] + 16))(a1 + 306);
  (*(void (**)(_QWORD *))(a1[486] + 16))(a1 + 486);
  (*(void (**)(_QWORD *))(a1[666] + 16))(a1 + 666);
  (*(void (**)(_QWORD *))(a1[846] + 16))(a1 + 846);
  (*(void (**)(_QWORD *))(a1[1026] + 16))(a1 + 1026);
  (*(void (**)(_QWORD *))(a1[1206] + 16))(a1 + 1206);
  (*(void (**)(_QWORD *))(a1[1386] + 16))(a1 + 1386);
  (*(void (**)(_QWORD *))(a1[1566] + 16))(a1 + 1566);
  (*(void (**)(_QWORD *))(a1[1746] + 16))(a1 + 1746);
  (*(void (**)(_QWORD *))(a1[108] + 16))(a1 + 108);
  (*(void (**)(_QWORD *))(a1[288] + 16))(a1 + 288);
  (*(void (**)(_QWORD *))(a1[468] + 16))(a1 + 468);
  (*(void (**)(_QWORD *))(a1[648] + 16))(a1 + 648);
  (*(void (**)(_QWORD *))(a1[828] + 16))(a1 + 828);
  (*(void (**)(_QWORD *))(a1[1008] + 16))(a1 + 1008);
  (*(void (**)(_QWORD *))(a1[1188] + 16))(a1 + 1188);
  (*(void (**)(_QWORD *))(a1[1368] + 16))(a1 + 1368);
  (*(void (**)(_QWORD *))(a1[1548] + 16))(a1 + 1548);
  (*(void (**)(_QWORD *))(a1[1728] + 16))(a1 + 1728);
  (*(void (**)(_QWORD *))(a1[90] + 16))(a1 + 90);
  (*(void (**)(_QWORD *))(a1[270] + 16))(a1 + 270);
  (*(void (**)(_QWORD *))(a1[450] + 16))(a1 + 450);
  (*(void (**)(_QWORD *))(a1[630] + 16))(a1 + 630);
  (*(void (**)(_QWORD *))(a1[810] + 16))(a1 + 810);
  (*(void (**)(_QWORD *))(a1[990] + 16))(a1 + 990);
  (*(void (**)(_QWORD *))(a1[1170] + 16))(a1 + 1170);
  (*(void (**)(_QWORD *))(a1[1350] + 16))(a1 + 1350);
  (*(void (**)(_QWORD *))(a1[1530] + 16))(a1 + 1530);
  (*(void (**)(_QWORD *))(a1[1710] + 16))(a1 + 1710);
  (*(void (**)(_QWORD *))(a1[72] + 16))(a1 + 72);
  (*(void (**)(_QWORD *))(a1[252] + 16))(a1 + 252);
  (*(void (**)(_QWORD *))(a1[432] + 16))(a1 + 432);
  (*(void (**)(_QWORD *))(a1[612] + 16))(a1 + 612);
  (*(void (**)(_QWORD *))(a1[792] + 16))(a1 + 792);
  (*(void (**)(_QWORD *))(a1[972] + 16))(a1 + 972);
  (*(void (**)(_QWORD *))(a1[1152] + 16))(a1 + 1152);
  (*(void (**)(_QWORD *))(a1[1332] + 16))(a1 + 1332);
  (*(void (**)(_QWORD *))(a1[1512] + 16))(a1 + 1512);
  (*(void (**)(_QWORD *))(a1[1692] + 16))(a1 + 1692);
  (*(void (**)(_QWORD *))(a1[54] + 16))(a1 + 54);
  (*(void (**)(_QWORD *))(a1[234] + 16))(a1 + 234);
  (*(void (**)(_QWORD *))(a1[414] + 16))(a1 + 414);
  (*(void (**)(_QWORD *))(a1[594] + 16))(a1 + 594);
  (*(void (**)(_QWORD *))(a1[774] + 16))(a1 + 774);
  (*(void (**)(_QWORD *))(a1[954] + 16))(a1 + 954);
  (*(void (**)(_QWORD *))(a1[1134] + 16))(a1 + 1134);
  (*(void (**)(_QWORD *))(a1[1314] + 16))(a1 + 1314);
  (*(void (**)(_QWORD *))(a1[1494] + 16))(a1 + 1494);
  (*(void (**)(_QWORD *))(a1[1674] + 16))(a1 + 1674);
  (*(void (**)(_QWORD *))(a1[36] + 16))(a1 + 36);
  (*(void (**)(_QWORD *))(a1[216] + 16))(a1 + 216);
  (*(void (**)(_QWORD *))(a1[396] + 16))(a1 + 396);
  (*(void (**)(_QWORD *))(a1[576] + 16))(a1 + 576);
  (*(void (**)(_QWORD *))(a1[756] + 16))(a1 + 756);
  (*(void (**)(_QWORD *))(a1[936] + 16))(a1 + 936);
  (*(void (**)(_QWORD *))(a1[1116] + 16))(a1 + 1116);
  (*(void (**)(_QWORD *))(a1[1296] + 16))(a1 + 1296);
  (*(void (**)(_QWORD *))(a1[1476] + 16))(a1 + 1476);
  (*(void (**)(_QWORD *))(a1[1656] + 16))(a1 + 1656);
  (*(void (**)(_QWORD *))(a1[18] + 16))(a1 + 18);
  (*(void (**)(_QWORD *))(a1[198] + 16))(a1 + 198);
  (*(void (**)(_QWORD *))(a1[378] + 16))(a1 + 378);
  (*(void (**)(_QWORD *))(a1[558] + 16))(a1 + 558);
  (*(void (**)(_QWORD *))(a1[738] + 16))(a1 + 738);
  (*(void (**)(_QWORD *))(a1[918] + 16))(a1 + 918);
  (*(void (**)(_QWORD *))(a1[1098] + 16))(a1 + 1098);
  (*(void (**)(_QWORD *))(a1[1278] + 16))(a1 + 1278);
  (*(void (**)(_QWORD *))(a1[1458] + 16))(a1 + 1458);
  (*(void (**)(_QWORD *))(a1[1638] + 16))(a1 + 1638);
  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  (*(void (**)(_QWORD *))(a1[180] + 16))(a1 + 180);
  (*(void (**)(_QWORD *))(a1[360] + 16))(a1 + 360);
  (*(void (**)(_QWORD *))(a1[540] + 16))(a1 + 540);
  (*(void (**)(_QWORD *))(a1[720] + 16))(a1 + 720);
  (*(void (**)(_QWORD *))(a1[900] + 16))(a1 + 900);
  (*(void (**)(_QWORD *))(a1[1080] + 16))(a1 + 1080);
  (*(void (**)(_QWORD *))(a1[1260] + 16))(a1 + 1260);
  (*(void (**)(_QWORD *))(a1[1440] + 16))(a1 + 1440);
  return (*(uint64_t (**)(_QWORD *))(a1[1620] + 16))(a1 + 1620);
}

void sub_20FA49470(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  sub_20FA49BBC(a1 + 1296);
  sub_20FA49BBC(a1 + 2736);
  sub_20FA49BBC(a1 + 4176);
  sub_20FA49BBC(a1 + 5616);
  sub_20FA49BBC(a1 + 7056);
  sub_20FA49BBC(a1 + 8496);
  sub_20FA49BBC(a1 + 9936);
  sub_20FA49BBC(a1 + 11376);
  sub_20FA49BBC(a1 + 12816);
  sub_20FA49BBC(a1 + 14256);
  sub_20FA49BBC(a1 + 1152);
  sub_20FA49BBC(a1 + 2592);
  sub_20FA49BBC(a1 + 4032);
  sub_20FA49BBC(a1 + 5472);
  sub_20FA49BBC(a1 + 6912);
  sub_20FA49BBC(a1 + 8352);
  sub_20FA49BBC(a1 + 9792);
  sub_20FA49BBC(a1 + 11232);
  sub_20FA49BBC(a1 + 12672);
  sub_20FA49BBC(a1 + 14112);
  sub_20FA49BBC(a1 + 1008);
  sub_20FA49BBC(a1 + 2448);
  sub_20FA49BBC(a1 + 3888);
  sub_20FA49BBC(a1 + 5328);
  sub_20FA49BBC(a1 + 6768);
  sub_20FA49BBC(a1 + 8208);
  sub_20FA49BBC(a1 + 9648);
  sub_20FA49BBC(a1 + 11088);
  sub_20FA49BBC(a1 + 12528);
  sub_20FA49BBC(a1 + 13968);
  sub_20FA49BBC(a1 + 864);
  sub_20FA49BBC(a1 + 2304);
  sub_20FA49BBC(a1 + 3744);
  sub_20FA49BBC(a1 + 5184);
  sub_20FA49BBC(a1 + 6624);
  sub_20FA49BBC(a1 + 8064);
  sub_20FA49BBC(a1 + 9504);
  sub_20FA49BBC(a1 + 10944);
  sub_20FA49BBC(a1 + 12384);
  sub_20FA49BBC(a1 + 13824);
  sub_20FA49BBC(a1 + 720);
  sub_20FA49BBC(a1 + 2160);
  sub_20FA49BBC(a1 + 3600);
  sub_20FA49BBC(a1 + 5040);
  sub_20FA49BBC(a1 + 6480);
  v2 = *(unsigned int *)(a1 + 7932);
  if ((_DWORD)v2)
  {
    v3 = *(_DWORD *)(a1 + 7928);
    if (v3)
    {
      v4 = 0;
LABEL_4:
      v5 = *(_DWORD *)(a1 + 8032) * v4;
      v6 = (uint64_t *)(*(_QWORD *)(a1 + 8008) + 8 * v5);
      v7 = 8 * (v3 + v5) - 8 * v5;
      do
      {
        v8 = *v6;
        if (*v6 != -1)
        {
          v9 = *(_QWORD *)(a1 + 7976);
          v10 = *(_QWORD *)(a1 + 7968);
          v11 = ((v9 - v10) << 6) - 1;
          if (v9 == v10)
            v11 = 0;
          v12 = *(_QWORD *)(a1 + 8000) + *(_QWORD *)(a1 + 7992);
          if (v11 == v12)
          {
            sub_20EDB36DC(a1 + 7960);
            v10 = *(_QWORD *)(a1 + 7968);
            v12 = *(_QWORD *)(a1 + 8000) + *(_QWORD *)(a1 + 7992);
            v8 = *v6;
          }
          *(_QWORD *)(*(_QWORD *)(v10 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF)) = v8;
          ++*(_QWORD *)(a1 + 8000);
          *v6 = -1;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
      v13 = *(unsigned int *)(a1 + 7932);
      while (1)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 8040) + 8 * v4++) = 0;
        if (v4 >= v13)
          break;
        v3 = *(_DWORD *)(a1 + 7928);
        if (v3)
          goto LABEL_4;
      }
    }
    else
    {
      bzero(*(void **)(a1 + 8040), 8 * v2);
    }
  }
  sub_20FA49BBC(a1 + 9360);
  sub_20FA49BBC(a1 + 10800);
  sub_20FA49BBC(a1 + 12240);
  sub_20FA49BBC(a1 + 13680);
  sub_20FA49BBC(a1 + 576);
  sub_20FA49BBC(a1 + 2016);
  sub_20FA49BBC(a1 + 3456);
  sub_20FA49BBC(a1 + 4896);
  sub_20FA49BBC(a1 + 6336);
  sub_20FA49BBC(a1 + 7776);
  sub_20FA49BBC(a1 + 9216);
  sub_20FA49BBC(a1 + 10656);
  sub_20FA49BBC(a1 + 12096);
  sub_20FA49BBC(a1 + 13536);
  sub_20FA49BBC(a1 + 432);
  sub_20FA49BBC(a1 + 1872);
  sub_20FA49BBC(a1 + 3312);
  sub_20FA49BBC(a1 + 4752);
  sub_20FA49BBC(a1 + 6192);
  sub_20FA49BBC(a1 + 7632);
  sub_20FA49BBC(a1 + 9072);
  sub_20FA49BBC(a1 + 10512);
  sub_20FA49BBC(a1 + 11952);
  sub_20FA49BBC(a1 + 13392);
  sub_20FA49BBC(a1 + 288);
  sub_20FA49BBC(a1 + 1728);
  sub_20FA49BBC(a1 + 3168);
  sub_20FA49BBC(a1 + 4608);
  sub_20FA49BBC(a1 + 6048);
  sub_20FA49BBC(a1 + 7488);
  sub_20FA49BBC(a1 + 8928);
  sub_20FA49BBC(a1 + 10368);
  sub_20FA49BBC(a1 + 11808);
  sub_20FA49BBC(a1 + 13248);
  sub_20FA49BBC(a1 + 144);
  v14 = *(unsigned int *)(a1 + 1596);
  if ((_DWORD)v14)
  {
    v15 = *(_DWORD *)(a1 + 1592);
    if (v15)
    {
      v16 = 0;
LABEL_20:
      v17 = *(_DWORD *)(a1 + 1696) * v16;
      v18 = (uint64_t *)(*(_QWORD *)(a1 + 1672) + 8 * v17);
      v19 = 8 * (v15 + v17) - 8 * v17;
      do
      {
        v20 = *v18;
        if (*v18 != -1)
        {
          v21 = *(_QWORD *)(a1 + 1640);
          v22 = *(_QWORD *)(a1 + 1632);
          v23 = ((v21 - v22) << 6) - 1;
          if (v21 == v22)
            v23 = 0;
          v24 = *(_QWORD *)(a1 + 1664) + *(_QWORD *)(a1 + 1656);
          if (v23 == v24)
          {
            sub_20EDB36DC(a1 + 1624);
            v22 = *(_QWORD *)(a1 + 1632);
            v24 = *(_QWORD *)(a1 + 1664) + *(_QWORD *)(a1 + 1656);
            v20 = *v18;
          }
          *(_QWORD *)(*(_QWORD *)(v22 + ((v24 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v24 & 0x1FF)) = v20;
          ++*(_QWORD *)(a1 + 1664);
          *v18 = -1;
        }
        ++v18;
        v19 -= 8;
      }
      while (v19);
      v25 = *(unsigned int *)(a1 + 1596);
      while (1)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 1704) + 8 * v16++) = 0;
        if (v16 >= v25)
          break;
        v15 = *(_DWORD *)(a1 + 1592);
        if (v15)
          goto LABEL_20;
      }
    }
    else
    {
      bzero(*(void **)(a1 + 1704), 8 * v14);
    }
  }
  sub_20FA49BBC(a1 + 3024);
  sub_20FA49BBC(a1 + 4464);
  sub_20FA49BBC(a1 + 5904);
  v26 = *(unsigned int *)(a1 + 7356);
  if ((_DWORD)v26)
  {
    v27 = *(_DWORD *)(a1 + 7352);
    if (v27)
    {
      v28 = 0;
LABEL_36:
      v29 = *(_DWORD *)(a1 + 7456) * v28;
      v30 = (uint64_t *)(*(_QWORD *)(a1 + 7432) + 8 * v29);
      v31 = 8 * (v27 + v29) - 8 * v29;
      do
      {
        v32 = *v30;
        if (*v30 != -1)
        {
          v33 = *(_QWORD *)(a1 + 7400);
          v34 = *(_QWORD *)(a1 + 7392);
          v35 = ((v33 - v34) << 6) - 1;
          if (v33 == v34)
            v35 = 0;
          v36 = *(_QWORD *)(a1 + 7424) + *(_QWORD *)(a1 + 7416);
          if (v35 == v36)
          {
            sub_20EDB36DC(a1 + 7384);
            v34 = *(_QWORD *)(a1 + 7392);
            v36 = *(_QWORD *)(a1 + 7424) + *(_QWORD *)(a1 + 7416);
            v32 = *v30;
          }
          *(_QWORD *)(*(_QWORD *)(v34 + ((v36 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v36 & 0x1FF)) = v32;
          ++*(_QWORD *)(a1 + 7424);
          *v30 = -1;
        }
        ++v30;
        v31 -= 8;
      }
      while (v31);
      v37 = *(unsigned int *)(a1 + 7356);
      while (1)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 7464) + 8 * v28++) = 0;
        if (v28 >= v37)
          break;
        v27 = *(_DWORD *)(a1 + 7352);
        if (v27)
          goto LABEL_36;
      }
    }
    else
    {
      bzero(*(void **)(a1 + 7464), 8 * v26);
    }
  }
  sub_20FA49BBC(a1 + 8784);
  sub_20FA49BBC(a1 + 10224);
  sub_20FA49BBC(a1 + 11664);
  sub_20FA49BBC(a1 + 13104);
  sub_20FA49BBC(a1);
  sub_20FA49BBC(a1 + 1440);
  sub_20FA49BBC(a1 + 2880);
  sub_20FA49BBC(a1 + 4320);
  sub_20FA49BBC(a1 + 5760);
  sub_20FA49BBC(a1 + 7200);
  sub_20FA49BBC(a1 + 8640);
  sub_20FA49BBC(a1 + 10080);
  sub_20FA49BBC(a1 + 11520);
  sub_20FA49BBC(a1 + 12960);
}

void sub_20FA49BBC(uint64_t a1)
{
  uint64_t v1;
  int v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v1)
  {
    v3 = *(_DWORD *)(a1 + 8);
    if (v3)
    {
      v4 = 0;
LABEL_4:
      v5 = *(_DWORD *)(a1 + 112) * v4;
      v6 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8 * v5);
      v7 = 8 * (v3 + v5) - 8 * v5;
      do
      {
        v8 = *v6;
        if (*v6 != -1)
        {
          v9 = *(_QWORD *)(a1 + 56);
          v10 = *(_QWORD *)(a1 + 48);
          v11 = ((v9 - v10) << 6) - 1;
          if (v9 == v10)
            v11 = 0;
          v12 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          if (v11 == v12)
          {
            sub_20EDB36DC(a1 + 40);
            v10 = *(_QWORD *)(a1 + 48);
            v12 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
            v8 = *v6;
          }
          *(_QWORD *)(*(_QWORD *)(v10 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF)) = v8;
          ++*(_QWORD *)(a1 + 80);
          *v6 = -1;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
      v13 = *(unsigned int *)(a1 + 12);
      while (1)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v4++) = 0;
        if (v4 >= v13)
          break;
        v3 = *(_DWORD *)(a1 + 8);
        if (v3)
          goto LABEL_4;
      }
    }
    else
    {
      bzero(*(void **)(a1 + 120), 8 * v1);
    }
  }
}

uint64_t sub_20FA49CF0(uint64_t a1, void **a2, uint64_t a3, _DWORD **a4)
{
  unsigned int **v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  unint64_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int **v23;

  v20 = (unsigned int **)(a3 + 24);
  v23 = (unsigned int **)(a3 + 48);
  v22 = (unsigned int **)(a3 + 72);
  v21 = (unsigned int **)(a3 + 96);
  v8 = (unsigned int **)(a3 + 120);
  v9 = (unsigned int **)(a3 + 144);
  v10 = (unsigned int **)(a3 + 168);
  v11 = (unsigned int **)(a3 + 192);
  v12 = (unsigned int **)(a3 + 216);
  v13 = 9 * ((unint64_t)((char *)a4[4] - (char *)a4[3]) >> 3)
      + 6
      * (((unint64_t)((char *)a4[7] - (char *)a4[6]) >> 3)
       + ((unint64_t)((char *)a4[1] - (char *)*a4) >> 3)
       + ((unint64_t)((char *)a4[10] - (char *)a4[9]) >> 3))
      + ((unint64_t)((char *)a4[16] - (char *)a4[15]) >> 3)
      + (((unint64_t)((char *)a4[22] - (char *)a4[21]) >> 1) & 0xFFFFFFFC)
      + (((unint64_t)((char *)a4[25] - (char *)a4[24]) >> 1) & 0xFFFFFFFC)
      + 3
      * (((unint64_t)((char *)a4[19] - (char *)a4[18]) >> 3)
       + ((unint64_t)((char *)a4[13] - (char *)a4[12]) >> 3)
       + ((unint64_t)((char *)a4[28] - (char *)a4[27]) >> 3));
  v14 = a2[1];
  v15 = 9 * ((*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3)
      + 6
      * (((*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 3)
       + ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3)
       + ((*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 3))
      + ((*(_QWORD *)(a3 + 128) - *(_QWORD *)(a3 + 120)) >> 3)
      + (((*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 1) & 0xFFFFFFFC)
      + (((*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 1) & 0xFFFFFFFC)
      + 3
      * (((*(_QWORD *)(a3 + 152) - *(_QWORD *)(a3 + 144)) >> 3)
       + ((*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 3)
       + ((*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 3));
  v16 = v13 * (unint64_t)v15;
  *((_DWORD *)a2 + 4) = v15;
  *((_DWORD *)a2 + 5) = v13;
  if ((unint64_t)v14 < v16)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v17 = (8 * v16 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v17 >> 3);
    *a2 = operator new(v17, (std::align_val_t)0x20uLL);
    v15 = *((_DWORD *)a2 + 4);
    v13 = *((_DWORD *)a2 + 5);
  }
  v18 = v13 * v15;
  if (v18)
    bzero(*a2, 8 * v18);
  sub_20F8F3BC4(a1 + 1296, (uint64_t *)a2, v12, *a4, a4[1], 0);
  sub_20F8F4010(a1 + 2736, (uint64_t *)a2, v12, a4[3], a4[4], 0);
  sub_20F8F3BC4(a1 + 4176, (uint64_t *)a2, v12, a4[6], a4[7], 0);
  sub_20F8F3BC4(a1 + 5616, (uint64_t *)a2, v12, a4[9], a4[10], 0);
  sub_20F8F4558(a1 + 7056, (uint64_t *)a2, v12, a4[12], a4[13], 0);
  sub_20F8F48A0(a1 + 8496, (uint64_t *)a2, v12, a4[15], a4[16], 0);
  sub_20F8F4558(a1 + 9936, (uint64_t *)a2, v12, a4[18], a4[19], 0);
  sub_20F8F4B44(a1 + 11376, (uint64_t *)a2, v12, a4[21], a4[22], 0);
  sub_20F8F4B44(a1 + 12816, (uint64_t *)a2, v12, a4[24], a4[25], 0);
  sub_20F8F4558(a1 + 14256, (uint64_t *)a2, v12, a4[27], a4[28], 0);
  sub_20F8F4EE0(a1 + 1152, (uint64_t)a2, v11, *a4, a4[1], 0);
  sub_20F8F52EC(a1 + 2592, (uint64_t)a2, v11, a4[3], a4[4], 0);
  sub_20F8F4EE0(a1 + 4032, (uint64_t)a2, v11, a4[6], a4[7], 0);
  sub_20F8F4EE0(a1 + 5472, (uint64_t)a2, v11, a4[9], a4[10], 0);
  sub_20F8F582C(a1 + 6912, (uint64_t)a2, v11, a4[12], a4[13], 0);
  sub_20F8F5B60(a1 + 8352, (uint64_t *)a2, v11, a4[15], a4[16], 0);
  sub_20F8F582C(a1 + 9792, (uint64_t)a2, v11, a4[18], a4[19], 0);
  sub_20F8F5E00(a1 + 11232, (uint64_t)a2, v11, a4[21], a4[22], 0);
  sub_20F8F5E00(a1 + 12672, (uint64_t)a2, v11, a4[24], a4[25], 0);
  sub_20F8F582C(a1 + 14112, (uint64_t)a2, v11, a4[27], a4[28], 0);
  sub_20F8F4EE0(a1 + 1008, (uint64_t)a2, v10, *a4, a4[1], 0);
  sub_20F8F52EC(a1 + 2448, (uint64_t)a2, v10, a4[3], a4[4], 0);
  sub_20F8F4EE0(a1 + 3888, (uint64_t)a2, v10, a4[6], a4[7], 0);
  sub_20F8F4EE0(a1 + 5328, (uint64_t)a2, v10, a4[9], a4[10], 0);
  sub_20F8F582C(a1 + 6768, (uint64_t)a2, v10, a4[12], a4[13], 0);
  sub_20F8F5B60(a1 + 8208, (uint64_t *)a2, v10, a4[15], a4[16], 0);
  sub_20F8F582C(a1 + 9648, (uint64_t)a2, v10, a4[18], a4[19], 0);
  sub_20F8F5E00(a1 + 11088, (uint64_t)a2, v10, a4[21], a4[22], 0);
  sub_20F8F5E00(a1 + 12528, (uint64_t)a2, v10, a4[24], a4[25], 0);
  sub_20F8F582C(a1 + 13968, (uint64_t)a2, v10, a4[27], a4[28], 0);
  sub_20F8F3BC4(a1 + 864, (uint64_t *)a2, v9, *a4, a4[1], 0);
  sub_20F8F4010(a1 + 2304, (uint64_t *)a2, v9, a4[3], a4[4], 0);
  sub_20F8F3BC4(a1 + 3744, (uint64_t *)a2, v9, a4[6], a4[7], 0);
  sub_20F8F3BC4(a1 + 5184, (uint64_t *)a2, v9, a4[9], a4[10], 0);
  sub_20F8F4558(a1 + 6624, (uint64_t *)a2, v9, a4[12], a4[13], 0);
  sub_20F8F48A0(a1 + 8064, (uint64_t *)a2, v9, a4[15], a4[16], 0);
  sub_20F8F4558(a1 + 9504, (uint64_t *)a2, v9, a4[18], a4[19], 0);
  sub_20F8F4B44(a1 + 10944, (uint64_t *)a2, v9, a4[21], a4[22], 0);
  sub_20F8F4B44(a1 + 12384, (uint64_t *)a2, v9, a4[24], a4[25], 0);
  sub_20F8F4558(a1 + 13824, (uint64_t *)a2, v9, a4[27], a4[28], 0);
  sub_20F8F6120(a1 + 720, (uint64_t *)a2, v8, *a4, a4[1], 0);
  sub_20F8F6448(a1 + 2160, (uint64_t *)a2, v8, a4[3], a4[4], 0);
  sub_20F8F6120(a1 + 3600, (uint64_t *)a2, v8, a4[6], a4[7], 0);
  sub_20F8F6120(a1 + 5040, (uint64_t *)a2, v8, a4[9], a4[10], 0);
  sub_20F8F67D8(a1 + 6480, (uint64_t *)a2, v8, a4[12], a4[13], 0);
  sub_20F8F6A9C(a1 + 7920, (uint64_t)a2, v8, a4[15], a4[16], 0);
  sub_20F8F67D8(a1 + 9360, (uint64_t *)a2, v8, a4[18], a4[19], 0);
  sub_20F8F6D00(a1 + 10800, (uint64_t *)a2, v8, a4[21], a4[22], 0);
  sub_20F8F6D00(a1 + 12240, (uint64_t *)a2, v8, a4[24], a4[25], 0);
  sub_20F8F67D8(a1 + 13680, (uint64_t *)a2, v8, a4[27], a4[28], 0);
  sub_20F8F3BC4(a1 + 576, (uint64_t *)a2, v21, *a4, a4[1], 0);
  sub_20F8F4010(a1 + 2016, (uint64_t *)a2, v21, a4[3], a4[4], 0);
  sub_20F8F3BC4(a1 + 3456, (uint64_t *)a2, v21, a4[6], a4[7], 0);
  sub_20F8F3BC4(a1 + 4896, (uint64_t *)a2, v21, a4[9], a4[10], 0);
  sub_20F8F4558(a1 + 6336, (uint64_t *)a2, v21, a4[12], a4[13], 0);
  sub_20F8F48A0(a1 + 7776, (uint64_t *)a2, v21, a4[15], a4[16], 0);
  sub_20F8F4558(a1 + 9216, (uint64_t *)a2, v21, a4[18], a4[19], 0);
  sub_20F8F4B44(a1 + 10656, (uint64_t *)a2, v21, a4[21], a4[22], 0);
  sub_20F8F4B44(a1 + 12096, (uint64_t *)a2, v21, a4[24], a4[25], 0);
  sub_20F8F4558(a1 + 13536, (uint64_t *)a2, v21, a4[27], a4[28], 0);
  sub_20F8F6FEC(a1 + 432, (uint64_t)a2, v22, *a4, a4[1], 0);
  sub_20F8F7578(a1 + 1872, (uint64_t)a2, v22, a4[3], a4[4], 0);
  sub_20F8F6FEC(a1 + 3312, (uint64_t)a2, v22, a4[6], a4[7], 0);
  sub_20F8F6FEC(a1 + 4752, (uint64_t)a2, v22, a4[9], a4[10], 0);
  sub_20F8F7CC8(a1 + 6192, (uint64_t)a2, v22, a4[12], a4[13], 0);
  sub_20F8F8084(a1 + 7632, (uint64_t *)a2, v22, a4[15], a4[16], 0);
  sub_20F8F7CC8(a1 + 9072, (uint64_t)a2, v22, a4[18], a4[19], 0);
  sub_20F8F8358(a1 + 10512, (uint64_t)a2, v22, a4[21], a4[22], 0);
  sub_20F8F8358(a1 + 11952, (uint64_t)a2, v22, a4[24], a4[25], 0);
  sub_20F8F7CC8(a1 + 13392, (uint64_t)a2, v22, a4[27], a4[28], 0);
  sub_20F8F6FEC(a1 + 288, (uint64_t)a2, v23, *a4, a4[1], 0);
  sub_20F8F7578(a1 + 1728, (uint64_t)a2, v23, a4[3], a4[4], 0);
  sub_20F8F6FEC(a1 + 3168, (uint64_t)a2, v23, a4[6], a4[7], 0);
  sub_20F8F6FEC(a1 + 4608, (uint64_t)a2, v23, a4[9], a4[10], 0);
  sub_20F8F7CC8(a1 + 6048, (uint64_t)a2, v23, a4[12], a4[13], 0);
  sub_20F8F8084(a1 + 7488, (uint64_t *)a2, v23, a4[15], a4[16], 0);
  sub_20F8F7CC8(a1 + 8928, (uint64_t)a2, v23, a4[18], a4[19], 0);
  sub_20F8F8358(a1 + 10368, (uint64_t)a2, v23, a4[21], a4[22], 0);
  sub_20F8F8358(a1 + 11808, (uint64_t)a2, v23, a4[24], a4[25], 0);
  sub_20F8F7CC8(a1 + 13248, (uint64_t)a2, v23, a4[27], a4[28], 0);
  sub_20F8F8750(a1 + 144, (uint64_t *)a2, v20, *a4, a4[1], 0);
  sub_20F8F8F18(a1 + 1584, (uint64_t *)a2, v20, a4[3], a4[4], 0);
  sub_20F8F8750(a1 + 3024, (uint64_t *)a2, v20, a4[6], a4[7], 0);
  sub_20F8F8750(a1 + 4464, (uint64_t *)a2, v20, a4[9], a4[10], 0);
  sub_20F8F9D14(a1 + 5904, (uint64_t *)a2, v20, a4[12], a4[13], 0);
  sub_20F8FA1C8(a1 + 7344, (uint64_t *)a2, v20, a4[15], a4[16], 0);
  sub_20F8F9D14(a1 + 8784, (uint64_t *)a2, v20, a4[18], a4[19], 0);
  sub_20F8FA4DC(a1 + 10224, (uint64_t *)a2, v20, a4[21], a4[22], 0);
  sub_20F8FA4DC(a1 + 11664, (uint64_t *)a2, v20, a4[24], a4[25], 0);
  sub_20F8F9D14(a1 + 13104, (uint64_t *)a2, v20, a4[27], a4[28], 0);
  sub_20F8F6FEC(a1, (uint64_t)a2, (unsigned int **)a3, *a4, a4[1], 0);
  sub_20F8F7578(a1 + 1440, (uint64_t)a2, (unsigned int **)a3, a4[3], a4[4], 0);
  sub_20F8F6FEC(a1 + 2880, (uint64_t)a2, (unsigned int **)a3, a4[6], a4[7], 0);
  sub_20F8F6FEC(a1 + 4320, (uint64_t)a2, (unsigned int **)a3, a4[9], a4[10], 0);
  sub_20F8F7CC8(a1 + 5760, (uint64_t)a2, (unsigned int **)a3, a4[12], a4[13], 0);
  sub_20F8F8084(a1 + 7200, (uint64_t *)a2, (unsigned int **)a3, a4[15], a4[16], 0);
  sub_20F8F7CC8(a1 + 8640, (uint64_t)a2, (unsigned int **)a3, a4[18], a4[19], 0);
  sub_20F8F8358(a1 + 10080, (uint64_t)a2, (unsigned int **)a3, a4[21], a4[22], 0);
  sub_20F8F8358(a1 + 11520, (uint64_t)a2, (unsigned int **)a3, a4[24], a4[25], 0);
  return sub_20F8F7CC8(a1 + 12960, (uint64_t)a2, (unsigned int **)a3, a4[27], a4[28], 0);
}

__n128 sub_20FA4A9E4(uint64_t a1, uint64_t a2, int **a3)
{
  unint64_t v6;
  size_t v7;
  __n128 result;
  int *v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int *v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int *v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int *v35;
  int *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int *v43;
  int *v44;
  int v45;
  int v46;
  uint64_t v47;
  __n128 *v48;
  __n128 *v49;
  int *v50;
  int *v51;
  int v52;
  int v53;
  uint64_t v54;
  int *v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  __n128 *v60;
  __n128 *v61;
  int *v62;
  int *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  int *v70;
  int *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 v77;
  int *v78;
  int *v79;
  int v80;
  int v81;
  uint64_t v82;
  __n128 *v83;
  __n128 *v84;

  v6 = 9 * ((unint64_t)((char *)a3[4] - (char *)a3[3]) >> 3)
     + 6
     * (((unint64_t)((char *)a3[7] - (char *)a3[6]) >> 3)
      + ((unint64_t)((char *)a3[1] - (char *)*a3) >> 3)
      + ((unint64_t)((char *)a3[10] - (char *)a3[9]) >> 3))
     + ((unint64_t)((char *)a3[16] - (char *)a3[15]) >> 3)
     + (((unint64_t)((char *)a3[22] - (char *)a3[21]) >> 1) & 0xFFFFFFFC)
     + (((unint64_t)((char *)a3[25] - (char *)a3[24]) >> 1) & 0xFFFFFFFC)
     + 3
     * (((unint64_t)((char *)a3[19] - (char *)a3[18]) >> 3)
      + ((unint64_t)((char *)a3[13] - (char *)a3[12]) >> 3)
      + ((unint64_t)((char *)a3[28] - (char *)a3[27]) >> 3));
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v6)
  {
    *(_DWORD *)(a2 + 16) = v6;
    if (*(_QWORD *)(a2 + 8) < v6)
    {
      if (*(_QWORD *)a2)
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
      v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v7 >> 3;
      *(_QWORD *)a2 = operator new(v7, (std::align_val_t)0x20uLL);
    }
  }
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    v11 = *(_DWORD *)(a1 + 64);
    do
    {
      v12 = *v9;
      v13 = v9[1];
      v9 += 2;
      v14 = *(_QWORD *)a1 + 8 * (v11 + 6 * v12);
      v15 = *(_QWORD *)a2 + 8 * v13;
      result = *(__n128 *)(v14 + 32);
      v16 = *(_OWORD *)v14;
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(v14 + 16);
      *(__n128 *)(v15 + 32) = result;
      *(_OWORD *)v15 = v16;
    }
    while (v9 != v10);
  }
  v17 = a3[3];
  v18 = a3[4];
  if (v17 != v18)
  {
    v19 = *(_DWORD *)(a1 + 68);
    do
    {
      v20 = *v17;
      v21 = v17[1];
      v17 += 2;
      v22 = *(_QWORD *)a1 + 8 * (9 * v20 + v19);
      v23 = *(_QWORD *)a2 + 8 * v21;
      result.n128_u64[0] = *(_QWORD *)(v22 + 64);
      v24 = *(_OWORD *)(v22 + 48);
      v25 = *(_OWORD *)v22;
      v26 = *(_OWORD *)(v22 + 16);
      *(_OWORD *)(v23 + 32) = *(_OWORD *)(v22 + 32);
      *(_OWORD *)(v23 + 48) = v24;
      *(_QWORD *)(v23 + 64) = result.n128_u64[0];
      *(_OWORD *)v23 = v25;
      *(_OWORD *)(v23 + 16) = v26;
    }
    while (v17 != v18);
  }
  v27 = a3[6];
  v28 = a3[7];
  if (v27 != v28)
  {
    v29 = *(_DWORD *)(a1 + 72);
    do
    {
      v30 = *v27;
      v31 = v27[1];
      v27 += 2;
      v32 = *(_QWORD *)a1 + 8 * (v29 + 6 * v30);
      v33 = *(_QWORD *)a2 + 8 * v31;
      result = *(__n128 *)(v32 + 32);
      v34 = *(_OWORD *)v32;
      *(_OWORD *)(v33 + 16) = *(_OWORD *)(v32 + 16);
      *(__n128 *)(v33 + 32) = result;
      *(_OWORD *)v33 = v34;
    }
    while (v27 != v28);
  }
  v35 = a3[9];
  v36 = a3[10];
  if (v35 != v36)
  {
    v37 = *(_DWORD *)(a1 + 76);
    do
    {
      v38 = *v35;
      v39 = v35[1];
      v35 += 2;
      v40 = *(_QWORD *)a1 + 8 * (v37 + 6 * v38);
      v41 = *(_QWORD *)a2 + 8 * v39;
      result = *(__n128 *)(v40 + 32);
      v42 = *(_OWORD *)v40;
      *(_OWORD *)(v41 + 16) = *(_OWORD *)(v40 + 16);
      *(__n128 *)(v41 + 32) = result;
      *(_OWORD *)v41 = v42;
    }
    while (v35 != v36);
  }
  v43 = a3[12];
  v44 = a3[13];
  if (v43 != v44)
  {
    v45 = *(_DWORD *)(a1 + 80);
    do
    {
      v46 = *v43;
      v47 = v43[1];
      v43 += 2;
      v48 = (__n128 *)(*(_QWORD *)a1 + 8 * (3 * v46 + v45));
      v49 = (__n128 *)(*(_QWORD *)a2 + 8 * v47);
      result = *v48;
      v49[1].n128_u64[0] = v48[1].n128_u64[0];
      *v49 = result;
    }
    while (v43 != v44);
  }
  v50 = a3[15];
  v51 = a3[16];
  if (v50 != v51)
  {
    v52 = *(_DWORD *)(a1 + 84);
    do
    {
      v53 = *v50;
      v54 = v50[1];
      v50 += 2;
      result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v53 + v52));
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v54) = result.n128_u64[0];
    }
    while (v50 != v51);
  }
  v55 = a3[18];
  v56 = a3[19];
  if (v55 != v56)
  {
    v57 = *(_DWORD *)(a1 + 88);
    do
    {
      v58 = *v55;
      v59 = v55[1];
      v55 += 2;
      v60 = (__n128 *)(*(_QWORD *)a1 + 8 * (3 * v58 + v57));
      v61 = (__n128 *)(*(_QWORD *)a2 + 8 * v59);
      result = *v60;
      v61[1].n128_u64[0] = v60[1].n128_u64[0];
      *v61 = result;
    }
    while (v55 != v56);
  }
  v62 = a3[21];
  v63 = a3[22];
  if (v62 != v63)
  {
    v64 = *(_DWORD *)(a1 + 92);
    do
    {
      v65 = *v62;
      v66 = v62[1];
      v62 += 2;
      v67 = *(_QWORD *)a1 + 8 * (v64 + 4 * v65);
      v68 = (_OWORD *)(*(_QWORD *)a2 + 8 * v66);
      result = *(__n128 *)v67;
      v69 = *(_OWORD *)(v67 + 16);
      *v68 = *(_OWORD *)v67;
      v68[1] = v69;
    }
    while (v62 != v63);
  }
  v70 = a3[24];
  v71 = a3[25];
  if (v70 != v71)
  {
    v72 = *(_DWORD *)(a1 + 96);
    do
    {
      v73 = *v70;
      v74 = v70[1];
      v70 += 2;
      v75 = *(_QWORD *)a1 + 8 * (v72 + 4 * v73);
      v76 = (_OWORD *)(*(_QWORD *)a2 + 8 * v74);
      result = *(__n128 *)v75;
      v77 = *(_OWORD *)(v75 + 16);
      *v76 = *(_OWORD *)v75;
      v76[1] = v77;
    }
    while (v70 != v71);
  }
  v78 = a3[27];
  v79 = a3[28];
  if (v78 != v79)
  {
    v80 = *(_DWORD *)(a1 + 100);
    do
    {
      v81 = *v78;
      v82 = v78[1];
      v78 += 2;
      v83 = (__n128 *)(*(_QWORD *)a1 + 8 * (3 * v81 + v80));
      v84 = (__n128 *)(*(_QWORD *)a2 + 8 * v82);
      result = *v83;
      v84[1].n128_u64[0] = v83[1].n128_u64[0];
      *v84 = result;
    }
    while (v78 != v79);
  }
  return result;
}

uint64_t sub_20FA4AD9C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  unsigned int v16;
  void *v17;
  size_t v18;
  uint64_t *v20;

  v10 = 9 * ((*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 3)
      + 6
      * (((*(_QWORD *)(a5 + 56) - *(_QWORD *)(a5 + 48)) >> 3)
       + ((*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3)
       + ((*(_QWORD *)(a5 + 80) - *(_QWORD *)(a5 + 72)) >> 3))
      + ((*(_QWORD *)(a5 + 128) - *(_QWORD *)(a5 + 120)) >> 3)
      + (((*(_QWORD *)(a5 + 176) - *(_QWORD *)(a5 + 168)) >> 1) & 0xFFFFFFFC)
      + (((*(_QWORD *)(a5 + 200) - *(_QWORD *)(a5 + 192)) >> 1) & 0xFFFFFFFC)
      + 3
      * (((*(_QWORD *)(a5 + 152) - *(_QWORD *)(a5 + 144)) >> 3)
       + ((*(_QWORD *)(a5 + 104) - *(_QWORD *)(a5 + 96)) >> 3)
       + ((*(_QWORD *)(a5 + 224) - *(_QWORD *)(a5 + 216)) >> 3));
  v11 = 9 * ((*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3)
      + 6
      * (((*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3)
       + ((*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
       + ((*(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72)) >> 3))
      + ((*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 3)
      + (((*(_QWORD *)(a4 + 176) - *(_QWORD *)(a4 + 168)) >> 1) & 0xFFFFFFFC)
      + (((*(_QWORD *)(a4 + 200) - *(_QWORD *)(a4 + 192)) >> 1) & 0xFFFFFFFC)
      + 3
      * (((*(_QWORD *)(a4 + 152) - *(_QWORD *)(a4 + 144)) >> 3)
       + ((*(_QWORD *)(a4 + 104) - *(_QWORD *)(a4 + 96)) >> 3)
       + ((*(_QWORD *)(a4 + 224) - *(_QWORD *)(a4 + 216)) >> 3));
  v12 = v10 * (unint64_t)v11;
  *((_DWORD *)a2 + 4) = v11;
  *((_DWORD *)a2 + 5) = v10;
  v13 = v10;
  v14 = v11;
  if ((unint64_t)a2[1] < v12)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v15 = (8 * v12 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v15 >> 3);
    *a2 = operator new(v15, (std::align_val_t)0x20uLL);
    v14 = *((_DWORD *)a2 + 4);
    v13 = *((_DWORD *)a2 + 5);
  }
  v16 = v13 * v14;
  if (v16)
    bzero(*a2, 8 * v16);
  if (v10 == *(_DWORD *)(a3 + 16) && v11 == *(_DWORD *)(a3 + 20))
  {
    v17 = *(void **)a3;
  }
  else
  {
    *(_DWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 20) = v11;
    v17 = *(void **)a3;
    if (*(_QWORD *)(a3 + 8) < v12)
    {
      if (v17)
        MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
      v18 = (8 * v12 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = v18 >> 3;
      v17 = operator new(v18, (std::align_val_t)0x20uLL);
      *(_QWORD *)a3 = v17;
      v10 = *(_DWORD *)(a3 + 16);
      v11 = *(_DWORD *)(a3 + 20);
    }
  }
  if (v10 * v11)
    bzero(v17, 8 * v10 * v11);
  sub_20FA4B06C(a1, a3, (unsigned int **)a5, a4);
  sub_20FA4B06C(a1, (uint64_t)a2, (unsigned int **)a4, a5);
  v20 = (uint64_t *)a3;
  return sub_20F2B809C((uint64_t)a2, &v20);
}

uint64_t sub_20FA4B06C(uint64_t result, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  int8x16_t v24;
  __int128 v25;
  int8x16_t v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t *v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  __int128 *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v74;
  _DWORD *v75;
  unsigned int *v76;
  unsigned int *v77;
  _DWORD *v79;
  _DWORD *v80;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int *v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  uint64_t v103;
  int8x16_t *v104;
  int8x16_t *v105;
  int8x16_t *v106;
  unsigned int v107;
  uint64_t *v108;
  uint64_t v109;
  int8x16_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  int v119;
  uint64_t *v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  _OWORD *v133;
  _OWORD *v134;
  _OWORD *v135;
  _OWORD *v136;
  unsigned int v137;
  uint64_t *v138;
  uint64_t v139;
  __int128 *v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  int v150;
  uint64_t *v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  _OWORD *v164;
  _OWORD *v165;
  _OWORD *v166;
  _OWORD *v167;
  unsigned int v168;
  uint64_t *v169;
  uint64_t v170;
  __int128 *v172;
  _DWORD *v174;
  _DWORD *v175;
  unsigned int *v176;
  unsigned int *v177;
  _DWORD *v179;
  _DWORD *v180;
  _DWORD *v182;
  _DWORD *v183;
  _DWORD *v185;
  _DWORD *v186;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  int v195;
  uint64_t *v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int *v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  uint64_t v206;
  int8x16_t *v207;
  int8x16_t *v208;
  int8x16_t *v209;
  unsigned int v210;
  uint64_t *v211;
  uint64_t v212;
  int8x16_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  int v222;
  uint64_t *v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int *v226;
  int8x16_t v227;
  __int128 v228;
  int8x16_t v229;
  unint64_t v230;
  int8x16_t v231;
  int8x16_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int8x16_t *v238;
  unsigned int v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v243;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  int v252;
  uint64_t *v253;
  uint64_t v254;
  unsigned int *v255;
  unsigned int *v256;
  int8x16_t v257;
  int8x16_t v258;
  unint64_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  unint64_t v263;
  int8x16_t v264;
  int8x16_t v265;
  unint64_t v266;
  int8x16_t v267;
  uint64_t v268;
  uint64_t v269;
  int8x16_t *v270;
  int8x16_t *v271;
  int8x16_t *v272;
  unsigned int v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v277;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  int v286;
  uint64_t *v287;
  uint64_t v288;
  unsigned int *v289;
  unsigned int *v290;
  int8x16_t v291;
  int8x16_t v292;
  unint64_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  unint64_t v297;
  int8x16_t v298;
  int8x16_t v299;
  unint64_t v300;
  int8x16_t v301;
  uint64_t v302;
  uint64_t v303;
  int8x16_t *v304;
  int8x16_t *v305;
  int8x16_t *v306;
  unsigned int v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v311;
  _DWORD *v313;
  _DWORD *v314;
  unsigned int *v315;
  unsigned int *v316;
  _DWORD *v318;
  _DWORD *v319;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  int v328;
  uint64_t *v329;
  uint64_t v330;
  unsigned int *v331;
  unsigned int *v332;
  int8x16_t v333;
  __int128 v334;
  int8x16_t v335;
  unint64_t v336;
  int8x16_t v337;
  int8x16_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int8x16_t *v344;
  unsigned int v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  int v353;
  uint64_t v354;
  uint64_t *v355;
  unsigned int v356;
  unsigned int *v357;
  unsigned int *v358;
  unsigned int v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v363;
  int v364;
  uint64_t *v365;
  uint64_t v366;
  _DWORD *v368;
  _DWORD *v369;
  _DWORD *v371;
  _DWORD *v372;
  _DWORD *v374;
  _DWORD *v375;
  uint64_t v377;
  uint64_t v378;
  uint64_t *v379;
  int v380;
  uint64_t v381;
  uint64_t *v382;
  unsigned int v383;
  unsigned int *v384;
  unsigned int *v385;
  int8x16_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  unsigned int v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v395;
  uint64_t v396;
  int v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  int v404;
  uint64_t v405;
  uint64_t *v406;
  unsigned int v407;
  unsigned int *v408;
  unsigned int *v409;
  uint64_t v410;
  _QWORD *v411;
  unsigned int v412;
  uint64_t *v413;
  uint64_t v414;
  int8x16_t *v416;
  int8x16_t v417;
  int8x16_t v418;
  uint64_t v419;
  int v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v424;
  uint64_t v425;
  uint64_t *v426;
  int v427;
  uint64_t v428;
  uint64_t *v429;
  unsigned int v430;
  unsigned int *v431;
  unsigned int *v432;
  uint64_t v433;
  _QWORD *v434;
  unsigned int v435;
  uint64_t *v436;
  uint64_t v437;
  int8x16_t *v439;
  int8x16_t v440;
  int8x16_t v441;
  uint64_t v442;
  int v443;
  uint64_t *v444;
  uint64_t v445;
  _DWORD *v447;
  _DWORD *v448;
  unsigned int *v449;
  unsigned int *v450;
  _DWORD *v452;
  _DWORD *v453;
  uint64_t v455;
  uint64_t v456;
  uint64_t *v457;
  int v458;
  uint64_t v459;
  uint64_t *v460;
  unsigned int v461;
  unsigned int *v462;
  unsigned int *v463;
  int8x16_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  _QWORD *v468;
  unsigned int v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v473;
  uint64_t v474;
  int v475;
  uint64_t *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t *v480;
  unsigned int v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t v484;
  int v485;
  uint64_t *v486;
  uint64_t v487;
  unsigned int *v488;
  unsigned int *v489;
  int8x16_t v490;
  __int128 v491;
  int8x16_t v492;
  unint64_t v493;
  int8x16_t v494;
  int8x16_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  int8x16_t *v501;
  unsigned int v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v506;
  _DWORD *v508;
  _DWORD *v509;
  uint64_t v511;
  uint64_t v512;
  uint64_t *v513;
  int v514;
  uint64_t v515;
  uint64_t *v516;
  unsigned int v517;
  unsigned int *v518;
  unsigned int *v519;
  unsigned int v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v524;
  uint64_t v525;
  __int128 v526;
  uint64_t v527;
  int v528;
  uint64_t *v529;
  uint64_t v530;
  _DWORD *v532;
  _DWORD *v533;
  _DWORD *v535;
  _DWORD *v536;
  _DWORD *v538;
  _DWORD *v539;
  uint64_t v541;
  uint64_t v542;
  uint64_t *v543;
  unsigned int v544;
  uint64_t v545;
  uint64_t *v546;
  uint64_t v547;
  int v548;
  uint64_t *v549;
  uint64_t v550;
  unsigned int *v551;
  unsigned int *v552;
  int8x16_t v553;
  __int128 v554;
  int8x16_t v555;
  unint64_t v556;
  int8x16_t v557;
  int8x16_t v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int8x16_t *v564;
  unsigned int v565;
  uint64_t *v566;
  uint64_t v567;
  uint64_t v569;
  uint64_t v571;
  uint64_t v572;
  uint64_t *v573;
  unsigned int v574;
  uint64_t v575;
  uint64_t *v576;
  uint64_t v577;
  int v578;
  uint64_t *v579;
  uint64_t v580;
  unsigned int *v581;
  unsigned int *v582;
  int8x16_t v583;
  int8x16_t v584;
  unint64_t v585;
  int8x16_t v586;
  int8x16_t v587;
  int8x16_t v588;
  unint64_t v589;
  int8x16_t v590;
  int8x16_t v591;
  unint64_t v592;
  int8x16_t v593;
  uint64_t v594;
  uint64_t v595;
  int8x16_t *v596;
  int8x16_t *v597;
  int8x16_t *v598;
  unsigned int v599;
  uint64_t *v600;
  uint64_t v601;
  uint64_t v603;
  uint64_t v605;
  uint64_t v606;
  uint64_t *v607;
  unsigned int v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  int v612;
  uint64_t *v613;
  uint64_t v614;
  unsigned int *v615;
  unsigned int *v616;
  int8x16_t v617;
  int8x16_t v618;
  unint64_t v619;
  int8x16_t v620;
  int8x16_t v621;
  int8x16_t v622;
  unint64_t v623;
  int8x16_t v624;
  int8x16_t v625;
  unint64_t v626;
  int8x16_t v627;
  uint64_t v628;
  uint64_t v629;
  int8x16_t *v630;
  int8x16_t *v631;
  int8x16_t *v632;
  unsigned int v633;
  uint64_t *v634;
  uint64_t v635;
  uint64_t v637;
  _DWORD *v639;
  _DWORD *v640;
  unsigned int *v641;
  unsigned int *v642;
  _DWORD *v644;
  _DWORD *v645;
  uint64_t v647;
  uint64_t v648;
  uint64_t *v649;
  unsigned int v650;
  uint64_t v651;
  uint64_t *v652;
  uint64_t v653;
  int v654;
  uint64_t *v655;
  uint64_t v656;
  unsigned int *v657;
  unsigned int *v658;
  int8x16_t v659;
  __int128 v660;
  int8x16_t v661;
  unint64_t v662;
  int8x16_t v663;
  int8x16_t v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int8x16_t *v670;
  unsigned int v671;
  uint64_t *v672;
  uint64_t v673;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t *v678;
  unsigned int v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t v682;
  int v683;
  uint64_t *v684;
  uint64_t v685;
  unsigned int *v686;
  unsigned int *v687;
  int8x16_t v688;
  int8x16_t v689;
  int8x16_t v690;
  int8x16_t v691;
  int8x16_t v692;
  int8x16_t v693;
  int8x16_t v694;
  int8x16_t v695;
  int8x16_t v696;
  int8x16_t v697;
  unint64_t v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  int8x16_t v702;
  int8x16_t v703;
  int8x16_t v704;
  int8x16_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int8x16_t v708;
  int8x16_t v709;
  uint64_t v710;
  int8x16_t *v711;
  int8x16_t *v712;
  int8x16_t *v713;
  int8x16_t *v714;
  int8x16_t *v715;
  int8x16_t *v716;
  unsigned int v717;
  uint64_t *v718;
  uint64_t v719;
  int8x16_t *v721;
  _DWORD *v723;
  _DWORD *v724;
  uint64_t v726;
  uint64_t v727;
  uint64_t *v728;
  unsigned int v729;
  uint64_t v730;
  uint64_t *v731;
  uint64_t v732;
  int v733;
  uint64_t *v734;
  uint64_t v735;
  unsigned int *v736;
  unsigned int *v737;
  int8x16_t v738;
  int8x16_t v739;
  int8x16_t v740;
  int8x16_t v741;
  int8x16_t v742;
  int8x16_t v743;
  int8x16_t v744;
  unint64_t v745;
  unint64_t v746;
  unint64_t v747;
  int8x16_t v748;
  int8x16_t v749;
  uint64_t v750;
  int8x16_t *v751;
  int8x16_t *v752;
  int8x16_t *v753;
  unsigned int v754;
  uint64_t *v755;
  uint64_t v756;
  int8x16_t *v758;
  _DWORD *v760;
  _DWORD *v761;
  uint64_t v763;
  uint64_t v764;
  uint64_t *v765;
  int v766;
  uint64_t v767;
  uint64_t *v768;
  unsigned int v769;
  unsigned int *v770;
  unsigned int *v771;
  unsigned int v772;
  uint64_t *v773;
  uint64_t v774;
  __int128 *v776;
  _OWORD *v777;
  __int128 v778;
  __int128 v779;
  uint64_t v780;
  int v781;
  uint64_t *v782;
  uint64_t v783;
  _DWORD *v785;
  _DWORD *v786;
  _DWORD *v788;
  _DWORD *v789;
  _DWORD *v791;
  _DWORD *v792;
  uint64_t v794;
  uint64_t v795;
  uint64_t *v796;
  unsigned int v797;
  uint64_t v798;
  uint64_t *v799;
  uint64_t v800;
  int v801;
  uint64_t *v802;
  uint64_t v803;
  unsigned int *v804;
  unsigned int *v805;
  int8x16_t v806;
  int8x16_t v807;
  int8x16_t v808;
  int8x16_t v809;
  int8x16_t v810;
  int8x16_t v811;
  int8x16_t v812;
  unint64_t v813;
  unint64_t v814;
  unint64_t v815;
  int8x16_t v816;
  int8x16_t v817;
  uint64_t v818;
  int8x16_t *v819;
  int8x16_t *v820;
  int8x16_t *v821;
  unsigned int v822;
  uint64_t *v823;
  uint64_t v824;
  int8x16_t *v826;
  uint64_t v828;
  uint64_t v829;
  uint64_t *v830;
  unsigned int v831;
  uint64_t v832;
  uint64_t *v833;
  uint64_t v834;
  int v835;
  uint64_t *v836;
  uint64_t v837;
  unsigned int *v838;
  unsigned int *v839;
  int8x16_t v840;
  int8x16_t v841;
  int8x16_t v842;
  int8x16_t v843;
  int8x16_t v844;
  int8x16_t v845;
  int8x16_t v846;
  int8x16_t v847;
  int8x16_t v848;
  int8x16_t v849;
  int8x16_t v850;
  int8x16_t v851;
  uint64_t v852;
  int8x16_t *v853;
  int8x16_t *v854;
  int8x16_t *v855;
  int8x16_t *v856;
  unsigned int v857;
  uint64_t *v858;
  uint64_t v859;
  int8x16_t *v861;
  uint64_t v863;
  uint64_t v864;
  uint64_t *v865;
  unsigned int v866;
  uint64_t v867;
  uint64_t *v868;
  uint64_t v869;
  int v870;
  uint64_t *v871;
  uint64_t v872;
  unsigned int *v873;
  unsigned int *v874;
  int8x16_t v875;
  int8x16_t v876;
  int8x16_t v877;
  int8x16_t v878;
  int8x16_t v879;
  int8x16_t v880;
  int8x16_t v881;
  int8x16_t v882;
  int8x16_t v883;
  int8x16_t v884;
  int8x16_t v885;
  int8x16_t v886;
  uint64_t v887;
  int8x16_t *v888;
  int8x16_t *v889;
  int8x16_t *v890;
  int8x16_t *v891;
  unsigned int v892;
  uint64_t *v893;
  uint64_t v894;
  int8x16_t *v896;
  _DWORD *v898;
  _DWORD *v899;
  unsigned int *v900;
  unsigned int *v901;
  _DWORD *v903;
  _DWORD *v904;
  _DWORD *v906;
  _DWORD *v907;
  uint64_t v909;
  uint64_t v910;
  uint64_t *v911;
  unsigned int v912;
  uint64_t v913;
  uint64_t *v914;
  uint64_t v915;
  int v916;
  uint64_t *v917;
  uint64_t v918;
  unsigned int *v919;
  unsigned int *v920;
  int8x16_t v921;
  int8x16_t v922;
  int8x16_t v923;
  int8x16_t v924;
  int8x16_t v925;
  int8x16_t v926;
  int8x16_t v927;
  unint64_t v928;
  unint64_t v929;
  unint64_t v930;
  int8x16_t v931;
  int8x16_t v932;
  uint64_t v933;
  int8x16_t *v934;
  int8x16_t *v935;
  int8x16_t *v936;
  unsigned int v937;
  uint64_t *v938;
  uint64_t v939;
  int8x16_t *v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t *v944;
  unsigned int v945;
  uint64_t v946;
  uint64_t *v947;
  uint64_t v948;
  int v949;
  uint64_t *v950;
  uint64_t v951;
  unsigned int *v952;
  unsigned int *v953;
  int8x16_t v954;
  int8x16_t v955;
  int8x16_t v956;
  int8x16_t v957;
  int8x16_t v958;
  int8x16_t v959;
  int8x16_t v960;
  int8x16_t v961;
  int8x16_t v962;
  int8x16_t v963;
  unint64_t v964;
  unint64_t v965;
  unint64_t v966;
  unint64_t v967;
  int8x16_t v968;
  int8x16_t v969;
  int8x16_t v970;
  int8x16_t v971;
  int8x16_t v972;
  int8x16_t v973;
  int8x16_t v974;
  int8x16_t v975;
  uint64_t v976;
  int8x16_t *v977;
  int8x16_t *v978;
  int8x16_t *v979;
  int8x16_t *v980;
  int8x16_t *v981;
  int8x16_t *v982;
  unsigned int v983;
  uint64_t *v984;
  uint64_t v985;
  int8x16_t *v987;
  uint64_t v989;
  uint64_t v990;
  uint64_t *v991;
  unsigned int v992;
  uint64_t v993;
  uint64_t *v994;
  uint64_t v995;
  int v996;
  uint64_t *v997;
  uint64_t v998;
  unsigned int *v999;
  unsigned int *v1000;
  int8x16_t v1001;
  int8x16_t v1002;
  int8x16_t v1003;
  int8x16_t v1004;
  int8x16_t v1005;
  int8x16_t v1006;
  int8x16_t v1007;
  int8x16_t v1008;
  int8x16_t v1009;
  int8x16_t v1010;
  unint64_t v1011;
  unint64_t v1012;
  unint64_t v1013;
  unint64_t v1014;
  int8x16_t v1015;
  int8x16_t v1016;
  int8x16_t v1017;
  int8x16_t v1018;
  int8x16_t v1019;
  int8x16_t v1020;
  int8x16_t v1021;
  int8x16_t v1022;
  uint64_t v1023;
  int8x16_t *v1024;
  int8x16_t *v1025;
  int8x16_t *v1026;
  int8x16_t *v1027;
  int8x16_t *v1028;
  int8x16_t *v1029;
  unsigned int v1030;
  uint64_t *v1031;
  uint64_t v1032;
  int8x16_t *v1034;
  _DWORD *v1036;
  _DWORD *v1037;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t *v1041;
  unsigned int v1042;
  uint64_t v1043;
  uint64_t *v1044;
  uint64_t v1045;
  int v1046;
  uint64_t *v1047;
  uint64_t v1048;
  unsigned int *v1049;
  unsigned int *v1050;
  int8x16_t v1051;
  int8x16_t v1052;
  int8x16_t v1053;
  int8x16_t v1054;
  int8x16_t v1055;
  int8x16_t v1056;
  int8x16_t v1057;
  unint64_t v1058;
  unint64_t v1059;
  unint64_t v1060;
  int8x16_t v1061;
  int8x16_t v1062;
  uint64_t v1063;
  int8x16_t *v1064;
  int8x16_t *v1065;
  int8x16_t *v1066;
  unsigned int v1067;
  uint64_t *v1068;
  uint64_t v1069;
  int8x16_t *v1071;
  _DWORD *v1073;
  _DWORD *v1074;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t *v1078;
  int v1079;
  uint64_t v1080;
  uint64_t *v1081;
  unsigned int v1082;
  unsigned int *v1083;
  unsigned int *v1084;
  unsigned int v1085;
  uint64_t *v1086;
  uint64_t v1087;
  __int128 *v1089;
  _OWORD *v1090;
  __int128 v1091;
  __int128 v1092;
  uint64_t v1093;
  int v1094;
  uint64_t *v1095;
  uint64_t v1096;
  _DWORD *v1098;
  _DWORD *v1099;
  _DWORD *v1101;
  _DWORD *v1102;
  _DWORD *v1104;
  _DWORD *v1105;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t *v1109;
  unsigned int v1110;
  uint64_t v1111;
  uint64_t *v1112;
  uint64_t v1113;
  int v1114;
  uint64_t *v1115;
  uint64_t v1116;
  unsigned int *v1117;
  unsigned int *v1118;
  int8x16_t v1119;
  int8x16_t v1120;
  int8x16_t v1121;
  int8x16_t v1122;
  int8x16_t v1123;
  int8x16_t v1124;
  int8x16_t v1125;
  unint64_t v1126;
  unint64_t v1127;
  unint64_t v1128;
  int8x16_t v1129;
  int8x16_t v1130;
  uint64_t v1131;
  int8x16_t *v1132;
  int8x16_t *v1133;
  int8x16_t *v1134;
  unsigned int v1135;
  uint64_t *v1136;
  uint64_t v1137;
  int8x16_t *v1139;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t *v1143;
  unsigned int v1144;
  uint64_t v1145;
  uint64_t *v1146;
  uint64_t v1147;
  int v1148;
  uint64_t *v1149;
  uint64_t v1150;
  unsigned int *v1151;
  unsigned int *v1152;
  int8x16_t v1153;
  int8x16_t v1154;
  int8x16_t v1155;
  int8x16_t v1156;
  int8x16_t v1157;
  int8x16_t v1158;
  int8x16_t v1159;
  int8x16_t v1160;
  int8x16_t v1161;
  int8x16_t v1162;
  int8x16_t v1163;
  int8x16_t v1164;
  uint64_t v1165;
  int8x16_t *v1166;
  int8x16_t *v1167;
  int8x16_t *v1168;
  int8x16_t *v1169;
  unsigned int v1170;
  uint64_t *v1171;
  uint64_t v1172;
  int8x16_t *v1174;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t *v1178;
  unsigned int v1179;
  uint64_t v1180;
  uint64_t *v1181;
  uint64_t v1182;
  int v1183;
  uint64_t *v1184;
  uint64_t v1185;
  unsigned int *v1186;
  unsigned int *v1187;
  int8x16_t v1188;
  int8x16_t v1189;
  int8x16_t v1190;
  int8x16_t v1191;
  int8x16_t v1192;
  int8x16_t v1193;
  int8x16_t v1194;
  int8x16_t v1195;
  int8x16_t v1196;
  int8x16_t v1197;
  int8x16_t v1198;
  int8x16_t v1199;
  uint64_t v1200;
  int8x16_t *v1201;
  int8x16_t *v1202;
  int8x16_t *v1203;
  int8x16_t *v1204;
  unsigned int v1205;
  uint64_t *v1206;
  uint64_t v1207;
  int8x16_t *v1209;
  _DWORD *v1211;
  _DWORD *v1212;
  unsigned int *v1213;
  unsigned int *v1214;
  _DWORD *v1216;
  _DWORD *v1217;
  _DWORD *v1219;
  _DWORD *v1220;
  _DWORD *v1222;
  _DWORD *v1223;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t *v1227;
  unsigned int v1228;
  uint64_t v1229;
  uint64_t *v1230;
  uint64_t v1231;
  int v1232;
  uint64_t *v1233;
  uint64_t v1234;
  unsigned int *v1235;
  unsigned int *v1236;
  int8x16_t v1237;
  int8x16_t v1238;
  int8x16_t v1239;
  int8x16_t v1240;
  int8x16_t v1241;
  int8x16_t v1242;
  int8x16_t v1243;
  unint64_t v1244;
  unint64_t v1245;
  unint64_t v1246;
  int8x16_t v1247;
  int8x16_t v1248;
  uint64_t v1249;
  int8x16_t *v1250;
  int8x16_t *v1251;
  int8x16_t *v1252;
  unsigned int v1253;
  uint64_t *v1254;
  uint64_t v1255;
  int8x16_t *v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t *v1260;
  unsigned int v1261;
  uint64_t v1262;
  uint64_t *v1263;
  uint64_t v1264;
  int v1265;
  uint64_t *v1266;
  uint64_t v1267;
  unsigned int *v1268;
  unsigned int *v1269;
  int8x16_t v1270;
  int8x16_t v1271;
  int8x16_t v1272;
  int8x16_t v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  int8x16_t v1277;
  int8x16_t v1278;
  int8x16_t v1279;
  int8x16_t v1280;
  __int128 v1281;
  __int128 v1282;
  int8x16_t v1283;
  int8x16_t v1284;
  int8x16_t v1285;
  int8x16_t v1286;
  int8x16_t v1287;
  int8x16_t v1288;
  int8x16_t v1289;
  int8x16_t v1290;
  unint64_t v1291;
  unint64_t v1292;
  unint64_t v1293;
  unint64_t v1294;
  unint64_t v1295;
  unint64_t v1296;
  unint64_t v1297;
  unint64_t v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  __int128 v1308;
  __int128 v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  __int128 v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  int8x16_t *v1321;
  uint64_t v1322;
  int8x16_t *v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  unsigned int v1328;
  uint64_t *v1329;
  uint64_t v1330;
  uint64_t v1332;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t *v1336;
  unsigned int v1337;
  uint64_t v1338;
  uint64_t *v1339;
  uint64_t v1340;
  int v1341;
  uint64_t *v1342;
  uint64_t v1343;
  unsigned int *v1344;
  unsigned int *v1345;
  int8x16_t v1346;
  int8x16_t v1347;
  int8x16_t v1348;
  int8x16_t v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  __int128 v1353;
  int8x16_t v1354;
  int8x16_t v1355;
  int8x16_t v1356;
  int8x16_t v1357;
  __int128 v1358;
  __int128 v1359;
  int8x16_t v1360;
  int8x16_t v1361;
  int8x16_t v1362;
  int8x16_t v1363;
  unint64_t v1364;
  unint64_t v1365;
  unint64_t v1366;
  unint64_t v1367;
  unint64_t v1368;
  unint64_t v1369;
  unint64_t v1370;
  unint64_t v1371;
  unint64_t v1372;
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  int8x16_t *v1382;
  uint64_t v1383;
  int8x16_t *v1384;
  uint64_t v1385;
  unsigned int v1386;
  uint64_t *v1387;
  uint64_t v1388;
  uint64_t v1390;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t *v1394;
  unsigned int v1395;
  uint64_t v1396;
  uint64_t *v1397;
  uint64_t v1398;
  int v1399;
  uint64_t *v1400;
  uint64_t v1401;
  unsigned int *v1402;
  unsigned int *v1403;
  int8x16_t v1404;
  int8x16_t v1405;
  int8x16_t v1406;
  int8x16_t v1407;
  __int128 v1408;
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  int8x16_t v1412;
  int8x16_t v1413;
  int8x16_t v1414;
  int8x16_t v1415;
  __int128 v1416;
  __int128 v1417;
  int8x16_t v1418;
  int8x16_t v1419;
  int8x16_t v1420;
  int8x16_t v1421;
  unint64_t v1422;
  unint64_t v1423;
  unint64_t v1424;
  unint64_t v1425;
  unint64_t v1426;
  unint64_t v1427;
  unint64_t v1428;
  unint64_t v1429;
  unint64_t v1430;
  __int128 v1431;
  __int128 v1432;
  __int128 v1433;
  __int128 v1434;
  __int128 v1435;
  __int128 v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  int8x16_t *v1440;
  uint64_t v1441;
  int8x16_t *v1442;
  uint64_t v1443;
  unsigned int v1444;
  uint64_t *v1445;
  uint64_t v1446;
  uint64_t v1448;
  _DWORD *v1450;
  _DWORD *v1451;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t *v1455;
  unsigned int v1456;
  uint64_t v1457;
  uint64_t *v1458;
  uint64_t v1459;
  int v1460;
  uint64_t *v1461;
  uint64_t v1462;
  unsigned int *v1463;
  unsigned int *v1464;
  int8x16_t v1465;
  int8x16_t v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  int8x16_t v1471;
  int8x16_t v1472;
  int8x16_t v1473;
  int8x16_t v1474;
  int8x16_t v1475;
  int8x16_t v1476;
  int8x16_t v1477;
  int8x16_t v1478;
  unint64_t v1479;
  unint64_t v1480;
  unint64_t v1481;
  int8x16_t v1482;
  int8x16_t v1483;
  unint64_t v1484;
  unint64_t v1485;
  unint64_t v1486;
  unint64_t v1487;
  int8x16_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  int8x16_t *v1493;
  unsigned int v1494;
  uint64_t *v1495;
  uint64_t v1496;
  uint64_t v1498;
  _DWORD *v1500;
  _DWORD *v1501;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t *v1505;
  int v1506;
  uint64_t v1507;
  uint64_t *v1508;
  unsigned int v1509;
  unsigned int *v1510;
  unsigned int *v1511;
  unsigned int v1512;
  uint64_t *v1513;
  uint64_t v1514;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  uint64_t v1522;
  int v1523;
  uint64_t *v1524;
  uint64_t v1525;
  _DWORD *v1527;
  _DWORD *v1528;
  _DWORD *v1530;
  _DWORD *v1531;
  _DWORD *v1533;
  _DWORD *v1534;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t *v1538;
  unsigned int v1539;
  uint64_t v1540;
  uint64_t *v1541;
  uint64_t v1542;
  int v1543;
  uint64_t *v1544;
  uint64_t v1545;
  unsigned int *v1546;
  unsigned int *v1547;
  int8x16_t v1548;
  int8x16_t v1549;
  __int128 v1550;
  __int128 v1551;
  __int128 v1552;
  __int128 v1553;
  int8x16_t v1554;
  int8x16_t v1555;
  int8x16_t v1556;
  int8x16_t v1557;
  int8x16_t v1558;
  int8x16_t v1559;
  int8x16_t v1560;
  int8x16_t v1561;
  unint64_t v1562;
  unint64_t v1563;
  unint64_t v1564;
  int8x16_t v1565;
  int8x16_t v1566;
  unint64_t v1567;
  unint64_t v1568;
  unint64_t v1569;
  unint64_t v1570;
  int8x16_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  int8x16_t *v1576;
  unsigned int v1577;
  uint64_t *v1578;
  uint64_t v1579;
  uint64_t v1581;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t *v1585;
  unsigned int v1586;
  uint64_t v1587;
  uint64_t *v1588;
  uint64_t v1589;
  int v1590;
  uint64_t *v1591;
  uint64_t v1592;
  unsigned int *v1593;
  unsigned int *v1594;
  int8x16_t v1595;
  int8x16_t v1596;
  int8x16_t v1597;
  int8x16_t v1598;
  int8x16_t v1599;
  int8x16_t v1600;
  int8x16_t v1601;
  int8x16_t v1602;
  int8x16_t v1603;
  int8x16_t v1604;
  unint64_t v1605;
  unint64_t v1606;
  int8x16_t v1607;
  int8x16_t v1608;
  unint64_t v1609;
  int8x16_t v1610;
  unint64_t v1611;
  int8x16_t v1612;
  int8x16_t v1613;
  int8x16_t v1614;
  int8x16_t v1615;
  int8x16_t v1616;
  int8x16_t v1617;
  unint64_t v1618;
  unint64_t v1619;
  int8x16_t v1620;
  unint64_t v1621;
  unint64_t v1622;
  int8x16_t v1623;
  unint64_t v1624;
  int8x16_t v1625;
  int8x16_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  int8x16_t *v1629;
  int8x16_t *v1630;
  int8x16_t *v1631;
  unsigned int v1632;
  uint64_t *v1633;
  uint64_t v1634;
  uint64_t v1636;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t *v1640;
  unsigned int v1641;
  uint64_t v1642;
  uint64_t *v1643;
  uint64_t v1644;
  int v1645;
  uint64_t *v1646;
  uint64_t v1647;
  unsigned int *v1648;
  unsigned int *v1649;
  int8x16_t v1650;
  int8x16_t v1651;
  int8x16_t v1652;
  int8x16_t v1653;
  int8x16_t v1654;
  int8x16_t v1655;
  int8x16_t v1656;
  int8x16_t v1657;
  int8x16_t v1658;
  int8x16_t v1659;
  unint64_t v1660;
  unint64_t v1661;
  int8x16_t v1662;
  int8x16_t v1663;
  unint64_t v1664;
  int8x16_t v1665;
  unint64_t v1666;
  int8x16_t v1667;
  int8x16_t v1668;
  int8x16_t v1669;
  int8x16_t v1670;
  int8x16_t v1671;
  int8x16_t v1672;
  unint64_t v1673;
  unint64_t v1674;
  int8x16_t v1675;
  unint64_t v1676;
  unint64_t v1677;
  int8x16_t v1678;
  unint64_t v1679;
  int8x16_t v1680;
  int8x16_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  int8x16_t *v1684;
  int8x16_t *v1685;
  int8x16_t *v1686;
  unsigned int v1687;
  uint64_t *v1688;
  uint64_t v1689;
  uint64_t v1691;
  _DWORD *v1693;
  _DWORD *v1694;
  unsigned int *v1695;
  unsigned int *v1696;
  _DWORD *v1698;
  _DWORD *v1699;
  _DWORD *v1701;
  _DWORD *v1702;
  _DWORD *v1704;
  _DWORD *v1705;
  _DWORD *v1707;
  _DWORD *v1708;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t *v1712;
  unsigned int v1713;
  uint64_t v1714;
  uint64_t *v1715;
  uint64_t v1716;
  int v1717;
  uint64_t *v1718;
  uint64_t v1719;
  unsigned int *v1720;
  unsigned int *v1721;
  int8x16_t v1722;
  int8x16_t v1723;
  __int128 v1724;
  __int128 v1725;
  __int128 v1726;
  __int128 v1727;
  int8x16_t v1728;
  int8x16_t v1729;
  int8x16_t v1730;
  int8x16_t v1731;
  int8x16_t v1732;
  int8x16_t v1733;
  int8x16_t v1734;
  int8x16_t v1735;
  unint64_t v1736;
  unint64_t v1737;
  unint64_t v1738;
  int8x16_t v1739;
  int8x16_t v1740;
  unint64_t v1741;
  unint64_t v1742;
  unint64_t v1743;
  unint64_t v1744;
  int8x16_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  int8x16_t *v1750;
  unsigned int v1751;
  uint64_t *v1752;
  uint64_t v1753;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t *v1758;
  unsigned int v1759;
  uint64_t v1760;
  uint64_t *v1761;
  uint64_t v1762;
  int v1763;
  uint64_t *v1764;
  uint64_t v1765;
  unsigned int *v1766;
  unsigned int *v1767;
  int8x16_t v1768;
  int8x16_t v1769;
  int8x16_t v1770;
  int8x16_t v1771;
  int8x16_t v1772;
  int8x16_t v1773;
  int8x16_t v1774;
  int8x16_t v1775;
  int8x16_t v1776;
  int8x16_t v1777;
  unint64_t v1778;
  unint64_t v1779;
  unint64_t v1780;
  unint64_t v1781;
  int8x16_t v1782;
  int8x16_t v1783;
  int8x16_t v1784;
  int8x16_t v1785;
  int8x16_t v1786;
  int8x16_t v1787;
  int8x16_t v1788;
  int8x16_t v1789;
  uint64_t v1790;
  int8x16_t *v1791;
  int8x16_t *v1792;
  int8x16_t *v1793;
  int8x16_t *v1794;
  int8x16_t *v1795;
  int8x16_t *v1796;
  unsigned int v1797;
  uint64_t *v1798;
  uint64_t v1799;
  int8x16_t *v1801;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t *v1805;
  unsigned int v1806;
  uint64_t v1807;
  uint64_t *v1808;
  uint64_t v1809;
  int v1810;
  uint64_t *v1811;
  uint64_t v1812;
  unsigned int *v1813;
  unsigned int *v1814;
  int8x16_t v1815;
  int8x16_t v1816;
  int8x16_t v1817;
  int8x16_t v1818;
  unint64_t v1819;
  int8x16_t v1820;
  int8x16_t v1821;
  int8x16_t v1822;
  int8x16_t v1823;
  int8x16_t v1824;
  int8x16_t v1825;
  int8x16_t v1826;
  int8x16_t v1827;
  unint64_t v1828;
  unint64_t v1829;
  unint64_t v1830;
  int8x16_t v1831;
  int8x16_t v1832;
  unint64_t v1833;
  unint64_t v1834;
  unint64_t v1835;
  int8x16_t v1836;
  int8x16_t v1837;
  unint64_t v1838;
  unint64_t v1839;
  int8x16_t v1840;
  int8x16_t v1841;
  int8x16_t v1842;
  int8x16_t v1843;
  int8x16_t v1844;
  int8x16_t v1845;
  uint64_t v1846;
  int8x16_t *v1847;
  int8x16_t v1848;
  int8x16_t v1849;
  __int128 v1850;
  __int128 v1851;
  __int128 v1852;
  int8x16_t *v1853;
  int8x16_t *v1854;
  int8x16_t *v1855;
  int8x16_t *v1856;
  int8x16_t *v1857;
  int8x16_t *v1858;
  __int8 *v1859;
  int8x16_t *v1860;
  unsigned int v1861;
  uint64_t *v1862;
  uint64_t v1863;
  int8x16_t *v1865;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t *v1869;
  unsigned int v1870;
  uint64_t v1871;
  uint64_t *v1872;
  uint64_t v1873;
  int v1874;
  uint64_t *v1875;
  uint64_t v1876;
  unsigned int *v1877;
  unsigned int *v1878;
  int8x16_t v1879;
  int8x16_t v1880;
  int8x16_t v1881;
  int8x16_t v1882;
  int8x16_t v1883;
  int8x16_t v1884;
  int8x16_t v1885;
  int8x16_t v1886;
  int8x16_t v1887;
  int8x16_t v1888;
  unint64_t v1889;
  unint64_t v1890;
  unint64_t v1891;
  unint64_t v1892;
  int8x16_t v1893;
  int8x16_t v1894;
  int8x16_t v1895;
  int8x16_t v1896;
  int8x16_t v1897;
  int8x16_t v1898;
  int8x16_t v1899;
  int8x16_t v1900;
  uint64_t v1901;
  int8x16_t *v1902;
  int8x16_t *v1903;
  int8x16_t *v1904;
  int8x16_t *v1905;
  int8x16_t *v1906;
  int8x16_t *v1907;
  unsigned int v1908;
  uint64_t *v1909;
  uint64_t v1910;
  int8x16_t *v1912;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t *v1916;
  unsigned int v1917;
  uint64_t v1918;
  uint64_t *v1919;
  uint64_t v1920;
  int v1921;
  uint64_t *v1922;
  uint64_t v1923;
  unsigned int *v1924;
  unsigned int *v1925;
  int8x16_t v1926;
  int8x16_t v1927;
  int8x16_t v1928;
  int8x16_t v1929;
  int8x16_t v1930;
  int8x16_t v1931;
  int8x16_t v1932;
  int8x16_t v1933;
  int8x16_t v1934;
  int8x16_t v1935;
  unint64_t v1936;
  unint64_t v1937;
  unint64_t v1938;
  unint64_t v1939;
  int8x16_t v1940;
  int8x16_t v1941;
  int8x16_t v1942;
  int8x16_t v1943;
  int8x16_t v1944;
  int8x16_t v1945;
  int8x16_t v1946;
  int8x16_t v1947;
  uint64_t v1948;
  int8x16_t *v1949;
  int8x16_t *v1950;
  int8x16_t *v1951;
  int8x16_t *v1952;
  int8x16_t *v1953;
  int8x16_t *v1954;
  unsigned int v1955;
  uint64_t *v1956;
  uint64_t v1957;
  int8x16_t *v1959;
  _DWORD *v1961;
  _DWORD *v1962;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t *v1966;
  unsigned int v1967;
  uint64_t v1968;
  uint64_t *v1969;
  uint64_t v1970;
  int v1971;
  uint64_t *v1972;
  uint64_t v1973;
  unsigned int *v1974;
  unsigned int *v1975;
  int8x16_t v1976;
  int8x16_t v1977;
  int8x16_t v1978;
  int8x16_t v1979;
  int8x16_t v1980;
  int8x16_t v1981;
  int8x16_t v1982;
  unint64_t v1983;
  unint64_t v1984;
  unint64_t v1985;
  int8x16_t v1986;
  int8x16_t v1987;
  uint64_t v1988;
  int8x16_t *v1989;
  int8x16_t *v1990;
  int8x16_t *v1991;
  unsigned int v1992;
  uint64_t *v1993;
  uint64_t v1994;
  int8x16_t *v1996;
  _DWORD *v1998;
  _DWORD *v1999;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t *v2003;
  int v2004;
  uint64_t v2005;
  uint64_t *v2006;
  unsigned int v2007;
  unsigned int *v2008;
  unsigned int *v2009;
  unsigned int v2010;
  uint64_t *v2011;
  uint64_t v2012;
  __int128 *v2014;
  _OWORD *v2015;
  __int128 v2016;
  __int128 v2017;
  uint64_t v2018;
  int v2019;
  uint64_t *v2020;
  uint64_t v2021;
  _DWORD *v2023;
  _DWORD *v2024;
  _DWORD *v2026;
  _DWORD *v2027;
  _DWORD *v2029;
  _DWORD *v2030;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t *v2034;
  unsigned int v2035;
  uint64_t v2036;
  uint64_t *v2037;
  uint64_t v2038;
  int v2039;
  uint64_t *v2040;
  uint64_t v2041;
  unsigned int *v2042;
  unsigned int *v2043;
  int8x16_t v2044;
  int8x16_t v2045;
  int8x16_t v2046;
  int8x16_t v2047;
  int8x16_t v2048;
  int8x16_t v2049;
  int8x16_t v2050;
  unint64_t v2051;
  unint64_t v2052;
  unint64_t v2053;
  int8x16_t v2054;
  int8x16_t v2055;
  uint64_t v2056;
  int8x16_t *v2057;
  int8x16_t *v2058;
  int8x16_t *v2059;
  unsigned int v2060;
  uint64_t *v2061;
  uint64_t v2062;
  int8x16_t *v2064;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t *v2068;
  unsigned int v2069;
  uint64_t v2070;
  uint64_t *v2071;
  uint64_t v2072;
  int v2073;
  uint64_t *v2074;
  uint64_t v2075;
  unsigned int *v2076;
  unsigned int *v2077;
  int8x16_t v2078;
  int8x16_t v2079;
  int8x16_t v2080;
  int8x16_t v2081;
  int8x16_t v2082;
  int8x16_t v2083;
  int8x16_t v2084;
  int8x16_t v2085;
  int8x16_t v2086;
  int8x16_t v2087;
  int8x16_t v2088;
  int8x16_t v2089;
  uint64_t v2090;
  int8x16_t *v2091;
  int8x16_t *v2092;
  int8x16_t *v2093;
  int8x16_t *v2094;
  unsigned int v2095;
  uint64_t *v2096;
  uint64_t v2097;
  int8x16_t *v2099;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t *v2103;
  unsigned int v2104;
  uint64_t v2105;
  uint64_t *v2106;
  uint64_t v2107;
  int v2108;
  uint64_t *v2109;
  uint64_t v2110;
  unsigned int *v2111;
  unsigned int *v2112;
  int8x16_t v2113;
  int8x16_t v2114;
  int8x16_t v2115;
  int8x16_t v2116;
  int8x16_t v2117;
  int8x16_t v2118;
  int8x16_t v2119;
  int8x16_t v2120;
  int8x16_t v2121;
  int8x16_t v2122;
  int8x16_t v2123;
  int8x16_t v2124;
  uint64_t v2125;
  int8x16_t *v2126;
  int8x16_t *v2127;
  int8x16_t *v2128;
  int8x16_t *v2129;
  unsigned int v2130;
  uint64_t *v2131;
  uint64_t v2132;
  int8x16_t *v2134;
  uint64_t v2136;
  uint64_t v2137;
  uint64_t *v2138;
  unsigned int v2139;
  uint64_t v2140;
  uint64_t *v2141;
  uint64_t v2142;
  int v2143;
  uint64_t *v2144;
  uint64_t v2145;
  unsigned int *v2146;
  unsigned int *v2147;
  int8x16_t v2148;
  int8x16_t v2149;
  int8x16_t v2150;
  int8x16_t v2151;
  int8x16_t v2152;
  int8x16_t v2153;
  int8x16_t v2154;
  unint64_t v2155;
  unint64_t v2156;
  unint64_t v2157;
  int8x16_t v2158;
  int8x16_t v2159;
  uint64_t v2160;
  int8x16_t *v2161;
  int8x16_t *v2162;
  int8x16_t *v2163;
  unsigned int v2164;
  uint64_t *v2165;
  uint64_t v2166;
  int8x16_t *v2168;
  unint64_t v2169;
  unint64_t v2170;
  __int128 v2171;
  unint64_t v2172;
  unint64_t v2173;
  unint64_t v2174;
  unint64_t v2175;
  int8x16_t v2176;
  unint64_t v2177;
  int8x16_t v2178;
  __int128 v2179;
  unint64_t v2180;
  unint64_t v2181;
  unint64_t v2182;
  int8x16_t v2183;
  int8x16_t v2184;
  uint64_t v2185;
  int8x16_t v2186;
  int8x16_t v2187;
  int8x16_t v2188;
  int8x16_t v2189;
  int8x16_t v2190;
  int8x16_t v2191;
  int8x16_t v2192;
  int8x16_t v2193;
  uint64_t v2194;
  unint64_t v2195;
  int8x16_t v2196;
  unint64_t v2197;
  unint64_t v2198;
  unint64_t v2199;
  unint64_t v2200;
  unint64_t v2201;
  unint64_t v2202;
  unint64_t v2203;
  int8x16_t v2204;
  unint64_t v2205;
  unint64_t v2206;
  unint64_t v2207;
  unint64_t v2208;
  unint64_t v2209;
  unint64_t v2210;
  unint64_t v2211;
  int8x16_t v2212;
  unint64_t v2213;
  unint64_t v2214;
  unint64_t v2215;
  int8x16_t v2216;
  int8x16_t v2217;
  int8x16_t v2218;
  unint64_t v2219;
  __int128 v2220;
  __int128 v2221;
  int8x16_t v2222;
  int8x16_t v2223;
  unint64_t v2224;
  __int128 v2225;
  int8x16_t v2226;
  int8x16_t v2227;
  unint64_t v2228;
  int8x16_t v2229;
  int8x16_t v2230;
  int8x16_t v2231;
  unint64_t v2232;
  int8x16_t v2233;
  int8x16_t v2234;
  int8x16_t v2235;
  unint64_t v2236;
  __int128 v2237;
  __int128 v2238;
  int8x16_t v2239;
  int8x16_t v2240;
  unint64_t v2241;
  int8x16_t v2242;
  int8x16_t v2243;
  int8x16_t v2244;
  unint64_t v2245;
  __int128 v2246;
  int8x16_t v2247;
  int8x16_t v2248;
  unint64_t v2249;
  __int128 v2250;
  int8x16_t v2251;
  int8x16_t v2252;
  unint64_t v2253;
  __int128 v2254;
  int8x16_t v2255;
  int8x16_t v2256;
  unint64_t v2257;
  __int128 v2258;
  int8x16_t v2259;
  int8x16_t v2260;
  int8x16_t v2261;
  __int128 v2262;
  unint64_t v2263;
  unint64_t v2264;
  int8x16_t v2265;
  __int128 v2266;
  int8x16_t v2267;
  int8x16_t v2268;
  int8x16_t v2269;
  __int128 v2270;
  unint64_t v2271;
  unint64_t v2272;
  int8x16_t v2273;
  __int128 v2274;
  int8x16_t v2275;
  int8x16_t v2276;
  int8x16_t v2277;
  unint64_t v2278;
  unint64_t v2279;
  unint64_t v2280;
  int8x16_t v2281;
  __int128 v2282;
  __int128 v2283;
  unint64_t v2284;
  unint64_t v2285;
  unint64_t v2286;
  int8x16_t v2287;
  unint64_t v2288;
  unint64_t v2289;
  unint64_t v2290;
  unint64_t v2291;
  unint64_t v2292;
  int8x16_t v2293;
  __int128 v2294;
  __int128 v2295;
  int8x16_t v2296;
  int8x16_t v2297;
  unint64_t v2298;
  int8x16_t v2299;
  unint64_t v2300;
  unint64_t v2301;
  unint64_t v2302;
  unint64_t v2303;
  unint64_t v2304;
  int8x16_t v2305;
  int8x16_t v2306;
  int8x16_t v2307;
  int8x16_t v2308;
  int8x16_t v2309;
  unint64_t v2310;
  int8x16_t v2311;
  unint64_t v2312;
  unint64_t v2313;
  unint64_t v2314;
  unint64_t v2315;
  unint64_t v2316;
  int8x16_t v2317;
  int8x16_t v2318;
  int8x16_t v2319;
  int8x16_t v2320;
  int8x16_t v2321;
  unint64_t v2322;
  int8x16_t v2323;
  unint64_t v2324;
  unint64_t v2325;

  v4 = *(_DWORD **)(a4 + 216);
  v5 = *(_DWORD **)(a4 + 224);
  if (a3[27] != a3[28] && v4 != v5)
  {
    do
    {
      v12 = *(_QWORD *)(result + 14344);
      v13 = (*(_DWORD *)(result + 14368) * *v4);
      v14 = (uint64_t *)(v12 + 8 * v13);
      v15 = *(_DWORD *)(result + 14264);
      v16 = v13 + v15;
      v17 = (uint64_t *)(v12 + 8 * v16);
      if (v15)
      {
        if (*v14 == -1)
        {
          v18 = 8 * v16 - 8 * v13 - 8;
          v19 = 1;
          v20 = v14;
          while (1)
          {
            v15 = v19;
            if (!v18)
              break;
            v14 = v20 + 1;
            v21 = v20[1];
            ++v19;
            v18 -= 8;
            ++v20;
            if (v21 != -1)
              goto LABEL_20;
          }
          v14 = v17;
        }
        else
        {
          v15 = 0;
        }
      }
LABEL_20:
      v22 = a3[27];
      v23 = a3[28];
      while (v22 != v23 && v14 != v17)
      {
        v36 = *v22;
        if (*v22 > v15)
        {
          v37 = v14 + 1;
          while (v37 != v17)
          {
            ++v15;
            v38 = *v37++;
            if (v38 != -1 && v36 <= v15)
            {
              v14 = v37 - 1;
              goto LABEL_34;
            }
          }
          break;
        }
LABEL_34:
        if (v36 == v15)
        {
          v40 = *(_QWORD *)(result + 14272) + 8 * *v14;
          if (v40 == *(_QWORD *)a2)
          {
            v30 = *(_QWORD *)(v40 + 64);
            v29 = *(int8x16_t *)(v40 + 32);
            v26 = *(int8x16_t *)(v40 + 48);
            v24 = *(int8x16_t *)v40;
            v28 = *(int8x16_t *)(v40 + 16);
            v31 = vextq_s8(v26, v26, 8uLL).u64[0];
            v27 = vextq_s8(v29, v29, 8uLL).u64[0];
            *(_QWORD *)&v25 = vextq_s8(v28, v28, 8uLL).u64[0];
          }
          else
          {
            v24 = *(int8x16_t *)v40;
            v25 = *(_OWORD *)(v40 + 24);
            v26 = *(int8x16_t *)(v40 + 48);
            v27 = *(_QWORD *)(v40 + 40);
            v28.i64[0] = *(_QWORD *)(v40 + 16);
            v29.i64[0] = *(_QWORD *)(v40 + 32);
            v30 = *(_QWORD *)(v40 + 64);
            v31 = vextq_s8(v26, v26, 8uLL).u64[0];
          }
          v32 = *(unsigned int *)(a2 + 16);
          v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
          *((_QWORD *)&v25 + 1) = v29.i64[0];
          v33 = *(_QWORD *)a2 + 8 * (v22[1] + (_DWORD)v32 * v4[1]);
          v26.i64[1] = v31;
          *(_QWORD *)(v33 + 16) = v28.i64[0];
          *(int8x16_t *)v33 = v24;
          v34 = v33 + 8 * v32;
          *(_QWORD *)(v34 + 16) = v27;
          *(_OWORD *)v34 = v25;
          v35 = (int8x16_t *)(v33 + 16 * v32);
          v35[1].i64[0] = v30;
          *v35 = v26;
          v15 = v36;
        }
        v22 += 2;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  v7 = *(_DWORD **)(a4 + 192);
  v8 = *(_DWORD **)(a4 + 200);
  v9 = a3[24];
  v10 = a3[25];
  if (v9 != v10 && v7 != v8)
  {
    do
    {
      v41 = *(_QWORD *)(result + 12760);
      v42 = (*(_DWORD *)(result + 12784) * *v7);
      v43 = (uint64_t *)(v41 + 8 * v42);
      v44 = *(_DWORD *)(result + 12680);
      v45 = v42 + v44;
      v46 = (uint64_t *)(v41 + 8 * v45);
      if (v44)
      {
        if (*v43 == -1)
        {
          v47 = 8 * v45 - 8 * v42 - 8;
          v48 = 1;
          v49 = v43;
          while (1)
          {
            v44 = v48;
            if (!v47)
              break;
            v43 = v49 + 1;
            v50 = v49[1];
            ++v48;
            v47 -= 8;
            ++v49;
            if (v50 != -1)
              goto LABEL_46;
          }
          v43 = v46;
        }
        else
        {
          v44 = 0;
        }
      }
LABEL_46:
      v51 = a3[24];
      v52 = a3[25];
      while (v51 != v52 && v43 != v46)
      {
        v66 = *v51;
        if (*v51 > v44)
        {
          v67 = v43 + 1;
          while (v67 != v46)
          {
            ++v44;
            v68 = *v67++;
            if (v68 != -1 && v66 <= v44)
            {
              v43 = v67 - 1;
              goto LABEL_60;
            }
          }
          break;
        }
LABEL_60:
        if (v66 == v44)
        {
          v70 = (__int128 *)(*(_QWORD *)(result + 12688) + 8 * *v43);
          if (v70 == *(__int128 **)a2)
          {
            v60 = v70[6];
            v59 = v70[7];
            v58 = v70[4];
            v57 = v70[5];
            v56 = v70[2];
            v55 = v70[3];
            v54 = *v70;
            v53 = v70[1];
          }
          else
          {
            v54 = *v70;
            v53 = v70[1];
            v56 = v70[2];
            v55 = v70[3];
            v58 = v70[4];
            v57 = v70[5];
            v60 = v70[6];
            v59 = v70[7];
          }
          v61 = *(unsigned int *)(a2 + 16);
          v62 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v51[1] + (_DWORD)v61 * v7[1]));
          *v62 = v54;
          v62[1] = v53;
          v63 = (_OWORD *)((char *)v62 + 8 * v61);
          *v63 = v56;
          v63[1] = v55;
          v64 = &v62[v61];
          *v64 = v58;
          v64[1] = v57;
          v65 = (_OWORD *)((char *)v62 + 24 * v61);
          *v65 = v60;
          v65[1] = v59;
          v44 = v66;
        }
        v51 += 2;
      }
      v7 += 2;
    }
    while (v7 != v8);
    v9 = a3[24];
    v10 = a3[25];
  }
  v71 = *(_DWORD **)(a4 + 216);
  v72 = *(_DWORD **)(a4 + 224);
  if (v9 != v10 && v71 != v72)
  {
    do
    {
      v85 = *(_QWORD *)(result + 14200);
      v86 = (*(_DWORD *)(result + 14224) * *v71);
      v87 = (uint64_t *)(v85 + 8 * v86);
      v88 = *(_DWORD *)(result + 14120);
      v89 = v86 + v88;
      v90 = (uint64_t *)(v85 + 8 * v89);
      if (v88)
      {
        if (*v87 == -1)
        {
          v91 = 8 * v89 - 8 * v86 - 8;
          v92 = 1;
          v93 = v87;
          while (1)
          {
            v88 = v92;
            if (!v91)
              break;
            v87 = v93 + 1;
            v94 = v93[1];
            ++v92;
            v91 -= 8;
            ++v93;
            if (v94 != -1)
              goto LABEL_94;
          }
          v87 = v90;
        }
        else
        {
          v88 = 0;
        }
      }
LABEL_94:
      v95 = a3[24];
      v96 = a3[25];
      while (v95 != v96 && v87 != v90)
      {
        v107 = *v95;
        if (*v95 > v88)
        {
          v108 = v87 + 1;
          while (v108 != v90)
          {
            ++v88;
            v109 = *v108++;
            if (v109 != -1 && v107 <= v88)
            {
              v87 = v108 - 1;
              goto LABEL_108;
            }
          }
          break;
        }
LABEL_108:
        if (v107 == v88)
        {
          v111 = (int8x16_t *)(*(_QWORD *)(result + 14128) + 8 * *v87);
          if (v111 == *(int8x16_t **)a2)
          {
            v102 = v111[4];
            v101 = v111[5];
            v100 = v111[2];
            v99 = v111[3];
            v98 = *v111;
            v97 = v111[1];
          }
          else
          {
            v98 = *v111;
            v97 = v111[1];
            v100 = v111[2];
            v99 = v111[3];
            v102 = v111[4];
            v101 = v111[5];
          }
          v103 = *(unsigned int *)(a2 + 16);
          v101.i64[1] = vextq_s8(v101, v101, 8uLL).u64[0];
          v102.i64[1] = vextq_s8(v102, v102, 8uLL).u64[0];
          v99.i64[1] = vextq_s8(v99, v99, 8uLL).u64[0];
          v100.i64[1] = vextq_s8(v100, v100, 8uLL).u64[0];
          v97.i64[1] = vextq_s8(v97, v97, 8uLL).u64[0];
          v104 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v95[1] + (_DWORD)v103 * v71[1]));
          v98.i64[1] = vextq_s8(v98, v98, 8uLL).u64[0];
          *v104 = v98;
          v104[1] = v97;
          v105 = (int8x16_t *)((char *)v104 + 8 * v103);
          *v105 = v100;
          v105[1] = v99;
          v106 = &v104[v103];
          *v106 = v102;
          v106[1] = v101;
          v88 = v107;
        }
        v95 += 2;
      }
      v71 += 2;
    }
    while (v71 != v72);
  }
  v74 = *(_DWORD **)(a4 + 168);
  v75 = *(_DWORD **)(a4 + 176);
  v76 = a3[21];
  v77 = a3[22];
  if (v76 == v77 || v74 == v75)
  {
    v79 = *(_DWORD **)(a4 + 192);
    v80 = *(_DWORD **)(a4 + 200);
    if (v76 != v77 && v79 != v80)
      goto LABEL_143;
LABEL_79:
    v82 = *(_DWORD **)(a4 + 216);
    v83 = *(_DWORD **)(a4 + 224);
    if (v76 == v77 || v82 == v83)
      goto LABEL_173;
    goto LABEL_195;
  }
  do
  {
    v112 = *(_QWORD *)(result + 11176);
    v113 = (*(_DWORD *)(result + 11200) * *v74);
    v114 = (uint64_t *)(v112 + 8 * v113);
    v115 = *(_DWORD *)(result + 11096);
    v116 = v113 + v115;
    v117 = (uint64_t *)(v112 + 8 * v116);
    if (v115)
    {
      if (*v114 == -1)
      {
        v118 = 8 * v116 - 8 * v113 - 8;
        v119 = 1;
        v120 = v114;
        while (1)
        {
          v115 = v119;
          if (!v118)
            break;
          v114 = v120 + 1;
          v121 = v120[1];
          ++v119;
          v118 -= 8;
          ++v120;
          if (v121 != -1)
            goto LABEL_120;
        }
        v114 = v117;
      }
      else
      {
        v115 = 0;
      }
    }
LABEL_120:
    v122 = a3[21];
    v123 = a3[22];
    while (v122 != v123 && v114 != v117)
    {
      v137 = *v122;
      if (*v122 > v115)
      {
        v138 = v114 + 1;
        while (v138 != v117)
        {
          ++v115;
          v139 = *v138++;
          if (v139 != -1 && v137 <= v115)
          {
            v114 = v138 - 1;
            goto LABEL_134;
          }
        }
        break;
      }
LABEL_134:
      if (v137 == v115)
      {
        v141 = (__int128 *)(*(_QWORD *)(result + 11104) + 8 * *v114);
        if (v141 == *(__int128 **)a2)
        {
          v131 = v141[6];
          v130 = v141[7];
          v129 = v141[4];
          v128 = v141[5];
          v127 = v141[2];
          v126 = v141[3];
          v125 = *v141;
          v124 = v141[1];
        }
        else
        {
          v125 = *v141;
          v124 = v141[1];
          v127 = v141[2];
          v126 = v141[3];
          v129 = v141[4];
          v128 = v141[5];
          v131 = v141[6];
          v130 = v141[7];
        }
        v132 = *(unsigned int *)(a2 + 16);
        v133 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v122[1] + (_DWORD)v132 * v74[1]));
        *v133 = v125;
        v133[1] = v124;
        v134 = (_OWORD *)((char *)v133 + 8 * v132);
        *v134 = v127;
        v134[1] = v126;
        v135 = &v133[v132];
        *v135 = v129;
        v135[1] = v128;
        v136 = (_OWORD *)((char *)v133 + 24 * v132);
        *v136 = v131;
        v136[1] = v130;
        v115 = v137;
      }
      v122 += 2;
    }
    v74 += 2;
  }
  while (v74 != v75);
  v76 = a3[21];
  v77 = a3[22];
  v79 = *(_DWORD **)(a4 + 192);
  v80 = *(_DWORD **)(a4 + 200);
  if (v76 == v77 || v79 == v80)
    goto LABEL_79;
  do
  {
LABEL_143:
    v143 = *(_QWORD *)(result + 12616);
    v144 = (*(_DWORD *)(result + 12640) * *v79);
    v145 = (uint64_t *)(v143 + 8 * v144);
    v146 = *(_DWORD *)(result + 12536);
    v147 = v144 + v146;
    v148 = (uint64_t *)(v143 + 8 * v147);
    if (v146)
    {
      if (*v145 == -1)
      {
        v149 = 8 * v147 - 8 * v144 - 8;
        v150 = 1;
        v151 = v145;
        while (1)
        {
          v146 = v150;
          if (!v149)
            break;
          v145 = v151 + 1;
          v152 = v151[1];
          ++v150;
          v149 -= 8;
          ++v151;
          if (v152 != -1)
            goto LABEL_151;
        }
        v145 = v148;
      }
      else
      {
        v146 = 0;
      }
    }
LABEL_151:
    v153 = a3[21];
    v154 = a3[22];
    while (v153 != v154 && v145 != v148)
    {
      v168 = *v153;
      if (*v153 > v146)
      {
        v169 = v145 + 1;
        while (v169 != v148)
        {
          ++v146;
          v170 = *v169++;
          if (v170 != -1 && v168 <= v146)
          {
            v145 = v169 - 1;
            goto LABEL_165;
          }
        }
        break;
      }
LABEL_165:
      if (v168 == v146)
      {
        v172 = (__int128 *)(*(_QWORD *)(result + 12544) + 8 * *v145);
        if (v172 == *(__int128 **)a2)
        {
          v162 = v172[6];
          v161 = v172[7];
          v160 = v172[4];
          v159 = v172[5];
          v158 = v172[2];
          v157 = v172[3];
          v156 = *v172;
          v155 = v172[1];
        }
        else
        {
          v156 = *v172;
          v155 = v172[1];
          v158 = v172[2];
          v157 = v172[3];
          v160 = v172[4];
          v159 = v172[5];
          v162 = v172[6];
          v161 = v172[7];
        }
        v163 = *(unsigned int *)(a2 + 16);
        v164 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v153[1] + (_DWORD)v163 * v79[1]));
        *v164 = v156;
        v164[1] = v155;
        v165 = (_OWORD *)((char *)v164 + 8 * v163);
        *v165 = v158;
        v165[1] = v157;
        v166 = &v164[v163];
        *v166 = v160;
        v166[1] = v159;
        v167 = (_OWORD *)((char *)v164 + 24 * v163);
        *v167 = v162;
        v167[1] = v161;
        v146 = v168;
      }
      v153 += 2;
    }
    v79 += 2;
  }
  while (v79 != v80);
  v82 = *(_DWORD **)(a4 + 216);
  v83 = *(_DWORD **)(a4 + 224);
  if (a3[21] != a3[22] && v82 != v83)
  {
    do
    {
LABEL_195:
      v188 = *(_QWORD *)(result + 14056);
      v189 = (*(_DWORD *)(result + 14080) * *v82);
      v190 = (uint64_t *)(v188 + 8 * v189);
      v191 = *(_DWORD *)(result + 13976);
      v192 = v189 + v191;
      v193 = (uint64_t *)(v188 + 8 * v192);
      if (v191)
      {
        if (*v190 == -1)
        {
          v194 = 8 * v192 - 8 * v189 - 8;
          v195 = 1;
          v196 = v190;
          while (1)
          {
            v191 = v195;
            if (!v194)
              break;
            v190 = v196 + 1;
            v197 = v196[1];
            ++v195;
            v194 -= 8;
            ++v196;
            if (v197 != -1)
              goto LABEL_203;
          }
          v190 = v193;
        }
        else
        {
          v191 = 0;
        }
      }
LABEL_203:
      v198 = a3[21];
      v199 = a3[22];
      while (v198 != v199 && v190 != v193)
      {
        v210 = *v198;
        if (*v198 > v191)
        {
          v211 = v190 + 1;
          while (v211 != v193)
          {
            ++v191;
            v212 = *v211++;
            if (v212 != -1 && v210 <= v191)
            {
              v190 = v211 - 1;
              goto LABEL_217;
            }
          }
          break;
        }
LABEL_217:
        if (v210 == v191)
        {
          v214 = (int8x16_t *)(*(_QWORD *)(result + 13984) + 8 * *v190);
          if (v214 == *(int8x16_t **)a2)
          {
            v205 = v214[4];
            v204 = v214[5];
            v203 = v214[2];
            v202 = v214[3];
            v201 = *v214;
            v200 = v214[1];
          }
          else
          {
            v201 = *v214;
            v200 = v214[1];
            v203 = v214[2];
            v202 = v214[3];
            v205 = v214[4];
            v204 = v214[5];
          }
          v206 = *(unsigned int *)(a2 + 16);
          v204.i64[1] = vextq_s8(v204, v204, 8uLL).u64[0];
          v205.i64[1] = vextq_s8(v205, v205, 8uLL).u64[0];
          v202.i64[1] = vextq_s8(v202, v202, 8uLL).u64[0];
          v203.i64[1] = vextq_s8(v203, v203, 8uLL).u64[0];
          v200.i64[1] = vextq_s8(v200, v200, 8uLL).u64[0];
          v207 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v198[1] + (_DWORD)v206 * v82[1]));
          v201.i64[1] = vextq_s8(v201, v201, 8uLL).u64[0];
          *v207 = v201;
          v207[1] = v200;
          v208 = (int8x16_t *)((char *)v207 + 8 * v206);
          *v208 = v203;
          v208[1] = v202;
          v209 = &v207[v206];
          *v209 = v205;
          v209[1] = v204;
          v191 = v210;
        }
        v198 += 2;
      }
      v82 += 2;
    }
    while (v82 != v83);
  }
LABEL_173:
  v174 = *(_DWORD **)(a4 + 144);
  v175 = *(_DWORD **)(a4 + 152);
  v176 = a3[18];
  v177 = a3[19];
  if (v176 == v177 || v174 == v175)
  {
    v179 = *(_DWORD **)(a4 + 168);
    v180 = *(_DWORD **)(a4 + 176);
    if (v176 != v177 && v179 != v180)
      goto LABEL_252;
LABEL_183:
    v182 = *(_DWORD **)(a4 + 192);
    v183 = *(_DWORD **)(a4 + 200);
    if (v176 != v177 && v182 != v183)
      goto LABEL_283;
LABEL_188:
    v185 = *(_DWORD **)(a4 + 216);
    v186 = *(_DWORD **)(a4 + 224);
    if (v176 == v177 || v185 == v186)
      goto LABEL_313;
    goto LABEL_325;
  }
  do
  {
    v215 = *(_QWORD *)(result + 9592);
    v216 = (*(_DWORD *)(result + 9616) * *v174);
    v217 = (uint64_t *)(v215 + 8 * v216);
    v218 = *(_DWORD *)(result + 9512);
    v219 = v216 + v218;
    v220 = (uint64_t *)(v215 + 8 * v219);
    if (v218)
    {
      if (*v217 == -1)
      {
        v221 = 8 * v219 - 8 * v216 - 8;
        v222 = 1;
        v223 = v217;
        while (1)
        {
          v218 = v222;
          if (!v221)
            break;
          v217 = v223 + 1;
          v224 = v223[1];
          ++v222;
          v221 -= 8;
          ++v223;
          if (v224 != -1)
            goto LABEL_229;
        }
        v217 = v220;
      }
      else
      {
        v218 = 0;
      }
    }
LABEL_229:
    v225 = a3[18];
    v226 = a3[19];
    while (v225 != v226 && v217 != v220)
    {
      v239 = *v225;
      if (*v225 > v218)
      {
        v240 = v217 + 1;
        while (v240 != v220)
        {
          ++v218;
          v241 = *v240++;
          if (v241 != -1 && v239 <= v218)
          {
            v217 = v240 - 1;
            goto LABEL_243;
          }
        }
        break;
      }
LABEL_243:
      if (v239 == v218)
      {
        v243 = *(_QWORD *)(result + 9520) + 8 * *v217;
        if (v243 == *(_QWORD *)a2)
        {
          v233 = *(_QWORD *)(v243 + 64);
          v232 = *(int8x16_t *)(v243 + 32);
          v229 = *(int8x16_t *)(v243 + 48);
          v227 = *(int8x16_t *)v243;
          v231 = *(int8x16_t *)(v243 + 16);
          v234 = vextq_s8(v229, v229, 8uLL).u64[0];
          v230 = vextq_s8(v232, v232, 8uLL).u64[0];
          *(_QWORD *)&v228 = vextq_s8(v231, v231, 8uLL).u64[0];
        }
        else
        {
          v227 = *(int8x16_t *)v243;
          v228 = *(_OWORD *)(v243 + 24);
          v229 = *(int8x16_t *)(v243 + 48);
          v230 = *(_QWORD *)(v243 + 40);
          v231.i64[0] = *(_QWORD *)(v243 + 16);
          v232.i64[0] = *(_QWORD *)(v243 + 32);
          v233 = *(_QWORD *)(v243 + 64);
          v234 = vextq_s8(v229, v229, 8uLL).u64[0];
        }
        v235 = *(unsigned int *)(a2 + 16);
        v227.i64[1] = vextq_s8(v227, v227, 8uLL).u64[0];
        *((_QWORD *)&v228 + 1) = v232.i64[0];
        v236 = *(_QWORD *)a2 + 8 * (v225[1] + (_DWORD)v235 * v174[1]);
        v229.i64[1] = v234;
        *(_QWORD *)(v236 + 16) = v231.i64[0];
        *(int8x16_t *)v236 = v227;
        v237 = v236 + 8 * v235;
        *(_QWORD *)(v237 + 16) = v230;
        *(_OWORD *)v237 = v228;
        v238 = (int8x16_t *)(v236 + 16 * v235);
        v238[1].i64[0] = v233;
        *v238 = v229;
        v218 = v239;
      }
      v225 += 2;
    }
    v174 += 2;
  }
  while (v174 != v175);
  v176 = a3[18];
  v177 = a3[19];
  v179 = *(_DWORD **)(a4 + 168);
  v180 = *(_DWORD **)(a4 + 176);
  if (v176 == v177 || v179 == v180)
    goto LABEL_183;
  do
  {
LABEL_252:
    v245 = *(_QWORD *)(result + 11032);
    v246 = (*(_DWORD *)(result + 11056) * *v179);
    v247 = (uint64_t *)(v245 + 8 * v246);
    v248 = *(_DWORD *)(result + 10952);
    v249 = v246 + v248;
    v250 = (uint64_t *)(v245 + 8 * v249);
    if (v248)
    {
      if (*v247 == -1)
      {
        v251 = 8 * v249 - 8 * v246 - 8;
        v252 = 1;
        v253 = v247;
        while (1)
        {
          v248 = v252;
          if (!v251)
            break;
          v247 = v253 + 1;
          v254 = v253[1];
          ++v252;
          v251 -= 8;
          ++v253;
          if (v254 != -1)
            goto LABEL_260;
        }
        v247 = v250;
      }
      else
      {
        v248 = 0;
      }
    }
LABEL_260:
    v255 = a3[18];
    v256 = a3[19];
    while (v255 != v256 && v247 != v250)
    {
      v273 = *v255;
      if (*v255 > v248)
      {
        v274 = v247 + 1;
        while (v274 != v250)
        {
          ++v248;
          v275 = *v274++;
          if (v275 != -1 && v273 <= v248)
          {
            v247 = v274 - 1;
            goto LABEL_274;
          }
        }
        break;
      }
LABEL_274:
      if (v273 == v248)
      {
        v277 = *(_QWORD *)(result + 10960) + 8 * *v247;
        if (v277 == *(_QWORD *)a2)
        {
          v261 = *(int8x16_t *)(v277 + 64);
          v265 = *(int8x16_t *)(v277 + 80);
          v267 = *(int8x16_t *)(v277 + 32);
          v262 = *(int8x16_t *)(v277 + 48);
          v258 = *(int8x16_t *)v277;
          v257 = *(int8x16_t *)(v277 + 16);
          v263 = vextq_s8(v265, v265, 8uLL).u64[0];
          v264.i64[0] = vextq_s8(v261, v261, 8uLL).u64[0];
          v266 = vextq_s8(v262, v262, 8uLL).u64[0];
          v259 = vextq_s8(v267, v267, 8uLL).u64[0];
          v260.i64[0] = vextq_s8(v257, v257, 8uLL).u64[0];
        }
        else
        {
          v257.i64[0] = *(_QWORD *)(v277 + 16);
          v258 = *(int8x16_t *)v277;
          v259 = *(_QWORD *)(v277 + 40);
          v260 = *(int8x16_t *)(v277 + 24);
          v261.i64[0] = *(_QWORD *)(v277 + 64);
          v262 = *(int8x16_t *)(v277 + 48);
          v263 = *(_QWORD *)(v277 + 88);
          v264 = *(int8x16_t *)(v277 + 72);
          v265.i64[0] = vextq_s8(v264, v264, 8uLL).u64[0];
          v266 = vextq_s8(v262, v262, 8uLL).u64[0];
          v267.i64[0] = vextq_s8(v260, v260, 8uLL).u64[0];
        }
        v268 = *(unsigned int *)(a2 + 16);
        v269 = *(_QWORD *)a2 + 8 * (v255[1] + (_DWORD)v268 * v179[1]);
        v258.i64[1] = vextq_s8(v258, v258, 8uLL).u64[0];
        v260.i64[1] = v267.i64[0];
        v262.i64[1] = v266;
        v264.i64[1] = v265.i64[0];
        *(_QWORD *)(v269 + 16) = v257.i64[0];
        *(int8x16_t *)v269 = v258;
        v270 = (int8x16_t *)(v269 + 8 * v268);
        v270[1].i64[0] = v259;
        *v270 = v260;
        v271 = (int8x16_t *)(v269 + 16 * v268);
        v271[1].i64[0] = v261.i64[0];
        *v271 = v262;
        v272 = (int8x16_t *)(v269 + 24 * v268);
        v272[1].i64[0] = v263;
        *v272 = v264;
        v248 = v273;
      }
      v255 += 2;
    }
    v179 += 2;
  }
  while (v179 != v180);
  v176 = a3[18];
  v177 = a3[19];
  v182 = *(_DWORD **)(a4 + 192);
  v183 = *(_DWORD **)(a4 + 200);
  if (v176 == v177 || v182 == v183)
    goto LABEL_188;
  do
  {
LABEL_283:
    v279 = *(_QWORD *)(result + 12472);
    v280 = (*(_DWORD *)(result + 12496) * *v182);
    v281 = (uint64_t *)(v279 + 8 * v280);
    v282 = *(_DWORD *)(result + 12392);
    v283 = v280 + v282;
    v284 = (uint64_t *)(v279 + 8 * v283);
    if (v282)
    {
      if (*v281 == -1)
      {
        v285 = 8 * v283 - 8 * v280 - 8;
        v286 = 1;
        v287 = v281;
        while (1)
        {
          v282 = v286;
          if (!v285)
            break;
          v281 = v287 + 1;
          v288 = v287[1];
          ++v286;
          v285 -= 8;
          ++v287;
          if (v288 != -1)
            goto LABEL_291;
        }
        v281 = v284;
      }
      else
      {
        v282 = 0;
      }
    }
LABEL_291:
    v289 = a3[18];
    v290 = a3[19];
    while (v289 != v290 && v281 != v284)
    {
      v307 = *v289;
      if (*v289 > v282)
      {
        v308 = v281 + 1;
        while (v308 != v284)
        {
          ++v282;
          v309 = *v308++;
          if (v309 != -1 && v307 <= v282)
          {
            v281 = v308 - 1;
            goto LABEL_305;
          }
        }
        break;
      }
LABEL_305:
      if (v307 == v282)
      {
        v311 = *(_QWORD *)(result + 12400) + 8 * *v281;
        if (v311 == *(_QWORD *)a2)
        {
          v295 = *(int8x16_t *)(v311 + 64);
          v299 = *(int8x16_t *)(v311 + 80);
          v301 = *(int8x16_t *)(v311 + 32);
          v296 = *(int8x16_t *)(v311 + 48);
          v292 = *(int8x16_t *)v311;
          v291 = *(int8x16_t *)(v311 + 16);
          v297 = vextq_s8(v299, v299, 8uLL).u64[0];
          v298.i64[0] = vextq_s8(v295, v295, 8uLL).u64[0];
          v300 = vextq_s8(v296, v296, 8uLL).u64[0];
          v293 = vextq_s8(v301, v301, 8uLL).u64[0];
          v294.i64[0] = vextq_s8(v291, v291, 8uLL).u64[0];
        }
        else
        {
          v291.i64[0] = *(_QWORD *)(v311 + 16);
          v292 = *(int8x16_t *)v311;
          v293 = *(_QWORD *)(v311 + 40);
          v294 = *(int8x16_t *)(v311 + 24);
          v295.i64[0] = *(_QWORD *)(v311 + 64);
          v296 = *(int8x16_t *)(v311 + 48);
          v297 = *(_QWORD *)(v311 + 88);
          v298 = *(int8x16_t *)(v311 + 72);
          v299.i64[0] = vextq_s8(v298, v298, 8uLL).u64[0];
          v300 = vextq_s8(v296, v296, 8uLL).u64[0];
          v301.i64[0] = vextq_s8(v294, v294, 8uLL).u64[0];
        }
        v302 = *(unsigned int *)(a2 + 16);
        v303 = *(_QWORD *)a2 + 8 * (v289[1] + (_DWORD)v302 * v182[1]);
        v292.i64[1] = vextq_s8(v292, v292, 8uLL).u64[0];
        v294.i64[1] = v301.i64[0];
        v296.i64[1] = v300;
        v298.i64[1] = v299.i64[0];
        *(_QWORD *)(v303 + 16) = v291.i64[0];
        *(int8x16_t *)v303 = v292;
        v304 = (int8x16_t *)(v303 + 8 * v302);
        v304[1].i64[0] = v293;
        *v304 = v294;
        v305 = (int8x16_t *)(v303 + 16 * v302);
        v305[1].i64[0] = v295.i64[0];
        *v305 = v296;
        v306 = (int8x16_t *)(v303 + 24 * v302);
        v306[1].i64[0] = v297;
        *v306 = v298;
        v282 = v307;
      }
      v289 += 2;
    }
    v182 += 2;
  }
  while (v182 != v183);
  v185 = *(_DWORD **)(a4 + 216);
  v186 = *(_DWORD **)(a4 + 224);
  if (a3[18] != a3[19] && v185 != v186)
  {
    do
    {
LABEL_325:
      v321 = *(_QWORD *)(result + 13912);
      v322 = (*(_DWORD *)(result + 13936) * *v185);
      v323 = (uint64_t *)(v321 + 8 * v322);
      v324 = *(_DWORD *)(result + 13832);
      v325 = v322 + v324;
      v326 = (uint64_t *)(v321 + 8 * v325);
      if (v324)
      {
        if (*v323 == -1)
        {
          v327 = 8 * v325 - 8 * v322 - 8;
          v328 = 1;
          v329 = v323;
          while (1)
          {
            v324 = v328;
            if (!v327)
              break;
            v323 = v329 + 1;
            v330 = v329[1];
            ++v328;
            v327 -= 8;
            ++v329;
            if (v330 != -1)
              goto LABEL_333;
          }
          v323 = v326;
        }
        else
        {
          v324 = 0;
        }
      }
LABEL_333:
      v331 = a3[18];
      v332 = a3[19];
      while (v331 != v332 && v323 != v326)
      {
        v345 = *v331;
        if (*v331 > v324)
        {
          v346 = v323 + 1;
          while (v346 != v326)
          {
            ++v324;
            v347 = *v346++;
            if (v347 != -1 && v345 <= v324)
            {
              v323 = v346 - 1;
              goto LABEL_347;
            }
          }
          break;
        }
LABEL_347:
        if (v345 == v324)
        {
          v349 = *(_QWORD *)(result + 13840) + 8 * *v323;
          if (v349 == *(_QWORD *)a2)
          {
            v339 = *(_QWORD *)(v349 + 64);
            v338 = *(int8x16_t *)(v349 + 32);
            v335 = *(int8x16_t *)(v349 + 48);
            v333 = *(int8x16_t *)v349;
            v337 = *(int8x16_t *)(v349 + 16);
            v340 = vextq_s8(v335, v335, 8uLL).u64[0];
            v336 = vextq_s8(v338, v338, 8uLL).u64[0];
            *(_QWORD *)&v334 = vextq_s8(v337, v337, 8uLL).u64[0];
          }
          else
          {
            v333 = *(int8x16_t *)v349;
            v334 = *(_OWORD *)(v349 + 24);
            v335 = *(int8x16_t *)(v349 + 48);
            v336 = *(_QWORD *)(v349 + 40);
            v337.i64[0] = *(_QWORD *)(v349 + 16);
            v338.i64[0] = *(_QWORD *)(v349 + 32);
            v339 = *(_QWORD *)(v349 + 64);
            v340 = vextq_s8(v335, v335, 8uLL).u64[0];
          }
          v341 = *(unsigned int *)(a2 + 16);
          v333.i64[1] = vextq_s8(v333, v333, 8uLL).u64[0];
          *((_QWORD *)&v334 + 1) = v338.i64[0];
          v342 = *(_QWORD *)a2 + 8 * (v331[1] + (_DWORD)v341 * v185[1]);
          v335.i64[1] = v340;
          *(_QWORD *)(v342 + 16) = v337.i64[0];
          *(int8x16_t *)v342 = v333;
          v343 = v342 + 8 * v341;
          *(_QWORD *)(v343 + 16) = v336;
          *(_OWORD *)v343 = v334;
          v344 = (int8x16_t *)(v342 + 16 * v341);
          v344[1].i64[0] = v339;
          *v344 = v335;
          v324 = v345;
        }
        v331 += 2;
      }
      v185 += 2;
    }
    while (v185 != v186);
  }
LABEL_313:
  v313 = *(_DWORD **)(a4 + 120);
  v314 = *(_DWORD **)(a4 + 128);
  v315 = a3[15];
  v316 = a3[16];
  if (v315 == v316 || v313 == v314)
  {
    v318 = *(_DWORD **)(a4 + 144);
    v319 = *(_DWORD **)(a4 + 152);
    if (v315 != v316 && v318 != v319)
      goto LABEL_395;
LABEL_378:
    v368 = *(_DWORD **)(a4 + 168);
    v369 = *(_DWORD **)(a4 + 176);
    if (v315 != v316 && v368 != v369)
      goto LABEL_426;
LABEL_383:
    v371 = *(_DWORD **)(a4 + 192);
    v372 = *(_DWORD **)(a4 + 200);
    if (v315 != v316 && v371 != v372)
      goto LABEL_454;
LABEL_388:
    v374 = *(_DWORD **)(a4 + 216);
    v375 = *(_DWORD **)(a4 + 224);
    if (v315 == v316 || v374 == v375)
      goto LABEL_481;
    goto LABEL_493;
  }
  do
  {
    v350 = *(_QWORD *)(result + 8008);
    v351 = (*(_DWORD *)(result + 8032) * *v313);
    v352 = (uint64_t *)(v350 + 8 * v351);
    v353 = *(_DWORD *)(result + 7928);
    v354 = (v351 + v353);
    v355 = (uint64_t *)(v350 + 8 * v354);
    if (v353 && *v352 == -1)
    {
      v363 = 8 * v354 - 8 * v351 - 8;
      v364 = 1;
      v365 = v352;
      while (1)
      {
        v356 = v364;
        if (!v363)
          break;
        v352 = v365 + 1;
        v366 = v365[1];
        ++v364;
        v363 -= 8;
        ++v365;
        if (v366 != -1)
          goto LABEL_354;
      }
      v352 = v355;
    }
    else
    {
      v356 = 0;
    }
LABEL_354:
    v357 = a3[15];
    v358 = a3[16];
    while (v357 != v358 && v352 != v355)
    {
      v359 = *v357;
      if (*v357 > v356)
      {
        v360 = v352 + 1;
        while (v360 != v355)
        {
          ++v356;
          v361 = *v360++;
          if (v361 != -1 && v359 <= v356)
          {
            v352 = v360 - 1;
            goto LABEL_366;
          }
        }
        break;
      }
LABEL_366:
      if (v359 == v356)
      {
        *(_QWORD *)(*(_QWORD *)a2 + 8 * (v357[1] + *(_DWORD *)(a2 + 16) * v313[1])) = *(_QWORD *)(*(_QWORD *)(result + 7936)
                                                                                                  + 8 * *v352);
        v356 = v359;
      }
      v357 += 2;
    }
    v313 += 2;
  }
  while (v313 != v314);
  v315 = a3[15];
  v316 = a3[16];
  v318 = *(_DWORD **)(a4 + 144);
  v319 = *(_DWORD **)(a4 + 152);
  if (v315 == v316 || v318 == v319)
    goto LABEL_378;
  do
  {
LABEL_395:
    v377 = *(_QWORD *)(result + 9448);
    v378 = (*(_DWORD *)(result + 9472) * *v318);
    v379 = (uint64_t *)(v377 + 8 * v378);
    v380 = *(_DWORD *)(result + 9368);
    v381 = (v378 + v380);
    v382 = (uint64_t *)(v377 + 8 * v381);
    if (v380 && *v379 == -1)
    {
      v396 = 8 * v381 - 8 * v378 - 8;
      v397 = 1;
      v398 = v379;
      while (1)
      {
        v383 = v397;
        if (!v396)
          break;
        v379 = v398 + 1;
        v399 = v398[1];
        ++v397;
        v396 -= 8;
        ++v398;
        if (v399 != -1)
          goto LABEL_398;
      }
      v379 = v382;
    }
    else
    {
      v383 = 0;
    }
LABEL_398:
    v384 = a3[15];
    v385 = a3[16];
    while (v384 != v385 && v379 != v382)
    {
      v391 = *v384;
      if (*v384 > v383)
      {
        v392 = v379 + 1;
        while (v392 != v382)
        {
          ++v383;
          v393 = *v392++;
          if (v393 != -1 && v391 <= v383)
          {
            v379 = v392 - 1;
            goto LABEL_412;
          }
        }
        break;
      }
LABEL_412:
      if (v391 == v383)
      {
        v395 = *(_QWORD *)(result + 9376) + 8 * *v379;
        if (v395 == *(_QWORD *)a2)
        {
          v388 = *(_QWORD *)(v395 + 16);
          v386 = *(int8x16_t *)v395;
          v387 = vextq_s8(v386, v386, 8uLL).u64[0];
        }
        else
        {
          v386.i64[0] = *(_QWORD *)v395;
          v387 = *(_QWORD *)(v395 + 8);
          v388 = *(_QWORD *)(v395 + 16);
        }
        v389 = *(unsigned int *)(a2 + 16);
        v390 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v384[1] + (_DWORD)v389 * v318[1]));
        *v390 = v386.i64[0];
        v390[v389] = v387;
        v390[2 * v389] = v388;
        v383 = v391;
      }
      v384 += 2;
    }
    v318 += 2;
  }
  while (v318 != v319);
  v315 = a3[15];
  v316 = a3[16];
  v368 = *(_DWORD **)(a4 + 168);
  v369 = *(_DWORD **)(a4 + 176);
  if (v315 == v316 || v368 == v369)
    goto LABEL_383;
  do
  {
LABEL_426:
    v401 = *(_QWORD *)(result + 10888);
    v402 = (*(_DWORD *)(result + 10912) * *v368);
    v403 = (uint64_t *)(v401 + 8 * v402);
    v404 = *(_DWORD *)(result + 10808);
    v405 = (v402 + v404);
    v406 = (uint64_t *)(v401 + 8 * v405);
    if (v404 && *v403 == -1)
    {
      v419 = 8 * v405 - 8 * v402 - 8;
      v420 = 1;
      v421 = v403;
      while (1)
      {
        v407 = v420;
        if (!v419)
          break;
        v403 = v421 + 1;
        v422 = v421[1];
        ++v420;
        v419 -= 8;
        ++v421;
        if (v422 != -1)
          goto LABEL_429;
      }
      v403 = v406;
    }
    else
    {
      v407 = 0;
    }
LABEL_429:
    v408 = a3[15];
    v409 = a3[16];
    while (v408 != v409 && v403 != v406)
    {
      v412 = *v408;
      if (*v408 > v407)
      {
        v413 = v403 + 1;
        while (v413 != v406)
        {
          ++v407;
          v414 = *v413++;
          if (v414 != -1 && v412 <= v407)
          {
            v403 = v413 - 1;
            goto LABEL_441;
          }
        }
        break;
      }
LABEL_441:
      if (v412 == v407)
      {
        v416 = (int8x16_t *)(*(_QWORD *)(result + 10816) + 8 * *v403);
        v418 = *v416;
        v417 = v416[1];
        v410 = *(unsigned int *)(a2 + 16);
        v411 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v408[1] + (_DWORD)v410 * v368[1]));
        *v411 = v416->i64[0];
        v411[v410] = vextq_s8(v418, v418, 8uLL).u64[0];
        v411[2 * v410] = v417.i64[0];
        v411[3 * v410] = vextq_s8(v417, v417, 8uLL).u64[0];
        v407 = v412;
      }
      v408 += 2;
    }
    v368 += 2;
  }
  while (v368 != v369);
  v315 = a3[15];
  v316 = a3[16];
  v371 = *(_DWORD **)(a4 + 192);
  v372 = *(_DWORD **)(a4 + 200);
  if (v315 == v316 || v371 == v372)
    goto LABEL_388;
  do
  {
LABEL_454:
    v424 = *(_QWORD *)(result + 12328);
    v425 = (*(_DWORD *)(result + 12352) * *v371);
    v426 = (uint64_t *)(v424 + 8 * v425);
    v427 = *(_DWORD *)(result + 12248);
    v428 = (v425 + v427);
    v429 = (uint64_t *)(v424 + 8 * v428);
    if (v427 && *v426 == -1)
    {
      v442 = 8 * v428 - 8 * v425 - 8;
      v443 = 1;
      v444 = v426;
      while (1)
      {
        v430 = v443;
        if (!v442)
          break;
        v426 = v444 + 1;
        v445 = v444[1];
        ++v443;
        v442 -= 8;
        ++v444;
        if (v445 != -1)
          goto LABEL_457;
      }
      v426 = v429;
    }
    else
    {
      v430 = 0;
    }
LABEL_457:
    v431 = a3[15];
    v432 = a3[16];
    while (v431 != v432 && v426 != v429)
    {
      v435 = *v431;
      if (*v431 > v430)
      {
        v436 = v426 + 1;
        while (v436 != v429)
        {
          ++v430;
          v437 = *v436++;
          if (v437 != -1 && v435 <= v430)
          {
            v426 = v436 - 1;
            goto LABEL_469;
          }
        }
        break;
      }
LABEL_469:
      if (v435 == v430)
      {
        v439 = (int8x16_t *)(*(_QWORD *)(result + 12256) + 8 * *v426);
        v441 = *v439;
        v440 = v439[1];
        v433 = *(unsigned int *)(a2 + 16);
        v434 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v431[1] + (_DWORD)v433 * v371[1]));
        *v434 = v439->i64[0];
        v434[v433] = vextq_s8(v441, v441, 8uLL).u64[0];
        v434[2 * v433] = v440.i64[0];
        v434[3 * v433] = vextq_s8(v440, v440, 8uLL).u64[0];
        v430 = v435;
      }
      v431 += 2;
    }
    v371 += 2;
  }
  while (v371 != v372);
  v374 = *(_DWORD **)(a4 + 216);
  v375 = *(_DWORD **)(a4 + 224);
  if (a3[15] != a3[16] && v374 != v375)
  {
    do
    {
LABEL_493:
      v455 = *(_QWORD *)(result + 13768);
      v456 = (*(_DWORD *)(result + 13792) * *v374);
      v457 = (uint64_t *)(v455 + 8 * v456);
      v458 = *(_DWORD *)(result + 13688);
      v459 = (v456 + v458);
      v460 = (uint64_t *)(v455 + 8 * v459);
      if (v458 && *v457 == -1)
      {
        v474 = 8 * v459 - 8 * v456 - 8;
        v475 = 1;
        v476 = v457;
        while (1)
        {
          v461 = v475;
          if (!v474)
            break;
          v457 = v476 + 1;
          v477 = v476[1];
          ++v475;
          v474 -= 8;
          ++v476;
          if (v477 != -1)
            goto LABEL_496;
        }
        v457 = v460;
      }
      else
      {
        v461 = 0;
      }
LABEL_496:
      v462 = a3[15];
      v463 = a3[16];
      while (v462 != v463 && v457 != v460)
      {
        v469 = *v462;
        if (*v462 > v461)
        {
          v470 = v457 + 1;
          while (v470 != v460)
          {
            ++v461;
            v471 = *v470++;
            if (v471 != -1 && v469 <= v461)
            {
              v457 = v470 - 1;
              goto LABEL_510;
            }
          }
          break;
        }
LABEL_510:
        if (v469 == v461)
        {
          v473 = *(_QWORD *)(result + 13696) + 8 * *v457;
          if (v473 == *(_QWORD *)a2)
          {
            v466 = *(_QWORD *)(v473 + 16);
            v464 = *(int8x16_t *)v473;
            v465 = vextq_s8(v464, v464, 8uLL).u64[0];
          }
          else
          {
            v464.i64[0] = *(_QWORD *)v473;
            v465 = *(_QWORD *)(v473 + 8);
            v466 = *(_QWORD *)(v473 + 16);
          }
          v467 = *(unsigned int *)(a2 + 16);
          v468 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v462[1] + (_DWORD)v467 * v374[1]));
          *v468 = v464.i64[0];
          v468[v467] = v465;
          v468[2 * v467] = v466;
          v461 = v469;
        }
        v462 += 2;
      }
      v374 += 2;
    }
    while (v374 != v375);
  }
LABEL_481:
  v447 = *(_DWORD **)(a4 + 96);
  v448 = *(_DWORD **)(a4 + 104);
  v449 = a3[12];
  v450 = a3[13];
  if (v449 == v450 || v447 == v448)
  {
    v452 = *(_DWORD **)(a4 + 120);
    v453 = *(_DWORD **)(a4 + 128);
    if (v449 != v450 && v452 != v453)
      goto LABEL_556;
LABEL_549:
    v508 = *(_DWORD **)(a4 + 144);
    v509 = *(_DWORD **)(a4 + 152);
    if (v449 != v450 && v508 != v509)
      goto LABEL_600;
LABEL_583:
    v532 = *(_DWORD **)(a4 + 168);
    v533 = *(_DWORD **)(a4 + 176);
    if (v449 != v450 && v532 != v533)
      goto LABEL_631;
LABEL_588:
    v535 = *(_DWORD **)(a4 + 192);
    v536 = *(_DWORD **)(a4 + 200);
    if (v449 != v450 && v535 != v536)
      goto LABEL_662;
LABEL_593:
    v538 = *(_DWORD **)(a4 + 216);
    v539 = *(_DWORD **)(a4 + 224);
    if (v449 == v450 || v538 == v539)
      goto LABEL_692;
    goto LABEL_704;
  }
  do
  {
    v478 = *(_QWORD *)(result + 6424);
    v479 = (*(_DWORD *)(result + 6448) * *v447);
    v480 = (uint64_t *)(v478 + 8 * v479);
    v481 = *(_DWORD *)(result + 6344);
    v482 = v479 + v481;
    v483 = (uint64_t *)(v478 + 8 * v482);
    if (v481)
    {
      if (*v480 == -1)
      {
        v484 = 8 * v482 - 8 * v479 - 8;
        v485 = 1;
        v486 = v480;
        while (1)
        {
          v481 = v485;
          if (!v484)
            break;
          v480 = v486 + 1;
          v487 = v486[1];
          ++v485;
          v484 -= 8;
          ++v486;
          if (v487 != -1)
            goto LABEL_527;
        }
        v480 = v483;
      }
      else
      {
        v481 = 0;
      }
    }
LABEL_527:
    v488 = a3[12];
    v489 = a3[13];
    while (v488 != v489 && v480 != v483)
    {
      v502 = *v488;
      if (*v488 > v481)
      {
        v503 = v480 + 1;
        while (v503 != v483)
        {
          ++v481;
          v504 = *v503++;
          if (v504 != -1 && v502 <= v481)
          {
            v480 = v503 - 1;
            goto LABEL_541;
          }
        }
        break;
      }
LABEL_541:
      if (v502 == v481)
      {
        v506 = *(_QWORD *)(result + 6352) + 8 * *v480;
        if (v506 == *(_QWORD *)a2)
        {
          v496 = *(_QWORD *)(v506 + 64);
          v495 = *(int8x16_t *)(v506 + 32);
          v492 = *(int8x16_t *)(v506 + 48);
          v490 = *(int8x16_t *)v506;
          v494 = *(int8x16_t *)(v506 + 16);
          v497 = vextq_s8(v492, v492, 8uLL).u64[0];
          v493 = vextq_s8(v495, v495, 8uLL).u64[0];
          *(_QWORD *)&v491 = vextq_s8(v494, v494, 8uLL).u64[0];
        }
        else
        {
          v490 = *(int8x16_t *)v506;
          v491 = *(_OWORD *)(v506 + 24);
          v492 = *(int8x16_t *)(v506 + 48);
          v493 = *(_QWORD *)(v506 + 40);
          v494.i64[0] = *(_QWORD *)(v506 + 16);
          v495.i64[0] = *(_QWORD *)(v506 + 32);
          v496 = *(_QWORD *)(v506 + 64);
          v497 = vextq_s8(v492, v492, 8uLL).u64[0];
        }
        v498 = *(unsigned int *)(a2 + 16);
        v490.i64[1] = vextq_s8(v490, v490, 8uLL).u64[0];
        *((_QWORD *)&v491 + 1) = v495.i64[0];
        v499 = *(_QWORD *)a2 + 8 * (v488[1] + (_DWORD)v498 * v447[1]);
        v492.i64[1] = v497;
        *(_QWORD *)(v499 + 16) = v494.i64[0];
        *(int8x16_t *)v499 = v490;
        v500 = v499 + 8 * v498;
        *(_QWORD *)(v500 + 16) = v493;
        *(_OWORD *)v500 = v491;
        v501 = (int8x16_t *)(v499 + 16 * v498);
        v501[1].i64[0] = v496;
        *v501 = v492;
        v481 = v502;
      }
      v488 += 2;
    }
    v447 += 2;
  }
  while (v447 != v448);
  v449 = a3[12];
  v450 = a3[13];
  v452 = *(_DWORD **)(a4 + 120);
  v453 = *(_DWORD **)(a4 + 128);
  if (v449 == v450 || v452 == v453)
    goto LABEL_549;
  do
  {
LABEL_556:
    v511 = *(_QWORD *)(result + 7864);
    v512 = (*(_DWORD *)(result + 7888) * *v452);
    v513 = (uint64_t *)(v511 + 8 * v512);
    v514 = *(_DWORD *)(result + 7784);
    v515 = (v512 + v514);
    v516 = (uint64_t *)(v511 + 8 * v515);
    if (v514 && *v513 == -1)
    {
      v527 = 8 * v515 - 8 * v512 - 8;
      v528 = 1;
      v529 = v513;
      while (1)
      {
        v517 = v528;
        if (!v527)
          break;
        v513 = v529 + 1;
        v530 = v529[1];
        ++v528;
        v527 -= 8;
        ++v529;
        if (v530 != -1)
          goto LABEL_559;
      }
      v513 = v516;
    }
    else
    {
      v517 = 0;
    }
LABEL_559:
    v518 = a3[12];
    v519 = a3[13];
    while (v518 != v519 && v513 != v516)
    {
      v520 = *v518;
      if (*v518 > v517)
      {
        v521 = v513 + 1;
        while (v521 != v516)
        {
          ++v517;
          v522 = *v521++;
          if (v522 != -1 && v520 <= v517)
          {
            v513 = v521 - 1;
            goto LABEL_571;
          }
        }
        break;
      }
LABEL_571:
      if (v520 == v517)
      {
        v524 = *(_QWORD *)(result + 7792) + 8 * *v513;
        v525 = *(_QWORD *)a2 + 8 * (v518[1] + *(_DWORD *)(a2 + 16) * v452[1]);
        v526 = *(_OWORD *)v524;
        *(_QWORD *)(v525 + 16) = *(_QWORD *)(v524 + 16);
        *(_OWORD *)v525 = v526;
        v517 = v520;
      }
      v518 += 2;
    }
    v452 += 2;
  }
  while (v452 != v453);
  v449 = a3[12];
  v450 = a3[13];
  v508 = *(_DWORD **)(a4 + 144);
  v509 = *(_DWORD **)(a4 + 152);
  if (v449 == v450 || v508 == v509)
    goto LABEL_583;
  do
  {
LABEL_600:
    v541 = *(_QWORD *)(result + 9304);
    v542 = (*(_DWORD *)(result + 9328) * *v508);
    v543 = (uint64_t *)(v541 + 8 * v542);
    v544 = *(_DWORD *)(result + 9224);
    v545 = v542 + v544;
    v546 = (uint64_t *)(v541 + 8 * v545);
    if (v544)
    {
      if (*v543 == -1)
      {
        v547 = 8 * v545 - 8 * v542 - 8;
        v548 = 1;
        v549 = v543;
        while (1)
        {
          v544 = v548;
          if (!v547)
            break;
          v543 = v549 + 1;
          v550 = v549[1];
          ++v548;
          v547 -= 8;
          ++v549;
          if (v550 != -1)
            goto LABEL_608;
        }
        v543 = v546;
      }
      else
      {
        v544 = 0;
      }
    }
LABEL_608:
    v551 = a3[12];
    v552 = a3[13];
    while (v551 != v552 && v543 != v546)
    {
      v565 = *v551;
      if (*v551 > v544)
      {
        v566 = v543 + 1;
        while (v566 != v546)
        {
          ++v544;
          v567 = *v566++;
          if (v567 != -1 && v565 <= v544)
          {
            v543 = v566 - 1;
            goto LABEL_622;
          }
        }
        break;
      }
LABEL_622:
      if (v565 == v544)
      {
        v569 = *(_QWORD *)(result + 9232) + 8 * *v543;
        if (v569 == *(_QWORD *)a2)
        {
          v559 = *(_QWORD *)(v569 + 64);
          v558 = *(int8x16_t *)(v569 + 32);
          v555 = *(int8x16_t *)(v569 + 48);
          v553 = *(int8x16_t *)v569;
          v557 = *(int8x16_t *)(v569 + 16);
          v560 = vextq_s8(v555, v555, 8uLL).u64[0];
          v556 = vextq_s8(v558, v558, 8uLL).u64[0];
          *(_QWORD *)&v554 = vextq_s8(v557, v557, 8uLL).u64[0];
        }
        else
        {
          v553 = *(int8x16_t *)v569;
          v554 = *(_OWORD *)(v569 + 24);
          v555 = *(int8x16_t *)(v569 + 48);
          v556 = *(_QWORD *)(v569 + 40);
          v557.i64[0] = *(_QWORD *)(v569 + 16);
          v558.i64[0] = *(_QWORD *)(v569 + 32);
          v559 = *(_QWORD *)(v569 + 64);
          v560 = vextq_s8(v555, v555, 8uLL).u64[0];
        }
        v561 = *(unsigned int *)(a2 + 16);
        v553.i64[1] = vextq_s8(v553, v553, 8uLL).u64[0];
        *((_QWORD *)&v554 + 1) = v558.i64[0];
        v562 = *(_QWORD *)a2 + 8 * (v551[1] + (_DWORD)v561 * v508[1]);
        v555.i64[1] = v560;
        *(_QWORD *)(v562 + 16) = v557.i64[0];
        *(int8x16_t *)v562 = v553;
        v563 = v562 + 8 * v561;
        *(_QWORD *)(v563 + 16) = v556;
        *(_OWORD *)v563 = v554;
        v564 = (int8x16_t *)(v562 + 16 * v561);
        v564[1].i64[0] = v559;
        *v564 = v555;
        v544 = v565;
      }
      v551 += 2;
    }
    v508 += 2;
  }
  while (v508 != v509);
  v449 = a3[12];
  v450 = a3[13];
  v532 = *(_DWORD **)(a4 + 168);
  v533 = *(_DWORD **)(a4 + 176);
  if (v449 == v450 || v532 == v533)
    goto LABEL_588;
  do
  {
LABEL_631:
    v571 = *(_QWORD *)(result + 10744);
    v572 = (*(_DWORD *)(result + 10768) * *v532);
    v573 = (uint64_t *)(v571 + 8 * v572);
    v574 = *(_DWORD *)(result + 10664);
    v575 = v572 + v574;
    v576 = (uint64_t *)(v571 + 8 * v575);
    if (v574)
    {
      if (*v573 == -1)
      {
        v577 = 8 * v575 - 8 * v572 - 8;
        v578 = 1;
        v579 = v573;
        while (1)
        {
          v574 = v578;
          if (!v577)
            break;
          v573 = v579 + 1;
          v580 = v579[1];
          ++v578;
          v577 -= 8;
          ++v579;
          if (v580 != -1)
            goto LABEL_639;
        }
        v573 = v576;
      }
      else
      {
        v574 = 0;
      }
    }
LABEL_639:
    v581 = a3[12];
    v582 = a3[13];
    while (v581 != v582 && v573 != v576)
    {
      v599 = *v581;
      if (*v581 > v574)
      {
        v600 = v573 + 1;
        while (v600 != v576)
        {
          ++v574;
          v601 = *v600++;
          if (v601 != -1 && v599 <= v574)
          {
            v573 = v600 - 1;
            goto LABEL_653;
          }
        }
        break;
      }
LABEL_653:
      if (v599 == v574)
      {
        v603 = *(_QWORD *)(result + 10672) + 8 * *v573;
        if (v603 == *(_QWORD *)a2)
        {
          v587 = *(int8x16_t *)(v603 + 64);
          v591 = *(int8x16_t *)(v603 + 80);
          v593 = *(int8x16_t *)(v603 + 32);
          v588 = *(int8x16_t *)(v603 + 48);
          v584 = *(int8x16_t *)v603;
          v583 = *(int8x16_t *)(v603 + 16);
          v589 = vextq_s8(v591, v591, 8uLL).u64[0];
          v590.i64[0] = vextq_s8(v587, v587, 8uLL).u64[0];
          v592 = vextq_s8(v588, v588, 8uLL).u64[0];
          v585 = vextq_s8(v593, v593, 8uLL).u64[0];
          v586.i64[0] = vextq_s8(v583, v583, 8uLL).u64[0];
        }
        else
        {
          v583.i64[0] = *(_QWORD *)(v603 + 16);
          v584 = *(int8x16_t *)v603;
          v585 = *(_QWORD *)(v603 + 40);
          v586 = *(int8x16_t *)(v603 + 24);
          v587.i64[0] = *(_QWORD *)(v603 + 64);
          v588 = *(int8x16_t *)(v603 + 48);
          v589 = *(_QWORD *)(v603 + 88);
          v590 = *(int8x16_t *)(v603 + 72);
          v591.i64[0] = vextq_s8(v590, v590, 8uLL).u64[0];
          v592 = vextq_s8(v588, v588, 8uLL).u64[0];
          v593.i64[0] = vextq_s8(v586, v586, 8uLL).u64[0];
        }
        v594 = *(unsigned int *)(a2 + 16);
        v595 = *(_QWORD *)a2 + 8 * (v581[1] + (_DWORD)v594 * v532[1]);
        v584.i64[1] = vextq_s8(v584, v584, 8uLL).u64[0];
        v586.i64[1] = v593.i64[0];
        v588.i64[1] = v592;
        v590.i64[1] = v591.i64[0];
        *(_QWORD *)(v595 + 16) = v583.i64[0];
        *(int8x16_t *)v595 = v584;
        v596 = (int8x16_t *)(v595 + 8 * v594);
        v596[1].i64[0] = v585;
        *v596 = v586;
        v597 = (int8x16_t *)(v595 + 16 * v594);
        v597[1].i64[0] = v587.i64[0];
        *v597 = v588;
        v598 = (int8x16_t *)(v595 + 24 * v594);
        v598[1].i64[0] = v589;
        *v598 = v590;
        v574 = v599;
      }
      v581 += 2;
    }
    v532 += 2;
  }
  while (v532 != v533);
  v449 = a3[12];
  v450 = a3[13];
  v535 = *(_DWORD **)(a4 + 192);
  v536 = *(_DWORD **)(a4 + 200);
  if (v449 == v450 || v535 == v536)
    goto LABEL_593;
  do
  {
LABEL_662:
    v605 = *(_QWORD *)(result + 12184);
    v606 = (*(_DWORD *)(result + 12208) * *v535);
    v607 = (uint64_t *)(v605 + 8 * v606);
    v608 = *(_DWORD *)(result + 12104);
    v609 = v606 + v608;
    v610 = (uint64_t *)(v605 + 8 * v609);
    if (v608)
    {
      if (*v607 == -1)
      {
        v611 = 8 * v609 - 8 * v606 - 8;
        v612 = 1;
        v613 = v607;
        while (1)
        {
          v608 = v612;
          if (!v611)
            break;
          v607 = v613 + 1;
          v614 = v613[1];
          ++v612;
          v611 -= 8;
          ++v613;
          if (v614 != -1)
            goto LABEL_670;
        }
        v607 = v610;
      }
      else
      {
        v608 = 0;
      }
    }
LABEL_670:
    v615 = a3[12];
    v616 = a3[13];
    while (v615 != v616 && v607 != v610)
    {
      v633 = *v615;
      if (*v615 > v608)
      {
        v634 = v607 + 1;
        while (v634 != v610)
        {
          ++v608;
          v635 = *v634++;
          if (v635 != -1 && v633 <= v608)
          {
            v607 = v634 - 1;
            goto LABEL_684;
          }
        }
        break;
      }
LABEL_684:
      if (v633 == v608)
      {
        v637 = *(_QWORD *)(result + 12112) + 8 * *v607;
        if (v637 == *(_QWORD *)a2)
        {
          v621 = *(int8x16_t *)(v637 + 64);
          v625 = *(int8x16_t *)(v637 + 80);
          v627 = *(int8x16_t *)(v637 + 32);
          v622 = *(int8x16_t *)(v637 + 48);
          v618 = *(int8x16_t *)v637;
          v617 = *(int8x16_t *)(v637 + 16);
          v623 = vextq_s8(v625, v625, 8uLL).u64[0];
          v624.i64[0] = vextq_s8(v621, v621, 8uLL).u64[0];
          v626 = vextq_s8(v622, v622, 8uLL).u64[0];
          v619 = vextq_s8(v627, v627, 8uLL).u64[0];
          v620.i64[0] = vextq_s8(v617, v617, 8uLL).u64[0];
        }
        else
        {
          v617.i64[0] = *(_QWORD *)(v637 + 16);
          v618 = *(int8x16_t *)v637;
          v619 = *(_QWORD *)(v637 + 40);
          v620 = *(int8x16_t *)(v637 + 24);
          v621.i64[0] = *(_QWORD *)(v637 + 64);
          v622 = *(int8x16_t *)(v637 + 48);
          v623 = *(_QWORD *)(v637 + 88);
          v624 = *(int8x16_t *)(v637 + 72);
          v625.i64[0] = vextq_s8(v624, v624, 8uLL).u64[0];
          v626 = vextq_s8(v622, v622, 8uLL).u64[0];
          v627.i64[0] = vextq_s8(v620, v620, 8uLL).u64[0];
        }
        v628 = *(unsigned int *)(a2 + 16);
        v629 = *(_QWORD *)a2 + 8 * (v615[1] + (_DWORD)v628 * v535[1]);
        v618.i64[1] = vextq_s8(v618, v618, 8uLL).u64[0];
        v620.i64[1] = v627.i64[0];
        v622.i64[1] = v626;
        v624.i64[1] = v625.i64[0];
        *(_QWORD *)(v629 + 16) = v617.i64[0];
        *(int8x16_t *)v629 = v618;
        v630 = (int8x16_t *)(v629 + 8 * v628);
        v630[1].i64[0] = v619;
        *v630 = v620;
        v631 = (int8x16_t *)(v629 + 16 * v628);
        v631[1].i64[0] = v621.i64[0];
        *v631 = v622;
        v632 = (int8x16_t *)(v629 + 24 * v628);
        v632[1].i64[0] = v623;
        *v632 = v624;
        v608 = v633;
      }
      v615 += 2;
    }
    v535 += 2;
  }
  while (v535 != v536);
  v538 = *(_DWORD **)(a4 + 216);
  v539 = *(_DWORD **)(a4 + 224);
  if (a3[12] != a3[13] && v538 != v539)
  {
    do
    {
LABEL_704:
      v647 = *(_QWORD *)(result + 13624);
      v648 = (*(_DWORD *)(result + 13648) * *v538);
      v649 = (uint64_t *)(v647 + 8 * v648);
      v650 = *(_DWORD *)(result + 13544);
      v651 = v648 + v650;
      v652 = (uint64_t *)(v647 + 8 * v651);
      if (v650)
      {
        if (*v649 == -1)
        {
          v653 = 8 * v651 - 8 * v648 - 8;
          v654 = 1;
          v655 = v649;
          while (1)
          {
            v650 = v654;
            if (!v653)
              break;
            v649 = v655 + 1;
            v656 = v655[1];
            ++v654;
            v653 -= 8;
            ++v655;
            if (v656 != -1)
              goto LABEL_712;
          }
          v649 = v652;
        }
        else
        {
          v650 = 0;
        }
      }
LABEL_712:
      v657 = a3[12];
      v658 = a3[13];
      while (v657 != v658 && v649 != v652)
      {
        v671 = *v657;
        if (*v657 > v650)
        {
          v672 = v649 + 1;
          while (v672 != v652)
          {
            ++v650;
            v673 = *v672++;
            if (v673 != -1 && v671 <= v650)
            {
              v649 = v672 - 1;
              goto LABEL_726;
            }
          }
          break;
        }
LABEL_726:
        if (v671 == v650)
        {
          v675 = *(_QWORD *)(result + 13552) + 8 * *v649;
          if (v675 == *(_QWORD *)a2)
          {
            v665 = *(_QWORD *)(v675 + 64);
            v664 = *(int8x16_t *)(v675 + 32);
            v661 = *(int8x16_t *)(v675 + 48);
            v659 = *(int8x16_t *)v675;
            v663 = *(int8x16_t *)(v675 + 16);
            v666 = vextq_s8(v661, v661, 8uLL).u64[0];
            v662 = vextq_s8(v664, v664, 8uLL).u64[0];
            *(_QWORD *)&v660 = vextq_s8(v663, v663, 8uLL).u64[0];
          }
          else
          {
            v659 = *(int8x16_t *)v675;
            v660 = *(_OWORD *)(v675 + 24);
            v661 = *(int8x16_t *)(v675 + 48);
            v662 = *(_QWORD *)(v675 + 40);
            v663.i64[0] = *(_QWORD *)(v675 + 16);
            v664.i64[0] = *(_QWORD *)(v675 + 32);
            v665 = *(_QWORD *)(v675 + 64);
            v666 = vextq_s8(v661, v661, 8uLL).u64[0];
          }
          v667 = *(unsigned int *)(a2 + 16);
          v659.i64[1] = vextq_s8(v659, v659, 8uLL).u64[0];
          *((_QWORD *)&v660 + 1) = v664.i64[0];
          v668 = *(_QWORD *)a2 + 8 * (v657[1] + (_DWORD)v667 * v538[1]);
          v661.i64[1] = v666;
          *(_QWORD *)(v668 + 16) = v663.i64[0];
          *(int8x16_t *)v668 = v659;
          v669 = v668 + 8 * v667;
          *(_QWORD *)(v669 + 16) = v662;
          *(_OWORD *)v669 = v660;
          v670 = (int8x16_t *)(v668 + 16 * v667);
          v670[1].i64[0] = v665;
          *v670 = v661;
          v650 = v671;
        }
        v657 += 2;
      }
      v538 += 2;
    }
    while (v538 != v539);
  }
LABEL_692:
  v639 = *(_DWORD **)(a4 + 72);
  v640 = *(_DWORD **)(a4 + 80);
  v641 = a3[9];
  v642 = a3[10];
  if (v641 == v642 || v639 == v640)
  {
    v644 = *(_DWORD **)(a4 + 96);
    v645 = *(_DWORD **)(a4 + 104);
    if (v641 != v642 && v644 != v645)
      goto LABEL_767;
LABEL_760:
    v723 = *(_DWORD **)(a4 + 120);
    v724 = *(_DWORD **)(a4 + 128);
    if (v641 != v642 && v723 != v724)
      goto LABEL_804;
LABEL_797:
    v760 = *(_DWORD **)(a4 + 144);
    v761 = *(_DWORD **)(a4 + 152);
    if (v641 != v642 && v760 != v761)
      goto LABEL_848;
LABEL_831:
    v785 = *(_DWORD **)(a4 + 168);
    v786 = *(_DWORD **)(a4 + 176);
    if (v641 != v642 && v785 != v786)
      goto LABEL_879;
LABEL_836:
    v788 = *(_DWORD **)(a4 + 192);
    v789 = *(_DWORD **)(a4 + 200);
    if (v641 != v642 && v788 != v789)
      goto LABEL_910;
LABEL_841:
    v791 = *(_DWORD **)(a4 + 216);
    v792 = *(_DWORD **)(a4 + 224);
    if (v641 == v642 || v791 == v792)
      goto LABEL_940;
    goto LABEL_957;
  }
  do
  {
    v676 = *(_QWORD *)(result + 4840);
    v677 = (*(_DWORD *)(result + 4864) * *v639);
    v678 = (uint64_t *)(v676 + 8 * v677);
    v679 = *(_DWORD *)(result + 4760);
    v680 = v677 + v679;
    v681 = (uint64_t *)(v676 + 8 * v680);
    if (v679)
    {
      if (*v678 == -1)
      {
        v682 = 8 * v680 - 8 * v677 - 8;
        v683 = 1;
        v684 = v678;
        while (1)
        {
          v679 = v683;
          if (!v682)
            break;
          v678 = v684 + 1;
          v685 = v684[1];
          ++v683;
          v682 -= 8;
          ++v684;
          if (v685 != -1)
            goto LABEL_738;
        }
        v678 = v681;
      }
      else
      {
        v679 = 0;
      }
    }
LABEL_738:
    v686 = a3[9];
    v687 = a3[10];
    while (v686 != v687 && v678 != v681)
    {
      v717 = *v686;
      if (*v686 > v679)
      {
        v718 = v678 + 1;
        while (v718 != v681)
        {
          ++v679;
          v719 = *v718++;
          if (v719 != -1 && v717 <= v679)
          {
            v678 = v718 - 1;
            goto LABEL_752;
          }
        }
        break;
      }
LABEL_752:
      if (v717 == v679)
      {
        v721 = (int8x16_t *)(*(_QWORD *)(result + 4768) + 8 * *v678);
        if (v721 == *(int8x16_t **)a2)
        {
          v697 = v721[16];
          v696 = v721[17];
          v695 = v721[14];
          v694 = v721[15];
          v693 = v721[12];
          v692 = v721[13];
          v691 = v721[10];
          v690 = v721[11];
          v703 = v721[8];
          v702 = v721[9];
          v2302 = vextq_s8(v697, v697, 8uLL).u64[0];
          v2314 = vextq_s8(v696, v696, 8uLL).u64[0];
          v698 = vextq_s8(v695, v695, 8uLL).u64[0];
          v699 = vextq_s8(v692, v692, 8uLL).u64[0];
          v700 = vextq_s8(v693, v693, 8uLL).u64[0];
          v2278 = vextq_s8(v690, v690, 8uLL).u64[0];
          v2290 = vextq_s8(v694, v694, 8uLL).u64[0];
          v701 = vextq_s8(v691, v691, 8uLL).u64[0];
          v689 = v721[6];
          v688 = v721[7];
        }
        else
        {
          v689 = v721[6];
          v688 = v721[7];
          v691 = v721[10];
          v690 = v721[11];
          v693 = v721[12];
          v692 = v721[13];
          v695 = v721[14];
          v694 = v721[15];
          v697 = v721[16];
          v696 = v721[17];
          v2302 = vextq_s8(v697, v697, 8uLL).u64[0];
          v2314 = vextq_s8(v696, v696, 8uLL).u64[0];
          v698 = vextq_s8(v695, v695, 8uLL).u64[0];
          v699 = vextq_s8(v692, v692, 8uLL).u64[0];
          v700 = vextq_s8(v693, v693, 8uLL).u64[0];
          v2278 = vextq_s8(v690, v690, 8uLL).u64[0];
          v2290 = vextq_s8(v694, v694, 8uLL).u64[0];
          v701 = vextq_s8(v691, v691, 8uLL).u64[0];
          v703 = v721[8];
          v702 = v721[9];
        }
        v705 = v721[4];
        v704 = v721[5];
        v707 = v721[2];
        v706 = v721[3];
        v709 = *v721;
        v708 = v721[1];
        v695.i64[1] = v698;
        v692.i64[1] = v699;
        v693.i64[1] = v700;
        v707.i64[1] = vextq_s8(v707, v707, 8uLL).u64[0];
        v710 = *(unsigned int *)(a2 + 16);
        v711 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v686[1] + (_DWORD)v710 * v639[1]));
        v708.i64[1] = vextq_s8(v708, v708, 8uLL).u64[0];
        v709.i64[1] = vextq_s8(v709, v709, 8uLL).u64[0];
        v704.i64[1] = vextq_s8(v704, v704, 8uLL).u64[0];
        v705.i64[1] = vextq_s8(v705, v705, 8uLL).u64[0];
        v706.i64[1] = vextq_s8(v706, v706, 8uLL).u64[0];
        v703.i64[1] = vextq_s8(v703, v703, 8uLL).u64[0];
        v688.i64[1] = vextq_s8(v688, v688, 8uLL).u64[0];
        v689.i64[1] = vextq_s8(v689, v689, 8uLL).u64[0];
        v690.i64[1] = v2278;
        v691.i64[1] = v701;
        v702.i64[1] = vextq_s8(v702, v702, 8uLL).u64[0];
        v696.i64[1] = v2314;
        v697.i64[1] = v2302;
        v694.i64[1] = v2290;
        *v711 = v709;
        v711[1] = v708;
        v711[2] = v707;
        v712 = (int8x16_t *)((char *)v711 + 8 * v710);
        *v712 = v706;
        v712[1] = v705;
        v712[2] = v704;
        v713 = &v711[v710];
        *v713 = v689;
        v713[1] = v688;
        v713[2] = v703;
        v714 = (int8x16_t *)((char *)v711 + 24 * v710);
        *v714 = v702;
        v714[1] = v691;
        v714[2] = v690;
        v715 = &v711[2 * v710];
        *v715 = v693;
        v715[1] = v692;
        v715[2] = v695;
        v716 = (int8x16_t *)((char *)v711 + 40 * v710);
        *v716 = v694;
        v716[1] = v697;
        v679 = v717;
        v716[2] = v696;
      }
      v686 += 2;
    }
    v639 += 2;
  }
  while (v639 != v640);
  v641 = a3[9];
  v642 = a3[10];
  v644 = *(_DWORD **)(a4 + 96);
  v645 = *(_DWORD **)(a4 + 104);
  if (v641 == v642 || v644 == v645)
    goto LABEL_760;
  do
  {
LABEL_767:
    v726 = *(_QWORD *)(result + 6280);
    v727 = (*(_DWORD *)(result + 6304) * *v644);
    v728 = (uint64_t *)(v726 + 8 * v727);
    v729 = *(_DWORD *)(result + 6200);
    v730 = v727 + v729;
    v731 = (uint64_t *)(v726 + 8 * v730);
    if (v729)
    {
      if (*v728 == -1)
      {
        v732 = 8 * v730 - 8 * v727 - 8;
        v733 = 1;
        v734 = v728;
        while (1)
        {
          v729 = v733;
          if (!v732)
            break;
          v728 = v734 + 1;
          v735 = v734[1];
          ++v733;
          v732 -= 8;
          ++v734;
          if (v735 != -1)
            goto LABEL_775;
        }
        v728 = v731;
      }
      else
      {
        v729 = 0;
      }
    }
LABEL_775:
    v736 = a3[9];
    v737 = a3[10];
    while (v736 != v737 && v728 != v731)
    {
      v754 = *v736;
      if (*v736 > v729)
      {
        v755 = v728 + 1;
        while (v755 != v731)
        {
          ++v729;
          v756 = *v755++;
          if (v756 != -1 && v754 <= v729)
          {
            v728 = v755 - 1;
            goto LABEL_789;
          }
        }
        break;
      }
LABEL_789:
      if (v754 == v729)
      {
        v758 = (int8x16_t *)(*(_QWORD *)(result + 6208) + 8 * *v728);
        if (v758 == *(int8x16_t **)a2)
        {
          v742 = v758[7];
          v744 = v758[8];
          v748 = v758[5];
          v743 = v758[6];
          v740 = v758[3];
          v749 = v758[4];
          v738 = v758[1];
          v741 = v758[2];
          v745 = vextq_s8(v744, v744, 8uLL).u64[0];
          v746 = vextq_s8(v742, v742, 8uLL).u64[0];
          v747 = vextq_s8(v743, v743, 8uLL).u64[0];
          v739 = *v758;
        }
        else
        {
          v739 = *v758;
          v738 = v758[1];
          v741 = v758[2];
          v740 = v758[3];
          v743 = v758[6];
          v742 = v758[7];
          v744 = v758[8];
          v745 = vextq_s8(v744, v744, 8uLL).u64[0];
          v746 = vextq_s8(v742, v742, 8uLL).u64[0];
          v747 = vextq_s8(v743, v743, 8uLL).u64[0];
          v749 = v758[4];
          v748 = v758[5];
        }
        v750 = *(unsigned int *)(a2 + 16);
        v751 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v736[1] + (_DWORD)v750 * v644[1]));
        v741.i64[1] = vextq_s8(v741, v741, 8uLL).u64[0];
        v738.i64[1] = vextq_s8(v738, v738, 8uLL).u64[0];
        v739.i64[1] = vextq_s8(v739, v739, 8uLL).u64[0];
        v748.i64[1] = vextq_s8(v748, v748, 8uLL).u64[0];
        v749.i64[1] = vextq_s8(v749, v749, 8uLL).u64[0];
        v740.i64[1] = vextq_s8(v740, v740, 8uLL).u64[0];
        v744.i64[1] = v745;
        v742.i64[1] = v746;
        v743.i64[1] = v747;
        *v751 = v739;
        v751[1] = v738;
        v751[2] = v741;
        v752 = (int8x16_t *)((char *)v751 + 8 * v750);
        *v752 = v740;
        v752[1] = v749;
        v752[2] = v748;
        v753 = &v751[v750];
        *v753 = v743;
        v753[1] = v742;
        v753[2] = v744;
        v729 = v754;
      }
      v736 += 2;
    }
    v644 += 2;
  }
  while (v644 != v645);
  v641 = a3[9];
  v642 = a3[10];
  v723 = *(_DWORD **)(a4 + 120);
  v724 = *(_DWORD **)(a4 + 128);
  if (v641 == v642 || v723 == v724)
    goto LABEL_797;
  do
  {
LABEL_804:
    v763 = *(_QWORD *)(result + 7720);
    v764 = (*(_DWORD *)(result + 7744) * *v723);
    v765 = (uint64_t *)(v763 + 8 * v764);
    v766 = *(_DWORD *)(result + 7640);
    v767 = (v764 + v766);
    v768 = (uint64_t *)(v763 + 8 * v767);
    if (v766 && *v765 == -1)
    {
      v780 = 8 * v767 - 8 * v764 - 8;
      v781 = 1;
      v782 = v765;
      while (1)
      {
        v769 = v781;
        if (!v780)
          break;
        v765 = v782 + 1;
        v783 = v782[1];
        ++v781;
        v780 -= 8;
        ++v782;
        if (v783 != -1)
          goto LABEL_807;
      }
      v765 = v768;
    }
    else
    {
      v769 = 0;
    }
LABEL_807:
    v770 = a3[9];
    v771 = a3[10];
    while (v770 != v771 && v765 != v768)
    {
      v772 = *v770;
      if (*v770 > v769)
      {
        v773 = v765 + 1;
        while (v773 != v768)
        {
          ++v769;
          v774 = *v773++;
          if (v774 != -1 && v772 <= v769)
          {
            v765 = v773 - 1;
            goto LABEL_819;
          }
        }
        break;
      }
LABEL_819:
      if (v772 == v769)
      {
        v776 = (__int128 *)(*(_QWORD *)(result + 7648) + 8 * *v765);
        v777 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v770[1] + *(_DWORD *)(a2 + 16) * v723[1]));
        v778 = v776[2];
        v779 = *v776;
        v777[1] = v776[1];
        v777[2] = v778;
        *v777 = v779;
        v769 = v772;
      }
      v770 += 2;
    }
    v723 += 2;
  }
  while (v723 != v724);
  v641 = a3[9];
  v642 = a3[10];
  v760 = *(_DWORD **)(a4 + 144);
  v761 = *(_DWORD **)(a4 + 152);
  if (v641 == v642 || v760 == v761)
    goto LABEL_831;
  do
  {
LABEL_848:
    v794 = *(_QWORD *)(result + 9160);
    v795 = (*(_DWORD *)(result + 9184) * *v760);
    v796 = (uint64_t *)(v794 + 8 * v795);
    v797 = *(_DWORD *)(result + 9080);
    v798 = v795 + v797;
    v799 = (uint64_t *)(v794 + 8 * v798);
    if (v797)
    {
      if (*v796 == -1)
      {
        v800 = 8 * v798 - 8 * v795 - 8;
        v801 = 1;
        v802 = v796;
        while (1)
        {
          v797 = v801;
          if (!v800)
            break;
          v796 = v802 + 1;
          v803 = v802[1];
          ++v801;
          v800 -= 8;
          ++v802;
          if (v803 != -1)
            goto LABEL_856;
        }
        v796 = v799;
      }
      else
      {
        v797 = 0;
      }
    }
LABEL_856:
    v804 = a3[9];
    v805 = a3[10];
    while (v804 != v805 && v796 != v799)
    {
      v822 = *v804;
      if (*v804 > v797)
      {
        v823 = v796 + 1;
        while (v823 != v799)
        {
          ++v797;
          v824 = *v823++;
          if (v824 != -1 && v822 <= v797)
          {
            v796 = v823 - 1;
            goto LABEL_870;
          }
        }
        break;
      }
LABEL_870:
      if (v822 == v797)
      {
        v826 = (int8x16_t *)(*(_QWORD *)(result + 9088) + 8 * *v796);
        if (v826 == *(int8x16_t **)a2)
        {
          v810 = v826[7];
          v812 = v826[8];
          v816 = v826[5];
          v811 = v826[6];
          v808 = v826[3];
          v817 = v826[4];
          v806 = v826[1];
          v809 = v826[2];
          v813 = vextq_s8(v812, v812, 8uLL).u64[0];
          v814 = vextq_s8(v810, v810, 8uLL).u64[0];
          v815 = vextq_s8(v811, v811, 8uLL).u64[0];
          v807 = *v826;
        }
        else
        {
          v807 = *v826;
          v806 = v826[1];
          v809 = v826[2];
          v808 = v826[3];
          v811 = v826[6];
          v810 = v826[7];
          v812 = v826[8];
          v813 = vextq_s8(v812, v812, 8uLL).u64[0];
          v814 = vextq_s8(v810, v810, 8uLL).u64[0];
          v815 = vextq_s8(v811, v811, 8uLL).u64[0];
          v817 = v826[4];
          v816 = v826[5];
        }
        v818 = *(unsigned int *)(a2 + 16);
        v819 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v804[1] + (_DWORD)v818 * v760[1]));
        v809.i64[1] = vextq_s8(v809, v809, 8uLL).u64[0];
        v806.i64[1] = vextq_s8(v806, v806, 8uLL).u64[0];
        v807.i64[1] = vextq_s8(v807, v807, 8uLL).u64[0];
        v816.i64[1] = vextq_s8(v816, v816, 8uLL).u64[0];
        v817.i64[1] = vextq_s8(v817, v817, 8uLL).u64[0];
        v808.i64[1] = vextq_s8(v808, v808, 8uLL).u64[0];
        v812.i64[1] = v813;
        v810.i64[1] = v814;
        v811.i64[1] = v815;
        *v819 = v807;
        v819[1] = v806;
        v819[2] = v809;
        v820 = (int8x16_t *)((char *)v819 + 8 * v818);
        *v820 = v808;
        v820[1] = v817;
        v820[2] = v816;
        v821 = &v819[v818];
        *v821 = v811;
        v821[1] = v810;
        v821[2] = v812;
        v797 = v822;
      }
      v804 += 2;
    }
    v760 += 2;
  }
  while (v760 != v761);
  v641 = a3[9];
  v642 = a3[10];
  v785 = *(_DWORD **)(a4 + 168);
  v786 = *(_DWORD **)(a4 + 176);
  if (v641 == v642 || v785 == v786)
    goto LABEL_836;
  do
  {
LABEL_879:
    v828 = *(_QWORD *)(result + 10600);
    v829 = (*(_DWORD *)(result + 10624) * *v785);
    v830 = (uint64_t *)(v828 + 8 * v829);
    v831 = *(_DWORD *)(result + 10520);
    v832 = v829 + v831;
    v833 = (uint64_t *)(v828 + 8 * v832);
    if (v831)
    {
      if (*v830 == -1)
      {
        v834 = 8 * v832 - 8 * v829 - 8;
        v835 = 1;
        v836 = v830;
        while (1)
        {
          v831 = v835;
          if (!v834)
            break;
          v830 = v836 + 1;
          v837 = v836[1];
          ++v835;
          v834 -= 8;
          ++v836;
          if (v837 != -1)
            goto LABEL_887;
        }
        v830 = v833;
      }
      else
      {
        v831 = 0;
      }
    }
LABEL_887:
    v838 = a3[9];
    v839 = a3[10];
    while (v838 != v839 && v830 != v833)
    {
      v857 = *v838;
      if (*v838 > v831)
      {
        v858 = v830 + 1;
        while (v858 != v833)
        {
          ++v831;
          v859 = *v858++;
          if (v859 != -1 && v857 <= v831)
          {
            v830 = v858 - 1;
            goto LABEL_901;
          }
        }
        break;
      }
LABEL_901:
      if (v857 == v831)
      {
        v861 = (int8x16_t *)(*(_QWORD *)(result + 10528) + 8 * *v830);
        if (v861 == *(int8x16_t **)a2)
        {
          v849 = v861[10];
          v848 = v861[11];
          v847 = v861[8];
          v846 = v861[9];
          v845 = v861[6];
          v844 = v861[7];
          v843 = v861[4];
          v842 = v861[5];
          v841 = v861[2];
          v840 = v861[3];
        }
        else
        {
          v841 = v861[2];
          v840 = v861[3];
          v843 = v861[4];
          v842 = v861[5];
          v845 = v861[6];
          v844 = v861[7];
          v847 = v861[8];
          v846 = v861[9];
          v849 = v861[10];
          v848 = v861[11];
        }
        v851 = *v861;
        v850 = v861[1];
        v852 = *(unsigned int *)(a2 + 16);
        v853 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v838[1] + (_DWORD)v852 * v785[1]));
        v841.i64[1] = vextq_s8(v841, v841, 8uLL).u64[0];
        v850.i64[1] = vextq_s8(v850, v850, 8uLL).u64[0];
        v851.i64[1] = vextq_s8(v851, v851, 8uLL).u64[0];
        v842.i64[1] = vextq_s8(v842, v842, 8uLL).u64[0];
        v843.i64[1] = vextq_s8(v843, v843, 8uLL).u64[0];
        v840.i64[1] = vextq_s8(v840, v840, 8uLL).u64[0];
        v847.i64[1] = vextq_s8(v847, v847, 8uLL).u64[0];
        v844.i64[1] = vextq_s8(v844, v844, 8uLL).u64[0];
        v845.i64[1] = vextq_s8(v845, v845, 8uLL).u64[0];
        v848.i64[1] = vextq_s8(v848, v848, 8uLL).u64[0];
        v849.i64[1] = vextq_s8(v849, v849, 8uLL).u64[0];
        v846.i64[1] = vextq_s8(v846, v846, 8uLL).u64[0];
        *v853 = v851;
        v853[1] = v850;
        v853[2] = v841;
        v854 = (int8x16_t *)((char *)v853 + 8 * v852);
        *v854 = v840;
        v854[1] = v843;
        v854[2] = v842;
        v855 = &v853[v852];
        *v855 = v845;
        v855[1] = v844;
        v855[2] = v847;
        v856 = (int8x16_t *)((char *)v853 + 24 * v852);
        *v856 = v846;
        v856[1] = v849;
        v856[2] = v848;
        v831 = v857;
      }
      v838 += 2;
    }
    v785 += 2;
  }
  while (v785 != v786);
  v641 = a3[9];
  v642 = a3[10];
  v788 = *(_DWORD **)(a4 + 192);
  v789 = *(_DWORD **)(a4 + 200);
  if (v641 == v642 || v788 == v789)
    goto LABEL_841;
  do
  {
LABEL_910:
    v863 = *(_QWORD *)(result + 12040);
    v864 = (*(_DWORD *)(result + 12064) * *v788);
    v865 = (uint64_t *)(v863 + 8 * v864);
    v866 = *(_DWORD *)(result + 11960);
    v867 = v864 + v866;
    v868 = (uint64_t *)(v863 + 8 * v867);
    if (v866)
    {
      if (*v865 == -1)
      {
        v869 = 8 * v867 - 8 * v864 - 8;
        v870 = 1;
        v871 = v865;
        while (1)
        {
          v866 = v870;
          if (!v869)
            break;
          v865 = v871 + 1;
          v872 = v871[1];
          ++v870;
          v869 -= 8;
          ++v871;
          if (v872 != -1)
            goto LABEL_918;
        }
        v865 = v868;
      }
      else
      {
        v866 = 0;
      }
    }
LABEL_918:
    v873 = a3[9];
    v874 = a3[10];
    while (v873 != v874 && v865 != v868)
    {
      v892 = *v873;
      if (*v873 > v866)
      {
        v893 = v865 + 1;
        while (v893 != v868)
        {
          ++v866;
          v894 = *v893++;
          if (v894 != -1 && v892 <= v866)
          {
            v865 = v893 - 1;
            goto LABEL_932;
          }
        }
        break;
      }
LABEL_932:
      if (v892 == v866)
      {
        v896 = (int8x16_t *)(*(_QWORD *)(result + 11968) + 8 * *v865);
        if (v896 == *(int8x16_t **)a2)
        {
          v884 = v896[10];
          v883 = v896[11];
          v882 = v896[8];
          v881 = v896[9];
          v880 = v896[6];
          v879 = v896[7];
          v878 = v896[4];
          v877 = v896[5];
          v876 = v896[2];
          v875 = v896[3];
        }
        else
        {
          v876 = v896[2];
          v875 = v896[3];
          v878 = v896[4];
          v877 = v896[5];
          v880 = v896[6];
          v879 = v896[7];
          v882 = v896[8];
          v881 = v896[9];
          v884 = v896[10];
          v883 = v896[11];
        }
        v886 = *v896;
        v885 = v896[1];
        v887 = *(unsigned int *)(a2 + 16);
        v888 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v873[1] + (_DWORD)v887 * v788[1]));
        v876.i64[1] = vextq_s8(v876, v876, 8uLL).u64[0];
        v885.i64[1] = vextq_s8(v885, v885, 8uLL).u64[0];
        v886.i64[1] = vextq_s8(v886, v886, 8uLL).u64[0];
        v877.i64[1] = vextq_s8(v877, v877, 8uLL).u64[0];
        v878.i64[1] = vextq_s8(v878, v878, 8uLL).u64[0];
        v875.i64[1] = vextq_s8(v875, v875, 8uLL).u64[0];
        v882.i64[1] = vextq_s8(v882, v882, 8uLL).u64[0];
        v879.i64[1] = vextq_s8(v879, v879, 8uLL).u64[0];
        v880.i64[1] = vextq_s8(v880, v880, 8uLL).u64[0];
        v883.i64[1] = vextq_s8(v883, v883, 8uLL).u64[0];
        v884.i64[1] = vextq_s8(v884, v884, 8uLL).u64[0];
        v881.i64[1] = vextq_s8(v881, v881, 8uLL).u64[0];
        *v888 = v886;
        v888[1] = v885;
        v888[2] = v876;
        v889 = (int8x16_t *)((char *)v888 + 8 * v887);
        *v889 = v875;
        v889[1] = v878;
        v889[2] = v877;
        v890 = &v888[v887];
        *v890 = v880;
        v890[1] = v879;
        v890[2] = v882;
        v891 = (int8x16_t *)((char *)v888 + 24 * v887);
        *v891 = v881;
        v891[1] = v884;
        v891[2] = v883;
        v866 = v892;
      }
      v873 += 2;
    }
    v788 += 2;
  }
  while (v788 != v789);
  v791 = *(_DWORD **)(a4 + 216);
  v792 = *(_DWORD **)(a4 + 224);
  if (a3[9] != a3[10] && v791 != v792)
  {
    do
    {
LABEL_957:
      v909 = *(_QWORD *)(result + 13480);
      v910 = (*(_DWORD *)(result + 13504) * *v791);
      v911 = (uint64_t *)(v909 + 8 * v910);
      v912 = *(_DWORD *)(result + 13400);
      v913 = v910 + v912;
      v914 = (uint64_t *)(v909 + 8 * v913);
      if (v912)
      {
        if (*v911 == -1)
        {
          v915 = 8 * v913 - 8 * v910 - 8;
          v916 = 1;
          v917 = v911;
          while (1)
          {
            v912 = v916;
            if (!v915)
              break;
            v911 = v917 + 1;
            v918 = v917[1];
            ++v916;
            v915 -= 8;
            ++v917;
            if (v918 != -1)
              goto LABEL_965;
          }
          v911 = v914;
        }
        else
        {
          v912 = 0;
        }
      }
LABEL_965:
      v919 = a3[9];
      v920 = a3[10];
      while (v919 != v920 && v911 != v914)
      {
        v937 = *v919;
        if (*v919 > v912)
        {
          v938 = v911 + 1;
          while (v938 != v914)
          {
            ++v912;
            v939 = *v938++;
            if (v939 != -1 && v937 <= v912)
            {
              v911 = v938 - 1;
              goto LABEL_979;
            }
          }
          break;
        }
LABEL_979:
        if (v937 == v912)
        {
          v941 = (int8x16_t *)(*(_QWORD *)(result + 13408) + 8 * *v911);
          if (v941 == *(int8x16_t **)a2)
          {
            v925 = v941[7];
            v927 = v941[8];
            v931 = v941[5];
            v926 = v941[6];
            v923 = v941[3];
            v932 = v941[4];
            v921 = v941[1];
            v924 = v941[2];
            v928 = vextq_s8(v927, v927, 8uLL).u64[0];
            v929 = vextq_s8(v925, v925, 8uLL).u64[0];
            v930 = vextq_s8(v926, v926, 8uLL).u64[0];
            v922 = *v941;
          }
          else
          {
            v922 = *v941;
            v921 = v941[1];
            v924 = v941[2];
            v923 = v941[3];
            v926 = v941[6];
            v925 = v941[7];
            v927 = v941[8];
            v928 = vextq_s8(v927, v927, 8uLL).u64[0];
            v929 = vextq_s8(v925, v925, 8uLL).u64[0];
            v930 = vextq_s8(v926, v926, 8uLL).u64[0];
            v932 = v941[4];
            v931 = v941[5];
          }
          v933 = *(unsigned int *)(a2 + 16);
          v934 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v919[1] + (_DWORD)v933 * v791[1]));
          v924.i64[1] = vextq_s8(v924, v924, 8uLL).u64[0];
          v921.i64[1] = vextq_s8(v921, v921, 8uLL).u64[0];
          v922.i64[1] = vextq_s8(v922, v922, 8uLL).u64[0];
          v931.i64[1] = vextq_s8(v931, v931, 8uLL).u64[0];
          v932.i64[1] = vextq_s8(v932, v932, 8uLL).u64[0];
          v923.i64[1] = vextq_s8(v923, v923, 8uLL).u64[0];
          v927.i64[1] = v928;
          v925.i64[1] = v929;
          v926.i64[1] = v930;
          *v934 = v922;
          v934[1] = v921;
          v934[2] = v924;
          v935 = (int8x16_t *)((char *)v934 + 8 * v933);
          *v935 = v923;
          v935[1] = v932;
          v935[2] = v931;
          v936 = &v934[v933];
          *v936 = v926;
          v936[1] = v925;
          v936[2] = v927;
          v912 = v937;
        }
        v919 += 2;
      }
      v791 += 2;
    }
    while (v791 != v792);
  }
LABEL_940:
  v898 = *(_DWORD **)(a4 + 48);
  v899 = *(_DWORD **)(a4 + 56);
  v900 = a3[6];
  v901 = a3[7];
  if (v900 == v901 || v898 == v899)
  {
    v903 = *(_DWORD **)(a4 + 72);
    v904 = *(_DWORD **)(a4 + 80);
    if (v900 != v901 && v903 != v904)
      goto LABEL_1014;
LABEL_950:
    v906 = *(_DWORD **)(a4 + 96);
    v907 = *(_DWORD **)(a4 + 104);
    if (v900 != v901 && v906 != v907)
      goto LABEL_1051;
LABEL_1044:
    v1036 = *(_DWORD **)(a4 + 120);
    v1037 = *(_DWORD **)(a4 + 128);
    if (v900 != v901 && v1036 != v1037)
      goto LABEL_1088;
LABEL_1081:
    v1073 = *(_DWORD **)(a4 + 144);
    v1074 = *(_DWORD **)(a4 + 152);
    if (v900 != v901 && v1073 != v1074)
      goto LABEL_1132;
LABEL_1115:
    v1098 = *(_DWORD **)(a4 + 168);
    v1099 = *(_DWORD **)(a4 + 176);
    if (v900 != v901 && v1098 != v1099)
      goto LABEL_1163;
LABEL_1120:
    v1101 = *(_DWORD **)(a4 + 192);
    v1102 = *(_DWORD **)(a4 + 200);
    if (v900 != v901 && v1101 != v1102)
      goto LABEL_1194;
LABEL_1125:
    v1104 = *(_DWORD **)(a4 + 216);
    v1105 = *(_DWORD **)(a4 + 224);
    if (v900 == v901 || v1104 == v1105)
      goto LABEL_1224;
    goto LABEL_1246;
  }
  do
  {
    v942 = *(_QWORD *)(result + 3256);
    v943 = (*(_DWORD *)(result + 3280) * *v898);
    v944 = (uint64_t *)(v942 + 8 * v943);
    v945 = *(_DWORD *)(result + 3176);
    v946 = v943 + v945;
    v947 = (uint64_t *)(v942 + 8 * v946);
    if (v945)
    {
      if (*v944 == -1)
      {
        v948 = 8 * v946 - 8 * v943 - 8;
        v949 = 1;
        v950 = v944;
        while (1)
        {
          v945 = v949;
          if (!v948)
            break;
          v944 = v950 + 1;
          v951 = v950[1];
          ++v949;
          v948 -= 8;
          ++v950;
          if (v951 != -1)
            goto LABEL_991;
        }
        v944 = v947;
      }
      else
      {
        v945 = 0;
      }
    }
LABEL_991:
    v952 = a3[6];
    v953 = a3[7];
    while (v952 != v953 && v944 != v947)
    {
      v983 = *v952;
      if (*v952 > v945)
      {
        v984 = v944 + 1;
        while (v984 != v947)
        {
          ++v945;
          v985 = *v984++;
          if (v985 != -1 && v983 <= v945)
          {
            v944 = v984 - 1;
            goto LABEL_1005;
          }
        }
        break;
      }
LABEL_1005:
      if (v983 == v945)
      {
        v987 = (int8x16_t *)(*(_QWORD *)(result + 3184) + 8 * *v944);
        if (v987 == *(int8x16_t **)a2)
        {
          v963 = v987[16];
          v962 = v987[17];
          v961 = v987[14];
          v960 = v987[15];
          v959 = v987[12];
          v958 = v987[13];
          v957 = v987[10];
          v956 = v987[11];
          v969 = v987[8];
          v968 = v987[9];
          v2303 = vextq_s8(v963, v963, 8uLL).u64[0];
          v2315 = vextq_s8(v962, v962, 8uLL).u64[0];
          v964 = vextq_s8(v961, v961, 8uLL).u64[0];
          v965 = vextq_s8(v958, v958, 8uLL).u64[0];
          v966 = vextq_s8(v959, v959, 8uLL).u64[0];
          v2279 = vextq_s8(v956, v956, 8uLL).u64[0];
          v2291 = vextq_s8(v960, v960, 8uLL).u64[0];
          v967 = vextq_s8(v957, v957, 8uLL).u64[0];
          v955 = v987[6];
          v954 = v987[7];
        }
        else
        {
          v955 = v987[6];
          v954 = v987[7];
          v957 = v987[10];
          v956 = v987[11];
          v959 = v987[12];
          v958 = v987[13];
          v961 = v987[14];
          v960 = v987[15];
          v963 = v987[16];
          v962 = v987[17];
          v2303 = vextq_s8(v963, v963, 8uLL).u64[0];
          v2315 = vextq_s8(v962, v962, 8uLL).u64[0];
          v964 = vextq_s8(v961, v961, 8uLL).u64[0];
          v965 = vextq_s8(v958, v958, 8uLL).u64[0];
          v966 = vextq_s8(v959, v959, 8uLL).u64[0];
          v2279 = vextq_s8(v956, v956, 8uLL).u64[0];
          v2291 = vextq_s8(v960, v960, 8uLL).u64[0];
          v967 = vextq_s8(v957, v957, 8uLL).u64[0];
          v969 = v987[8];
          v968 = v987[9];
        }
        v971 = v987[4];
        v970 = v987[5];
        v973 = v987[2];
        v972 = v987[3];
        v975 = *v987;
        v974 = v987[1];
        v961.i64[1] = v964;
        v958.i64[1] = v965;
        v959.i64[1] = v966;
        v973.i64[1] = vextq_s8(v973, v973, 8uLL).u64[0];
        v976 = *(unsigned int *)(a2 + 16);
        v977 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v952[1] + (_DWORD)v976 * v898[1]));
        v974.i64[1] = vextq_s8(v974, v974, 8uLL).u64[0];
        v975.i64[1] = vextq_s8(v975, v975, 8uLL).u64[0];
        v970.i64[1] = vextq_s8(v970, v970, 8uLL).u64[0];
        v971.i64[1] = vextq_s8(v971, v971, 8uLL).u64[0];
        v972.i64[1] = vextq_s8(v972, v972, 8uLL).u64[0];
        v969.i64[1] = vextq_s8(v969, v969, 8uLL).u64[0];
        v954.i64[1] = vextq_s8(v954, v954, 8uLL).u64[0];
        v955.i64[1] = vextq_s8(v955, v955, 8uLL).u64[0];
        v956.i64[1] = v2279;
        v957.i64[1] = v967;
        v968.i64[1] = vextq_s8(v968, v968, 8uLL).u64[0];
        v962.i64[1] = v2315;
        v963.i64[1] = v2303;
        v960.i64[1] = v2291;
        *v977 = v975;
        v977[1] = v974;
        v977[2] = v973;
        v978 = (int8x16_t *)((char *)v977 + 8 * v976);
        *v978 = v972;
        v978[1] = v971;
        v978[2] = v970;
        v979 = &v977[v976];
        *v979 = v955;
        v979[1] = v954;
        v979[2] = v969;
        v980 = (int8x16_t *)((char *)v977 + 24 * v976);
        *v980 = v968;
        v980[1] = v957;
        v980[2] = v956;
        v981 = &v977[2 * v976];
        *v981 = v959;
        v981[1] = v958;
        v981[2] = v961;
        v982 = (int8x16_t *)((char *)v977 + 40 * v976);
        *v982 = v960;
        v982[1] = v963;
        v945 = v983;
        v982[2] = v962;
      }
      v952 += 2;
    }
    v898 += 2;
  }
  while (v898 != v899);
  v900 = a3[6];
  v901 = a3[7];
  v903 = *(_DWORD **)(a4 + 72);
  v904 = *(_DWORD **)(a4 + 80);
  if (v900 == v901 || v903 == v904)
    goto LABEL_950;
  do
  {
LABEL_1014:
    v989 = *(_QWORD *)(result + 4696);
    v990 = (*(_DWORD *)(result + 4720) * *v903);
    v991 = (uint64_t *)(v989 + 8 * v990);
    v992 = *(_DWORD *)(result + 4616);
    v993 = v990 + v992;
    v994 = (uint64_t *)(v989 + 8 * v993);
    if (v992)
    {
      if (*v991 == -1)
      {
        v995 = 8 * v993 - 8 * v990 - 8;
        v996 = 1;
        v997 = v991;
        while (1)
        {
          v992 = v996;
          if (!v995)
            break;
          v991 = v997 + 1;
          v998 = v997[1];
          ++v996;
          v995 -= 8;
          ++v997;
          if (v998 != -1)
            goto LABEL_1022;
        }
        v991 = v994;
      }
      else
      {
        v992 = 0;
      }
    }
LABEL_1022:
    v999 = a3[6];
    v1000 = a3[7];
    while (v999 != v1000 && v991 != v994)
    {
      v1030 = *v999;
      if (*v999 > v992)
      {
        v1031 = v991 + 1;
        while (v1031 != v994)
        {
          ++v992;
          v1032 = *v1031++;
          if (v1032 != -1 && v1030 <= v992)
          {
            v991 = v1031 - 1;
            goto LABEL_1036;
          }
        }
        break;
      }
LABEL_1036:
      if (v1030 == v992)
      {
        v1034 = (int8x16_t *)(*(_QWORD *)(result + 4624) + 8 * *v991);
        if (v1034 == *(int8x16_t **)a2)
        {
          v1010 = v1034[16];
          v1009 = v1034[17];
          v1008 = v1034[14];
          v1007 = v1034[15];
          v1006 = v1034[12];
          v1005 = v1034[13];
          v1004 = v1034[10];
          v1003 = v1034[11];
          v1016 = v1034[8];
          v1015 = v1034[9];
          v2304 = vextq_s8(v1010, v1010, 8uLL).u64[0];
          v2316 = vextq_s8(v1009, v1009, 8uLL).u64[0];
          v1011 = vextq_s8(v1008, v1008, 8uLL).u64[0];
          v1012 = vextq_s8(v1005, v1005, 8uLL).u64[0];
          v1013 = vextq_s8(v1006, v1006, 8uLL).u64[0];
          v2280 = vextq_s8(v1003, v1003, 8uLL).u64[0];
          v2292 = vextq_s8(v1007, v1007, 8uLL).u64[0];
          v1014 = vextq_s8(v1004, v1004, 8uLL).u64[0];
          v1002 = v1034[6];
          v1001 = v1034[7];
        }
        else
        {
          v1002 = v1034[6];
          v1001 = v1034[7];
          v1004 = v1034[10];
          v1003 = v1034[11];
          v1006 = v1034[12];
          v1005 = v1034[13];
          v1008 = v1034[14];
          v1007 = v1034[15];
          v1010 = v1034[16];
          v1009 = v1034[17];
          v2304 = vextq_s8(v1010, v1010, 8uLL).u64[0];
          v2316 = vextq_s8(v1009, v1009, 8uLL).u64[0];
          v1011 = vextq_s8(v1008, v1008, 8uLL).u64[0];
          v1012 = vextq_s8(v1005, v1005, 8uLL).u64[0];
          v1013 = vextq_s8(v1006, v1006, 8uLL).u64[0];
          v2280 = vextq_s8(v1003, v1003, 8uLL).u64[0];
          v2292 = vextq_s8(v1007, v1007, 8uLL).u64[0];
          v1014 = vextq_s8(v1004, v1004, 8uLL).u64[0];
          v1016 = v1034[8];
          v1015 = v1034[9];
        }
        v1018 = v1034[4];
        v1017 = v1034[5];
        v1020 = v1034[2];
        v1019 = v1034[3];
        v1022 = *v1034;
        v1021 = v1034[1];
        v1008.i64[1] = v1011;
        v1005.i64[1] = v1012;
        v1006.i64[1] = v1013;
        v1020.i64[1] = vextq_s8(v1020, v1020, 8uLL).u64[0];
        v1023 = *(unsigned int *)(a2 + 16);
        v1024 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v999[1] + (_DWORD)v1023 * v903[1]));
        v1021.i64[1] = vextq_s8(v1021, v1021, 8uLL).u64[0];
        v1022.i64[1] = vextq_s8(v1022, v1022, 8uLL).u64[0];
        v1017.i64[1] = vextq_s8(v1017, v1017, 8uLL).u64[0];
        v1018.i64[1] = vextq_s8(v1018, v1018, 8uLL).u64[0];
        v1019.i64[1] = vextq_s8(v1019, v1019, 8uLL).u64[0];
        v1016.i64[1] = vextq_s8(v1016, v1016, 8uLL).u64[0];
        v1001.i64[1] = vextq_s8(v1001, v1001, 8uLL).u64[0];
        v1002.i64[1] = vextq_s8(v1002, v1002, 8uLL).u64[0];
        v1003.i64[1] = v2280;
        v1004.i64[1] = v1014;
        v1015.i64[1] = vextq_s8(v1015, v1015, 8uLL).u64[0];
        v1009.i64[1] = v2316;
        v1010.i64[1] = v2304;
        v1007.i64[1] = v2292;
        *v1024 = v1022;
        v1024[1] = v1021;
        v1024[2] = v1020;
        v1025 = (int8x16_t *)((char *)v1024 + 8 * v1023);
        *v1025 = v1019;
        v1025[1] = v1018;
        v1025[2] = v1017;
        v1026 = &v1024[v1023];
        *v1026 = v1002;
        v1026[1] = v1001;
        v1026[2] = v1016;
        v1027 = (int8x16_t *)((char *)v1024 + 24 * v1023);
        *v1027 = v1015;
        v1027[1] = v1004;
        v1027[2] = v1003;
        v1028 = &v1024[2 * v1023];
        *v1028 = v1006;
        v1028[1] = v1005;
        v1028[2] = v1008;
        v1029 = (int8x16_t *)((char *)v1024 + 40 * v1023);
        *v1029 = v1007;
        v1029[1] = v1010;
        v992 = v1030;
        v1029[2] = v1009;
      }
      v999 += 2;
    }
    v903 += 2;
  }
  while (v903 != v904);
  v900 = a3[6];
  v901 = a3[7];
  v906 = *(_DWORD **)(a4 + 96);
  v907 = *(_DWORD **)(a4 + 104);
  if (v900 == v901 || v906 == v907)
    goto LABEL_1044;
  do
  {
LABEL_1051:
    v1039 = *(_QWORD *)(result + 6136);
    v1040 = (*(_DWORD *)(result + 6160) * *v906);
    v1041 = (uint64_t *)(v1039 + 8 * v1040);
    v1042 = *(_DWORD *)(result + 6056);
    v1043 = v1040 + v1042;
    v1044 = (uint64_t *)(v1039 + 8 * v1043);
    if (v1042)
    {
      if (*v1041 == -1)
      {
        v1045 = 8 * v1043 - 8 * v1040 - 8;
        v1046 = 1;
        v1047 = v1041;
        while (1)
        {
          v1042 = v1046;
          if (!v1045)
            break;
          v1041 = v1047 + 1;
          v1048 = v1047[1];
          ++v1046;
          v1045 -= 8;
          ++v1047;
          if (v1048 != -1)
            goto LABEL_1059;
        }
        v1041 = v1044;
      }
      else
      {
        v1042 = 0;
      }
    }
LABEL_1059:
    v1049 = a3[6];
    v1050 = a3[7];
    while (v1049 != v1050 && v1041 != v1044)
    {
      v1067 = *v1049;
      if (*v1049 > v1042)
      {
        v1068 = v1041 + 1;
        while (v1068 != v1044)
        {
          ++v1042;
          v1069 = *v1068++;
          if (v1069 != -1 && v1067 <= v1042)
          {
            v1041 = v1068 - 1;
            goto LABEL_1073;
          }
        }
        break;
      }
LABEL_1073:
      if (v1067 == v1042)
      {
        v1071 = (int8x16_t *)(*(_QWORD *)(result + 6064) + 8 * *v1041);
        if (v1071 == *(int8x16_t **)a2)
        {
          v1055 = v1071[7];
          v1057 = v1071[8];
          v1061 = v1071[5];
          v1056 = v1071[6];
          v1053 = v1071[3];
          v1062 = v1071[4];
          v1051 = v1071[1];
          v1054 = v1071[2];
          v1058 = vextq_s8(v1057, v1057, 8uLL).u64[0];
          v1059 = vextq_s8(v1055, v1055, 8uLL).u64[0];
          v1060 = vextq_s8(v1056, v1056, 8uLL).u64[0];
          v1052 = *v1071;
        }
        else
        {
          v1052 = *v1071;
          v1051 = v1071[1];
          v1054 = v1071[2];
          v1053 = v1071[3];
          v1056 = v1071[6];
          v1055 = v1071[7];
          v1057 = v1071[8];
          v1058 = vextq_s8(v1057, v1057, 8uLL).u64[0];
          v1059 = vextq_s8(v1055, v1055, 8uLL).u64[0];
          v1060 = vextq_s8(v1056, v1056, 8uLL).u64[0];
          v1062 = v1071[4];
          v1061 = v1071[5];
        }
        v1063 = *(unsigned int *)(a2 + 16);
        v1064 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1049[1] + (_DWORD)v1063 * v906[1]));
        v1054.i64[1] = vextq_s8(v1054, v1054, 8uLL).u64[0];
        v1051.i64[1] = vextq_s8(v1051, v1051, 8uLL).u64[0];
        v1052.i64[1] = vextq_s8(v1052, v1052, 8uLL).u64[0];
        v1061.i64[1] = vextq_s8(v1061, v1061, 8uLL).u64[0];
        v1062.i64[1] = vextq_s8(v1062, v1062, 8uLL).u64[0];
        v1053.i64[1] = vextq_s8(v1053, v1053, 8uLL).u64[0];
        v1057.i64[1] = v1058;
        v1055.i64[1] = v1059;
        v1056.i64[1] = v1060;
        *v1064 = v1052;
        v1064[1] = v1051;
        v1064[2] = v1054;
        v1065 = (int8x16_t *)((char *)v1064 + 8 * v1063);
        *v1065 = v1053;
        v1065[1] = v1062;
        v1065[2] = v1061;
        v1066 = &v1064[v1063];
        *v1066 = v1056;
        v1066[1] = v1055;
        v1066[2] = v1057;
        v1042 = v1067;
      }
      v1049 += 2;
    }
    v906 += 2;
  }
  while (v906 != v907);
  v900 = a3[6];
  v901 = a3[7];
  v1036 = *(_DWORD **)(a4 + 120);
  v1037 = *(_DWORD **)(a4 + 128);
  if (v900 == v901 || v1036 == v1037)
    goto LABEL_1081;
  do
  {
LABEL_1088:
    v1076 = *(_QWORD *)(result + 7576);
    v1077 = (*(_DWORD *)(result + 7600) * *v1036);
    v1078 = (uint64_t *)(v1076 + 8 * v1077);
    v1079 = *(_DWORD *)(result + 7496);
    v1080 = (v1077 + v1079);
    v1081 = (uint64_t *)(v1076 + 8 * v1080);
    if (v1079 && *v1078 == -1)
    {
      v1093 = 8 * v1080 - 8 * v1077 - 8;
      v1094 = 1;
      v1095 = v1078;
      while (1)
      {
        v1082 = v1094;
        if (!v1093)
          break;
        v1078 = v1095 + 1;
        v1096 = v1095[1];
        ++v1094;
        v1093 -= 8;
        ++v1095;
        if (v1096 != -1)
          goto LABEL_1091;
      }
      v1078 = v1081;
    }
    else
    {
      v1082 = 0;
    }
LABEL_1091:
    v1083 = a3[6];
    v1084 = a3[7];
    while (v1083 != v1084 && v1078 != v1081)
    {
      v1085 = *v1083;
      if (*v1083 > v1082)
      {
        v1086 = v1078 + 1;
        while (v1086 != v1081)
        {
          ++v1082;
          v1087 = *v1086++;
          if (v1087 != -1 && v1085 <= v1082)
          {
            v1078 = v1086 - 1;
            goto LABEL_1103;
          }
        }
        break;
      }
LABEL_1103:
      if (v1085 == v1082)
      {
        v1089 = (__int128 *)(*(_QWORD *)(result + 7504) + 8 * *v1078);
        v1090 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1083[1] + *(_DWORD *)(a2 + 16) * v1036[1]));
        v1091 = v1089[2];
        v1092 = *v1089;
        v1090[1] = v1089[1];
        v1090[2] = v1091;
        *v1090 = v1092;
        v1082 = v1085;
      }
      v1083 += 2;
    }
    v1036 += 2;
  }
  while (v1036 != v1037);
  v900 = a3[6];
  v901 = a3[7];
  v1073 = *(_DWORD **)(a4 + 144);
  v1074 = *(_DWORD **)(a4 + 152);
  if (v900 == v901 || v1073 == v1074)
    goto LABEL_1115;
  do
  {
LABEL_1132:
    v1107 = *(_QWORD *)(result + 9016);
    v1108 = (*(_DWORD *)(result + 9040) * *v1073);
    v1109 = (uint64_t *)(v1107 + 8 * v1108);
    v1110 = *(_DWORD *)(result + 8936);
    v1111 = v1108 + v1110;
    v1112 = (uint64_t *)(v1107 + 8 * v1111);
    if (v1110)
    {
      if (*v1109 == -1)
      {
        v1113 = 8 * v1111 - 8 * v1108 - 8;
        v1114 = 1;
        v1115 = v1109;
        while (1)
        {
          v1110 = v1114;
          if (!v1113)
            break;
          v1109 = v1115 + 1;
          v1116 = v1115[1];
          ++v1114;
          v1113 -= 8;
          ++v1115;
          if (v1116 != -1)
            goto LABEL_1140;
        }
        v1109 = v1112;
      }
      else
      {
        v1110 = 0;
      }
    }
LABEL_1140:
    v1117 = a3[6];
    v1118 = a3[7];
    while (v1117 != v1118 && v1109 != v1112)
    {
      v1135 = *v1117;
      if (*v1117 > v1110)
      {
        v1136 = v1109 + 1;
        while (v1136 != v1112)
        {
          ++v1110;
          v1137 = *v1136++;
          if (v1137 != -1 && v1135 <= v1110)
          {
            v1109 = v1136 - 1;
            goto LABEL_1154;
          }
        }
        break;
      }
LABEL_1154:
      if (v1135 == v1110)
      {
        v1139 = (int8x16_t *)(*(_QWORD *)(result + 8944) + 8 * *v1109);
        if (v1139 == *(int8x16_t **)a2)
        {
          v1123 = v1139[7];
          v1125 = v1139[8];
          v1129 = v1139[5];
          v1124 = v1139[6];
          v1121 = v1139[3];
          v1130 = v1139[4];
          v1119 = v1139[1];
          v1122 = v1139[2];
          v1126 = vextq_s8(v1125, v1125, 8uLL).u64[0];
          v1127 = vextq_s8(v1123, v1123, 8uLL).u64[0];
          v1128 = vextq_s8(v1124, v1124, 8uLL).u64[0];
          v1120 = *v1139;
        }
        else
        {
          v1120 = *v1139;
          v1119 = v1139[1];
          v1122 = v1139[2];
          v1121 = v1139[3];
          v1124 = v1139[6];
          v1123 = v1139[7];
          v1125 = v1139[8];
          v1126 = vextq_s8(v1125, v1125, 8uLL).u64[0];
          v1127 = vextq_s8(v1123, v1123, 8uLL).u64[0];
          v1128 = vextq_s8(v1124, v1124, 8uLL).u64[0];
          v1130 = v1139[4];
          v1129 = v1139[5];
        }
        v1131 = *(unsigned int *)(a2 + 16);
        v1132 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1117[1] + (_DWORD)v1131 * v1073[1]));
        v1122.i64[1] = vextq_s8(v1122, v1122, 8uLL).u64[0];
        v1119.i64[1] = vextq_s8(v1119, v1119, 8uLL).u64[0];
        v1120.i64[1] = vextq_s8(v1120, v1120, 8uLL).u64[0];
        v1129.i64[1] = vextq_s8(v1129, v1129, 8uLL).u64[0];
        v1130.i64[1] = vextq_s8(v1130, v1130, 8uLL).u64[0];
        v1121.i64[1] = vextq_s8(v1121, v1121, 8uLL).u64[0];
        v1125.i64[1] = v1126;
        v1123.i64[1] = v1127;
        v1124.i64[1] = v1128;
        *v1132 = v1120;
        v1132[1] = v1119;
        v1132[2] = v1122;
        v1133 = (int8x16_t *)((char *)v1132 + 8 * v1131);
        *v1133 = v1121;
        v1133[1] = v1130;
        v1133[2] = v1129;
        v1134 = &v1132[v1131];
        *v1134 = v1124;
        v1134[1] = v1123;
        v1134[2] = v1125;
        v1110 = v1135;
      }
      v1117 += 2;
    }
    v1073 += 2;
  }
  while (v1073 != v1074);
  v900 = a3[6];
  v901 = a3[7];
  v1098 = *(_DWORD **)(a4 + 168);
  v1099 = *(_DWORD **)(a4 + 176);
  if (v900 == v901 || v1098 == v1099)
    goto LABEL_1120;
  do
  {
LABEL_1163:
    v1141 = *(_QWORD *)(result + 10456);
    v1142 = (*(_DWORD *)(result + 10480) * *v1098);
    v1143 = (uint64_t *)(v1141 + 8 * v1142);
    v1144 = *(_DWORD *)(result + 10376);
    v1145 = v1142 + v1144;
    v1146 = (uint64_t *)(v1141 + 8 * v1145);
    if (v1144)
    {
      if (*v1143 == -1)
      {
        v1147 = 8 * v1145 - 8 * v1142 - 8;
        v1148 = 1;
        v1149 = v1143;
        while (1)
        {
          v1144 = v1148;
          if (!v1147)
            break;
          v1143 = v1149 + 1;
          v1150 = v1149[1];
          ++v1148;
          v1147 -= 8;
          ++v1149;
          if (v1150 != -1)
            goto LABEL_1171;
        }
        v1143 = v1146;
      }
      else
      {
        v1144 = 0;
      }
    }
LABEL_1171:
    v1151 = a3[6];
    v1152 = a3[7];
    while (v1151 != v1152 && v1143 != v1146)
    {
      v1170 = *v1151;
      if (*v1151 > v1144)
      {
        v1171 = v1143 + 1;
        while (v1171 != v1146)
        {
          ++v1144;
          v1172 = *v1171++;
          if (v1172 != -1 && v1170 <= v1144)
          {
            v1143 = v1171 - 1;
            goto LABEL_1185;
          }
        }
        break;
      }
LABEL_1185:
      if (v1170 == v1144)
      {
        v1174 = (int8x16_t *)(*(_QWORD *)(result + 10384) + 8 * *v1143);
        if (v1174 == *(int8x16_t **)a2)
        {
          v1162 = v1174[10];
          v1161 = v1174[11];
          v1160 = v1174[8];
          v1159 = v1174[9];
          v1158 = v1174[6];
          v1157 = v1174[7];
          v1156 = v1174[4];
          v1155 = v1174[5];
          v1154 = v1174[2];
          v1153 = v1174[3];
        }
        else
        {
          v1154 = v1174[2];
          v1153 = v1174[3];
          v1156 = v1174[4];
          v1155 = v1174[5];
          v1158 = v1174[6];
          v1157 = v1174[7];
          v1160 = v1174[8];
          v1159 = v1174[9];
          v1162 = v1174[10];
          v1161 = v1174[11];
        }
        v1164 = *v1174;
        v1163 = v1174[1];
        v1165 = *(unsigned int *)(a2 + 16);
        v1166 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1151[1] + (_DWORD)v1165 * v1098[1]));
        v1154.i64[1] = vextq_s8(v1154, v1154, 8uLL).u64[0];
        v1163.i64[1] = vextq_s8(v1163, v1163, 8uLL).u64[0];
        v1164.i64[1] = vextq_s8(v1164, v1164, 8uLL).u64[0];
        v1155.i64[1] = vextq_s8(v1155, v1155, 8uLL).u64[0];
        v1156.i64[1] = vextq_s8(v1156, v1156, 8uLL).u64[0];
        v1153.i64[1] = vextq_s8(v1153, v1153, 8uLL).u64[0];
        v1160.i64[1] = vextq_s8(v1160, v1160, 8uLL).u64[0];
        v1157.i64[1] = vextq_s8(v1157, v1157, 8uLL).u64[0];
        v1158.i64[1] = vextq_s8(v1158, v1158, 8uLL).u64[0];
        v1161.i64[1] = vextq_s8(v1161, v1161, 8uLL).u64[0];
        v1162.i64[1] = vextq_s8(v1162, v1162, 8uLL).u64[0];
        v1159.i64[1] = vextq_s8(v1159, v1159, 8uLL).u64[0];
        *v1166 = v1164;
        v1166[1] = v1163;
        v1166[2] = v1154;
        v1167 = (int8x16_t *)((char *)v1166 + 8 * v1165);
        *v1167 = v1153;
        v1167[1] = v1156;
        v1167[2] = v1155;
        v1168 = &v1166[v1165];
        *v1168 = v1158;
        v1168[1] = v1157;
        v1168[2] = v1160;
        v1169 = (int8x16_t *)((char *)v1166 + 24 * v1165);
        *v1169 = v1159;
        v1169[1] = v1162;
        v1169[2] = v1161;
        v1144 = v1170;
      }
      v1151 += 2;
    }
    v1098 += 2;
  }
  while (v1098 != v1099);
  v900 = a3[6];
  v901 = a3[7];
  v1101 = *(_DWORD **)(a4 + 192);
  v1102 = *(_DWORD **)(a4 + 200);
  if (v900 == v901 || v1101 == v1102)
    goto LABEL_1125;
  do
  {
LABEL_1194:
    v1176 = *(_QWORD *)(result + 11896);
    v1177 = (*(_DWORD *)(result + 11920) * *v1101);
    v1178 = (uint64_t *)(v1176 + 8 * v1177);
    v1179 = *(_DWORD *)(result + 11816);
    v1180 = v1177 + v1179;
    v1181 = (uint64_t *)(v1176 + 8 * v1180);
    if (v1179)
    {
      if (*v1178 == -1)
      {
        v1182 = 8 * v1180 - 8 * v1177 - 8;
        v1183 = 1;
        v1184 = v1178;
        while (1)
        {
          v1179 = v1183;
          if (!v1182)
            break;
          v1178 = v1184 + 1;
          v1185 = v1184[1];
          ++v1183;
          v1182 -= 8;
          ++v1184;
          if (v1185 != -1)
            goto LABEL_1202;
        }
        v1178 = v1181;
      }
      else
      {
        v1179 = 0;
      }
    }
LABEL_1202:
    v1186 = a3[6];
    v1187 = a3[7];
    while (v1186 != v1187 && v1178 != v1181)
    {
      v1205 = *v1186;
      if (*v1186 > v1179)
      {
        v1206 = v1178 + 1;
        while (v1206 != v1181)
        {
          ++v1179;
          v1207 = *v1206++;
          if (v1207 != -1 && v1205 <= v1179)
          {
            v1178 = v1206 - 1;
            goto LABEL_1216;
          }
        }
        break;
      }
LABEL_1216:
      if (v1205 == v1179)
      {
        v1209 = (int8x16_t *)(*(_QWORD *)(result + 11824) + 8 * *v1178);
        if (v1209 == *(int8x16_t **)a2)
        {
          v1197 = v1209[10];
          v1196 = v1209[11];
          v1195 = v1209[8];
          v1194 = v1209[9];
          v1193 = v1209[6];
          v1192 = v1209[7];
          v1191 = v1209[4];
          v1190 = v1209[5];
          v1189 = v1209[2];
          v1188 = v1209[3];
        }
        else
        {
          v1189 = v1209[2];
          v1188 = v1209[3];
          v1191 = v1209[4];
          v1190 = v1209[5];
          v1193 = v1209[6];
          v1192 = v1209[7];
          v1195 = v1209[8];
          v1194 = v1209[9];
          v1197 = v1209[10];
          v1196 = v1209[11];
        }
        v1199 = *v1209;
        v1198 = v1209[1];
        v1200 = *(unsigned int *)(a2 + 16);
        v1201 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1186[1] + (_DWORD)v1200 * v1101[1]));
        v1189.i64[1] = vextq_s8(v1189, v1189, 8uLL).u64[0];
        v1198.i64[1] = vextq_s8(v1198, v1198, 8uLL).u64[0];
        v1199.i64[1] = vextq_s8(v1199, v1199, 8uLL).u64[0];
        v1190.i64[1] = vextq_s8(v1190, v1190, 8uLL).u64[0];
        v1191.i64[1] = vextq_s8(v1191, v1191, 8uLL).u64[0];
        v1188.i64[1] = vextq_s8(v1188, v1188, 8uLL).u64[0];
        v1195.i64[1] = vextq_s8(v1195, v1195, 8uLL).u64[0];
        v1192.i64[1] = vextq_s8(v1192, v1192, 8uLL).u64[0];
        v1193.i64[1] = vextq_s8(v1193, v1193, 8uLL).u64[0];
        v1196.i64[1] = vextq_s8(v1196, v1196, 8uLL).u64[0];
        v1197.i64[1] = vextq_s8(v1197, v1197, 8uLL).u64[0];
        v1194.i64[1] = vextq_s8(v1194, v1194, 8uLL).u64[0];
        *v1201 = v1199;
        v1201[1] = v1198;
        v1201[2] = v1189;
        v1202 = (int8x16_t *)((char *)v1201 + 8 * v1200);
        *v1202 = v1188;
        v1202[1] = v1191;
        v1202[2] = v1190;
        v1203 = &v1201[v1200];
        *v1203 = v1193;
        v1203[1] = v1192;
        v1203[2] = v1195;
        v1204 = (int8x16_t *)((char *)v1201 + 24 * v1200);
        *v1204 = v1194;
        v1204[1] = v1197;
        v1204[2] = v1196;
        v1179 = v1205;
      }
      v1186 += 2;
    }
    v1101 += 2;
  }
  while (v1101 != v1102);
  v1104 = *(_DWORD **)(a4 + 216);
  v1105 = *(_DWORD **)(a4 + 224);
  if (a3[6] != a3[7] && v1104 != v1105)
  {
    do
    {
LABEL_1246:
      v1225 = *(_QWORD *)(result + 13336);
      v1226 = (*(_DWORD *)(result + 13360) * *v1104);
      v1227 = (uint64_t *)(v1225 + 8 * v1226);
      v1228 = *(_DWORD *)(result + 13256);
      v1229 = v1226 + v1228;
      v1230 = (uint64_t *)(v1225 + 8 * v1229);
      if (v1228)
      {
        if (*v1227 == -1)
        {
          v1231 = 8 * v1229 - 8 * v1226 - 8;
          v1232 = 1;
          v1233 = v1227;
          while (1)
          {
            v1228 = v1232;
            if (!v1231)
              break;
            v1227 = v1233 + 1;
            v1234 = v1233[1];
            ++v1232;
            v1231 -= 8;
            ++v1233;
            if (v1234 != -1)
              goto LABEL_1254;
          }
          v1227 = v1230;
        }
        else
        {
          v1228 = 0;
        }
      }
LABEL_1254:
      v1235 = a3[6];
      v1236 = a3[7];
      while (v1235 != v1236 && v1227 != v1230)
      {
        v1253 = *v1235;
        if (*v1235 > v1228)
        {
          v1254 = v1227 + 1;
          while (v1254 != v1230)
          {
            ++v1228;
            v1255 = *v1254++;
            if (v1255 != -1 && v1253 <= v1228)
            {
              v1227 = v1254 - 1;
              goto LABEL_1268;
            }
          }
          break;
        }
LABEL_1268:
        if (v1253 == v1228)
        {
          v1257 = (int8x16_t *)(*(_QWORD *)(result + 13264) + 8 * *v1227);
          if (v1257 == *(int8x16_t **)a2)
          {
            v1241 = v1257[7];
            v1243 = v1257[8];
            v1247 = v1257[5];
            v1242 = v1257[6];
            v1239 = v1257[3];
            v1248 = v1257[4];
            v1237 = v1257[1];
            v1240 = v1257[2];
            v1244 = vextq_s8(v1243, v1243, 8uLL).u64[0];
            v1245 = vextq_s8(v1241, v1241, 8uLL).u64[0];
            v1246 = vextq_s8(v1242, v1242, 8uLL).u64[0];
            v1238 = *v1257;
          }
          else
          {
            v1238 = *v1257;
            v1237 = v1257[1];
            v1240 = v1257[2];
            v1239 = v1257[3];
            v1242 = v1257[6];
            v1241 = v1257[7];
            v1243 = v1257[8];
            v1244 = vextq_s8(v1243, v1243, 8uLL).u64[0];
            v1245 = vextq_s8(v1241, v1241, 8uLL).u64[0];
            v1246 = vextq_s8(v1242, v1242, 8uLL).u64[0];
            v1248 = v1257[4];
            v1247 = v1257[5];
          }
          v1249 = *(unsigned int *)(a2 + 16);
          v1250 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1235[1] + (_DWORD)v1249 * v1104[1]));
          v1240.i64[1] = vextq_s8(v1240, v1240, 8uLL).u64[0];
          v1237.i64[1] = vextq_s8(v1237, v1237, 8uLL).u64[0];
          v1238.i64[1] = vextq_s8(v1238, v1238, 8uLL).u64[0];
          v1247.i64[1] = vextq_s8(v1247, v1247, 8uLL).u64[0];
          v1248.i64[1] = vextq_s8(v1248, v1248, 8uLL).u64[0];
          v1239.i64[1] = vextq_s8(v1239, v1239, 8uLL).u64[0];
          v1243.i64[1] = v1244;
          v1241.i64[1] = v1245;
          v1242.i64[1] = v1246;
          *v1250 = v1238;
          v1250[1] = v1237;
          v1250[2] = v1240;
          v1251 = (int8x16_t *)((char *)v1250 + 8 * v1249);
          *v1251 = v1239;
          v1251[1] = v1248;
          v1251[2] = v1247;
          v1252 = &v1250[v1249];
          *v1252 = v1242;
          v1252[1] = v1241;
          v1252[2] = v1243;
          v1228 = v1253;
        }
        v1235 += 2;
      }
      v1104 += 2;
    }
    while (v1104 != v1105);
  }
LABEL_1224:
  v1211 = *(_DWORD **)(a4 + 24);
  v1212 = *(_DWORD **)(a4 + 32);
  v1213 = a3[3];
  v1214 = a3[4];
  if (v1213 == v1214 || v1211 == v1212)
  {
    v1216 = *(_DWORD **)(a4 + 48);
    v1217 = *(_DWORD **)(a4 + 56);
    if (v1213 != v1214 && v1216 != v1217)
      goto LABEL_1303;
LABEL_1234:
    v1219 = *(_DWORD **)(a4 + 72);
    v1220 = *(_DWORD **)(a4 + 80);
    if (v1213 != v1214 && v1219 != v1220)
      goto LABEL_1334;
LABEL_1239:
    v1222 = *(_DWORD **)(a4 + 96);
    v1223 = *(_DWORD **)(a4 + 104);
    if (v1213 != v1214 && v1222 != v1223)
      goto LABEL_1371;
LABEL_1364:
    v1450 = *(_DWORD **)(a4 + 120);
    v1451 = *(_DWORD **)(a4 + 128);
    if (v1213 != v1214 && v1450 != v1451)
      goto LABEL_1408;
LABEL_1401:
    v1500 = *(_DWORD **)(a4 + 144);
    v1501 = *(_DWORD **)(a4 + 152);
    if (v1213 != v1214 && v1500 != v1501)
      goto LABEL_1452;
LABEL_1435:
    v1527 = *(_DWORD **)(a4 + 168);
    v1528 = *(_DWORD **)(a4 + 176);
    if (v1213 != v1214 && v1527 != v1528)
      goto LABEL_1483;
LABEL_1440:
    v1530 = *(_DWORD **)(a4 + 192);
    v1531 = *(_DWORD **)(a4 + 200);
    if (v1213 != v1214 && v1530 != v1531)
      goto LABEL_1514;
LABEL_1445:
    v1533 = *(_DWORD **)(a4 + 216);
    v1534 = *(_DWORD **)(a4 + 224);
    if (v1213 == v1214 || v1533 == v1534)
      goto LABEL_1544;
    goto LABEL_1571;
  }
  do
  {
    v1258 = *(_QWORD *)(result + 1672);
    v1259 = (*(_DWORD *)(result + 1696) * *v1211);
    v1260 = (uint64_t *)(v1258 + 8 * v1259);
    v1261 = *(_DWORD *)(result + 1592);
    v1262 = v1259 + v1261;
    v1263 = (uint64_t *)(v1258 + 8 * v1262);
    if (v1261)
    {
      if (*v1260 == -1)
      {
        v1264 = 8 * v1262 - 8 * v1259 - 8;
        v1265 = 1;
        v1266 = v1260;
        while (1)
        {
          v1261 = v1265;
          if (!v1264)
            break;
          v1260 = v1266 + 1;
          v1267 = v1266[1];
          ++v1265;
          v1264 -= 8;
          ++v1266;
          if (v1267 != -1)
            goto LABEL_1280;
        }
        v1260 = v1263;
      }
      else
      {
        v1261 = 0;
      }
    }
LABEL_1280:
    v1268 = a3[3];
    v1269 = a3[4];
    while (v1268 != v1269 && v1260 != v1263)
    {
      v1328 = *v1268;
      if (*v1268 > v1261)
      {
        v1329 = v1260 + 1;
        while (v1329 != v1263)
        {
          ++v1261;
          v1330 = *v1329++;
          if (v1330 != -1 && v1328 <= v1261)
          {
            v1260 = v1329 - 1;
            goto LABEL_1294;
          }
        }
        break;
      }
LABEL_1294:
      if (v1328 == v1261)
      {
        v1332 = *(_QWORD *)(result + 1600) + 8 * *v1260;
        if (v1332 == *(_QWORD *)a2)
        {
          v2305 = *(int8x16_t *)(v1332 + 608);
          v2317 = *(int8x16_t *)(v1332 + 624);
          v2182 = vextq_s8(v2317, v2317, 8uLL).u64[0];
          v2181 = vextq_s8(v2305, v2305, 8uLL).u64[0];
          v2281 = *(int8x16_t *)(v1332 + 576);
          v2293 = *(int8x16_t *)(v1332 + 592);
          v2180 = vextq_s8(v2293, v2293, 8uLL).u64[0];
          v2177 = vextq_s8(v2281, v2281, 8uLL).u64[0];
          v2191 = *(int8x16_t *)(v1332 + 544);
          v2192 = *(int8x16_t *)(v1332 + 560);
          v2208 = vextq_s8(v2192, v2192, 8uLL).u64[0];
          *(_QWORD *)&v2254 = vextq_s8(v2191, v2191, 8uLL).u64[0];
          v2189 = *(int8x16_t *)(v1332 + 512);
          v2190 = *(int8x16_t *)(v1332 + 528);
          v2242 = *(int8x16_t *)(v1332 + 496);
          *(_QWORD *)&v2246 = vextq_s8(v2190, v2190, 8uLL).u64[0];
          *(_QWORD *)&v2258 = vextq_s8(v2189, v2189, 8uLL).u64[0];
          v1287 = *(int8x16_t *)(v1332 + 320);
          v1286 = *(int8x16_t *)(v1332 + 336);
          *(_QWORD *)&v2250 = vextq_s8(v2242, v2242, 8uLL).u64[0];
          v2229 = *(int8x16_t *)(v1332 + 464);
          v2233 = *(int8x16_t *)(v1332 + 480);
          v2175 = vextq_s8(v2233, v2233, 8uLL).u64[0];
          v2174 = vextq_s8(v2229, v2229, 8uLL).u64[0];
          v1290 = *(int8x16_t *)(v1332 + 416);
          v1284 = *(int8x16_t *)(v1332 + 288);
          v1283 = *(int8x16_t *)(v1332 + 304);
          v2212 = *(int8x16_t *)(v1332 + 432);
          v2216 = *(int8x16_t *)(v1332 + 448);
          v2173 = vextq_s8(v2216, v2216, 8uLL).u64[0];
          v2172 = vextq_s8(v2212, v2212, 8uLL).u64[0];
          v1289 = *(int8x16_t *)(v1332 + 400);
          v2200 = vextq_s8(v1290, v1290, 8uLL).u64[0];
          v2204 = *(int8x16_t *)(v1332 + 352);
          *(_QWORD *)&v2274 = vextq_s8(v1289, v1289, 8uLL).u64[0];
          v2187 = *(int8x16_t *)(v1332 + 368);
          v2188 = *(int8x16_t *)(v1332 + 384);
          *(_QWORD *)&v2270 = vextq_s8(v2188, v2188, 8uLL).u64[0];
          *(_QWORD *)&v2266 = vextq_s8(v2187, v2187, 8uLL).u64[0];
          *(_QWORD *)&v2262 = vextq_s8(v2204, v2204, 8uLL).u64[0];
          v2170 = vextq_s8(v1286, v1286, 8uLL).u64[0];
          v2169 = vextq_s8(v1287, v1287, 8uLL).u64[0];
          v1279 = *(int8x16_t *)(v1332 + 192);
          v1291 = vextq_s8(v1283, v1283, 8uLL).u64[0];
          v1292 = vextq_s8(v1284, v1284, 8uLL).u64[0];
          v2185 = *(_QWORD *)(v1332 + 272);
          v2186 = *(int8x16_t *)(v1332 + 256);
          v2196 = *(int8x16_t *)(v1332 + 208);
          v2198 = vextq_s8(*(int8x16_t *)(v1332 + 272), *(int8x16_t *)(v1332 + 272), 8uLL).u64[0];
          v1277 = *(int8x16_t *)(v1332 + 160);
          v1280 = *(int8x16_t *)(v1332 + 176);
          *(_QWORD *)&v1281 = vextq_s8(v2186, v2186, 8uLL).u64[0];
          v2183 = *(int8x16_t *)(v1332 + 224);
          v2184 = *(int8x16_t *)(v1332 + 240);
          *(_QWORD *)&v2237 = vextq_s8(v2184, v2184, 8uLL).u64[0];
          *(_QWORD *)&v1282 = vextq_s8(v2183, v2183, 8uLL).u64[0];
          v1288 = *(int8x16_t *)(v1332 + 128);
          v1278 = *(int8x16_t *)(v1332 + 144);
          *(_QWORD *)&v2225 = vextq_s8(v2196, v2196, 8uLL).u64[0];
          v1293 = vextq_s8(v1279, v1279, 8uLL).u64[0];
          v1294 = vextq_s8(v1280, v1280, 8uLL).u64[0];
          v1295 = vextq_s8(v1277, v1277, 8uLL).u64[0];
          v1296 = vextq_s8(v1278, v1278, 8uLL).u64[0];
          v2195 = vextq_s8(v1288, v1288, 8uLL).u64[0];
          v1285 = *(int8x16_t *)(v1332 + 80);
          v2178 = *(int8x16_t *)(v1332 + 112);
          *(_QWORD *)&v1276 = vextq_s8(v2178, v2178, 8uLL).u64[0];
          v2176 = *(int8x16_t *)(v1332 + 96);
          *(_QWORD *)&v2220 = vextq_s8(v2176, v2176, 8uLL).u64[0];
          *(_QWORD *)&v1275 = vextq_s8(v1285, v1285, 8uLL).u64[0];
          v1273 = *(int8x16_t *)(v1332 + 32);
          v1272 = *(int8x16_t *)(v1332 + 48);
          v2193 = *(int8x16_t *)(v1332 + 64);
          *(_QWORD *)&v1274 = vextq_s8(v2193, v2193, 8uLL).u64[0];
          v1297 = vextq_s8(v1272, v1272, 8uLL).u64[0];
          v1298 = vextq_s8(v1273, v1273, 8uLL).u64[0];
          v1271 = *(int8x16_t *)v1332;
          v1270 = *(int8x16_t *)(v1332 + 16);
        }
        else
        {
          v1271 = *(int8x16_t *)v1332;
          v1270 = *(int8x16_t *)(v1332 + 16);
          v1273 = *(int8x16_t *)(v1332 + 32);
          v1272 = *(int8x16_t *)(v1332 + 48);
          v1274 = *(_OWORD *)(v1332 + 72);
          v1275 = *(_OWORD *)(v1332 + 88);
          v1276 = *(_OWORD *)(v1332 + 120);
          v1278 = *(int8x16_t *)(v1332 + 144);
          v1277 = *(int8x16_t *)(v1332 + 160);
          v1280 = *(int8x16_t *)(v1332 + 176);
          v1279 = *(int8x16_t *)(v1332 + 192);
          v1281 = *(_OWORD *)(v1332 + 264);
          v1282 = *(_OWORD *)(v1332 + 232);
          v1284 = *(int8x16_t *)(v1332 + 288);
          v1283 = *(int8x16_t *)(v1332 + 304);
          v2220 = *(_OWORD *)(v1332 + 104);
          v2225 = *(_OWORD *)(v1332 + 216);
          v2178.i64[0] = *(_QWORD *)(v1332 + 112);
          v2176.i64[0] = *(_QWORD *)(v1332 + 96);
          v1285.i64[0] = *(_QWORD *)(v1332 + 80);
          v1287 = *(int8x16_t *)(v1332 + 320);
          v1286 = *(int8x16_t *)(v1332 + 336);
          v2237 = *(_OWORD *)(v1332 + 248);
          v2186.i64[0] = *(_QWORD *)(v1332 + 256);
          v2184.i64[0] = *(_QWORD *)(v1332 + 240);
          v2183.i64[0] = *(_QWORD *)(v1332 + 224);
          v2185 = *(_QWORD *)(v1332 + 272);
          v2270 = *(_OWORD *)(v1332 + 392);
          v2274 = *(_OWORD *)(v1332 + 408);
          v2262 = *(_OWORD *)(v1332 + 360);
          v2266 = *(_OWORD *)(v1332 + 376);
          v2188.i64[0] = *(_QWORD *)(v1332 + 384);
          v2187.i64[0] = *(_QWORD *)(v1332 + 368);
          v2254 = *(_OWORD *)(v1332 + 552);
          v2258 = *(_OWORD *)(v1332 + 520);
          v2192.i64[0] = *(_QWORD *)(v1332 + 560);
          v2246 = *(_OWORD *)(v1332 + 536);
          v2250 = *(_OWORD *)(v1332 + 504);
          v2191.i64[0] = *(_QWORD *)(v1332 + 544);
          v2190.i64[0] = *(_QWORD *)(v1332 + 528);
          v2189.i64[0] = *(_QWORD *)(v1332 + 512);
          v2305 = *(int8x16_t *)(v1332 + 608);
          v2317 = *(int8x16_t *)(v1332 + 624);
          v2182 = vextq_s8(v2317, v2317, 8uLL).u64[0];
          v2181 = vextq_s8(v2305, v2305, 8uLL).u64[0];
          v2281 = *(int8x16_t *)(v1332 + 576);
          v2293 = *(int8x16_t *)(v1332 + 592);
          v2180 = vextq_s8(v2293, v2293, 8uLL).u64[0];
          v1288.i64[0] = *(_QWORD *)(v1332 + 128);
          v2177 = vextq_s8(v2281, v2281, 8uLL).u64[0];
          v1289.i64[0] = *(_QWORD *)(v1332 + 400);
          v2229 = *(int8x16_t *)(v1332 + 464);
          v2233 = *(int8x16_t *)(v1332 + 480);
          v2175 = vextq_s8(v2233, v2233, 8uLL).u64[0];
          v2174 = vextq_s8(v2229, v2229, 8uLL).u64[0];
          v2212 = *(int8x16_t *)(v1332 + 432);
          v2216 = *(int8x16_t *)(v1332 + 448);
          v2173 = vextq_s8(v2216, v2216, 8uLL).u64[0];
          v2195 = *(_QWORD *)(v1332 + 136);
          v2172 = vextq_s8(v2212, v2212, 8uLL).u64[0];
          v1290.i64[0] = *(_QWORD *)(v1332 + 416);
          v2170 = vextq_s8(v1286, v1286, 8uLL).u64[0];
          v2193.i64[0] = *(_QWORD *)(v1332 + 64);
          v2169 = vextq_s8(v1287, v1287, 8uLL).u64[0];
          v2198 = *(_QWORD *)(v1332 + 280);
          v1291 = vextq_s8(v1283, v1283, 8uLL).u64[0];
          v1292 = vextq_s8(v1284, v1284, 8uLL).u64[0];
          v2196.i64[0] = *(_QWORD *)(v1332 + 208);
          v1293 = vextq_s8(v1279, v1279, 8uLL).u64[0];
          v2200 = *(_QWORD *)(v1332 + 424);
          v1294 = vextq_s8(v1280, v1280, 8uLL).u64[0];
          v1295 = vextq_s8(v1277, v1277, 8uLL).u64[0];
          v2204.i64[0] = *(_QWORD *)(v1332 + 352);
          v1296 = vextq_s8(v1278, v1278, 8uLL).u64[0];
          v2208 = *(_QWORD *)(v1332 + 568);
          v1297 = vextq_s8(v1272, v1272, 8uLL).u64[0];
          v1298 = vextq_s8(v1273, v1273, 8uLL).u64[0];
          v2242.i64[0] = *(_QWORD *)(v1332 + 496);
        }
        v2194 = *(_QWORD *)(v1332 + 640);
        v1272.i64[1] = v1297;
        v1273.i64[1] = v1298;
        v1270.i64[1] = vextq_s8(v1270, v1270, 8uLL).u64[0];
        v1271.i64[1] = vextq_s8(v1271, v1271, 8uLL).u64[0];
        *((_QWORD *)&v1276 + 1) = v1288.i64[0];
        v2171 = v1276;
        *(_QWORD *)&v1299 = v2220;
        *(_QWORD *)&v1300 = v2225;
        *((_QWORD *)&v1299 + 1) = v2178.i64[0];
        *((_QWORD *)&v1275 + 1) = v2176.i64[0];
        v2179 = v1275;
        *((_QWORD *)&v1274 + 1) = v1285.i64[0];
        v1279.i64[1] = v1293;
        v1280.i64[1] = v1294;
        v1277.i64[1] = v1295;
        v1278.i64[1] = v1296;
        *((_QWORD *)&v1281 + 1) = v2185;
        v2221 = v1281;
        *(_QWORD *)&v1301 = v2237;
        *((_QWORD *)&v1301 + 1) = v2186.i64[0];
        *((_QWORD *)&v1282 + 1) = v2184.i64[0];
        v2238 = v1282;
        *((_QWORD *)&v1300 + 1) = v2183.i64[0];
        v1286.i64[1] = v2170;
        v1287.i64[1] = v2169;
        v1283.i64[1] = v1291;
        v1284.i64[1] = v1292;
        *(_QWORD *)&v1303 = v2270;
        *(_QWORD *)&v1302 = v2274;
        *((_QWORD *)&v1302 + 1) = v1290.i64[0];
        *((_QWORD *)&v1303 + 1) = v1289.i64[0];
        *(_QWORD *)&v1305 = v2262;
        *(_QWORD *)&v1304 = v2266;
        *((_QWORD *)&v1304 + 1) = v2188.i64[0];
        *((_QWORD *)&v1305 + 1) = v2187.i64[0];
        *(_QWORD *)&v1307 = v2229.i64[0];
        *(_QWORD *)&v1306 = v2233.i64[0];
        *((_QWORD *)&v1306 + 1) = v2175;
        *((_QWORD *)&v1307 + 1) = v2174;
        *(_QWORD *)&v1309 = v2212.i64[0];
        *(_QWORD *)&v1308 = v2216.i64[0];
        *((_QWORD *)&v1308 + 1) = v2173;
        *((_QWORD *)&v1309 + 1) = v2172;
        *(_QWORD *)&v1310 = v2254;
        *(_QWORD *)&v1311 = v2258;
        *((_QWORD *)&v1310 + 1) = v2192.i64[0];
        *(_QWORD *)&v1313 = v2246;
        *(_QWORD *)&v1312 = v2250;
        *((_QWORD *)&v1313 + 1) = v2191.i64[0];
        *((_QWORD *)&v1311 + 1) = v2190.i64[0];
        *((_QWORD *)&v1312 + 1) = v2189.i64[0];
        *(_QWORD *)&v1314 = v2317.i64[0];
        *((_QWORD *)&v1314 + 1) = v2182;
        *(_QWORD *)&v1315 = v2305.i64[0];
        *((_QWORD *)&v1315 + 1) = v2181;
        *(_QWORD *)&v1316 = v2293.i64[0];
        *((_QWORD *)&v1316 + 1) = v2180;
        *(_QWORD *)&v1317 = v2281.i64[0];
        *((_QWORD *)&v1317 + 1) = v2177;
        v1318 = *(unsigned int *)(a2 + 16);
        v1319 = *(_QWORD *)a2 + 8 * (v1268[1] + (_DWORD)v1318 * v1211[1]);
        *(int8x16_t *)v1319 = v1271;
        *(int8x16_t *)(v1319 + 16) = v1270;
        *(_QWORD *)(v1319 + 64) = v2193.i64[0];
        *(int8x16_t *)(v1319 + 32) = v1273;
        *(int8x16_t *)(v1319 + 48) = v1272;
        v1320 = v1319 + 8 * v1318;
        *(_OWORD *)v1320 = v1274;
        *(_OWORD *)(v1320 + 16) = v2179;
        *(_QWORD *)(v1320 + 64) = v2195;
        *(_OWORD *)(v1320 + 32) = v1299;
        *(_OWORD *)(v1320 + 48) = v2171;
        v1321 = (int8x16_t *)(v1319 + 16 * v1318);
        *v1321 = v1278;
        v1321[1] = v1277;
        v1321[4].i64[0] = v2196.i64[0];
        v1321[2] = v1280;
        v1321[3] = v1279;
        v1322 = v1319 + 24 * v1318;
        *(_OWORD *)v1322 = v1300;
        *(_OWORD *)(v1322 + 16) = v2238;
        *(_QWORD *)(v1322 + 64) = v2198;
        *(_OWORD *)(v1322 + 32) = v1301;
        *(_OWORD *)(v1322 + 48) = v2221;
        v1323 = (int8x16_t *)(v1319 + 32 * v1318);
        *v1323 = v1284;
        v1323[1] = v1283;
        v1323[4].i64[0] = v2204.i64[0];
        v1323[2] = v1287;
        v1323[3] = v1286;
        v1324 = v1319 + 40 * v1318;
        *(_OWORD *)v1324 = v1305;
        *(_OWORD *)(v1324 + 16) = v1304;
        *(_QWORD *)(v1324 + 64) = v2200;
        *(_OWORD *)(v1324 + 32) = v1303;
        *(_OWORD *)(v1324 + 48) = v1302;
        v1325 = v1319 + 48 * v1318;
        *(_OWORD *)v1325 = v1309;
        *(_OWORD *)(v1325 + 16) = v1308;
        *(_QWORD *)(v1325 + 64) = v2242.i64[0];
        *(_OWORD *)(v1325 + 32) = v1307;
        *(_OWORD *)(v1325 + 48) = v1306;
        v1326 = v1319 + 56 * v1318;
        *(_OWORD *)v1326 = v1312;
        *(_OWORD *)(v1326 + 16) = v1311;
        *(_QWORD *)(v1326 + 64) = v2208;
        *(_OWORD *)(v1326 + 32) = v1313;
        *(_OWORD *)(v1326 + 48) = v1310;
        v1327 = v1319 + (v1318 << 6);
        *(_OWORD *)v1327 = v1317;
        *(_OWORD *)(v1327 + 16) = v1316;
        *(_QWORD *)(v1327 + 64) = v2194;
        v1261 = v1328;
        *(_OWORD *)(v1327 + 32) = v1315;
        *(_OWORD *)(v1327 + 48) = v1314;
      }
      v1268 += 2;
    }
    v1211 += 2;
  }
  while (v1211 != v1212);
  v1213 = a3[3];
  v1214 = a3[4];
  v1216 = *(_DWORD **)(a4 + 48);
  v1217 = *(_DWORD **)(a4 + 56);
  if (v1213 == v1214 || v1216 == v1217)
    goto LABEL_1234;
  do
  {
LABEL_1303:
    v1334 = *(_QWORD *)(result + 3112);
    v1335 = (*(_DWORD *)(result + 3136) * *v1216);
    v1336 = (uint64_t *)(v1334 + 8 * v1335);
    v1337 = *(_DWORD *)(result + 3032);
    v1338 = v1335 + v1337;
    v1339 = (uint64_t *)(v1334 + 8 * v1338);
    if (v1337)
    {
      if (*v1336 == -1)
      {
        v1340 = 8 * v1338 - 8 * v1335 - 8;
        v1341 = 1;
        v1342 = v1336;
        while (1)
        {
          v1337 = v1341;
          if (!v1340)
            break;
          v1336 = v1342 + 1;
          v1343 = v1342[1];
          ++v1341;
          v1340 -= 8;
          ++v1342;
          if (v1343 != -1)
            goto LABEL_1311;
        }
        v1336 = v1339;
      }
      else
      {
        v1337 = 0;
      }
    }
LABEL_1311:
    v1344 = a3[3];
    v1345 = a3[4];
    while (v1344 != v1345 && v1336 != v1339)
    {
      v1386 = *v1344;
      if (*v1344 > v1337)
      {
        v1387 = v1336 + 1;
        while (v1387 != v1339)
        {
          ++v1337;
          v1388 = *v1387++;
          if (v1388 != -1 && v1386 <= v1337)
          {
            v1336 = v1387 - 1;
            goto LABEL_1325;
          }
        }
        break;
      }
LABEL_1325:
      if (v1386 == v1337)
      {
        v1390 = *(_QWORD *)(result + 3040) + 8 * *v1336;
        if (v1390 == *(_QWORD *)a2)
        {
          v1360 = *(int8x16_t *)(v1390 + 336);
          v1362 = *(int8x16_t *)(v1390 + 304);
          v1361 = *(int8x16_t *)(v1390 + 320);
          v2251 = *(int8x16_t *)(v1390 + 400);
          v2255 = *(int8x16_t *)(v1390 + 416);
          v1370 = vextq_s8(v2255, v2255, 8uLL).u64[0];
          *(_QWORD *)&v2294 = vextq_s8(v2251, v2251, 8uLL).u64[0];
          v2306 = *(int8x16_t *)(v1390 + 368);
          v1363 = *(int8x16_t *)(v1390 + 288);
          v2318 = *(int8x16_t *)(v1390 + 384);
          *(_QWORD *)&v1373 = vextq_s8(v2318, v2318, 8uLL).u64[0];
          *(_QWORD *)&v1374 = vextq_s8(v2306, v2306, 8uLL).u64[0];
          v2275 = *(int8x16_t *)(v1390 + 352);
          *(_QWORD *)&v1375 = vextq_s8(v2275, v2275, 8uLL).u64[0];
          v2213 = vextq_s8(v1360, v1360, 8uLL).u64[0];
          v2209 = vextq_s8(v1361, v1361, 8uLL).u64[0];
          v2205 = vextq_s8(v1362, v1362, 8uLL).u64[0];
          v1357 = *(int8x16_t *)(v1390 + 176);
          v1356 = *(int8x16_t *)(v1390 + 192);
          v2201 = vextq_s8(v1363, v1363, 8uLL).u64[0];
          v2243 = *(int8x16_t *)(v1390 + 272);
          v2247 = *(int8x16_t *)(v1390 + 256);
          v2267 = *(int8x16_t *)(v1390 + 208);
          v2271 = vextq_s8(v2243, v2243, 8uLL).u64[0];
          *(_QWORD *)&v2282 = vextq_s8(v2247, v2247, 8uLL).u64[0];
          v1355 = *(int8x16_t *)(v1390 + 144);
          v1354 = *(int8x16_t *)(v1390 + 160);
          v2234 = *(int8x16_t *)(v1390 + 224);
          v2239 = *(int8x16_t *)(v1390 + 240);
          *(_QWORD *)&v1359 = vextq_s8(v2239, v2239, 8uLL).u64[0];
          *(_QWORD *)&v1358 = vextq_s8(v2234, v2234, 8uLL).u64[0];
          *(_QWORD *)&v1376 = vextq_s8(v2267, v2267, 8uLL).u64[0];
          v1364 = vextq_s8(v1356, v1356, 8uLL).u64[0];
          v1365 = vextq_s8(v1357, v1357, 8uLL).u64[0];
          v1366 = vextq_s8(v1354, v1354, 8uLL).u64[0];
          v1367 = vextq_s8(v1355, v1355, 8uLL).u64[0];
          v2226 = *(int8x16_t *)(v1390 + 112);
          v2230 = *(int8x16_t *)(v1390 + 128);
          v2263 = vextq_s8(v2230, v2230, 8uLL).u64[0];
          *(_QWORD *)&v1353 = vextq_s8(v2226, v2226, 8uLL).u64[0];
          v1348 = *(int8x16_t *)(v1390 + 48);
          v2217 = *(int8x16_t *)(v1390 + 80);
          v2222 = *(int8x16_t *)(v1390 + 96);
          *(_QWORD *)&v1352 = vextq_s8(v2222, v2222, 8uLL).u64[0];
          *(_QWORD *)&v1351 = vextq_s8(v2217, v2217, 8uLL).u64[0];
          v2259 = *(int8x16_t *)(v1390 + 64);
          *(_QWORD *)&v1350 = vextq_s8(v2259, v2259, 8uLL).u64[0];
          v1346 = *(int8x16_t *)(v1390 + 16);
          v1349 = *(int8x16_t *)(v1390 + 32);
          v1368 = vextq_s8(v1348, v1348, 8uLL).u64[0];
          v1369 = vextq_s8(v1349, v1349, 8uLL).u64[0];
          v1347 = *(int8x16_t *)v1390;
          v1371 = vextq_s8(v1346, v1346, 8uLL).u64[0];
          v1372 = vextq_s8(v1347, v1347, 8uLL).u64[0];
        }
        else
        {
          v1347 = *(int8x16_t *)v1390;
          v1346 = *(int8x16_t *)(v1390 + 16);
          v1349 = *(int8x16_t *)(v1390 + 32);
          v1348 = *(int8x16_t *)(v1390 + 48);
          v1350 = *(_OWORD *)(v1390 + 72);
          v1351 = *(_OWORD *)(v1390 + 88);
          v1352 = *(_OWORD *)(v1390 + 104);
          v1353 = *(_OWORD *)(v1390 + 120);
          v1355 = *(int8x16_t *)(v1390 + 144);
          v1354 = *(int8x16_t *)(v1390 + 160);
          v1357 = *(int8x16_t *)(v1390 + 176);
          v1356 = *(int8x16_t *)(v1390 + 192);
          v2230.i64[0] = *(_QWORD *)(v1390 + 128);
          v1358 = *(_OWORD *)(v1390 + 232);
          v2226.i64[0] = *(_QWORD *)(v1390 + 112);
          v1359 = *(_OWORD *)(v1390 + 248);
          v2222.i64[0] = *(_QWORD *)(v1390 + 96);
          v2217.i64[0] = *(_QWORD *)(v1390 + 80);
          v2247.i64[0] = *(_QWORD *)(v1390 + 256);
          v2239.i64[0] = *(_QWORD *)(v1390 + 240);
          v2234.i64[0] = *(_QWORD *)(v1390 + 224);
          v2282 = *(_OWORD *)(v1390 + 264);
          v2243.i64[0] = *(_QWORD *)(v1390 + 272);
          v2294 = *(_OWORD *)(v1390 + 408);
          v2255.i64[0] = *(_QWORD *)(v1390 + 416);
          v2251.i64[0] = *(_QWORD *)(v1390 + 400);
          v1361 = *(int8x16_t *)(v1390 + 320);
          v1360 = *(int8x16_t *)(v1390 + 336);
          v2306.i64[0] = *(_QWORD *)(v1390 + 368);
          v2318.i64[0] = *(_QWORD *)(v1390 + 384);
          v2209 = vextq_s8(v1361, v1361, 8uLL).u64[0];
          v2213 = vextq_s8(v1360, v1360, 8uLL).u64[0];
          v1363 = *(int8x16_t *)(v1390 + 288);
          v1362 = *(int8x16_t *)(v1390 + 304);
          v2201 = vextq_s8(v1363, v1363, 8uLL).u64[0];
          v2205 = vextq_s8(v1362, v1362, 8uLL).u64[0];
          v2263 = *(_QWORD *)(v1390 + 136);
          v1364 = vextq_s8(v1356, v1356, 8uLL).u64[0];
          v2259.i64[0] = *(_QWORD *)(v1390 + 64);
          v1365 = vextq_s8(v1357, v1357, 8uLL).u64[0];
          v1366 = vextq_s8(v1354, v1354, 8uLL).u64[0];
          v2271 = *(_QWORD *)(v1390 + 280);
          v1367 = vextq_s8(v1355, v1355, 8uLL).u64[0];
          v2267.i64[0] = *(_QWORD *)(v1390 + 208);
          v1368 = vextq_s8(v1348, v1348, 8uLL).u64[0];
          v1369 = vextq_s8(v1349, v1349, 8uLL).u64[0];
          v1370 = *(_QWORD *)(v1390 + 424);
          v1371 = vextq_s8(v1346, v1346, 8uLL).u64[0];
          v1372 = vextq_s8(v1347, v1347, 8uLL).u64[0];
          v2275.i64[0] = *(_QWORD *)(v1390 + 352);
          v1373 = *(_OWORD *)(v1390 + 392);
          v1374 = *(_OWORD *)(v1390 + 376);
          v1375 = *(_OWORD *)(v1390 + 360);
          v1376 = *(_OWORD *)(v1390 + 216);
        }
        v1348.i64[1] = v1368;
        v1349.i64[1] = v1369;
        v1346.i64[1] = v1371;
        v1347.i64[1] = v1372;
        *((_QWORD *)&v1353 + 1) = v2230.i64[0];
        *((_QWORD *)&v1352 + 1) = v2226.i64[0];
        *((_QWORD *)&v1351 + 1) = v2222.i64[0];
        *((_QWORD *)&v1350 + 1) = v2217.i64[0];
        v1356.i64[1] = v1364;
        v1357.i64[1] = v1365;
        v1354.i64[1] = v1366;
        v1355.i64[1] = v1367;
        *(_QWORD *)&v1378 = v2282;
        *(_QWORD *)&v1377 = v2294;
        *((_QWORD *)&v1378 + 1) = v2243.i64[0];
        *((_QWORD *)&v1359 + 1) = v2247.i64[0];
        *((_QWORD *)&v1358 + 1) = v2239.i64[0];
        *((_QWORD *)&v1376 + 1) = v2234.i64[0];
        v1360.i64[1] = v2213;
        v1361.i64[1] = v2209;
        v1362.i64[1] = v2205;
        v1363.i64[1] = v2201;
        *((_QWORD *)&v1377 + 1) = v2255.i64[0];
        *((_QWORD *)&v1373 + 1) = v2251.i64[0];
        v1379 = *(unsigned int *)(a2 + 16);
        v1380 = *(_QWORD *)a2 + 8 * (v1344[1] + (_DWORD)v1379 * v1216[1]);
        *((_QWORD *)&v1374 + 1) = v2318.i64[0];
        *((_QWORD *)&v1375 + 1) = v2306.i64[0];
        *(int8x16_t *)v1380 = v1347;
        *(int8x16_t *)(v1380 + 16) = v1346;
        *(_QWORD *)(v1380 + 64) = v2259.i64[0];
        *(int8x16_t *)(v1380 + 32) = v1349;
        *(int8x16_t *)(v1380 + 48) = v1348;
        v1381 = v1380 + 8 * v1379;
        *(_OWORD *)v1381 = v1350;
        *(_OWORD *)(v1381 + 16) = v1351;
        *(_QWORD *)(v1381 + 64) = v2263;
        *(_OWORD *)(v1381 + 32) = v1352;
        *(_OWORD *)(v1381 + 48) = v1353;
        v1382 = (int8x16_t *)(v1380 + 16 * v1379);
        *v1382 = v1355;
        v1382[1] = v1354;
        v1382[4].i64[0] = v2267.i64[0];
        v1382[2] = v1357;
        v1382[3] = v1356;
        v1383 = v1380 + 24 * v1379;
        *(_OWORD *)v1383 = v1376;
        *(_OWORD *)(v1383 + 16) = v1358;
        *(_QWORD *)(v1383 + 64) = v2271;
        *(_OWORD *)(v1383 + 32) = v1359;
        *(_OWORD *)(v1383 + 48) = v1378;
        v1384 = (int8x16_t *)(v1380 + 32 * v1379);
        *v1384 = v1363;
        v1384[1] = v1362;
        v1384[4].i64[0] = v2275.i64[0];
        v1384[2] = v1361;
        v1384[3] = v1360;
        v1385 = v1380 + 40 * v1379;
        *(_OWORD *)v1385 = v1375;
        *(_OWORD *)(v1385 + 16) = v1374;
        *(_QWORD *)(v1385 + 64) = v1370;
        v1337 = v1386;
        *(_OWORD *)(v1385 + 32) = v1373;
        *(_OWORD *)(v1385 + 48) = v1377;
      }
      v1344 += 2;
    }
    v1216 += 2;
  }
  while (v1216 != v1217);
  v1213 = a3[3];
  v1214 = a3[4];
  v1219 = *(_DWORD **)(a4 + 72);
  v1220 = *(_DWORD **)(a4 + 80);
  if (v1213 == v1214 || v1219 == v1220)
    goto LABEL_1239;
  do
  {
LABEL_1334:
    v1392 = *(_QWORD *)(result + 4552);
    v1393 = (*(_DWORD *)(result + 4576) * *v1219);
    v1394 = (uint64_t *)(v1392 + 8 * v1393);
    v1395 = *(_DWORD *)(result + 4472);
    v1396 = v1393 + v1395;
    v1397 = (uint64_t *)(v1392 + 8 * v1396);
    if (v1395)
    {
      if (*v1394 == -1)
      {
        v1398 = 8 * v1396 - 8 * v1393 - 8;
        v1399 = 1;
        v1400 = v1394;
        while (1)
        {
          v1395 = v1399;
          if (!v1398)
            break;
          v1394 = v1400 + 1;
          v1401 = v1400[1];
          ++v1399;
          v1398 -= 8;
          ++v1400;
          if (v1401 != -1)
            goto LABEL_1342;
        }
        v1394 = v1397;
      }
      else
      {
        v1395 = 0;
      }
    }
LABEL_1342:
    v1402 = a3[3];
    v1403 = a3[4];
    while (v1402 != v1403 && v1394 != v1397)
    {
      v1444 = *v1402;
      if (*v1402 > v1395)
      {
        v1445 = v1394 + 1;
        while (v1445 != v1397)
        {
          ++v1395;
          v1446 = *v1445++;
          if (v1446 != -1 && v1444 <= v1395)
          {
            v1394 = v1445 - 1;
            goto LABEL_1356;
          }
        }
        break;
      }
LABEL_1356:
      if (v1444 == v1395)
      {
        v1448 = *(_QWORD *)(result + 4480) + 8 * *v1394;
        if (v1448 == *(_QWORD *)a2)
        {
          v1418 = *(int8x16_t *)(v1448 + 336);
          v1420 = *(int8x16_t *)(v1448 + 304);
          v1419 = *(int8x16_t *)(v1448 + 320);
          v2252 = *(int8x16_t *)(v1448 + 400);
          v2256 = *(int8x16_t *)(v1448 + 416);
          v1428 = vextq_s8(v2256, v2256, 8uLL).u64[0];
          *(_QWORD *)&v2295 = vextq_s8(v2252, v2252, 8uLL).u64[0];
          v2307 = *(int8x16_t *)(v1448 + 368);
          v1421 = *(int8x16_t *)(v1448 + 288);
          v2319 = *(int8x16_t *)(v1448 + 384);
          *(_QWORD *)&v1431 = vextq_s8(v2319, v2319, 8uLL).u64[0];
          *(_QWORD *)&v1432 = vextq_s8(v2307, v2307, 8uLL).u64[0];
          v2276 = *(int8x16_t *)(v1448 + 352);
          *(_QWORD *)&v1433 = vextq_s8(v2276, v2276, 8uLL).u64[0];
          v2214 = vextq_s8(v1418, v1418, 8uLL).u64[0];
          v2210 = vextq_s8(v1419, v1419, 8uLL).u64[0];
          v2206 = vextq_s8(v1420, v1420, 8uLL).u64[0];
          v1415 = *(int8x16_t *)(v1448 + 176);
          v1414 = *(int8x16_t *)(v1448 + 192);
          v2202 = vextq_s8(v1421, v1421, 8uLL).u64[0];
          v2244 = *(int8x16_t *)(v1448 + 272);
          v2248 = *(int8x16_t *)(v1448 + 256);
          v2268 = *(int8x16_t *)(v1448 + 208);
          v2272 = vextq_s8(v2244, v2244, 8uLL).u64[0];
          *(_QWORD *)&v2283 = vextq_s8(v2248, v2248, 8uLL).u64[0];
          v1413 = *(int8x16_t *)(v1448 + 144);
          v1412 = *(int8x16_t *)(v1448 + 160);
          v2235 = *(int8x16_t *)(v1448 + 224);
          v2240 = *(int8x16_t *)(v1448 + 240);
          *(_QWORD *)&v1417 = vextq_s8(v2240, v2240, 8uLL).u64[0];
          *(_QWORD *)&v1416 = vextq_s8(v2235, v2235, 8uLL).u64[0];
          *(_QWORD *)&v1434 = vextq_s8(v2268, v2268, 8uLL).u64[0];
          v1422 = vextq_s8(v1414, v1414, 8uLL).u64[0];
          v1423 = vextq_s8(v1415, v1415, 8uLL).u64[0];
          v1424 = vextq_s8(v1412, v1412, 8uLL).u64[0];
          v1425 = vextq_s8(v1413, v1413, 8uLL).u64[0];
          v2227 = *(int8x16_t *)(v1448 + 112);
          v2231 = *(int8x16_t *)(v1448 + 128);
          v2264 = vextq_s8(v2231, v2231, 8uLL).u64[0];
          *(_QWORD *)&v1411 = vextq_s8(v2227, v2227, 8uLL).u64[0];
          v1406 = *(int8x16_t *)(v1448 + 48);
          v2218 = *(int8x16_t *)(v1448 + 80);
          v2223 = *(int8x16_t *)(v1448 + 96);
          *(_QWORD *)&v1410 = vextq_s8(v2223, v2223, 8uLL).u64[0];
          *(_QWORD *)&v1409 = vextq_s8(v2218, v2218, 8uLL).u64[0];
          v2260 = *(int8x16_t *)(v1448 + 64);
          *(_QWORD *)&v1408 = vextq_s8(v2260, v2260, 8uLL).u64[0];
          v1404 = *(int8x16_t *)(v1448 + 16);
          v1407 = *(int8x16_t *)(v1448 + 32);
          v1426 = vextq_s8(v1406, v1406, 8uLL).u64[0];
          v1427 = vextq_s8(v1407, v1407, 8uLL).u64[0];
          v1405 = *(int8x16_t *)v1448;
          v1429 = vextq_s8(v1404, v1404, 8uLL).u64[0];
          v1430 = vextq_s8(v1405, v1405, 8uLL).u64[0];
        }
        else
        {
          v1405 = *(int8x16_t *)v1448;
          v1404 = *(int8x16_t *)(v1448 + 16);
          v1407 = *(int8x16_t *)(v1448 + 32);
          v1406 = *(int8x16_t *)(v1448 + 48);
          v1408 = *(_OWORD *)(v1448 + 72);
          v1409 = *(_OWORD *)(v1448 + 88);
          v1410 = *(_OWORD *)(v1448 + 104);
          v1411 = *(_OWORD *)(v1448 + 120);
          v1413 = *(int8x16_t *)(v1448 + 144);
          v1412 = *(int8x16_t *)(v1448 + 160);
          v1415 = *(int8x16_t *)(v1448 + 176);
          v1414 = *(int8x16_t *)(v1448 + 192);
          v2231.i64[0] = *(_QWORD *)(v1448 + 128);
          v1416 = *(_OWORD *)(v1448 + 232);
          v2227.i64[0] = *(_QWORD *)(v1448 + 112);
          v1417 = *(_OWORD *)(v1448 + 248);
          v2223.i64[0] = *(_QWORD *)(v1448 + 96);
          v2218.i64[0] = *(_QWORD *)(v1448 + 80);
          v2248.i64[0] = *(_QWORD *)(v1448 + 256);
          v2240.i64[0] = *(_QWORD *)(v1448 + 240);
          v2235.i64[0] = *(_QWORD *)(v1448 + 224);
          v2283 = *(_OWORD *)(v1448 + 264);
          v2244.i64[0] = *(_QWORD *)(v1448 + 272);
          v2295 = *(_OWORD *)(v1448 + 408);
          v2256.i64[0] = *(_QWORD *)(v1448 + 416);
          v2252.i64[0] = *(_QWORD *)(v1448 + 400);
          v1419 = *(int8x16_t *)(v1448 + 320);
          v1418 = *(int8x16_t *)(v1448 + 336);
          v2307.i64[0] = *(_QWORD *)(v1448 + 368);
          v2319.i64[0] = *(_QWORD *)(v1448 + 384);
          v2210 = vextq_s8(v1419, v1419, 8uLL).u64[0];
          v2214 = vextq_s8(v1418, v1418, 8uLL).u64[0];
          v1421 = *(int8x16_t *)(v1448 + 288);
          v1420 = *(int8x16_t *)(v1448 + 304);
          v2202 = vextq_s8(v1421, v1421, 8uLL).u64[0];
          v2206 = vextq_s8(v1420, v1420, 8uLL).u64[0];
          v2264 = *(_QWORD *)(v1448 + 136);
          v1422 = vextq_s8(v1414, v1414, 8uLL).u64[0];
          v2260.i64[0] = *(_QWORD *)(v1448 + 64);
          v1423 = vextq_s8(v1415, v1415, 8uLL).u64[0];
          v1424 = vextq_s8(v1412, v1412, 8uLL).u64[0];
          v2272 = *(_QWORD *)(v1448 + 280);
          v1425 = vextq_s8(v1413, v1413, 8uLL).u64[0];
          v2268.i64[0] = *(_QWORD *)(v1448 + 208);
          v1426 = vextq_s8(v1406, v1406, 8uLL).u64[0];
          v1427 = vextq_s8(v1407, v1407, 8uLL).u64[0];
          v1428 = *(_QWORD *)(v1448 + 424);
          v1429 = vextq_s8(v1404, v1404, 8uLL).u64[0];
          v1430 = vextq_s8(v1405, v1405, 8uLL).u64[0];
          v2276.i64[0] = *(_QWORD *)(v1448 + 352);
          v1431 = *(_OWORD *)(v1448 + 392);
          v1432 = *(_OWORD *)(v1448 + 376);
          v1433 = *(_OWORD *)(v1448 + 360);
          v1434 = *(_OWORD *)(v1448 + 216);
        }
        v1406.i64[1] = v1426;
        v1407.i64[1] = v1427;
        v1404.i64[1] = v1429;
        v1405.i64[1] = v1430;
        *((_QWORD *)&v1411 + 1) = v2231.i64[0];
        *((_QWORD *)&v1410 + 1) = v2227.i64[0];
        *((_QWORD *)&v1409 + 1) = v2223.i64[0];
        *((_QWORD *)&v1408 + 1) = v2218.i64[0];
        v1414.i64[1] = v1422;
        v1415.i64[1] = v1423;
        v1412.i64[1] = v1424;
        v1413.i64[1] = v1425;
        *(_QWORD *)&v1436 = v2283;
        *(_QWORD *)&v1435 = v2295;
        *((_QWORD *)&v1436 + 1) = v2244.i64[0];
        *((_QWORD *)&v1417 + 1) = v2248.i64[0];
        *((_QWORD *)&v1416 + 1) = v2240.i64[0];
        *((_QWORD *)&v1434 + 1) = v2235.i64[0];
        v1418.i64[1] = v2214;
        v1419.i64[1] = v2210;
        v1420.i64[1] = v2206;
        v1421.i64[1] = v2202;
        *((_QWORD *)&v1435 + 1) = v2256.i64[0];
        *((_QWORD *)&v1431 + 1) = v2252.i64[0];
        v1437 = *(unsigned int *)(a2 + 16);
        v1438 = *(_QWORD *)a2 + 8 * (v1402[1] + (_DWORD)v1437 * v1219[1]);
        *((_QWORD *)&v1432 + 1) = v2319.i64[0];
        *((_QWORD *)&v1433 + 1) = v2307.i64[0];
        *(int8x16_t *)v1438 = v1405;
        *(int8x16_t *)(v1438 + 16) = v1404;
        *(_QWORD *)(v1438 + 64) = v2260.i64[0];
        *(int8x16_t *)(v1438 + 32) = v1407;
        *(int8x16_t *)(v1438 + 48) = v1406;
        v1439 = v1438 + 8 * v1437;
        *(_OWORD *)v1439 = v1408;
        *(_OWORD *)(v1439 + 16) = v1409;
        *(_QWORD *)(v1439 + 64) = v2264;
        *(_OWORD *)(v1439 + 32) = v1410;
        *(_OWORD *)(v1439 + 48) = v1411;
        v1440 = (int8x16_t *)(v1438 + 16 * v1437);
        *v1440 = v1413;
        v1440[1] = v1412;
        v1440[4].i64[0] = v2268.i64[0];
        v1440[2] = v1415;
        v1440[3] = v1414;
        v1441 = v1438 + 24 * v1437;
        *(_OWORD *)v1441 = v1434;
        *(_OWORD *)(v1441 + 16) = v1416;
        *(_QWORD *)(v1441 + 64) = v2272;
        *(_OWORD *)(v1441 + 32) = v1417;
        *(_OWORD *)(v1441 + 48) = v1436;
        v1442 = (int8x16_t *)(v1438 + 32 * v1437);
        *v1442 = v1421;
        v1442[1] = v1420;
        v1442[4].i64[0] = v2276.i64[0];
        v1442[2] = v1419;
        v1442[3] = v1418;
        v1443 = v1438 + 40 * v1437;
        *(_OWORD *)v1443 = v1433;
        *(_OWORD *)(v1443 + 16) = v1432;
        *(_QWORD *)(v1443 + 64) = v1428;
        v1395 = v1444;
        *(_OWORD *)(v1443 + 32) = v1431;
        *(_OWORD *)(v1443 + 48) = v1435;
      }
      v1402 += 2;
    }
    v1219 += 2;
  }
  while (v1219 != v1220);
  v1213 = a3[3];
  v1214 = a3[4];
  v1222 = *(_DWORD **)(a4 + 96);
  v1223 = *(_DWORD **)(a4 + 104);
  if (v1213 == v1214 || v1222 == v1223)
    goto LABEL_1364;
  do
  {
LABEL_1371:
    v1453 = *(_QWORD *)(result + 5992);
    v1454 = (*(_DWORD *)(result + 6016) * *v1222);
    v1455 = (uint64_t *)(v1453 + 8 * v1454);
    v1456 = *(_DWORD *)(result + 5912);
    v1457 = v1454 + v1456;
    v1458 = (uint64_t *)(v1453 + 8 * v1457);
    if (v1456)
    {
      if (*v1455 == -1)
      {
        v1459 = 8 * v1457 - 8 * v1454 - 8;
        v1460 = 1;
        v1461 = v1455;
        while (1)
        {
          v1456 = v1460;
          if (!v1459)
            break;
          v1455 = v1461 + 1;
          v1462 = v1461[1];
          ++v1460;
          v1459 -= 8;
          ++v1461;
          if (v1462 != -1)
            goto LABEL_1379;
        }
        v1455 = v1458;
      }
      else
      {
        v1456 = 0;
      }
    }
LABEL_1379:
    v1463 = a3[3];
    v1464 = a3[4];
    while (v1463 != v1464 && v1455 != v1458)
    {
      v1494 = *v1463;
      if (*v1463 > v1456)
      {
        v1495 = v1455 + 1;
        while (v1495 != v1458)
        {
          ++v1456;
          v1496 = *v1495++;
          if (v1496 != -1 && v1494 <= v1456)
          {
            v1455 = v1495 - 1;
            goto LABEL_1393;
          }
        }
        break;
      }
LABEL_1393:
      if (v1494 == v1456)
      {
        v1498 = *(_QWORD *)(result + 5920) + 8 * *v1455;
        if (v1498 == *(_QWORD *)a2)
        {
          v1474 = *(int8x16_t *)(v1498 + 176);
          v1473 = *(int8x16_t *)(v1498 + 192);
          v1472 = *(int8x16_t *)(v1498 + 144);
          v1471 = *(int8x16_t *)(v1498 + 160);
          v1476 = *(int8x16_t *)(v1498 + 112);
          v1475 = *(int8x16_t *)(v1498 + 128);
          v1478 = *(int8x16_t *)(v1498 + 80);
          v1477 = *(int8x16_t *)(v1498 + 96);
          v1482 = *(int8x16_t *)(v1498 + 48);
          v1488 = *(int8x16_t *)(v1498 + 64);
          v1479 = vextq_s8(v1473, v1473, 8uLL).u64[0];
          v1480 = vextq_s8(v1474, v1474, 8uLL).u64[0];
          v1481 = vextq_s8(v1471, v1471, 8uLL).u64[0];
          v1484 = vextq_s8(v1472, v1472, 8uLL).u64[0];
          v1485 = vextq_s8(v1475, v1475, 8uLL).u64[0];
          *(_QWORD *)&v1470 = vextq_s8(v1476, v1476, 8uLL).u64[0];
          *(_QWORD *)&v1469 = vextq_s8(v1477, v1477, 8uLL).u64[0];
          *(_QWORD *)&v1468 = vextq_s8(v1478, v1478, 8uLL).u64[0];
          v1465 = *(int8x16_t *)(v1498 + 16);
          v1483 = *(int8x16_t *)(v1498 + 32);
          *(_QWORD *)&v1467 = vextq_s8(v1488, v1488, 8uLL).u64[0];
          v1486 = vextq_s8(v1482, v1482, 8uLL).u64[0];
          v1487 = vextq_s8(v1483, v1483, 8uLL).u64[0];
          v1466 = *(int8x16_t *)v1498;
        }
        else
        {
          v1466 = *(int8x16_t *)v1498;
          v1465 = *(int8x16_t *)(v1498 + 16);
          v1467 = *(_OWORD *)(v1498 + 72);
          v1468 = *(_OWORD *)(v1498 + 88);
          v1469 = *(_OWORD *)(v1498 + 104);
          v1470 = *(_OWORD *)(v1498 + 120);
          v1472 = *(int8x16_t *)(v1498 + 144);
          v1471 = *(int8x16_t *)(v1498 + 160);
          v1474 = *(int8x16_t *)(v1498 + 176);
          v1473 = *(int8x16_t *)(v1498 + 192);
          v1475.i64[0] = *(_QWORD *)(v1498 + 128);
          v1476.i64[0] = *(_QWORD *)(v1498 + 112);
          v1477.i64[0] = *(_QWORD *)(v1498 + 96);
          v1478.i64[0] = *(_QWORD *)(v1498 + 80);
          v1479 = vextq_s8(v1473, v1473, 8uLL).u64[0];
          v1480 = vextq_s8(v1474, v1474, 8uLL).u64[0];
          v1481 = vextq_s8(v1471, v1471, 8uLL).u64[0];
          v1483 = *(int8x16_t *)(v1498 + 32);
          v1482 = *(int8x16_t *)(v1498 + 48);
          v1484 = vextq_s8(v1472, v1472, 8uLL).u64[0];
          v1485 = *(_QWORD *)(v1498 + 136);
          v1486 = vextq_s8(v1482, v1482, 8uLL).u64[0];
          v1487 = vextq_s8(v1483, v1483, 8uLL).u64[0];
          v1488.i64[0] = *(_QWORD *)(v1498 + 64);
        }
        v1489 = *(_QWORD *)(v1498 + 208);
        v1490 = *(unsigned int *)(a2 + 16);
        v1491 = *(_QWORD *)a2 + 8 * (v1463[1] + (_DWORD)v1490 * v1222[1]);
        v1482.i64[1] = v1486;
        v1483.i64[1] = v1487;
        v1465.i64[1] = vextq_s8(v1465, v1465, 8uLL).u64[0];
        v1466.i64[1] = vextq_s8(v1466, v1466, 8uLL).u64[0];
        *((_QWORD *)&v1470 + 1) = v1475.i64[0];
        *((_QWORD *)&v1469 + 1) = v1476.i64[0];
        *((_QWORD *)&v1468 + 1) = v1477.i64[0];
        *((_QWORD *)&v1467 + 1) = v1478.i64[0];
        v1473.i64[1] = v1479;
        v1474.i64[1] = v1480;
        v1471.i64[1] = v1481;
        v1472.i64[1] = v1484;
        *(int8x16_t *)v1491 = v1466;
        *(int8x16_t *)(v1491 + 16) = v1465;
        *(_QWORD *)(v1491 + 64) = v1488.i64[0];
        *(int8x16_t *)(v1491 + 32) = v1483;
        *(int8x16_t *)(v1491 + 48) = v1482;
        v1492 = v1491 + 8 * v1490;
        *(_OWORD *)v1492 = v1467;
        *(_OWORD *)(v1492 + 16) = v1468;
        *(_QWORD *)(v1492 + 64) = v1485;
        *(_OWORD *)(v1492 + 32) = v1469;
        *(_OWORD *)(v1492 + 48) = v1470;
        v1493 = (int8x16_t *)(v1491 + 16 * v1490);
        *v1493 = v1472;
        v1493[1] = v1471;
        v1493[4].i64[0] = v1489;
        v1456 = v1494;
        v1493[2] = v1474;
        v1493[3] = v1473;
      }
      v1463 += 2;
    }
    v1222 += 2;
  }
  while (v1222 != v1223);
  v1213 = a3[3];
  v1214 = a3[4];
  v1450 = *(_DWORD **)(a4 + 120);
  v1451 = *(_DWORD **)(a4 + 128);
  if (v1213 == v1214 || v1450 == v1451)
    goto LABEL_1401;
  do
  {
LABEL_1408:
    v1503 = *(_QWORD *)(result + 7432);
    v1504 = (*(_DWORD *)(result + 7456) * *v1450);
    v1505 = (uint64_t *)(v1503 + 8 * v1504);
    v1506 = *(_DWORD *)(result + 7352);
    v1507 = (v1504 + v1506);
    v1508 = (uint64_t *)(v1503 + 8 * v1507);
    if (v1506 && *v1505 == -1)
    {
      v1522 = 8 * v1507 - 8 * v1504 - 8;
      v1523 = 1;
      v1524 = v1505;
      while (1)
      {
        v1509 = v1523;
        if (!v1522)
          break;
        v1505 = v1524 + 1;
        v1525 = v1524[1];
        ++v1523;
        v1522 -= 8;
        ++v1524;
        if (v1525 != -1)
          goto LABEL_1411;
      }
      v1505 = v1508;
    }
    else
    {
      v1509 = 0;
    }
LABEL_1411:
    v1510 = a3[3];
    v1511 = a3[4];
    while (v1510 != v1511 && v1505 != v1508)
    {
      v1512 = *v1510;
      if (*v1510 > v1509)
      {
        v1513 = v1505 + 1;
        while (v1513 != v1508)
        {
          ++v1509;
          v1514 = *v1513++;
          if (v1514 != -1 && v1512 <= v1509)
          {
            v1505 = v1513 - 1;
            goto LABEL_1423;
          }
        }
        break;
      }
LABEL_1423:
      if (v1512 == v1509)
      {
        v1516 = *(_QWORD *)(result + 7360) + 8 * *v1505;
        v1517 = *(_QWORD *)a2 + 8 * (v1510[1] + *(_DWORD *)(a2 + 16) * v1450[1]);
        v1518 = *(_QWORD *)(v1516 + 64);
        v1519 = *(_OWORD *)(v1516 + 48);
        v1520 = *(_OWORD *)v1516;
        v1521 = *(_OWORD *)(v1516 + 16);
        *(_OWORD *)(v1517 + 32) = *(_OWORD *)(v1516 + 32);
        *(_OWORD *)(v1517 + 48) = v1519;
        *(_QWORD *)(v1517 + 64) = v1518;
        *(_OWORD *)v1517 = v1520;
        *(_OWORD *)(v1517 + 16) = v1521;
        v1509 = v1512;
      }
      v1510 += 2;
    }
    v1450 += 2;
  }
  while (v1450 != v1451);
  v1213 = a3[3];
  v1214 = a3[4];
  v1500 = *(_DWORD **)(a4 + 144);
  v1501 = *(_DWORD **)(a4 + 152);
  if (v1213 == v1214 || v1500 == v1501)
    goto LABEL_1435;
  do
  {
LABEL_1452:
    v1536 = *(_QWORD *)(result + 8872);
    v1537 = (*(_DWORD *)(result + 8896) * *v1500);
    v1538 = (uint64_t *)(v1536 + 8 * v1537);
    v1539 = *(_DWORD *)(result + 8792);
    v1540 = v1537 + v1539;
    v1541 = (uint64_t *)(v1536 + 8 * v1540);
    if (v1539)
    {
      if (*v1538 == -1)
      {
        v1542 = 8 * v1540 - 8 * v1537 - 8;
        v1543 = 1;
        v1544 = v1538;
        while (1)
        {
          v1539 = v1543;
          if (!v1542)
            break;
          v1538 = v1544 + 1;
          v1545 = v1544[1];
          ++v1543;
          v1542 -= 8;
          ++v1544;
          if (v1545 != -1)
            goto LABEL_1460;
        }
        v1538 = v1541;
      }
      else
      {
        v1539 = 0;
      }
    }
LABEL_1460:
    v1546 = a3[3];
    v1547 = a3[4];
    while (v1546 != v1547 && v1538 != v1541)
    {
      v1577 = *v1546;
      if (*v1546 > v1539)
      {
        v1578 = v1538 + 1;
        while (v1578 != v1541)
        {
          ++v1539;
          v1579 = *v1578++;
          if (v1579 != -1 && v1577 <= v1539)
          {
            v1538 = v1578 - 1;
            goto LABEL_1474;
          }
        }
        break;
      }
LABEL_1474:
      if (v1577 == v1539)
      {
        v1581 = *(_QWORD *)(result + 8800) + 8 * *v1538;
        if (v1581 == *(_QWORD *)a2)
        {
          v1557 = *(int8x16_t *)(v1581 + 176);
          v1556 = *(int8x16_t *)(v1581 + 192);
          v1555 = *(int8x16_t *)(v1581 + 144);
          v1554 = *(int8x16_t *)(v1581 + 160);
          v1559 = *(int8x16_t *)(v1581 + 112);
          v1558 = *(int8x16_t *)(v1581 + 128);
          v1561 = *(int8x16_t *)(v1581 + 80);
          v1560 = *(int8x16_t *)(v1581 + 96);
          v1565 = *(int8x16_t *)(v1581 + 48);
          v1571 = *(int8x16_t *)(v1581 + 64);
          v1562 = vextq_s8(v1556, v1556, 8uLL).u64[0];
          v1563 = vextq_s8(v1557, v1557, 8uLL).u64[0];
          v1564 = vextq_s8(v1554, v1554, 8uLL).u64[0];
          v1567 = vextq_s8(v1555, v1555, 8uLL).u64[0];
          v1568 = vextq_s8(v1558, v1558, 8uLL).u64[0];
          *(_QWORD *)&v1553 = vextq_s8(v1559, v1559, 8uLL).u64[0];
          *(_QWORD *)&v1552 = vextq_s8(v1560, v1560, 8uLL).u64[0];
          *(_QWORD *)&v1551 = vextq_s8(v1561, v1561, 8uLL).u64[0];
          v1548 = *(int8x16_t *)(v1581 + 16);
          v1566 = *(int8x16_t *)(v1581 + 32);
          *(_QWORD *)&v1550 = vextq_s8(v1571, v1571, 8uLL).u64[0];
          v1569 = vextq_s8(v1565, v1565, 8uLL).u64[0];
          v1570 = vextq_s8(v1566, v1566, 8uLL).u64[0];
          v1549 = *(int8x16_t *)v1581;
        }
        else
        {
          v1549 = *(int8x16_t *)v1581;
          v1548 = *(int8x16_t *)(v1581 + 16);
          v1550 = *(_OWORD *)(v1581 + 72);
          v1551 = *(_OWORD *)(v1581 + 88);
          v1552 = *(_OWORD *)(v1581 + 104);
          v1553 = *(_OWORD *)(v1581 + 120);
          v1555 = *(int8x16_t *)(v1581 + 144);
          v1554 = *(int8x16_t *)(v1581 + 160);
          v1557 = *(int8x16_t *)(v1581 + 176);
          v1556 = *(int8x16_t *)(v1581 + 192);
          v1558.i64[0] = *(_QWORD *)(v1581 + 128);
          v1559.i64[0] = *(_QWORD *)(v1581 + 112);
          v1560.i64[0] = *(_QWORD *)(v1581 + 96);
          v1561.i64[0] = *(_QWORD *)(v1581 + 80);
          v1562 = vextq_s8(v1556, v1556, 8uLL).u64[0];
          v1563 = vextq_s8(v1557, v1557, 8uLL).u64[0];
          v1564 = vextq_s8(v1554, v1554, 8uLL).u64[0];
          v1566 = *(int8x16_t *)(v1581 + 32);
          v1565 = *(int8x16_t *)(v1581 + 48);
          v1567 = vextq_s8(v1555, v1555, 8uLL).u64[0];
          v1568 = *(_QWORD *)(v1581 + 136);
          v1569 = vextq_s8(v1565, v1565, 8uLL).u64[0];
          v1570 = vextq_s8(v1566, v1566, 8uLL).u64[0];
          v1571.i64[0] = *(_QWORD *)(v1581 + 64);
        }
        v1572 = *(_QWORD *)(v1581 + 208);
        v1573 = *(unsigned int *)(a2 + 16);
        v1574 = *(_QWORD *)a2 + 8 * (v1546[1] + (_DWORD)v1573 * v1500[1]);
        v1565.i64[1] = v1569;
        v1566.i64[1] = v1570;
        v1548.i64[1] = vextq_s8(v1548, v1548, 8uLL).u64[0];
        v1549.i64[1] = vextq_s8(v1549, v1549, 8uLL).u64[0];
        *((_QWORD *)&v1553 + 1) = v1558.i64[0];
        *((_QWORD *)&v1552 + 1) = v1559.i64[0];
        *((_QWORD *)&v1551 + 1) = v1560.i64[0];
        *((_QWORD *)&v1550 + 1) = v1561.i64[0];
        v1556.i64[1] = v1562;
        v1557.i64[1] = v1563;
        v1554.i64[1] = v1564;
        v1555.i64[1] = v1567;
        *(int8x16_t *)v1574 = v1549;
        *(int8x16_t *)(v1574 + 16) = v1548;
        *(_QWORD *)(v1574 + 64) = v1571.i64[0];
        *(int8x16_t *)(v1574 + 32) = v1566;
        *(int8x16_t *)(v1574 + 48) = v1565;
        v1575 = v1574 + 8 * v1573;
        *(_OWORD *)v1575 = v1550;
        *(_OWORD *)(v1575 + 16) = v1551;
        *(_QWORD *)(v1575 + 64) = v1568;
        *(_OWORD *)(v1575 + 32) = v1552;
        *(_OWORD *)(v1575 + 48) = v1553;
        v1576 = (int8x16_t *)(v1574 + 16 * v1573);
        *v1576 = v1555;
        v1576[1] = v1554;
        v1576[4].i64[0] = v1572;
        v1539 = v1577;
        v1576[2] = v1557;
        v1576[3] = v1556;
      }
      v1546 += 2;
    }
    v1500 += 2;
  }
  while (v1500 != v1501);
  v1213 = a3[3];
  v1214 = a3[4];
  v1527 = *(_DWORD **)(a4 + 168);
  v1528 = *(_DWORD **)(a4 + 176);
  if (v1213 == v1214 || v1527 == v1528)
    goto LABEL_1440;
  do
  {
LABEL_1483:
    v1583 = *(_QWORD *)(result + 10312);
    v1584 = (*(_DWORD *)(result + 10336) * *v1527);
    v1585 = (uint64_t *)(v1583 + 8 * v1584);
    v1586 = *(_DWORD *)(result + 10232);
    v1587 = v1584 + v1586;
    v1588 = (uint64_t *)(v1583 + 8 * v1587);
    if (v1586)
    {
      if (*v1585 == -1)
      {
        v1589 = 8 * v1587 - 8 * v1584 - 8;
        v1590 = 1;
        v1591 = v1585;
        while (1)
        {
          v1586 = v1590;
          if (!v1589)
            break;
          v1585 = v1591 + 1;
          v1592 = v1591[1];
          ++v1590;
          v1589 -= 8;
          ++v1591;
          if (v1592 != -1)
            goto LABEL_1491;
        }
        v1585 = v1588;
      }
      else
      {
        v1586 = 0;
      }
    }
LABEL_1491:
    v1593 = a3[3];
    v1594 = a3[4];
    while (v1593 != v1594 && v1585 != v1588)
    {
      v1632 = *v1593;
      if (*v1593 > v1586)
      {
        v1633 = v1585 + 1;
        while (v1633 != v1588)
        {
          ++v1586;
          v1634 = *v1633++;
          if (v1634 != -1 && v1632 <= v1586)
          {
            v1585 = v1633 - 1;
            goto LABEL_1505;
          }
        }
        break;
      }
LABEL_1505:
      if (v1632 == v1586)
      {
        v1636 = *(_QWORD *)(result + 10240) + 8 * *v1585;
        if (v1636 == *(_QWORD *)a2)
        {
          v1625 = *(int8x16_t *)(v1636 + 272);
          v1626 = *(int8x16_t *)(v1636 + 224);
          v1600 = *(int8x16_t *)(v1636 + 192);
          v1620 = *(int8x16_t *)(v1636 + 208);
          v1607 = *(int8x16_t *)(v1636 + 160);
          v1601 = *(int8x16_t *)(v1636 + 176);
          v1612 = *(int8x16_t *)(v1636 + 128);
          v1608 = *(int8x16_t *)(v1636 + 144);
          v2284 = vextq_s8(v1625, v1625, 8uLL).u64[0];
          v2296 = *(int8x16_t *)(v1636 + 240);
          v2308 = *(int8x16_t *)(v1636 + 256);
          v1623.i64[0] = vextq_s8(v2308, v2308, 8uLL).u64[0];
          v1603.i64[0] = vextq_s8(v2296, v2296, 8uLL).u64[0];
          v1604.i64[0] = vextq_s8(v1626, v1626, 8uLL).u64[0];
          v1602.i64[0] = vextq_s8(v1620, v1620, 8uLL).u64[0];
          v1605 = vextq_s8(v1600, v1600, 8uLL).u64[0];
          v1606 = vextq_s8(v1601, v1601, 8uLL).u64[0];
          v1609 = vextq_s8(v1607, v1607, 8uLL).u64[0];
          v1616 = *(int8x16_t *)(v1636 + 96);
          v1614 = *(int8x16_t *)(v1636 + 112);
          v1611 = vextq_s8(v1608, v1608, 8uLL).u64[0];
          v1618 = vextq_s8(v1612, v1612, 8uLL).u64[0];
          v1610.i64[0] = vextq_s8(v1614, v1614, 8uLL).u64[0];
          v1617 = *(int8x16_t *)(v1636 + 80);
          v1613.i64[0] = vextq_s8(v1616, v1616, 8uLL).u64[0];
          v1615.i64[0] = vextq_s8(v1617, v1617, 8uLL).u64[0];
          v2320 = *(int8x16_t *)(v1636 + 64);
          v1599.i64[0] = vextq_s8(v2320, v2320, 8uLL).u64[0];
          v1597 = *(int8x16_t *)(v1636 + 32);
          v1598 = *(int8x16_t *)(v1636 + 48);
          v1619 = vextq_s8(v1598, v1598, 8uLL).u64[0];
          v1621 = vextq_s8(v1597, v1597, 8uLL).u64[0];
          v1596 = *(int8x16_t *)v1636;
          v1595 = *(int8x16_t *)(v1636 + 16);
          v1622 = vextq_s8(v1595, v1595, 8uLL).u64[0];
          v1624 = vextq_s8(v1596, v1596, 8uLL).u64[0];
        }
        else
        {
          v2320.i64[0] = *(_QWORD *)(v1636 + 64);
          v1596 = *(int8x16_t *)v1636;
          v1595 = *(int8x16_t *)(v1636 + 16);
          v1597 = *(int8x16_t *)(v1636 + 32);
          v1598 = *(int8x16_t *)(v1636 + 48);
          v1599 = *(int8x16_t *)(v1636 + 72);
          v1601 = *(int8x16_t *)(v1636 + 176);
          v1600 = *(int8x16_t *)(v1636 + 192);
          v1602 = *(int8x16_t *)(v1636 + 216);
          v1603 = *(int8x16_t *)(v1636 + 248);
          v1604 = *(int8x16_t *)(v1636 + 232);
          v2296.i64[0] = vextq_s8(v1604, v1604, 8uLL).u64[0];
          v2308.i64[0] = vextq_s8(v1603, v1603, 8uLL).u64[0];
          v1605 = vextq_s8(v1600, v1600, 8uLL).u64[0];
          v1606 = vextq_s8(v1601, v1601, 8uLL).u64[0];
          v1608 = *(int8x16_t *)(v1636 + 144);
          v1607 = *(int8x16_t *)(v1636 + 160);
          v1609 = vextq_s8(v1607, v1607, 8uLL).u64[0];
          v1610 = *(int8x16_t *)(v1636 + 120);
          v1611 = vextq_s8(v1608, v1608, 8uLL).u64[0];
          v1612.i64[0] = vextq_s8(v1610, v1610, 8uLL).u64[0];
          v1613 = *(int8x16_t *)(v1636 + 104);
          v1614.i64[0] = vextq_s8(v1613, v1613, 8uLL).u64[0];
          v1615 = *(int8x16_t *)(v1636 + 88);
          v1616.i64[0] = vextq_s8(v1615, v1615, 8uLL).u64[0];
          v1617.i64[0] = vextq_s8(v1599, v1599, 8uLL).u64[0];
          v1618 = *(_QWORD *)(v1636 + 136);
          v1619 = vextq_s8(v1598, v1598, 8uLL).u64[0];
          v1620.i64[0] = *(_QWORD *)(v1636 + 208);
          v1621 = vextq_s8(v1597, v1597, 8uLL).u64[0];
          v1622 = vextq_s8(v1595, v1595, 8uLL).u64[0];
          v1623 = *(int8x16_t *)(v1636 + 264);
          v1624 = vextq_s8(v1596, v1596, 8uLL).u64[0];
          v1625.i64[0] = vextq_s8(v1623, v1623, 8uLL).u64[0];
          v2284 = *(_QWORD *)(v1636 + 280);
          v1626.i64[0] = vextq_s8(v1602, v1602, 8uLL).u64[0];
        }
        v1598.i64[1] = v1619;
        v1597.i64[1] = v1621;
        v1595.i64[1] = v1622;
        v1596.i64[1] = v1624;
        v1627 = *(unsigned int *)(a2 + 16);
        v1628 = *(_QWORD *)a2 + 8 * (v1593[1] + (_DWORD)v1627 * v1527[1]);
        v1610.i64[1] = v1612.i64[0];
        v1613.i64[1] = v1614.i64[0];
        v1615.i64[1] = v1616.i64[0];
        v1599.i64[1] = v1617.i64[0];
        v1600.i64[1] = v1605;
        v1601.i64[1] = v1606;
        v1607.i64[1] = v1609;
        v1608.i64[1] = v1611;
        v1623.i64[1] = v1625.i64[0];
        v1603.i64[1] = v2308.i64[0];
        v1604.i64[1] = v2296.i64[0];
        v1602.i64[1] = v1626.i64[0];
        *(int8x16_t *)v1628 = v1596;
        *(int8x16_t *)(v1628 + 16) = v1595;
        *(_QWORD *)(v1628 + 64) = v2320.i64[0];
        *(int8x16_t *)(v1628 + 32) = v1597;
        *(int8x16_t *)(v1628 + 48) = v1598;
        v1629 = (int8x16_t *)(v1628 + 8 * v1627);
        *v1629 = v1599;
        v1629[1] = v1615;
        v1629[4].i64[0] = v1618;
        v1629[2] = v1613;
        v1629[3] = v1610;
        v1630 = (int8x16_t *)(v1628 + 16 * v1627);
        *v1630 = v1608;
        v1630[1] = v1607;
        v1630[4].i64[0] = v1620.i64[0];
        v1630[2] = v1601;
        v1630[3] = v1600;
        v1631 = (int8x16_t *)(v1628 + 24 * v1627);
        *v1631 = v1602;
        v1631[1] = v1604;
        v1631[4].i64[0] = v2284;
        v1586 = v1632;
        v1631[2] = v1603;
        v1631[3] = v1623;
      }
      v1593 += 2;
    }
    v1527 += 2;
  }
  while (v1527 != v1528);
  v1213 = a3[3];
  v1214 = a3[4];
  v1530 = *(_DWORD **)(a4 + 192);
  v1531 = *(_DWORD **)(a4 + 200);
  if (v1213 == v1214 || v1530 == v1531)
    goto LABEL_1445;
  do
  {
LABEL_1514:
    v1638 = *(_QWORD *)(result + 11752);
    v1639 = (*(_DWORD *)(result + 11776) * *v1530);
    v1640 = (uint64_t *)(v1638 + 8 * v1639);
    v1641 = *(_DWORD *)(result + 11672);
    v1642 = v1639 + v1641;
    v1643 = (uint64_t *)(v1638 + 8 * v1642);
    if (v1641)
    {
      if (*v1640 == -1)
      {
        v1644 = 8 * v1642 - 8 * v1639 - 8;
        v1645 = 1;
        v1646 = v1640;
        while (1)
        {
          v1641 = v1645;
          if (!v1644)
            break;
          v1640 = v1646 + 1;
          v1647 = v1646[1];
          ++v1645;
          v1644 -= 8;
          ++v1646;
          if (v1647 != -1)
            goto LABEL_1522;
        }
        v1640 = v1643;
      }
      else
      {
        v1641 = 0;
      }
    }
LABEL_1522:
    v1648 = a3[3];
    v1649 = a3[4];
    while (v1648 != v1649 && v1640 != v1643)
    {
      v1687 = *v1648;
      if (*v1648 > v1641)
      {
        v1688 = v1640 + 1;
        while (v1688 != v1643)
        {
          ++v1641;
          v1689 = *v1688++;
          if (v1689 != -1 && v1687 <= v1641)
          {
            v1640 = v1688 - 1;
            goto LABEL_1536;
          }
        }
        break;
      }
LABEL_1536:
      if (v1687 == v1641)
      {
        v1691 = *(_QWORD *)(result + 11680) + 8 * *v1640;
        if (v1691 == *(_QWORD *)a2)
        {
          v1680 = *(int8x16_t *)(v1691 + 272);
          v1681 = *(int8x16_t *)(v1691 + 224);
          v1655 = *(int8x16_t *)(v1691 + 192);
          v1675 = *(int8x16_t *)(v1691 + 208);
          v1662 = *(int8x16_t *)(v1691 + 160);
          v1656 = *(int8x16_t *)(v1691 + 176);
          v1667 = *(int8x16_t *)(v1691 + 128);
          v1663 = *(int8x16_t *)(v1691 + 144);
          v2285 = vextq_s8(v1680, v1680, 8uLL).u64[0];
          v2297 = *(int8x16_t *)(v1691 + 240);
          v2309 = *(int8x16_t *)(v1691 + 256);
          v1678.i64[0] = vextq_s8(v2309, v2309, 8uLL).u64[0];
          v1658.i64[0] = vextq_s8(v2297, v2297, 8uLL).u64[0];
          v1659.i64[0] = vextq_s8(v1681, v1681, 8uLL).u64[0];
          v1657.i64[0] = vextq_s8(v1675, v1675, 8uLL).u64[0];
          v1660 = vextq_s8(v1655, v1655, 8uLL).u64[0];
          v1661 = vextq_s8(v1656, v1656, 8uLL).u64[0];
          v1664 = vextq_s8(v1662, v1662, 8uLL).u64[0];
          v1671 = *(int8x16_t *)(v1691 + 96);
          v1669 = *(int8x16_t *)(v1691 + 112);
          v1666 = vextq_s8(v1663, v1663, 8uLL).u64[0];
          v1673 = vextq_s8(v1667, v1667, 8uLL).u64[0];
          v1665.i64[0] = vextq_s8(v1669, v1669, 8uLL).u64[0];
          v1672 = *(int8x16_t *)(v1691 + 80);
          v1668.i64[0] = vextq_s8(v1671, v1671, 8uLL).u64[0];
          v1670.i64[0] = vextq_s8(v1672, v1672, 8uLL).u64[0];
          v2321 = *(int8x16_t *)(v1691 + 64);
          v1654.i64[0] = vextq_s8(v2321, v2321, 8uLL).u64[0];
          v1652 = *(int8x16_t *)(v1691 + 32);
          v1653 = *(int8x16_t *)(v1691 + 48);
          v1674 = vextq_s8(v1653, v1653, 8uLL).u64[0];
          v1676 = vextq_s8(v1652, v1652, 8uLL).u64[0];
          v1651 = *(int8x16_t *)v1691;
          v1650 = *(int8x16_t *)(v1691 + 16);
          v1677 = vextq_s8(v1650, v1650, 8uLL).u64[0];
          v1679 = vextq_s8(v1651, v1651, 8uLL).u64[0];
        }
        else
        {
          v2321.i64[0] = *(_QWORD *)(v1691 + 64);
          v1651 = *(int8x16_t *)v1691;
          v1650 = *(int8x16_t *)(v1691 + 16);
          v1652 = *(int8x16_t *)(v1691 + 32);
          v1653 = *(int8x16_t *)(v1691 + 48);
          v1654 = *(int8x16_t *)(v1691 + 72);
          v1656 = *(int8x16_t *)(v1691 + 176);
          v1655 = *(int8x16_t *)(v1691 + 192);
          v1657 = *(int8x16_t *)(v1691 + 216);
          v1658 = *(int8x16_t *)(v1691 + 248);
          v1659 = *(int8x16_t *)(v1691 + 232);
          v2297.i64[0] = vextq_s8(v1659, v1659, 8uLL).u64[0];
          v2309.i64[0] = vextq_s8(v1658, v1658, 8uLL).u64[0];
          v1660 = vextq_s8(v1655, v1655, 8uLL).u64[0];
          v1661 = vextq_s8(v1656, v1656, 8uLL).u64[0];
          v1663 = *(int8x16_t *)(v1691 + 144);
          v1662 = *(int8x16_t *)(v1691 + 160);
          v1664 = vextq_s8(v1662, v1662, 8uLL).u64[0];
          v1665 = *(int8x16_t *)(v1691 + 120);
          v1666 = vextq_s8(v1663, v1663, 8uLL).u64[0];
          v1667.i64[0] = vextq_s8(v1665, v1665, 8uLL).u64[0];
          v1668 = *(int8x16_t *)(v1691 + 104);
          v1669.i64[0] = vextq_s8(v1668, v1668, 8uLL).u64[0];
          v1670 = *(int8x16_t *)(v1691 + 88);
          v1671.i64[0] = vextq_s8(v1670, v1670, 8uLL).u64[0];
          v1672.i64[0] = vextq_s8(v1654, v1654, 8uLL).u64[0];
          v1673 = *(_QWORD *)(v1691 + 136);
          v1674 = vextq_s8(v1653, v1653, 8uLL).u64[0];
          v1675.i64[0] = *(_QWORD *)(v1691 + 208);
          v1676 = vextq_s8(v1652, v1652, 8uLL).u64[0];
          v1677 = vextq_s8(v1650, v1650, 8uLL).u64[0];
          v1678 = *(int8x16_t *)(v1691 + 264);
          v1679 = vextq_s8(v1651, v1651, 8uLL).u64[0];
          v1680.i64[0] = vextq_s8(v1678, v1678, 8uLL).u64[0];
          v2285 = *(_QWORD *)(v1691 + 280);
          v1681.i64[0] = vextq_s8(v1657, v1657, 8uLL).u64[0];
        }
        v1653.i64[1] = v1674;
        v1652.i64[1] = v1676;
        v1650.i64[1] = v1677;
        v1651.i64[1] = v1679;
        v1682 = *(unsigned int *)(a2 + 16);
        v1683 = *(_QWORD *)a2 + 8 * (v1648[1] + (_DWORD)v1682 * v1530[1]);
        v1665.i64[1] = v1667.i64[0];
        v1668.i64[1] = v1669.i64[0];
        v1670.i64[1] = v1671.i64[0];
        v1654.i64[1] = v1672.i64[0];
        v1655.i64[1] = v1660;
        v1656.i64[1] = v1661;
        v1662.i64[1] = v1664;
        v1663.i64[1] = v1666;
        v1678.i64[1] = v1680.i64[0];
        v1658.i64[1] = v2309.i64[0];
        v1659.i64[1] = v2297.i64[0];
        v1657.i64[1] = v1681.i64[0];
        *(int8x16_t *)v1683 = v1651;
        *(int8x16_t *)(v1683 + 16) = v1650;
        *(_QWORD *)(v1683 + 64) = v2321.i64[0];
        *(int8x16_t *)(v1683 + 32) = v1652;
        *(int8x16_t *)(v1683 + 48) = v1653;
        v1684 = (int8x16_t *)(v1683 + 8 * v1682);
        *v1684 = v1654;
        v1684[1] = v1670;
        v1684[4].i64[0] = v1673;
        v1684[2] = v1668;
        v1684[3] = v1665;
        v1685 = (int8x16_t *)(v1683 + 16 * v1682);
        *v1685 = v1663;
        v1685[1] = v1662;
        v1685[4].i64[0] = v1675.i64[0];
        v1685[2] = v1656;
        v1685[3] = v1655;
        v1686 = (int8x16_t *)(v1683 + 24 * v1682);
        *v1686 = v1657;
        v1686[1] = v1659;
        v1686[4].i64[0] = v2285;
        v1641 = v1687;
        v1686[2] = v1658;
        v1686[3] = v1678;
      }
      v1648 += 2;
    }
    v1530 += 2;
  }
  while (v1530 != v1531);
  v1533 = *(_DWORD **)(a4 + 216);
  v1534 = *(_DWORD **)(a4 + 224);
  if (a3[3] != a3[4] && v1533 != v1534)
  {
    do
    {
LABEL_1571:
      v1710 = *(_QWORD *)(result + 13192);
      v1711 = (*(_DWORD *)(result + 13216) * *v1533);
      v1712 = (uint64_t *)(v1710 + 8 * v1711);
      v1713 = *(_DWORD *)(result + 13112);
      v1714 = v1711 + v1713;
      v1715 = (uint64_t *)(v1710 + 8 * v1714);
      if (v1713)
      {
        if (*v1712 == -1)
        {
          v1716 = 8 * v1714 - 8 * v1711 - 8;
          v1717 = 1;
          v1718 = v1712;
          while (1)
          {
            v1713 = v1717;
            if (!v1716)
              break;
            v1712 = v1718 + 1;
            v1719 = v1718[1];
            ++v1717;
            v1716 -= 8;
            ++v1718;
            if (v1719 != -1)
              goto LABEL_1579;
          }
          v1712 = v1715;
        }
        else
        {
          v1713 = 0;
        }
      }
LABEL_1579:
      v1720 = a3[3];
      v1721 = a3[4];
      while (v1720 != v1721 && v1712 != v1715)
      {
        v1751 = *v1720;
        if (*v1720 > v1713)
        {
          v1752 = v1712 + 1;
          while (v1752 != v1715)
          {
            ++v1713;
            v1753 = *v1752++;
            if (v1753 != -1 && v1751 <= v1713)
            {
              v1712 = v1752 - 1;
              goto LABEL_1593;
            }
          }
          break;
        }
LABEL_1593:
        if (v1751 == v1713)
        {
          v1755 = *(_QWORD *)(result + 13120) + 8 * *v1712;
          if (v1755 == *(_QWORD *)a2)
          {
            v1731 = *(int8x16_t *)(v1755 + 176);
            v1730 = *(int8x16_t *)(v1755 + 192);
            v1729 = *(int8x16_t *)(v1755 + 144);
            v1728 = *(int8x16_t *)(v1755 + 160);
            v1733 = *(int8x16_t *)(v1755 + 112);
            v1732 = *(int8x16_t *)(v1755 + 128);
            v1735 = *(int8x16_t *)(v1755 + 80);
            v1734 = *(int8x16_t *)(v1755 + 96);
            v1739 = *(int8x16_t *)(v1755 + 48);
            v1745 = *(int8x16_t *)(v1755 + 64);
            v1736 = vextq_s8(v1730, v1730, 8uLL).u64[0];
            v1737 = vextq_s8(v1731, v1731, 8uLL).u64[0];
            v1738 = vextq_s8(v1728, v1728, 8uLL).u64[0];
            v1741 = vextq_s8(v1729, v1729, 8uLL).u64[0];
            v1742 = vextq_s8(v1732, v1732, 8uLL).u64[0];
            *(_QWORD *)&v1727 = vextq_s8(v1733, v1733, 8uLL).u64[0];
            *(_QWORD *)&v1726 = vextq_s8(v1734, v1734, 8uLL).u64[0];
            *(_QWORD *)&v1725 = vextq_s8(v1735, v1735, 8uLL).u64[0];
            v1722 = *(int8x16_t *)(v1755 + 16);
            v1740 = *(int8x16_t *)(v1755 + 32);
            *(_QWORD *)&v1724 = vextq_s8(v1745, v1745, 8uLL).u64[0];
            v1743 = vextq_s8(v1739, v1739, 8uLL).u64[0];
            v1744 = vextq_s8(v1740, v1740, 8uLL).u64[0];
            v1723 = *(int8x16_t *)v1755;
          }
          else
          {
            v1723 = *(int8x16_t *)v1755;
            v1722 = *(int8x16_t *)(v1755 + 16);
            v1724 = *(_OWORD *)(v1755 + 72);
            v1725 = *(_OWORD *)(v1755 + 88);
            v1726 = *(_OWORD *)(v1755 + 104);
            v1727 = *(_OWORD *)(v1755 + 120);
            v1729 = *(int8x16_t *)(v1755 + 144);
            v1728 = *(int8x16_t *)(v1755 + 160);
            v1731 = *(int8x16_t *)(v1755 + 176);
            v1730 = *(int8x16_t *)(v1755 + 192);
            v1732.i64[0] = *(_QWORD *)(v1755 + 128);
            v1733.i64[0] = *(_QWORD *)(v1755 + 112);
            v1734.i64[0] = *(_QWORD *)(v1755 + 96);
            v1735.i64[0] = *(_QWORD *)(v1755 + 80);
            v1736 = vextq_s8(v1730, v1730, 8uLL).u64[0];
            v1737 = vextq_s8(v1731, v1731, 8uLL).u64[0];
            v1738 = vextq_s8(v1728, v1728, 8uLL).u64[0];
            v1740 = *(int8x16_t *)(v1755 + 32);
            v1739 = *(int8x16_t *)(v1755 + 48);
            v1741 = vextq_s8(v1729, v1729, 8uLL).u64[0];
            v1742 = *(_QWORD *)(v1755 + 136);
            v1743 = vextq_s8(v1739, v1739, 8uLL).u64[0];
            v1744 = vextq_s8(v1740, v1740, 8uLL).u64[0];
            v1745.i64[0] = *(_QWORD *)(v1755 + 64);
          }
          v1746 = *(_QWORD *)(v1755 + 208);
          v1747 = *(unsigned int *)(a2 + 16);
          v1748 = *(_QWORD *)a2 + 8 * (v1720[1] + (_DWORD)v1747 * v1533[1]);
          v1739.i64[1] = v1743;
          v1740.i64[1] = v1744;
          v1722.i64[1] = vextq_s8(v1722, v1722, 8uLL).u64[0];
          v1723.i64[1] = vextq_s8(v1723, v1723, 8uLL).u64[0];
          *((_QWORD *)&v1727 + 1) = v1732.i64[0];
          *((_QWORD *)&v1726 + 1) = v1733.i64[0];
          *((_QWORD *)&v1725 + 1) = v1734.i64[0];
          *((_QWORD *)&v1724 + 1) = v1735.i64[0];
          v1730.i64[1] = v1736;
          v1731.i64[1] = v1737;
          v1728.i64[1] = v1738;
          v1729.i64[1] = v1741;
          *(int8x16_t *)v1748 = v1723;
          *(int8x16_t *)(v1748 + 16) = v1722;
          *(_QWORD *)(v1748 + 64) = v1745.i64[0];
          *(int8x16_t *)(v1748 + 32) = v1740;
          *(int8x16_t *)(v1748 + 48) = v1739;
          v1749 = v1748 + 8 * v1747;
          *(_OWORD *)v1749 = v1724;
          *(_OWORD *)(v1749 + 16) = v1725;
          *(_QWORD *)(v1749 + 64) = v1742;
          *(_OWORD *)(v1749 + 32) = v1726;
          *(_OWORD *)(v1749 + 48) = v1727;
          v1750 = (int8x16_t *)(v1748 + 16 * v1747);
          *v1750 = v1729;
          v1750[1] = v1728;
          v1750[4].i64[0] = v1746;
          v1713 = v1751;
          v1750[2] = v1731;
          v1750[3] = v1730;
        }
        v1720 += 2;
      }
      v1533 += 2;
    }
    while (v1533 != v1534);
  }
LABEL_1544:
  v1693 = *(_DWORD **)a4;
  v1694 = *(_DWORD **)(a4 + 8);
  v1695 = *a3;
  v1696 = a3[1];
  if (*a3 == v1696 || v1693 == v1694)
  {
    v1698 = *(_DWORD **)(a4 + 24);
    v1699 = *(_DWORD **)(a4 + 32);
    if (v1695 != v1696 && v1698 != v1699)
      goto LABEL_1628;
LABEL_1554:
    v1701 = *(_DWORD **)(a4 + 48);
    v1702 = *(_DWORD **)(a4 + 56);
    if (v1695 != v1696 && v1701 != v1702)
      goto LABEL_1659;
LABEL_1559:
    v1704 = *(_DWORD **)(a4 + 72);
    v1705 = *(_DWORD **)(a4 + 80);
    if (v1695 != v1696 && v1704 != v1705)
      goto LABEL_1690;
LABEL_1564:
    v1707 = *(_DWORD **)(a4 + 96);
    v1708 = *(_DWORD **)(a4 + 104);
    if (v1695 != v1696 && v1707 != v1708)
      goto LABEL_1727;
LABEL_1720:
    v1961 = *(_DWORD **)(a4 + 120);
    v1962 = *(_DWORD **)(a4 + 128);
    if (v1695 != v1696 && v1961 != v1962)
      goto LABEL_1764;
LABEL_1757:
    v1998 = *(_DWORD **)(a4 + 144);
    v1999 = *(_DWORD **)(a4 + 152);
    if (v1695 != v1696 && v1998 != v1999)
      goto LABEL_1808;
LABEL_1791:
    v2023 = *(_DWORD **)(a4 + 168);
    v2024 = *(_DWORD **)(a4 + 176);
    if (v1695 != v1696 && v2023 != v2024)
      goto LABEL_1839;
LABEL_1796:
    v2026 = *(_DWORD **)(a4 + 192);
    v2027 = *(_DWORD **)(a4 + 200);
    if (v1695 != v1696 && v2026 != v2027)
      goto LABEL_1870;
LABEL_1801:
    v2029 = *(_DWORD **)(a4 + 216);
    v2030 = *(_DWORD **)(a4 + 224);
    if (v1695 == v1696 || v2029 == v2030)
      return result;
    goto LABEL_1902;
  }
  do
  {
    v1756 = *(_QWORD *)(result + 88);
    v1757 = (*(_DWORD *)(result + 112) * *v1693);
    v1758 = (uint64_t *)(v1756 + 8 * v1757);
    v1759 = *(_DWORD *)(result + 8);
    v1760 = v1757 + v1759;
    v1761 = (uint64_t *)(v1756 + 8 * v1760);
    if (v1759)
    {
      if (*v1758 == -1)
      {
        v1762 = 8 * v1760 - 8 * v1757 - 8;
        v1763 = 1;
        v1764 = v1758;
        while (1)
        {
          v1759 = v1763;
          if (!v1762)
            break;
          v1758 = v1764 + 1;
          v1765 = v1764[1];
          ++v1763;
          v1762 -= 8;
          ++v1764;
          if (v1765 != -1)
            goto LABEL_1605;
        }
        v1758 = v1761;
      }
      else
      {
        v1759 = 0;
      }
    }
LABEL_1605:
    v1766 = *a3;
    v1767 = a3[1];
    while (v1766 != v1767 && v1758 != v1761)
    {
      v1797 = *v1766;
      if (*v1766 > v1759)
      {
        v1798 = v1758 + 1;
        while (v1798 != v1761)
        {
          ++v1759;
          v1799 = *v1798++;
          if (v1799 != -1 && v1797 <= v1759)
          {
            v1758 = v1798 - 1;
            goto LABEL_1619;
          }
        }
        break;
      }
LABEL_1619:
      if (v1797 == v1759)
      {
        v1801 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v1758);
        if (v1801 == *(int8x16_t **)a2)
        {
          v1777 = v1801[16];
          v1776 = v1801[17];
          v1775 = v1801[14];
          v1774 = v1801[15];
          v1773 = v1801[12];
          v1772 = v1801[13];
          v1771 = v1801[10];
          v1770 = v1801[11];
          v1783 = v1801[8];
          v1782 = v1801[9];
          v2310 = vextq_s8(v1777, v1777, 8uLL).u64[0];
          v2322 = vextq_s8(v1776, v1776, 8uLL).u64[0];
          v1778 = vextq_s8(v1775, v1775, 8uLL).u64[0];
          v1779 = vextq_s8(v1772, v1772, 8uLL).u64[0];
          v1780 = vextq_s8(v1773, v1773, 8uLL).u64[0];
          v2286 = vextq_s8(v1770, v1770, 8uLL).u64[0];
          v2298 = vextq_s8(v1774, v1774, 8uLL).u64[0];
          v1781 = vextq_s8(v1771, v1771, 8uLL).u64[0];
          v1769 = v1801[6];
          v1768 = v1801[7];
        }
        else
        {
          v1769 = v1801[6];
          v1768 = v1801[7];
          v1771 = v1801[10];
          v1770 = v1801[11];
          v1773 = v1801[12];
          v1772 = v1801[13];
          v1775 = v1801[14];
          v1774 = v1801[15];
          v1777 = v1801[16];
          v1776 = v1801[17];
          v2310 = vextq_s8(v1777, v1777, 8uLL).u64[0];
          v2322 = vextq_s8(v1776, v1776, 8uLL).u64[0];
          v1778 = vextq_s8(v1775, v1775, 8uLL).u64[0];
          v1779 = vextq_s8(v1772, v1772, 8uLL).u64[0];
          v1780 = vextq_s8(v1773, v1773, 8uLL).u64[0];
          v2286 = vextq_s8(v1770, v1770, 8uLL).u64[0];
          v2298 = vextq_s8(v1774, v1774, 8uLL).u64[0];
          v1781 = vextq_s8(v1771, v1771, 8uLL).u64[0];
          v1783 = v1801[8];
          v1782 = v1801[9];
        }
        v1785 = v1801[4];
        v1784 = v1801[5];
        v1787 = v1801[2];
        v1786 = v1801[3];
        v1789 = *v1801;
        v1788 = v1801[1];
        v1775.i64[1] = v1778;
        v1772.i64[1] = v1779;
        v1773.i64[1] = v1780;
        v1787.i64[1] = vextq_s8(v1787, v1787, 8uLL).u64[0];
        v1790 = *(unsigned int *)(a2 + 16);
        v1791 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1766[1] + (_DWORD)v1790 * v1693[1]));
        v1788.i64[1] = vextq_s8(v1788, v1788, 8uLL).u64[0];
        v1789.i64[1] = vextq_s8(v1789, v1789, 8uLL).u64[0];
        v1784.i64[1] = vextq_s8(v1784, v1784, 8uLL).u64[0];
        v1785.i64[1] = vextq_s8(v1785, v1785, 8uLL).u64[0];
        v1786.i64[1] = vextq_s8(v1786, v1786, 8uLL).u64[0];
        v1783.i64[1] = vextq_s8(v1783, v1783, 8uLL).u64[0];
        v1768.i64[1] = vextq_s8(v1768, v1768, 8uLL).u64[0];
        v1769.i64[1] = vextq_s8(v1769, v1769, 8uLL).u64[0];
        v1770.i64[1] = v2286;
        v1771.i64[1] = v1781;
        v1782.i64[1] = vextq_s8(v1782, v1782, 8uLL).u64[0];
        v1776.i64[1] = v2322;
        v1777.i64[1] = v2310;
        v1774.i64[1] = v2298;
        *v1791 = v1789;
        v1791[1] = v1788;
        v1791[2] = v1787;
        v1792 = (int8x16_t *)((char *)v1791 + 8 * v1790);
        *v1792 = v1786;
        v1792[1] = v1785;
        v1792[2] = v1784;
        v1793 = &v1791[v1790];
        *v1793 = v1769;
        v1793[1] = v1768;
        v1793[2] = v1783;
        v1794 = (int8x16_t *)((char *)v1791 + 24 * v1790);
        *v1794 = v1782;
        v1794[1] = v1771;
        v1794[2] = v1770;
        v1795 = &v1791[2 * v1790];
        *v1795 = v1773;
        v1795[1] = v1772;
        v1795[2] = v1775;
        v1796 = (int8x16_t *)((char *)v1791 + 40 * v1790);
        *v1796 = v1774;
        v1796[1] = v1777;
        v1759 = v1797;
        v1796[2] = v1776;
      }
      v1766 += 2;
    }
    v1693 += 2;
  }
  while (v1693 != v1694);
  v1695 = *a3;
  v1696 = a3[1];
  v1698 = *(_DWORD **)(a4 + 24);
  v1699 = *(_DWORD **)(a4 + 32);
  if (*a3 == v1696 || v1698 == v1699)
    goto LABEL_1554;
  do
  {
LABEL_1628:
    v1803 = *(_QWORD *)(result + 1528);
    v1804 = (*(_DWORD *)(result + 1552) * *v1698);
    v1805 = (uint64_t *)(v1803 + 8 * v1804);
    v1806 = *(_DWORD *)(result + 1448);
    v1807 = v1804 + v1806;
    v1808 = (uint64_t *)(v1803 + 8 * v1807);
    if (v1806)
    {
      if (*v1805 == -1)
      {
        v1809 = 8 * v1807 - 8 * v1804 - 8;
        v1810 = 1;
        v1811 = v1805;
        while (1)
        {
          v1806 = v1810;
          if (!v1809)
            break;
          v1805 = v1811 + 1;
          v1812 = v1811[1];
          ++v1810;
          v1809 -= 8;
          ++v1811;
          if (v1812 != -1)
            goto LABEL_1636;
        }
        v1805 = v1808;
      }
      else
      {
        v1806 = 0;
      }
    }
LABEL_1636:
    v1813 = *a3;
    v1814 = a3[1];
    while (v1813 != v1814 && v1805 != v1808)
    {
      v1861 = *v1813;
      if (*v1813 > v1806)
      {
        v1862 = v1805 + 1;
        while (v1862 != v1808)
        {
          ++v1806;
          v1863 = *v1862++;
          if (v1863 != -1 && v1861 <= v1806)
          {
            v1805 = v1862 - 1;
            goto LABEL_1650;
          }
        }
        break;
      }
LABEL_1650:
      if (v1861 == v1806)
      {
        v1865 = (int8x16_t *)(*(_QWORD *)(result + 1456) + 8 * *v1805);
        if (v1865 == *(int8x16_t **)a2)
        {
          v1820 = v1865[17];
          v2311 = v1865[25];
          v2323 = v1865[26];
          v1819 = vextq_s8(v2323, v2323, 8uLL).u64[0];
          v2236 = vextq_s8(v2311, v2311, 8uLL).u64[0];
          v1822 = v1865[15];
          v1821 = v1865[16];
          v2287 = v1865[19];
          v2299 = v1865[24];
          v2232 = vextq_s8(v2299, v2299, 8uLL).u64[0];
          v2269 = v1865[22];
          v2273 = v1865[23];
          v2257 = vextq_s8(v2273, v2273, 8uLL).u64[0];
          v2261 = v1865[20];
          v2253 = vextq_s8(v2269, v2269, 8uLL).u64[0];
          v1817 = v1865[13];
          v1823 = v1865[14];
          v2265 = v1865[21];
          v2249 = vextq_s8(v2265, v2265, 8uLL).u64[0];
          v2228 = vextq_s8(v2261, v2261, 8uLL).u64[0];
          v2245 = vextq_s8(v2287, v2287, 8uLL).u64[0];
          v1824 = v1865[11];
          v1818 = v1865[12];
          v2277 = v1865[18];
          v2241 = vextq_s8(v2277, v2277, 8uLL).u64[0];
          v2224 = vextq_s8(v1820, v1820, 8uLL).u64[0];
          v2219 = vextq_s8(v1821, v1821, 8uLL).u64[0];
          v1826 = v1865[9];
          v1825 = v1865[10];
          v2215 = vextq_s8(v1822, v1822, 8uLL).u64[0];
          v2211 = vextq_s8(v1823, v1823, 8uLL).u64[0];
          v2207 = vextq_s8(v1817, v1817, 8uLL).u64[0];
          v1815 = v1865[7];
          v1827 = v1865[8];
          v2199 = vextq_s8(v1818, v1818, 8uLL).u64[0];
          v2203 = vextq_s8(v1824, v1824, 8uLL).u64[0];
          v2197 = vextq_s8(v1825, v1825, 8uLL).u64[0];
          v1831 = v1865[5];
          v1816 = v1865[6];
          v1828 = vextq_s8(v1826, v1826, 8uLL).u64[0];
          v1829 = vextq_s8(v1827, v1827, 8uLL).u64[0];
          v1830 = vextq_s8(v1815, v1815, 8uLL).u64[0];
          v1836 = v1865[3];
          v1832 = v1865[4];
          v1833 = vextq_s8(v1816, v1816, 8uLL).u64[0];
          v1834 = vextq_s8(v1831, v1831, 8uLL).u64[0];
          v1835 = vextq_s8(v1832, v1832, 8uLL).u64[0];
          v1840 = v1865[1];
          v1837 = v1865[2];
          v1838 = vextq_s8(v1836, v1836, 8uLL).u64[0];
          v1839 = vextq_s8(v1837, v1837, 8uLL).u64[0];
          v1841 = *v1865;
        }
        else
        {
          v1816 = v1865[6];
          v1815 = v1865[7];
          v1818 = v1865[12];
          v1817 = v1865[13];
          v2311 = v1865[25];
          v2323 = v1865[26];
          v1819 = vextq_s8(v2323, v2323, 8uLL).u64[0];
          v2287 = v1865[19];
          v2299 = v1865[24];
          v2232 = vextq_s8(v2299, v2299, 8uLL).u64[0];
          v2236 = vextq_s8(v2311, v2311, 8uLL).u64[0];
          v2269 = v1865[22];
          v2273 = v1865[23];
          v2253 = vextq_s8(v2269, v2269, 8uLL).u64[0];
          v2257 = vextq_s8(v2273, v2273, 8uLL).u64[0];
          v2261 = v1865[20];
          v2265 = v1865[21];
          v2245 = vextq_s8(v2287, v2287, 8uLL).u64[0];
          v2249 = vextq_s8(v2265, v2265, 8uLL).u64[0];
          v1821 = v1865[16];
          v1820 = v1865[17];
          v2277 = v1865[18];
          v2241 = vextq_s8(v2277, v2277, 8uLL).u64[0];
          v2224 = vextq_s8(v1820, v1820, 8uLL).u64[0];
          v2228 = vextq_s8(v2261, v2261, 8uLL).u64[0];
          v1823 = v1865[14];
          v1822 = v1865[15];
          v2215 = vextq_s8(v1822, v1822, 8uLL).u64[0];
          v2219 = vextq_s8(v1821, v1821, 8uLL).u64[0];
          v2207 = vextq_s8(v1817, v1817, 8uLL).u64[0];
          v2211 = vextq_s8(v1823, v1823, 8uLL).u64[0];
          v1825 = v1865[10];
          v1824 = v1865[11];
          v2199 = vextq_s8(v1818, v1818, 8uLL).u64[0];
          v2203 = vextq_s8(v1824, v1824, 8uLL).u64[0];
          v2197 = vextq_s8(v1825, v1825, 8uLL).u64[0];
          v1827 = v1865[8];
          v1826 = v1865[9];
          v1828 = vextq_s8(v1826, v1826, 8uLL).u64[0];
          v1829 = vextq_s8(v1827, v1827, 8uLL).u64[0];
          v1830 = vextq_s8(v1815, v1815, 8uLL).u64[0];
          v1832 = v1865[4];
          v1831 = v1865[5];
          v1833 = vextq_s8(v1816, v1816, 8uLL).u64[0];
          v1834 = vextq_s8(v1831, v1831, 8uLL).u64[0];
          v1835 = vextq_s8(v1832, v1832, 8uLL).u64[0];
          v1837 = v1865[2];
          v1836 = v1865[3];
          v1838 = vextq_s8(v1836, v1836, 8uLL).u64[0];
          v1839 = vextq_s8(v1837, v1837, 8uLL).u64[0];
          v1841 = *v1865;
          v1840 = v1865[1];
        }
        v1842.i64[0] = v2323.i64[0];
        v1842.i64[1] = v1819;
        v1843.i64[0] = v2311.i64[0];
        v1843.i64[1] = v2236;
        v1844.i64[0] = v2299.i64[0];
        v1844.i64[1] = v2232;
        v1823.i64[1] = v2211;
        v1817.i64[1] = v2207;
        v1818.i64[1] = v2199;
        v1837.i64[1] = v1839;
        v1840.i64[1] = vextq_s8(v1840, v1840, 8uLL).u64[0];
        v1841.i64[1] = vextq_s8(v1841, v1841, 8uLL).u64[0];
        v1831.i64[1] = v1834;
        v1832.i64[1] = v1835;
        v1836.i64[1] = v1838;
        v1827.i64[1] = v1829;
        v1815.i64[1] = v1830;
        v1816.i64[1] = v1833;
        v1824.i64[1] = v2203;
        v1825.i64[1] = v2197;
        v1826.i64[1] = v1828;
        v1820.i64[1] = v2224;
        v1821.i64[1] = v2219;
        v1822.i64[1] = v2215;
        v1845.i64[0] = v2261.i64[0];
        v1845.i64[1] = v2228;
        v1846 = *(unsigned int *)(a2 + 16);
        v1847 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1813[1] + (_DWORD)v1846 * v1698[1]));
        v1848.i64[0] = v2287.i64[0];
        v1848.i64[1] = v2245;
        v1849.i64[0] = v2277.i64[0];
        v1849.i64[1] = v2241;
        *(_QWORD *)&v1850 = v2273.i64[0];
        *((_QWORD *)&v1850 + 1) = v2257;
        *(_QWORD *)&v1851 = v2269.i64[0];
        *((_QWORD *)&v1851 + 1) = v2253;
        *(_QWORD *)&v1852 = v2265.i64[0];
        *((_QWORD *)&v1852 + 1) = v2249;
        *v1847 = v1841;
        v1847[1] = v1840;
        v1847[2] = v1837;
        v1853 = (int8x16_t *)((char *)v1847 + 8 * v1846);
        *v1853 = v1836;
        v1853[1] = v1832;
        v1853[2] = v1831;
        v1854 = &v1847[v1846];
        *v1854 = v1816;
        v1854[1] = v1815;
        v1854[2] = v1827;
        v1855 = (int8x16_t *)((char *)v1847 + 24 * v1846);
        *v1855 = v1826;
        v1855[1] = v1825;
        v1855[2] = v1824;
        v1856 = &v1847[2 * v1846];
        *v1856 = v1818;
        v1856[1] = v1817;
        v1856[2] = v1823;
        v1857 = (int8x16_t *)((char *)v1847 + 40 * v1846);
        *v1857 = v1822;
        v1857[1] = v1821;
        v1857[2] = v1820;
        v1858 = &v1847[3 * v1846];
        *v1858 = v1849;
        v1858[1] = v1848;
        v1858[2] = v1845;
        v1859 = &v1847->i8[56 * v1846];
        *(_OWORD *)v1859 = v1852;
        *((_OWORD *)v1859 + 1) = v1851;
        *((_OWORD *)v1859 + 2) = v1850;
        v1860 = &v1847[4 * v1846];
        *v1860 = v1844;
        v1860[1] = v1843;
        v1806 = v1861;
        v1860[2] = v1842;
      }
      v1813 += 2;
    }
    v1698 += 2;
  }
  while (v1698 != v1699);
  v1695 = *a3;
  v1696 = a3[1];
  v1701 = *(_DWORD **)(a4 + 48);
  v1702 = *(_DWORD **)(a4 + 56);
  if (*a3 == v1696 || v1701 == v1702)
    goto LABEL_1559;
  do
  {
LABEL_1659:
    v1867 = *(_QWORD *)(result + 2968);
    v1868 = (*(_DWORD *)(result + 2992) * *v1701);
    v1869 = (uint64_t *)(v1867 + 8 * v1868);
    v1870 = *(_DWORD *)(result + 2888);
    v1871 = v1868 + v1870;
    v1872 = (uint64_t *)(v1867 + 8 * v1871);
    if (v1870)
    {
      if (*v1869 == -1)
      {
        v1873 = 8 * v1871 - 8 * v1868 - 8;
        v1874 = 1;
        v1875 = v1869;
        while (1)
        {
          v1870 = v1874;
          if (!v1873)
            break;
          v1869 = v1875 + 1;
          v1876 = v1875[1];
          ++v1874;
          v1873 -= 8;
          ++v1875;
          if (v1876 != -1)
            goto LABEL_1667;
        }
        v1869 = v1872;
      }
      else
      {
        v1870 = 0;
      }
    }
LABEL_1667:
    v1877 = *a3;
    v1878 = a3[1];
    while (v1877 != v1878 && v1869 != v1872)
    {
      v1908 = *v1877;
      if (*v1877 > v1870)
      {
        v1909 = v1869 + 1;
        while (v1909 != v1872)
        {
          ++v1870;
          v1910 = *v1909++;
          if (v1910 != -1 && v1908 <= v1870)
          {
            v1869 = v1909 - 1;
            goto LABEL_1681;
          }
        }
        break;
      }
LABEL_1681:
      if (v1908 == v1870)
      {
        v1912 = (int8x16_t *)(*(_QWORD *)(result + 2896) + 8 * *v1869);
        if (v1912 == *(int8x16_t **)a2)
        {
          v1888 = v1912[16];
          v1887 = v1912[17];
          v1886 = v1912[14];
          v1885 = v1912[15];
          v1884 = v1912[12];
          v1883 = v1912[13];
          v1882 = v1912[10];
          v1881 = v1912[11];
          v1894 = v1912[8];
          v1893 = v1912[9];
          v2312 = vextq_s8(v1888, v1888, 8uLL).u64[0];
          v2324 = vextq_s8(v1887, v1887, 8uLL).u64[0];
          v1889 = vextq_s8(v1886, v1886, 8uLL).u64[0];
          v1890 = vextq_s8(v1883, v1883, 8uLL).u64[0];
          v1891 = vextq_s8(v1884, v1884, 8uLL).u64[0];
          v2288 = vextq_s8(v1881, v1881, 8uLL).u64[0];
          v2300 = vextq_s8(v1885, v1885, 8uLL).u64[0];
          v1892 = vextq_s8(v1882, v1882, 8uLL).u64[0];
          v1880 = v1912[6];
          v1879 = v1912[7];
        }
        else
        {
          v1880 = v1912[6];
          v1879 = v1912[7];
          v1882 = v1912[10];
          v1881 = v1912[11];
          v1884 = v1912[12];
          v1883 = v1912[13];
          v1886 = v1912[14];
          v1885 = v1912[15];
          v1888 = v1912[16];
          v1887 = v1912[17];
          v2312 = vextq_s8(v1888, v1888, 8uLL).u64[0];
          v2324 = vextq_s8(v1887, v1887, 8uLL).u64[0];
          v1889 = vextq_s8(v1886, v1886, 8uLL).u64[0];
          v1890 = vextq_s8(v1883, v1883, 8uLL).u64[0];
          v1891 = vextq_s8(v1884, v1884, 8uLL).u64[0];
          v2288 = vextq_s8(v1881, v1881, 8uLL).u64[0];
          v2300 = vextq_s8(v1885, v1885, 8uLL).u64[0];
          v1892 = vextq_s8(v1882, v1882, 8uLL).u64[0];
          v1894 = v1912[8];
          v1893 = v1912[9];
        }
        v1896 = v1912[4];
        v1895 = v1912[5];
        v1898 = v1912[2];
        v1897 = v1912[3];
        v1900 = *v1912;
        v1899 = v1912[1];
        v1886.i64[1] = v1889;
        v1883.i64[1] = v1890;
        v1884.i64[1] = v1891;
        v1898.i64[1] = vextq_s8(v1898, v1898, 8uLL).u64[0];
        v1901 = *(unsigned int *)(a2 + 16);
        v1902 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1877[1] + (_DWORD)v1901 * v1701[1]));
        v1899.i64[1] = vextq_s8(v1899, v1899, 8uLL).u64[0];
        v1900.i64[1] = vextq_s8(v1900, v1900, 8uLL).u64[0];
        v1895.i64[1] = vextq_s8(v1895, v1895, 8uLL).u64[0];
        v1896.i64[1] = vextq_s8(v1896, v1896, 8uLL).u64[0];
        v1897.i64[1] = vextq_s8(v1897, v1897, 8uLL).u64[0];
        v1894.i64[1] = vextq_s8(v1894, v1894, 8uLL).u64[0];
        v1879.i64[1] = vextq_s8(v1879, v1879, 8uLL).u64[0];
        v1880.i64[1] = vextq_s8(v1880, v1880, 8uLL).u64[0];
        v1881.i64[1] = v2288;
        v1882.i64[1] = v1892;
        v1893.i64[1] = vextq_s8(v1893, v1893, 8uLL).u64[0];
        v1887.i64[1] = v2324;
        v1888.i64[1] = v2312;
        v1885.i64[1] = v2300;
        *v1902 = v1900;
        v1902[1] = v1899;
        v1902[2] = v1898;
        v1903 = (int8x16_t *)((char *)v1902 + 8 * v1901);
        *v1903 = v1897;
        v1903[1] = v1896;
        v1903[2] = v1895;
        v1904 = &v1902[v1901];
        *v1904 = v1880;
        v1904[1] = v1879;
        v1904[2] = v1894;
        v1905 = (int8x16_t *)((char *)v1902 + 24 * v1901);
        *v1905 = v1893;
        v1905[1] = v1882;
        v1905[2] = v1881;
        v1906 = &v1902[2 * v1901];
        *v1906 = v1884;
        v1906[1] = v1883;
        v1906[2] = v1886;
        v1907 = (int8x16_t *)((char *)v1902 + 40 * v1901);
        *v1907 = v1885;
        v1907[1] = v1888;
        v1870 = v1908;
        v1907[2] = v1887;
      }
      v1877 += 2;
    }
    v1701 += 2;
  }
  while (v1701 != v1702);
  v1695 = *a3;
  v1696 = a3[1];
  v1704 = *(_DWORD **)(a4 + 72);
  v1705 = *(_DWORD **)(a4 + 80);
  if (*a3 == v1696 || v1704 == v1705)
    goto LABEL_1564;
  do
  {
LABEL_1690:
    v1914 = *(_QWORD *)(result + 4408);
    v1915 = (*(_DWORD *)(result + 4432) * *v1704);
    v1916 = (uint64_t *)(v1914 + 8 * v1915);
    v1917 = *(_DWORD *)(result + 4328);
    v1918 = v1915 + v1917;
    v1919 = (uint64_t *)(v1914 + 8 * v1918);
    if (v1917)
    {
      if (*v1916 == -1)
      {
        v1920 = 8 * v1918 - 8 * v1915 - 8;
        v1921 = 1;
        v1922 = v1916;
        while (1)
        {
          v1917 = v1921;
          if (!v1920)
            break;
          v1916 = v1922 + 1;
          v1923 = v1922[1];
          ++v1921;
          v1920 -= 8;
          ++v1922;
          if (v1923 != -1)
            goto LABEL_1698;
        }
        v1916 = v1919;
      }
      else
      {
        v1917 = 0;
      }
    }
LABEL_1698:
    v1924 = *a3;
    v1925 = a3[1];
    while (v1924 != v1925 && v1916 != v1919)
    {
      v1955 = *v1924;
      if (*v1924 > v1917)
      {
        v1956 = v1916 + 1;
        while (v1956 != v1919)
        {
          ++v1917;
          v1957 = *v1956++;
          if (v1957 != -1 && v1955 <= v1917)
          {
            v1916 = v1956 - 1;
            goto LABEL_1712;
          }
        }
        break;
      }
LABEL_1712:
      if (v1955 == v1917)
      {
        v1959 = (int8x16_t *)(*(_QWORD *)(result + 4336) + 8 * *v1916);
        if (v1959 == *(int8x16_t **)a2)
        {
          v1935 = v1959[16];
          v1934 = v1959[17];
          v1933 = v1959[14];
          v1932 = v1959[15];
          v1931 = v1959[12];
          v1930 = v1959[13];
          v1929 = v1959[10];
          v1928 = v1959[11];
          v1941 = v1959[8];
          v1940 = v1959[9];
          v2313 = vextq_s8(v1935, v1935, 8uLL).u64[0];
          v2325 = vextq_s8(v1934, v1934, 8uLL).u64[0];
          v1936 = vextq_s8(v1933, v1933, 8uLL).u64[0];
          v1937 = vextq_s8(v1930, v1930, 8uLL).u64[0];
          v1938 = vextq_s8(v1931, v1931, 8uLL).u64[0];
          v2289 = vextq_s8(v1928, v1928, 8uLL).u64[0];
          v2301 = vextq_s8(v1932, v1932, 8uLL).u64[0];
          v1939 = vextq_s8(v1929, v1929, 8uLL).u64[0];
          v1927 = v1959[6];
          v1926 = v1959[7];
        }
        else
        {
          v1927 = v1959[6];
          v1926 = v1959[7];
          v1929 = v1959[10];
          v1928 = v1959[11];
          v1931 = v1959[12];
          v1930 = v1959[13];
          v1933 = v1959[14];
          v1932 = v1959[15];
          v1935 = v1959[16];
          v1934 = v1959[17];
          v2313 = vextq_s8(v1935, v1935, 8uLL).u64[0];
          v2325 = vextq_s8(v1934, v1934, 8uLL).u64[0];
          v1936 = vextq_s8(v1933, v1933, 8uLL).u64[0];
          v1937 = vextq_s8(v1930, v1930, 8uLL).u64[0];
          v1938 = vextq_s8(v1931, v1931, 8uLL).u64[0];
          v2289 = vextq_s8(v1928, v1928, 8uLL).u64[0];
          v2301 = vextq_s8(v1932, v1932, 8uLL).u64[0];
          v1939 = vextq_s8(v1929, v1929, 8uLL).u64[0];
          v1941 = v1959[8];
          v1940 = v1959[9];
        }
        v1943 = v1959[4];
        v1942 = v1959[5];
        v1945 = v1959[2];
        v1944 = v1959[3];
        v1947 = *v1959;
        v1946 = v1959[1];
        v1933.i64[1] = v1936;
        v1930.i64[1] = v1937;
        v1931.i64[1] = v1938;
        v1945.i64[1] = vextq_s8(v1945, v1945, 8uLL).u64[0];
        v1948 = *(unsigned int *)(a2 + 16);
        v1949 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1924[1] + (_DWORD)v1948 * v1704[1]));
        v1946.i64[1] = vextq_s8(v1946, v1946, 8uLL).u64[0];
        v1947.i64[1] = vextq_s8(v1947, v1947, 8uLL).u64[0];
        v1942.i64[1] = vextq_s8(v1942, v1942, 8uLL).u64[0];
        v1943.i64[1] = vextq_s8(v1943, v1943, 8uLL).u64[0];
        v1944.i64[1] = vextq_s8(v1944, v1944, 8uLL).u64[0];
        v1941.i64[1] = vextq_s8(v1941, v1941, 8uLL).u64[0];
        v1926.i64[1] = vextq_s8(v1926, v1926, 8uLL).u64[0];
        v1927.i64[1] = vextq_s8(v1927, v1927, 8uLL).u64[0];
        v1928.i64[1] = v2289;
        v1929.i64[1] = v1939;
        v1940.i64[1] = vextq_s8(v1940, v1940, 8uLL).u64[0];
        v1934.i64[1] = v2325;
        v1935.i64[1] = v2313;
        v1932.i64[1] = v2301;
        *v1949 = v1947;
        v1949[1] = v1946;
        v1949[2] = v1945;
        v1950 = (int8x16_t *)((char *)v1949 + 8 * v1948);
        *v1950 = v1944;
        v1950[1] = v1943;
        v1950[2] = v1942;
        v1951 = &v1949[v1948];
        *v1951 = v1927;
        v1951[1] = v1926;
        v1951[2] = v1941;
        v1952 = (int8x16_t *)((char *)v1949 + 24 * v1948);
        *v1952 = v1940;
        v1952[1] = v1929;
        v1952[2] = v1928;
        v1953 = &v1949[2 * v1948];
        *v1953 = v1931;
        v1953[1] = v1930;
        v1953[2] = v1933;
        v1954 = (int8x16_t *)((char *)v1949 + 40 * v1948);
        *v1954 = v1932;
        v1954[1] = v1935;
        v1917 = v1955;
        v1954[2] = v1934;
      }
      v1924 += 2;
    }
    v1704 += 2;
  }
  while (v1704 != v1705);
  v1695 = *a3;
  v1696 = a3[1];
  v1707 = *(_DWORD **)(a4 + 96);
  v1708 = *(_DWORD **)(a4 + 104);
  if (*a3 == v1696 || v1707 == v1708)
    goto LABEL_1720;
  do
  {
LABEL_1727:
    v1964 = *(_QWORD *)(result + 5848);
    v1965 = (*(_DWORD *)(result + 5872) * *v1707);
    v1966 = (uint64_t *)(v1964 + 8 * v1965);
    v1967 = *(_DWORD *)(result + 5768);
    v1968 = v1965 + v1967;
    v1969 = (uint64_t *)(v1964 + 8 * v1968);
    if (v1967)
    {
      if (*v1966 == -1)
      {
        v1970 = 8 * v1968 - 8 * v1965 - 8;
        v1971 = 1;
        v1972 = v1966;
        while (1)
        {
          v1967 = v1971;
          if (!v1970)
            break;
          v1966 = v1972 + 1;
          v1973 = v1972[1];
          ++v1971;
          v1970 -= 8;
          ++v1972;
          if (v1973 != -1)
            goto LABEL_1735;
        }
        v1966 = v1969;
      }
      else
      {
        v1967 = 0;
      }
    }
LABEL_1735:
    v1974 = *a3;
    v1975 = a3[1];
    while (v1974 != v1975 && v1966 != v1969)
    {
      v1992 = *v1974;
      if (*v1974 > v1967)
      {
        v1993 = v1966 + 1;
        while (v1993 != v1969)
        {
          ++v1967;
          v1994 = *v1993++;
          if (v1994 != -1 && v1992 <= v1967)
          {
            v1966 = v1993 - 1;
            goto LABEL_1749;
          }
        }
        break;
      }
LABEL_1749:
      if (v1992 == v1967)
      {
        v1996 = (int8x16_t *)(*(_QWORD *)(result + 5776) + 8 * *v1966);
        if (v1996 == *(int8x16_t **)a2)
        {
          v1980 = v1996[7];
          v1982 = v1996[8];
          v1986 = v1996[5];
          v1981 = v1996[6];
          v1978 = v1996[3];
          v1987 = v1996[4];
          v1976 = v1996[1];
          v1979 = v1996[2];
          v1983 = vextq_s8(v1982, v1982, 8uLL).u64[0];
          v1984 = vextq_s8(v1980, v1980, 8uLL).u64[0];
          v1985 = vextq_s8(v1981, v1981, 8uLL).u64[0];
          v1977 = *v1996;
        }
        else
        {
          v1977 = *v1996;
          v1976 = v1996[1];
          v1979 = v1996[2];
          v1978 = v1996[3];
          v1981 = v1996[6];
          v1980 = v1996[7];
          v1982 = v1996[8];
          v1983 = vextq_s8(v1982, v1982, 8uLL).u64[0];
          v1984 = vextq_s8(v1980, v1980, 8uLL).u64[0];
          v1985 = vextq_s8(v1981, v1981, 8uLL).u64[0];
          v1987 = v1996[4];
          v1986 = v1996[5];
        }
        v1988 = *(unsigned int *)(a2 + 16);
        v1989 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v1974[1] + (_DWORD)v1988 * v1707[1]));
        v1979.i64[1] = vextq_s8(v1979, v1979, 8uLL).u64[0];
        v1976.i64[1] = vextq_s8(v1976, v1976, 8uLL).u64[0];
        v1977.i64[1] = vextq_s8(v1977, v1977, 8uLL).u64[0];
        v1986.i64[1] = vextq_s8(v1986, v1986, 8uLL).u64[0];
        v1987.i64[1] = vextq_s8(v1987, v1987, 8uLL).u64[0];
        v1978.i64[1] = vextq_s8(v1978, v1978, 8uLL).u64[0];
        v1982.i64[1] = v1983;
        v1980.i64[1] = v1984;
        v1981.i64[1] = v1985;
        *v1989 = v1977;
        v1989[1] = v1976;
        v1989[2] = v1979;
        v1990 = (int8x16_t *)((char *)v1989 + 8 * v1988);
        *v1990 = v1978;
        v1990[1] = v1987;
        v1990[2] = v1986;
        v1991 = &v1989[v1988];
        *v1991 = v1981;
        v1991[1] = v1980;
        v1991[2] = v1982;
        v1967 = v1992;
      }
      v1974 += 2;
    }
    v1707 += 2;
  }
  while (v1707 != v1708);
  v1695 = *a3;
  v1696 = a3[1];
  v1961 = *(_DWORD **)(a4 + 120);
  v1962 = *(_DWORD **)(a4 + 128);
  if (*a3 == v1696 || v1961 == v1962)
    goto LABEL_1757;
  do
  {
LABEL_1764:
    v2001 = *(_QWORD *)(result + 7288);
    v2002 = (*(_DWORD *)(result + 7312) * *v1961);
    v2003 = (uint64_t *)(v2001 + 8 * v2002);
    v2004 = *(_DWORD *)(result + 7208);
    v2005 = (v2002 + v2004);
    v2006 = (uint64_t *)(v2001 + 8 * v2005);
    if (v2004 && *v2003 == -1)
    {
      v2018 = 8 * v2005 - 8 * v2002 - 8;
      v2019 = 1;
      v2020 = v2003;
      while (1)
      {
        v2007 = v2019;
        if (!v2018)
          break;
        v2003 = v2020 + 1;
        v2021 = v2020[1];
        ++v2019;
        v2018 -= 8;
        ++v2020;
        if (v2021 != -1)
          goto LABEL_1767;
      }
      v2003 = v2006;
    }
    else
    {
      v2007 = 0;
    }
LABEL_1767:
    v2008 = *a3;
    v2009 = a3[1];
    while (v2008 != v2009 && v2003 != v2006)
    {
      v2010 = *v2008;
      if (*v2008 > v2007)
      {
        v2011 = v2003 + 1;
        while (v2011 != v2006)
        {
          ++v2007;
          v2012 = *v2011++;
          if (v2012 != -1 && v2010 <= v2007)
          {
            v2003 = v2011 - 1;
            goto LABEL_1779;
          }
        }
        break;
      }
LABEL_1779:
      if (v2010 == v2007)
      {
        v2014 = (__int128 *)(*(_QWORD *)(result + 7216) + 8 * *v2003);
        v2015 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2008[1] + *(_DWORD *)(a2 + 16) * v1961[1]));
        v2016 = v2014[2];
        v2017 = *v2014;
        v2015[1] = v2014[1];
        v2015[2] = v2016;
        *v2015 = v2017;
        v2007 = v2010;
      }
      v2008 += 2;
    }
    v1961 += 2;
  }
  while (v1961 != v1962);
  v1695 = *a3;
  v1696 = a3[1];
  v1998 = *(_DWORD **)(a4 + 144);
  v1999 = *(_DWORD **)(a4 + 152);
  if (*a3 == v1696 || v1998 == v1999)
    goto LABEL_1791;
  do
  {
LABEL_1808:
    v2032 = *(_QWORD *)(result + 8728);
    v2033 = (*(_DWORD *)(result + 8752) * *v1998);
    v2034 = (uint64_t *)(v2032 + 8 * v2033);
    v2035 = *(_DWORD *)(result + 8648);
    v2036 = v2033 + v2035;
    v2037 = (uint64_t *)(v2032 + 8 * v2036);
    if (v2035)
    {
      if (*v2034 == -1)
      {
        v2038 = 8 * v2036 - 8 * v2033 - 8;
        v2039 = 1;
        v2040 = v2034;
        while (1)
        {
          v2035 = v2039;
          if (!v2038)
            break;
          v2034 = v2040 + 1;
          v2041 = v2040[1];
          ++v2039;
          v2038 -= 8;
          ++v2040;
          if (v2041 != -1)
            goto LABEL_1816;
        }
        v2034 = v2037;
      }
      else
      {
        v2035 = 0;
      }
    }
LABEL_1816:
    v2042 = *a3;
    v2043 = a3[1];
    while (v2042 != v2043 && v2034 != v2037)
    {
      v2060 = *v2042;
      if (*v2042 > v2035)
      {
        v2061 = v2034 + 1;
        while (v2061 != v2037)
        {
          ++v2035;
          v2062 = *v2061++;
          if (v2062 != -1 && v2060 <= v2035)
          {
            v2034 = v2061 - 1;
            goto LABEL_1830;
          }
        }
        break;
      }
LABEL_1830:
      if (v2060 == v2035)
      {
        v2064 = (int8x16_t *)(*(_QWORD *)(result + 8656) + 8 * *v2034);
        if (v2064 == *(int8x16_t **)a2)
        {
          v2048 = v2064[7];
          v2050 = v2064[8];
          v2054 = v2064[5];
          v2049 = v2064[6];
          v2046 = v2064[3];
          v2055 = v2064[4];
          v2044 = v2064[1];
          v2047 = v2064[2];
          v2051 = vextq_s8(v2050, v2050, 8uLL).u64[0];
          v2052 = vextq_s8(v2048, v2048, 8uLL).u64[0];
          v2053 = vextq_s8(v2049, v2049, 8uLL).u64[0];
          v2045 = *v2064;
        }
        else
        {
          v2045 = *v2064;
          v2044 = v2064[1];
          v2047 = v2064[2];
          v2046 = v2064[3];
          v2049 = v2064[6];
          v2048 = v2064[7];
          v2050 = v2064[8];
          v2051 = vextq_s8(v2050, v2050, 8uLL).u64[0];
          v2052 = vextq_s8(v2048, v2048, 8uLL).u64[0];
          v2053 = vextq_s8(v2049, v2049, 8uLL).u64[0];
          v2055 = v2064[4];
          v2054 = v2064[5];
        }
        v2056 = *(unsigned int *)(a2 + 16);
        v2057 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v2042[1] + (_DWORD)v2056 * v1998[1]));
        v2047.i64[1] = vextq_s8(v2047, v2047, 8uLL).u64[0];
        v2044.i64[1] = vextq_s8(v2044, v2044, 8uLL).u64[0];
        v2045.i64[1] = vextq_s8(v2045, v2045, 8uLL).u64[0];
        v2054.i64[1] = vextq_s8(v2054, v2054, 8uLL).u64[0];
        v2055.i64[1] = vextq_s8(v2055, v2055, 8uLL).u64[0];
        v2046.i64[1] = vextq_s8(v2046, v2046, 8uLL).u64[0];
        v2050.i64[1] = v2051;
        v2048.i64[1] = v2052;
        v2049.i64[1] = v2053;
        *v2057 = v2045;
        v2057[1] = v2044;
        v2057[2] = v2047;
        v2058 = (int8x16_t *)((char *)v2057 + 8 * v2056);
        *v2058 = v2046;
        v2058[1] = v2055;
        v2058[2] = v2054;
        v2059 = &v2057[v2056];
        *v2059 = v2049;
        v2059[1] = v2048;
        v2059[2] = v2050;
        v2035 = v2060;
      }
      v2042 += 2;
    }
    v1998 += 2;
  }
  while (v1998 != v1999);
  v1695 = *a3;
  v1696 = a3[1];
  v2023 = *(_DWORD **)(a4 + 168);
  v2024 = *(_DWORD **)(a4 + 176);
  if (*a3 == v1696 || v2023 == v2024)
    goto LABEL_1796;
  do
  {
LABEL_1839:
    v2066 = *(_QWORD *)(result + 10168);
    v2067 = (*(_DWORD *)(result + 10192) * *v2023);
    v2068 = (uint64_t *)(v2066 + 8 * v2067);
    v2069 = *(_DWORD *)(result + 10088);
    v2070 = v2067 + v2069;
    v2071 = (uint64_t *)(v2066 + 8 * v2070);
    if (v2069)
    {
      if (*v2068 == -1)
      {
        v2072 = 8 * v2070 - 8 * v2067 - 8;
        v2073 = 1;
        v2074 = v2068;
        while (1)
        {
          v2069 = v2073;
          if (!v2072)
            break;
          v2068 = v2074 + 1;
          v2075 = v2074[1];
          ++v2073;
          v2072 -= 8;
          ++v2074;
          if (v2075 != -1)
            goto LABEL_1847;
        }
        v2068 = v2071;
      }
      else
      {
        v2069 = 0;
      }
    }
LABEL_1847:
    v2076 = *a3;
    v2077 = a3[1];
    while (v2076 != v2077 && v2068 != v2071)
    {
      v2095 = *v2076;
      if (*v2076 > v2069)
      {
        v2096 = v2068 + 1;
        while (v2096 != v2071)
        {
          ++v2069;
          v2097 = *v2096++;
          if (v2097 != -1 && v2095 <= v2069)
          {
            v2068 = v2096 - 1;
            goto LABEL_1861;
          }
        }
        break;
      }
LABEL_1861:
      if (v2095 == v2069)
      {
        v2099 = (int8x16_t *)(*(_QWORD *)(result + 10096) + 8 * *v2068);
        if (v2099 == *(int8x16_t **)a2)
        {
          v2087 = v2099[10];
          v2086 = v2099[11];
          v2085 = v2099[8];
          v2084 = v2099[9];
          v2083 = v2099[6];
          v2082 = v2099[7];
          v2081 = v2099[4];
          v2080 = v2099[5];
          v2079 = v2099[2];
          v2078 = v2099[3];
        }
        else
        {
          v2079 = v2099[2];
          v2078 = v2099[3];
          v2081 = v2099[4];
          v2080 = v2099[5];
          v2083 = v2099[6];
          v2082 = v2099[7];
          v2085 = v2099[8];
          v2084 = v2099[9];
          v2087 = v2099[10];
          v2086 = v2099[11];
        }
        v2089 = *v2099;
        v2088 = v2099[1];
        v2090 = *(unsigned int *)(a2 + 16);
        v2091 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v2076[1] + (_DWORD)v2090 * v2023[1]));
        v2079.i64[1] = vextq_s8(v2079, v2079, 8uLL).u64[0];
        v2088.i64[1] = vextq_s8(v2088, v2088, 8uLL).u64[0];
        v2089.i64[1] = vextq_s8(v2089, v2089, 8uLL).u64[0];
        v2080.i64[1] = vextq_s8(v2080, v2080, 8uLL).u64[0];
        v2081.i64[1] = vextq_s8(v2081, v2081, 8uLL).u64[0];
        v2078.i64[1] = vextq_s8(v2078, v2078, 8uLL).u64[0];
        v2085.i64[1] = vextq_s8(v2085, v2085, 8uLL).u64[0];
        v2082.i64[1] = vextq_s8(v2082, v2082, 8uLL).u64[0];
        v2083.i64[1] = vextq_s8(v2083, v2083, 8uLL).u64[0];
        v2086.i64[1] = vextq_s8(v2086, v2086, 8uLL).u64[0];
        v2087.i64[1] = vextq_s8(v2087, v2087, 8uLL).u64[0];
        v2084.i64[1] = vextq_s8(v2084, v2084, 8uLL).u64[0];
        *v2091 = v2089;
        v2091[1] = v2088;
        v2091[2] = v2079;
        v2092 = (int8x16_t *)((char *)v2091 + 8 * v2090);
        *v2092 = v2078;
        v2092[1] = v2081;
        v2092[2] = v2080;
        v2093 = &v2091[v2090];
        *v2093 = v2083;
        v2093[1] = v2082;
        v2093[2] = v2085;
        v2094 = (int8x16_t *)((char *)v2091 + 24 * v2090);
        *v2094 = v2084;
        v2094[1] = v2087;
        v2094[2] = v2086;
        v2069 = v2095;
      }
      v2076 += 2;
    }
    v2023 += 2;
  }
  while (v2023 != v2024);
  v1695 = *a3;
  v1696 = a3[1];
  v2026 = *(_DWORD **)(a4 + 192);
  v2027 = *(_DWORD **)(a4 + 200);
  if (*a3 == v1696 || v2026 == v2027)
    goto LABEL_1801;
  do
  {
LABEL_1870:
    v2101 = *(_QWORD *)(result + 11608);
    v2102 = (*(_DWORD *)(result + 11632) * *v2026);
    v2103 = (uint64_t *)(v2101 + 8 * v2102);
    v2104 = *(_DWORD *)(result + 11528);
    v2105 = v2102 + v2104;
    v2106 = (uint64_t *)(v2101 + 8 * v2105);
    if (v2104)
    {
      if (*v2103 == -1)
      {
        v2107 = 8 * v2105 - 8 * v2102 - 8;
        v2108 = 1;
        v2109 = v2103;
        while (1)
        {
          v2104 = v2108;
          if (!v2107)
            break;
          v2103 = v2109 + 1;
          v2110 = v2109[1];
          ++v2108;
          v2107 -= 8;
          ++v2109;
          if (v2110 != -1)
            goto LABEL_1878;
        }
        v2103 = v2106;
      }
      else
      {
        v2104 = 0;
      }
    }
LABEL_1878:
    v2111 = *a3;
    v2112 = a3[1];
    while (v2111 != v2112 && v2103 != v2106)
    {
      v2130 = *v2111;
      if (*v2111 > v2104)
      {
        v2131 = v2103 + 1;
        while (v2131 != v2106)
        {
          ++v2104;
          v2132 = *v2131++;
          if (v2132 != -1 && v2130 <= v2104)
          {
            v2103 = v2131 - 1;
            goto LABEL_1892;
          }
        }
        break;
      }
LABEL_1892:
      if (v2130 == v2104)
      {
        v2134 = (int8x16_t *)(*(_QWORD *)(result + 11536) + 8 * *v2103);
        if (v2134 == *(int8x16_t **)a2)
        {
          v2122 = v2134[10];
          v2121 = v2134[11];
          v2120 = v2134[8];
          v2119 = v2134[9];
          v2118 = v2134[6];
          v2117 = v2134[7];
          v2116 = v2134[4];
          v2115 = v2134[5];
          v2114 = v2134[2];
          v2113 = v2134[3];
        }
        else
        {
          v2114 = v2134[2];
          v2113 = v2134[3];
          v2116 = v2134[4];
          v2115 = v2134[5];
          v2118 = v2134[6];
          v2117 = v2134[7];
          v2120 = v2134[8];
          v2119 = v2134[9];
          v2122 = v2134[10];
          v2121 = v2134[11];
        }
        v2124 = *v2134;
        v2123 = v2134[1];
        v2125 = *(unsigned int *)(a2 + 16);
        v2126 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v2111[1] + (_DWORD)v2125 * v2026[1]));
        v2114.i64[1] = vextq_s8(v2114, v2114, 8uLL).u64[0];
        v2123.i64[1] = vextq_s8(v2123, v2123, 8uLL).u64[0];
        v2124.i64[1] = vextq_s8(v2124, v2124, 8uLL).u64[0];
        v2115.i64[1] = vextq_s8(v2115, v2115, 8uLL).u64[0];
        v2116.i64[1] = vextq_s8(v2116, v2116, 8uLL).u64[0];
        v2113.i64[1] = vextq_s8(v2113, v2113, 8uLL).u64[0];
        v2120.i64[1] = vextq_s8(v2120, v2120, 8uLL).u64[0];
        v2117.i64[1] = vextq_s8(v2117, v2117, 8uLL).u64[0];
        v2118.i64[1] = vextq_s8(v2118, v2118, 8uLL).u64[0];
        v2121.i64[1] = vextq_s8(v2121, v2121, 8uLL).u64[0];
        v2122.i64[1] = vextq_s8(v2122, v2122, 8uLL).u64[0];
        v2119.i64[1] = vextq_s8(v2119, v2119, 8uLL).u64[0];
        *v2126 = v2124;
        v2126[1] = v2123;
        v2126[2] = v2114;
        v2127 = (int8x16_t *)((char *)v2126 + 8 * v2125);
        *v2127 = v2113;
        v2127[1] = v2116;
        v2127[2] = v2115;
        v2128 = &v2126[v2125];
        *v2128 = v2118;
        v2128[1] = v2117;
        v2128[2] = v2120;
        v2129 = (int8x16_t *)((char *)v2126 + 24 * v2125);
        *v2129 = v2119;
        v2129[1] = v2122;
        v2129[2] = v2121;
        v2104 = v2130;
      }
      v2111 += 2;
    }
    v2026 += 2;
  }
  while (v2026 != v2027);
  v2029 = *(_DWORD **)(a4 + 216);
  v2030 = *(_DWORD **)(a4 + 224);
  if (*a3 != a3[1] && v2029 != v2030)
  {
    do
    {
LABEL_1902:
      v2136 = *(_QWORD *)(result + 13048);
      v2137 = (*(_DWORD *)(result + 13072) * *v2029);
      v2138 = (uint64_t *)(v2136 + 8 * v2137);
      v2139 = *(_DWORD *)(result + 12968);
      v2140 = v2137 + v2139;
      v2141 = (uint64_t *)(v2136 + 8 * v2140);
      if (v2139)
      {
        if (*v2138 == -1)
        {
          v2142 = 8 * v2140 - 8 * v2137 - 8;
          v2143 = 1;
          v2144 = v2138;
          while (1)
          {
            v2139 = v2143;
            if (!v2142)
              break;
            v2138 = v2144 + 1;
            v2145 = v2144[1];
            ++v2143;
            v2142 -= 8;
            ++v2144;
            if (v2145 != -1)
              goto LABEL_1910;
          }
          v2138 = v2141;
        }
        else
        {
          v2139 = 0;
        }
      }
LABEL_1910:
      v2146 = *a3;
      v2147 = a3[1];
      while (v2146 != v2147 && v2138 != v2141)
      {
        v2164 = *v2146;
        if (*v2146 > v2139)
        {
          v2165 = v2138 + 1;
          while (v2165 != v2141)
          {
            ++v2139;
            v2166 = *v2165++;
            if (v2166 != -1 && v2164 <= v2139)
            {
              v2138 = v2165 - 1;
              goto LABEL_1924;
            }
          }
          break;
        }
LABEL_1924:
        if (v2164 == v2139)
        {
          v2168 = (int8x16_t *)(*(_QWORD *)(result + 12976) + 8 * *v2138);
          if (v2168 == *(int8x16_t **)a2)
          {
            v2152 = v2168[7];
            v2154 = v2168[8];
            v2158 = v2168[5];
            v2153 = v2168[6];
            v2150 = v2168[3];
            v2159 = v2168[4];
            v2148 = v2168[1];
            v2151 = v2168[2];
            v2155 = vextq_s8(v2154, v2154, 8uLL).u64[0];
            v2156 = vextq_s8(v2152, v2152, 8uLL).u64[0];
            v2157 = vextq_s8(v2153, v2153, 8uLL).u64[0];
            v2149 = *v2168;
          }
          else
          {
            v2149 = *v2168;
            v2148 = v2168[1];
            v2151 = v2168[2];
            v2150 = v2168[3];
            v2153 = v2168[6];
            v2152 = v2168[7];
            v2154 = v2168[8];
            v2155 = vextq_s8(v2154, v2154, 8uLL).u64[0];
            v2156 = vextq_s8(v2152, v2152, 8uLL).u64[0];
            v2157 = vextq_s8(v2153, v2153, 8uLL).u64[0];
            v2159 = v2168[4];
            v2158 = v2168[5];
          }
          v2160 = *(unsigned int *)(a2 + 16);
          v2161 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v2146[1] + (_DWORD)v2160 * v2029[1]));
          v2151.i64[1] = vextq_s8(v2151, v2151, 8uLL).u64[0];
          v2148.i64[1] = vextq_s8(v2148, v2148, 8uLL).u64[0];
          v2149.i64[1] = vextq_s8(v2149, v2149, 8uLL).u64[0];
          v2158.i64[1] = vextq_s8(v2158, v2158, 8uLL).u64[0];
          v2159.i64[1] = vextq_s8(v2159, v2159, 8uLL).u64[0];
          v2150.i64[1] = vextq_s8(v2150, v2150, 8uLL).u64[0];
          v2154.i64[1] = v2155;
          v2152.i64[1] = v2156;
          v2153.i64[1] = v2157;
          *v2161 = v2149;
          v2161[1] = v2148;
          v2161[2] = v2151;
          v2162 = (int8x16_t *)((char *)v2161 + 8 * v2160);
          *v2162 = v2150;
          v2162[1] = v2159;
          v2162[2] = v2158;
          v2163 = &v2161[v2160];
          *v2163 = v2153;
          v2163[1] = v2152;
          v2163[2] = v2154;
          v2139 = v2164;
        }
        v2146 += 2;
      }
      v2029 += 2;
    }
    while (v2029 != v2030);
  }
  return result;
}

_QWORD *sub_20FA51FC8(_QWORD *result, int *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v5 = result[1800];
  v6 = 6 * *(_DWORD *)(v5 + 8);
  *a4 = 0;
  a4[1] = v6;
  *a2 = v6;
  v7 = 9 * *(_DWORD *)(result[1810] + 8);
  a4[2] = a4[1] + *a4;
  a4[3] = v7;
  *a2 += v7;
  v8 = 6 * *(_DWORD *)(result[1820] + 8);
  a4[4] = a4[3] + a4[2];
  a4[5] = v8;
  *a2 += v8;
  v9 = 6 * *(_DWORD *)(result[1830] + 8);
  a4[6] = a4[5] + a4[4];
  a4[7] = v9;
  *a2 += v9;
  v10 = 3 * *(_DWORD *)(result[1840] + 8);
  a4[8] = a4[7] + a4[6];
  a4[9] = v10;
  *a2 += v10;
  v11 = *(_DWORD *)(result[1850] + 8);
  a4[10] = a4[9] + a4[8];
  a4[11] = v11;
  *a2 += v11;
  v12 = 3 * *(_DWORD *)(result[1860] + 8);
  a4[12] = a4[11] + a4[10];
  a4[13] = v12;
  *a2 += v12;
  v13 = 4 * *(_DWORD *)(result[1870] + 8);
  a4[14] = a4[13] + a4[12];
  a4[15] = v13;
  *a2 += v13;
  v14 = 4 * *(_DWORD *)(result[1880] + 8);
  a4[16] = a4[15] + a4[14];
  a4[17] = v14;
  *a2 += v14;
  v15 = 3 * *(_DWORD *)(result[1890] + 8);
  a4[18] = a4[17] + a4[16];
  a4[19] = v15;
  *a2 += v15;
  LODWORD(v5) = 6 * *(_DWORD *)(v5 + 12);
  *a5 = 0;
  a5[1] = v5;
  *a3 = v5;
  LODWORD(v5) = 9 * *(_DWORD *)(result[1801] + 12);
  a5[2] = a5[1] + *a5;
  a5[3] = v5;
  *a3 += v5;
  LODWORD(v5) = 6 * *(_DWORD *)(result[1802] + 12);
  a5[4] = a5[3] + a5[2];
  a5[5] = v5;
  *a3 += v5;
  LODWORD(v5) = 6 * *(_DWORD *)(result[1803] + 12);
  a5[6] = a5[5] + a5[4];
  a5[7] = v5;
  *a3 += v5;
  LODWORD(v5) = 3 * *(_DWORD *)(result[1804] + 12);
  a5[8] = a5[7] + a5[6];
  a5[9] = v5;
  *a3 += v5;
  LODWORD(v5) = *(_DWORD *)(result[1805] + 12);
  a5[10] = a5[9] + a5[8];
  a5[11] = v5;
  *a3 += v5;
  LODWORD(v5) = 3 * *(_DWORD *)(result[1806] + 12);
  a5[12] = a5[11] + a5[10];
  a5[13] = v5;
  *a3 += v5;
  LODWORD(v5) = 4 * *(_DWORD *)(result[1807] + 12);
  a5[14] = a5[13] + a5[12];
  a5[15] = v5;
  *a3 += v5;
  LODWORD(v5) = 4 * *(_DWORD *)(result[1808] + 12);
  a5[16] = a5[15] + a5[14];
  a5[17] = v5;
  *a3 += v5;
  LODWORD(v5) = 3 * *(_DWORD *)(result[1809] + 12);
  a5[18] = a5[17] + a5[16];
  a5[19] = v5;
  *a3 += v5;
  return result;
}

uint64_t sub_20FA52288(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4)
{
  sub_20FA49BBC(a1 + 1296);
  sub_20FA49BBC(a1 + 2736);
  sub_20FA49BBC(a1 + 4176);
  sub_20FA49BBC(a1 + 5616);
  sub_20FA49BBC(a1 + 7056);
  sub_20FA49BBC(a1 + 8496);
  sub_20FA49BBC(a1 + 9936);
  sub_20FA49BBC(a1 + 11376);
  sub_20FA49BBC(a1 + 12816);
  sub_20FA52A60(a1 + 14256, a2, a3[18] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 1152);
  sub_20FA49BBC(a1 + 2592);
  sub_20FA49BBC(a1 + 4032);
  sub_20FA49BBC(a1 + 5472);
  sub_20FA49BBC(a1 + 6912);
  sub_20FA49BBC(a1 + 8352);
  sub_20FA49BBC(a1 + 9792);
  sub_20FA49BBC(a1 + 11232);
  sub_20FA5312C(a1 + 12672, a2, a3[16] | ((unint64_t)a4[16] << 32));
  sub_20F8E3C4C(a1 + 14112, a2, a3[16] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 1008);
  sub_20FA49BBC(a1 + 2448);
  sub_20FA49BBC(a1 + 3888);
  sub_20FA49BBC(a1 + 5328);
  sub_20FA49BBC(a1 + 6768);
  sub_20FA49BBC(a1 + 8208);
  sub_20FA49BBC(a1 + 9648);
  sub_20FA5312C(a1 + 11088, a2, a3[14] | ((unint64_t)a4[14] << 32));
  sub_20F8E47B4(a1 + 12528, a2, a3[14] | ((unint64_t)a4[16] << 32));
  sub_20F8E3C4C(a1 + 13968, a2, a3[14] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 864);
  sub_20FA49BBC(a1 + 2304);
  sub_20FA49BBC(a1 + 3744);
  sub_20FA49BBC(a1 + 5184);
  sub_20FA49BBC(a1 + 6624);
  sub_20FA49BBC(a1 + 8064);
  sub_20FA52A60(a1 + 9504, a2, a3[12] | ((unint64_t)a4[12] << 32));
  sub_20F8E29B8(a1 + 10944, a2, a3[12] | ((unint64_t)a4[14] << 32));
  sub_20F8E29B8(a1 + 12384, a2, a3[12] | ((unint64_t)a4[16] << 32));
  sub_20F8E1E24(a1 + 13824, a2, a3[12] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 720);
  sub_20FA49BBC(a1 + 2160);
  sub_20FA49BBC(a1 + 3600);
  sub_20FA49BBC(a1 + 5040);
  sub_20FA49BBC(a1 + 6480);
  sub_20FA537FC(a1 + 7920, a2, a3[10] | ((unint64_t)a4[10] << 32));
  sub_20F8E59EC(a1 + 9360, a2, a3[10] | ((unint64_t)a4[12] << 32));
  sub_20F8E6434(a1 + 10800, a2, a3[10] | ((unint64_t)a4[14] << 32));
  sub_20F8E6434(a1 + 12240, a2, a3[10] | ((unint64_t)a4[16] << 32));
  sub_20F8E59EC(a1 + 13680, a2, a3[10] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 576);
  sub_20FA49BBC(a1 + 2016);
  sub_20FA49BBC(a1 + 3456);
  sub_20FA49BBC(a1 + 4896);
  sub_20FA52A60(a1 + 6336, a2, a3[8] | ((unint64_t)a4[8] << 32));
  sub_20F8E2400(a1 + 7776, a2, a3[8] | ((unint64_t)a4[10] << 32));
  sub_20F8E1E24(a1 + 9216, a2, a3[8] | ((unint64_t)a4[12] << 32));
  sub_20F8E29B8(a1 + 10656, a2, a3[8] | ((unint64_t)a4[14] << 32));
  sub_20F8E29B8(a1 + 12096, a2, a3[8] | ((unint64_t)a4[16] << 32));
  sub_20F8E1E24(a1 + 13536, a2, a3[8] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 432);
  sub_20FA49BBC(a1 + 1872);
  sub_20FA49BBC(a1 + 3312);
  sub_20FA53D84(a1 + 4752, a2, a3[6] | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 6192, a2, a3[6] | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7632, a2, a3[6] | ((unint64_t)a4[10] << 32));
  sub_20F8E7748(a1 + 9072, a2, a3[6] | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10512, a2, a3[6] | ((unint64_t)a4[14] << 32));
  sub_20F8E8310(a1 + 11952, a2, a3[6] | ((unint64_t)a4[16] << 32));
  sub_20F8E7748(a1 + 13392, a2, a3[6] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 288);
  sub_20FA49BBC(a1 + 1728);
  sub_20FA53D84(a1 + 3168, a2, a3[4] | ((unint64_t)a4[4] << 32));
  sub_20F8E6A0C(a1 + 4608, a2, a3[4] | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 6048, a2, a3[4] | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7488, a2, a3[4] | ((unint64_t)a4[10] << 32));
  sub_20F8E7748(a1 + 8928, a2, a3[4] | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10368, a2, a3[4] | ((unint64_t)a4[14] << 32));
  sub_20F8E8310(a1 + 11808, a2, a3[4] | ((unint64_t)a4[16] << 32));
  sub_20F8E7748(a1 + 13248, a2, a3[4] | ((unint64_t)a4[18] << 32));
  sub_20FA49BBC(a1 + 144);
  sub_20FA544C4(a1 + 1584, a2, a3[2] | ((unint64_t)a4[2] << 32));
  sub_20F8E8924(a1 + 3024, a2, a3[2] | ((unint64_t)a4[4] << 32));
  sub_20F8E8924(a1 + 4464, a2, a3[2] | ((unint64_t)a4[6] << 32));
  sub_20F8E97D8(a1 + 5904, a2, a3[2] | ((unint64_t)a4[8] << 32));
  sub_20F8E9DE4(a1 + 7344, a2, a3[2] | ((unint64_t)a4[10] << 32));
  sub_20F8E97D8(a1 + 8784, a2, a3[2] | ((unint64_t)a4[12] << 32));
  sub_20F8EA39C(a1 + 10224, a2, a3[2] | ((unint64_t)a4[14] << 32));
  sub_20F8EA39C(a1 + 11664, a2, a3[2] | ((unint64_t)a4[16] << 32));
  sub_20F8E97D8(a1 + 13104, a2, a3[2] | ((unint64_t)a4[18] << 32));
  sub_20FA53D84(a1, a2, *a3 | ((unint64_t)*a4 << 32));
  sub_20F8E7068(a1 + 1440, a2, *a3 | ((unint64_t)a4[2] << 32));
  sub_20F8E6A0C(a1 + 2880, a2, *a3 | ((unint64_t)a4[4] << 32));
  sub_20F8E6A0C(a1 + 4320, a2, *a3 | ((unint64_t)a4[6] << 32));
  sub_20F8E7748(a1 + 5760, a2, *a3 | ((unint64_t)a4[8] << 32));
  sub_20F8E7D3C(a1 + 7200, a2, *a3 | ((unint64_t)a4[10] << 32));
  sub_20F8E7748(a1 + 8640, a2, *a3 | ((unint64_t)a4[12] << 32));
  sub_20F8E8310(a1 + 10080, a2, *a3 | ((unint64_t)a4[14] << 32));
  sub_20F8E8310(a1 + 11520, a2, *a3 | ((unint64_t)a4[16] << 32));
  return sub_20F8E7748(a1 + 12960, a2, *a3 | ((unint64_t)a4[18] << 32));
}

void sub_20FA52A60(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64x2_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  size_t v69;
  BOOL v70;
  uint64_t v71;
  int64x2_t v72;
  int64x2_t *v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  int64x2_t *v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  const double *v91;
  uint64_t v92;
  unint64_t v93;
  float64x2_t v94;
  float64x2_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v8 = (_QWORD *)(a1 + 16);
    v97 = HIDWORD(a3);
    v101 = 1;
    v98 = a1 + 40;
    v103 = a3;
    v104 = (_QWORD *)(a1 + 16);
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 88);
      v10 = *(_DWORD *)(a1 + 112) * v6;
      v11 = *(_DWORD *)(a1 + 8);
      if (v11)
      {
        v12 = (uint64_t *)(v9 + 8 * v10);
        v13 = 8 * (v11 + v10) - 8 * v10;
        do
        {
          v14 = *v12;
          if (*v12 != -1)
          {
            v15 = *(_QWORD *)(a1 + 56);
            v16 = *(_QWORD *)(a1 + 48);
            v17 = ((v15 - v16) << 6) - 1;
            if (v15 == v16)
              v17 = 0;
            v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
            if (v17 == v18)
            {
              sub_20EDB36DC(v7);
              v16 = *(_QWORD *)(a1 + 48);
              v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              v14 = *v12;
            }
            *(_QWORD *)(*(_QWORD *)(v16 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF)) = v14;
            ++*(_QWORD *)(a1 + 80);
            *v12 = -1;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
        v9 = *(_QWORD *)(a1 + 88);
        v11 = *(_DWORD *)(a1 + 8);
        v10 = *(_DWORD *)(a1 + 112) * v6;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6) = 0;
      v19 = v6 + 1;
      v100 = v6 + 1;
      if (v11 < (int)v6 + 1)
        v19 = v11;
      if (v19)
        break;
LABEL_3:
      ++v101;
      v6 = v100;
      v7 = v98;
      if (v100 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v20 = 0;
    v21 = v9 + 8 * v10;
    v22 = 3 * v6 + v97;
    if (v11 >= v101)
      v23 = v101;
    else
      v23 = v11;
    v108 = 3 * v6 + v97;
    v106 = v6;
    v107 = v23;
    v105 = v9 + 8 * v10;
    while (1)
    {
      v34 = *v4;
      v35 = *((unsigned int *)v4 + 4);
      v36 = *(_QWORD *)(v21 + 8 * v20);
      if (v36 == -1)
        break;
      v24 = *v8 + 8 * v36;
LABEL_22:
      v25 = (__int128 *)(v34 + 8 * (3 * v20 + v3 + v35 * v22));
      v26 = *((_QWORD *)v25 + 2);
      v27 = *v25;
      v28 = (__int128 *)((char *)v25 + 8 * v35);
      v29 = *((_QWORD *)v28 + 2);
      v30 = *v28;
      v31 = &v25[v35];
      v32 = *((_QWORD *)v31 + 2);
      v33 = *v31;
      *(_OWORD *)v24 = v27;
      *(_QWORD *)(v24 + 16) = v26;
      *(_OWORD *)(v24 + 24) = v30;
      *(_QWORD *)(v24 + 40) = v29;
      *(_OWORD *)(v24 + 48) = v33;
      *(_QWORD *)(v24 + 64) = v32;
      if (++v20 == v23)
        goto LABEL_3;
    }
    v37 = *(_QWORD *)(a1 + 80);
    if (v37)
    {
      v39 = *(_QWORD *)(a1 + 48);
      v38 = *(_QWORD *)(a1 + 56);
      v40 = ((v38 - v39) << 6) - 1;
      v41 = *(_QWORD *)(a1 + 72);
      if (v38 == v39)
        v40 = 0;
      v24 = *(_QWORD *)(a1 + 16)
          + 8
          * *(_QWORD *)(*(_QWORD *)(v39 + (((unint64_t)(v41 + v37 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v41 + v37 - 1) & 0x1FF));
      *(_QWORD *)(a1 + 80) = v37 - 1;
      if ((unint64_t)(v40 - (v37 + v41) + 1) >= 0x400)
      {
        operator delete(*(void **)(v38 - 8));
        v23 = v107;
        v22 = v108;
        *(_QWORD *)(a1 + 56) -= 8;
      }
      goto LABEL_88;
    }
    v109 = 0;
    v42 = *(_QWORD *)(a1 + 16);
    v43 = *(int64x2_t **)(a1 + 24);
    v44 = (unint64_t)v43 - v42;
    v45 = (uint64_t)((uint64_t)v43->i64 - v42) >> 3;
    v46 = (uint64_t *)(v42 + (((unint64_t)v43 - v42) & 0xFFFFFFFFFFFFFFF8));
    v47 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v47 - (_QWORD)v43) < 0x48)
    {
      v48 = v45 + 9;
      if ((unint64_t)(v45 + 9) >> 61)
        sub_20E867F44();
      v49 = v47 - v42;
      if (v49 >> 2 > v48)
        v48 = v49 >> 2;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      v102 = v48;
      if (v48)
      {
        if (v48 >> 61)
          sub_20E877A38();
        v50 = operator new(8 * v48);
      }
      else
      {
        v50 = 0;
      }
      v57 = &v50[8 * v45];
      *((_QWORD *)v57 + 8) = 0;
      *((_OWORD *)v57 + 2) = 0u;
      *((_OWORD *)v57 + 3) = 0u;
      *(_OWORD *)v57 = 0u;
      *((_OWORD *)v57 + 1) = 0u;
      if ((int64x2_t *)v42 == v43)
      {
        v59 = &v50[8 * v45];
      }
      else
      {
        if (v44 - 8 >= 0x68)
        {
          v58 = (char *)(v42 + (((unint64_t)v43 - v42) & 0xFFFFFFFFFFFFFFF8));
          v59 = &v50[8 * v45];
          if (v42 + (v44 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v50[v44 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v60 = ((v44 - 8) >> 3) + 1;
            v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
            v58 = (char *)&v46[v61 / 0xFFFFFFFFFFFFFFF8];
            v59 = &v57[-v61];
            v62 = 8 * ((uint64_t)((uint64_t)v43->i64 - v42) >> 3);
            v63 = &v50[v62 - 16];
            v64 = (__int128 *)(v42 + v62 - 16);
            v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v66 = *v64;
              *(v63 - 1) = *(v64 - 1);
              *v63 = v66;
              v63 -= 2;
              v64 -= 2;
              v65 -= 4;
            }
            while (v65);
            if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_52;
          }
        }
        else
        {
          v58 = (char *)(v42 + (((unint64_t)v43 - v42) & 0xFFFFFFFFFFFFFFF8));
          v59 = &v50[8 * v45];
        }
        do
        {
          v67 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v59 - 1) = v67;
          v59 -= 8;
        }
        while (v58 != (char *)v42);
      }
LABEL_52:
      v68 = v57 + 72;
      v69 = (char *)v43 - (char *)v46;
      if (v69)
        memmove(v57 + 72, v46, v69);
      *(_QWORD *)(a1 + 16) = v59;
      *(_QWORD *)(a1 + 24) = &v68[v69];
      *(_QWORD *)(a1 + 32) = &v50[8 * v102];
      v22 = v108;
      v23 = v107;
      v4 = a2;
      if (v42)
      {
        operator delete((void *)v42);
        v23 = v107;
        v22 = v108;
      }
      goto LABEL_87;
    }
    v51 = (char *)v43 - (char *)v46;
    if ((unint64_t)((char *)v43 - (char *)v46) > 0x47)
    {
      v53 = *(uint64_t **)(a1 + 24);
      v52 = 9;
      goto LABEL_63;
    }
    v52 = v51 >> 3;
    v53 = &v43->i64[9 - (v51 >> 3)];
    v54 = v51 & 0xFFFFFFFFFFFFFFF8;
    v55 = 64 - v54;
    if (64 - v54 >= 0x68)
    {
      v70 = &v109 < (uint64_t *)((char *)&v43[4].i64[1] - v54);
      if (v43 >= (int64x2_t *)&v110 || (v56 = *(uint64_t **)(a1 + 24), !v70))
      {
        v71 = (v55 >> 3) + 1;
        v56 = &v43->i64[v71 & 0x3FFFFFFFFFFFFFFCLL];
        v72 = vdupq_lane_s64(v109, 0);
        v73 = v43 + 1;
        v74 = v71 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v73[-1] = v72;
          *v73 = v72;
          v73 += 2;
          v74 -= 4;
        }
        while (v74);
        if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_62:
          *(_QWORD *)(a1 + 24) = v53;
          if (v43 == (int64x2_t *)v46)
            goto LABEL_87;
LABEL_63:
          v75 = (char *)v53 - (char *)(v46 + 9);
          v76 = v75 >> 3;
          v77 = (int64x2_t *)(v53 - 9);
          v78 = (char *)v53;
          if (v53 - 9 < (uint64_t *)v43)
          {
            v79 = (v44 & 0xFFFFFFFFFFFFFFF8) + v75;
            v80 = v42 + v79 + 8;
            if ((unint64_t)v43 > v80)
              v80 = (unint64_t)v43;
            v81 = v80 + ~v42 - v79;
            if (v81 >= 0x58)
            {
              v82 = (v81 >> 3) + 1;
              v83 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              v77 = (int64x2_t *)((char *)v77 + v83 * 8);
              v78 = (char *)&v53[v83];
              v84 = v53 + 2;
              v85 = (__int128 *)(v42 + 8 * v76 + 8 * v45 + 16);
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v85;
                *(v84 - 1) = *(v85 - 1);
                *v84 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_72;
            }
            else
            {
              v78 = (char *)v53;
            }
            do
            {
              v88 = v77->i64[0];
              v77 = (int64x2_t *)((char *)v77 + 8);
              *(_QWORD *)v78 = v88;
              v78 += 8;
            }
            while (v77 < v43);
          }
LABEL_72:
          *(_QWORD *)(a1 + 24) = v78;
          if (v53 != v46 + 9)
          {
            v89 = (char *)(v42 + (((unint64_t)v43 - v42) & 0xFFFFFFFFFFFFFFF8));
            v90 = v52;
            memmove(&v53[-v76], v89, v75);
            v52 = v90;
            v23 = v107;
            v22 = v108;
          }
          v91 = (const double *)&v109;
          if (v46 <= &v109)
          {
            v92 = 72;
            if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v109)
              v92 = 0;
            v91 = (const double *)((char *)&v109 + v92);
          }
          if (v52 >= 0xA)
          {
            if (v46 >= (uint64_t *)v91 + 1 || (unint64_t)v91 >= v42 + (v44 & 0xFFFFFFFFFFFFFFF8) + 8 * v52)
            {
              v46 += v52 & 0xFFFFFFFFFFFFFFFCLL;
              v93 = v52 & 3;
              v94 = vld1q_dup_f64(v91);
              v95 = (float64x2_t *)(v42 + 8 * v45 + 16);
              v96 = v52 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v95[-1] = v94;
                *v95 = v94;
                v95 += 2;
                v96 -= 4;
              }
              while (v96);
              if (v52 == (v52 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_87;
            }
            else
            {
              v93 = v52;
            }
          }
          else
          {
            v93 = v52;
          }
          do
          {
            *v46++ = *(_QWORD *)v91;
            --v93;
          }
          while (v93);
LABEL_87:
          v24 = *(_QWORD *)(a1 + 24) - 72;
          v3 = v103;
          v8 = v104;
          v21 = v105;
          v6 = v106;
LABEL_88:
          *(_QWORD *)(v21 + 8 * v20) = (v24 - *(_QWORD *)(a1 + 16)) >> 3;
          ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6);
          goto LABEL_22;
        }
      }
    }
    else
    {
      v56 = *(uint64_t **)(a1 + 24);
    }
    do
      *v56++ = v109;
    while (v56 != v53);
    goto LABEL_62;
  }
}

void sub_20FA5312C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64x2_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  _OWORD *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  _OWORD *v71;
  size_t v72;
  BOOL v73;
  uint64_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  int64x2_t *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  float64x2_t v96;
  float64x2_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  int v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v8 = (_QWORD *)(a1 + 16);
    v99 = HIDWORD(a3);
    v103 = 1;
    v100 = a1 + 40;
    v105 = a3;
    v106 = (_QWORD *)(a1 + 16);
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 88);
      v10 = *(_DWORD *)(a1 + 112) * v6;
      v11 = *(_DWORD *)(a1 + 8);
      if (v11)
      {
        v12 = (uint64_t *)(v9 + 8 * v10);
        v13 = 8 * (v11 + v10) - 8 * v10;
        do
        {
          v14 = *v12;
          if (*v12 != -1)
          {
            v15 = *(_QWORD *)(a1 + 56);
            v16 = *(_QWORD *)(a1 + 48);
            v17 = ((v15 - v16) << 6) - 1;
            if (v15 == v16)
              v17 = 0;
            v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
            if (v17 == v18)
            {
              sub_20EDB36DC(v7);
              v16 = *(_QWORD *)(a1 + 48);
              v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              v14 = *v12;
            }
            *(_QWORD *)(*(_QWORD *)(v16 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF)) = v14;
            ++*(_QWORD *)(a1 + 80);
            *v12 = -1;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
        v9 = *(_QWORD *)(a1 + 88);
        v11 = *(_DWORD *)(a1 + 8);
        v10 = *(_DWORD *)(a1 + 112) * v6;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6) = 0;
      v19 = v6 + 1;
      v102 = v6 + 1;
      if (v11 < (int)v6 + 1)
        v19 = v11;
      if (v19)
        break;
LABEL_3:
      ++v103;
      v6 = v102;
      v7 = v100;
      if (v102 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v20 = 0;
    v21 = v9 + 8 * v10;
    v22 = v99 + 4 * v6;
    if (v11 >= v103)
      v23 = v103;
    else
      v23 = v11;
    v110 = v9 + 8 * v10;
    v109 = v99 + 4 * v6;
    v107 = v6;
    v108 = v23;
    while (1)
    {
      v37 = *v4;
      v38 = *((unsigned int *)v4 + 4);
      v39 = *(_QWORD *)(v21 + 8 * v20);
      if (v39 == -1)
        break;
      v24 = (_OWORD *)(*v8 + 8 * v39);
LABEL_22:
      v25 = (__int128 *)(v37 + 8 * (v3 + 4 * v20 + v38 * v22));
      v27 = *v25;
      v26 = v25[1];
      v28 = (__int128 *)((char *)v25 + 8 * v38);
      v30 = *v28;
      v29 = v28[1];
      v31 = &v25[v38];
      v33 = *v31;
      v32 = v31[1];
      v34 = (__int128 *)((char *)v25 + 24 * v38);
      v36 = *v34;
      v35 = v34[1];
      *v24 = v27;
      v24[1] = v26;
      v24[2] = v30;
      v24[3] = v29;
      v24[4] = v33;
      v24[5] = v32;
      v24[6] = v36;
      v24[7] = v35;
      if (++v20 == v23)
        goto LABEL_3;
    }
    v40 = *(_QWORD *)(a1 + 80);
    if (v40)
    {
      v42 = *(_QWORD *)(a1 + 48);
      v41 = *(_QWORD *)(a1 + 56);
      v43 = ((v41 - v42) << 6) - 1;
      v44 = *(_QWORD *)(a1 + 72);
      if (v41 == v42)
        v43 = 0;
      v24 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                     + 8
                     * *(_QWORD *)(*(_QWORD *)(v42 + (((unint64_t)(v44 + v40 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v44 + v40 - 1) & 0x1FF)));
      *(_QWORD *)(a1 + 80) = v40 - 1;
      if ((unint64_t)(v43 - (v40 + v44) + 1) >= 0x400)
      {
        operator delete(*(void **)(v41 - 8));
        v23 = v108;
        v22 = v109;
        v21 = v110;
        *(_QWORD *)(a1 + 56) -= 8;
      }
      goto LABEL_86;
    }
    v111 = 0;
    v45 = *(_QWORD *)(a1 + 16);
    v46 = *(int64x2_t **)(a1 + 24);
    v47 = (unint64_t)v46 - v45;
    v48 = (uint64_t)((uint64_t)v46->i64 - v45) >> 3;
    v49 = (uint64_t *)(v45 + (((unint64_t)v46 - v45) & 0xFFFFFFFFFFFFFFF8));
    v50 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v50 - (_QWORD)v46) < 0x80)
    {
      v51 = v48 + 16;
      if ((unint64_t)(v48 + 16) >> 61)
        sub_20E867F44();
      v52 = v50 - v45;
      if (v52 >> 2 > v51)
        v51 = v52 >> 2;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
        v51 = 0x1FFFFFFFFFFFFFFFLL;
      v104 = v51;
      if (v51)
      {
        if (v51 >> 61)
          sub_20E877A38();
        v53 = operator new(8 * v51);
      }
      else
      {
        v53 = 0;
      }
      v60 = &v53[8 * v48];
      v60[6] = 0u;
      v60[7] = 0u;
      v60[4] = 0u;
      v60[5] = 0u;
      v60[2] = 0u;
      v60[3] = 0u;
      *v60 = 0u;
      v60[1] = 0u;
      if ((int64x2_t *)v45 == v46)
      {
        v62 = &v53[8 * v48];
      }
      else
      {
        if (v47 - 8 >= 0x68)
        {
          v61 = (char *)(v45 + (((unint64_t)v46 - v45) & 0xFFFFFFFFFFFFFFF8));
          v62 = &v53[8 * v48];
          if (v45 + (v47 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v53[v47 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v63 = ((v47 - 8) >> 3) + 1;
            v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
            v61 = (char *)&v49[v64 / 0xFFFFFFFFFFFFFFF8];
            v62 = (char *)v60 - v64;
            v65 = 8 * ((uint64_t)((uint64_t)v46->i64 - v45) >> 3);
            v66 = &v53[v65 - 16];
            v67 = (__int128 *)(v45 + v65 - 16);
            v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v69 = *v67;
              *(v66 - 1) = *(v67 - 1);
              *v66 = v69;
              v66 -= 2;
              v67 -= 2;
              v68 -= 4;
            }
            while (v68);
            if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_52;
          }
        }
        else
        {
          v61 = (char *)(v45 + (((unint64_t)v46 - v45) & 0xFFFFFFFFFFFFFFF8));
          v62 = &v53[8 * v48];
        }
        do
        {
          v70 = *((_QWORD *)v61 - 1);
          v61 -= 8;
          *((_QWORD *)v62 - 1) = v70;
          v62 -= 8;
        }
        while (v61 != (char *)v45);
      }
LABEL_52:
      v71 = v60 + 8;
      v72 = (char *)v46 - (char *)v49;
      if (v72)
        memmove(v60 + 8, v49, v72);
      *(_QWORD *)(a1 + 16) = v62;
      *(_QWORD *)(a1 + 24) = (char *)v71 + v72;
      *(_QWORD *)(a1 + 32) = &v53[8 * v104];
      v21 = v110;
      v22 = v109;
      v23 = v108;
      v4 = a2;
      if (v45)
      {
        operator delete((void *)v45);
        v23 = v108;
        v22 = v109;
        v21 = v110;
      }
      goto LABEL_85;
    }
    v54 = (char *)v46 - (char *)v49;
    if ((unint64_t)((char *)v46 - (char *)v49) > 0x7F)
    {
      v56 = *(uint64_t **)(a1 + 24);
      v55 = 16;
      goto LABEL_63;
    }
    v55 = v54 >> 3;
    v56 = &v46->i64[16 - (v54 >> 3)];
    v57 = v54 & 0xFFFFFFFFFFFFFFF8;
    v58 = 120 - v57;
    if (120 - v57 >= 0x68)
    {
      v73 = &v111 < (uint64_t *)((char *)v46[8].i64 - v57);
      if (v46 >= (int64x2_t *)&v112 || (v59 = *(uint64_t **)(a1 + 24), !v73))
      {
        v74 = (v58 >> 3) + 1;
        v59 = &v46->i64[v74 & 0x3FFFFFFFFFFFFFFCLL];
        v75 = vdupq_lane_s64(v111, 0);
        v76 = v46 + 1;
        v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v76[-1] = v75;
          *v76 = v75;
          v76 += 2;
          v77 -= 4;
        }
        while (v77);
        if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_62:
          *(_QWORD *)(a1 + 24) = v56;
          if (v46 == (int64x2_t *)v49)
            goto LABEL_85;
LABEL_63:
          v78 = (char *)v56 - (char *)(v49 + 16);
          v79 = v78 >> 3;
          v80 = (int64x2_t *)(v56 - 16);
          v81 = (char *)v56;
          if (v56 - 16 < (uint64_t *)v46)
          {
            v82 = (v47 & 0xFFFFFFFFFFFFFFF8) + v78;
            v83 = v45 + v82 + 8;
            if ((unint64_t)v46 > v83)
              v83 = (unint64_t)v46;
            v84 = v83 + ~v45 - v82;
            if (v84 >= 0x58)
            {
              v85 = (v84 >> 3) + 1;
              v86 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              v80 = (int64x2_t *)((char *)v80 + v86 * 8);
              v81 = (char *)&v56[v86];
              v87 = v56 + 2;
              v88 = (__int128 *)(v45 + 8 * v79 + 8 * v48 + 16);
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v88;
                *(v87 - 1) = *(v88 - 1);
                *v87 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_72;
            }
            else
            {
              v81 = (char *)v56;
            }
            do
            {
              v91 = v80->i64[0];
              v80 = (int64x2_t *)((char *)v80 + 8);
              *(_QWORD *)v81 = v91;
              v81 += 8;
            }
            while (v80 < v46);
          }
LABEL_72:
          *(_QWORD *)(a1 + 24) = v81;
          if (v56 != v49 + 16)
          {
            v92 = (char *)(v45 + (((unint64_t)v46 - v45) & 0xFFFFFFFFFFFFFFF8));
            v93 = v55;
            memmove(&v56[-v79], v92, v78);
            v55 = v93;
            v23 = v108;
            v22 = v109;
            v21 = v110;
          }
          v94 = &v111;
          if (v49 <= &v111)
            v94 = &v111 + 16 * (unint64_t)(*(_QWORD *)(a1 + 24) > (unint64_t)&v111);
          if (v55 >= 0xA)
          {
            if (v49 >= v94 + 1 || (unint64_t)v94 >= v45 + (v47 & 0xFFFFFFFFFFFFFFF8) + 8 * v55)
            {
              v49 += v55 & 0xFFFFFFFFFFFFFFFCLL;
              v95 = v55 & 3;
              v96 = vld1q_dup_f64((const double *)v94);
              v97 = (float64x2_t *)(v45 + 8 * v48 + 16);
              v98 = v55 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v97[-1] = v96;
                *v97 = v96;
                v97 += 2;
                v98 -= 4;
              }
              while (v98);
              if (v55 == (v55 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_85;
            }
            else
            {
              v95 = v55;
            }
          }
          else
          {
            v95 = v55;
          }
          do
          {
            *v49++ = *v94;
            --v95;
          }
          while (v95);
LABEL_85:
          v24 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 128);
          v3 = v105;
          v8 = v106;
          v6 = v107;
LABEL_86:
          *(_QWORD *)(v21 + 8 * v20) = ((uint64_t)v24 - *(_QWORD *)(a1 + 16)) >> 3;
          ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6);
          goto LABEL_22;
        }
      }
    }
    else
    {
      v59 = *(uint64_t **)(a1 + 24);
    }
    do
      *v59++ = v111;
    while (v59 != v56);
    goto LABEL_62;
  }
}

void sub_20FA537FC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  size_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v58 = HIDWORD(a3);
    v7 = a1 + 40;
    v8 = (_QWORD *)(a1 + 16);
    v65 = 1;
    v60 = a1 + 40;
    v61 = a3;
    v66 = (_QWORD *)(a1 + 16);
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 88);
      v10 = *(_DWORD *)(a1 + 112) * v6;
      v11 = *(_DWORD *)(a1 + 8);
      if (v11)
      {
        v12 = (uint64_t *)(v9 + 8 * v10);
        v13 = 8 * (v11 + v10) - 8 * v10;
        do
        {
          v14 = *v12;
          if (*v12 != -1)
          {
            v15 = *(_QWORD *)(a1 + 56);
            v16 = *(_QWORD *)(a1 + 48);
            v17 = ((v15 - v16) << 6) - 1;
            if (v15 == v16)
              v17 = 0;
            v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
            if (v17 == v18)
            {
              sub_20EDB36DC(v7);
              v16 = *(_QWORD *)(a1 + 48);
              v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              v14 = *v12;
            }
            *(_QWORD *)(*(_QWORD *)(v16 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF)) = v14;
            ++*(_QWORD *)(a1 + 80);
            *v12 = -1;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
        v9 = *(_QWORD *)(a1 + 88);
        v11 = *(_DWORD *)(a1 + 8);
        v10 = *(_DWORD *)(a1 + 112) * v6;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6) = 0;
      v19 = v6 + 1;
      v63 = v6 + 1;
      if (v11 < (int)v6 + 1)
        v19 = v11;
      if (v19)
        break;
LABEL_3:
      ++v65;
      v6 = v63;
      v7 = v60;
      if (v63 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v20 = 0;
    v21 = v9 + 8 * v10;
    v22 = v6 + v58;
    if (v11 >= v65)
      v23 = v65;
    else
      v23 = v11;
    v69 = v6 + v58;
    v67 = v6;
    v68 = v23;
    while (1)
    {
      v25 = *v4;
      v26 = *((_DWORD *)v4 + 4);
      v27 = *(_QWORD *)(v21 + 8 * v20);
      if (v27 == -1)
        break;
      v24 = (_QWORD *)(*v8 + 8 * v27);
LABEL_22:
      *v24 = *(_QWORD *)(v25 + 8 * (v20++ + v3 + v26 * v22));
      if (v20 == v23)
        goto LABEL_3;
    }
    v28 = *(_QWORD *)(a1 + 80);
    if (v28)
    {
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = ((v29 - v30) << 6) - 1;
      v32 = *(_QWORD *)(a1 + 72);
      if (v29 == v30)
        v31 = 0;
      v24 = (_QWORD *)(*(_QWORD *)(a1 + 16)
                     + 8
                     * *(_QWORD *)(*(_QWORD *)(v30 + (((unint64_t)(v32 + v28 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v32 + v28 - 1) & 0x1FF)));
      *(_QWORD *)(a1 + 80) = v28 - 1;
      if ((unint64_t)(v31 - (v28 + v32) + 1) >= 0x400)
      {
        operator delete(*(void **)(v29 - 8));
        v23 = v68;
        v22 = v69;
        *(_QWORD *)(a1 + 56) -= 8;
      }
      goto LABEL_63;
    }
    v70 = 0;
    v33 = *(char **)(a1 + 16);
    v34 = *(char **)(a1 + 24);
    v35 = v34 - v33;
    v36 = (v34 - v33) >> 3;
    v37 = &v33[(v34 - v33) & 0xFFFFFFFFFFFFFFF8];
    v38 = *(char **)(a1 + 32);
    if (v38 != v34)
    {
      if (v34 == v37)
      {
        *(_QWORD *)v34 = v70;
        *(_QWORD *)(a1 + 24) = v34 + 8;
        v8 = v66;
      }
      else
      {
        v39 = v34 - 8;
        if ((unint64_t)v34 < 8)
        {
          v40 = *(_QWORD **)(a1 + 24);
        }
        else
        {
          v40 = *(_QWORD **)(a1 + 24);
          do
          {
            v56 = *(_QWORD *)v39;
            v39 += 8;
            *v40++ = v56;
          }
          while (v39 < v34);
        }
        *(_QWORD *)(a1 + 24) = v40;
        if (v34 != v37 + 8)
        {
          memmove(&v34[-8 * ((v34 - (v37 + 8)) >> 3)], v37, v34 - (v37 + 8));
          v37 = &v33[(v34 - v33) & 0xFFFFFFFFFFFFFFF8];
        }
        v57 = &v70;
        if (v37 <= (char *)&v70)
          v57 = &v70 + (*(_QWORD *)(a1 + 24) > (unint64_t)&v70);
        *(_QWORD *)v37 = *v57;
        v8 = v66;
        v22 = v69;
        v23 = v68;
      }
LABEL_62:
      v24 = (_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
      v6 = v67;
LABEL_63:
      *(_QWORD *)(v21 + 8 * v20) = ((uint64_t)v24 - *(_QWORD *)(a1 + 16)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6);
      goto LABEL_22;
    }
    v41 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61)
      sub_20E867F44();
    v42 = v38 - v33;
    if (v42 >> 2 > v41)
      v41 = v42 >> 2;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    v64 = v41;
    if (v41)
    {
      if (v41 >> 61)
        sub_20E877A38();
      v43 = operator new(8 * v41);
      v22 = v69;
      v23 = v68;
      v37 = &v33[(v34 - v33) & 0xFFFFFFFFFFFFFFF8];
      v36 = (v34 - v33) >> 3;
      v4 = a2;
      v44 = &v43[8 * v36];
      *v44 = 0;
      v45 = (char *)(v44 + 1);
      if (v33 == v34)
        goto LABEL_52;
    }
    else
    {
      v43 = 0;
      v44 = (_QWORD *)(8 * v36);
      *(_QWORD *)(8 * v36) = 0;
      v45 = (char *)(8 * v36 + 8);
      if (v33 == v34)
        goto LABEL_52;
    }
    if ((unint64_t)(v35 - 8) >= 0x68)
    {
      v46 = v37;
      if ((unint64_t)(&v33[v35 & 0xFFFFFFFFFFFFFFF8] - &v43[v35 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v47 = ((unint64_t)(v35 - 8) >> 3) + 1;
        v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
        v46 = &v37[-v48];
        v44 = (_QWORD *)((char *)v44 - v48);
        v49 = &v43[8 * v36 - 16];
        v50 = &v33[8 * v36 - 16];
        v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52 = *(_OWORD *)v50;
          *(v49 - 1) = *((_OWORD *)v50 - 1);
          *v49 = v52;
          v49 -= 2;
          v50 -= 32;
          v51 -= 4;
        }
        while (v51);
        if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_52;
      }
    }
    else
    {
      v46 = v37;
    }
    do
    {
      v53 = *((_QWORD *)v46 - 1);
      v46 -= 8;
      *--v44 = v53;
    }
    while (v46 != v33);
LABEL_52:
    v54 = v34 - v37;
    if (v54)
    {
      v62 = v43;
      v55 = v45;
      memmove(v45, v37, v54);
      v45 = v55;
      v43 = v62;
      v23 = v68;
      v22 = v69;
    }
    *(_QWORD *)(a1 + 16) = v44;
    *(_QWORD *)(a1 + 24) = &v45[v54];
    *(_QWORD *)(a1 + 32) = &v43[8 * v64];
    v3 = v61;
    v8 = v66;
    if (v33)
    {
      operator delete(v33);
      v23 = v68;
      v22 = v69;
    }
    goto LABEL_62;
  }
}

void sub_20FA53D84(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64x2_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  _OWORD *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  _OWORD *v82;
  size_t v83;
  BOOL v84;
  uint64_t v85;
  int64x2_t v86;
  int64x2_t *v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  int64x2_t *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  const double *v104;
  uint64_t v105;
  unint64_t v106;
  float64x2_t v107;
  float64x2_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v113;
  int v114;
  unsigned int v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v8 = (_QWORD *)(a1 + 16);
    v110 = HIDWORD(a3);
    v115 = 1;
    v114 = a3;
    v111 = a1 + 40;
    v117 = (_QWORD *)(a1 + 16);
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 88);
      v10 = *(_DWORD *)(a1 + 112) * v6;
      v11 = *(_DWORD *)(a1 + 8);
      if (v11)
      {
        v12 = (uint64_t *)(v9 + 8 * v10);
        v13 = 8 * (v11 + v10) - 8 * v10;
        do
        {
          v14 = *v12;
          if (*v12 != -1)
          {
            v15 = *(_QWORD *)(a1 + 56);
            v16 = *(_QWORD *)(a1 + 48);
            v17 = ((v15 - v16) << 6) - 1;
            if (v15 == v16)
              v17 = 0;
            v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
            if (v17 == v18)
            {
              sub_20EDB36DC(v7);
              v16 = *(_QWORD *)(a1 + 48);
              v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              v14 = *v12;
            }
            *(_QWORD *)(*(_QWORD *)(v16 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF)) = v14;
            ++*(_QWORD *)(a1 + 80);
            *v12 = -1;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
        v9 = *(_QWORD *)(a1 + 88);
        v11 = *(_DWORD *)(a1 + 8);
        v10 = *(_DWORD *)(a1 + 112) * v6;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6) = 0;
      v19 = v6 + 1;
      v113 = v6 + 1;
      if (v11 < (int)v6 + 1)
        v19 = v11;
      if (v19)
        break;
LABEL_3:
      ++v115;
      v6 = v113;
      v7 = v111;
      if (v113 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v20 = 0;
    v21 = v9 + 8 * v10;
    v22 = v110 + 6 * v6;
    if (v11 >= v115)
      v23 = v115;
    else
      v23 = v11;
    v121 = v9 + 8 * v10;
    v120 = v110 + 6 * v6;
    v118 = v6;
    v119 = v23;
    while (1)
    {
      v49 = *v4;
      v50 = *((unsigned int *)v4 + 4);
      v51 = *(_QWORD *)(v21 + 8 * v20);
      if (v51 == -1)
        break;
      v24 = (_OWORD *)(*v8 + 8 * v51);
LABEL_22:
      v25 = (__int128 *)(v49 + 8 * (v3 + 6 * v20 + v50 * v22));
      v27 = v25[1];
      v26 = v25[2];
      v28 = *v25;
      v29 = (__int128 *)((char *)v25 + 8 * v50);
      v31 = v29[1];
      v30 = v29[2];
      v32 = *v29;
      v33 = &v25[v50];
      v35 = v33[1];
      v34 = v33[2];
      v36 = *v33;
      v37 = (__int128 *)((char *)v25 + 24 * v50);
      v39 = v37[1];
      v38 = v37[2];
      v40 = *v37;
      v41 = &v25[2 * v50];
      v43 = v41[1];
      v42 = v41[2];
      v44 = *v41;
      v45 = (__int128 *)((char *)v25 + 40 * v50);
      v47 = v45[1];
      v46 = v45[2];
      v48 = *v45;
      *v24 = v28;
      v24[1] = v27;
      v24[2] = v26;
      v24[3] = v32;
      v24[4] = v31;
      v24[5] = v30;
      v24[6] = v36;
      v24[7] = v35;
      v24[8] = v34;
      v24[9] = v40;
      v24[10] = v39;
      v24[11] = v38;
      v24[12] = v44;
      v24[13] = v43;
      v24[14] = v42;
      v24[15] = v48;
      v24[16] = v47;
      v24[17] = v46;
      if (++v20 == v23)
        goto LABEL_3;
    }
    v52 = *(_QWORD *)(a1 + 80);
    if (v52)
    {
      v54 = *(_QWORD *)(a1 + 48);
      v53 = *(_QWORD *)(a1 + 56);
      v55 = ((v53 - v54) << 6) - 1;
      v56 = *(_QWORD *)(a1 + 72);
      if (v53 == v54)
        v55 = 0;
      v24 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                     + 8
                     * *(_QWORD *)(*(_QWORD *)(v54 + (((unint64_t)(v56 + v52 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v56 + v52 - 1) & 0x1FF)));
      *(_QWORD *)(a1 + 80) = v52 - 1;
      if ((unint64_t)(v55 - (v52 + v56) + 1) >= 0x400)
      {
        operator delete(*(void **)(v53 - 8));
        v23 = v119;
        v22 = v120;
        v21 = v121;
        *(_QWORD *)(a1 + 56) -= 8;
      }
      goto LABEL_84;
    }
    v122 = 0;
    v57 = *(_QWORD *)(a1 + 16);
    v58 = *(int64x2_t **)(a1 + 24);
    v59 = (unint64_t)v58 - v57;
    v60 = (uint64_t)((uint64_t)v58->i64 - v57) >> 3;
    v61 = (uint64_t *)(v57 + (((unint64_t)v58 - v57) & 0xFFFFFFFFFFFFFFF8));
    v62 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v62 - (_QWORD)v58) < 0x120)
    {
      v63 = v60 + 36;
      if ((unint64_t)(v60 + 36) >> 61)
        sub_20E867F44();
      v64 = v62 - v57;
      if (v64 >> 2 > v63)
        v63 = v64 >> 2;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      v116 = v63;
      if (v63)
      {
        if (v63 >> 61)
          sub_20E877A38();
        v65 = operator new(8 * v63);
        v60 = (uint64_t)((uint64_t)v58->i64 - v57) >> 3;
      }
      else
      {
        v65 = 0;
      }
      v72 = &v65[8 * v60];
      v72[16] = 0u;
      v72[17] = 0u;
      v72[14] = 0u;
      v72[15] = 0u;
      v72[12] = 0u;
      v72[13] = 0u;
      v72[10] = 0u;
      v72[11] = 0u;
      v72[8] = 0u;
      v72[9] = 0u;
      v72[6] = 0u;
      v72[7] = 0u;
      v72[4] = 0u;
      v72[5] = 0u;
      v72[2] = 0u;
      v72[3] = 0u;
      *v72 = 0u;
      v72[1] = 0u;
      if ((int64x2_t *)v57 == v58)
      {
        v74 = &v65[8 * v60];
      }
      else
      {
        if (v59 - 8 >= 0x68)
        {
          v73 = (char *)(v57 + (((unint64_t)v58 - v57) & 0xFFFFFFFFFFFFFFF8));
          v74 = &v65[8 * v60];
          if (v57 + (v59 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v65[v59 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v75 = ((v59 - 8) >> 3) + 1;
            v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
            v73 = (char *)&v61[v76 / 0xFFFFFFFFFFFFFFF8];
            v74 = (char *)v72 - v76;
            v77 = &v65[8 * v60 - 16];
            v78 = (__int128 *)(v57 + 8 * v60 - 16);
            v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v80 = *v78;
              *(v77 - 1) = *(v78 - 1);
              *v77 = v80;
              v77 -= 2;
              v78 -= 2;
              v79 -= 4;
            }
            while (v79);
            if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_52;
          }
        }
        else
        {
          v73 = (char *)(v57 + (((unint64_t)v58 - v57) & 0xFFFFFFFFFFFFFFF8));
          v74 = &v65[8 * v60];
        }
        do
        {
          v81 = *((_QWORD *)v73 - 1);
          v73 -= 8;
          *((_QWORD *)v74 - 1) = v81;
          v74 -= 8;
        }
        while (v73 != (char *)v57);
      }
LABEL_52:
      v82 = v72 + 18;
      v83 = (char *)v58 - (char *)v61;
      if (v83)
        memmove(v72 + 18, v61, v83);
      *(_QWORD *)(a1 + 16) = v74;
      *(_QWORD *)(a1 + 24) = (char *)v82 + v83;
      *(_QWORD *)(a1 + 32) = &v65[8 * v116];
      v3 = v114;
      v21 = v121;
      v22 = v120;
      v23 = v119;
      v4 = a2;
      if (v57)
      {
        operator delete((void *)v57);
        v23 = v119;
        v22 = v120;
        v21 = v121;
      }
      goto LABEL_83;
    }
    v66 = (char *)v58 - (char *)v61;
    if ((unint64_t)((char *)v58 - (char *)v61) > 0x11F)
    {
      v68 = *(uint64_t **)(a1 + 24);
      v67 = 36;
      goto LABEL_63;
    }
    v67 = v66 >> 3;
    v68 = &v58->i64[36 - (v66 >> 3)];
    v69 = v66 & 0xFFFFFFFFFFFFFFF8;
    v70 = 280 - v69;
    if (280 - v69 >= 0x68)
    {
      v84 = &v122 < (uint64_t *)((char *)v58[18].i64 - v69);
      if (v58 >= (int64x2_t *)&v123 || (v71 = *(uint64_t **)(a1 + 24), !v84))
      {
        v85 = (v70 >> 3) + 1;
        v71 = &v58->i64[v85 & 0x3FFFFFFFFFFFFFFCLL];
        v86 = vdupq_lane_s64(v122, 0);
        v87 = v58 + 1;
        v88 = v85 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v87[-1] = v86;
          *v87 = v86;
          v87 += 2;
          v88 -= 4;
        }
        while (v88);
        if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_62:
          *(_QWORD *)(a1 + 24) = v68;
          if (v58 == (int64x2_t *)v61)
            goto LABEL_83;
LABEL_63:
          v89 = (char *)v68 - (char *)(v61 + 36);
          v90 = v89 >> 3;
          v91 = (int64x2_t *)(v68 - 36);
          v92 = (char *)v68;
          if (v68 - 36 < (uint64_t *)v58)
          {
            v93 = (v59 & 0xFFFFFFFFFFFFFFF8) + v89;
            v94 = v57 + v93 + 8;
            if ((unint64_t)v58 > v94)
              v94 = (unint64_t)v58;
            v95 = v94 + ~v57 - v93;
            if (v95 >= 0x58)
            {
              v96 = (v95 >> 3) + 1;
              v97 = v96 & 0x3FFFFFFFFFFFFFFCLL;
              v91 = (int64x2_t *)((char *)v91 + v97 * 8);
              v92 = (char *)&v68[v97];
              v98 = v68 + 2;
              v99 = (__int128 *)(v57 + 8 * v90 + 8 * v60 + 16);
              v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v101 = *v99;
                *(v98 - 1) = *(v99 - 1);
                *v98 = v101;
                v98 += 2;
                v99 += 2;
                v100 -= 4;
              }
              while (v100);
              if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_72;
            }
            else
            {
              v92 = (char *)v68;
            }
            do
            {
              v102 = v91->i64[0];
              v91 = (int64x2_t *)((char *)v91 + 8);
              *(_QWORD *)v92 = v102;
              v92 += 8;
            }
            while (v91 < v58);
          }
LABEL_72:
          *(_QWORD *)(a1 + 24) = v92;
          if (v68 != v61 + 36)
          {
            v103 = v67;
            memmove(&v68[-v90], (const void *)(v57 + (((unint64_t)v58 - v57) & 0xFFFFFFFFFFFFFFF8)), v89);
            v67 = v103;
            v60 = (uint64_t)((uint64_t)v58->i64 - v57) >> 3;
            v23 = v119;
            v22 = v120;
            v21 = v121;
          }
          v104 = (const double *)&v122;
          if (v61 <= &v122)
          {
            v105 = 288;
            if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v122)
              v105 = 0;
            v104 = (const double *)((char *)&v122 + v105);
          }
          if (v67 >= 0xA
            && (v61 >= (uint64_t *)v104 + 1
             || (unint64_t)v104 >= v57 + (((unint64_t)v58 - v57) & 0xFFFFFFFFFFFFFFF8) + 8 * v67))
          {
            v61 += v67 & 0xFFFFFFFFFFFFFFFCLL;
            v106 = v67 & 3;
            v107 = vld1q_dup_f64(v104);
            v108 = (float64x2_t *)(v57 + 8 * v60 + 16);
            v109 = v67 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v108[-1] = v107;
              *v108 = v107;
              v108 += 2;
              v109 -= 4;
            }
            while (v109);
            v3 = v114;
            if (v67 == (v67 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_83;
          }
          else
          {
            v106 = v67;
            v3 = v114;
          }
          do
          {
            *v61++ = *(_QWORD *)v104;
            --v106;
          }
          while (v106);
LABEL_83:
          v24 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 288);
          v8 = v117;
          v6 = v118;
LABEL_84:
          *(_QWORD *)(v21 + 8 * v20) = ((uint64_t)v24 - *(_QWORD *)(a1 + 16)) >> 3;
          ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6);
          goto LABEL_22;
        }
      }
    }
    else
    {
      v71 = *(uint64_t **)(a1 + 24);
    }
    do
      *v71++ = v122;
    while (v71 != v68);
    goto LABEL_62;
  }
}

void sub_20FA544C4(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  uint64_t v49;
  __int128 *v50;
  __int128 *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int64x2_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  char *v102;
  size_t v103;
  BOOL v104;
  uint64_t v105;
  int64x2_t v106;
  int64x2_t *v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  int64x2_t *v111;
  uint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  __int128 *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  float64x2_t v128;
  float64x2_t *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v133;
  unint64_t v135;
  unsigned int v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158[2];
  uint64_t v159[2];

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v8 = (_QWORD *)(a1 + 16);
    v131 = HIDWORD(a3);
    v136 = 1;
    v133 = a1 + 40;
    v137 = (_QWORD *)(a1 + 16);
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 88);
      v10 = *(_DWORD *)(a1 + 112) * v6;
      v11 = *(_DWORD *)(a1 + 8);
      if (v11)
      {
        v12 = (uint64_t *)(v9 + 8 * v10);
        v13 = 8 * (v11 + v10) - 8 * v10;
        do
        {
          v14 = *v12;
          if (*v12 != -1)
          {
            v15 = *(_QWORD *)(a1 + 56);
            v16 = *(_QWORD *)(a1 + 48);
            v17 = ((v15 - v16) << 6) - 1;
            if (v15 == v16)
              v17 = 0;
            v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
            if (v17 == v18)
            {
              sub_20EDB36DC(v7);
              v16 = *(_QWORD *)(a1 + 48);
              v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              v14 = *v12;
            }
            *(_QWORD *)(*(_QWORD *)(v16 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF)) = v14;
            ++*(_QWORD *)(a1 + 80);
            *v12 = -1;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
        v9 = *(_QWORD *)(a1 + 88);
        v11 = *(_DWORD *)(a1 + 8);
        v10 = *(_DWORD *)(a1 + 112) * v6;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6) = 0;
      v19 = v6 + 1;
      v135 = v6 + 1;
      if (v11 < (int)v6 + 1)
        v19 = v11;
      if (v19)
        break;
LABEL_3:
      ++v136;
      v6 = v135;
      v7 = v133;
      if (v135 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v20 = 0;
    v21 = v9 + 8 * v10;
    v22 = 9 * v6 + v131;
    if (v11 >= v136)
      v23 = v136;
    else
      v23 = v11;
    v141 = v9 + 8 * v10;
    v140 = 9 * v6 + v131;
    v138 = v6;
    v139 = v23;
    while (1)
    {
      v66 = *v4;
      v67 = *((unsigned int *)v4 + 4);
      v68 = *(_QWORD *)(v21 + 8 * v20);
      if (v68 == -1)
        break;
      v24 = *v8 + 8 * v68;
LABEL_22:
      v25 = (__int128 *)(v66 + 8 * (9 * v20 + v3 + v67 * v22));
      v156 = *((_QWORD *)v25 + 8);
      v152 = v25[3];
      v148 = v25[2];
      v26 = *v25;
      v144 = v25[1];
      v27 = (__int128 *)((char *)v25 + 8 * v67);
      v154 = *((_QWORD *)v27 + 8);
      v150 = v27[3];
      v28 = v27[1];
      v143 = v27[2];
      v29 = *v27;
      v30 = &v25[v67];
      v151 = *((_QWORD *)v30 + 8);
      v31 = v30[2];
      v147 = v30[3];
      v32 = *v30;
      v33 = v30[1];
      v34 = (__int128 *)((char *)v25 + 24 * v67);
      v35 = *((_QWORD *)v34 + 8);
      v36 = v34[2];
      v145 = v34[3];
      v38 = *v34;
      v37 = v34[1];
      v39 = &v25[2 * v67];
      v149 = *((_QWORD *)v39 + 8);
      v40 = v39[2];
      v142 = v39[3];
      v41 = *v39;
      v42 = v39[1];
      v43 = (__int128 *)((char *)v25 + 40 * v67);
      v146 = *((_QWORD *)v43 + 8);
      v45 = v43[2];
      v44 = v43[3];
      v47 = *v43;
      v46 = v43[1];
      v48 = &v25[3 * v67];
      v49 = *((_QWORD *)v48 + 8);
      v50 = (__int128 *)((char *)v25 + 56 * v67);
      v51 = &v25[4 * v67];
      v52 = v48[2];
      v53 = v48[3];
      v54 = *v48;
      v55 = v48[1];
      v56 = *((_QWORD *)v50 + 8);
      v57 = v50[2];
      v58 = v50[3];
      v60 = *v50;
      v59 = v50[1];
      v61 = *((_QWORD *)v51 + 8);
      v62 = v51[2];
      v63 = v51[3];
      v64 = *v51;
      v65 = v51[1];
      *(_OWORD *)v24 = v26;
      *(_OWORD *)(v24 + 16) = v144;
      *(_OWORD *)(v24 + 32) = v148;
      *(_OWORD *)(v24 + 48) = v152;
      *(_QWORD *)(v24 + 64) = v156;
      *(_OWORD *)(v24 + 72) = v29;
      *(_OWORD *)(v24 + 88) = v28;
      *(_OWORD *)(v24 + 104) = v143;
      *(_OWORD *)(v24 + 120) = v150;
      *(_QWORD *)(v24 + 136) = v154;
      *(_OWORD *)(v24 + 144) = v32;
      *(_OWORD *)(v24 + 160) = v33;
      *(_OWORD *)(v24 + 176) = v31;
      *(_OWORD *)(v24 + 192) = v147;
      *(_QWORD *)(v24 + 208) = v151;
      *(_OWORD *)(v24 + 232) = v37;
      *(_OWORD *)(v24 + 248) = v36;
      *(_QWORD *)(v24 + 280) = v35;
      *(_OWORD *)(v24 + 216) = v38;
      *(_OWORD *)(v24 + 264) = v145;
      *(_OWORD *)(v24 + 288) = v41;
      *(_OWORD *)(v24 + 304) = v42;
      *(_OWORD *)(v24 + 320) = v40;
      *(_OWORD *)(v24 + 336) = v142;
      *(_QWORD *)(v24 + 352) = v149;
      *(_OWORD *)(v24 + 360) = v47;
      *(_OWORD *)(v24 + 376) = v46;
      *(_OWORD *)(v24 + 392) = v45;
      *(_OWORD *)(v24 + 408) = v44;
      *(_QWORD *)(v24 + 424) = v146;
      *(_OWORD *)(v24 + 432) = v54;
      *(_OWORD *)(v24 + 448) = v55;
      *(_OWORD *)(v24 + 464) = v52;
      *(_OWORD *)(v24 + 480) = v53;
      *(_QWORD *)(v24 + 496) = v49;
      *(_OWORD *)(v24 + 520) = v59;
      *(_OWORD *)(v24 + 536) = v57;
      *(_QWORD *)(v24 + 568) = v56;
      *(_OWORD *)(v24 + 504) = v60;
      *(_OWORD *)(v24 + 552) = v58;
      *(_OWORD *)(v24 + 576) = v64;
      *(_OWORD *)(v24 + 592) = v65;
      *(_OWORD *)(v24 + 608) = v62;
      *(_OWORD *)(v24 + 624) = v63;
      *(_QWORD *)(v24 + 640) = v61;
      if (++v20 == v23)
        goto LABEL_3;
    }
    v69 = *(_QWORD *)(a1 + 80);
    if (v69)
    {
      v71 = *(_QWORD *)(a1 + 48);
      v70 = *(_QWORD *)(a1 + 56);
      v72 = ((v70 - v71) << 6) - 1;
      v73 = *(_QWORD *)(a1 + 72);
      if (v70 == v71)
        v72 = 0;
      v24 = *(_QWORD *)(a1 + 16)
          + 8
          * *(_QWORD *)(*(_QWORD *)(v71 + (((unint64_t)(v73 + v69 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v73 + v69 - 1) & 0x1FF));
      *(_QWORD *)(a1 + 80) = v69 - 1;
      if ((unint64_t)(v72 - (v69 + v73) + 1) >= 0x400)
      {
        operator delete(*(void **)(v70 - 8));
        v23 = v139;
        v22 = v140;
        v21 = v141;
        *(_QWORD *)(a1 + 56) -= 8;
      }
      goto LABEL_88;
    }
    v158[0] = 0;
    v74 = *(_QWORD *)(a1 + 16);
    v75 = *(int64x2_t **)(a1 + 24);
    v76 = (uint64_t)v75->i64 - v74;
    v77 = (uint64_t)((uint64_t)v75->i64 - v74) >> 3;
    v78 = (uint64_t *)(v74 + (((unint64_t)v75 - v74) & 0xFFFFFFFFFFFFFFF8));
    v79 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v79 - (_QWORD)v75) < 0x288)
    {
      v80 = v77 + 81;
      if ((unint64_t)(v77 + 81) >> 61)
        sub_20E867F44();
      v81 = v79 - v74;
      if (v81 >> 2 > v80)
        v80 = v81 >> 2;
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
        v80 = 0x1FFFFFFFFFFFFFFFLL;
      v155 = v80;
      if (v80)
      {
        if (v80 >> 61)
          sub_20E877A38();
        v82 = (uint64_t)v75->i64 - v74;
        v83 = (char *)operator new(8 * v80);
        v77 = (uint64_t)((uint64_t)v75->i64 - v74) >> 3;
      }
      else
      {
        v82 = (uint64_t)v75->i64 - v74;
        v83 = 0;
      }
      v153 = v77;
      v157 = v83;
      v90 = &v83[8 * v77];
      bzero(v90, 0x288uLL);
      if ((int64x2_t *)v74 == v75)
      {
        v93 = v90;
      }
      else
      {
        v91 = v82 - 8;
        if ((unint64_t)(v82 - 8) >= 0x68)
        {
          v94 = v74 + (v82 & 0xFFFFFFFFFFFFFFF8) - (_QWORD)&v157[v82 & 0xFFFFFFFFFFFFFFF8];
          v92 = (char *)(v74 + (((unint64_t)v75 - v74) & 0xFFFFFFFFFFFFFFF8));
          v93 = v90;
          if (v94 >= 0x20)
          {
            v95 = (v91 >> 3) + 1;
            v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
            v92 = (char *)&v78[v96 / 0xFFFFFFFFFFFFFFF8];
            v93 = &v90[-v96];
            v97 = &v157[8 * v153 - 16];
            v98 = (__int128 *)(v74 + 8 * v153 - 16);
            v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v100 = *v98;
              *((_OWORD *)v97 - 1) = *(v98 - 1);
              *(_OWORD *)v97 = v100;
              v97 -= 32;
              v98 -= 2;
              v99 -= 4;
            }
            while (v99);
            if (v95 == (v95 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_52;
          }
        }
        else
        {
          v92 = (char *)(v74 + (((unint64_t)v75 - v74) & 0xFFFFFFFFFFFFFFF8));
          v93 = v90;
        }
        do
        {
          v101 = *((_QWORD *)v92 - 1);
          v92 -= 8;
          *((_QWORD *)v93 - 1) = v101;
          v93 -= 8;
        }
        while (v92 != (char *)v74);
      }
LABEL_52:
      v102 = v90 + 648;
      v103 = (char *)v75 - (char *)v78;
      if (v103)
        memmove(v102, v78, v103);
      *(_QWORD *)(a1 + 16) = v93;
      *(_QWORD *)(a1 + 24) = &v102[v103];
      *(_QWORD *)(a1 + 32) = &v157[8 * v155];
      v3 = a3;
      v21 = v141;
      v22 = v140;
      v23 = v139;
      if (v74)
      {
        operator delete((void *)v74);
        v23 = v139;
        v22 = v140;
        v21 = v141;
      }
      goto LABEL_87;
    }
    v84 = (char *)v75 - (char *)v78;
    if ((unint64_t)((char *)v75 - (char *)v78) > 0x287)
    {
      v86 = *(uint64_t **)(a1 + 24);
      v85 = 81;
      goto LABEL_63;
    }
    v85 = v84 >> 3;
    v86 = &v75->i64[81 - (v84 >> 3)];
    v87 = v84 & 0xFFFFFFFFFFFFFFF8;
    v88 = 640 - v87;
    if (640 - v87 >= 0x68)
    {
      v104 = v158 < (uint64_t *)((char *)&v75[40].i64[1] - v87);
      if (v75 >= (int64x2_t *)v159 || (v89 = *(uint64_t **)(a1 + 24), !v104))
      {
        v105 = (v88 >> 3) + 1;
        v89 = &v75->i64[v105 & 0x3FFFFFFFFFFFFFFCLL];
        v106 = vdupq_lane_s64(v158[0], 0);
        v107 = v75 + 1;
        v108 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v107[-1] = v106;
          *v107 = v106;
          v107 += 2;
          v108 -= 4;
        }
        while (v108);
        if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_62:
          *(_QWORD *)(a1 + 24) = v86;
          if (v75 == (int64x2_t *)v78)
            goto LABEL_87;
LABEL_63:
          v109 = (char *)v86 - (char *)(v78 + 81);
          v110 = v109 >> 3;
          v111 = (int64x2_t *)(v86 - 81);
          v112 = v86;
          if (v86 - 81 < (uint64_t *)v75)
          {
            v113 = (v76 & 0xFFFFFFFFFFFFFFF8) + v109;
            v114 = v74 + v113 + 8;
            if ((unint64_t)v75 > v114)
              v114 = (unint64_t)v75;
            v115 = v114 + ~v74 - v113;
            if (v115 >= 0x58)
            {
              v116 = (v115 >> 3) + 1;
              v117 = v116 & 0x3FFFFFFFFFFFFFFCLL;
              v111 = (int64x2_t *)((char *)v111 + v117 * 8);
              v112 = &v86[v117];
              v118 = v86 + 2;
              v119 = (__int128 *)(v74 + 8 * v110 + 8 * v77 + 16);
              v120 = v116 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v121 = *v119;
                *(v118 - 1) = *(v119 - 1);
                *v118 = v121;
                v118 += 2;
                v119 += 2;
                v120 -= 4;
              }
              while (v120);
              if (v116 == (v116 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_72;
            }
            else
            {
              v112 = v86;
            }
            do
            {
              v122 = v111->i64[0];
              v111 = (int64x2_t *)((char *)v111 + 8);
              *v112++ = v122;
            }
            while (v111 < v75);
          }
LABEL_72:
          *(_QWORD *)(a1 + 24) = v112;
          if (v86 != v78 + 81)
          {
            v123 = v3;
            v124 = v85;
            memmove(&v86[-v110], (const void *)(v74 + (((unint64_t)v75 - v74) & 0xFFFFFFFFFFFFFFF8)), v109);
            v85 = v124;
            v3 = v123;
            v4 = a2;
            v76 = (uint64_t)v75->i64 - v74;
            v77 = (uint64_t)((uint64_t)v75->i64 - v74) >> 3;
            v23 = v139;
            v22 = v140;
            v21 = v141;
          }
          v125 = v158;
          if (v78 <= v158)
          {
            v126 = 81;
            if (*(_QWORD *)(a1 + 24) <= (unint64_t)v158)
              v126 = 0;
            v125 = &v158[v126];
          }
          if (v85 >= 0xA)
          {
            if (v78 >= v125 + 1 || (unint64_t)v125 >= v74 + (v76 & 0xFFFFFFFFFFFFFFF8) + 8 * v85)
            {
              v78 += v85 & 0xFFFFFFFFFFFFFFFCLL;
              v127 = v85 & 3;
              v128 = vld1q_dup_f64((const double *)v125);
              v129 = (float64x2_t *)(v74 + 8 * v77 + 16);
              v130 = v85 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v129[-1] = v128;
                *v129 = v128;
                v129 += 2;
                v130 -= 4;
              }
              while (v130);
              if (v85 == (v85 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_87;
            }
            else
            {
              v127 = v85;
            }
          }
          else
          {
            v127 = v85;
          }
          do
          {
            *v78++ = *v125;
            --v127;
          }
          while (v127);
LABEL_87:
          v24 = *(_QWORD *)(a1 + 24) - 648;
          v8 = v137;
          v6 = v138;
LABEL_88:
          *(_QWORD *)(v21 + 8 * v20) = (v24 - *(_QWORD *)(a1 + 16)) >> 3;
          ++*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v6);
          goto LABEL_22;
        }
      }
    }
    else
    {
      v89 = *(uint64_t **)(a1 + 24);
    }
    do
      *v89++ = v158[0];
    while (v89 != v86);
    goto LABEL_62;
  }
}

_QWORD *sub_20FA54D68(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int *a4)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const void *v87;
  uint64_t v88;
  unint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  const void *v94;
  uint64_t v95;

  v7 = result;
  v8 = result[28] - result[27];
  if ((v8 & 0x7FFFFFFF8) != 0)
  {
    v9 = a4[1] + *a4 + a4[2] + a4[3] + a4[4] + a4[5] + a4[6] + a4[7] + a4[8];
    v10 = 3 * *(_DWORD *)(a2 + 60);
    v11 = (v8 >> 3) - 1;
    do
    {
      v12 = v11;
      v13 = v7[27];
      v14 = *(unsigned int *)(v13 + 8 * v11);
      v15 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 100) + 8 * v14);
      v16 = (uint64_t)v15 + 8 * v10 + -8 * v14;
      if ((const void *)v16 != v15)
        result = memmove((void *)(*a3 + 8 * v9 + 8 * *(unsigned int *)(v13 + 8 * v11 + 4)), v15, v16 - (_QWORD)v15);
      --v11;
      v10 = v14;
    }
    while (v12);
  }
  v17 = v7[25] - v7[24];
  if ((v17 & 0x7FFFFFFF8) != 0)
  {
    v18 = a4[1] + *a4 + a4[2] + a4[3] + a4[4] + a4[5] + a4[6] + a4[7];
    v19 = 4 * *(_DWORD *)(a2 + 56);
    v20 = (v17 >> 3) - 1;
    do
    {
      v21 = v20;
      v22 = v7[24];
      v23 = *(unsigned int *)(v22 + 8 * v20);
      v24 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 96) + 8 * v23);
      v25 = (uint64_t)v24 + 8 * v19 + -8 * v23;
      if ((const void *)v25 != v24)
        result = memmove((void *)(*a3 + 8 * v18 + 8 * *(unsigned int *)(v22 + 8 * v20 + 4)), v24, v25 - (_QWORD)v24);
      --v20;
      v19 = v23;
    }
    while (v21);
  }
  v26 = v7[22] - v7[21];
  if ((v26 & 0x7FFFFFFF8) != 0)
  {
    v27 = a4[1] + *a4 + a4[2] + a4[3] + a4[4] + a4[5] + a4[6];
    v28 = 4 * *(_DWORD *)(a2 + 52);
    v29 = (v26 >> 3) - 1;
    do
    {
      v30 = v29;
      v31 = v7[21];
      v32 = *(unsigned int *)(v31 + 8 * v29);
      v33 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 92) + 8 * v32);
      v34 = (uint64_t)v33 + 8 * v28 + -8 * v32;
      if ((const void *)v34 != v33)
        result = memmove((void *)(*a3 + 8 * v27 + 8 * *(unsigned int *)(v31 + 8 * v29 + 4)), v33, v34 - (_QWORD)v33);
      --v29;
      v28 = v32;
    }
    while (v30);
  }
  v35 = v7[19] - v7[18];
  if ((v35 & 0x7FFFFFFF8) != 0)
  {
    v36 = a4[1] + *a4 + a4[2] + a4[3] + a4[4] + a4[5];
    v37 = 3 * *(_DWORD *)(a2 + 48);
    v38 = (v35 >> 3) - 1;
    do
    {
      v39 = v38;
      v40 = v7[18];
      v41 = *(unsigned int *)(v40 + 8 * v38);
      v42 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 88) + 8 * v41);
      v43 = (uint64_t)v42 + 8 * v37 + -8 * v41;
      if ((const void *)v43 != v42)
        result = memmove((void *)(*a3 + 8 * v36 + 8 * *(unsigned int *)(v40 + 8 * v38 + 4)), v42, v43 - (_QWORD)v42);
      --v38;
      v37 = v41;
    }
    while (v39);
  }
  v44 = v7[16] - v7[15];
  if ((v44 & 0x7FFFFFFF8) != 0)
  {
    v45 = a4[1] + *a4 + a4[2] + a4[3] + a4[4];
    v46 = *(unsigned int *)(a2 + 44);
    v47 = (v44 >> 3) - 1;
    do
    {
      v48 = v46;
      v49 = v47;
      v50 = v7[15];
      v46 = *(unsigned int *)(v50 + 8 * v47);
      v51 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 84) + 8 * v46);
      v52 = (uint64_t)v51 + 8 * v48 + -8 * v46;
      if ((const void *)v52 != v51)
        result = memmove((void *)(*a3 + 8 * v45 + 8 * *(unsigned int *)(v50 + 8 * v47 + 4)), v51, v52 - (_QWORD)v51);
      --v47;
    }
    while (v49);
  }
  v53 = v7[13] - v7[12];
  if ((v53 & 0x7FFFFFFF8) != 0)
  {
    v54 = a4[1] + *a4 + a4[2] + a4[3];
    v55 = 3 * *(_DWORD *)(a2 + 40);
    v56 = (v53 >> 3) - 1;
    do
    {
      v57 = v56;
      v58 = v7[12];
      v59 = *(unsigned int *)(v58 + 8 * v56);
      v60 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 80) + 8 * v59);
      v61 = (uint64_t)v60 + 8 * v55 + -8 * v59;
      if ((const void *)v61 != v60)
        result = memmove((void *)(*a3 + 8 * v54 + 8 * *(unsigned int *)(v58 + 8 * v56 + 4)), v60, v61 - (_QWORD)v60);
      --v56;
      v55 = v59;
    }
    while (v57);
  }
  v62 = v7[10] - v7[9];
  if ((v62 & 0x7FFFFFFF8) != 0)
  {
    v63 = a4[1] + *a4 + a4[2];
    v64 = 6 * *(_DWORD *)(a2 + 36);
    v65 = (v62 >> 3) - 1;
    do
    {
      v66 = v65;
      v67 = v7[9];
      v68 = *(unsigned int *)(v67 + 8 * v65);
      v69 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 76) + 8 * v68);
      v70 = (uint64_t)v69 + 8 * v64 + -8 * v68;
      if ((const void *)v70 != v69)
        result = memmove((void *)(*a3 + 8 * v63 + 8 * *(unsigned int *)(v67 + 8 * v65 + 4)), v69, v70 - (_QWORD)v69);
      --v65;
      v64 = v68;
    }
    while (v66);
  }
  v71 = v7[7] - v7[6];
  if ((v71 & 0x7FFFFFFF8) != 0)
  {
    v72 = a4[1] + *a4;
    v73 = 6 * *(_DWORD *)(a2 + 32);
    v74 = (v71 >> 3) - 1;
    do
    {
      v75 = v74;
      v76 = v7[6];
      v77 = *(unsigned int *)(v76 + 8 * v74);
      v78 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 72) + 8 * v77);
      v79 = (uint64_t)v78 + 8 * v73 + -8 * v77;
      if ((const void *)v79 != v78)
        result = memmove((void *)(*a3 + 8 * v72 + 8 * *(unsigned int *)(v76 + 8 * v74 + 4)), v78, v79 - (_QWORD)v78);
      --v74;
      v73 = v77;
    }
    while (v75);
  }
  v80 = v7[4] - v7[3];
  if ((v80 & 0x7FFFFFFF8) != 0)
  {
    v81 = *a4;
    v82 = 9 * *(_DWORD *)(a2 + 28);
    v83 = (v80 >> 3) - 1;
    do
    {
      v84 = v83;
      v85 = v7[3];
      v86 = *(unsigned int *)(v85 + 8 * v83);
      v87 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 68) + 8 * v86);
      v88 = (uint64_t)v87 + 8 * v82 + -8 * v86;
      if ((const void *)v88 != v87)
        result = memmove((void *)(*a3 + 8 * v81 + 8 * *(unsigned int *)(v85 + 8 * v83 + 4)), v87, v88 - (_QWORD)v87);
      --v83;
      v82 = v86;
    }
    while (v84);
  }
  v89 = v7[1] - *v7;
  if ((v89 & 0x7FFFFFFF8) != 0)
  {
    v90 = 6 * *(_DWORD *)(a2 + 24);
    v91 = (v89 >> 3) - 1;
    do
    {
      v92 = v91;
      v93 = *(unsigned int *)(*v7 + 8 * v91);
      v94 = (const void *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 64) + 8 * v93);
      v95 = (uint64_t)v94 + 8 * v90 + -8 * v93;
      if ((const void *)v95 != v94)
        result = memmove((void *)(*a3 + 8 * *(unsigned int *)(*v7 + 8 * v91 + 4)), v94, v95 - (_QWORD)v94);
      --v91;
      v90 = v93;
    }
    while (v92);
  }
  return result;
}

uint64_t sub_20FA553A0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  const void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;

  v4 = (_BYTE *)(a2 + 5840);
  v5 = (_BYTE *)(a1 + 5840);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = (_OWORD *)(a1 + 24);
  v7 = (_OWORD *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v8 = *(_OWORD *)(a2 + 40);
      *v6 = *v7;
      *(_OWORD *)(a1 + 40) = v8;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 40);
    *v6 = *v7;
    *(_OWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x708uLL);
  memcpy((void *)(a1 + 1880), (const void *)(a2 + 1880), 0x708uLL);
  v10 = *(_OWORD *)(a2 + 3680);
  v11 = *(_OWORD *)(a2 + 3696);
  v12 = *(_OWORD *)(a2 + 3712);
  *(_OWORD *)(a1 + 3728) = *(_OWORD *)(a2 + 3728);
  *(_OWORD *)(a1 + 3712) = v12;
  *(_OWORD *)(a1 + 3696) = v11;
  *(_OWORD *)(a1 + 3680) = v10;
  v13 = *(_OWORD *)(a2 + 3744);
  v14 = *(_OWORD *)(a2 + 3760);
  v15 = *(_OWORD *)(a2 + 3776);
  *(_QWORD *)(a1 + 3792) = *(_QWORD *)(a2 + 3792);
  *(_OWORD *)(a1 + 3776) = v15;
  *(_OWORD *)(a1 + 3760) = v14;
  *(_OWORD *)(a1 + 3744) = v13;
  v16 = *(_OWORD *)(a2 + 3800);
  v17 = *(_OWORD *)(a2 + 3816);
  v18 = *(_OWORD *)(a2 + 3848);
  *(_OWORD *)(a1 + 3832) = *(_OWORD *)(a2 + 3832);
  *(_OWORD *)(a1 + 3848) = v18;
  *(_OWORD *)(a1 + 3800) = v16;
  *(_OWORD *)(a1 + 3816) = v17;
  v20 = *(_OWORD *)(a2 + 3880);
  v19 = *(_OWORD *)(a2 + 3896);
  v21 = *(_OWORD *)(a2 + 3864);
  *(_QWORD *)(a1 + 3912) = *(_QWORD *)(a2 + 3912);
  *(_OWORD *)(a1 + 3880) = v20;
  *(_OWORD *)(a1 + 3896) = v19;
  *(_OWORD *)(a1 + 3864) = v21;
  v22 = (void *)(a1 + 3920);
  v23 = (const void *)(a2 + 3920);
  if (v5[1832] == v4[1832])
  {
    if (v5[1832])
    {
      memcpy(v22, v23, 0x708uLL);
      v24 = *(_OWORD *)(a2 + 5720);
      v25 = *(_OWORD *)(a2 + 5736);
      v26 = *(_OWORD *)(a2 + 5768);
      *(_OWORD *)(a1 + 5752) = *(_OWORD *)(a2 + 5752);
      *(_OWORD *)(a1 + 5768) = v26;
      *(_OWORD *)(a1 + 5720) = v24;
      *(_OWORD *)(a1 + 5736) = v25;
      v27 = *(_OWORD *)(a2 + 5784);
      v28 = *(_OWORD *)(a2 + 5800);
      v29 = *(_OWORD *)(a2 + 5816);
      *(_QWORD *)(a1 + 5832) = *(_QWORD *)(a2 + 5832);
      *(_OWORD *)(a1 + 5800) = v28;
      *(_OWORD *)(a1 + 5816) = v29;
      *(_OWORD *)(a1 + 5784) = v27;
      *v5 = *v4;
      v5[16] = v4[16];
      memcpy((void *)(a1 + 5864), (const void *)(a2 + 5864), 0x710uLL);
    }
  }
  else if (v5[1832])
  {
    v5[1832] = 0;
  }
  else
  {
    memcpy(v22, v23, 0x708uLL);
    v30 = *(_OWORD *)(a2 + 5720);
    v31 = *(_OWORD *)(a2 + 5736);
    v32 = *(_OWORD *)(a2 + 5768);
    *(_OWORD *)(a1 + 5752) = *(_OWORD *)(a2 + 5752);
    *(_OWORD *)(a1 + 5768) = v32;
    *(_OWORD *)(a1 + 5720) = v30;
    *(_OWORD *)(a1 + 5736) = v31;
    v33 = *(_OWORD *)(a2 + 5784);
    v34 = *(_OWORD *)(a2 + 5800);
    v35 = *(_OWORD *)(a2 + 5816);
    *(_QWORD *)(a1 + 5832) = *(_QWORD *)(a2 + 5832);
    *(_OWORD *)(a1 + 5800) = v34;
    *(_OWORD *)(a1 + 5816) = v35;
    *(_OWORD *)(a1 + 5784) = v33;
    *v5 = *v4;
    v5[16] = v4[16];
    *(_QWORD *)(a1 + 5848) = &off_24CA00398;
    memcpy((void *)(a1 + 5864), (const void *)(a2 + 5864), 0x710uLL);
    v5[1832] = 1;
  }
  *(_WORD *)(a1 + 7680) = *(_WORD *)(a2 + 7680);
  v36 = *(_OWORD *)(a2 + 7688);
  v37 = *(_OWORD *)(a2 + 7704);
  v38 = *(_OWORD *)(a2 + 7736);
  *(_OWORD *)(a1 + 7720) = *(_OWORD *)(a2 + 7720);
  *(_OWORD *)(a1 + 7736) = v38;
  *(_OWORD *)(a1 + 7688) = v36;
  *(_OWORD *)(a1 + 7704) = v37;
  v39 = *(_OWORD *)(a2 + 7752);
  v40 = *(_OWORD *)(a2 + 7768);
  v41 = *(_OWORD *)(a2 + 7784);
  *(_QWORD *)(a1 + 7800) = *(_QWORD *)(a2 + 7800);
  *(_OWORD *)(a1 + 7768) = v40;
  *(_OWORD *)(a1 + 7784) = v41;
  *(_OWORD *)(a1 + 7752) = v39;
  memcpy((void *)(a1 + 7808), (const void *)(a2 + 7808), 0x168uLL);
  memcpy((void *)(a1 + 8168), (const void *)(a2 + 8168), 0x168uLL);
  memcpy((void *)(a1 + 8528), (const void *)(a2 + 8528), 0x168uLL);
  memcpy((void *)(a1 + 8888), (const void *)(a2 + 8888), 0x1B8uLL);
  v42 = *(_OWORD *)(a2 + 9392);
  v43 = *(_OWORD *)(a2 + 9408);
  v44 = *(_OWORD *)(a2 + 9424);
  *(_QWORD *)(a1 + 9440) = *(_QWORD *)(a2 + 9440);
  *(_OWORD *)(a1 + 9424) = v44;
  *(_OWORD *)(a1 + 9408) = v43;
  *(_OWORD *)(a1 + 9392) = v42;
  v45 = *(_OWORD *)(a2 + 9328);
  v46 = *(_OWORD *)(a2 + 9344);
  v47 = *(_OWORD *)(a2 + 9360);
  *(_OWORD *)(a1 + 9376) = *(_OWORD *)(a2 + 9376);
  *(_OWORD *)(a1 + 9360) = v47;
  *(_OWORD *)(a1 + 9344) = v46;
  *(_OWORD *)(a1 + 9328) = v45;
  v48 = *(_OWORD *)(a2 + 9496);
  v50 = *(_OWORD *)(a2 + 9448);
  v49 = *(_OWORD *)(a2 + 9464);
  *(_OWORD *)(a1 + 9480) = *(_OWORD *)(a2 + 9480);
  *(_OWORD *)(a1 + 9496) = v48;
  *(_OWORD *)(a1 + 9448) = v50;
  *(_OWORD *)(a1 + 9464) = v49;
  v52 = *(_OWORD *)(a2 + 9528);
  v51 = *(_OWORD *)(a2 + 9544);
  v53 = *(_OWORD *)(a2 + 9512);
  *(_QWORD *)(a1 + 9560) = *(_QWORD *)(a2 + 9560);
  *(_OWORD *)(a1 + 9528) = v52;
  *(_OWORD *)(a1 + 9544) = v51;
  *(_OWORD *)(a1 + 9512) = v53;
  v54 = *(_BYTE *)(a2 + 9576);
  *(_QWORD *)(a1 + 9568) = *(_QWORD *)(a2 + 9568);
  *(_BYTE *)(a1 + 9576) = v54;
  v55 = *(_OWORD *)(a2 + 9584);
  *(_OWORD *)(a2 + 9584) = 0u;
  v56 = *(std::__shared_weak_count **)(a1 + 9592);
  *(_OWORD *)(a1 + 9584) = v55;
  if (!v56)
    return a1;
  p_shared_owners = (unint64_t *)&v56->__shared_owners_;
  do
    v58 = __ldaxr(p_shared_owners);
  while (__stlxr(v58 - 1, p_shared_owners));
  if (v58)
    return a1;
  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
  std::__shared_weak_count::__release_weak(v56);
  return a1;
}

uint64_t sub_20FA5579C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v5 + 8);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v5 + 16);
      v6 = *(_OWORD *)(v5 + 32);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v5 + 48);
      *(_OWORD *)(a3 + 32) = v6;
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(a3 + 72) = *(_QWORD *)(v5 + 72);
      *(_QWORD *)(a3 + 80) = *(_QWORD *)(v5 + 80);
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(v5 + 88);
      *(_QWORD *)(a3 + 96) = *(_QWORD *)(v5 + 96);
      *(_QWORD *)(a3 + 104) = *(_QWORD *)(v5 + 104);
      *(_OWORD *)(a3 + 112) = *(_OWORD *)(v5 + 112);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(v5 + 128);
      v7 = *(_QWORD *)(v5 + 144);
      *(_BYTE *)(a3 + 152) = *(_BYTE *)(v5 + 152);
      *(_QWORD *)(a3 + 144) = v7;
      v8 = *(_OWORD *)(v5 + 160);
      *(_QWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 168) = 0;
      v9 = *(std::__shared_weak_count **)(a3 + 168);
      *(_OWORD *)(a3 + 160) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      *(_BYTE *)(a3 + 176) = *(_BYTE *)(v5 + 176);
      v5 += 184;
      a3 += 184;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_20FA558B8(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45[11];
  _OWORD v46[3];

  if (*(_BYTE *)(a1 + 1616))
    v3 = 0;
  else
    v3 = a2 == 0;
  if (!v3)
    return (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4;
  memset(v46, 0, 44);
  if (!sub_20F8DEE48((_QWORD *)a1, (int *)v46, v45, 1))
    return v45[0];
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
  *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
  v5 = *(_QWORD *)(a1 + 1064);
  v6 = *(_QWORD *)(a1 + 1072);
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 208);
    if (*(_BYTE *)(v5 + 496) || (*(_BYTE *)(v7 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2416, v7);
      sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v5 + 216));
    }
    v5 += 504;
  }
  v8 = *(_QWORD *)(a1 + 1088);
  v9 = *(_QWORD *)(a1 + 1096);
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 136);
    if (*(_BYTE *)(v8 + 272) || (*(_BYTE *)(v10 + 4) & 6) != 0)
      sub_20F394A20(a1 + 2416, v10);
    v8 += 280;
  }
  v11 = *(_QWORD *)(a1 + 1112);
  v12 = *(_QWORD *)(a1 + 1120);
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 136);
    if (*(_BYTE *)(v11 + 272) || (*(_BYTE *)(v13 + 4) & 6) != 0)
      sub_20F599C88((_QWORD *)(a1 + 2416), v13);
    v11 += 280;
  }
  v14 = *(_QWORD *)(a1 + 1136);
  v15 = *(_QWORD *)(a1 + 1144);
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 136);
    if (*(_BYTE *)(v14 + 272) || (*(_BYTE *)(v16 + 4) & 6) != 0)
      sub_20F59A480((_QWORD *)(a1 + 2416), v16);
    v14 += 280;
  }
  v17 = *(_QWORD *)(a1 + 1160);
  v18 = *(_QWORD *)(a1 + 1168);
  while (v17 != v18)
  {
    v19 = *(_QWORD *)(v17 + 64);
    if (*(_BYTE *)(v17 + 152) || (*(_BYTE *)(v19 + 4) & 6) != 0)
      sub_20F59A2E8((_QWORD *)(a1 + 2416), v19);
    v17 += 160;
  }
  sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
  sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
  v20 = *(_QWORD *)(a1 + 1232);
  v21 = *(_QWORD *)(a1 + 1240);
  while (v20 != v21)
  {
    v22 = *(_QWORD *)(v20 + 48);
    if (*(_BYTE *)(v20 + 136) || (*(_BYTE *)(v22 + 4) & 6) != 0)
      sub_20F3D35E0((_QWORD *)(a1 + 2416), v22);
    v20 += 144;
  }
  v23 = *(_QWORD *)(a1 + 1256);
  v24 = *(_QWORD *)(a1 + 1264);
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_BYTE *)(v23 + 144) || (*(_BYTE *)(v25 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v23 + 56) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2416, v25);
      sub_20F394A20(a1 + 2416, *(_QWORD *)(v23 + 56));
    }
    v23 += 152;
  }
  sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
  sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
  v26 = *(_QWORD *)(a1 + 1328);
  v27 = *(_QWORD *)(a1 + 1336);
  while (v26 != v27)
  {
    v28 = *(_QWORD *)(v26 + 48);
    if (*(_BYTE *)(v26 + 104) || (*(_BYTE *)(v28 + 4) & 6) != 0)
      sub_20F59A150((_QWORD *)(a1 + 2416), v28);
    v26 += 112;
  }
  v29 = *(_QWORD *)(a1 + 1352);
  v30 = *(_QWORD *)(a1 + 1360);
  while (v29 != v30)
  {
    v31 = *(_QWORD *)(v29 + 96);
    if (*(_BYTE *)(v29 + 200) || (*(_BYTE *)(v31 + 4) & 6) != 0)
      sub_20F599E20((_QWORD *)(a1 + 2416), v31);
    v29 += 208;
  }
  v32 = *(_QWORD *)(a1 + 1376);
  v33 = *(_QWORD *)(a1 + 1384);
  while (v32 != v33)
  {
    v34 = *(_QWORD *)(v32 + 96);
    if (*(_BYTE *)(v32 + 200) || (*(_BYTE *)(v34 + 4) & 6) != 0)
      sub_20F8DAC28((_QWORD *)(a1 + 2416), v34);
    v32 += 208;
  }
  v35 = *(_QWORD *)(a1 + 1400);
  v36 = *(_QWORD *)(a1 + 1408);
  while (v35 != v36)
  {
    v37 = *(_QWORD *)(v35 + 80);
    if (*(_BYTE *)(v35 + 168) || (*(_BYTE *)(v37 + 4) & 6) != 0)
      sub_20F8DADC0((_QWORD *)(a1 + 2416), v37);
    v35 += 176;
  }
  v38 = *(_QWORD *)(a1 + 1424);
  v39 = *(_QWORD *)(a1 + 1432);
  while (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 80);
    if (*(_BYTE *)(v38 + 168) || (*(_BYTE *)(v40 + 4) & 6) != 0)
      sub_20F599FB8((_QWORD *)(a1 + 2416), v40);
    v38 += 176;
  }
  sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
  sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
  sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
  sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
  v41 = (*(_QWORD *)(a1 + 2424) - *(_QWORD *)(a1 + 2416)) >> 2;
  if (LODWORD(v46[0]) > v41)
    LODWORD(v41) = v46[0];
  v42 = v45[0] >= v41;
  v43 = v45[0] - v41;
  if (v42)
    v44 = v43;
  else
    v44 = 0;
  sub_20FA485B8((_QWORD *)a1);
  return v44;
}

void sub_20FA55D70(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55D84(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55D98(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55DAC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55DC0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55DD4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55DE8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55DFC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55E10(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55E24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55E38(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55E4C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55E60(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA55E74(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 56);
      if (*(_BYTE *)(v5 + 176)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 4) & 6) != 0)
      {
        sub_20F599C88(a3, v6);
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 64));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 72));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 80));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 88));
        sub_20F8DADC0(a3, *(_QWORD *)(v5 + 96));
        sub_20F8DAF58(a3, *(_QWORD *)(v5 + 104));
      }
      v5 += 184;
    }
    while (v5 != a2);
  }
}

void sub_20FA55F7C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 64);
      if (*(_BYTE *)(v5 + 200)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 136) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 144) + 4) & 6) != 0)
      {
        sub_20F599C88(a3, v6);
        sub_20F599C88(a3, *(_QWORD *)(v5 + 72));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 80));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 88));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 96));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 104));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 112));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 120));
        sub_20F8DADC0(a3, *(_QWORD *)(v5 + 128));
        sub_20F8DADC0(a3, *(_QWORD *)(v5 + 136));
        sub_20F8DAF58(a3, *(_QWORD *)(v5 + 144));
      }
      v5 += 208;
    }
    while (v5 != a2);
  }
}

void sub_20FA560F4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 64);
      if (*(_BYTE *)(v5 + 176)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 4) & 6) != 0)
      {
        sub_20F599C88(a3, v6);
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 72));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 80));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 88));
        sub_20F8DADC0(a3, *(_QWORD *)(v5 + 96));
        sub_20F59A2E8(a3, *(_QWORD *)(v5 + 104));
      }
      v5 += 184;
    }
    while (v5 != a2);
  }
}

void sub_20FA561E0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 56);
      if (*(_BYTE *)(v5 + 208)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 136) + 4) & 6) != 0)
      {
        sub_20F599C88(a3, v6);
        sub_20F599C88(a3, *(_QWORD *)(v5 + 64));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 72));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 80));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 88));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 96));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 104));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 112));
        sub_20F8DADC0(a3, *(_QWORD *)(v5 + 120));
        sub_20F8DADC0(a3, *(_QWORD *)(v5 + 128));
        sub_20F8DAF58(a3, *(_QWORD *)(v5 + 136));
      }
      v5 += 216;
    }
    while (v5 != a2);
  }
}

void sub_20FA56358(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 200);
      if (*(_BYTE *)(v5 + 296)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 208) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 224) + 4) & 6) != 0)
      {
        sub_20F599C88(a3, v6);
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 208));
        sub_20F599E20(a3, *(_QWORD *)(v5 + 216));
        sub_20F8DAC28(a3, *(_QWORD *)(v5 + 224));
      }
      v5 += 304;
    }
    while (v5 != a2);
  }
}

void sub_20FA5640C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v12;

  if (a1 != a2)
  {
    _X21 = a1;
    do
    {
      __asm
      {
        PRFM            #0, [X21,#0x70A8]
        PRFM            #0, [X21,#0x6F48]
      }
      v12 = *(_QWORD *)(_X21 + 9256);
      __asm { PRFM            #0, [X21,#0x6F88] }
      if (*(_BYTE *)(_X21 + 9608)
        || (*(_BYTE *)(v12 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9264) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9272) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9280) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9288) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9296) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9304) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9312) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9320) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(_X21 + 9328) + 4) & 6) != 0)
      {
        sub_20F394A20((uint64_t)a3, v12);
        sub_20F3D35E0(a3, *(_QWORD *)(_X21 + 9264));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(_X21 + 9272));
        sub_20F3D35E0(a3, *(_QWORD *)(_X21 + 9280));
        sub_20F59A150(a3, *(_QWORD *)(_X21 + 9288));
        sub_20F59A150(a3, *(_QWORD *)(_X21 + 9296));
        sub_20F599FB8(a3, *(_QWORD *)(_X21 + 9304));
        sub_20F599FB8(a3, *(_QWORD *)(_X21 + 9312));
        sub_20F599FB8(a3, *(_QWORD *)(_X21 + 9320));
        sub_20F599FB8(a3, *(_QWORD *)(_X21 + 9328));
      }
      _X21 += 9616;
    }
    while (_X21 != a2);
  }
}

uint64_t sub_20FA56584(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  _OWORD v47[3];

  if (*(_BYTE *)(a1 + 1616))
    v3 = 0;
  else
    v3 = a2 == 0;
  if (!v3)
    return (*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4;
  memset(v47, 0, 44);
  if (!sub_20F8DEE48((_QWORD *)a1, (int *)v47, &v45, 1))
    return v46;
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
  *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
  v5 = *(_QWORD *)(a1 + 1064);
  v6 = *(_QWORD *)(a1 + 1072);
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 208);
    if (*(_BYTE *)(v5 + 496) || (*(_BYTE *)(v7 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2416, v7);
      sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v5 + 216));
    }
    v5 += 504;
  }
  v8 = *(_QWORD *)(a1 + 1088);
  v9 = *(_QWORD *)(a1 + 1096);
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 136);
    if (*(_BYTE *)(v8 + 272) || (*(_BYTE *)(v10 + 4) & 6) != 0)
      sub_20F394A20(a1 + 2416, v10);
    v8 += 280;
  }
  v11 = *(_QWORD *)(a1 + 1112);
  v12 = *(_QWORD *)(a1 + 1120);
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 136);
    if (*(_BYTE *)(v11 + 272) || (*(_BYTE *)(v13 + 4) & 6) != 0)
      sub_20F599C88((_QWORD *)(a1 + 2416), v13);
    v11 += 280;
  }
  v14 = *(_QWORD *)(a1 + 1136);
  v15 = *(_QWORD *)(a1 + 1144);
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 136);
    if (*(_BYTE *)(v14 + 272) || (*(_BYTE *)(v16 + 4) & 6) != 0)
      sub_20F59A480((_QWORD *)(a1 + 2416), v16);
    v14 += 280;
  }
  v17 = *(_QWORD *)(a1 + 1160);
  v18 = *(_QWORD *)(a1 + 1168);
  while (v17 != v18)
  {
    v19 = *(_QWORD *)(v17 + 64);
    if (*(_BYTE *)(v17 + 152) || (*(_BYTE *)(v19 + 4) & 6) != 0)
      sub_20F59A2E8((_QWORD *)(a1 + 2416), v19);
    v17 += 160;
  }
  sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
  sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
  v20 = *(_QWORD *)(a1 + 1232);
  v21 = *(_QWORD *)(a1 + 1240);
  while (v20 != v21)
  {
    v22 = *(_QWORD *)(v20 + 48);
    if (*(_BYTE *)(v20 + 136) || (*(_BYTE *)(v22 + 4) & 6) != 0)
      sub_20F3D35E0((_QWORD *)(a1 + 2416), v22);
    v20 += 144;
  }
  v23 = *(_QWORD *)(a1 + 1256);
  v24 = *(_QWORD *)(a1 + 1264);
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_BYTE *)(v23 + 144) || (*(_BYTE *)(v25 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v23 + 56) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2416, v25);
      sub_20F394A20(a1 + 2416, *(_QWORD *)(v23 + 56));
    }
    v23 += 152;
  }
  sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
  sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
  v26 = *(_QWORD *)(a1 + 1328);
  v27 = *(_QWORD *)(a1 + 1336);
  while (v26 != v27)
  {
    v28 = *(_QWORD *)(v26 + 48);
    if (*(_BYTE *)(v26 + 104) || (*(_BYTE *)(v28 + 4) & 6) != 0)
      sub_20F59A150((_QWORD *)(a1 + 2416), v28);
    v26 += 112;
  }
  v29 = *(_QWORD *)(a1 + 1352);
  v30 = *(_QWORD *)(a1 + 1360);
  while (v29 != v30)
  {
    v31 = *(_QWORD *)(v29 + 96);
    if (*(_BYTE *)(v29 + 200) || (*(_BYTE *)(v31 + 4) & 6) != 0)
      sub_20F599E20((_QWORD *)(a1 + 2416), v31);
    v29 += 208;
  }
  v32 = *(_QWORD *)(a1 + 1376);
  v33 = *(_QWORD *)(a1 + 1384);
  while (v32 != v33)
  {
    v34 = *(_QWORD *)(v32 + 96);
    if (*(_BYTE *)(v32 + 200) || (*(_BYTE *)(v34 + 4) & 6) != 0)
      sub_20F8DAC28((_QWORD *)(a1 + 2416), v34);
    v32 += 208;
  }
  v35 = *(_QWORD *)(a1 + 1400);
  v36 = *(_QWORD *)(a1 + 1408);
  while (v35 != v36)
  {
    v37 = *(_QWORD *)(v35 + 80);
    if (*(_BYTE *)(v35 + 168) || (*(_BYTE *)(v37 + 4) & 6) != 0)
      sub_20F8DADC0((_QWORD *)(a1 + 2416), v37);
    v35 += 176;
  }
  v38 = *(_QWORD *)(a1 + 1424);
  v39 = *(_QWORD *)(a1 + 1432);
  while (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 80);
    if (*(_BYTE *)(v38 + 168) || (*(_BYTE *)(v40 + 4) & 6) != 0)
      sub_20F599FB8((_QWORD *)(a1 + 2416), v40);
    v38 += 176;
  }
  sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
  sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
  sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
  sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
  v41 = (*(_QWORD *)(a1 + 2448) - *(_QWORD *)(a1 + 2440)) >> 2;
  if (DWORD1(v47[0]) > v41)
    LODWORD(v41) = DWORD1(v47[0]);
  v42 = v46 >= v41;
  v43 = v46 - v41;
  if (v42)
    v44 = v43;
  else
    v44 = 0;
  sub_20FA485B8((_QWORD *)a1);
  return v44;
}

void sub_20FA56A3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56A50(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56A64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56A78(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56A8C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56AA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56AB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56AC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56ADC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56AF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56B04(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56B18(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA56B2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FA56B40(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD v45[4];
  unsigned int v46;
  _OWORD v47[3];

  if (*(_BYTE *)(a1 + 1616))
    v3 = 0;
  else
    v3 = a2 == 0;
  if (!v3)
    return (*(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392)) >> 4;
  memset(v47, 0, 44);
  if (!sub_20F8DEE48((_QWORD *)a1, (int *)v47, v45, 1))
    return v46;
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
  *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
  v5 = *(_QWORD *)(a1 + 1064);
  v6 = *(_QWORD *)(a1 + 1072);
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 208);
    if (*(_BYTE *)(v5 + 496) || (*(_BYTE *)(v7 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2416, v7);
      sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v5 + 216));
    }
    v5 += 504;
  }
  v8 = *(_QWORD *)(a1 + 1088);
  v9 = *(_QWORD *)(a1 + 1096);
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 136);
    if (*(_BYTE *)(v8 + 272) || (*(_BYTE *)(v10 + 4) & 6) != 0)
      sub_20F394A20(a1 + 2416, v10);
    v8 += 280;
  }
  v11 = *(_QWORD *)(a1 + 1112);
  v12 = *(_QWORD *)(a1 + 1120);
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 136);
    if (*(_BYTE *)(v11 + 272) || (*(_BYTE *)(v13 + 4) & 6) != 0)
      sub_20F599C88((_QWORD *)(a1 + 2416), v13);
    v11 += 280;
  }
  v14 = *(_QWORD *)(a1 + 1136);
  v15 = *(_QWORD *)(a1 + 1144);
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 136);
    if (*(_BYTE *)(v14 + 272) || (*(_BYTE *)(v16 + 4) & 6) != 0)
      sub_20F59A480((_QWORD *)(a1 + 2416), v16);
    v14 += 280;
  }
  v17 = *(_QWORD *)(a1 + 1160);
  v18 = *(_QWORD *)(a1 + 1168);
  while (v17 != v18)
  {
    v19 = *(_QWORD *)(v17 + 64);
    if (*(_BYTE *)(v17 + 152) || (*(_BYTE *)(v19 + 4) & 6) != 0)
      sub_20F59A2E8((_QWORD *)(a1 + 2416), v19);
    v17 += 160;
  }
  sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
  sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
  v20 = *(_QWORD *)(a1 + 1232);
  v21 = *(_QWORD *)(a1 + 1240);
  while (v20 != v21)
  {
    v22 = *(_QWORD *)(v20 + 48);
    if (*(_BYTE *)(v20 + 136) || (*(_BYTE *)(v22 + 4) & 6) != 0)
      sub_20F3D35E0((_QWORD *)(a1 + 2416), v22);
    v20 += 144;
  }
  v23 = *(_QWORD *)(a1 + 1256);
  v24 = *(_QWORD *)(a1 + 1264);
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_BYTE *)(v23 + 144) || (*(_BYTE *)(v25 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v23 + 56) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2416, v25);
      sub_20F394A20(a1 + 2416, *(_QWORD *)(v23 + 56));
    }
    v23 += 152;
  }
  sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
  sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
  v26 = *(_QWORD *)(a1 + 1328);
  v27 = *(_QWORD *)(a1 + 1336);
  while (v26 != v27)
  {
    v28 = *(_QWORD *)(v26 + 48);
    if (*(_BYTE *)(v26 + 104) || (*(_BYTE *)(v28 + 4) & 6) != 0)
      sub_20F59A150((_QWORD *)(a1 + 2416), v28);
    v26 += 112;
  }
  v29 = *(_QWORD *)(a1 + 1352);
  v30 = *(_QWORD *)(a1 + 1360);
  while (v29 != v30)
  {
    v31 = *(_QWORD *)(v29 + 96);
    if (*(_BYTE *)(v29 + 200) || (*(_BYTE *)(v31 + 4) & 6) != 0)
      sub_20F599E20((_QWORD *)(a1 + 2416), v31);
    v29 += 208;
  }
  v32 = *(_QWORD *)(a1 + 1376);
  v33 = *(_QWORD *)(a1 + 1384);
  while (v32 != v33)
  {
    v34 = *(_QWORD *)(v32 + 96);
    if (*(_BYTE *)(v32 + 200) || (*(_BYTE *)(v34 + 4) & 6) != 0)
      sub_20F8DAC28((_QWORD *)(a1 + 2416), v34);
    v32 += 208;
  }
  v35 = *(_QWORD *)(a1 + 1400);
  v36 = *(_QWORD *)(a1 + 1408);
  while (v35 != v36)
  {
    v37 = *(_QWORD *)(v35 + 80);
    if (*(_BYTE *)(v35 + 168) || (*(_BYTE *)(v37 + 4) & 6) != 0)
      sub_20F8DADC0((_QWORD *)(a1 + 2416), v37);
    v35 += 176;
  }
  v38 = *(_QWORD *)(a1 + 1424);
  v39 = *(_QWORD *)(a1 + 1432);
  while (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 80);
    if (*(_BYTE *)(v38 + 168) || (*(_BYTE *)(v40 + 4) & 6) != 0)
      sub_20F599FB8((_QWORD *)(a1 + 2416), v40);
    v38 += 176;
  }
  sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
  sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
  sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
  sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
  v41 = (*(_QWORD *)(a1 + 2520) - *(_QWORD *)(a1 + 2512)) >> 2;
  if (LODWORD(v47[1]) > v41)
    LODWORD(v41) = v47[1];
  v42 = v46 >= v41;
  v43 = v46 - v41;
  if (v42)
    v44 = v43;
  else
    v44 = 0;
  sub_20FA485B8((_QWORD *)a1);
  return v44;
}

void sub_20FA56FF8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5700C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA57020(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA57034(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA57048(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5705C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA57070(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA57084(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA57098(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA570AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA570C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA570D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA570E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20FA570FC(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  BOOL v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  _BOOL4 v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  BOOL v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int *v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  uint64_t v177;
  unsigned int *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  unsigned int v191;
  BOOL v192;
  BOOL v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  _BOOL4 v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  _BOOL4 v207;
  _BOOL4 v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  _BOOL4 v229;
  int v230;
  char *v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  _BOOL4 v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int *v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  BOOL v249;
  unsigned int v250;
  unsigned int v251;
  _BOOL4 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v256 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v172 = *(a2 - 3);
        v173 = *(a2 - 2);
        v174 = a2 - 3;
        v175 = v173 < v10[1];
        v179 = v172 == *v10;
        v176 = v172 < *v10;
        if (v179)
          v176 = v175;
        if (v176)
        {
          v301 = v10[2];
          v277 = *(_QWORD *)v10;
          v177 = *(_QWORD *)v174;
          v10[2] = v174[2];
          *(_QWORD *)v10 = v177;
          v174[2] = v301;
          *(_QWORD *)v174 = v277;
        }
        return result;
      case 3:
        v163 = v10 + 3;
        v164 = v10[3];
        v165 = v10[4];
        v166 = v164 < *v10;
        if (v164 == *v10)
          v166 = v165 < v10[1];
        v168 = *(a2 - 3);
        v167 = a2 - 3;
        v169 = *(a2 - 2) < v165;
        v179 = v168 == v164;
        v170 = v168 < v164;
        if (v179)
          v170 = v169;
        if (v166)
        {
          if (v170)
          {
            v300 = v10[2];
            v276 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v167;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v300;
            *(_QWORD *)v167 = v276;
          }
          else
          {
            v304 = v10[2];
            v280 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v280;
            v10[5] = v304;
            v250 = *(a2 - 3);
            v251 = v10[3];
            v179 = v250 == v251;
            v252 = v250 < v251;
            if (v179)
              v252 = *(a2 - 2) < v10[4];
            if (v252)
            {
              v253 = *v163;
              v254 = v10[5];
              v255 = *(a2 - 1);
              *v163 = *(_QWORD *)v167;
              v10[5] = v255;
              *(a2 - 1) = v254;
              *(_QWORD *)v167 = v253;
            }
          }
        }
        else if (v170)
        {
          v234 = *v163;
          v235 = v10[5];
          v236 = *(a2 - 1);
          *v163 = *(_QWORD *)v167;
          v10[5] = v236;
          *(a2 - 1) = v235;
          *(_QWORD *)v167 = v234;
          v237 = v10[3];
          v179 = v237 == *v10;
          v238 = v237 < *v10;
          if (v179)
            v238 = v10[4] < v10[1];
          if (v238)
          {
            v303 = v10[2];
            v279 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v279;
            v10[5] = v303;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_20F2BCB74(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_20F396580(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v194 = (unint64_t)(v12 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = &v10[3 * v197];
                  if (2 * v196 + 2 >= v12)
                  {
                    v199 = *v198;
                  }
                  else
                  {
                    v199 = v198[3];
                    v200 = v10[3 * v197 + 1] < v198[4];
                    if (*v198 != v199)
                      v200 = *v198 < v199;
                    if (v200)
                    {
                      v198 += 3;
                      v197 = 2 * v196 + 2;
                    }
                    else
                    {
                      v199 = *v198;
                    }
                  }
                  v201 = &v10[3 * v196];
                  v202 = *v201;
                  v203 = v201[1];
                  v179 = v199 == *v201;
                  LODWORD(result) = v199 < *v201;
                  if (v179)
                    result = v198[1] < v203;
                  else
                    result = result;
                  if ((result & 1) == 0)
                  {
                    result = v201[2];
                    do
                    {
                      v209 = v201;
                      v201 = v198;
                      v210 = *(_QWORD *)v198;
                      v209[2] = v201[2];
                      *(_QWORD *)v209 = v210;
                      if (v194 < v197)
                        break;
                      v211 = (2 * v197) | 1;
                      v198 = &v10[3 * v211];
                      v197 = 2 * v197 + 2;
                      if (v197 < v12)
                      {
                        v204 = *v198;
                        v205 = v198[3];
                        v206 = v10[3 * v211 + 1] < v198[4];
                        if (*v198 != v205)
                          v206 = *v198 < v205;
                        if (v206)
                        {
                          v204 = v198[3];
                          v198 += 3;
                        }
                        else
                        {
                          v197 = v211;
                        }
                      }
                      else
                      {
                        v204 = *v198;
                        v197 = v211;
                      }
                      v207 = v198[1] < v203;
                      v179 = v204 == v202;
                      v208 = v204 < v202;
                      if (!v179)
                        v207 = v208;
                    }
                    while (!v207);
                    *v201 = v202;
                    v201[1] = v203;
                    v201[2] = result;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v212 = v11 / 0xCuLL;
              do
              {
                v214 = 0;
                v302 = v10[2];
                v278 = *(_QWORD *)v10;
                v215 = v10;
                do
                {
                  v217 = v214 + 1;
                  v218 = (char *)&v215[3 * v214 + 3];
                  v219 = (2 * v214) | 1;
                  v220 = 2 * v214 + 2;
                  if (v220 < v212)
                  {
                    v221 = *((_DWORD *)v218 + 3);
                    v222 = v215[3 * v217 + 1] < *((_DWORD *)v218 + 4);
                    v179 = *(_DWORD *)v218 == v221;
                    result = *(_DWORD *)v218 < v221;
                    if (!v179)
                      v222 = result;
                    if (v222)
                    {
                      v218 += 12;
                      v219 = v220;
                    }
                  }
                  v216 = *(_QWORD *)v218;
                  v215[2] = *((_DWORD *)v218 + 2);
                  *(_QWORD *)v215 = v216;
                  v215 = (unsigned int *)v218;
                  v214 = v219;
                }
                while (v219 <= (uint64_t)((unint64_t)(v212 - 2) >> 1));
                a2 -= 3;
                if (v218 == (char *)a2)
                {
                  *((_DWORD *)v218 + 2) = v302;
                  *(_QWORD *)v218 = v278;
                }
                else
                {
                  v223 = *(_QWORD *)a2;
                  *((_DWORD *)v218 + 2) = a2[2];
                  *(_QWORD *)v218 = v223;
                  a2[2] = v302;
                  *(_QWORD *)a2 = v278;
                  v224 = v218 - (char *)v10 + 12;
                  if (v224 >= 13)
                  {
                    v225 = (v224 / 0xCuLL - 2) >> 1;
                    v226 = &v10[3 * v225];
                    v228 = *(_DWORD *)v218;
                    v227 = *((_DWORD *)v218 + 1);
                    v229 = *v226 < *(_DWORD *)v218;
                    if (*v226 == *(_DWORD *)v218)
                      v229 = v226[1] < v227;
                    if (v229)
                    {
                      v230 = *((_DWORD *)v218 + 2);
                      do
                      {
                        v231 = v218;
                        v218 = (char *)v226;
                        v232 = *(_QWORD *)v226;
                        result = *((unsigned int *)v218 + 2);
                        *((_DWORD *)v231 + 2) = result;
                        *(_QWORD *)v231 = v232;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = &v10[3 * v225];
                        result = v226[1] < v227;
                        v233 = *v226 < v228;
                        if (*v226 == v228)
                          v233 = v226[1] < v227;
                      }
                      while (v233);
                      *(_DWORD *)v218 = v228;
                      *((_DWORD *)v218 + 1) = v227;
                      *((_DWORD *)v218 + 2) = v230;
                    }
                  }
                }
              }
              while (v212-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *(a2 - 3);
          v16 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v23 = *v10;
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (*v10 != *v14)
              v26 = *v10 < *v14;
            v27 = v16 < v24;
            v179 = v15 == v23;
            v28 = v15 < v23;
            if (v179)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v282 = v14[2];
                v258 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v282;
                *(_QWORD *)v8 = v258;
                goto LABEL_54;
              }
              v289 = v14[2];
              v265 = *(_QWORD *)v14;
              v63 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v63;
              v10[2] = v289;
              *(_QWORD *)v10 = v265;
              v64 = *(a2 - 3);
              v179 = v64 == *v10;
              v65 = v64 < *v10;
              if (v179)
                v65 = *(a2 - 2) < v10[1];
              if (v65)
              {
                v282 = v10[2];
                v258 = *(_QWORD *)v10;
                v66 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v66;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v285 = v10[2];
              v261 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v33;
              *(a2 - 1) = v285;
              *(_QWORD *)v8 = v261;
              v34 = v10[1] < *v25;
              if (*v10 != *v14)
                v34 = *v10 < *v14;
              if (v34)
              {
                v286 = v14[2];
                v262 = *(_QWORD *)v14;
                v35 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v35;
                v10[2] = v286;
                *(_QWORD *)v10 = v262;
                --a3;
                v36 = v262;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v36 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v108 = *(v10 - 3);
            v67 = v10[1];
            v179 = v108 == v36;
            v109 = v108 < v36;
            if (v179)
              v109 = *(v10 - 2) < v67;
            if (v109)
              goto LABEL_97;
            v137 = *(a2 - 3);
            v179 = v36 == v137;
            v138 = v36 < v137;
            if (v179)
              v138 = v67 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v67 < v140;
                v179 = v36 == v139;
                v142 = v36 < v139;
                if (v179)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v67 < v10[1];
                v179 = v36 == v144;
                v146 = v36 < v144;
                if (!v179)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v67 < v149;
                v179 = v36 == v148;
                v151 = v36 < v148;
                if (v179)
                  v151 = v150;
              }
              while (v151);
            }
            v152 = v7[2];
            while (v10 < v147)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v153 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v153;
              v147[2] = v299;
              *(_QWORD *)v147 = v275;
              do
              {
                v154 = v10[3];
                v155 = v10[4];
                v10 += 3;
                v156 = v67 < v155;
                v179 = v36 == v154;
                v157 = v36 < v154;
                if (v179)
                  v157 = v156;
              }
              while (!v157);
              do
              {
                v158 = *(v147 - 3);
                v159 = *(v147 - 2);
                v147 -= 3;
                v160 = v67 < v159;
                v179 = v36 == v158;
                v161 = v36 < v158;
                if (v179)
                  v161 = v160;
              }
              while (v161);
            }
            if (v10 - 3 != v7)
            {
              v162 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v162;
            }
            a4 = 0;
            *(v10 - 3) = v36;
            *(v10 - 2) = v67;
            *(v10 - 1) = v152;
            continue;
          }
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v179 = v15 == v17;
          v21 = v15 < v17;
          if (v179)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v281 = v10[2];
              v257 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
LABEL_36:
              *(a2 - 1) = v281;
              *(_QWORD *)v8 = v257;
              goto LABEL_37;
            }
            v287 = v10[2];
            v263 = *(_QWORD *)v10;
            v37 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v37;
            v14[2] = v287;
            *(_QWORD *)v14 = v263;
            v38 = *(a2 - 3);
            v39 = v38 < v263;
            if (v38 == (_DWORD)v263)
              v39 = *(a2 - 2) < *v18;
            if (v39)
            {
              v281 = v14[2];
              v257 = *(_QWORD *)v14;
              v40 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v40;
              goto LABEL_36;
            }
          }
          else if (v21)
          {
            v283 = v14[2];
            v259 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v283;
            *(_QWORD *)v8 = v259;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v284 = v10[2];
              v260 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v284;
              *(_QWORD *)v14 = v260;
            }
          }
LABEL_37:
          v41 = (uint64_t *)(v10 + 3);
          v42 = v10[3];
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v48 < v10[4];
          v179 = v46 == v42;
          v50 = v46 < v42;
          if (!v179)
            v49 = v50;
          v51 = *(a2 - 6);
          v52 = *(a2 - 5) < v48;
          v179 = v51 == v45;
          v53 = v51 < v45;
          if (v179)
            v53 = v52;
          if (v49)
          {
            if (v53)
            {
              v54 = *v41;
              v55 = v10[5];
              v56 = *(a2 - 4);
              *v41 = *(_QWORD *)v256;
              v10[5] = v56;
              *(a2 - 4) = v55;
              *(_QWORD *)v256 = v54;
            }
            else
            {
              v68 = *v41;
              v69 = v10[5];
              v70 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v70;
              v44[2] = v69;
              *(_QWORD *)v44 = v68;
              v71 = v68;
              LODWORD(v68) = *(a2 - 6);
              v179 = (_DWORD)v68 == v71;
              v72 = v68 < v71;
              if (v179)
                v72 = *(a2 - 5) < *v47;
              if (v72)
              {
                v290 = v44[2];
                v266 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v256;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v290;
                *(_QWORD *)v256 = v266;
              }
            }
          }
          else if (v53)
          {
            v288 = v44[2];
            v264 = *(_QWORD *)v44;
            v57 = *(_QWORD *)v256;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v57;
            *(a2 - 4) = v288;
            *(_QWORD *)v256 = v264;
            v58 = v10[3];
            v59 = *v44 < v58;
            if (*v44 == v58)
              v59 = *v47 < v10[4];
            if (v59)
            {
              v60 = *v41;
              v61 = v10[5];
              v62 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v62;
              v44[2] = v61;
              *(_QWORD *)v44 = v60;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = v10[6];
          v76 = &v10[3 * v13];
          v79 = v76[3];
          v77 = v76 + 3;
          v78 = v79;
          v80 = v77 + 1;
          v81 = v77[1];
          v82 = v81 < v10[7];
          v179 = v79 == v75;
          v83 = v79 < v75;
          if (!v179)
            v82 = v83;
          v84 = *(a2 - 9);
          v85 = *(a2 - 8) < v81;
          v179 = v84 == v78;
          v86 = v84 < v78;
          if (v179)
            v86 = v85;
          if (v82)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v98;
              v77[2] = v97;
              *(_QWORD *)v77 = v96;
              v99 = v96;
              LODWORD(v96) = *(a2 - 9);
              v179 = (_DWORD)v96 == v99;
              v100 = v96 < v99;
              if (v179)
                v100 = *(a2 - 8) < *v80;
              if (v100)
              {
                v292 = v77[2];
                v268 = *(_QWORD *)v77;
                v101 = *(_QWORD *)v9;
                v77[2] = *(a2 - 7);
                *(_QWORD *)v77 = v101;
                *(a2 - 7) = v292;
                *(_QWORD *)v9 = v268;
              }
            }
          }
          else if (v86)
          {
            v291 = v77[2];
            v267 = *(_QWORD *)v77;
            v90 = *(_QWORD *)v9;
            v77[2] = *(a2 - 7);
            *(_QWORD *)v77 = v90;
            *(a2 - 7) = v291;
            *(_QWORD *)v9 = v267;
            v91 = v10[6];
            v92 = *v77 < v91;
            if (*v77 == v91)
              v92 = *v80 < v10[7];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v95;
              v77[2] = v94;
              *(_QWORD *)v77 = v93;
            }
          }
          v102 = *v14;
          v103 = *v14 < *v44;
          if (*v14 == *v44)
            v103 = *v18 < *v47;
          result = *v80;
          v179 = *v77 == v102;
          v104 = *v77 < v102;
          if (v179)
            v104 = result < *v18;
          if (v103)
          {
            if (v104)
            {
              v293 = v44[2];
              v269 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v77;
              v44[2] = v77[2];
LABEL_92:
              v77[2] = v293;
              *(_QWORD *)v77 = v269;
              goto LABEL_93;
            }
            v296 = v44[2];
            v272 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v296;
            *(_QWORD *)v14 = v272;
            v106 = *v80 < *v18;
            if (*v77 != *v14)
              v106 = *v77 < *v14;
            if (v106)
            {
              v293 = v14[2];
              v269 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v77;
              v14[2] = v77[2];
              goto LABEL_92;
            }
          }
          else if (v104)
          {
            v294 = v14[2];
            v270 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v77;
            v14[2] = v77[2];
            v77[2] = v294;
            *(_QWORD *)v77 = v270;
            v105 = *v18 < *v47;
            if (*v14 != *v44)
              v105 = *v14 < *v44;
            if (v105)
            {
              v295 = v44[2];
              v271 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v295;
              *(_QWORD *)v14 = v271;
            }
          }
LABEL_93:
          v297 = v10[2];
          v273 = *(_QWORD *)v10;
          v107 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v107;
          v14[2] = v297;
          *(_QWORD *)v14 = v273;
          --a3;
          v36 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v67 = v10[1];
LABEL_97:
          v110 = 0;
          v111 = v10[2];
          do
          {
            v112 = v10[v110 + 3];
            v113 = v10[v110 + 4] < v67;
            v179 = v112 == v36;
            v114 = v112 < v36;
            if (!v179)
              v113 = v114;
            v110 += 3;
          }
          while (v113);
          v115 = &v10[v110];
          v116 = a2;
          if (v110 == 3)
          {
            v116 = a2;
            do
            {
              if (v115 >= v116)
                break;
              v121 = *(v116 - 3);
              v122 = *(v116 - 2);
              v116 -= 3;
              v123 = v122 < v67;
              v179 = v121 == v36;
              v124 = v121 < v36;
              if (v179)
                v124 = v123;
            }
            while (!v124);
          }
          else
          {
            do
            {
              v117 = *(v116 - 3);
              v118 = *(v116 - 2);
              v116 -= 3;
              v119 = v118 < v67;
              v179 = v117 == v36;
              v120 = v117 < v36;
              if (v179)
                v120 = v119;
            }
            while (!v120);
          }
          v10 = v115;
          if (v115 < v116)
          {
            v125 = (unint64_t)v116;
            do
            {
              v298 = v10[2];
              v274 = *(_QWORD *)v10;
              v126 = *(_QWORD *)v125;
              v10[2] = *(_DWORD *)(v125 + 8);
              *(_QWORD *)v10 = v126;
              *(_DWORD *)(v125 + 8) = v298;
              *(_QWORD *)v125 = v274;
              do
              {
                v127 = v10[3];
                v128 = v10[4];
                v10 += 3;
                v129 = v128 < v67;
                v179 = v127 == v36;
                v130 = v127 < v36;
                if (v179)
                  v130 = v129;
              }
              while (v130);
              do
              {
                v131 = *(_DWORD *)(v125 - 12);
                v132 = *(_DWORD *)(v125 - 8);
                v125 -= 12;
                v133 = v132 < v67;
                v179 = v131 == v36;
                v134 = v131 < v36;
                if (v179)
                  v134 = v133;
              }
              while (!v134);
            }
            while ((unint64_t)v10 < v125);
          }
          if (v10 - 3 != v7)
          {
            v135 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v135;
          }
          *(v10 - 3) = v36;
          *(v10 - 2) = v67;
          *(v10 - 1) = v111;
          if (v115 < v116)
            goto LABEL_126;
          v136 = sub_20FA58330(v7, v10 - 3);
          result = sub_20FA58330(v10, a2);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_126:
            result = sub_20FA570FC(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v178 = v10 + 3;
        v179 = v10 == a2 || v178 == a2;
        v180 = v179;
        if ((a4 & 1) != 0)
        {
          if ((v180 & 1) == 0)
          {
            v181 = 0;
            v182 = v10;
            do
            {
              v184 = v178;
              v185 = v182[3];
              v186 = v182[4];
              v187 = v185 < *v182;
              if (v185 == *v182)
                v187 = v186 < v182[1];
              if (v187)
              {
                v188 = v182[5];
                v189 = v181;
                do
                {
                  v190 = (char *)v10 + v189;
                  *(_QWORD *)(v190 + 12) = *(_QWORD *)((char *)v10 + v189);
                  *((_DWORD *)v190 + 5) = *(unsigned int *)((char *)v10 + v189 + 8);
                  if (!v189)
                  {
                    v183 = v10;
                    goto LABEL_184;
                  }
                  v191 = *((_DWORD *)v190 - 3);
                  v192 = v186 < *((_DWORD *)v190 - 2);
                  v179 = v185 == v191;
                  v193 = v185 < v191;
                  if (!v179)
                    v192 = v193;
                  v189 -= 12;
                }
                while (v192);
                v183 = (unsigned int *)((char *)v10 + v189 + 12);
LABEL_184:
                *v183 = v185;
                v183[1] = v186;
                v183[2] = v188;
              }
              v178 = v184 + 3;
              v181 += 12;
              v182 = v184;
            }
            while (v184 + 3 != a2);
          }
        }
        else if ((v180 & 1) == 0)
        {
          do
          {
            v239 = v178;
            v240 = v7[3];
            v241 = v7[4];
            v242 = v240 < *v7;
            if (v240 == *v7)
              v242 = v241 < v7[1];
            if (v242)
            {
              v243 = v7[5];
              v244 = v239;
              do
              {
                v245 = v244;
                v246 = *(_QWORD *)(v244 - 3);
                v244 -= 3;
                *(_QWORD *)v245 = v246;
                v245[2] = *(v245 - 1);
                v247 = *(v245 - 6);
                v248 = v241 < *(v245 - 5);
                v179 = v240 == v247;
                v249 = v240 < v247;
                if (!v179)
                  v248 = v249;
              }
              while (v248);
              *v244 = v240;
              v244[1] = v241;
              v244[2] = v243;
            }
            v178 = v239 + 3;
            v7 = v239;
          }
          while (v239 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20FA58330(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BCB74(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F396580(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

uint64_t sub_20FA587C4(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  BOOL v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  _BOOL4 v138;
  uint64_t v139;
  BOOL v140;
  unsigned int v141;
  BOOL v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;
  unsigned int *v147;
  unsigned int v148;
  _BOOL4 v149;
  _BOOL4 v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  BOOL v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  unsigned int *v172;
  unsigned int v173;
  _BOOL4 v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  _BOOL4 v180;
  _BOOL4 v181;
  uint64_t v182;
  unsigned int *v183;
  BOOL v184;
  char v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  _BOOL4 v193;
  unsigned int v194;
  uint64_t v195;
  char *v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int v215;
  _BOOL4 v216;
  BOOL v217;
  unsigned int v218;
  unsigned int v219;
  _BOOL4 v220;
  _BOOL4 v221;
  unsigned int *v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  _BOOL4 v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  _BOOL4 v244;
  int v245;
  char *v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  _BOOL4 v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _BOOL4 v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  uint64_t v264;
  unsigned int v265;
  BOOL v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  _BOOL4 v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v274 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v176 = *(a2 - 3);
        v177 = *(a2 - 2);
        v178 = a2 - 3;
        v179 = v10[1];
        v180 = v176 < *v10;
        v184 = v177 == v179;
        v181 = v177 < v179;
        if (!v184)
          v180 = v181;
        if (v180)
        {
          v319 = v10[2];
          v295 = *(_QWORD *)v10;
          v182 = *(_QWORD *)v178;
          v10[2] = v178[2];
          *(_QWORD *)v10 = v182;
          v178[2] = v319;
          *(_QWORD *)v178 = v295;
        }
        return result;
      case 3:
        v167 = v10 + 3;
        v168 = v10[3];
        v169 = v10[4];
        v170 = v10[1];
        v184 = v169 == v170;
        v171 = v169 < v170;
        if (v184)
          v171 = v168 < *v10;
        v173 = *(a2 - 2);
        v172 = a2 - 3;
        v174 = *(a2 - 3) < v168;
        if (v173 != v169)
          v174 = v173 < v169;
        if (v171)
        {
          if (v174)
          {
            v318 = v10[2];
            v294 = *(_QWORD *)v10;
            v175 = *(_QWORD *)v172;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v175;
            *(a2 - 1) = v318;
            *(_QWORD *)v172 = v294;
          }
          else
          {
            v322 = v10[2];
            v298 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v298;
            v10[5] = v322;
            v268 = *(a2 - 2);
            v269 = v10[4];
            v184 = v268 == v269;
            v270 = v268 < v269;
            if (v184)
              v270 = *(a2 - 3) < v10[3];
            if (v270)
            {
              v271 = *v167;
              v272 = v10[5];
              v273 = *(a2 - 1);
              *v167 = *(_QWORD *)v172;
              v10[5] = v273;
              *(a2 - 1) = v272;
              *(_QWORD *)v172 = v271;
            }
          }
        }
        else if (v174)
        {
          v250 = *v167;
          v251 = v10[5];
          v252 = *(a2 - 1);
          *v167 = *(_QWORD *)v172;
          v10[5] = v252;
          *(a2 - 1) = v251;
          *(_QWORD *)v172 = v250;
          v253 = v10[4];
          v254 = v10[1];
          v184 = v253 == v254;
          v255 = v253 < v254;
          if (v184)
            v255 = v10[3] < *v10;
          if (v255)
          {
            v321 = v10[2];
            v297 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v297;
            v10[5] = v321;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_20F2BE75C(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_20F397DA0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v200 = (unint64_t)(v12 - 2) >> 1;
              v201 = v200;
              do
              {
                v202 = v201;
                if (v200 >= v201)
                {
                  v203 = (2 * v201) | 1;
                  v204 = &v10[3 * v203];
                  if (2 * v202 + 2 >= v12)
                  {
                    v207 = *v204;
                  }
                  else
                  {
                    v205 = v10[3 * v203 + 1];
                    v206 = v204[4];
                    v207 = *v204;
                    v184 = v205 == v206;
                    v208 = v205 < v206;
                    if (v184)
                      v208 = *v204 < v204[3];
                    if (v208)
                    {
                      v207 = v204[3];
                      v204 += 3;
                      v203 = 2 * v202 + 2;
                    }
                  }
                  v209 = &v10[3 * v202];
                  v210 = v204[1];
                  v211 = v209[1];
                  v212 = *v209;
                  LODWORD(result) = v207 < *v209;
                  v184 = v210 == v211;
                  v213 = v210 < v211;
                  if (v184)
                    result = result;
                  else
                    result = v213;
                  if ((result & 1) == 0)
                  {
                    result = v209[2];
                    do
                    {
                      v222 = v209;
                      v209 = v204;
                      v223 = *(_QWORD *)v204;
                      v222[2] = v209[2];
                      *(_QWORD *)v222 = v223;
                      if (v200 < v203)
                        break;
                      v224 = (2 * v203) | 1;
                      v204 = &v10[3 * v224];
                      v203 = 2 * v203 + 2;
                      if (v203 < v12)
                      {
                        v214 = v10[3 * v224 + 1];
                        v215 = v204[4];
                        v184 = v214 == v215;
                        v216 = v214 < v215;
                        if (v184)
                          v216 = *v204 < v204[3];
                        v217 = !v216;
                        v218 = v216 ? v204[3] : *v204;
                        if (v217)
                          v203 = v224;
                        else
                          v204 += 3;
                      }
                      else
                      {
                        v218 = *v204;
                        v203 = v224;
                      }
                      v219 = v204[1];
                      v220 = v218 < v212;
                      v184 = v219 == v211;
                      v221 = v219 < v211;
                      if (v184)
                        v221 = v220;
                    }
                    while (!v221);
                    *v209 = v212;
                    v209[1] = v211;
                    v209[2] = result;
                  }
                }
                v201 = v202 - 1;
              }
              while (v202);
              v225 = v11 / 0xCuLL;
              do
              {
                v227 = 0;
                v320 = v10[2];
                v296 = *(_QWORD *)v10;
                v228 = (char *)v10;
                do
                {
                  v230 = v227 + 1;
                  v231 = &v228[12 * v227 + 12];
                  v232 = (2 * v227) | 1;
                  v233 = 2 * v227 + 2;
                  if (v233 < v225)
                  {
                    v234 = *(_DWORD *)&v228[12 * v230 + 4];
                    v235 = *((_DWORD *)v231 + 4);
                    result = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    v184 = v234 == v235;
                    v236 = v234 < v235;
                    if (v184)
                      v236 = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    if (v236)
                    {
                      v231 += 12;
                      v232 = v233;
                    }
                  }
                  v229 = *(_QWORD *)v231;
                  *((_DWORD *)v228 + 2) = *((_DWORD *)v231 + 2);
                  *(_QWORD *)v228 = v229;
                  v228 = v231;
                  v227 = v232;
                }
                while (v232 <= (uint64_t)((unint64_t)(v225 - 2) >> 1));
                a2 -= 3;
                if (v231 == (char *)a2)
                {
                  *((_DWORD *)v231 + 2) = v320;
                  *(_QWORD *)v231 = v296;
                }
                else
                {
                  v237 = *(_QWORD *)a2;
                  *((_DWORD *)v231 + 2) = a2[2];
                  *(_QWORD *)v231 = v237;
                  a2[2] = v320;
                  *(_QWORD *)a2 = v296;
                  v238 = v231 - (char *)v10 + 12;
                  if (v238 >= 13)
                  {
                    v239 = (v238 / 0xCuLL - 2) >> 1;
                    v240 = (char *)&v10[3 * v239];
                    v241 = *((_DWORD *)v240 + 1);
                    v243 = *(_DWORD *)v231;
                    v242 = *((_DWORD *)v231 + 1);
                    v184 = v241 == v242;
                    v244 = v241 < v242;
                    if (v184)
                      v244 = *(_DWORD *)v240 < *(_DWORD *)v231;
                    if (v244)
                    {
                      v245 = *((_DWORD *)v231 + 2);
                      do
                      {
                        v246 = v231;
                        v231 = v240;
                        v247 = *(_QWORD *)v240;
                        result = *((unsigned int *)v231 + 2);
                        *((_DWORD *)v246 + 2) = result;
                        *(_QWORD *)v246 = v247;
                        if (!v239)
                          break;
                        v239 = (v239 - 1) >> 1;
                        v240 = (char *)&v10[3 * v239];
                        v248 = *((_DWORD *)v240 + 1);
                        result = *(_DWORD *)v240 < v243;
                        v184 = v248 == v242;
                        v249 = v248 < v242;
                        if (v184)
                          v249 = *(_DWORD *)v240 < v243;
                      }
                      while (v249);
                      *(_DWORD *)v231 = v243;
                      *((_DWORD *)v231 + 1) = v242;
                      *((_DWORD *)v231 + 2) = v245;
                    }
                  }
                }
              }
              while (v225-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v16 = *(a2 - 3);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (v24 == *v25)
              v26 = *v10 < *v14;
            v27 = v16 < *v10;
            v184 = v15 == v24;
            v28 = v15 < v24;
            if (v184)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v300 = v14[2];
                v276 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v300;
                *(_QWORD *)v8 = v276;
                goto LABEL_54;
              }
              v307 = v14[2];
              v283 = *(_QWORD *)v14;
              v65 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v65;
              v10[2] = v307;
              *(_QWORD *)v10 = v283;
              v66 = *(a2 - 2);
              v67 = v10[1];
              v184 = v66 == v67;
              v68 = v66 < v67;
              if (v184)
                v68 = *(a2 - 3) < *v10;
              if (v68)
              {
                v300 = v10[2];
                v276 = *(_QWORD *)v10;
                v69 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v69;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v303 = v10[2];
              v279 = *(_QWORD *)v10;
              v34 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v34;
              *(a2 - 1) = v303;
              *(_QWORD *)v8 = v279;
              v35 = *v25;
              LODWORD(v34) = v10[1];
              v184 = (_DWORD)v34 == v35;
              v36 = v34 < v35;
              if (v184)
                v36 = *v10 < *v14;
              if (v36)
              {
                v304 = v14[2];
                v280 = *(_QWORD *)v14;
                v37 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v37;
                v10[2] = v304;
                *(_QWORD *)v10 = v280;
                --a3;
                v38 = v280;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v38 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v70 = v10[1];
            v112 = *(v10 - 2);
            v184 = v112 == v70;
            v113 = v112 < v70;
            if (v184)
              v113 = *(v10 - 3) < v38;
            if (v113)
              goto LABEL_97;
            v141 = *(a2 - 2);
            v184 = v70 == v141;
            v142 = v70 < v141;
            if (v184)
              v142 = v38 < *(a2 - 3);
            if (v142)
            {
              do
              {
                v143 = v10[3];
                v144 = v10[4];
                v10 += 3;
                v145 = v38 < v143;
                v184 = v70 == v144;
                v146 = v70 < v144;
                if (!v184)
                  v145 = v146;
              }
              while (!v145);
            }
            else
            {
              v147 = v10 + 3;
              do
              {
                v10 = v147;
                if (v147 >= a2)
                  break;
                v148 = v147[1];
                v149 = v38 < *v10;
                v184 = v70 == v148;
                v150 = v70 < v148;
                if (!v184)
                  v149 = v150;
                v147 = v10 + 3;
              }
              while (!v149);
            }
            v151 = a2;
            if (v10 < a2)
            {
              v151 = a2;
              do
              {
                v152 = *(v151 - 3);
                v153 = *(v151 - 2);
                v151 -= 3;
                v154 = v38 < v152;
                v184 = v70 == v153;
                v155 = v70 < v153;
                if (!v184)
                  v154 = v155;
              }
              while (v154);
            }
            v156 = v7[2];
            while (v10 < v151)
            {
              v317 = v10[2];
              v293 = *(_QWORD *)v10;
              v157 = *(_QWORD *)v151;
              v10[2] = v151[2];
              *(_QWORD *)v10 = v157;
              v151[2] = v317;
              *(_QWORD *)v151 = v293;
              do
              {
                v158 = v10[3];
                v159 = v10[4];
                v10 += 3;
                v160 = v38 < v158;
                v184 = v70 == v159;
                v161 = v70 < v159;
                if (!v184)
                  v160 = v161;
              }
              while (!v160);
              do
              {
                v162 = *(v151 - 3);
                v163 = *(v151 - 2);
                v151 -= 3;
                v164 = v38 < v162;
                v184 = v70 == v163;
                v165 = v70 < v163;
                if (!v184)
                  v164 = v165;
              }
              while (v164);
            }
            if (v10 - 3 != v7)
            {
              v166 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v166;
            }
            a4 = 0;
            *(v10 - 3) = v38;
            *(v10 - 2) = v70;
            *(v10 - 1) = v156;
            continue;
          }
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v184 = *v18 == v17;
          v20 = *v18 < v17;
          if (v184)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v184 = v15 == v19;
          v22 = v15 < v19;
          if (v184)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
LABEL_36:
              *(a2 - 1) = v299;
              *(_QWORD *)v8 = v275;
              goto LABEL_37;
            }
            v305 = v10[2];
            v281 = *(_QWORD *)v10;
            v39 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v39;
            v14[2] = v305;
            *(_QWORD *)v14 = v281;
            v40 = *(a2 - 2);
            v41 = v40 < *v18;
            if (v40 == *v18)
              v41 = *(a2 - 3) < *v14;
            if (v41)
            {
              v299 = v14[2];
              v275 = *(_QWORD *)v14;
              v42 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v42;
              goto LABEL_36;
            }
          }
          else if (v22)
          {
            v301 = v14[2];
            v277 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v301;
            *(_QWORD *)v8 = v277;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v302 = v10[2];
              v278 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v302;
              *(_QWORD *)v14 = v278;
            }
          }
LABEL_37:
          v43 = (uint64_t *)(v10 + 3);
          v44 = &v10[3 * v13];
          v47 = *(v44 - 3);
          v45 = v44 - 3;
          v46 = v47;
          v48 = v45 + 1;
          v49 = v45[1];
          v50 = v10[4];
          v51 = v47 < v10[3];
          v184 = v49 == v50;
          v52 = v49 < v50;
          if (v184)
            v52 = v51;
          v53 = *(a2 - 5);
          v54 = *(a2 - 6) < v46;
          v184 = v53 == v49;
          v55 = v53 < v49;
          if (v184)
            v55 = v54;
          if (v52)
          {
            if (v55)
            {
              v56 = *v43;
              v57 = v10[5];
              v58 = *(a2 - 4);
              *v43 = *(_QWORD *)v274;
              v10[5] = v58;
              *(a2 - 4) = v57;
              *(_QWORD *)v274 = v56;
            }
            else
            {
              v71 = *v43;
              v72 = v10[5];
              v73 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v73;
              v45[2] = v72;
              *(_QWORD *)v45 = v71;
              LODWORD(v71) = *(a2 - 5);
              v74 = v71 < *v48;
              if ((_DWORD)v71 == *v48)
                v74 = *(a2 - 6) < *v45;
              if (v74)
              {
                v308 = v45[2];
                v284 = *(_QWORD *)v45;
                v75 = *(_QWORD *)v274;
                v45[2] = *(a2 - 4);
                *(_QWORD *)v45 = v75;
                *(a2 - 4) = v308;
                *(_QWORD *)v274 = v284;
              }
            }
          }
          else if (v55)
          {
            v306 = v45[2];
            v282 = *(_QWORD *)v45;
            v59 = *(_QWORD *)v274;
            v45[2] = *(a2 - 4);
            *(_QWORD *)v45 = v59;
            *(a2 - 4) = v306;
            *(_QWORD *)v274 = v282;
            v60 = v10[4];
            v61 = *v48 < v60;
            if (*v48 == v60)
              v61 = *v45 < v10[3];
            if (v61)
            {
              v62 = *v43;
              v63 = v10[5];
              v64 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v64;
              v45[2] = v63;
              *(_QWORD *)v45 = v62;
            }
          }
          v76 = (uint64_t *)(v10 + 6);
          v77 = &v10[3 * v13];
          v80 = v77[3];
          v78 = v77 + 3;
          v79 = v80;
          v81 = v78 + 1;
          v82 = v78[1];
          v83 = v10[7];
          v84 = v80 < v10[6];
          v184 = v82 == v83;
          v85 = v82 < v83;
          if (v184)
            v85 = v84;
          v86 = *(a2 - 8);
          v87 = *(a2 - 9) < v79;
          v184 = v86 == v82;
          v88 = v86 < v82;
          if (v184)
            v88 = v87;
          if (v85)
          {
            if (v88)
            {
              v89 = *v76;
              v90 = v10[8];
              v91 = *(a2 - 7);
              *v76 = *(_QWORD *)v9;
              v10[8] = v91;
              *(a2 - 7) = v90;
              *(_QWORD *)v9 = v89;
            }
            else
            {
              v98 = *v76;
              v99 = v10[8];
              v100 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v100;
              v78[2] = v99;
              *(_QWORD *)v78 = v98;
              LODWORD(v98) = *(a2 - 8);
              v101 = v98 < *v81;
              if ((_DWORD)v98 == *v81)
                v101 = *(a2 - 9) < *v78;
              if (v101)
              {
                v310 = v78[2];
                v286 = *(_QWORD *)v78;
                v102 = *(_QWORD *)v9;
                v78[2] = *(a2 - 7);
                *(_QWORD *)v78 = v102;
                *(a2 - 7) = v310;
                *(_QWORD *)v9 = v286;
              }
            }
          }
          else if (v88)
          {
            v309 = v78[2];
            v285 = *(_QWORD *)v78;
            v92 = *(_QWORD *)v9;
            v78[2] = *(a2 - 7);
            *(_QWORD *)v78 = v92;
            *(a2 - 7) = v309;
            *(_QWORD *)v9 = v285;
            v93 = v10[7];
            v94 = *v81 < v93;
            if (*v81 == v93)
              v94 = *v78 < v10[6];
            if (v94)
            {
              v95 = *v76;
              v96 = v10[8];
              v97 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v97;
              v78[2] = v96;
              *(_QWORD *)v78 = v95;
            }
          }
          v103 = *v18;
          v104 = *v18 < *v48;
          if (*v18 == *v48)
            v104 = *v14 < *v45;
          result = *v78;
          v184 = *v81 == v103;
          v105 = *v81 < v103;
          if (v184)
            v105 = result < *v14;
          if (v104)
          {
            if (v105)
            {
              v311 = v45[2];
              v287 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v78;
              v45[2] = v78[2];
LABEL_92:
              v78[2] = v311;
              *(_QWORD *)v78 = v287;
              goto LABEL_93;
            }
            v314 = v45[2];
            v290 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v14;
            v45[2] = v14[2];
            v14[2] = v314;
            *(_QWORD *)v14 = v290;
            v109 = *v18;
            v184 = *v81 == v109;
            v110 = *v81 < v109;
            if (v184)
              v110 = *v78 < *v14;
            if (v110)
            {
              v311 = v14[2];
              v287 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v78;
              v14[2] = v78[2];
              goto LABEL_92;
            }
          }
          else if (v105)
          {
            v312 = v14[2];
            v288 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v78;
            v14[2] = v78[2];
            v78[2] = v312;
            *(_QWORD *)v78 = v288;
            v106 = *v18;
            v107 = *v48;
            v184 = v106 == v107;
            v108 = v106 < v107;
            if (v184)
              v108 = *v14 < *v45;
            if (v108)
            {
              v313 = v45[2];
              v289 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v14;
              v45[2] = v14[2];
              v14[2] = v313;
              *(_QWORD *)v14 = v289;
            }
          }
LABEL_93:
          v315 = v10[2];
          v291 = *(_QWORD *)v10;
          v111 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v111;
          v14[2] = v315;
          *(_QWORD *)v14 = v291;
          --a3;
          v38 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v70 = v10[1];
LABEL_97:
          v114 = 0;
          v115 = v10[2];
          do
          {
            v116 = v10[v114 + 4];
            v117 = v10[v114 + 3] < v38;
            v184 = v116 == v70;
            v118 = v116 < v70;
            if (!v184)
              v117 = v118;
            v114 += 3;
          }
          while (v117);
          v119 = &v10[v114];
          v120 = a2;
          if (v114 == 3)
          {
            v120 = a2;
            do
            {
              if (v119 >= v120)
                break;
              v125 = *(v120 - 3);
              v126 = *(v120 - 2);
              v120 -= 3;
              v127 = v125 < v38;
              v184 = v126 == v70;
              v128 = v126 < v70;
              if (!v184)
                v127 = v128;
            }
            while (!v127);
          }
          else
          {
            do
            {
              v121 = *(v120 - 3);
              v122 = *(v120 - 2);
              v120 -= 3;
              v123 = v121 < v38;
              v184 = v122 == v70;
              v124 = v122 < v70;
              if (!v184)
                v123 = v124;
            }
            while (!v123);
          }
          v10 = v119;
          if (v119 < v120)
          {
            v129 = (unint64_t)v120;
            do
            {
              v316 = v10[2];
              v292 = *(_QWORD *)v10;
              v130 = *(_QWORD *)v129;
              v10[2] = *(_DWORD *)(v129 + 8);
              *(_QWORD *)v10 = v130;
              *(_DWORD *)(v129 + 8) = v316;
              *(_QWORD *)v129 = v292;
              do
              {
                v131 = v10[3];
                v132 = v10[4];
                v10 += 3;
                v133 = v131 < v38;
                v184 = v132 == v70;
                v134 = v132 < v70;
                if (!v184)
                  v133 = v134;
              }
              while (v133);
              do
              {
                v135 = *(_DWORD *)(v129 - 12);
                v136 = *(_DWORD *)(v129 - 8);
                v129 -= 12;
                v137 = v135 < v38;
                v184 = v136 == v70;
                v138 = v136 < v70;
                if (!v184)
                  v137 = v138;
              }
              while (!v137);
            }
            while ((unint64_t)v10 < v129);
          }
          if (v10 - 3 != v7)
          {
            v139 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v139;
          }
          *(v10 - 3) = v38;
          *(v10 - 2) = v70;
          *(v10 - 1) = v115;
          if (v119 < v120)
            goto LABEL_126;
          v140 = sub_20FA599F8(v7, v10 - 3);
          result = sub_20FA599F8(v10, a2);
          if (!(_DWORD)result)
          {
            if (v140)
              continue;
LABEL_126:
            result = sub_20FA587C4(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v140)
            return result;
          goto LABEL_2;
        }
        v183 = v10 + 3;
        v184 = v10 == a2 || v183 == a2;
        v185 = v184;
        if ((a4 & 1) != 0)
        {
          if ((v185 & 1) == 0)
          {
            v186 = 0;
            v187 = v10;
            do
            {
              v189 = v183;
              v191 = v187[3];
              v190 = v187[4];
              v192 = v187[1];
              v184 = v190 == v192;
              v193 = v190 < v192;
              if (v184)
                v193 = v191 < *v187;
              if (v193)
              {
                v194 = v187[5];
                v195 = v186;
                do
                {
                  v196 = (char *)v10 + v195;
                  *(_QWORD *)(v196 + 12) = *(_QWORD *)((char *)v10 + v195);
                  *((_DWORD *)v196 + 5) = *(unsigned int *)((char *)v10 + v195 + 8);
                  if (!v195)
                  {
                    v188 = v10;
                    goto LABEL_184;
                  }
                  v197 = *((_DWORD *)v196 - 2);
                  v198 = v191 < *((_DWORD *)v196 - 3);
                  v184 = v190 == v197;
                  v199 = v190 < v197;
                  if (!v184)
                    v198 = v199;
                  v195 -= 12;
                }
                while (v198);
                v188 = (unsigned int *)((char *)v10 + v195 + 12);
LABEL_184:
                *v188 = v191;
                v188[1] = v190;
                v188[2] = v194;
              }
              v183 = v189 + 3;
              v186 += 12;
              v187 = v189;
            }
            while (v189 + 3 != a2);
          }
        }
        else if ((v185 & 1) == 0)
        {
          do
          {
            v256 = v183;
            v258 = v7[3];
            v257 = v7[4];
            v259 = v7[1];
            v184 = v257 == v259;
            v260 = v257 < v259;
            if (v184)
              v260 = v258 < *v7;
            if (v260)
            {
              v261 = v7[5];
              v262 = v256;
              do
              {
                v263 = v262;
                v264 = *(_QWORD *)(v262 - 3);
                v262 -= 3;
                *(_QWORD *)v263 = v264;
                v263[2] = *(v263 - 1);
                v265 = *(v263 - 5);
                v266 = v258 < *(v263 - 6);
                v184 = v257 == v265;
                v267 = v257 < v265;
                if (!v184)
                  v266 = v267;
              }
              while (v266);
              *v262 = v258;
              v262[1] = v257;
              v262[2] = v261;
            }
            v183 = v256 + 3;
            v7 = v256;
          }
          while (v256 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20FA599F8(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BE75C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F397DA0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

uint64_t sub_20FA59E8C(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD v45[10];
  unsigned int v46;
  _OWORD v47[3];

  if (*(_BYTE *)(a1 + 1616))
    v3 = 0;
  else
    v3 = a2 == 0;
  if (!v3)
    return (*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 4;
  memset(v47, 0, 44);
  if (!sub_20F8DEE48((_QWORD *)a1, (int *)v47, v45, 1))
    return v46;
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a1 + 2512);
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2632);
  *(_QWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 2656);
  v5 = *(_QWORD *)(a1 + 1064);
  v6 = *(_QWORD *)(a1 + 1072);
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 208);
    if (*(_BYTE *)(v5 + 496) || (*(_BYTE *)(v7 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2416, v7);
      sub_20F3D35E0((_QWORD *)(a1 + 2416), *(_QWORD *)(v5 + 216));
    }
    v5 += 504;
  }
  v8 = *(_QWORD *)(a1 + 1088);
  v9 = *(_QWORD *)(a1 + 1096);
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 136);
    if (*(_BYTE *)(v8 + 272) || (*(_BYTE *)(v10 + 4) & 6) != 0)
      sub_20F394A20(a1 + 2416, v10);
    v8 += 280;
  }
  v11 = *(_QWORD *)(a1 + 1112);
  v12 = *(_QWORD *)(a1 + 1120);
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 136);
    if (*(_BYTE *)(v11 + 272) || (*(_BYTE *)(v13 + 4) & 6) != 0)
      sub_20F599C88((_QWORD *)(a1 + 2416), v13);
    v11 += 280;
  }
  v14 = *(_QWORD *)(a1 + 1136);
  v15 = *(_QWORD *)(a1 + 1144);
  while (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 136);
    if (*(_BYTE *)(v14 + 272) || (*(_BYTE *)(v16 + 4) & 6) != 0)
      sub_20F59A480((_QWORD *)(a1 + 2416), v16);
    v14 += 280;
  }
  v17 = *(_QWORD *)(a1 + 1160);
  v18 = *(_QWORD *)(a1 + 1168);
  while (v17 != v18)
  {
    v19 = *(_QWORD *)(v17 + 64);
    if (*(_BYTE *)(v17 + 152) || (*(_BYTE *)(v19 + 4) & 6) != 0)
      sub_20F59A2E8((_QWORD *)(a1 + 2416), v19);
    v17 += 160;
  }
  sub_20FA5640C(*(_QWORD *)(a1 + 1184), *(_QWORD *)(a1 + 1192), (_QWORD *)(a1 + 2416));
  sub_20F5B85BC(*(_QWORD *)(a1 + 1208), *(_QWORD *)(a1 + 1216), (_QWORD *)(a1 + 2416));
  v20 = *(_QWORD *)(a1 + 1232);
  v21 = *(_QWORD *)(a1 + 1240);
  while (v20 != v21)
  {
    v22 = *(_QWORD *)(v20 + 48);
    if (*(_BYTE *)(v20 + 136) || (*(_BYTE *)(v22 + 4) & 6) != 0)
      sub_20F3D35E0((_QWORD *)(a1 + 2416), v22);
    v20 += 144;
  }
  v23 = *(_QWORD *)(a1 + 1256);
  v24 = *(_QWORD *)(a1 + 1264);
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_BYTE *)(v23 + 144) || (*(_BYTE *)(v25 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v23 + 56) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 2416, v25);
      sub_20F394A20(a1 + 2416, *(_QWORD *)(v23 + 56));
    }
    v23 += 152;
  }
  sub_20FA56358(*(_QWORD *)(a1 + 1280), *(_QWORD *)(a1 + 1288), (_QWORD *)(a1 + 2416));
  sub_20F8DF65C(*(_QWORD *)(a1 + 1304), *(_QWORD *)(a1 + 1312), (_QWORD *)(a1 + 2416));
  v26 = *(_QWORD *)(a1 + 1328);
  v27 = *(_QWORD *)(a1 + 1336);
  while (v26 != v27)
  {
    v28 = *(_QWORD *)(v26 + 48);
    if (*(_BYTE *)(v26 + 104) || (*(_BYTE *)(v28 + 4) & 6) != 0)
      sub_20F59A150((_QWORD *)(a1 + 2416), v28);
    v26 += 112;
  }
  v29 = *(_QWORD *)(a1 + 1352);
  v30 = *(_QWORD *)(a1 + 1360);
  while (v29 != v30)
  {
    v31 = *(_QWORD *)(v29 + 96);
    if (*(_BYTE *)(v29 + 200) || (*(_BYTE *)(v31 + 4) & 6) != 0)
      sub_20F599E20((_QWORD *)(a1 + 2416), v31);
    v29 += 208;
  }
  v32 = *(_QWORD *)(a1 + 1376);
  v33 = *(_QWORD *)(a1 + 1384);
  while (v32 != v33)
  {
    v34 = *(_QWORD *)(v32 + 96);
    if (*(_BYTE *)(v32 + 200) || (*(_BYTE *)(v34 + 4) & 6) != 0)
      sub_20F8DAC28((_QWORD *)(a1 + 2416), v34);
    v32 += 208;
  }
  v35 = *(_QWORD *)(a1 + 1400);
  v36 = *(_QWORD *)(a1 + 1408);
  while (v35 != v36)
  {
    v37 = *(_QWORD *)(v35 + 80);
    if (*(_BYTE *)(v35 + 168) || (*(_BYTE *)(v37 + 4) & 6) != 0)
      sub_20F8DADC0((_QWORD *)(a1 + 2416), v37);
    v35 += 176;
  }
  v38 = *(_QWORD *)(a1 + 1424);
  v39 = *(_QWORD *)(a1 + 1432);
  while (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 80);
    if (*(_BYTE *)(v38 + 168) || (*(_BYTE *)(v40 + 4) & 6) != 0)
      sub_20F599FB8((_QWORD *)(a1 + 2416), v40);
    v38 += 176;
  }
  sub_20FA561E0(*(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 1456), (_QWORD *)(a1 + 2416));
  sub_20FA560F4(*(_QWORD *)(a1 + 1472), *(_QWORD *)(a1 + 1480), (_QWORD *)(a1 + 2416));
  sub_20FA55F7C(*(_QWORD *)(a1 + 1496), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 2416));
  sub_20FA55E74(*(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 1528), (_QWORD *)(a1 + 2416));
  v41 = (*(_QWORD *)(a1 + 2664) - *(_QWORD *)(a1 + 2656)) >> 2;
  if (DWORD2(v47[2]) > v41)
    LODWORD(v41) = DWORD2(v47[2]);
  v42 = v46 >= v41;
  v43 = v46 - v41;
  if (v42)
    v44 = v43;
  else
    v44 = 0;
  sub_20FA485B8((_QWORD *)a1);
  return v44;
}

void sub_20FA5A348(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A35C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A370(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A384(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A398(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A3AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A3C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A3D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A3E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A3FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A410(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A424(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

void sub_20FA5A438(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20FA485B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FA5A44C(_QWORD *a1, void **a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD v77[2];

  v77[0] = 0;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  sub_20FA51FC8(a1, (int *)v77 + 1, v77, &v72, &v67);
  v5 = v77[0];
  v4 = HIDWORD(v77[0]);
  *((_DWORD *)a2 + 4) = HIDWORD(v77[0]);
  *((_DWORD *)a2 + 5) = v5;
  v6 = v5 * (unint64_t)v4;
  if ((unint64_t)a2[1] < v6)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v7 = (8 * v6 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v7 >> 3);
    *a2 = operator new(v7, (std::align_val_t)0x20uLL);
    v4 = *((_DWORD *)a2 + 4);
    v5 = *((_DWORD *)a2 + 5);
  }
  v8 = v5 * v4;
  if (v8)
    bzero(*a2, 8 * v8);
  v9 = DWORD2(v76);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[162] + 64))(a1 + 162, a2, DWORD2(v76) | ((unint64_t)v67 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[342] + 64))(a1 + 342, a2, v9 | ((unint64_t)DWORD2(v67) << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[522] + 64))(a1 + 522, a2, v9 | ((unint64_t)v68 << 32));
  v63 = DWORD2(v68);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[702] + 64))(a1 + 702, a2, v9 | ((unint64_t)DWORD2(v68) << 32));
  v59 = v69;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[882] + 64))(a1 + 882, a2, v9 | ((unint64_t)v69 << 32));
  v55 = DWORD2(v69);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1062] + 64))(a1 + 1062, a2, v9 | ((unint64_t)DWORD2(v69) << 32));
  v10 = v70;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1242] + 64))(a1 + 1242, a2, v9 | ((unint64_t)v70 << 32));
  v11 = DWORD2(v70);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1422] + 64))(a1 + 1422, a2, v9 | ((unint64_t)DWORD2(v70) << 32));
  v12 = v71;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1602] + 64))(a1 + 1602, a2, v9 | ((unint64_t)v71 << 32));
  v13 = DWORD2(v71);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1782] + 64))(a1 + 1782, a2, v9 | ((unint64_t)DWORD2(v71) << 32));
  v14 = v76;
  v15 = v67;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[144] + 64))(a1 + 144, a2, v76 | ((unint64_t)v67 << 32));
  v16 = DWORD2(v67);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[324] + 64))(a1 + 324, a2, v14 | ((unint64_t)DWORD2(v67) << 32));
  v17 = v68;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[504] + 64))(a1 + 504, a2, v14 | ((unint64_t)v68 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[684] + 64))(a1 + 684, a2, v14 | ((unint64_t)v63 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[864] + 64))(a1 + 864, a2, v14 | ((unint64_t)v59 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1044] + 64))(a1 + 1044, a2, v14 | ((unint64_t)v55 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1224] + 64))(a1 + 1224, a2, v14 | ((unint64_t)v10 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1404] + 64))(a1 + 1404, a2, v14 | ((unint64_t)v11 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1584] + 64))(a1 + 1584, a2, v14 | ((unint64_t)v12 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1764] + 64))(a1 + 1764, a2, v14 | ((unint64_t)v13 << 32));
  v18 = DWORD2(v75);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[126] + 64))(a1 + 126, a2, DWORD2(v75) | ((unint64_t)v15 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[306] + 64))(a1 + 306, a2, v18 | ((unint64_t)v16 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[486] + 64))(a1 + 486, a2, v18 | ((unint64_t)v17 << 32));
  v64 = DWORD2(v68);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[666] + 64))(a1 + 666, a2, v18 | ((unint64_t)DWORD2(v68) << 32));
  v60 = v69;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[846] + 64))(a1 + 846, a2, v18 | ((unint64_t)v69 << 32));
  v56 = DWORD2(v69);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1026] + 64))(a1 + 1026, a2, v18 | ((unint64_t)DWORD2(v69) << 32));
  v19 = v70;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1206] + 64))(a1 + 1206, a2, v18 | ((unint64_t)v70 << 32));
  v20 = DWORD2(v70);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1386] + 64))(a1 + 1386, a2, v18 | ((unint64_t)DWORD2(v70) << 32));
  v21 = v71;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1566] + 64))(a1 + 1566, a2, v18 | ((unint64_t)v71 << 32));
  v22 = DWORD2(v71);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1746] + 64))(a1 + 1746, a2, v18 | ((unint64_t)DWORD2(v71) << 32));
  v23 = v75;
  v24 = v67;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[108] + 64))(a1 + 108, a2, v75 | ((unint64_t)v67 << 32));
  v25 = DWORD2(v67);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[288] + 64))(a1 + 288, a2, v23 | ((unint64_t)DWORD2(v67) << 32));
  v26 = v68;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[468] + 64))(a1 + 468, a2, v23 | ((unint64_t)v68 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[648] + 64))(a1 + 648, a2, v23 | ((unint64_t)v64 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[828] + 64))(a1 + 828, a2, v23 | ((unint64_t)v60 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1008] + 64))(a1 + 1008, a2, v23 | ((unint64_t)v56 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1188] + 64))(a1 + 1188, a2, v23 | ((unint64_t)v19 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1368] + 64))(a1 + 1368, a2, v23 | ((unint64_t)v20 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1548] + 64))(a1 + 1548, a2, v23 | ((unint64_t)v21 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1728] + 64))(a1 + 1728, a2, v23 | ((unint64_t)v22 << 32));
  v27 = DWORD2(v74);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[90] + 64))(a1 + 90, a2, DWORD2(v74) | ((unint64_t)v24 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[270] + 64))(a1 + 270, a2, v27 | ((unint64_t)v25 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[450] + 64))(a1 + 450, a2, v27 | ((unint64_t)v26 << 32));
  v65 = DWORD2(v68);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[630] + 64))(a1 + 630, a2, v27 | ((unint64_t)DWORD2(v68) << 32));
  v61 = v69;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[810] + 64))(a1 + 810, a2, v27 | ((unint64_t)v69 << 32));
  v57 = DWORD2(v69);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[990] + 64))(a1 + 990, a2, v27 | ((unint64_t)DWORD2(v69) << 32));
  v28 = v70;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1170] + 64))(a1 + 1170, a2, v27 | ((unint64_t)v70 << 32));
  v29 = DWORD2(v70);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1350] + 64))(a1 + 1350, a2, v27 | ((unint64_t)DWORD2(v70) << 32));
  v30 = v71;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1530] + 64))(a1 + 1530, a2, v27 | ((unint64_t)v71 << 32));
  v31 = DWORD2(v71);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1710] + 64))(a1 + 1710, a2, v27 | ((unint64_t)DWORD2(v71) << 32));
  v32 = v74;
  v33 = v67;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[72] + 64))(a1 + 72, a2, v74 | ((unint64_t)v67 << 32));
  v34 = DWORD2(v67);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[252] + 64))(a1 + 252, a2, v32 | ((unint64_t)DWORD2(v67) << 32));
  v35 = v68;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[432] + 64))(a1 + 432, a2, v32 | ((unint64_t)v68 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[612] + 64))(a1 + 612, a2, v32 | ((unint64_t)v65 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[792] + 64))(a1 + 792, a2, v32 | ((unint64_t)v61 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[972] + 64))(a1 + 972, a2, v32 | ((unint64_t)v57 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1152] + 64))(a1 + 1152, a2, v32 | ((unint64_t)v28 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1332] + 64))(a1 + 1332, a2, v32 | ((unint64_t)v29 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1512] + 64))(a1 + 1512, a2, v32 | ((unint64_t)v30 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1692] + 64))(a1 + 1692, a2, v32 | ((unint64_t)v31 << 32));
  v36 = DWORD2(v73);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[54] + 64))(a1 + 54, a2, DWORD2(v73) | ((unint64_t)v33 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[234] + 64))(a1 + 234, a2, v36 | ((unint64_t)v34 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[414] + 64))(a1 + 414, a2, v36 | ((unint64_t)v35 << 32));
  v66 = DWORD2(v68);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[594] + 64))(a1 + 594, a2, v36 | ((unint64_t)DWORD2(v68) << 32));
  v62 = v69;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[774] + 64))(a1 + 774, a2, v36 | ((unint64_t)v69 << 32));
  v58 = DWORD2(v69);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[954] + 64))(a1 + 954, a2, v36 | ((unint64_t)DWORD2(v69) << 32));
  v37 = v70;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1134] + 64))(a1 + 1134, a2, v36 | ((unint64_t)v70 << 32));
  v38 = DWORD2(v70);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1314] + 64))(a1 + 1314, a2, v36 | ((unint64_t)DWORD2(v70) << 32));
  v39 = v71;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1494] + 64))(a1 + 1494, a2, v36 | ((unint64_t)v71 << 32));
  v40 = DWORD2(v71);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1674] + 64))(a1 + 1674, a2, v36 | ((unint64_t)DWORD2(v71) << 32));
  v41 = v73;
  v42 = v67;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[36] + 64))(a1 + 36, a2, v73 | ((unint64_t)v67 << 32));
  v43 = DWORD2(v67);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[216] + 64))(a1 + 216, a2, v41 | ((unint64_t)DWORD2(v67) << 32));
  v44 = v68;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[396] + 64))(a1 + 396, a2, v41 | ((unint64_t)v68 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[576] + 64))(a1 + 576, a2, v41 | ((unint64_t)v66 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[756] + 64))(a1 + 756, a2, v41 | ((unint64_t)v62 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[936] + 64))(a1 + 936, a2, v41 | ((unint64_t)v58 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1116] + 64))(a1 + 1116, a2, v41 | ((unint64_t)v37 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1296] + 64))(a1 + 1296, a2, v41 | ((unint64_t)v38 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1476] + 64))(a1 + 1476, a2, v41 | ((unint64_t)v39 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1656] + 64))(a1 + 1656, a2, v41 | ((unint64_t)v40 << 32));
  v45 = DWORD2(v72);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[18] + 64))(a1 + 18, a2, DWORD2(v72) | ((unint64_t)v42 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[198] + 64))(a1 + 198, a2, v45 | ((unint64_t)v43 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[378] + 64))(a1 + 378, a2, v45 | ((unint64_t)v44 << 32));
  v46 = DWORD2(v68);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[558] + 64))(a1 + 558, a2, v45 | ((unint64_t)DWORD2(v68) << 32));
  v47 = v69;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[738] + 64))(a1 + 738, a2, v45 | ((unint64_t)v69 << 32));
  v48 = DWORD2(v69);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[918] + 64))(a1 + 918, a2, v45 | ((unint64_t)DWORD2(v69) << 32));
  v49 = v70;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1098] + 64))(a1 + 1098, a2, v45 | ((unint64_t)v70 << 32));
  v50 = DWORD2(v70);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1278] + 64))(a1 + 1278, a2, v45 | ((unint64_t)DWORD2(v70) << 32));
  v51 = v71;
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1458] + 64))(a1 + 1458, a2, v45 | ((unint64_t)v71 << 32));
  v52 = DWORD2(v71);
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1638] + 64))(a1 + 1638, a2, v45 | ((unint64_t)DWORD2(v71) << 32));
  v53 = v72;
  (*(void (**)(_QWORD *, void **, unint64_t))(*a1 + 64))(a1, a2, v72 | ((unint64_t)v67 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[180] + 64))(a1 + 180, a2, v53 | ((unint64_t)DWORD2(v67) << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[360] + 64))(a1 + 360, a2, v53 | ((unint64_t)v68 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[540] + 64))(a1 + 540, a2, v53 | ((unint64_t)v46 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[720] + 64))(a1 + 720, a2, v53 | ((unint64_t)v47 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[900] + 64))(a1 + 900, a2, v53 | ((unint64_t)v48 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1080] + 64))(a1 + 1080, a2, v53 | ((unint64_t)v49 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1260] + 64))(a1 + 1260, a2, v53 | ((unint64_t)v50 << 32));
  (*(void (**)(_QWORD *, void **, unint64_t))(a1[1440] + 64))(a1 + 1440, a2, v53 | ((unint64_t)v51 << 32));
  return (*(uint64_t (**)(_QWORD *, void **, unint64_t))(a1[1620] + 64))(a1 + 1620, a2, v53 | ((unint64_t)v52 << 32));
}

void sub_20FA5B1C0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t a5, double a6, double a7, __n128 a8)
{
  float64x2_t v8;
  _QWORD *v9;
  unint64_t v13;
  unsigned int v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  double cosval;
  __double2 v24;
  double v26;
  double v27;
  double v28;
  double v29;
  float64x2_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float64x2_t v41;
  double v42;
  double v44;
  double v46;
  float64x2_t v48;
  double v54;
  float64x2_t v55;
  float64x2_t v57;
  int64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  int v63;
  double *v64;
  uint64_t v65;
  double v66;
  double v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  int v73;
  float64x2_t *v74;
  uint64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  double v83;
  double v84;
  __double2 v85;
  double v87;
  double v88;
  double v89;
  double v90;
  float64x2_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float64x2_t v102;
  double v103;
  double v105;
  double v107;
  float64x2_t v109;
  double v111;
  float64x2_t v112;
  float64x2_t v114;
  int64x2_t v115;
  float64x2_t *v116;
  float64x2_t v117;
  float64x2_t v118;
  uint64_t v119;
  int v120;
  double *v121;
  uint64_t v122;
  double v123;
  double v126;
  _DWORD *v127;
  _DWORD *v128;
  uint64_t v129;
  double v130;
  double v131;
  __double2 v132;
  double v134;
  double v135;
  double v136;
  double v137;
  float64x2_t v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  float64x2_t v149;
  double v150;
  double v152;
  double v154;
  float64x2_t v156;
  double v158;
  float64x2_t v159;
  float64x2_t v161;
  int64x2_t v162;
  float64x2_t *v163;
  float64x2_t v164;
  float64x2_t v165;
  uint64_t v166;
  int v167;
  double *v168;
  uint64_t v169;
  double v170;
  double v173;
  _DWORD *v174;
  _DWORD *v175;
  uint64_t v176;
  int v177;
  float64x2_t *v178;
  uint64_t v179;
  float64x2_t v180;
  float64x2_t *v181;
  _DWORD *v182;
  _DWORD *v183;
  uint64_t v184;
  int v185;
  _DWORD *v186;
  _DWORD *v187;
  uint64_t v188;
  unsigned int v189;
  int v190;
  float64x2_t *v191;
  uint64_t v192;
  float64x2_t v193;
  float64x2_t *v194;
  _DWORD *v195;
  _DWORD *v196;
  uint64_t v197;
  int v198;
  float64x2_t *v199;
  uint64_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t *v203;
  _DWORD *v204;
  _DWORD *v205;
  uint64_t v206;
  unsigned int v207;
  int v208;
  float64x2_t *v209;
  uint64_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t *v213;
  char *v214;
  _DWORD *v215;
  _DWORD *v216;
  uint64_t v217;
  double v218;
  double v219;
  double v220;
  __double2 v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  float64x2_t v244;
  double v245;
  float64x2_t v246;
  double v247;
  float64x2_t v248;
  __int128 v249;
  uint64_t v250;
  int v251;
  __int128 *v252;
  uint64_t v253;
  double v257;
  _QWORD *v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  float64x2_t v264;
  double v265;
  float64x2_t v266;
  double v267;
  float64x2_t v268;
  double v269;

  v9 = (_QWORD *)a4;
  v13 = *(unsigned int *)(a4 + 16);
  v14 = v13;
  if ((_DWORD)v13 == *(_DWORD *)(a2 + 16))
  {
    v15 = *(void **)a2;
  }
  else
  {
    *(_DWORD *)(a2 + 16) = v13;
    v15 = *(void **)a2;
    if (*(_QWORD *)(a2 + 8) < v13)
    {
      if (v15)
      {
        MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
        v14 = *(_DWORD *)(a2 + 16);
      }
      v16 = (8 * v13 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v16 >> 3;
      v15 = operator new(v16, (std::align_val_t)0x20uLL);
      *(_QWORD *)a2 = v15;
    }
  }
  if (v14)
    bzero(v15, 8 * v14);
  v17 = *v9;
  v18 = *(_DWORD **)a3;
  v19 = *(_DWORD **)(a3 + 8);
  v258 = v9;
  v20 = 0;
  if (*(_DWORD **)a3 != v19)
  {
    v21 = a1[1];
    do
    {
      v21 -= 16;
      do
      {
        v63 = *(_DWORD *)(v21 + 16);
        v21 += 16;
      }
      while (*v18 != v63);
      v64 = (double *)(v17 + 8 * v20);
      v65 = *(_QWORD *)(v21 + 8);
      v66 = v64[2];
      _Q7 = *(_OWORD *)v64;
      _D13 = v64[1];
      __asm { FMLA            D0, D13, V7.D[1] }
      v69 = _D0 + v66 * v66;
      if (v69 >= 0.0000002635)
      {
        v22 = sqrt(v69);
        v259 = *(_OWORD *)v64;
        v24 = __sincos_stret(v22);
        cosval = v24.__cosval;
        *(_QWORD *)&_Q7 = v259;
        v26 = v24.__sinval / v22;
        v27 = 1.0 / v69 * (1.0 - v24.__cosval);
      }
      else
      {
        v27 = 0.5 - v69 * (v69 / -720.0 + 0.0416666667);
        v26 = 1.0 - v69 * (0.166666667 - v69 * (v69 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v69 * v27;
      }
      v28 = *(double *)&_Q7 * v27;
      v29 = _D13 * v27;
      v30.f64[0] = cosval + *(double *)&_Q7 * (*(double *)&_Q7 * v27);
      v31 = cosval + _D13 * (_D13 * v27);
      v32 = cosval + v66 * (v66 * v27);
      v33 = _D13 * (*(double *)&_Q7 * v27);
      v34 = v66 * v29;
      v35 = *(double *)&_Q7 * v26;
      v36 = _D13 * v26;
      v37 = v66 * v26;
      v38 = v33 - v37;
      _Q0.f64[0] = v33 + v37;
      _D2 = v34 - v35;
      v41.f64[0] = v66 * v28 - v36;
      v30.f64[1] = v38;
      _Q0.f64[1] = v31;
      v41.f64[1] = v35 + v34;
      v42 = *(double *)(v65 + 48);
      _Q6 = *(float64x2_t *)(v65 + 32);
      v44 = *(double *)(v65 + 72);
      _Q16 = *(float64x2_t *)(v65 + 56);
      v46 = *(double *)(v65 + 96);
      _Q19 = *(float64x2_t *)(v65 + 80);
      v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, _Q6.f64[0]), _Q0, _Q6, 1), v41, v42);
      __asm { FMLA            D21, D2, V6.D[1] }
      v54 = _D21 + v32 * v42;
      v55 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, _Q16.f64[0]), _Q0, _Q16, 1), v41, v44);
      __asm { FMLA            D21, D2, V16.D[1] }
      v57 = vmlaq_laneq_f64(vmulq_n_f64(v30, _Q19.f64[0]), _Q0, _Q19, 1);
      __asm { FMLA            D0, D2, V19.D[1] }
      v265 = v54;
      v264 = v48;
      v267 = _D21 + v32 * v44;
      v266 = v55;
      v269 = _Q0.f64[0] + v32 * v46;
      v268 = vmlaq_n_f64(v57, v41, v46);
      v263 = 0;
      v262 = 0uLL;
      sub_20E9733B8(&v264, (double *)&v262);
      v58.i64[0] = v263;
      v59 = (float64x2_t *)(v17 + 8 * (v20 + 3));
      v60.f64[0] = *(float64_t *)(v65 + 120);
      v61.f64[0] = v59[1].f64[0];
      a8 = (__n128)vsubq_f64(*(float64x2_t *)(v65 + 104), *v59);
      a5 = (float64x2_t)vzip1q_s64(v58, (int64x2_t)a8);
      v62 = *(_QWORD *)a2 + 8 * v20;
      *(_OWORD *)v62 = v262;
      *(float64x2_t *)(v62 + 16) = a5;
      *(int8x16_t *)(v62 + 32) = vextq_s8((int8x16_t)a8, (int8x16_t)vsubq_f64(v60, v61), 8uLL);
      v20 += 6;
      ++v18;
    }
    while (v18 != v19);
    v9 = v258;
    v17 = *v258;
  }
  v70 = *(_DWORD **)(a3 + 24);
  v71 = *(_DWORD **)(a3 + 32);
  if (v70 != v71)
  {
    v72 = a1[13];
    do
    {
      v72 -= 16;
      do
      {
        v73 = *(_DWORD *)(v72 + 16);
        v72 += 16;
      }
      while (*v70 != v73);
      v74 = *(float64x2_t **)(v72 + 8);
      v75 = 8 * v20;
      a5.f64[0] = v74[6].f64[0];
      v8.f64[0] = *(float64_t *)(v17 + v75 + 64);
      a5 = vsubq_f64(a5, v8);
      v76 = vsubq_f64(v74[2], *(float64x2_t *)(v17 + v75));
      v77 = vsubq_f64(v74[5], *(float64x2_t *)(v17 + v75 + 48));
      v78 = vsubq_f64(v74[4], *(float64x2_t *)(v17 + v75 + 32));
      a8 = (__n128)vsubq_f64(v74[3], *(float64x2_t *)(v17 + v75 + 16));
      v79 = *(_QWORD *)a2 + v75;
      *(float64x2_t *)(v79 + 32) = v78;
      *(float64x2_t *)(v79 + 48) = v77;
      *(float64x2_t *)v79 = v76;
      *(__n128 *)(v79 + 16) = a8;
      *(float64_t *)(v79 + 64) = a5.f64[0];
      v20 += 9;
      ++v70;
    }
    while (v70 != v71);
    v17 = *v9;
  }
  v80 = *(_DWORD **)(a3 + 48);
  v81 = *(_DWORD **)(a3 + 56);
  if (v80 != v81)
  {
    v82 = a1[25];
    do
    {
      v82 -= 16;
      do
      {
        v120 = *(_DWORD *)(v82 + 16);
        v82 += 16;
      }
      while (*v80 != v120);
      v121 = (double *)(v17 + 8 * v20);
      v122 = *(_QWORD *)(v82 + 8);
      v123 = v121[2];
      _Q7 = *(_OWORD *)v121;
      _D13 = v121[1];
      __asm { FMLA            D0, D13, V7.D[1] }
      v126 = _D0 + v123 * v123;
      if (v126 >= 0.0000002635)
      {
        v83 = sqrt(v126);
        v260 = *(_OWORD *)v121;
        v85 = __sincos_stret(v83);
        v84 = v85.__cosval;
        *(_QWORD *)&_Q7 = v260;
        v87 = v85.__sinval / v83;
        v88 = 1.0 / v126 * (1.0 - v85.__cosval);
      }
      else
      {
        v88 = 0.5 - v126 * (v126 / -720.0 + 0.0416666667);
        v87 = 1.0 - v126 * (0.166666667 - v126 * (v126 / -5040.0 + 0.00833333333));
        v84 = 1.0 - v126 * v88;
      }
      v89 = *(double *)&_Q7 * v88;
      v90 = _D13 * v88;
      v91.f64[0] = v84 + *(double *)&_Q7 * (*(double *)&_Q7 * v88);
      v92 = v84 + _D13 * (_D13 * v88);
      v93 = v84 + v123 * (v123 * v88);
      v94 = _D13 * (*(double *)&_Q7 * v88);
      v95 = v123 * v90;
      v96 = *(double *)&_Q7 * v87;
      v97 = _D13 * v87;
      v98 = v123 * v87;
      v99 = v94 - v98;
      _Q0.f64[0] = v94 + v98;
      _D2 = v95 - v96;
      v102.f64[0] = v123 * v89 - v97;
      v91.f64[1] = v99;
      _Q0.f64[1] = v92;
      v102.f64[1] = v96 + v95;
      v103 = *(double *)(v122 + 48);
      _Q6 = *(float64x2_t *)(v122 + 32);
      v105 = *(double *)(v122 + 72);
      _Q16 = *(float64x2_t *)(v122 + 56);
      v107 = *(double *)(v122 + 96);
      _Q19 = *(float64x2_t *)(v122 + 80);
      v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q6.f64[0]), _Q0, _Q6, 1), v102, v103);
      __asm { FMLA            D21, D2, V6.D[1] }
      v111 = _D21 + v93 * v103;
      v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q16.f64[0]), _Q0, _Q16, 1), v102, v105);
      __asm { FMLA            D21, D2, V16.D[1] }
      v114 = vmlaq_laneq_f64(vmulq_n_f64(v91, _Q19.f64[0]), _Q0, _Q19, 1);
      __asm { FMLA            D0, D2, V19.D[1] }
      v265 = v111;
      v264 = v109;
      v267 = _D21 + v93 * v105;
      v266 = v112;
      v269 = _Q0.f64[0] + v93 * v107;
      v268 = vmlaq_n_f64(v114, v102, v107);
      v263 = 0;
      v262 = 0uLL;
      sub_20E9733B8(&v264, (double *)&v262);
      v115.i64[0] = v263;
      v116 = (float64x2_t *)(v17 + 8 * (v20 + 3));
      v117.f64[0] = *(float64_t *)(v122 + 120);
      v118.f64[0] = v116[1].f64[0];
      a8 = (__n128)vsubq_f64(*(float64x2_t *)(v122 + 104), *v116);
      a5 = (float64x2_t)vzip1q_s64(v115, (int64x2_t)a8);
      v119 = *(_QWORD *)a2 + 8 * v20;
      *(_OWORD *)v119 = v262;
      *(float64x2_t *)(v119 + 16) = a5;
      *(int8x16_t *)(v119 + 32) = vextq_s8((int8x16_t)a8, (int8x16_t)vsubq_f64(v117, v118), 8uLL);
      v20 += 6;
      ++v80;
    }
    while (v80 != v81);
    v9 = v258;
    v17 = *v258;
  }
  v127 = *(_DWORD **)(a3 + 72);
  v128 = *(_DWORD **)(a3 + 80);
  if (v127 != v128)
  {
    v129 = a1[37];
    do
    {
      v129 -= 16;
      do
      {
        v167 = *(_DWORD *)(v129 + 16);
        v129 += 16;
      }
      while (*v127 != v167);
      v168 = (double *)(v17 + 8 * v20);
      v169 = *(_QWORD *)(v129 + 8);
      v170 = v168[2];
      _Q7 = *(_OWORD *)v168;
      _D13 = v168[1];
      __asm { FMLA            D0, D13, V7.D[1] }
      v173 = _D0 + v170 * v170;
      if (v173 >= 0.0000002635)
      {
        v130 = sqrt(v173);
        v261 = *(_OWORD *)v168;
        v132 = __sincos_stret(v130);
        v131 = v132.__cosval;
        *(_QWORD *)&_Q7 = v261;
        v134 = v132.__sinval / v130;
        v135 = 1.0 / v173 * (1.0 - v132.__cosval);
      }
      else
      {
        v135 = 0.5 - v173 * (v173 / -720.0 + 0.0416666667);
        v134 = 1.0 - v173 * (0.166666667 - v173 * (v173 / -5040.0 + 0.00833333333));
        v131 = 1.0 - v173 * v135;
      }
      v136 = *(double *)&_Q7 * v135;
      v137 = _D13 * v135;
      v138.f64[0] = v131 + *(double *)&_Q7 * (*(double *)&_Q7 * v135);
      v139 = v131 + _D13 * (_D13 * v135);
      v140 = v131 + v170 * (v170 * v135);
      v141 = _D13 * (*(double *)&_Q7 * v135);
      v142 = v170 * v137;
      v143 = *(double *)&_Q7 * v134;
      v144 = _D13 * v134;
      v145 = v170 * v134;
      v146 = v141 - v145;
      _Q0.f64[0] = v141 + v145;
      _D2 = v142 - v143;
      v149.f64[0] = v170 * v136 - v144;
      v138.f64[1] = v146;
      _Q0.f64[1] = v139;
      v149.f64[1] = v143 + v142;
      v150 = *(double *)(v169 + 48);
      _Q6 = *(float64x2_t *)(v169 + 32);
      v152 = *(double *)(v169 + 72);
      _Q16 = *(float64x2_t *)(v169 + 56);
      v154 = *(double *)(v169 + 96);
      _Q19 = *(float64x2_t *)(v169 + 80);
      v156 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, _Q6.f64[0]), _Q0, _Q6, 1), v149, v150);
      __asm { FMLA            D21, D2, V6.D[1] }
      v158 = _D21 + v140 * v150;
      v159 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, _Q16.f64[0]), _Q0, _Q16, 1), v149, v152);
      __asm { FMLA            D21, D2, V16.D[1] }
      v161 = vmlaq_laneq_f64(vmulq_n_f64(v138, _Q19.f64[0]), _Q0, _Q19, 1);
      __asm { FMLA            D0, D2, V19.D[1] }
      v265 = v158;
      v264 = v156;
      v267 = _D21 + v140 * v152;
      v266 = v159;
      v269 = _Q0.f64[0] + v140 * v154;
      v268 = vmlaq_n_f64(v161, v149, v154);
      v263 = 0;
      v262 = 0uLL;
      sub_20E9733B8(&v264, (double *)&v262);
      v162.i64[0] = v263;
      v163 = (float64x2_t *)(v17 + 8 * (v20 + 3));
      v164.f64[0] = *(float64_t *)(v169 + 120);
      v165.f64[0] = v163[1].f64[0];
      a8 = (__n128)vsubq_f64(*(float64x2_t *)(v169 + 104), *v163);
      a5 = (float64x2_t)vzip1q_s64(v162, (int64x2_t)a8);
      v166 = *(_QWORD *)a2 + 8 * v20;
      *(_OWORD *)v166 = v262;
      *(float64x2_t *)(v166 + 16) = a5;
      *(int8x16_t *)(v166 + 32) = vextq_s8((int8x16_t)a8, (int8x16_t)vsubq_f64(v164, v165), 8uLL);
      v20 += 6;
      ++v127;
    }
    while (v127 != v128);
    v9 = v258;
    v17 = *v258;
  }
  v174 = *(_DWORD **)(a3 + 96);
  v175 = *(_DWORD **)(a3 + 104);
  if (v174 == v175)
  {
    v182 = *(_DWORD **)(a3 + 120);
    v183 = *(_DWORD **)(a3 + 128);
    if (v182 != v183)
      goto LABEL_48;
LABEL_70:
    v186 = *(_DWORD **)(a3 + 144);
    v187 = *(_DWORD **)(a3 + 152);
    if (v186 != v187)
      goto LABEL_53;
LABEL_71:
    v189 = v20;
    v195 = *(_DWORD **)(a3 + 168);
    v196 = *(_DWORD **)(a3 + 176);
    if (v195 != v196)
      goto LABEL_58;
LABEL_72:
    v204 = *(_DWORD **)(a3 + 192);
    v205 = *(_DWORD **)(a3 + 200);
    if (v204 != v205)
      goto LABEL_63;
LABEL_73:
    v207 = v189;
    v214 = "eNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mapping_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_";
    v215 = *(_DWORD **)(a3 + 216);
    v216 = *(_DWORD **)(a3 + 224);
    if (v215 == v216)
      return;
    goto LABEL_74;
  }
  v176 = a1[49];
  do
  {
    v176 -= 16;
    do
    {
      v177 = *(_DWORD *)(v176 + 16);
      v176 += 16;
    }
    while (*v174 != v177);
    v178 = *(float64x2_t **)(v176 + 8);
    v179 = 8 * v20;
    a5.f64[0] = v178[3].f64[0];
    a8.n128_u64[0] = *(_QWORD *)(v17 + v179 + 16);
    a5 = vsubq_f64(a5, (float64x2_t)a8);
    v180 = vsubq_f64(v178[2], *(float64x2_t *)(v17 + v179));
    v181 = (float64x2_t *)(*(_QWORD *)a2 + v179);
    *v181 = v180;
    v181[1].f64[0] = a5.f64[0];
    v20 += 3;
    ++v174;
  }
  while (v174 != v175);
  v17 = *v9;
  v182 = *(_DWORD **)(a3 + 120);
  v183 = *(_DWORD **)(a3 + 128);
  if (v182 == v183)
    goto LABEL_70;
LABEL_48:
  v184 = a1[61];
  do
  {
    v184 -= 16;
    do
    {
      v185 = *(_DWORD *)(v184 + 16);
      v184 += 16;
    }
    while (*v182 != v185);
    *(double *)(*(_QWORD *)a2 + 8 * v20) = *(double *)(*(_QWORD *)(v184 + 8) + 32) - *(double *)(v17 + 8 * v20);
    ++v20;
    ++v182;
  }
  while (v182 != v183);
  v17 = *v9;
  v186 = *(_DWORD **)(a3 + 144);
  v187 = *(_DWORD **)(a3 + 152);
  if (v186 == v187)
    goto LABEL_71;
LABEL_53:
  v188 = a1[73];
  v189 = v20;
  do
  {
    v188 -= 16;
    do
    {
      v190 = *(_DWORD *)(v188 + 16);
      v188 += 16;
    }
    while (*v186 != v190);
    v191 = *(float64x2_t **)(v188 + 8);
    v192 = 8 * v189;
    a5.f64[0] = v191[3].f64[0];
    a8.n128_u64[0] = *(_QWORD *)(v17 + v192 + 16);
    a5 = vsubq_f64(a5, (float64x2_t)a8);
    v193 = vsubq_f64(v191[2], *(float64x2_t *)(v17 + v192));
    v194 = (float64x2_t *)(*(_QWORD *)a2 + v192);
    *v194 = v193;
    v194[1].f64[0] = a5.f64[0];
    v189 += 3;
    ++v186;
  }
  while (v186 != v187);
  v17 = *v9;
  v195 = *(_DWORD **)(a3 + 168);
  v196 = *(_DWORD **)(a3 + 176);
  if (v195 == v196)
    goto LABEL_72;
LABEL_58:
  v197 = a1[85];
  do
  {
    v197 -= 16;
    do
    {
      v198 = *(_DWORD *)(v197 + 16);
      v197 += 16;
    }
    while (*v195 != v198);
    v199 = *(float64x2_t **)(v197 + 8);
    v200 = 8 * v189;
    v201 = vsubq_f64(v199[2], *(float64x2_t *)(v17 + v200));
    v202 = vsubq_f64(v199[3], *(float64x2_t *)(v17 + v200 + 16));
    v203 = (float64x2_t *)(*(_QWORD *)a2 + v200);
    *v203 = v201;
    v203[1] = v202;
    v189 += 4;
    ++v195;
  }
  while (v195 != v196);
  v17 = *v9;
  v204 = *(_DWORD **)(a3 + 192);
  v205 = *(_DWORD **)(a3 + 200);
  if (v204 == v205)
    goto LABEL_73;
LABEL_63:
  v206 = a1[97];
  v207 = v189;
  do
  {
    v206 -= 16;
    do
    {
      v208 = *(_DWORD *)(v206 + 16);
      v206 += 16;
    }
    while (*v204 != v208);
    v209 = *(float64x2_t **)(v206 + 8);
    v210 = 8 * v207;
    v211 = vsubq_f64(v209[2], *(float64x2_t *)(v17 + v210));
    v212 = vsubq_f64(v209[3], *(float64x2_t *)(v17 + v210 + 16));
    v213 = (float64x2_t *)(*(_QWORD *)a2 + v210);
    *v213 = v211;
    v213[1] = v212;
    v207 += 4;
    ++v204;
  }
  while (v204 != v205);
  v17 = *v9;
  v214 = "ZN4cv3d3vio15odometry_engine13VIOEngineNodeINS0_11slam_engine15LocalSlamEngineEE17ReceiveCMDataImplINS0_13mappi"
         "ng_types2v225ObjectAnchorRemovalSampleILj2EEENSt3__19enable_ifILb1EvEEEEvPKhjNS5_5DummyIT_EEEUlvE_"
       + 38;
  v215 = *(_DWORD **)(a3 + 216);
  v216 = *(_DWORD **)(a3 + 224);
  if (v215 != v216)
  {
LABEL_74:
    v217 = a1[109];
    v218 = *((double *)v214 + 300);
    do
    {
      v217 -= 16;
      do
      {
        v251 = *(_DWORD *)(v217 + 16);
        v217 += 16;
      }
      while (*v215 != v251);
      v252 = (__int128 *)(v17 + 8 * v207);
      v253 = *(_QWORD *)(v217 + 8);
      _Q1 = *v252;
      _D3 = *((_QWORD *)v252 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      v257 = _D2 + *((double *)v252 + 2) * *((double *)v252 + 2);
      if (v257 >= v218)
      {
        v219 = sqrt(v257);
        v221 = __sincos_stret(v219);
        v220 = v221.__cosval;
        v222 = v221.__sinval / v219;
        v223 = 1.0 / v257 * (1.0 - v221.__cosval);
      }
      else
      {
        v223 = 0.5 - v257 * (v257 / -720.0 + 0.0416666667);
        v222 = 1.0 - v257 * (0.166666667 - v257 * (v257 / -5040.0 + 0.00833333333));
        v220 = 1.0 - v257 * v223;
      }
      v224 = *((double *)v252 + 1);
      v225 = v223 * *(double *)v252;
      v226 = v223 * v224;
      v227 = *((double *)v252 + 2);
      v228 = v220 + *(double *)v252 * v225;
      v229 = v220 + v224 * (v223 * v224);
      v230 = v220 + v227 * (v223 * v227);
      v231 = v225 * v224;
      v232 = v225 * v227;
      v233 = v226 * v227;
      v234 = v222 * *(double *)v252;
      v235 = v222 * v224;
      v236 = v222 * v227;
      v237 = v231 - v236;
      v238 = v235 + v232;
      v239 = v231 + v236;
      v240 = v233 - v234;
      v241 = v232 - v235;
      v242 = v234 + v233;
      v243 = *(double *)(v253 + 48);
      v244 = *(float64x2_t *)(v253 + 32);
      v245 = *(double *)(v253 + 72);
      v246 = *(float64x2_t *)(v253 + 56);
      v247 = *(double *)(v253 + 96);
      v248 = *(float64x2_t *)(v253 + 80);
      v265 = v243 * v228 + v245 * v237 + v247 * v238;
      v264 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v244, v228), v246, v237), v248, v238);
      v267 = v243 * v239 + v245 * v229 + v247 * v240;
      v266 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v244, v239), v246, v229), v248, v240);
      v269 = v243 * v241 + v245 * v242 + v247 * v230;
      v268 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v244, v241), v246, v242), v248, v230);
      v262 = 0uLL;
      v263 = 0;
      sub_20E9733B8(&v264, (double *)&v262);
      v249 = v262;
      v250 = *(_QWORD *)a2 + 8 * v207;
      *(_QWORD *)(v250 + 16) = v263;
      *(_OWORD *)v250 = v249;
      v207 += 3;
      ++v215;
    }
    while (v215 != v216);
  }
}

#error "20FA5BE38: too big function (funcsize=0)"

void sub_20FAF43F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF4408(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF441C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF4430(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF4444(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF4458(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF446C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF4480(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF4494(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF44A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF44BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF44D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF44E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF44F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF450C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF4520(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF4534(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF4548(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF455C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF4570(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF4584(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF4598(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF45AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF45C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF45D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF45E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF45FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF4610(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF4624(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF4638(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF464C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF4660(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

void sub_20FAF4674(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 424));
  _Unwind_Resume(a1);
}

void sub_20FAF4688(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::mutex::~mutex(*(std::mutex **)(v1 + 416));
  _Unwind_Resume(a1);
}

_QWORD *sub_20FAF46A0(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  unsigned int *v3;
  int v4;
  unsigned int *v5;
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  int v14;
  unsigned int *v15;
  int v16;
  unsigned int *v17;
  int v18;
  unsigned int *v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v3 = (unsigned int *)*result;
  v4 = *(unsigned __int8 *)(*result + 20);
  *(_BYTE *)a3 = v4;
  if (v4)
  {
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2[6] + 4 * *v3);
    v5 = (unsigned int *)result[1];
    v6 = *((unsigned __int8 *)v5 + 20);
    *(_BYTE *)(a3 + 8) = v6;
    if (v6)
      goto LABEL_3;
  }
  else
  {
    *(_DWORD *)(a3 + 4) = -1;
    v5 = (unsigned int *)result[1];
    v23 = *((unsigned __int8 *)v5 + 20);
    *(_BYTE *)(a3 + 8) = v23;
    if (v23)
    {
LABEL_3:
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2[6] + 4 * *v5);
      v7 = (unsigned int *)result[2];
      v8 = *((unsigned __int8 *)v7 + 20);
      *(_BYTE *)(a3 + 16) = v8;
      if (v8)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  *(_DWORD *)(a3 + 12) = -1;
  v7 = (unsigned int *)result[2];
  v24 = *((unsigned __int8 *)v7 + 20);
  *(_BYTE *)(a3 + 16) = v24;
  if (v24)
  {
LABEL_4:
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(*a2 + 4 * *v7);
    v9 = (unsigned int *)result[3];
    v10 = *((unsigned __int8 *)v9 + 20);
    *(_BYTE *)(a3 + 24) = v10;
    if (v10)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  *(_DWORD *)(a3 + 20) = -1;
  v9 = (unsigned int *)result[3];
  v25 = *((unsigned __int8 *)v9 + 20);
  *(_BYTE *)(a3 + 24) = v25;
  if (v25)
  {
LABEL_5:
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(*a2 + 4 * *v9);
    v11 = (unsigned int *)result[4];
    v12 = *((unsigned __int8 *)v11 + 20);
    *(_BYTE *)(a3 + 32) = v12;
    if (v12)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  *(_DWORD *)(a3 + 28) = -1;
  v11 = (unsigned int *)result[4];
  v26 = *((unsigned __int8 *)v11 + 20);
  *(_BYTE *)(a3 + 32) = v26;
  if (v26)
  {
LABEL_6:
    *(_DWORD *)(a3 + 36) = *(_DWORD *)(a2[21] + 4 * *v11);
    v13 = (unsigned int *)result[5];
    v14 = *((unsigned __int8 *)v13 + 20);
    *(_BYTE *)(a3 + 40) = v14;
    if (v14)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  *(_DWORD *)(a3 + 36) = -1;
  v13 = (unsigned int *)result[5];
  v27 = *((unsigned __int8 *)v13 + 20);
  *(_BYTE *)(a3 + 40) = v27;
  if (v27)
  {
LABEL_7:
    *(_DWORD *)(a3 + 44) = *(_DWORD *)(a2[21] + 4 * *v13);
    v15 = (unsigned int *)result[6];
    v16 = *((unsigned __int8 *)v15 + 20);
    *(_BYTE *)(a3 + 48) = v16;
    if (v16)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  *(_DWORD *)(a3 + 44) = -1;
  v15 = (unsigned int *)result[6];
  v28 = *((unsigned __int8 *)v15 + 20);
  *(_BYTE *)(a3 + 48) = v28;
  if (v28)
  {
LABEL_8:
    *(_DWORD *)(a3 + 52) = *(_DWORD *)(a2[24] + 4 * *v15);
    v17 = (unsigned int *)result[7];
    v18 = *((unsigned __int8 *)v17 + 20);
    *(_BYTE *)(a3 + 56) = v18;
    if (v18)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  *(_DWORD *)(a3 + 52) = -1;
  v17 = (unsigned int *)result[7];
  v29 = *((unsigned __int8 *)v17 + 20);
  *(_BYTE *)(a3 + 56) = v29;
  if (v29)
  {
LABEL_9:
    *(_DWORD *)(a3 + 60) = *(_DWORD *)(a2[24] + 4 * *v17);
    v19 = (unsigned int *)result[8];
    v20 = *((unsigned __int8 *)v19 + 20);
    *(_BYTE *)(a3 + 64) = v20;
    if (v20)
      goto LABEL_10;
LABEL_20:
    *(_DWORD *)(a3 + 68) = -1;
    v21 = (unsigned int *)result[9];
    v31 = *((unsigned __int8 *)v21 + 20);
    *(_BYTE *)(a3 + 72) = v31;
    if (v31)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_19:
  *(_DWORD *)(a3 + 60) = -1;
  v19 = (unsigned int *)result[8];
  v30 = *((unsigned __int8 *)v19 + 20);
  *(_BYTE *)(a3 + 64) = v30;
  if (!v30)
    goto LABEL_20;
LABEL_10:
  *(_DWORD *)(a3 + 68) = *(_DWORD *)(a2[27] + 4 * *v19);
  v21 = (unsigned int *)result[9];
  v22 = *((unsigned __int8 *)v21 + 20);
  *(_BYTE *)(a3 + 72) = v22;
  if (v22)
  {
LABEL_11:
    *(_DWORD *)(a3 + 76) = *(_DWORD *)(a2[27] + 4 * *v21);
    *(_BYTE *)(a3 + 80) = *(_BYTE *)(result[10] + 20);
    *(_DWORD *)(a3 + 84) = -1;
    return result;
  }
LABEL_21:
  *(_DWORD *)(a3 + 76) = -1;
  *(_BYTE *)(a3 + 80) = *(_BYTE *)(result[10] + 20);
  *(_DWORD *)(a3 + 84) = -1;
  return result;
}

BOOL sub_20FAF48F0(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  _OWORD *v6;
  _BOOL8 v7;
  double v8;
  uint64_t v9;
  float64x2_t *v10;
  int v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  double v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  double v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t *v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t *v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  double v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v216;
  float64x2_t v217;

  v6 = (_OWORD *)(a1 + 152);
  v7 = sub_20FC7238C(a1, (_QWORD *)(a1 + 48), a1 + 152, (uint64_t)a3);
  *(_BYTE *)(a1 + 176) = v7;
  v8 = 0.0;
  if (v7)
  {
    v9 = *(_QWORD *)(a1 + 184);
    if (v9)
    {
      (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)v9 + 24))(v9, v6, 0.0);
      v10 = *(float64x2_t **)(a1 + 184);
      v11 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v10->f64[0] + 16))(v10);
      switch(v11)
      {
        case 0:
          v12 = v10[1];
          v13 = v10[2];
          goto LABEL_8;
        case 1:
          v14 = a3[1];
          v15 = vmulq_f64(*a3, v10[1]);
          v17 = a3[4];
          v16 = a3[5];
          v19 = a3[2];
          v18 = a3[3];
          *a3 = v15;
          v20 = vmulq_f64(v14, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          v21 = vmulq_f64(v19, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          v22 = vmulq_f64(v18, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          a3[3] = v22;
          v23 = vmulq_f64(v17, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          a3[3] = v22;
          a3[4] = v23;
          v24 = vmulq_f64(v16, v10[1]);
          a3[2] = v21;
          a3[3] = v22;
          *a3 = v15;
          a3[1] = v20;
          a3[4] = v23;
          a3[5] = v24;
          break;
        case 2:
          v25 = v10[1].f64[0];
          v26 = vmulq_n_f64(a3[5], v25);
          v27 = vmulq_n_f64(a3[4], v25);
          v28 = vmulq_n_f64(a3[3], v25);
          v29 = vmulq_n_f64(a3[2], v25);
          v30 = vmulq_n_f64(a3[1], v25);
          *a3 = vmulq_n_f64(*a3, v25);
          a3[1] = v30;
          a3[2] = v29;
          a3[3] = v28;
          a3[4] = v27;
          a3[5] = v26;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v12 = v216;
          v13 = v217;
LABEL_8:
          v31 = a3[5];
          v32 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[1].f64[0]), v13, a3[1], 1);
          v33 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[2].f64[0]), v13, a3[2], 1);
          v34 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[3].f64[0]), v13, a3[3], 1);
          v35 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[4].f64[0]), v13, a3[4], 1);
          *a3 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3->f64[0]), v13, *a3, 1);
          a3[1] = v32;
          a3[2] = v33;
          a3[3] = v34;
          a3[4] = v35;
          a3[5] = vmlaq_laneq_f64(vmulq_n_f64(v12, v31.f64[0]), v13, v31, 1);
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
          v36 = v10[1];
          v37 = v10[2];
          goto LABEL_14;
        case 1:
          v38 = a3[7];
          v39 = vmulq_f64(a3[6], v10[1]);
          v41 = a3[10];
          v40 = a3[11];
          v43 = a3[8];
          v42 = a3[9];
          a3[6] = v39;
          v44 = vmulq_f64(v38, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          v45 = vmulq_f64(v43, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          v46 = vmulq_f64(v42, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          a3[9] = v46;
          v47 = vmulq_f64(v41, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          a3[9] = v46;
          a3[10] = v47;
          v48 = vmulq_f64(v40, v10[1]);
          a3[8] = v45;
          a3[9] = v46;
          a3[6] = v39;
          a3[7] = v44;
          a3[10] = v47;
          a3[11] = v48;
          break;
        case 2:
          v49 = v10[1].f64[0];
          v50 = vmulq_n_f64(a3[11], v49);
          v51 = vmulq_n_f64(a3[10], v49);
          v52 = vmulq_n_f64(a3[9], v49);
          v53 = vmulq_n_f64(a3[8], v49);
          v54 = vmulq_n_f64(a3[7], v49);
          a3[6] = vmulq_n_f64(a3[6], v49);
          a3[7] = v54;
          a3[8] = v53;
          a3[9] = v52;
          a3[10] = v51;
          a3[11] = v50;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v36 = v216;
          v37 = v217;
LABEL_14:
          v55 = a3[11];
          v56 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[7].f64[0]), v37, a3[7], 1);
          v57 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[8].f64[0]), v37, a3[8], 1);
          v58 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[9].f64[0]), v37, a3[9], 1);
          v59 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[10].f64[0]), v37, a3[10], 1);
          a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[6].f64[0]), v37, a3[6], 1);
          a3[7] = v56;
          a3[8] = v57;
          a3[9] = v58;
          a3[10] = v59;
          a3[11] = vmlaq_laneq_f64(vmulq_n_f64(v36, v55.f64[0]), v37, v55, 1);
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
          v60 = v10[1];
          v61 = v10[2];
          goto LABEL_20;
        case 1:
          v62 = a3[13];
          v63 = vmulq_f64(a3[12], v10[1]);
          v65 = a3[16];
          v64 = a3[17];
          v67 = a3[14];
          v66 = a3[15];
          a3[12] = v63;
          v68 = vmulq_f64(v62, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          v69 = vmulq_f64(v67, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          v70 = vmulq_f64(v66, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          a3[15] = v70;
          v71 = vmulq_f64(v65, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          a3[15] = v70;
          a3[16] = v71;
          v72 = vmulq_f64(v64, v10[1]);
          a3[14] = v69;
          a3[15] = v70;
          a3[12] = v63;
          a3[13] = v68;
          a3[16] = v71;
          a3[17] = v72;
          break;
        case 2:
          v73 = v10[1].f64[0];
          v74 = vmulq_n_f64(a3[17], v73);
          v75 = vmulq_n_f64(a3[16], v73);
          v76 = vmulq_n_f64(a3[15], v73);
          v77 = vmulq_n_f64(a3[14], v73);
          v78 = vmulq_n_f64(a3[13], v73);
          a3[12] = vmulq_n_f64(a3[12], v73);
          a3[13] = v78;
          a3[14] = v77;
          a3[15] = v76;
          a3[16] = v75;
          a3[17] = v74;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
          v60 = v216;
          v61 = v217;
LABEL_20:
          v79 = a3[17];
          v80 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[13].f64[0]), v61, a3[13], 1);
          v81 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[14].f64[0]), v61, a3[14], 1);
          v82 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[15].f64[0]), v61, a3[15], 1);
          v83 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[16].f64[0]), v61, a3[16], 1);
          a3[12] = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[12].f64[0]), v61, a3[12], 1);
          a3[13] = v80;
          a3[14] = v81;
          a3[15] = v82;
          a3[16] = v83;
          a3[17] = vmlaq_laneq_f64(vmulq_n_f64(v60, v79.f64[0]), v61, v79, 1);
          break;
        default:
          break;
      }
      v84 = a3 + 18;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 20))
      {
        switch(v11)
        {
          case 0:
            v85 = v10[1];
            v86 = v10[2];
            goto LABEL_27;
          case 1:
            v87 = a3[19];
            v88 = vmulq_f64(*v84, v10[1]);
            v90 = a3[22];
            v89 = a3[23];
            v92 = a3[20];
            v91 = a3[21];
            *v84 = v88;
            v93 = vmulq_f64(v87, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            v94 = vmulq_f64(v92, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            v95 = vmulq_f64(v91, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            a3[21] = v95;
            v96 = vmulq_f64(v90, v10[1]);
            *v84 = v88;
            a3[19] = v93;
            a3[20] = v94;
            a3[21] = v95;
            a3[22] = v96;
            v97 = vmulq_f64(v89, v10[1]);
            a3[20] = v94;
            a3[21] = v95;
            *v84 = v88;
            a3[19] = v93;
            a3[22] = v96;
            a3[23] = v97;
            break;
          case 2:
            v98 = v10[1].f64[0];
            v99 = vmulq_n_f64(a3[23], v98);
            v100 = vmulq_n_f64(a3[22], v98);
            v101 = vmulq_n_f64(a3[21], v98);
            v102 = vmulq_n_f64(a3[20], v98);
            v103 = vmulq_n_f64(a3[19], v98);
            *v84 = vmulq_n_f64(*v84, v98);
            a3[19] = v103;
            a3[20] = v102;
            a3[21] = v101;
            a3[22] = v100;
            a3[23] = v99;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v85 = v216;
            v86 = v217;
LABEL_27:
            v104 = a3[23];
            v105 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[19].f64[0]), v86, a3[19], 1);
            v106 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[20].f64[0]), v86, a3[20], 1);
            v107 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[21].f64[0]), v86, a3[21], 1);
            v108 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[22].f64[0]), v86, a3[22], 1);
            a3[18] = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[18].f64[0]), v86, a3[18], 1);
            a3[19] = v105;
            a3[20] = v106;
            a3[21] = v107;
            a3[22] = v108;
            a3[23] = vmlaq_laneq_f64(vmulq_n_f64(v85, v104.f64[0]), v86, v104, 1);
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        switch(v11)
        {
          case 0:
            v109 = v10[1];
            v110 = v10[2];
            goto LABEL_34;
          case 1:
            v111 = a3[25];
            v112 = vmulq_f64(a3[24], v10[1]);
            v114 = a3[26];
            v113 = a3[27];
            a3[24] = v112;
            v115 = vmulq_f64(v111, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            v116 = vmulq_f64(v114, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            a3[26] = v116;
            v117 = vmulq_f64(v113, v10[1]);
            a3[24] = v112;
            a3[25] = v115;
            a3[26] = v116;
            a3[27] = v117;
            break;
          case 2:
            v118 = v10[1].f64[0];
            v119 = vmulq_n_f64(a3[25], v118);
            v120 = vmulq_n_f64(a3[24], v118);
            v121 = vmulq_n_f64(a3[27], v118);
            a3[26] = vmulq_n_f64(a3[26], v118);
            a3[27] = v121;
            a3[24] = v120;
            a3[25] = v119;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v109 = v216;
            v110 = v217;
LABEL_34:
            v122 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[24].f64[0]), v110, a3[24], 1);
            v123 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[25].f64[0]), v110, a3[25], 1);
            v124 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[26].f64[0]), v110, a3[26], 1);
            v125 = vmlaq_laneq_f64(vmulq_n_f64(v109, a3[27].f64[0]), v110, a3[27], 1);
            a3[24] = v122;
            a3[25] = v123;
            a3[26] = v124;
            a3[27] = v125;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        switch(v11)
        {
          case 0:
            v126 = v10[1];
            v127 = v10[2];
            goto LABEL_41;
          case 1:
            v128 = a3[29];
            v129 = vmulq_f64(a3[28], v10[1]);
            v131 = a3[30];
            v130 = a3[31];
            a3[28] = v129;
            v132 = vmulq_f64(v128, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            v133 = vmulq_f64(v131, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            a3[30] = v133;
            v134 = vmulq_f64(v130, v10[1]);
            a3[28] = v129;
            a3[29] = v132;
            a3[30] = v133;
            a3[31] = v134;
            break;
          case 2:
            v135 = v10[1].f64[0];
            v136 = vmulq_n_f64(a3[29], v135);
            v137 = vmulq_n_f64(a3[28], v135);
            v138 = vmulq_n_f64(a3[31], v135);
            a3[30] = vmulq_n_f64(a3[30], v135);
            a3[31] = v138;
            a3[28] = v137;
            a3[29] = v136;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v126 = v216;
            v127 = v217;
LABEL_41:
            v139 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[28].f64[0]), v127, a3[28], 1);
            v140 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[29].f64[0]), v127, a3[29], 1);
            v141 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[30].f64[0]), v127, a3[30], 1);
            v142 = vmlaq_laneq_f64(vmulq_n_f64(v126, a3[31].f64[0]), v127, a3[31], 1);
            a3[28] = v139;
            a3[29] = v140;
            a3[30] = v141;
            a3[31] = v142;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        switch(v11)
        {
          case 0:
            v143 = v10[1];
            v144 = v10[2];
            goto LABEL_48;
          case 1:
            v145 = a3[33];
            v146 = vmulq_f64(a3[32], v10[1]);
            v148 = a3[34];
            v147 = a3[35];
            a3[32] = v146;
            v149 = vmulq_f64(v145, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            v150 = vmulq_f64(v148, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            a3[34] = v150;
            v151 = vmulq_f64(v147, v10[1]);
            a3[32] = v146;
            a3[33] = v149;
            a3[34] = v150;
            a3[35] = v151;
            break;
          case 2:
            v152 = v10[1].f64[0];
            v153 = vmulq_n_f64(a3[33], v152);
            v154 = vmulq_n_f64(a3[32], v152);
            v155 = vmulq_n_f64(a3[35], v152);
            a3[34] = vmulq_n_f64(a3[34], v152);
            a3[35] = v155;
            a3[32] = v154;
            a3[33] = v153;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v143 = v216;
            v144 = v217;
LABEL_48:
            v156 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[32].f64[0]), v144, a3[32], 1);
            v157 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[33].f64[0]), v144, a3[33], 1);
            v158 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[34].f64[0]), v144, a3[34], 1);
            v159 = vmlaq_laneq_f64(vmulq_n_f64(v143, a3[35].f64[0]), v144, a3[35], 1);
            a3[32] = v156;
            a3[33] = v157;
            a3[34] = v158;
            a3[35] = v159;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 20))
      {
        switch(v11)
        {
          case 0:
            v160 = v10[1];
            v161 = v10[2];
            goto LABEL_55;
          case 1:
            v162 = a3[37];
            v163 = vmulq_f64(a3[36], v10[1]);
            v165 = a3[38];
            v164 = a3[39];
            a3[36] = v163;
            v166 = vmulq_f64(v162, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            v167 = vmulq_f64(v165, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            a3[38] = v167;
            v168 = vmulq_f64(v164, v10[1]);
            a3[36] = v163;
            a3[37] = v166;
            a3[38] = v167;
            a3[39] = v168;
            break;
          case 2:
            v169 = v10[1].f64[0];
            v170 = vmulq_n_f64(a3[37], v169);
            v171 = vmulq_n_f64(a3[36], v169);
            v172 = vmulq_n_f64(a3[39], v169);
            a3[38] = vmulq_n_f64(a3[38], v169);
            a3[39] = v172;
            a3[36] = v171;
            a3[37] = v170;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v160 = v216;
            v161 = v217;
LABEL_55:
            v173 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[36].f64[0]), v161, a3[36], 1);
            v174 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[37].f64[0]), v161, a3[37], 1);
            v175 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[38].f64[0]), v161, a3[38], 1);
            v176 = vmlaq_laneq_f64(vmulq_n_f64(v160, a3[39].f64[0]), v161, a3[39], 1);
            a3[36] = v173;
            a3[37] = v174;
            a3[38] = v175;
            a3[39] = v176;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 112) + 20))
      {
        v177 = a3 + 40;
        switch(v11)
        {
          case 0:
            v178 = v10[1];
            v179 = v10[2];
            goto LABEL_62;
          case 1:
            v180 = a3[41];
            v181 = vmulq_f64(*v177, v10[1]);
            v182 = a3[42];
            *v177 = v181;
            v183 = vmulq_f64(v180, v10[1]);
            *v177 = v181;
            a3[41] = v183;
            v184 = vmulq_f64(v182, v10[1]);
            *v177 = v181;
            a3[41] = v183;
            a3[42] = v184;
            break;
          case 2:
            v185 = v10[1].f64[0];
            v186 = vmulq_n_f64(a3[42], v185);
            v187 = vmulq_n_f64(a3[41], v185);
            *v177 = vmulq_n_f64(*v177, v185);
            a3[41] = v187;
            a3[42] = v186;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v178 = v216;
            v179 = v217;
LABEL_62:
            v188 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[40].f64[0]), v179, a3[40], 1);
            v189 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[41].f64[0]), v179, a3[41], 1);
            v190 = vmlaq_laneq_f64(vmulq_n_f64(v178, a3[42].f64[0]), v179, a3[42], 1);
            a3[40] = v188;
            a3[41] = v189;
            a3[42] = v190;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 120) + 20))
      {
        v191 = a3 + 43;
        switch(v11)
        {
          case 0:
            v192 = v10[1];
            v193 = v10[2];
            goto LABEL_69;
          case 1:
            v194 = a3[44];
            v195 = vmulq_f64(*v191, v10[1]);
            v196 = a3[45];
            *v191 = v195;
            v197 = vmulq_f64(v194, v10[1]);
            *v191 = v195;
            a3[44] = v197;
            v198 = vmulq_f64(v196, v10[1]);
            *v191 = v195;
            a3[44] = v197;
            a3[45] = v198;
            break;
          case 2:
            v199 = v10[1].f64[0];
            v200 = vmulq_n_f64(a3[45], v199);
            v201 = vmulq_n_f64(a3[44], v199);
            *v191 = vmulq_n_f64(*v191, v199);
            a3[44] = v201;
            a3[45] = v200;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v192 = v216;
            v193 = v217;
LABEL_69:
            v202 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[43].f64[0]), v193, a3[43], 1);
            v203 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[44].f64[0]), v193, a3[44], 1);
            v204 = vmlaq_laneq_f64(vmulq_n_f64(v192, a3[45].f64[0]), v193, a3[45], 1);
            a3[43] = v202;
            a3[44] = v203;
            a3[45] = v204;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
      {
        switch(v11)
        {
          case 0:
            v205 = v10[1];
            v206 = v10[2];
            goto LABEL_76;
          case 1:
            v207 = vmulq_f64(a3[46], v10[1]);
            goto LABEL_77;
          case 2:
            v207 = vmulq_n_f64(a3[46], v10[1].f64[0]);
            goto LABEL_77;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v216, v10);
            v205 = v216;
            v206 = v217;
LABEL_76:
            v207 = vmlaq_laneq_f64(vmulq_n_f64(v205, a3[46].f64[0]), v206, a3[46], 1);
LABEL_77:
            a3[46] = v207;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 136) = *v6;
    _Q0 = *(_OWORD *)(a1 + 152);
    _D2 = *(_QWORD *)(a1 + 160);
    __asm { FMLA            D1, D2, V0.D[1] }
    v8 = *(double *)(a2 + 8) * _D1;
  }
  *(double *)(a1 + 168) = v8;
  return v7;
}

uint64_t sub_20FAF546C(uint64_t result, unsigned __int8 *a2, float64x2_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v9;
  unsigned int v10;
  const double *f64;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v24;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v55;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v60;
  unsigned int v61;
  unsigned int v62;
  const double *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v73;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  const double *v81;
  const double *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  const double *v94;
  float64x2_t v95;
  float64x2_t v96;
  const double *v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  int v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  const double *v134;
  float64x2_t v135;
  float64x2_t v136;
  const double *v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  const double *v179;
  const double *v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  const double *v192;
  float64x2_t v193;
  float64x2_t v194;
  const double *v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  int v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  const double *v254;
  float64x2_t v255;
  float64x2_t v256;
  const double *v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  int v271;
  unsigned int v272;
  unsigned int v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  int v318;
  const double *v319;
  const double *v320;
  const double *v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  const double *v357;
  const double *v358;
  const double *v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  unsigned int v396;
  unsigned int v397;
  const double *v398;
  const double *v399;
  const double *v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  const double *v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  const double *v486;
  const double *v487;
  int v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  int v610;
  const double *v611;
  const double *v612;
  const double *v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  const double *v649;
  const double *v650;
  const double *v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  const double *v688;
  float64x2_t v689;
  float64x2_t v690;
  const double *v691;
  float64x2_t v692;
  float64x2_t v693;
  const double *v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  int v739;
  unsigned int v740;
  unsigned int v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  int v863;
  unsigned int v864;
  unsigned int v865;
  const double *v866;
  const double *v867;
  const double *v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  const double *v904;
  float64x2_t v905;
  float64x2_t v906;
  const double *v907;
  float64x2_t v908;
  float64x2_t v909;
  const double *v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  int v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  const double *v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  const double *v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  int v1124;
  unsigned int v1125;
  unsigned int v1126;
  float64x2_t v1127;
  int64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  int64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  int64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64x2_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  int64x2_t v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  float64x2_t v1186;
  float64x2_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  int64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  int64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  float64x2_t v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1231;
  float64x2_t v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  float64x2_t v1245;
  float64x2_t v1246;
  float64x2_t v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  float64x2_t v1261;
  float64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1275;
  float64x2_t v1276;
  float64x2_t v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t v1285;
  float64x2_t v1286;
  float64x2_t v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  float64x2_t v1320;
  float64x2_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  float64x2_t v1324;
  float64x2_t v1325;
  float64x2x2_t v1326;
  float64x2x2_t v1327;
  float64x2x2_t v1328;
  float64x2x2_t v1329;
  float64x2x2_t v1330;
  float64x2x2_t v1331;
  float64x2x2_t v1332;
  float64x2x2_t v1333;
  float64x2x2_t v1334;
  float64x2x2_t v1335;
  float64x2x2_t v1336;
  float64x2x2_t v1337;
  float64x2x2_t v1338;
  float64x2x2_t v1339;
  float64x2x2_t v1340;
  float64x2x2_t v1341;
  float64x2x2_t v1342;
  float64x2x2_t v1343;
  float64x2x2_t v1344;
  float64x2x2_t v1345;
  float64x2x2_t v1346;
  float64x2x2_t v1347;
  float64x2x2_t v1348;
  float64x2x2_t v1349;
  float64x2x2_t v1350;
  float64x2x2_t v1351;
  float64x2x2_t v1352;
  float64x2x2_t v1353;
  float64x2x2_t v1354;
  float64x2x2_t v1355;
  float64x2x2_t v1356;
  float64x2x2_t v1357;
  float64x2x2_t v1358;
  float64x2x2_t v1359;
  float64x2x2_t v1360;
  float64x2x2_t v1361;
  float64x2x2_t v1362;
  float64x2x2_t v1363;
  float64x2x2_t v1364;
  float64x2x2_t v1365;
  float64x2x2_t v1366;
  float64x2x2_t v1367;
  float64x2x2_t v1368;
  float64x2x2_t v1369;
  float64x2x2_t v1370;
  float64x2x2_t v1371;
  float64x2x2_t v1372;
  float64x2x2_t v1373;
  float64x2x2_t v1374;
  float64x2x2_t v1375;
  float64x2x2_t v1376;
  float64x2x2_t v1377;
  float64x2x2_t v1378;
  float64x2x2_t v1379;
  float64x2x2_t v1380;
  float64x2x2_t v1381;
  float64x2x2_t v1382;
  float64x2x2_t v1383;
  float64x2x2_t v1384;
  float64x2x2_t v1385;
  float64x2x2_t v1386;
  float64x2x2_t v1387;
  float64x2x2_t v1388;
  float64x2x2_t v1389;
  float64x2x2_t v1390;
  float64x2x2_t v1391;
  float64x2x2_t v1392;
  float64x2x2_t v1393;
  float64x2x2_t v1394;
  float64x2x2_t v1395;
  float64x2x2_t v1396;
  float64x2x2_t v1397;
  float64x2x2_t v1398;
  float64x2x2_t v1399;
  float64x2x2_t v1400;
  float64x2x2_t v1401;
  float64x2x2_t v1402;
  float64x2x2_t v1403;
  float64x2x2_t v1404;
  float64x2x2_t v1405;
  float64x2x2_t v1406;
  float64x2x2_t v1407;
  float64x2x2_t v1408;
  float64x2x2_t v1409;
  float64x2x2_t v1410;
  float64x2x2_t v1411;
  float64x2x2_t v1412;
  float64x2x2_t v1413;
  float64x2x2_t v1414;
  float64x2x2_t v1415;
  float64x2x2_t v1416;
  float64x2x2_t v1417;
  float64x2x2_t v1418;
  float64x2x2_t v1419;
  float64x2x2_t v1420;
  float64x2x2_t v1421;
  float64x2x2_t v1422;
  float64x2x2_t v1423;
  float64x2x2_t v1424;
  float64x2x2_t v1425;
  float64x2x2_t v1426;
  float64x2x2_t v1427;
  float64x2x2_t v1428;
  float64x2x2_t v1429;
  float64x2x2_t v1430;
  float64x2x2_t v1431;
  float64x2x2_t v1432;
  float64x2x2_t v1433;
  float64x2x2_t v1434;
  float64x2x2_t v1435;
  float64x2x2_t v1436;
  float64x2x2_t v1437;
  float64x2x2_t v1438;
  float64x2x2_t v1439;
  float64x2x2_t v1440;
  float64x2x2_t v1441;

  v5 = (uint64_t *)result;
  v6 = *(_QWORD *)result;
  v7 = a2[72];
  if (a2[72])
    _ZF = a2[64] == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v9 = *((_DWORD *)a2 + 19);
    v10 = *((_DWORD *)a2 + 17);
    if (v10 < v9)
    {
LABEL_9:
      result = sub_20F9ABFD0(v6 + 14360, v9, v9);
      v29.f64[0] = *(float64_t *)(result + 16);
      v30.f64[0] = *(float64_t *)(result + 40);
      v31.f64[0] = *(float64_t *)(result + 64);
      _Q6 = a3[43];
      _Q7 = a3[44];
      _Q16 = a3[45];
      v35 = (float64x2_t)vzip1q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
      v36 = (float64x2_t)vzip2q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
      v37 = vmlaq_laneq_f64(vmulq_n_f64(v35, _Q6.f64[0]), v36, _Q6, 1);
      _Q20 = vmulq_f64(_Q16, _Q6);
      _Q6.f64[0] = a3[43].f64[1];
      __asm { FMLA            D20, D6, V16.D[1] }
      _Q6.f64[0] = a3[45].f64[1];
      v39 = vmlaq_laneq_f64(vmulq_n_f64(v35, _Q7.f64[0]), v36, _Q7, 1);
      _Q22 = vmulq_f64(_Q16, _Q7);
      _Q7.f64[0] = a3[44].f64[1];
      __asm { FMLA            D22, D7, V16.D[1] }
      v41 = vmlaq_laneq_f64(vmulq_n_f64(v35, _Q16.f64[0]), v36, _Q16, 1);
      _Q17 = vmulq_f64(_Q16, _Q16);
      __asm { FMLA            D17, D6, V16.D[1] }
      v43 = vaddq_f64(*(float64x2_t *)(result + 24), v39);
      v44 = vaddq_f64(*(float64x2_t *)(result + 48), v41);
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v37);
      *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v29, _Q20);
      *(float64x2_t *)(result + 24) = v43;
      *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v30, _Q22);
      *(float64x2_t *)(result + 48) = v44;
      *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v31, _Q17);
      v6 = *v5;
      goto LABEL_10;
    }
    result = sub_20F9ABFD0(v6 + 14360, v9, v10);
    v12.f64[0] = *(float64_t *)(result + 16);
    f64 = a3[43].f64;
    v1353 = vld2q_f64(f64);
    v13.f64[0] = *(float64_t *)(result + 40);
    v14.f64[0] = *(float64_t *)(result + 64);
    _Q16 = a3[45];
    _Q17 = a3[40];
    _Q18 = a3[41];
    v18 = a3[42];
    v19 = vmlaq_laneq_f64(vmulq_n_f64(v1353.val[0], _Q17.f64[0]), v1353.val[1], _Q17, 1);
    _Q21 = vmulq_f64(_Q16, _Q17);
    _Q17.f64[0] = a3[40].f64[1];
    __asm { FMLA            D21, D17, V16.D[1] }
    v24 = vmlaq_laneq_f64(vmulq_n_f64(v1353.val[0], _Q18.f64[0]), v1353.val[1], _Q18, 1);
    _Q22 = vmulq_f64(_Q16, _Q18);
    _Q18.f64[0] = a3[41].f64[1];
    __asm { FMLA            D22, D18, V16.D[1] }
    v26 = vmlaq_laneq_f64(vmulq_n_f64(v1353.val[0], v18.f64[0]), v1353.val[1], v18, 1);
    v1353.val[0] = vmulq_f64(_Q16, v18);
    v1353.val[1].f64[0] = a3[42].f64[1];
    __asm { FMLA            D3, D4, V16.D[1] }
    *(_QWORD *)&v1353.val[1].f64[0] = *(_OWORD *)&vaddq_f64(v13, _Q22);
    v27 = vaddq_f64(*(float64x2_t *)(result + 24), v24);
    v28 = vaddq_f64(*(float64x2_t *)(result + 48), v26);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v19);
    *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v12, _Q21);
    *(float64x2_t *)(result + 24) = v27;
    *(float64_t *)(result + 40) = v1353.val[1].f64[0];
    *(float64x2_t *)(result + 48) = v28;
    *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v14, v1353.val[0]);
    v7 = a2[72];
    v6 = *v5;
  }
  if (v7)
  {
    v9 = *((_DWORD *)a2 + 19);
    goto LABEL_9;
  }
LABEL_10:
  if (a2[64])
  {
    result = sub_20F9ABFD0(v6 + 14360, *((_DWORD *)a2 + 17), *((_DWORD *)a2 + 17));
    v45.f64[0] = *(float64_t *)(result + 16);
    v46.f64[0] = *(float64_t *)(result + 40);
    v47.f64[0] = *(float64_t *)(result + 64);
    _Q6 = a3[40];
    _Q7 = a3[41];
    _Q16 = a3[42];
    v51 = (float64x2_t)vzip1q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
    v52 = (float64x2_t)vzip2q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
    v53 = vmlaq_laneq_f64(vmulq_n_f64(v51, _Q6.f64[0]), v52, _Q6, 1);
    _Q20 = vmulq_f64(_Q16, _Q6);
    _Q6.f64[0] = a3[40].f64[1];
    __asm { FMLA            D20, D6, V16.D[1] }
    _Q6.f64[0] = a3[42].f64[1];
    v55 = vmlaq_laneq_f64(vmulq_n_f64(v51, _Q7.f64[0]), v52, _Q7, 1);
    _Q22 = vmulq_f64(_Q16, _Q7);
    _Q7.f64[0] = a3[41].f64[1];
    __asm { FMLA            D22, D7, V16.D[1] }
    v57 = vmlaq_laneq_f64(vmulq_n_f64(v51, _Q16.f64[0]), v52, _Q16, 1);
    _Q17 = vmulq_f64(_Q16, _Q16);
    __asm { FMLA            D17, D6, V16.D[1] }
    v59 = vaddq_f64(*(float64x2_t *)(result + 24), v55);
    v60 = vaddq_f64(*(float64x2_t *)(result + 48), v57);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v53);
    *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v45, _Q20);
    *(float64x2_t *)(result + 24) = v59;
    *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v46, _Q22);
    *(float64x2_t *)(result + 48) = v60;
    *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v47, _Q17);
    v6 = *v5;
    if (a2[64])
    {
      if (a2[72])
      {
        v61 = *((_DWORD *)a2 + 17);
        v62 = *((_DWORD *)a2 + 19);
        if (v62 >= v61)
        {
          result = sub_20F9ABFD0(v6 + 14360, v61, v62);
          v64.f64[0] = *(float64_t *)(result + 16);
          v65.f64[0] = *(float64_t *)(result + 40);
          v66.f64[0] = *(float64_t *)(result + 64);
          v63 = a3[40].f64;
          v1357 = vld2q_f64(v63);
          _Q16 = a3[42];
          _Q17 = a3[43];
          _Q18 = a3[44];
          v70 = a3[45];
          v71 = vmlaq_laneq_f64(vmulq_n_f64(v1357.val[0], _Q17.f64[0]), v1357.val[1], _Q17, 1);
          _Q21 = vmulq_f64(_Q16, _Q17);
          _Q17.f64[0] = a3[43].f64[1];
          __asm { FMLA            D21, D17, V16.D[1] }
          v73 = vmlaq_laneq_f64(vmulq_n_f64(v1357.val[0], _Q18.f64[0]), v1357.val[1], _Q18, 1);
          _Q22 = vmulq_f64(_Q16, _Q18);
          _Q18.f64[0] = a3[44].f64[1];
          __asm { FMLA            D22, D18, V16.D[1] }
          v75 = vmlaq_laneq_f64(vmulq_n_f64(v1357.val[0], v70.f64[0]), v1357.val[1], v70, 1);
          v1357.val[0] = vmulq_f64(_Q16, v70);
          v1357.val[1].f64[0] = a3[45].f64[1];
          __asm { FMLA            D6, D7, V16.D[1] }
          v76 = vaddq_f64(*(float64x2_t *)(result + 24), v73);
          v77 = vaddq_f64(*(float64x2_t *)(result + 48), v75);
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v71);
          *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v64, _Q21);
          *(float64x2_t *)(result + 24) = v76;
          *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v65, _Q22);
          *(float64x2_t *)(result + 48) = v77;
          *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v66, v1357.val[0]);
          v6 = *v5;
        }
      }
    }
  }
  v78 = a2[56];
  if (a2[56] && a2[48])
  {
    v79 = *((_DWORD *)a2 + 15);
    v80 = *((_DWORD *)a2 + 13);
    if (v80 < v79)
      goto LABEL_21;
    result = sub_20F9AC0F4(v6 + 12776, v79, v80);
    v81 = a3[36].f64;
    v1369 = vld2q_f64(v81);
    v82 = a3[38].f64;
    v1394 = vld2q_f64(v82);
    v83 = a3[32];
    v84 = a3[33];
    v85 = a3[34];
    v86 = a3[35];
    v87 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1394.val[0], v83.f64[0]), v1394.val[1], v83, 1));
    v88 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1394.val[0], v84.f64[0]), v1394.val[1], v84, 1));
    v89 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1369.val[0], v84.f64[0]), v1369.val[1], v84, 1));
    v90 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1394.val[0], v85.f64[0]), v1394.val[1], v85, 1));
    v91 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1369.val[0], v85.f64[0]), v1369.val[1], v85, 1));
    v92 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1394.val[0], v86.f64[0]), v1394.val[1], v86, 1));
    v93 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1369.val[0], v86.f64[0]), v1369.val[1], v86, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1369.val[0], v83.f64[0]), v1369.val[1], v83, 1));
    *(float64x2_t *)(result + 16) = v87;
    *(float64x2_t *)(result + 32) = v89;
    *(float64x2_t *)(result + 48) = v88;
    *(float64x2_t *)(result + 64) = v91;
    *(float64x2_t *)(result + 80) = v90;
    *(float64x2_t *)(result + 96) = v93;
    *(float64x2_t *)(result + 112) = v92;
    v78 = a2[56];
    v6 = *v5;
  }
  if (!v78)
    goto LABEL_27;
  v79 = *((_DWORD *)a2 + 15);
LABEL_21:
  v94 = a3[36].f64;
  result = sub_20F9AC0F4(v6 + 12776, v79, v79);
  v95 = a3[36];
  v96 = a3[37];
  v97 = a3[38].f64;
  v98 = a3[38];
  v99 = a3[39];
  v100 = (float64x2_t)vzip1q_s64((int64x2_t)v98, (int64x2_t)v99);
  *(_QWORD *)&v101.f64[0] = vdupq_laneq_s64((int64x2_t)v98, 1).u64[0];
  v101.f64[1] = a3[39].f64[1];
  v102 = (float64x2_t)vzip1q_s64((int64x2_t)v95, (int64x2_t)v96);
  v103 = (float64x2_t)vzip2q_s64((int64x2_t)v95, (int64x2_t)v96);
  v104 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v100, v95.f64[0]), v101, v95, 1));
  v105 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v100, v96.f64[0]), v101, v96, 1));
  v106 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v102, v96.f64[0]), v103, v96, 1));
  v107 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v100, v98.f64[0]), v101, v98, 1));
  v108 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v102, v98.f64[0]), v103, v98, 1));
  v109 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v100, v99.f64[0]), v101, v99, 1));
  v110 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v102, v99.f64[0]), v103, v99, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v102, v95.f64[0]), v103, v95, 1));
  *(float64x2_t *)(result + 16) = v104;
  *(float64x2_t *)(result + 32) = v106;
  *(float64x2_t *)(result + 48) = v105;
  *(float64x2_t *)(result + 64) = v108;
  *(float64x2_t *)(result + 80) = v107;
  *(float64x2_t *)(result + 96) = v110;
  *(float64x2_t *)(result + 112) = v109;
  v111 = a2[56];
  v6 = *v5;
  if (a2[56] && a2[64])
  {
    result = sub_20F9AC218(v6 + 14216, *((_DWORD *)a2 + 15), *((_DWORD *)a2 + 17));
    v1334 = vld2q_f64(v94);
    v1358 = vld2q_f64(v97);
    v112 = a3[40];
    v113 = a3[41];
    v114 = a3[42];
    v115 = vmlaq_laneq_f64(vmulq_n_f64(v1334.val[0], v112.f64[0]), v1334.val[1], v112, 1);
    v116 = vmlaq_laneq_f64(vmulq_n_f64(v1358.val[0], v112.f64[0]), v1358.val[1], v112, 1);
    v117 = vmlaq_laneq_f64(vmulq_n_f64(v1334.val[0], v113.f64[0]), v1334.val[1], v113, 1);
    v118 = vmlaq_laneq_f64(vmulq_n_f64(v1358.val[0], v113.f64[0]), v1358.val[1], v113, 1);
    v119 = vmlaq_laneq_f64(vmulq_n_f64(v1334.val[0], v114.f64[0]), v1334.val[1], v114, 1);
    v120 = vaddq_f64(*(float64x2_t *)(result + 16), v116);
    v1334.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v118);
    v121 = vaddq_f64(*(float64x2_t *)(result + 32), v117);
    v1334.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1358.val[0], v114.f64[0]), v1358.val[1], v114, 1));
    v122 = vaddq_f64(*(float64x2_t *)(result + 64), v119);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v115);
    *(float64x2_t *)(result + 16) = v120;
    *(float64x2_t *)(result + 32) = v121;
    *(float64x2_t *)(result + 48) = v1334.val[1];
    *(float64x2_t *)(result + 64) = v122;
    *(float64x2_t *)(result + 80) = v1334.val[0];
    v111 = a2[56];
    v6 = *v5;
  }
  if (v111 && a2[72])
  {
    result = sub_20F9AC218(v6 + 14216, *((_DWORD *)a2 + 15), *((_DWORD *)a2 + 19));
    v1335 = vld2q_f64(v94);
    v1359 = vld2q_f64(v97);
    v123 = a3[43];
    v124 = a3[44];
    v125 = a3[45];
    v126 = vmlaq_laneq_f64(vmulq_n_f64(v1335.val[0], v123.f64[0]), v1335.val[1], v123, 1);
    v127 = vmlaq_laneq_f64(vmulq_n_f64(v1359.val[0], v123.f64[0]), v1359.val[1], v123, 1);
    v128 = vmlaq_laneq_f64(vmulq_n_f64(v1335.val[0], v124.f64[0]), v1335.val[1], v124, 1);
    v129 = vmlaq_laneq_f64(vmulq_n_f64(v1359.val[0], v124.f64[0]), v1359.val[1], v124, 1);
    v130 = vmlaq_laneq_f64(vmulq_n_f64(v1335.val[0], v125.f64[0]), v1335.val[1], v125, 1);
    v131 = vaddq_f64(*(float64x2_t *)(result + 16), v127);
    v1335.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v129);
    v132 = vaddq_f64(*(float64x2_t *)(result + 32), v128);
    v1335.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1359.val[0], v125.f64[0]), v1359.val[1], v125, 1));
    v133 = vaddq_f64(*(float64x2_t *)(result + 64), v130);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v126);
    *(float64x2_t *)(result + 16) = v131;
    *(float64x2_t *)(result + 32) = v132;
    *(float64x2_t *)(result + 48) = v1335.val[1];
    *(float64x2_t *)(result + 64) = v133;
    *(float64x2_t *)(result + 80) = v1335.val[0];
    v6 = *v5;
  }
LABEL_27:
  if (!a2[48])
    goto LABEL_38;
  v134 = a3[32].f64;
  result = sub_20F9AC0F4(v6 + 12776, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 13));
  v135 = a3[32];
  v136 = a3[33];
  v137 = a3[34].f64;
  v138 = a3[34];
  v139 = a3[35];
  v140 = (float64x2_t)vzip1q_s64((int64x2_t)v138, (int64x2_t)v139);
  *(_QWORD *)&v141.f64[0] = vdupq_laneq_s64((int64x2_t)v138, 1).u64[0];
  v141.f64[1] = a3[35].f64[1];
  v142 = (float64x2_t)vzip1q_s64((int64x2_t)v135, (int64x2_t)v136);
  v143 = (float64x2_t)vzip2q_s64((int64x2_t)v135, (int64x2_t)v136);
  v144 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v140, v135.f64[0]), v141, v135, 1));
  v145 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v140, v136.f64[0]), v141, v136, 1));
  v146 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v142, v136.f64[0]), v143, v136, 1));
  v147 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v140, v138.f64[0]), v141, v138, 1));
  v148 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v142, v138.f64[0]), v143, v138, 1));
  v149 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v140, v139.f64[0]), v141, v139, 1));
  v150 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v142, v139.f64[0]), v143, v139, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v142, v135.f64[0]), v143, v135, 1));
  *(float64x2_t *)(result + 16) = v144;
  *(float64x2_t *)(result + 32) = v146;
  *(float64x2_t *)(result + 48) = v145;
  *(float64x2_t *)(result + 64) = v148;
  *(float64x2_t *)(result + 80) = v147;
  *(float64x2_t *)(result + 96) = v150;
  *(float64x2_t *)(result + 112) = v149;
  v6 = *v5;
  v151 = a2[48];
  if (!a2[48] || !a2[56])
  {
LABEL_32:
    if (v151)
      goto LABEL_33;
    goto LABEL_35;
  }
  v152 = *((_DWORD *)a2 + 13);
  v153 = *((_DWORD *)a2 + 15);
  if (v153 < v152)
  {
    v151 = 1;
    goto LABEL_32;
  }
  result = sub_20F9AC0F4(v6 + 12776, v152, v153);
  v1391 = vld2q_f64(v134);
  v1403 = vld2q_f64(v137);
  v1234 = a3[36];
  v1235 = a3[37];
  v1236 = a3[38];
  v1237 = a3[39];
  v1238 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1403.val[0], v1234.f64[0]), v1403.val[1], v1234, 1));
  v1239 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1403.val[0], v1235.f64[0]), v1403.val[1], v1235, 1));
  v1240 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1391.val[0], v1235.f64[0]), v1391.val[1], v1235, 1));
  v1241 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1403.val[0], v1236.f64[0]), v1403.val[1], v1236, 1));
  v1242 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1391.val[0], v1236.f64[0]), v1391.val[1], v1236, 1));
  v1243 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1403.val[0], v1237.f64[0]), v1403.val[1], v1237, 1));
  v1244 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1391.val[0], v1237.f64[0]), v1391.val[1], v1237, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1391.val[0], v1234.f64[0]), v1391.val[1], v1234, 1));
  *(float64x2_t *)(result + 16) = v1238;
  *(float64x2_t *)(result + 32) = v1240;
  *(float64x2_t *)(result + 48) = v1239;
  *(float64x2_t *)(result + 64) = v1242;
  *(float64x2_t *)(result + 80) = v1241;
  *(float64x2_t *)(result + 96) = v1244;
  *(float64x2_t *)(result + 112) = v1243;
  v151 = a2[48];
  v6 = *v5;
  if (a2[48])
  {
LABEL_33:
    if (a2[64])
    {
      result = sub_20F9AC218(v6 + 14216, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 17));
      v1336 = vld2q_f64(v134);
      v1360 = vld2q_f64(v137);
      v154 = a3[40];
      v155 = a3[41];
      v156 = a3[42];
      v157 = vmlaq_laneq_f64(vmulq_n_f64(v1336.val[0], v154.f64[0]), v1336.val[1], v154, 1);
      v158 = vmlaq_laneq_f64(vmulq_n_f64(v1360.val[0], v154.f64[0]), v1360.val[1], v154, 1);
      v159 = vmlaq_laneq_f64(vmulq_n_f64(v1336.val[0], v155.f64[0]), v1336.val[1], v155, 1);
      v160 = vmlaq_laneq_f64(vmulq_n_f64(v1360.val[0], v155.f64[0]), v1360.val[1], v155, 1);
      v161 = vmlaq_laneq_f64(vmulq_n_f64(v1336.val[0], v156.f64[0]), v1336.val[1], v156, 1);
      v162 = vaddq_f64(*(float64x2_t *)(result + 16), v158);
      v1336.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v160);
      v163 = vaddq_f64(*(float64x2_t *)(result + 32), v159);
      v1336.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1360.val[0], v156.f64[0]), v1360.val[1], v156, 1));
      v164 = vaddq_f64(*(float64x2_t *)(result + 64), v161);
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v157);
      *(float64x2_t *)(result + 16) = v162;
      *(float64x2_t *)(result + 32) = v163;
      *(float64x2_t *)(result + 48) = v1336.val[1];
      *(float64x2_t *)(result + 64) = v164;
      *(float64x2_t *)(result + 80) = v1336.val[0];
      v151 = a2[48];
      v6 = *v5;
    }
  }
LABEL_35:
  if (v151 && a2[72])
  {
    result = sub_20F9AC218(v6 + 14216, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 19));
    v1337 = vld2q_f64(v134);
    v1361 = vld2q_f64(v137);
    v165 = a3[43];
    v166 = a3[44];
    v167 = a3[45];
    v168 = vmlaq_laneq_f64(vmulq_n_f64(v1337.val[0], v165.f64[0]), v1337.val[1], v165, 1);
    v169 = vmlaq_laneq_f64(vmulq_n_f64(v1361.val[0], v165.f64[0]), v1361.val[1], v165, 1);
    v170 = vmlaq_laneq_f64(vmulq_n_f64(v1337.val[0], v166.f64[0]), v1337.val[1], v166, 1);
    v171 = vmlaq_laneq_f64(vmulq_n_f64(v1361.val[0], v166.f64[0]), v1361.val[1], v166, 1);
    v172 = vmlaq_laneq_f64(vmulq_n_f64(v1337.val[0], v167.f64[0]), v1337.val[1], v167, 1);
    v173 = vaddq_f64(*(float64x2_t *)(result + 16), v169);
    v1337.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v171);
    v174 = vaddq_f64(*(float64x2_t *)(result + 32), v170);
    v1337.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1361.val[0], v167.f64[0]), v1361.val[1], v167, 1));
    v175 = vaddq_f64(*(float64x2_t *)(result + 64), v172);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v168);
    *(float64x2_t *)(result + 16) = v173;
    *(float64x2_t *)(result + 32) = v174;
    *(float64x2_t *)(result + 48) = v1337.val[1];
    *(float64x2_t *)(result + 64) = v175;
    *(float64x2_t *)(result + 80) = v1337.val[0];
    v6 = *v5;
  }
LABEL_38:
  v176 = a2[40];
  if (a2[40] && a2[32])
  {
    v177 = *((_DWORD *)a2 + 11);
    v178 = *((_DWORD *)a2 + 9);
    if (v178 < v177)
      goto LABEL_44;
    result = sub_20F9AC0F4(v6 + 11192, v177, v178);
    v179 = a3[28].f64;
    v1370 = vld2q_f64(v179);
    v180 = a3[30].f64;
    v1395 = vld2q_f64(v180);
    v181 = a3[24];
    v182 = a3[25];
    v183 = a3[26];
    v184 = a3[27];
    v185 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1395.val[0], v181.f64[0]), v1395.val[1], v181, 1));
    v186 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1395.val[0], v182.f64[0]), v1395.val[1], v182, 1));
    v187 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1370.val[0], v182.f64[0]), v1370.val[1], v182, 1));
    v188 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1395.val[0], v183.f64[0]), v1395.val[1], v183, 1));
    v189 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1370.val[0], v183.f64[0]), v1370.val[1], v183, 1));
    v190 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1395.val[0], v184.f64[0]), v1395.val[1], v184, 1));
    v191 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1370.val[0], v184.f64[0]), v1370.val[1], v184, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1370.val[0], v181.f64[0]), v1370.val[1], v181, 1));
    *(float64x2_t *)(result + 16) = v185;
    *(float64x2_t *)(result + 32) = v187;
    *(float64x2_t *)(result + 48) = v186;
    *(float64x2_t *)(result + 64) = v189;
    *(float64x2_t *)(result + 80) = v188;
    *(float64x2_t *)(result + 96) = v191;
    *(float64x2_t *)(result + 112) = v190;
    v176 = a2[40];
    v6 = *v5;
  }
  if (!v176)
    goto LABEL_56;
  v177 = *((_DWORD *)a2 + 11);
LABEL_44:
  v192 = a3[28].f64;
  result = sub_20F9AC0F4(v6 + 11192, v177, v177);
  v193 = a3[28];
  v194 = a3[29];
  v195 = a3[30].f64;
  v196 = a3[30];
  v197 = a3[31];
  v198 = (float64x2_t)vzip1q_s64((int64x2_t)v196, (int64x2_t)v197);
  *(_QWORD *)&v199.f64[0] = vdupq_laneq_s64((int64x2_t)v196, 1).u64[0];
  v199.f64[1] = a3[31].f64[1];
  v200 = (float64x2_t)vzip1q_s64((int64x2_t)v193, (int64x2_t)v194);
  v201 = (float64x2_t)vzip2q_s64((int64x2_t)v193, (int64x2_t)v194);
  v202 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v198, v193.f64[0]), v199, v193, 1));
  v203 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v198, v194.f64[0]), v199, v194, 1));
  v204 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v200, v194.f64[0]), v201, v194, 1));
  v205 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v198, v196.f64[0]), v199, v196, 1));
  v206 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v200, v196.f64[0]), v201, v196, 1));
  v207 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v198, v197.f64[0]), v199, v197, 1));
  v208 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v200, v197.f64[0]), v201, v197, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v200, v193.f64[0]), v201, v193, 1));
  *(float64x2_t *)(result + 16) = v202;
  *(float64x2_t *)(result + 32) = v204;
  *(float64x2_t *)(result + 48) = v203;
  *(float64x2_t *)(result + 64) = v206;
  *(float64x2_t *)(result + 80) = v205;
  *(float64x2_t *)(result + 96) = v208;
  *(float64x2_t *)(result + 112) = v207;
  v209 = a2[40];
  v6 = *v5;
  if (a2[40] && a2[48])
  {
    result = sub_20F9AC0F4(v6 + 12632, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 13));
    v1371 = vld2q_f64(v192);
    v1396 = vld2q_f64(v195);
    v210 = a3[32];
    v211 = a3[33];
    v212 = a3[34];
    v213 = a3[35];
    v214 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1396.val[0], v210.f64[0]), v1396.val[1], v210, 1));
    v215 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1396.val[0], v211.f64[0]), v1396.val[1], v211, 1));
    v216 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1371.val[0], v211.f64[0]), v1371.val[1], v211, 1));
    v217 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1396.val[0], v212.f64[0]), v1396.val[1], v212, 1));
    v218 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1371.val[0], v212.f64[0]), v1371.val[1], v212, 1));
    v219 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1396.val[0], v213.f64[0]), v1396.val[1], v213, 1));
    v220 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1371.val[0], v213.f64[0]), v1371.val[1], v213, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1371.val[0], v210.f64[0]), v1371.val[1], v210, 1));
    *(float64x2_t *)(result + 16) = v214;
    *(float64x2_t *)(result + 32) = v216;
    *(float64x2_t *)(result + 48) = v215;
    *(float64x2_t *)(result + 64) = v218;
    *(float64x2_t *)(result + 80) = v217;
    *(float64x2_t *)(result + 96) = v220;
    *(float64x2_t *)(result + 112) = v219;
    v209 = a2[40];
    v6 = *v5;
  }
  if (v209 && a2[56])
  {
    result = sub_20F9AC0F4(v6 + 12632, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 15));
    v1372 = vld2q_f64(v192);
    v1397 = vld2q_f64(v195);
    v221 = a3[36];
    v222 = a3[37];
    v223 = a3[38];
    v224 = a3[39];
    v225 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1397.val[0], v221.f64[0]), v1397.val[1], v221, 1));
    v226 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1397.val[0], v222.f64[0]), v1397.val[1], v222, 1));
    v227 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1372.val[0], v222.f64[0]), v1372.val[1], v222, 1));
    v228 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1397.val[0], v223.f64[0]), v1397.val[1], v223, 1));
    v229 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1372.val[0], v223.f64[0]), v1372.val[1], v223, 1));
    v230 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1397.val[0], v224.f64[0]), v1397.val[1], v224, 1));
    v231 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1372.val[0], v224.f64[0]), v1372.val[1], v224, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1372.val[0], v221.f64[0]), v1372.val[1], v221, 1));
    *(float64x2_t *)(result + 16) = v225;
    *(float64x2_t *)(result + 32) = v227;
    *(float64x2_t *)(result + 48) = v226;
    *(float64x2_t *)(result + 64) = v229;
    *(float64x2_t *)(result + 80) = v228;
    *(float64x2_t *)(result + 96) = v231;
    *(float64x2_t *)(result + 112) = v230;
    v209 = a2[40];
    v6 = *v5;
  }
  if (v209 && a2[64])
  {
    result = sub_20F9AC218(v6 + 14072, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 17));
    v1338 = vld2q_f64(v192);
    v1362 = vld2q_f64(v195);
    v232 = a3[40];
    v233 = a3[41];
    v234 = a3[42];
    v235 = vmlaq_laneq_f64(vmulq_n_f64(v1338.val[0], v232.f64[0]), v1338.val[1], v232, 1);
    v236 = vmlaq_laneq_f64(vmulq_n_f64(v1362.val[0], v232.f64[0]), v1362.val[1], v232, 1);
    v237 = vmlaq_laneq_f64(vmulq_n_f64(v1338.val[0], v233.f64[0]), v1338.val[1], v233, 1);
    v238 = vmlaq_laneq_f64(vmulq_n_f64(v1362.val[0], v233.f64[0]), v1362.val[1], v233, 1);
    v239 = vmlaq_laneq_f64(vmulq_n_f64(v1338.val[0], v234.f64[0]), v1338.val[1], v234, 1);
    v240 = vaddq_f64(*(float64x2_t *)(result + 16), v236);
    v1338.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v238);
    v241 = vaddq_f64(*(float64x2_t *)(result + 32), v237);
    v1338.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1362.val[0], v234.f64[0]), v1362.val[1], v234, 1));
    v242 = vaddq_f64(*(float64x2_t *)(result + 64), v239);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v235);
    *(float64x2_t *)(result + 16) = v240;
    *(float64x2_t *)(result + 32) = v241;
    *(float64x2_t *)(result + 48) = v1338.val[1];
    *(float64x2_t *)(result + 64) = v242;
    *(float64x2_t *)(result + 80) = v1338.val[0];
    v209 = a2[40];
    v6 = *v5;
  }
  if (v209 && a2[72])
  {
    result = sub_20F9AC218(v6 + 14072, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 19));
    v1339 = vld2q_f64(v192);
    v1363 = vld2q_f64(v195);
    v243 = a3[43];
    v244 = a3[44];
    v245 = a3[45];
    v246 = vmlaq_laneq_f64(vmulq_n_f64(v1339.val[0], v243.f64[0]), v1339.val[1], v243, 1);
    v247 = vmlaq_laneq_f64(vmulq_n_f64(v1363.val[0], v243.f64[0]), v1363.val[1], v243, 1);
    v248 = vmlaq_laneq_f64(vmulq_n_f64(v1339.val[0], v244.f64[0]), v1339.val[1], v244, 1);
    v249 = vmlaq_laneq_f64(vmulq_n_f64(v1363.val[0], v244.f64[0]), v1363.val[1], v244, 1);
    v250 = vmlaq_laneq_f64(vmulq_n_f64(v1339.val[0], v245.f64[0]), v1339.val[1], v245, 1);
    v251 = vaddq_f64(*(float64x2_t *)(result + 16), v247);
    v1339.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v249);
    v252 = vaddq_f64(*(float64x2_t *)(result + 32), v248);
    v1339.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1363.val[0], v245.f64[0]), v1363.val[1], v245, 1));
    v253 = vaddq_f64(*(float64x2_t *)(result + 64), v250);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v246);
    *(float64x2_t *)(result + 16) = v251;
    *(float64x2_t *)(result + 32) = v252;
    *(float64x2_t *)(result + 48) = v1339.val[1];
    *(float64x2_t *)(result + 64) = v253;
    *(float64x2_t *)(result + 80) = v1339.val[0];
    v6 = *v5;
  }
LABEL_56:
  if (!a2[32])
    goto LABEL_73;
  v254 = a3[24].f64;
  result = sub_20F9AC0F4(v6 + 11192, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 9));
  v255 = a3[24];
  v256 = a3[25];
  v257 = a3[26].f64;
  v258 = a3[26];
  v259 = a3[27];
  v260 = (float64x2_t)vzip1q_s64((int64x2_t)v258, (int64x2_t)v259);
  *(_QWORD *)&v261.f64[0] = vdupq_laneq_s64((int64x2_t)v258, 1).u64[0];
  v261.f64[1] = a3[27].f64[1];
  v262 = (float64x2_t)vzip1q_s64((int64x2_t)v255, (int64x2_t)v256);
  v263 = (float64x2_t)vzip2q_s64((int64x2_t)v255, (int64x2_t)v256);
  v264 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v260, v255.f64[0]), v261, v255, 1));
  v265 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v260, v256.f64[0]), v261, v256, 1));
  v266 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v262, v256.f64[0]), v263, v256, 1));
  v267 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v260, v258.f64[0]), v261, v258, 1));
  v268 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v262, v258.f64[0]), v263, v258, 1));
  v269 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v260, v259.f64[0]), v261, v259, 1));
  v270 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v262, v259.f64[0]), v263, v259, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v262, v255.f64[0]), v263, v255, 1));
  *(float64x2_t *)(result + 16) = v264;
  *(float64x2_t *)(result + 32) = v266;
  *(float64x2_t *)(result + 48) = v265;
  *(float64x2_t *)(result + 64) = v268;
  *(float64x2_t *)(result + 80) = v267;
  *(float64x2_t *)(result + 96) = v270;
  *(float64x2_t *)(result + 112) = v269;
  v6 = *v5;
  v271 = a2[32];
  if (!a2[32] || !a2[40])
  {
LABEL_61:
    if (v271)
      goto LABEL_62;
    goto LABEL_64;
  }
  v272 = *((_DWORD *)a2 + 9);
  v273 = *((_DWORD *)a2 + 11);
  if (v273 < v272)
  {
    v271 = 1;
    goto LABEL_61;
  }
  result = sub_20F9AC0F4(v6 + 11192, v272, v273);
  v1392 = vld2q_f64(v254);
  v1404 = vld2q_f64(v257);
  v1245 = a3[28];
  v1246 = a3[29];
  v1247 = a3[30];
  v1248 = a3[31];
  v1249 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1404.val[0], v1245.f64[0]), v1404.val[1], v1245, 1));
  v1250 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1404.val[0], v1246.f64[0]), v1404.val[1], v1246, 1));
  v1251 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1392.val[0], v1246.f64[0]), v1392.val[1], v1246, 1));
  v1252 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1404.val[0], v1247.f64[0]), v1404.val[1], v1247, 1));
  v1253 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1392.val[0], v1247.f64[0]), v1392.val[1], v1247, 1));
  v1254 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1404.val[0], v1248.f64[0]), v1404.val[1], v1248, 1));
  v1255 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1392.val[0], v1248.f64[0]), v1392.val[1], v1248, 1));
  *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1392.val[0], v1245.f64[0]), v1392.val[1], v1245, 1));
  *(float64x2_t *)(result + 16) = v1249;
  *(float64x2_t *)(result + 32) = v1251;
  *(float64x2_t *)(result + 48) = v1250;
  *(float64x2_t *)(result + 64) = v1253;
  *(float64x2_t *)(result + 80) = v1252;
  *(float64x2_t *)(result + 96) = v1255;
  *(float64x2_t *)(result + 112) = v1254;
  v271 = a2[32];
  v6 = *v5;
  if (a2[32])
  {
LABEL_62:
    if (a2[48])
    {
      result = sub_20F9AC0F4(v6 + 12632, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 13));
      v1373 = vld2q_f64(v254);
      v1398 = vld2q_f64(v257);
      v274 = a3[32];
      v275 = a3[33];
      v276 = a3[34];
      v277 = a3[35];
      v278 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1398.val[0], v274.f64[0]), v1398.val[1], v274, 1));
      v279 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1398.val[0], v275.f64[0]), v1398.val[1], v275, 1));
      v280 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1373.val[0], v275.f64[0]), v1373.val[1], v275, 1));
      v281 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1398.val[0], v276.f64[0]), v1398.val[1], v276, 1));
      v282 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1373.val[0], v276.f64[0]), v1373.val[1], v276, 1));
      v283 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1398.val[0], v277.f64[0]), v1398.val[1], v277, 1));
      v284 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1373.val[0], v277.f64[0]), v1373.val[1], v277, 1));
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1373.val[0], v274.f64[0]), v1373.val[1], v274, 1));
      *(float64x2_t *)(result + 16) = v278;
      *(float64x2_t *)(result + 32) = v280;
      *(float64x2_t *)(result + 48) = v279;
      *(float64x2_t *)(result + 64) = v282;
      *(float64x2_t *)(result + 80) = v281;
      *(float64x2_t *)(result + 96) = v284;
      *(float64x2_t *)(result + 112) = v283;
      v271 = a2[32];
      v6 = *v5;
    }
  }
LABEL_64:
  if (v271 && a2[56])
  {
    result = sub_20F9AC0F4(v6 + 12632, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 15));
    v1374 = vld2q_f64(v254);
    v1399 = vld2q_f64(v257);
    v285 = a3[36];
    v286 = a3[37];
    v287 = a3[38];
    v288 = a3[39];
    v289 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1399.val[0], v285.f64[0]), v1399.val[1], v285, 1));
    v290 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1399.val[0], v286.f64[0]), v1399.val[1], v286, 1));
    v291 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1374.val[0], v286.f64[0]), v1374.val[1], v286, 1));
    v292 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1399.val[0], v287.f64[0]), v1399.val[1], v287, 1));
    v293 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1374.val[0], v287.f64[0]), v1374.val[1], v287, 1));
    v294 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1399.val[0], v288.f64[0]), v1399.val[1], v288, 1));
    v295 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1374.val[0], v288.f64[0]), v1374.val[1], v288, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1374.val[0], v285.f64[0]), v1374.val[1], v285, 1));
    *(float64x2_t *)(result + 16) = v289;
    *(float64x2_t *)(result + 32) = v291;
    *(float64x2_t *)(result + 48) = v290;
    *(float64x2_t *)(result + 64) = v293;
    *(float64x2_t *)(result + 80) = v292;
    *(float64x2_t *)(result + 96) = v295;
    *(float64x2_t *)(result + 112) = v294;
    v271 = a2[32];
    v6 = *v5;
  }
  if (v271 && a2[64])
  {
    result = sub_20F9AC218(v6 + 14072, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 17));
    v1340 = vld2q_f64(v254);
    v1364 = vld2q_f64(v257);
    v296 = a3[40];
    v297 = a3[41];
    v298 = a3[42];
    v299 = vmlaq_laneq_f64(vmulq_n_f64(v1340.val[0], v296.f64[0]), v1340.val[1], v296, 1);
    v300 = vmlaq_laneq_f64(vmulq_n_f64(v1364.val[0], v296.f64[0]), v1364.val[1], v296, 1);
    v301 = vmlaq_laneq_f64(vmulq_n_f64(v1340.val[0], v297.f64[0]), v1340.val[1], v297, 1);
    v302 = vmlaq_laneq_f64(vmulq_n_f64(v1364.val[0], v297.f64[0]), v1364.val[1], v297, 1);
    v303 = vmlaq_laneq_f64(vmulq_n_f64(v1340.val[0], v298.f64[0]), v1340.val[1], v298, 1);
    v304 = vaddq_f64(*(float64x2_t *)(result + 16), v300);
    v1340.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v302);
    v305 = vaddq_f64(*(float64x2_t *)(result + 32), v301);
    v1340.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1364.val[0], v298.f64[0]), v1364.val[1], v298, 1));
    v306 = vaddq_f64(*(float64x2_t *)(result + 64), v303);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v299);
    *(float64x2_t *)(result + 16) = v304;
    *(float64x2_t *)(result + 32) = v305;
    *(float64x2_t *)(result + 48) = v1340.val[1];
    *(float64x2_t *)(result + 64) = v306;
    *(float64x2_t *)(result + 80) = v1340.val[0];
    v271 = a2[32];
    v6 = *v5;
  }
  if (v271 && a2[72])
  {
    result = sub_20F9AC218(v6 + 14072, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 19));
    v1341 = vld2q_f64(v254);
    v1365 = vld2q_f64(v257);
    v307 = a3[43];
    v308 = a3[44];
    v309 = a3[45];
    v310 = vmlaq_laneq_f64(vmulq_n_f64(v1341.val[0], v307.f64[0]), v1341.val[1], v307, 1);
    v311 = vmlaq_laneq_f64(vmulq_n_f64(v1365.val[0], v307.f64[0]), v1365.val[1], v307, 1);
    v312 = vmlaq_laneq_f64(vmulq_n_f64(v1341.val[0], v308.f64[0]), v1341.val[1], v308, 1);
    v313 = vmlaq_laneq_f64(vmulq_n_f64(v1365.val[0], v308.f64[0]), v1365.val[1], v308, 1);
    v314 = vmlaq_laneq_f64(vmulq_n_f64(v1341.val[0], v309.f64[0]), v1341.val[1], v309, 1);
    v315 = vaddq_f64(*(float64x2_t *)(result + 16), v311);
    v1341.val[1] = vaddq_f64(*(float64x2_t *)(result + 48), v313);
    v316 = vaddq_f64(*(float64x2_t *)(result + 32), v312);
    v1341.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1365.val[0], v309.f64[0]), v1365.val[1], v309, 1));
    v317 = vaddq_f64(*(float64x2_t *)(result + 64), v314);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v310);
    *(float64x2_t *)(result + 16) = v315;
    *(float64x2_t *)(result + 32) = v316;
    *(float64x2_t *)(result + 48) = v1341.val[1];
    *(float64x2_t *)(result + 64) = v317;
    *(float64x2_t *)(result + 80) = v1341.val[0];
    v6 = *v5;
  }
LABEL_73:
  v318 = a2[24];
  if (a2[24] && *a2)
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 1));
    v319 = a3[18].f64;
    v1326 = vld2q_f64(v319);
    v320 = a3[20].f64;
    v1342 = vld2q_f64(v320);
    v321 = a3[22].f64;
    v322 = a3[1];
    v323 = a3[2];
    v324 = a3[3];
    v325 = a3[4];
    v326 = a3[5];
    v327 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], a3->f64[0]), v1326.val[1], *a3, 1);
    v328 = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], a3->f64[0]), v1342.val[1], *a3, 1);
    v329 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], v322.f64[0]), v1326.val[1], v322, 1);
    v330 = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], v322.f64[0]), v1342.val[1], v322, 1);
    v331 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], v323.f64[0]), v1326.val[1], v323, 1);
    v332 = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], v323.f64[0]), v1342.val[1], v323, 1);
    v333 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], v324.f64[0]), v1326.val[1], v324, 1);
    v334 = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], v324.f64[0]), v1342.val[1], v324, 1);
    v335 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], v325.f64[0]), v1326.val[1], v325, 1);
    v336 = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], v325.f64[0]), v1342.val[1], v325, 1);
    v337 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[0], v326.f64[0]), v1326.val[1], v326, 1);
    v1326.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1342.val[0], v326.f64[0]), v1342.val[1], v326, 1);
    *(float64x2x2_t *)((char *)&v1326 + 16) = vld2q_f64(v321);
    v338 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], v322.f64[0]), v1342.val[0], v322, 1);
    v339 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], v323.f64[0]), v1342.val[0], v323, 1);
    v340 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], v324.f64[0]), v1342.val[0], v324, 1);
    v341 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], v325.f64[0]), v1342.val[0], v325, 1);
    v342 = vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], v326.f64[0]), v1342.val[0], v326, 1);
    v1326.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1326.val[1], a3->f64[0]), v1342.val[0], *a3, 1));
    v1342.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v328);
    v343 = vaddq_f64(*(float64x2_t *)result, v327);
    v344 = vaddq_f64(*(float64x2_t *)(result + 80), v338);
    v345 = vaddq_f64(*(float64x2_t *)(result + 64), v330);
    v1342.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v329);
    v346 = vaddq_f64(*(float64x2_t *)(result + 128), v339);
    v347 = vaddq_f64(*(float64x2_t *)(result + 112), v332);
    v348 = vaddq_f64(*(float64x2_t *)(result + 96), v331);
    v349 = vaddq_f64(*(float64x2_t *)(result + 176), v340);
    v350 = vaddq_f64(*(float64x2_t *)(result + 160), v334);
    v351 = vaddq_f64(*(float64x2_t *)(result + 144), v333);
    v352 = *(float64x2_t *)(result + 240);
    v353 = vaddq_f64(*(float64x2_t *)(result + 224), v341);
    v354 = vaddq_f64(*(float64x2_t *)(result + 208), v336);
    v355 = vaddq_f64(*(float64x2_t *)(result + 192), v335);
    v356 = vaddq_f64(*(float64x2_t *)(result + 272), v342);
    v1326.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1326.val[0]);
    *(float64x2_t *)result = v343;
    *(float64x2_t *)(result + 16) = v1342.val[1];
    *(float64x2_t *)(result + 32) = v1326.val[1];
    *(float64x2_t *)(result + 48) = v1342.val[0];
    *(float64x2_t *)(result + 64) = v345;
    *(float64x2_t *)(result + 80) = v344;
    *(float64x2_t *)(result + 96) = v348;
    *(float64x2_t *)(result + 112) = v347;
    *(float64x2_t *)(result + 128) = v346;
    *(float64x2_t *)(result + 144) = v351;
    *(float64x2_t *)(result + 160) = v350;
    *(float64x2_t *)(result + 176) = v349;
    *(float64x2_t *)(result + 192) = v355;
    *(float64x2_t *)(result + 208) = v354;
    *(float64x2_t *)(result + 224) = v353;
    *(float64x2_t *)(result + 240) = vaddq_f64(v352, v337);
    *(float64x2_t *)(result + 256) = v1326.val[0];
    *(float64x2_t *)(result + 272) = v356;
    v318 = a2[24];
    v6 = *v5;
  }
  if (v318 && a2[8])
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 3));
    v357 = a3[18].f64;
    v1327 = vld2q_f64(v357);
    v358 = a3[20].f64;
    v1343 = vld2q_f64(v358);
    v359 = a3[22].f64;
    v360 = a3[6];
    v361 = a3[7];
    v362 = a3[8];
    v363 = a3[9];
    v364 = a3[10];
    v365 = a3[11];
    v366 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v360.f64[0]), v1327.val[1], v360, 1);
    v367 = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v360.f64[0]), v1343.val[1], v360, 1);
    v368 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v361.f64[0]), v1327.val[1], v361, 1);
    v369 = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v361.f64[0]), v1343.val[1], v361, 1);
    v370 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v362.f64[0]), v1327.val[1], v362, 1);
    v371 = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v362.f64[0]), v1343.val[1], v362, 1);
    v372 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v363.f64[0]), v1327.val[1], v363, 1);
    v373 = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v363.f64[0]), v1343.val[1], v363, 1);
    v374 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v364.f64[0]), v1327.val[1], v364, 1);
    v375 = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v364.f64[0]), v1343.val[1], v364, 1);
    v376 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[0], v365.f64[0]), v1327.val[1], v365, 1);
    v1327.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1343.val[0], v365.f64[0]), v1343.val[1], v365, 1);
    *(float64x2x2_t *)((char *)&v1327 + 16) = vld2q_f64(v359);
    v1343.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v360.f64[0]), v1343.val[0], v360, 1);
    v377 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v361.f64[0]), v1343.val[0], v361, 1);
    v378 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v362.f64[0]), v1343.val[0], v362, 1);
    v379 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v363.f64[0]), v1343.val[0], v363, 1);
    v380 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v364.f64[0]), v1343.val[0], v364, 1);
    v381 = vmlaq_laneq_f64(vmulq_n_f64(v1327.val[1], v365.f64[0]), v1343.val[0], v365, 1);
    v1327.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1343.val[1]);
    v1343.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v367);
    v382 = vaddq_f64(*(float64x2_t *)result, v366);
    v383 = vaddq_f64(*(float64x2_t *)(result + 80), v377);
    v384 = vaddq_f64(*(float64x2_t *)(result + 64), v369);
    v1343.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v368);
    v385 = vaddq_f64(*(float64x2_t *)(result + 128), v378);
    v386 = vaddq_f64(*(float64x2_t *)(result + 112), v371);
    v387 = vaddq_f64(*(float64x2_t *)(result + 96), v370);
    v388 = vaddq_f64(*(float64x2_t *)(result + 176), v379);
    v389 = vaddq_f64(*(float64x2_t *)(result + 160), v373);
    v390 = vaddq_f64(*(float64x2_t *)(result + 144), v372);
    v391 = *(float64x2_t *)(result + 240);
    v392 = vaddq_f64(*(float64x2_t *)(result + 224), v380);
    v393 = vaddq_f64(*(float64x2_t *)(result + 208), v375);
    v394 = vaddq_f64(*(float64x2_t *)(result + 192), v374);
    v395 = vaddq_f64(*(float64x2_t *)(result + 272), v381);
    v1327.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1327.val[0]);
    *(float64x2_t *)result = v382;
    *(float64x2_t *)(result + 16) = v1343.val[1];
    *(float64x2_t *)(result + 32) = v1327.val[1];
    *(float64x2_t *)(result + 48) = v1343.val[0];
    *(float64x2_t *)(result + 64) = v384;
    *(float64x2_t *)(result + 80) = v383;
    *(float64x2_t *)(result + 96) = v387;
    *(float64x2_t *)(result + 112) = v386;
    *(float64x2_t *)(result + 128) = v385;
    *(float64x2_t *)(result + 144) = v390;
    *(float64x2_t *)(result + 160) = v389;
    *(float64x2_t *)(result + 176) = v388;
    *(float64x2_t *)(result + 192) = v394;
    *(float64x2_t *)(result + 208) = v393;
    *(float64x2_t *)(result + 224) = v392;
    *(float64x2_t *)(result + 240) = vaddq_f64(v391, v376);
    *(float64x2_t *)(result + 256) = v1327.val[0];
    *(float64x2_t *)(result + 272) = v395;
    v6 = *v5;
    v318 = a2[24];
  }
  if (v318 && a2[16])
  {
    v396 = *((_DWORD *)a2 + 7);
    v397 = *((_DWORD *)a2 + 5);
    if (v397 < v396)
      goto LABEL_85;
    result = sub_20F9AC33C(v6 + 104, v396, v397);
    v398 = a3[18].f64;
    v1328 = vld2q_f64(v398);
    v399 = a3[20].f64;
    v1344 = vld2q_f64(v399);
    v400 = a3[22].f64;
    v401 = a3[12];
    v402 = a3[13];
    v403 = a3[14];
    v404 = a3[15];
    v405 = a3[16];
    v406 = a3[17];
    v407 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v401.f64[0]), v1328.val[1], v401, 1);
    v408 = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v401.f64[0]), v1344.val[1], v401, 1);
    v409 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v402.f64[0]), v1328.val[1], v402, 1);
    v410 = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v402.f64[0]), v1344.val[1], v402, 1);
    v411 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v403.f64[0]), v1328.val[1], v403, 1);
    v412 = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v403.f64[0]), v1344.val[1], v403, 1);
    v413 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v404.f64[0]), v1328.val[1], v404, 1);
    v414 = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v404.f64[0]), v1344.val[1], v404, 1);
    v415 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v405.f64[0]), v1328.val[1], v405, 1);
    v416 = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v405.f64[0]), v1344.val[1], v405, 1);
    v417 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[0], v406.f64[0]), v1328.val[1], v406, 1);
    v1328.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1344.val[0], v406.f64[0]), v1344.val[1], v406, 1);
    *(float64x2x2_t *)((char *)&v1328 + 16) = vld2q_f64(v400);
    v1344.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v401.f64[0]), v1344.val[0], v401, 1);
    v418 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v402.f64[0]), v1344.val[0], v402, 1);
    v419 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v403.f64[0]), v1344.val[0], v403, 1);
    v420 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v404.f64[0]), v1344.val[0], v404, 1);
    v421 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v405.f64[0]), v1344.val[0], v405, 1);
    v422 = vmlaq_laneq_f64(vmulq_n_f64(v1328.val[1], v406.f64[0]), v1344.val[0], v406, 1);
    v1328.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1344.val[1]);
    v1344.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v408);
    v423 = vaddq_f64(*(float64x2_t *)result, v407);
    v424 = vaddq_f64(*(float64x2_t *)(result + 80), v418);
    v425 = vaddq_f64(*(float64x2_t *)(result + 64), v410);
    v1344.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v409);
    v426 = vaddq_f64(*(float64x2_t *)(result + 128), v419);
    v427 = vaddq_f64(*(float64x2_t *)(result + 112), v412);
    v428 = vaddq_f64(*(float64x2_t *)(result + 96), v411);
    v429 = vaddq_f64(*(float64x2_t *)(result + 176), v420);
    v430 = vaddq_f64(*(float64x2_t *)(result + 160), v414);
    v431 = vaddq_f64(*(float64x2_t *)(result + 144), v413);
    v432 = *(float64x2_t *)(result + 240);
    v433 = vaddq_f64(*(float64x2_t *)(result + 224), v421);
    v434 = vaddq_f64(*(float64x2_t *)(result + 208), v416);
    v435 = vaddq_f64(*(float64x2_t *)(result + 192), v415);
    v436 = vaddq_f64(*(float64x2_t *)(result + 272), v422);
    v1328.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1328.val[0]);
    *(float64x2_t *)result = v423;
    *(float64x2_t *)(result + 16) = v1344.val[1];
    *(float64x2_t *)(result + 32) = v1328.val[1];
    *(float64x2_t *)(result + 48) = v1344.val[0];
    *(float64x2_t *)(result + 64) = v425;
    *(float64x2_t *)(result + 80) = v424;
    *(float64x2_t *)(result + 96) = v428;
    *(float64x2_t *)(result + 112) = v427;
    *(float64x2_t *)(result + 128) = v426;
    *(float64x2_t *)(result + 144) = v431;
    *(float64x2_t *)(result + 160) = v430;
    *(float64x2_t *)(result + 176) = v429;
    *(float64x2_t *)(result + 192) = v435;
    *(float64x2_t *)(result + 208) = v434;
    *(float64x2_t *)(result + 224) = v433;
    *(float64x2_t *)(result + 240) = vaddq_f64(v432, v417);
    *(float64x2_t *)(result + 256) = v1328.val[0];
    *(float64x2_t *)(result + 272) = v436;
    v318 = a2[24];
    v6 = *v5;
  }
  if (!v318)
    goto LABEL_103;
  v396 = *((_DWORD *)a2 + 7);
LABEL_85:
  v437 = a3[18].f64;
  result = sub_20F9AC33C(v6 + 104, v396, v396);
  v438 = a3[18];
  v439 = a3[19];
  v440 = a3[20];
  v441 = a3[21];
  v442 = a3[22];
  v443 = a3[23];
  v444 = (float64x2_t)vzip1q_s64((int64x2_t)v440, (int64x2_t)v441);
  v445 = (float64x2_t)vzip1q_s64((int64x2_t)v442, (int64x2_t)v443);
  *(_QWORD *)&v446.f64[0] = vdupq_laneq_s64((int64x2_t)v440, 1).u64[0];
  v446.f64[1] = a3[21].f64[1];
  *(_QWORD *)&v447.f64[0] = vdupq_laneq_s64((int64x2_t)v442, 1).u64[0];
  v447.f64[1] = a3[23].f64[1];
  v448 = (float64x2_t)vzip1q_s64((int64x2_t)v438, (int64x2_t)v439);
  v449 = (float64x2_t)vzip2q_s64((int64x2_t)v438, (int64x2_t)v439);
  v450 = vmlaq_laneq_f64(vmulq_n_f64(v448, v438.f64[0]), v449, v438, 1);
  v451 = vmlaq_laneq_f64(vmulq_n_f64(v444, v438.f64[0]), v446, v438, 1);
  v452 = vmlaq_laneq_f64(vmulq_n_f64(v445, v438.f64[0]), v447, v438, 1);
  v453 = vmlaq_laneq_f64(vmulq_n_f64(v448, v439.f64[0]), v449, v439, 1);
  v454 = vmlaq_laneq_f64(vmulq_n_f64(v444, v439.f64[0]), v446, v439, 1);
  v455 = vmlaq_laneq_f64(vmulq_n_f64(v445, v439.f64[0]), v447, v439, 1);
  v456 = vmlaq_laneq_f64(vmulq_n_f64(v448, v440.f64[0]), v449, v440, 1);
  v457 = vmlaq_laneq_f64(vmulq_n_f64(v444, v440.f64[0]), v446, v440, 1);
  v458 = vmlaq_laneq_f64(vmulq_n_f64(v445, v440.f64[0]), v447, v440, 1);
  v459 = vmlaq_laneq_f64(vmulq_n_f64(v448, v441.f64[0]), v449, v441, 1);
  v460 = vmlaq_laneq_f64(vmulq_n_f64(v444, v441.f64[0]), v446, v441, 1);
  v461 = vmlaq_laneq_f64(vmulq_n_f64(v445, v441.f64[0]), v447, v441, 1);
  v462 = vmlaq_laneq_f64(vmulq_n_f64(v448, v442.f64[0]), v449, v442, 1);
  v463 = vmlaq_laneq_f64(vmulq_n_f64(v444, v442.f64[0]), v446, v442, 1);
  v464 = vmlaq_laneq_f64(vmulq_n_f64(v445, v442.f64[0]), v447, v442, 1);
  v465 = vmlaq_laneq_f64(vmulq_n_f64(v448, v443.f64[0]), v449, v443, 1);
  v466 = vmlaq_laneq_f64(vmulq_n_f64(v444, v443.f64[0]), v446, v443, 1);
  v467 = vmlaq_laneq_f64(vmulq_n_f64(v445, v443.f64[0]), v447, v443, 1);
  v468 = vaddq_f64(*(float64x2_t *)(result + 32), v452);
  v469 = vaddq_f64(*(float64x2_t *)(result + 16), v451);
  v470 = vaddq_f64(*(float64x2_t *)result, v450);
  v471 = vaddq_f64(*(float64x2_t *)(result + 80), v455);
  v472 = vaddq_f64(*(float64x2_t *)(result + 64), v454);
  v473 = vaddq_f64(*(float64x2_t *)(result + 48), v453);
  v474 = vaddq_f64(*(float64x2_t *)(result + 128), v458);
  v475 = vaddq_f64(*(float64x2_t *)(result + 112), v457);
  v476 = vaddq_f64(*(float64x2_t *)(result + 96), v456);
  v477 = vaddq_f64(*(float64x2_t *)(result + 176), v461);
  v478 = vaddq_f64(*(float64x2_t *)(result + 160), v460);
  v479 = vaddq_f64(*(float64x2_t *)(result + 144), v459);
  v480 = *(float64x2_t *)(result + 240);
  v481 = vaddq_f64(*(float64x2_t *)(result + 224), v464);
  v482 = vaddq_f64(*(float64x2_t *)(result + 208), v463);
  v483 = vaddq_f64(*(float64x2_t *)(result + 192), v462);
  v484 = vaddq_f64(*(float64x2_t *)(result + 272), v467);
  v485 = vaddq_f64(*(float64x2_t *)(result + 256), v466);
  *(float64x2_t *)result = v470;
  *(float64x2_t *)(result + 16) = v469;
  *(float64x2_t *)(result + 32) = v468;
  *(float64x2_t *)(result + 48) = v473;
  *(float64x2_t *)(result + 64) = v472;
  *(float64x2_t *)(result + 80) = v471;
  *(float64x2_t *)(result + 96) = v476;
  *(float64x2_t *)(result + 112) = v475;
  *(float64x2_t *)(result + 128) = v474;
  *(float64x2_t *)(result + 144) = v479;
  *(float64x2_t *)(result + 160) = v478;
  *(float64x2_t *)(result + 176) = v477;
  *(float64x2_t *)(result + 192) = v483;
  *(float64x2_t *)(result + 208) = v482;
  *(float64x2_t *)(result + 224) = v481;
  *(float64x2_t *)(result + 240) = vaddq_f64(v480, v465);
  *(float64x2_t *)(result + 256) = v485;
  *(float64x2_t *)(result + 272) = v484;
  v486 = a3[20].f64;
  v487 = a3[22].f64;
  v488 = a2[24];
  v6 = *v5;
  if (a2[24] && a2[32])
  {
    result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 9));
    v1375 = vld2q_f64(v437);
    v489 = *(float64x2_t *)(result + 144);
    v1406 = vld2q_f64(v486);
    v1426 = vld2q_f64(v487);
    v490 = a3[24];
    v491 = a3[25];
    v492 = a3[26];
    v493 = a3[27];
    v494 = vmlaq_laneq_f64(vmulq_n_f64(v1375.val[0], v490.f64[0]), v1375.val[1], v490, 1);
    v495 = vmlaq_laneq_f64(vmulq_n_f64(v1406.val[0], v490.f64[0]), v1406.val[1], v490, 1);
    v496 = vmlaq_laneq_f64(vmulq_n_f64(v1426.val[0], v490.f64[0]), v1426.val[1], v490, 1);
    v497 = vmlaq_laneq_f64(vmulq_n_f64(v1375.val[0], v491.f64[0]), v1375.val[1], v491, 1);
    v498 = vmlaq_laneq_f64(vmulq_n_f64(v1406.val[0], v491.f64[0]), v1406.val[1], v491, 1);
    v499 = vmlaq_laneq_f64(vmulq_n_f64(v1426.val[0], v491.f64[0]), v1426.val[1], v491, 1);
    v500 = vmlaq_laneq_f64(vmulq_n_f64(v1375.val[0], v492.f64[0]), v1375.val[1], v492, 1);
    v501 = vmlaq_laneq_f64(vmulq_n_f64(v1406.val[0], v492.f64[0]), v1406.val[1], v492, 1);
    v502 = vmlaq_laneq_f64(vmulq_n_f64(v1426.val[0], v492.f64[0]), v1426.val[1], v492, 1);
    v503 = vmlaq_laneq_f64(vmulq_n_f64(v1375.val[0], v493.f64[0]), v1375.val[1], v493, 1);
    v504 = vaddq_f64(*(float64x2_t *)(result + 32), v496);
    v505 = vaddq_f64(*(float64x2_t *)(result + 16), v495);
    v506 = vaddq_f64(*(float64x2_t *)(result + 80), v499);
    v507 = vaddq_f64(*(float64x2_t *)(result + 64), v498);
    v508 = vaddq_f64(*(float64x2_t *)(result + 48), v497);
    v509 = vaddq_f64(*(float64x2_t *)(result + 128), v502);
    v510 = vaddq_f64(*(float64x2_t *)(result + 112), v501);
    v511 = vaddq_f64(*(float64x2_t *)(result + 96), v500);
    v1375.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1426.val[0], v493.f64[0]), v1426.val[1], v493, 1));
    v1375.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1406.val[0], v493.f64[0]), v1406.val[1], v493, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v494);
    *(float64x2_t *)(result + 16) = v505;
    *(float64x2_t *)(result + 32) = v504;
    *(float64x2_t *)(result + 48) = v508;
    *(float64x2_t *)(result + 64) = v507;
    *(float64x2_t *)(result + 80) = v506;
    *(float64x2_t *)(result + 96) = v511;
    *(float64x2_t *)(result + 112) = v510;
    *(float64x2_t *)(result + 128) = v509;
    *(float64x2_t *)(result + 144) = vaddq_f64(v489, v503);
    *(float64x2x2_t *)(result + 160) = v1375;
    v488 = a2[24];
    v6 = *v5;
  }
  if (v488 && a2[40])
  {
    result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 11));
    v1376 = vld2q_f64(v437);
    v512 = *(float64x2_t *)(result + 144);
    v1407 = vld2q_f64(v486);
    v1427 = vld2q_f64(v487);
    v513 = a3[28];
    v514 = a3[29];
    v515 = a3[30];
    v516 = a3[31];
    v517 = vmlaq_laneq_f64(vmulq_n_f64(v1376.val[0], v513.f64[0]), v1376.val[1], v513, 1);
    v518 = vmlaq_laneq_f64(vmulq_n_f64(v1407.val[0], v513.f64[0]), v1407.val[1], v513, 1);
    v519 = vmlaq_laneq_f64(vmulq_n_f64(v1427.val[0], v513.f64[0]), v1427.val[1], v513, 1);
    v520 = vmlaq_laneq_f64(vmulq_n_f64(v1376.val[0], v514.f64[0]), v1376.val[1], v514, 1);
    v521 = vmlaq_laneq_f64(vmulq_n_f64(v1407.val[0], v514.f64[0]), v1407.val[1], v514, 1);
    v522 = vmlaq_laneq_f64(vmulq_n_f64(v1427.val[0], v514.f64[0]), v1427.val[1], v514, 1);
    v523 = vmlaq_laneq_f64(vmulq_n_f64(v1376.val[0], v515.f64[0]), v1376.val[1], v515, 1);
    v524 = vmlaq_laneq_f64(vmulq_n_f64(v1407.val[0], v515.f64[0]), v1407.val[1], v515, 1);
    v525 = vmlaq_laneq_f64(vmulq_n_f64(v1427.val[0], v515.f64[0]), v1427.val[1], v515, 1);
    v526 = vmlaq_laneq_f64(vmulq_n_f64(v1376.val[0], v516.f64[0]), v1376.val[1], v516, 1);
    v527 = vaddq_f64(*(float64x2_t *)(result + 32), v519);
    v528 = vaddq_f64(*(float64x2_t *)(result + 16), v518);
    v529 = vaddq_f64(*(float64x2_t *)(result + 80), v522);
    v530 = vaddq_f64(*(float64x2_t *)(result + 64), v521);
    v531 = vaddq_f64(*(float64x2_t *)(result + 48), v520);
    v532 = vaddq_f64(*(float64x2_t *)(result + 128), v525);
    v533 = vaddq_f64(*(float64x2_t *)(result + 112), v524);
    v534 = vaddq_f64(*(float64x2_t *)(result + 96), v523);
    v1376.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1427.val[0], v516.f64[0]), v1427.val[1], v516, 1));
    v1376.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1407.val[0], v516.f64[0]), v1407.val[1], v516, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v517);
    *(float64x2_t *)(result + 16) = v528;
    *(float64x2_t *)(result + 32) = v527;
    *(float64x2_t *)(result + 48) = v531;
    *(float64x2_t *)(result + 64) = v530;
    *(float64x2_t *)(result + 80) = v529;
    *(float64x2_t *)(result + 96) = v534;
    *(float64x2_t *)(result + 112) = v533;
    *(float64x2_t *)(result + 128) = v532;
    *(float64x2_t *)(result + 144) = vaddq_f64(v512, v526);
    *(float64x2x2_t *)(result + 160) = v1376;
    v488 = a2[24];
    v6 = *v5;
  }
  if (v488 && a2[48])
  {
    result = sub_20F9AC460(v6 + 11624, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 13));
    v1377 = vld2q_f64(v437);
    v535 = *(float64x2_t *)(result + 144);
    v1408 = vld2q_f64(v486);
    v1428 = vld2q_f64(v487);
    v536 = a3[32];
    v537 = a3[33];
    v538 = a3[34];
    v539 = a3[35];
    v540 = vmlaq_laneq_f64(vmulq_n_f64(v1377.val[0], v536.f64[0]), v1377.val[1], v536, 1);
    v541 = vmlaq_laneq_f64(vmulq_n_f64(v1408.val[0], v536.f64[0]), v1408.val[1], v536, 1);
    v542 = vmlaq_laneq_f64(vmulq_n_f64(v1428.val[0], v536.f64[0]), v1428.val[1], v536, 1);
    v543 = vmlaq_laneq_f64(vmulq_n_f64(v1377.val[0], v537.f64[0]), v1377.val[1], v537, 1);
    v544 = vmlaq_laneq_f64(vmulq_n_f64(v1408.val[0], v537.f64[0]), v1408.val[1], v537, 1);
    v545 = vmlaq_laneq_f64(vmulq_n_f64(v1428.val[0], v537.f64[0]), v1428.val[1], v537, 1);
    v546 = vmlaq_laneq_f64(vmulq_n_f64(v1377.val[0], v538.f64[0]), v1377.val[1], v538, 1);
    v547 = vmlaq_laneq_f64(vmulq_n_f64(v1408.val[0], v538.f64[0]), v1408.val[1], v538, 1);
    v548 = vmlaq_laneq_f64(vmulq_n_f64(v1428.val[0], v538.f64[0]), v1428.val[1], v538, 1);
    v549 = vmlaq_laneq_f64(vmulq_n_f64(v1377.val[0], v539.f64[0]), v1377.val[1], v539, 1);
    v550 = vaddq_f64(*(float64x2_t *)(result + 32), v542);
    v551 = vaddq_f64(*(float64x2_t *)(result + 16), v541);
    v552 = vaddq_f64(*(float64x2_t *)(result + 80), v545);
    v553 = vaddq_f64(*(float64x2_t *)(result + 64), v544);
    v554 = vaddq_f64(*(float64x2_t *)(result + 48), v543);
    v555 = vaddq_f64(*(float64x2_t *)(result + 128), v548);
    v556 = vaddq_f64(*(float64x2_t *)(result + 112), v547);
    v557 = vaddq_f64(*(float64x2_t *)(result + 96), v546);
    v1377.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1428.val[0], v539.f64[0]), v1428.val[1], v539, 1));
    v1377.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1408.val[0], v539.f64[0]), v1408.val[1], v539, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v540);
    *(float64x2_t *)(result + 16) = v551;
    *(float64x2_t *)(result + 32) = v550;
    *(float64x2_t *)(result + 48) = v554;
    *(float64x2_t *)(result + 64) = v553;
    *(float64x2_t *)(result + 80) = v552;
    *(float64x2_t *)(result + 96) = v557;
    *(float64x2_t *)(result + 112) = v556;
    *(float64x2_t *)(result + 128) = v555;
    *(float64x2_t *)(result + 144) = vaddq_f64(v535, v549);
    *(float64x2x2_t *)(result + 160) = v1377;
    v488 = a2[24];
    v6 = *v5;
  }
  if (v488 && a2[56])
  {
    result = sub_20F9AC460(v6 + 11624, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 15));
    v1378 = vld2q_f64(v437);
    v558 = *(float64x2_t *)(result + 144);
    v1409 = vld2q_f64(v486);
    v1429 = vld2q_f64(v487);
    v559 = a3[36];
    v560 = a3[37];
    v561 = a3[38];
    v562 = a3[39];
    v563 = vmlaq_laneq_f64(vmulq_n_f64(v1378.val[0], v559.f64[0]), v1378.val[1], v559, 1);
    v564 = vmlaq_laneq_f64(vmulq_n_f64(v1409.val[0], v559.f64[0]), v1409.val[1], v559, 1);
    v565 = vmlaq_laneq_f64(vmulq_n_f64(v1429.val[0], v559.f64[0]), v1429.val[1], v559, 1);
    v566 = vmlaq_laneq_f64(vmulq_n_f64(v1378.val[0], v560.f64[0]), v1378.val[1], v560, 1);
    v567 = vmlaq_laneq_f64(vmulq_n_f64(v1409.val[0], v560.f64[0]), v1409.val[1], v560, 1);
    v568 = vmlaq_laneq_f64(vmulq_n_f64(v1429.val[0], v560.f64[0]), v1429.val[1], v560, 1);
    v569 = vmlaq_laneq_f64(vmulq_n_f64(v1378.val[0], v561.f64[0]), v1378.val[1], v561, 1);
    v570 = vmlaq_laneq_f64(vmulq_n_f64(v1409.val[0], v561.f64[0]), v1409.val[1], v561, 1);
    v571 = vmlaq_laneq_f64(vmulq_n_f64(v1429.val[0], v561.f64[0]), v1429.val[1], v561, 1);
    v572 = vmlaq_laneq_f64(vmulq_n_f64(v1378.val[0], v562.f64[0]), v1378.val[1], v562, 1);
    v573 = vaddq_f64(*(float64x2_t *)(result + 32), v565);
    v574 = vaddq_f64(*(float64x2_t *)(result + 16), v564);
    v575 = vaddq_f64(*(float64x2_t *)(result + 80), v568);
    v576 = vaddq_f64(*(float64x2_t *)(result + 64), v567);
    v577 = vaddq_f64(*(float64x2_t *)(result + 48), v566);
    v578 = vaddq_f64(*(float64x2_t *)(result + 128), v571);
    v579 = vaddq_f64(*(float64x2_t *)(result + 112), v570);
    v580 = vaddq_f64(*(float64x2_t *)(result + 96), v569);
    v1378.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1429.val[0], v562.f64[0]), v1429.val[1], v562, 1));
    v1378.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1409.val[0], v562.f64[0]), v1409.val[1], v562, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v563);
    *(float64x2_t *)(result + 16) = v574;
    *(float64x2_t *)(result + 32) = v573;
    *(float64x2_t *)(result + 48) = v577;
    *(float64x2_t *)(result + 64) = v576;
    *(float64x2_t *)(result + 80) = v575;
    *(float64x2_t *)(result + 96) = v580;
    *(float64x2_t *)(result + 112) = v579;
    *(float64x2_t *)(result + 128) = v578;
    *(float64x2_t *)(result + 144) = vaddq_f64(v558, v572);
    *(float64x2x2_t *)(result + 160) = v1378;
    v488 = a2[24];
    v6 = *v5;
  }
  if (v488 && a2[64])
  {
    result = sub_20F9AC584(v6 + 13064, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 17));
    v1354 = vld2q_f64(v437);
    v1379 = vld2q_f64(v486);
    v1410 = vld2q_f64(v487);
    v581 = a3[40];
    v582 = a3[41];
    v583 = a3[42];
    v584 = vmlaq_laneq_f64(vmulq_n_f64(v1354.val[0], v581.f64[0]), v1354.val[1], v581, 1);
    v585 = vmlaq_laneq_f64(vmulq_n_f64(v1379.val[0], v581.f64[0]), v1379.val[1], v581, 1);
    v586 = vmlaq_laneq_f64(vmulq_n_f64(v1410.val[0], v581.f64[0]), v1410.val[1], v581, 1);
    v587 = vmlaq_laneq_f64(vmulq_n_f64(v1354.val[0], v582.f64[0]), v1354.val[1], v582, 1);
    v588 = vmlaq_laneq_f64(vmulq_n_f64(v1379.val[0], v582.f64[0]), v1379.val[1], v582, 1);
    v589 = vmlaq_laneq_f64(vmulq_n_f64(v1410.val[0], v582.f64[0]), v1410.val[1], v582, 1);
    v590 = vmlaq_laneq_f64(vmulq_n_f64(v1354.val[0], v583.f64[0]), v1354.val[1], v583, 1);
    v591 = vaddq_f64(*(float64x2_t *)(result + 32), v586);
    v592 = vaddq_f64(*(float64x2_t *)(result + 16), v585);
    v593 = vaddq_f64(*(float64x2_t *)(result + 80), v589);
    v594 = vaddq_f64(*(float64x2_t *)(result + 64), v588);
    v595 = vaddq_f64(*(float64x2_t *)(result + 48), v587);
    v1354.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1410.val[0], v583.f64[0]), v1410.val[1], v583, 1));
    v1354.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1379.val[0], v583.f64[0]), v1379.val[1], v583, 1));
    v1379.val[0] = vaddq_f64(*(float64x2_t *)(result + 96), v590);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v584);
    *(float64x2_t *)(result + 16) = v592;
    *(float64x2_t *)(result + 32) = v591;
    *(float64x2_t *)(result + 48) = v595;
    *(float64x2_t *)(result + 64) = v594;
    *(float64x2_t *)(result + 80) = v593;
    *(float64x2_t *)(result + 96) = v1379.val[0];
    *(float64x2x2_t *)(result + 112) = v1354;
    v488 = a2[24];
    v6 = *v5;
  }
  if (v488 && a2[72])
  {
    result = sub_20F9AC584(v6 + 13064, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 19));
    v1345 = vld2q_f64(v437);
    v1366 = vld2q_f64(v486);
    v1400 = vld2q_f64(v487);
    v596 = a3[43];
    v597 = a3[44];
    v598 = a3[45];
    v599 = vmlaq_laneq_f64(vmulq_n_f64(v1345.val[0], v596.f64[0]), v1345.val[1], v596, 1);
    v600 = vmlaq_laneq_f64(vmulq_n_f64(v1366.val[0], v596.f64[0]), v1366.val[1], v596, 1);
    v601 = vmlaq_laneq_f64(vmulq_n_f64(v1400.val[0], v596.f64[0]), v1400.val[1], v596, 1);
    v602 = vmlaq_laneq_f64(vmulq_n_f64(v1345.val[0], v597.f64[0]), v1345.val[1], v597, 1);
    v603 = vmlaq_laneq_f64(vmulq_n_f64(v1366.val[0], v597.f64[0]), v1366.val[1], v597, 1);
    v604 = vmlaq_laneq_f64(vmulq_n_f64(v1400.val[0], v597.f64[0]), v1400.val[1], v597, 1);
    v605 = vmlaq_laneq_f64(vmulq_n_f64(v1345.val[0], v598.f64[0]), v1345.val[1], v598, 1);
    v1345.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1366.val[0], v598.f64[0]), v1366.val[1], v598, 1);
    v606 = vaddq_f64(*(float64x2_t *)(result + 32), v601);
    v607 = vaddq_f64(*(float64x2_t *)(result + 16), v600);
    v1366.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v604);
    v1366.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v603);
    v608 = vaddq_f64(*(float64x2_t *)(result + 48), v602);
    v1345.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1400.val[0], v598.f64[0]), v1400.val[1], v598, 1));
    v1345.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v1345.val[0]);
    v609 = vaddq_f64(*(float64x2_t *)(result + 96), v605);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v599);
    *(float64x2_t *)(result + 16) = v607;
    *(float64x2_t *)(result + 32) = v606;
    *(float64x2_t *)(result + 48) = v608;
    *(float64x2_t *)(result + 64) = v1366.val[1];
    *(float64x2_t *)(result + 80) = v1366.val[0];
    *(float64x2_t *)(result + 96) = v609;
    *(float64x2x2_t *)(result + 112) = v1345;
    v6 = *v5;
  }
LABEL_103:
  v610 = a2[16];
  if (a2[16] && *a2)
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 1));
    v611 = a3[12].f64;
    v1329 = vld2q_f64(v611);
    v612 = a3[14].f64;
    v1346 = vld2q_f64(v612);
    v613 = a3[16].f64;
    v614 = a3[1];
    v615 = a3[2];
    v616 = a3[3];
    v617 = a3[4];
    v618 = a3[5];
    v619 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], a3->f64[0]), v1329.val[1], *a3, 1);
    v620 = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], a3->f64[0]), v1346.val[1], *a3, 1);
    v621 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], v614.f64[0]), v1329.val[1], v614, 1);
    v622 = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], v614.f64[0]), v1346.val[1], v614, 1);
    v623 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], v615.f64[0]), v1329.val[1], v615, 1);
    v624 = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], v615.f64[0]), v1346.val[1], v615, 1);
    v625 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], v616.f64[0]), v1329.val[1], v616, 1);
    v626 = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], v616.f64[0]), v1346.val[1], v616, 1);
    v627 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], v617.f64[0]), v1329.val[1], v617, 1);
    v628 = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], v617.f64[0]), v1346.val[1], v617, 1);
    v629 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[0], v618.f64[0]), v1329.val[1], v618, 1);
    v1329.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1346.val[0], v618.f64[0]), v1346.val[1], v618, 1);
    *(float64x2x2_t *)((char *)&v1329 + 16) = vld2q_f64(v613);
    v630 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], v614.f64[0]), v1346.val[0], v614, 1);
    v631 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], v615.f64[0]), v1346.val[0], v615, 1);
    v632 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], v616.f64[0]), v1346.val[0], v616, 1);
    v633 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], v617.f64[0]), v1346.val[0], v617, 1);
    v634 = vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], v618.f64[0]), v1346.val[0], v618, 1);
    v1329.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1329.val[1], a3->f64[0]), v1346.val[0], *a3, 1));
    v1346.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v620);
    v635 = vaddq_f64(*(float64x2_t *)result, v619);
    v636 = vaddq_f64(*(float64x2_t *)(result + 80), v630);
    v637 = vaddq_f64(*(float64x2_t *)(result + 64), v622);
    v1346.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v621);
    v638 = vaddq_f64(*(float64x2_t *)(result + 128), v631);
    v639 = vaddq_f64(*(float64x2_t *)(result + 112), v624);
    v640 = vaddq_f64(*(float64x2_t *)(result + 96), v623);
    v641 = vaddq_f64(*(float64x2_t *)(result + 176), v632);
    v642 = vaddq_f64(*(float64x2_t *)(result + 160), v626);
    v643 = vaddq_f64(*(float64x2_t *)(result + 144), v625);
    v644 = *(float64x2_t *)(result + 240);
    v645 = vaddq_f64(*(float64x2_t *)(result + 224), v633);
    v646 = vaddq_f64(*(float64x2_t *)(result + 208), v628);
    v647 = vaddq_f64(*(float64x2_t *)(result + 192), v627);
    v648 = vaddq_f64(*(float64x2_t *)(result + 272), v634);
    v1329.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1329.val[0]);
    *(float64x2_t *)result = v635;
    *(float64x2_t *)(result + 16) = v1346.val[1];
    *(float64x2_t *)(result + 32) = v1329.val[1];
    *(float64x2_t *)(result + 48) = v1346.val[0];
    *(float64x2_t *)(result + 64) = v637;
    *(float64x2_t *)(result + 80) = v636;
    *(float64x2_t *)(result + 96) = v640;
    *(float64x2_t *)(result + 112) = v639;
    *(float64x2_t *)(result + 128) = v638;
    *(float64x2_t *)(result + 144) = v643;
    *(float64x2_t *)(result + 160) = v642;
    *(float64x2_t *)(result + 176) = v641;
    *(float64x2_t *)(result + 192) = v647;
    *(float64x2_t *)(result + 208) = v646;
    *(float64x2_t *)(result + 224) = v645;
    *(float64x2_t *)(result + 240) = vaddq_f64(v644, v629);
    *(float64x2_t *)(result + 256) = v1329.val[0];
    *(float64x2_t *)(result + 272) = v648;
    v610 = a2[16];
    v6 = *v5;
  }
  if (v610 && a2[8])
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 3));
    v649 = a3[12].f64;
    v1330 = vld2q_f64(v649);
    v650 = a3[14].f64;
    v1347 = vld2q_f64(v650);
    v651 = a3[16].f64;
    v652 = a3[6];
    v653 = a3[7];
    v654 = a3[8];
    v655 = a3[9];
    v656 = a3[10];
    v657 = a3[11];
    v658 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v652.f64[0]), v1330.val[1], v652, 1);
    v659 = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v652.f64[0]), v1347.val[1], v652, 1);
    v660 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v653.f64[0]), v1330.val[1], v653, 1);
    v661 = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v653.f64[0]), v1347.val[1], v653, 1);
    v662 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v654.f64[0]), v1330.val[1], v654, 1);
    v663 = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v654.f64[0]), v1347.val[1], v654, 1);
    v664 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v655.f64[0]), v1330.val[1], v655, 1);
    v665 = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v655.f64[0]), v1347.val[1], v655, 1);
    v666 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v656.f64[0]), v1330.val[1], v656, 1);
    v667 = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v656.f64[0]), v1347.val[1], v656, 1);
    v668 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[0], v657.f64[0]), v1330.val[1], v657, 1);
    v1330.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1347.val[0], v657.f64[0]), v1347.val[1], v657, 1);
    *(float64x2x2_t *)((char *)&v1330 + 16) = vld2q_f64(v651);
    v1347.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v652.f64[0]), v1347.val[0], v652, 1);
    v669 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v653.f64[0]), v1347.val[0], v653, 1);
    v670 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v654.f64[0]), v1347.val[0], v654, 1);
    v671 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v655.f64[0]), v1347.val[0], v655, 1);
    v672 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v656.f64[0]), v1347.val[0], v656, 1);
    v673 = vmlaq_laneq_f64(vmulq_n_f64(v1330.val[1], v657.f64[0]), v1347.val[0], v657, 1);
    v1330.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1347.val[1]);
    v1347.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v659);
    v674 = vaddq_f64(*(float64x2_t *)result, v658);
    v675 = vaddq_f64(*(float64x2_t *)(result + 80), v669);
    v676 = vaddq_f64(*(float64x2_t *)(result + 64), v661);
    v1347.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v660);
    v677 = vaddq_f64(*(float64x2_t *)(result + 128), v670);
    v678 = vaddq_f64(*(float64x2_t *)(result + 112), v663);
    v679 = vaddq_f64(*(float64x2_t *)(result + 96), v662);
    v680 = vaddq_f64(*(float64x2_t *)(result + 176), v671);
    v681 = vaddq_f64(*(float64x2_t *)(result + 160), v665);
    v682 = vaddq_f64(*(float64x2_t *)(result + 144), v664);
    v683 = *(float64x2_t *)(result + 240);
    v684 = vaddq_f64(*(float64x2_t *)(result + 224), v672);
    v685 = vaddq_f64(*(float64x2_t *)(result + 208), v667);
    v686 = vaddq_f64(*(float64x2_t *)(result + 192), v666);
    v687 = vaddq_f64(*(float64x2_t *)(result + 272), v673);
    v1330.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1330.val[0]);
    *(float64x2_t *)result = v674;
    *(float64x2_t *)(result + 16) = v1347.val[1];
    *(float64x2_t *)(result + 32) = v1330.val[1];
    *(float64x2_t *)(result + 48) = v1347.val[0];
    *(float64x2_t *)(result + 64) = v676;
    *(float64x2_t *)(result + 80) = v675;
    *(float64x2_t *)(result + 96) = v679;
    *(float64x2_t *)(result + 112) = v678;
    *(float64x2_t *)(result + 128) = v677;
    *(float64x2_t *)(result + 144) = v682;
    *(float64x2_t *)(result + 160) = v681;
    *(float64x2_t *)(result + 176) = v680;
    *(float64x2_t *)(result + 192) = v686;
    *(float64x2_t *)(result + 208) = v685;
    *(float64x2_t *)(result + 224) = v684;
    *(float64x2_t *)(result + 240) = vaddq_f64(v683, v668);
    *(float64x2_t *)(result + 256) = v1330.val[0];
    *(float64x2_t *)(result + 272) = v687;
    v610 = a2[16];
    v6 = *v5;
  }
  if (v610)
  {
    result = sub_20F9AC33C(v6 + 104, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 5));
    v689 = a3[12];
    v690 = a3[13];
    v688 = a3[12].f64;
    v691 = a3[14].f64;
    v692 = a3[14];
    v693 = a3[15];
    v694 = a3[16].f64;
    v695 = a3[16];
    v696 = a3[17];
    v697 = (float64x2_t)vzip1q_s64((int64x2_t)v692, (int64x2_t)v693);
    v698 = (float64x2_t)vzip1q_s64((int64x2_t)v695, (int64x2_t)v696);
    *(_QWORD *)&v699.f64[0] = vdupq_laneq_s64((int64x2_t)v692, 1).u64[0];
    v699.f64[1] = a3[15].f64[1];
    *(_QWORD *)&v700.f64[0] = vdupq_laneq_s64((int64x2_t)v695, 1).u64[0];
    v700.f64[1] = a3[17].f64[1];
    v701 = (float64x2_t)vzip1q_s64((int64x2_t)v689, (int64x2_t)v690);
    v702 = (float64x2_t)vzip2q_s64((int64x2_t)v689, (int64x2_t)v690);
    v703 = vmlaq_laneq_f64(vmulq_n_f64(v701, v689.f64[0]), v702, v689, 1);
    v704 = vmlaq_laneq_f64(vmulq_n_f64(v697, v689.f64[0]), v699, v689, 1);
    v705 = vmlaq_laneq_f64(vmulq_n_f64(v698, v689.f64[0]), v700, v689, 1);
    v706 = vmlaq_laneq_f64(vmulq_n_f64(v701, v690.f64[0]), v702, v690, 1);
    v707 = vmlaq_laneq_f64(vmulq_n_f64(v697, v690.f64[0]), v699, v690, 1);
    v708 = vmlaq_laneq_f64(vmulq_n_f64(v698, v690.f64[0]), v700, v690, 1);
    v709 = vmlaq_laneq_f64(vmulq_n_f64(v701, v692.f64[0]), v702, v692, 1);
    v710 = vmlaq_laneq_f64(vmulq_n_f64(v697, v692.f64[0]), v699, v692, 1);
    v711 = vmlaq_laneq_f64(vmulq_n_f64(v698, v692.f64[0]), v700, v692, 1);
    v712 = vmlaq_laneq_f64(vmulq_n_f64(v701, v693.f64[0]), v702, v693, 1);
    v713 = vmlaq_laneq_f64(vmulq_n_f64(v697, v693.f64[0]), v699, v693, 1);
    v714 = vmlaq_laneq_f64(vmulq_n_f64(v698, v693.f64[0]), v700, v693, 1);
    v715 = vmlaq_laneq_f64(vmulq_n_f64(v701, v695.f64[0]), v702, v695, 1);
    v716 = vmlaq_laneq_f64(vmulq_n_f64(v697, v695.f64[0]), v699, v695, 1);
    v717 = vmlaq_laneq_f64(vmulq_n_f64(v698, v695.f64[0]), v700, v695, 1);
    v718 = vmlaq_laneq_f64(vmulq_n_f64(v701, v696.f64[0]), v702, v696, 1);
    v719 = vmlaq_laneq_f64(vmulq_n_f64(v697, v696.f64[0]), v699, v696, 1);
    v720 = vmlaq_laneq_f64(vmulq_n_f64(v698, v696.f64[0]), v700, v696, 1);
    v721 = vaddq_f64(*(float64x2_t *)(result + 32), v705);
    v722 = vaddq_f64(*(float64x2_t *)(result + 16), v704);
    v723 = vaddq_f64(*(float64x2_t *)result, v703);
    v724 = vaddq_f64(*(float64x2_t *)(result + 80), v708);
    v725 = vaddq_f64(*(float64x2_t *)(result + 64), v707);
    v726 = vaddq_f64(*(float64x2_t *)(result + 48), v706);
    v727 = vaddq_f64(*(float64x2_t *)(result + 128), v711);
    v728 = vaddq_f64(*(float64x2_t *)(result + 112), v710);
    v729 = vaddq_f64(*(float64x2_t *)(result + 96), v709);
    v730 = vaddq_f64(*(float64x2_t *)(result + 176), v714);
    v731 = vaddq_f64(*(float64x2_t *)(result + 160), v713);
    v732 = vaddq_f64(*(float64x2_t *)(result + 144), v712);
    v733 = *(float64x2_t *)(result + 240);
    v734 = vaddq_f64(*(float64x2_t *)(result + 224), v717);
    v735 = vaddq_f64(*(float64x2_t *)(result + 208), v716);
    v736 = vaddq_f64(*(float64x2_t *)(result + 192), v715);
    v737 = vaddq_f64(*(float64x2_t *)(result + 272), v720);
    v738 = vaddq_f64(*(float64x2_t *)(result + 256), v719);
    *(float64x2_t *)result = v723;
    *(float64x2_t *)(result + 16) = v722;
    *(float64x2_t *)(result + 32) = v721;
    *(float64x2_t *)(result + 48) = v726;
    *(float64x2_t *)(result + 64) = v725;
    *(float64x2_t *)(result + 80) = v724;
    *(float64x2_t *)(result + 96) = v729;
    *(float64x2_t *)(result + 112) = v728;
    *(float64x2_t *)(result + 128) = v727;
    *(float64x2_t *)(result + 144) = v732;
    *(float64x2_t *)(result + 160) = v731;
    *(float64x2_t *)(result + 176) = v730;
    *(float64x2_t *)(result + 192) = v736;
    *(float64x2_t *)(result + 208) = v735;
    *(float64x2_t *)(result + 224) = v734;
    *(float64x2_t *)(result + 240) = vaddq_f64(v733, v718);
    *(float64x2_t *)(result + 256) = v738;
    *(float64x2_t *)(result + 272) = v737;
    v6 = *v5;
    v739 = a2[16];
    if (a2[16] && a2[24])
    {
      v740 = *((_DWORD *)a2 + 5);
      v741 = *((_DWORD *)a2 + 7);
      if (v741 >= v740)
      {
        result = sub_20F9AC33C(v6 + 104, v740, v741);
        v1332 = vld2q_f64(v688);
        v1351 = vld2q_f64(v691);
        v1256 = a3[18];
        v1257 = a3[19];
        v1258 = a3[20];
        v1259 = a3[21];
        v1260 = a3[22];
        v1261 = a3[23];
        v1262 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1256.f64[0]), v1332.val[1], v1256, 1);
        v1263 = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1256.f64[0]), v1351.val[1], v1256, 1);
        v1264 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1257.f64[0]), v1332.val[1], v1257, 1);
        v1265 = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1257.f64[0]), v1351.val[1], v1257, 1);
        v1266 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1258.f64[0]), v1332.val[1], v1258, 1);
        v1267 = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1258.f64[0]), v1351.val[1], v1258, 1);
        v1268 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1259.f64[0]), v1332.val[1], v1259, 1);
        v1269 = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1259.f64[0]), v1351.val[1], v1259, 1);
        v1270 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1260.f64[0]), v1332.val[1], v1260, 1);
        v1271 = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1260.f64[0]), v1351.val[1], v1260, 1);
        v1272 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[0], v1261.f64[0]), v1332.val[1], v1261, 1);
        v1332.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1351.val[0], v1261.f64[0]), v1351.val[1], v1261, 1);
        *(float64x2x2_t *)((char *)&v1332 + 16) = vld2q_f64(v694);
        v1351.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1256.f64[0]), v1351.val[0], v1256, 1);
        v1273 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1257.f64[0]), v1351.val[0], v1257, 1);
        v1274 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1258.f64[0]), v1351.val[0], v1258, 1);
        v1275 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1259.f64[0]), v1351.val[0], v1259, 1);
        v1276 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1260.f64[0]), v1351.val[0], v1260, 1);
        v1277 = vmlaq_laneq_f64(vmulq_n_f64(v1332.val[1], v1261.f64[0]), v1351.val[0], v1261, 1);
        v1332.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v1351.val[1]);
        v1351.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v1263);
        v1278 = vaddq_f64(*(float64x2_t *)result, v1262);
        v1279 = vaddq_f64(*(float64x2_t *)(result + 80), v1273);
        v1280 = vaddq_f64(*(float64x2_t *)(result + 64), v1265);
        v1351.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v1264);
        v1281 = vaddq_f64(*(float64x2_t *)(result + 128), v1274);
        v1282 = vaddq_f64(*(float64x2_t *)(result + 112), v1267);
        v1283 = vaddq_f64(*(float64x2_t *)(result + 96), v1266);
        v1284 = vaddq_f64(*(float64x2_t *)(result + 176), v1275);
        v1285 = vaddq_f64(*(float64x2_t *)(result + 160), v1269);
        v1286 = vaddq_f64(*(float64x2_t *)(result + 144), v1268);
        v1287 = *(float64x2_t *)(result + 240);
        v1288 = vaddq_f64(*(float64x2_t *)(result + 224), v1276);
        v1289 = vaddq_f64(*(float64x2_t *)(result + 208), v1271);
        v1290 = vaddq_f64(*(float64x2_t *)(result + 192), v1270);
        v1291 = vaddq_f64(*(float64x2_t *)(result + 272), v1277);
        v1332.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1332.val[0]);
        *(float64x2_t *)result = v1278;
        *(float64x2_t *)(result + 16) = v1351.val[1];
        *(float64x2_t *)(result + 32) = v1332.val[1];
        *(float64x2_t *)(result + 48) = v1351.val[0];
        *(float64x2_t *)(result + 64) = v1280;
        *(float64x2_t *)(result + 80) = v1279;
        *(float64x2_t *)(result + 96) = v1283;
        *(float64x2_t *)(result + 112) = v1282;
        *(float64x2_t *)(result + 128) = v1281;
        *(float64x2_t *)(result + 144) = v1286;
        *(float64x2_t *)(result + 160) = v1285;
        *(float64x2_t *)(result + 176) = v1284;
        *(float64x2_t *)(result + 192) = v1290;
        *(float64x2_t *)(result + 208) = v1289;
        *(float64x2_t *)(result + 224) = v1288;
        *(float64x2_t *)(result + 240) = vaddq_f64(v1287, v1272);
        *(float64x2_t *)(result + 256) = v1332.val[0];
        *(float64x2_t *)(result + 272) = v1291;
        v739 = a2[16];
        v6 = *v5;
        if (a2[16])
        {
LABEL_115:
          if (a2[32])
          {
            result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 9));
            v1380 = vld2q_f64(v688);
            v742 = *(float64x2_t *)(result + 144);
            v1411 = vld2q_f64(v691);
            v1430 = vld2q_f64(v694);
            v743 = a3[24];
            v744 = a3[25];
            v745 = a3[26];
            v746 = a3[27];
            v747 = vmlaq_laneq_f64(vmulq_n_f64(v1380.val[0], v743.f64[0]), v1380.val[1], v743, 1);
            v748 = vmlaq_laneq_f64(vmulq_n_f64(v1411.val[0], v743.f64[0]), v1411.val[1], v743, 1);
            v749 = vmlaq_laneq_f64(vmulq_n_f64(v1430.val[0], v743.f64[0]), v1430.val[1], v743, 1);
            v750 = vmlaq_laneq_f64(vmulq_n_f64(v1380.val[0], v744.f64[0]), v1380.val[1], v744, 1);
            v751 = vmlaq_laneq_f64(vmulq_n_f64(v1411.val[0], v744.f64[0]), v1411.val[1], v744, 1);
            v752 = vmlaq_laneq_f64(vmulq_n_f64(v1430.val[0], v744.f64[0]), v1430.val[1], v744, 1);
            v753 = vmlaq_laneq_f64(vmulq_n_f64(v1380.val[0], v745.f64[0]), v1380.val[1], v745, 1);
            v754 = vmlaq_laneq_f64(vmulq_n_f64(v1411.val[0], v745.f64[0]), v1411.val[1], v745, 1);
            v755 = vmlaq_laneq_f64(vmulq_n_f64(v1430.val[0], v745.f64[0]), v1430.val[1], v745, 1);
            v756 = vmlaq_laneq_f64(vmulq_n_f64(v1380.val[0], v746.f64[0]), v1380.val[1], v746, 1);
            v757 = vaddq_f64(*(float64x2_t *)(result + 32), v749);
            v758 = vaddq_f64(*(float64x2_t *)(result + 16), v748);
            v759 = vaddq_f64(*(float64x2_t *)(result + 80), v752);
            v760 = vaddq_f64(*(float64x2_t *)(result + 64), v751);
            v761 = vaddq_f64(*(float64x2_t *)(result + 48), v750);
            v762 = vaddq_f64(*(float64x2_t *)(result + 128), v755);
            v763 = vaddq_f64(*(float64x2_t *)(result + 112), v754);
            v764 = vaddq_f64(*(float64x2_t *)(result + 96), v753);
            v1380.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1430.val[0], v746.f64[0]), v1430.val[1], v746, 1));
            v1380.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1411.val[0], v746.f64[0]), v1411.val[1], v746, 1));
            *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v747);
            *(float64x2_t *)(result + 16) = v758;
            *(float64x2_t *)(result + 32) = v757;
            *(float64x2_t *)(result + 48) = v761;
            *(float64x2_t *)(result + 64) = v760;
            *(float64x2_t *)(result + 80) = v759;
            *(float64x2_t *)(result + 96) = v764;
            *(float64x2_t *)(result + 112) = v763;
            *(float64x2_t *)(result + 128) = v762;
            *(float64x2_t *)(result + 144) = vaddq_f64(v742, v756);
            *(float64x2x2_t *)(result + 160) = v1380;
            v739 = a2[16];
            v6 = *v5;
          }
        }
LABEL_117:
        if (v739 && a2[40])
        {
          result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 11));
          v1381 = vld2q_f64(v688);
          v765 = *(float64x2_t *)(result + 144);
          v1412 = vld2q_f64(v691);
          v1431 = vld2q_f64(v694);
          v766 = a3[28];
          v767 = a3[29];
          v768 = a3[30];
          v769 = a3[31];
          v770 = vmlaq_laneq_f64(vmulq_n_f64(v1381.val[0], v766.f64[0]), v1381.val[1], v766, 1);
          v771 = vmlaq_laneq_f64(vmulq_n_f64(v1412.val[0], v766.f64[0]), v1412.val[1], v766, 1);
          v772 = vmlaq_laneq_f64(vmulq_n_f64(v1431.val[0], v766.f64[0]), v1431.val[1], v766, 1);
          v773 = vmlaq_laneq_f64(vmulq_n_f64(v1381.val[0], v767.f64[0]), v1381.val[1], v767, 1);
          v774 = vmlaq_laneq_f64(vmulq_n_f64(v1412.val[0], v767.f64[0]), v1412.val[1], v767, 1);
          v775 = vmlaq_laneq_f64(vmulq_n_f64(v1431.val[0], v767.f64[0]), v1431.val[1], v767, 1);
          v776 = vmlaq_laneq_f64(vmulq_n_f64(v1381.val[0], v768.f64[0]), v1381.val[1], v768, 1);
          v777 = vmlaq_laneq_f64(vmulq_n_f64(v1412.val[0], v768.f64[0]), v1412.val[1], v768, 1);
          v778 = vmlaq_laneq_f64(vmulq_n_f64(v1431.val[0], v768.f64[0]), v1431.val[1], v768, 1);
          v779 = vmlaq_laneq_f64(vmulq_n_f64(v1381.val[0], v769.f64[0]), v1381.val[1], v769, 1);
          v780 = vaddq_f64(*(float64x2_t *)(result + 32), v772);
          v781 = vaddq_f64(*(float64x2_t *)(result + 16), v771);
          v782 = vaddq_f64(*(float64x2_t *)(result + 80), v775);
          v783 = vaddq_f64(*(float64x2_t *)(result + 64), v774);
          v784 = vaddq_f64(*(float64x2_t *)(result + 48), v773);
          v785 = vaddq_f64(*(float64x2_t *)(result + 128), v778);
          v786 = vaddq_f64(*(float64x2_t *)(result + 112), v777);
          v787 = vaddq_f64(*(float64x2_t *)(result + 96), v776);
          v1381.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1431.val[0], v769.f64[0]), v1431.val[1], v769, 1));
          v1381.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1412.val[0], v769.f64[0]), v1412.val[1], v769, 1));
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v770);
          *(float64x2_t *)(result + 16) = v781;
          *(float64x2_t *)(result + 32) = v780;
          *(float64x2_t *)(result + 48) = v784;
          *(float64x2_t *)(result + 64) = v783;
          *(float64x2_t *)(result + 80) = v782;
          *(float64x2_t *)(result + 96) = v787;
          *(float64x2_t *)(result + 112) = v786;
          *(float64x2_t *)(result + 128) = v785;
          *(float64x2_t *)(result + 144) = vaddq_f64(v765, v779);
          *(float64x2x2_t *)(result + 160) = v1381;
          v739 = a2[16];
          v6 = *v5;
        }
        if (v739 && a2[48])
        {
          result = sub_20F9AC460(v6 + 11624, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 13));
          v1382 = vld2q_f64(v688);
          v788 = *(float64x2_t *)(result + 144);
          v1413 = vld2q_f64(v691);
          v1432 = vld2q_f64(v694);
          v789 = a3[32];
          v790 = a3[33];
          v791 = a3[34];
          v792 = a3[35];
          v793 = vmlaq_laneq_f64(vmulq_n_f64(v1382.val[0], v789.f64[0]), v1382.val[1], v789, 1);
          v794 = vmlaq_laneq_f64(vmulq_n_f64(v1413.val[0], v789.f64[0]), v1413.val[1], v789, 1);
          v795 = vmlaq_laneq_f64(vmulq_n_f64(v1432.val[0], v789.f64[0]), v1432.val[1], v789, 1);
          v796 = vmlaq_laneq_f64(vmulq_n_f64(v1382.val[0], v790.f64[0]), v1382.val[1], v790, 1);
          v797 = vmlaq_laneq_f64(vmulq_n_f64(v1413.val[0], v790.f64[0]), v1413.val[1], v790, 1);
          v798 = vmlaq_laneq_f64(vmulq_n_f64(v1432.val[0], v790.f64[0]), v1432.val[1], v790, 1);
          v799 = vmlaq_laneq_f64(vmulq_n_f64(v1382.val[0], v791.f64[0]), v1382.val[1], v791, 1);
          v800 = vmlaq_laneq_f64(vmulq_n_f64(v1413.val[0], v791.f64[0]), v1413.val[1], v791, 1);
          v801 = vmlaq_laneq_f64(vmulq_n_f64(v1432.val[0], v791.f64[0]), v1432.val[1], v791, 1);
          v802 = vmlaq_laneq_f64(vmulq_n_f64(v1382.val[0], v792.f64[0]), v1382.val[1], v792, 1);
          v803 = vaddq_f64(*(float64x2_t *)(result + 32), v795);
          v804 = vaddq_f64(*(float64x2_t *)(result + 16), v794);
          v805 = vaddq_f64(*(float64x2_t *)(result + 80), v798);
          v806 = vaddq_f64(*(float64x2_t *)(result + 64), v797);
          v807 = vaddq_f64(*(float64x2_t *)(result + 48), v796);
          v808 = vaddq_f64(*(float64x2_t *)(result + 128), v801);
          v809 = vaddq_f64(*(float64x2_t *)(result + 112), v800);
          v810 = vaddq_f64(*(float64x2_t *)(result + 96), v799);
          v1382.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1432.val[0], v792.f64[0]), v1432.val[1], v792, 1));
          v1382.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1413.val[0], v792.f64[0]), v1413.val[1], v792, 1));
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v793);
          *(float64x2_t *)(result + 16) = v804;
          *(float64x2_t *)(result + 32) = v803;
          *(float64x2_t *)(result + 48) = v807;
          *(float64x2_t *)(result + 64) = v806;
          *(float64x2_t *)(result + 80) = v805;
          *(float64x2_t *)(result + 96) = v810;
          *(float64x2_t *)(result + 112) = v809;
          *(float64x2_t *)(result + 128) = v808;
          *(float64x2_t *)(result + 144) = vaddq_f64(v788, v802);
          *(float64x2x2_t *)(result + 160) = v1382;
          v739 = a2[16];
          v6 = *v5;
        }
        if (v739 && a2[56])
        {
          result = sub_20F9AC460(v6 + 11624, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 15));
          v1383 = vld2q_f64(v688);
          v811 = *(float64x2_t *)(result + 144);
          v1414 = vld2q_f64(v691);
          v1433 = vld2q_f64(v694);
          v812 = a3[36];
          v813 = a3[37];
          v814 = a3[38];
          v815 = a3[39];
          v816 = vmlaq_laneq_f64(vmulq_n_f64(v1383.val[0], v812.f64[0]), v1383.val[1], v812, 1);
          v817 = vmlaq_laneq_f64(vmulq_n_f64(v1414.val[0], v812.f64[0]), v1414.val[1], v812, 1);
          v818 = vmlaq_laneq_f64(vmulq_n_f64(v1433.val[0], v812.f64[0]), v1433.val[1], v812, 1);
          v819 = vmlaq_laneq_f64(vmulq_n_f64(v1383.val[0], v813.f64[0]), v1383.val[1], v813, 1);
          v820 = vmlaq_laneq_f64(vmulq_n_f64(v1414.val[0], v813.f64[0]), v1414.val[1], v813, 1);
          v821 = vmlaq_laneq_f64(vmulq_n_f64(v1433.val[0], v813.f64[0]), v1433.val[1], v813, 1);
          v822 = vmlaq_laneq_f64(vmulq_n_f64(v1383.val[0], v814.f64[0]), v1383.val[1], v814, 1);
          v823 = vmlaq_laneq_f64(vmulq_n_f64(v1414.val[0], v814.f64[0]), v1414.val[1], v814, 1);
          v824 = vmlaq_laneq_f64(vmulq_n_f64(v1433.val[0], v814.f64[0]), v1433.val[1], v814, 1);
          v825 = vmlaq_laneq_f64(vmulq_n_f64(v1383.val[0], v815.f64[0]), v1383.val[1], v815, 1);
          v826 = vaddq_f64(*(float64x2_t *)(result + 32), v818);
          v827 = vaddq_f64(*(float64x2_t *)(result + 16), v817);
          v828 = vaddq_f64(*(float64x2_t *)(result + 80), v821);
          v829 = vaddq_f64(*(float64x2_t *)(result + 64), v820);
          v830 = vaddq_f64(*(float64x2_t *)(result + 48), v819);
          v831 = vaddq_f64(*(float64x2_t *)(result + 128), v824);
          v832 = vaddq_f64(*(float64x2_t *)(result + 112), v823);
          v833 = vaddq_f64(*(float64x2_t *)(result + 96), v822);
          v1383.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1433.val[0], v815.f64[0]), v1433.val[1], v815, 1));
          v1383.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1414.val[0], v815.f64[0]), v1414.val[1], v815, 1));
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v816);
          *(float64x2_t *)(result + 16) = v827;
          *(float64x2_t *)(result + 32) = v826;
          *(float64x2_t *)(result + 48) = v830;
          *(float64x2_t *)(result + 64) = v829;
          *(float64x2_t *)(result + 80) = v828;
          *(float64x2_t *)(result + 96) = v833;
          *(float64x2_t *)(result + 112) = v832;
          *(float64x2_t *)(result + 128) = v831;
          *(float64x2_t *)(result + 144) = vaddq_f64(v811, v825);
          *(float64x2x2_t *)(result + 160) = v1383;
          v739 = a2[16];
          v6 = *v5;
        }
        if (v739 && a2[64])
        {
          result = sub_20F9AC584(v6 + 13064, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 17));
          v1355 = vld2q_f64(v688);
          v1384 = vld2q_f64(v691);
          v1415 = vld2q_f64(v694);
          v834 = a3[40];
          v835 = a3[41];
          v836 = a3[42];
          v837 = vmlaq_laneq_f64(vmulq_n_f64(v1355.val[0], v834.f64[0]), v1355.val[1], v834, 1);
          v838 = vmlaq_laneq_f64(vmulq_n_f64(v1384.val[0], v834.f64[0]), v1384.val[1], v834, 1);
          v839 = vmlaq_laneq_f64(vmulq_n_f64(v1415.val[0], v834.f64[0]), v1415.val[1], v834, 1);
          v840 = vmlaq_laneq_f64(vmulq_n_f64(v1355.val[0], v835.f64[0]), v1355.val[1], v835, 1);
          v841 = vmlaq_laneq_f64(vmulq_n_f64(v1384.val[0], v835.f64[0]), v1384.val[1], v835, 1);
          v842 = vmlaq_laneq_f64(vmulq_n_f64(v1415.val[0], v835.f64[0]), v1415.val[1], v835, 1);
          v843 = vmlaq_laneq_f64(vmulq_n_f64(v1355.val[0], v836.f64[0]), v1355.val[1], v836, 1);
          v844 = vaddq_f64(*(float64x2_t *)(result + 32), v839);
          v845 = vaddq_f64(*(float64x2_t *)(result + 16), v838);
          v846 = vaddq_f64(*(float64x2_t *)(result + 80), v842);
          v847 = vaddq_f64(*(float64x2_t *)(result + 64), v841);
          v848 = vaddq_f64(*(float64x2_t *)(result + 48), v840);
          v1355.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1415.val[0], v836.f64[0]), v1415.val[1], v836, 1));
          v1355.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1384.val[0], v836.f64[0]), v1384.val[1], v836, 1));
          v1384.val[0] = vaddq_f64(*(float64x2_t *)(result + 96), v843);
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v837);
          *(float64x2_t *)(result + 16) = v845;
          *(float64x2_t *)(result + 32) = v844;
          *(float64x2_t *)(result + 48) = v848;
          *(float64x2_t *)(result + 64) = v847;
          *(float64x2_t *)(result + 80) = v846;
          *(float64x2_t *)(result + 96) = v1384.val[0];
          *(float64x2x2_t *)(result + 112) = v1355;
          v739 = a2[16];
          v6 = *v5;
        }
        if (v739 && a2[72])
        {
          result = sub_20F9AC584(v6 + 13064, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 19));
          v1348 = vld2q_f64(v688);
          v1367 = vld2q_f64(v691);
          v1401 = vld2q_f64(v694);
          v849 = a3[43];
          v850 = a3[44];
          v851 = a3[45];
          v852 = vmlaq_laneq_f64(vmulq_n_f64(v1348.val[0], v849.f64[0]), v1348.val[1], v849, 1);
          v853 = vmlaq_laneq_f64(vmulq_n_f64(v1367.val[0], v849.f64[0]), v1367.val[1], v849, 1);
          v854 = vmlaq_laneq_f64(vmulq_n_f64(v1401.val[0], v849.f64[0]), v1401.val[1], v849, 1);
          v855 = vmlaq_laneq_f64(vmulq_n_f64(v1348.val[0], v850.f64[0]), v1348.val[1], v850, 1);
          v856 = vmlaq_laneq_f64(vmulq_n_f64(v1367.val[0], v850.f64[0]), v1367.val[1], v850, 1);
          v857 = vmlaq_laneq_f64(vmulq_n_f64(v1401.val[0], v850.f64[0]), v1401.val[1], v850, 1);
          v858 = vmlaq_laneq_f64(vmulq_n_f64(v1348.val[0], v851.f64[0]), v1348.val[1], v851, 1);
          v1348.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1367.val[0], v851.f64[0]), v1367.val[1], v851, 1);
          v859 = vaddq_f64(*(float64x2_t *)(result + 32), v854);
          v860 = vaddq_f64(*(float64x2_t *)(result + 16), v853);
          v1367.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v857);
          v1367.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v856);
          v861 = vaddq_f64(*(float64x2_t *)(result + 48), v855);
          v1348.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1401.val[0], v851.f64[0]), v1401.val[1], v851, 1));
          v1348.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v1348.val[0]);
          v862 = vaddq_f64(*(float64x2_t *)(result + 96), v858);
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v852);
          *(float64x2_t *)(result + 16) = v860;
          *(float64x2_t *)(result + 32) = v859;
          *(float64x2_t *)(result + 48) = v861;
          *(float64x2_t *)(result + 64) = v1367.val[1];
          *(float64x2_t *)(result + 80) = v1367.val[0];
          *(float64x2_t *)(result + 96) = v862;
          *(float64x2x2_t *)(result + 112) = v1348;
          v6 = *v5;
        }
        goto LABEL_132;
      }
      v739 = 1;
    }
    if (v739)
      goto LABEL_115;
    goto LABEL_117;
  }
LABEL_132:
  v863 = a2[8];
  if (a2[8] && *a2)
  {
    v864 = *((_DWORD *)a2 + 3);
    v865 = *((_DWORD *)a2 + 1);
    if (v865 < v864)
      goto LABEL_138;
    result = sub_20F9AC33C(v6 + 3272, v864, v865);
    v866 = a3[6].f64;
    v1331 = vld2q_f64(v866);
    v867 = a3[8].f64;
    v1349 = vld2q_f64(v867);
    v868 = a3[10].f64;
    v869 = a3[1];
    v870 = a3[2];
    v871 = a3[3];
    v872 = a3[4];
    v873 = a3[5];
    v874 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], a3->f64[0]), v1331.val[1], *a3, 1);
    v875 = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], a3->f64[0]), v1349.val[1], *a3, 1);
    v876 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], v869.f64[0]), v1331.val[1], v869, 1);
    v877 = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], v869.f64[0]), v1349.val[1], v869, 1);
    v878 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], v870.f64[0]), v1331.val[1], v870, 1);
    v879 = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], v870.f64[0]), v1349.val[1], v870, 1);
    v880 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], v871.f64[0]), v1331.val[1], v871, 1);
    v881 = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], v871.f64[0]), v1349.val[1], v871, 1);
    v882 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], v872.f64[0]), v1331.val[1], v872, 1);
    v883 = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], v872.f64[0]), v1349.val[1], v872, 1);
    v884 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[0], v873.f64[0]), v1331.val[1], v873, 1);
    v1331.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1349.val[0], v873.f64[0]), v1349.val[1], v873, 1);
    *(float64x2x2_t *)((char *)&v1331 + 16) = vld2q_f64(v868);
    v885 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], v869.f64[0]), v1349.val[0], v869, 1);
    v886 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], v870.f64[0]), v1349.val[0], v870, 1);
    v887 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], v871.f64[0]), v1349.val[0], v871, 1);
    v888 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], v872.f64[0]), v1349.val[0], v872, 1);
    v889 = vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], v873.f64[0]), v1349.val[0], v873, 1);
    v1331.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1331.val[1], a3->f64[0]), v1349.val[0], *a3, 1));
    v1349.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v875);
    v890 = vaddq_f64(*(float64x2_t *)result, v874);
    v891 = vaddq_f64(*(float64x2_t *)(result + 80), v885);
    v892 = vaddq_f64(*(float64x2_t *)(result + 64), v877);
    v1349.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v876);
    v893 = vaddq_f64(*(float64x2_t *)(result + 128), v886);
    v894 = vaddq_f64(*(float64x2_t *)(result + 112), v879);
    v895 = vaddq_f64(*(float64x2_t *)(result + 96), v878);
    v896 = vaddq_f64(*(float64x2_t *)(result + 176), v887);
    v897 = vaddq_f64(*(float64x2_t *)(result + 160), v881);
    v898 = vaddq_f64(*(float64x2_t *)(result + 144), v880);
    v899 = *(float64x2_t *)(result + 240);
    v900 = vaddq_f64(*(float64x2_t *)(result + 224), v888);
    v901 = vaddq_f64(*(float64x2_t *)(result + 208), v883);
    v902 = vaddq_f64(*(float64x2_t *)(result + 192), v882);
    v903 = vaddq_f64(*(float64x2_t *)(result + 272), v889);
    v1331.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v1331.val[0]);
    *(float64x2_t *)result = v890;
    *(float64x2_t *)(result + 16) = v1349.val[1];
    *(float64x2_t *)(result + 32) = v1331.val[1];
    *(float64x2_t *)(result + 48) = v1349.val[0];
    *(float64x2_t *)(result + 64) = v892;
    *(float64x2_t *)(result + 80) = v891;
    *(float64x2_t *)(result + 96) = v895;
    *(float64x2_t *)(result + 112) = v894;
    *(float64x2_t *)(result + 128) = v893;
    *(float64x2_t *)(result + 144) = v898;
    *(float64x2_t *)(result + 160) = v897;
    *(float64x2_t *)(result + 176) = v896;
    *(float64x2_t *)(result + 192) = v902;
    *(float64x2_t *)(result + 208) = v901;
    *(float64x2_t *)(result + 224) = v900;
    *(float64x2_t *)(result + 240) = vaddq_f64(v899, v884);
    *(float64x2_t *)(result + 256) = v1331.val[0];
    *(float64x2_t *)(result + 272) = v903;
    v863 = a2[8];
    v6 = *v5;
  }
  if (!v863)
    goto LABEL_156;
  v864 = *((_DWORD *)a2 + 3);
LABEL_138:
  result = sub_20F9AC33C(v6 + 3272, v864, v864);
  v905 = a3[6];
  v906 = a3[7];
  v904 = a3[6].f64;
  v907 = a3[8].f64;
  v908 = a3[8];
  v909 = a3[9];
  v910 = a3[10].f64;
  v911 = a3[10];
  v912 = a3[11];
  v913 = (float64x2_t)vzip1q_s64((int64x2_t)v908, (int64x2_t)v909);
  v914 = (float64x2_t)vzip1q_s64((int64x2_t)v911, (int64x2_t)v912);
  *(_QWORD *)&v915.f64[0] = vdupq_laneq_s64((int64x2_t)v908, 1).u64[0];
  v915.f64[1] = a3[9].f64[1];
  *(_QWORD *)&v916.f64[0] = vdupq_laneq_s64((int64x2_t)v911, 1).u64[0];
  v916.f64[1] = a3[11].f64[1];
  v917 = (float64x2_t)vzip1q_s64((int64x2_t)v905, (int64x2_t)v906);
  v918 = (float64x2_t)vzip2q_s64((int64x2_t)v905, (int64x2_t)v906);
  v919 = vmlaq_laneq_f64(vmulq_n_f64(v917, v905.f64[0]), v918, v905, 1);
  v920 = vmlaq_laneq_f64(vmulq_n_f64(v913, v905.f64[0]), v915, v905, 1);
  v921 = vmlaq_laneq_f64(vmulq_n_f64(v914, v905.f64[0]), v916, v905, 1);
  v922 = vmlaq_laneq_f64(vmulq_n_f64(v917, v906.f64[0]), v918, v906, 1);
  v923 = vmlaq_laneq_f64(vmulq_n_f64(v913, v906.f64[0]), v915, v906, 1);
  v924 = vmlaq_laneq_f64(vmulq_n_f64(v914, v906.f64[0]), v916, v906, 1);
  v925 = vmlaq_laneq_f64(vmulq_n_f64(v917, v908.f64[0]), v918, v908, 1);
  v926 = vmlaq_laneq_f64(vmulq_n_f64(v913, v908.f64[0]), v915, v908, 1);
  v927 = vmlaq_laneq_f64(vmulq_n_f64(v914, v908.f64[0]), v916, v908, 1);
  v928 = vmlaq_laneq_f64(vmulq_n_f64(v917, v909.f64[0]), v918, v909, 1);
  v929 = vmlaq_laneq_f64(vmulq_n_f64(v913, v909.f64[0]), v915, v909, 1);
  v930 = vmlaq_laneq_f64(vmulq_n_f64(v914, v909.f64[0]), v916, v909, 1);
  v931 = vmlaq_laneq_f64(vmulq_n_f64(v917, v911.f64[0]), v918, v911, 1);
  v932 = vmlaq_laneq_f64(vmulq_n_f64(v913, v911.f64[0]), v915, v911, 1);
  v933 = vmlaq_laneq_f64(vmulq_n_f64(v914, v911.f64[0]), v916, v911, 1);
  v934 = vmlaq_laneq_f64(vmulq_n_f64(v917, v912.f64[0]), v918, v912, 1);
  v935 = vmlaq_laneq_f64(vmulq_n_f64(v913, v912.f64[0]), v915, v912, 1);
  v936 = vmlaq_laneq_f64(vmulq_n_f64(v914, v912.f64[0]), v916, v912, 1);
  v937 = vaddq_f64(*(float64x2_t *)(result + 32), v921);
  v938 = vaddq_f64(*(float64x2_t *)(result + 16), v920);
  v939 = vaddq_f64(*(float64x2_t *)result, v919);
  v940 = vaddq_f64(*(float64x2_t *)(result + 80), v924);
  v941 = vaddq_f64(*(float64x2_t *)(result + 64), v923);
  v942 = vaddq_f64(*(float64x2_t *)(result + 48), v922);
  v943 = vaddq_f64(*(float64x2_t *)(result + 128), v927);
  v944 = vaddq_f64(*(float64x2_t *)(result + 112), v926);
  v945 = vaddq_f64(*(float64x2_t *)(result + 96), v925);
  v946 = vaddq_f64(*(float64x2_t *)(result + 176), v930);
  v947 = vaddq_f64(*(float64x2_t *)(result + 160), v929);
  v948 = vaddq_f64(*(float64x2_t *)(result + 144), v928);
  v949 = *(float64x2_t *)(result + 240);
  v950 = vaddq_f64(*(float64x2_t *)(result + 224), v933);
  v951 = vaddq_f64(*(float64x2_t *)(result + 208), v932);
  v952 = vaddq_f64(*(float64x2_t *)(result + 192), v931);
  v953 = vaddq_f64(*(float64x2_t *)(result + 272), v936);
  v954 = vaddq_f64(*(float64x2_t *)(result + 256), v935);
  *(float64x2_t *)result = v939;
  *(float64x2_t *)(result + 16) = v938;
  *(float64x2_t *)(result + 32) = v937;
  *(float64x2_t *)(result + 48) = v942;
  *(float64x2_t *)(result + 64) = v941;
  *(float64x2_t *)(result + 80) = v940;
  *(float64x2_t *)(result + 96) = v945;
  *(float64x2_t *)(result + 112) = v944;
  *(float64x2_t *)(result + 128) = v943;
  *(float64x2_t *)(result + 144) = v948;
  *(float64x2_t *)(result + 160) = v947;
  *(float64x2_t *)(result + 176) = v946;
  *(float64x2_t *)(result + 192) = v952;
  *(float64x2_t *)(result + 208) = v951;
  *(float64x2_t *)(result + 224) = v950;
  *(float64x2_t *)(result + 240) = vaddq_f64(v949, v934);
  *(float64x2_t *)(result + 256) = v954;
  *(float64x2_t *)(result + 272) = v953;
  v955 = a2[8];
  v6 = *v5;
  if (a2[8] && a2[32])
  {
    result = sub_20F9AC460(v6 + 10472, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 9));
    v1385 = vld2q_f64(v904);
    v956 = *(float64x2_t *)(result + 144);
    v1416 = vld2q_f64(v907);
    v1434 = vld2q_f64(v910);
    v957 = a3[24];
    v958 = a3[25];
    v959 = a3[26];
    v960 = a3[27];
    v961 = vmlaq_laneq_f64(vmulq_n_f64(v1385.val[0], v957.f64[0]), v1385.val[1], v957, 1);
    v962 = vmlaq_laneq_f64(vmulq_n_f64(v1416.val[0], v957.f64[0]), v1416.val[1], v957, 1);
    v963 = vmlaq_laneq_f64(vmulq_n_f64(v1434.val[0], v957.f64[0]), v1434.val[1], v957, 1);
    v964 = vmlaq_laneq_f64(vmulq_n_f64(v1385.val[0], v958.f64[0]), v1385.val[1], v958, 1);
    v965 = vmlaq_laneq_f64(vmulq_n_f64(v1416.val[0], v958.f64[0]), v1416.val[1], v958, 1);
    v966 = vmlaq_laneq_f64(vmulq_n_f64(v1434.val[0], v958.f64[0]), v1434.val[1], v958, 1);
    v967 = vmlaq_laneq_f64(vmulq_n_f64(v1385.val[0], v959.f64[0]), v1385.val[1], v959, 1);
    v968 = vmlaq_laneq_f64(vmulq_n_f64(v1416.val[0], v959.f64[0]), v1416.val[1], v959, 1);
    v969 = vmlaq_laneq_f64(vmulq_n_f64(v1434.val[0], v959.f64[0]), v1434.val[1], v959, 1);
    v970 = vmlaq_laneq_f64(vmulq_n_f64(v1385.val[0], v960.f64[0]), v1385.val[1], v960, 1);
    v971 = vaddq_f64(*(float64x2_t *)(result + 32), v963);
    v972 = vaddq_f64(*(float64x2_t *)(result + 16), v962);
    v973 = vaddq_f64(*(float64x2_t *)(result + 80), v966);
    v974 = vaddq_f64(*(float64x2_t *)(result + 64), v965);
    v975 = vaddq_f64(*(float64x2_t *)(result + 48), v964);
    v976 = vaddq_f64(*(float64x2_t *)(result + 128), v969);
    v977 = vaddq_f64(*(float64x2_t *)(result + 112), v968);
    v978 = vaddq_f64(*(float64x2_t *)(result + 96), v967);
    v1385.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1434.val[0], v960.f64[0]), v1434.val[1], v960, 1));
    v1385.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1416.val[0], v960.f64[0]), v1416.val[1], v960, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v961);
    *(float64x2_t *)(result + 16) = v972;
    *(float64x2_t *)(result + 32) = v971;
    *(float64x2_t *)(result + 48) = v975;
    *(float64x2_t *)(result + 64) = v974;
    *(float64x2_t *)(result + 80) = v973;
    *(float64x2_t *)(result + 96) = v978;
    *(float64x2_t *)(result + 112) = v977;
    *(float64x2_t *)(result + 128) = v976;
    *(float64x2_t *)(result + 144) = vaddq_f64(v956, v970);
    *(float64x2x2_t *)(result + 160) = v1385;
    v955 = a2[8];
    v6 = *v5;
  }
  if (v955 && a2[40])
  {
    result = sub_20F9AC460(v6 + 10472, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 11));
    v1386 = vld2q_f64(v904);
    v979 = *(float64x2_t *)(result + 144);
    v1417 = vld2q_f64(v907);
    v1435 = vld2q_f64(v910);
    v980 = a3[28];
    v981 = a3[29];
    v982 = a3[30];
    v983 = a3[31];
    v984 = vmlaq_laneq_f64(vmulq_n_f64(v1386.val[0], v980.f64[0]), v1386.val[1], v980, 1);
    v985 = vmlaq_laneq_f64(vmulq_n_f64(v1417.val[0], v980.f64[0]), v1417.val[1], v980, 1);
    v986 = vmlaq_laneq_f64(vmulq_n_f64(v1435.val[0], v980.f64[0]), v1435.val[1], v980, 1);
    v987 = vmlaq_laneq_f64(vmulq_n_f64(v1386.val[0], v981.f64[0]), v1386.val[1], v981, 1);
    v988 = vmlaq_laneq_f64(vmulq_n_f64(v1417.val[0], v981.f64[0]), v1417.val[1], v981, 1);
    v989 = vmlaq_laneq_f64(vmulq_n_f64(v1435.val[0], v981.f64[0]), v1435.val[1], v981, 1);
    v990 = vmlaq_laneq_f64(vmulq_n_f64(v1386.val[0], v982.f64[0]), v1386.val[1], v982, 1);
    v991 = vmlaq_laneq_f64(vmulq_n_f64(v1417.val[0], v982.f64[0]), v1417.val[1], v982, 1);
    v992 = vmlaq_laneq_f64(vmulq_n_f64(v1435.val[0], v982.f64[0]), v1435.val[1], v982, 1);
    v993 = vmlaq_laneq_f64(vmulq_n_f64(v1386.val[0], v983.f64[0]), v1386.val[1], v983, 1);
    v994 = vaddq_f64(*(float64x2_t *)(result + 32), v986);
    v995 = vaddq_f64(*(float64x2_t *)(result + 16), v985);
    v996 = vaddq_f64(*(float64x2_t *)(result + 80), v989);
    v997 = vaddq_f64(*(float64x2_t *)(result + 64), v988);
    v998 = vaddq_f64(*(float64x2_t *)(result + 48), v987);
    v999 = vaddq_f64(*(float64x2_t *)(result + 128), v992);
    v1000 = vaddq_f64(*(float64x2_t *)(result + 112), v991);
    v1001 = vaddq_f64(*(float64x2_t *)(result + 96), v990);
    v1386.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1435.val[0], v983.f64[0]), v1435.val[1], v983, 1));
    v1386.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1417.val[0], v983.f64[0]), v1417.val[1], v983, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v984);
    *(float64x2_t *)(result + 16) = v995;
    *(float64x2_t *)(result + 32) = v994;
    *(float64x2_t *)(result + 48) = v998;
    *(float64x2_t *)(result + 64) = v997;
    *(float64x2_t *)(result + 80) = v996;
    *(float64x2_t *)(result + 96) = v1001;
    *(float64x2_t *)(result + 112) = v1000;
    *(float64x2_t *)(result + 128) = v999;
    *(float64x2_t *)(result + 144) = vaddq_f64(v979, v993);
    *(float64x2x2_t *)(result + 160) = v1386;
    v955 = a2[8];
    v6 = *v5;
  }
  if (v955 && a2[48])
  {
    result = sub_20F9AC460(v6 + 11912, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 13));
    v1387 = vld2q_f64(v904);
    v1002 = *(float64x2_t *)(result + 144);
    v1418 = vld2q_f64(v907);
    v1436 = vld2q_f64(v910);
    v1003 = a3[32];
    v1004 = a3[33];
    v1005 = a3[34];
    v1006 = a3[35];
    v1007 = vmlaq_laneq_f64(vmulq_n_f64(v1387.val[0], v1003.f64[0]), v1387.val[1], v1003, 1);
    v1008 = vmlaq_laneq_f64(vmulq_n_f64(v1418.val[0], v1003.f64[0]), v1418.val[1], v1003, 1);
    v1009 = vmlaq_laneq_f64(vmulq_n_f64(v1436.val[0], v1003.f64[0]), v1436.val[1], v1003, 1);
    v1010 = vmlaq_laneq_f64(vmulq_n_f64(v1387.val[0], v1004.f64[0]), v1387.val[1], v1004, 1);
    v1011 = vmlaq_laneq_f64(vmulq_n_f64(v1418.val[0], v1004.f64[0]), v1418.val[1], v1004, 1);
    v1012 = vmlaq_laneq_f64(vmulq_n_f64(v1436.val[0], v1004.f64[0]), v1436.val[1], v1004, 1);
    v1013 = vmlaq_laneq_f64(vmulq_n_f64(v1387.val[0], v1005.f64[0]), v1387.val[1], v1005, 1);
    v1014 = vmlaq_laneq_f64(vmulq_n_f64(v1418.val[0], v1005.f64[0]), v1418.val[1], v1005, 1);
    v1015 = vmlaq_laneq_f64(vmulq_n_f64(v1436.val[0], v1005.f64[0]), v1436.val[1], v1005, 1);
    v1016 = vmlaq_laneq_f64(vmulq_n_f64(v1387.val[0], v1006.f64[0]), v1387.val[1], v1006, 1);
    v1017 = vaddq_f64(*(float64x2_t *)(result + 32), v1009);
    v1018 = vaddq_f64(*(float64x2_t *)(result + 16), v1008);
    v1019 = vaddq_f64(*(float64x2_t *)(result + 80), v1012);
    v1020 = vaddq_f64(*(float64x2_t *)(result + 64), v1011);
    v1021 = vaddq_f64(*(float64x2_t *)(result + 48), v1010);
    v1022 = vaddq_f64(*(float64x2_t *)(result + 128), v1015);
    v1023 = vaddq_f64(*(float64x2_t *)(result + 112), v1014);
    v1024 = vaddq_f64(*(float64x2_t *)(result + 96), v1013);
    v1387.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1436.val[0], v1006.f64[0]), v1436.val[1], v1006, 1));
    v1387.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1418.val[0], v1006.f64[0]), v1418.val[1], v1006, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1007);
    *(float64x2_t *)(result + 16) = v1018;
    *(float64x2_t *)(result + 32) = v1017;
    *(float64x2_t *)(result + 48) = v1021;
    *(float64x2_t *)(result + 64) = v1020;
    *(float64x2_t *)(result + 80) = v1019;
    *(float64x2_t *)(result + 96) = v1024;
    *(float64x2_t *)(result + 112) = v1023;
    *(float64x2_t *)(result + 128) = v1022;
    *(float64x2_t *)(result + 144) = vaddq_f64(v1002, v1016);
    *(float64x2x2_t *)(result + 160) = v1387;
    v955 = a2[8];
    v6 = *v5;
  }
  if (v955 && a2[56])
  {
    result = sub_20F9AC460(v6 + 11912, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 15));
    v1388 = vld2q_f64(v904);
    v1025 = *(float64x2_t *)(result + 144);
    v1419 = vld2q_f64(v907);
    v1437 = vld2q_f64(v910);
    v1026 = a3[36];
    v1027 = a3[37];
    v1028 = a3[38];
    v1029 = a3[39];
    v1030 = vmlaq_laneq_f64(vmulq_n_f64(v1388.val[0], v1026.f64[0]), v1388.val[1], v1026, 1);
    v1031 = vmlaq_laneq_f64(vmulq_n_f64(v1419.val[0], v1026.f64[0]), v1419.val[1], v1026, 1);
    v1032 = vmlaq_laneq_f64(vmulq_n_f64(v1437.val[0], v1026.f64[0]), v1437.val[1], v1026, 1);
    v1033 = vmlaq_laneq_f64(vmulq_n_f64(v1388.val[0], v1027.f64[0]), v1388.val[1], v1027, 1);
    v1034 = vmlaq_laneq_f64(vmulq_n_f64(v1419.val[0], v1027.f64[0]), v1419.val[1], v1027, 1);
    v1035 = vmlaq_laneq_f64(vmulq_n_f64(v1437.val[0], v1027.f64[0]), v1437.val[1], v1027, 1);
    v1036 = vmlaq_laneq_f64(vmulq_n_f64(v1388.val[0], v1028.f64[0]), v1388.val[1], v1028, 1);
    v1037 = vmlaq_laneq_f64(vmulq_n_f64(v1419.val[0], v1028.f64[0]), v1419.val[1], v1028, 1);
    v1038 = vmlaq_laneq_f64(vmulq_n_f64(v1437.val[0], v1028.f64[0]), v1437.val[1], v1028, 1);
    v1039 = vmlaq_laneq_f64(vmulq_n_f64(v1388.val[0], v1029.f64[0]), v1388.val[1], v1029, 1);
    v1040 = vaddq_f64(*(float64x2_t *)(result + 32), v1032);
    v1041 = vaddq_f64(*(float64x2_t *)(result + 16), v1031);
    v1042 = vaddq_f64(*(float64x2_t *)(result + 80), v1035);
    v1043 = vaddq_f64(*(float64x2_t *)(result + 64), v1034);
    v1044 = vaddq_f64(*(float64x2_t *)(result + 48), v1033);
    v1045 = vaddq_f64(*(float64x2_t *)(result + 128), v1038);
    v1046 = vaddq_f64(*(float64x2_t *)(result + 112), v1037);
    v1047 = vaddq_f64(*(float64x2_t *)(result + 96), v1036);
    v1388.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1437.val[0], v1029.f64[0]), v1437.val[1], v1029, 1));
    v1388.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1419.val[0], v1029.f64[0]), v1419.val[1], v1029, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1030);
    *(float64x2_t *)(result + 16) = v1041;
    *(float64x2_t *)(result + 32) = v1040;
    *(float64x2_t *)(result + 48) = v1044;
    *(float64x2_t *)(result + 64) = v1043;
    *(float64x2_t *)(result + 80) = v1042;
    *(float64x2_t *)(result + 96) = v1047;
    *(float64x2_t *)(result + 112) = v1046;
    *(float64x2_t *)(result + 128) = v1045;
    *(float64x2_t *)(result + 144) = vaddq_f64(v1025, v1039);
    *(float64x2x2_t *)(result + 160) = v1388;
    v955 = a2[8];
    v6 = *v5;
  }
  if (v955 && a2[64])
  {
    result = sub_20F9AC584(v6 + 13352, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 17));
    v1356 = vld2q_f64(v904);
    v1389 = vld2q_f64(v907);
    v1420 = vld2q_f64(v910);
    v1048 = a3[40];
    v1049 = a3[41];
    v1050 = a3[42];
    v1051 = vmlaq_laneq_f64(vmulq_n_f64(v1356.val[0], v1048.f64[0]), v1356.val[1], v1048, 1);
    v1052 = vmlaq_laneq_f64(vmulq_n_f64(v1389.val[0], v1048.f64[0]), v1389.val[1], v1048, 1);
    v1053 = vmlaq_laneq_f64(vmulq_n_f64(v1420.val[0], v1048.f64[0]), v1420.val[1], v1048, 1);
    v1054 = vmlaq_laneq_f64(vmulq_n_f64(v1356.val[0], v1049.f64[0]), v1356.val[1], v1049, 1);
    v1055 = vmlaq_laneq_f64(vmulq_n_f64(v1389.val[0], v1049.f64[0]), v1389.val[1], v1049, 1);
    v1056 = vmlaq_laneq_f64(vmulq_n_f64(v1420.val[0], v1049.f64[0]), v1420.val[1], v1049, 1);
    v1057 = vmlaq_laneq_f64(vmulq_n_f64(v1356.val[0], v1050.f64[0]), v1356.val[1], v1050, 1);
    v1058 = vaddq_f64(*(float64x2_t *)(result + 32), v1053);
    v1059 = vaddq_f64(*(float64x2_t *)(result + 16), v1052);
    v1060 = vaddq_f64(*(float64x2_t *)(result + 80), v1056);
    v1061 = vaddq_f64(*(float64x2_t *)(result + 64), v1055);
    v1062 = vaddq_f64(*(float64x2_t *)(result + 48), v1054);
    v1356.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1420.val[0], v1050.f64[0]), v1420.val[1], v1050, 1));
    v1356.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1389.val[0], v1050.f64[0]), v1389.val[1], v1050, 1));
    v1389.val[0] = vaddq_f64(*(float64x2_t *)(result + 96), v1057);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1051);
    *(float64x2_t *)(result + 16) = v1059;
    *(float64x2_t *)(result + 32) = v1058;
    *(float64x2_t *)(result + 48) = v1062;
    *(float64x2_t *)(result + 64) = v1061;
    *(float64x2_t *)(result + 80) = v1060;
    *(float64x2_t *)(result + 96) = v1389.val[0];
    *(float64x2x2_t *)(result + 112) = v1356;
    v955 = a2[8];
    v6 = *v5;
  }
  if (v955 && a2[72])
  {
    result = sub_20F9AC584(v6 + 13352, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 19));
    v1350 = vld2q_f64(v904);
    v1368 = vld2q_f64(v907);
    v1402 = vld2q_f64(v910);
    v1063 = a3[43];
    v1064 = a3[44];
    v1065 = a3[45];
    v1066 = vmlaq_laneq_f64(vmulq_n_f64(v1350.val[0], v1063.f64[0]), v1350.val[1], v1063, 1);
    v1067 = vmlaq_laneq_f64(vmulq_n_f64(v1368.val[0], v1063.f64[0]), v1368.val[1], v1063, 1);
    v1068 = vmlaq_laneq_f64(vmulq_n_f64(v1402.val[0], v1063.f64[0]), v1402.val[1], v1063, 1);
    v1069 = vmlaq_laneq_f64(vmulq_n_f64(v1350.val[0], v1064.f64[0]), v1350.val[1], v1064, 1);
    v1070 = vmlaq_laneq_f64(vmulq_n_f64(v1368.val[0], v1064.f64[0]), v1368.val[1], v1064, 1);
    v1071 = vmlaq_laneq_f64(vmulq_n_f64(v1402.val[0], v1064.f64[0]), v1402.val[1], v1064, 1);
    v1072 = vmlaq_laneq_f64(vmulq_n_f64(v1350.val[0], v1065.f64[0]), v1350.val[1], v1065, 1);
    v1350.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1368.val[0], v1065.f64[0]), v1368.val[1], v1065, 1);
    v1073 = vaddq_f64(*(float64x2_t *)(result + 32), v1068);
    v1074 = vaddq_f64(*(float64x2_t *)(result + 16), v1067);
    v1368.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v1071);
    v1368.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v1070);
    v1075 = vaddq_f64(*(float64x2_t *)(result + 48), v1069);
    v1350.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1402.val[0], v1065.f64[0]), v1402.val[1], v1065, 1));
    v1350.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v1350.val[0]);
    v1076 = vaddq_f64(*(float64x2_t *)(result + 96), v1072);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1066);
    *(float64x2_t *)(result + 16) = v1074;
    *(float64x2_t *)(result + 32) = v1073;
    *(float64x2_t *)(result + 48) = v1075;
    *(float64x2_t *)(result + 64) = v1368.val[1];
    *(float64x2_t *)(result + 80) = v1368.val[0];
    *(float64x2_t *)(result + 96) = v1076;
    *(float64x2x2_t *)(result + 112) = v1350;
    v6 = *v5;
  }
LABEL_156:
  if (!*a2)
    return result;
  result = sub_20F9AC33C(v6 + 3272, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 1));
  v1077 = a3[1];
  v1078 = a3[2].f64;
  v1079 = a3[2];
  v1080 = a3[3];
  v1081 = a3[4].f64;
  v1082 = a3[4];
  v1083 = a3[5];
  v1084 = (float64x2_t)vzip1q_s64((int64x2_t)v1079, (int64x2_t)v1080);
  *(_QWORD *)&v1085.f64[0] = vdupq_laneq_s64((int64x2_t)v1079, 1).u64[0];
  v1085.f64[1] = a3[3].f64[1];
  *(_QWORD *)&v1086.f64[0] = vdupq_laneq_s64((int64x2_t)v1082, 1).u64[0];
  v1087 = (float64x2_t)vzip1q_s64((int64x2_t)v1082, (int64x2_t)v1083);
  v1086.f64[1] = a3[5].f64[1];
  v1088 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)v1077);
  v1089 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)v1077);
  v1090 = vmlaq_laneq_f64(vmulq_n_f64(v1084, a3->f64[0]), v1085, *a3, 1);
  v1091 = vmlaq_laneq_f64(vmulq_n_f64(v1088, v1077.f64[0]), v1089, v1077, 1);
  v1092 = vmlaq_laneq_f64(vmulq_n_f64(v1084, v1077.f64[0]), v1085, v1077, 1);
  v1093 = vmlaq_laneq_f64(vmulq_n_f64(v1087, v1077.f64[0]), v1086, v1077, 1);
  v1094 = vmlaq_laneq_f64(vmulq_n_f64(v1088, v1079.f64[0]), v1089, v1079, 1);
  v1095 = vmlaq_laneq_f64(vmulq_n_f64(v1084, v1079.f64[0]), v1085, v1079, 1);
  v1096 = vmlaq_laneq_f64(vmulq_n_f64(v1087, v1079.f64[0]), v1086, v1079, 1);
  v1097 = vmlaq_laneq_f64(vmulq_n_f64(v1088, v1080.f64[0]), v1089, v1080, 1);
  v1098 = vmlaq_laneq_f64(vmulq_n_f64(v1084, v1080.f64[0]), v1085, v1080, 1);
  v1099 = vmlaq_laneq_f64(vmulq_n_f64(v1087, v1080.f64[0]), v1086, v1080, 1);
  v1100 = vmlaq_laneq_f64(vmulq_n_f64(v1088, v1082.f64[0]), v1089, v1082, 1);
  v1101 = vmlaq_laneq_f64(vmulq_n_f64(v1084, v1082.f64[0]), v1085, v1082, 1);
  v1102 = vmlaq_laneq_f64(vmulq_n_f64(v1087, v1082.f64[0]), v1086, v1082, 1);
  v1103 = vmlaq_laneq_f64(vmulq_n_f64(v1088, v1083.f64[0]), v1089, v1083, 1);
  v1104 = vmlaq_laneq_f64(vmulq_n_f64(v1084, v1083.f64[0]), v1085, v1083, 1);
  v1105 = vmlaq_laneq_f64(vmulq_n_f64(v1087, v1083.f64[0]), v1086, v1083, 1);
  v1106 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1087, a3->f64[0]), v1086, *a3, 1));
  v1107 = vaddq_f64(*(float64x2_t *)(result + 16), v1090);
  v1108 = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1088, a3->f64[0]), v1089, *a3, 1));
  v1109 = vaddq_f64(*(float64x2_t *)(result + 80), v1093);
  v1110 = vaddq_f64(*(float64x2_t *)(result + 64), v1092);
  v1111 = vaddq_f64(*(float64x2_t *)(result + 48), v1091);
  v1112 = vaddq_f64(*(float64x2_t *)(result + 128), v1096);
  v1113 = vaddq_f64(*(float64x2_t *)(result + 112), v1095);
  v1114 = vaddq_f64(*(float64x2_t *)(result + 96), v1094);
  v1115 = vaddq_f64(*(float64x2_t *)(result + 176), v1099);
  v1116 = vaddq_f64(*(float64x2_t *)(result + 160), v1098);
  v1117 = vaddq_f64(*(float64x2_t *)(result + 144), v1097);
  v1118 = *(float64x2_t *)(result + 240);
  v1119 = vaddq_f64(*(float64x2_t *)(result + 224), v1102);
  v1120 = vaddq_f64(*(float64x2_t *)(result + 208), v1101);
  v1121 = vaddq_f64(*(float64x2_t *)(result + 192), v1100);
  v1122 = vaddq_f64(*(float64x2_t *)(result + 272), v1105);
  v1123 = vaddq_f64(*(float64x2_t *)(result + 256), v1104);
  *(float64x2_t *)result = v1108;
  *(float64x2_t *)(result + 16) = v1107;
  *(float64x2_t *)(result + 32) = v1106;
  *(float64x2_t *)(result + 48) = v1111;
  *(float64x2_t *)(result + 64) = v1110;
  *(float64x2_t *)(result + 80) = v1109;
  *(float64x2_t *)(result + 96) = v1114;
  *(float64x2_t *)(result + 112) = v1113;
  *(float64x2_t *)(result + 128) = v1112;
  *(float64x2_t *)(result + 144) = v1117;
  *(float64x2_t *)(result + 160) = v1116;
  *(float64x2_t *)(result + 176) = v1115;
  *(float64x2_t *)(result + 192) = v1121;
  *(float64x2_t *)(result + 208) = v1120;
  *(float64x2_t *)(result + 224) = v1119;
  *(float64x2_t *)(result + 240) = vaddq_f64(v1118, v1103);
  *(float64x2_t *)(result + 256) = v1123;
  *(float64x2_t *)(result + 272) = v1122;
  v1124 = *a2;
  if (!*a2 || !a2[8])
  {
LABEL_161:
    if (v1124)
      goto LABEL_162;
    goto LABEL_164;
  }
  v1125 = *((_DWORD *)a2 + 1);
  v1126 = *((_DWORD *)a2 + 3);
  if (v1126 < v1125)
  {
    v1124 = 1;
    goto LABEL_161;
  }
  result = sub_20F9AC33C(*v5 + 3272, v1125, v1126);
  v1333 = vld2q_f64(v1078);
  v1352 = vld2q_f64(v1081);
  v1292 = a3[6];
  v1293 = a3[7];
  v1294 = a3[8];
  v1295 = a3[9];
  v1296 = a3[10];
  v1297 = a3[11];
  v1298 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1292.f64[0]), v1333.val[1], v1292, 1);
  v1299 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1292.f64[0]), v1352.val[1], v1292, 1);
  v1300 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1293.f64[0]), v1333.val[1], v1293, 1);
  v1301 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1293.f64[0]), v1352.val[1], v1293, 1);
  v1302 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1294.f64[0]), v1333.val[1], v1294, 1);
  v1303 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1294.f64[0]), v1352.val[1], v1294, 1);
  v1304 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1295.f64[0]), v1333.val[1], v1295, 1);
  v1305 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1295.f64[0]), v1352.val[1], v1295, 1);
  v1306 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1296.f64[0]), v1333.val[1], v1296, 1);
  v1307 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1296.f64[0]), v1352.val[1], v1296, 1);
  v1308 = vmlaq_laneq_f64(vmulq_n_f64(v1333.val[0], v1297.f64[0]), v1333.val[1], v1297, 1);
  v1333.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[0], v1297.f64[0]), v1352.val[1], v1297, 1);
  v1352.val[0] = a3[1];
  v1352.val[1] = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)v1352.val[0]);
  v1333.val[1] = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)v1352.val[0]);
  v1352.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1292.f64[0]), v1333.val[1], v1292, 1);
  v1309 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1293.f64[0]), v1333.val[1], v1293, 1);
  v1310 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1294.f64[0]), v1333.val[1], v1294, 1);
  v1311 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1295.f64[0]), v1333.val[1], v1295, 1);
  v1312 = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1296.f64[0]), v1333.val[1], v1296, 1);
  v1352.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1352.val[1], v1297.f64[0]), v1333.val[1], v1297, 1);
  v1333.val[1] = vaddq_f64(*(float64x2_t *)result, v1352.val[0]);
  v1352.val[0] = vaddq_f64(*(float64x2_t *)(result + 32), v1299);
  v1313 = vaddq_f64(*(float64x2_t *)(result + 16), v1298);
  v1314 = vaddq_f64(*(float64x2_t *)(result + 48), v1309);
  v1315 = vaddq_f64(*(float64x2_t *)(result + 80), v1301);
  v1316 = vaddq_f64(*(float64x2_t *)(result + 64), v1300);
  v1317 = vaddq_f64(*(float64x2_t *)(result + 96), v1310);
  v1318 = vaddq_f64(*(float64x2_t *)(result + 128), v1303);
  v1319 = vaddq_f64(*(float64x2_t *)(result + 112), v1302);
  v1320 = vaddq_f64(*(float64x2_t *)(result + 144), v1311);
  v1321 = vaddq_f64(*(float64x2_t *)(result + 176), v1305);
  v1322 = vaddq_f64(*(float64x2_t *)(result + 160), v1304);
  v1323 = vaddq_f64(*(float64x2_t *)(result + 192), v1312);
  v1324 = vaddq_f64(*(float64x2_t *)(result + 224), v1307);
  v1325 = vaddq_f64(*(float64x2_t *)(result + 208), v1306);
  v1352.val[1] = vaddq_f64(*(float64x2_t *)(result + 240), v1352.val[1]);
  v1333.val[0] = vaddq_f64(*(float64x2_t *)(result + 272), v1333.val[0]);
  *(float64x2_t *)result = v1333.val[1];
  *(float64x2_t *)(result + 16) = v1313;
  *(float64x2_t *)(result + 32) = v1352.val[0];
  *(float64x2_t *)(result + 48) = v1314;
  *(float64x2_t *)(result + 64) = v1316;
  *(float64x2_t *)(result + 80) = v1315;
  *(float64x2_t *)(result + 96) = v1317;
  *(float64x2_t *)(result + 112) = v1319;
  v1333.val[1] = vaddq_f64(*(float64x2_t *)(result + 256), v1308);
  *(float64x2_t *)(result + 128) = v1318;
  *(float64x2_t *)(result + 144) = v1320;
  *(float64x2_t *)(result + 160) = v1322;
  *(float64x2_t *)(result + 176) = v1321;
  *(float64x2_t *)(result + 192) = v1323;
  *(float64x2_t *)(result + 208) = v1325;
  *(float64x2_t *)(result + 224) = v1324;
  *(float64x2_t *)(result + 240) = v1352.val[1];
  *(float64x2_t *)(result + 256) = v1333.val[1];
  *(float64x2_t *)(result + 272) = v1333.val[0];
  v1124 = *a2;
  if (*a2)
  {
LABEL_162:
    if (a2[32])
    {
      result = sub_20F9AC460(*v5 + 10472, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 9));
      v1127 = *(float64x2_t *)(result + 144);
      v1421 = vld2q_f64(v1078);
      v1128 = (int64x2_t)a3[1];
      v1438 = vld2q_f64(v1081);
      v1129 = a3[24];
      v1130 = a3[25];
      v1131 = a3[26];
      v1132 = a3[27];
      v1133 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1128);
      v1134 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1128);
      v1135 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1438.val[0], v1129.f64[0]), v1438.val[1], v1129, 1));
      v1136 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1421.val[0], v1129.f64[0]), v1421.val[1], v1129, 1));
      v1137 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1438.val[0], v1130.f64[0]), v1438.val[1], v1130, 1));
      v1138 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1421.val[0], v1130.f64[0]), v1421.val[1], v1130, 1));
      v1139 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1133, v1130.f64[0]), v1134, v1130, 1));
      v1140 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1438.val[0], v1131.f64[0]), v1438.val[1], v1131, 1));
      v1141 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1421.val[0], v1131.f64[0]), v1421.val[1], v1131, 1));
      v1142 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1133, v1131.f64[0]), v1134, v1131, 1));
      v1143 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1438.val[0], v1132.f64[0]), v1438.val[1], v1132, 1));
      v1144 = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1421.val[0], v1132.f64[0]), v1421.val[1], v1132, 1));
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1133, v1129.f64[0]), v1134, v1129, 1));
      *(float64x2_t *)(result + 16) = v1136;
      *(float64x2_t *)(result + 32) = v1135;
      *(float64x2_t *)(result + 48) = v1139;
      *(float64x2_t *)(result + 64) = v1138;
      *(float64x2_t *)(result + 80) = v1137;
      *(float64x2_t *)(result + 96) = v1142;
      *(float64x2_t *)(result + 112) = v1141;
      *(float64x2_t *)(result + 128) = v1140;
      *(float64x2_t *)(result + 144) = vaddq_f64(v1127, vmlaq_laneq_f64(vmulq_n_f64(v1133, v1132.f64[0]), v1134, v1132, 1));
      *(float64x2_t *)(result + 160) = v1144;
      *(float64x2_t *)(result + 176) = v1143;
      v1124 = *a2;
    }
  }
LABEL_164:
  if (v1124 && a2[40])
  {
    result = sub_20F9AC460(*v5 + 10472, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 11));
    v1145 = *(float64x2_t *)(result + 144);
    v1422 = vld2q_f64(v1078);
    v1146 = (int64x2_t)a3[1];
    v1439 = vld2q_f64(v1081);
    v1147 = a3[28];
    v1148 = a3[29];
    v1149 = a3[30];
    v1150 = a3[31];
    v1151 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1146);
    v1152 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1146);
    v1153 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1439.val[0], v1147.f64[0]), v1439.val[1], v1147, 1));
    v1154 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1422.val[0], v1147.f64[0]), v1422.val[1], v1147, 1));
    v1155 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1439.val[0], v1148.f64[0]), v1439.val[1], v1148, 1));
    v1156 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1422.val[0], v1148.f64[0]), v1422.val[1], v1148, 1));
    v1157 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1151, v1148.f64[0]), v1152, v1148, 1));
    v1158 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1439.val[0], v1149.f64[0]), v1439.val[1], v1149, 1));
    v1159 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1422.val[0], v1149.f64[0]), v1422.val[1], v1149, 1));
    v1160 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1151, v1149.f64[0]), v1152, v1149, 1));
    v1161 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1439.val[0], v1150.f64[0]), v1439.val[1], v1150, 1));
    v1162 = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1422.val[0], v1150.f64[0]), v1422.val[1], v1150, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1151, v1147.f64[0]), v1152, v1147, 1));
    *(float64x2_t *)(result + 16) = v1154;
    *(float64x2_t *)(result + 32) = v1153;
    *(float64x2_t *)(result + 48) = v1157;
    *(float64x2_t *)(result + 64) = v1156;
    *(float64x2_t *)(result + 80) = v1155;
    *(float64x2_t *)(result + 96) = v1160;
    *(float64x2_t *)(result + 112) = v1159;
    *(float64x2_t *)(result + 128) = v1158;
    *(float64x2_t *)(result + 144) = vaddq_f64(v1145, vmlaq_laneq_f64(vmulq_n_f64(v1151, v1150.f64[0]), v1152, v1150, 1));
    *(float64x2_t *)(result + 160) = v1162;
    *(float64x2_t *)(result + 176) = v1161;
    v1124 = *a2;
  }
  if (v1124 && a2[48])
  {
    result = sub_20F9AC460(*v5 + 11912, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 13));
    v1163 = *(float64x2_t *)(result + 144);
    v1423 = vld2q_f64(v1078);
    v1164 = (int64x2_t)a3[1];
    v1440 = vld2q_f64(v1081);
    v1165 = a3[32];
    v1166 = a3[33];
    v1167 = a3[34];
    v1168 = a3[35];
    v1169 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1164);
    v1170 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1164);
    v1171 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1440.val[0], v1165.f64[0]), v1440.val[1], v1165, 1));
    v1172 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1423.val[0], v1165.f64[0]), v1423.val[1], v1165, 1));
    v1173 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1440.val[0], v1166.f64[0]), v1440.val[1], v1166, 1));
    v1174 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1423.val[0], v1166.f64[0]), v1423.val[1], v1166, 1));
    v1175 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1169, v1166.f64[0]), v1170, v1166, 1));
    v1176 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1440.val[0], v1167.f64[0]), v1440.val[1], v1167, 1));
    v1177 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1423.val[0], v1167.f64[0]), v1423.val[1], v1167, 1));
    v1178 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1169, v1167.f64[0]), v1170, v1167, 1));
    v1179 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1440.val[0], v1168.f64[0]), v1440.val[1], v1168, 1));
    v1180 = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1423.val[0], v1168.f64[0]), v1423.val[1], v1168, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1169, v1165.f64[0]), v1170, v1165, 1));
    *(float64x2_t *)(result + 16) = v1172;
    *(float64x2_t *)(result + 32) = v1171;
    *(float64x2_t *)(result + 48) = v1175;
    *(float64x2_t *)(result + 64) = v1174;
    *(float64x2_t *)(result + 80) = v1173;
    *(float64x2_t *)(result + 96) = v1178;
    *(float64x2_t *)(result + 112) = v1177;
    *(float64x2_t *)(result + 128) = v1176;
    *(float64x2_t *)(result + 144) = vaddq_f64(v1163, vmlaq_laneq_f64(vmulq_n_f64(v1169, v1168.f64[0]), v1170, v1168, 1));
    *(float64x2_t *)(result + 160) = v1180;
    *(float64x2_t *)(result + 176) = v1179;
    v1124 = *a2;
  }
  if (v1124 && a2[56])
  {
    result = sub_20F9AC460(*v5 + 11912, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 15));
    v1181 = *(float64x2_t *)(result + 144);
    v1424 = vld2q_f64(v1078);
    v1182 = (int64x2_t)a3[1];
    v1441 = vld2q_f64(v1081);
    v1183 = a3[36];
    v1184 = a3[37];
    v1185 = a3[38];
    v1186 = a3[39];
    v1187 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1182);
    v1188 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1182);
    v1189 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1441.val[0], v1183.f64[0]), v1441.val[1], v1183, 1));
    v1190 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1424.val[0], v1183.f64[0]), v1424.val[1], v1183, 1));
    v1191 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1441.val[0], v1184.f64[0]), v1441.val[1], v1184, 1));
    v1192 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1424.val[0], v1184.f64[0]), v1424.val[1], v1184, 1));
    v1193 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1187, v1184.f64[0]), v1188, v1184, 1));
    v1194 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1441.val[0], v1185.f64[0]), v1441.val[1], v1185, 1));
    v1195 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1424.val[0], v1185.f64[0]), v1424.val[1], v1185, 1));
    v1196 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1187, v1185.f64[0]), v1188, v1185, 1));
    v1197 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v1441.val[0], v1186.f64[0]), v1441.val[1], v1186, 1));
    v1198 = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v1424.val[0], v1186.f64[0]), v1424.val[1], v1186, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1187, v1183.f64[0]), v1188, v1183, 1));
    *(float64x2_t *)(result + 16) = v1190;
    *(float64x2_t *)(result + 32) = v1189;
    *(float64x2_t *)(result + 48) = v1193;
    *(float64x2_t *)(result + 64) = v1192;
    *(float64x2_t *)(result + 80) = v1191;
    *(float64x2_t *)(result + 96) = v1196;
    *(float64x2_t *)(result + 112) = v1195;
    *(float64x2_t *)(result + 128) = v1194;
    *(float64x2_t *)(result + 144) = vaddq_f64(v1181, vmlaq_laneq_f64(vmulq_n_f64(v1187, v1186.f64[0]), v1188, v1186, 1));
    *(float64x2_t *)(result + 160) = v1198;
    *(float64x2_t *)(result + 176) = v1197;
    v1124 = *a2;
  }
  if (v1124 && a2[64])
  {
    result = sub_20F9AC584(*v5 + 13352, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 17));
    v1393 = vld2q_f64(v1078);
    v1199 = (int64x2_t)a3[1];
    v1425 = vld2q_f64(v1081);
    v1200 = a3[40];
    v1201 = a3[41];
    v1202 = a3[42];
    v1203 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1199);
    v1204 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1199);
    v1205 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v1425.val[0], v1200.f64[0]), v1425.val[1], v1200, 1));
    v1206 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v1393.val[0], v1200.f64[0]), v1393.val[1], v1200, 1));
    v1207 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v1425.val[0], v1201.f64[0]), v1425.val[1], v1201, 1));
    v1208 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v1393.val[0], v1201.f64[0]), v1393.val[1], v1201, 1));
    v1209 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v1203, v1201.f64[0]), v1204, v1201, 1));
    v1210 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1425.val[0], v1202.f64[0]), v1425.val[1], v1202, 1));
    v1211 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v1393.val[0], v1202.f64[0]), v1393.val[1], v1202, 1));
    v1212 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v1203, v1202.f64[0]), v1204, v1202, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v1203, v1200.f64[0]), v1204, v1200, 1));
    *(float64x2_t *)(result + 16) = v1206;
    *(float64x2_t *)(result + 32) = v1205;
    *(float64x2_t *)(result + 48) = v1209;
    *(float64x2_t *)(result + 64) = v1208;
    *(float64x2_t *)(result + 80) = v1207;
    *(float64x2_t *)(result + 96) = v1212;
    *(float64x2_t *)(result + 112) = v1211;
    *(float64x2_t *)(result + 128) = v1210;
    v1124 = *a2;
  }
  if (v1124)
  {
    if (a2[72])
    {
      result = sub_20F9AC584(*v5 + 13352, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 19));
      v1213 = *(float64x2_t *)(result + 96);
      v1390 = vld2q_f64(v1078);
      v1405 = vld2q_f64(v1081);
      v1214 = (int64x2_t)a3[1];
      v1215 = a3[43];
      v1216 = a3[44];
      v1217 = a3[45];
      v1218 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v1214);
      v1219 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v1214);
      v1220 = vmlaq_laneq_f64(vmulq_n_f64(v1218, v1215.f64[0]), v1219, v1215, 1);
      v1221 = vmlaq_laneq_f64(vmulq_n_f64(v1390.val[0], v1215.f64[0]), v1390.val[1], v1215, 1);
      v1222 = vmlaq_laneq_f64(vmulq_n_f64(v1405.val[0], v1215.f64[0]), v1405.val[1], v1215, 1);
      v1223 = vmlaq_laneq_f64(vmulq_n_f64(v1218, v1216.f64[0]), v1219, v1216, 1);
      v1224 = vmlaq_laneq_f64(vmulq_n_f64(v1390.val[0], v1216.f64[0]), v1390.val[1], v1216, 1);
      v1225 = vmlaq_laneq_f64(vmulq_n_f64(v1405.val[0], v1216.f64[0]), v1405.val[1], v1216, 1);
      v1226 = vmlaq_laneq_f64(vmulq_n_f64(v1218, v1217.f64[0]), v1219, v1217, 1);
      v1227 = vmlaq_laneq_f64(vmulq_n_f64(v1390.val[0], v1217.f64[0]), v1390.val[1], v1217, 1);
      v1228 = vaddq_f64(*(float64x2_t *)(result + 32), v1222);
      v1229 = vaddq_f64(*(float64x2_t *)(result + 16), v1221);
      v1230 = vaddq_f64(*(float64x2_t *)(result + 80), v1225);
      v1231 = vaddq_f64(*(float64x2_t *)(result + 64), v1224);
      v1232 = vaddq_f64(*(float64x2_t *)(result + 48), v1223);
      v1390.val[0] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v1405.val[0], v1217.f64[0]), v1405.val[1], v1217, 1));
      v1233 = vaddq_f64(*(float64x2_t *)(result + 112), v1227);
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v1220);
      *(float64x2_t *)(result + 16) = v1229;
      *(float64x2_t *)(result + 32) = v1228;
      *(float64x2_t *)(result + 48) = v1232;
      *(float64x2_t *)(result + 64) = v1231;
      *(float64x2_t *)(result + 80) = v1230;
      *(float64x2_t *)(result + 96) = vaddq_f64(v1213, v1226);
      *(float64x2_t *)(result + 112) = v1233;
      *(float64x2_t *)(result + 128) = v1390.val[0];
    }
  }
  return result;
}

BOOL sub_20FAF8DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 v7;
  double v8;
  uint64_t v9;
  double *v10;
  int v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t *v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  float64_t v40;

  v6 = a1 + 152;
  v7 = sub_20FC7E7B4(a1, (_QWORD *)(a1 + 56), (double *)(a1 + 152), a3);
  *(_BYTE *)(a1 + 168) = v7;
  v8 = 0.0;
  if (v7)
  {
    v9 = *(_QWORD *)(a1 + 176);
    if (v9)
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v9 + 24))(v9, v6, 0.0);
      v10 = *(double **)(a1 + 176);
      v11 = (*(uint64_t (**)(double *))(*(_QWORD *)v10 + 16))(v10);
      switch(v11)
      {
        case 0:
        case 1:
        case 2:
          v14 = v10[2];
          goto LABEL_6;
        case 4:
          (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
          v14 = v40;
LABEL_6:
          v13 = *(float64x2_t *)a3;
          v15 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v14);
          v16 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v14);
          v12 = vmulq_n_f64(*(float64x2_t *)a3, v14);
          *(float64x2_t *)a3 = v12;
          *(float64x2_t *)(a3 + 16) = v16;
          *(float64x2_t *)(a3 + 32) = v15;
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
        case 1:
        case 2:
          v17 = v10[2];
          goto LABEL_10;
        case 4:
          (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
          v17 = v40;
LABEL_10:
          v13 = *(float64x2_t *)(a3 + 48);
          v18 = vmulq_n_f64(*(float64x2_t *)(a3 + 80), v17);
          v19 = vmulq_n_f64(*(float64x2_t *)(a3 + 64), v17);
          v12 = vmulq_n_f64(v13, v17);
          *(float64x2_t *)(a3 + 48) = v12;
          *(float64x2_t *)(a3 + 64) = v19;
          *(float64x2_t *)(a3 + 80) = v18;
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
        case 1:
        case 2:
          v20 = v10[2];
          goto LABEL_14;
        case 4:
          (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
          v20 = v40;
LABEL_14:
          v13 = *(float64x2_t *)(a3 + 96);
          v21 = vmulq_n_f64(*(float64x2_t *)(a3 + 128), v20);
          v22 = vmulq_n_f64(*(float64x2_t *)(a3 + 112), v20);
          v12 = vmulq_n_f64(v13, v20);
          *(float64x2_t *)(a3 + 96) = v12;
          *(float64x2_t *)(a3 + 112) = v22;
          *(float64x2_t *)(a3 + 128) = v21;
          break;
        default:
          break;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v23 = v10[2];
            goto LABEL_19;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v23 = v40;
LABEL_19:
            v13 = *(float64x2_t *)(a3 + 144);
            v24 = vmulq_n_f64(*(float64x2_t *)(a3 + 176), v23);
            v25 = vmulq_n_f64(*(float64x2_t *)(a3 + 160), v23);
            v12 = vmulq_n_f64(v13, v23);
            *(float64x2_t *)(a3 + 144) = v12;
            *(float64x2_t *)(a3 + 160) = v25;
            *(float64x2_t *)(a3 + 176) = v24;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v26 = v10[2];
            goto LABEL_24;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v26 = v40;
LABEL_24:
            v13 = *(float64x2_t *)(a3 + 192);
            v27 = vmulq_n_f64(*(float64x2_t *)(a3 + 208), v26);
            v12 = vmulq_n_f64(v13, v26);
            *(float64x2_t *)(a3 + 192) = v12;
            *(float64x2_t *)(a3 + 208) = v27;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v28 = v10[2];
            goto LABEL_29;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v28 = v40;
LABEL_29:
            v13 = *(float64x2_t *)(a3 + 224);
            v29 = vmulq_n_f64(*(float64x2_t *)(a3 + 240), v28);
            v12 = vmulq_n_f64(v13, v28);
            *(float64x2_t *)(a3 + 224) = v12;
            *(float64x2_t *)(a3 + 240) = v29;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v30 = v10[2];
            goto LABEL_34;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v30 = v40;
LABEL_34:
            v13 = *(float64x2_t *)(a3 + 256);
            v31 = vmulq_n_f64(*(float64x2_t *)(a3 + 272), v30);
            v12 = vmulq_n_f64(v13, v30);
            *(float64x2_t *)(a3 + 256) = v12;
            *(float64x2_t *)(a3 + 272) = v31;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 112) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v32 = v10[2];
            goto LABEL_39;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v32 = v40;
LABEL_39:
            v13 = *(float64x2_t *)(a3 + 288);
            v33 = vmulq_n_f64(*(float64x2_t *)(a3 + 304), v32);
            v12 = vmulq_n_f64(v13, v32);
            *(float64x2_t *)(a3 + 288) = v12;
            *(float64x2_t *)(a3 + 304) = v33;
            break;
          default:
            break;
        }
      }
      v34 = (float64x2_t *)(a3 + 320);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 120) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v12.f64[0] = v10[2];
            goto LABEL_44;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v12.f64[0] = v40;
LABEL_44:
            v13.f64[0] = *(float64_t *)(a3 + 336);
            v13 = vmulq_f64(v13, v12);
            v12 = vmulq_n_f64(*v34, v12.f64[0]);
            *v34 = v12;
            *(float64_t *)(a3 + 336) = v13.f64[0];
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
      {
        switch(v11)
        {
          case 0:
          case 1:
          case 2:
            v12.f64[0] = v10[2];
            goto LABEL_49;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v12.f64[0] = v40;
LABEL_49:
            v13.f64[0] = *(float64_t *)(a3 + 360);
            *(float64x2_t *)(a3 + 344) = vmulq_n_f64(*(float64x2_t *)(a3 + 344), v12.f64[0]);
            *(_QWORD *)(a3 + 360) = *(_OWORD *)&vmulq_f64(v13, v12);
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 136) + 20))
      {
        v35 = (double *)(a3 + 368);
        switch(v11)
        {
          case 0:
            v36 = *v35;
            v37 = v10[2];
            goto LABEL_57;
          case 1:
            v36 = *v35;
            v37 = *v35;
            if (v10 + 2 != v35)
            {
              *v35 = 0.0;
              v37 = v10[2];
            }
            goto LABEL_57;
          case 2:
            v36 = v10[2];
            v37 = *v35;
            goto LABEL_57;
          case 4:
            (*(void (**)(float64_t *__return_ptr, double *))(*(_QWORD *)v10 + 56))(&v40, v10);
            v36 = *v35;
            v37 = v40;
LABEL_57:
            *v35 = v36 * v37;
            break;
          default:
            break;
        }
      }
    }
    v38 = *(double *)(a1 + 152);
    *(double *)(a1 + 144) = v38;
    v8 = *(double *)(a2 + 8) * (v38 * v38);
  }
  *(double *)(a1 + 160) = v8;
  return v7;
}

uint64_t sub_20FAF92D0(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  unsigned int v45;
  unsigned int v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  int v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  double v89;
  double v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  double v99;
  double v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  float64x2_t v118;
  float64x2_t v119;
  double v120;
  double v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  double v130;
  double v131;
  double v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  float64x2_t v141;
  float64x2_t v142;
  double v143;
  double v144;
  double v145;
  double v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  int v163;
  float64x2_t v164;
  float64x2_t v165;
  double v166;
  double v167;
  double v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  double v179;
  double v180;
  double v181;
  double v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  double v192;
  double v193;
  double v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  double v202;
  double v203;
  double v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  float64x2_t v222;
  float64x2_t v223;
  double v224;
  double v225;
  double v226;
  double v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  double v237;
  double v238;
  double v239;
  double v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  double v250;
  double v251;
  double v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  double v260;
  double v261;
  double v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  int v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  unsigned int v320;
  unsigned int v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  int v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  double v372;
  double v373;
  double v374;
  double v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  double v390;
  double v391;
  double v392;
  double v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  double v408;
  double v409;
  double v410;
  double v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  double v426;
  double v427;
  double v428;
  double v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  double v444;
  double v445;
  double v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  double v458;
  double v459;
  double v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  int v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  double v473;
  double v474;
  double v475;
  double v476;
  double v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  double v498;
  double v499;
  double v500;
  double v501;
  double v502;
  double v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  int v541;
  unsigned int v542;
  unsigned int v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  double v547;
  double v548;
  double v549;
  double v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  double v565;
  double v566;
  double v567;
  double v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  double v583;
  double v584;
  double v585;
  double v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  double v601;
  double v602;
  double v603;
  double v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  double v619;
  double v620;
  double v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  double v633;
  double v634;
  double v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  int v644;
  unsigned int v645;
  unsigned int v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  double v650;
  double v651;
  double v652;
  double v653;
  double v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  int v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  double v696;
  double v697;
  double v698;
  double v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  double v714;
  double v715;
  double v716;
  double v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  double v732;
  double v733;
  double v734;
  double v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  double v750;
  double v751;
  double v752;
  double v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  double v768;
  double v769;
  double v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  double v782;
  double v783;
  double v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  int v812;
  unsigned int v813;
  unsigned int v814;
  float64x2_t v815;
  float64x2_t v816;
  double v817;
  double v818;
  double v819;
  double v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  double v834;
  double v835;
  double v836;
  double v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  double v851;
  double v852;
  double v853;
  double v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  double v868;
  double v869;
  double v870;
  double v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  double v885;
  double v886;
  double v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  double v898;
  double v899;
  double v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  double v911;
  double v912;
  double v913;
  double v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  double v924;
  double v925;
  double v926;
  double v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  double v938;
  double v939;
  double v940;
  double v941;
  double v942;
  double v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  double v963;
  double v964;
  double v965;
  double v966;
  double v967;
  double v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;

  v5 = (uint64_t *)result;
  v6 = *(_QWORD *)result;
  v7 = a2[72];
  if (a2[72])
    v8 = a2[64] == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = *((_DWORD *)a2 + 19);
    v10 = *((_DWORD *)a2 + 17);
    if (v10 < v9)
    {
LABEL_9:
      result = sub_20F9ABFD0(v6 + 14360, v9, v9);
      v24.f64[0] = *(float64_t *)(result + 16);
      v25.f64[0] = *(float64_t *)(result + 40);
      v26.f64[0] = *(float64_t *)(result + 64);
      v27 = *(double *)(a3 + 360);
      v28 = *(float64x2_t *)(a3 + 344);
      v29.f64[0] = v27 * v28.f64[0];
      v30.f64[0] = v27 * v28.f64[1];
      v31.f64[0] = v27 * v27;
      v32 = vmlaq_n_f64(*(float64x2_t *)(result + 24), v28, v28.f64[1]);
      v33 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v28, v27);
      *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v28, v28.f64[0]);
      *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v24, v29);
      *(float64x2_t *)(result + 24) = v32;
      *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v25, v30);
      *(float64x2_t *)(result + 48) = v33;
      *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v26, v31);
      v6 = *v5;
      goto LABEL_10;
    }
    result = sub_20F9ABFD0(v6 + 14360, v9, v10);
    v11.f64[0] = *(float64_t *)(result + 16);
    v12.f64[0] = *(float64_t *)(result + 40);
    v13.f64[0] = *(float64_t *)(result + 64);
    v15 = *(double *)(a3 + 336);
    v14 = *(float64x2_t *)(a3 + 344);
    v16 = *(double *)(a3 + 360);
    v17 = *(double *)(a3 + 320);
    v18 = *(double *)(a3 + 328);
    v19.f64[0] = v16 * v17;
    v20.f64[0] = v16 * v18;
    v21.f64[0] = v16 * v15;
    v22 = vmlaq_n_f64(*(float64x2_t *)(result + 24), v14, v18);
    v23 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v14, v15);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v14, v17);
    *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v11, v19);
    *(float64x2_t *)(result + 24) = v22;
    *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v12, v20);
    *(float64x2_t *)(result + 48) = v23;
    *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v13, v21);
    v7 = a2[72];
    v6 = *v5;
  }
  if (v7)
  {
    v9 = *((_DWORD *)a2 + 19);
    goto LABEL_9;
  }
LABEL_10:
  if (a2[64])
  {
    result = sub_20F9ABFD0(v6 + 14360, *((_DWORD *)a2 + 17), *((_DWORD *)a2 + 17));
    v34.f64[0] = *(float64_t *)(result + 16);
    v35.f64[0] = *(float64_t *)(result + 40);
    v36.f64[0] = *(float64_t *)(result + 64);
    v37 = *(float64x2_t *)(a3 + 320);
    v38 = *(double *)(a3 + 336);
    v39.f64[0] = v38 * v37.f64[0];
    v40.f64[0] = v38 * v37.f64[1];
    v41.f64[0] = v38 * v38;
    v42 = vmlaq_n_f64(*(float64x2_t *)result, v37, v37.f64[0]);
    v43 = vmlaq_n_f64(*(float64x2_t *)(result + 24), v37, v37.f64[1]);
    v44 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v37, v38);
    *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v34, v39);
    *(float64x2_t *)result = v42;
    *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v35, v40);
    *(float64x2_t *)(result + 24) = v43;
    *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v36, v41);
    *(float64x2_t *)(result + 48) = v44;
    v6 = *v5;
    if (a2[64])
    {
      if (a2[72])
      {
        v45 = *((_DWORD *)a2 + 17);
        v46 = *((_DWORD *)a2 + 19);
        if (v46 >= v45)
        {
          result = sub_20F9ABFD0(v6 + 14360, v45, v46);
          v47.f64[0] = *(float64_t *)(result + 16);
          v48.f64[0] = *(float64_t *)(result + 40);
          v49.f64[0] = *(float64_t *)(result + 64);
          v50 = *(float64x2_t *)(a3 + 320);
          v51 = *(double *)(a3 + 352);
          v52 = *(double *)(a3 + 360);
          v54 = *(double *)(a3 + 336);
          v53 = *(double *)(a3 + 344);
          v55.f64[0] = v54 * v53;
          v56.f64[0] = v54 * v51;
          v57.f64[0] = v54 * v52;
          v58 = vmlaq_n_f64(*(float64x2_t *)(result + 24), v50, v51);
          v59 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v50, v52);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v50, v53);
          *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v47, v55);
          *(float64x2_t *)(result + 24) = v58;
          *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v48, v56);
          *(float64x2_t *)(result + 48) = v59;
          *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v49, v57);
          v6 = *v5;
        }
      }
    }
  }
  v60 = a2[56];
  if (a2[56] && a2[48])
  {
    v61 = *((_DWORD *)a2 + 15);
    v62 = *((_DWORD *)a2 + 13);
    if (v62 < v61)
      goto LABEL_21;
    result = sub_20F9AC0F4(v6 + 12776, v61, v62);
    v63 = *(float64x2_t *)(a3 + 288);
    v64 = *(float64x2_t *)(a3 + 304);
    v65 = *(double *)(a3 + 256);
    v66 = *(double *)(a3 + 264);
    v67 = *(double *)(a3 + 272);
    v68 = *(double *)(a3 + 280);
    v69 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v64, v65);
    v70 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v64, v66);
    v71 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v63, v66);
    v72 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v64, v67);
    v73 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v63, v67);
    v74 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v64, v68);
    v75 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v63, v68);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v63, v65);
    *(float64x2_t *)(result + 16) = v69;
    *(float64x2_t *)(result + 32) = v71;
    *(float64x2_t *)(result + 48) = v70;
    *(float64x2_t *)(result + 64) = v73;
    *(float64x2_t *)(result + 80) = v72;
    *(float64x2_t *)(result + 96) = v75;
    *(float64x2_t *)(result + 112) = v74;
    v60 = a2[56];
    v6 = *v5;
  }
  if (!v60)
    goto LABEL_27;
  v61 = *((_DWORD *)a2 + 15);
LABEL_21:
  result = sub_20F9AC0F4(v6 + 12776, v61, v61);
  v76 = *(float64x2_t *)(a3 + 304);
  v77 = *(float64x2_t *)(a3 + 288);
  v78 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v76, v77.f64[0]);
  v79 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v76, v77.f64[1]);
  v80 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v77, v77.f64[1]);
  v81 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v76, v76.f64[0]);
  v82 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v77, v76.f64[0]);
  v83 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v76, v76.f64[1]);
  v84 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v77, v76.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v77, v77.f64[0]);
  *(float64x2_t *)(result + 16) = v78;
  *(float64x2_t *)(result + 32) = v80;
  *(float64x2_t *)(result + 48) = v79;
  *(float64x2_t *)(result + 64) = v82;
  *(float64x2_t *)(result + 80) = v81;
  *(float64x2_t *)(result + 96) = v84;
  *(float64x2_t *)(result + 112) = v83;
  v85 = a2[56];
  v6 = *v5;
  if (a2[56] && a2[64])
  {
    result = sub_20F9AC218(v6 + 14216, *((_DWORD *)a2 + 15), *((_DWORD *)a2 + 17));
    v86 = *(float64x2_t *)(a3 + 288);
    v87 = *(float64x2_t *)(a3 + 304);
    v88 = *(double *)(a3 + 320);
    v89 = *(double *)(a3 + 328);
    v90 = *(double *)(a3 + 336);
    v91 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v87, v88);
    v92 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v87, v89);
    v93 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v86, v89);
    v94 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v87, v90);
    v95 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v86, v90);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v86, v88);
    *(float64x2_t *)(result + 16) = v91;
    *(float64x2_t *)(result + 32) = v93;
    *(float64x2_t *)(result + 48) = v92;
    *(float64x2_t *)(result + 64) = v95;
    *(float64x2_t *)(result + 80) = v94;
    v85 = a2[56];
    v6 = *v5;
  }
  if (v85 && a2[72])
  {
    result = sub_20F9AC218(v6 + 14216, *((_DWORD *)a2 + 15), *((_DWORD *)a2 + 19));
    v96 = *(float64x2_t *)(a3 + 288);
    v97 = *(float64x2_t *)(a3 + 304);
    v98 = *(double *)(a3 + 344);
    v99 = *(double *)(a3 + 352);
    v100 = *(double *)(a3 + 360);
    v101 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v97, v98);
    v102 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v97, v99);
    v103 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v96, v99);
    v104 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v97, v100);
    v105 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v96, v100);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v96, v98);
    *(float64x2_t *)(result + 16) = v101;
    *(float64x2_t *)(result + 32) = v103;
    *(float64x2_t *)(result + 48) = v102;
    *(float64x2_t *)(result + 64) = v105;
    *(float64x2_t *)(result + 80) = v104;
    v6 = *v5;
  }
LABEL_27:
  if (!a2[48])
    goto LABEL_38;
  result = sub_20F9AC0F4(v6 + 12776, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 13));
  v106 = *(float64x2_t *)(a3 + 272);
  v107 = *(float64x2_t *)(a3 + 256);
  v108 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v106, v107.f64[0]);
  v109 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v106, v107.f64[1]);
  v110 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v107, v107.f64[1]);
  v111 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v106, v106.f64[0]);
  v112 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v107, v106.f64[0]);
  v113 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v106, v106.f64[1]);
  v114 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v107, v106.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v107, v107.f64[0]);
  *(float64x2_t *)(result + 16) = v108;
  *(float64x2_t *)(result + 32) = v110;
  *(float64x2_t *)(result + 48) = v109;
  *(float64x2_t *)(result + 64) = v112;
  *(float64x2_t *)(result + 80) = v111;
  *(float64x2_t *)(result + 96) = v114;
  *(float64x2_t *)(result + 112) = v113;
  v6 = *v5;
  v115 = a2[48];
  if (!a2[48] || !a2[56])
  {
LABEL_32:
    if (v115)
      goto LABEL_33;
    goto LABEL_35;
  }
  v116 = *((_DWORD *)a2 + 13);
  v117 = *((_DWORD *)a2 + 15);
  if (v117 < v116)
  {
    v115 = 1;
    goto LABEL_32;
  }
  result = sub_20F9AC0F4(v6 + 12776, v116, v117);
  v909 = *(float64x2_t *)(a3 + 256);
  v910 = *(float64x2_t *)(a3 + 272);
  v911 = *(double *)(a3 + 288);
  v912 = *(double *)(a3 + 296);
  v913 = *(double *)(a3 + 304);
  v914 = *(double *)(a3 + 312);
  v915 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v910, v911);
  v916 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v910, v912);
  v917 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v909, v912);
  v918 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v910, v913);
  v919 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v909, v913);
  v920 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v910, v914);
  v921 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v909, v914);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v909, v911);
  *(float64x2_t *)(result + 16) = v915;
  *(float64x2_t *)(result + 32) = v917;
  *(float64x2_t *)(result + 48) = v916;
  *(float64x2_t *)(result + 64) = v919;
  *(float64x2_t *)(result + 80) = v918;
  *(float64x2_t *)(result + 96) = v921;
  *(float64x2_t *)(result + 112) = v920;
  v115 = a2[48];
  v6 = *v5;
  if (a2[48])
  {
LABEL_33:
    if (a2[64])
    {
      result = sub_20F9AC218(v6 + 14216, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 17));
      v118 = *(float64x2_t *)(a3 + 256);
      v119 = *(float64x2_t *)(a3 + 272);
      v120 = *(double *)(a3 + 320);
      v121 = *(double *)(a3 + 328);
      v122 = *(double *)(a3 + 336);
      v123 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v119, v120);
      v124 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v119, v121);
      v125 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v118, v121);
      v126 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v119, v122);
      v127 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v118, v122);
      *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v118, v120);
      *(float64x2_t *)(result + 16) = v123;
      *(float64x2_t *)(result + 32) = v125;
      *(float64x2_t *)(result + 48) = v124;
      *(float64x2_t *)(result + 64) = v127;
      *(float64x2_t *)(result + 80) = v126;
      v115 = a2[48];
      v6 = *v5;
    }
  }
LABEL_35:
  if (v115 && a2[72])
  {
    result = sub_20F9AC218(v6 + 14216, *((_DWORD *)a2 + 13), *((_DWORD *)a2 + 19));
    v128 = *(float64x2_t *)(a3 + 256);
    v129 = *(float64x2_t *)(a3 + 272);
    v130 = *(double *)(a3 + 344);
    v131 = *(double *)(a3 + 352);
    v132 = *(double *)(a3 + 360);
    v133 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v129, v130);
    v134 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v129, v131);
    v135 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v128, v131);
    v136 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v129, v132);
    v137 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v128, v132);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v128, v130);
    *(float64x2_t *)(result + 16) = v133;
    *(float64x2_t *)(result + 32) = v135;
    *(float64x2_t *)(result + 48) = v134;
    *(float64x2_t *)(result + 64) = v137;
    *(float64x2_t *)(result + 80) = v136;
    v6 = *v5;
  }
LABEL_38:
  v138 = a2[40];
  if (a2[40] && a2[32])
  {
    v139 = *((_DWORD *)a2 + 11);
    v140 = *((_DWORD *)a2 + 9);
    if (v140 < v139)
      goto LABEL_44;
    result = sub_20F9AC0F4(v6 + 11192, v139, v140);
    v141 = *(float64x2_t *)(a3 + 224);
    v142 = *(float64x2_t *)(a3 + 240);
    v143 = *(double *)(a3 + 192);
    v144 = *(double *)(a3 + 200);
    v145 = *(double *)(a3 + 208);
    v146 = *(double *)(a3 + 216);
    v147 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v142, v143);
    v148 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v142, v144);
    v149 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v141, v144);
    v150 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v142, v145);
    v151 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v141, v145);
    v152 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v142, v146);
    v153 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v141, v146);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v141, v143);
    *(float64x2_t *)(result + 16) = v147;
    *(float64x2_t *)(result + 32) = v149;
    *(float64x2_t *)(result + 48) = v148;
    *(float64x2_t *)(result + 64) = v151;
    *(float64x2_t *)(result + 80) = v150;
    *(float64x2_t *)(result + 96) = v153;
    *(float64x2_t *)(result + 112) = v152;
    v138 = a2[40];
    v6 = *v5;
  }
  if (!v138)
    goto LABEL_56;
  v139 = *((_DWORD *)a2 + 11);
LABEL_44:
  result = sub_20F9AC0F4(v6 + 11192, v139, v139);
  v154 = *(float64x2_t *)(a3 + 240);
  v155 = *(float64x2_t *)(a3 + 224);
  v156 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v154, v155.f64[0]);
  v157 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v154, v155.f64[1]);
  v158 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v155, v155.f64[1]);
  v159 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v154, v154.f64[0]);
  v160 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v155, v154.f64[0]);
  v161 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v154, v154.f64[1]);
  v162 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v155, v154.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v155, v155.f64[0]);
  *(float64x2_t *)(result + 16) = v156;
  *(float64x2_t *)(result + 32) = v158;
  *(float64x2_t *)(result + 48) = v157;
  *(float64x2_t *)(result + 64) = v160;
  *(float64x2_t *)(result + 80) = v159;
  *(float64x2_t *)(result + 96) = v162;
  *(float64x2_t *)(result + 112) = v161;
  v163 = a2[40];
  v6 = *v5;
  if (a2[40] && a2[48])
  {
    result = sub_20F9AC0F4(v6 + 12632, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 13));
    v164 = *(float64x2_t *)(a3 + 224);
    v165 = *(float64x2_t *)(a3 + 240);
    v166 = *(double *)(a3 + 256);
    v167 = *(double *)(a3 + 264);
    v168 = *(double *)(a3 + 272);
    v169 = *(double *)(a3 + 280);
    v170 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v165, v166);
    v171 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v165, v167);
    v172 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v164, v167);
    v173 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v165, v168);
    v174 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v164, v168);
    v175 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v165, v169);
    v176 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v164, v169);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v164, v166);
    *(float64x2_t *)(result + 16) = v170;
    *(float64x2_t *)(result + 32) = v172;
    *(float64x2_t *)(result + 48) = v171;
    *(float64x2_t *)(result + 64) = v174;
    *(float64x2_t *)(result + 80) = v173;
    *(float64x2_t *)(result + 96) = v176;
    *(float64x2_t *)(result + 112) = v175;
    v163 = a2[40];
    v6 = *v5;
  }
  if (v163 && a2[56])
  {
    result = sub_20F9AC0F4(v6 + 12632, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 15));
    v177 = *(float64x2_t *)(a3 + 224);
    v178 = *(float64x2_t *)(a3 + 240);
    v179 = *(double *)(a3 + 288);
    v180 = *(double *)(a3 + 296);
    v181 = *(double *)(a3 + 304);
    v182 = *(double *)(a3 + 312);
    v183 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v178, v179);
    v184 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v178, v180);
    v185 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v177, v180);
    v186 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v178, v181);
    v187 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v177, v181);
    v188 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v178, v182);
    v189 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v177, v182);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v177, v179);
    *(float64x2_t *)(result + 16) = v183;
    *(float64x2_t *)(result + 32) = v185;
    *(float64x2_t *)(result + 48) = v184;
    *(float64x2_t *)(result + 64) = v187;
    *(float64x2_t *)(result + 80) = v186;
    *(float64x2_t *)(result + 96) = v189;
    *(float64x2_t *)(result + 112) = v188;
    v163 = a2[40];
    v6 = *v5;
  }
  if (v163 && a2[64])
  {
    result = sub_20F9AC218(v6 + 14072, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 17));
    v190 = *(float64x2_t *)(a3 + 224);
    v191 = *(float64x2_t *)(a3 + 240);
    v192 = *(double *)(a3 + 320);
    v193 = *(double *)(a3 + 328);
    v194 = *(double *)(a3 + 336);
    v195 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v191, v192);
    v196 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v191, v193);
    v197 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v190, v193);
    v198 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v191, v194);
    v199 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v190, v194);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v190, v192);
    *(float64x2_t *)(result + 16) = v195;
    *(float64x2_t *)(result + 32) = v197;
    *(float64x2_t *)(result + 48) = v196;
    *(float64x2_t *)(result + 64) = v199;
    *(float64x2_t *)(result + 80) = v198;
    v163 = a2[40];
    v6 = *v5;
  }
  if (v163 && a2[72])
  {
    result = sub_20F9AC218(v6 + 14072, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 19));
    v200 = *(float64x2_t *)(a3 + 224);
    v201 = *(float64x2_t *)(a3 + 240);
    v202 = *(double *)(a3 + 344);
    v203 = *(double *)(a3 + 352);
    v204 = *(double *)(a3 + 360);
    v205 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v201, v202);
    v206 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v201, v203);
    v207 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v200, v203);
    v208 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v201, v204);
    v209 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v200, v204);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v200, v202);
    *(float64x2_t *)(result + 16) = v205;
    *(float64x2_t *)(result + 32) = v207;
    *(float64x2_t *)(result + 48) = v206;
    *(float64x2_t *)(result + 64) = v209;
    *(float64x2_t *)(result + 80) = v208;
    v6 = *v5;
  }
LABEL_56:
  if (!a2[32])
    goto LABEL_73;
  result = sub_20F9AC0F4(v6 + 11192, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 9));
  v210 = *(float64x2_t *)(a3 + 208);
  v211 = *(float64x2_t *)(a3 + 192);
  v212 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v210, v211.f64[0]);
  v213 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v210, v211.f64[1]);
  v214 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v211, v211.f64[1]);
  v215 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v210, v210.f64[0]);
  v216 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v211, v210.f64[0]);
  v217 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v210, v210.f64[1]);
  v218 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v211, v210.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v211, v211.f64[0]);
  *(float64x2_t *)(result + 16) = v212;
  *(float64x2_t *)(result + 32) = v214;
  *(float64x2_t *)(result + 48) = v213;
  *(float64x2_t *)(result + 64) = v216;
  *(float64x2_t *)(result + 80) = v215;
  *(float64x2_t *)(result + 96) = v218;
  *(float64x2_t *)(result + 112) = v217;
  v6 = *v5;
  v219 = a2[32];
  if (!a2[32] || !a2[40])
  {
LABEL_61:
    if (v219)
      goto LABEL_62;
    goto LABEL_64;
  }
  v220 = *((_DWORD *)a2 + 9);
  v221 = *((_DWORD *)a2 + 11);
  if (v221 < v220)
  {
    v219 = 1;
    goto LABEL_61;
  }
  result = sub_20F9AC0F4(v6 + 11192, v220, v221);
  v922 = *(float64x2_t *)(a3 + 192);
  v923 = *(float64x2_t *)(a3 + 208);
  v924 = *(double *)(a3 + 224);
  v925 = *(double *)(a3 + 232);
  v926 = *(double *)(a3 + 240);
  v927 = *(double *)(a3 + 248);
  v928 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v923, v924);
  v929 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v923, v925);
  v930 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v922, v925);
  v931 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v923, v926);
  v932 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v922, v926);
  v933 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v923, v927);
  v934 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v922, v927);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v922, v924);
  *(float64x2_t *)(result + 16) = v928;
  *(float64x2_t *)(result + 32) = v930;
  *(float64x2_t *)(result + 48) = v929;
  *(float64x2_t *)(result + 64) = v932;
  *(float64x2_t *)(result + 80) = v931;
  *(float64x2_t *)(result + 96) = v934;
  *(float64x2_t *)(result + 112) = v933;
  v219 = a2[32];
  v6 = *v5;
  if (a2[32])
  {
LABEL_62:
    if (a2[48])
    {
      result = sub_20F9AC0F4(v6 + 12632, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 13));
      v222 = *(float64x2_t *)(a3 + 192);
      v223 = *(float64x2_t *)(a3 + 208);
      v224 = *(double *)(a3 + 256);
      v225 = *(double *)(a3 + 264);
      v226 = *(double *)(a3 + 272);
      v227 = *(double *)(a3 + 280);
      v228 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v223, v224);
      v229 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v223, v225);
      v230 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v222, v225);
      v231 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v223, v226);
      v232 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v222, v226);
      v233 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v223, v227);
      v234 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v222, v227);
      *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v222, v224);
      *(float64x2_t *)(result + 16) = v228;
      *(float64x2_t *)(result + 32) = v230;
      *(float64x2_t *)(result + 48) = v229;
      *(float64x2_t *)(result + 64) = v232;
      *(float64x2_t *)(result + 80) = v231;
      *(float64x2_t *)(result + 96) = v234;
      *(float64x2_t *)(result + 112) = v233;
      v219 = a2[32];
      v6 = *v5;
    }
  }
LABEL_64:
  if (v219 && a2[56])
  {
    result = sub_20F9AC0F4(v6 + 12632, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 15));
    v235 = *(float64x2_t *)(a3 + 192);
    v236 = *(float64x2_t *)(a3 + 208);
    v237 = *(double *)(a3 + 288);
    v238 = *(double *)(a3 + 296);
    v239 = *(double *)(a3 + 304);
    v240 = *(double *)(a3 + 312);
    v241 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v236, v237);
    v242 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v236, v238);
    v243 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v235, v238);
    v244 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v236, v239);
    v245 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v235, v239);
    v246 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v236, v240);
    v247 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v235, v240);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v235, v237);
    *(float64x2_t *)(result + 16) = v241;
    *(float64x2_t *)(result + 32) = v243;
    *(float64x2_t *)(result + 48) = v242;
    *(float64x2_t *)(result + 64) = v245;
    *(float64x2_t *)(result + 80) = v244;
    *(float64x2_t *)(result + 96) = v247;
    *(float64x2_t *)(result + 112) = v246;
    v219 = a2[32];
    v6 = *v5;
  }
  if (v219 && a2[64])
  {
    result = sub_20F9AC218(v6 + 14072, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 17));
    v248 = *(float64x2_t *)(a3 + 192);
    v249 = *(float64x2_t *)(a3 + 208);
    v250 = *(double *)(a3 + 320);
    v251 = *(double *)(a3 + 328);
    v252 = *(double *)(a3 + 336);
    v253 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v249, v250);
    v254 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v249, v251);
    v255 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v248, v251);
    v256 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v249, v252);
    v257 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v248, v252);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v248, v250);
    *(float64x2_t *)(result + 16) = v253;
    *(float64x2_t *)(result + 32) = v255;
    *(float64x2_t *)(result + 48) = v254;
    *(float64x2_t *)(result + 64) = v257;
    *(float64x2_t *)(result + 80) = v256;
    v219 = a2[32];
    v6 = *v5;
  }
  if (v219 && a2[72])
  {
    result = sub_20F9AC218(v6 + 14072, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 19));
    v258 = *(float64x2_t *)(a3 + 192);
    v259 = *(float64x2_t *)(a3 + 208);
    v260 = *(double *)(a3 + 344);
    v261 = *(double *)(a3 + 352);
    v262 = *(double *)(a3 + 360);
    v263 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v259, v260);
    v264 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v259, v261);
    v265 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v258, v261);
    v266 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v259, v262);
    v267 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v258, v262);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v258, v260);
    *(float64x2_t *)(result + 16) = v263;
    *(float64x2_t *)(result + 32) = v265;
    *(float64x2_t *)(result + 48) = v264;
    *(float64x2_t *)(result + 64) = v267;
    *(float64x2_t *)(result + 80) = v266;
    v6 = *v5;
  }
LABEL_73:
  v268 = a2[24];
  if (a2[24] && *a2)
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 1));
    v269 = *(float64x2_t *)(a3 + 144);
    v270 = *(float64x2_t *)(a3 + 160);
    v271 = *(float64x2_t *)(a3 + 176);
    v272 = *(double *)(a3 + 8);
    v273 = *(double *)(a3 + 16);
    v274 = *(double *)(a3 + 24);
    v275 = *(double *)(a3 + 32);
    v276 = *(double *)(a3 + 40);
    v277 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v270, *(double *)a3);
    v278 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v271, *(double *)a3);
    v279 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v269, v272);
    v280 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v270, v272);
    v281 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v271, v272);
    v282 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v269, v273);
    v283 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v270, v273);
    v284 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v271, v273);
    v285 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v269, v274);
    v286 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v270, v274);
    v287 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v271, v274);
    v288 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v269, v275);
    v289 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v270, v275);
    v290 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v271, v275);
    v291 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v269, v276);
    v292 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v270, v276);
    v293 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v271, v276);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v269, *(double *)a3);
    *(float64x2_t *)(result + 16) = v277;
    *(float64x2_t *)(result + 64) = v280;
    *(float64x2_t *)(result + 80) = v281;
    *(float64x2_t *)(result + 32) = v278;
    *(float64x2_t *)(result + 48) = v279;
    *(float64x2_t *)(result + 96) = v282;
    *(float64x2_t *)(result + 112) = v283;
    *(float64x2_t *)(result + 160) = v286;
    *(float64x2_t *)(result + 176) = v287;
    *(float64x2_t *)(result + 128) = v284;
    *(float64x2_t *)(result + 144) = v285;
    *(float64x2_t *)(result + 192) = v288;
    *(float64x2_t *)(result + 208) = v289;
    *(float64x2_t *)(result + 256) = v292;
    *(float64x2_t *)(result + 272) = v293;
    *(float64x2_t *)(result + 224) = v290;
    *(float64x2_t *)(result + 240) = v291;
    v268 = a2[24];
    v6 = *v5;
  }
  if (v268 && a2[8])
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 3));
    v294 = *(float64x2_t *)(a3 + 144);
    v295 = *(float64x2_t *)(a3 + 160);
    v296 = *(float64x2_t *)(a3 + 176);
    v297 = *(double *)(a3 + 48);
    v298 = *(double *)(a3 + 56);
    v299 = *(double *)(a3 + 64);
    v300 = *(double *)(a3 + 72);
    v301 = *(double *)(a3 + 80);
    v302 = *(double *)(a3 + 88);
    v303 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v295, v297);
    v304 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v296, v297);
    v305 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v294, v298);
    v306 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v295, v298);
    v307 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v296, v298);
    v308 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v294, v299);
    v309 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v295, v299);
    v310 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v296, v299);
    v311 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v294, v300);
    v312 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v295, v300);
    v313 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v296, v300);
    v314 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v294, v301);
    v315 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v295, v301);
    v316 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v296, v301);
    v317 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v294, v302);
    v318 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v295, v302);
    v319 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v296, v302);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v294, v297);
    *(float64x2_t *)(result + 16) = v303;
    *(float64x2_t *)(result + 64) = v306;
    *(float64x2_t *)(result + 80) = v307;
    *(float64x2_t *)(result + 32) = v304;
    *(float64x2_t *)(result + 48) = v305;
    *(float64x2_t *)(result + 96) = v308;
    *(float64x2_t *)(result + 112) = v309;
    *(float64x2_t *)(result + 160) = v312;
    *(float64x2_t *)(result + 176) = v313;
    *(float64x2_t *)(result + 128) = v310;
    *(float64x2_t *)(result + 144) = v311;
    *(float64x2_t *)(result + 192) = v314;
    *(float64x2_t *)(result + 208) = v315;
    *(float64x2_t *)(result + 256) = v318;
    *(float64x2_t *)(result + 272) = v319;
    *(float64x2_t *)(result + 224) = v316;
    *(float64x2_t *)(result + 240) = v317;
    v6 = *v5;
    v268 = a2[24];
  }
  if (v268 && a2[16])
  {
    v320 = *((_DWORD *)a2 + 7);
    v321 = *((_DWORD *)a2 + 5);
    if (v321 < v320)
      goto LABEL_85;
    result = sub_20F9AC33C(v6 + 104, v320, v321);
    v322 = *(float64x2_t *)(a3 + 144);
    v323 = *(float64x2_t *)(a3 + 160);
    v324 = *(float64x2_t *)(a3 + 176);
    v325 = *(double *)(a3 + 96);
    v326 = *(double *)(a3 + 104);
    v327 = *(double *)(a3 + 112);
    v328 = *(double *)(a3 + 120);
    v329 = *(double *)(a3 + 128);
    v330 = *(double *)(a3 + 136);
    v331 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v323, v325);
    v332 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v324, v325);
    v333 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v322, v326);
    v334 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v323, v326);
    v335 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v324, v326);
    v336 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v322, v327);
    v337 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v323, v327);
    v338 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v324, v327);
    v339 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v322, v328);
    v340 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v323, v328);
    v341 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v324, v328);
    v342 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v322, v329);
    v343 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v323, v329);
    v344 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v324, v329);
    v345 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v322, v330);
    v346 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v323, v330);
    v347 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v324, v330);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v322, v325);
    *(float64x2_t *)(result + 16) = v331;
    *(float64x2_t *)(result + 64) = v334;
    *(float64x2_t *)(result + 80) = v335;
    *(float64x2_t *)(result + 32) = v332;
    *(float64x2_t *)(result + 48) = v333;
    *(float64x2_t *)(result + 96) = v336;
    *(float64x2_t *)(result + 112) = v337;
    *(float64x2_t *)(result + 160) = v340;
    *(float64x2_t *)(result + 176) = v341;
    *(float64x2_t *)(result + 128) = v338;
    *(float64x2_t *)(result + 144) = v339;
    *(float64x2_t *)(result + 192) = v342;
    *(float64x2_t *)(result + 208) = v343;
    *(float64x2_t *)(result + 256) = v346;
    *(float64x2_t *)(result + 272) = v347;
    *(float64x2_t *)(result + 224) = v344;
    *(float64x2_t *)(result + 240) = v345;
    v268 = a2[24];
    v6 = *v5;
  }
  if (!v268)
    goto LABEL_103;
  v320 = *((_DWORD *)a2 + 7);
LABEL_85:
  result = sub_20F9AC33C(v6 + 104, v320, v320);
  v348 = *(float64x2_t *)(a3 + 160);
  v349 = *(float64x2_t *)(a3 + 176);
  v350 = *(float64x2_t *)(a3 + 144);
  v351 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v349, v350.f64[0]);
  v352 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v348, v350.f64[0]);
  v353 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v349, v350.f64[1]);
  v354 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v348, v350.f64[1]);
  v355 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v350, v350.f64[1]);
  v356 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v349, v348.f64[0]);
  v357 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v348, v348.f64[0]);
  v358 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v350, v348.f64[0]);
  v359 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v349, v348.f64[1]);
  v360 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v348, v348.f64[1]);
  v361 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v350, v348.f64[1]);
  v362 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v349, v349.f64[0]);
  v363 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v348, v349.f64[0]);
  v364 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v350, v349.f64[0]);
  v365 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v349, v349.f64[1]);
  v366 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v348, v349.f64[1]);
  v367 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v350, v349.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v350, v350.f64[0]);
  *(float64x2_t *)(result + 16) = v352;
  *(float64x2_t *)(result + 32) = v351;
  *(float64x2_t *)(result + 48) = v355;
  *(float64x2_t *)(result + 64) = v354;
  *(float64x2_t *)(result + 80) = v353;
  *(float64x2_t *)(result + 96) = v358;
  *(float64x2_t *)(result + 112) = v357;
  *(float64x2_t *)(result + 128) = v356;
  *(float64x2_t *)(result + 144) = v361;
  *(float64x2_t *)(result + 160) = v360;
  *(float64x2_t *)(result + 176) = v359;
  *(float64x2_t *)(result + 192) = v364;
  *(float64x2_t *)(result + 208) = v363;
  *(float64x2_t *)(result + 224) = v362;
  *(float64x2_t *)(result + 240) = v367;
  *(float64x2_t *)(result + 256) = v366;
  *(float64x2_t *)(result + 272) = v365;
  v368 = a2[24];
  v6 = *v5;
  if (a2[24] && a2[32])
  {
    result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 9));
    v369 = *(float64x2_t *)(a3 + 144);
    v370 = *(float64x2_t *)(a3 + 160);
    v371 = *(float64x2_t *)(a3 + 176);
    v372 = *(double *)(a3 + 192);
    v373 = *(double *)(a3 + 200);
    v374 = *(double *)(a3 + 208);
    v375 = *(double *)(a3 + 216);
    v376 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v371, v372);
    v377 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v370, v372);
    v378 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v371, v373);
    v379 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v370, v373);
    v380 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v369, v373);
    v381 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v371, v374);
    v382 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v370, v374);
    v383 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v369, v374);
    v384 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v371, v375);
    v385 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v370, v375);
    v386 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v369, v375);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v369, v372);
    *(float64x2_t *)(result + 16) = v377;
    *(float64x2_t *)(result + 32) = v376;
    *(float64x2_t *)(result + 48) = v380;
    *(float64x2_t *)(result + 64) = v379;
    *(float64x2_t *)(result + 80) = v378;
    *(float64x2_t *)(result + 96) = v383;
    *(float64x2_t *)(result + 112) = v382;
    *(float64x2_t *)(result + 128) = v381;
    *(float64x2_t *)(result + 144) = v386;
    *(float64x2_t *)(result + 160) = v385;
    *(float64x2_t *)(result + 176) = v384;
    v368 = a2[24];
    v6 = *v5;
  }
  if (v368 && a2[40])
  {
    result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 11));
    v387 = *(float64x2_t *)(a3 + 144);
    v388 = *(float64x2_t *)(a3 + 160);
    v389 = *(float64x2_t *)(a3 + 176);
    v390 = *(double *)(a3 + 224);
    v391 = *(double *)(a3 + 232);
    v392 = *(double *)(a3 + 240);
    v393 = *(double *)(a3 + 248);
    v394 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v389, v390);
    v395 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v388, v390);
    v396 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v389, v391);
    v397 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v388, v391);
    v398 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v387, v391);
    v399 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v389, v392);
    v400 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v388, v392);
    v401 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v387, v392);
    v402 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v389, v393);
    v403 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v388, v393);
    v404 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v387, v393);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v387, v390);
    *(float64x2_t *)(result + 16) = v395;
    *(float64x2_t *)(result + 32) = v394;
    *(float64x2_t *)(result + 48) = v398;
    *(float64x2_t *)(result + 64) = v397;
    *(float64x2_t *)(result + 80) = v396;
    *(float64x2_t *)(result + 96) = v401;
    *(float64x2_t *)(result + 112) = v400;
    *(float64x2_t *)(result + 128) = v399;
    *(float64x2_t *)(result + 144) = v404;
    *(float64x2_t *)(result + 160) = v403;
    *(float64x2_t *)(result + 176) = v402;
    v368 = a2[24];
    v6 = *v5;
  }
  if (v368 && a2[48])
  {
    result = sub_20F9AC460(v6 + 11624, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 13));
    v405 = *(float64x2_t *)(a3 + 144);
    v406 = *(float64x2_t *)(a3 + 160);
    v407 = *(float64x2_t *)(a3 + 176);
    v408 = *(double *)(a3 + 256);
    v409 = *(double *)(a3 + 264);
    v410 = *(double *)(a3 + 272);
    v411 = *(double *)(a3 + 280);
    v412 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v407, v408);
    v413 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v406, v408);
    v414 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v407, v409);
    v415 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v406, v409);
    v416 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v405, v409);
    v417 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v407, v410);
    v418 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v406, v410);
    v419 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v405, v410);
    v420 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v407, v411);
    v421 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v406, v411);
    v422 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v405, v411);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v405, v408);
    *(float64x2_t *)(result + 16) = v413;
    *(float64x2_t *)(result + 32) = v412;
    *(float64x2_t *)(result + 48) = v416;
    *(float64x2_t *)(result + 64) = v415;
    *(float64x2_t *)(result + 80) = v414;
    *(float64x2_t *)(result + 96) = v419;
    *(float64x2_t *)(result + 112) = v418;
    *(float64x2_t *)(result + 128) = v417;
    *(float64x2_t *)(result + 144) = v422;
    *(float64x2_t *)(result + 160) = v421;
    *(float64x2_t *)(result + 176) = v420;
    v368 = a2[24];
    v6 = *v5;
  }
  if (v368 && a2[56])
  {
    result = sub_20F9AC460(v6 + 11624, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 15));
    v423 = *(float64x2_t *)(a3 + 144);
    v424 = *(float64x2_t *)(a3 + 160);
    v425 = *(float64x2_t *)(a3 + 176);
    v426 = *(double *)(a3 + 288);
    v427 = *(double *)(a3 + 296);
    v428 = *(double *)(a3 + 304);
    v429 = *(double *)(a3 + 312);
    v430 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v425, v426);
    v431 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v424, v426);
    v432 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v425, v427);
    v433 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v424, v427);
    v434 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v423, v427);
    v435 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v425, v428);
    v436 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v424, v428);
    v437 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v423, v428);
    v438 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v425, v429);
    v439 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v424, v429);
    v440 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v423, v429);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v423, v426);
    *(float64x2_t *)(result + 16) = v431;
    *(float64x2_t *)(result + 32) = v430;
    *(float64x2_t *)(result + 48) = v434;
    *(float64x2_t *)(result + 64) = v433;
    *(float64x2_t *)(result + 80) = v432;
    *(float64x2_t *)(result + 96) = v437;
    *(float64x2_t *)(result + 112) = v436;
    *(float64x2_t *)(result + 128) = v435;
    *(float64x2_t *)(result + 144) = v440;
    *(float64x2_t *)(result + 160) = v439;
    *(float64x2_t *)(result + 176) = v438;
    v368 = a2[24];
    v6 = *v5;
  }
  if (v368 && a2[64])
  {
    result = sub_20F9AC584(v6 + 13064, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 17));
    v441 = *(float64x2_t *)(a3 + 144);
    v442 = *(float64x2_t *)(a3 + 160);
    v443 = *(float64x2_t *)(a3 + 176);
    v444 = *(double *)(a3 + 320);
    v445 = *(double *)(a3 + 328);
    v446 = *(double *)(a3 + 336);
    v447 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v443, v444);
    v448 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v442, v444);
    v449 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v443, v445);
    v450 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v442, v445);
    v451 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v441, v445);
    v452 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v443, v446);
    v453 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v442, v446);
    v454 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v441, v446);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v441, v444);
    *(float64x2_t *)(result + 16) = v448;
    *(float64x2_t *)(result + 32) = v447;
    *(float64x2_t *)(result + 48) = v451;
    *(float64x2_t *)(result + 64) = v450;
    *(float64x2_t *)(result + 80) = v449;
    *(float64x2_t *)(result + 96) = v454;
    *(float64x2_t *)(result + 112) = v453;
    *(float64x2_t *)(result + 128) = v452;
    v368 = a2[24];
    v6 = *v5;
  }
  if (v368 && a2[72])
  {
    result = sub_20F9AC584(v6 + 13064, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 19));
    v455 = *(float64x2_t *)(a3 + 144);
    v456 = *(float64x2_t *)(a3 + 160);
    v457 = *(float64x2_t *)(a3 + 176);
    v458 = *(double *)(a3 + 344);
    v459 = *(double *)(a3 + 352);
    v460 = *(double *)(a3 + 360);
    v461 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v457, v458);
    v462 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v456, v458);
    v463 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v457, v459);
    v464 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v456, v459);
    v465 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v455, v459);
    v466 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v457, v460);
    v467 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v456, v460);
    v468 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v455, v460);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v455, v458);
    *(float64x2_t *)(result + 16) = v462;
    *(float64x2_t *)(result + 32) = v461;
    *(float64x2_t *)(result + 48) = v465;
    *(float64x2_t *)(result + 64) = v464;
    *(float64x2_t *)(result + 80) = v463;
    *(float64x2_t *)(result + 96) = v468;
    *(float64x2_t *)(result + 112) = v467;
    *(float64x2_t *)(result + 128) = v466;
    v6 = *v5;
  }
LABEL_103:
  v469 = a2[16];
  if (a2[16] && *a2)
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 1));
    v470 = *(float64x2_t *)(a3 + 96);
    v471 = *(float64x2_t *)(a3 + 112);
    v472 = *(float64x2_t *)(a3 + 128);
    v473 = *(double *)(a3 + 8);
    v474 = *(double *)(a3 + 16);
    v475 = *(double *)(a3 + 24);
    v476 = *(double *)(a3 + 32);
    v477 = *(double *)(a3 + 40);
    v478 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v471, *(double *)a3);
    v479 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v472, *(double *)a3);
    v480 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v470, v473);
    v481 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v471, v473);
    v482 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v472, v473);
    v483 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v470, v474);
    v484 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v471, v474);
    v485 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v472, v474);
    v486 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v470, v475);
    v487 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v471, v475);
    v488 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v472, v475);
    v489 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v470, v476);
    v490 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v471, v476);
    v491 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v472, v476);
    v492 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v470, v477);
    v493 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v471, v477);
    v494 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v472, v477);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v470, *(double *)a3);
    *(float64x2_t *)(result + 16) = v478;
    *(float64x2_t *)(result + 64) = v481;
    *(float64x2_t *)(result + 80) = v482;
    *(float64x2_t *)(result + 32) = v479;
    *(float64x2_t *)(result + 48) = v480;
    *(float64x2_t *)(result + 96) = v483;
    *(float64x2_t *)(result + 112) = v484;
    *(float64x2_t *)(result + 160) = v487;
    *(float64x2_t *)(result + 176) = v488;
    *(float64x2_t *)(result + 128) = v485;
    *(float64x2_t *)(result + 144) = v486;
    *(float64x2_t *)(result + 192) = v489;
    *(float64x2_t *)(result + 208) = v490;
    *(float64x2_t *)(result + 256) = v493;
    *(float64x2_t *)(result + 272) = v494;
    *(float64x2_t *)(result + 224) = v491;
    *(float64x2_t *)(result + 240) = v492;
    v469 = a2[16];
    v6 = *v5;
  }
  if (v469 && a2[8])
  {
    result = sub_20F9AC33C(v6 + 2984, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 3));
    v495 = *(float64x2_t *)(a3 + 96);
    v496 = *(float64x2_t *)(a3 + 112);
    v497 = *(float64x2_t *)(a3 + 128);
    v498 = *(double *)(a3 + 48);
    v499 = *(double *)(a3 + 56);
    v500 = *(double *)(a3 + 64);
    v501 = *(double *)(a3 + 72);
    v502 = *(double *)(a3 + 80);
    v503 = *(double *)(a3 + 88);
    v504 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v496, v498);
    v505 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v497, v498);
    v506 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v495, v499);
    v507 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v496, v499);
    v508 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v497, v499);
    v509 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v495, v500);
    v510 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v496, v500);
    v511 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v497, v500);
    v512 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v495, v501);
    v513 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v496, v501);
    v514 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v497, v501);
    v515 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v495, v502);
    v516 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v496, v502);
    v517 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v497, v502);
    v518 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v495, v503);
    v519 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v496, v503);
    v520 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v497, v503);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v495, v498);
    *(float64x2_t *)(result + 16) = v504;
    *(float64x2_t *)(result + 64) = v507;
    *(float64x2_t *)(result + 80) = v508;
    *(float64x2_t *)(result + 32) = v505;
    *(float64x2_t *)(result + 48) = v506;
    *(float64x2_t *)(result + 96) = v509;
    *(float64x2_t *)(result + 112) = v510;
    *(float64x2_t *)(result + 160) = v513;
    *(float64x2_t *)(result + 176) = v514;
    *(float64x2_t *)(result + 128) = v511;
    *(float64x2_t *)(result + 144) = v512;
    *(float64x2_t *)(result + 192) = v515;
    *(float64x2_t *)(result + 208) = v516;
    *(float64x2_t *)(result + 256) = v519;
    *(float64x2_t *)(result + 272) = v520;
    *(float64x2_t *)(result + 224) = v517;
    *(float64x2_t *)(result + 240) = v518;
    v469 = a2[16];
    v6 = *v5;
  }
  if (v469)
  {
    result = sub_20F9AC33C(v6 + 104, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 5));
    v521 = *(float64x2_t *)(a3 + 112);
    v522 = *(float64x2_t *)(a3 + 128);
    v523 = *(float64x2_t *)(a3 + 96);
    v524 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v522, v523.f64[0]);
    v525 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v521, v523.f64[0]);
    v526 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v522, v523.f64[1]);
    v527 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v521, v523.f64[1]);
    v528 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v523, v523.f64[1]);
    v529 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v522, v521.f64[0]);
    v530 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v521, v521.f64[0]);
    v531 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v523, v521.f64[0]);
    v532 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v522, v521.f64[1]);
    v533 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v521, v521.f64[1]);
    v534 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v523, v521.f64[1]);
    v535 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v522, v522.f64[0]);
    v536 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v521, v522.f64[0]);
    v537 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v523, v522.f64[0]);
    v538 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v522, v522.f64[1]);
    v539 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v521, v522.f64[1]);
    v540 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v523, v522.f64[1]);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v523, v523.f64[0]);
    *(float64x2_t *)(result + 16) = v525;
    *(float64x2_t *)(result + 32) = v524;
    *(float64x2_t *)(result + 48) = v528;
    *(float64x2_t *)(result + 64) = v527;
    *(float64x2_t *)(result + 80) = v526;
    *(float64x2_t *)(result + 96) = v531;
    *(float64x2_t *)(result + 112) = v530;
    *(float64x2_t *)(result + 128) = v529;
    *(float64x2_t *)(result + 144) = v534;
    *(float64x2_t *)(result + 160) = v533;
    *(float64x2_t *)(result + 176) = v532;
    *(float64x2_t *)(result + 192) = v537;
    *(float64x2_t *)(result + 208) = v536;
    *(float64x2_t *)(result + 224) = v535;
    *(float64x2_t *)(result + 240) = v540;
    *(float64x2_t *)(result + 256) = v539;
    *(float64x2_t *)(result + 272) = v538;
    v6 = *v5;
    v541 = a2[16];
    if (a2[16] && a2[24])
    {
      v542 = *((_DWORD *)a2 + 5);
      v543 = *((_DWORD *)a2 + 7);
      if (v543 >= v542)
      {
        result = sub_20F9AC33C(v6 + 104, v542, v543);
        v935 = *(float64x2_t *)(a3 + 96);
        v936 = *(float64x2_t *)(a3 + 112);
        v937 = *(float64x2_t *)(a3 + 128);
        v938 = *(double *)(a3 + 144);
        v939 = *(double *)(a3 + 152);
        v940 = *(double *)(a3 + 160);
        v941 = *(double *)(a3 + 168);
        v942 = *(double *)(a3 + 176);
        v943 = *(double *)(a3 + 184);
        v944 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v936, v938);
        v945 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v937, v938);
        v946 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v935, v939);
        v947 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v936, v939);
        v948 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v937, v939);
        v949 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v935, v940);
        v950 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v936, v940);
        v951 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v937, v940);
        v952 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v935, v941);
        v953 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v936, v941);
        v954 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v937, v941);
        v955 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v935, v942);
        v956 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v936, v942);
        v957 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v937, v942);
        v958 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v935, v943);
        v959 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v936, v943);
        v960 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v937, v943);
        *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v935, v938);
        *(float64x2_t *)(result + 16) = v944;
        *(float64x2_t *)(result + 64) = v947;
        *(float64x2_t *)(result + 80) = v948;
        *(float64x2_t *)(result + 32) = v945;
        *(float64x2_t *)(result + 48) = v946;
        *(float64x2_t *)(result + 96) = v949;
        *(float64x2_t *)(result + 112) = v950;
        *(float64x2_t *)(result + 160) = v953;
        *(float64x2_t *)(result + 176) = v954;
        *(float64x2_t *)(result + 128) = v951;
        *(float64x2_t *)(result + 144) = v952;
        *(float64x2_t *)(result + 192) = v955;
        *(float64x2_t *)(result + 208) = v956;
        *(float64x2_t *)(result + 256) = v959;
        *(float64x2_t *)(result + 272) = v960;
        *(float64x2_t *)(result + 224) = v957;
        *(float64x2_t *)(result + 240) = v958;
        v541 = a2[16];
        v6 = *v5;
        if (a2[16])
        {
LABEL_115:
          if (a2[32])
          {
            result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 9));
            v544 = *(float64x2_t *)(a3 + 96);
            v545 = *(float64x2_t *)(a3 + 112);
            v546 = *(float64x2_t *)(a3 + 128);
            v547 = *(double *)(a3 + 192);
            v548 = *(double *)(a3 + 200);
            v549 = *(double *)(a3 + 208);
            v550 = *(double *)(a3 + 216);
            v551 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v546, v547);
            v552 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v545, v547);
            v553 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v546, v548);
            v554 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v545, v548);
            v555 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v544, v548);
            v556 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v546, v549);
            v557 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v545, v549);
            v558 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v544, v549);
            v559 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v546, v550);
            v560 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v545, v550);
            v561 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v544, v550);
            *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v544, v547);
            *(float64x2_t *)(result + 16) = v552;
            *(float64x2_t *)(result + 32) = v551;
            *(float64x2_t *)(result + 48) = v555;
            *(float64x2_t *)(result + 64) = v554;
            *(float64x2_t *)(result + 80) = v553;
            *(float64x2_t *)(result + 96) = v558;
            *(float64x2_t *)(result + 112) = v557;
            *(float64x2_t *)(result + 128) = v556;
            *(float64x2_t *)(result + 144) = v561;
            *(float64x2_t *)(result + 160) = v560;
            *(float64x2_t *)(result + 176) = v559;
            v541 = a2[16];
            v6 = *v5;
          }
        }
LABEL_117:
        if (v541 && a2[40])
        {
          result = sub_20F9AC460(v6 + 10184, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 11));
          v562 = *(float64x2_t *)(a3 + 96);
          v563 = *(float64x2_t *)(a3 + 112);
          v564 = *(float64x2_t *)(a3 + 128);
          v565 = *(double *)(a3 + 224);
          v566 = *(double *)(a3 + 232);
          v567 = *(double *)(a3 + 240);
          v568 = *(double *)(a3 + 248);
          v569 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v564, v565);
          v570 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v563, v565);
          v571 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v564, v566);
          v572 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v563, v566);
          v573 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v562, v566);
          v574 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v564, v567);
          v575 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v563, v567);
          v576 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v562, v567);
          v577 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v564, v568);
          v578 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v563, v568);
          v579 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v562, v568);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v562, v565);
          *(float64x2_t *)(result + 16) = v570;
          *(float64x2_t *)(result + 32) = v569;
          *(float64x2_t *)(result + 48) = v573;
          *(float64x2_t *)(result + 64) = v572;
          *(float64x2_t *)(result + 80) = v571;
          *(float64x2_t *)(result + 96) = v576;
          *(float64x2_t *)(result + 112) = v575;
          *(float64x2_t *)(result + 128) = v574;
          *(float64x2_t *)(result + 144) = v579;
          *(float64x2_t *)(result + 160) = v578;
          *(float64x2_t *)(result + 176) = v577;
          v541 = a2[16];
          v6 = *v5;
        }
        if (v541 && a2[48])
        {
          result = sub_20F9AC460(v6 + 11624, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 13));
          v580 = *(float64x2_t *)(a3 + 96);
          v581 = *(float64x2_t *)(a3 + 112);
          v582 = *(float64x2_t *)(a3 + 128);
          v583 = *(double *)(a3 + 256);
          v584 = *(double *)(a3 + 264);
          v585 = *(double *)(a3 + 272);
          v586 = *(double *)(a3 + 280);
          v587 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v582, v583);
          v588 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v581, v583);
          v589 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v582, v584);
          v590 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v581, v584);
          v591 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v580, v584);
          v592 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v582, v585);
          v593 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v581, v585);
          v594 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v580, v585);
          v595 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v582, v586);
          v596 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v581, v586);
          v597 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v580, v586);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v580, v583);
          *(float64x2_t *)(result + 16) = v588;
          *(float64x2_t *)(result + 32) = v587;
          *(float64x2_t *)(result + 48) = v591;
          *(float64x2_t *)(result + 64) = v590;
          *(float64x2_t *)(result + 80) = v589;
          *(float64x2_t *)(result + 96) = v594;
          *(float64x2_t *)(result + 112) = v593;
          *(float64x2_t *)(result + 128) = v592;
          *(float64x2_t *)(result + 144) = v597;
          *(float64x2_t *)(result + 160) = v596;
          *(float64x2_t *)(result + 176) = v595;
          v541 = a2[16];
          v6 = *v5;
        }
        if (v541 && a2[56])
        {
          result = sub_20F9AC460(v6 + 11624, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 15));
          v598 = *(float64x2_t *)(a3 + 96);
          v599 = *(float64x2_t *)(a3 + 112);
          v600 = *(float64x2_t *)(a3 + 128);
          v601 = *(double *)(a3 + 288);
          v602 = *(double *)(a3 + 296);
          v603 = *(double *)(a3 + 304);
          v604 = *(double *)(a3 + 312);
          v605 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v600, v601);
          v606 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v599, v601);
          v607 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v600, v602);
          v608 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v599, v602);
          v609 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v598, v602);
          v610 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v600, v603);
          v611 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v599, v603);
          v612 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v598, v603);
          v613 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v600, v604);
          v614 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v599, v604);
          v615 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v598, v604);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v598, v601);
          *(float64x2_t *)(result + 16) = v606;
          *(float64x2_t *)(result + 32) = v605;
          *(float64x2_t *)(result + 48) = v609;
          *(float64x2_t *)(result + 64) = v608;
          *(float64x2_t *)(result + 80) = v607;
          *(float64x2_t *)(result + 96) = v612;
          *(float64x2_t *)(result + 112) = v611;
          *(float64x2_t *)(result + 128) = v610;
          *(float64x2_t *)(result + 144) = v615;
          *(float64x2_t *)(result + 160) = v614;
          *(float64x2_t *)(result + 176) = v613;
          v541 = a2[16];
          v6 = *v5;
        }
        if (v541 && a2[64])
        {
          result = sub_20F9AC584(v6 + 13064, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 17));
          v616 = *(float64x2_t *)(a3 + 96);
          v617 = *(float64x2_t *)(a3 + 112);
          v618 = *(float64x2_t *)(a3 + 128);
          v619 = *(double *)(a3 + 320);
          v620 = *(double *)(a3 + 328);
          v621 = *(double *)(a3 + 336);
          v622 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v618, v619);
          v623 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v617, v619);
          v624 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v618, v620);
          v625 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v617, v620);
          v626 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v616, v620);
          v627 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v618, v621);
          v628 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v617, v621);
          v629 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v616, v621);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v616, v619);
          *(float64x2_t *)(result + 16) = v623;
          *(float64x2_t *)(result + 32) = v622;
          *(float64x2_t *)(result + 48) = v626;
          *(float64x2_t *)(result + 64) = v625;
          *(float64x2_t *)(result + 80) = v624;
          *(float64x2_t *)(result + 96) = v629;
          *(float64x2_t *)(result + 112) = v628;
          *(float64x2_t *)(result + 128) = v627;
          v541 = a2[16];
          v6 = *v5;
        }
        if (v541 && a2[72])
        {
          result = sub_20F9AC584(v6 + 13064, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 19));
          v630 = *(float64x2_t *)(a3 + 96);
          v631 = *(float64x2_t *)(a3 + 112);
          v632 = *(float64x2_t *)(a3 + 128);
          v633 = *(double *)(a3 + 344);
          v634 = *(double *)(a3 + 352);
          v635 = *(double *)(a3 + 360);
          v636 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v632, v633);
          v637 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v631, v633);
          v638 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v632, v634);
          v639 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v631, v634);
          v640 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v630, v634);
          v641 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v632, v635);
          v642 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v631, v635);
          v643 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v630, v635);
          *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v630, v633);
          *(float64x2_t *)(result + 16) = v637;
          *(float64x2_t *)(result + 32) = v636;
          *(float64x2_t *)(result + 48) = v640;
          *(float64x2_t *)(result + 64) = v639;
          *(float64x2_t *)(result + 80) = v638;
          *(float64x2_t *)(result + 96) = v643;
          *(float64x2_t *)(result + 112) = v642;
          *(float64x2_t *)(result + 128) = v641;
          v6 = *v5;
        }
        goto LABEL_132;
      }
      v541 = 1;
    }
    if (v541)
      goto LABEL_115;
    goto LABEL_117;
  }
LABEL_132:
  v644 = a2[8];
  if (a2[8] && *a2)
  {
    v645 = *((_DWORD *)a2 + 3);
    v646 = *((_DWORD *)a2 + 1);
    if (v646 < v645)
      goto LABEL_138;
    result = sub_20F9AC33C(v6 + 3272, v645, v646);
    v647 = *(float64x2_t *)(a3 + 48);
    v648 = *(float64x2_t *)(a3 + 64);
    v649 = *(float64x2_t *)(a3 + 80);
    v650 = *(double *)(a3 + 8);
    v651 = *(double *)(a3 + 16);
    v652 = *(double *)(a3 + 24);
    v653 = *(double *)(a3 + 32);
    v654 = *(double *)(a3 + 40);
    v655 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v648, *(double *)a3);
    v656 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v649, *(double *)a3);
    v657 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v647, v650);
    v658 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v648, v650);
    v659 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v649, v650);
    v660 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v647, v651);
    v661 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v648, v651);
    v662 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v649, v651);
    v663 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v647, v652);
    v664 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v648, v652);
    v665 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v649, v652);
    v666 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v647, v653);
    v667 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v648, v653);
    v668 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v649, v653);
    v669 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v647, v654);
    v670 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v648, v654);
    v671 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v649, v654);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v647, *(double *)a3);
    *(float64x2_t *)(result + 16) = v655;
    *(float64x2_t *)(result + 64) = v658;
    *(float64x2_t *)(result + 80) = v659;
    *(float64x2_t *)(result + 32) = v656;
    *(float64x2_t *)(result + 48) = v657;
    *(float64x2_t *)(result + 96) = v660;
    *(float64x2_t *)(result + 112) = v661;
    *(float64x2_t *)(result + 160) = v664;
    *(float64x2_t *)(result + 176) = v665;
    *(float64x2_t *)(result + 128) = v662;
    *(float64x2_t *)(result + 144) = v663;
    *(float64x2_t *)(result + 192) = v666;
    *(float64x2_t *)(result + 208) = v667;
    *(float64x2_t *)(result + 256) = v670;
    *(float64x2_t *)(result + 272) = v671;
    *(float64x2_t *)(result + 224) = v668;
    *(float64x2_t *)(result + 240) = v669;
    v644 = a2[8];
    v6 = *v5;
  }
  if (!v644)
    goto LABEL_156;
  v645 = *((_DWORD *)a2 + 3);
LABEL_138:
  result = sub_20F9AC33C(v6 + 3272, v645, v645);
  v672 = *(float64x2_t *)(a3 + 64);
  v673 = *(float64x2_t *)(a3 + 80);
  v674 = *(float64x2_t *)(a3 + 48);
  v675 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v673, v674.f64[0]);
  v676 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v672, v674.f64[0]);
  v677 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v673, v674.f64[1]);
  v678 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v672, v674.f64[1]);
  v679 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v674, v674.f64[1]);
  v680 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v673, v672.f64[0]);
  v681 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v672, v672.f64[0]);
  v682 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v674, v672.f64[0]);
  v683 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v673, v672.f64[1]);
  v684 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v672, v672.f64[1]);
  v685 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v674, v672.f64[1]);
  v686 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v673, v673.f64[0]);
  v687 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v672, v673.f64[0]);
  v688 = vmlaq_n_f64(*(float64x2_t *)(result + 192), v674, v673.f64[0]);
  v689 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v673, v673.f64[1]);
  v690 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v672, v673.f64[1]);
  v691 = vmlaq_n_f64(*(float64x2_t *)(result + 240), v674, v673.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v674, v674.f64[0]);
  *(float64x2_t *)(result + 16) = v676;
  *(float64x2_t *)(result + 32) = v675;
  *(float64x2_t *)(result + 48) = v679;
  *(float64x2_t *)(result + 64) = v678;
  *(float64x2_t *)(result + 80) = v677;
  *(float64x2_t *)(result + 96) = v682;
  *(float64x2_t *)(result + 112) = v681;
  *(float64x2_t *)(result + 128) = v680;
  *(float64x2_t *)(result + 144) = v685;
  *(float64x2_t *)(result + 160) = v684;
  *(float64x2_t *)(result + 176) = v683;
  *(float64x2_t *)(result + 192) = v688;
  *(float64x2_t *)(result + 208) = v687;
  *(float64x2_t *)(result + 224) = v686;
  *(float64x2_t *)(result + 240) = v691;
  *(float64x2_t *)(result + 256) = v690;
  *(float64x2_t *)(result + 272) = v689;
  v692 = a2[8];
  v6 = *v5;
  if (a2[8] && a2[32])
  {
    result = sub_20F9AC460(v6 + 10472, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 9));
    v693 = *(float64x2_t *)(a3 + 48);
    v694 = *(float64x2_t *)(a3 + 64);
    v695 = *(float64x2_t *)(a3 + 80);
    v696 = *(double *)(a3 + 192);
    v697 = *(double *)(a3 + 200);
    v698 = *(double *)(a3 + 208);
    v699 = *(double *)(a3 + 216);
    v700 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v695, v696);
    v701 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v694, v696);
    v702 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v695, v697);
    v703 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v694, v697);
    v704 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v693, v697);
    v705 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v695, v698);
    v706 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v694, v698);
    v707 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v693, v698);
    v708 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v695, v699);
    v709 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v694, v699);
    v710 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v693, v699);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v693, v696);
    *(float64x2_t *)(result + 16) = v701;
    *(float64x2_t *)(result + 32) = v700;
    *(float64x2_t *)(result + 48) = v704;
    *(float64x2_t *)(result + 64) = v703;
    *(float64x2_t *)(result + 80) = v702;
    *(float64x2_t *)(result + 96) = v707;
    *(float64x2_t *)(result + 112) = v706;
    *(float64x2_t *)(result + 128) = v705;
    *(float64x2_t *)(result + 144) = v710;
    *(float64x2_t *)(result + 160) = v709;
    *(float64x2_t *)(result + 176) = v708;
    v692 = a2[8];
    v6 = *v5;
  }
  if (v692 && a2[40])
  {
    result = sub_20F9AC460(v6 + 10472, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 11));
    v711 = *(float64x2_t *)(a3 + 48);
    v712 = *(float64x2_t *)(a3 + 64);
    v713 = *(float64x2_t *)(a3 + 80);
    v714 = *(double *)(a3 + 224);
    v715 = *(double *)(a3 + 232);
    v716 = *(double *)(a3 + 240);
    v717 = *(double *)(a3 + 248);
    v718 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v713, v714);
    v719 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v712, v714);
    v720 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v713, v715);
    v721 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v712, v715);
    v722 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v711, v715);
    v723 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v713, v716);
    v724 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v712, v716);
    v725 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v711, v716);
    v726 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v713, v717);
    v727 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v712, v717);
    v728 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v711, v717);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v711, v714);
    *(float64x2_t *)(result + 16) = v719;
    *(float64x2_t *)(result + 32) = v718;
    *(float64x2_t *)(result + 48) = v722;
    *(float64x2_t *)(result + 64) = v721;
    *(float64x2_t *)(result + 80) = v720;
    *(float64x2_t *)(result + 96) = v725;
    *(float64x2_t *)(result + 112) = v724;
    *(float64x2_t *)(result + 128) = v723;
    *(float64x2_t *)(result + 144) = v728;
    *(float64x2_t *)(result + 160) = v727;
    *(float64x2_t *)(result + 176) = v726;
    v692 = a2[8];
    v6 = *v5;
  }
  if (v692 && a2[48])
  {
    result = sub_20F9AC460(v6 + 11912, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 13));
    v729 = *(float64x2_t *)(a3 + 48);
    v730 = *(float64x2_t *)(a3 + 64);
    v731 = *(float64x2_t *)(a3 + 80);
    v732 = *(double *)(a3 + 256);
    v733 = *(double *)(a3 + 264);
    v734 = *(double *)(a3 + 272);
    v735 = *(double *)(a3 + 280);
    v736 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v731, v732);
    v737 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v730, v732);
    v738 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v731, v733);
    v739 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v730, v733);
    v740 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v729, v733);
    v741 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v731, v734);
    v742 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v730, v734);
    v743 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v729, v734);
    v744 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v731, v735);
    v745 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v730, v735);
    v746 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v729, v735);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v729, v732);
    *(float64x2_t *)(result + 16) = v737;
    *(float64x2_t *)(result + 32) = v736;
    *(float64x2_t *)(result + 48) = v740;
    *(float64x2_t *)(result + 64) = v739;
    *(float64x2_t *)(result + 80) = v738;
    *(float64x2_t *)(result + 96) = v743;
    *(float64x2_t *)(result + 112) = v742;
    *(float64x2_t *)(result + 128) = v741;
    *(float64x2_t *)(result + 144) = v746;
    *(float64x2_t *)(result + 160) = v745;
    *(float64x2_t *)(result + 176) = v744;
    v692 = a2[8];
    v6 = *v5;
  }
  if (v692 && a2[56])
  {
    result = sub_20F9AC460(v6 + 11912, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 15));
    v747 = *(float64x2_t *)(a3 + 48);
    v748 = *(float64x2_t *)(a3 + 64);
    v749 = *(float64x2_t *)(a3 + 80);
    v750 = *(double *)(a3 + 288);
    v751 = *(double *)(a3 + 296);
    v752 = *(double *)(a3 + 304);
    v753 = *(double *)(a3 + 312);
    v754 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v749, v750);
    v755 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v748, v750);
    v756 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v749, v751);
    v757 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v748, v751);
    v758 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v747, v751);
    v759 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v749, v752);
    v760 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v748, v752);
    v761 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v747, v752);
    v762 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v749, v753);
    v763 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v748, v753);
    v764 = vmlaq_n_f64(*(float64x2_t *)(result + 144), v747, v753);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v747, v750);
    *(float64x2_t *)(result + 16) = v755;
    *(float64x2_t *)(result + 32) = v754;
    *(float64x2_t *)(result + 48) = v758;
    *(float64x2_t *)(result + 64) = v757;
    *(float64x2_t *)(result + 80) = v756;
    *(float64x2_t *)(result + 96) = v761;
    *(float64x2_t *)(result + 112) = v760;
    *(float64x2_t *)(result + 128) = v759;
    *(float64x2_t *)(result + 144) = v764;
    *(float64x2_t *)(result + 160) = v763;
    *(float64x2_t *)(result + 176) = v762;
    v692 = a2[8];
    v6 = *v5;
  }
  if (v692 && a2[64])
  {
    result = sub_20F9AC584(v6 + 13352, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 17));
    v765 = *(float64x2_t *)(a3 + 48);
    v766 = *(float64x2_t *)(a3 + 64);
    v767 = *(float64x2_t *)(a3 + 80);
    v768 = *(double *)(a3 + 320);
    v769 = *(double *)(a3 + 328);
    v770 = *(double *)(a3 + 336);
    v771 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v767, v768);
    v772 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v766, v768);
    v773 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v767, v769);
    v774 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v766, v769);
    v775 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v765, v769);
    v776 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v767, v770);
    v777 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v766, v770);
    v778 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v765, v770);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v765, v768);
    *(float64x2_t *)(result + 16) = v772;
    *(float64x2_t *)(result + 32) = v771;
    *(float64x2_t *)(result + 48) = v775;
    *(float64x2_t *)(result + 64) = v774;
    *(float64x2_t *)(result + 80) = v773;
    *(float64x2_t *)(result + 96) = v778;
    *(float64x2_t *)(result + 112) = v777;
    *(float64x2_t *)(result + 128) = v776;
    v692 = a2[8];
    v6 = *v5;
  }
  if (v692 && a2[72])
  {
    result = sub_20F9AC584(v6 + 13352, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 19));
    v779 = *(float64x2_t *)(a3 + 48);
    v780 = *(float64x2_t *)(a3 + 64);
    v781 = *(float64x2_t *)(a3 + 80);
    v782 = *(double *)(a3 + 344);
    v783 = *(double *)(a3 + 352);
    v784 = *(double *)(a3 + 360);
    v785 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v781, v782);
    v786 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v780, v782);
    v787 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v781, v783);
    v788 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v780, v783);
    v789 = vmlaq_n_f64(*(float64x2_t *)(result + 48), v779, v783);
    v790 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v781, v784);
    v791 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v780, v784);
    v792 = vmlaq_n_f64(*(float64x2_t *)(result + 96), v779, v784);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, v779, v782);
    *(float64x2_t *)(result + 16) = v786;
    *(float64x2_t *)(result + 32) = v785;
    *(float64x2_t *)(result + 48) = v789;
    *(float64x2_t *)(result + 64) = v788;
    *(float64x2_t *)(result + 80) = v787;
    *(float64x2_t *)(result + 96) = v792;
    *(float64x2_t *)(result + 112) = v791;
    *(float64x2_t *)(result + 128) = v790;
    v6 = *v5;
  }
LABEL_156:
  if (!*a2)
    return result;
  result = sub_20F9AC33C(v6 + 3272, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 1));
  v793 = *(float64x2_t *)(a3 + 16);
  v794 = *(float64x2_t *)(a3 + 32);
  v795 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v794, *(double *)a3);
  v796 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v793, *(double *)a3);
  v797 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v794, *(double *)(a3 + 8));
  v798 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v793, *(double *)(a3 + 8));
  v799 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, *(double *)(a3 + 8));
  v800 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v794, v793.f64[0]);
  v801 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v793, v793.f64[0]);
  v802 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v793.f64[0]);
  v803 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v794, v793.f64[1]);
  v804 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v793, v793.f64[1]);
  v805 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v793.f64[1]);
  v806 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v794, v794.f64[0]);
  v807 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v793, v794.f64[0]);
  v808 = vmlaq_n_f64(*(float64x2_t *)(result + 192), *(float64x2_t *)a3, v794.f64[0]);
  v809 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v794, v794.f64[1]);
  v810 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v793, v794.f64[1]);
  v811 = vmlaq_n_f64(*(float64x2_t *)(result + 240), *(float64x2_t *)a3, v794.f64[1]);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, *(double *)a3);
  *(float64x2_t *)(result + 16) = v796;
  *(float64x2_t *)(result + 32) = v795;
  *(float64x2_t *)(result + 48) = v799;
  *(float64x2_t *)(result + 64) = v798;
  *(float64x2_t *)(result + 80) = v797;
  *(float64x2_t *)(result + 96) = v802;
  *(float64x2_t *)(result + 112) = v801;
  *(float64x2_t *)(result + 128) = v800;
  *(float64x2_t *)(result + 144) = v805;
  *(float64x2_t *)(result + 160) = v804;
  *(float64x2_t *)(result + 176) = v803;
  *(float64x2_t *)(result + 192) = v808;
  *(float64x2_t *)(result + 208) = v807;
  *(float64x2_t *)(result + 224) = v806;
  *(float64x2_t *)(result + 240) = v811;
  *(float64x2_t *)(result + 256) = v810;
  *(float64x2_t *)(result + 272) = v809;
  v812 = *a2;
  if (!*a2 || !a2[8])
  {
LABEL_161:
    if (v812)
      goto LABEL_162;
    goto LABEL_164;
  }
  v813 = *((_DWORD *)a2 + 1);
  v814 = *((_DWORD *)a2 + 3);
  if (v814 < v813)
  {
    v812 = 1;
    goto LABEL_161;
  }
  result = sub_20F9AC33C(*v5 + 3272, v813, v814);
  v961 = *(float64x2_t *)(a3 + 16);
  v962 = *(float64x2_t *)(a3 + 32);
  v963 = *(double *)(a3 + 48);
  v964 = *(double *)(a3 + 56);
  v965 = *(double *)(a3 + 64);
  v966 = *(double *)(a3 + 72);
  v967 = *(double *)(a3 + 80);
  v968 = *(double *)(a3 + 88);
  v969 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v961, v963);
  v970 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v962, v963);
  v971 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v964);
  v972 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v961, v964);
  v973 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v962, v964);
  v974 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v965);
  v975 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v961, v965);
  v976 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v962, v965);
  v977 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v966);
  v978 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v961, v966);
  v979 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v962, v966);
  v980 = vmlaq_n_f64(*(float64x2_t *)(result + 192), *(float64x2_t *)a3, v967);
  v981 = vmlaq_n_f64(*(float64x2_t *)(result + 208), v961, v967);
  v982 = vmlaq_n_f64(*(float64x2_t *)(result + 224), v962, v967);
  v983 = vmlaq_n_f64(*(float64x2_t *)(result + 240), *(float64x2_t *)a3, v968);
  v984 = vmlaq_n_f64(*(float64x2_t *)(result + 256), v961, v968);
  v985 = vmlaq_n_f64(*(float64x2_t *)(result + 272), v962, v968);
  *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v963);
  *(float64x2_t *)(result + 16) = v969;
  *(float64x2_t *)(result + 64) = v972;
  *(float64x2_t *)(result + 80) = v973;
  *(float64x2_t *)(result + 32) = v970;
  *(float64x2_t *)(result + 48) = v971;
  *(float64x2_t *)(result + 96) = v974;
  *(float64x2_t *)(result + 112) = v975;
  *(float64x2_t *)(result + 160) = v978;
  *(float64x2_t *)(result + 176) = v979;
  *(float64x2_t *)(result + 128) = v976;
  *(float64x2_t *)(result + 144) = v977;
  *(float64x2_t *)(result + 192) = v980;
  *(float64x2_t *)(result + 208) = v981;
  *(float64x2_t *)(result + 256) = v984;
  *(float64x2_t *)(result + 272) = v985;
  *(float64x2_t *)(result + 224) = v982;
  *(float64x2_t *)(result + 240) = v983;
  v812 = *a2;
  if (*a2)
  {
LABEL_162:
    if (a2[32])
    {
      result = sub_20F9AC460(*v5 + 10472, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 9));
      v815 = *(float64x2_t *)(a3 + 16);
      v816 = *(float64x2_t *)(a3 + 32);
      v817 = *(double *)(a3 + 192);
      v818 = *(double *)(a3 + 200);
      v819 = *(double *)(a3 + 208);
      v820 = *(double *)(a3 + 216);
      v821 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v816, v817);
      v822 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v815, v817);
      v823 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v816, v818);
      v824 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v815, v818);
      v825 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v818);
      v826 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v816, v819);
      v827 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v815, v819);
      v828 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v819);
      v829 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v816, v820);
      v830 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v815, v820);
      v831 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v820);
      *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v817);
      *(float64x2_t *)(result + 16) = v822;
      *(float64x2_t *)(result + 32) = v821;
      *(float64x2_t *)(result + 48) = v825;
      *(float64x2_t *)(result + 64) = v824;
      *(float64x2_t *)(result + 80) = v823;
      *(float64x2_t *)(result + 96) = v828;
      *(float64x2_t *)(result + 112) = v827;
      *(float64x2_t *)(result + 128) = v826;
      *(float64x2_t *)(result + 144) = v831;
      *(float64x2_t *)(result + 160) = v830;
      *(float64x2_t *)(result + 176) = v829;
      v812 = *a2;
    }
  }
LABEL_164:
  if (v812 && a2[40])
  {
    result = sub_20F9AC460(*v5 + 10472, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 11));
    v832 = *(float64x2_t *)(a3 + 16);
    v833 = *(float64x2_t *)(a3 + 32);
    v834 = *(double *)(a3 + 224);
    v835 = *(double *)(a3 + 232);
    v836 = *(double *)(a3 + 240);
    v837 = *(double *)(a3 + 248);
    v838 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v833, v834);
    v839 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v832, v834);
    v840 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v833, v835);
    v841 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v832, v835);
    v842 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v835);
    v843 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v833, v836);
    v844 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v832, v836);
    v845 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v836);
    v846 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v833, v837);
    v847 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v832, v837);
    v848 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v837);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v834);
    *(float64x2_t *)(result + 16) = v839;
    *(float64x2_t *)(result + 32) = v838;
    *(float64x2_t *)(result + 48) = v842;
    *(float64x2_t *)(result + 64) = v841;
    *(float64x2_t *)(result + 80) = v840;
    *(float64x2_t *)(result + 96) = v845;
    *(float64x2_t *)(result + 112) = v844;
    *(float64x2_t *)(result + 128) = v843;
    *(float64x2_t *)(result + 144) = v848;
    *(float64x2_t *)(result + 160) = v847;
    *(float64x2_t *)(result + 176) = v846;
    v812 = *a2;
  }
  if (v812 && a2[48])
  {
    result = sub_20F9AC460(*v5 + 11912, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 13));
    v849 = *(float64x2_t *)(a3 + 16);
    v850 = *(float64x2_t *)(a3 + 32);
    v851 = *(double *)(a3 + 256);
    v852 = *(double *)(a3 + 264);
    v853 = *(double *)(a3 + 272);
    v854 = *(double *)(a3 + 280);
    v855 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v850, v851);
    v856 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v849, v851);
    v857 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v850, v852);
    v858 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v849, v852);
    v859 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v852);
    v860 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v850, v853);
    v861 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v849, v853);
    v862 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v853);
    v863 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v850, v854);
    v864 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v849, v854);
    v865 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v854);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v851);
    *(float64x2_t *)(result + 16) = v856;
    *(float64x2_t *)(result + 32) = v855;
    *(float64x2_t *)(result + 48) = v859;
    *(float64x2_t *)(result + 64) = v858;
    *(float64x2_t *)(result + 80) = v857;
    *(float64x2_t *)(result + 96) = v862;
    *(float64x2_t *)(result + 112) = v861;
    *(float64x2_t *)(result + 128) = v860;
    *(float64x2_t *)(result + 144) = v865;
    *(float64x2_t *)(result + 160) = v864;
    *(float64x2_t *)(result + 176) = v863;
    v812 = *a2;
  }
  if (v812 && a2[56])
  {
    result = sub_20F9AC460(*v5 + 11912, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 15));
    v866 = *(float64x2_t *)(a3 + 16);
    v867 = *(float64x2_t *)(a3 + 32);
    v868 = *(double *)(a3 + 288);
    v869 = *(double *)(a3 + 296);
    v870 = *(double *)(a3 + 304);
    v871 = *(double *)(a3 + 312);
    v872 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v867, v868);
    v873 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v866, v868);
    v874 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v867, v869);
    v875 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v866, v869);
    v876 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v869);
    v877 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v867, v870);
    v878 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v866, v870);
    v879 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v870);
    v880 = vmlaq_n_f64(*(float64x2_t *)(result + 176), v867, v871);
    v881 = vmlaq_n_f64(*(float64x2_t *)(result + 160), v866, v871);
    v882 = vmlaq_n_f64(*(float64x2_t *)(result + 144), *(float64x2_t *)a3, v871);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v868);
    *(float64x2_t *)(result + 16) = v873;
    *(float64x2_t *)(result + 32) = v872;
    *(float64x2_t *)(result + 48) = v876;
    *(float64x2_t *)(result + 64) = v875;
    *(float64x2_t *)(result + 80) = v874;
    *(float64x2_t *)(result + 96) = v879;
    *(float64x2_t *)(result + 112) = v878;
    *(float64x2_t *)(result + 128) = v877;
    *(float64x2_t *)(result + 144) = v882;
    *(float64x2_t *)(result + 160) = v881;
    *(float64x2_t *)(result + 176) = v880;
    v812 = *a2;
  }
  if (v812 && a2[64])
  {
    result = sub_20F9AC584(*v5 + 13352, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 17));
    v883 = *(float64x2_t *)(a3 + 16);
    v884 = *(float64x2_t *)(a3 + 32);
    v885 = *(double *)(a3 + 320);
    v886 = *(double *)(a3 + 328);
    v887 = *(double *)(a3 + 336);
    v888 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v884, v885);
    v889 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v883, v885);
    v890 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v884, v886);
    v891 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v883, v886);
    v892 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v886);
    v893 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v884, v887);
    v894 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v883, v887);
    v895 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v887);
    *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v885);
    *(float64x2_t *)(result + 16) = v889;
    *(float64x2_t *)(result + 32) = v888;
    *(float64x2_t *)(result + 48) = v892;
    *(float64x2_t *)(result + 64) = v891;
    *(float64x2_t *)(result + 80) = v890;
    *(float64x2_t *)(result + 96) = v895;
    *(float64x2_t *)(result + 112) = v894;
    *(float64x2_t *)(result + 128) = v893;
    v812 = *a2;
  }
  if (v812)
  {
    if (a2[72])
    {
      result = sub_20F9AC584(*v5 + 13352, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 19));
      v896 = *(float64x2_t *)(a3 + 16);
      v897 = *(float64x2_t *)(a3 + 32);
      v898 = *(double *)(a3 + 344);
      v899 = *(double *)(a3 + 352);
      v900 = *(double *)(a3 + 360);
      v901 = vmlaq_n_f64(*(float64x2_t *)(result + 32), v897, v898);
      v902 = vmlaq_n_f64(*(float64x2_t *)(result + 16), v896, v898);
      v903 = vmlaq_n_f64(*(float64x2_t *)(result + 80), v897, v899);
      v904 = vmlaq_n_f64(*(float64x2_t *)(result + 64), v896, v899);
      v905 = vmlaq_n_f64(*(float64x2_t *)(result + 48), *(float64x2_t *)a3, v899);
      v906 = vmlaq_n_f64(*(float64x2_t *)(result + 128), v897, v900);
      v907 = vmlaq_n_f64(*(float64x2_t *)(result + 112), v896, v900);
      v908 = vmlaq_n_f64(*(float64x2_t *)(result + 96), *(float64x2_t *)a3, v900);
      *(float64x2_t *)result = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)a3, v898);
      *(float64x2_t *)(result + 16) = v902;
      *(float64x2_t *)(result + 32) = v901;
      *(float64x2_t *)(result + 48) = v905;
      *(float64x2_t *)(result + 64) = v904;
      *(float64x2_t *)(result + 80) = v903;
      *(float64x2_t *)(result + 96) = v908;
      *(float64x2_t *)(result + 112) = v907;
      *(float64x2_t *)(result + 128) = v906;
    }
  }
  return result;
}

BOOL sub_20FAFB830(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  _OWORD *v6;
  _BOOL8 v7;
  double v8;
  uint64_t v9;
  float64x2_t *v10;
  int v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  double v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v143;
  float64x2_t v144;

  v6 = (_OWORD *)(a1 + 120);
  v7 = sub_20FC7599C(a1, (_QWORD *)(a1 + 48), a1 + 120, a3);
  *(_BYTE *)(a1 + 144) = v7;
  v8 = 0.0;
  if (v7)
  {
    v9 = *(_QWORD *)(a1 + 152);
    if (v9)
    {
      (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)v9 + 24))(v9, v6, 0.0);
      v10 = *(float64x2_t **)(a1 + 152);
      v11 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v10->f64[0] + 16))(v10);
      switch(v11)
      {
        case 0:
          v12 = v10[1];
          v13 = v10[2];
          goto LABEL_8;
        case 1:
          v14 = a3[1];
          v15 = vmulq_f64(*a3, v10[1]);
          v17 = a3[4];
          v16 = a3[5];
          v19 = a3[2];
          v18 = a3[3];
          *a3 = v15;
          v20 = vmulq_f64(v14, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          v21 = vmulq_f64(v19, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          v22 = vmulq_f64(v18, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          a3[3] = v22;
          v23 = vmulq_f64(v17, v10[1]);
          *a3 = v15;
          a3[1] = v20;
          a3[2] = v21;
          a3[3] = v22;
          a3[4] = v23;
          v24 = vmulq_f64(v16, v10[1]);
          a3[2] = v21;
          a3[3] = v22;
          *a3 = v15;
          a3[1] = v20;
          a3[4] = v23;
          a3[5] = v24;
          break;
        case 2:
          v25 = v10[1].f64[0];
          v26 = vmulq_n_f64(a3[5], v25);
          v27 = vmulq_n_f64(a3[4], v25);
          v28 = vmulq_n_f64(a3[3], v25);
          v29 = vmulq_n_f64(a3[2], v25);
          v30 = vmulq_n_f64(a3[1], v25);
          *a3 = vmulq_n_f64(*a3, v25);
          a3[1] = v30;
          a3[2] = v29;
          a3[3] = v28;
          a3[4] = v27;
          a3[5] = v26;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v143, v10);
          v12 = v143;
          v13 = v144;
LABEL_8:
          v31 = a3[5];
          v32 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[1].f64[0]), v13, a3[1], 1);
          v33 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[2].f64[0]), v13, a3[2], 1);
          v34 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[3].f64[0]), v13, a3[3], 1);
          v35 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3[4].f64[0]), v13, a3[4], 1);
          *a3 = vmlaq_laneq_f64(vmulq_n_f64(v12, a3->f64[0]), v13, *a3, 1);
          a3[1] = v32;
          a3[2] = v33;
          a3[3] = v34;
          a3[4] = v35;
          a3[5] = vmlaq_laneq_f64(vmulq_n_f64(v12, v31.f64[0]), v13, v31, 1);
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
          v36 = v10[1];
          v37 = v10[2];
          goto LABEL_14;
        case 1:
          v38 = a3[7];
          v39 = vmulq_f64(a3[6], v10[1]);
          v41 = a3[10];
          v40 = a3[11];
          v43 = a3[8];
          v42 = a3[9];
          a3[6] = v39;
          v44 = vmulq_f64(v38, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          v45 = vmulq_f64(v43, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          v46 = vmulq_f64(v42, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          a3[9] = v46;
          v47 = vmulq_f64(v41, v10[1]);
          a3[6] = v39;
          a3[7] = v44;
          a3[8] = v45;
          a3[9] = v46;
          a3[10] = v47;
          v48 = vmulq_f64(v40, v10[1]);
          a3[8] = v45;
          a3[9] = v46;
          a3[6] = v39;
          a3[7] = v44;
          a3[10] = v47;
          a3[11] = v48;
          break;
        case 2:
          v49 = v10[1].f64[0];
          v50 = vmulq_n_f64(a3[11], v49);
          v51 = vmulq_n_f64(a3[10], v49);
          v52 = vmulq_n_f64(a3[9], v49);
          v53 = vmulq_n_f64(a3[8], v49);
          v54 = vmulq_n_f64(a3[7], v49);
          a3[6] = vmulq_n_f64(a3[6], v49);
          a3[7] = v54;
          a3[8] = v53;
          a3[9] = v52;
          a3[10] = v51;
          a3[11] = v50;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v143, v10);
          v36 = v143;
          v37 = v144;
LABEL_14:
          v55 = a3[11];
          v56 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[7].f64[0]), v37, a3[7], 1);
          v57 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[8].f64[0]), v37, a3[8], 1);
          v58 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[9].f64[0]), v37, a3[9], 1);
          v59 = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[10].f64[0]), v37, a3[10], 1);
          a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v36, a3[6].f64[0]), v37, a3[6], 1);
          a3[7] = v56;
          a3[8] = v57;
          a3[9] = v58;
          a3[10] = v59;
          a3[11] = vmlaq_laneq_f64(vmulq_n_f64(v36, v55.f64[0]), v37, v55, 1);
          break;
        default:
          break;
      }
      switch(v11)
      {
        case 0:
          v60 = v10[1];
          v61 = v10[2];
          goto LABEL_20;
        case 1:
          v62 = a3[13];
          v63 = vmulq_f64(a3[12], v10[1]);
          v65 = a3[16];
          v64 = a3[17];
          v67 = a3[14];
          v66 = a3[15];
          a3[12] = v63;
          v68 = vmulq_f64(v62, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          v69 = vmulq_f64(v67, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          v70 = vmulq_f64(v66, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          a3[15] = v70;
          v71 = vmulq_f64(v65, v10[1]);
          a3[12] = v63;
          a3[13] = v68;
          a3[14] = v69;
          a3[15] = v70;
          a3[16] = v71;
          v72 = vmulq_f64(v64, v10[1]);
          a3[14] = v69;
          a3[15] = v70;
          a3[12] = v63;
          a3[13] = v68;
          a3[16] = v71;
          a3[17] = v72;
          break;
        case 2:
          v73 = v10[1].f64[0];
          v74 = vmulq_n_f64(a3[17], v73);
          v75 = vmulq_n_f64(a3[16], v73);
          v76 = vmulq_n_f64(a3[15], v73);
          v77 = vmulq_n_f64(a3[14], v73);
          v78 = vmulq_n_f64(a3[13], v73);
          a3[12] = vmulq_n_f64(a3[12], v73);
          a3[13] = v78;
          a3[14] = v77;
          a3[15] = v76;
          a3[16] = v75;
          a3[17] = v74;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v143, v10);
          v60 = v143;
          v61 = v144;
LABEL_20:
          v79 = a3[17];
          v80 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[13].f64[0]), v61, a3[13], 1);
          v81 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[14].f64[0]), v61, a3[14], 1);
          v82 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[15].f64[0]), v61, a3[15], 1);
          v83 = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[16].f64[0]), v61, a3[16], 1);
          a3[12] = vmlaq_laneq_f64(vmulq_n_f64(v60, a3[12].f64[0]), v61, a3[12], 1);
          a3[13] = v80;
          a3[14] = v81;
          a3[15] = v82;
          a3[16] = v83;
          a3[17] = vmlaq_laneq_f64(vmulq_n_f64(v60, v79.f64[0]), v61, v79, 1);
          break;
        default:
          break;
      }
      v84 = a3 + 18;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 20))
      {
        switch(v11)
        {
          case 0:
            v85 = v10[1];
            v86 = v10[2];
            goto LABEL_27;
          case 1:
            v87 = a3[19];
            v88 = vmulq_f64(*v84, v10[1]);
            v90 = a3[20];
            v89 = a3[21];
            *v84 = v88;
            v91 = vmulq_f64(v87, v10[1]);
            *v84 = v88;
            a3[19] = v91;
            v92 = vmulq_f64(v90, v10[1]);
            *v84 = v88;
            a3[19] = v91;
            a3[20] = v92;
            v93 = vmulq_f64(v89, v10[1]);
            *v84 = v88;
            a3[19] = v91;
            a3[20] = v92;
            a3[21] = v93;
            break;
          case 2:
            v94 = v10[1].f64[0];
            v95 = vmulq_n_f64(a3[19], v94);
            v96 = vmulq_n_f64(*v84, v94);
            v97 = vmulq_n_f64(a3[21], v94);
            a3[20] = vmulq_n_f64(a3[20], v94);
            a3[21] = v97;
            *v84 = v96;
            a3[19] = v95;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v143, v10);
            v85 = v143;
            v86 = v144;
LABEL_27:
            v98 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[18].f64[0]), v86, a3[18], 1);
            v99 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[19].f64[0]), v86, a3[19], 1);
            v100 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[20].f64[0]), v86, a3[20], 1);
            v101 = vmlaq_laneq_f64(vmulq_n_f64(v85, a3[21].f64[0]), v86, a3[21], 1);
            a3[18] = v98;
            a3[19] = v99;
            a3[20] = v100;
            a3[21] = v101;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        switch(v11)
        {
          case 0:
            v102 = v10[1];
            v103 = v10[2];
            goto LABEL_34;
          case 1:
            v104 = a3[23];
            v105 = vmulq_f64(a3[22], v10[1]);
            v107 = a3[24];
            v106 = a3[25];
            a3[22] = v105;
            v108 = vmulq_f64(v104, v10[1]);
            a3[22] = v105;
            a3[23] = v108;
            v109 = vmulq_f64(v107, v10[1]);
            a3[22] = v105;
            a3[23] = v108;
            a3[24] = v109;
            v110 = vmulq_f64(v106, v10[1]);
            a3[22] = v105;
            a3[23] = v108;
            a3[24] = v109;
            a3[25] = v110;
            break;
          case 2:
            v111 = v10[1].f64[0];
            v112 = vmulq_n_f64(a3[23], v111);
            v113 = vmulq_n_f64(a3[22], v111);
            v114 = vmulq_n_f64(a3[25], v111);
            a3[24] = vmulq_n_f64(a3[24], v111);
            a3[25] = v114;
            a3[22] = v113;
            a3[23] = v112;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v143, v10);
            v102 = v143;
            v103 = v144;
LABEL_34:
            v115 = vmlaq_laneq_f64(vmulq_n_f64(v102, a3[22].f64[0]), v103, a3[22], 1);
            v116 = vmlaq_laneq_f64(vmulq_n_f64(v102, a3[23].f64[0]), v103, a3[23], 1);
            v117 = vmlaq_laneq_f64(vmulq_n_f64(v102, a3[24].f64[0]), v103, a3[24], 1);
            v118 = vmlaq_laneq_f64(vmulq_n_f64(v102, a3[25].f64[0]), v103, a3[25], 1);
            a3[22] = v115;
            a3[23] = v116;
            a3[24] = v117;
            a3[25] = v118;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        switch(v11)
        {
          case 0:
            v119 = v10[1];
            v120 = v10[2];
            goto LABEL_41;
          case 1:
            v121 = a3[27];
            v122 = vmulq_f64(a3[26], v10[1]);
            v123 = a3[28];
            a3[26] = v122;
            v124 = vmulq_f64(v121, v10[1]);
            a3[26] = v122;
            a3[27] = v124;
            v125 = vmulq_f64(v123, v10[1]);
            a3[26] = v122;
            a3[27] = v124;
            a3[28] = v125;
            break;
          case 2:
            v126 = v10[1].f64[0];
            v127 = vmulq_n_f64(a3[28], v126);
            v128 = vmulq_n_f64(a3[27], v126);
            a3[26] = vmulq_n_f64(a3[26], v126);
            a3[27] = v128;
            a3[28] = v127;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v143, v10);
            v119 = v143;
            v120 = v144;
LABEL_41:
            v129 = vmlaq_laneq_f64(vmulq_n_f64(v119, a3[26].f64[0]), v120, a3[26], 1);
            v130 = vmlaq_laneq_f64(vmulq_n_f64(v119, a3[27].f64[0]), v120, a3[27], 1);
            v131 = vmlaq_laneq_f64(vmulq_n_f64(v119, a3[28].f64[0]), v120, a3[28], 1);
            a3[26] = v129;
            a3[27] = v130;
            a3[28] = v131;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        switch(v11)
        {
          case 0:
            v132 = v10[1];
            v133 = v10[2];
            goto LABEL_48;
          case 1:
            v134 = vmulq_f64(a3[29], v10[1]);
            goto LABEL_49;
          case 2:
            v134 = vmulq_n_f64(a3[29], v10[1].f64[0]);
            goto LABEL_49;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v10->f64[0] + 56))(&v143, v10);
            v132 = v143;
            v133 = v144;
LABEL_48:
            v134 = vmlaq_laneq_f64(vmulq_n_f64(v132, a3[29].f64[0]), v133, a3[29], 1);
LABEL_49:
            a3[29] = v134;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 104) = *v6;
    _Q0 = *(_OWORD *)(a1 + 120);
    _D2 = *(_QWORD *)(a1 + 128);
    __asm { FMLA            D1, D2, V0.D[1] }
    v8 = *(double *)(a2 + 8) * _D1;
  }
  *(double *)(a1 + 136) = v8;
  return v7;
}

uint64_t sub_20FAFBFCC(uint64_t result, unsigned __int8 *a2, float64x2_t *a3)
{
  uint64_t *v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v21;
  float64x2_t v23;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  const double *f64;
  const double *v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  const double *v52;
  float64x2_t v53;
  float64x2_t v54;
  const double *v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  int v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  int v95;
  const double *v96;
  const double *v97;
  const double *v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  const double *v137;
  const double *v138;
  const double *v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  const double *v176;
  float64x2_t v177;
  float64x2_t v178;
  const double *v179;
  float64x2_t v180;
  float64x2_t v181;
  const double *v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  int v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  int v288;
  const double *v289;
  const double *v290;
  const double *v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  const double *v327;
  float64x2_t v328;
  float64x2_t v329;
  const double *v330;
  float64x2_t v331;
  float64x2_t v332;
  const double *v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  int v378;
  unsigned int v379;
  unsigned int v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  const double *v440;
  float64x2_t v441;
  float64x2_t v442;
  const double *v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  int v486;
  float64x2_t v487;
  int64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  int64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  int64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2x2_t v580;
  float64x2x2_t v581;
  float64x2x2_t v582;
  float64x2x2_t v583;
  float64x2x2_t v584;
  float64x2x2_t v585;
  float64x2x2_t v586;
  float64x2x2_t v587;
  float64x2x2_t v588;
  float64x2x2_t v589;
  float64x2x2_t v590;
  float64x2x2_t v591;
  float64x2x2_t v592;
  float64x2x2_t v593;
  float64x2x2_t v594;
  float64x2x2_t v595;
  float64x2x2_t v596;
  float64x2x2_t v597;
  float64x2x2_t v598;
  float64x2x2_t v599;
  float64x2x2_t v600;
  float64x2x2_t v601;
  float64x2x2_t v602;
  float64x2x2_t v603;
  float64x2x2_t v604;
  float64x2x2_t v605;
  float64x2x2_t v606;
  float64x2x2_t v607;
  float64x2x2_t v608;
  float64x2x2_t v609;
  float64x2x2_t v610;
  float64x2x2_t v611;
  float64x2x2_t v612;
  float64x2x2_t v613;
  float64x2x2_t v614;
  float64x2x2_t v615;
  float64x2x2_t v616;
  float64x2x2_t v617;

  v5 = (uint64_t *)result;
  if (a2[40])
  {
    result = sub_20F9ABFD0(*(_QWORD *)result + 14360, *((_DWORD *)a2 + 11), *((_DWORD *)a2 + 11));
    v6.f64[0] = *(float64_t *)(result + 16);
    v7.f64[0] = *(float64_t *)(result + 40);
    v8 = *(float64x2_t *)(result + 48);
    v9.f64[0] = *(float64_t *)(result + 64);
    _Q6 = a3[26];
    _Q7 = a3[27];
    _Q16 = a3[28];
    v13 = (float64x2_t)vzip1q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
    v14 = (float64x2_t)vzip2q_s64((int64x2_t)_Q6, (int64x2_t)_Q7);
    v15 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q6.f64[0]), v14, _Q6, 1);
    _Q20 = vmulq_f64(_Q16, _Q6);
    _Q6.f64[0] = a3[26].f64[1];
    __asm { FMLA            D20, D6, V16.D[1] }
    _Q6.f64[0] = a3[28].f64[1];
    v21 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q7.f64[0]), v14, _Q7, 1);
    _Q22 = vmulq_f64(_Q16, _Q7);
    _Q7.f64[0] = a3[27].f64[1];
    __asm { FMLA            D22, D7, V16.D[1] }
    v23 = vmlaq_laneq_f64(vmulq_n_f64(v13, _Q16.f64[0]), v14, _Q16, 1);
    _Q17 = vmulq_f64(_Q16, _Q16);
    __asm { FMLA            D17, D6, V16.D[1] }
    v25 = vaddq_f64(*(float64x2_t *)(result + 24), v21);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v15);
    *(_QWORD *)(result + 16) = *(_OWORD *)&vaddq_f64(v6, _Q20);
    *(float64x2_t *)(result + 24) = v25;
    *(_QWORD *)(result + 40) = *(_OWORD *)&vaddq_f64(v7, _Q22);
    *(float64x2_t *)(result + 48) = vaddq_f64(v8, v23);
    *(_QWORD *)(result + 64) = *(_OWORD *)&vaddq_f64(v9, _Q17);
  }
  if (a2[32])
  {
    result = sub_20F9AC0F4(*v5 + 12776, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 9));
    v26 = a3[22];
    v27 = a3[23];
    v28 = a3[24];
    v29 = a3[25];
    *(_QWORD *)&v30.f64[0] = vdupq_laneq_s64((int64x2_t)v28, 1).u64[0];
    v30.f64[1] = a3[25].f64[1];
    v31 = (float64x2_t)vzip1q_s64((int64x2_t)v28, (int64x2_t)v29);
    v32 = (float64x2_t)vzip1q_s64((int64x2_t)v26, (int64x2_t)v27);
    v33 = (float64x2_t)vzip2q_s64((int64x2_t)v26, (int64x2_t)v27);
    v34 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v31, v26.f64[0]), v30, v26, 1));
    v35 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v32, v27.f64[0]), v33, v27, 1));
    v36 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v31, v27.f64[0]), v30, v27, 1));
    v37 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v32, v28.f64[0]), v33, v28, 1));
    v38 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v31, v28.f64[0]), v30, v28, 1));
    v39 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v32, v29.f64[0]), v33, v29, 1));
    v40 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v31, v29.f64[0]), v30, v29, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v32, v26.f64[0]), v33, v26, 1));
    *(float64x2_t *)(result + 16) = v34;
    *(float64x2_t *)(result + 32) = v35;
    *(float64x2_t *)(result + 48) = v36;
    *(float64x2_t *)(result + 64) = v37;
    *(float64x2_t *)(result + 80) = v38;
    *(float64x2_t *)(result + 96) = v39;
    *(float64x2_t *)(result + 112) = v40;
    if (a2[32])
    {
      if (a2[40])
      {
        result = sub_20F9AC218(*v5 + 14216, *((_DWORD *)a2 + 9), *((_DWORD *)a2 + 11));
        f64 = a3[22].f64;
        v580 = vld2q_f64(f64);
        v42 = a3[24].f64;
        v592 = vld2q_f64(v42);
        v43 = a3[26];
        v44 = a3[27];
        v45 = a3[28];
        v46 = vmlaq_laneq_f64(vmulq_n_f64(v580.val[0], v43.f64[0]), v580.val[1], v43, 1);
        v47 = vmlaq_laneq_f64(vmulq_n_f64(v592.val[0], v43.f64[0]), v592.val[1], v43, 1);
        v48 = vmlaq_laneq_f64(vmulq_n_f64(v580.val[0], v44.f64[0]), v580.val[1], v44, 1);
        v49 = vmlaq_laneq_f64(vmulq_n_f64(v592.val[0], v44.f64[0]), v592.val[1], v44, 1);
        v50 = vmlaq_laneq_f64(vmulq_n_f64(v580.val[0], v45.f64[0]), v580.val[1], v45, 1);
        v580.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v592.val[0], v45.f64[0]), v592.val[1], v45, 1);
        v580.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v47);
        v51 = vaddq_f64(*(float64x2_t *)(result + 48), v49);
        v592.val[0] = vaddq_f64(*(float64x2_t *)(result + 32), v48);
        v580.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v580.val[0]);
        v592.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v50);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v46);
        *(float64x2_t *)(result + 16) = v580.val[1];
        *(float64x2_t *)(result + 32) = v592.val[0];
        *(float64x2_t *)(result + 48) = v51;
        *(float64x2_t *)(result + 64) = v592.val[1];
        *(float64x2_t *)(result + 80) = v580.val[0];
      }
    }
  }
  if (a2[24])
  {
    v52 = a3[18].f64;
    result = sub_20F9AC0F4(*v5 + 11192, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 7));
    v53 = a3[18];
    v54 = a3[19];
    v55 = a3[20].f64;
    v56 = a3[20];
    v57 = a3[21];
    *(_QWORD *)&v58.f64[0] = vdupq_laneq_s64((int64x2_t)v56, 1).u64[0];
    v58.f64[1] = a3[21].f64[1];
    v59 = (float64x2_t)vzip1q_s64((int64x2_t)v56, (int64x2_t)v57);
    v60 = (float64x2_t)vzip1q_s64((int64x2_t)v53, (int64x2_t)v54);
    v61 = (float64x2_t)vzip2q_s64((int64x2_t)v53, (int64x2_t)v54);
    v62 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v59, v53.f64[0]), v58, v53, 1));
    v63 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v59, v54.f64[0]), v58, v54, 1));
    v64 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v60, v54.f64[0]), v61, v54, 1));
    v65 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v59, v56.f64[0]), v58, v56, 1));
    v66 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v60, v56.f64[0]), v61, v56, 1));
    v67 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v59, v57.f64[0]), v58, v57, 1));
    v68 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v60, v57.f64[0]), v61, v57, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v60, v53.f64[0]), v61, v53, 1));
    *(float64x2_t *)(result + 16) = v62;
    *(float64x2_t *)(result + 32) = v64;
    *(float64x2_t *)(result + 48) = v63;
    *(float64x2_t *)(result + 64) = v66;
    *(float64x2_t *)(result + 80) = v65;
    *(float64x2_t *)(result + 96) = v68;
    *(float64x2_t *)(result + 112) = v67;
    v69 = a2[24];
    if (a2[24] && a2[32])
    {
      result = sub_20F9AC0F4(*v5 + 12632, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 9));
      v594 = vld2q_f64(v52);
      v602 = vld2q_f64(v55);
      v70 = a3[22];
      v71 = a3[23];
      v72 = a3[24];
      v73 = a3[25];
      v74 = vmlaq_laneq_f64(vmulq_n_f64(v594.val[0], v70.f64[0]), v594.val[1], v70, 1);
      v75 = vmlaq_laneq_f64(vmulq_n_f64(v602.val[0], v70.f64[0]), v602.val[1], v70, 1);
      v76 = vmlaq_laneq_f64(vmulq_n_f64(v594.val[0], v71.f64[0]), v594.val[1], v71, 1);
      v77 = vmlaq_laneq_f64(vmulq_n_f64(v602.val[0], v71.f64[0]), v602.val[1], v71, 1);
      v78 = vmlaq_laneq_f64(vmulq_n_f64(v594.val[0], v72.f64[0]), v594.val[1], v72, 1);
      v79 = vmlaq_laneq_f64(vmulq_n_f64(v602.val[0], v72.f64[0]), v602.val[1], v72, 1);
      v80 = vmlaq_laneq_f64(vmulq_n_f64(v594.val[0], v73.f64[0]), v594.val[1], v73, 1);
      v81 = vaddq_f64(*(float64x2_t *)(result + 16), v75);
      v82 = vaddq_f64(*(float64x2_t *)(result + 48), v77);
      v83 = vaddq_f64(*(float64x2_t *)(result + 32), v76);
      v84 = vaddq_f64(*(float64x2_t *)(result + 80), v79);
      v85 = vaddq_f64(*(float64x2_t *)(result + 64), v78);
      v594.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v602.val[0], v73.f64[0]), v602.val[1], v73, 1));
      v594.val[1] = vaddq_f64(*(float64x2_t *)(result + 96), v80);
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v74);
      *(float64x2_t *)(result + 16) = v81;
      *(float64x2_t *)(result + 32) = v83;
      *(float64x2_t *)(result + 48) = v82;
      *(float64x2_t *)(result + 64) = v85;
      *(float64x2_t *)(result + 80) = v84;
      *(float64x2_t *)(result + 96) = v594.val[1];
      *(float64x2_t *)(result + 112) = v594.val[0];
      v69 = a2[24];
    }
    if (v69 && a2[40])
    {
      result = sub_20F9AC218(*v5 + 14072, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 11));
      v581 = vld2q_f64(v52);
      v593 = vld2q_f64(v55);
      v86 = a3[26];
      v87 = a3[27];
      v88 = a3[28];
      v89 = vmlaq_laneq_f64(vmulq_n_f64(v581.val[0], v86.f64[0]), v581.val[1], v86, 1);
      v90 = vmlaq_laneq_f64(vmulq_n_f64(v593.val[0], v86.f64[0]), v593.val[1], v86, 1);
      v91 = vmlaq_laneq_f64(vmulq_n_f64(v581.val[0], v87.f64[0]), v581.val[1], v87, 1);
      v92 = vmlaq_laneq_f64(vmulq_n_f64(v593.val[0], v87.f64[0]), v593.val[1], v87, 1);
      v93 = vmlaq_laneq_f64(vmulq_n_f64(v581.val[0], v88.f64[0]), v581.val[1], v88, 1);
      v581.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v593.val[0], v88.f64[0]), v593.val[1], v88, 1);
      v581.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v90);
      v94 = vaddq_f64(*(float64x2_t *)(result + 48), v92);
      v593.val[0] = vaddq_f64(*(float64x2_t *)(result + 32), v91);
      v581.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v581.val[0]);
      v593.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v93);
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v89);
      *(float64x2_t *)(result + 16) = v581.val[1];
      *(float64x2_t *)(result + 32) = v593.val[0];
      *(float64x2_t *)(result + 48) = v94;
      *(float64x2_t *)(result + 64) = v593.val[1];
      *(float64x2_t *)(result + 80) = v581.val[0];
    }
  }
  v95 = a2[16];
  if (a2[16] && *a2)
  {
    result = sub_20F9AC33C(*v5 + 2984, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 1));
    v96 = a3[12].f64;
    v582 = vld2q_f64(v96);
    v97 = a3[14].f64;
    v586 = vld2q_f64(v97);
    v98 = a3[16].f64;
    v99 = a3[1];
    v100 = a3[2];
    v101 = a3[3];
    v102 = a3[4];
    v103 = a3[5];
    v104 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[0], a3->f64[0]), v582.val[1], *a3, 1);
    v105 = vmlaq_laneq_f64(vmulq_n_f64(v586.val[0], a3->f64[0]), v586.val[1], *a3, 1);
    v106 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[0], v99.f64[0]), v582.val[1], v99, 1);
    v107 = vmlaq_laneq_f64(vmulq_n_f64(v586.val[0], v99.f64[0]), v586.val[1], v99, 1);
    v108 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[0], v100.f64[0]), v582.val[1], v100, 1);
    v109 = vmlaq_laneq_f64(vmulq_n_f64(v586.val[0], v100.f64[0]), v586.val[1], v100, 1);
    v110 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[0], v101.f64[0]), v582.val[1], v101, 1);
    v111 = vmlaq_laneq_f64(vmulq_n_f64(v586.val[0], v101.f64[0]), v586.val[1], v101, 1);
    v112 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[0], v102.f64[0]), v582.val[1], v102, 1);
    v113 = vmlaq_laneq_f64(vmulq_n_f64(v586.val[0], v102.f64[0]), v586.val[1], v102, 1);
    v114 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[0], v103.f64[0]), v582.val[1], v103, 1);
    v582.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v586.val[0], v103.f64[0]), v586.val[1], v103, 1);
    *(float64x2x2_t *)((char *)&v582 + 16) = vld2q_f64(v98);
    v115 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[1], v99.f64[0]), v586.val[0], v99, 1);
    v116 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[1], v100.f64[0]), v586.val[0], v100, 1);
    v117 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[1], v101.f64[0]), v586.val[0], v101, 1);
    v118 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[1], v102.f64[0]), v586.val[0], v102, 1);
    v119 = vmlaq_laneq_f64(vmulq_n_f64(v582.val[1], v103.f64[0]), v586.val[0], v103, 1);
    v582.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v582.val[1], a3->f64[0]), v586.val[0], *a3, 1));
    v586.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v105);
    v120 = vaddq_f64(*(float64x2_t *)result, v104);
    v121 = vaddq_f64(*(float64x2_t *)(result + 80), v115);
    v122 = vaddq_f64(*(float64x2_t *)(result + 64), v107);
    v586.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v106);
    v123 = vaddq_f64(*(float64x2_t *)(result + 128), v116);
    v124 = vaddq_f64(*(float64x2_t *)(result + 112), v109);
    v125 = vaddq_f64(*(float64x2_t *)(result + 96), v108);
    v126 = vaddq_f64(*(float64x2_t *)(result + 176), v117);
    v127 = vaddq_f64(*(float64x2_t *)(result + 160), v111);
    v128 = vaddq_f64(*(float64x2_t *)(result + 144), v110);
    v129 = *(float64x2_t *)(result + 240);
    v130 = vaddq_f64(*(float64x2_t *)(result + 224), v118);
    v131 = vaddq_f64(*(float64x2_t *)(result + 208), v113);
    v132 = vaddq_f64(*(float64x2_t *)(result + 192), v112);
    v133 = vaddq_f64(*(float64x2_t *)(result + 272), v119);
    v582.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v582.val[0]);
    *(float64x2_t *)result = v120;
    *(float64x2_t *)(result + 16) = v586.val[1];
    *(float64x2_t *)(result + 32) = v582.val[1];
    *(float64x2_t *)(result + 48) = v586.val[0];
    *(float64x2_t *)(result + 64) = v122;
    *(float64x2_t *)(result + 80) = v121;
    *(float64x2_t *)(result + 96) = v125;
    *(float64x2_t *)(result + 112) = v124;
    *(float64x2_t *)(result + 128) = v123;
    *(float64x2_t *)(result + 144) = v128;
    *(float64x2_t *)(result + 160) = v127;
    *(float64x2_t *)(result + 176) = v126;
    *(float64x2_t *)(result + 192) = v132;
    *(float64x2_t *)(result + 208) = v131;
    *(float64x2_t *)(result + 224) = v130;
    *(float64x2_t *)(result + 240) = vaddq_f64(v129, v114);
    *(float64x2_t *)(result + 256) = v582.val[0];
    *(float64x2_t *)(result + 272) = v133;
    v95 = a2[16];
  }
  v134 = *v5;
  if (v95 && a2[8])
  {
    v135 = *((_DWORD *)a2 + 5);
    v136 = *((_DWORD *)a2 + 3);
    if (v136 < v135)
      goto LABEL_23;
    result = sub_20F9AC33C(v134 + 104, v135, v136);
    v137 = a3[12].f64;
    v583 = vld2q_f64(v137);
    v138 = a3[14].f64;
    v587 = vld2q_f64(v138);
    v139 = a3[16].f64;
    v140 = a3[6];
    v141 = a3[7];
    v142 = a3[8];
    v143 = a3[9];
    v144 = a3[10];
    v145 = a3[11];
    v146 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[0], v140.f64[0]), v583.val[1], v140, 1);
    v147 = vmlaq_laneq_f64(vmulq_n_f64(v587.val[0], v140.f64[0]), v587.val[1], v140, 1);
    v148 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[0], v141.f64[0]), v583.val[1], v141, 1);
    v149 = vmlaq_laneq_f64(vmulq_n_f64(v587.val[0], v141.f64[0]), v587.val[1], v141, 1);
    v150 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[0], v142.f64[0]), v583.val[1], v142, 1);
    v151 = vmlaq_laneq_f64(vmulq_n_f64(v587.val[0], v142.f64[0]), v587.val[1], v142, 1);
    v152 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[0], v143.f64[0]), v583.val[1], v143, 1);
    v153 = vmlaq_laneq_f64(vmulq_n_f64(v587.val[0], v143.f64[0]), v587.val[1], v143, 1);
    v154 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[0], v144.f64[0]), v583.val[1], v144, 1);
    v155 = vmlaq_laneq_f64(vmulq_n_f64(v587.val[0], v144.f64[0]), v587.val[1], v144, 1);
    v156 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[0], v145.f64[0]), v583.val[1], v145, 1);
    v583.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v587.val[0], v145.f64[0]), v587.val[1], v145, 1);
    *(float64x2x2_t *)((char *)&v583 + 16) = vld2q_f64(v139);
    v587.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v583.val[1], v140.f64[0]), v587.val[0], v140, 1);
    v157 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[1], v141.f64[0]), v587.val[0], v141, 1);
    v158 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[1], v142.f64[0]), v587.val[0], v142, 1);
    v159 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[1], v143.f64[0]), v587.val[0], v143, 1);
    v160 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[1], v144.f64[0]), v587.val[0], v144, 1);
    v161 = vmlaq_laneq_f64(vmulq_n_f64(v583.val[1], v145.f64[0]), v587.val[0], v145, 1);
    v583.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v587.val[1]);
    v587.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v147);
    v162 = vaddq_f64(*(float64x2_t *)result, v146);
    v163 = vaddq_f64(*(float64x2_t *)(result + 80), v157);
    v164 = vaddq_f64(*(float64x2_t *)(result + 64), v149);
    v587.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v148);
    v165 = vaddq_f64(*(float64x2_t *)(result + 128), v158);
    v166 = vaddq_f64(*(float64x2_t *)(result + 112), v151);
    v167 = vaddq_f64(*(float64x2_t *)(result + 96), v150);
    v168 = vaddq_f64(*(float64x2_t *)(result + 176), v159);
    v169 = vaddq_f64(*(float64x2_t *)(result + 160), v153);
    v170 = vaddq_f64(*(float64x2_t *)(result + 144), v152);
    v171 = *(float64x2_t *)(result + 240);
    v172 = vaddq_f64(*(float64x2_t *)(result + 224), v160);
    v173 = vaddq_f64(*(float64x2_t *)(result + 208), v155);
    v174 = vaddq_f64(*(float64x2_t *)(result + 192), v154);
    v175 = vaddq_f64(*(float64x2_t *)(result + 272), v161);
    v583.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v583.val[0]);
    *(float64x2_t *)result = v162;
    *(float64x2_t *)(result + 16) = v587.val[1];
    *(float64x2_t *)(result + 32) = v583.val[1];
    *(float64x2_t *)(result + 48) = v587.val[0];
    *(float64x2_t *)(result + 64) = v164;
    *(float64x2_t *)(result + 80) = v163;
    *(float64x2_t *)(result + 96) = v167;
    *(float64x2_t *)(result + 112) = v166;
    *(float64x2_t *)(result + 128) = v165;
    *(float64x2_t *)(result + 144) = v170;
    *(float64x2_t *)(result + 160) = v169;
    *(float64x2_t *)(result + 176) = v168;
    *(float64x2_t *)(result + 192) = v174;
    *(float64x2_t *)(result + 208) = v173;
    *(float64x2_t *)(result + 224) = v172;
    *(float64x2_t *)(result + 240) = vaddq_f64(v171, v156);
    *(float64x2_t *)(result + 256) = v583.val[0];
    *(float64x2_t *)(result + 272) = v175;
    v95 = a2[16];
    v134 = *v5;
  }
  if (!v95)
    goto LABEL_32;
  v135 = *((_DWORD *)a2 + 5);
LABEL_23:
  result = sub_20F9AC33C(v134 + 104, v135, v135);
  v177 = a3[12];
  v178 = a3[13];
  v176 = a3[12].f64;
  v179 = a3[14].f64;
  v180 = a3[14];
  v181 = a3[15];
  v182 = a3[16].f64;
  v183 = a3[16];
  v184 = a3[17];
  v185 = (float64x2_t)vzip1q_s64((int64x2_t)v180, (int64x2_t)v181);
  v186 = (float64x2_t)vzip1q_s64((int64x2_t)v183, (int64x2_t)v184);
  *(_QWORD *)&v187.f64[0] = vdupq_laneq_s64((int64x2_t)v180, 1).u64[0];
  v187.f64[1] = a3[15].f64[1];
  *(_QWORD *)&v188.f64[0] = vdupq_laneq_s64((int64x2_t)v183, 1).u64[0];
  v188.f64[1] = a3[17].f64[1];
  v189 = (float64x2_t)vzip1q_s64((int64x2_t)v177, (int64x2_t)v178);
  v190 = (float64x2_t)vzip2q_s64((int64x2_t)v177, (int64x2_t)v178);
  v191 = vmlaq_laneq_f64(vmulq_n_f64(v189, v177.f64[0]), v190, v177, 1);
  v192 = vmlaq_laneq_f64(vmulq_n_f64(v185, v177.f64[0]), v187, v177, 1);
  v193 = vmlaq_laneq_f64(vmulq_n_f64(v186, v177.f64[0]), v188, v177, 1);
  v194 = vmlaq_laneq_f64(vmulq_n_f64(v189, v178.f64[0]), v190, v178, 1);
  v195 = vmlaq_laneq_f64(vmulq_n_f64(v185, v178.f64[0]), v187, v178, 1);
  v196 = vmlaq_laneq_f64(vmulq_n_f64(v186, v178.f64[0]), v188, v178, 1);
  v197 = vmlaq_laneq_f64(vmulq_n_f64(v189, v180.f64[0]), v190, v180, 1);
  v198 = vmlaq_laneq_f64(vmulq_n_f64(v185, v180.f64[0]), v187, v180, 1);
  v199 = vmlaq_laneq_f64(vmulq_n_f64(v186, v180.f64[0]), v188, v180, 1);
  v200 = vmlaq_laneq_f64(vmulq_n_f64(v189, v181.f64[0]), v190, v181, 1);
  v201 = vmlaq_laneq_f64(vmulq_n_f64(v185, v181.f64[0]), v187, v181, 1);
  v202 = vmlaq_laneq_f64(vmulq_n_f64(v186, v181.f64[0]), v188, v181, 1);
  v203 = vmlaq_laneq_f64(vmulq_n_f64(v189, v183.f64[0]), v190, v183, 1);
  v204 = vmlaq_laneq_f64(vmulq_n_f64(v185, v183.f64[0]), v187, v183, 1);
  v205 = vmlaq_laneq_f64(vmulq_n_f64(v186, v183.f64[0]), v188, v183, 1);
  v206 = vmlaq_laneq_f64(vmulq_n_f64(v189, v184.f64[0]), v190, v184, 1);
  v207 = vmlaq_laneq_f64(vmulq_n_f64(v185, v184.f64[0]), v187, v184, 1);
  v208 = vmlaq_laneq_f64(vmulq_n_f64(v186, v184.f64[0]), v188, v184, 1);
  v209 = vaddq_f64(*(float64x2_t *)(result + 32), v193);
  v210 = vaddq_f64(*(float64x2_t *)(result + 16), v192);
  v211 = vaddq_f64(*(float64x2_t *)result, v191);
  v212 = vaddq_f64(*(float64x2_t *)(result + 80), v196);
  v213 = vaddq_f64(*(float64x2_t *)(result + 64), v195);
  v214 = vaddq_f64(*(float64x2_t *)(result + 48), v194);
  v215 = vaddq_f64(*(float64x2_t *)(result + 128), v199);
  v216 = vaddq_f64(*(float64x2_t *)(result + 112), v198);
  v217 = vaddq_f64(*(float64x2_t *)(result + 96), v197);
  v218 = vaddq_f64(*(float64x2_t *)(result + 176), v202);
  v219 = vaddq_f64(*(float64x2_t *)(result + 160), v201);
  v220 = vaddq_f64(*(float64x2_t *)(result + 144), v200);
  v221 = *(float64x2_t *)(result + 240);
  v222 = vaddq_f64(*(float64x2_t *)(result + 224), v205);
  v223 = vaddq_f64(*(float64x2_t *)(result + 208), v204);
  v224 = vaddq_f64(*(float64x2_t *)(result + 192), v203);
  v225 = vaddq_f64(*(float64x2_t *)(result + 272), v208);
  v226 = vaddq_f64(*(float64x2_t *)(result + 256), v207);
  *(float64x2_t *)result = v211;
  *(float64x2_t *)(result + 16) = v210;
  *(float64x2_t *)(result + 32) = v209;
  *(float64x2_t *)(result + 48) = v214;
  *(float64x2_t *)(result + 64) = v213;
  *(float64x2_t *)(result + 80) = v212;
  *(float64x2_t *)(result + 96) = v217;
  *(float64x2_t *)(result + 112) = v216;
  *(float64x2_t *)(result + 128) = v215;
  *(float64x2_t *)(result + 144) = v220;
  *(float64x2_t *)(result + 160) = v219;
  *(float64x2_t *)(result + 176) = v218;
  *(float64x2_t *)(result + 192) = v224;
  *(float64x2_t *)(result + 208) = v223;
  *(float64x2_t *)(result + 224) = v222;
  *(float64x2_t *)(result + 240) = vaddq_f64(v221, v206);
  *(float64x2_t *)(result + 256) = v226;
  *(float64x2_t *)(result + 272) = v225;
  v227 = a2[16];
  v134 = *v5;
  if (a2[16] && a2[24])
  {
    result = sub_20F9AC460(v134 + 10184, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 7));
    v599 = vld2q_f64(v176);
    v228 = *(float64x2_t *)(result + 144);
    v608 = vld2q_f64(v179);
    v614 = vld2q_f64(v182);
    v229 = a3[18];
    v230 = a3[19];
    v231 = a3[20];
    v232 = a3[21];
    v233 = vmlaq_laneq_f64(vmulq_n_f64(v599.val[0], v229.f64[0]), v599.val[1], v229, 1);
    v234 = vmlaq_laneq_f64(vmulq_n_f64(v608.val[0], v229.f64[0]), v608.val[1], v229, 1);
    v235 = vmlaq_laneq_f64(vmulq_n_f64(v614.val[0], v229.f64[0]), v614.val[1], v229, 1);
    v236 = vmlaq_laneq_f64(vmulq_n_f64(v599.val[0], v230.f64[0]), v599.val[1], v230, 1);
    v237 = vmlaq_laneq_f64(vmulq_n_f64(v608.val[0], v230.f64[0]), v608.val[1], v230, 1);
    v238 = vmlaq_laneq_f64(vmulq_n_f64(v614.val[0], v230.f64[0]), v614.val[1], v230, 1);
    v239 = vmlaq_laneq_f64(vmulq_n_f64(v599.val[0], v231.f64[0]), v599.val[1], v231, 1);
    v240 = vmlaq_laneq_f64(vmulq_n_f64(v608.val[0], v231.f64[0]), v608.val[1], v231, 1);
    v241 = vmlaq_laneq_f64(vmulq_n_f64(v614.val[0], v231.f64[0]), v614.val[1], v231, 1);
    v242 = vmlaq_laneq_f64(vmulq_n_f64(v599.val[0], v232.f64[0]), v599.val[1], v232, 1);
    v243 = vaddq_f64(*(float64x2_t *)(result + 32), v235);
    v244 = vaddq_f64(*(float64x2_t *)(result + 16), v234);
    v245 = vaddq_f64(*(float64x2_t *)(result + 80), v238);
    v246 = vaddq_f64(*(float64x2_t *)(result + 64), v237);
    v247 = vaddq_f64(*(float64x2_t *)(result + 48), v236);
    v248 = vaddq_f64(*(float64x2_t *)(result + 128), v241);
    v249 = vaddq_f64(*(float64x2_t *)(result + 112), v240);
    v250 = vaddq_f64(*(float64x2_t *)(result + 96), v239);
    v599.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v614.val[0], v232.f64[0]), v614.val[1], v232, 1));
    v599.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v608.val[0], v232.f64[0]), v608.val[1], v232, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v233);
    *(float64x2_t *)(result + 16) = v244;
    *(float64x2_t *)(result + 32) = v243;
    *(float64x2_t *)(result + 48) = v247;
    *(float64x2_t *)(result + 64) = v246;
    *(float64x2_t *)(result + 80) = v245;
    *(float64x2_t *)(result + 96) = v250;
    *(float64x2_t *)(result + 112) = v249;
    *(float64x2_t *)(result + 128) = v248;
    *(float64x2_t *)(result + 144) = vaddq_f64(v228, v242);
    *(float64x2x2_t *)(result + 160) = v599;
    v227 = a2[16];
    v134 = *v5;
  }
  if (v227 && a2[32])
  {
    result = sub_20F9AC460(v134 + 11624, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 9));
    v600 = vld2q_f64(v176);
    v251 = *(float64x2_t *)(result + 144);
    v609 = vld2q_f64(v179);
    v615 = vld2q_f64(v182);
    v252 = a3[22];
    v253 = a3[23];
    v254 = a3[24];
    v255 = a3[25];
    v256 = vmlaq_laneq_f64(vmulq_n_f64(v600.val[0], v252.f64[0]), v600.val[1], v252, 1);
    v257 = vmlaq_laneq_f64(vmulq_n_f64(v609.val[0], v252.f64[0]), v609.val[1], v252, 1);
    v258 = vmlaq_laneq_f64(vmulq_n_f64(v615.val[0], v252.f64[0]), v615.val[1], v252, 1);
    v259 = vmlaq_laneq_f64(vmulq_n_f64(v600.val[0], v253.f64[0]), v600.val[1], v253, 1);
    v260 = vmlaq_laneq_f64(vmulq_n_f64(v609.val[0], v253.f64[0]), v609.val[1], v253, 1);
    v261 = vmlaq_laneq_f64(vmulq_n_f64(v615.val[0], v253.f64[0]), v615.val[1], v253, 1);
    v262 = vmlaq_laneq_f64(vmulq_n_f64(v600.val[0], v254.f64[0]), v600.val[1], v254, 1);
    v263 = vmlaq_laneq_f64(vmulq_n_f64(v609.val[0], v254.f64[0]), v609.val[1], v254, 1);
    v264 = vmlaq_laneq_f64(vmulq_n_f64(v615.val[0], v254.f64[0]), v615.val[1], v254, 1);
    v265 = vmlaq_laneq_f64(vmulq_n_f64(v600.val[0], v255.f64[0]), v600.val[1], v255, 1);
    v266 = vaddq_f64(*(float64x2_t *)(result + 32), v258);
    v267 = vaddq_f64(*(float64x2_t *)(result + 16), v257);
    v268 = vaddq_f64(*(float64x2_t *)(result + 80), v261);
    v269 = vaddq_f64(*(float64x2_t *)(result + 64), v260);
    v270 = vaddq_f64(*(float64x2_t *)(result + 48), v259);
    v271 = vaddq_f64(*(float64x2_t *)(result + 128), v264);
    v272 = vaddq_f64(*(float64x2_t *)(result + 112), v263);
    v273 = vaddq_f64(*(float64x2_t *)(result + 96), v262);
    v600.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v615.val[0], v255.f64[0]), v615.val[1], v255, 1));
    v600.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v609.val[0], v255.f64[0]), v609.val[1], v255, 1));
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v256);
    *(float64x2_t *)(result + 16) = v267;
    *(float64x2_t *)(result + 32) = v266;
    *(float64x2_t *)(result + 48) = v270;
    *(float64x2_t *)(result + 64) = v269;
    *(float64x2_t *)(result + 80) = v268;
    *(float64x2_t *)(result + 96) = v273;
    *(float64x2_t *)(result + 112) = v272;
    *(float64x2_t *)(result + 128) = v271;
    *(float64x2_t *)(result + 144) = vaddq_f64(v251, v265);
    *(float64x2x2_t *)(result + 160) = v600;
    v227 = a2[16];
    v134 = *v5;
  }
  if (v227 && a2[40])
  {
    result = sub_20F9AC584(v134 + 13064, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 11));
    v588 = vld2q_f64(v176);
    v595 = vld2q_f64(v179);
    v603 = vld2q_f64(v182);
    v274 = a3[26];
    v275 = a3[27];
    v276 = a3[28];
    v277 = vmlaq_laneq_f64(vmulq_n_f64(v588.val[0], v274.f64[0]), v588.val[1], v274, 1);
    v278 = vmlaq_laneq_f64(vmulq_n_f64(v595.val[0], v274.f64[0]), v595.val[1], v274, 1);
    v279 = vmlaq_laneq_f64(vmulq_n_f64(v603.val[0], v274.f64[0]), v603.val[1], v274, 1);
    v280 = vmlaq_laneq_f64(vmulq_n_f64(v588.val[0], v275.f64[0]), v588.val[1], v275, 1);
    v281 = vmlaq_laneq_f64(vmulq_n_f64(v595.val[0], v275.f64[0]), v595.val[1], v275, 1);
    v282 = vmlaq_laneq_f64(vmulq_n_f64(v603.val[0], v275.f64[0]), v603.val[1], v275, 1);
    v283 = vmlaq_laneq_f64(vmulq_n_f64(v588.val[0], v276.f64[0]), v588.val[1], v276, 1);
    v588.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v595.val[0], v276.f64[0]), v595.val[1], v276, 1);
    v284 = vaddq_f64(*(float64x2_t *)(result + 32), v279);
    v285 = vaddq_f64(*(float64x2_t *)(result + 16), v278);
    v595.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v282);
    v595.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v281);
    v286 = vaddq_f64(*(float64x2_t *)(result + 48), v280);
    v588.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v603.val[0], v276.f64[0]), v603.val[1], v276, 1));
    v588.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v588.val[0]);
    v287 = vaddq_f64(*(float64x2_t *)(result + 96), v283);
    *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v277);
    *(float64x2_t *)(result + 16) = v285;
    *(float64x2_t *)(result + 32) = v284;
    *(float64x2_t *)(result + 48) = v286;
    *(float64x2_t *)(result + 64) = v595.val[1];
    *(float64x2_t *)(result + 80) = v595.val[0];
    *(float64x2_t *)(result + 96) = v287;
    *(float64x2x2_t *)(result + 112) = v588;
    v134 = *v5;
  }
LABEL_32:
  v288 = a2[8];
  if (a2[8] && *a2)
  {
    result = sub_20F9AC33C(v134 + 2984, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 1));
    v289 = a3[6].f64;
    v584 = vld2q_f64(v289);
    v290 = a3[8].f64;
    v589 = vld2q_f64(v290);
    v291 = a3[10].f64;
    v292 = a3[1];
    v293 = a3[2];
    v294 = a3[3];
    v295 = a3[4];
    v296 = a3[5];
    v297 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[0], a3->f64[0]), v584.val[1], *a3, 1);
    v298 = vmlaq_laneq_f64(vmulq_n_f64(v589.val[0], a3->f64[0]), v589.val[1], *a3, 1);
    v299 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[0], v292.f64[0]), v584.val[1], v292, 1);
    v300 = vmlaq_laneq_f64(vmulq_n_f64(v589.val[0], v292.f64[0]), v589.val[1], v292, 1);
    v301 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[0], v293.f64[0]), v584.val[1], v293, 1);
    v302 = vmlaq_laneq_f64(vmulq_n_f64(v589.val[0], v293.f64[0]), v589.val[1], v293, 1);
    v303 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[0], v294.f64[0]), v584.val[1], v294, 1);
    v304 = vmlaq_laneq_f64(vmulq_n_f64(v589.val[0], v294.f64[0]), v589.val[1], v294, 1);
    v305 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[0], v295.f64[0]), v584.val[1], v295, 1);
    v306 = vmlaq_laneq_f64(vmulq_n_f64(v589.val[0], v295.f64[0]), v589.val[1], v295, 1);
    v307 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[0], v296.f64[0]), v584.val[1], v296, 1);
    v584.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v589.val[0], v296.f64[0]), v589.val[1], v296, 1);
    *(float64x2x2_t *)((char *)&v584 + 16) = vld2q_f64(v291);
    v308 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[1], v292.f64[0]), v589.val[0], v292, 1);
    v309 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[1], v293.f64[0]), v589.val[0], v293, 1);
    v310 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[1], v294.f64[0]), v589.val[0], v294, 1);
    v311 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[1], v295.f64[0]), v589.val[0], v295, 1);
    v312 = vmlaq_laneq_f64(vmulq_n_f64(v584.val[1], v296.f64[0]), v589.val[0], v296, 1);
    v584.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v584.val[1], a3->f64[0]), v589.val[0], *a3, 1));
    v589.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v298);
    v313 = vaddq_f64(*(float64x2_t *)result, v297);
    v314 = vaddq_f64(*(float64x2_t *)(result + 80), v308);
    v315 = vaddq_f64(*(float64x2_t *)(result + 64), v300);
    v589.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v299);
    v316 = vaddq_f64(*(float64x2_t *)(result + 128), v309);
    v317 = vaddq_f64(*(float64x2_t *)(result + 112), v302);
    v318 = vaddq_f64(*(float64x2_t *)(result + 96), v301);
    v319 = vaddq_f64(*(float64x2_t *)(result + 176), v310);
    v320 = vaddq_f64(*(float64x2_t *)(result + 160), v304);
    v321 = vaddq_f64(*(float64x2_t *)(result + 144), v303);
    v322 = *(float64x2_t *)(result + 240);
    v323 = vaddq_f64(*(float64x2_t *)(result + 224), v311);
    v324 = vaddq_f64(*(float64x2_t *)(result + 208), v306);
    v325 = vaddq_f64(*(float64x2_t *)(result + 192), v305);
    v326 = vaddq_f64(*(float64x2_t *)(result + 272), v312);
    v584.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v584.val[0]);
    *(float64x2_t *)result = v313;
    *(float64x2_t *)(result + 16) = v589.val[1];
    *(float64x2_t *)(result + 32) = v584.val[1];
    *(float64x2_t *)(result + 48) = v589.val[0];
    *(float64x2_t *)(result + 64) = v315;
    *(float64x2_t *)(result + 80) = v314;
    *(float64x2_t *)(result + 96) = v318;
    *(float64x2_t *)(result + 112) = v317;
    *(float64x2_t *)(result + 128) = v316;
    *(float64x2_t *)(result + 144) = v321;
    *(float64x2_t *)(result + 160) = v320;
    *(float64x2_t *)(result + 176) = v319;
    *(float64x2_t *)(result + 192) = v325;
    *(float64x2_t *)(result + 208) = v324;
    *(float64x2_t *)(result + 224) = v323;
    *(float64x2_t *)(result + 240) = vaddq_f64(v322, v307);
    *(float64x2_t *)(result + 256) = v584.val[0];
    *(float64x2_t *)(result + 272) = v326;
    v288 = a2[8];
    v134 = *v5;
  }
  if (v288)
  {
    result = sub_20F9AC33C(v134 + 104, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 3));
    v328 = a3[6];
    v329 = a3[7];
    v327 = a3[6].f64;
    v330 = a3[8].f64;
    v331 = a3[8];
    v332 = a3[9];
    v333 = a3[10].f64;
    v334 = a3[10];
    v335 = a3[11];
    v336 = (float64x2_t)vzip1q_s64((int64x2_t)v331, (int64x2_t)v332);
    *(_QWORD *)&v337.f64[0] = vdupq_laneq_s64((int64x2_t)v331, 1).u64[0];
    v337.f64[1] = a3[9].f64[1];
    *(_QWORD *)&v338.f64[0] = vdupq_laneq_s64((int64x2_t)v334, 1).u64[0];
    v339 = (float64x2_t)vzip1q_s64((int64x2_t)v334, (int64x2_t)v335);
    v338.f64[1] = a3[11].f64[1];
    v340 = (float64x2_t)vzip1q_s64((int64x2_t)v328, (int64x2_t)v329);
    v341 = (float64x2_t)vzip2q_s64((int64x2_t)v328, (int64x2_t)v329);
    v342 = vmlaq_laneq_f64(vmulq_n_f64(v340, v328.f64[0]), v341, v328, 1);
    v343 = vmlaq_laneq_f64(vmulq_n_f64(v336, v328.f64[0]), v337, v328, 1);
    v344 = vmlaq_laneq_f64(vmulq_n_f64(v339, v328.f64[0]), v338, v328, 1);
    v345 = vmlaq_laneq_f64(vmulq_n_f64(v340, v329.f64[0]), v341, v329, 1);
    v346 = vmlaq_laneq_f64(vmulq_n_f64(v336, v329.f64[0]), v337, v329, 1);
    v347 = vmlaq_laneq_f64(vmulq_n_f64(v339, v329.f64[0]), v338, v329, 1);
    v348 = vmlaq_laneq_f64(vmulq_n_f64(v340, v331.f64[0]), v341, v331, 1);
    v349 = vmlaq_laneq_f64(vmulq_n_f64(v336, v331.f64[0]), v337, v331, 1);
    v350 = vmlaq_laneq_f64(vmulq_n_f64(v339, v331.f64[0]), v338, v331, 1);
    v351 = vmlaq_laneq_f64(vmulq_n_f64(v340, v332.f64[0]), v341, v332, 1);
    v352 = vmlaq_laneq_f64(vmulq_n_f64(v336, v332.f64[0]), v337, v332, 1);
    v353 = vmlaq_laneq_f64(vmulq_n_f64(v339, v332.f64[0]), v338, v332, 1);
    v354 = vmlaq_laneq_f64(vmulq_n_f64(v340, v334.f64[0]), v341, v334, 1);
    v355 = vmlaq_laneq_f64(vmulq_n_f64(v336, v334.f64[0]), v337, v334, 1);
    v356 = vmlaq_laneq_f64(vmulq_n_f64(v339, v334.f64[0]), v338, v334, 1);
    v357 = vmlaq_laneq_f64(vmulq_n_f64(v340, v335.f64[0]), v341, v335, 1);
    v358 = vmlaq_laneq_f64(vmulq_n_f64(v336, v335.f64[0]), v337, v335, 1);
    v359 = vmlaq_laneq_f64(vmulq_n_f64(v339, v335.f64[0]), v338, v335, 1);
    v360 = vaddq_f64(*(float64x2_t *)(result + 32), v344);
    v361 = vaddq_f64(*(float64x2_t *)(result + 16), v343);
    v362 = vaddq_f64(*(float64x2_t *)result, v342);
    v363 = vaddq_f64(*(float64x2_t *)(result + 80), v347);
    v364 = vaddq_f64(*(float64x2_t *)(result + 64), v346);
    v365 = vaddq_f64(*(float64x2_t *)(result + 48), v345);
    v366 = vaddq_f64(*(float64x2_t *)(result + 128), v350);
    v367 = vaddq_f64(*(float64x2_t *)(result + 112), v349);
    v368 = vaddq_f64(*(float64x2_t *)(result + 96), v348);
    v369 = vaddq_f64(*(float64x2_t *)(result + 176), v353);
    v370 = vaddq_f64(*(float64x2_t *)(result + 160), v352);
    v371 = vaddq_f64(*(float64x2_t *)(result + 144), v351);
    v372 = *(float64x2_t *)(result + 240);
    v373 = vaddq_f64(*(float64x2_t *)(result + 224), v356);
    v374 = vaddq_f64(*(float64x2_t *)(result + 208), v355);
    v375 = vaddq_f64(*(float64x2_t *)(result + 192), v354);
    v376 = vaddq_f64(*(float64x2_t *)(result + 272), v359);
    v377 = vaddq_f64(*(float64x2_t *)(result + 256), v358);
    *(float64x2_t *)result = v362;
    *(float64x2_t *)(result + 16) = v361;
    *(float64x2_t *)(result + 32) = v360;
    *(float64x2_t *)(result + 48) = v365;
    *(float64x2_t *)(result + 64) = v364;
    *(float64x2_t *)(result + 80) = v363;
    *(float64x2_t *)(result + 96) = v368;
    *(float64x2_t *)(result + 112) = v367;
    *(float64x2_t *)(result + 128) = v366;
    *(float64x2_t *)(result + 144) = v371;
    *(float64x2_t *)(result + 160) = v370;
    *(float64x2_t *)(result + 176) = v369;
    *(float64x2_t *)(result + 192) = v375;
    *(float64x2_t *)(result + 208) = v374;
    *(float64x2_t *)(result + 224) = v373;
    *(float64x2_t *)(result + 240) = vaddq_f64(v372, v357);
    *(float64x2_t *)(result + 256) = v377;
    *(float64x2_t *)(result + 272) = v376;
    v378 = a2[8];
    if (a2[8] && a2[16])
    {
      v379 = *((_DWORD *)a2 + 3);
      v380 = *((_DWORD *)a2 + 5);
      if (v380 >= v379)
      {
        result = sub_20F9AC33C(*v5 + 104, v379, v380);
        v585 = vld2q_f64(v327);
        v591 = vld2q_f64(v330);
        v544 = a3[12];
        v545 = a3[13];
        v546 = a3[14];
        v547 = a3[15];
        v548 = a3[16];
        v549 = a3[17];
        v550 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[0], v544.f64[0]), v585.val[1], v544, 1);
        v551 = vmlaq_laneq_f64(vmulq_n_f64(v591.val[0], v544.f64[0]), v591.val[1], v544, 1);
        v552 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[0], v545.f64[0]), v585.val[1], v545, 1);
        v553 = vmlaq_laneq_f64(vmulq_n_f64(v591.val[0], v545.f64[0]), v591.val[1], v545, 1);
        v554 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[0], v546.f64[0]), v585.val[1], v546, 1);
        v555 = vmlaq_laneq_f64(vmulq_n_f64(v591.val[0], v546.f64[0]), v591.val[1], v546, 1);
        v556 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[0], v547.f64[0]), v585.val[1], v547, 1);
        v557 = vmlaq_laneq_f64(vmulq_n_f64(v591.val[0], v547.f64[0]), v591.val[1], v547, 1);
        v558 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[0], v548.f64[0]), v585.val[1], v548, 1);
        v559 = vmlaq_laneq_f64(vmulq_n_f64(v591.val[0], v548.f64[0]), v591.val[1], v548, 1);
        v560 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[0], v549.f64[0]), v585.val[1], v549, 1);
        v585.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v591.val[0], v549.f64[0]), v591.val[1], v549, 1);
        *(float64x2x2_t *)((char *)&v585 + 16) = vld2q_f64(v333);
        v591.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v585.val[1], v544.f64[0]), v591.val[0], v544, 1);
        v561 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[1], v545.f64[0]), v591.val[0], v545, 1);
        v562 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[1], v546.f64[0]), v591.val[0], v546, 1);
        v563 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[1], v547.f64[0]), v591.val[0], v547, 1);
        v564 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[1], v548.f64[0]), v591.val[0], v548, 1);
        v565 = vmlaq_laneq_f64(vmulq_n_f64(v585.val[1], v549.f64[0]), v591.val[0], v549, 1);
        v585.val[1] = vaddq_f64(*(float64x2_t *)(result + 32), v591.val[1]);
        v591.val[1] = vaddq_f64(*(float64x2_t *)(result + 16), v551);
        v566 = vaddq_f64(*(float64x2_t *)result, v550);
        v567 = vaddq_f64(*(float64x2_t *)(result + 80), v561);
        v568 = vaddq_f64(*(float64x2_t *)(result + 64), v553);
        v591.val[0] = vaddq_f64(*(float64x2_t *)(result + 48), v552);
        v569 = vaddq_f64(*(float64x2_t *)(result + 128), v562);
        v570 = vaddq_f64(*(float64x2_t *)(result + 112), v555);
        v571 = vaddq_f64(*(float64x2_t *)(result + 96), v554);
        v572 = vaddq_f64(*(float64x2_t *)(result + 176), v563);
        v573 = vaddq_f64(*(float64x2_t *)(result + 160), v557);
        v574 = vaddq_f64(*(float64x2_t *)(result + 144), v556);
        v575 = *(float64x2_t *)(result + 240);
        v576 = vaddq_f64(*(float64x2_t *)(result + 224), v564);
        v577 = vaddq_f64(*(float64x2_t *)(result + 208), v559);
        v578 = vaddq_f64(*(float64x2_t *)(result + 192), v558);
        v579 = vaddq_f64(*(float64x2_t *)(result + 272), v565);
        v585.val[0] = vaddq_f64(*(float64x2_t *)(result + 256), v585.val[0]);
        *(float64x2_t *)result = v566;
        *(float64x2_t *)(result + 16) = v591.val[1];
        *(float64x2_t *)(result + 32) = v585.val[1];
        *(float64x2_t *)(result + 48) = v591.val[0];
        *(float64x2_t *)(result + 64) = v568;
        *(float64x2_t *)(result + 80) = v567;
        *(float64x2_t *)(result + 96) = v571;
        *(float64x2_t *)(result + 112) = v570;
        *(float64x2_t *)(result + 128) = v569;
        *(float64x2_t *)(result + 144) = v574;
        *(float64x2_t *)(result + 160) = v573;
        *(float64x2_t *)(result + 176) = v572;
        *(float64x2_t *)(result + 192) = v578;
        *(float64x2_t *)(result + 208) = v577;
        *(float64x2_t *)(result + 224) = v576;
        *(float64x2_t *)(result + 240) = vaddq_f64(v575, v560);
        *(float64x2_t *)(result + 256) = v585.val[0];
        *(float64x2_t *)(result + 272) = v579;
        v378 = a2[8];
        if (a2[8])
        {
LABEL_41:
          if (a2[24])
          {
            result = sub_20F9AC460(*v5 + 10184, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 7));
            v596 = vld2q_f64(v327);
            v604 = vld2q_f64(v330);
            v381 = *(float64x2_t *)(result + 144);
            v612 = vld2q_f64(v333);
            v382 = a3[18];
            v383 = a3[19];
            v384 = a3[20];
            v385 = a3[21];
            v386 = vmlaq_laneq_f64(vmulq_n_f64(v596.val[0], v382.f64[0]), v596.val[1], v382, 1);
            v387 = vmlaq_laneq_f64(vmulq_n_f64(v604.val[0], v382.f64[0]), v604.val[1], v382, 1);
            v388 = vmlaq_laneq_f64(vmulq_n_f64(v612.val[0], v382.f64[0]), v612.val[1], v382, 1);
            v389 = vmlaq_laneq_f64(vmulq_n_f64(v596.val[0], v383.f64[0]), v596.val[1], v383, 1);
            v390 = vmlaq_laneq_f64(vmulq_n_f64(v604.val[0], v383.f64[0]), v604.val[1], v383, 1);
            v391 = vmlaq_laneq_f64(vmulq_n_f64(v612.val[0], v383.f64[0]), v612.val[1], v383, 1);
            v392 = vmlaq_laneq_f64(vmulq_n_f64(v596.val[0], v384.f64[0]), v596.val[1], v384, 1);
            v393 = vmlaq_laneq_f64(vmulq_n_f64(v604.val[0], v384.f64[0]), v604.val[1], v384, 1);
            v394 = vmlaq_laneq_f64(vmulq_n_f64(v612.val[0], v384.f64[0]), v612.val[1], v384, 1);
            v395 = vmlaq_laneq_f64(vmulq_n_f64(v596.val[0], v385.f64[0]), v596.val[1], v385, 1);
            v596.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v604.val[0], v385.f64[0]), v604.val[1], v385, 1);
            v396 = vaddq_f64(*(float64x2_t *)(result + 32), v388);
            v397 = vaddq_f64(*(float64x2_t *)(result + 16), v387);
            v398 = vaddq_f64(*(float64x2_t *)(result + 80), v391);
            v399 = vaddq_f64(*(float64x2_t *)(result + 64), v390);
            v400 = vaddq_f64(*(float64x2_t *)(result + 48), v389);
            v604.val[0] = vaddq_f64(*(float64x2_t *)(result + 128), v394);
            v401 = vaddq_f64(*(float64x2_t *)(result + 112), v393);
            v402 = vaddq_f64(*(float64x2_t *)(result + 96), v392);
            v596.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v612.val[0], v385.f64[0]), v612.val[1], v385, 1));
            v596.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), v596.val[0]);
            *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v386);
            *(float64x2_t *)(result + 16) = v397;
            *(float64x2_t *)(result + 32) = v396;
            *(float64x2_t *)(result + 48) = v400;
            *(float64x2_t *)(result + 64) = v399;
            *(float64x2_t *)(result + 80) = v398;
            *(float64x2_t *)(result + 96) = v402;
            *(float64x2_t *)(result + 112) = v401;
            *(float64x2_t *)(result + 128) = v604.val[0];
            *(float64x2_t *)(result + 144) = vaddq_f64(v381, v395);
            *(float64x2x2_t *)(result + 160) = v596;
            v378 = a2[8];
          }
        }
LABEL_43:
        if (v378 && a2[32])
        {
          result = sub_20F9AC460(*v5 + 11624, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 9));
          v597 = vld2q_f64(v327);
          v605 = vld2q_f64(v330);
          v403 = *(float64x2_t *)(result + 144);
          v613 = vld2q_f64(v333);
          v404 = a3[22];
          v405 = a3[23];
          v406 = a3[24];
          v407 = a3[25];
          v408 = vmlaq_laneq_f64(vmulq_n_f64(v597.val[0], v404.f64[0]), v597.val[1], v404, 1);
          v409 = vmlaq_laneq_f64(vmulq_n_f64(v605.val[0], v404.f64[0]), v605.val[1], v404, 1);
          v410 = vmlaq_laneq_f64(vmulq_n_f64(v613.val[0], v404.f64[0]), v613.val[1], v404, 1);
          v411 = vmlaq_laneq_f64(vmulq_n_f64(v597.val[0], v405.f64[0]), v597.val[1], v405, 1);
          v412 = vmlaq_laneq_f64(vmulq_n_f64(v605.val[0], v405.f64[0]), v605.val[1], v405, 1);
          v413 = vmlaq_laneq_f64(vmulq_n_f64(v613.val[0], v405.f64[0]), v613.val[1], v405, 1);
          v414 = vmlaq_laneq_f64(vmulq_n_f64(v597.val[0], v406.f64[0]), v597.val[1], v406, 1);
          v415 = vmlaq_laneq_f64(vmulq_n_f64(v605.val[0], v406.f64[0]), v605.val[1], v406, 1);
          v416 = vmlaq_laneq_f64(vmulq_n_f64(v613.val[0], v406.f64[0]), v613.val[1], v406, 1);
          v417 = vmlaq_laneq_f64(vmulq_n_f64(v597.val[0], v407.f64[0]), v597.val[1], v407, 1);
          v597.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v605.val[0], v407.f64[0]), v605.val[1], v407, 1);
          v418 = vaddq_f64(*(float64x2_t *)(result + 32), v410);
          v419 = vaddq_f64(*(float64x2_t *)(result + 16), v409);
          v420 = vaddq_f64(*(float64x2_t *)(result + 80), v413);
          v421 = vaddq_f64(*(float64x2_t *)(result + 64), v412);
          v422 = vaddq_f64(*(float64x2_t *)(result + 48), v411);
          v605.val[0] = vaddq_f64(*(float64x2_t *)(result + 128), v416);
          v423 = vaddq_f64(*(float64x2_t *)(result + 112), v415);
          v424 = vaddq_f64(*(float64x2_t *)(result + 96), v414);
          v597.val[1] = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v613.val[0], v407.f64[0]), v613.val[1], v407, 1));
          v597.val[0] = vaddq_f64(*(float64x2_t *)(result + 160), v597.val[0]);
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v408);
          *(float64x2_t *)(result + 16) = v419;
          *(float64x2_t *)(result + 32) = v418;
          *(float64x2_t *)(result + 48) = v422;
          *(float64x2_t *)(result + 64) = v421;
          *(float64x2_t *)(result + 80) = v420;
          *(float64x2_t *)(result + 96) = v424;
          *(float64x2_t *)(result + 112) = v423;
          *(float64x2_t *)(result + 128) = v605.val[0];
          *(float64x2_t *)(result + 144) = vaddq_f64(v403, v417);
          *(float64x2x2_t *)(result + 160) = v597;
          v378 = a2[8];
        }
        if (v378 && a2[40])
        {
          result = sub_20F9AC584(*v5 + 13064, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 11));
          v590 = vld2q_f64(v327);
          v598 = vld2q_f64(v330);
          v606 = vld2q_f64(v333);
          v425 = *(float64x2_t *)(result + 96);
          v426 = a3[26];
          v427 = a3[27];
          v428 = a3[28];
          v429 = vmlaq_laneq_f64(vmulq_n_f64(v590.val[0], v426.f64[0]), v590.val[1], v426, 1);
          v430 = vmlaq_laneq_f64(vmulq_n_f64(v598.val[0], v426.f64[0]), v598.val[1], v426, 1);
          v431 = vmlaq_laneq_f64(vmulq_n_f64(v606.val[0], v426.f64[0]), v606.val[1], v426, 1);
          v432 = vmlaq_laneq_f64(vmulq_n_f64(v590.val[0], v427.f64[0]), v590.val[1], v427, 1);
          v433 = vmlaq_laneq_f64(vmulq_n_f64(v598.val[0], v427.f64[0]), v598.val[1], v427, 1);
          v434 = vmlaq_laneq_f64(vmulq_n_f64(v606.val[0], v427.f64[0]), v606.val[1], v427, 1);
          v435 = vmlaq_laneq_f64(vmulq_n_f64(v590.val[0], v428.f64[0]), v590.val[1], v428, 1);
          v590.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v598.val[0], v428.f64[0]), v598.val[1], v428, 1);
          v436 = vaddq_f64(*(float64x2_t *)(result + 32), v431);
          v437 = vaddq_f64(*(float64x2_t *)(result + 16), v430);
          v598.val[0] = vaddq_f64(*(float64x2_t *)(result + 80), v434);
          v598.val[1] = vaddq_f64(*(float64x2_t *)(result + 64), v433);
          v438 = vaddq_f64(*(float64x2_t *)(result + 48), v432);
          v590.val[1] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v606.val[0], v428.f64[0]), v606.val[1], v428, 1));
          v590.val[0] = vaddq_f64(*(float64x2_t *)(result + 112), v590.val[0]);
          *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v429);
          *(float64x2_t *)(result + 16) = v437;
          *(float64x2_t *)(result + 32) = v436;
          *(float64x2_t *)(result + 48) = v438;
          *(float64x2_t *)(result + 64) = v598.val[1];
          *(float64x2_t *)(result + 80) = v598.val[0];
          *(float64x2_t *)(result + 96) = vaddq_f64(v425, v435);
          *(float64x2x2_t *)(result + 112) = v590;
        }
        goto LABEL_49;
      }
      v378 = 1;
    }
    if (v378)
      goto LABEL_41;
    goto LABEL_43;
  }
LABEL_49:
  if (*a2)
  {
    result = sub_20F9AC33C(*v5 + 3272, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 1));
    v439 = a3[1];
    v440 = a3[2].f64;
    v441 = a3[2];
    v442 = a3[3];
    v443 = a3[4].f64;
    v444 = a3[4];
    v445 = a3[5];
    v446 = (float64x2_t)vzip1q_s64((int64x2_t)v441, (int64x2_t)v442);
    *(_QWORD *)&v447.f64[0] = vdupq_laneq_s64((int64x2_t)v441, 1).u64[0];
    v447.f64[1] = a3[3].f64[1];
    *(_QWORD *)&v448.f64[0] = vdupq_laneq_s64((int64x2_t)v444, 1).u64[0];
    v449 = (float64x2_t)vzip1q_s64((int64x2_t)v444, (int64x2_t)v445);
    v448.f64[1] = a3[5].f64[1];
    v450 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)v439);
    v451 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)v439);
    v452 = vmlaq_laneq_f64(vmulq_n_f64(v446, a3->f64[0]), v447, *a3, 1);
    v453 = vmlaq_laneq_f64(vmulq_n_f64(v450, v439.f64[0]), v451, v439, 1);
    v454 = vmlaq_laneq_f64(vmulq_n_f64(v446, v439.f64[0]), v447, v439, 1);
    v455 = vmlaq_laneq_f64(vmulq_n_f64(v449, v439.f64[0]), v448, v439, 1);
    v456 = vmlaq_laneq_f64(vmulq_n_f64(v450, v441.f64[0]), v451, v441, 1);
    v457 = vmlaq_laneq_f64(vmulq_n_f64(v446, v441.f64[0]), v447, v441, 1);
    v458 = vmlaq_laneq_f64(vmulq_n_f64(v449, v441.f64[0]), v448, v441, 1);
    v459 = vmlaq_laneq_f64(vmulq_n_f64(v450, v442.f64[0]), v451, v442, 1);
    v460 = vmlaq_laneq_f64(vmulq_n_f64(v446, v442.f64[0]), v447, v442, 1);
    v461 = vmlaq_laneq_f64(vmulq_n_f64(v449, v442.f64[0]), v448, v442, 1);
    v462 = vmlaq_laneq_f64(vmulq_n_f64(v450, v444.f64[0]), v451, v444, 1);
    v463 = vmlaq_laneq_f64(vmulq_n_f64(v446, v444.f64[0]), v447, v444, 1);
    v464 = vmlaq_laneq_f64(vmulq_n_f64(v449, v444.f64[0]), v448, v444, 1);
    v465 = vmlaq_laneq_f64(vmulq_n_f64(v450, v445.f64[0]), v451, v445, 1);
    v466 = vmlaq_laneq_f64(vmulq_n_f64(v446, v445.f64[0]), v447, v445, 1);
    v467 = vmlaq_laneq_f64(vmulq_n_f64(v449, v445.f64[0]), v448, v445, 1);
    v468 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v449, a3->f64[0]), v448, *a3, 1));
    v469 = vaddq_f64(*(float64x2_t *)(result + 16), v452);
    v470 = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v450, a3->f64[0]), v451, *a3, 1));
    v471 = vaddq_f64(*(float64x2_t *)(result + 80), v455);
    v472 = vaddq_f64(*(float64x2_t *)(result + 64), v454);
    v473 = vaddq_f64(*(float64x2_t *)(result + 48), v453);
    v474 = vaddq_f64(*(float64x2_t *)(result + 128), v458);
    v475 = vaddq_f64(*(float64x2_t *)(result + 112), v457);
    v476 = vaddq_f64(*(float64x2_t *)(result + 96), v456);
    v477 = vaddq_f64(*(float64x2_t *)(result + 176), v461);
    v478 = vaddq_f64(*(float64x2_t *)(result + 160), v460);
    v479 = vaddq_f64(*(float64x2_t *)(result + 144), v459);
    v480 = *(float64x2_t *)(result + 240);
    v481 = vaddq_f64(*(float64x2_t *)(result + 224), v464);
    v482 = vaddq_f64(*(float64x2_t *)(result + 208), v463);
    v483 = vaddq_f64(*(float64x2_t *)(result + 192), v462);
    v484 = vaddq_f64(*(float64x2_t *)(result + 272), v467);
    v485 = vaddq_f64(*(float64x2_t *)(result + 256), v466);
    *(float64x2_t *)result = v470;
    *(float64x2_t *)(result + 16) = v469;
    *(float64x2_t *)(result + 32) = v468;
    *(float64x2_t *)(result + 48) = v473;
    *(float64x2_t *)(result + 64) = v472;
    *(float64x2_t *)(result + 80) = v471;
    *(float64x2_t *)(result + 96) = v476;
    *(float64x2_t *)(result + 112) = v475;
    *(float64x2_t *)(result + 128) = v474;
    *(float64x2_t *)(result + 144) = v479;
    *(float64x2_t *)(result + 160) = v478;
    *(float64x2_t *)(result + 176) = v477;
    *(float64x2_t *)(result + 192) = v483;
    *(float64x2_t *)(result + 208) = v482;
    *(float64x2_t *)(result + 224) = v481;
    *(float64x2_t *)(result + 240) = vaddq_f64(v480, v465);
    *(float64x2_t *)(result + 256) = v485;
    *(float64x2_t *)(result + 272) = v484;
    v486 = *a2;
    if (*a2 && a2[24])
    {
      result = sub_20F9AC460(*v5 + 10472, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 7));
      v487 = *(float64x2_t *)(result + 144);
      v610 = vld2q_f64(v440);
      v488 = (int64x2_t)a3[1];
      v616 = vld2q_f64(v443);
      v489 = a3[18];
      v490 = a3[19];
      v491 = a3[20];
      v492 = a3[21];
      v493 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v488);
      v494 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v488);
      v495 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v616.val[0], v489.f64[0]), v616.val[1], v489, 1));
      v496 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v610.val[0], v489.f64[0]), v610.val[1], v489, 1));
      v497 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v616.val[0], v490.f64[0]), v616.val[1], v490, 1));
      v498 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v610.val[0], v490.f64[0]), v610.val[1], v490, 1));
      v499 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v493, v490.f64[0]), v494, v490, 1));
      v500 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v616.val[0], v491.f64[0]), v616.val[1], v491, 1));
      v501 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v610.val[0], v491.f64[0]), v610.val[1], v491, 1));
      v502 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v493, v491.f64[0]), v494, v491, 1));
      v503 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v616.val[0], v492.f64[0]), v616.val[1], v492, 1));
      v504 = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v610.val[0], v492.f64[0]), v610.val[1], v492, 1));
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v493, v489.f64[0]), v494, v489, 1));
      *(float64x2_t *)(result + 16) = v496;
      *(float64x2_t *)(result + 32) = v495;
      *(float64x2_t *)(result + 48) = v499;
      *(float64x2_t *)(result + 64) = v498;
      *(float64x2_t *)(result + 80) = v497;
      *(float64x2_t *)(result + 96) = v502;
      *(float64x2_t *)(result + 112) = v501;
      *(float64x2_t *)(result + 128) = v500;
      *(float64x2_t *)(result + 144) = vaddq_f64(v487, vmlaq_laneq_f64(vmulq_n_f64(v493, v492.f64[0]), v494, v492, 1));
      *(float64x2_t *)(result + 160) = v504;
      *(float64x2_t *)(result + 176) = v503;
      v486 = *a2;
    }
    if (v486 && a2[32])
    {
      result = sub_20F9AC460(*v5 + 11912, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 9));
      v505 = *(float64x2_t *)(result + 144);
      v611 = vld2q_f64(v440);
      v506 = (int64x2_t)a3[1];
      v617 = vld2q_f64(v443);
      v507 = a3[22];
      v508 = a3[23];
      v509 = a3[24];
      v510 = a3[25];
      v511 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v506);
      v512 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v506);
      v513 = vaddq_f64(*(float64x2_t *)(result + 32), vmlaq_laneq_f64(vmulq_n_f64(v617.val[0], v507.f64[0]), v617.val[1], v507, 1));
      v514 = vaddq_f64(*(float64x2_t *)(result + 16), vmlaq_laneq_f64(vmulq_n_f64(v611.val[0], v507.f64[0]), v611.val[1], v507, 1));
      v515 = vaddq_f64(*(float64x2_t *)(result + 80), vmlaq_laneq_f64(vmulq_n_f64(v617.val[0], v508.f64[0]), v617.val[1], v508, 1));
      v516 = vaddq_f64(*(float64x2_t *)(result + 64), vmlaq_laneq_f64(vmulq_n_f64(v611.val[0], v508.f64[0]), v611.val[1], v508, 1));
      v517 = vaddq_f64(*(float64x2_t *)(result + 48), vmlaq_laneq_f64(vmulq_n_f64(v511, v508.f64[0]), v512, v508, 1));
      v518 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v617.val[0], v509.f64[0]), v617.val[1], v509, 1));
      v519 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_laneq_f64(vmulq_n_f64(v611.val[0], v509.f64[0]), v611.val[1], v509, 1));
      v520 = vaddq_f64(*(float64x2_t *)(result + 96), vmlaq_laneq_f64(vmulq_n_f64(v511, v509.f64[0]), v512, v509, 1));
      v521 = vaddq_f64(*(float64x2_t *)(result + 176), vmlaq_laneq_f64(vmulq_n_f64(v617.val[0], v510.f64[0]), v617.val[1], v510, 1));
      v522 = vaddq_f64(*(float64x2_t *)(result + 160), vmlaq_laneq_f64(vmulq_n_f64(v611.val[0], v510.f64[0]), v611.val[1], v510, 1));
      *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, vmlaq_laneq_f64(vmulq_n_f64(v511, v507.f64[0]), v512, v507, 1));
      *(float64x2_t *)(result + 16) = v514;
      *(float64x2_t *)(result + 32) = v513;
      *(float64x2_t *)(result + 48) = v517;
      *(float64x2_t *)(result + 64) = v516;
      *(float64x2_t *)(result + 80) = v515;
      *(float64x2_t *)(result + 96) = v520;
      *(float64x2_t *)(result + 112) = v519;
      *(float64x2_t *)(result + 128) = v518;
      *(float64x2_t *)(result + 144) = vaddq_f64(v505, vmlaq_laneq_f64(vmulq_n_f64(v511, v510.f64[0]), v512, v510, 1));
      *(float64x2_t *)(result + 160) = v522;
      *(float64x2_t *)(result + 176) = v521;
      v486 = *a2;
    }
    if (v486)
    {
      if (a2[40])
      {
        result = sub_20F9AC584(*v5 + 13352, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 11));
        v523 = *(float64x2_t *)(result + 96);
        v601 = vld2q_f64(v440);
        v607 = vld2q_f64(v443);
        v524 = (int64x2_t)a3[1];
        v525 = a3[26];
        v526 = a3[27];
        v527 = a3[28];
        v528 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v524);
        v529 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v524);
        v530 = vmlaq_laneq_f64(vmulq_n_f64(v528, v525.f64[0]), v529, v525, 1);
        v531 = vmlaq_laneq_f64(vmulq_n_f64(v601.val[0], v525.f64[0]), v601.val[1], v525, 1);
        v532 = vmlaq_laneq_f64(vmulq_n_f64(v607.val[0], v525.f64[0]), v607.val[1], v525, 1);
        v533 = vmlaq_laneq_f64(vmulq_n_f64(v528, v526.f64[0]), v529, v526, 1);
        v534 = vmlaq_laneq_f64(vmulq_n_f64(v601.val[0], v526.f64[0]), v601.val[1], v526, 1);
        v535 = vmlaq_laneq_f64(vmulq_n_f64(v607.val[0], v526.f64[0]), v607.val[1], v526, 1);
        v536 = vmlaq_laneq_f64(vmulq_n_f64(v528, v527.f64[0]), v529, v527, 1);
        v537 = vmlaq_laneq_f64(vmulq_n_f64(v601.val[0], v527.f64[0]), v601.val[1], v527, 1);
        v538 = vaddq_f64(*(float64x2_t *)(result + 32), v532);
        v539 = vaddq_f64(*(float64x2_t *)(result + 16), v531);
        v540 = vaddq_f64(*(float64x2_t *)(result + 80), v535);
        v541 = vaddq_f64(*(float64x2_t *)(result + 64), v534);
        v542 = vaddq_f64(*(float64x2_t *)(result + 48), v533);
        v601.val[0] = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_laneq_f64(vmulq_n_f64(v607.val[0], v527.f64[0]), v607.val[1], v527, 1));
        v543 = vaddq_f64(*(float64x2_t *)(result + 112), v537);
        *(float64x2_t *)result = vaddq_f64(*(float64x2_t *)result, v530);
        *(float64x2_t *)(result + 16) = v539;
        *(float64x2_t *)(result + 32) = v538;
        *(float64x2_t *)(result + 48) = v542;
        *(float64x2_t *)(result + 64) = v541;
        *(float64x2_t *)(result + 80) = v540;
        *(float64x2_t *)(result + 96) = vaddq_f64(v523, v536);
        *(float64x2_t *)(result + 112) = v543;
        *(float64x2_t *)(result + 128) = v601.val[0];
      }
    }
  }
  return result;
}

BOOL sub_20FAFD708(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  const double *v9;
  double v10;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v22;
  float64x2_t v23;
  double v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64_t v35;
  float64_t v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;
  uint64_t v40;
  float64x2_t *v41;
  void *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  double v141;
  uint64_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int8x16_t v156;
  int8x16_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  int8x16_t v166;
  unint64_t v167;
  float64x2_t *v168;
  int8x16_t v169;
  unint64_t v170;
  unint64_t v171;
  int8x16_t v172;
  int8x16_t v173;
  unint64_t v174;
  unint64_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64_t v180;
  float64_t v181;
  double v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  _QWORD *v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  _BOOL8 result;
  float64x2_t v250[18];
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  float64x2_t v450;
  uint64_t v451;
  float64x2_t v452;
  _BYTE v453[32];
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  uint64_t v469;
  float64x2x3_t v470;

  v469 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    v7 = a1 + 128;
    v8 = *(_QWORD *)(a1 + 128);
    v9 = (const double *)(a1 + 16);
    v470 = vld3q_f64(v9);
    v10 = *(double *)(a1 + 80);
    _Q4 = *(_OWORD *)(a1 + 64);
    v12 = *(double *)(v8 + 48);
    v13 = *(double *)(v8 + 72);
    v14 = *(double *)(v8 + 96);
    v15 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 32)), v470.val[1], *(float64x2_t *)(v8 + 32), 1), v470.val[2], v12);
    _D6 = *(_QWORD *)(v8 + 40);
    __asm { FMLA            D20, D6, V4.D[1] }
    v22 = _D20 + v10 * v12;
    v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 56)), v470.val[1], *(float64x2_t *)(v8 + 56), 1), v470.val[2], v13);
    _D16 = *(_QWORD *)(v8 + 64);
    __asm { FMLA            D20, D16, V4.D[1] }
    v26 = _D20 + v10 * v13;
    v27 = vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 80)), v470.val[1], *(float64x2_t *)(v8 + 80), 1);
    _D18 = *(_QWORD *)(v8 + 88);
    __asm { FMLA            D20, D18, V4.D[1] }
    v452 = v15;
    *(double *)v453 = v22;
    *(double *)&v453[24] = v26;
    *(float64x2_t *)&v453[8] = v23;
    v455.f64[0] = _D20 + v10 * v14;
    v454 = vmlaq_n_f64(v27, v470.val[2], v14);
    v451 = 0;
    v450 = 0uLL;
    sub_20E9733B8(&v452, v450.f64);
    v30 = v450;
    *(_QWORD *)(a1 + 200) = v451;
    *(float64x2_t *)(a1 + 184) = v30;
    v30.f64[0] = *(float64_t *)(v8 + 120);
    v31.f64[0] = *(float64_t *)(a1 + 104);
    *(float64x2_t *)(a1 + 208) = vsubq_f64(*(float64x2_t *)(v8 + 104), *(float64x2_t *)(a1 + 88));
    *(_QWORD *)(a1 + 224) = *(_OWORD *)&vsubq_f64(v30, v31);
    v32 = *(float64x2_t **)(a1 + 112);
    v33 = vmulq_f64(*(float64x2_t *)(a1 + 216), v32[3]);
    v34 = vmulq_f64(*(float64x2_t *)(a1 + 200), v32[2]);
    *(float64x2_t *)(a1 + 184) = vmulq_f64(*(float64x2_t *)(a1 + 184), v32[1]);
    *(float64x2_t *)(a1 + 200) = v34;
    *(float64x2_t *)(a1 + 216) = v33;
    if (*(_BYTE *)(*(_QWORD *)v7 + 20))
    {
      v36 = v32[2].f64[0];
      v35 = v32[2].f64[1];
      v37 = v32[1].f64[1];
      v38 = v32[3].f64[0];
      v39 = v32[3].f64[1];
      a3->f64[0] = v32[1].f64[0];
      *(float64x2_t *)((char *)a3 + 8) = 0u;
      *(float64x2_t *)((char *)&a3[1] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[2] + 8) = 0u;
      a3[3].f64[1] = v37;
      a3[4] = 0u;
      a3[5] = 0u;
      a3[6] = 0u;
      a3[7].f64[0] = v36;
      *(float64x2_t *)((char *)&a3[7] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[8] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[9] + 8) = 0u;
      a3[10].f64[1] = v35;
      a3[11] = 0u;
      a3[12] = 0u;
      a3[13] = 0u;
      a3[14].f64[0] = v38;
      *(float64x2_t *)((char *)&a3[15] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[14] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[16] + 8) = 0u;
      a3[17].f64[1] = v39;
    }
    *(_BYTE *)(a1 + 240) = 1;
    v40 = *(_QWORD *)(a1 + 248);
    if (v40)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 24))(v40, a1 + 184);
      v41 = *(float64x2_t **)(a1 + 248);
      v42 = (void *)(*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v41->f64[0] + 16))(v41);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
      {
        switch((int)v42)
        {
          case 0:
            v43 = v41 + 1;
            if (&a3[18] > &v41[1] && &v41[19] > a3)
            {
              MEMORY[0x24BDAC7A8](v42);
              v42 = memcpy(v250, v43, sizeof(v250));
              v43 = v250;
            }
            MEMORY[0x24BDAC7A8](v42);
            v44 = &v250[-18];
            memcpy(&v250[-18], a3, 0x120uLL);
            v45 = v43[1];
            v47 = v43[3];
            v46 = v43[4];
            v49 = v43[6];
            v48 = v43[7];
            v51 = v43[9];
            v50 = v43[10];
            v52 = v250[-17];
            v53 = v250[-18];
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v44->f64[0]), v47, *v44, 1), v49, v52.f64[0]), v51, v52, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v44->f64[0]), v46, *v44, 1), v48, v52.f64[0]), v50, v52, 1);
            v57 = v250[-16];
            v56 = v250[-15];
            v59 = v56;
            v58 = v250[-14];
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v56.f64[0]), v47, v56, 1), v49, v58.f64[0]), v51, v58, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v56.f64[0]), v46, v56, 1), v48, v58.f64[0]), v50, v58, 1);
            v63 = v250[-13];
            v62 = v250[-12];
            v65 = v62;
            v64 = v250[-11];
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v62.f64[0]), v47, v62, 1), v49, v64.f64[0]), v51, v64, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v62.f64[0]), v46, v62, 1), v48, v64.f64[0]), v50, v64, 1);
            v69 = v250[-10];
            v68 = v250[-9];
            v70 = vmlaq_laneq_f64(vmulq_n_f64(*v43, v68.f64[0]), v47, v68, 1);
            v72 = v68;
            v71 = v250[-8];
            v73 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v49, v71.f64[0]), v51, v71, 1);
            v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v68.f64[0]), v46, v68, 1), v48, v71.f64[0]), v50, v71, 1);
            v76 = v43[12];
            v75 = v43[13];
            v78 = v43[15];
            v77 = v43[16];
            v79 = v57;
            v80 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v76, v79.f64[0]), v78, v79, 1);
            v81 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v75, v79.f64[0]), v77, v79, 1);
            v83 = v250[-14];
            v82 = v63;
            v84 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v76, v82.f64[0]), v78, v82, 1);
            v85 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v75, v82.f64[0]), v77, v82, 1);
            v87 = v250[-11];
            v86 = v69;
            v88 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v76, v86.f64[0]), v78, v86, 1);
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v75, v86.f64[0]), v77, v86, 1);
            v91 = v250[-8];
            v90 = v250[-7];
            *a3 = v80;
            a3[1] = v81;
            a3[3] = v84;
            a3[4] = v85;
            a3[6] = v88;
            a3[7] = v89;
            a3[9] = vmlaq_laneq_f64(vmlaq_n_f64(v73, v76, v90.f64[0]), v78, v90, 1);
            a3[10] = vmlaq_laneq_f64(vmlaq_n_f64(v74, v75, v90.f64[0]), v77, v90, 1);
            v92 = v43[2];
            v93 = v43[5];
            v94 = v43[8];
            v95 = v43[11];
            v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v53.f64[0]), v93, v53, 1), v94, v250[-17].f64[0]), v95, v250[-17], 1);
            v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v59.f64[0]), v93, v59, 1), v94, v83.f64[0]), v95, v83, 1);
            v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v65.f64[0]), v93, v65, 1), v94, v87.f64[0]), v95, v87, 1);
            v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v72.f64[0]), v93, v72, 1), v94, v91.f64[0]), v95, v91, 1);
            v100 = v43[14];
            v101 = v43[17];
            v102 = v250[-6];
            v103 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v100, v250[-7].f64[0]), v101, v250[-7], 1);
            a3[2] = vmlaq_laneq_f64(vmlaq_n_f64(v96, v100, v57.f64[0]), v101, v57, 1);
            a3[5] = vmlaq_laneq_f64(vmlaq_n_f64(v97, v100, v63.f64[0]), v101, v63, 1);
            a3[8] = vmlaq_laneq_f64(vmlaq_n_f64(v98, v100, v69.f64[0]), v101, v69, 1);
            a3[11] = v103;
            v104 = v43[1];
            v106 = v43[3];
            v105 = v43[4];
            v108 = v43[6];
            v107 = v43[7];
            v110 = v43[9];
            v109 = v43[10];
            v112 = v250[-6];
            v111 = v250[-5];
            v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v102.f64[0]), v106, v102, 1), v108, v111.f64[0]), v110, v111, 1);
            v114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, v102.f64[0]), v105, v102, 1), v107, v111.f64[0]), v109, v111, 1);
            v116 = v250[-4];
            v115 = v250[-3];
            v117 = vmlaq_laneq_f64(vmulq_n_f64(*v43, v115.f64[0]), v106, v115, 1);
            v119 = v115;
            v118 = v250[-2];
            v120 = vmlaq_laneq_f64(vmlaq_n_f64(v117, v108, v118.f64[0]), v110, v118, 1);
            v121 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, v115.f64[0]), v105, v115, 1), v107, v118.f64[0]), v109, v118, 1);
            v123 = v43[12];
            v122 = v43[13];
            v125 = v43[15];
            v124 = v43[16];
            v127 = v250[-5];
            v126 = v116;
            v128 = vmlaq_laneq_f64(vmlaq_n_f64(v113, v123, v126.f64[0]), v125, v126, 1);
            v129 = vmlaq_laneq_f64(vmlaq_n_f64(v114, v122, v126.f64[0]), v124, v126, 1);
            v131 = v250[-2];
            v130 = v250[-1];
            a3[12] = v128;
            a3[13] = v129;
            a3[15] = vmlaq_laneq_f64(vmlaq_n_f64(v120, v123, v130.f64[0]), v125, v130, 1);
            a3[16] = vmlaq_laneq_f64(vmlaq_n_f64(v121, v122, v130.f64[0]), v124, v130, 1);
            v132 = v43[2];
            v133 = v43[5];
            v134 = v43[8];
            v135 = v43[11];
            v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v112.f64[0]), v133, v112, 1), v134, v127.f64[0]), v135, v127, 1);
            v137 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v119.f64[0]), v133, v119, 1), v134, v131.f64[0]), v135, v131, 1);
            v138 = v43[14];
            v139 = v43[17];
            v140 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v138, v250[-1].f64[0]), v139, v250[-1], 1);
            a3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v136, v138, v116.f64[0]), v139, v116, 1);
            a3[17] = v140;
            break;
          case 1:
            v142 = 0;
            v144 = (int8x16_t)a3[16];
            v143 = (int8x16_t)a3[17];
            v146 = (int8x16_t)a3[14];
            v145 = (int8x16_t)a3[15];
            v148 = (int8x16_t)a3[12];
            v147 = (int8x16_t)a3[13];
            v150 = (int8x16_t)a3[10];
            v149 = (int8x16_t)a3[11];
            v152 = (int8x16_t)a3[8];
            v151 = (int8x16_t)a3[9];
            v256 = (float64x2_t)vextq_s8(v144, v144, 8uLL);
            v257 = (float64x2_t)vextq_s8(v143, v143, 8uLL);
            v254 = (float64x2_t)vextq_s8(v146, v146, 8uLL);
            v255 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
            v153 = vextq_s8(v147, v147, 8uLL).u64[0];
            v154 = vextq_s8(v148, v148, 8uLL).u64[0];
            v155 = vextq_s8(v149, v149, 8uLL).u64[0];
            v157 = (int8x16_t)a3[6];
            v156 = (int8x16_t)a3[7];
            v158 = vextq_s8(v150, v150, 8uLL).u64[0];
            v159 = vextq_s8(v151, v151, 8uLL).u64[0];
            v160 = vextq_s8(v152, v152, 8uLL).u64[0];
            v162 = (int8x16_t)a3[4];
            v161 = (int8x16_t)a3[5];
            v163 = vextq_s8(v156, v156, 8uLL).u64[0];
            v164 = vextq_s8(v157, v157, 8uLL).u64[0];
            v165 = vextq_s8(v161, v161, 8uLL).u64[0];
            v166 = (int8x16_t)a3[3];
            v167 = vextq_s8(v162, v162, 8uLL).u64[0];
            v168 = a3 + 2;
            v169 = (int8x16_t)a3[2];
            v170 = vextq_s8(v166, v166, 8uLL).u64[0];
            v171 = vextq_s8(v169, v169, 8uLL).u64[0];
            v173 = *(int8x16_t *)a3;
            v172 = (int8x16_t)a3[1];
            v174 = vextq_s8(v172, v172, 8uLL).u64[0];
            v175 = vextq_s8(v173, v173, 8uLL).u64[0];
            do
            {
              v173.i64[1] = v175;
              v172.i64[1] = v174;
              v169.i64[1] = v171;
              v166.i64[1] = v170;
              v176 = v168[-1];
              v177 = v41[2];
              v178 = vmulq_f64(v168[-2], v41[1]);
              v253 = *v168;
              v179 = v41[3];
              v251 = v178;
              v252 = v179;
              v418 = v173;
              v419 = v172;
              v420 = v169;
              v421 = v166;
              v162.i64[1] = v167;
              v161.i64[1] = v165;
              v157.i64[1] = v164;
              v422 = v162;
              v423 = v161;
              v156.i64[1] = v163;
              v152.i64[1] = v160;
              v424 = v157;
              v425 = v156;
              v151.i64[1] = v159;
              v150.i64[1] = v158;
              v426 = v152;
              v427 = v151;
              v149.i64[1] = v155;
              v148.i64[1] = v154;
              v428 = v150;
              v429 = v149;
              v147.i64[1] = v153;
              v146.i64[1] = *(_QWORD *)&v254.f64[0];
              v430 = v148;
              v431 = v147;
              v145.i64[1] = *(_QWORD *)&v255.f64[0];
              v144.i64[1] = *(_QWORD *)&v256.f64[0];
              v432 = v146;
              v433 = v145;
              v143.i64[1] = *(_QWORD *)&v257.f64[0];
              v434 = v144;
              v435 = v143;
              v418.i64[v142 & 0x3F] = *(_QWORD *)&v178.f64[0];
              v257 = vmulq_f64(v176, v177);
              v417 = v449;
              v416 = v448;
              v415 = v447;
              v414 = v446;
              v413 = v445;
              v412 = v444;
              v411 = v443;
              v410 = v442;
              v409 = v441;
              v408 = v440;
              v407 = v439;
              v406 = v438;
              v405 = v437;
              v404 = v436;
              v403 = v435;
              v402 = v434;
              v401 = v433;
              v400 = v432;
              v399 = v431;
              v398 = v430;
              v397 = v429;
              v396 = v428;
              v395 = v427;
              v394 = v426;
              v393 = v425;
              v392 = v424;
              v391 = v423;
              v390 = v422;
              v389 = v421;
              v388 = v420;
              v387 = v419;
              v386 = v418;
              v386.i64[((_BYTE)v142 + 1) & 0x3F] = *(_QWORD *)&v251.f64[1];
              v385 = v417;
              v384 = v416;
              v383 = v415;
              v382 = v414;
              v381 = v413;
              v380 = v412;
              v379 = v411;
              v378 = v410;
              v377 = v409;
              v376 = v408;
              v375 = v407;
              v374 = v406;
              v373 = v405;
              v372 = v404;
              v371 = v403;
              v370 = v402;
              v369 = v401;
              v368 = v400;
              v367 = v399;
              v366 = v398;
              v365 = v397;
              v364 = v396;
              v363 = v395;
              v362 = v394;
              v361 = v393;
              v360 = v392;
              v359 = v391;
              v358 = v390;
              v357 = v389;
              v356 = v388;
              v355 = v387;
              v354 = v386;
              v180 = v257.f64[1];
              v354.i64[((_BYTE)v142 + 2) & 0x3F] = *(_QWORD *)&v257.f64[0];
              v256 = vmulq_f64(v253, v252);
              v353 = v385;
              v352 = v384;
              v351 = v383;
              v350 = v382;
              v349 = v381;
              v348 = v380;
              v347 = v379;
              v346 = v378;
              v345 = v377;
              v344 = v376;
              v343 = v375;
              v342 = v374;
              v341 = v373;
              v340 = v372;
              v339 = v371;
              v338 = v370;
              v337 = v369;
              v336 = v368;
              v335 = v367;
              v334 = v366;
              v333 = v365;
              v332 = v364;
              v331 = v363;
              v330 = v362;
              v329 = v361;
              v328 = v360;
              v327 = v359;
              v326 = v358;
              v325 = v357;
              v324 = v356;
              v323 = v355;
              v322 = v354;
              *(float64_t *)&v322.i64[((_BYTE)v142 + 3) & 0x3F] = v180;
              v321 = v353;
              v320 = v352;
              v319 = v351;
              v318 = v350;
              v317 = v349;
              v316 = v348;
              v314 = v346;
              v315 = v347;
              v312 = v344;
              v313 = v345;
              v310 = v342;
              v311 = v343;
              v308 = v340;
              v309 = v341;
              v306 = v338;
              v307 = v339;
              v304 = v336;
              v305 = v337;
              v302 = v334;
              v303 = v335;
              v300 = v332;
              v301 = v333;
              v298 = v330;
              v299 = v331;
              v296 = v328;
              v297 = v329;
              v294 = v326;
              v295 = v327;
              v292 = v324;
              v293 = v325;
              v290 = v322;
              v291 = v323;
              v181 = v256.f64[1];
              v290.i64[((_BYTE)v142 + 4) & 0x3F] = *(_QWORD *)&v256.f64[0];
              v288 = v320;
              v289 = v321;
              v286 = v318;
              v287 = v319;
              v284 = v316;
              v285 = v317;
              v282 = v314;
              v283 = v315;
              v280 = v312;
              v281 = v313;
              v278 = v310;
              v279 = v311;
              v276 = v308;
              v277 = v309;
              v274 = v306;
              v275 = v307;
              v272 = v304;
              v273 = v305;
              v270 = v302;
              v271 = v303;
              v268 = v300;
              v269 = v301;
              v266 = v298;
              v267 = v299;
              v264 = v296;
              v265 = v297;
              v262 = v294;
              v263 = v295;
              v260 = v292;
              v261 = v293;
              v259 = v291;
              v258 = v290;
              *(float64_t *)&v258.i64[((_BYTE)v142 + 5) & 0x3F] = v181;
              v144 = v274;
              v143 = v275;
              v146 = v272;
              v145 = v273;
              v148 = v270;
              v147 = v271;
              v150 = v268;
              v149 = v269;
              v152 = v266;
              v151 = v267;
              v157 = v264;
              v156 = v265;
              v162 = v262;
              v161 = v263;
              v169 = v260;
              v166 = v261;
              v173 = v258;
              v172 = v259;
              v257 = (float64x2_t)vextq_s8(v143, v143, 8uLL);
              v256 = (float64x2_t)vextq_s8(v144, v144, 8uLL);
              v255 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
              v254 = (float64x2_t)vextq_s8(v146, v146, 8uLL);
              v153 = vextq_s8(v147, v147, 8uLL).u64[0];
              v154 = vextq_s8(v148, v148, 8uLL).u64[0];
              v155 = vextq_s8(v149, v149, 8uLL).u64[0];
              v158 = vextq_s8(v150, v150, 8uLL).u64[0];
              v159 = vextq_s8(v151, v151, 8uLL).u64[0];
              v160 = vextq_s8(v152, v152, 8uLL).u64[0];
              v163 = vextq_s8(v156, v156, 8uLL).u64[0];
              v164 = vextq_s8(v157, v157, 8uLL).u64[0];
              v165 = vextq_s8(v161, v161, 8uLL).u64[0];
              v167 = vextq_s8(v162, v162, 8uLL).u64[0];
              a3[2] = (float64x2_t)v260;
              a3[3] = (float64x2_t)v166;
              a3[4] = (float64x2_t)v162;
              a3[5] = (float64x2_t)v161;
              a3[6] = (float64x2_t)v157;
              a3[7] = (float64x2_t)v156;
              a3[8] = (float64x2_t)v152;
              a3[9] = (float64x2_t)v151;
              a3[10] = (float64x2_t)v150;
              a3[11] = (float64x2_t)v149;
              a3[12] = (float64x2_t)v148;
              a3[13] = (float64x2_t)v147;
              a3[14] = (float64x2_t)v146;
              a3[15] = (float64x2_t)v145;
              v142 += 6;
              v168 += 3;
              a3[16] = (float64x2_t)v144;
              a3[17] = (float64x2_t)v143;
              *a3 = (float64x2_t)v173;
              a3[1] = (float64x2_t)v172;
              v170 = vextq_s8(v166, v166, 8uLL).u64[0];
              v171 = vextq_s8(v169, v169, 8uLL).u64[0];
              v174 = vextq_s8(v172, v172, 8uLL).u64[0];
              v175 = vextq_s8(v173, v173, 8uLL).u64[0];
            }
            while (v142 != 36);
            break;
          case 2:
            v182 = v41[1].f64[0];
            v183 = vmulq_n_f64(*a3, v182);
            v184 = vmulq_n_f64(a3[1], v182);
            v185 = vmulq_n_f64(a3[2], v182);
            v186 = vmulq_n_f64(a3[3], v182);
            v187 = vmulq_n_f64(a3[4], v182);
            v188 = vmulq_n_f64(a3[5], v182);
            v189 = vmulq_n_f64(a3[6], v182);
            v190 = vmulq_n_f64(a3[7], v182);
            v191 = vmulq_n_f64(a3[8], v182);
            v192 = vmulq_n_f64(a3[9], v182);
            v193 = vmulq_n_f64(a3[10], v182);
            v194 = vmulq_n_f64(a3[11], v182);
            v195 = vmulq_n_f64(a3[12], v182);
            v196 = vmulq_n_f64(a3[13], v182);
            v197 = vmulq_n_f64(a3[14], v182);
            v198 = vmulq_n_f64(a3[15], v182);
            v199 = vmulq_n_f64(a3[16], v182);
            v200 = vmulq_n_f64(a3[17], v182);
            a3[16] = v199;
            a3[17] = v200;
            a3[14] = v197;
            a3[15] = v198;
            a3[12] = v195;
            a3[13] = v196;
            a3[10] = v193;
            a3[11] = v194;
            a3[8] = v191;
            a3[9] = v192;
            a3[6] = v189;
            a3[7] = v190;
            a3[4] = v187;
            a3[5] = v188;
            a3[2] = v185;
            a3[3] = v186;
            *a3 = v183;
            a3[1] = v184;
            break;
          case 4:
            v201 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v41->f64[0] + 56))(&v452, v41);
            MEMORY[0x24BDAC7A8](v201);
            memcpy(v250, a3, sizeof(v250));
            v256 = v456;
            v257 = *(float64x2_t *)&v453[16];
            v202 = v452;
            v203 = v454;
            v254 = v457;
            v255 = v459;
            v204 = v460;
            v205 = v462;
            v206 = v465;
            v207 = v463;
            v208 = v466;
            v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[0].f64[0]), v455, v250[0], 1), v458, v250[1].f64[0]), v461, v250[1], 1), v464, v250[2].f64[0]), v467, v250[2], 1);
            v210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[3].f64[0]), v454, v250[3], 1), v457, v250[4].f64[0]), v460, v250[4], 1), v463, v250[5].f64[0]), v466, v250[5], 1);
            v211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[3].f64[0]), v455, v250[3], 1), v458, v250[4].f64[0]), v461, v250[4], 1), v464, v250[5].f64[0]), v467, v250[5], 1);
            v212 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[6].f64[0]), v454, v250[6], 1), v457, v250[7].f64[0]), v460, v250[7], 1), v463, v250[8].f64[0]), v466, v250[8], 1);
            v213 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[6].f64[0]), v455, v250[6], 1), v458, v250[7].f64[0]), v461, v250[7], 1), v464, v250[8].f64[0]), v467, v250[8], 1);
            v214 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[9].f64[0]), v454, v250[9], 1), v457, v250[10].f64[0]), v460, v250[10], 1), v463, v250[11].f64[0]), v466, v250[11], 1);
            v215 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[9].f64[0]), v455, v250[9], 1), v458, v250[10].f64[0]), v461, v250[10], 1), v464, v250[11].f64[0]), v467, v250[11], 1);
            v216 = *(float64x2_t *)v453;
            v217 = v455;
            v218 = v458;
            v219 = v461;
            v220 = v464;
            v221 = v467;
            v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[0].f64[0]), v456, v250[0], 1), v459, v250[1].f64[0]), v462, v250[1], 1), v465, v250[2].f64[0]), v468, v250[2], 1);
            v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[3].f64[0]), v456, v250[3], 1), v459, v250[4].f64[0]), v462, v250[4], 1), v465, v250[5].f64[0]), v468, v250[5], 1);
            v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[6].f64[0]), v456, v250[6], 1), v459, v250[7].f64[0]), v462, v250[7], 1), v465, v250[8].f64[0]), v468, v250[8], 1);
            v225 = v250[12];
            v226 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[9].f64[0]), v456, v250[9], 1), v459, v250[10].f64[0]), v462, v250[10], 1), v465, v250[11].f64[0]), v468, v250[11], 1);
            *a3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[0].f64[0]), v454, v250[0], 1), v457, v250[1].f64[0]), v460, v250[1], 1), v463, v250[2].f64[0]), v466, v250[2], 1);
            a3[1] = v209;
            a3[6] = v212;
            a3[7] = v213;
            a3[2] = v222;
            a3[3] = v210;
            a3[4] = v211;
            a3[5] = v223;
            a3[8] = v224;
            a3[9] = v214;
            a3[10] = v215;
            a3[11] = v226;
            v227 = v250[12];
            v228 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v225.f64[0]), v203, v225, 1), v254, v250[13].f64[0]), v204, v250[13], 1);
            v229 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, v225.f64[0]), v217, v225, 1), v218, v250[13].f64[0]), v219, v250[13], 1);
            v230 = v250[14];
            v231 = v250[15];
            v232 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v250[15].f64[0]), v203, v250[15], 1), v254, v250[16].f64[0]), v204, v250[16], 1);
            v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, v250[15].f64[0]), v217, v250[15], 1), v218, v250[16].f64[0]), v219, v250[16], 1);
            v234 = v250[13];
            v235 = vmlaq_laneq_f64(vmlaq_n_f64(v229, v220, v250[14].f64[0]), v221, v250[14], 1);
            v236 = v250[16];
            v237 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v207, v250[17].f64[0]), v208, v250[17], 1);
            v238 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v220, v250[17].f64[0]), v221, v250[17], 1);
            a3[12] = vmlaq_laneq_f64(vmlaq_n_f64(v228, v207, v250[14].f64[0]), v208, v250[14], 1);
            a3[13] = v235;
            v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, v227.f64[0]), v256, v227, 1), v255, v234.f64[0]), v205, v234, 1);
            v240 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, v231.f64[0]), v256, v231, 1), v255, v236.f64[0]);
            v241 = v468;
            v242 = v250[17];
            a3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v239, v206, v230.f64[0]), v468, v230, 1);
            a3[15] = v237;
            a3[16] = v238;
            a3[17] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v240, v205, v236, 1), v206, v242.f64[0]), v241, v242, 1);
            break;
          default:
            break;
        }
      }
    }
    _Q1 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 152) = _Q1;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a1 + 216);
    _Q2 = *(_OWORD *)(a1 + 184);
    _D4 = *(_QWORD *)(a1 + 192);
    __asm { FMLA            D3, D4, V2.D[1] }
    *(_QWORD *)&_Q2 = *(_QWORD *)(a1 + 208);
    __asm { FMLA            D3, D2, V1.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(a1 + 224);
    __asm { FMLA            D3, D1, V0.D[1] }
    v141 = *(double *)(a2 + 8) * _D3;
  }
  else
  {
    *(_BYTE *)(a1 + 240) = 0;
    v141 = 0.0;
  }
  result = v4 != 0;
  *(double *)(a1 + 232) = v141;
  return result;
}

BOOL sub_20FAFE750(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  const double *v9;
  double v10;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v22;
  float64x2_t v23;
  double v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64_t v35;
  float64_t v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;
  uint64_t v40;
  float64x2_t *v41;
  void *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  double v141;
  uint64_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int8x16_t v156;
  int8x16_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  int8x16_t v166;
  unint64_t v167;
  float64x2_t *v168;
  int8x16_t v169;
  unint64_t v170;
  unint64_t v171;
  int8x16_t v172;
  int8x16_t v173;
  unint64_t v174;
  unint64_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64_t v180;
  float64_t v181;
  double v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  _QWORD *v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  _BOOL8 result;
  float64x2_t v250[18];
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  float64x2_t v450;
  uint64_t v451;
  float64x2_t v452;
  _BYTE v453[32];
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  uint64_t v469;
  float64x2x3_t v470;

  v469 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    v7 = a1 + 128;
    v8 = *(_QWORD *)(a1 + 128);
    v9 = (const double *)(a1 + 16);
    v470 = vld3q_f64(v9);
    v10 = *(double *)(a1 + 80);
    _Q4 = *(_OWORD *)(a1 + 64);
    v12 = *(double *)(v8 + 48);
    v13 = *(double *)(v8 + 72);
    v14 = *(double *)(v8 + 96);
    v15 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 32)), v470.val[1], *(float64x2_t *)(v8 + 32), 1), v470.val[2], v12);
    _D6 = *(_QWORD *)(v8 + 40);
    __asm { FMLA            D20, D6, V4.D[1] }
    v22 = _D20 + v10 * v12;
    v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 56)), v470.val[1], *(float64x2_t *)(v8 + 56), 1), v470.val[2], v13);
    _D16 = *(_QWORD *)(v8 + 64);
    __asm { FMLA            D20, D16, V4.D[1] }
    v26 = _D20 + v10 * v13;
    v27 = vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], *(double *)(v8 + 80)), v470.val[1], *(float64x2_t *)(v8 + 80), 1);
    _D18 = *(_QWORD *)(v8 + 88);
    __asm { FMLA            D20, D18, V4.D[1] }
    v452 = v15;
    *(double *)v453 = v22;
    *(double *)&v453[24] = v26;
    *(float64x2_t *)&v453[8] = v23;
    v455.f64[0] = _D20 + v10 * v14;
    v454 = vmlaq_n_f64(v27, v470.val[2], v14);
    v451 = 0;
    v450 = 0uLL;
    sub_20E9733B8(&v452, v450.f64);
    v30 = v450;
    *(_QWORD *)(a1 + 200) = v451;
    *(float64x2_t *)(a1 + 184) = v30;
    v30.f64[0] = *(float64_t *)(v8 + 120);
    v31.f64[0] = *(float64_t *)(a1 + 104);
    *(float64x2_t *)(a1 + 208) = vsubq_f64(*(float64x2_t *)(v8 + 104), *(float64x2_t *)(a1 + 88));
    *(_QWORD *)(a1 + 224) = *(_OWORD *)&vsubq_f64(v30, v31);
    v32 = *(float64x2_t **)(a1 + 112);
    v33 = vmulq_f64(*(float64x2_t *)(a1 + 216), v32[3]);
    v34 = vmulq_f64(*(float64x2_t *)(a1 + 200), v32[2]);
    *(float64x2_t *)(a1 + 184) = vmulq_f64(*(float64x2_t *)(a1 + 184), v32[1]);
    *(float64x2_t *)(a1 + 200) = v34;
    *(float64x2_t *)(a1 + 216) = v33;
    if (*(_BYTE *)(*(_QWORD *)v7 + 20))
    {
      v36 = v32[2].f64[0];
      v35 = v32[2].f64[1];
      v37 = v32[1].f64[1];
      v38 = v32[3].f64[0];
      v39 = v32[3].f64[1];
      a3->f64[0] = v32[1].f64[0];
      *(float64x2_t *)((char *)a3 + 8) = 0u;
      *(float64x2_t *)((char *)&a3[1] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[2] + 8) = 0u;
      a3[3].f64[1] = v37;
      a3[4] = 0u;
      a3[5] = 0u;
      a3[6] = 0u;
      a3[7].f64[0] = v36;
      *(float64x2_t *)((char *)&a3[7] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[8] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[9] + 8) = 0u;
      a3[10].f64[1] = v35;
      a3[11] = 0u;
      a3[12] = 0u;
      a3[13] = 0u;
      a3[14].f64[0] = v38;
      *(float64x2_t *)((char *)&a3[15] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[14] + 8) = 0u;
      *(float64x2_t *)((char *)&a3[16] + 8) = 0u;
      a3[17].f64[1] = v39;
    }
    *(_BYTE *)(a1 + 240) = 1;
    v40 = *(_QWORD *)(a1 + 248);
    if (v40)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 24))(v40, a1 + 184);
      v41 = *(float64x2_t **)(a1 + 248);
      v42 = (void *)(*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v41->f64[0] + 16))(v41);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 128) + 20))
      {
        switch((int)v42)
        {
          case 0:
            v43 = v41 + 1;
            if (&a3[18] > &v41[1] && &v41[19] > a3)
            {
              MEMORY[0x24BDAC7A8](v42);
              v42 = memcpy(v250, v43, sizeof(v250));
              v43 = v250;
            }
            MEMORY[0x24BDAC7A8](v42);
            v44 = &v250[-18];
            memcpy(&v250[-18], a3, 0x120uLL);
            v45 = v43[1];
            v47 = v43[3];
            v46 = v43[4];
            v49 = v43[6];
            v48 = v43[7];
            v51 = v43[9];
            v50 = v43[10];
            v52 = v250[-17];
            v53 = v250[-18];
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v44->f64[0]), v47, *v44, 1), v49, v52.f64[0]), v51, v52, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v44->f64[0]), v46, *v44, 1), v48, v52.f64[0]), v50, v52, 1);
            v57 = v250[-16];
            v56 = v250[-15];
            v59 = v56;
            v58 = v250[-14];
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v56.f64[0]), v47, v56, 1), v49, v58.f64[0]), v51, v58, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v56.f64[0]), v46, v56, 1), v48, v58.f64[0]), v50, v58, 1);
            v63 = v250[-13];
            v62 = v250[-12];
            v65 = v62;
            v64 = v250[-11];
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v62.f64[0]), v47, v62, 1), v49, v64.f64[0]), v51, v64, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v62.f64[0]), v46, v62, 1), v48, v64.f64[0]), v50, v64, 1);
            v69 = v250[-10];
            v68 = v250[-9];
            v70 = vmlaq_laneq_f64(vmulq_n_f64(*v43, v68.f64[0]), v47, v68, 1);
            v72 = v68;
            v71 = v250[-8];
            v73 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v49, v71.f64[0]), v51, v71, 1);
            v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v68.f64[0]), v46, v68, 1), v48, v71.f64[0]), v50, v71, 1);
            v76 = v43[12];
            v75 = v43[13];
            v78 = v43[15];
            v77 = v43[16];
            v79 = v57;
            v80 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v76, v79.f64[0]), v78, v79, 1);
            v81 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v75, v79.f64[0]), v77, v79, 1);
            v83 = v250[-14];
            v82 = v63;
            v84 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v76, v82.f64[0]), v78, v82, 1);
            v85 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v75, v82.f64[0]), v77, v82, 1);
            v87 = v250[-11];
            v86 = v69;
            v88 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v76, v86.f64[0]), v78, v86, 1);
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v75, v86.f64[0]), v77, v86, 1);
            v91 = v250[-8];
            v90 = v250[-7];
            *a3 = v80;
            a3[1] = v81;
            a3[3] = v84;
            a3[4] = v85;
            a3[6] = v88;
            a3[7] = v89;
            a3[9] = vmlaq_laneq_f64(vmlaq_n_f64(v73, v76, v90.f64[0]), v78, v90, 1);
            a3[10] = vmlaq_laneq_f64(vmlaq_n_f64(v74, v75, v90.f64[0]), v77, v90, 1);
            v92 = v43[2];
            v93 = v43[5];
            v94 = v43[8];
            v95 = v43[11];
            v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v53.f64[0]), v93, v53, 1), v94, v250[-17].f64[0]), v95, v250[-17], 1);
            v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v59.f64[0]), v93, v59, 1), v94, v83.f64[0]), v95, v83, 1);
            v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v65.f64[0]), v93, v65, 1), v94, v87.f64[0]), v95, v87, 1);
            v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v72.f64[0]), v93, v72, 1), v94, v91.f64[0]), v95, v91, 1);
            v100 = v43[14];
            v101 = v43[17];
            v102 = v250[-6];
            v103 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v100, v250[-7].f64[0]), v101, v250[-7], 1);
            a3[2] = vmlaq_laneq_f64(vmlaq_n_f64(v96, v100, v57.f64[0]), v101, v57, 1);
            a3[5] = vmlaq_laneq_f64(vmlaq_n_f64(v97, v100, v63.f64[0]), v101, v63, 1);
            a3[8] = vmlaq_laneq_f64(vmlaq_n_f64(v98, v100, v69.f64[0]), v101, v69, 1);
            a3[11] = v103;
            v104 = v43[1];
            v106 = v43[3];
            v105 = v43[4];
            v108 = v43[6];
            v107 = v43[7];
            v110 = v43[9];
            v109 = v43[10];
            v112 = v250[-6];
            v111 = v250[-5];
            v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v43, v102.f64[0]), v106, v102, 1), v108, v111.f64[0]), v110, v111, 1);
            v114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, v102.f64[0]), v105, v102, 1), v107, v111.f64[0]), v109, v111, 1);
            v116 = v250[-4];
            v115 = v250[-3];
            v117 = vmlaq_laneq_f64(vmulq_n_f64(*v43, v115.f64[0]), v106, v115, 1);
            v119 = v115;
            v118 = v250[-2];
            v120 = vmlaq_laneq_f64(vmlaq_n_f64(v117, v108, v118.f64[0]), v110, v118, 1);
            v121 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, v115.f64[0]), v105, v115, 1), v107, v118.f64[0]), v109, v118, 1);
            v123 = v43[12];
            v122 = v43[13];
            v125 = v43[15];
            v124 = v43[16];
            v127 = v250[-5];
            v126 = v116;
            v128 = vmlaq_laneq_f64(vmlaq_n_f64(v113, v123, v126.f64[0]), v125, v126, 1);
            v129 = vmlaq_laneq_f64(vmlaq_n_f64(v114, v122, v126.f64[0]), v124, v126, 1);
            v131 = v250[-2];
            v130 = v250[-1];
            a3[12] = v128;
            a3[13] = v129;
            a3[15] = vmlaq_laneq_f64(vmlaq_n_f64(v120, v123, v130.f64[0]), v125, v130, 1);
            a3[16] = vmlaq_laneq_f64(vmlaq_n_f64(v121, v122, v130.f64[0]), v124, v130, 1);
            v132 = v43[2];
            v133 = v43[5];
            v134 = v43[8];
            v135 = v43[11];
            v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v112.f64[0]), v133, v112, 1), v134, v127.f64[0]), v135, v127, 1);
            v137 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132, v119.f64[0]), v133, v119, 1), v134, v131.f64[0]), v135, v131, 1);
            v138 = v43[14];
            v139 = v43[17];
            v140 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v138, v250[-1].f64[0]), v139, v250[-1], 1);
            a3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v136, v138, v116.f64[0]), v139, v116, 1);
            a3[17] = v140;
            break;
          case 1:
            v142 = 0;
            v144 = (int8x16_t)a3[16];
            v143 = (int8x16_t)a3[17];
            v146 = (int8x16_t)a3[14];
            v145 = (int8x16_t)a3[15];
            v148 = (int8x16_t)a3[12];
            v147 = (int8x16_t)a3[13];
            v150 = (int8x16_t)a3[10];
            v149 = (int8x16_t)a3[11];
            v152 = (int8x16_t)a3[8];
            v151 = (int8x16_t)a3[9];
            v256 = (float64x2_t)vextq_s8(v144, v144, 8uLL);
            v257 = (float64x2_t)vextq_s8(v143, v143, 8uLL);
            v254 = (float64x2_t)vextq_s8(v146, v146, 8uLL);
            v255 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
            v153 = vextq_s8(v147, v147, 8uLL).u64[0];
            v154 = vextq_s8(v148, v148, 8uLL).u64[0];
            v155 = vextq_s8(v149, v149, 8uLL).u64[0];
            v157 = (int8x16_t)a3[6];
            v156 = (int8x16_t)a3[7];
            v158 = vextq_s8(v150, v150, 8uLL).u64[0];
            v159 = vextq_s8(v151, v151, 8uLL).u64[0];
            v160 = vextq_s8(v152, v152, 8uLL).u64[0];
            v162 = (int8x16_t)a3[4];
            v161 = (int8x16_t)a3[5];
            v163 = vextq_s8(v156, v156, 8uLL).u64[0];
            v164 = vextq_s8(v157, v157, 8uLL).u64[0];
            v165 = vextq_s8(v161, v161, 8uLL).u64[0];
            v166 = (int8x16_t)a3[3];
            v167 = vextq_s8(v162, v162, 8uLL).u64[0];
            v168 = a3 + 2;
            v169 = (int8x16_t)a3[2];
            v170 = vextq_s8(v166, v166, 8uLL).u64[0];
            v171 = vextq_s8(v169, v169, 8uLL).u64[0];
            v173 = *(int8x16_t *)a3;
            v172 = (int8x16_t)a3[1];
            v174 = vextq_s8(v172, v172, 8uLL).u64[0];
            v175 = vextq_s8(v173, v173, 8uLL).u64[0];
            do
            {
              v173.i64[1] = v175;
              v172.i64[1] = v174;
              v169.i64[1] = v171;
              v166.i64[1] = v170;
              v176 = v168[-1];
              v177 = v41[2];
              v178 = vmulq_f64(v168[-2], v41[1]);
              v253 = *v168;
              v179 = v41[3];
              v251 = v178;
              v252 = v179;
              v418 = v173;
              v419 = v172;
              v420 = v169;
              v421 = v166;
              v162.i64[1] = v167;
              v161.i64[1] = v165;
              v157.i64[1] = v164;
              v422 = v162;
              v423 = v161;
              v156.i64[1] = v163;
              v152.i64[1] = v160;
              v424 = v157;
              v425 = v156;
              v151.i64[1] = v159;
              v150.i64[1] = v158;
              v426 = v152;
              v427 = v151;
              v149.i64[1] = v155;
              v148.i64[1] = v154;
              v428 = v150;
              v429 = v149;
              v147.i64[1] = v153;
              v146.i64[1] = *(_QWORD *)&v254.f64[0];
              v430 = v148;
              v431 = v147;
              v145.i64[1] = *(_QWORD *)&v255.f64[0];
              v144.i64[1] = *(_QWORD *)&v256.f64[0];
              v432 = v146;
              v433 = v145;
              v143.i64[1] = *(_QWORD *)&v257.f64[0];
              v434 = v144;
              v435 = v143;
              v418.i64[v142 & 0x3F] = *(_QWORD *)&v178.f64[0];
              v257 = vmulq_f64(v176, v177);
              v417 = v449;
              v416 = v448;
              v415 = v447;
              v414 = v446;
              v413 = v445;
              v412 = v444;
              v411 = v443;
              v410 = v442;
              v409 = v441;
              v408 = v440;
              v407 = v439;
              v406 = v438;
              v405 = v437;
              v404 = v436;
              v403 = v435;
              v402 = v434;
              v401 = v433;
              v400 = v432;
              v399 = v431;
              v398 = v430;
              v397 = v429;
              v396 = v428;
              v395 = v427;
              v394 = v426;
              v393 = v425;
              v392 = v424;
              v391 = v423;
              v390 = v422;
              v389 = v421;
              v388 = v420;
              v387 = v419;
              v386 = v418;
              v386.i64[((_BYTE)v142 + 1) & 0x3F] = *(_QWORD *)&v251.f64[1];
              v385 = v417;
              v384 = v416;
              v383 = v415;
              v382 = v414;
              v381 = v413;
              v380 = v412;
              v379 = v411;
              v378 = v410;
              v377 = v409;
              v376 = v408;
              v375 = v407;
              v374 = v406;
              v373 = v405;
              v372 = v404;
              v371 = v403;
              v370 = v402;
              v369 = v401;
              v368 = v400;
              v367 = v399;
              v366 = v398;
              v365 = v397;
              v364 = v396;
              v363 = v395;
              v362 = v394;
              v361 = v393;
              v360 = v392;
              v359 = v391;
              v358 = v390;
              v357 = v389;
              v356 = v388;
              v355 = v387;
              v354 = v386;
              v180 = v257.f64[1];
              v354.i64[((_BYTE)v142 + 2) & 0x3F] = *(_QWORD *)&v257.f64[0];
              v256 = vmulq_f64(v253, v252);
              v353 = v385;
              v352 = v384;
              v351 = v383;
              v350 = v382;
              v349 = v381;
              v348 = v380;
              v347 = v379;
              v346 = v378;
              v345 = v377;
              v344 = v376;
              v343 = v375;
              v342 = v374;
              v341 = v373;
              v340 = v372;
              v339 = v371;
              v338 = v370;
              v337 = v369;
              v336 = v368;
              v335 = v367;
              v334 = v366;
              v333 = v365;
              v332 = v364;
              v331 = v363;
              v330 = v362;
              v329 = v361;
              v328 = v360;
              v327 = v359;
              v326 = v358;
              v325 = v357;
              v324 = v356;
              v323 = v355;
              v322 = v354;
              *(float64_t *)&v322.i64[((_BYTE)v142 + 3) & 0x3F] = v180;
              v321 = v353;
              v320 = v352;
              v319 = v351;
              v318 = v350;
              v317 = v349;
              v316 = v348;
              v314 = v346;
              v315 = v347;
              v312 = v344;
              v313 = v345;
              v310 = v342;
              v311 = v343;
              v308 = v340;
              v309 = v341;
              v306 = v338;
              v307 = v339;
              v304 = v336;
              v305 = v337;
              v302 = v334;
              v303 = v335;
              v300 = v332;
              v301 = v333;
              v298 = v330;
              v299 = v331;
              v296 = v328;
              v297 = v329;
              v294 = v326;
              v295 = v327;
              v292 = v324;
              v293 = v325;
              v290 = v322;
              v291 = v323;
              v181 = v256.f64[1];
              v290.i64[((_BYTE)v142 + 4) & 0x3F] = *(_QWORD *)&v256.f64[0];
              v288 = v320;
              v289 = v321;
              v286 = v318;
              v287 = v319;
              v284 = v316;
              v285 = v317;
              v282 = v314;
              v283 = v315;
              v280 = v312;
              v281 = v313;
              v278 = v310;
              v279 = v311;
              v276 = v308;
              v277 = v309;
              v274 = v306;
              v275 = v307;
              v272 = v304;
              v273 = v305;
              v270 = v302;
              v271 = v303;
              v268 = v300;
              v269 = v301;
              v266 = v298;
              v267 = v299;
              v264 = v296;
              v265 = v297;
              v262 = v294;
              v263 = v295;
              v260 = v292;
              v261 = v293;
              v259 = v291;
              v258 = v290;
              *(float64_t *)&v258.i64[((_BYTE)v142 + 5) & 0x3F] = v181;
              v144 = v274;
              v143 = v275;
              v146 = v272;
              v145 = v273;
              v148 = v270;
              v147 = v271;
              v150 = v268;
              v149 = v269;
              v152 = v266;
              v151 = v267;
              v157 = v264;
              v156 = v265;
              v162 = v262;
              v161 = v263;
              v169 = v260;
              v166 = v261;
              v173 = v258;
              v172 = v259;
              v257 = (float64x2_t)vextq_s8(v143, v143, 8uLL);
              v256 = (float64x2_t)vextq_s8(v144, v144, 8uLL);
              v255 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
              v254 = (float64x2_t)vextq_s8(v146, v146, 8uLL);
              v153 = vextq_s8(v147, v147, 8uLL).u64[0];
              v154 = vextq_s8(v148, v148, 8uLL).u64[0];
              v155 = vextq_s8(v149, v149, 8uLL).u64[0];
              v158 = vextq_s8(v150, v150, 8uLL).u64[0];
              v159 = vextq_s8(v151, v151, 8uLL).u64[0];
              v160 = vextq_s8(v152, v152, 8uLL).u64[0];
              v163 = vextq_s8(v156, v156, 8uLL).u64[0];
              v164 = vextq_s8(v157, v157, 8uLL).u64[0];
              v165 = vextq_s8(v161, v161, 8uLL).u64[0];
              v167 = vextq_s8(v162, v162, 8uLL).u64[0];
              a3[2] = (float64x2_t)v260;
              a3[3] = (float64x2_t)v166;
              a3[4] = (float64x2_t)v162;
              a3[5] = (float64x2_t)v161;
              a3[6] = (float64x2_t)v157;
              a3[7] = (float64x2_t)v156;
              a3[8] = (float64x2_t)v152;
              a3[9] = (float64x2_t)v151;
              a3[10] = (float64x2_t)v150;
              a3[11] = (float64x2_t)v149;
              a3[12] = (float64x2_t)v148;
              a3[13] = (float64x2_t)v147;
              a3[14] = (float64x2_t)v146;
              a3[15] = (float64x2_t)v145;
              v142 += 6;
              v168 += 3;
              a3[16] = (float64x2_t)v144;
              a3[17] = (float64x2_t)v143;
              *a3 = (float64x2_t)v173;
              a3[1] = (float64x2_t)v172;
              v170 = vextq_s8(v166, v166, 8uLL).u64[0];
              v171 = vextq_s8(v169, v169, 8uLL).u64[0];
              v174 = vextq_s8(v172, v172, 8uLL).u64[0];
              v175 = vextq_s8(v173, v173, 8uLL).u64[0];
            }
            while (v142 != 36);
            break;
          case 2:
            v182 = v41[1].f64[0];
            v183 = vmulq_n_f64(*a3, v182);
            v184 = vmulq_n_f64(a3[1], v182);
            v185 = vmulq_n_f64(a3[2], v182);
            v186 = vmulq_n_f64(a3[3], v182);
            v187 = vmulq_n_f64(a3[4], v182);
            v188 = vmulq_n_f64(a3[5], v182);
            v189 = vmulq_n_f64(a3[6], v182);
            v190 = vmulq_n_f64(a3[7], v182);
            v191 = vmulq_n_f64(a3[8], v182);
            v192 = vmulq_n_f64(a3[9], v182);
            v193 = vmulq_n_f64(a3[10], v182);
            v194 = vmulq_n_f64(a3[11], v182);
            v195 = vmulq_n_f64(a3[12], v182);
            v196 = vmulq_n_f64(a3[13], v182);
            v197 = vmulq_n_f64(a3[14], v182);
            v198 = vmulq_n_f64(a3[15], v182);
            v199 = vmulq_n_f64(a3[16], v182);
            v200 = vmulq_n_f64(a3[17], v182);
            a3[16] = v199;
            a3[17] = v200;
            a3[14] = v197;
            a3[15] = v198;
            a3[12] = v195;
            a3[13] = v196;
            a3[10] = v193;
            a3[11] = v194;
            a3[8] = v191;
            a3[9] = v192;
            a3[6] = v189;
            a3[7] = v190;
            a3[4] = v187;
            a3[5] = v188;
            a3[2] = v185;
            a3[3] = v186;
            *a3 = v183;
            a3[1] = v184;
            break;
          case 4:
            v201 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v41->f64[0] + 56))(&v452, v41);
            MEMORY[0x24BDAC7A8](v201);
            memcpy(v250, a3, sizeof(v250));
            v256 = v456;
            v257 = *(float64x2_t *)&v453[16];
            v202 = v452;
            v203 = v454;
            v254 = v457;
            v255 = v459;
            v204 = v460;
            v205 = v462;
            v206 = v465;
            v207 = v463;
            v208 = v466;
            v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[0].f64[0]), v455, v250[0], 1), v458, v250[1].f64[0]), v461, v250[1], 1), v464, v250[2].f64[0]), v467, v250[2], 1);
            v210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[3].f64[0]), v454, v250[3], 1), v457, v250[4].f64[0]), v460, v250[4], 1), v463, v250[5].f64[0]), v466, v250[5], 1);
            v211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[3].f64[0]), v455, v250[3], 1), v458, v250[4].f64[0]), v461, v250[4], 1), v464, v250[5].f64[0]), v467, v250[5], 1);
            v212 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[6].f64[0]), v454, v250[6], 1), v457, v250[7].f64[0]), v460, v250[7], 1), v463, v250[8].f64[0]), v466, v250[8], 1);
            v213 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[6].f64[0]), v455, v250[6], 1), v458, v250[7].f64[0]), v461, v250[7], 1), v464, v250[8].f64[0]), v467, v250[8], 1);
            v214 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[9].f64[0]), v454, v250[9], 1), v457, v250[10].f64[0]), v460, v250[10], 1), v463, v250[11].f64[0]), v466, v250[11], 1);
            v215 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v453, v250[9].f64[0]), v455, v250[9], 1), v458, v250[10].f64[0]), v461, v250[10], 1), v464, v250[11].f64[0]), v467, v250[11], 1);
            v216 = *(float64x2_t *)v453;
            v217 = v455;
            v218 = v458;
            v219 = v461;
            v220 = v464;
            v221 = v467;
            v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[0].f64[0]), v456, v250[0], 1), v459, v250[1].f64[0]), v462, v250[1], 1), v465, v250[2].f64[0]), v468, v250[2], 1);
            v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[3].f64[0]), v456, v250[3], 1), v459, v250[4].f64[0]), v462, v250[4], 1), v465, v250[5].f64[0]), v468, v250[5], 1);
            v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[6].f64[0]), v456, v250[6], 1), v459, v250[7].f64[0]), v462, v250[7], 1), v465, v250[8].f64[0]), v468, v250[8], 1);
            v225 = v250[12];
            v226 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v453[16], v250[9].f64[0]), v456, v250[9], 1), v459, v250[10].f64[0]), v462, v250[10], 1), v465, v250[11].f64[0]), v468, v250[11], 1);
            *a3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v452, v250[0].f64[0]), v454, v250[0], 1), v457, v250[1].f64[0]), v460, v250[1], 1), v463, v250[2].f64[0]), v466, v250[2], 1);
            a3[1] = v209;
            a3[6] = v212;
            a3[7] = v213;
            a3[2] = v222;
            a3[3] = v210;
            a3[4] = v211;
            a3[5] = v223;
            a3[8] = v224;
            a3[9] = v214;
            a3[10] = v215;
            a3[11] = v226;
            v227 = v250[12];
            v228 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v225.f64[0]), v203, v225, 1), v254, v250[13].f64[0]), v204, v250[13], 1);
            v229 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, v225.f64[0]), v217, v225, 1), v218, v250[13].f64[0]), v219, v250[13], 1);
            v230 = v250[14];
            v231 = v250[15];
            v232 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v202, v250[15].f64[0]), v203, v250[15], 1), v254, v250[16].f64[0]), v204, v250[16], 1);
            v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v216, v250[15].f64[0]), v217, v250[15], 1), v218, v250[16].f64[0]), v219, v250[16], 1);
            v234 = v250[13];
            v235 = vmlaq_laneq_f64(vmlaq_n_f64(v229, v220, v250[14].f64[0]), v221, v250[14], 1);
            v236 = v250[16];
            v237 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v207, v250[17].f64[0]), v208, v250[17], 1);
            v238 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v220, v250[17].f64[0]), v221, v250[17], 1);
            a3[12] = vmlaq_laneq_f64(vmlaq_n_f64(v228, v207, v250[14].f64[0]), v208, v250[14], 1);
            a3[13] = v235;
            v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, v227.f64[0]), v256, v227, 1), v255, v234.f64[0]), v205, v234, 1);
            v240 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v257, v231.f64[0]), v256, v231, 1), v255, v236.f64[0]);
            v241 = v468;
            v242 = v250[17];
            a3[14] = vmlaq_laneq_f64(vmlaq_n_f64(v239, v206, v230.f64[0]), v468, v230, 1);
            a3[15] = v237;
            a3[16] = v238;
            a3[17] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v240, v205, v236, 1), v206, v242.f64[0]), v241, v242, 1);
            break;
          default:
            break;
        }
      }
    }
    _Q1 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 152) = _Q1;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a1 + 216);
    _Q2 = *(_OWORD *)(a1 + 184);
    _D4 = *(_QWORD *)(a1 + 192);
    __asm { FMLA            D3, D4, V2.D[1] }
    *(_QWORD *)&_Q2 = *(_QWORD *)(a1 + 208);
    __asm { FMLA            D3, D2, V1.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(a1 + 224);
    __asm { FMLA            D3, D1, V0.D[1] }
    v141 = *(double *)(a2 + 8) * _D3;
  }
  else
  {
    *(_BYTE *)(a1 + 240) = 0;
    v141 = 0.0;
  }
  result = v4 != 0;
  *(double *)(a1 + 232) = v141;
  return result;
}

BOOL sub_20FAFF798(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(*a1 + 20) && *(_DWORD *)*a1 == -1)
    return 0;
  v1 = a1[1];
  if (*(_BYTE *)(v1 + 20))
  {
    if (*(_DWORD *)v1 == -1)
      return 0;
  }
  v2 = a1[2];
  if (*(_BYTE *)(v2 + 20))
  {
    if (*(_DWORD *)v2 == -1)
      return 0;
  }
  v3 = a1[3];
  if (*(_BYTE *)(v3 + 20))
  {
    if (*(_DWORD *)v3 == -1)
      return 0;
  }
  v4 = a1[4];
  if (*(_BYTE *)(v4 + 20))
  {
    if (*(_DWORD *)v4 == -1)
      return 0;
  }
  v5 = a1[5];
  if (*(_BYTE *)(v5 + 20))
  {
    if (*(_DWORD *)v5 == -1)
      return 0;
  }
  v6 = a1[6];
  if (*(_BYTE *)(v6 + 20))
  {
    if (*(_DWORD *)v6 == -1)
      return 0;
  }
  v7 = a1[7];
  if (*(_BYTE *)(v7 + 20))
  {
    if (*(_DWORD *)v7 == -1)
      return 0;
  }
  v8 = a1[8];
  if (*(_BYTE *)(v8 + 20))
  {
    if (*(_DWORD *)v8 == -1)
      return 0;
  }
  v9 = a1[9];
  return !*(_BYTE *)(v9 + 20) || *(_DWORD *)v9 != -1;
}

_QWORD *sub_20FAFF89C(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  unsigned int *v3;
  int v4;
  unsigned int *v5;
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  int v14;
  unsigned int *v15;
  int v16;
  unsigned int *v17;
  int v18;
  unsigned int *v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v3 = (unsigned int *)*result;
  v4 = *(unsigned __int8 *)(*result + 20);
  *(_BYTE *)a3 = v4;
  if (v4)
  {
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(*a2 + 4 * *v3);
    v5 = (unsigned int *)result[1];
    v6 = *((unsigned __int8 *)v5 + 20);
    *(_BYTE *)(a3 + 8) = v6;
    if (v6)
      goto LABEL_3;
  }
  else
  {
    *(_DWORD *)(a3 + 4) = -1;
    v5 = (unsigned int *)result[1];
    v23 = *((unsigned __int8 *)v5 + 20);
    *(_BYTE *)(a3 + 8) = v23;
    if (v23)
    {
LABEL_3:
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2[3] + 4 * *v5);
      v7 = (unsigned int *)result[2];
      v8 = *((unsigned __int8 *)v7 + 20);
      *(_BYTE *)(a3 + 16) = v8;
      if (v8)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  *(_DWORD *)(a3 + 12) = -1;
  v7 = (unsigned int *)result[2];
  v24 = *((unsigned __int8 *)v7 + 20);
  *(_BYTE *)(a3 + 16) = v24;
  if (v24)
  {
LABEL_4:
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(*a2 + 4 * *v7);
    v9 = (unsigned int *)result[3];
    v10 = *((unsigned __int8 *)v9 + 20);
    *(_BYTE *)(a3 + 24) = v10;
    if (v10)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  *(_DWORD *)(a3 + 20) = -1;
  v9 = (unsigned int *)result[3];
  v25 = *((unsigned __int8 *)v9 + 20);
  *(_BYTE *)(a3 + 24) = v25;
  if (v25)
  {
LABEL_5:
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(a2[3] + 4 * *v9);
    v11 = (unsigned int *)result[4];
    v12 = *((unsigned __int8 *)v11 + 20);
    *(_BYTE *)(a3 + 32) = v12;
    if (v12)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  *(_DWORD *)(a3 + 28) = -1;
  v11 = (unsigned int *)result[4];
  v26 = *((unsigned __int8 *)v11 + 20);
  *(_BYTE *)(a3 + 32) = v26;
  if (v26)
  {
LABEL_6:
    *(_DWORD *)(a3 + 36) = *(_DWORD *)(a2[15] + 4 * *v11);
    v13 = (unsigned int *)result[5];
    v14 = *((unsigned __int8 *)v13 + 20);
    *(_BYTE *)(a3 + 40) = v14;
    if (v14)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  *(_DWORD *)(a3 + 36) = -1;
  v13 = (unsigned int *)result[5];
  v27 = *((unsigned __int8 *)v13 + 20);
  *(_BYTE *)(a3 + 40) = v27;
  if (v27)
  {
LABEL_7:
    *(_DWORD *)(a3 + 44) = *(_DWORD *)(a2[15] + 4 * *v13);
    v15 = (unsigned int *)result[6];
    v16 = *((unsigned __int8 *)v15 + 20);
    *(_BYTE *)(a3 + 48) = v16;
    if (v16)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  *(_DWORD *)(a3 + 44) = -1;
  v15 = (unsigned int *)result[6];
  v28 = *((unsigned __int8 *)v15 + 20);
  *(_BYTE *)(a3 + 48) = v28;
  if (v28)
  {
LABEL_8:
    *(_DWORD *)(a3 + 52) = *(_DWORD *)(a2[18] + 4 * *v15);
    v17 = (unsigned int *)result[7];
    v18 = *((unsigned __int8 *)v17 + 20);
    *(_BYTE *)(a3 + 56) = v18;
    if (v18)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  *(_DWORD *)(a3 + 52) = -1;
  v17 = (unsigned int *)result[7];
  v29 = *((unsigned __int8 *)v17 + 20);
  *(_BYTE *)(a3 + 56) = v29;
  if (v29)
  {
LABEL_9:
    *(_DWORD *)(a3 + 60) = *(_DWORD *)(a2[18] + 4 * *v17);
    v19 = (unsigned int *)result[8];
    v20 = *((unsigned __int8 *)v19 + 20);
    *(_BYTE *)(a3 + 64) = v20;
    if (v20)
      goto LABEL_10;
LABEL_20:
    *(_DWORD *)(a3 + 68) = -1;
    v21 = (unsigned int *)result[9];
    v31 = *((unsigned __int8 *)v21 + 20);
    *(_BYTE *)(a3 + 72) = v31;
    if (v31)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_19:
  *(_DWORD *)(a3 + 60) = -1;
  v19 = (unsigned int *)result[8];
  v30 = *((unsigned __int8 *)v19 + 20);
  *(_BYTE *)(a3 + 64) = v30;
  if (!v30)
    goto LABEL_20;
LABEL_10:
  *(_DWORD *)(a3 + 68) = *(_DWORD *)(a2[18] + 4 * *v19);
  v21 = (unsigned int *)result[9];
  v22 = *((unsigned __int8 *)v21 + 20);
  *(_BYTE *)(a3 + 72) = v22;
  if (v22)
  {
LABEL_11:
    *(_DWORD *)(a3 + 76) = *(_DWORD *)(a2[18] + 4 * *v21);
    return result;
  }
LABEL_21:
  *(_DWORD *)(a3 + 76) = -1;
  return result;
}

#error "20FAFFAC4: too big function (funcsize=0)"

uint64_t sub_20FB18A98(uint64_t a1)
{
  uint64_t v1;
  int8x16_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int8x16_t **v11;
  int8x16_t *v12;
  float64x2_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  uint64_t v17;
  float64x2_t v18;
  _OWORD *v19;
  __int128 v20;
  int8x16_t *v21;
  int8x16_t *v22;
  float64x2_t *v23;
  float64x2_t *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  _QWORD *v31;
  double v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  unint64_t v51;
  int v52;
  float64x2_t *v53;
  unint64_t v54;
  unint64_t v55;
  int8x16_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  float64x2_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  float64x2_t v77;
  double v78;
  float64x2_t v80;
  float64_t v81;
  float64x2_t v84;
  float64x2_t v86;
  float64x2_t v88;
  float64x2_t v90;
  double v96;
  double v97;
  double v98;
  double v99;
  float64x2_t v100;
  float64_t v101;
  double v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v111;
  double v113;
  float64x2_t v114;
  float64x2_t v116;
  float64x2_t v119;
  uint64_t v120;
  float64x2_t v122;
  float64x2_t v124;
  float64x2_t v126;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v136;
  float64x2_t v137;
  double v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  uint64_t v167;
  double v168;
  double v169;
  double v170;
  float64x2_t v171;
  float64x2_t v172;
  double v173;
  double v174;
  float64x2_t v175;
  uint64_t v176;
  _BOOL4 v177;
  int8x16_t **v178;
  int v179;
  unint64_t v180;
  uint64_t v181;
  const char *v182;
  unint64_t v183;
  unsigned __int8 v184;
  const char *v185;
  size_t v186;
  const char *v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  size_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  NSObject *v196;
  std::__shared_weak_count *v197;
  unint64_t *p_shared_owners;
  unint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  float64x2_t v238;
  unint64_t v239;
  float64x2_t v240;
  unint64_t v241;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v248;
  int64x2_t v250;
  float64x2_t v251;
  double v252;
  float64_t v253;
  float64x2_t v254;
  float64x2_t v255;
  int64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  double v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  float64x2_t v285;
  double v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  float64x2_t *v292;
  float64x2_t v293;
  uint64_t v294;
  float64x2_t v295;
  float64x2_t v299;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v304;
  float64x2_t v305;
  int8x16_t v306;
  int8x16_t v307;
  unint64_t v309;
  int v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  size_t v316;
  const char *v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  uint64_t v398;
  double v399;
  int v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v404;
  uint64_t *v405;
  void *v406;
  void *v407;
  unsigned __int8 v408;
  const char *v409;
  size_t v410;
  _BYTE *v411;
  unint64_t v412;
  const char *v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _BYTE *v419;
  uint64_t v420;
  uint64_t v421;
  NSObject *v422;
  size_t v423;
  std::__shared_weak_count_vtbl *v424;
  std::__shared_weak_count *v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  float64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  void *v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  void *v454;
  float64_t v455;
  unint64_t *v456;
  unint64_t v457;
  unsigned __int8 v458;
  float64_t v459;
  const char *v460;
  NSObject *v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  int8x16_t v468;
  float64x2_t v469;
  int v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t *v474;
  void *v475;
  void *v476;
  int v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t *v480;
  void *v481;
  void *v482;
  unsigned __int8 v483;
  float64_t v484;
  const char *v485;
  NSObject *v486;
  unsigned __int8 v487;
  float64_t v488;
  const char *v489;
  NSObject *v490;
  float64x2_t v491;
  int v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t *v495;
  void *v496;
  void *v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  int v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t *v508;
  void *v509;
  void *v510;
  unsigned __int8 v511;
  float64_t v512;
  const char *v513;
  NSObject *v514;
  unsigned __int8 v516;
  float64_t v517;
  const char *v518;
  NSObject *v519;
  float64x2_t v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  unsigned __int8 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  float64x2_t v655;
  __int128 v656;
  float64x2_t v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  float64x2_t v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  std::runtime_error *exception;
  const char *v755;
  uint64_t v756;
  __int128 v757;
  uint64_t v758;
  int64x2_t v759;
  int64x2_t v760;
  int64x2_t v761;
  int64x2_t v762;
  int64x2_t v763;
  int64x2_t v764;
  int64x2_t v765;
  int64x2_t v766;
  int64x2_t v767;
  int64x2_t v768;
  int64x2_t v769;
  int64x2_t v770;
  int64x2_t v771;
  int64x2_t v772;
  int64x2_t v773;
  int64x2_t v774;
  int64x2_t v775;
  int64x2_t v776;
  int64x2_t v777;
  int64x2_t v778;
  int64x2_t v779;
  int64x2_t v780;
  int64x2_t v781;
  int64x2_t v782;
  int64x2_t v783;
  int64x2_t v784;
  int64x2_t v785;
  int64x2_t v786;
  int64x2_t v787;
  __int128 v788;
  __int128 v789;
  int64x2_t v790;
  int64x2_t v791;
  int64x2_t v792;
  int64x2_t v793;
  int64x2_t v794;
  int64x2_t v795;
  __int128 v796;
  __int128 v797;
  int64x2_t v798;
  int64x2_t v799;
  __int128 v800;
  __int128 v801;
  int64x2_t v802;
  int64x2_t v803;
  __int128 v804;
  __int128 v805;
  int64x2_t v806;
  int64x2_t v807;
  __int128 v808;
  __int128 v809;
  int64x2_t v810;
  __int128 v811;
  int64x2_t v812;
  int64x2_t v813;
  int64x2_t v814;
  int64x2_t v815;
  __int128 v816;
  int64x2_t v817;
  __int128 v818;
  int64x2_t v819;
  __int128 v820;
  __int128 v821;
  char v822;
  unint64_t v823;
  int64x2_t v824;
  unint64_t v825;
  __int128 v826;
  unint64_t v827;
  int64x2_t v828;
  unint64_t v829;
  __int128 v830;
  uint64_t *v831;
  uint64_t *v832;
  float64_t v833;
  float64_t v834;
  float64_t v835;
  float64_t v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  __int128 v840;
  int8x16_t v841;
  double v842;
  int64x2_t v843;
  int8x16_t v844;
  __int128 v845;
  float64x2_t v846;
  __int128 v847;
  int8x16_t v848;
  int64x2_t v849;
  int8x16_t v850;
  int64x2_t v851;
  void *v852[2];
  const char *v853;
  void *v854[2];
  int8x16_t v855;
  uint64_t *v856;
  int v857[4];
  double v858;
  uint64_t v859;
  int64x2_t v860;
  double v861;
  unint64_t v862;
  __int128 v863;
  int v864[4];
  uint64_t v865;
  int v866[4];
  float64x2_t v867;
  int v868;
  int64x2_t v869;
  uint64_t v870;
  int8x16_t v871;
  double v872;
  uint64_t v873;
  double v874;
  double v875;
  uint64_t v876;
  int8x16_t v877;
  float64_t v878;
  int8x16_t v879;
  unint64_t v880;
  int8x16_t v881;
  float64_t v882;
  uint64_t v883;
  float64_t v884;
  float64x2_t v885;
  float64x2_t v886;
  uint64_t v887;
  float64x2_t v888;
  int8x16_t v889;
  int64x2_t v890;
  float64x2_t v891;
  int8x16_t v892;
  int64x2_t v893;
  float64x2_t v894;
  int8x16_t v895;
  float64x2_t v896;
  int64x2_t v897;
  int8x16_t v898;
  float64x2_t v899;
  float64_t v900;
  uint64_t v901[3];
  int v902;
  const char *v903;
  int v904;
  const char *v905;
  uint64_t v906;
  std::__shared_weak_count *v907;
  uint64_t v908;
  float64x2_t __src[113];
  float64x2_t v910;
  float64_t v911;
  int64x2_t v912;
  float64_t v913;
  float64x2_t v914;
  double v915;
  float64x2_t v916;
  _BYTE v917[32];
  float64x2_t v918;
  _BYTE v919[32];
  float64x2_t v920;
  float64x2_t v921;
  void *object;
  void *v923;
  size_t v924;
  unint64_t v925;
  char v926;
  void *__p[2];
  unint64_t v928;
  char v929;
  _BYTE __dst[1808];
  uint64_t v931;
  char v932;
  uint64_t v933;

  MEMORY[0x24BDAC7A8](a1);
  v933 = *MEMORY[0x24BDAC8D0];
  v7 = v1 + 3680;
  if (!*(_BYTE *)(v1 + 7681))
    return 0;
  v8 = v1;
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v9 = v5;
  v10 = v4;
  v11 = v2;
  v837 = v3;
  v12 = v2[1];
  *(_QWORD *)&v6 = (*v2)[3].i64[0];
  *(_OWORD *)v864 = v6;
  v850 = (*v2)[2];
  v861 = *(double *)&(*v2)[4].i64[1];
  *(int8x16_t *)v852 = *(int8x16_t *)((char *)*v2 + 56);
  v858 = *(double *)(*v2)[6].i64;
  v855 = (*v2)[5];
  v838 = (*v2)[7].i64[1];
  v841 = *(int8x16_t *)((char *)*v2 + 104);
  v874 = *(double *)v12[3].i64;
  v871 = v12[2];
  *(_QWORD *)&v13.f64[1] = v12[2].i64[1];
  *(_QWORD *)&v13.f64[0] = v12[4].i64[1];
  v867 = v13;
  v844 = *(int8x16_t *)((char *)v12 + 56);
  *(_QWORD *)&v13.f64[1] = v12[4].i64[0];
  *(_QWORD *)&v13.f64[0] = v12[6].i64[0];
  v846 = v13;
  v848 = v12[5];
  v14 = v2[2];
  v15 = v2[3];
  v883 = v14[3].i64[0];
  v877 = v14[2];
  *(_QWORD *)&v13.f64[1] = v14[2].i64[1];
  *(_QWORD *)&v13.f64[0] = v14[4].i64[1];
  v885 = v13;
  v879 = *(int8x16_t *)((char *)v14 + 56);
  v887 = v14[6].i64[0];
  v881 = v14[5];
  v836 = *(double *)&v14[7].i64[1];
  v892 = *(int8x16_t *)((char *)v14 + 104);
  v834 = *(double *)v15[3].i64;
  v895 = v15[2];
  v835 = *(double *)&v15[4].i64[1];
  v898 = *(int8x16_t *)((char *)v15 + 56);
  v833 = *(double *)v15[6].i64;
  v889 = v15[5];
  v16 = v2[4];
  v17 = v5[4];
  v18 = *(float64x2_t *)(v17 + 16);
  v920 = *(float64x2_t *)v17;
  v921 = v18;
  if (*(_BYTE *)(v1 + 56))
  {
    v19 = (_OWORD *)(v1 + 24);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(*(float64x2_t *)(v1 + 24)), (int32x4_t)vcgtzq_f64(*(float64x2_t *)(v1 + 40)))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/Propagator.h", 159, (uint64_t)"(noise.e() > 0.).all()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v20 = *(_OWORD *)(v8 + 40);
    *(_OWORD *)v17 = *v19;
    *(_OWORD *)(v17 + 16) = v20;
    v17 = v9[4];
  }
  v21 = v11[6];
  v22 = v11[7];
  v23 = (float64x2_t *)v11[8];
  v24 = (float64x2_t *)v11[9];
  *(int8x16_t *)__dst = v22[2];
  v25 = *(_OWORD *)__dst;
  v26 = v22[3].i64[0];
  *(_QWORD *)&__dst[16] = v26;
  __src[0] = v23[2];
  __src[1].f64[0] = v23[3].f64[0];
  v910 = v24[2];
  v911 = v24[3].f64[0];
  v27 = v21[3].i64[0];
  *(int8x16_t *)(v17 + 64) = v21[2];
  *(_QWORD *)(v17 + 80) = v27;
  *(_OWORD *)(v17 + 88) = v25;
  *(_QWORD *)(v17 + 104) = v26;
  *(float64x2_t *)(v17 + 112) = __src[0];
  *(float64_t *)(v17 + 128) = __src[1].f64[0];
  *(float64x2_t *)(v17 + 136) = v910;
  *(float64_t *)(v17 + 152) = v911;
  if ((!(*v11)[8].i8[0] || !v11[1][6].i8[8] || !v11[2][8].i8[0] || !v11[3][6].i8[8] || !v11[4][2].i8[8])
    && *(_BYTE *)(v7 + 3992))
  {
    *(_BYTE *)(v7 + 3992) = 0;
  }
  v28 = *(double *)v16[2].i64;
  v29 = *(double *)(v8 + 64) + v28;
  v30 = v28 + *(double *)(v8 + 72);
  v31 = (_QWORD *)v9[3];
  v32 = *(double *)v11[5][2].i64;
  sub_20FD33470(v31, (uint64_t)v9, v29, v30);
  v33 = *v9;
  if (v32 != 0.0)
  {
    v34 = v9;
    v35 = v10;
    v831 = v34;
    v36 = v34[1];
    if (v33 == v36)
    {
      v10 = v35;
      v9 = v34;
    }
    else
    {
      do
      {
        v37 = *(double *)v33 - v32;
        *(_QWORD *)&__src[0].f64[0] = sub_20FD33354(v31, v37);
        sub_210122B7C(v31 + 6, (uint64_t *)__src, (uint64_t)__dst, v37);
        v38 = *(_OWORD *)&__dst[32];
        *(_QWORD *)(v33 + 48) = *(_QWORD *)&__dst[48];
        *(_OWORD *)(v33 + 32) = v38;
        v33 += 56;
      }
      while (v33 != v36);
      v33 = *v831;
      v10 = v35;
      v9 = v831;
    }
  }
  v39 = v9[1];
  v40 = 0x6DB6DB6DB6DB6DB7 * ((v39 - v33) >> 3);
  if (v40 >= 2)
  {
    v41 = v33 + 56;
    if (*(double *)(v33 + 56) - *(double *)v33 < 0.0001)
    {
      if (v33 + 112 != v39)
      {
        v42 = v33 + 88;
        do
        {
          *(_QWORD *)(v42 - 32) = *(_QWORD *)(v42 + 24);
          *(_OWORD *)(v42 - 24) = *(_OWORD *)(v42 + 32);
          *(_QWORD *)(v42 - 8) = *(_QWORD *)(v42 + 48);
          *(_OWORD *)v42 = *(_OWORD *)(v42 + 56);
          *(_QWORD *)(v42 + 16) = *(_QWORD *)(v42 + 72);
          v43 = v42 + 80;
          v42 += 56;
          v41 += 56;
        }
        while (v43 != v39);
        v33 = *v9;
      }
      v9[1] = v41;
      v40 = 0x6DB6DB6DB6DB6DB7 * ((v41 - v33) >> 3);
      v39 = v41;
    }
    if (v40 >= 3)
    {
      v44 = v33 + 56 * v40;
      v46 = *(double *)(v44 - 112);
      v45 = v44 - 112;
      if (*(double *)(v39 - 56) - v46 < 0.0001)
      {
        if (v45 + 56 == v39)
        {
          v39 = v45;
        }
        else
        {
          v47 = 112 - v33;
          v48 = 56 * v40;
          do
          {
            v49 = v33 + v48;
            *(_QWORD *)(v49 - 112) = *(_QWORD *)(v33 + v48 - 56);
            *(_OWORD *)(v49 - 104) = *(_OWORD *)(v33 + v48 - 48);
            *(_QWORD *)(v49 - 88) = *(_QWORD *)(v33 + v48 - 32);
            *(_OWORD *)(v49 - 80) = *(_OWORD *)(v33 + v48 - 24);
            *(_QWORD *)(v49 - 64) = *(_QWORD *)(v33 + v48 - 8);
            v47 -= 56;
            v33 += 56;
          }
          while (v33 + v48 - 56 != v39);
          v33 = *v9;
          v39 = 56 * v40 - v47;
        }
        v9[1] = v39;
      }
    }
  }
  if (*(double *)v33 != v29 || *(double *)(v39 - 56) != v30)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(__dst, "IMU resampler");
    std::runtime_error::runtime_error(exception, (const std::string *)__dst);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24CA04F20;
    __cxa_throw(exception, (struct type_info *)&unk_24CA04F38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v50 = v850;
  v51 = vextq_s8(v50, v50, 8uLL).u64[0];
  v50.i64[1] = v51;
  v52 = v16[1].u8[4];
  v53 = (float64x2_t *)(v8 + 1880);
  v910 = (float64x2_t)v50;
  v54 = vextq_s8(*(int8x16_t *)v852, *(int8x16_t *)v852, 8uLL).u64[0];
  v55 = vextq_s8(v855, v855, 8uLL).u64[0];
  v56 = v841;
  v57 = vextq_s8(v871, v871, 8uLL).u64[0];
  v58 = vextq_s8(v844, v844, 8uLL).u64[0];
  v911 = *(double *)v864;
  v913 = v861;
  v59 = vextq_s8(v848, v848, 8uLL).u64[0];
  *(void **)&v60.f64[0] = v852[0];
  *(_QWORD *)&v60.f64[1] = v54;
  v912 = (int64x2_t)v60;
  *(_QWORD *)&v60.f64[0] = v855.i64[0];
  *(_QWORD *)&v60.f64[1] = v55;
  v914 = v60;
  v915 = v858;
  *(float64_t *)v917 = v867.f64[0];
  *(_QWORD *)&v60.f64[0] = v844.i64[0];
  *(_QWORD *)&v60.f64[1] = v58;
  v916 = v60;
  *(_QWORD *)&v60.f64[0] = v871.i64[0];
  *(_QWORD *)&v60.f64[1] = v57;
  *(float64x2_t *)&v917[8] = v60;
  *(double *)&v917[24] = v874;
  *(float64_t *)v919 = v846.f64[0];
  *(_QWORD *)&v60.f64[0] = v848.i64[0];
  *(_QWORD *)&v60.f64[1] = v59;
  v918 = v60;
  *(_QWORD *)&v919[24] = v838;
  v56.i64[1] = vextq_s8(v56, v56, 8uLL).u64[0];
  *(int8x16_t *)&v919[8] = v56;
  if (*(_BYTE *)(v7 + 4000) && *(_BYTE *)(v7 + 3992) && (!v52 || *(_BYTE *)(v7 + 2160)))
  {
    sub_20F4BA010((uint64_t)&v910, v9[4], v9);
    v61 = *(_QWORD *)(v8 + 16);
    *(_BYTE *)(v61 + 8) = *(_BYTE *)(v7 + 2176);
    memcpy((void *)(v61 + 16), (const void *)(v8 + 5864), 0x708uLL);
    memcpy((void *)(v8 + 1880), (const void *)(v8 + 3920), 0x708uLL);
    v62 = *(_OWORD *)(v8 + 5800);
    *(_OWORD *)(v8 + 3744) = *(_OWORD *)(v8 + 5784);
    *(_OWORD *)(v8 + 3760) = v62;
    *(_OWORD *)(v8 + 3776) = *(_OWORD *)(v8 + 5816);
    v63 = *(_OWORD *)(v8 + 5736);
    *(_OWORD *)(v8 + 3680) = *(_OWORD *)(v8 + 5720);
    *(_OWORD *)(v8 + 3696) = v63;
    v64 = *(_OWORD *)(v8 + 5768);
    *(_OWORD *)(v8 + 3712) = *(_OWORD *)(v8 + 5752);
    *(_QWORD *)(v8 + 3792) = *(_QWORD *)(v8 + 5832);
    *(_OWORD *)(v8 + 3728) = v64;
    goto LABEL_99;
  }
  v823 = v58;
  v825 = v59;
  v827 = v54;
  v829 = v55;
  v839 = v51;
  v842 = *(double *)&v57;
  bzero(__src, 0x708uLL);
  sub_20F4BAD38();
  if (v52)
  {
    v69 = *v9;
    v70 = v9[1];
    if (!*v9
      && v70
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v71 = v9[4];
    v72 = *(double *)(v71 + 72);
    v73 = *(double *)(v71 + 96);
    v74 = *(double *)(v71 + 104);
    v76 = *(double *)(v71 + 80);
    v75 = *(double *)(v71 + 88);
    v66.f64[0] = *(float64_t *)(v71 + 176);
    v77 = *(float64x2_t *)(v71 + 160);
    v78 = *(double *)(v71 + 200);
    _Q20 = *(float64x2_t *)(v71 + 184);
    _Q7.f64[0] = *(float64_t *)(v71 + 224);
    v80 = *(float64x2_t *)(v71 + 208);
    v81 = v66.f64[0] * v75 + v78 * v72;
    _Q24 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v77, *(double *)(v71 + 64)), (float64x2_t)0, _Q20), (float64x2_t)0, v80);
    _Q25 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v77, v75), _Q20, v72), (float64x2_t)0, v80);
    v84 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v77, v73), _Q20, v74), v80, v76);
    _Q18.f64[0] = v66.f64[0] * v73 + v78 * v74 + _Q7.f64[0] * v76;
    _Q23 = *(float64x2_t *)(v71 + 232);
    v86 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q23.f64[0]), _Q25, _Q23, 1);
    _Q21 = *(float64x2_t *)(v71 + 256);
    v88 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q21.f64[0]), _Q25, _Q21, 1);
    _Q22 = *(float64x2_t *)(v71 + 280);
    v90 = vmlaq_laneq_f64(vmulq_n_f64(_Q24, _Q22.f64[0]), _Q25, _Q22, 1);
    _D28 = v81 + _Q7.f64[0] * 0.0;
    __asm
    {
      FMLA            D24, D28, V23.D[1]
      FMLA            D25, D28, V21.D[1]
      FMLA            D26, D28, V22.D[1]
    }
    v96 = *(double *)(v71 + 120);
    v97 = *(double *)(v71 + 128);
    v99 = *(double *)(v71 + 136);
    v98 = *(double *)(v71 + 144);
    v100 = vmlaq_n_f64(vmulq_n_f64(v77, v99), _Q20, v96);
    v101 = v66.f64[0] * v99 + v78 * v96;
    v102 = *(double *)(v71 + 152);
    v103 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v77, *(double *)(v71 + 112)), (float64x2_t)0, _Q20), (float64x2_t)0, v80);
    v104 = vmlaq_f64(v100, (float64x2_t)0, v80);
    _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v77, v98), _Q20, v102), v80, v97);
    v66.f64[0] = v66.f64[0] * v98 + v78 * v102 + _Q7.f64[0] * v97;
    _Q7.f64[0] = v101 + _Q7.f64[0] * 0.0;
    v106 = vmlaq_laneq_f64(vmulq_n_f64(v103, _Q23.f64[0]), v104, _Q23, 1);
    __asm { FMLA            D20, D7, V23.D[1] }
    v107 = vmlaq_laneq_f64(vmulq_n_f64(v103, _Q21.f64[0]), v104, _Q21, 1);
    __asm { FMLA            D27, D7, V21.D[1] }
    v109 = vmlaq_laneq_f64(vmulq_n_f64(v103, _Q22.f64[0]), v104, _Q22, 1);
    __asm { FMLA            D16, D7, V22.D[1] }
    _Q7.f64[0] = *(float64_t *)(v71 + 248);
    v111 = vmlaq_n_f64(v86, v84, _Q7.f64[0]);
    _Q22.f64[0] = *(float64_t *)(v71 + 272);
    _Q5 = vmlaq_n_f64(v88, v84, _Q22.f64[0]);
    v113 = *(double *)(v71 + 296);
    v114 = vmlaq_n_f64(v90, v84, v113);
    _Q25.f64[0] = _Q25.f64[0] + _Q18.f64[0] * _Q22.f64[0];
    _Q18.f64[0] = _D26 + _Q18.f64[0] * v113;
    _Q17 = vmlaq_n_f64(v106, _Q19, _Q7.f64[0]);
    v116 = vmlaq_n_f64(v107, _Q19, _Q22.f64[0]);
    _Q20.f64[0] = _D27 + v66.f64[0] * _Q22.f64[0];
    _Q21 = vmlaq_n_f64(v109, _Q19, v113);
    v66.f64[0] = _D16 + v66.f64[0] * v113;
    _Q2 = *(float64x2_t *)(v69 + 8);
    v119 = vmlaq_laneq_f64(vmulq_n_f64(_Q17, _Q2.f64[0]), v116, _Q2, 1);
    __asm { FMLA            D19, D20, V2.D[1] }
    v120 = v69 + 8 * ((v70 - v69) >> 3);
    _Q22 = *(float64x2_t *)(v120 - 48);
    v122 = vmlaq_laneq_f64(vmulq_n_f64(_Q17, _Q22.f64[0]), v116, _Q22, 1);
    __asm { FMLA            D17, D20, V22.D[1] }
    _Q7.f64[0] = *(float64_t *)(v69 + 24);
    _Q16 = vmlaq_n_f64(v119, _Q21, _Q7.f64[0]);
    _Q7.f64[0] = _Q19.f64[0] + v66.f64[0] * _Q7.f64[0];
    _Q19.f64[0] = *(float64_t *)(v120 - 32);
    v124 = vmlaq_n_f64(v122, _Q21, _Q19.f64[0]);
    v66.f64[0] = _Q17.f64[0] + v66.f64[0] * _Q19.f64[0];
    _Q17 = *(float64x2_t *)(v69 + 32);
    v126 = vmlaq_laneq_f64(vmulq_n_f64(v111, _Q17.f64[0]), _Q5, _Q17, 1);
    __asm { FMLA            D20, D25, V17.D[1] }
    _Q17 = *(float64x2_t *)(v120 - 24);
    v128 = vmlaq_laneq_f64(vmulq_n_f64(v111, _Q17.f64[0]), _Q5, _Q17, 1);
    __asm { FMLA            D5, D25, V17.D[1] }
    _Q17.f64[0] = *(float64_t *)(v69 + 48);
    v129 = vmlaq_n_f64(v126, v114, _Q17.f64[0]);
    _Q20.f64[0] = _Q20.f64[0] + _Q18.f64[0] * _Q17.f64[0];
    _Q17.f64[0] = *(float64_t *)(v120 - 8);
    v130 = vmlaq_n_f64(v128, v114, _Q17.f64[0]);
    _Q17.f64[0] = _Q5.f64[0] + _Q18.f64[0] * _Q17.f64[0];
    _Q6 = vsubq_f64(v130, v918);
    *(_QWORD *)&_Q5.f64[1] = v912.i64[1];
    v132 = vmlaq_laneq_f64(vmulq_n_f64(v910, _Q6.f64[0]), (float64x2_t)v912, _Q6, 1);
    _Q18.f64[0] = v913;
    __asm { FMLA            D5, D18, V6.D[1] }
    _Q18.f64[0] = *(float64_t *)v919;
    _Q6.f64[0] = *(float64_t *)&v917[24];
    *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vsubq_f64(_Q17, _Q18);
    v133 = vmlaq_n_f64(v132, v914, _Q17.f64[0]);
    _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v915, _Q17.f64[0]);
    *(_QWORD *)&_Q17.f64[0] = v844.i64[0];
    *(_QWORD *)&_Q17.f64[1] = v823;
    _Q17 = vsubq_f64(_Q16, _Q17);
    *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vsubq_f64(_Q20, v846);
    *(_QWORD *)&_Q16.f64[0] = v848.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v825;
    _Q19 = vsubq_f64(v129, _Q16);
    *(_QWORD *)&_Q16.f64[0] = v850.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v839;
    v136 = vmulq_n_f64(_Q16, _Q19.f64[0]);
    *(void **)&_Q16.f64[0] = v852[0];
    *(_QWORD *)&_Q16.f64[1] = v827;
    v137 = vmlaq_laneq_f64(v136, _Q16, _Q19, 1);
    *(_QWORD *)&_Q16.f64[0] = v855.i64[0];
    *(_QWORD *)&_Q16.f64[1] = v829;
    _Q18 = vmlaq_n_f64(v137, _Q16, _Q20.f64[0]);
    _Q16.f64[1] = *(float64_t *)&v864[2];
    _Q21.f64[0] = v861;
    __asm { FMLA            D16, D21, V19.D[1] }
    _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v858, _Q20.f64[0]);
    _D27 = *(_QWORD *)(v8 + 2112);
    __asm { FMLA            D19, D27, V17.D[1] }
    *(_QWORD *)&v140 = *(_OWORD *)&vsubq_f64(_Q7, v867);
    v141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v53, _Q17.f64[0]), *(float64x2_t *)(v8 + 2000), _Q17, 1), *(float64x2_t *)(v8 + 2120), v140);
    v142 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1896), _Q17.f64[0]), *(float64x2_t *)(v8 + 2016), _Q17, 1), *(float64x2_t *)(v8 + 2136), v140);
    v143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1912), _Q17.f64[0]), *(float64x2_t *)(v8 + 2032), _Q17, 1), *(float64x2_t *)(v8 + 2152), v140);
    v144 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1928), _Q17.f64[0]), *(float64x2_t *)(v8 + 2048), _Q17, 1), *(float64x2_t *)(v8 + 2168), v140);
    v145 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1944), _Q17.f64[0]), *(float64x2_t *)(v8 + 2064), _Q17, 1), *(float64x2_t *)(v8 + 2184), v140);
    v146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1960), _Q17.f64[0]), *(float64x2_t *)(v8 + 2080), _Q17, 1), *(float64x2_t *)(v8 + 2200), v140);
    v147 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 1976), _Q17.f64[0]), *(float64x2_t *)(v8 + 2096), _Q17, 1), *(float64x2_t *)(v8 + 2216), v140);
    v148 = *(float64x2_t *)(v71 + 32);
    _Q17 = vsubq_f64(_Q18, v148);
    v150 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v141, (float64x2_t)0, *(float64x2_t *)(v8 + 2240)), (float64x2_t)0, *(float64x2_t *)(v8 + 2360)), (float64x2_t)0, *(float64x2_t *)(v8 + 2480)), *(float64x2_t *)(v8 + 2600), _Q17.f64[0]), *(float64x2_t *)(v8 + 2720), _Q17, 1);
    v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v142, (float64x2_t)0, *(float64x2_t *)(v8 + 2256)), (float64x2_t)0, *(float64x2_t *)(v8 + 2376)), (float64x2_t)0, *(float64x2_t *)(v8 + 2496)), *(float64x2_t *)(v8 + 2616), _Q17.f64[0]), *(float64x2_t *)(v8 + 2736), _Q17, 1);
    v152 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v143, (float64x2_t)0, *(float64x2_t *)(v8 + 2272)), (float64x2_t)0, *(float64x2_t *)(v8 + 2392)), (float64x2_t)0, *(float64x2_t *)(v8 + 2512)), *(float64x2_t *)(v8 + 2632), _Q17.f64[0]), *(float64x2_t *)(v8 + 2752), _Q17, 1);
    v153 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v144, (float64x2_t)0, *(float64x2_t *)(v8 + 2288)), (float64x2_t)0, *(float64x2_t *)(v8 + 2408)), (float64x2_t)0, *(float64x2_t *)(v8 + 2528)), *(float64x2_t *)(v8 + 2648), _Q17.f64[0]), *(float64x2_t *)(v8 + 2768), _Q17, 1);
    v154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v145, (float64x2_t)0, *(float64x2_t *)(v8 + 2304)), (float64x2_t)0, *(float64x2_t *)(v8 + 2424)), (float64x2_t)0, *(float64x2_t *)(v8 + 2544)), *(float64x2_t *)(v8 + 2664), _Q17.f64[0]), *(float64x2_t *)(v8 + 2784), _Q17, 1);
    v155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v146, (float64x2_t)0, *(float64x2_t *)(v8 + 2320)), (float64x2_t)0, *(float64x2_t *)(v8 + 2440)), (float64x2_t)0, *(float64x2_t *)(v8 + 2560)), *(float64x2_t *)(v8 + 2680), _Q17.f64[0]), *(float64x2_t *)(v8 + 2800), _Q17, 1);
    v156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v147, (float64x2_t)0, *(float64x2_t *)(v8 + 2336)), (float64x2_t)0, *(float64x2_t *)(v8 + 2456)), (float64x2_t)0, *(float64x2_t *)(v8 + 2576)), *(float64x2_t *)(v8 + 2696), _Q17.f64[0]), *(float64x2_t *)(v8 + 2816), _Q17, 1);
    _Q19.f64[0] = *(float64_t *)(v8 + 2832);
    __asm { FMLA            D18, D19, V17.D[1] }
    _Q17.f64[0] = *(float64_t *)(v71 + 48);
    *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vsubq_f64(_Q16, _Q17);
    v157 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v150, *(float64x2_t *)(v8 + 2840), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 2960)), (float64x2_t)0, *(float64x2_t *)(v8 + 3080)), (float64x2_t)0, *(float64x2_t *)(v8 + 3200)), *(float64x2_t *)(v8 + 3320), *(double *)v871.i64), *(float64x2_t *)(v8 + 3440), v842), *(float64x2_t *)(v8 + 3560), v874);
    v158 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v151, *(float64x2_t *)(v8 + 2856), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 2976)), (float64x2_t)0, *(float64x2_t *)(v8 + 3096)), (float64x2_t)0, *(float64x2_t *)(v8 + 3216)), *(float64x2_t *)(v8 + 3336), *(double *)v871.i64), *(float64x2_t *)(v8 + 3456), v842), *(float64x2_t *)(v8 + 3576), v874);
    v159 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v152, *(float64x2_t *)(v8 + 2872), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 2992)), (float64x2_t)0, *(float64x2_t *)(v8 + 3112)), (float64x2_t)0, *(float64x2_t *)(v8 + 3232)), *(float64x2_t *)(v8 + 3352), *(double *)v871.i64), *(float64x2_t *)(v8 + 3472), v842), *(float64x2_t *)(v8 + 3592), v874);
    v160 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v153, *(float64x2_t *)(v8 + 2888), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 3008)), (float64x2_t)0, *(float64x2_t *)(v8 + 3128)), (float64x2_t)0, *(float64x2_t *)(v8 + 3248)), *(float64x2_t *)(v8 + 3368), *(double *)v871.i64), *(float64x2_t *)(v8 + 3488), v842), *(float64x2_t *)(v8 + 3608), v874);
    v161 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v154, *(float64x2_t *)(v8 + 2904), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 3024)), (float64x2_t)0, *(float64x2_t *)(v8 + 3144)), (float64x2_t)0, *(float64x2_t *)(v8 + 3264)), *(float64x2_t *)(v8 + 3384), *(double *)v871.i64), *(float64x2_t *)(v8 + 3504), v842), *(float64x2_t *)(v8 + 3624), v874);
    v162 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v155, *(float64x2_t *)(v8 + 2920), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 3040)), (float64x2_t)0, *(float64x2_t *)(v8 + 3160)), (float64x2_t)0, *(float64x2_t *)(v8 + 3280)), *(float64x2_t *)(v8 + 3400), *(double *)v871.i64), *(float64x2_t *)(v8 + 3520), v842), *(float64x2_t *)(v8 + 3640), v874);
    v163 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(v156, *(float64x2_t *)(v8 + 2936), _Q16.f64[0]), (float64x2_t)0, *(float64x2_t *)(v8 + 3056)), (float64x2_t)0, *(float64x2_t *)(v8 + 3176)), (float64x2_t)0, *(float64x2_t *)(v8 + 3296)), *(float64x2_t *)(v8 + 3416), *(double *)v871.i64), *(float64x2_t *)(v8 + 3536), v842), *(float64x2_t *)(v8 + 3656), v874);
    v65.f64[0] = vmlad_n_f64(_Q18.f64[0], *(double *)(v8 + 2952), _Q16.f64[0])
               + *(double *)(v8 + 3072) * 0.0
               + *(double *)(v8 + 3192) * 0.0
               + *(double *)(v8 + 3312) * 0.0
               + *(double *)(v8 + 3432) * *(double *)v871.i64
               + *(double *)(v8 + 3552) * v842
               + *(double *)(v8 + 3672) * v874;
    _Q16.f64[1] = v916.f64[1];
    _Q16.f64[0] = *(float64_t *)v917;
    v164 = vsubq_f64(vsubq_f64(v124, v916), v157);
    v165 = vsubq_f64(vsubq_f64(v133, v148), v160);
    v166 = vsubq_f64(*(float64x2_t *)&v917[8], v163);
    *(float64x2_t *)(v7 + 80) = vsubq_f64((float64x2_t)0, v162);
    *(float64x2_t *)(v7 + 96) = v166;
    *(float64x2_t *)(v7 + 48) = v165;
    *(float64x2_t *)(v7 + 64) = vsubq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vsubq_f64(_Q5, _Q17), v161);
    *(float64x2_t *)(v7 + 16) = vsubq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vsubq_f64(v66, _Q16), v158);
    *(float64x2_t *)(v7 + 32) = vsubq_f64((float64x2_t)0, v159);
    *(float64x2_t *)v7 = v164;
    *(_QWORD *)(v7 + 112) = *(_OWORD *)&vsubq_f64(_Q6, v65);
  }
  v167 = *(_QWORD *)(v8 + 16);
  memcpy(__dst, __src, 0x708uLL);
  bzero((void *)(v167 + 24), 0x6F8uLL);
  *(_QWORD *)(v167 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 272) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 400) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 656) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 784) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 912) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 1040) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 1168) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 1296) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 1424) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 1552) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 1680) = 0x3FF0000000000000;
  *(_QWORD *)(v167 + 1808) = 0x3FF0000000000000;
  *(_BYTE *)(v167 + 8) = sub_20F4C04B8((float64x2_t *)(v167 + 16), (float64x2_t *)__dst, 0, 0, v168, v169, v170, v171, v172, v173, v174, v175);
  if (!*(_BYTE *)(*(_QWORD *)(v8 + 16) + 8))
  {
    v832 = v9;
    v176 = 0;
    do
    {
      v177 = (*(_QWORD *)&__src[0].f64[v176] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)&__src[0].f64[v176] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      _ZF = v176++ == 224;
    }
    while (!_ZF);
    if (!v177)
    {
      v755 = "IMU covariance contains NaNs. Time to die.";
      v756 = 468;
      goto LABEL_327;
    }
    v178 = v11;
    __dst[8] = 1;
    *(_QWORD *)__dst = &off_24CA00428;
    bzero(&__dst[24], 0x6F8uLL);
    *(_QWORD *)&__dst[16] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[144] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[272] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[400] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[528] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[656] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[784] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[912] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1040] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1168] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1296] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1424] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1552] = 0x3FF0000000000000;
    *(_QWORD *)&__dst[1680] = 0x3FF0000000000000;
    v931 = 0x3FF0000000000000;
    v932 = 1;
    sub_20F4CEBA4((uint64_t)__dst, __src);
    v822 = v52;
    if (!__dst[8])
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", 474, (uint64_t)"", 0, (uint64_t)"LP Noise model failed. Fallback noise failed also. Time to die.", 63, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    sub_20F9B2A4C(&v908);
    v872 = v29;
    v875 = v30;
    if (**(int **)(v908 + 56) > 5)
      goto LABEL_98;
    v179 = *(unsigned __int8 *)(v908 + 72);
    v180 = sub_20E8C31DC(v908, "OSLogSurrogateAppender", 1, 0);
    v181 = v180 + 16;
    if (!v180)
      v181 = 0;
    v865 = v181;
    v868 = v179;
    if (!v179 && !v180)
    {
LABEL_98:
      v869 = vzip1q_s64(*(int64x2_t *)&__dst[256], *(int64x2_t *)&__dst[376]);
      *(_QWORD *)&v200 = vdupq_laneq_s64(*(int64x2_t *)&__dst[256], 1).u64[0];
      *((_QWORD *)&v200 + 1) = *(_QWORD *)&__dst[384];
      *(_OWORD *)v866 = v200;
      v851 = vzip1q_s64(*(int64x2_t *)&__dst[496], *(int64x2_t *)&__dst[616]);
      *(_QWORD *)&v200 = vdupq_laneq_s64(*(int64x2_t *)&__dst[496], 1).u64[0];
      *((_QWORD *)&v200 + 1) = *(_QWORD *)&__dst[624];
      v863 = v200;
      v860 = vzip2q_s64(*(int64x2_t *)&__dst[16], *(int64x2_t *)&__dst[136]);
      v843 = vzip1q_s64(*(int64x2_t *)&__dst[736], *(int64x2_t *)&__dst[856]);
      *(_QWORD *)&v201 = vdupq_laneq_s64(*(int64x2_t *)&__dst[736], 1).u64[0];
      *((_QWORD *)&v201 + 1) = *(_QWORD *)&__dst[864];
      *(_OWORD *)v857 = v201;
      v828 = vzip1q_s64(*(int64x2_t *)&__dst[976], *(int64x2_t *)&__dst[1096]);
      *(_QWORD *)&v201 = vdupq_laneq_s64(*(int64x2_t *)&__dst[976], 1).u64[0];
      *((_QWORD *)&v201 + 1) = *(_QWORD *)&__dst[1104];
      *(_OWORD *)v854 = v201;
      v824 = vzip1q_s64(*(int64x2_t *)&__dst[1216], *(int64x2_t *)&__dst[1336]);
      *(_QWORD *)&v201 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1216], 1).u64[0];
      *((_QWORD *)&v201 + 1) = *(_QWORD *)&__dst[1344];
      v845 = v201;
      *(_QWORD *)&v201 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1456], 1).u64[0];
      *((_QWORD *)&v201 + 1) = *(_QWORD *)&__dst[1584];
      v840 = v201;
      v849 = vzip1q_s64(*(int64x2_t *)&__dst[272], *(int64x2_t *)&__dst[392]);
      *(_QWORD *)&v202 = vdupq_laneq_s64(*(int64x2_t *)&__dst[272], 1).u64[0];
      *((_QWORD *)&v202 + 1) = *(_QWORD *)&__dst[400];
      v847 = v202;
      *(_QWORD *)&v202 = vdupq_laneq_s64(*(int64x2_t *)&__dst[512], 1).u64[0];
      *((_QWORD *)&v202 + 1) = *(_QWORD *)&__dst[640];
      v830 = v202;
      v814 = vzip1q_s64(*(int64x2_t *)&__dst[752], *(int64x2_t *)&__dst[872]);
      v815 = vzip1q_s64(*(int64x2_t *)&__dst[1456], *(int64x2_t *)&__dst[1576]);
      *(_QWORD *)&v202 = vdupq_laneq_s64(*(int64x2_t *)&__dst[752], 1).u64[0];
      *((_QWORD *)&v202 + 1) = *(_QWORD *)&__dst[880];
      v826 = v202;
      v810 = vzip1q_s64(*(int64x2_t *)&__dst[992], *(int64x2_t *)&__dst[1112]);
      *(_QWORD *)&v202 = vdupq_laneq_s64(*(int64x2_t *)&__dst[992], 1).u64[0];
      *((_QWORD *)&v202 + 1) = *(_QWORD *)&__dst[1120];
      v821 = v202;
      v799 = vzip1q_s64(*(int64x2_t *)&__dst[32], *(int64x2_t *)&__dst[152]);
      v812 = vzip1q_s64(*(int64x2_t *)&__dst[512], *(int64x2_t *)&__dst[632]);
      v813 = vzip2q_s64(*(int64x2_t *)&__dst[32], *(int64x2_t *)&__dst[152]);
      *(_QWORD *)&v203 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1232], 1).u64[0];
      *((_QWORD *)&v203 + 1) = *(_QWORD *)&__dst[1360];
      v816 = v203;
      v806 = vzip1q_s64(*(int64x2_t *)&__dst[1472], *(int64x2_t *)&__dst[1592]);
      v807 = vzip1q_s64(*(int64x2_t *)&__dst[1232], *(int64x2_t *)&__dst[1352]);
      *(_QWORD *)&v203 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1472], 1).u64[0];
      *((_QWORD *)&v203 + 1) = *(_QWORD *)&__dst[1600];
      v818 = v203;
      *(_QWORD *)&v203 = vdupq_laneq_s64(*(int64x2_t *)&__dst[288], 1).u64[0];
      *((_QWORD *)&v203 + 1) = *(_QWORD *)&__dst[416];
      v819 = vzip1q_s64(*(int64x2_t *)&__dst[288], *(int64x2_t *)&__dst[408]);
      v820 = v203;
      v817 = vzip2q_s64(*(int64x2_t *)&__dst[48], *(int64x2_t *)&__dst[168]);
      v802 = vzip1q_s64(*(int64x2_t *)&__dst[528], *(int64x2_t *)&__dst[648]);
      v803 = vzip1q_s64(*(int64x2_t *)&__dst[48], *(int64x2_t *)&__dst[168]);
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[528], 1).u64[0];
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[656];
      v811 = v204;
      *(_QWORD *)&v205 = vdupq_laneq_s64(*(int64x2_t *)&__dst[768], 1).u64[0];
      v798 = vzip1q_s64(*(int64x2_t *)&__dst[768], *(int64x2_t *)&__dst[888]);
      *((_QWORD *)&v205 + 1) = *(_QWORD *)&__dst[896];
      v809 = v205;
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1008], 1).u64[0];
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[1136];
      v805 = v204;
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1248], 1).u64[0];
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[1376];
      v801 = v204;
      v787 = vzip1q_s64(*(int64x2_t *)&__dst[1488], *(int64x2_t *)&__dst[1608]);
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1488], 1).u64[0];
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[1616];
      v795 = vzip1q_s64(*(int64x2_t *)&__dst[1008], *(int64x2_t *)&__dst[1128]);
      v796 = v204;
      *(_QWORD *)&v205 = vdupq_laneq_s64(*(int64x2_t *)&__dst[304], 1).u64[0];
      *((_QWORD *)&v205 + 1) = *(_QWORD *)&__dst[432];
      v808 = v205;
      v791 = vzip1q_s64(*(int64x2_t *)&__dst[1248], *(int64x2_t *)&__dst[1368]);
      v792 = vzip1q_s64(*(int64x2_t *)&__dst[304], *(int64x2_t *)&__dst[424]);
      v790 = vzip1q_s64(*(int64x2_t *)&__dst[544], *(int64x2_t *)&__dst[664]);
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[544], 1).u64[0];
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[672];
      v804 = v204;
      *(_QWORD *)&v205 = vdupq_laneq_s64(*(int64x2_t *)&__dst[784], 1).u64[0];
      *((_QWORD *)&v205 + 1) = *(_QWORD *)&__dst[912];
      v800 = v205;
      v794 = vzip2q_s64(*(int64x2_t *)&__dst[64], *(int64x2_t *)&__dst[184]);
      v785 = vzip1q_s64(*(int64x2_t *)&__dst[1024], *(int64x2_t *)&__dst[1144]);
      v786 = vzip1q_s64(*(int64x2_t *)&__dst[784], *(int64x2_t *)&__dst[904]);
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1024], 1).u64[0];
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[1152];
      v788 = v204;
      *(_QWORD *)&v206 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1264], 1).u64[0];
      v781 = vzip1q_s64(*(int64x2_t *)&__dst[1264], *(int64x2_t *)&__dst[1384]);
      v782 = vzip1q_s64(*(int64x2_t *)&__dst[64], *(int64x2_t *)&__dst[184]);
      *((_QWORD *)&v206 + 1) = *(_QWORD *)&__dst[1392];
      v780 = vzip1q_s64(*(int64x2_t *)&__dst[1504], *(int64x2_t *)&__dst[1624]);
      *(_QWORD *)&v207 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1504], 1).u64[0];
      *((_QWORD *)&v207 + 1) = *(_QWORD *)&__dst[1632];
      v793 = vzip1q_s64(*(int64x2_t *)&__dst[320], *(int64x2_t *)&__dst[440]);
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[320], 1).u64[0];
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[448];
      v797 = v204;
      v783 = vzip1q_s64(*(int64x2_t *)&__dst[560], *(int64x2_t *)&__dst[680]);
      *(_QWORD *)&v204 = vdupq_laneq_s64(*(int64x2_t *)&__dst[560], 1).u64[0];
      *((_QWORD *)&v204 + 1) = *(_QWORD *)&__dst[688];
      v789 = v204;
      *(_QWORD *)&v208 = vdupq_laneq_s64(*(int64x2_t *)&__dst[800], 1).u64[0];
      *((_QWORD *)&v208 + 1) = *(_QWORD *)&__dst[928];
      v778 = vzip1q_s64(*(int64x2_t *)&__dst[1040], *(int64x2_t *)&__dst[1160]);
      v779 = vzip1q_s64(*(int64x2_t *)&__dst[800], *(int64x2_t *)&__dst[920]);
      *(_QWORD *)&v209 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1040], 1).u64[0];
      *((_QWORD *)&v209 + 1) = *(_QWORD *)&__dst[1168];
      *(_QWORD *)&v210 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1280], 1).u64[0];
      *((_QWORD *)&v210 + 1) = *(_QWORD *)&__dst[1408];
      v767 = vzip1q_s64(*(int64x2_t *)&__dst[80], *(int64x2_t *)&__dst[200]);
      v777 = vzip2q_s64(*(int64x2_t *)&__dst[80], *(int64x2_t *)&__dst[200]);
      *(_QWORD *)&v211 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1520], 1).u64[0];
      *((_QWORD *)&v211 + 1) = *(_QWORD *)&__dst[1648];
      *(_QWORD *)&v212 = vdupq_laneq_s64(*(int64x2_t *)&__dst[336], 1).u64[0];
      v775 = vzip1q_s64(*(int64x2_t *)&__dst[1280], *(int64x2_t *)&__dst[1400]);
      v776 = vzip1q_s64(*(int64x2_t *)&__dst[336], *(int64x2_t *)&__dst[456]);
      *((_QWORD *)&v212 + 1) = *(_QWORD *)&__dst[464];
      v774 = vzip1q_s64(*(int64x2_t *)&__dst[96], *(int64x2_t *)&__dst[216]);
      v784 = vzip2q_s64(*(int64x2_t *)&__dst[96], *(int64x2_t *)&__dst[216]);
      v772 = vzip1q_s64(*(int64x2_t *)&__dst[1520], *(int64x2_t *)&__dst[1640]);
      v773 = vzip1q_s64(*(int64x2_t *)&__dst[576], *(int64x2_t *)&__dst[696]);
      *(_QWORD *)&v213 = vdupq_laneq_s64(*(int64x2_t *)&__dst[576], 1).u64[0];
      *((_QWORD *)&v213 + 1) = *(_QWORD *)&__dst[704];
      *(_QWORD *)&v214 = vdupq_laneq_s64(*(int64x2_t *)&__dst[816], 1).u64[0];
      v771 = vzip1q_s64(*(int64x2_t *)&__dst[816], *(int64x2_t *)&__dst[936]);
      *((_QWORD *)&v214 + 1) = *(_QWORD *)&__dst[944];
      *(_QWORD *)&v215 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1056], 1).u64[0];
      *((_QWORD *)&v215 + 1) = *(_QWORD *)&__dst[1184];
      *(_QWORD *)&v216 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1296], 1).u64[0];
      *((_QWORD *)&v216 + 1) = *(_QWORD *)&__dst[1424];
      *(_QWORD *)&v217 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1536], 1).u64[0];
      *((_QWORD *)&v217 + 1) = *(_QWORD *)&__dst[1664];
      *(_QWORD *)&v218 = vdupq_laneq_s64(*(int64x2_t *)&__dst[352], 1).u64[0];
      *((_QWORD *)&v218 + 1) = *(_QWORD *)&__dst[480];
      v768 = vzip1q_s64(*(int64x2_t *)&__dst[352], *(int64x2_t *)&__dst[472]);
      v769 = vzip1q_s64(*(int64x2_t *)&__dst[1056], *(int64x2_t *)&__dst[1176]);
      v765 = vzip1q_s64(*(int64x2_t *)&__dst[1296], *(int64x2_t *)&__dst[1416]);
      v766 = vzip1q_s64(*(int64x2_t *)&__dst[592], *(int64x2_t *)&__dst[712]);
      *(_QWORD *)&v219 = vdupq_laneq_s64(*(int64x2_t *)&__dst[592], 1).u64[0];
      *((_QWORD *)&v219 + 1) = *(_QWORD *)&__dst[720];
      *(_QWORD *)&v220 = vdupq_laneq_s64(*(int64x2_t *)&__dst[832], 1).u64[0];
      v763 = vzip1q_s64(*(int64x2_t *)&__dst[1536], *(int64x2_t *)&__dst[1656]);
      v764 = vzip1q_s64(*(int64x2_t *)&__dst[832], *(int64x2_t *)&__dst[952]);
      *((_QWORD *)&v220 + 1) = *(_QWORD *)&__dst[960];
      v770 = vzip2q_s64(*(int64x2_t *)&__dst[112], *(int64x2_t *)&__dst[232]);
      v761 = vzip1q_s64(*(int64x2_t *)&__dst[112], *(int64x2_t *)&__dst[232]);
      v762 = vzip1q_s64(*(int64x2_t *)&__dst[1072], *(int64x2_t *)&__dst[1192]);
      *(_QWORD *)&v221 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1072], 1).u64[0];
      *((_QWORD *)&v221 + 1) = *(_QWORD *)&__dst[1200];
      *(_QWORD *)&v222 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1312], 1).u64[0];
      *((_QWORD *)&v222 + 1) = *(_QWORD *)&__dst[1440];
      v759 = vzip1q_s64(*(int64x2_t *)&__dst[1552], *(int64x2_t *)&__dst[1672]);
      v760 = vzip1q_s64(*(int64x2_t *)&__dst[1312], *(int64x2_t *)&__dst[1432]);
      *(_QWORD *)&v223 = vdupq_laneq_s64(*(int64x2_t *)&__dst[1552], 1).u64[0];
      *((_QWORD *)&v223 + 1) = *(_QWORD *)&__dst[1680];
      v224 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)&v200 = *(_QWORD *)&__dst[128];
      *((_QWORD *)&v200 + 1) = *(_QWORD *)&__dst[248];
      *(_QWORD *)&v225 = *(_QWORD *)&__dst[368];
      *((_QWORD *)&v225 + 1) = *(_QWORD *)&__dst[488];
      *(_QWORD *)&v226 = *(_QWORD *)&__dst[608];
      *((_QWORD *)&v226 + 1) = *(_QWORD *)&__dst[728];
      *(_QWORD *)&v227 = *(_QWORD *)&__dst[848];
      *((_QWORD *)&v227 + 1) = *(_QWORD *)&__dst[968];
      *(_QWORD *)&v228 = *(_QWORD *)&__dst[1088];
      *((_QWORD *)&v228 + 1) = *(_QWORD *)&__dst[1208];
      *(_QWORD *)&v201 = *(_QWORD *)&__dst[1328];
      *((_QWORD *)&v201 + 1) = *(_QWORD *)&__dst[1448];
      *(_QWORD *)&v202 = *(_QWORD *)&__dst[1568];
      *((_QWORD *)&v202 + 1) = *(_QWORD *)&__dst[1688];
      v758 = v931;
      v757 = *(_OWORD *)&__dst[1792];
      v229 = *(_OWORD *)&__dst[1776];
      v230 = *(_OWORD *)&__dst[1760];
      v231 = *(_OWORD *)&__dst[1744];
      v232 = *(_OWORD *)&__dst[1728];
      v233 = *(_OWORD *)&__dst[1712];
      v234 = *(_OWORD *)&__dst[1696];
      *(int64x2_t *)(v224 + 16) = vzip1q_s64(*(int64x2_t *)&__dst[16], *(int64x2_t *)&__dst[136]);
      *(int64x2_t *)(v224 + 32) = v869;
      *(int64x2_t *)(v224 + 48) = v851;
      *(int64x2_t *)(v224 + 64) = v843;
      *(int64x2_t *)(v224 + 80) = v828;
      *(int64x2_t *)(v224 + 96) = v824;
      *(int64x2_t *)(v224 + 112) = v815;
      *(int64x2_t *)(v224 + 136) = v860;
      *(_OWORD *)(v224 + 152) = *(_OWORD *)v866;
      *(_OWORD *)(v224 + 168) = v863;
      *(_OWORD *)(v224 + 184) = *(_OWORD *)v857;
      *(_OWORD *)(v224 + 200) = *(_OWORD *)v854;
      *(_OWORD *)(v224 + 216) = v845;
      *(_OWORD *)(v224 + 232) = v840;
      *(_QWORD *)(v224 + 128) = v234;
      *(_QWORD *)(v224 + 248) = *((_QWORD *)&v234 + 1);
      *(int64x2_t *)(v224 + 256) = v799;
      *(int64x2_t *)(v224 + 272) = v849;
      *(int64x2_t *)(v224 + 288) = v812;
      *(int64x2_t *)(v224 + 304) = v814;
      *(int64x2_t *)(v224 + 320) = v810;
      *(int64x2_t *)(v224 + 336) = v807;
      *(int64x2_t *)(v224 + 352) = v806;
      *(int64x2_t *)(v224 + 376) = v813;
      *(_OWORD *)(v224 + 392) = v847;
      *(_OWORD *)(v224 + 408) = v830;
      *(_OWORD *)(v224 + 424) = v826;
      *(_OWORD *)(v224 + 440) = v821;
      *(_OWORD *)(v224 + 456) = v816;
      *(_QWORD *)(v224 + 368) = v233;
      *(_QWORD *)(v224 + 488) = *((_QWORD *)&v233 + 1);
      *(_OWORD *)(v224 + 472) = v818;
      *(int64x2_t *)(v224 + 496) = v803;
      *(int64x2_t *)(v224 + 512) = v819;
      *(int64x2_t *)(v224 + 528) = v802;
      *(int64x2_t *)(v224 + 544) = v798;
      *(int64x2_t *)(v224 + 560) = v795;
      *(int64x2_t *)(v224 + 576) = v791;
      *(int64x2_t *)(v224 + 592) = v787;
      *(int64x2_t *)(v224 + 616) = v817;
      *(_OWORD *)(v224 + 632) = v820;
      *(_OWORD *)(v224 + 648) = v811;
      *(_OWORD *)(v224 + 664) = v809;
      *(_OWORD *)(v224 + 680) = v805;
      *(_OWORD *)(v224 + 696) = v801;
      *(_OWORD *)(v224 + 712) = v796;
      *(_QWORD *)(v224 + 608) = v232;
      *(_QWORD *)(v224 + 728) = *((_QWORD *)&v232 + 1);
      *(int64x2_t *)(v224 + 736) = v782;
      *(int64x2_t *)(v224 + 752) = v792;
      *(int64x2_t *)(v224 + 768) = v790;
      *(int64x2_t *)(v224 + 784) = v786;
      *(int64x2_t *)(v224 + 800) = v785;
      *(int64x2_t *)(v224 + 816) = v781;
      *(int64x2_t *)(v224 + 832) = v780;
      *(int64x2_t *)(v224 + 856) = v794;
      *(_OWORD *)(v224 + 872) = v808;
      *(_OWORD *)(v224 + 888) = v804;
      *(_OWORD *)(v224 + 904) = v800;
      *(_OWORD *)(v224 + 920) = v788;
      *(_OWORD *)(v224 + 936) = v206;
      *(_OWORD *)(v224 + 952) = v207;
      *(_QWORD *)(v224 + 848) = v231;
      *(_QWORD *)(v224 + 968) = *((_QWORD *)&v231 + 1);
      *(int64x2_t *)(v224 + 976) = v767;
      *(int64x2_t *)(v224 + 992) = v793;
      *(int64x2_t *)(v224 + 1008) = v783;
      *(int64x2_t *)(v224 + 1024) = v779;
      *(int64x2_t *)(v224 + 1040) = v778;
      *(int64x2_t *)(v224 + 1056) = v775;
      *(int64x2_t *)(v224 + 1072) = v772;
      *(int64x2_t *)(v224 + 1096) = v777;
      *(_OWORD *)(v224 + 1112) = v797;
      *(_OWORD *)(v224 + 1128) = v789;
      *(_OWORD *)(v224 + 1144) = v208;
      *(_OWORD *)(v224 + 1160) = v209;
      *(_OWORD *)(v224 + 1176) = v210;
      *(_OWORD *)(v224 + 1192) = v211;
      *(_QWORD *)(v224 + 1088) = v230;
      *(_QWORD *)(v224 + 1208) = *((_QWORD *)&v230 + 1);
      *(int64x2_t *)(v224 + 1216) = v774;
      *(int64x2_t *)(v224 + 1232) = v776;
      *(int64x2_t *)(v224 + 1248) = v773;
      *(int64x2_t *)(v224 + 1264) = v771;
      *(int64x2_t *)(v224 + 1280) = v769;
      *(int64x2_t *)(v224 + 1296) = v765;
      *(int64x2_t *)(v224 + 1312) = v763;
      *(int64x2_t *)(v224 + 1336) = v784;
      *(_OWORD *)(v224 + 1352) = v212;
      *(_OWORD *)(v224 + 1368) = v213;
      *(_OWORD *)(v224 + 1384) = v214;
      *(_OWORD *)(v224 + 1400) = v215;
      *(_OWORD *)(v224 + 1416) = v216;
      *(_OWORD *)(v224 + 1432) = v217;
      *(_QWORD *)(v224 + 1328) = v229;
      *(_QWORD *)(v224 + 1448) = *((_QWORD *)&v229 + 1);
      *(int64x2_t *)(v224 + 1456) = v761;
      *(int64x2_t *)(v224 + 1472) = v768;
      *(int64x2_t *)(v224 + 1488) = v766;
      *(int64x2_t *)(v224 + 1504) = v764;
      *(int64x2_t *)(v224 + 1520) = v762;
      *(int64x2_t *)(v224 + 1536) = v760;
      *(int64x2_t *)(v224 + 1552) = v759;
      *(int64x2_t *)(v224 + 1576) = v770;
      *(_OWORD *)(v224 + 1592) = v218;
      *(_OWORD *)(v224 + 1608) = v219;
      *(_OWORD *)(v224 + 1624) = v220;
      *(_OWORD *)(v224 + 1640) = v221;
      *(_OWORD *)(v224 + 1656) = v222;
      *(_OWORD *)(v224 + 1672) = v223;
      *(_QWORD *)(v224 + 1568) = v757;
      *(_QWORD *)(v224 + 1688) = *((_QWORD *)&v757 + 1);
      *(_OWORD *)(v224 + 1696) = v200;
      *(_OWORD *)(v224 + 1712) = v225;
      *(_OWORD *)(v224 + 1728) = v226;
      *(_OWORD *)(v224 + 1744) = v227;
      *(_OWORD *)(v224 + 1760) = v228;
      *(_OWORD *)(v224 + 1776) = v201;
      *(_OWORD *)(v224 + 1792) = v202;
      *(_QWORD *)(v224 + 1808) = v758;
      *(_BYTE *)(v224 + 8) = 1;
      v9 = v832;
      v30 = v875;
      v29 = v872;
      LOBYTE(v52) = v822;
      if (*(_BYTE *)(*(_QWORD *)(v8 + 16) + 8))
        goto LABEL_99;
      v755 = "IMU factor is in a bad shape. Time to die.";
      v756 = 483;
LABEL_327:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", v756, (uint64_t)"", 0, (uint64_t)v755, 42, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v901[0] = (uint64_t)&v908;
    v901[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v901[2] = std::chrono::system_clock::now().__d_.__rep_;
    v902 = 5;
    v903 = "unknown file";
    v904 = 476;
    v907 = 0;
    v905 = "unknown function";
    v906 = 0;
    v182 = (const char *)(v908 + 16);
    v856 = (uint64_t *)(v908 + 16);
    if (*(char *)(v908 + 39) < 0)
    {
      v182 = *(const char **)(v908 + 16);
      v183 = *(_QWORD *)(v908 + 24);
    }
    else
    {
      v183 = *(unsigned __int8 *)(v908 + 39);
    }
    v862 = v183;
    v859 = v10;
    v184 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v184 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v925 && SHIBYTE(v924) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v185 = byte_254A4A4F8;
    else
      v185 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v186 = byte_254A4A4F8[23];
    else
      v186 = *(_QWORD *)&byte_254A4A4F8[8];
    v187 = v185;
    object = os_log_create(v185, v182);
    v188 = &v923;
    if (v186 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v853 = v182;
    if (v186 >= 0x17)
    {
      v189 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v186 | 7) != 0x17)
        v189 = v186 | 7;
      v190 = v189 + 1;
      v188 = operator new(v189 + 1);
      v925 = v190 | 0x8000000000000000;
      v923 = v188;
      v924 = v186;
    }
    else
    {
      HIBYTE(v925) = v186;
      if (!v186)
      {
LABEL_76:
        *((_BYTE *)v188 + v186) = 0;
        v926 = 1;
        v191 = __p;
        v192 = v862;
        if (v862 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v10 = v859;
        if (v862 >= 0x17)
        {
          v194 = (v862 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v862 | 7) != 0x17)
            v194 = v862 | 7;
          v195 = v194 + 1;
          v191 = operator new(v194 + 1);
          v11 = v178;
          v928 = v195 | 0x8000000000000000;
          __p[0] = v191;
          __p[1] = (void *)v862;
          v193 = v868;
          v192 = v862;
          v10 = v859;
        }
        else
        {
          HIBYTE(v928) = v862;
          v11 = v178;
          v193 = v868;
          if (!v862)
            goto LABEL_84;
        }
        memmove(v191, v853, v192);
        v192 = v862;
LABEL_84:
        *((_BYTE *)v191 + v192) = 0;
        v929 = 1;
        v196 = object;
        if (SHIBYTE(v928) < 0)
          operator delete(__p[0]);
        if (v926 && SHIBYTE(v925) < 0)
          operator delete(v923);
        if (object)
          os_release(object);
        sub_20FB22DA4(v865, v856, v196, OS_LOG_TYPE_ERROR);
        if (v193)
        {
          sub_20E8C003C((uint64_t)v901, "LP Noise model failed. Fallback succeeded.");
          sub_20E863570((uint64_t)v901);
        }
        sub_20E863570((uint64_t)v901);
        v197 = v907;
        if (v907)
        {
          p_shared_owners = (unint64_t *)&v907->__shared_owners_;
          do
            v199 = __ldaxr(p_shared_owners);
          while (__stlxr(v199 - 1, p_shared_owners));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        goto LABEL_98;
      }
    }
    memmove(v188, v187, v186);
    goto LABEL_76;
  }
LABEL_99:
  *(_QWORD *)&_D26 = vextq_s8(v877, v877, 8uLL).u64[0];
  *(_QWORD *)&_D25 = vextq_s8(v879, v879, 8uLL).u64[0];
  *(_QWORD *)&_D24 = vextq_s8(v881, v881, 8uLL).u64[0];
  *(_QWORD *)&v238.f64[0] = vextq_s8(v892, v892, 8uLL).u64[0];
  v239 = vextq_s8(v889, v889, 8uLL).u64[0];
  *(_QWORD *)&v240.f64[0] = vextq_s8(v895, v895, 8uLL).u64[0];
  v241 = vextq_s8(v898, v898, 8uLL).u64[0];
  _Q16.f64[0] = v911;
  _Q5.f64[1] = v910.f64[1];
  _V19.D[1] = v914.f64[1];
  v244 = (float64x2_t)vzip1q_s64((int64x2_t)v910, v912);
  v245 = (float64x2_t)vzip2q_s64((int64x2_t)v910, v912);
  _Q16.f64[1] = v913;
  v246 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v244, *(double *)v877.i64), v245, _D26), _Q16, *(double *)&v883);
  __asm { FMLA            D5, D26, V19.D[1] }
  _Q5.f64[0] = _Q5.f64[0] + v915 * *(double *)&v883;
  v250.i64[1] = *(_QWORD *)&v885.f64[1];
  v248 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v244, *(double *)v879.i64), v245, _D25), _Q16, v885.f64[0]);
  __asm { FMLA            D6, D25, V19.D[1] }
  *(double *)v250.i64 = _D6 + v915 * v885.f64[0];
  v251 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v244, *(double *)v881.i64), v245, _D24), _Q16, *(double *)&v887);
  __asm { FMLA            D16, D24, V19.D[1] }
  v252 = _Q16.f64[0] + v915 * *(double *)&v887;
  v876 = *(_QWORD *)&_D24;
  v873 = *(_QWORD *)&_D25;
  v870 = *(_QWORD *)&_D26;
  if (v252 >= 0.0)
  {
    if (v246.f64[0] >= -v248.f64[1])
    {
      v258 = (float64x2_t)vzip1q_s64(v250, (int64x2_t)v251);
      *(_QWORD *)&v259.f64[0] = vdupq_laneq_s64((int64x2_t)v251, 1).u64[0];
      v259.f64[1] = _Q5.f64[0];
      v255 = vsubq_f64(v258, v259);
      _Q5 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v246, 1), v248);
      v246.f64[0] = v252 + 1.0 + v246.f64[0] + v248.f64[1];
    }
    else
    {
      v255.f64[0] = v251.f64[0] + _Q5.f64[0];
      _Q5.f64[0] = v252 + 1.0 - (v246.f64[0] + v248.f64[1]);
      v255.f64[1] = *(double *)v250.i64 + v251.f64[1];
      v246.f64[0] = _Q5.f64[0];
    }
  }
  else if (v246.f64[0] <= v248.f64[1])
  {
    v256 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v246, 1), v248);
    *(_QWORD *)&v257.f64[1] = v250.i64[0];
    v257.f64[0] = 1.0 - v252;
    v251.f64[0] = v248.f64[1] - v246.f64[0];
    v246 = vaddq_f64(v257, v251);
    v255 = (float64x2_t)vzip1q_s64(v256, (int64x2_t)v246);
    _Q5 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v246, 1);
  }
  else
  {
    v253 = v246.f64[0] - v248.f64[1];
    v246.f64[0] = 1.0 - v252;
    v254 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v248.f64[0], 0);
    v254.f64[0] = v253;
    v255 = vaddq_f64(v246, v254);
    _Q5.f64[0] = v251.f64[0] + _Q5.f64[0];
    v246.f64[0] = v255.f64[0];
  }
  v260 = 0.5 / sqrt(v246.f64[0]);
  v261 = vmulq_n_f64(_Q5, v260);
  v262 = vmulq_n_f64(v255, v260);
  v263 = vaddq_f64(v262, v262);
  *(_QWORD *)(v7 + 136) = *(_OWORD *)&vaddq_f64(v261, v261);
  *(float64x2_t *)(v7 + 120) = v263;
  v264.f64[0] = v833;
  *(_QWORD *)&v264.f64[1] = v892.i64[0];
  v265 = vsubq_f64(v264, *(float64x2_t *)v919);
  *(_QWORD *)&v266.f64[0] = v889.i64[0];
  *(_QWORD *)&v266.f64[1] = v239;
  v267 = vsubq_f64(v266, v918);
  v240.f64[1] = v834;
  v268 = vsubq_f64(v240, *(float64x2_t *)&v917[16]);
  v269.f64[0] = v835;
  *(_QWORD *)&v269.f64[1] = v895.i64[0];
  v270 = vsubq_f64(v269, *(float64x2_t *)v917);
  *(_QWORD *)&v271.f64[0] = v898.i64[0];
  *(_QWORD *)&v271.f64[1] = v241;
  v238.f64[1] = v836;
  v272 = vsubq_f64(v238, *(float64x2_t *)&v919[16]);
  *(float64x2_t *)(v7 + 144) = vsubq_f64(v271, v916);
  *(float64x2_t *)(v7 + 160) = v270;
  *(float64x2_t *)(v7 + 176) = v268;
  *(float64x2_t *)(v7 + 192) = v267;
  *(float64x2_t *)(v7 + 208) = v265;
  *(float64x2_t *)(v7 + 224) = v272;
  v272.f64[0] = *(float64_t *)(v7 + 232);
  v273 = *(float64x2_t *)(v7 + 152);
  v274 = vnegq_f64(*(float64x2_t *)(v7 + 216));
  v275 = vnegq_f64(*(float64x2_t *)(v7 + 200));
  v276 = vnegq_f64(*(float64x2_t *)(v7 + 184));
  v277 = vnegq_f64(*(float64x2_t *)(v7 + 168));
  v278 = vnegq_f64(*(float64x2_t *)(v7 + 136));
  *(float64x2_t *)(v7 + 120) = vnegq_f64(v263);
  *(float64x2_t *)(v7 + 136) = v278;
  *(float64x2_t *)(v7 + 152) = vnegq_f64(v273);
  *(float64x2_t *)(v7 + 168) = v277;
  *(float64x2_t *)(v7 + 184) = v276;
  *(float64x2_t *)(v7 + 200) = v275;
  *(float64x2_t *)(v7 + 216) = v274;
  *(_QWORD *)(v7 + 232) = *(_OWORD *)&vnegq_f64(v272);
  v279 = *(_OWORD *)(v7 + 184);
  v280 = *(_OWORD *)(v7 + 200);
  v281 = *(_OWORD *)(v7 + 216);
  *(_QWORD *)(v837 + 112) = *(_QWORD *)(v7 + 232);
  *(_OWORD *)(v837 + 80) = v280;
  *(_OWORD *)(v837 + 96) = v281;
  *(_OWORD *)(v837 + 64) = v279;
  v282 = *(_OWORD *)(v7 + 120);
  v283 = *(_OWORD *)(v7 + 136);
  v284 = *(_OWORD *)(v7 + 168);
  *(_OWORD *)(v837 + 32) = *(_OWORD *)(v7 + 152);
  *(_OWORD *)(v837 + 48) = v284;
  *(_OWORD *)v837 = v282;
  *(_OWORD *)(v837 + 16) = v283;
  sub_20FB1D6C4(v8);
  sub_20FB223C4(v8, v11, (double **)v9, v29, v30);
  v285.f64[0] = v911;
  v893 = (int64x2_t)v910;
  v890 = v912;
  v286 = v915;
  v900 = v914.f64[1];
  v285.f64[1] = v913;
  v896 = v285;
  if (*(_BYTE *)(v7 + 4000) && !*(_BYTE *)(v7 + 3992))
  {
    (*v11)[8].i8[0] = 1;
    v11[1][6].i8[8] = 1;
    v11[2][8].i8[0] = 1;
    v11[3][6].i8[8] = 1;
    v11[4][2].i8[8] = 1;
    *(_BYTE *)(v7 + 2176) = 1;
    *(_QWORD *)(v8 + 5848) = &off_24CA00398;
    *(_QWORD *)(v8 + 5864) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 5872) = 0u;
    *(_OWORD *)(v8 + 5888) = 0u;
    *(_OWORD *)(v8 + 5904) = 0u;
    *(_OWORD *)(v8 + 5920) = 0u;
    *(_OWORD *)(v8 + 5936) = 0u;
    *(_OWORD *)(v8 + 5952) = 0u;
    *(_OWORD *)(v8 + 5968) = 0u;
    *(_QWORD *)(v8 + 5984) = 0;
    *(_QWORD *)(v8 + 5992) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 6000) = 0u;
    *(_OWORD *)(v8 + 6016) = 0u;
    *(_OWORD *)(v8 + 6032) = 0u;
    *(_OWORD *)(v8 + 6048) = 0u;
    *(_OWORD *)(v8 + 6064) = 0u;
    *(_OWORD *)(v8 + 6080) = 0u;
    *(_OWORD *)(v8 + 6096) = 0u;
    *(_QWORD *)(v8 + 6112) = 0;
    *(_QWORD *)(v8 + 6120) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 6128) = 0u;
    *(_OWORD *)(v8 + 6144) = 0u;
    *(_OWORD *)(v8 + 6160) = 0u;
    *(_OWORD *)(v8 + 6176) = 0u;
    *(_OWORD *)(v8 + 6192) = 0u;
    *(_OWORD *)(v8 + 6208) = 0u;
    *(_OWORD *)(v8 + 6224) = 0u;
    *(_QWORD *)(v8 + 6240) = 0;
    *(_QWORD *)(v8 + 6248) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 6256) = 0u;
    *(_OWORD *)(v8 + 6272) = 0u;
    *(_OWORD *)(v8 + 6288) = 0u;
    *(_OWORD *)(v8 + 6304) = 0u;
    *(_OWORD *)(v8 + 6320) = 0u;
    *(_OWORD *)(v8 + 6336) = 0u;
    *(_OWORD *)(v8 + 6352) = 0u;
    *(_QWORD *)(v8 + 6368) = 0;
    *(_QWORD *)(v8 + 6376) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 6384) = 0u;
    *(_OWORD *)(v8 + 6400) = 0u;
    *(_OWORD *)(v8 + 6416) = 0u;
    *(_OWORD *)(v8 + 6432) = 0u;
    *(_OWORD *)(v8 + 6448) = 0u;
    *(_OWORD *)(v8 + 6464) = 0u;
    *(_OWORD *)(v8 + 6480) = 0u;
    *(_QWORD *)(v8 + 6496) = 0;
    *(_QWORD *)(v8 + 6504) = 0x3FF0000000000000;
    *(_OWORD *)(v8 + 6512) = 0u;
    *(_OWORD *)(v8 + 6528) = 0u;
    *(_OWORD *)(v8 + 6544) = 0u;
    *(_OWORD *)(v8 + 6560) = 0u;
    *(_OWORD *)(v8 + 6576) = 0u;
    *(_OWORD *)(v8 + 6592) = 0u;
    *(_OWORD *)(v8 + 6608) = 0u;
    *(_QWORD *)(v8 + 6624) = 0;
    *(_QWORD *)(v8 + 6632) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 6752) = 0;
    *(_OWORD *)(v8 + 6736) = 0u;
    *(_OWORD *)(v8 + 6720) = 0u;
    *(_OWORD *)(v8 + 6704) = 0u;
    *(_OWORD *)(v8 + 6688) = 0u;
    *(_OWORD *)(v8 + 6672) = 0u;
    *(_OWORD *)(v8 + 6656) = 0u;
    *(_OWORD *)(v8 + 6640) = 0u;
    *(_QWORD *)(v8 + 6760) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 6880) = 0;
    *(_OWORD *)(v8 + 6864) = 0u;
    *(_OWORD *)(v8 + 6848) = 0u;
    *(_OWORD *)(v8 + 6832) = 0u;
    *(_OWORD *)(v8 + 6816) = 0u;
    *(_OWORD *)(v8 + 6800) = 0u;
    *(_OWORD *)(v8 + 6784) = 0u;
    *(_OWORD *)(v8 + 6768) = 0u;
    *(_QWORD *)(v8 + 6888) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7008) = 0;
    *(_OWORD *)(v8 + 6992) = 0u;
    *(_OWORD *)(v8 + 6976) = 0u;
    *(_OWORD *)(v8 + 6960) = 0u;
    *(_OWORD *)(v8 + 6944) = 0u;
    *(_OWORD *)(v8 + 6928) = 0u;
    *(_OWORD *)(v8 + 6912) = 0u;
    *(_OWORD *)(v8 + 6896) = 0u;
    *(_QWORD *)(v8 + 7016) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7136) = 0;
    *(_OWORD *)(v8 + 7120) = 0u;
    *(_OWORD *)(v8 + 7104) = 0u;
    *(_OWORD *)(v8 + 7088) = 0u;
    *(_OWORD *)(v8 + 7072) = 0u;
    *(_OWORD *)(v8 + 7056) = 0u;
    *(_OWORD *)(v8 + 7040) = 0u;
    *(_OWORD *)(v8 + 7024) = 0u;
    *(_QWORD *)(v8 + 7144) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7264) = 0;
    *(_OWORD *)(v8 + 7248) = 0u;
    *(_OWORD *)(v8 + 7232) = 0u;
    *(_OWORD *)(v8 + 7216) = 0u;
    *(_OWORD *)(v8 + 7200) = 0u;
    *(_OWORD *)(v8 + 7184) = 0u;
    *(_OWORD *)(v8 + 7168) = 0u;
    *(_OWORD *)(v8 + 7152) = 0u;
    *(_QWORD *)(v8 + 7272) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7392) = 0;
    *(_OWORD *)(v8 + 7376) = 0u;
    *(_OWORD *)(v8 + 7360) = 0u;
    *(_OWORD *)(v8 + 7344) = 0u;
    *(_OWORD *)(v8 + 7328) = 0u;
    *(_OWORD *)(v8 + 7312) = 0u;
    *(_OWORD *)(v8 + 7296) = 0u;
    *(_OWORD *)(v8 + 7280) = 0u;
    *(_QWORD *)(v8 + 7400) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7520) = 0;
    *(_OWORD *)(v8 + 7504) = 0u;
    *(_OWORD *)(v8 + 7488) = 0u;
    *(_OWORD *)(v8 + 7472) = 0u;
    *(_OWORD *)(v8 + 7456) = 0u;
    *(_OWORD *)(v8 + 7440) = 0u;
    *(_OWORD *)(v8 + 7424) = 0u;
    *(_OWORD *)(v8 + 7408) = 0u;
    *(_QWORD *)(v8 + 7528) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 7648) = 0;
    *(_OWORD *)(v8 + 7632) = 0u;
    *(_OWORD *)(v8 + 7616) = 0u;
    *(_OWORD *)(v8 + 7600) = 0u;
    *(_OWORD *)(v8 + 7584) = 0u;
    *(_OWORD *)(v8 + 7568) = 0u;
    *(_OWORD *)(v8 + 7552) = 0u;
    *(_OWORD *)(v8 + 7536) = 0u;
    *(_QWORD *)(v8 + 7656) = 0x3FF0000000000000;
    *(_BYTE *)(v7 + 3992) = 1;
    *(_QWORD *)(v8 + 7664) = -1;
    memcpy((void *)(v8 + 3920), (const void *)(v8 + 1880), 0x708uLL);
    v287 = *(_OWORD *)(v8 + 3728);
    *(_OWORD *)(v8 + 5752) = *(_OWORD *)(v8 + 3712);
    *(_OWORD *)(v8 + 5768) = v287;
    v288 = *(_OWORD *)(v8 + 3696);
    *(_OWORD *)(v8 + 5720) = *(_OWORD *)(v8 + 3680);
    *(_OWORD *)(v8 + 5736) = v288;
    *(_QWORD *)(v8 + 5832) = *(_QWORD *)(v8 + 3792);
    v289 = *(_OWORD *)(v8 + 3776);
    v290 = *(_OWORD *)(v8 + 3744);
    *(_OWORD *)(v8 + 5800) = *(_OWORD *)(v8 + 3760);
    *(_OWORD *)(v8 + 5816) = v289;
    *(_OWORD *)(v8 + 5784) = v290;
    *(_BYTE *)(v7 + 2160) = v52;
    v291 = *(_QWORD *)(v8 + 16);
    *(_BYTE *)(v7 + 2176) = *(_BYTE *)(v291 + 8);
    memcpy((void *)(v8 + 5864), (const void *)(v291 + 16), 0x708uLL);
    *(_DWORD *)(v8 + 7664) = (*v11)[1].i32[0];
    *(_DWORD *)(v8 + 7668) = v11[2][1].i32[0];
  }
  v292 = (float64x2_t *)v9[4];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v920), (int32x4_t)vcgtzq_f64(v921))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/Propagator.h", 159, (uint64_t)"(noise.e() > 0.).all()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v293 = v921;
  *v292 = v920;
  v292[1] = v293;
  if (!*(_BYTE *)(*(_QWORD *)(v8 + 16) + 8))
  {
    sub_20F9B2A4C(v901);
    if (**(int **)(v901[0] + 56) > 5)
      return 0;
    v311 = *(unsigned __int8 *)(v901[0] + 72);
    v312 = sub_20E8C31DC(v901[0], "OSLogSurrogateAppender", 1, 0);
    v313 = v312;
    if (!v311 && !v312)
      return 0;
    *(_QWORD *)&__src[0].f64[0] = v901;
    *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(__src[1].f64[1]) = 5;
    *(_QWORD *)&__src[2].f64[0] = "unknown file";
    LODWORD(__src[2].f64[1]) = 257;
    __src[4].f64[0] = 0.0;
    *(_QWORD *)&__src[3].f64[0] = "unknown function";
    __src[3].f64[1] = 0.0;
    v314 = **(_QWORD **)&__src[0].f64[0];
    v315 = **(_QWORD **)&__src[0].f64[0] + 16;
    if (*(char *)(**(_QWORD **)&__src[0].f64[0] + 39) < 0)
    {
      v317 = *(const char **)(v314 + 16);
      v316 = *(_QWORD *)(v314 + 24);
    }
    else
    {
      v316 = *(unsigned __int8 *)(**(_QWORD **)&__src[0].f64[0] + 39);
      v317 = (const char *)(**(_QWORD **)&__src[0].f64[0] + 16);
    }
    v408 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v408 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__dst);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
      if (__dst[24] && (__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v409 = byte_254A4A4F8;
    else
      v409 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v410 = byte_254A4A4F8[23];
    else
      v410 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)__dst = os_log_create(v409, v317);
    v411 = &__dst[8];
    if (v410 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v410 >= 0x17)
    {
      v412 = v313;
      v413 = v317;
      v414 = v314;
      v415 = v311;
      v416 = v315;
      v417 = (v410 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v410 | 7) != 0x17)
        v417 = v410 | 7;
      v418 = v417 + 1;
      v411 = operator new(v417 + 1);
      *(_QWORD *)&__dst[24] = v418 | 0x8000000000000000;
      *(_QWORD *)&__dst[8] = v411;
      *(_QWORD *)&__dst[16] = v410;
      v315 = v416;
      v311 = v415;
      v314 = v414;
      v317 = v413;
      v313 = v412;
    }
    else
    {
      __dst[31] = v410;
      if (!v410)
      {
LABEL_151:
        v411[v410] = 0;
        __dst[32] = 1;
        v419 = &__dst[40];
        if (v316 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v316 >= 0x17)
        {
          v420 = (v316 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v316 | 7) != 0x17)
            v420 = v316 | 7;
          v421 = v420 + 1;
          v419 = operator new(v420 + 1);
          *(_QWORD *)&__dst[56] = v421 | 0x8000000000000000;
          *(_QWORD *)&__dst[40] = v419;
          *(_QWORD *)&__dst[48] = v316;
        }
        else
        {
          __dst[63] = v316;
          if (!v316)
            goto LABEL_159;
        }
        memmove(v419, v317, v316);
LABEL_159:
        v419[v316] = 0;
        __dst[64] = 1;
        v422 = *(NSObject **)__dst;
        if ((__dst[63] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[40]);
        if (__dst[32] && (__dst[31] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[8]);
        if (*(_QWORD *)__dst)
          os_release(*(void **)__dst);
        if (v313 && *(_QWORD *)(v313 + 24))
        {
          v423 = _os_log_pack_size();
          v424 = (std::__shared_weak_count_vtbl *)operator new(v423, (std::align_val_t)8uLL);
          v425 = (std::__shared_weak_count *)operator new();
          v426 = v425;
          v425->__shared_owners_ = 0;
          v427 = (unint64_t *)&v425->__shared_owners_;
          v425->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v425->__shared_weak_owners_ = 0;
          v425[1].__vftable = v424;
          *(_QWORD *)__dst = v424;
          *(_QWORD *)&__dst[8] = v424;
          *(_QWORD *)&__dst[16] = v425;
          do
            v428 = __ldxr(v427);
          while (__stxr(v428 + 1, v427));
          memset(&__dst[24], 0, 24);
          do
            v429 = __ldaxr(v427);
          while (__stlxr(v429 - 1, v427));
          if (!v429)
          {
            ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
            std::__shared_weak_count::__release_weak(v426);
          }
          v430 = *(_QWORD *)__dst;
          *(_WORD *)_os_log_pack_fill() = 0;
          v431 = operator new();
          v432 = *(unsigned __int8 *)(v314 + 39);
          if ((v432 & 0x80u) == 0)
            v433 = v315;
          else
            v433 = *(_QWORD *)(v314 + 16);
          if ((v432 & 0x80u) != 0)
            v432 = *(_QWORD *)(v314 + 24);
          *(_QWORD *)v431 = v430;
          *(_OWORD *)(v431 + 8) = *(_OWORD *)&__dst[8];
          *(_QWORD *)&__dst[8] = 0;
          *(_QWORD *)&__dst[16] = 0;
          *(_OWORD *)(v431 + 24) = *(_OWORD *)&__dst[24];
          *(_QWORD *)&__dst[24] = 0;
          *(_QWORD *)&__dst[32] = 0;
          *(_QWORD *)(v431 + 40) = v433;
          *(_QWORD *)(v431 + 48) = v432;
          *(_BYTE *)(v431 + 56) = 16;
          object = 0;
          *(_QWORD *)&v910.f64[0] = v431;
          (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v313 + 24) + 40))(*(_QWORD *)(v313 + 24), &v910);
          v434 = v910.f64[0];
          v910.f64[0] = 0.0;
          if (v434 != 0.0)
          {
            v435 = *(std::__shared_weak_count **)(*(_QWORD *)&v434 + 32);
            if (v435)
            {
              v436 = (unint64_t *)&v435->__shared_owners_;
              do
                v437 = __ldaxr(v436);
              while (__stlxr(v437 - 1, v436));
              if (!v437)
              {
                ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
                std::__shared_weak_count::__release_weak(v435);
              }
            }
            v438 = *(std::__shared_weak_count **)(*(_QWORD *)&v434 + 16);
            if (v438)
            {
              v439 = (unint64_t *)&v438->__shared_owners_;
              do
                v440 = __ldaxr(v439);
              while (__stlxr(v440 - 1, v439));
              if (!v440)
              {
                ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
                std::__shared_weak_count::__release_weak(v438);
              }
            }
            MEMORY[0x212BC6398](*(_QWORD *)&v434, 0x10F0C40B62ED6C6);
            v441 = object;
            object = 0;
            if (v441)
            {
              v442 = (std::__shared_weak_count *)*((_QWORD *)v441 + 4);
              if (v442)
              {
                v443 = (unint64_t *)&v442->__shared_owners_;
                do
                  v444 = __ldaxr(v443);
                while (__stlxr(v444 - 1, v443));
                if (!v444)
                {
                  ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
                  std::__shared_weak_count::__release_weak(v442);
                }
              }
              v445 = (std::__shared_weak_count *)*((_QWORD *)v441 + 2);
              if (v445)
              {
                v446 = (unint64_t *)&v445->__shared_owners_;
                do
                  v447 = __ldaxr(v446);
                while (__stlxr(v447 - 1, v446));
                if (!v447)
                {
                  ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
                  std::__shared_weak_count::__release_weak(v445);
                }
              }
              MEMORY[0x212BC6398](v441, 0x10F0C40B62ED6C6);
            }
          }
          v448 = *(std::__shared_weak_count **)&__dst[32];
          if (*(_QWORD *)&__dst[32])
          {
            v449 = (unint64_t *)(*(_QWORD *)&__dst[32] + 8);
            do
              v450 = __ldaxr(v449);
            while (__stlxr(v450 - 1, v449));
            if (!v450)
            {
              ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
              std::__shared_weak_count::__release_weak(v448);
            }
          }
          v451 = *(std::__shared_weak_count **)&__dst[16];
          if (*(_QWORD *)&__dst[16])
          {
            v452 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
            do
              v453 = __ldaxr(v452);
            while (__stlxr(v453 - 1, v452));
            if (!v453)
            {
              ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
              std::__shared_weak_count::__release_weak(v451);
            }
          }
        }
        else
        {
          os_log_type_enabled(v422, OS_LOG_TYPE_ERROR);
          *(_WORD *)__dst = 0;
          v454 = (void *)_os_log_send_and_compose_impl();
          if (v454)
            free(v454);
        }
        if (v311)
        {
          sub_20E8C003C((uint64_t)__src, "IMU factor failed to factorize the noise model.");
          sub_20E863570((uint64_t)__src);
        }
        sub_20E863570((uint64_t)__src);
        v455 = __src[4].f64[0];
        if (*(_QWORD *)&__src[4].f64[0])
        {
          v456 = (unint64_t *)(*(_QWORD *)&__src[4].f64[0] + 8);
          do
            v457 = __ldaxr(v456);
          while (__stlxr(v457 - 1, v456));
          if (!v457)
          {
            (*(void (**)(float64_t))(**(_QWORD **)&v455 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v455));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v455);
          }
        }
        return 0;
      }
    }
    memmove(v411, v409, v410);
    goto LABEL_151;
  }
  v294 = 0;
  v295 = (float64x2_t)vzip1q_s64(v893, v890);
  _D26 = v870;
  _Q1 = (float64x2_t)vdupq_lane_s64(v870, 0);
  _D25 = v873;
  _D24 = v876;
  v299 = vmulq_n_f64(v295, *(double *)v877.i64);
  _Q4 = (float64x2_t)vzip2q_s64(v893, v890);
  v301 = vmulq_n_f64(v295, *(double *)v879.i64);
  v302 = vmulq_n_f64(v295, *(double *)v881.i64);
  _Q0 = (float64x2_t)vdupq_lane_s64(v883, 0);
  v304 = vmlaq_f64(v301, (float64x2_t)vdupq_lane_s64(v873, 0), _Q4);
  v305 = vmlaq_f64(v302, (float64x2_t)vdupq_lane_s64(v876, 0), _Q4);
  v306 = (int8x16_t)vmlaq_f64(vmlaq_f64(v299, _Q1, _Q4), _Q0, v896);
  _Q4.f64[1] = v900;
  v307 = (int8x16_t)vmlaq_f64(v304, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v885.f64[0], 0), v896);
  __asm { FMLA            D0, D26, V4.D[1] }
  v882 = *(double *)v306.i64;
  v894 = (float64x2_t)vextq_s8(v306, v306, 8uLL);
  __asm { FMLA            D1, D25, V4.D[1] }
  v880 = vextq_s8(v307, v307, 8uLL).u64[0];
  __asm { FMLA            D2, D24, V4.D[1] }
  v899 = vmlaq_f64(v305, (float64x2_t)vdupq_lane_s64(v887, 0), v896);
  v309 = vextq_s8((int8x16_t)v899, (int8x16_t)v899, 8uLL).u64[0];
  _Q0.f64[0] = _Q0.f64[0] + v286 * *(double *)&v883;
  v891 = _Q0;
  _Q1.f64[0] = _Q1.f64[0] + v286 * v885.f64[0];
  _Q0.f64[0] = _D2 + v286 * *(double *)&v887;
  v888 = _Q0;
  v897 = (int64x2_t)v307;
  do
  {
    _ZF = v294 == 1792;
    v294 += 8;
  }
  while (!_ZF);
  v886 = _Q1;
  v318 = *(float64x2_t *)(v8 + 3640);
  *(float64x2_t *)&__dst[1784] = vabsq_f64(*(float64x2_t *)(v8 + 3656));
  v319 = *(float64x2_t *)(v8 + 3624);
  *(float64x2_t *)&__dst[1768] = vabsq_f64(v318);
  v320 = *(float64x2_t *)(v8 + 3608);
  *(float64x2_t *)&__dst[1752] = vabsq_f64(v319);
  v321 = *(float64x2_t *)(v8 + 3592);
  *(float64x2_t *)&__dst[1736] = vabsq_f64(v320);
  v322 = *(float64x2_t *)(v8 + 3576);
  *(float64x2_t *)&__dst[1720] = vabsq_f64(v321);
  v323 = *(float64x2_t *)(v8 + 3560);
  *(float64x2_t *)&__dst[1704] = vabsq_f64(v322);
  v324 = *(float64x2_t *)(v8 + 3544);
  *(float64x2_t *)&__dst[1688] = vabsq_f64(v323);
  v325 = *(float64x2_t *)(v8 + 3528);
  *(float64x2_t *)&__dst[1672] = vabsq_f64(v324);
  v326 = *(float64x2_t *)(v8 + 3512);
  *(float64x2_t *)&__dst[1656] = vabsq_f64(v325);
  v327 = *(float64x2_t *)(v8 + 3496);
  *(float64x2_t *)&__dst[1640] = vabsq_f64(v326);
  v328 = *(float64x2_t *)(v8 + 3480);
  *(float64x2_t *)&__dst[1624] = vabsq_f64(v327);
  v329 = *(float64x2_t *)(v8 + 3464);
  *(float64x2_t *)&__dst[1608] = vabsq_f64(v328);
  v330 = *(float64x2_t *)(v8 + 3448);
  *(float64x2_t *)&__dst[1592] = vabsq_f64(v329);
  v331 = *(float64x2_t *)(v8 + 3432);
  *(float64x2_t *)&__dst[1576] = vabsq_f64(v330);
  v332 = *(float64x2_t *)(v8 + 3416);
  *(float64x2_t *)&__dst[1560] = vabsq_f64(v331);
  v333 = *(float64x2_t *)(v8 + 3400);
  *(float64x2_t *)&__dst[1544] = vabsq_f64(v332);
  v334 = *(float64x2_t *)(v8 + 3384);
  *(float64x2_t *)&__dst[1528] = vabsq_f64(v333);
  v335 = *(float64x2_t *)(v8 + 3368);
  *(float64x2_t *)&__dst[1512] = vabsq_f64(v334);
  v336 = *(float64x2_t *)(v8 + 3352);
  *(float64x2_t *)&__dst[1496] = vabsq_f64(v335);
  v337 = *(float64x2_t *)(v8 + 3336);
  *(float64x2_t *)&__dst[1480] = vabsq_f64(v336);
  v338 = *(float64x2_t *)(v8 + 3320);
  *(float64x2_t *)&__dst[1464] = vabsq_f64(v337);
  v339 = *(float64x2_t *)(v8 + 3304);
  *(float64x2_t *)&__dst[1448] = vabsq_f64(v338);
  v340 = *(float64x2_t *)(v8 + 3288);
  *(float64x2_t *)&__dst[1432] = vabsq_f64(v339);
  v341 = *(float64x2_t *)(v8 + 3272);
  *(float64x2_t *)&__dst[1416] = vabsq_f64(v340);
  v342 = *(float64x2_t *)(v8 + 3256);
  *(float64x2_t *)&__dst[1400] = vabsq_f64(v341);
  v343 = *(float64x2_t *)(v8 + 3240);
  *(float64x2_t *)&__dst[1384] = vabsq_f64(v342);
  v344 = *(float64x2_t *)(v8 + 3224);
  *(float64x2_t *)&__dst[1368] = vabsq_f64(v343);
  v345 = *(float64x2_t *)(v8 + 3208);
  *(float64x2_t *)&__dst[1352] = vabsq_f64(v344);
  v346 = *(float64x2_t *)(v8 + 3192);
  *(float64x2_t *)&__dst[1336] = vabsq_f64(v345);
  v347 = *(float64x2_t *)(v8 + 3176);
  *(float64x2_t *)&__dst[1320] = vabsq_f64(v346);
  v348 = *(float64x2_t *)(v8 + 3160);
  *(float64x2_t *)&__dst[1304] = vabsq_f64(v347);
  v349 = *(float64x2_t *)(v8 + 3144);
  *(float64x2_t *)&__dst[1288] = vabsq_f64(v348);
  v350 = *(float64x2_t *)(v8 + 3128);
  *(float64x2_t *)&__dst[1272] = vabsq_f64(v349);
  v351 = *(float64x2_t *)(v8 + 3112);
  *(float64x2_t *)&__dst[1256] = vabsq_f64(v350);
  v352 = *(float64x2_t *)(v8 + 3096);
  *(float64x2_t *)&__dst[1240] = vabsq_f64(v351);
  v353 = *(float64x2_t *)(v8 + 3080);
  *(float64x2_t *)&__dst[1224] = vabsq_f64(v352);
  v354 = *(float64x2_t *)(v8 + 3064);
  *(float64x2_t *)&__dst[1208] = vabsq_f64(v353);
  v355 = *(float64x2_t *)(v8 + 3048);
  *(float64x2_t *)&__dst[1192] = vabsq_f64(v354);
  v356 = *(float64x2_t *)(v8 + 3032);
  *(float64x2_t *)&__dst[1176] = vabsq_f64(v355);
  v357 = *(float64x2_t *)(v8 + 3016);
  *(float64x2_t *)&__dst[1160] = vabsq_f64(v356);
  v358 = *(float64x2_t *)(v8 + 3000);
  *(float64x2_t *)&__dst[1144] = vabsq_f64(v357);
  v359 = *(float64x2_t *)(v8 + 2984);
  *(float64x2_t *)&__dst[1128] = vabsq_f64(v358);
  v360 = *(float64x2_t *)(v8 + 2968);
  *(float64x2_t *)&__dst[1112] = vabsq_f64(v359);
  v361 = *(float64x2_t *)(v8 + 2952);
  *(float64x2_t *)&__dst[1096] = vabsq_f64(v360);
  v362 = *(float64x2_t *)(v8 + 2936);
  *(float64x2_t *)&__dst[1080] = vabsq_f64(v361);
  v363 = *(float64x2_t *)(v8 + 2920);
  *(float64x2_t *)&__dst[1064] = vabsq_f64(v362);
  v364 = vabsq_f64(*(float64x2_t *)(v8 + 2904));
  *(float64x2_t *)&__dst[1048] = vabsq_f64(v363);
  v365 = vabsq_f64(*(float64x2_t *)(v8 + 2872));
  *(float64x2_t *)&__dst[1016] = vabsq_f64(*(float64x2_t *)(v8 + 2888));
  *(float64x2_t *)&__dst[1032] = v364;
  v366 = vabsq_f64(*(float64x2_t *)(v8 + 2840));
  *(float64x2_t *)&__dst[984] = vabsq_f64(*(float64x2_t *)(v8 + 2856));
  *(float64x2_t *)&__dst[1000] = v365;
  v367 = vabsq_f64(*(float64x2_t *)(v8 + 2808));
  *(float64x2_t *)&__dst[952] = vabsq_f64(*(float64x2_t *)(v8 + 2824));
  *(float64x2_t *)&__dst[968] = v366;
  v368 = vabsq_f64(*(float64x2_t *)(v8 + 2776));
  *(float64x2_t *)&__dst[920] = vabsq_f64(*(float64x2_t *)(v8 + 2792));
  *(float64x2_t *)&__dst[936] = v367;
  v369 = vabsq_f64(*(float64x2_t *)(v8 + 2744));
  *(float64x2_t *)&__dst[888] = vabsq_f64(*(float64x2_t *)(v8 + 2760));
  *(float64x2_t *)&__dst[904] = v368;
  v370 = vabsq_f64(*(float64x2_t *)(v8 + 2712));
  *(float64x2_t *)&__dst[856] = vabsq_f64(*(float64x2_t *)(v8 + 2728));
  *(float64x2_t *)&__dst[872] = v369;
  v371 = vabsq_f64(*(float64x2_t *)(v8 + 2680));
  *(float64x2_t *)&__dst[824] = vabsq_f64(*(float64x2_t *)(v8 + 2696));
  *(float64x2_t *)&__dst[840] = v370;
  v372 = vabsq_f64(*(float64x2_t *)(v8 + 2648));
  *(float64x2_t *)&__dst[792] = vabsq_f64(*(float64x2_t *)(v8 + 2664));
  *(float64x2_t *)&__dst[808] = v371;
  v373 = vabsq_f64(*(float64x2_t *)(v8 + 2616));
  *(float64x2_t *)&__dst[760] = vabsq_f64(*(float64x2_t *)(v8 + 2632));
  *(float64x2_t *)&__dst[776] = v372;
  v374 = vabsq_f64(*(float64x2_t *)(v8 + 2584));
  *(float64x2_t *)&__dst[728] = vabsq_f64(*(float64x2_t *)(v8 + 2600));
  *(float64x2_t *)&__dst[744] = v373;
  v375 = vabsq_f64(*(float64x2_t *)(v8 + 2552));
  *(float64x2_t *)&__dst[696] = vabsq_f64(*(float64x2_t *)(v8 + 2568));
  *(float64x2_t *)&__dst[712] = v374;
  v376 = vabsq_f64(*(float64x2_t *)(v8 + 2520));
  *(float64x2_t *)&__dst[664] = vabsq_f64(*(float64x2_t *)(v8 + 2536));
  *(float64x2_t *)&__dst[680] = v375;
  v377 = vabsq_f64(*(float64x2_t *)(v8 + 2488));
  *(float64x2_t *)&__dst[632] = vabsq_f64(*(float64x2_t *)(v8 + 2504));
  *(float64x2_t *)&__dst[648] = v376;
  v378 = vabsq_f64(*(float64x2_t *)(v8 + 2456));
  *(float64x2_t *)&__dst[600] = vabsq_f64(*(float64x2_t *)(v8 + 2472));
  *(float64x2_t *)&__dst[616] = v377;
  v379 = vabsq_f64(*(float64x2_t *)(v8 + 2424));
  *(float64x2_t *)&__dst[568] = vabsq_f64(*(float64x2_t *)(v8 + 2440));
  *(float64x2_t *)&__dst[584] = v378;
  v380 = vabsq_f64(*(float64x2_t *)(v8 + 2392));
  *(float64x2_t *)&__dst[536] = vabsq_f64(*(float64x2_t *)(v8 + 2408));
  *(float64x2_t *)&__dst[552] = v379;
  v381 = vabsq_f64(*(float64x2_t *)(v8 + 2360));
  *(float64x2_t *)&__dst[504] = vabsq_f64(*(float64x2_t *)(v8 + 2376));
  *(float64x2_t *)&__dst[520] = v380;
  v382 = vabsq_f64(*(float64x2_t *)(v8 + 2328));
  *(float64x2_t *)&__dst[472] = vabsq_f64(*(float64x2_t *)(v8 + 2344));
  *(float64x2_t *)&__dst[488] = v381;
  v383 = vabsq_f64(*(float64x2_t *)(v8 + 2296));
  *(float64x2_t *)&__dst[440] = vabsq_f64(*(float64x2_t *)(v8 + 2312));
  *(float64x2_t *)&__dst[456] = v382;
  v384 = vabsq_f64(*(float64x2_t *)(v8 + 2264));
  *(float64x2_t *)&__dst[408] = vabsq_f64(*(float64x2_t *)(v8 + 2280));
  *(float64x2_t *)&__dst[424] = v383;
  v385 = vabsq_f64(*(float64x2_t *)(v8 + 2232));
  *(float64x2_t *)&__dst[376] = vabsq_f64(*(float64x2_t *)(v8 + 2248));
  *(float64x2_t *)&__dst[392] = v384;
  v386 = vabsq_f64(*(float64x2_t *)(v8 + 2200));
  *(float64x2_t *)&__dst[344] = vabsq_f64(*(float64x2_t *)(v8 + 2216));
  *(float64x2_t *)&__dst[360] = v385;
  v387 = vabsq_f64(*(float64x2_t *)(v8 + 2168));
  *(float64x2_t *)&__dst[312] = vabsq_f64(*(float64x2_t *)(v8 + 2184));
  *(float64x2_t *)&__dst[328] = v386;
  v388 = vabsq_f64(*(float64x2_t *)(v8 + 2136));
  *(float64x2_t *)&__dst[280] = vabsq_f64(*(float64x2_t *)(v8 + 2152));
  *(float64x2_t *)&__dst[296] = v387;
  *(float64x2_t *)&__dst[264] = v388;
  v389 = vabsq_f64(*(float64x2_t *)(v8 + 2104));
  *(float64x2_t *)&__dst[248] = vabsq_f64(*(float64x2_t *)(v8 + 2120));
  *(float64x2_t *)&__dst[232] = v389;
  v390 = vabsq_f64(*(float64x2_t *)(v8 + 2072));
  *(float64x2_t *)&__dst[216] = vabsq_f64(*(float64x2_t *)(v8 + 2088));
  *(float64x2_t *)&__dst[200] = v390;
  v391 = vabsq_f64(*(float64x2_t *)(v8 + 2040));
  *(float64x2_t *)&__dst[184] = vabsq_f64(*(float64x2_t *)(v8 + 2056));
  *(float64x2_t *)&__dst[168] = v391;
  v392 = vabsq_f64(*(float64x2_t *)(v8 + 2008));
  *(float64x2_t *)&__dst[152] = vabsq_f64(*(float64x2_t *)(v8 + 2024));
  *(float64x2_t *)&__dst[136] = v392;
  v393 = vabsq_f64(*(float64x2_t *)(v8 + 1976));
  *(float64x2_t *)&__dst[120] = vabsq_f64(*(float64x2_t *)(v8 + 1992));
  *(float64x2_t *)&__dst[104] = v393;
  v394 = vabsq_f64(*(float64x2_t *)(v8 + 1944));
  *(float64x2_t *)&__dst[88] = vabsq_f64(*(float64x2_t *)(v8 + 1960));
  *(float64x2_t *)&__dst[72] = v394;
  v395 = vabsq_f64(*(float64x2_t *)(v8 + 1912));
  *(float64x2_t *)&__dst[56] = vabsq_f64(*(float64x2_t *)(v8 + 1928));
  *(float64x2_t *)&__dst[40] = v395;
  v396 = *v53;
  *(float64x2_t *)&__dst[24] = vabsq_f64(*(float64x2_t *)(v8 + 1896));
  v397 = vabsq_f64(v396);
  *(float64x2_t *)&__dst[8] = v397;
  v397.f64[0] = *(float64_t *)(v8 + 3672);
  *(_QWORD *)&__dst[1800] = *(_OWORD *)&vabsq_f64(v397);
  v931 = 0x46293E5939A08CEALL;
  v398 = 8;
  do
  {
    v399 = *(double *)&__dst[v398];
    if (v399 > 1.0e30)
      break;
    _ZF = v398 == 1800;
    v398 += 8;
  }
  while (!_ZF);
  v878 = *(double *)&v307.i64[1];
  v884 = *(double *)&v309;
  if (v399 > 1.0e30)
  {
    sub_20F9B2A4C(v901);
    if (**(int **)(v901[0] + 56) <= 5)
    {
      v400 = *(unsigned __int8 *)(v901[0] + 72);
      v401 = sub_20E8C31DC(v901[0], "OSLogSurrogateAppender", 1, 0);
      v402 = v401 ? v401 + 16 : 0;
      _ZF = !v400 && v401 == 0;
      if (!_ZF)
      {
        *(_QWORD *)&__src[0].f64[0] = v901;
        *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(__src[1].f64[1]) = 5;
        *(_QWORD *)&__src[2].f64[0] = "unknown file";
        LODWORD(__src[2].f64[1]) = 266;
        __src[4].f64[0] = 0.0;
        *(_QWORD *)&__src[3].f64[0] = "unknown function";
        __src[3].f64[1] = 0.0;
        v404 = **(_QWORD **)&__src[0].f64[0];
        v405 = (uint64_t *)(**(_QWORD **)&__src[0].f64[0] + 16);
        if (*(char *)(**(_QWORD **)&__src[0].f64[0] + 39) < 0)
        {
          v407 = *(void **)(v404 + 16);
          v406 = *(void **)(v404 + 24);
        }
        else
        {
          v406 = (void *)*(unsigned __int8 *)(**(_QWORD **)&__src[0].f64[0] + 39);
          v407 = (void *)(**(_QWORD **)&__src[0].f64[0] + 16);
        }
        object = v407;
        v923 = v406;
        v458 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v458 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__dst);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        *(_QWORD *)&v459 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v460 = byte_254A4A4F8;
        }
        else
        {
          v459 = *(double *)&byte_254A4A4F8[8];
          v460 = *(const char **)byte_254A4A4F8;
        }
        *(_QWORD *)&v910.f64[0] = v460;
        v910.f64[1] = v459;
        *(_QWORD *)__dst = os_log_create(v460, (const char *)object);
        sub_20E86E5A8(&__dst[8], (uint64_t)&v910);
        sub_20E86E5A8(&__dst[40], (uint64_t)&object);
        v461 = *(NSObject **)__dst;
        sub_20E86E44C((uint64_t)__dst);
        sub_20FB23868(v402, v405, v461, OS_LOG_TYPE_ERROR);
        if (v400)
        {
          sub_20E8C003C((uint64_t)__src, "IMU state factor reaches high magnitudes.");
          sub_20E863570((uint64_t)__src);
        }
        sub_20E863714((uint64_t)__src);
      }
    }
  }
  *(_QWORD *)&v462.f64[0] = vdupq_laneq_s64(v897, 1).u64[0];
  v463 = (float64x2_t)vdupq_lane_s64(v897.i64[0], 0);
  v463.f64[0] = v891.f64[0];
  v462.f64[1] = v886.f64[0];
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v894), (int8x16_t)vcgezq_f64(v894)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v463), (int8x16_t)vcgezq_f64(v463))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v462), (int8x16_t)vcgezq_f64(v462)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v899), (int8x16_t)vcgezq_f64(v899))))))) & 1) != 0)
  {
    sub_20F9B2A4C(v901);
    if (**(int **)(v901[0] + 56) > 5)
      return 0;
    v477 = *(unsigned __int8 *)(v901[0] + 72);
    v478 = sub_20E8C31DC(v901[0], "OSLogSurrogateAppender", 1, 0);
    v479 = v478 ? v478 + 16 : 0;
    if (!v477 && !v478)
      return 0;
    *(_QWORD *)&__src[0].f64[0] = v901;
    *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(__src[1].f64[1]) = 5;
    *(_QWORD *)&__src[2].f64[0] = "unknown file";
    LODWORD(__src[2].f64[1]) = 270;
    __src[4].f64[0] = 0.0;
    *(_QWORD *)&__src[3].f64[0] = "unknown function";
    __src[3].f64[1] = 0.0;
    v480 = (uint64_t *)(v901[0] + 16);
    if (*(char *)(v901[0] + 39) < 0)
    {
      v482 = *(void **)(v901[0] + 16);
      v481 = *(void **)(v901[0] + 24);
    }
    else
    {
      v481 = (void *)*(unsigned __int8 *)(v901[0] + 39);
      v482 = (void *)(v901[0] + 16);
    }
    object = v482;
    v923 = v481;
    v483 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v483 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__dst);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
      if (__dst[24] && (__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    *(_QWORD *)&v484 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v485 = byte_254A4A4F8;
    }
    else
    {
      v484 = *(double *)&byte_254A4A4F8[8];
      v485 = *(const char **)byte_254A4A4F8;
    }
    *(_QWORD *)&v910.f64[0] = v485;
    v910.f64[1] = v484;
    *(_QWORD *)__dst = os_log_create(v485, (const char *)object);
    sub_20E86E5A8(&__dst[8], (uint64_t)&v910);
    sub_20E86E5A8(&__dst[40], (uint64_t)&object);
    v486 = *(NSObject **)__dst;
    sub_20E86E44C((uint64_t)__dst);
    sub_20FB23C54(v479, v480, v486, OS_LOG_TYPE_ERROR);
    if (v477)
    {
      sub_20E8C003C((uint64_t)__src, "IMU R factor contains NaNs.");
      sub_20E863570((uint64_t)__src);
    }
LABEL_289:
    sub_20E863714((uint64_t)__src);
    return 0;
  }
  v464.f64[0] = v891.f64[0];
  *(_QWORD *)&v464.f64[1] = v897.i64[0];
  v465.f64[0] = v878;
  v465.f64[1] = v886.f64[0];
  v466 = vabsq_f64(v465);
  v465.f64[0] = v899.f64[0];
  v465.f64[1] = v884;
  v467.f64[0] = v882;
  v467.f64[1] = v894.f64[0];
  v468 = (int8x16_t)vabsq_f64(v467);
  v469 = (float64x2_t)vdupq_n_s64(0x46293E5939A08CEAuLL);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64((float64x2_t)vextq_s8(v468, v468, 8uLL), v469), (int32x4_t)vcgtq_f64(vabsq_f64(v464), v469)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v466, v469), (int32x4_t)vcgtq_f64(vabsq_f64(v465), v469))))) & 1) != 0|| vabsq_f64(v888).f64[0] > 1.0e30)
  {
    sub_20F9B2A4C(v901);
    if (**(int **)(v901[0] + 56) <= 5)
    {
      v470 = *(unsigned __int8 *)(v901[0] + 72);
      v471 = sub_20E8C31DC(v901[0], "OSLogSurrogateAppender", 1, 0);
      v472 = v471 ? v471 + 16 : 0;
      if (v470 || v471)
      {
        *(_QWORD *)&__src[0].f64[0] = v901;
        *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(__src[1].f64[1]) = 5;
        *(_QWORD *)&__src[2].f64[0] = "unknown file";
        LODWORD(__src[2].f64[1]) = 274;
        __src[4].f64[0] = 0.0;
        *(_QWORD *)&__src[3].f64[0] = "unknown function";
        __src[3].f64[1] = 0.0;
        v473 = **(_QWORD **)&__src[0].f64[0];
        v474 = (uint64_t *)(**(_QWORD **)&__src[0].f64[0] + 16);
        if (*(char *)(**(_QWORD **)&__src[0].f64[0] + 39) < 0)
        {
          v476 = *(void **)(v473 + 16);
          v475 = *(void **)(v473 + 24);
        }
        else
        {
          v475 = (void *)*(unsigned __int8 *)(**(_QWORD **)&__src[0].f64[0] + 39);
          v476 = (void *)(**(_QWORD **)&__src[0].f64[0] + 16);
        }
        object = v476;
        v923 = v475;
        v487 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v487 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__dst);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        *(_QWORD *)&v488 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v489 = byte_254A4A4F8;
        }
        else
        {
          v488 = *(double *)&byte_254A4A4F8[8];
          v489 = *(const char **)byte_254A4A4F8;
        }
        *(_QWORD *)&v910.f64[0] = v489;
        v910.f64[1] = v488;
        *(_QWORD *)__dst = os_log_create(v489, (const char *)object);
        sub_20E86E5A8(&__dst[8], (uint64_t)&v910);
        sub_20E86E5A8(&__dst[40], (uint64_t)&object);
        v490 = *(NSObject **)__dst;
        sub_20E86E44C((uint64_t)__dst);
        sub_20FB24040(v472, v474, v490, OS_LOG_TYPE_ERROR);
        if (v470)
        {
          sub_20E8C003C((uint64_t)__src, "IMU R factor reaches high magnitudes.");
          sub_20E863570((uint64_t)__src);
        }
        sub_20E863714((uint64_t)__src);
      }
    }
  }
  if (v11[4][1].i8[4])
  {
    *(_QWORD *)__dst = v7;
    *(_QWORD *)&__dst[8] = v7;
    if (sub_20F4D6FA0((double **)__dst))
    {
      sub_20F9B2A4C(v901);
      if (**(int **)(v901[0] + 56) > 5)
        return 0;
      v492 = *(unsigned __int8 *)(v901[0] + 72);
      v493 = sub_20E8C31DC(v901[0], "OSLogSurrogateAppender", 1, 0);
      v494 = v493 ? v493 + 16 : 0;
      if (!v492 && !v493)
        return 0;
      *(_QWORD *)&__src[0].f64[0] = v901;
      *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(__src[1].f64[1]) = 5;
      *(_QWORD *)&__src[2].f64[0] = "unknown file";
      LODWORD(__src[2].f64[1]) = 278;
      __src[4].f64[0] = 0.0;
      *(_QWORD *)&__src[3].f64[0] = "unknown function";
      __src[3].f64[1] = 0.0;
      v495 = (uint64_t *)(v901[0] + 16);
      if (*(char *)(v901[0] + 39) < 0)
      {
        v497 = *(void **)(v901[0] + 16);
        v496 = *(void **)(v901[0] + 24);
      }
      else
      {
        v496 = (void *)*(unsigned __int8 *)(v901[0] + 39);
        v497 = (void *)(v901[0] + 16);
      }
      object = v497;
      v923 = v496;
      v511 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v511 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__dst);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
        if (__dst[24] && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      *(_QWORD *)&v512 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v513 = byte_254A4A4F8;
      }
      else
      {
        v512 = *(double *)&byte_254A4A4F8[8];
        v513 = *(const char **)byte_254A4A4F8;
      }
      *(_QWORD *)&v910.f64[0] = v513;
      v910.f64[1] = v512;
      *(_QWORD *)__dst = os_log_create(v513, (const char *)object);
      sub_20E86E5A8(&__dst[8], (uint64_t)&v910);
      sub_20E86E5A8(&__dst[40], (uint64_t)&object);
      v514 = *(NSObject **)__dst;
      sub_20E86E44C((uint64_t)__dst);
      sub_20FB2442C(v494, v495, v514, OS_LOG_TYPE_ERROR);
      if (v492)
      {
        sub_20E8C003C((uint64_t)__src, "IMU dt factor contains NaNs.");
        sub_20E863570((uint64_t)__src);
      }
      goto LABEL_289;
    }
    v491.f64[0] = *(float64_t *)(v7 + 112);
    v498 = vabsq_f64(*(float64x2_t *)v7);
    v499 = vabsq_f64(*(float64x2_t *)(v7 + 16));
    v500 = vabsq_f64(*(float64x2_t *)(v7 + 32));
    v501 = vabsq_f64(*(float64x2_t *)(v7 + 48));
    v502 = vabsq_f64(*(float64x2_t *)(v7 + 64));
    v503 = vabsq_f64(*(float64x2_t *)(v7 + 80));
    *(float64x2_t *)&__dst[104] = vabsq_f64(*(float64x2_t *)(v7 + 96));
    *(float64x2_t *)&__dst[88] = v503;
    *(float64x2_t *)&__dst[72] = v502;
    *(float64x2_t *)&__dst[56] = v501;
    *(float64x2_t *)&__dst[40] = v500;
    *(float64x2_t *)&__dst[24] = v499;
    *(float64x2_t *)&__dst[8] = v498;
    *(_QWORD *)&__dst[120] = *(_OWORD *)&vabsq_f64(v491);
    *(_QWORD *)&__dst[128] = 0x46293E5939A08CEALL;
    if (sub_20F4B473C((double *)__dst))
    {
      sub_20F9B2A4C(v901);
      if (**(int **)(v901[0] + 56) <= 5)
      {
        v504 = *(unsigned __int8 *)(v901[0] + 72);
        v505 = sub_20E8C31DC(v901[0], "OSLogSurrogateAppender", 1, 0);
        v506 = v505 ? v505 + 16 : 0;
        if (v504 || v505)
        {
          *(_QWORD *)&__src[0].f64[0] = v901;
          *(std::chrono::steady_clock::time_point *)&__src[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)&__src[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(__src[1].f64[1]) = 5;
          *(_QWORD *)&__src[2].f64[0] = "unknown file";
          LODWORD(__src[2].f64[1]) = 282;
          __src[4].f64[0] = 0.0;
          *(_QWORD *)&__src[3].f64[0] = "unknown function";
          __src[3].f64[1] = 0.0;
          v507 = **(_QWORD **)&__src[0].f64[0];
          v508 = (uint64_t *)(**(_QWORD **)&__src[0].f64[0] + 16);
          if (*(char *)(**(_QWORD **)&__src[0].f64[0] + 39) < 0)
          {
            v510 = *(void **)(v507 + 16);
            v509 = *(void **)(v507 + 24);
          }
          else
          {
            v509 = (void *)*(unsigned __int8 *)(**(_QWORD **)&__src[0].f64[0] + 39);
            v510 = (void *)(**(_QWORD **)&__src[0].f64[0] + 16);
          }
          object = v510;
          v923 = v509;
          v516 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v516 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)__dst);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
            if (__dst[24] && (__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          *(_QWORD *)&v517 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v518 = byte_254A4A4F8;
          }
          else
          {
            v517 = *(double *)&byte_254A4A4F8[8];
            v518 = *(const char **)byte_254A4A4F8;
          }
          *(_QWORD *)&v910.f64[0] = v518;
          v910.f64[1] = v517;
          *(_QWORD *)__dst = os_log_create(v518, (const char *)object);
          sub_20E86E5A8(&__dst[8], (uint64_t)&v910);
          sub_20E86E5A8(&__dst[40], (uint64_t)&object);
          v519 = *(NSObject **)__dst;
          sub_20E86E44C((uint64_t)__dst);
          sub_20FB24818(v506, v508, v519, OS_LOG_TYPE_ERROR);
          if (v504)
          {
            sub_20E8C003C((uint64_t)__src, "IMU dt factor reaches high magnitudes.");
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863714((uint64_t)__src);
        }
      }
    }
  }
  if ((*v11)[1].i8[4])
  {
    v520 = *v53;
    v521 = *(_OWORD *)(v8 + 1896);
    v522 = *(_OWORD *)(v8 + 1912);
    v523 = *(_OWORD *)(v8 + 1928);
    v524 = *(_OWORD *)(v8 + 1944);
    v525 = *(_OWORD *)(v8 + 1960);
    v526 = *(_OWORD *)(v8 + 1976);
    v527 = *(_OWORD *)(v8 + 1992);
    v528 = *(_OWORD *)(v8 + 2008);
    v529 = *(_OWORD *)(v8 + 2024);
    v530 = *(_OWORD *)(v8 + 2040);
    v531 = *(_OWORD *)(v8 + 2056);
    v532 = *(_OWORD *)(v8 + 2072);
    v533 = *(_OWORD *)(v8 + 2088);
    v534 = *(_OWORD *)(v8 + 2104);
    v535 = *(_OWORD *)(v8 + 2120);
    v536 = *(_OWORD *)(v8 + 2136);
    v537 = *(_OWORD *)(v8 + 2152);
    v538 = *(_OWORD *)(v8 + 2168);
    v539 = *(_OWORD *)(v8 + 2184);
    v540 = *(_OWORD *)(v8 + 2200);
    v541 = *(_OWORD *)(v8 + 2216);
    *(_QWORD *)(v10 + 352) = *(_QWORD *)(v8 + 2232);
    *(_OWORD *)(v10 + 320) = v540;
    *(_OWORD *)(v10 + 336) = v541;
    *(_OWORD *)(v10 + 288) = v538;
    *(_OWORD *)(v10 + 304) = v539;
    *(_OWORD *)(v10 + 256) = v536;
    *(_OWORD *)(v10 + 272) = v537;
    *(_OWORD *)(v10 + 224) = v534;
    *(_OWORD *)(v10 + 240) = v535;
    *(_OWORD *)(v10 + 192) = v532;
    *(_OWORD *)(v10 + 208) = v533;
    *(_OWORD *)(v10 + 160) = v530;
    *(_OWORD *)(v10 + 176) = v531;
    *(_OWORD *)(v10 + 128) = v528;
    *(_OWORD *)(v10 + 144) = v529;
    *(_OWORD *)(v10 + 96) = v526;
    *(_OWORD *)(v10 + 112) = v527;
    *(_OWORD *)(v10 + 64) = v524;
    *(_OWORD *)(v10 + 80) = v525;
    *(_OWORD *)(v10 + 32) = v522;
    *(_OWORD *)(v10 + 48) = v523;
    *(float64x2_t *)v10 = v520;
    *(_OWORD *)(v10 + 16) = v521;
    v542 = *(_OWORD *)(v8 + 3320);
    v543 = *(_OWORD *)(v8 + 3336);
    v544 = *(_OWORD *)(v8 + 3352);
    v545 = *(_OWORD *)(v8 + 3368);
    v546 = *(_OWORD *)(v8 + 3384);
    v547 = *(_OWORD *)(v8 + 3400);
    v548 = *(_OWORD *)(v8 + 3416);
    v549 = *(_OWORD *)(v8 + 3432);
    v550 = *(_OWORD *)(v8 + 3448);
    v551 = *(_OWORD *)(v8 + 3464);
    v552 = *(_OWORD *)(v8 + 3480);
    v553 = *(_OWORD *)(v8 + 3496);
    v554 = *(_OWORD *)(v8 + 3512);
    v555 = *(_OWORD *)(v8 + 3528);
    v556 = *(_OWORD *)(v8 + 3544);
    v557 = *(_OWORD *)(v8 + 3560);
    v558 = *(_OWORD *)(v8 + 3576);
    v559 = *(_OWORD *)(v8 + 3592);
    v560 = *(_OWORD *)(v8 + 3608);
    v561 = *(_OWORD *)(v8 + 3624);
    v562 = *(_OWORD *)(v8 + 3640);
    v563 = *(_OWORD *)(v8 + 3656);
    *(_QWORD *)(v10 + 712) = *(_QWORD *)(v8 + 3672);
    *(_OWORD *)(v10 + 680) = v562;
    *(_OWORD *)(v10 + 696) = v563;
    *(_OWORD *)(v10 + 648) = v560;
    *(_OWORD *)(v10 + 664) = v561;
    *(_OWORD *)(v10 + 616) = v558;
    *(_OWORD *)(v10 + 632) = v559;
    *(_OWORD *)(v10 + 584) = v556;
    *(_OWORD *)(v10 + 600) = v557;
    *(_OWORD *)(v10 + 552) = v554;
    *(_OWORD *)(v10 + 568) = v555;
    *(_OWORD *)(v10 + 520) = v552;
    *(_OWORD *)(v10 + 536) = v553;
    *(_OWORD *)(v10 + 488) = v550;
    *(_OWORD *)(v10 + 504) = v551;
    *(_OWORD *)(v10 + 456) = v548;
    *(_OWORD *)(v10 + 472) = v549;
    *(_OWORD *)(v10 + 424) = v546;
    *(_OWORD *)(v10 + 440) = v547;
    *(_OWORD *)(v10 + 392) = v544;
    *(_OWORD *)(v10 + 408) = v545;
    *(_OWORD *)(v10 + 360) = v542;
    *(_OWORD *)(v10 + 376) = v543;
  }
  if (v11[1][1].i8[4])
  {
    v564 = *(_OWORD *)(v8 + 2600);
    v565 = *(_OWORD *)(v8 + 2616);
    v566 = *(_OWORD *)(v8 + 2632);
    v567 = *(_OWORD *)(v8 + 2648);
    v568 = *(_OWORD *)(v8 + 2664);
    v569 = *(_OWORD *)(v8 + 2680);
    v570 = *(_OWORD *)(v8 + 2696);
    v571 = *(_OWORD *)(v8 + 2712);
    v572 = *(_OWORD *)(v8 + 2728);
    v573 = *(_OWORD *)(v8 + 2744);
    v574 = *(_OWORD *)(v8 + 2760);
    v575 = *(_OWORD *)(v8 + 2776);
    v576 = *(_OWORD *)(v8 + 2792);
    v577 = *(_OWORD *)(v8 + 2808);
    v578 = *(_OWORD *)(v8 + 2824);
    v579 = *(_OWORD *)(v8 + 2840);
    v580 = *(_OWORD *)(v8 + 2856);
    v581 = *(_OWORD *)(v8 + 2872);
    v582 = *(_OWORD *)(v8 + 2888);
    v583 = *(_OWORD *)(v8 + 2904);
    v584 = *(_OWORD *)(v8 + 2920);
    v585 = *(_OWORD *)(v8 + 2936);
    *(_QWORD *)(v10 + 1072) = *(_QWORD *)(v8 + 2952);
    *(_OWORD *)(v10 + 1040) = v584;
    *(_OWORD *)(v10 + 1056) = v585;
    *(_OWORD *)(v10 + 1008) = v582;
    *(_OWORD *)(v10 + 1024) = v583;
    *(_OWORD *)(v10 + 976) = v580;
    *(_OWORD *)(v10 + 992) = v581;
    *(_OWORD *)(v10 + 944) = v578;
    *(_OWORD *)(v10 + 960) = v579;
    *(_OWORD *)(v10 + 912) = v576;
    *(_OWORD *)(v10 + 928) = v577;
    *(_OWORD *)(v10 + 880) = v574;
    *(_OWORD *)(v10 + 896) = v575;
    *(_OWORD *)(v10 + 848) = v572;
    *(_OWORD *)(v10 + 864) = v573;
    *(_OWORD *)(v10 + 816) = v570;
    *(_OWORD *)(v10 + 832) = v571;
    *(_OWORD *)(v10 + 784) = v568;
    *(_OWORD *)(v10 + 800) = v569;
    *(_OWORD *)(v10 + 752) = v566;
    *(_OWORD *)(v10 + 768) = v567;
    *(_OWORD *)(v10 + 720) = v564;
    *(_OWORD *)(v10 + 736) = v565;
    v586 = *(_OWORD *)(v8 + 2240);
    v587 = *(_OWORD *)(v8 + 2256);
    v588 = *(_OWORD *)(v8 + 2272);
    v589 = *(_OWORD *)(v8 + 2288);
    v590 = *(_OWORD *)(v8 + 2304);
    v591 = *(_OWORD *)(v8 + 2320);
    v592 = *(_OWORD *)(v8 + 2336);
    v593 = *(_OWORD *)(v8 + 2352);
    v594 = *(_OWORD *)(v8 + 2368);
    v595 = *(_OWORD *)(v8 + 2384);
    v596 = *(_OWORD *)(v8 + 2400);
    v597 = *(_OWORD *)(v8 + 2416);
    v598 = *(_OWORD *)(v8 + 2432);
    v599 = *(_OWORD *)(v8 + 2448);
    v600 = *(_OWORD *)(v8 + 2464);
    v601 = *(_OWORD *)(v8 + 2480);
    v602 = *(_OWORD *)(v8 + 2496);
    v603 = *(_OWORD *)(v8 + 2512);
    v604 = *(_OWORD *)(v8 + 2528);
    v605 = *(_OWORD *)(v8 + 2544);
    v606 = *(_OWORD *)(v8 + 2560);
    v607 = *(_OWORD *)(v8 + 2576);
    *(_QWORD *)(v10 + 1432) = *(_QWORD *)(v8 + 2592);
    *(_OWORD *)(v10 + 1416) = v607;
    *(_OWORD *)(v10 + 1400) = v606;
    *(_OWORD *)(v10 + 1368) = v604;
    *(_OWORD *)(v10 + 1384) = v605;
    *(_OWORD *)(v10 + 1336) = v602;
    *(_OWORD *)(v10 + 1352) = v603;
    *(_OWORD *)(v10 + 1304) = v600;
    *(_OWORD *)(v10 + 1320) = v601;
    *(_OWORD *)(v10 + 1272) = v598;
    *(_OWORD *)(v10 + 1288) = v599;
    *(_OWORD *)(v10 + 1240) = v596;
    *(_OWORD *)(v10 + 1256) = v597;
    *(_OWORD *)(v10 + 1208) = v594;
    *(_OWORD *)(v10 + 1224) = v595;
    *(_OWORD *)(v10 + 1176) = v592;
    *(_OWORD *)(v10 + 1192) = v593;
    *(_OWORD *)(v10 + 1144) = v590;
    *(_OWORD *)(v10 + 1160) = v591;
    *(_OWORD *)(v10 + 1112) = v588;
    *(_OWORD *)(v10 + 1128) = v589;
    *(_OWORD *)(v10 + 1080) = v586;
    *(_OWORD *)(v10 + 1096) = v587;
    v608 = *(_OWORD *)(v8 + 2960);
    v609 = *(_OWORD *)(v8 + 2976);
    v610 = *(_OWORD *)(v8 + 2992);
    v611 = *(_OWORD *)(v8 + 3008);
    v612 = *(_OWORD *)(v8 + 3024);
    v613 = *(_OWORD *)(v8 + 3040);
    v614 = *(_OWORD *)(v8 + 3056);
    v615 = *(_OWORD *)(v8 + 3072);
    v616 = *(_OWORD *)(v8 + 3088);
    v617 = *(_OWORD *)(v8 + 3104);
    v618 = *(_OWORD *)(v8 + 3120);
    v619 = *(_OWORD *)(v8 + 3136);
    v620 = *(_OWORD *)(v8 + 3152);
    v621 = *(_OWORD *)(v8 + 3168);
    v622 = *(_OWORD *)(v8 + 3184);
    v623 = *(_OWORD *)(v8 + 3200);
    v624 = *(_OWORD *)(v8 + 3216);
    v625 = *(_OWORD *)(v8 + 3232);
    v626 = *(_OWORD *)(v8 + 3248);
    v627 = *(_OWORD *)(v8 + 3264);
    v628 = *(_OWORD *)(v8 + 3280);
    v629 = *(_OWORD *)(v8 + 3296);
    *(_QWORD *)(v10 + 1792) = *(_QWORD *)(v8 + 3312);
    *(_OWORD *)(v10 + 1760) = v628;
    *(_OWORD *)(v10 + 1776) = v629;
    *(_OWORD *)(v10 + 1728) = v626;
    *(_OWORD *)(v10 + 1744) = v627;
    *(_OWORD *)(v10 + 1696) = v624;
    *(_OWORD *)(v10 + 1712) = v625;
    *(_OWORD *)(v10 + 1664) = v622;
    *(_OWORD *)(v10 + 1680) = v623;
    *(_OWORD *)(v10 + 1632) = v620;
    *(_OWORD *)(v10 + 1648) = v621;
    *(_OWORD *)(v10 + 1600) = v618;
    *(_OWORD *)(v10 + 1616) = v619;
    *(_OWORD *)(v10 + 1568) = v616;
    *(_OWORD *)(v10 + 1584) = v617;
    *(_OWORD *)(v10 + 1536) = v614;
    *(_OWORD *)(v10 + 1552) = v615;
    *(_OWORD *)(v10 + 1504) = v612;
    *(_OWORD *)(v10 + 1520) = v613;
    *(_OWORD *)(v10 + 1472) = v610;
    *(_OWORD *)(v10 + 1488) = v611;
    *(_OWORD *)(v10 + 1440) = v608;
    *(_OWORD *)(v10 + 1456) = v609;
  }
  v630 = atomic_load((unsigned __int8 *)&qword_254A6B850);
  if ((v630 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B850))
  {
    bzero((char *)&xmmword_254A6B000 + 8, 0x6F8uLL);
    *(_QWORD *)&xmmword_254A6B000 = 0xBFF0000000000000;
    *(_QWORD *)&xmmword_254A6B080 = 0xBFF0000000000000;
    *(_QWORD *)&xmmword_254A6B100 = 0xBFF0000000000000;
    qword_254A6B180 = 0xBFF0000000000000;
    qword_254A6B200 = 0xBFF0000000000000;
    qword_254A6B280 = 0xBFF0000000000000;
    qword_254A6B300 = 0xBFF0000000000000;
    qword_254A6B380 = 0xBFF0000000000000;
    qword_254A6B400 = 0xBFF0000000000000;
    *((_QWORD *)&xmmword_254A6B478 + 1) = 0xBFF0000000000000;
    *((_QWORD *)&xmmword_254A6B4F8 + 1) = 0xBFF0000000000000;
    *((_QWORD *)&xmmword_254A6B578 + 1) = 0xBFF0000000000000;
    *(_QWORD *)&xmmword_254A6B600 = 0xBFF0000000000000;
    *(_QWORD *)&xmmword_254A6B680 = 0xBFF0000000000000;
    qword_254A6B700 = 0xBFF0000000000000;
    __cxa_guard_release(&qword_254A6B850);
  }
  if (v11[2][1].i8[4])
  {
    v631 = xmmword_254A6B000;
    v632 = *(_OWORD *)algn_254A6B010;
    v633 = xmmword_254A6B020;
    v634 = unk_254A6B030;
    v635 = xmmword_254A6B040;
    v636 = unk_254A6B050;
    v637 = xmmword_254A6B060;
    v638 = unk_254A6B070;
    v639 = xmmword_254A6B080;
    v640 = unk_254A6B090;
    v641 = xmmword_254A6B0A0;
    v642 = unk_254A6B0B0;
    v643 = xmmword_254A6B0C0;
    v644 = unk_254A6B0D0;
    v645 = xmmword_254A6B0E0;
    v646 = unk_254A6B0F0;
    v647 = xmmword_254A6B100;
    v648 = unk_254A6B110;
    v649 = xmmword_254A6B120;
    v650 = unk_254A6B130;
    v651 = xmmword_254A6B140;
    v652 = unk_254A6B150;
    *(_QWORD *)(v10 + 2152) = qword_254A6B160;
    *(_OWORD *)(v10 + 2136) = v652;
    *(_OWORD *)(v10 + 2120) = v651;
    *(_OWORD *)(v10 + 2104) = v650;
    *(_OWORD *)(v10 + 2088) = v649;
    *(_OWORD *)(v10 + 2072) = v648;
    *(_OWORD *)(v10 + 2056) = v647;
    *(_OWORD *)(v10 + 2040) = v646;
    *(_OWORD *)(v10 + 2024) = v645;
    *(_OWORD *)(v10 + 2008) = v644;
    *(_OWORD *)(v10 + 1992) = v643;
    *(_OWORD *)(v10 + 1976) = v642;
    *(_OWORD *)(v10 + 1960) = v641;
    *(_OWORD *)(v10 + 1944) = v640;
    *(_OWORD *)(v10 + 1928) = v639;
    *(_OWORD *)(v10 + 1912) = v638;
    *(_OWORD *)(v10 + 1896) = v637;
    *(_OWORD *)(v10 + 1880) = v636;
    *(_OWORD *)(v10 + 1864) = v635;
    *(_OWORD *)(v10 + 1848) = v634;
    *(_OWORD *)(v10 + 1832) = v633;
    *(_OWORD *)(v10 + 1816) = v632;
    *(_OWORD *)(v10 + 1800) = v631;
    v653 = xmmword_254A6B5A0;
    v654 = xmmword_254A6B5B0;
    v655 = (float64x2_t)xmmword_254A6B5C0;
    v656 = xmmword_254A6B5D0;
    v657 = (float64x2_t)xmmword_254A6B5E0;
    v658 = xmmword_254A6B5F0;
    v659 = xmmword_254A6B600;
    v660 = xmmword_254A6B610;
    v661 = xmmword_254A6B620;
    v662 = xmmword_254A6B630;
    v663 = xmmword_254A6B640;
    v664 = xmmword_254A6B650;
    v665 = xmmword_254A6B660;
    v666 = xmmword_254A6B670;
    v667 = xmmword_254A6B680;
    v668 = xmmword_254A6B690;
    v669 = xmmword_254A6B6A0;
    v670 = xmmword_254A6B6B0;
    v671 = xmmword_254A6B6C0;
    v672 = xmmword_254A6B6D0;
    v673 = xmmword_254A6B6E0;
    v674 = xmmword_254A6B6F0;
    *(_QWORD *)(v10 + 2512) = qword_254A6B700;
    *(_OWORD *)(v10 + 2480) = v673;
    *(_OWORD *)(v10 + 2496) = v674;
    *(_OWORD *)(v10 + 2448) = v671;
    *(_OWORD *)(v10 + 2464) = v672;
    *(_OWORD *)(v10 + 2416) = v669;
    *(_OWORD *)(v10 + 2432) = v670;
    *(_OWORD *)(v10 + 2384) = v667;
    *(_OWORD *)(v10 + 2400) = v668;
    *(_OWORD *)(v10 + 2352) = v665;
    *(_OWORD *)(v10 + 2368) = v666;
    *(_OWORD *)(v10 + 2320) = v663;
    *(_OWORD *)(v10 + 2336) = v664;
    *(_OWORD *)(v10 + 2288) = v661;
    *(_OWORD *)(v10 + 2304) = v662;
    *(_OWORD *)(v10 + 2256) = v659;
    *(_OWORD *)(v10 + 2272) = v660;
    *(float64x2_t *)(v10 + 2224) = v657;
    *(_OWORD *)(v10 + 2240) = v658;
    *(float64x2_t *)(v10 + 2192) = v655;
    *(_OWORD *)(v10 + 2208) = v656;
    v655.f64[0] = v882;
    v655.f64[1] = v894.f64[0];
    *(_OWORD *)(v10 + 2160) = v653;
    *(_OWORD *)(v10 + 2176) = v654;
    v675 = vnegq_f64(v655);
    *(_QWORD *)&v655.f64[0] = v897.i64[0];
    *(_QWORD *)&v655.f64[1] = v880;
    v657.f64[0] = v899.f64[0];
    v657.f64[1] = v884;
    *(float64x2_t *)(v10 + 1800) = v675;
    *(_QWORD *)(v10 + 1816) = *(_OWORD *)&vnegq_f64(v891);
    *(float64x2_t *)(v10 + 1920) = vnegq_f64(v655);
    *(_QWORD *)(v10 + 1936) = *(_OWORD *)&vnegq_f64(v886);
    *(float64x2_t *)(v10 + 2040) = vnegq_f64(v657);
    *(_QWORD *)(v10 + 2056) = *(_OWORD *)&vnegq_f64(v888);
  }
  if (v11[3][1].i8[4])
  {
    v676 = xmmword_254A6B2D0;
    v677 = unk_254A6B2E0;
    v678 = xmmword_254A6B2F0;
    v679 = *(_OWORD *)&qword_254A6B300;
    v680 = xmmword_254A6B310;
    v681 = unk_254A6B320;
    v682 = xmmword_254A6B330;
    v683 = unk_254A6B340;
    v684 = xmmword_254A6B350;
    v685 = unk_254A6B360;
    v686 = xmmword_254A6B370;
    v687 = *(_OWORD *)&qword_254A6B380;
    v688 = xmmword_254A6B390;
    v689 = unk_254A6B3A0;
    v690 = xmmword_254A6B3B0;
    v691 = unk_254A6B3C0;
    v692 = xmmword_254A6B3D0;
    v693 = unk_254A6B3E0;
    v694 = xmmword_254A6B3F0;
    v695 = *(_OWORD *)&qword_254A6B400;
    v696 = xmmword_254A6B410;
    v697 = unk_254A6B420;
    *(_QWORD *)(v10 + 2872) = qword_254A6B430;
    *(_OWORD *)(v10 + 2856) = v697;
    *(_OWORD *)(v10 + 2840) = v696;
    *(_OWORD *)(v10 + 2824) = v695;
    *(_OWORD *)(v10 + 2808) = v694;
    *(_OWORD *)(v10 + 2792) = v693;
    *(_OWORD *)(v10 + 2776) = v692;
    *(_OWORD *)(v10 + 2760) = v691;
    *(_OWORD *)(v10 + 2744) = v690;
    *(_OWORD *)(v10 + 2728) = v689;
    *(_OWORD *)(v10 + 2712) = v688;
    *(_OWORD *)(v10 + 2696) = v687;
    *(_OWORD *)(v10 + 2680) = v686;
    *(_OWORD *)(v10 + 2664) = v685;
    *(_OWORD *)(v10 + 2648) = v684;
    *(_OWORD *)(v10 + 2632) = v683;
    *(_OWORD *)(v10 + 2616) = v682;
    *(_OWORD *)(v10 + 2600) = v681;
    *(_OWORD *)(v10 + 2584) = v680;
    *(_OWORD *)(v10 + 2568) = v679;
    *(_OWORD *)(v10 + 2552) = v678;
    *(_OWORD *)(v10 + 2536) = v677;
    *(_OWORD *)(v10 + 2520) = v676;
    v698 = xmmword_254A6B168;
    v699 = *(_OWORD *)algn_254A6B178;
    v700 = xmmword_254A6B188;
    v701 = unk_254A6B198;
    v702 = xmmword_254A6B1A8;
    v703 = unk_254A6B1B8;
    v704 = xmmword_254A6B1C8;
    v705 = unk_254A6B1D8;
    v706 = xmmword_254A6B1E8;
    v707 = unk_254A6B1F8;
    v708 = xmmword_254A6B208;
    v709 = unk_254A6B218;
    v710 = xmmword_254A6B228;
    v711 = unk_254A6B238;
    v712 = xmmword_254A6B248;
    v713 = unk_254A6B258;
    v714 = xmmword_254A6B268;
    v715 = unk_254A6B278;
    v716 = xmmword_254A6B288;
    v717 = unk_254A6B298;
    v718 = xmmword_254A6B2A8;
    v719 = unk_254A6B2B8;
    *(_QWORD *)(v10 + 3232) = qword_254A6B2C8;
    *(_OWORD *)(v10 + 3200) = v718;
    *(_OWORD *)(v10 + 3216) = v719;
    *(_OWORD *)(v10 + 3168) = v716;
    *(_OWORD *)(v10 + 3184) = v717;
    *(_OWORD *)(v10 + 3136) = v714;
    *(_OWORD *)(v10 + 3152) = v715;
    *(_OWORD *)(v10 + 3104) = v712;
    *(_OWORD *)(v10 + 3120) = v713;
    *(_OWORD *)(v10 + 3072) = v710;
    *(_OWORD *)(v10 + 3088) = v711;
    *(_OWORD *)(v10 + 3040) = v708;
    *(_OWORD *)(v10 + 3056) = v709;
    *(_OWORD *)(v10 + 3008) = v706;
    *(_OWORD *)(v10 + 3024) = v707;
    *(_OWORD *)(v10 + 2976) = v704;
    *(_OWORD *)(v10 + 2992) = v705;
    *(_OWORD *)(v10 + 2944) = v702;
    *(_OWORD *)(v10 + 2960) = v703;
    *(_OWORD *)(v10 + 2912) = v700;
    *(_OWORD *)(v10 + 2928) = v701;
    *(_OWORD *)(v10 + 2880) = v698;
    *(_OWORD *)(v10 + 2896) = v699;
    v720 = xmmword_254A6B438;
    v721 = unk_254A6B448;
    v722 = xmmword_254A6B458;
    v723 = unk_254A6B468;
    v724 = xmmword_254A6B478;
    v725 = unk_254A6B488;
    v726 = xmmword_254A6B498;
    v727 = unk_254A6B4A8;
    v728 = xmmword_254A6B4B8;
    v729 = unk_254A6B4C8;
    v730 = xmmword_254A6B4D8;
    v731 = unk_254A6B4E8;
    v732 = xmmword_254A6B4F8;
    v733 = unk_254A6B508;
    v734 = xmmword_254A6B518;
    v735 = unk_254A6B528;
    v736 = xmmword_254A6B538;
    v737 = unk_254A6B548;
    v738 = xmmword_254A6B558;
    v739 = unk_254A6B568;
    v740 = xmmword_254A6B578;
    v741 = xmmword_254A6B588;
    *(_QWORD *)(v10 + 3592) = qword_254A6B598;
    *(_OWORD *)(v10 + 3576) = v741;
    *(_OWORD *)(v10 + 3560) = v740;
    *(_OWORD *)(v10 + 3544) = v739;
    *(_OWORD *)(v10 + 3528) = v738;
    *(_OWORD *)(v10 + 3512) = v737;
    *(_OWORD *)(v10 + 3496) = v736;
    *(_OWORD *)(v10 + 3480) = v735;
    *(_OWORD *)(v10 + 3464) = v734;
    *(_OWORD *)(v10 + 3448) = v733;
    *(_OWORD *)(v10 + 3432) = v732;
    *(_OWORD *)(v10 + 3416) = v731;
    *(_OWORD *)(v10 + 3400) = v730;
    *(_OWORD *)(v10 + 3384) = v729;
    *(_OWORD *)(v10 + 3368) = v728;
    *(_OWORD *)(v10 + 3352) = v727;
    *(_OWORD *)(v10 + 3336) = v726;
    *(_OWORD *)(v10 + 3320) = v725;
    *(_OWORD *)(v10 + 3304) = v724;
    *(_OWORD *)(v10 + 3288) = v723;
    *(_OWORD *)(v10 + 3272) = v722;
    *(_OWORD *)(v10 + 3256) = v721;
    *(_OWORD *)(v10 + 3240) = v720;
  }
  if (v11[4][1].i8[4])
  {
    v742 = *(_OWORD *)(v8 + 3680);
    v743 = *(_OWORD *)(v8 + 3696);
    v744 = *(_OWORD *)(v8 + 3712);
    *(_OWORD *)(v10 + 3648) = *(_OWORD *)(v8 + 3728);
    *(_OWORD *)(v10 + 3632) = v744;
    *(_OWORD *)(v10 + 3616) = v743;
    *(_OWORD *)(v10 + 3600) = v742;
    v745 = *(_OWORD *)(v8 + 3744);
    v746 = *(_OWORD *)(v8 + 3760);
    v747 = *(_OWORD *)(v8 + 3776);
    *(_QWORD *)(v10 + 3712) = *(_QWORD *)(v8 + 3792);
    *(_OWORD *)(v10 + 3696) = v747;
    *(_OWORD *)(v10 + 3680) = v746;
    *(_OWORD *)(v10 + 3664) = v745;
  }
  if (v11[5][1].i8[4])
  {
    v748 = *(_OWORD *)(v8 + 7688);
    v749 = *(_OWORD *)(v8 + 7704);
    v750 = *(_OWORD *)(v8 + 7736);
    *(_OWORD *)(v10 + 3752) = *(_OWORD *)(v8 + 7720);
    *(_OWORD *)(v10 + 3768) = v750;
    *(_OWORD *)(v10 + 3720) = v748;
    *(_OWORD *)(v10 + 3736) = v749;
    v751 = *(_OWORD *)(v8 + 7752);
    v752 = *(_OWORD *)(v8 + 7768);
    v753 = *(_OWORD *)(v8 + 7784);
    *(_QWORD *)(v10 + 3832) = *(_QWORD *)(v8 + 7800);
    *(_OWORD *)(v10 + 3800) = v752;
    *(_OWORD *)(v10 + 3816) = v753;
    *(_OWORD *)(v10 + 3784) = v751;
  }
  if (v11[6][1].i8[4])
    memcpy((void *)(v10 + 3840), (const void *)(v8 + 7808), 0x168uLL);
  if (v11[7][1].i8[4])
    memcpy((void *)(v10 + 4200), (const void *)(v8 + 8168), 0x168uLL);
  if (v11[8][1].i8[4])
    memcpy((void *)(v10 + 4560), (const void *)(v8 + 8528), 0x168uLL);
  if (v11[9][1].i8[4])
    memcpy((void *)(v10 + 4920), (const void *)(v8 + 8888), 0x168uLL);
  return 1;
}

void sub_20FB1D1D4(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEE8]))
  {
    if (SLOBYTE(STACK[0xEE7]) < 0)
      operator delete((void *)STACK[0xED0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D278(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D28C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEF0]) && SLOBYTE(STACK[0xEEF]) < 0)
    operator delete((void *)STACK[0xED8]);
  if (STACK[0xED0])
    os_release((void *)STACK[0xED0]);
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D2C4(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D2D8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D2EC(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEF0]) && SLOBYTE(STACK[0xEEF]) < 0)
    operator delete((void *)STACK[0xED8]);
  if (STACK[0xED0])
    os_release((void *)STACK[0xED0]);
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D328(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D33C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D350(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEF0]) && SLOBYTE(STACK[0xEEF]) < 0)
    operator delete((void *)STACK[0xED8]);
  if (STACK[0xED0])
    os_release((void *)STACK[0xED0]);
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D388(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D3A0(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D3B4(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEF0]) && SLOBYTE(STACK[0xEEF]) < 0)
    operator delete((void *)STACK[0xED8]);
  if (STACK[0xED0])
    os_release((void *)STACK[0xED0]);
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D400(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEF0]) && SLOBYTE(STACK[0xEEF]) < 0)
    operator delete((void *)STACK[0xED8]);
  if (STACK[0xED0])
    os_release((void *)STACK[0xED0]);
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D43C(_Unwind_Exception *a1)
{
  sub_20E86E8C4((uint64_t *)&STACK[0xDB0]);
  sub_20E86E8C4((uint64_t *)&STACK[0xE88]);
  sub_20E86E658((uint64_t)&STACK[0xED0]);
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D4F8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D524()
{
  sub_20E863714(&STACK[0x650]);
  JUMPOUT(0x20FB1D698);
}

void sub_20FB1D538()
{
  if (LOBYTE(STACK[0xEA8]) && SLOBYTE(STACK[0xEA7]) < 0)
    operator delete((void *)STACK[0xE90]);
  if (STACK[0xE88])
    os_release((void *)STACK[0xE88]);
  sub_20E863714((uint64_t)&STACK[0x650]);
  JUMPOUT(0x20FB1D698);
}

void sub_20FB1D578(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D58C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D5A4(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEF0]) && SLOBYTE(STACK[0xEEF]) < 0)
    operator delete((void *)STACK[0xED8]);
  if (STACK[0xED0])
    os_release((void *)STACK[0xED0]);
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_20FB1D5DC(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xEF0]) && SLOBYTE(STACK[0xEEF]) < 0)
    operator delete((void *)STACK[0xED8]);
  if (STACK[0xED0])
    os_release((void *)STACK[0xED0]);
  sub_20E863714((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

uint64_t sub_20FB1D62C()
{
  unint64_t v0;

  STACK[0x478] = v0;
  return sub_20FB1D694();
}

uint64_t sub_20FB1D638()
{
  unint64_t v0;

  STACK[0x478] = v0;
  return sub_20FB1D694();
}

void sub_20FB1D640()
{
  void *v0;
  int v1;

  if (SLOBYTE(STACK[0xEE7]) < 0)
  {
    operator delete((void *)STACK[0xED0]);
    if ((v1 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v1)
  {
LABEL_6:
    sub_20FB237E4(*(float64x2_t **)(STACK[0x478] + 32), (float64x2_t *)&STACK[0xE60]);
    JUMPOUT(0x20FB1D6B4);
  }
  __cxa_free_exception(v0);
  goto LABEL_6;
}

uint64_t sub_20FB1D674()
{
  unint64_t v0;

  STACK[0x478] = v0;
  return sub_20FB1D694();
}

uint64_t sub_20FB1D684()
{
  unint64_t v0;

  STACK[0x478] = v0;
  return sub_20FB1D694();
}

uint64_t sub_20FB1D68C()
{
  unint64_t v0;

  STACK[0x478] = v0;
  return sub_20FB1D694();
}

void sub_20FB1D6AC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20FB1D6B4);
  sub_20E860DA4(a1);
}

void sub_20FB1D6C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 *v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  __int128 *v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  __int128 v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  __int128 v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  __int128 v901;
  __int128 v902;
  __int128 v903;
  __int128 v904;
  __int128 v905;
  __int128 v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  __int128 v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  __int128 v942;
  __int128 v943;
  __int128 v944;
  __int128 v945;
  __int128 v946;
  __int128 v947;
  __int128 v948;
  __int128 v949;
  __int128 v950;
  __int128 v951;
  __int128 v952;
  __int128 v953;
  __int128 v954;
  __int128 v955;
  __int128 v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  __int128 v983;
  __int128 v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  __int128 v988;
  __int128 v989;
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  __int128 v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  __int128 v1002;
  __int128 v1003;
  __int128 v1004;
  __int128 v1005;
  __int128 v1006;
  __int128 v1007;
  __int128 v1008;
  __int128 v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  __int128 v1034;
  __int128 v1035;
  __int128 v1036;
  __int128 v1037;
  __int128 v1038;
  __int128 v1039;
  __int128 v1040;
  __int128 v1041;
  __int128 v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  __int128 v1056;
  __int128 v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  __int128 v1076;
  __int128 v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  __int128 v1182;
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  __int128 v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  __int128 v1205;
  __int128 v1206;
  __int128 v1207;
  __int128 v1208;
  __int128 v1209;
  __int128 v1210;
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  __int128 v1225;
  __int128 v1226;
  __int128 v1227;
  __int128 v1228;
  __int128 v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  __int128 v1236;
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  __int128 v1244;
  __int128 v1245;
  __int128 v1246;
  __int128 v1247;
  __int128 v1248;
  __int128 v1249;
  __int128 v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  __int128 v1254;
  __int128 v1255;
  __int128 v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  __int128 v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  __int128 v1272;
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  __int128 v1290;
  __int128 v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  __int128 v1308;
  __int128 v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  __int128 v1317;
  __int128 v1318;
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  __int128 v1326;
  __int128 v1327;
  __int128 v1328;
  __int128 v1329;
  __int128 v1330;
  __int128 v1331;
  __int128 v1332;
  __int128 v1333;
  __int128 v1334;
  __int128 v1335;
  __int128 v1336;
  __int128 v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  __int128 v1353;
  __int128 v1354;
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  __int128 v1366;
  __int128 v1367;
  __int128 v1368;
  __int128 v1369;
  __int128 v1370;
  __int128 v1371;
  __int128 v1372;
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  __int128 v1379;
  __int128 v1380;
  __int128 v1381;
  __int128 v1382;
  __int128 v1383;
  __int128 v1384;
  __int128 v1385;
  __int128 v1386;
  __int128 v1387;
  __int128 v1388;
  __int128 v1389;
  __int128 v1390;
  __int128 v1391;
  __int128 v1392;
  __int128 v1393;
  __int128 v1394;
  __int128 v1395;
  __int128 v1396;
  __int128 v1397;
  __int128 v1398;
  __int128 v1399;
  __int128 v1400;
  __int128 v1401;
  __int128 v1402;
  __int128 v1403;
  __int128 v1404;
  __int128 v1405;
  __int128 v1406;
  __int128 v1407;
  __int128 v1408;
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  __int128 v1412;
  __int128 v1413;
  __int128 v1414;
  __int128 v1415;
  __int128 v1416;
  __int128 v1417;
  __int128 v1418;
  __int128 v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  __int128 v1424;
  __int128 v1425;
  __int128 v1426;
  __int128 v1427;
  __int128 v1428;
  __int128 v1429;
  __int128 v1430;
  __int128 v1431;
  __int128 v1432;
  __int128 v1433;
  __int128 v1434;
  __int128 v1435;
  __int128 v1436;
  __int128 v1437;
  __int128 v1438;
  __int128 v1439;
  __int128 v1440;
  __int128 v1441;
  __int128 v1442;
  __int128 v1443;
  __int128 v1444;
  __int128 v1445;
  __int128 v1446;
  __int128 v1447;
  __int128 v1448;
  __int128 v1449;
  __int128 v1450;
  __int128 v1451;
  __int128 v1452;
  __int128 v1453;
  __int128 v1454;
  __int128 v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  __int128 v1464;
  __int128 v1465;
  __int128 v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  __int128 v1478;
  __int128 v1479;
  __int128 v1480;
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  __int128 v1488;
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  __int128 v1495;
  __int128 v1496;
  __int128 v1497;
  __int128 v1498;
  __int128 v1499;
  __int128 v1500;
  __int128 v1501;
  __int128 v1502;
  __int128 v1503;
  __int128 v1504;
  __int128 v1505;
  __int128 v1506;
  __int128 v1507;
  __int128 v1508;
  __int128 v1509;
  __int128 v1510;
  __int128 v1511;
  __int128 v1512;
  __int128 v1513;
  __int128 v1514;
  __int128 v1515;
  __int128 v1516;
  __int128 v1517;
  __int128 v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  __int128 v1523;
  __int128 v1524;
  __int128 v1525;
  __int128 v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  __int128 v1531;
  __int128 v1532;
  __int128 v1533;
  __int128 v1534;
  __int128 v1535;
  __int128 v1536;
  __int128 v1537;
  __int128 v1538;
  __int128 v1539;
  __int128 v1540;
  __int128 v1541;
  __int128 v1542;
  __int128 v1543;
  __int128 v1544;
  __int128 v1545;
  __int128 v1546;
  __int128 v1547;
  __int128 v1548;
  __int128 v1549;
  __int128 v1550;
  __int128 v1551;
  __int128 v1552;
  __int128 v1553;
  __int128 v1554;
  __int128 v1555;
  __int128 v1556;
  __int128 v1557;
  __int128 v1558;
  __int128 v1559;
  __int128 v1560;
  __int128 v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  __int128 v1568;
  __int128 v1569;
  __int128 v1570;
  __int128 v1571;
  __int128 v1572;
  __int128 v1573;
  __int128 v1574;
  __int128 v1575;
  __int128 v1576;
  __int128 v1577;
  __int128 v1578;
  __int128 v1579;
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  __int128 v1583;
  __int128 v1584;
  __int128 v1585;
  __int128 v1586;
  __int128 v1587;
  __int128 v1588;
  __int128 v1589;
  __int128 v1590;
  __int128 v1591;
  __int128 v1592;
  __int128 v1593;
  __int128 v1594;
  __int128 v1595;
  __int128 v1596;
  __int128 v1597;
  __int128 v1598;
  __int128 v1599;
  __int128 v1600;
  __int128 v1601;
  __int128 v1602;
  __int128 v1603;
  __int128 v1604;
  __int128 v1605;
  __int128 v1606;
  __int128 v1607;
  __int128 v1608;
  __int128 v1609;
  __int128 v1610;
  __int128 v1611;
  __int128 v1612;
  __int128 v1613;
  __int128 v1614;
  __int128 v1615;
  __int128 v1616;
  __int128 v1617;
  __int128 v1618;
  __int128 v1619;
  __int128 v1620;
  __int128 v1621;
  __int128 v1622;
  __int128 v1623;
  __int128 v1624;
  __int128 v1625;
  __int128 v1626;
  __int128 v1627;
  __int128 v1628;
  __int128 v1629;
  __int128 v1630;
  __int128 v1631;
  __int128 v1632;
  __int128 v1633;
  __int128 v1634;
  __int128 v1635;
  __int128 v1636;
  __int128 v1637;
  __int128 v1638;
  __int128 v1639;
  __int128 v1640;
  __int128 v1641;
  __int128 v1642;
  __int128 v1643;
  __int128 v1644;
  __int128 v1645;
  __int128 v1646;
  __int128 v1647;
  __int128 v1648;
  __int128 v1649;
  __int128 v1650;
  __int128 v1651;
  __int128 v1652;
  __int128 v1653;
  __int128 v1654;
  __int128 v1655;
  __int128 v1656;
  __int128 v1657;
  __int128 v1658;
  __int128 v1659;
  __int128 v1660;
  __int128 v1661;
  __int128 v1662;
  __int128 v1663;
  __int128 v1664;
  __int128 v1665;
  __int128 v1666;
  __int128 v1667;
  __int128 v1668;
  __int128 v1669;
  __int128 v1670;
  __int128 v1671;
  __int128 v1672;
  __int128 v1673;
  __int128 v1674;
  __int128 v1675;
  __int128 v1676;
  __int128 v1677;
  __int128 v1678;
  __int128 v1679;
  __int128 v1680;
  __int128 v1681;
  __int128 v1682;
  __int128 v1683;
  __int128 v1684;
  __int128 v1685;
  __int128 v1686;
  __int128 v1687;
  __int128 v1688;
  __int128 v1689;
  __int128 v1690;
  __int128 v1691;
  __int128 v1692;
  __int128 v1693;
  __int128 v1694;
  __int128 v1695;
  __int128 v1696;
  __int128 v1697;
  __int128 v1698;
  __int128 v1699;
  __int128 v1700;
  __int128 v1701;
  __int128 v1702;
  __int128 v1703;
  __int128 v1704;
  __int128 v1705;
  __int128 v1706;
  __int128 v1707;
  __int128 v1708;
  __int128 v1709;
  __int128 v1710;
  __int128 v1711;
  __int128 v1712;
  __int128 v1713;
  __int128 v1714;
  __int128 v1715;
  __int128 v1716;
  __int128 v1717;
  __int128 v1718;
  __int128 v1719;
  __int128 v1720;
  __int128 v1721;
  __int128 v1722;
  __int128 v1723;
  __int128 v1724;
  __int128 v1725;
  __int128 v1726;
  __int128 v1727;
  __int128 v1728;
  __int128 v1729;
  __int128 v1730;
  __int128 v1731;
  __int128 v1732;
  __int128 v1733;
  __int128 v1734;
  __int128 v1735;
  __int128 v1736;
  __int128 v1737;
  __int128 v1738;
  __int128 v1739;
  __int128 v1740;
  __int128 v1741;
  __int128 v1742;
  __int128 v1743;
  __int128 v1744;
  __int128 v1745;
  __int128 v1746;
  __int128 v1747;
  __int128 v1748;
  __int128 v1749;
  __int128 v1750;
  __int128 v1751;
  __int128 v1752;
  __int128 v1753;
  __int128 v1754;
  __int128 v1755;
  __int128 v1756;
  __int128 v1757;
  __int128 v1758;
  __int128 v1759;
  __int128 v1760;
  __int128 v1761;
  __int128 v1762;
  __int128 v1763;
  __int128 v1764;
  __int128 v1765;
  __int128 v1766;
  __int128 v1767;
  __int128 v1768;
  __int128 v1769;
  __int128 v1770;
  __int128 v1771;
  __int128 v1772;
  __int128 v1773;
  __int128 v1774;
  __int128 v1775;
  __int128 v1776;
  __int128 v1777;
  __int128 v1778;
  __int128 v1779;
  __int128 v1780;
  __int128 v1781;
  __int128 v1782;
  __int128 v1783;
  __int128 v1784;
  __int128 v1785;
  __int128 v1786;
  __int128 v1787;
  __int128 v1788;
  __int128 v1789;
  __int128 v1790;
  __int128 v1791;
  __int128 v1792;
  __int128 v1793;
  __int128 v1794;
  __int128 v1795;
  __int128 v1796;
  __int128 v1797;
  __int128 v1798;
  __int128 v1799;
  __int128 v1800;
  __int128 v1801;
  __int128 v1802;
  __int128 v1803;
  __int128 v1804;
  __int128 v1805;
  __int128 v1806;
  __int128 v1807;
  __int128 v1808;
  __int128 v1809;
  __int128 v1810;
  __int128 v1811;
  __int128 v1812;
  __int128 v1813;
  __int128 v1814;
  __int128 v1815;
  __int128 v1816;
  __int128 v1817;
  __int128 v1818;
  __int128 v1819;
  __int128 v1820;
  __int128 v1821;
  __int128 v1822;
  __int128 v1823;
  __int128 v1824;
  __int128 v1825;
  __int128 v1826;
  __int128 v1827;
  __int128 v1828;
  __int128 v1829;
  __int128 v1830;
  __int128 v1831;
  __int128 v1832;
  __int128 v1833;
  __int128 v1834;
  __int128 v1835;
  __int128 v1836;
  __int128 v1837;
  __int128 v1838;
  __int128 v1839;
  __int128 v1840;
  __int128 v1841;
  __int128 v1842;
  __int128 v1843;
  __int128 v1844;
  __int128 v1845;
  __int128 v1846;
  __int128 v1847;
  __int128 v1848;
  __int128 v1849;
  __int128 v1850;
  __int128 v1851;
  __int128 v1852;
  __int128 v1853;
  __int128 v1854;
  __int128 v1855;
  __int128 v1856;
  __int128 v1857;
  __int128 v1858;
  __int128 v1859;
  __int128 v1860;
  __int128 v1861;
  __int128 v1862;
  __int128 v1863;
  __int128 v1864;
  __int128 v1865;
  __int128 v1866;
  __int128 v1867;
  __int128 v1868;
  __int128 v1869;
  __int128 v1870;
  __int128 v1871;
  __int128 v1872;
  __int128 v1873;
  __int128 v1874;
  __int128 v1875;
  __int128 v1876;
  __int128 v1877;
  __int128 v1878;
  __int128 v1879;
  __int128 v1880;
  __int128 v1881;
  __int128 v1882;
  __int128 v1883;
  __int128 v1884;
  __int128 v1885;
  __int128 v1886;
  __int128 v1887;
  __int128 v1888;
  __int128 v1889;
  __int128 v1890;
  __int128 v1891;
  __int128 v1892;
  __int128 v1893;
  __int128 v1894;
  __int128 v1895;
  __int128 v1896;
  __int128 v1897;
  __int128 v1898;
  __int128 v1899;
  __int128 v1900;
  __int128 v1901;
  __int128 v1902;
  __int128 v1903;
  __int128 v1904;
  __int128 v1905;
  __int128 v1906;
  __int128 v1907;
  __int128 v1908;
  __int128 v1909;
  __int128 v1910;
  __int128 v1911;
  __int128 v1912;
  __int128 v1913;
  __int128 v1914;
  __int128 v1915;
  __int128 v1916;
  __int128 v1917;
  __int128 v1918;
  __int128 v1919;
  __int128 v1920;
  __int128 v1921;
  __int128 v1922;
  __int128 v1923;
  __int128 v1924;
  __int128 v1925;
  __int128 v1926;
  __int128 v1927;
  __int128 v1928;
  __int128 v1929;
  __int128 v1930;
  __int128 v1931;
  __int128 v1932;
  __int128 v1933;
  __int128 v1934;
  __int128 v1935;
  __int128 v1936;
  __int128 v1937;
  __int128 v1938;
  __int128 v1939;
  __int128 v1940;
  __int128 v1941;
  __int128 v1942;
  __int128 v1943;
  __int128 v1944;
  __int128 v1945;
  __int128 v1946;
  __int128 v1947;
  __int128 v1948;
  __int128 v1949;
  __int128 v1950;
  __int128 v1951;
  __int128 v1952;
  __int128 v1953;
  __int128 v1954;
  __int128 v1955;
  __int128 v1956;
  __int128 v1957;
  __int128 v1958;
  __int128 v1959;
  __int128 v1960;
  __int128 v1961;
  __int128 v1962;
  __int128 v1963;
  __int128 v1964;
  __int128 v1965;
  __int128 v1966;
  __int128 v1967;
  __int128 v1968;
  __int128 v1969;
  __int128 v1970;
  __int128 v1971;
  __int128 v1972;
  __int128 v1973;
  __int128 v1974;
  __int128 v1975;
  __int128 v1976;
  __int128 v1977;
  __int128 v1978;
  __int128 v1979;
  __int128 v1980;
  __int128 v1981;
  __int128 v1982;
  __int128 v1983;
  __int128 v1984;
  __int128 v1985;
  __int128 v1986;
  __int128 v1987;
  __int128 v1988;
  __int128 v1989;
  __int128 v1990;
  __int128 v1991;
  __int128 v1992;
  __int128 v1993;
  __int128 v1994;
  __int128 v1995;
  __int128 v1996;
  __int128 v1997;
  __int128 v1998;
  __int128 v1999;
  __int128 v2000;
  __int128 v2001;
  __int128 v2002;
  __int128 v2003;
  __int128 v2004;
  __int128 v2005;
  __int128 v2006;
  __int128 v2007;
  __int128 v2008;
  __int128 v2009;
  __int128 v2010;
  __int128 v2011;
  __int128 v2012;
  __int128 v2013;
  __int128 v2014;
  __int128 v2015;
  __int128 v2016;
  __int128 v2017;
  __int128 v2018;
  __int128 v2019;
  __int128 v2020;
  __int128 v2021;
  __int128 v2022;
  __int128 v2023;
  __int128 v2024;
  __int128 v2025;
  __int128 v2026;
  __int128 v2027;
  __int128 v2028;
  __int128 v2029;
  __int128 v2030;
  __int128 v2031;
  __int128 v2032;
  __int128 v2033;
  __int128 v2034;
  __int128 v2035;
  __int128 v2036;
  __int128 v2037;
  __int128 v2038;
  __int128 v2039;
  __int128 v2040;
  __int128 v2041;
  __int128 v2042;
  __int128 v2043;
  __int128 v2044;
  __int128 v2045;
  __int128 v2046;
  __int128 v2047;
  __int128 v2048;
  __int128 v2049;
  __int128 v2050;
  __int128 v2051;
  __int128 v2052;
  __int128 v2053;
  __int128 v2054;
  __int128 v2055;
  __int128 v2056;
  __int128 v2057;
  __int128 v2058;
  __int128 v2059;
  __int128 v2060;
  __int128 v2061;
  __int128 v2062;
  __int128 v2063;
  __int128 v2064;
  __int128 v2065;
  __int128 v2066;
  __int128 v2067;
  __int128 v2068;
  __int128 v2069;
  __int128 v2070;
  __int128 v2071;
  __int128 v2072;
  __int128 v2073;
  __int128 v2074;
  __int128 v2075;
  __int128 v2076;
  __int128 v2077;
  __int128 v2078;
  __int128 v2079;
  __int128 v2080;
  __int128 v2081;
  __int128 v2082;
  __int128 v2083;
  __int128 v2084;
  __int128 v2085;
  __int128 v2086;
  __int128 v2087;
  __int128 v2088;
  __int128 v2089;
  __int128 v2090;
  __int128 v2091;
  __int128 v2092;
  __int128 v2093;
  __int128 v2094;
  __int128 v2095;
  __int128 v2096;
  __int128 v2097;
  __int128 v2098;
  __int128 v2099;
  __int128 v2100;
  __int128 v2101;
  __int128 v2102;
  __int128 v2103;
  __int128 v2104;
  __int128 v2105;
  __int128 v2106;
  __int128 v2107;
  __int128 v2108;
  __int128 v2109;
  __int128 v2110;
  __int128 v2111;
  __int128 v2112;
  __int128 v2113;
  __int128 v2114;
  __int128 v2115;
  __int128 v2116;
  __int128 v2117;
  __int128 v2118;
  __int128 v2119;
  __int128 v2120;
  __int128 v2121;
  __int128 v2122;
  __int128 v2123;
  __int128 v2124;
  __int128 v2125;
  __int128 v2126;
  __int128 v2127;
  __int128 v2128;
  __int128 v2129;
  __int128 v2130;
  __int128 v2131;
  __int128 v2132;
  __int128 v2133;
  __int128 v2134;
  __int128 v2135;
  __int128 v2136;
  __int128 v2137;
  __int128 v2138;
  __int128 v2139;
  __int128 v2140;
  __int128 v2141;
  __int128 v2142;
  __int128 v2143;
  __int128 v2144;
  __int128 v2145;
  __int128 v2146;
  __int128 v2147;
  __int128 v2148;
  __int128 v2149;
  __int128 v2150;
  __int128 v2151;
  __int128 v2152;
  __int128 v2153;
  __int128 v2154;
  __int128 v2155;
  __int128 v2156;
  __int128 v2157;
  __int128 v2158;
  __int128 v2159;
  __int128 v2160;
  __int128 v2161;
  __int128 v2162;
  __int128 v2163;
  __int128 v2164;
  __int128 v2165;
  __int128 v2166;
  __int128 v2167;
  __int128 v2168;
  __int128 v2169;
  __int128 v2170;
  __int128 v2171;
  __int128 v2172;
  __int128 v2173;
  __int128 v2174;
  __int128 v2175;
  __int128 v2176;
  __int128 v2177;
  __int128 v2178;
  __int128 v2179;
  __int128 v2180;
  __int128 v2181;
  __int128 v2182;
  __int128 v2183;
  __int128 v2184;
  __int128 v2185;
  __int128 v2186;
  __int128 v2187;
  __int128 v2188;
  __int128 v2189;
  __int128 v2190;
  __int128 v2191;
  __int128 v2192;
  __int128 v2193;
  __int128 v2194;
  __int128 v2195;
  uint64_t v2196;
  uint64_t v2197;
  __int128 v2198;
  __int128 v2199;
  __int128 v2200;
  __int128 v2201;
  __int128 v2202;
  __int128 v2203;
  uint64_t v2204;
  __int128 v2205;
  __int128 v2206;
  __int128 v2207;
  uint64_t v2208;
  uint64_t v2209;
  __int128 v2210;
  uint64_t v2211;
  __int128 v2212;
  uint64_t v2213;
  __int128 v2214;
  uint64_t v2215;
  __int128 v2216;
  uint64_t v2217;
  __int128 v2218;
  __int128 v2219;
  __int128 v2220;
  __int128 v2221;
  uint64_t v2222;
  __int128 v2223;
  __int128 v2224;
  __int128 v2225;
  __int128 v2226;
  uint64_t v2227;
  _QWORD v2228[4];
  __int128 v2229;
  uint64_t v2230;
  __int128 v2231;
  uint64_t v2232;
  __int128 v2233;
  uint64_t v2234;
  __int128 v2235;
  uint64_t v2236;
  __int128 v2237;
  __int128 v2238;
  __int128 v2239;
  uint64_t v2240;
  _OWORD v2241[4];
  uint64_t v2242;
  __int128 v2243;
  uint64_t v2244;
  __int128 v2245;
  uint64_t v2246;
  __int128 v2247;
  uint64_t v2248;
  __int128 v2249;
  uint64_t v2250;
  _OWORD v2251[4];
  uint64_t v2252;
  __int128 v2253;
  uint64_t v2254;
  __int128 v2255;
  uint64_t v2256;
  __int128 v2257;
  uint64_t v2258;
  __int128 v2259;
  uint64_t v2260;
  __int128 v2261;
  __int128 v2262;
  __int128 v2263;
  __int128 v2264;
  uint64_t v2265;
  __int128 v2266;
  __int128 v2267;
  __int128 v2268;
  __int128 v2269;
  uint64_t v2270;
  uint64_t v2271;

  MEMORY[0x24BDAC7A8](a1);
  v246 = v1;
  v2271 = *MEMORY[0x24BDAC8D0];
  v4 = v2[6];
  v5 = *(unsigned __int8 *)(v4 + 20);
  if (*(_BYTE *)(v4 + 20) || *(_BYTE *)(v2[7] + 20) || *(_BYTE *)(v2[8] + 20) || *(_BYTE *)(v2[9] + 20))
  {
    v243 = v2[8];
    v244 = v2[7];
    v242 = v2[9];
    v6 = *v2;
    v7 = v2[1];
    v8 = *(_OWORD *)(*v2 + 32);
    v9 = *(_OWORD *)(*v2 + 48);
    v10 = *(_OWORD *)(*v2 + 64);
    v11 = *(_QWORD *)(*v2 + 96);
    v2251[3] = *(_OWORD *)(*v2 + 80);
    v2251[2] = v10;
    v2251[1] = v9;
    v2251[0] = v8;
    v12 = *(_OWORD *)(v6 + 104);
    *(_QWORD *)&v9 = *(_QWORD *)(v6 + 120);
    v2252 = v11;
    v2260 = v9;
    v2259 = v12;
    v13 = *(_OWORD *)(v7 + 32);
    v2256 = *(_QWORD *)(v7 + 48);
    v2255 = v13;
    v14 = *(_OWORD *)(v7 + 56);
    v2254 = *(_QWORD *)(v7 + 72);
    v2253 = v14;
    v15 = *(_OWORD *)(v7 + 80);
    v2258 = *(_QWORD *)(v7 + 96);
    v2257 = v15;
    v16 = v2[2];
    v17 = v2[3];
    v18 = *(_OWORD *)(v16 + 32);
    v19 = *(_OWORD *)(v16 + 48);
    v20 = *(_OWORD *)(v16 + 64);
    v21 = *(_OWORD *)(v16 + 80);
    v2242 = *(_QWORD *)(v16 + 96);
    v2241[3] = v21;
    v2241[2] = v20;
    v2241[1] = v19;
    v2241[0] = v18;
    v22 = *(_OWORD *)(v16 + 104);
    v2250 = *(_QWORD *)(v16 + 120);
    v2249 = v22;
    v23 = *(_OWORD *)(v17 + 32);
    v2246 = *(_QWORD *)(v17 + 48);
    v2245 = v23;
    v24 = *(_OWORD *)(v17 + 56);
    v2244 = *(_QWORD *)(v17 + 72);
    v2243 = v24;
    v25 = *(_OWORD *)(v17 + 80);
    v2248 = *(_QWORD *)(v17 + 96);
    v2247 = v25;
    v26 = *(__int128 **)(v3 + 32);
    v27 = v26[1];
    v2237 = *v26;
    v2238 = v27;
    v2239 = v26[2];
    v2240 = *((_QWORD *)v26 + 6);
    v275 = *((_QWORD *)v26 + 7);
    v28 = v26[4];
    v2236 = *((_QWORD *)v26 + 10);
    v2235 = v28;
    v29 = *(__int128 *)((char *)v26 + 88);
    v2234 = *((_QWORD *)v26 + 13);
    v2233 = v29;
    v30 = v26[7];
    v2232 = *((_QWORD *)v26 + 16);
    v2231 = v30;
    v31 = *(__int128 *)((char *)v26 + 136);
    v2230 = *((_QWORD *)v26 + 19);
    v2229 = v31;
    v32 = v26[10];
    v33 = v26[11];
    v34 = v26[12];
    v35 = v26[13];
    v2270 = *((_QWORD *)v26 + 28);
    v2268 = v34;
    v2269 = v35;
    v2266 = v32;
    v2267 = v33;
    v36 = *(__int128 *)((char *)v26 + 232);
    v37 = *(__int128 *)((char *)v26 + 248);
    v38 = *(__int128 *)((char *)v26 + 264);
    v39 = *(__int128 *)((char *)v26 + 280);
    v2265 = *((_QWORD *)v26 + 37);
    v2264 = v39;
    v2263 = v38;
    v2261 = v36;
    v2262 = v37;
    v245 = v3;
    v2228[0] = v3;
    v2228[1] = v2251;
    v2228[2] = v2241;
    v2228[3] = v1;
    if (v5)
    {
      if (!*(_BYTE *)(v4 + 56))
      {
        *(_QWORD *)(v1 + 8160) = 0;
        *(_OWORD *)(v1 + 8144) = 0u;
        *(_OWORD *)(v1 + 8128) = 0u;
        *(_OWORD *)(v1 + 8112) = 0u;
        *(_OWORD *)(v1 + 8096) = 0u;
        *(_OWORD *)(v1 + 8080) = 0u;
        *(_OWORD *)(v1 + 8064) = 0u;
        *(_OWORD *)(v1 + 8048) = 0u;
        *(_OWORD *)(v1 + 8032) = 0u;
        *(_OWORD *)(v1 + 8016) = 0u;
        *(_OWORD *)(v1 + 8000) = 0u;
        *(_OWORD *)(v1 + 7984) = 0u;
        *(_OWORD *)(v1 + 7968) = 0u;
        *(_OWORD *)(v1 + 7952) = 0u;
        *(_OWORD *)(v1 + 7936) = 0u;
        *(_OWORD *)(v1 + 7920) = 0u;
        *(_OWORD *)(v1 + 7904) = 0u;
        *(_OWORD *)(v1 + 7888) = 0u;
        *(_OWORD *)(v1 + 7872) = 0u;
        *(_OWORD *)(v1 + 7856) = 0u;
        *(_OWORD *)(v1 + 7840) = 0u;
        *(_OWORD *)(v1 + 7824) = 0u;
        *(_OWORD *)(v1 + 7808) = 0u;
        v88 = v244;
        if (!*(_BYTE *)(v244 + 20))
          goto LABEL_15;
        goto LABEL_10;
      }
      v40 = (__int128 *)(v1 + 7808);
      v41 = 14;
      v42 = 64;
      do
      {
        v2205 = v2237;
        v2206 = v2238;
        v2207 = v2239;
        v2208 = v2240;
        v2209 = v275;
        v2210 = v2235;
        v2211 = v2236;
        v2213 = v2234;
        v2212 = v2233;
        v2215 = v2232;
        v2214 = v2231;
        v2217 = v2230;
        v2216 = v2229;
        v2222 = v2270;
        v2220 = v2268;
        v2221 = v2269;
        v2218 = v2266;
        v2219 = v2267;
        v2227 = v2265;
        v2225 = v2263;
        v2226 = v2264;
        v2223 = v2261;
        v2224 = v2262;
        *(double *)((char *)&v2205 + v42) = *(double *)((char *)&v2205 + v42) + 0.00000001;
        sub_20FB23190((uint64_t)&v2196, v2228, (uint64_t)&v2205);
        *(_QWORD *)&v43 = *((_QWORD *)v40 + 44);
        v44 = *v40;
        v45 = v40[1];
        v46 = v40[2];
        v47 = v40[3];
        v48 = v40[4];
        v49 = v40[5];
        v50 = v40[6];
        v51 = v40[7];
        v52 = v40[8];
        v53 = v40[9];
        v54 = v40[10];
        v55 = v40[11];
        v56 = v40[12];
        v57 = v40[13];
        v59 = v40[14];
        v58 = v40[15];
        v60 = v40[16];
        v61 = v40[17];
        v62 = v40[18];
        v63 = v40[19];
        v64 = v40[20];
        v271 = v2204;
        v263 = v2202;
        v267 = v2203;
        v255 = v2200;
        v259 = v2201;
        v65 = v2197;
        v247 = v2198;
        v251 = v2199;
        v2185 = v40[21];
        v2184 = v64;
        v2183 = v63;
        v2182 = v62;
        v2181 = v61;
        v2180 = v60;
        v2179 = v58;
        v2178 = v59;
        v2177 = v57;
        v2176 = v56;
        v2175 = v55;
        v2174 = v54;
        v2173 = v53;
        v2172 = v52;
        v2171 = v51;
        v2170 = v50;
        v2169 = v49;
        v2168 = v48;
        v2167 = v47;
        v2166 = v46;
        v2165 = v45;
        v2164 = v44;
        v2186 = v43;
        *((_QWORD *)&v2164 + (((_BYTE)v41 - 14) & 0x3F)) = v2196;
        v2163 = v2195;
        v2162 = v2194;
        v2161 = v2193;
        v2160 = v2192;
        v2159 = v2191;
        v2158 = v2190;
        v2157 = v2189;
        v2156 = v2188;
        v2155 = v2187;
        v2154 = v2186;
        v2153 = v2185;
        v2152 = v2184;
        v2151 = v2183;
        v2150 = v2182;
        v2149 = v2181;
        v2148 = v2180;
        v2147 = v2179;
        v2146 = v2178;
        v2145 = v2177;
        v2144 = v2176;
        v2143 = v2175;
        v2142 = v2174;
        v2141 = v2173;
        v2140 = v2172;
        v2139 = v2171;
        v2138 = v2170;
        v2137 = v2169;
        v2136 = v2168;
        v2135 = v2167;
        v2134 = v2166;
        v2133 = v2165;
        v2132 = v2164;
        *((_QWORD *)&v2132 + (((_BYTE)v41 - 13) & 0x3F)) = v65;
        v2131 = v2163;
        v2130 = v2162;
        v2129 = v2161;
        v2128 = v2160;
        v2127 = v2159;
        v2126 = v2158;
        v2125 = v2157;
        v2124 = v2156;
        v2123 = v2155;
        v2122 = v2154;
        v2121 = v2153;
        v2120 = v2152;
        v2119 = v2151;
        v2118 = v2150;
        v2117 = v2149;
        v2116 = v2148;
        v2115 = v2147;
        v2114 = v2146;
        v2113 = v2145;
        v2112 = v2144;
        v2111 = v2143;
        v2110 = v2142;
        v2109 = v2141;
        v2108 = v2140;
        v2107 = v2139;
        v2106 = v2138;
        v2105 = v2137;
        v2104 = v2136;
        v2103 = v2135;
        v2102 = v2134;
        v2101 = v2133;
        v2100 = v2132;
        *((_QWORD *)&v2100 + (((_BYTE)v41 - 12) & 0x3F)) = v247;
        v2099 = v2131;
        v2098 = v2130;
        v2097 = v2129;
        v2096 = v2128;
        v2095 = v2127;
        v2094 = v2126;
        v2093 = v2125;
        v2092 = v2124;
        v2091 = v2123;
        v2090 = v2122;
        v2089 = v2121;
        v2088 = v2120;
        v2087 = v2119;
        v2086 = v2118;
        v2085 = v2117;
        v2084 = v2116;
        v2083 = v2115;
        v2082 = v2114;
        v2081 = v2113;
        v2080 = v2112;
        v2079 = v2111;
        v2078 = v2110;
        v2077 = v2109;
        v2076 = v2108;
        v2075 = v2107;
        v2074 = v2106;
        v2073 = v2105;
        v2072 = v2104;
        v2071 = v2103;
        v2070 = v2102;
        v2069 = v2101;
        v2068 = v2100;
        *((_QWORD *)&v2068 + (((_BYTE)v41 - 11) & 0x3F)) = *((_QWORD *)&v247 + 1);
        v2067 = v2099;
        v2066 = v2098;
        v2065 = v2097;
        v2064 = v2096;
        v2063 = v2095;
        v2062 = v2094;
        v2061 = v2093;
        v2060 = v2092;
        v2059 = v2091;
        v2058 = v2090;
        v2057 = v2089;
        v2056 = v2088;
        v2055 = v2087;
        v2054 = v2086;
        v2053 = v2085;
        v2052 = v2084;
        v2051 = v2083;
        v2050 = v2082;
        v2049 = v2081;
        v2048 = v2080;
        v2047 = v2079;
        v2046 = v2078;
        v2045 = v2077;
        v2044 = v2076;
        v2043 = v2075;
        v2042 = v2074;
        v2041 = v2073;
        v2040 = v2072;
        v2039 = v2071;
        v2038 = v2070;
        v2037 = v2069;
        v2036 = v2068;
        *((_QWORD *)&v2036 + (((_BYTE)v41 - 10) & 0x3F)) = v251;
        v2035 = v2067;
        v2034 = v2066;
        v2033 = v2065;
        v2032 = v2064;
        v2031 = v2063;
        v2030 = v2062;
        v2029 = v2061;
        v2028 = v2060;
        v2027 = v2059;
        v2026 = v2058;
        v2025 = v2057;
        v2024 = v2056;
        v2023 = v2055;
        v2022 = v2054;
        v2021 = v2053;
        v2020 = v2052;
        v2019 = v2051;
        v2018 = v2050;
        v2017 = v2049;
        v2016 = v2048;
        v2015 = v2047;
        v2014 = v2046;
        v2013 = v2045;
        v2012 = v2044;
        v2011 = v2043;
        v2010 = v2042;
        v2009 = v2041;
        v2008 = v2040;
        v2007 = v2039;
        v2006 = v2038;
        v2005 = v2037;
        v2004 = v2036;
        *((_QWORD *)&v2004 + (((_BYTE)v41 - 9) & 0x3F)) = *((_QWORD *)&v251 + 1);
        v2003 = v2035;
        v2002 = v2034;
        v2001 = v2033;
        v2000 = v2032;
        v1999 = v2031;
        v1998 = v2030;
        v1997 = v2029;
        v1996 = v2028;
        v1995 = v2027;
        v1994 = v2026;
        v1993 = v2025;
        v1992 = v2024;
        v1991 = v2023;
        v1990 = v2022;
        v1989 = v2021;
        v1988 = v2020;
        v1987 = v2019;
        v1986 = v2018;
        v1985 = v2017;
        v1984 = v2016;
        v1983 = v2015;
        v1982 = v2014;
        v1981 = v2013;
        v1980 = v2012;
        v1979 = v2011;
        v1978 = v2010;
        v1977 = v2009;
        v1976 = v2008;
        v1975 = v2007;
        v1974 = v2006;
        v1973 = v2005;
        v1972 = v2004;
        *((_QWORD *)&v1972 + (((_BYTE)v41 - 8) & 0x3F)) = v255;
        v1971 = v2003;
        v1970 = v2002;
        v1969 = v2001;
        v1968 = v2000;
        v1967 = v1999;
        v1966 = v1998;
        v1965 = v1997;
        v1964 = v1996;
        v1963 = v1995;
        v1962 = v1994;
        v1961 = v1993;
        v1960 = v1992;
        v1959 = v1991;
        v1958 = v1990;
        v1957 = v1989;
        v1956 = v1988;
        v1955 = v1987;
        v1954 = v1986;
        v1953 = v1985;
        v1952 = v1984;
        v1951 = v1983;
        v1950 = v1982;
        v1949 = v1981;
        v1948 = v1980;
        v1947 = v1979;
        v1946 = v1978;
        v1945 = v1977;
        v1944 = v1976;
        v1943 = v1975;
        v1942 = v1974;
        v1941 = v1973;
        v1940 = v1972;
        *((_QWORD *)&v1940 + (((_BYTE)v41 - 7) & 0x3F)) = *((_QWORD *)&v255 + 1);
        v1939 = v1971;
        v1938 = v1970;
        v1937 = v1969;
        v1936 = v1968;
        v1935 = v1967;
        v1934 = v1966;
        v1933 = v1965;
        v1932 = v1964;
        v1931 = v1963;
        v1930 = v1962;
        v1929 = v1961;
        v1928 = v1960;
        v1927 = v1959;
        v1926 = v1958;
        v1925 = v1957;
        v1924 = v1956;
        v1923 = v1955;
        v1922 = v1954;
        v1921 = v1953;
        v1920 = v1952;
        v1919 = v1951;
        v1918 = v1950;
        v1917 = v1949;
        v1916 = v1948;
        v1915 = v1947;
        v1914 = v1946;
        v1913 = v1945;
        v1912 = v1944;
        v1911 = v1943;
        v1910 = v1942;
        v1909 = v1941;
        v1908 = v1940;
        *((_QWORD *)&v1908 + (((_BYTE)v41 - 6) & 0x3F)) = v259;
        v1907 = v1939;
        v1906 = v1938;
        v1905 = v1937;
        v1904 = v1936;
        v1903 = v1935;
        v1902 = v1934;
        v1901 = v1933;
        v1900 = v1932;
        v1899 = v1931;
        v1898 = v1930;
        v1897 = v1929;
        v1896 = v1928;
        v1895 = v1927;
        v1894 = v1926;
        v1893 = v1925;
        v1892 = v1924;
        v1891 = v1923;
        v1890 = v1922;
        v1889 = v1921;
        v1888 = v1920;
        v1887 = v1919;
        v1886 = v1918;
        v1885 = v1917;
        v1884 = v1916;
        v1883 = v1915;
        v1882 = v1914;
        v1881 = v1913;
        v1880 = v1912;
        v1879 = v1911;
        v1878 = v1910;
        v1877 = v1909;
        v1876 = v1908;
        *((_QWORD *)&v1876 + (((_BYTE)v41 - 5) & 0x3F)) = *((_QWORD *)&v259 + 1);
        v1875 = v1907;
        v1874 = v1906;
        v1873 = v1905;
        v1872 = v1904;
        v1871 = v1903;
        v1870 = v1902;
        v1869 = v1901;
        v1868 = v1900;
        v1867 = v1899;
        v1866 = v1898;
        v1865 = v1897;
        v1864 = v1896;
        v1863 = v1895;
        v1862 = v1894;
        v1861 = v1893;
        v1860 = v1892;
        v1859 = v1891;
        v1858 = v1890;
        v1857 = v1889;
        v1856 = v1888;
        v1855 = v1887;
        v1854 = v1886;
        v1853 = v1885;
        v1852 = v1884;
        v1851 = v1883;
        v1850 = v1882;
        v1849 = v1881;
        v1848 = v1880;
        v1847 = v1879;
        v1846 = v1878;
        v1845 = v1877;
        v1844 = v1876;
        *((_QWORD *)&v1844 + (((_BYTE)v41 - 4) & 0x3F)) = v263;
        v1843 = v1875;
        v1842 = v1874;
        v1841 = v1873;
        v1840 = v1872;
        v1839 = v1871;
        v1838 = v1870;
        v1837 = v1869;
        v1836 = v1868;
        v1835 = v1867;
        v1834 = v1866;
        v1833 = v1865;
        v1832 = v1864;
        v1831 = v1863;
        v1830 = v1862;
        v1829 = v1861;
        v1828 = v1860;
        v1827 = v1859;
        v1826 = v1858;
        v1825 = v1857;
        v1824 = v1856;
        v1823 = v1855;
        v1822 = v1854;
        v1821 = v1853;
        v1820 = v1852;
        v1819 = v1851;
        v1818 = v1850;
        v1817 = v1849;
        v1816 = v1848;
        v1815 = v1847;
        v1814 = v1846;
        v1813 = v1845;
        v1812 = v1844;
        *((_QWORD *)&v1812 + (((_BYTE)v41 - 3) & 0x3F)) = *((_QWORD *)&v263 + 1);
        v1811 = v1843;
        v1810 = v1842;
        v1809 = v1841;
        v1808 = v1840;
        v1807 = v1839;
        v1806 = v1838;
        v1805 = v1837;
        v1804 = v1836;
        v1803 = v1835;
        v1802 = v1834;
        v1801 = v1833;
        v1800 = v1832;
        v1799 = v1831;
        v1798 = v1830;
        v1797 = v1829;
        v1796 = v1828;
        v1795 = v1827;
        v1794 = v1826;
        v1793 = v1825;
        v1792 = v1824;
        v1791 = v1823;
        v1790 = v1822;
        v1789 = v1821;
        v1788 = v1820;
        v1787 = v1819;
        v1786 = v1818;
        v1785 = v1817;
        v1784 = v1816;
        v1783 = v1815;
        v1782 = v1814;
        v1781 = v1813;
        v1780 = v1812;
        *((_QWORD *)&v1780 + (((_BYTE)v41 - 2) & 0x3F)) = v267;
        v1779 = v1811;
        v1778 = v1810;
        v1777 = v1809;
        v1776 = v1808;
        v1775 = v1807;
        v1774 = v1806;
        v1773 = v1805;
        v1772 = v1804;
        v1771 = v1803;
        v1770 = v1802;
        v1769 = v1801;
        v1768 = v1800;
        v1767 = v1799;
        v1766 = v1798;
        v1765 = v1797;
        v1764 = v1796;
        v1763 = v1795;
        v1762 = v1794;
        v1761 = v1793;
        v1760 = v1792;
        v1759 = v1791;
        v1758 = v1790;
        v1757 = v1789;
        v1756 = v1788;
        v1755 = v1787;
        v1754 = v1786;
        v1753 = v1785;
        v1752 = v1784;
        v1751 = v1783;
        v1750 = v1782;
        v1749 = v1781;
        v1748 = v1780;
        *((_QWORD *)&v1748 + (((_BYTE)v41 - 1) & 0x3F)) = *((_QWORD *)&v267 + 1);
        v1747 = v1779;
        v1746 = v1778;
        v1745 = v1777;
        v1744 = v1776;
        v1743 = v1775;
        v1742 = v1774;
        v1741 = v1773;
        v1740 = v1772;
        v1739 = v1771;
        v1738 = v1770;
        v1737 = v1769;
        v1736 = v1768;
        v1735 = v1767;
        v1734 = v1766;
        v1733 = v1765;
        v1732 = v1764;
        v1731 = v1763;
        v1730 = v1762;
        v1729 = v1761;
        v1728 = v1760;
        v1727 = v1759;
        v1726 = v1758;
        v1725 = v1757;
        v1724 = v1756;
        v1723 = v1755;
        v1722 = v1754;
        v1721 = v1753;
        v1720 = v1752;
        v1719 = v1751;
        v1718 = v1750;
        v1717 = v1749;
        v1716 = v1748;
        *((_QWORD *)&v1716 + (v41 & 0x3F)) = v271;
        v66 = v1716;
        v67 = v1717;
        v68 = v1718;
        v69 = v1719;
        v70 = v1720;
        v71 = v1721;
        v72 = v1722;
        v73 = v1723;
        v74 = v1724;
        v75 = v1725;
        v76 = v1726;
        v77 = v1727;
        v78 = v1728;
        v79 = v1729;
        v80 = v1730;
        v81 = v1731;
        v82 = v1732;
        v83 = v1733;
        v84 = v1734;
        v85 = v1735;
        v86 = v1736;
        v87 = v1737;
        *((_QWORD *)v40 + 44) = v1738;
        v40[20] = v86;
        v40[21] = v87;
        v40[18] = v84;
        v40[19] = v85;
        v40[16] = v82;
        v40[17] = v83;
        v40[14] = v80;
        v40[15] = v81;
        v40[12] = v78;
        v40[13] = v79;
        v40[10] = v76;
        v40[11] = v77;
        v40[8] = v74;
        v40[9] = v75;
        v40[6] = v72;
        v40[7] = v73;
        v40[4] = v70;
        v40[5] = v71;
        v40[2] = v68;
        v40[3] = v69;
        *v40 = v66;
        v40[1] = v67;
        v41 += 15;
        v42 += 8;
      }
      while (v41 != 59);
    }
    v88 = v244;
    if (!*(_BYTE *)(v244 + 20))
      goto LABEL_15;
LABEL_10:
    if (!*(_BYTE *)(v88 + 56))
    {
      *(_QWORD *)(v246 + 8520) = 0;
      *(_OWORD *)(v246 + 8488) = 0u;
      *(_OWORD *)(v246 + 8504) = 0u;
      *(_OWORD *)(v246 + 8456) = 0u;
      *(_OWORD *)(v246 + 8472) = 0u;
      *(_OWORD *)(v246 + 8424) = 0u;
      *(_OWORD *)(v246 + 8440) = 0u;
      *(_OWORD *)(v246 + 8392) = 0u;
      *(_OWORD *)(v246 + 8408) = 0u;
      *(_OWORD *)(v246 + 8360) = 0u;
      *(_OWORD *)(v246 + 8376) = 0u;
      *(_OWORD *)(v246 + 8328) = 0u;
      *(_OWORD *)(v246 + 8344) = 0u;
      *(_OWORD *)(v246 + 8296) = 0u;
      *(_OWORD *)(v246 + 8312) = 0u;
      *(_OWORD *)(v246 + 8264) = 0u;
      *(_OWORD *)(v246 + 8280) = 0u;
      *(_OWORD *)(v246 + 8232) = 0u;
      *(_OWORD *)(v246 + 8248) = 0u;
      *(_OWORD *)(v246 + 8200) = 0u;
      *(_OWORD *)(v246 + 8216) = 0u;
      *(_OWORD *)(v246 + 8168) = 0u;
      *(_OWORD *)(v246 + 8184) = 0u;
      v137 = v243;
      if (!*(_BYTE *)(v243 + 20))
        goto LABEL_21;
      goto LABEL_16;
    }
    v89 = (__int128 *)(v246 + 8168);
    v90 = 14;
    v91 = 88;
    do
    {
      v2205 = v2237;
      v2206 = v2238;
      v2207 = v2239;
      v2208 = v2240;
      v2209 = v275;
      v2210 = v2235;
      v2211 = v2236;
      v2213 = v2234;
      v2212 = v2233;
      v2215 = v2232;
      v2214 = v2231;
      v2217 = v2230;
      v2216 = v2229;
      v2222 = v2270;
      v2220 = v2268;
      v2221 = v2269;
      v2218 = v2266;
      v2219 = v2267;
      v2227 = v2265;
      v2225 = v2263;
      v2226 = v2264;
      v2223 = v2261;
      v2224 = v2262;
      *(double *)((char *)&v2205 + v91) = *(double *)((char *)&v2205 + v91) + 0.00000001;
      sub_20FB23190((uint64_t)&v2196, v2228, (uint64_t)&v2205);
      *(_QWORD *)&v92 = *(_QWORD *)(v246 + 8520);
      v93 = *v89;
      v94 = *(_OWORD *)(v246 + 8184);
      v95 = *(_OWORD *)(v246 + 8200);
      v96 = *(_OWORD *)(v246 + 8216);
      v97 = *(_OWORD *)(v246 + 8232);
      v98 = *(_OWORD *)(v246 + 8248);
      v99 = *(_OWORD *)(v246 + 8264);
      v100 = *(_OWORD *)(v246 + 8280);
      v101 = *(_OWORD *)(v246 + 8296);
      v102 = *(_OWORD *)(v246 + 8312);
      v103 = *(_OWORD *)(v246 + 8328);
      v104 = *(_OWORD *)(v246 + 8344);
      v105 = *(_OWORD *)(v246 + 8360);
      v106 = *(_OWORD *)(v246 + 8376);
      v108 = *(_OWORD *)(v246 + 8392);
      v107 = *(_OWORD *)(v246 + 8408);
      v109 = *(_OWORD *)(v246 + 8424);
      v110 = *(_OWORD *)(v246 + 8440);
      v111 = *(_OWORD *)(v246 + 8456);
      v112 = *(_OWORD *)(v246 + 8472);
      v113 = *(_OWORD *)(v246 + 8488);
      v272 = v2204;
      v264 = v2202;
      v268 = v2203;
      v256 = v2200;
      v260 = v2201;
      v114 = v2197;
      v248 = v2198;
      v252 = v2199;
      v1705 = *(_OWORD *)(v246 + 8504);
      v1704 = v113;
      v1703 = v112;
      v1702 = v111;
      v1701 = v110;
      v1700 = v109;
      v1699 = v107;
      v1698 = v108;
      v1697 = v106;
      v1696 = v105;
      v1695 = v104;
      v1694 = v103;
      v1693 = v102;
      v1692 = v101;
      v1691 = v100;
      v1690 = v99;
      v1689 = v98;
      v1688 = v97;
      v1687 = v96;
      v1686 = v95;
      v1685 = v94;
      v1684 = v93;
      v1706 = v92;
      *((_QWORD *)&v1684 + (((_BYTE)v90 - 14) & 0x3F)) = v2196;
      v1683 = v1715;
      v1682 = v1714;
      v1681 = v1713;
      v1680 = v1712;
      v1679 = v1711;
      v1678 = v1710;
      v1677 = v1709;
      v1676 = v1708;
      v1675 = v1707;
      v1674 = v1706;
      v1673 = v1705;
      v1672 = v1704;
      v1671 = v1703;
      v1670 = v1702;
      v1669 = v1701;
      v1668 = v1700;
      v1667 = v1699;
      v1666 = v1698;
      v1665 = v1697;
      v1664 = v1696;
      v1663 = v1695;
      v1662 = v1694;
      v1661 = v1693;
      v1660 = v1692;
      v1659 = v1691;
      v1658 = v1690;
      v1657 = v1689;
      v1656 = v1688;
      v1655 = v1687;
      v1654 = v1686;
      v1653 = v1685;
      v1652 = v1684;
      *((_QWORD *)&v1652 + (((_BYTE)v90 - 13) & 0x3F)) = v114;
      v1651 = v1683;
      v1650 = v1682;
      v1649 = v1681;
      v1648 = v1680;
      v1647 = v1679;
      v1646 = v1678;
      v1645 = v1677;
      v1644 = v1676;
      v1643 = v1675;
      v1642 = v1674;
      v1641 = v1673;
      v1640 = v1672;
      v1639 = v1671;
      v1638 = v1670;
      v1637 = v1669;
      v1636 = v1668;
      v1635 = v1667;
      v1634 = v1666;
      v1633 = v1665;
      v1632 = v1664;
      v1631 = v1663;
      v1630 = v1662;
      v1629 = v1661;
      v1628 = v1660;
      v1627 = v1659;
      v1626 = v1658;
      v1625 = v1657;
      v1624 = v1656;
      v1623 = v1655;
      v1622 = v1654;
      v1621 = v1653;
      v1620 = v1652;
      *((_QWORD *)&v1620 + (((_BYTE)v90 - 12) & 0x3F)) = v248;
      v1619 = v1651;
      v1618 = v1650;
      v1617 = v1649;
      v1616 = v1648;
      v1615 = v1647;
      v1614 = v1646;
      v1613 = v1645;
      v1612 = v1644;
      v1611 = v1643;
      v1610 = v1642;
      v1609 = v1641;
      v1608 = v1640;
      v1607 = v1639;
      v1606 = v1638;
      v1605 = v1637;
      v1604 = v1636;
      v1603 = v1635;
      v1602 = v1634;
      v1601 = v1633;
      v1600 = v1632;
      v1599 = v1631;
      v1598 = v1630;
      v1597 = v1629;
      v1596 = v1628;
      v1595 = v1627;
      v1594 = v1626;
      v1593 = v1625;
      v1592 = v1624;
      v1591 = v1623;
      v1590 = v1622;
      v1589 = v1621;
      v1588 = v1620;
      *((_QWORD *)&v1588 + (((_BYTE)v90 - 11) & 0x3F)) = *((_QWORD *)&v248 + 1);
      v1587 = v1619;
      v1586 = v1618;
      v1585 = v1617;
      v1584 = v1616;
      v1583 = v1615;
      v1582 = v1614;
      v1581 = v1613;
      v1580 = v1612;
      v1579 = v1611;
      v1578 = v1610;
      v1577 = v1609;
      v1576 = v1608;
      v1575 = v1607;
      v1574 = v1606;
      v1573 = v1605;
      v1572 = v1604;
      v1571 = v1603;
      v1570 = v1602;
      v1569 = v1601;
      v1568 = v1600;
      v1567 = v1599;
      v1566 = v1598;
      v1565 = v1597;
      v1564 = v1596;
      v1563 = v1595;
      v1562 = v1594;
      v1561 = v1593;
      v1560 = v1592;
      v1559 = v1591;
      v1558 = v1590;
      v1557 = v1589;
      v1556 = v1588;
      *((_QWORD *)&v1556 + (((_BYTE)v90 - 10) & 0x3F)) = v252;
      v1555 = v1587;
      v1554 = v1586;
      v1553 = v1585;
      v1552 = v1584;
      v1551 = v1583;
      v1550 = v1582;
      v1549 = v1581;
      v1548 = v1580;
      v1547 = v1579;
      v1546 = v1578;
      v1545 = v1577;
      v1544 = v1576;
      v1543 = v1575;
      v1542 = v1574;
      v1541 = v1573;
      v1540 = v1572;
      v1539 = v1571;
      v1538 = v1570;
      v1537 = v1569;
      v1536 = v1568;
      v1535 = v1567;
      v1534 = v1566;
      v1533 = v1565;
      v1532 = v1564;
      v1531 = v1563;
      v1530 = v1562;
      v1529 = v1561;
      v1528 = v1560;
      v1527 = v1559;
      v1526 = v1558;
      v1525 = v1557;
      v1524 = v1556;
      *((_QWORD *)&v1524 + (((_BYTE)v90 - 9) & 0x3F)) = *((_QWORD *)&v252 + 1);
      v1523 = v1555;
      v1522 = v1554;
      v1521 = v1553;
      v1520 = v1552;
      v1519 = v1551;
      v1518 = v1550;
      v1517 = v1549;
      v1516 = v1548;
      v1515 = v1547;
      v1514 = v1546;
      v1513 = v1545;
      v1512 = v1544;
      v1511 = v1543;
      v1510 = v1542;
      v1509 = v1541;
      v1508 = v1540;
      v1507 = v1539;
      v1506 = v1538;
      v1505 = v1537;
      v1504 = v1536;
      v1503 = v1535;
      v1502 = v1534;
      v1501 = v1533;
      v1500 = v1532;
      v1499 = v1531;
      v1498 = v1530;
      v1497 = v1529;
      v1496 = v1528;
      v1495 = v1527;
      v1494 = v1526;
      v1493 = v1525;
      v1492 = v1524;
      *((_QWORD *)&v1492 + (((_BYTE)v90 - 8) & 0x3F)) = v256;
      v1491 = v1523;
      v1490 = v1522;
      v1489 = v1521;
      v1488 = v1520;
      v1487 = v1519;
      v1486 = v1518;
      v1485 = v1517;
      v1484 = v1516;
      v1483 = v1515;
      v1482 = v1514;
      v1481 = v1513;
      v1480 = v1512;
      v1479 = v1511;
      v1478 = v1510;
      v1477 = v1509;
      v1476 = v1508;
      v1475 = v1507;
      v1474 = v1506;
      v1473 = v1505;
      v1472 = v1504;
      v1471 = v1503;
      v1470 = v1502;
      v1469 = v1501;
      v1468 = v1500;
      v1467 = v1499;
      v1466 = v1498;
      v1465 = v1497;
      v1464 = v1496;
      v1463 = v1495;
      v1462 = v1494;
      v1461 = v1493;
      v1460 = v1492;
      *((_QWORD *)&v1460 + (((_BYTE)v90 - 7) & 0x3F)) = *((_QWORD *)&v256 + 1);
      v1459 = v1491;
      v1458 = v1490;
      v1457 = v1489;
      v1456 = v1488;
      v1455 = v1487;
      v1454 = v1486;
      v1453 = v1485;
      v1452 = v1484;
      v1451 = v1483;
      v1450 = v1482;
      v1449 = v1481;
      v1448 = v1480;
      v1447 = v1479;
      v1446 = v1478;
      v1445 = v1477;
      v1444 = v1476;
      v1443 = v1475;
      v1442 = v1474;
      v1441 = v1473;
      v1440 = v1472;
      v1439 = v1471;
      v1438 = v1470;
      v1437 = v1469;
      v1436 = v1468;
      v1435 = v1467;
      v1434 = v1466;
      v1433 = v1465;
      v1432 = v1464;
      v1431 = v1463;
      v1430 = v1462;
      v1429 = v1461;
      v1428 = v1460;
      *((_QWORD *)&v1428 + (((_BYTE)v90 - 6) & 0x3F)) = v260;
      v1427 = v1459;
      v1426 = v1458;
      v1425 = v1457;
      v1424 = v1456;
      v1423 = v1455;
      v1422 = v1454;
      v1421 = v1453;
      v1420 = v1452;
      v1419 = v1451;
      v1418 = v1450;
      v1417 = v1449;
      v1416 = v1448;
      v1415 = v1447;
      v1414 = v1446;
      v1413 = v1445;
      v1412 = v1444;
      v1411 = v1443;
      v1410 = v1442;
      v1409 = v1441;
      v1408 = v1440;
      v1407 = v1439;
      v1406 = v1438;
      v1405 = v1437;
      v1404 = v1436;
      v1403 = v1435;
      v1402 = v1434;
      v1401 = v1433;
      v1400 = v1432;
      v1399 = v1431;
      v1398 = v1430;
      v1397 = v1429;
      v1396 = v1428;
      *((_QWORD *)&v1396 + (((_BYTE)v90 - 5) & 0x3F)) = *((_QWORD *)&v260 + 1);
      v1395 = v1427;
      v1394 = v1426;
      v1393 = v1425;
      v1392 = v1424;
      v1391 = v1423;
      v1390 = v1422;
      v1389 = v1421;
      v1388 = v1420;
      v1387 = v1419;
      v1386 = v1418;
      v1385 = v1417;
      v1384 = v1416;
      v1383 = v1415;
      v1382 = v1414;
      v1381 = v1413;
      v1380 = v1412;
      v1379 = v1411;
      v1378 = v1410;
      v1377 = v1409;
      v1376 = v1408;
      v1375 = v1407;
      v1374 = v1406;
      v1373 = v1405;
      v1372 = v1404;
      v1371 = v1403;
      v1370 = v1402;
      v1369 = v1401;
      v1368 = v1400;
      v1367 = v1399;
      v1366 = v1398;
      v1365 = v1397;
      v1364 = v1396;
      *((_QWORD *)&v1364 + (((_BYTE)v90 - 4) & 0x3F)) = v264;
      v1363 = v1395;
      v1362 = v1394;
      v1361 = v1393;
      v1360 = v1392;
      v1359 = v1391;
      v1358 = v1390;
      v1357 = v1389;
      v1356 = v1388;
      v1355 = v1387;
      v1354 = v1386;
      v1353 = v1385;
      v1352 = v1384;
      v1351 = v1383;
      v1350 = v1382;
      v1349 = v1381;
      v1348 = v1380;
      v1347 = v1379;
      v1346 = v1378;
      v1345 = v1377;
      v1344 = v1376;
      v1343 = v1375;
      v1342 = v1374;
      v1341 = v1373;
      v1340 = v1372;
      v1339 = v1371;
      v1338 = v1370;
      v1337 = v1369;
      v1336 = v1368;
      v1335 = v1367;
      v1334 = v1366;
      v1333 = v1365;
      v1332 = v1364;
      *((_QWORD *)&v1332 + (((_BYTE)v90 - 3) & 0x3F)) = *((_QWORD *)&v264 + 1);
      v1331 = v1363;
      v1330 = v1362;
      v1329 = v1361;
      v1328 = v1360;
      v1327 = v1359;
      v1326 = v1358;
      v1325 = v1357;
      v1324 = v1356;
      v1323 = v1355;
      v1322 = v1354;
      v1321 = v1353;
      v1320 = v1352;
      v1319 = v1351;
      v1318 = v1350;
      v1317 = v1349;
      v1316 = v1348;
      v1315 = v1347;
      v1314 = v1346;
      v1313 = v1345;
      v1312 = v1344;
      v1311 = v1343;
      v1310 = v1342;
      v1309 = v1341;
      v1308 = v1340;
      v1307 = v1339;
      v1306 = v1338;
      v1305 = v1337;
      v1304 = v1336;
      v1303 = v1335;
      v1302 = v1334;
      v1301 = v1333;
      v1300 = v1332;
      *((_QWORD *)&v1300 + (((_BYTE)v90 - 2) & 0x3F)) = v268;
      v1299 = v1331;
      v1298 = v1330;
      v1297 = v1329;
      v1296 = v1328;
      v1295 = v1327;
      v1294 = v1326;
      v1293 = v1325;
      v1292 = v1324;
      v1291 = v1323;
      v1290 = v1322;
      v1289 = v1321;
      v1288 = v1320;
      v1287 = v1319;
      v1286 = v1318;
      v1285 = v1317;
      v1284 = v1316;
      v1283 = v1315;
      v1282 = v1314;
      v1281 = v1313;
      v1280 = v1312;
      v1279 = v1311;
      v1278 = v1310;
      v1277 = v1309;
      v1276 = v1308;
      v1275 = v1307;
      v1274 = v1306;
      v1273 = v1305;
      v1272 = v1304;
      v1271 = v1303;
      v1270 = v1302;
      v1269 = v1301;
      v1268 = v1300;
      *((_QWORD *)&v1268 + (((_BYTE)v90 - 1) & 0x3F)) = *((_QWORD *)&v268 + 1);
      v1267 = v1299;
      v1266 = v1298;
      v1265 = v1297;
      v1264 = v1296;
      v1263 = v1295;
      v1262 = v1294;
      v1261 = v1293;
      v1260 = v1292;
      v1259 = v1291;
      v1258 = v1290;
      v1257 = v1289;
      v1256 = v1288;
      v1255 = v1287;
      v1254 = v1286;
      v1253 = v1285;
      v1252 = v1284;
      v1251 = v1283;
      v1250 = v1282;
      v1249 = v1281;
      v1248 = v1280;
      v1247 = v1279;
      v1246 = v1278;
      v1245 = v1277;
      v1244 = v1276;
      v1243 = v1275;
      v1242 = v1274;
      v1241 = v1273;
      v1240 = v1272;
      v1239 = v1271;
      v1238 = v1270;
      v1237 = v1269;
      v1236 = v1268;
      *((_QWORD *)&v1236 + (v90 & 0x3F)) = v272;
      v115 = v1236;
      v116 = v1237;
      v117 = v1238;
      v118 = v1239;
      v119 = v1240;
      v120 = v1241;
      v121 = v1242;
      v122 = v1243;
      v123 = v1244;
      v124 = v1245;
      v125 = v1246;
      v126 = v1247;
      v127 = v1248;
      v128 = v1249;
      v129 = v1250;
      v130 = v1251;
      v131 = v1252;
      v132 = v1253;
      v133 = v1254;
      v134 = v1255;
      v135 = v1256;
      v136 = v1257;
      *(_QWORD *)(v246 + 8520) = v1258;
      *(_OWORD *)(v246 + 8488) = v135;
      *(_OWORD *)(v246 + 8504) = v136;
      *(_OWORD *)(v246 + 8456) = v133;
      *(_OWORD *)(v246 + 8472) = v134;
      *(_OWORD *)(v246 + 8424) = v131;
      *(_OWORD *)(v246 + 8440) = v132;
      *(_OWORD *)(v246 + 8392) = v129;
      *(_OWORD *)(v246 + 8408) = v130;
      *(_OWORD *)(v246 + 8360) = v127;
      *(_OWORD *)(v246 + 8376) = v128;
      *(_OWORD *)(v246 + 8328) = v125;
      *(_OWORD *)(v246 + 8344) = v126;
      *(_OWORD *)(v246 + 8296) = v123;
      *(_OWORD *)(v246 + 8312) = v124;
      *(_OWORD *)(v246 + 8264) = v121;
      *(_OWORD *)(v246 + 8280) = v122;
      *(_OWORD *)(v246 + 8232) = v119;
      *(_OWORD *)(v246 + 8248) = v120;
      *(_OWORD *)(v246 + 8200) = v117;
      *(_OWORD *)(v246 + 8216) = v118;
      *v89 = v115;
      *(_OWORD *)(v246 + 8184) = v116;
      v90 += 15;
      v91 += 8;
    }
    while (v90 != 59);
LABEL_15:
    v137 = v243;
    if (!*(_BYTE *)(v243 + 20))
      goto LABEL_21;
LABEL_16:
    if (!*(_BYTE *)(v137 + 56))
    {
      *(_QWORD *)(v246 + 8880) = 0;
      *(_OWORD *)(v246 + 8864) = 0u;
      *(_OWORD *)(v246 + 8848) = 0u;
      *(_OWORD *)(v246 + 8832) = 0u;
      *(_OWORD *)(v246 + 8816) = 0u;
      *(_OWORD *)(v246 + 8800) = 0u;
      *(_OWORD *)(v246 + 8784) = 0u;
      *(_OWORD *)(v246 + 8768) = 0u;
      *(_OWORD *)(v246 + 8752) = 0u;
      *(_OWORD *)(v246 + 8736) = 0u;
      *(_OWORD *)(v246 + 8720) = 0u;
      *(_OWORD *)(v246 + 8704) = 0u;
      *(_OWORD *)(v246 + 8688) = 0u;
      *(_OWORD *)(v246 + 8672) = 0u;
      *(_OWORD *)(v246 + 8656) = 0u;
      *(_OWORD *)(v246 + 8640) = 0u;
      *(_OWORD *)(v246 + 8624) = 0u;
      *(_OWORD *)(v246 + 8608) = 0u;
      *(_OWORD *)(v246 + 8592) = 0u;
      *(_OWORD *)(v246 + 8576) = 0u;
      *(_OWORD *)(v246 + 8560) = 0u;
      *(_OWORD *)(v246 + 8544) = 0u;
      *(_OWORD *)(v246 + 8528) = 0u;
      v186 = v242;
      if (*(_BYTE *)(v242 + 20))
      {
LABEL_22:
        if (*(_BYTE *)(v186 + 56))
        {
          v187 = (__int128 *)(v246 + 8888);
          v188 = 14;
          v189 = 136;
          do
          {
            v2205 = v2237;
            v2206 = v2238;
            v2207 = v2239;
            v2208 = v2240;
            v2209 = v275;
            v2210 = v2235;
            v2211 = v2236;
            v2213 = v2234;
            v2212 = v2233;
            v2215 = v2232;
            v2214 = v2231;
            v2217 = v2230;
            v2216 = v2229;
            v2222 = v2270;
            v2220 = v2268;
            v2221 = v2269;
            v2218 = v2266;
            v2219 = v2267;
            v2227 = v2265;
            v2225 = v2263;
            v2226 = v2264;
            v2223 = v2261;
            v2224 = v2262;
            *(double *)((char *)&v2205 + v189) = *(double *)((char *)&v2205 + v189) + 0.00000001;
            sub_20FB23190((uint64_t)&v2196, v2228, (uint64_t)&v2205);
            *(_QWORD *)&v190 = *(_QWORD *)(v246 + 9240);
            v191 = *v187;
            v192 = *(_OWORD *)(v246 + 8904);
            v193 = *(_OWORD *)(v246 + 8920);
            v194 = *(_OWORD *)(v246 + 8936);
            v195 = *(_OWORD *)(v246 + 8952);
            v196 = *(_OWORD *)(v246 + 8968);
            v197 = *(_OWORD *)(v246 + 8984);
            v198 = *(_OWORD *)(v246 + 9000);
            v199 = *(_OWORD *)(v246 + 9016);
            v200 = *(_OWORD *)(v246 + 9032);
            v201 = *(_OWORD *)(v246 + 9048);
            v202 = *(_OWORD *)(v246 + 9064);
            v203 = *(_OWORD *)(v246 + 9080);
            v204 = *(_OWORD *)(v246 + 9096);
            v206 = *(_OWORD *)(v246 + 9112);
            v205 = *(_OWORD *)(v246 + 9128);
            v207 = *(_OWORD *)(v246 + 9144);
            v208 = *(_OWORD *)(v246 + 9160);
            v209 = *(_OWORD *)(v246 + 9176);
            v210 = *(_OWORD *)(v246 + 9192);
            v211 = *(_OWORD *)(v246 + 9208);
            v274 = v2204;
            v266 = v2202;
            v270 = v2203;
            v258 = v2200;
            v262 = v2201;
            v212 = v2197;
            v250 = v2198;
            v254 = v2199;
            v745 = *(_OWORD *)(v246 + 9224);
            v744 = v211;
            v743 = v210;
            v742 = v209;
            v741 = v208;
            v740 = v207;
            v739 = v205;
            v738 = v206;
            v737 = v204;
            v736 = v203;
            v735 = v202;
            v734 = v201;
            v733 = v200;
            v732 = v199;
            v731 = v198;
            v730 = v197;
            v729 = v196;
            v728 = v195;
            v727 = v194;
            v726 = v193;
            v725 = v192;
            v724 = v191;
            v746 = v190;
            *((_QWORD *)&v724 + (((_BYTE)v188 - 14) & 0x3F)) = v2196;
            v723 = v755;
            v722 = v754;
            v721 = v753;
            v720 = v752;
            v719 = v751;
            v718 = v750;
            v717 = v749;
            v716 = v748;
            v715 = v747;
            v714 = v746;
            v713 = v745;
            v712 = v744;
            v711 = v743;
            v710 = v742;
            v709 = v741;
            v708 = v740;
            v707 = v739;
            v706 = v738;
            v705 = v737;
            v704 = v736;
            v703 = v735;
            v702 = v734;
            v701 = v733;
            v700 = v732;
            v699 = v731;
            v698 = v730;
            v697 = v729;
            v696 = v728;
            v695 = v727;
            v694 = v726;
            v693 = v725;
            v692 = v724;
            *((_QWORD *)&v692 + (((_BYTE)v188 - 13) & 0x3F)) = v212;
            v691 = v723;
            v690 = v722;
            v689 = v721;
            v688 = v720;
            v687 = v719;
            v686 = v718;
            v685 = v717;
            v684 = v716;
            v683 = v715;
            v682 = v714;
            v681 = v713;
            v680 = v712;
            v679 = v711;
            v678 = v710;
            v677 = v709;
            v676 = v708;
            v675 = v707;
            v674 = v706;
            v673 = v705;
            v672 = v704;
            v671 = v703;
            v670 = v702;
            v669 = v701;
            v668 = v700;
            v667 = v699;
            v666 = v698;
            v665 = v697;
            v664 = v696;
            v663 = v695;
            v662 = v694;
            v661 = v693;
            v660 = v692;
            *((_QWORD *)&v660 + (((_BYTE)v188 - 12) & 0x3F)) = v250;
            v659 = v691;
            v658 = v690;
            v657 = v689;
            v656 = v688;
            v655 = v687;
            v654 = v686;
            v653 = v685;
            v652 = v684;
            v651 = v683;
            v650 = v682;
            v649 = v681;
            v648 = v680;
            v647 = v679;
            v646 = v678;
            v645 = v677;
            v644 = v676;
            v643 = v675;
            v642 = v674;
            v641 = v673;
            v640 = v672;
            v639 = v671;
            v638 = v670;
            v637 = v669;
            v636 = v668;
            v635 = v667;
            v634 = v666;
            v633 = v665;
            v632 = v664;
            v631 = v663;
            v630 = v662;
            v629 = v661;
            v628 = v660;
            *((_QWORD *)&v628 + (((_BYTE)v188 - 11) & 0x3F)) = *((_QWORD *)&v250 + 1);
            v627 = v659;
            v626 = v658;
            v625 = v657;
            v624 = v656;
            v623 = v655;
            v622 = v654;
            v621 = v653;
            v620 = v652;
            v619 = v651;
            v618 = v650;
            v617 = v649;
            v616 = v648;
            v615 = v647;
            v614 = v646;
            v613 = v645;
            v612 = v644;
            v611 = v643;
            v610 = v642;
            v609 = v641;
            v608 = v640;
            v607 = v639;
            v606 = v638;
            v605 = v637;
            v604 = v636;
            v603 = v635;
            v602 = v634;
            v601 = v633;
            v600 = v632;
            v599 = v631;
            v598 = v630;
            v597 = v629;
            v596 = v628;
            *((_QWORD *)&v596 + (((_BYTE)v188 - 10) & 0x3F)) = v254;
            v595 = v627;
            v594 = v626;
            v593 = v625;
            v592 = v624;
            v591 = v623;
            v590 = v622;
            v589 = v621;
            v588 = v620;
            v587 = v619;
            v586 = v618;
            v585 = v617;
            v584 = v616;
            v583 = v615;
            v582 = v614;
            v581 = v613;
            v580 = v612;
            v579 = v611;
            v578 = v610;
            v577 = v609;
            v576 = v608;
            v575 = v607;
            v574 = v606;
            v573 = v605;
            v572 = v604;
            v571 = v603;
            v570 = v602;
            v569 = v601;
            v568 = v600;
            v567 = v599;
            v566 = v598;
            v565 = v597;
            v564 = v596;
            *((_QWORD *)&v564 + (((_BYTE)v188 - 9) & 0x3F)) = *((_QWORD *)&v254 + 1);
            v563 = v595;
            v562 = v594;
            v561 = v593;
            v560 = v592;
            v559 = v591;
            v558 = v590;
            v557 = v589;
            v556 = v588;
            v555 = v587;
            v554 = v586;
            v553 = v585;
            v552 = v584;
            v551 = v583;
            v550 = v582;
            v549 = v581;
            v548 = v580;
            v547 = v579;
            v546 = v578;
            v545 = v577;
            v544 = v576;
            v543 = v575;
            v542 = v574;
            v541 = v573;
            v540 = v572;
            v539 = v571;
            v538 = v570;
            v537 = v569;
            v536 = v568;
            v535 = v567;
            v534 = v566;
            v533 = v565;
            v532 = v564;
            *((_QWORD *)&v532 + (((_BYTE)v188 - 8) & 0x3F)) = v258;
            v531 = v563;
            v530 = v562;
            v529 = v561;
            v528 = v560;
            v527 = v559;
            v526 = v558;
            v525 = v557;
            v524 = v556;
            v523 = v555;
            v522 = v554;
            v521 = v553;
            v520 = v552;
            v519 = v551;
            v518 = v550;
            v517 = v549;
            v516 = v548;
            v515 = v547;
            v514 = v546;
            v513 = v545;
            v512 = v544;
            v511 = v543;
            v510 = v542;
            v509 = v541;
            v508 = v540;
            v507 = v539;
            v506 = v538;
            v505 = v537;
            v504 = v536;
            v503 = v535;
            v502 = v534;
            v501 = v533;
            v500 = v532;
            *((_QWORD *)&v500 + (((_BYTE)v188 - 7) & 0x3F)) = *((_QWORD *)&v258 + 1);
            v499 = v531;
            v498 = v530;
            v497 = v529;
            v496 = v528;
            v495 = v527;
            v494 = v526;
            v493 = v525;
            v492 = v524;
            v491 = v523;
            v490 = v522;
            v489 = v521;
            v488 = v520;
            v487 = v519;
            v486 = v518;
            v485 = v517;
            v484 = v516;
            v483 = v515;
            v482 = v514;
            v481 = v513;
            v480 = v512;
            v479 = v511;
            v478 = v510;
            v477 = v509;
            v476 = v508;
            v475 = v507;
            v474 = v506;
            v473 = v505;
            v472 = v504;
            v471 = v503;
            v470 = v502;
            v469 = v501;
            v468 = v500;
            *((_QWORD *)&v468 + (((_BYTE)v188 - 6) & 0x3F)) = v262;
            v467 = v499;
            v466 = v498;
            v465 = v497;
            v464 = v496;
            v463 = v495;
            v462 = v494;
            v461 = v493;
            v460 = v492;
            v459 = v491;
            v458 = v490;
            v457 = v489;
            v456 = v488;
            v455 = v487;
            v454 = v486;
            v453 = v485;
            v452 = v484;
            v451 = v483;
            v450 = v482;
            v449 = v481;
            v448 = v480;
            v447 = v479;
            v446 = v478;
            v445 = v477;
            v444 = v476;
            v443 = v475;
            v442 = v474;
            v441 = v473;
            v440 = v472;
            v439 = v471;
            v438 = v470;
            v437 = v469;
            v436 = v468;
            *((_QWORD *)&v436 + (((_BYTE)v188 - 5) & 0x3F)) = *((_QWORD *)&v262 + 1);
            v435 = v467;
            v434 = v466;
            v433 = v465;
            v432 = v464;
            v431 = v463;
            v430 = v462;
            v429 = v461;
            v428 = v460;
            v427 = v459;
            v426 = v458;
            v425 = v457;
            v424 = v456;
            v423 = v455;
            v422 = v454;
            v421 = v453;
            v420 = v452;
            v419 = v451;
            v418 = v450;
            v417 = v449;
            v416 = v448;
            v415 = v447;
            v414 = v446;
            v413 = v445;
            v412 = v444;
            v411 = v443;
            v410 = v442;
            v409 = v441;
            v408 = v440;
            v407 = v439;
            v406 = v438;
            v405 = v437;
            v404 = v436;
            *((_QWORD *)&v404 + (((_BYTE)v188 - 4) & 0x3F)) = v266;
            v403 = v435;
            v402 = v434;
            v401 = v433;
            v400 = v432;
            v399 = v431;
            v398 = v430;
            v397 = v429;
            v396 = v428;
            v395 = v427;
            v394 = v426;
            v393 = v425;
            v392 = v424;
            v391 = v423;
            v390 = v422;
            v389 = v421;
            v388 = v420;
            v387 = v419;
            v386 = v418;
            v385 = v417;
            v384 = v416;
            v383 = v415;
            v382 = v414;
            v381 = v413;
            v380 = v412;
            v379 = v411;
            v378 = v410;
            v377 = v409;
            v376 = v408;
            v375 = v407;
            v374 = v406;
            v373 = v405;
            v372 = v404;
            *((_QWORD *)&v372 + (((_BYTE)v188 - 3) & 0x3F)) = *((_QWORD *)&v266 + 1);
            v371 = v403;
            v370 = v402;
            v369 = v401;
            v368 = v400;
            v367 = v399;
            v366 = v398;
            v365 = v397;
            v364 = v396;
            v363 = v395;
            v362 = v394;
            v361 = v393;
            v360 = v392;
            v359 = v391;
            v358 = v390;
            v357 = v389;
            v356 = v388;
            v355 = v387;
            v354 = v386;
            v353 = v385;
            v352 = v384;
            v351 = v383;
            v350 = v382;
            v349 = v381;
            v348 = v380;
            v347 = v379;
            v346 = v378;
            v345 = v377;
            v344 = v376;
            v343 = v375;
            v342 = v374;
            v341 = v373;
            v340 = v372;
            *((_QWORD *)&v340 + (((_BYTE)v188 - 2) & 0x3F)) = v270;
            v339 = v371;
            v338 = v370;
            v337 = v369;
            v336 = v368;
            v335 = v367;
            v334 = v366;
            v333 = v365;
            v332 = v364;
            v331 = v363;
            v330 = v362;
            v329 = v361;
            v328 = v360;
            v326 = v358;
            v327 = v359;
            v324 = v356;
            v325 = v357;
            v322 = v354;
            v323 = v355;
            v320 = v352;
            v321 = v353;
            v318 = v350;
            v319 = v351;
            v316 = v348;
            v317 = v349;
            v314 = v346;
            v315 = v347;
            v312 = v344;
            v313 = v345;
            v310 = v342;
            v311 = v343;
            v308 = v340;
            v309 = v341;
            *((_QWORD *)&v308 + (((_BYTE)v188 - 1) & 0x3F)) = *((_QWORD *)&v270 + 1);
            v306 = v338;
            v307 = v339;
            v304 = v336;
            v305 = v337;
            v302 = v334;
            v303 = v335;
            v300 = v332;
            v301 = v333;
            v298 = v330;
            v299 = v331;
            v296 = v328;
            v297 = v329;
            v294 = v326;
            v295 = v327;
            v292 = v324;
            v293 = v325;
            v290 = v322;
            v291 = v323;
            v288 = v320;
            v289 = v321;
            v286 = v318;
            v287 = v319;
            v284 = v316;
            v285 = v317;
            v282 = v314;
            v283 = v315;
            v280 = v312;
            v281 = v313;
            v278 = v310;
            v279 = v311;
            v276 = v308;
            v277 = v309;
            *((_QWORD *)&v276 + (v188 & 0x3F)) = v274;
            v213 = v276;
            v214 = v277;
            v215 = v278;
            v216 = v279;
            v217 = v280;
            v218 = v281;
            v219 = v282;
            v220 = v283;
            v221 = v284;
            v222 = v285;
            v223 = v286;
            v224 = v287;
            v225 = v288;
            v226 = v289;
            v227 = v290;
            v228 = v291;
            v229 = v292;
            v230 = v293;
            v231 = v294;
            v232 = v295;
            v233 = v296;
            v234 = v297;
            *(_QWORD *)(v246 + 9240) = v298;
            *(_OWORD *)(v246 + 9208) = v233;
            *(_OWORD *)(v246 + 9224) = v234;
            *(_OWORD *)(v246 + 9176) = v231;
            *(_OWORD *)(v246 + 9192) = v232;
            *(_OWORD *)(v246 + 9144) = v229;
            *(_OWORD *)(v246 + 9160) = v230;
            *(_OWORD *)(v246 + 9112) = v227;
            *(_OWORD *)(v246 + 9128) = v228;
            *(_OWORD *)(v246 + 9080) = v225;
            *(_OWORD *)(v246 + 9096) = v226;
            *(_OWORD *)(v246 + 9048) = v223;
            *(_OWORD *)(v246 + 9064) = v224;
            *(_OWORD *)(v246 + 9016) = v221;
            *(_OWORD *)(v246 + 9032) = v222;
            *(_OWORD *)(v246 + 8984) = v219;
            *(_OWORD *)(v246 + 9000) = v220;
            *(_OWORD *)(v246 + 8952) = v217;
            *(_OWORD *)(v246 + 8968) = v218;
            *(_OWORD *)(v246 + 8920) = v215;
            *(_OWORD *)(v246 + 8936) = v216;
            *v187 = v213;
            *(_OWORD *)(v246 + 8904) = v214;
            v188 += 15;
            v189 += 8;
          }
          while (v188 != 59);
        }
        else
        {
          *(_QWORD *)(v246 + 9240) = 0;
          *(_OWORD *)(v246 + 9208) = 0u;
          *(_OWORD *)(v246 + 9224) = 0u;
          *(_OWORD *)(v246 + 9176) = 0u;
          *(_OWORD *)(v246 + 9192) = 0u;
          *(_OWORD *)(v246 + 9144) = 0u;
          *(_OWORD *)(v246 + 9160) = 0u;
          *(_OWORD *)(v246 + 9112) = 0u;
          *(_OWORD *)(v246 + 9128) = 0u;
          *(_OWORD *)(v246 + 9080) = 0u;
          *(_OWORD *)(v246 + 9096) = 0u;
          *(_OWORD *)(v246 + 9048) = 0u;
          *(_OWORD *)(v246 + 9064) = 0u;
          *(_OWORD *)(v246 + 9016) = 0u;
          *(_OWORD *)(v246 + 9032) = 0u;
          *(_OWORD *)(v246 + 8984) = 0u;
          *(_OWORD *)(v246 + 9000) = 0u;
          *(_OWORD *)(v246 + 8952) = 0u;
          *(_OWORD *)(v246 + 8968) = 0u;
          *(_OWORD *)(v246 + 8920) = 0u;
          *(_OWORD *)(v246 + 8936) = 0u;
          *(_OWORD *)(v246 + 8888) = 0u;
          *(_OWORD *)(v246 + 8904) = 0u;
        }
      }
LABEL_29:
      v235 = *(_QWORD *)(v245 + 32);
      v236 = v2238;
      *(_OWORD *)v235 = v2237;
      *(_OWORD *)(v235 + 16) = v236;
      *(_OWORD *)(v235 + 32) = v2239;
      *(_QWORD *)(v235 + 48) = v2240;
      *(_QWORD *)(v235 + 56) = v275;
      *(_OWORD *)(v235 + 64) = v2235;
      *(_QWORD *)(v235 + 80) = v2236;
      *(_QWORD *)(v235 + 104) = v2234;
      *(_OWORD *)(v235 + 88) = v2233;
      *(_QWORD *)(v235 + 128) = v2232;
      *(_OWORD *)(v235 + 112) = v2231;
      *(_QWORD *)(v235 + 152) = v2230;
      *(_OWORD *)(v235 + 136) = v2229;
      *(_QWORD *)(v235 + 224) = v2270;
      v237 = v2269;
      *(_OWORD *)(v235 + 192) = v2268;
      *(_OWORD *)(v235 + 208) = v237;
      v238 = v2267;
      *(_OWORD *)(v235 + 160) = v2266;
      *(_OWORD *)(v235 + 176) = v238;
      v239 = v2262;
      *(_OWORD *)(v235 + 232) = v2261;
      v240 = v2263;
      v241 = v2264;
      *(_QWORD *)(v235 + 296) = v2265;
      *(_OWORD *)(v235 + 264) = v240;
      *(_OWORD *)(v235 + 280) = v241;
      *(_OWORD *)(v235 + 248) = v239;
      return;
    }
    v138 = (__int128 *)(v246 + 8528);
    v139 = 14;
    v140 = 112;
    do
    {
      v2205 = v2237;
      v2206 = v2238;
      v2207 = v2239;
      v2208 = v2240;
      v2209 = v275;
      v2210 = v2235;
      v2211 = v2236;
      v2213 = v2234;
      v2212 = v2233;
      v2215 = v2232;
      v2214 = v2231;
      v2217 = v2230;
      v2216 = v2229;
      v2222 = v2270;
      v2220 = v2268;
      v2221 = v2269;
      v2218 = v2266;
      v2219 = v2267;
      v2227 = v2265;
      v2225 = v2263;
      v2226 = v2264;
      v2223 = v2261;
      v2224 = v2262;
      *(double *)((char *)&v2205 + v140) = *(double *)((char *)&v2205 + v140) + 0.00000001;
      sub_20FB23190((uint64_t)&v2196, v2228, (uint64_t)&v2205);
      *(_QWORD *)&v141 = *(_QWORD *)(v246 + 8880);
      v142 = *v138;
      v143 = *(_OWORD *)(v246 + 8544);
      v144 = *(_OWORD *)(v246 + 8560);
      v145 = *(_OWORD *)(v246 + 8576);
      v146 = *(_OWORD *)(v246 + 8592);
      v147 = *(_OWORD *)(v246 + 8608);
      v148 = *(_OWORD *)(v246 + 8624);
      v149 = *(_OWORD *)(v246 + 8640);
      v150 = *(_OWORD *)(v246 + 8656);
      v151 = *(_OWORD *)(v246 + 8672);
      v152 = *(_OWORD *)(v246 + 8688);
      v153 = *(_OWORD *)(v246 + 8704);
      v154 = *(_OWORD *)(v246 + 8720);
      v155 = *(_OWORD *)(v246 + 8736);
      v157 = *(_OWORD *)(v246 + 8752);
      v156 = *(_OWORD *)(v246 + 8768);
      v158 = *(_OWORD *)(v246 + 8784);
      v159 = *(_OWORD *)(v246 + 8800);
      v160 = *(_OWORD *)(v246 + 8816);
      v161 = *(_OWORD *)(v246 + 8832);
      v162 = *(_OWORD *)(v246 + 8848);
      v273 = v2204;
      v265 = v2202;
      v269 = v2203;
      v257 = v2200;
      v261 = v2201;
      v163 = v2197;
      v249 = v2198;
      v253 = v2199;
      v1225 = *(_OWORD *)(v246 + 8864);
      v1224 = v162;
      v1223 = v161;
      v1222 = v160;
      v1221 = v159;
      v1220 = v158;
      v1219 = v156;
      v1218 = v157;
      v1217 = v155;
      v1216 = v154;
      v1215 = v153;
      v1214 = v152;
      v1213 = v151;
      v1212 = v150;
      v1211 = v149;
      v1210 = v148;
      v1209 = v147;
      v1208 = v146;
      v1207 = v145;
      v1206 = v144;
      v1205 = v143;
      v1204 = v142;
      v1226 = v141;
      *((_QWORD *)&v1204 + (((_BYTE)v139 - 14) & 0x3F)) = v2196;
      v1203 = v1235;
      v1202 = v1234;
      v1201 = v1233;
      v1200 = v1232;
      v1199 = v1231;
      v1198 = v1230;
      v1197 = v1229;
      v1196 = v1228;
      v1195 = v1227;
      v1194 = v1226;
      v1193 = v1225;
      v1192 = v1224;
      v1191 = v1223;
      v1190 = v1222;
      v1189 = v1221;
      v1188 = v1220;
      v1187 = v1219;
      v1186 = v1218;
      v1185 = v1217;
      v1184 = v1216;
      v1183 = v1215;
      v1182 = v1214;
      v1181 = v1213;
      v1180 = v1212;
      v1179 = v1211;
      v1178 = v1210;
      v1177 = v1209;
      v1176 = v1208;
      v1175 = v1207;
      v1174 = v1206;
      v1173 = v1205;
      v1172 = v1204;
      *((_QWORD *)&v1172 + (((_BYTE)v139 - 13) & 0x3F)) = v163;
      v1171 = v1203;
      v1170 = v1202;
      v1169 = v1201;
      v1168 = v1200;
      v1167 = v1199;
      v1166 = v1198;
      v1165 = v1197;
      v1164 = v1196;
      v1163 = v1195;
      v1162 = v1194;
      v1161 = v1193;
      v1160 = v1192;
      v1159 = v1191;
      v1158 = v1190;
      v1157 = v1189;
      v1156 = v1188;
      v1155 = v1187;
      v1154 = v1186;
      v1153 = v1185;
      v1152 = v1184;
      v1151 = v1183;
      v1150 = v1182;
      v1149 = v1181;
      v1148 = v1180;
      v1147 = v1179;
      v1146 = v1178;
      v1145 = v1177;
      v1144 = v1176;
      v1143 = v1175;
      v1142 = v1174;
      v1141 = v1173;
      v1140 = v1172;
      *((_QWORD *)&v1140 + (((_BYTE)v139 - 12) & 0x3F)) = v249;
      v1139 = v1171;
      v1138 = v1170;
      v1137 = v1169;
      v1136 = v1168;
      v1135 = v1167;
      v1134 = v1166;
      v1133 = v1165;
      v1132 = v1164;
      v1131 = v1163;
      v1130 = v1162;
      v1129 = v1161;
      v1128 = v1160;
      v1127 = v1159;
      v1126 = v1158;
      v1125 = v1157;
      v1124 = v1156;
      v1123 = v1155;
      v1122 = v1154;
      v1121 = v1153;
      v1120 = v1152;
      v1119 = v1151;
      v1118 = v1150;
      v1117 = v1149;
      v1116 = v1148;
      v1115 = v1147;
      v1114 = v1146;
      v1113 = v1145;
      v1112 = v1144;
      v1111 = v1143;
      v1110 = v1142;
      v1109 = v1141;
      v1108 = v1140;
      *((_QWORD *)&v1108 + (((_BYTE)v139 - 11) & 0x3F)) = *((_QWORD *)&v249 + 1);
      v1107 = v1139;
      v1106 = v1138;
      v1105 = v1137;
      v1104 = v1136;
      v1103 = v1135;
      v1102 = v1134;
      v1101 = v1133;
      v1100 = v1132;
      v1099 = v1131;
      v1098 = v1130;
      v1097 = v1129;
      v1096 = v1128;
      v1095 = v1127;
      v1094 = v1126;
      v1093 = v1125;
      v1092 = v1124;
      v1091 = v1123;
      v1090 = v1122;
      v1089 = v1121;
      v1088 = v1120;
      v1087 = v1119;
      v1086 = v1118;
      v1085 = v1117;
      v1084 = v1116;
      v1083 = v1115;
      v1082 = v1114;
      v1081 = v1113;
      v1080 = v1112;
      v1079 = v1111;
      v1078 = v1110;
      v1077 = v1109;
      v1076 = v1108;
      *((_QWORD *)&v1076 + (((_BYTE)v139 - 10) & 0x3F)) = v253;
      v1075 = v1107;
      v1074 = v1106;
      v1073 = v1105;
      v1072 = v1104;
      v1071 = v1103;
      v1070 = v1102;
      v1069 = v1101;
      v1068 = v1100;
      v1067 = v1099;
      v1066 = v1098;
      v1065 = v1097;
      v1064 = v1096;
      v1063 = v1095;
      v1062 = v1094;
      v1061 = v1093;
      v1060 = v1092;
      v1059 = v1091;
      v1058 = v1090;
      v1057 = v1089;
      v1056 = v1088;
      v1055 = v1087;
      v1054 = v1086;
      v1053 = v1085;
      v1052 = v1084;
      v1051 = v1083;
      v1050 = v1082;
      v1049 = v1081;
      v1048 = v1080;
      v1047 = v1079;
      v1046 = v1078;
      v1045 = v1077;
      v1044 = v1076;
      *((_QWORD *)&v1044 + (((_BYTE)v139 - 9) & 0x3F)) = *((_QWORD *)&v253 + 1);
      v1043 = v1075;
      v1042 = v1074;
      v1041 = v1073;
      v1040 = v1072;
      v1039 = v1071;
      v1038 = v1070;
      v1037 = v1069;
      v1036 = v1068;
      v1035 = v1067;
      v1034 = v1066;
      v1033 = v1065;
      v1032 = v1064;
      v1031 = v1063;
      v1030 = v1062;
      v1029 = v1061;
      v1028 = v1060;
      v1027 = v1059;
      v1026 = v1058;
      v1025 = v1057;
      v1024 = v1056;
      v1023 = v1055;
      v1022 = v1054;
      v1021 = v1053;
      v1020 = v1052;
      v1019 = v1051;
      v1018 = v1050;
      v1017 = v1049;
      v1016 = v1048;
      v1015 = v1047;
      v1014 = v1046;
      v1013 = v1045;
      v1012 = v1044;
      *((_QWORD *)&v1012 + (((_BYTE)v139 - 8) & 0x3F)) = v257;
      v1011 = v1043;
      v1010 = v1042;
      v1009 = v1041;
      v1008 = v1040;
      v1007 = v1039;
      v1006 = v1038;
      v1005 = v1037;
      v1004 = v1036;
      v1003 = v1035;
      v1002 = v1034;
      v1001 = v1033;
      v1000 = v1032;
      v999 = v1031;
      v998 = v1030;
      v997 = v1029;
      v996 = v1028;
      v995 = v1027;
      v994 = v1026;
      v993 = v1025;
      v992 = v1024;
      v991 = v1023;
      v990 = v1022;
      v989 = v1021;
      v988 = v1020;
      v987 = v1019;
      v986 = v1018;
      v985 = v1017;
      v984 = v1016;
      v983 = v1015;
      v982 = v1014;
      v981 = v1013;
      v980 = v1012;
      *((_QWORD *)&v980 + (((_BYTE)v139 - 7) & 0x3F)) = *((_QWORD *)&v257 + 1);
      v979 = v1011;
      v978 = v1010;
      v977 = v1009;
      v976 = v1008;
      v975 = v1007;
      v974 = v1006;
      v973 = v1005;
      v972 = v1004;
      v971 = v1003;
      v970 = v1002;
      v969 = v1001;
      v968 = v1000;
      v967 = v999;
      v966 = v998;
      v965 = v997;
      v964 = v996;
      v963 = v995;
      v962 = v994;
      v961 = v993;
      v960 = v992;
      v959 = v991;
      v958 = v990;
      v957 = v989;
      v956 = v988;
      v955 = v987;
      v954 = v986;
      v953 = v985;
      v952 = v984;
      v951 = v983;
      v950 = v982;
      v949 = v981;
      v948 = v980;
      *((_QWORD *)&v948 + (((_BYTE)v139 - 6) & 0x3F)) = v261;
      v947 = v979;
      v946 = v978;
      v945 = v977;
      v944 = v976;
      v943 = v975;
      v942 = v974;
      v941 = v973;
      v940 = v972;
      v939 = v971;
      v938 = v970;
      v937 = v969;
      v936 = v968;
      v935 = v967;
      v934 = v966;
      v933 = v965;
      v932 = v964;
      v931 = v963;
      v930 = v962;
      v929 = v961;
      v928 = v960;
      v927 = v959;
      v926 = v958;
      v925 = v957;
      v924 = v956;
      v923 = v955;
      v922 = v954;
      v921 = v953;
      v920 = v952;
      v919 = v951;
      v918 = v950;
      v917 = v949;
      v916 = v948;
      *((_QWORD *)&v916 + (((_BYTE)v139 - 5) & 0x3F)) = *((_QWORD *)&v261 + 1);
      v915 = v947;
      v914 = v946;
      v913 = v945;
      v912 = v944;
      v911 = v943;
      v910 = v942;
      v909 = v941;
      v908 = v940;
      v907 = v939;
      v906 = v938;
      v905 = v937;
      v904 = v936;
      v903 = v935;
      v902 = v934;
      v901 = v933;
      v900 = v932;
      v899 = v931;
      v898 = v930;
      v897 = v929;
      v896 = v928;
      v895 = v927;
      v894 = v926;
      v893 = v925;
      v892 = v924;
      v891 = v923;
      v890 = v922;
      v889 = v921;
      v888 = v920;
      v887 = v919;
      v886 = v918;
      v885 = v917;
      v884 = v916;
      *((_QWORD *)&v884 + (((_BYTE)v139 - 4) & 0x3F)) = v265;
      v883 = v915;
      v882 = v914;
      v881 = v913;
      v880 = v912;
      v879 = v911;
      v878 = v910;
      v877 = v909;
      v876 = v908;
      v875 = v907;
      v874 = v906;
      v873 = v905;
      v872 = v904;
      v871 = v903;
      v870 = v902;
      v869 = v901;
      v868 = v900;
      v867 = v899;
      v866 = v898;
      v865 = v897;
      v864 = v896;
      v863 = v895;
      v862 = v894;
      v861 = v893;
      v860 = v892;
      v859 = v891;
      v858 = v890;
      v857 = v889;
      v856 = v888;
      v855 = v887;
      v854 = v886;
      v853 = v885;
      v852 = v884;
      *((_QWORD *)&v852 + (((_BYTE)v139 - 3) & 0x3F)) = *((_QWORD *)&v265 + 1);
      v851 = v883;
      v850 = v882;
      v849 = v881;
      v848 = v880;
      v847 = v879;
      v846 = v878;
      v845 = v877;
      v844 = v876;
      v843 = v875;
      v842 = v874;
      v841 = v873;
      v840 = v872;
      v839 = v871;
      v838 = v870;
      v837 = v869;
      v836 = v868;
      v835 = v867;
      v834 = v866;
      v833 = v865;
      v832 = v864;
      v831 = v863;
      v830 = v862;
      v829 = v861;
      v828 = v860;
      v827 = v859;
      v826 = v858;
      v825 = v857;
      v824 = v856;
      v823 = v855;
      v822 = v854;
      v821 = v853;
      v820 = v852;
      *((_QWORD *)&v820 + (((_BYTE)v139 - 2) & 0x3F)) = v269;
      v819 = v851;
      v818 = v850;
      v817 = v849;
      v816 = v848;
      v815 = v847;
      v814 = v846;
      v813 = v845;
      v812 = v844;
      v811 = v843;
      v810 = v842;
      v809 = v841;
      v808 = v840;
      v807 = v839;
      v806 = v838;
      v805 = v837;
      v804 = v836;
      v803 = v835;
      v802 = v834;
      v801 = v833;
      v800 = v832;
      v799 = v831;
      v798 = v830;
      v797 = v829;
      v796 = v828;
      v795 = v827;
      v794 = v826;
      v793 = v825;
      v792 = v824;
      v791 = v823;
      v790 = v822;
      v789 = v821;
      v788 = v820;
      *((_QWORD *)&v788 + (((_BYTE)v139 - 1) & 0x3F)) = *((_QWORD *)&v269 + 1);
      v787 = v819;
      v786 = v818;
      v785 = v817;
      v784 = v816;
      v783 = v815;
      v782 = v814;
      v781 = v813;
      v780 = v812;
      v779 = v811;
      v778 = v810;
      v777 = v809;
      v776 = v808;
      v775 = v807;
      v774 = v806;
      v773 = v805;
      v772 = v804;
      v771 = v803;
      v770 = v802;
      v769 = v801;
      v768 = v800;
      v767 = v799;
      v766 = v798;
      v765 = v797;
      v764 = v796;
      v763 = v795;
      v762 = v794;
      v761 = v793;
      v760 = v792;
      v759 = v791;
      v758 = v790;
      v757 = v789;
      v756 = v788;
      *((_QWORD *)&v756 + (v139 & 0x3F)) = v273;
      v164 = v756;
      v165 = v757;
      v166 = v758;
      v167 = v759;
      v168 = v760;
      v169 = v761;
      v170 = v762;
      v171 = v763;
      v172 = v764;
      v173 = v765;
      v174 = v766;
      v175 = v767;
      v176 = v768;
      v177 = v769;
      v178 = v770;
      v179 = v771;
      v180 = v772;
      v181 = v773;
      v182 = v774;
      v183 = v775;
      v184 = v776;
      v185 = v777;
      *(_QWORD *)(v246 + 8880) = v778;
      *(_OWORD *)(v246 + 8848) = v184;
      *(_OWORD *)(v246 + 8864) = v185;
      *(_OWORD *)(v246 + 8816) = v182;
      *(_OWORD *)(v246 + 8832) = v183;
      *(_OWORD *)(v246 + 8784) = v180;
      *(_OWORD *)(v246 + 8800) = v181;
      *(_OWORD *)(v246 + 8752) = v178;
      *(_OWORD *)(v246 + 8768) = v179;
      *(_OWORD *)(v246 + 8720) = v176;
      *(_OWORD *)(v246 + 8736) = v177;
      *(_OWORD *)(v246 + 8688) = v174;
      *(_OWORD *)(v246 + 8704) = v175;
      *(_OWORD *)(v246 + 8656) = v172;
      *(_OWORD *)(v246 + 8672) = v173;
      *(_OWORD *)(v246 + 8624) = v170;
      *(_OWORD *)(v246 + 8640) = v171;
      *(_OWORD *)(v246 + 8592) = v168;
      *(_OWORD *)(v246 + 8608) = v169;
      *(_OWORD *)(v246 + 8560) = v166;
      *(_OWORD *)(v246 + 8576) = v167;
      *v138 = v164;
      *(_OWORD *)(v246 + 8544) = v165;
      v139 += 15;
      v140 += 8;
    }
    while (v139 != 59);
LABEL_21:
    v186 = v242;
    if (*(_BYTE *)(v242 + 20))
      goto LABEL_22;
    goto LABEL_29;
  }
}

void sub_20FB22304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v35 = *(_QWORD *)(a13 + 32);
  v36 = *(_OWORD *)&STACK[0x7B30];
  *(_OWORD *)v35 = *(_OWORD *)&STACK[0x7B20];
  *(_OWORD *)(v35 + 16) = v36;
  *(_OWORD *)(v35 + 32) = *(_OWORD *)a34;
  *(_QWORD *)(v35 + 48) = *(_QWORD *)(a34 + 16);
  *(_QWORD *)(v35 + 56) = a33;
  *(_OWORD *)(v35 + 64) = *(_OWORD *)&STACK[0x7B00];
  *(_QWORD *)(v35 + 80) = STACK[0x7B10];
  *(_QWORD *)(v35 + 104) = STACK[0x7AF0];
  *(_OWORD *)(v35 + 88) = *(_OWORD *)&STACK[0x7AE0];
  *(_QWORD *)(v35 + 128) = STACK[0x7AD0];
  *(_OWORD *)(v35 + 112) = *(_OWORD *)&STACK[0x7AC0];
  *(_QWORD *)(v35 + 152) = STACK[0x7AB0];
  *(_OWORD *)(v35 + 136) = *(_OWORD *)&STACK[0x7AA0];
  *(_QWORD *)(v35 + 224) = *(_QWORD *)(v34 - 176);
  v37 = *(_OWORD *)(v34 - 192);
  *(_OWORD *)(v35 + 192) = *(_OWORD *)(v34 - 208);
  *(_OWORD *)(v35 + 208) = v37;
  v38 = *(_OWORD *)(v34 - 224);
  *(_OWORD *)(v35 + 160) = *(_OWORD *)(v34 - 240);
  *(_OWORD *)(v35 + 176) = v38;
  v39 = *(_OWORD *)&STACK[0x7CC0];
  *(_OWORD *)(v35 + 232) = *(_OWORD *)&STACK[0x7CB0];
  v40 = *(_OWORD *)&STACK[0x7CD0];
  v41 = *(_OWORD *)&STACK[0x7CE0];
  *(_QWORD *)(v35 + 296) = STACK[0x7CF0];
  *(_OWORD *)(v35 + 264) = v40;
  *(_OWORD *)(v35 + 280) = v41;
  *(_OWORD *)(v35 + 248) = v39;
  _Unwind_Resume(a1);
}

void sub_20FB223C4(uint64_t a1, int8x16_t **a2, double **a3, double a4, double a5)
{
  int8x16_t *v5;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t *v15;
  int8x16_t *v16;
  double v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  double v22;
  int8x16_t v23;
  double v24;
  double v25;
  double v26;
  unint64_t v27;
  double v28;
  int8x16_t v29;
  float64x2_t v30;
  double v31;
  int8x16_t v32;
  float64x2_t v33;
  unint64_t v34;
  unint64_t v35;
  float64x2_t v36;
  double *v37;
  double *v38;
  double *v39;
  double *v40;
  double *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  float64x2_t v46;
  float64x2_t v47;
  int8x16_t v48;
  float64x2_t v49;
  unint64_t v50;
  float64x2_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  double *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  float64x2_t v63;
  double v64;
  double v66;
  float64x2_t v67;
  float64x2_t v69;
  float64x2_t v71;
  double v72;
  double v73;
  double v75;
  double v77;
  float64x2_t v79;
  float64x2_t v85;
  float64x2_t v88;
  float64_t v89;
  double v90;
  double v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  double v97;
  float64x2_t v98;
  float64x2_t v100;
  float64x2_t v101;
  float64_t v102;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  double v113;
  float64_t v114;
  float64x2_t v115;
  float64x2_t v116;
  int64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  double v121;
  float64x2_t v122;
  float64x2_t v123;
  int8x16_t v124;
  float64x2_t v125;
  int8x16_t v126;
  float64x2_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  float64_t v161;
  int8x16_t v162;
  unint64_t v163;
  uint64_t v164;
  float64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  double v169;
  int8x16_t v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  float64_t v177;
  float64_t v178;
  float64_t v179;
  float64_t v180;
  float64x2_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  float64x2_t v189;
  float64x2_t v190;
  int8x16_t v191;
  float64x2_t v192;
  double v193;
  float64x2_t v194;
  _BYTE v195[32];
  float64x2_t v196;
  _BYTE v197[32];
  uint64_t v198;
  float64x2_t v199;
  double v200;
  float64x2_t v201;
  double v202;
  double *v203;
  float64x2_t v204;
  double v205;
  float64x2_t v206;
  double v207;

  v5 = a2[5];
  if (v5[1].i8[4])
  {
    v8 = a2[1];
    v172 = *(double *)(*a2)[6].i64;
    v10 = (*a2)[2];
    v9 = (*a2)[3];
    v168 = (*a2)[3].i64[0];
    v170 = (*a2)[5];
    v166 = vextq_s8(v170, v170, 8uLL).u64[0];
    v160 = vextq_s8((*a2)[4], (*a2)[4], 8uLL).u64[0];
    v162 = (*a2)[4];
    v159 = vextq_s8(v9, v9, 8uLL).u64[0];
    v156 = (*a2)[7].i64[1];
    v11 = *(int8x16_t *)((char *)*a2 + 104);
    v153 = v8[3].i64[0];
    v12 = v8[2];
    v150 = v8[4].i64[1];
    v13 = *(int8x16_t *)((char *)v8 + 56);
    v152 = v8[6].i64[0];
    v14 = v8[5];
    v15 = a2[2];
    v16 = a2[3];
    v174 = *(double *)v15[3].i64;
    v182 = v15[2];
    v175 = *(double *)&v15[4].i64[1];
    v183 = *(int8x16_t *)((char *)v15 + 56);
    v176 = *(double *)v15[6].i64;
    v184 = v15[5];
    v178 = *(double *)&v15[7].i64[1];
    v186 = *(int8x16_t *)((char *)v15 + 104);
    v179 = *(double *)v16[3].i64;
    v188 = v16[2];
    v180 = *(double *)&v16[4].i64[1];
    v187 = *(int8x16_t *)((char *)v16 + 56);
    v177 = *(double *)v16[6].i64;
    v185 = v16[5];
    a3[1] = *a3;
    v9.i64[0] = 0x3E45798EE2308C3ALL;
    v181 = (float64x2_t)v9;
    v17 = *(double *)v5[2].i64 + 0.00000001;
    v18 = a3[3];
    v164 = v10.i64[0];
    v157 = v11.i64[0];
    v158 = vextq_s8(v10, v10, 8uLL).u64[0];
    v149 = vextq_s8(v11, v11, 8uLL).u64[0];
    v154 = v14.i64[0];
    v155 = v12.i64[0];
    v147 = vextq_s8(v12, v12, 8uLL).u64[0];
    v151 = v13.i64[0];
    v146 = vextq_s8(v13, v13, 8uLL).u64[0];
    v148 = vextq_s8(v14, v14, 8uLL).u64[0];
    sub_20FD33470(v18, (uint64_t)a3, a4, a5);
    v20 = *a3;
    v19 = a3[1];
    if (v17 == 0.0)
    {
      v21 = *a3;
    }
    else
    {
      v21 = a3[1];
      if (v20 != v19)
      {
        do
        {
          v22 = *v20 - v17;
          v203 = sub_20FD33354(v18, v22);
          sub_210122B7C((uint64_t *)v18 + 6, (uint64_t *)&v203, (uint64_t)&v189, v22);
          v23 = v191;
          v20[6] = v192.f64[0];
          *((int8x16_t *)v20 + 2) = v23;
          v20 += 7;
        }
        while (v20 != v19);
        v21 = *a3;
        v19 = a3[1];
      }
    }
    *(_QWORD *)&v24 = vextq_s8(v182, v182, 8uLL).u64[0];
    *(_QWORD *)&v25 = vextq_s8(v183, v183, 8uLL).u64[0];
    *(_QWORD *)&v26 = vextq_s8(v184, v184, 8uLL).u64[0];
    v27 = 0x6DB6DB6DB6DB6DB7 * (v19 - v21);
    if (v27 >= 2)
    {
      v37 = v21 + 7;
      v29.i64[0] = v170.i64[0];
      v28 = v172;
      v31 = *(double *)&v166;
      *(_QWORD *)&v30.f64[0] = v168;
      v32 = v162;
      *(_QWORD *)&v33.f64[0] = v164;
      v35 = v159;
      v34 = v160;
      *(_QWORD *)&v36.f64[0] = v158;
      if (v21[7] - *v21 < 0.0001)
      {
        if (v21 + 14 != v19)
        {
          v38 = v21 + 11;
          do
          {
            *(v38 - 4) = v38[3];
            *(_OWORD *)(v38 - 3) = *((_OWORD *)v38 + 2);
            *(v38 - 1) = v38[6];
            *(_OWORD *)v38 = *(_OWORD *)(v38 + 7);
            v38[2] = v38[9];
            v39 = v38 + 10;
            v38 += 7;
            v37 += 7;
          }
          while (v39 != v19);
          v21 = *a3;
        }
        a3[1] = v37;
        v27 = 0x6DB6DB6DB6DB6DB7 * (v37 - v21);
        v19 = v37;
      }
      if (v27 >= 3)
      {
        v40 = &v21[7 * v27];
        v42 = *(v40 - 14);
        v41 = v40 - 14;
        if (*(v19 - 7) - v42 < 0.0001)
        {
          if (v41 + 7 != v19)
          {
            v43 = 112 - (_QWORD)v21;
            v44 = 7 * v27;
            do
            {
              v45 = &v21[v44];
              *(v45 - 14) = v21[v44 - 7];
              *(_OWORD *)(v45 - 13) = *(_OWORD *)&v21[v44 - 6];
              *(v45 - 11) = v21[v44 - 4];
              *((_OWORD *)v45 - 5) = *(_OWORD *)&v21[v44 - 3];
              *(v45 - 8) = v21[v44 - 1];
              v43 -= 56;
              v21 += 7;
            }
            while (&v21[v44 - 7] != v19);
            v21 = *a3;
            v41 = (double *)(56 * v27 - v43);
          }
          a3[1] = v41;
          LODWORD(v27) = -1227133513 * (v41 - v21);
        }
      }
    }
    else
    {
      v29.i64[0] = v170.i64[0];
      v28 = v172;
      v31 = *(double *)&v166;
      *(_QWORD *)&v30.f64[0] = v168;
      v32 = v162;
      *(_QWORD *)&v33.f64[0] = v164;
      v35 = v159;
      v34 = v160;
      *(_QWORD *)&v36.f64[0] = v158;
    }
    v46.f64[0] = v33.f64[0];
    v46.f64[1] = v36.f64[0];
    v47.f64[0] = v30.f64[0];
    *(_QWORD *)&v47.f64[1] = v35;
    v48.i64[0] = v32.i64[0];
    v48.i64[1] = v34;
    *(_QWORD *)&v49.f64[0] = vextq_s8(v186, v186, 8uLL).u64[0];
    v50 = vextq_s8(v185, v185, 8uLL).u64[0];
    *(_QWORD *)&v51.f64[0] = vextq_s8(v188, v188, 8uLL).u64[0];
    v52 = vextq_s8(v187, v187, 8uLL).u64[0];
    v189 = v46;
    v190 = v47;
    v193 = v28;
    *(_QWORD *)&v46.f64[0] = v29.i64[0];
    v46.f64[1] = v31;
    v191 = v48;
    v192 = v46;
    *(_QWORD *)v195 = v150;
    *(_QWORD *)&v46.f64[0] = v151;
    *(_QWORD *)&v46.f64[1] = v146;
    v194 = v46;
    *(_QWORD *)&v195[24] = v153;
    *(_QWORD *)&v46.f64[0] = v155;
    *(_QWORD *)&v46.f64[1] = v147;
    *(float64x2_t *)&v195[8] = v46;
    *(_QWORD *)v197 = v152;
    *(_QWORD *)&v46.f64[0] = v154;
    *(_QWORD *)&v46.f64[1] = v148;
    v196 = v46;
    *(_QWORD *)&v197[24] = v156;
    *(_QWORD *)&v46.f64[0] = v157;
    *(_QWORD *)&v46.f64[1] = v149;
    *(float64x2_t *)&v197[8] = v46;
    if ((v27 & 0xFFFFFFFE) != 0)
    {
      v161 = v49.f64[0];
      v163 = v50;
      v165 = v51.f64[0];
      v167 = v52;
      v169 = v24;
      v171 = v25;
      v173 = v26;
      v53 = 0;
      v54 = v27 - 1;
      do
      {
        v55 = a3[4];
        v56 = &(*a3)[v53];
        v57 = v55[9];
        v58 = v55[12];
        v59 = v55[13];
        v61 = v55[10];
        v60 = v55[11];
        v62 = v55[22];
        v63 = *(float64x2_t *)(v55 + 20);
        v64 = v55[25];
        _Q18 = *(float64x2_t *)(v55 + 23);
        v66 = v55[28];
        v67 = *(float64x2_t *)(v55 + 26);
        _Q26 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v63, v55[8]), (float64x2_t)0, _Q18), (float64x2_t)0, v67);
        v69 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v63, v60), _Q18, v57), (float64x2_t)0, v67);
        _D29 = v62 * v60 + v64 * v57 + v66 * 0.0;
        v71 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, v58), _Q18, v59), v67, v61);
        v72 = v62 * v58 + v64 * v59 + v66 * v61;
        v73 = v55[31];
        _Q25 = *(float64x2_t *)(v55 + 29);
        v75 = v55[34];
        _Q23 = *(float64x2_t *)(v55 + 32);
        v77 = v55[37];
        _Q21 = *(float64x2_t *)(v55 + 35);
        v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q25.f64[0]), v69, _Q25, 1), v71, v73);
        __asm { FMLA            D1, D29, V25.D[1] }
        v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q23.f64[0]), v69, _Q23, 1), v71, v75);
        __asm { FMLA            D3, D29, V23.D[1] }
        _D3 = _D3 + v72 * v75;
        v88 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v69, _Q21, 1), v71, v77);
        __asm { FMLA            D26, D29, V21.D[1] }
        v89 = _Q26.f64[0] + v72 * v77;
        v90 = v55[15];
        v69.f64[0] = v55[18];
        v91 = v55[19];
        v92 = v55[16];
        v71.f64[0] = v55[17];
        v93 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v63, v55[14]), (float64x2_t)0, _Q18), (float64x2_t)0, v67);
        v94 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v63, v71.f64[0]), _Q18, v90), (float64x2_t)0, v67);
        _D27 = v62 * v71.f64[0] + v64 * v90 + v66 * 0.0;
        _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, v69.f64[0]), _Q18, v91), v67, v92);
        v97 = v62 * v69.f64[0] + v64 * v91 + v66 * v92;
        v98 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, _Q25.f64[0]), v94, _Q25, 1), _Q19, v73);
        __asm { FMLA            D16, D27, V25.D[1] }
        v100 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, _Q23.f64[0]), v94, _Q23, 1), _Q19, v75);
        __asm { FMLA            D18, D27, V23.D[1] }
        _Q18.f64[0] = _Q18.f64[0] + v97 * v75;
        v101 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, _Q21.f64[0]), v94, _Q21, 1), _Q19, v77);
        __asm { FMLA            D19, D27, V21.D[1] }
        v102 = _Q19.f64[0] + v97 * v77;
        v203 = *(double **)v56;
        v198 = *((_QWORD *)v56 + 7);
        _Q19.f64[0] = v56[3];
        _Q20 = *(float64x2_t *)(v56 + 1);
        __asm { FMLA            D23, D18, V20.D[1] }
        v204 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98, _Q20.f64[0]), v100, _Q20, 1), v101, _Q19.f64[0]);
        v205 = _Q23.f64[0] + v102 * _Q19.f64[0];
        _Q19.f64[0] = v56[6];
        _Q20 = *(float64x2_t *)(v56 + 4);
        __asm { FMLA            D23, D3, V20.D[1] }
        v206 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q20.f64[0]), v85, _Q20, 1), v88, _Q19.f64[0]);
        v207 = _Q23.f64[0] + v89 * _Q19.f64[0];
        _Q19.f64[0] = v56[10];
        _Q20 = *(float64x2_t *)(v56 + 8);
        __asm { FMLA            D16, D18, V20.D[1] }
        v199 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98, _Q20.f64[0]), v100, _Q20, 1), v101, _Q19.f64[0]);
        v200 = _D16 + v102 * _Q19.f64[0];
        v98.f64[0] = v56[13];
        _Q7 = *(float64x2_t *)(v56 + 11);
        __asm { FMLA            D1, D3, V7.D[1] }
        v201 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q7.f64[0]), v85, _Q7, 1), v88, v98.f64[0]);
        v202 = _D1 + v89 * v98.f64[0];
        sub_20F4BA308((uint64_t)&v189, (uint64_t)(v55 + 4), (uint64_t)&v203, (uint64_t)&v198);
        v53 += 7;
        --v54;
      }
      while (v54);
      v28 = v193;
      v29 = (int8x16_t)v192;
      v32 = v191;
      v30 = v190;
      v33 = v189;
      *(_QWORD *)&v31 = vextq_s8(v29, v29, 8uLL).u64[0];
      v34 = vextq_s8(v32, v32, 8uLL).u64[0];
      v35 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
      *(_QWORD *)&v36.f64[0] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
      v25 = v171;
      v26 = v173;
      v52 = v167;
      v24 = v169;
      v50 = v163;
      v51.f64[0] = v165;
      v49.f64[0] = v161;
    }
    *(_QWORD *)&v33.f64[1] = v35;
    *(_QWORD *)&v110.f64[1] = v182.i64[1];
    *(_QWORD *)&v36.f64[1] = v32.i64[0];
    *(_QWORD *)&v30.f64[1] = v34;
    v109 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v33, *(double *)v182.i64), v36, v24), v30, v174);
    v110.f64[0] = *(double *)v29.i64 * *(double *)v182.i64 + v31 * v24 + v28 * v174;
    v111 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v33, *(double *)v183.i64), v36, v25), v30, v175);
    *(double *)v32.i64 = *(double *)v29.i64 * *(double *)v183.i64 + v31 * v25 + v28 * v175;
    v112 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v33, *(double *)v184.i64), v36, v26), v30, v176);
    v113 = *(double *)v29.i64 * *(double *)v184.i64 + v31 * v26 + v28 * v176;
    if (v113 >= 0.0)
    {
      if (v109.f64[0] >= -v111.f64[1])
      {
        v119 = (float64x2_t)vzip1q_s64((int64x2_t)v32, (int64x2_t)v112);
        *(_QWORD *)&v120.f64[0] = vdupq_laneq_s64((int64x2_t)v112, 1).u64[0];
        v120.f64[1] = v110.f64[0];
        v116 = vsubq_f64(v119, v120);
        v110 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v109, 1), v111);
        v109.f64[0] = v113 + 1.0 + v109.f64[0] + v111.f64[1];
      }
      else
      {
        v116.f64[0] = v112.f64[0] + v110.f64[0];
        v110.f64[0] = v113 + 1.0 - (v109.f64[0] + v111.f64[1]);
        v116.f64[1] = *(double *)v32.i64 + v112.f64[1];
        v109.f64[0] = v110.f64[0];
      }
    }
    else if (v109.f64[0] <= v111.f64[1])
    {
      v117 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v109, 1), v111);
      v118.f64[1] = *(double *)v29.i64 * *(double *)v183.i64 + v31 * v25 + v28 * v175;
      v118.f64[0] = 1.0 - v113;
      v112.f64[0] = v111.f64[1] - v109.f64[0];
      v109 = vaddq_f64(v118, v112);
      v116 = (float64x2_t)vzip1q_s64(v117, (int64x2_t)v109);
      v110 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v109, 1);
    }
    else
    {
      v114 = v109.f64[0] - v111.f64[1];
      v109.f64[0] = 1.0 - v113;
      v115 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v111.f64[0], 0);
      v115.f64[0] = v114;
      v116 = vaddq_f64(v109, v115);
      v110.f64[0] = v112.f64[0] + v110.f64[0];
      v109.f64[0] = v116.f64[0];
    }
    v121 = 0.5 / sqrt(v109.f64[0]);
    v122 = vmulq_n_f64(v110, v121);
    v123 = vmulq_n_f64(v116, v121);
    v49.f64[1] = v178;
    v124 = (int8x16_t)vsubq_f64(v49, *(float64x2_t *)&v197[16]);
    v125.f64[0] = v177;
    *(_QWORD *)&v125.f64[1] = v186.i64[0];
    v126 = (int8x16_t)vsubq_f64(v125, *(float64x2_t *)v197);
    *(_QWORD *)&v127.f64[0] = v185.i64[0];
    *(_QWORD *)&v127.f64[1] = v50;
    v128 = (int8x16_t)vsubq_f64(v127, v196);
    v125.f64[0] = v180;
    v51.f64[1] = v179;
    v129 = (int8x16_t)vsubq_f64(v51, *(float64x2_t *)&v195[16]);
    *(_QWORD *)&v127.f64[0] = v187.i64[0];
    *(_QWORD *)&v127.f64[1] = v52;
    v130 = (int8x16_t)vsubq_f64(v127, v194);
    *(_QWORD *)&v125.f64[1] = v188.i64[0];
    v131 = (int8x16_t)vsubq_f64(v125, *(float64x2_t *)v195);
    v132 = (float64x2_t)vextq_s8(v130, v131, 8uLL);
    v133 = (float64x2_t)vextq_s8(v131, v129, 8uLL);
    v134 = (float64x2_t)vextq_s8(v129, v128, 8uLL);
    v135 = (float64x2_t)vdupq_lane_s64(v130.i64[0], 0);
    *(_QWORD *)&v135.f64[0] = *(_OWORD *)&vaddq_f64(v122, v122);
    v136 = vnegq_f64((float64x2_t)vextq_s8(v126, v124, 8uLL));
    v137 = vnegq_f64((float64x2_t)vextq_s8(v128, v126, 8uLL));
    v138 = vnegq_f64(v132);
    v132.f64[0] = *(float64_t *)(a1 + 3912);
    v139 = vsubq_f64(v138, *(float64x2_t *)(a1 + 3832));
    v140 = vsubq_f64(vnegq_f64(v133), *(float64x2_t *)(a1 + 3848));
    v141 = vsubq_f64(vnegq_f64(v134), *(float64x2_t *)(a1 + 3864));
    v142 = vsubq_f64(v137, *(float64x2_t *)(a1 + 3880));
    v143 = vsubq_f64(v136, *(float64x2_t *)(a1 + 3896));
    v144 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
    v145 = vdivq_f64(vsubq_f64(vnegq_f64(v135), *(float64x2_t *)(a1 + 3816)), v144);
    *(float64x2_t *)(a1 + 7688) = vdivq_f64(vsubq_f64(vnegq_f64(vaddq_f64(v123, v123)), *(float64x2_t *)(a1 + 3800)), v144);
    *(float64x2_t *)(a1 + 7704) = v145;
    *(float64x2_t *)(a1 + 7720) = vdivq_f64(v139, v144);
    *(float64x2_t *)(a1 + 7736) = vdivq_f64(v140, v144);
    *(float64x2_t *)(a1 + 7752) = vdivq_f64(v141, v144);
    *(float64x2_t *)(a1 + 7768) = vdivq_f64(v142, v144);
    *(float64x2_t *)(a1 + 7784) = vdivq_f64(v143, v144);
    *(_QWORD *)(a1 + 7800) = *(_OWORD *)&vdivq_f64(vsubq_f64(vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v124, 1)), v132), v181);
  }
}

void sub_20FB22DA4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB23134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB23158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB2316C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

float64x2_t sub_20FB23190(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float64x2_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float64x2_t v39;
  double v40;
  double v42;
  float64x2_t v43;
  float64x2_t v45;
  float64x2_t v47;
  double v48;
  double v49;
  double v51;
  double v53;
  float64x2_t v55;
  float64x2_t v61;
  float64x2_t v64;
  float64_t v65;
  double v66;
  double v67;
  double v68;
  float64x2_t v69;
  float64x2_t v70;
  double v73;
  float64x2_t v74;
  float64x2_t v76;
  float64x2_t v77;
  float64_t v78;
  uint64_t v85;
  double v88;
  double v89;
  double v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v96;
  float64x2_t v99;
  double v101;
  float64_t v102;
  float64x2_t v103;
  float64x2_t v104;
  int64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t result;
  int64x2_t v136;
  _BYTE v137[32];
  float64x2_t v138;
  _BYTE v139[104];
  uint64_t v140;
  float64x2_t v141;
  double v142;
  float64x2_t v143;
  double v144;
  uint64_t v145;
  float64x2_t v146;
  double v147;
  float64x2_t v148;
  double v149;

  v5 = a2[3];
  v6 = *(_QWORD *)(*a2 + 32);
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 56) = *(_QWORD *)(a3 + 56);
  v9 = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(v6 + 80) = *(_QWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 64) = v9;
  v10 = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(v6 + 104) = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(v6 + 88) = v10;
  v11 = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(v6 + 128) = *(_QWORD *)(a3 + 128);
  *(_OWORD *)(v6 + 112) = v11;
  v12 = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(v6 + 152) = *(_QWORD *)(a3 + 152);
  *(_OWORD *)(v6 + 136) = v12;
  v14 = *(_OWORD *)(a3 + 192);
  v13 = *(_OWORD *)(a3 + 208);
  v15 = *(_OWORD *)(a3 + 176);
  *(_QWORD *)(v6 + 224) = *(_QWORD *)(a3 + 224);
  *(_OWORD *)(v6 + 192) = v14;
  *(_OWORD *)(v6 + 208) = v13;
  *(_OWORD *)(v6 + 176) = v15;
  *(_OWORD *)(v6 + 160) = *(_OWORD *)(a3 + 160);
  v16 = *(_OWORD *)(a3 + 264);
  v17 = *(_OWORD *)(a3 + 280);
  v18 = *(_QWORD *)(a3 + 296);
  *(_OWORD *)(v6 + 248) = *(_OWORD *)(a3 + 248);
  *(_QWORD *)(v6 + 296) = v18;
  *(_OWORD *)(v6 + 264) = v16;
  *(_OWORD *)(v6 + 280) = v17;
  *(_OWORD *)(v6 + 232) = *(_OWORD *)(a3 + 232);
  v20 = (_QWORD *)*a2;
  v19 = a2[1];
  v22 = *(_OWORD *)(v19 + 16);
  v21 = *(_OWORD *)(v19 + 32);
  v136 = *(int64x2_t *)v19;
  *(_OWORD *)v137 = v22;
  *(_OWORD *)&v137[16] = v21;
  v23 = *(_OWORD *)(v19 + 96);
  v25 = *(float64x2_t *)(v19 + 48);
  v24 = *(_OWORD *)(v19 + 64);
  *(_OWORD *)&v139[16] = *(_OWORD *)(v19 + 80);
  *(_OWORD *)&v139[32] = v23;
  v138 = v25;
  *(_OWORD *)v139 = v24;
  v27 = *(_OWORD *)(v19 + 128);
  v26 = *(_OWORD *)(v19 + 144);
  v28 = *(_OWORD *)(v19 + 112);
  *(_QWORD *)&v139[96] = *(_QWORD *)(v19 + 160);
  *(_OWORD *)&v139[64] = v27;
  *(_OWORD *)&v139[80] = v26;
  *(_OWORD *)&v139[48] = v28;
  if (((-1227133513 * ((uint64_t)(v20[1] - *v20) >> 3)) & 0xFFFFFFFE) != 0)
  {
    v29 = 0;
    v30 = -1227133513 * ((uint64_t)(v20[1] - *v20) >> 3) - 1;
    do
    {
      v31 = *(_QWORD *)(*a2 + 32);
      v32 = (uint64_t *)(*(_QWORD *)*a2 + v29);
      v33 = *(double *)(v31 + 72);
      v34 = *(double *)(v31 + 96);
      v35 = *(double *)(v31 + 104);
      v37 = *(double *)(v31 + 80);
      v36 = *(double *)(v31 + 88);
      v38 = *(double *)(v31 + 176);
      v39 = *(float64x2_t *)(v31 + 160);
      v40 = *(double *)(v31 + 200);
      _Q18 = *(float64x2_t *)(v31 + 184);
      v42 = *(double *)(v31 + 224);
      v43 = *(float64x2_t *)(v31 + 208);
      _Q26 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v39, *(double *)(v31 + 64)), (float64x2_t)0, _Q18), (float64x2_t)0, v43);
      v45 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v39, v36), _Q18, v33), (float64x2_t)0, v43);
      _D29 = v38 * v36 + v40 * v33 + v42 * 0.0;
      v47 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v34), _Q18, v35), v43, v37);
      v48 = v38 * v34 + v40 * v35 + v42 * v37;
      v49 = *(double *)(v31 + 248);
      _Q25 = *(float64x2_t *)(v31 + 232);
      v51 = *(double *)(v31 + 272);
      _Q23 = *(float64x2_t *)(v31 + 256);
      v53 = *(double *)(v31 + 296);
      _Q21 = *(float64x2_t *)(v31 + 280);
      v55 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q25.f64[0]), v45, _Q25, 1), v47, v49);
      __asm { FMLA            D1, D29, V25.D[1] }
      v61 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q23.f64[0]), v45, _Q23, 1), v47, v51);
      __asm { FMLA            D3, D29, V23.D[1] }
      _D3 = _D3 + v48 * v51;
      v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q26, _Q21.f64[0]), v45, _Q21, 1), v47, v53);
      __asm { FMLA            D26, D29, V21.D[1] }
      v65 = _Q26.f64[0] + v48 * v53;
      v66 = *(double *)(v31 + 120);
      v45.f64[0] = *(float64_t *)(v31 + 144);
      v67 = *(double *)(v31 + 152);
      v68 = *(double *)(v31 + 128);
      v47.f64[0] = *(float64_t *)(v31 + 136);
      v69 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v39, *(double *)(v31 + 112)), (float64x2_t)0, _Q18), (float64x2_t)0, v43);
      v70 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v39, v47.f64[0]), _Q18, v66), (float64x2_t)0, v43);
      _D27 = v38 * v47.f64[0] + v40 * v66 + v42 * 0.0;
      _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v45.f64[0]), _Q18, v67), v43, v68);
      v73 = v38 * v45.f64[0] + v40 * v67 + v42 * v68;
      v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, _Q25.f64[0]), v70, _Q25, 1), _Q19, v49);
      __asm { FMLA            D16, D27, V25.D[1] }
      v76 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, _Q23.f64[0]), v70, _Q23, 1), _Q19, v51);
      __asm { FMLA            D18, D27, V23.D[1] }
      _Q18.f64[0] = _Q18.f64[0] + v73 * v51;
      v77 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, _Q21.f64[0]), v70, _Q21, 1), _Q19, v53);
      __asm { FMLA            D19, D27, V21.D[1] }
      v78 = _Q19.f64[0] + v73 * v53;
      v145 = *v32;
      v140 = v32[7];
      *(_QWORD *)&_Q19.f64[0] = v32[3];
      _Q20 = *(float64x2_t *)(v32 + 1);
      __asm { FMLA            D23, D18, V20.D[1] }
      v146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v74, _Q20.f64[0]), v76, _Q20, 1), v77, _Q19.f64[0]);
      v147 = _Q23.f64[0] + v78 * _Q19.f64[0];
      *(_QWORD *)&_Q19.f64[0] = v32[6];
      _Q20 = *((float64x2_t *)v32 + 2);
      __asm { FMLA            D23, D3, V20.D[1] }
      v148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, _Q20.f64[0]), v61, _Q20, 1), v64, _Q19.f64[0]);
      v149 = _Q23.f64[0] + v65 * _Q19.f64[0];
      *(_QWORD *)&_Q19.f64[0] = v32[10];
      _Q20 = *((float64x2_t *)v32 + 4);
      __asm { FMLA            D16, D18, V20.D[1] }
      v141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v74, _Q20.f64[0]), v76, _Q20, 1), v77, _Q19.f64[0]);
      v142 = _D16 + v78 * _Q19.f64[0];
      *(_QWORD *)&v74.f64[0] = v32[13];
      _Q7 = *(float64x2_t *)(v32 + 11);
      __asm { FMLA            D1, D3, V7.D[1] }
      v143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, _Q7.f64[0]), v61, _Q7, 1), v64, v74.f64[0]);
      v144 = _D1 + v65 * v74.f64[0];
      sub_20F4BA308((uint64_t)&v136, v31 + 32, (uint64_t)&v145, (uint64_t)&v140);
      v29 += 56;
      --v30;
    }
    while (v30);
  }
  v85 = a2[2];
  _Q4.f64[0] = *(float64_t *)v137;
  _V7.D[1] = v138.f64[1];
  v88 = *(double *)(v85 + 16);
  _Q6 = *(int64x2_t *)v85;
  v89 = *(double *)(v85 + 40);
  v90 = *(double *)(v85 + 64);
  v91 = (float64x2_t)vzip1q_s64(v136, *(int64x2_t *)&v137[8]);
  v92 = (float64x2_t)vzip2q_s64(v136, *(int64x2_t *)&v137[8]);
  _Q4.f64[1] = *(float64_t *)&v137[24];
  v93 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, *(double *)v85), v92, *(float64x2_t *)v85, 1), _Q4, v88);
  _Q1 = vmulq_f64(v138, *(float64x2_t *)v85);
  _D2 = *(_QWORD *)(v85 + 8);
  __asm { FMLA            D1, D2, V7.D[1] }
  _Q1.f64[0] = _Q1.f64[0] + *(double *)v139 * v88;
  v96 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, *(double *)(v85 + 24)), v92, *(float64x2_t *)(v85 + 24), 1), _Q4, v89);
  _Q6.i64[0] = *(_QWORD *)(v85 + 32);
  __asm { FMLA            D2, D6, V7.D[1] }
  *(double *)_Q6.i64 = _D2 + *(double *)v139 * v89;
  v99 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, *(double *)(v85 + 48)), v92, *(float64x2_t *)(v85 + 48), 1), _Q4, v90);
  _D16 = *(_QWORD *)(v85 + 56);
  __asm { FMLA            D4, D16, V7.D[1] }
  v101 = _Q4.f64[0] + *(double *)v139 * v90;
  if (v101 >= 0.0)
  {
    if (v93.f64[0] >= -v96.f64[1])
    {
      v107 = (float64x2_t)vzip1q_s64(_Q6, (int64x2_t)v99);
      *(_QWORD *)&v108.f64[0] = vdupq_laneq_s64((int64x2_t)v99, 1).u64[0];
      v108.f64[1] = _Q1.f64[0];
      v104 = vsubq_f64(v107, v108);
      _Q1 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v93, 1), v96);
      v93.f64[0] = v101 + 1.0 + v93.f64[0] + v96.f64[1];
    }
    else
    {
      v104.f64[0] = v99.f64[0] + _Q1.f64[0];
      _Q1.f64[0] = v101 + 1.0 - (v93.f64[0] + v96.f64[1]);
      v104.f64[1] = *(double *)_Q6.i64 + v99.f64[1];
      v93.f64[0] = _Q1.f64[0];
    }
  }
  else if (v93.f64[0] <= v96.f64[1])
  {
    v105 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v93, 1), v96);
    *(_QWORD *)&v106.f64[1] = _Q6.i64[0];
    v106.f64[0] = 1.0 - v101;
    v99.f64[0] = v96.f64[1] - v93.f64[0];
    v93 = vaddq_f64(v106, v99);
    v104 = (float64x2_t)vzip1q_s64(v105, (int64x2_t)v93);
    _Q1 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v93, 1);
  }
  else
  {
    v102 = v93.f64[0] - v96.f64[1];
    v93.f64[0] = 1.0 - v101;
    v103 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v96.f64[0], 0);
    v103.f64[0] = v102;
    v104 = vaddq_f64(v93, v103);
    _Q1.f64[0] = v99.f64[0] + _Q1.f64[0];
    v93.f64[0] = v104.f64[0];
  }
  v109 = 0.5 / sqrt(v93.f64[0]);
  v110 = vmulq_n_f64(_Q1, v109);
  v111 = vmulq_n_f64(v104, v109);
  v112 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v85 + 72), *(float64x2_t *)&v139[8]);
  v113 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v85 + 88), *(float64x2_t *)&v139[24]);
  v114 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v85 + 104), *(float64x2_t *)&v139[40]);
  v115 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v85 + 120), *(float64x2_t *)&v139[56]);
  v116 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v85 + 152), *(float64x2_t *)&v139[88]);
  v117 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v85 + 136), *(float64x2_t *)&v139[72]);
  v118 = (float64x2_t)vextq_s8(v117, v116, 8uLL);
  v119 = (float64x2_t)vextq_s8(v115, v117, 8uLL);
  v120 = (float64x2_t)vextq_s8(v114, v115, 8uLL);
  v121 = (float64x2_t)vextq_s8(v113, v114, 8uLL);
  v122 = (float64x2_t)vextq_s8(v112, v113, 8uLL);
  v123 = (float64x2_t)vdupq_lane_s64(v112.i64[0], 0);
  *(_QWORD *)&v123.f64[0] = *(_OWORD *)&vaddq_f64(v110, v110);
  v124 = vnegq_f64(v123);
  v125 = vnegq_f64(v118);
  v118.f64[0] = *(float64_t *)(v5 + 3912);
  v126 = *(float64x2_t *)(v5 + 3816);
  v127 = vsubq_f64(vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v116, 1)), v118);
  v128 = vsubq_f64(v124, v126);
  v129 = (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
  v126.f64[0] = 0.00000001;
  v130 = vdivq_f64(vsubq_f64(v125, *(float64x2_t *)(v5 + 3896)), v129);
  v131 = vsubq_f64(vnegq_f64(vaddq_f64(v111, v111)), *(float64x2_t *)(v5 + 3800));
  v132 = vdivq_f64(vsubq_f64(vnegq_f64(v122), *(float64x2_t *)(v5 + 3832)), v129);
  v133 = vdivq_f64(vsubq_f64(vnegq_f64(v121), *(float64x2_t *)(v5 + 3848)), v129);
  v134 = vdivq_f64(vsubq_f64(vnegq_f64(v120), *(float64x2_t *)(v5 + 3864)), v129);
  *(float64x2_t *)(a1 + 80) = vdivq_f64(vsubq_f64(vnegq_f64(v119), *(float64x2_t *)(v5 + 3880)), v129);
  *(float64x2_t *)(a1 + 96) = v130;
  *(float64x2_t *)(a1 + 48) = v133;
  *(float64x2_t *)(a1 + 64) = v134;
  *(float64x2_t *)(a1 + 16) = vdivq_f64(v128, v129);
  *(float64x2_t *)(a1 + 32) = v132;
  *(_QWORD *)(a1 + 112) = *(_OWORD *)&vdivq_f64(v127, v126);
  result = vdivq_f64(v131, v129);
  *(float64x2_t *)a1 = result;
  return result;
}

__n128 sub_20FB237E4(float64x2_t *a1, float64x2_t *a2)
{
  __n128 result;
  float64x2_t v5;

  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(*a2), (int32x4_t)vcgtzq_f64(a2[1]))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/Propagator.h", 159, (uint64_t)"(noise.e() > 0.).all()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  result = *(__n128 *)a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  return result;
}

void sub_20FB23868(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB23BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB23C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB23C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB23C54(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB23FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB24008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB2401C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB24040(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB243D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB243F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB24408(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB2442C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB247BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB247E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB247F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20FB24818(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20FB24BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB24BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FB24BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

BOOL sub_20FB24C04(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t a4, double a5, float64x2_t a6)
{
  uint64_t v7;
  uint64_t v8;
  float64x2_t v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  int v13;
  float64x2_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float64x2_t v22;
  int v23;
  float64x2_t v24;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  int8x16_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int64x2_t v46;
  int8x16_t v47;
  int64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v63;
  double v65;
  double v67;
  double v69;
  double v71;
  float64x2_t v73;
  double v79;
  float64x2_t v80;
  double v82;
  float64x2_t v83;
  double v85;
  float64x2_t v86;
  double v88;
  float64x2_t v91;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  int64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  int64x2_t v108;
  int8x16_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  int64x2_t v113;
  int8x16_t v114;
  int64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  double v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  double v129;
  double v131;
  double v133;
  double v135;
  double v137;
  double v139;
  float64x2_t v141;
  double v143;
  float64x2_t v144;
  double v146;
  float64x2_t v147;
  double v149;
  float64x2_t v150;
  double v152;
  _BOOL8 result;
  float64x2_t v159;
  float64x2_t v160;
  uint64_t v161;
  float64x2_t v162;
  double v163;

  v8 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  a4.f64[0] = *(float64_t *)(v7 + 120);
  a6.f64[0] = *(float64_t *)(v8 + 120);
  v9 = vsubq_f64(*(float64x2_t *)(v7 + 104), *(float64x2_t *)(v8 + 104));
  *(float64x2_t *)(a1 + 80) = v9;
  v10 = a1 + 80;
  v11 = vsubq_f64(a4, a6);
  *(float64_t *)(a1 + 96) = v11.f64[0];
  a6.f64[0] = *(float64_t *)(*(_QWORD *)(a1 + 16) + 16);
  v12 = vmulq_n_f64(v9, a6.f64[0]);
  *(float64x2_t *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 96) = *(_OWORD *)&vmulq_f64(v11, a6);
  v13 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(v8 + 20))
    {
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      v12.f64[0] = *(float64_t *)(*(_QWORD *)(a1 + 16) + 16);
      v16 = vnegq_f64((float64x2_t)*(unint64_t *)&v12.f64[0]);
      v17 = vdupq_n_s64(0x8000000000000000);
      *(int64x2_t *)(a3 + 120) = v17;
      *(int64x2_t *)(a3 + 88) = v17;
      *(_QWORD *)(a3 + 136) = *(_OWORD *)&vnegq_f64(v12);
      *(float64x2_t *)(a3 + 104) = v16;
      *(float64x2_t *)(a3 + 72) = v16;
    }
    if (*(_BYTE *)(v7 + 20))
    {
      *(_QWORD *)(a3 + 208) = 0;
      *(_OWORD *)(a3 + 176) = 0u;
      *(_OWORD *)(a3 + 192) = 0u;
      *(_OWORD *)(a3 + 144) = 0u;
      *(_OWORD *)(a3 + 160) = 0u;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
      *(_OWORD *)(a3 + 216) = v18;
      *(_QWORD *)(a3 + 280) = v18;
      *(_OWORD *)(a3 + 248) = v18;
      *(_OWORD *)(a3 + 264) = 0u;
      *(_OWORD *)(a3 + 232) = 0u;
    }
    *(_BYTE *)(a1 + 112) = 1;
    v19 = *(_QWORD *)(a1 + 120);
    if (v19)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, v10);
      v20 = *(_QWORD *)(a1 + 120);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      v23 = v21;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 20))
      {
        switch(v21)
        {
          case 0:
            v24 = *(float64x2_t *)(v20 + 16);
            _D2 = *(_QWORD *)(v20 + 56);
            v26 = *(float64x2_t *)(v20 + 40);
            v27 = *(double *)(v20 + 80);
            v28 = *(float64x2_t *)(v20 + 64);
            goto LABEL_14;
          case 1:
            v31 = *(float64x2_t *)(a3 + 112);
            v30 = *(float64x2_t *)(a3 + 128);
            v33 = *(float64x2_t *)(a3 + 80);
            v32 = *(float64x2_t *)(a3 + 96);
            v35 = *(float64x2_t *)(a3 + 48);
            v34 = *(float64x2_t *)(a3 + 64);
            v36 = *(float64x2_t *)(a3 + 32);
            v22.f64[0] = *(float64_t *)(v20 + 32);
            v37 = vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)(v20 + 16));
            v38 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 16), v22);
            *(_QWORD *)&v39.f64[0] = v38.i64[0];
            v39.f64[1] = *(float64_t *)(a3 + 24);
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v39;
            v40 = (float64x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v36, 8uLL);
            v39.f64[0] = *(float64_t *)(v20 + 32);
            v41 = vmulq_f64(*(float64x2_t *)(v20 + 16), v40);
            v22 = (float64x2_t)vzip1q_s64(v38, (int64x2_t)v41);
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v22;
            v42 = vextq_s8((int8x16_t)v41, (int8x16_t)vmulq_laneq_f64(v39, v36, 1), 8uLL);
            *(int8x16_t *)(a3 + 32) = v42;
            v41.f64[0] = *(float64_t *)(v20 + 32);
            v43 = *(float64x2_t *)(v20 + 16);
            v44 = vmulq_f64(v43, v35);
            v45 = vmulq_f64(v41, v34);
            v34.f64[0] = v45.f64[0];
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v22;
            *(int8x16_t *)(a3 + 32) = v42;
            *(float64x2_t *)(a3 + 48) = v44;
            *(float64x2_t *)(a3 + 64) = v34;
            v43.f64[0] = *(float64_t *)(v20 + 32);
            v46 = (int64x2_t)vmulq_f64(*(float64x2_t *)(v20 + 16), (float64x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)v33, 8uLL));
            v47 = vextq_s8((int8x16_t)v46, (int8x16_t)vmulq_laneq_f64(v43, v33, 1), 8uLL);
            v48 = vzip1q_s64((int64x2_t)v45, v46);
            *(int8x16_t *)(a3 + 32) = v42;
            *(float64x2_t *)(a3 + 48) = v44;
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v22;
            *(int64x2_t *)(a3 + 64) = v48;
            *(int8x16_t *)(a3 + 80) = v47;
            v45.f64[0] = *(float64_t *)(v20 + 32);
            v49 = *(float64x2_t *)(v20 + 16);
            v50 = vmulq_f64(v49, v32);
            v51 = (int64x2_t)vmulq_f64(v45, v31);
            *(_QWORD *)&v31.f64[0] = v51.i64[0];
            *(int8x16_t *)(a3 + 32) = v42;
            *(float64x2_t *)(a3 + 48) = v44;
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v22;
            *(int64x2_t *)(a3 + 64) = v48;
            *(int8x16_t *)(a3 + 80) = v47;
            *(float64x2_t *)(a3 + 96) = v50;
            *(float64x2_t *)(a3 + 112) = v31;
            v49.f64[0] = *(float64_t *)(v20 + 32);
            v52 = (int64x2_t)vmulq_f64(*(float64x2_t *)(v20 + 16), (float64x2_t)vextq_s8((int8x16_t)v31, (int8x16_t)v30, 8uLL));
            *(int64x2_t *)(a3 + 64) = v48;
            *(int8x16_t *)(a3 + 80) = v47;
            *(int8x16_t *)(a3 + 32) = v42;
            *(float64x2_t *)(a3 + 48) = v44;
            *(float64x2_t *)a3 = v37;
            *(float64x2_t *)(a3 + 16) = v22;
            *(float64x2_t *)(a3 + 96) = v50;
            *(int64x2_t *)(a3 + 112) = vzip1q_s64(v51, v52);
            *(int8x16_t *)(a3 + 128) = vextq_s8((int8x16_t)v52, (int8x16_t)vmulq_laneq_f64(v49, v30, 1), 8uLL);
            break;
          case 2:
            v53 = *(double *)(v20 + 16);
            v22 = vmulq_n_f64(*(float64x2_t *)(a3 + 128), v53);
            v54 = vmulq_n_f64(*(float64x2_t *)(a3 + 112), v53);
            v55 = vmulq_n_f64(*(float64x2_t *)(a3 + 96), v53);
            v56 = vmulq_n_f64(*(float64x2_t *)(a3 + 80), v53);
            v57 = vmulq_n_f64(*(float64x2_t *)(a3 + 64), v53);
            v58 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v53);
            v59 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v53);
            v60 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v53);
            *(float64x2_t *)a3 = vmulq_n_f64(*(float64x2_t *)a3, v53);
            *(float64x2_t *)(a3 + 16) = v60;
            *(float64x2_t *)(a3 + 32) = v59;
            *(float64x2_t *)(a3 + 48) = v58;
            *(float64x2_t *)(a3 + 64) = v57;
            *(float64x2_t *)(a3 + 80) = v56;
            *(float64x2_t *)(a3 + 96) = v55;
            *(float64x2_t *)(a3 + 112) = v54;
            *(float64x2_t *)(a3 + 128) = v22;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(&v159, v20);
            v24 = v159;
            _D2 = v161;
            v26 = v160;
            v27 = v163;
            v28 = v162;
LABEL_14:
            v61 = *(double *)(a3 + 16);
            _Q18 = *(float64x2_t *)a3;
            v63 = *(double *)(a3 + 40);
            _Q20 = *(float64x2_t *)(a3 + 24);
            v65 = *(double *)(a3 + 64);
            _Q22 = *(float64x2_t *)(a3 + 48);
            v67 = *(double *)(a3 + 88);
            _Q24 = *(float64x2_t *)(a3 + 72);
            v69 = *(double *)(a3 + 112);
            _Q26 = *(float64x2_t *)(a3 + 96);
            v71 = *(double *)(a3 + 136);
            _Q16 = *(float64x2_t *)(a3 + 120);
            v73 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, *(double *)a3), v26, *(float64x2_t *)a3, 1), v28, v61);
            __asm { FMLA            D27, D2, V18.D[1] }
            v79 = _D27 + v27 * v61;
            v80 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q20.f64[0]), v26, _Q20, 1), v28, v63);
            __asm { FMLA            D27, D2, V20.D[1] }
            v82 = _D27 + v27 * v63;
            v83 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q22.f64[0]), v26, _Q22, 1), v28, v65);
            __asm { FMLA            D27, D2, V22.D[1] }
            v85 = _D27 + v27 * v65;
            v86 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q24.f64[0]), v26, _Q24, 1), v28, v67);
            __asm { FMLA            D27, D2, V24.D[1] }
            v88 = _D27 + v27 * v67;
            __asm
            {
              FMLA            D27, D2, V26.D[1]
              FMLA            D1, D2, V16.D[1]
            }
            *(float64x2_t *)a3 = v73;
            *(double *)(a3 + 16) = v79;
            *(float64x2_t *)(a3 + 24) = v80;
            *(double *)(a3 + 40) = v82;
            *(float64x2_t *)(a3 + 48) = v83;
            *(double *)(a3 + 64) = v85;
            *(float64x2_t *)(a3 + 72) = v86;
            *(double *)(a3 + 88) = v88;
            *(float64x2_t *)(a3 + 96) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q26.f64[0]), v26, _Q26, 1), v28, v69);
            *(double *)(a3 + 112) = _D27 + v27 * v69;
            *(float64x2_t *)(a3 + 120) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q16.f64[0]), v26, _Q16, 1), v28, v71);
            *(double *)(a3 + 136) = _D1 + v27 * v71;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 20))
      {
        switch(v23)
        {
          case 0:
            v91 = *(float64x2_t *)(v20 + 16);
            _D2 = *(_QWORD *)(v20 + 56);
            v93 = *(float64x2_t *)(v20 + 40);
            v94 = *(double *)(v20 + 80);
            v95 = *(float64x2_t *)(v20 + 64);
            goto LABEL_21;
          case 1:
            v97 = *(float64x2_t *)(a3 + 256);
            v96 = *(float64x2_t *)(a3 + 272);
            v99 = *(float64x2_t *)(a3 + 224);
            v98 = *(float64x2_t *)(a3 + 240);
            v101 = *(float64x2_t *)(a3 + 192);
            v100 = *(float64x2_t *)(a3 + 208);
            v102 = *(float64x2_t *)(a3 + 176);
            v22.f64[0] = *(float64_t *)(v20 + 32);
            v103 = vmulq_f64(*(float64x2_t *)(a3 + 144), *(float64x2_t *)(v20 + 16));
            v104 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 160), v22);
            *(_QWORD *)&v105.f64[0] = v104.i64[0];
            v105.f64[1] = *(float64_t *)(a3 + 168);
            *(float64x2_t *)(a3 + 144) = v103;
            *(float64x2_t *)(a3 + 160) = v105;
            v106 = (float64x2_t)vextq_s8((int8x16_t)v105, (int8x16_t)v102, 8uLL);
            v105.f64[0] = *(float64_t *)(v20 + 32);
            v107 = vmulq_f64(*(float64x2_t *)(v20 + 16), v106);
            v108 = vzip1q_s64(v104, (int64x2_t)v107);
            *(float64x2_t *)(a3 + 144) = v103;
            *(int64x2_t *)(a3 + 160) = v108;
            v109 = vextq_s8((int8x16_t)v107, (int8x16_t)vmulq_laneq_f64(v105, v102, 1), 8uLL);
            *(int8x16_t *)(a3 + 176) = v109;
            v107.f64[0] = *(float64_t *)(v20 + 32);
            v110 = *(float64x2_t *)(v20 + 16);
            v111 = vmulq_f64(v110, v101);
            v112 = vmulq_f64(v107, v100);
            v100.f64[0] = v112.f64[0];
            *(float64x2_t *)(a3 + 144) = v103;
            *(int64x2_t *)(a3 + 160) = v108;
            *(int8x16_t *)(a3 + 176) = v109;
            *(float64x2_t *)(a3 + 192) = v111;
            *(float64x2_t *)(a3 + 208) = v100;
            v110.f64[0] = *(float64_t *)(v20 + 32);
            v113 = (int64x2_t)vmulq_f64(*(float64x2_t *)(v20 + 16), (float64x2_t)vextq_s8((int8x16_t)v100, (int8x16_t)v99, 8uLL));
            v114 = vextq_s8((int8x16_t)v113, (int8x16_t)vmulq_laneq_f64(v110, v99, 1), 8uLL);
            v115 = vzip1q_s64((int64x2_t)v112, v113);
            *(int8x16_t *)(a3 + 176) = v109;
            *(float64x2_t *)(a3 + 192) = v111;
            *(float64x2_t *)(a3 + 144) = v103;
            *(int64x2_t *)(a3 + 160) = v108;
            *(int64x2_t *)(a3 + 208) = v115;
            *(int8x16_t *)(a3 + 224) = v114;
            v112.f64[0] = *(float64_t *)(v20 + 32);
            v116 = *(float64x2_t *)(v20 + 16);
            v117 = vmulq_f64(v116, v98);
            v118 = (int64x2_t)vmulq_f64(v112, v97);
            *(_QWORD *)&v97.f64[0] = v118.i64[0];
            *(int8x16_t *)(a3 + 176) = v109;
            *(float64x2_t *)(a3 + 192) = v111;
            *(float64x2_t *)(a3 + 144) = v103;
            *(int64x2_t *)(a3 + 160) = v108;
            *(int64x2_t *)(a3 + 208) = v115;
            *(int8x16_t *)(a3 + 224) = v114;
            *(float64x2_t *)(a3 + 240) = v117;
            *(float64x2_t *)(a3 + 256) = v97;
            v116.f64[0] = *(float64_t *)(v20 + 32);
            v119 = (int64x2_t)vmulq_f64(*(float64x2_t *)(v20 + 16), (float64x2_t)vextq_s8((int8x16_t)v97, (int8x16_t)v96, 8uLL));
            *(int64x2_t *)(a3 + 208) = v115;
            *(int8x16_t *)(a3 + 224) = v114;
            *(int8x16_t *)(a3 + 176) = v109;
            *(float64x2_t *)(a3 + 192) = v111;
            *(float64x2_t *)(a3 + 144) = v103;
            *(int64x2_t *)(a3 + 160) = v108;
            *(float64x2_t *)(a3 + 240) = v117;
            *(int64x2_t *)(a3 + 256) = vzip1q_s64(v118, v119);
            *(int8x16_t *)(a3 + 272) = vextq_s8((int8x16_t)v119, (int8x16_t)vmulq_laneq_f64(v116, v96, 1), 8uLL);
            break;
          case 2:
            v120 = *(double *)(v20 + 16);
            v121 = vmulq_n_f64(*(float64x2_t *)(a3 + 272), v120);
            v122 = vmulq_n_f64(*(float64x2_t *)(a3 + 256), v120);
            v123 = vmulq_n_f64(*(float64x2_t *)(a3 + 240), v120);
            v124 = vmulq_n_f64(*(float64x2_t *)(a3 + 224), v120);
            v125 = vmulq_n_f64(*(float64x2_t *)(a3 + 208), v120);
            v126 = vmulq_n_f64(*(float64x2_t *)(a3 + 192), v120);
            v127 = vmulq_n_f64(*(float64x2_t *)(a3 + 176), v120);
            v128 = vmulq_n_f64(*(float64x2_t *)(a3 + 160), v120);
            *(float64x2_t *)(a3 + 144) = vmulq_n_f64(*(float64x2_t *)(a3 + 144), v120);
            *(float64x2_t *)(a3 + 160) = v128;
            *(float64x2_t *)(a3 + 176) = v127;
            *(float64x2_t *)(a3 + 192) = v126;
            *(float64x2_t *)(a3 + 208) = v125;
            *(float64x2_t *)(a3 + 224) = v124;
            *(float64x2_t *)(a3 + 240) = v123;
            *(float64x2_t *)(a3 + 256) = v122;
            *(float64x2_t *)(a3 + 272) = v121;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(&v159, v20);
            v91 = v159;
            _D2 = v161;
            v93 = v160;
            v94 = v163;
            v95 = v162;
LABEL_21:
            v129 = *(double *)(a3 + 160);
            _Q18 = *(float64x2_t *)(a3 + 144);
            v131 = *(double *)(a3 + 184);
            _Q20 = *(float64x2_t *)(a3 + 168);
            v133 = *(double *)(a3 + 208);
            _Q22 = *(float64x2_t *)(a3 + 192);
            v135 = *(double *)(a3 + 232);
            _Q24 = *(float64x2_t *)(a3 + 216);
            v137 = *(double *)(a3 + 256);
            _Q26 = *(float64x2_t *)(a3 + 240);
            v139 = *(double *)(a3 + 280);
            _Q16 = *(float64x2_t *)(a3 + 264);
            v141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q18.f64[0]), v93, _Q18, 1), v95, v129);
            __asm { FMLA            D27, D2, V18.D[1] }
            v143 = _D27 + v94 * v129;
            v144 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q20.f64[0]), v93, _Q20, 1), v95, v131);
            __asm { FMLA            D27, D2, V20.D[1] }
            v146 = _D27 + v94 * v131;
            v147 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q22.f64[0]), v93, _Q22, 1), v95, v133);
            __asm { FMLA            D27, D2, V22.D[1] }
            v149 = _D27 + v94 * v133;
            v150 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q24.f64[0]), v93, _Q24, 1), v95, v135);
            __asm { FMLA            D27, D2, V24.D[1] }
            v152 = _D27 + v94 * v135;
            __asm
            {
              FMLA            D27, D2, V26.D[1]
              FMLA            D1, D2, V16.D[1]
            }
            *(float64x2_t *)(a3 + 144) = v141;
            *(double *)(a3 + 160) = v143;
            *(float64x2_t *)(a3 + 168) = v144;
            *(double *)(a3 + 184) = v146;
            *(float64x2_t *)(a3 + 192) = v147;
            *(double *)(a3 + 208) = v149;
            *(float64x2_t *)(a3 + 216) = v150;
            *(double *)(a3 + 232) = v152;
            *(float64x2_t *)(a3 + 240) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q26.f64[0]), v93, _Q26, 1), v95, v137);
            *(double *)(a3 + 256) = _D27 + v94 * v137;
            *(float64x2_t *)(a3 + 264) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q16.f64[0]), v93, _Q16, 1), v95, v139);
            *(double *)(a3 + 280) = _D1 + v94 * v139;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v10;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v10 + 16);
    _Q1 = *(_OWORD *)(a1 + 80);
    _D3 = *(_QWORD *)(a1 + 88);
    __asm { FMLA            D2, D3, V1.D[1] }
    v29 = *(double *)(a2 + 8) * (_D2 + *(double *)(a1 + 96) * *(double *)(a1 + 96));
  }
  else
  {
    *(_BYTE *)(a1 + 112) = 0;
    v29 = 0.0;
  }
  result = v13 != 0;
  *(double *)(a1 + 104) = v29;
  return result;
}

uint64_t sub_20FB252F8(uint64_t a1, uint64_t a2, float64x2_t *a3, uint64_t a4)
{
  _OWORD *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  float64x2_t *v11;
  int v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  double v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v103;
  float64x2_t v104;

  v7 = (_OWORD *)(a1 + 240);
  v8 = sub_20FC81820(a1, (uint64_t *)(a1 + 192), a1 + 240, a3, (double **)(a4 + 1584));
  *(_BYTE *)(a1 + 264) = v8;
  v9 = 0.0;
  if ((_DWORD)v8)
  {
    v10 = *(_QWORD *)(a1 + 272);
    if (v10)
    {
      (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)v10 + 24))(v10, v7, 0.0);
      v11 = *(float64x2_t **)(a1 + 272);
      v12 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v11->f64[0] + 16))(v11);
      switch(v12)
      {
        case 0:
          v13 = v11[1];
          v14 = v11[2];
          goto LABEL_8;
        case 1:
          v15 = a3[1];
          v16 = vmulq_f64(*a3, v11[1]);
          v18 = a3[4];
          v17 = a3[5];
          v20 = a3[2];
          v19 = a3[3];
          *a3 = v16;
          v21 = vmulq_f64(v15, v11[1]);
          *a3 = v16;
          a3[1] = v21;
          v22 = vmulq_f64(v20, v11[1]);
          *a3 = v16;
          a3[1] = v21;
          a3[2] = v22;
          v23 = vmulq_f64(v19, v11[1]);
          *a3 = v16;
          a3[1] = v21;
          a3[2] = v22;
          a3[3] = v23;
          v24 = vmulq_f64(v18, v11[1]);
          *a3 = v16;
          a3[1] = v21;
          a3[2] = v22;
          a3[3] = v23;
          a3[4] = v24;
          v25 = vmulq_f64(v17, v11[1]);
          a3[2] = v22;
          a3[3] = v23;
          *a3 = v16;
          a3[1] = v21;
          a3[4] = v24;
          a3[5] = v25;
          break;
        case 2:
          v26 = v11[1].f64[0];
          v27 = vmulq_n_f64(a3[5], v26);
          v28 = vmulq_n_f64(a3[4], v26);
          v29 = vmulq_n_f64(a3[3], v26);
          v30 = vmulq_n_f64(a3[2], v26);
          v31 = vmulq_n_f64(a3[1], v26);
          *a3 = vmulq_n_f64(*a3, v26);
          a3[1] = v31;
          a3[2] = v30;
          a3[3] = v29;
          a3[4] = v28;
          a3[5] = v27;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(&v103, v11);
          v13 = v103;
          v14 = v104;
LABEL_8:
          v32 = a3[5];
          v33 = vmlaq_laneq_f64(vmulq_n_f64(v13, a3[1].f64[0]), v14, a3[1], 1);
          v34 = vmlaq_laneq_f64(vmulq_n_f64(v13, a3[2].f64[0]), v14, a3[2], 1);
          v35 = vmlaq_laneq_f64(vmulq_n_f64(v13, a3[3].f64[0]), v14, a3[3], 1);
          v36 = vmlaq_laneq_f64(vmulq_n_f64(v13, a3[4].f64[0]), v14, a3[4], 1);
          *a3 = vmlaq_laneq_f64(vmulq_n_f64(v13, a3->f64[0]), v14, *a3, 1);
          a3[1] = v33;
          a3[2] = v34;
          a3[3] = v35;
          a3[4] = v36;
          a3[5] = vmlaq_laneq_f64(vmulq_n_f64(v13, v32.f64[0]), v14, v32, 1);
          break;
        default:
          break;
      }
      switch(v12)
      {
        case 0:
          v37 = v11[1];
          v38 = v11[2];
          goto LABEL_14;
        case 1:
          v39 = a3[7];
          v40 = vmulq_f64(a3[6], v11[1]);
          v42 = a3[10];
          v41 = a3[11];
          v44 = a3[8];
          v43 = a3[9];
          a3[6] = v40;
          v45 = vmulq_f64(v39, v11[1]);
          a3[6] = v40;
          a3[7] = v45;
          v46 = vmulq_f64(v44, v11[1]);
          a3[6] = v40;
          a3[7] = v45;
          a3[8] = v46;
          v47 = vmulq_f64(v43, v11[1]);
          a3[6] = v40;
          a3[7] = v45;
          a3[8] = v46;
          a3[9] = v47;
          v48 = vmulq_f64(v42, v11[1]);
          a3[6] = v40;
          a3[7] = v45;
          a3[8] = v46;
          a3[9] = v47;
          a3[10] = v48;
          v49 = vmulq_f64(v41, v11[1]);
          a3[8] = v46;
          a3[9] = v47;
          a3[6] = v40;
          a3[7] = v45;
          a3[10] = v48;
          a3[11] = v49;
          break;
        case 2:
          v50 = v11[1].f64[0];
          v51 = vmulq_n_f64(a3[11], v50);
          v52 = vmulq_n_f64(a3[10], v50);
          v53 = vmulq_n_f64(a3[9], v50);
          v54 = vmulq_n_f64(a3[8], v50);
          v55 = vmulq_n_f64(a3[7], v50);
          a3[6] = vmulq_n_f64(a3[6], v50);
          a3[7] = v55;
          a3[8] = v54;
          a3[9] = v53;
          a3[10] = v52;
          a3[11] = v51;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(&v103, v11);
          v37 = v103;
          v38 = v104;
LABEL_14:
          v56 = a3[11];
          v57 = vmlaq_laneq_f64(vmulq_n_f64(v37, a3[7].f64[0]), v38, a3[7], 1);
          v58 = vmlaq_laneq_f64(vmulq_n_f64(v37, a3[8].f64[0]), v38, a3[8], 1);
          v59 = vmlaq_laneq_f64(vmulq_n_f64(v37, a3[9].f64[0]), v38, a3[9], 1);
          v60 = vmlaq_laneq_f64(vmulq_n_f64(v37, a3[10].f64[0]), v38, a3[10], 1);
          a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v37, a3[6].f64[0]), v38, a3[6], 1);
          a3[7] = v57;
          a3[8] = v58;
          a3[9] = v59;
          a3[10] = v60;
          a3[11] = vmlaq_laneq_f64(vmulq_n_f64(v37, v56.f64[0]), v38, v56, 1);
          break;
        default:
          break;
      }
      switch(v12)
      {
        case 0:
          v61 = v11[1];
          v62 = v11[2];
          goto LABEL_20;
        case 1:
          v63 = a3[13];
          v64 = vmulq_f64(a3[12], v11[1]);
          v66 = a3[14];
          v65 = a3[15];
          a3[12] = v64;
          v67 = vmulq_f64(v63, v11[1]);
          a3[12] = v64;
          a3[13] = v67;
          v68 = vmulq_f64(v66, v11[1]);
          a3[12] = v64;
          a3[13] = v67;
          a3[14] = v68;
          v69 = vmulq_f64(v65, v11[1]);
          a3[12] = v64;
          a3[13] = v67;
          a3[14] = v68;
          a3[15] = v69;
          break;
        case 2:
          v70 = v11[1].f64[0];
          v71 = vmulq_n_f64(a3[13], v70);
          v72 = vmulq_n_f64(a3[12], v70);
          v73 = vmulq_n_f64(a3[15], v70);
          a3[14] = vmulq_n_f64(a3[14], v70);
          a3[15] = v73;
          a3[12] = v72;
          a3[13] = v71;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(&v103, v11);
          v61 = v103;
          v62 = v104;
LABEL_20:
          v74 = vmlaq_laneq_f64(vmulq_n_f64(v61, a3[12].f64[0]), v62, a3[12], 1);
          v75 = vmlaq_laneq_f64(vmulq_n_f64(v61, a3[13].f64[0]), v62, a3[13], 1);
          v76 = vmlaq_laneq_f64(vmulq_n_f64(v61, a3[14].f64[0]), v62, a3[14], 1);
          v77 = vmlaq_laneq_f64(vmulq_n_f64(v61, a3[15].f64[0]), v62, a3[15], 1);
          a3[12] = v74;
          a3[13] = v75;
          a3[14] = v76;
          a3[15] = v77;
          break;
        default:
          break;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 216) + 20))
      {
        switch(v12)
        {
          case 0:
            v78 = v11[1];
            v79 = v11[2];
            goto LABEL_27;
          case 1:
            v80 = a3[17];
            v81 = vmulq_f64(a3[16], v11[1]);
            v83 = a3[18];
            v82 = a3[19];
            a3[16] = v81;
            v84 = vmulq_f64(v80, v11[1]);
            a3[16] = v81;
            a3[17] = v84;
            v85 = vmulq_f64(v83, v11[1]);
            a3[16] = v81;
            a3[17] = v84;
            a3[18] = v85;
            v86 = vmulq_f64(v82, v11[1]);
            a3[16] = v81;
            a3[17] = v84;
            a3[18] = v85;
            a3[19] = v86;
            break;
          case 2:
            v87 = v11[1].f64[0];
            v88 = vmulq_n_f64(a3[17], v87);
            v89 = vmulq_n_f64(a3[16], v87);
            v90 = vmulq_n_f64(a3[19], v87);
            a3[18] = vmulq_n_f64(a3[18], v87);
            a3[19] = v90;
            a3[16] = v89;
            a3[17] = v88;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v11->f64[0] + 56))(&v103, v11);
            v78 = v103;
            v79 = v104;
LABEL_27:
            v91 = vmlaq_laneq_f64(vmulq_n_f64(v78, a3[16].f64[0]), v79, a3[16], 1);
            v92 = vmlaq_laneq_f64(vmulq_n_f64(v78, a3[17].f64[0]), v79, a3[17], 1);
            v93 = vmlaq_laneq_f64(vmulq_n_f64(v78, a3[18].f64[0]), v79, a3[18], 1);
            v94 = vmlaq_laneq_f64(vmulq_n_f64(v78, a3[19].f64[0]), v79, a3[19], 1);
            a3[16] = v91;
            a3[17] = v92;
            a3[18] = v93;
            a3[19] = v94;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 224) = *v7;
    _Q0 = *(_OWORD *)(a1 + 240);
    _D2 = *(_QWORD *)(a1 + 248);
    __asm { FMLA            D1, D2, V0.D[1] }
    v9 = *(double *)(a2 + 8) * _D1;
  }
  *(double *)(a1 + 256) = v9;
  return v8;
}

BOOL sub_20FB25808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 v7;
  double v8;
  uint64_t v9;
  float64x2_t *v10;
  uint64_t v11;
  int v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  int64x2_t v40;
  int8x16_t v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  double v51;
  double v53;
  double v55;
  double v57;
  double v59;
  float64x2_t v61;
  double v67;
  float64x2_t v68;
  double v70;
  float64x2_t v71;
  double v73;
  float64x2_t v74;
  double v76;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  int64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  int8x16_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  int64x2_t v102;
  int8x16_t v103;
  double v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  double v113;
  double v115;
  double v117;
  double v119;
  double v121;
  float64x2_t v123;
  double v125;
  float64x2_t v126;
  double v128;
  float64x2_t v129;
  double v131;
  float64x2_t v132;
  double v134;
  float64x2_t v135;
  float64x2_t v137;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  int64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  int8x16_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  int64x2_t v162;
  int8x16_t v163;
  double v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  double v173;
  double v175;
  double v177;
  double v179;
  double v181;
  float64x2_t v183;
  double v185;
  float64x2_t v186;
  double v188;
  float64x2_t v189;
  double v191;
  float64x2_t v192;
  double v194;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  int64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  int8x16_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  int64x2_t v220;
  int8x16_t v221;
  double v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  double v229;
  double v231;
  double v233;
  double v235;
  double v237;
  double v239;
  float64x2_t v241;
  double v243;
  float64x2_t v244;
  double v246;
  float64x2_t v247;
  double v249;
  float64x2_t v250;
  double v252;
  float64x2_t *v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  int64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  int64x2_t v270;
  int8x16_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  int64x2_t v280;
  int8x16_t v281;
  double v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  double v290;
  double v292;
  double v294;
  double v296;
  double v298;
  double v300;
  float64x2_t v302;
  double v304;
  float64x2_t v305;
  double v307;
  float64x2_t v308;
  double v310;
  float64x2_t v311;
  double v313;
  float64x2_t *v316;
  int v317;
  float64x2_t v318;
  float64x2_t v320;
  double v321;
  float64x2_t v322;
  float64x2_t v323;
  double v324;
  float64x2_t v331;
  float64x2_t v332;
  float64_t v333;
  float64x2_t v334;
  float64_t v335;

  v6 = a1 + 288;
  v7 = sub_20F9B4988(a1);
  *(_BYTE *)(a1 + 320) = v7;
  v8 = 0.0;
  if (v7)
  {
    v9 = *(_QWORD *)(a1 + 328);
    if (v9)
    {
      v10 = (float64x2_t *)(a3 + 264);
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v9 + 24))(v9, v6, 0.0);
      v11 = *(_QWORD *)(a1 + 328);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      switch(v12)
      {
        case 0:
          v17 = *(float64x2_t *)(v11 + 16);
          _Q2.f64[0] = *(float64_t *)(v11 + 56);
          v18 = *(float64x2_t *)(v11 + 40);
          v13.f64[0] = *(float64_t *)(v11 + 80);
          v19 = *(float64x2_t *)(v11 + 64);
          goto LABEL_8;
        case 1:
          v21 = *(float64x2_t *)(a3 + 112);
          v20 = *(float64x2_t *)(a3 + 128);
          v23 = *(float64x2_t *)(a3 + 80);
          v22 = *(float64x2_t *)(a3 + 96);
          v25 = *(float64x2_t *)(a3 + 48);
          v24 = *(float64x2_t *)(a3 + 64);
          v26 = *(float64x2_t *)(a3 + 32);
          v16.f64[0] = *(float64_t *)(v11 + 32);
          v14 = vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)(v11 + 16));
          v27 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 16), v16);
          *(_QWORD *)&v28.f64[0] = v27.i64[0];
          v28.f64[1] = *(float64_t *)(a3 + 24);
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v28;
          v29 = (float64x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v26, 8uLL);
          v28.f64[0] = *(float64_t *)(v11 + 32);
          v30 = vmulq_f64(*(float64x2_t *)(v11 + 16), v29);
          v16 = (float64x2_t)vzip1q_s64(v27, (int64x2_t)v30);
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v16;
          v31 = vextq_s8((int8x16_t)v30, (int8x16_t)vmulq_laneq_f64(v28, v26, 1), 8uLL);
          *(int8x16_t *)(a3 + 32) = v31;
          v30.f64[0] = *(float64_t *)(v11 + 32);
          v32 = *(float64x2_t *)(v11 + 16);
          v33 = vmulq_f64(v32, v25);
          v34 = vmulq_f64(v30, v24);
          v24.f64[0] = v34.f64[0];
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v16;
          *(int8x16_t *)(a3 + 32) = v31;
          *(float64x2_t *)(a3 + 48) = v33;
          *(float64x2_t *)(a3 + 64) = v24;
          v32.f64[0] = *(float64_t *)(v11 + 32);
          v35 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 8uLL));
          v36 = vextq_s8(v35, (int8x16_t)vmulq_laneq_f64(v32, v23, 1), 8uLL);
          v37 = vzip1q_s64((int64x2_t)v34, (int64x2_t)v35);
          *(int8x16_t *)(a3 + 32) = v31;
          *(float64x2_t *)(a3 + 48) = v33;
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v16;
          *(int64x2_t *)(a3 + 64) = v37;
          *(int8x16_t *)(a3 + 80) = v36;
          v34.f64[0] = *(float64_t *)(v11 + 32);
          v38 = *(float64x2_t *)(v11 + 16);
          v39 = vmulq_f64(v38, v22);
          v40 = (int64x2_t)vmulq_f64(v34, v21);
          *(_QWORD *)&v21.f64[0] = v40.i64[0];
          *(int8x16_t *)(a3 + 32) = v31;
          *(float64x2_t *)(a3 + 48) = v33;
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v16;
          *(int64x2_t *)(a3 + 64) = v37;
          *(int8x16_t *)(a3 + 80) = v36;
          *(float64x2_t *)(a3 + 96) = v39;
          *(float64x2_t *)(a3 + 112) = v21;
          v38.f64[0] = *(float64_t *)(v11 + 32);
          v41 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 8uLL));
          v13 = (float64x2_t)vextq_s8(v41, (int8x16_t)vmulq_laneq_f64(v38, v20, 1), 8uLL);
          _Q2 = (float64x2_t)vzip1q_s64(v40, (int64x2_t)v41);
          *(int64x2_t *)(a3 + 64) = v37;
          *(int8x16_t *)(a3 + 80) = v36;
          *(int8x16_t *)(a3 + 32) = v31;
          *(float64x2_t *)(a3 + 48) = v33;
          *(float64x2_t *)a3 = v14;
          *(float64x2_t *)(a3 + 16) = v16;
          *(float64x2_t *)(a3 + 96) = v39;
          *(float64x2_t *)(a3 + 112) = _Q2;
          *(float64x2_t *)(a3 + 128) = v13;
          break;
        case 2:
          v42 = *(double *)(v11 + 16);
          v14 = *(float64x2_t *)a3;
          v16 = vmulq_n_f64(*(float64x2_t *)(a3 + 128), v42);
          v43 = vmulq_n_f64(*(float64x2_t *)(a3 + 112), v42);
          v44 = vmulq_n_f64(*(float64x2_t *)(a3 + 96), v42);
          v45 = vmulq_n_f64(*(float64x2_t *)(a3 + 80), v42);
          v46 = vmulq_n_f64(*(float64x2_t *)(a3 + 64), v42);
          v47 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v42);
          v48 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v42);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v42);
          v13 = vmulq_n_f64(*(float64x2_t *)a3, v42);
          *(float64x2_t *)a3 = v13;
          *(float64x2_t *)(a3 + 16) = _Q2;
          *(float64x2_t *)(a3 + 32) = v48;
          *(float64x2_t *)(a3 + 48) = v47;
          *(float64x2_t *)(a3 + 64) = v46;
          *(float64x2_t *)(a3 + 80) = v45;
          *(float64x2_t *)(a3 + 96) = v44;
          *(float64x2_t *)(a3 + 112) = v43;
          *(float64x2_t *)(a3 + 128) = v16;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
          v17 = v331;
          _Q2.f64[0] = v333;
          v18 = v332;
          v13.f64[0] = v335;
          v19 = v334;
LABEL_8:
          v49 = *(double *)(a3 + 16);
          _Q18 = *(float64x2_t *)a3;
          v51 = *(double *)(a3 + 40);
          _Q20 = *(float64x2_t *)(a3 + 24);
          v53 = *(double *)(a3 + 64);
          _Q22 = *(float64x2_t *)(a3 + 48);
          v55 = *(double *)(a3 + 88);
          _Q24 = *(float64x2_t *)(a3 + 72);
          v57 = *(double *)(a3 + 112);
          _Q26 = *(float64x2_t *)(a3 + 96);
          v59 = *(double *)(a3 + 136);
          _Q16 = *(float64x2_t *)(a3 + 120);
          v61 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, *(double *)a3), v18, *(float64x2_t *)a3, 1), v19, v49);
          __asm { FMLA            D27, D2, V18.D[1] }
          v67 = _D27 + v13.f64[0] * v49;
          v68 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q20.f64[0]), v18, _Q20, 1), v19, v51);
          __asm { FMLA            D27, D2, V20.D[1] }
          v70 = _D27 + v13.f64[0] * v51;
          v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q22.f64[0]), v18, _Q22, 1), v19, v53);
          __asm { FMLA            D27, D2, V22.D[1] }
          v73 = _D27 + v13.f64[0] * v53;
          v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q24.f64[0]), v18, _Q24, 1), v19, v55);
          __asm { FMLA            D27, D2, V24.D[1] }
          v76 = _D27 + v13.f64[0] * v55;
          __asm
          {
            FMLA            D27, D2, V26.D[1]
            FMLA            D1, D2, V16.D[1]
          }
          *(float64x2_t *)a3 = v61;
          *(double *)(a3 + 16) = v67;
          *(float64x2_t *)(a3 + 24) = v68;
          *(double *)(a3 + 40) = v70;
          *(float64x2_t *)(a3 + 48) = v71;
          *(double *)(a3 + 64) = v73;
          *(float64x2_t *)(a3 + 72) = v74;
          *(double *)(a3 + 88) = v76;
          *(float64x2_t *)(a3 + 96) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q26.f64[0]), v18, _Q26, 1), v19, v57);
          *(double *)(a3 + 112) = _D27 + v13.f64[0] * v57;
          *(float64x2_t *)(a3 + 120) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q16.f64[0]), v18, _Q16, 1), v19, v59);
          *(double *)(a3 + 136) = _D1 + v13.f64[0] * v59;
          break;
        default:
          break;
      }
      switch(v12)
      {
        case 0:
          v79 = *(float64x2_t *)(v11 + 16);
          _Q2.f64[0] = *(float64_t *)(v11 + 56);
          v80 = *(float64x2_t *)(v11 + 40);
          v13.f64[0] = *(float64_t *)(v11 + 80);
          v81 = *(float64x2_t *)(v11 + 64);
          goto LABEL_14;
        case 1:
          v83 = *(float64x2_t *)(a3 + 256);
          v82 = *(float64x2_t *)(a3 + 272);
          v85 = *(float64x2_t *)(a3 + 224);
          v84 = *(float64x2_t *)(a3 + 240);
          v87 = *(float64x2_t *)(a3 + 192);
          v86 = *(float64x2_t *)(a3 + 208);
          v88 = *(float64x2_t *)(a3 + 176);
          v16.f64[0] = *(float64_t *)(v11 + 32);
          v14 = vmulq_f64(*(float64x2_t *)(a3 + 144), *(float64x2_t *)(v11 + 16));
          v89 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 160), v16);
          *(_QWORD *)&v90.f64[0] = v89.i64[0];
          v90.f64[1] = *(float64_t *)(a3 + 168);
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v90;
          v91 = (float64x2_t)vextq_s8((int8x16_t)v90, (int8x16_t)v88, 8uLL);
          v90.f64[0] = *(float64_t *)(v11 + 32);
          v92 = vmulq_f64(*(float64x2_t *)(v11 + 16), v91);
          v16 = (float64x2_t)vzip1q_s64(v89, (int64x2_t)v92);
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v16;
          v93 = vextq_s8((int8x16_t)v92, (int8x16_t)vmulq_laneq_f64(v90, v88, 1), 8uLL);
          *(int8x16_t *)(a3 + 176) = v93;
          v92.f64[0] = *(float64_t *)(v11 + 32);
          v94 = *(float64x2_t *)(v11 + 16);
          v95 = vmulq_f64(v94, v87);
          v96 = vmulq_f64(v92, v86);
          v86.f64[0] = v96.f64[0];
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v16;
          *(int8x16_t *)(a3 + 176) = v93;
          *(float64x2_t *)(a3 + 192) = v95;
          *(float64x2_t *)(a3 + 208) = v86;
          v94.f64[0] = *(float64_t *)(v11 + 32);
          v97 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v86, (int8x16_t)v85, 8uLL));
          v98 = vextq_s8(v97, (int8x16_t)vmulq_laneq_f64(v94, v85, 1), 8uLL);
          v99 = vzip1q_s64((int64x2_t)v96, (int64x2_t)v97);
          *(int8x16_t *)(a3 + 176) = v93;
          *(float64x2_t *)(a3 + 192) = v95;
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v16;
          *(int64x2_t *)(a3 + 208) = v99;
          *(int8x16_t *)(a3 + 224) = v98;
          v96.f64[0] = *(float64_t *)(v11 + 32);
          v100 = *(float64x2_t *)(v11 + 16);
          v101 = vmulq_f64(v100, v84);
          v102 = (int64x2_t)vmulq_f64(v96, v83);
          *(_QWORD *)&v83.f64[0] = v102.i64[0];
          *(int8x16_t *)(a3 + 176) = v93;
          *(float64x2_t *)(a3 + 192) = v95;
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v16;
          *(int64x2_t *)(a3 + 208) = v99;
          *(int8x16_t *)(a3 + 224) = v98;
          *(float64x2_t *)(a3 + 240) = v101;
          *(float64x2_t *)(a3 + 256) = v83;
          v100.f64[0] = *(float64_t *)(v11 + 32);
          v103 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v82, 8uLL));
          v13 = (float64x2_t)vextq_s8(v103, (int8x16_t)vmulq_laneq_f64(v100, v82, 1), 8uLL);
          _Q2 = (float64x2_t)vzip1q_s64(v102, (int64x2_t)v103);
          *(int64x2_t *)(a3 + 208) = v99;
          *(int8x16_t *)(a3 + 224) = v98;
          *(int8x16_t *)(a3 + 176) = v93;
          *(float64x2_t *)(a3 + 192) = v95;
          *(float64x2_t *)(a3 + 144) = v14;
          *(float64x2_t *)(a3 + 160) = v16;
          *(float64x2_t *)(a3 + 240) = v101;
          *(float64x2_t *)(a3 + 256) = _Q2;
          *(float64x2_t *)(a3 + 272) = v13;
          break;
        case 2:
          v104 = *(double *)(v11 + 16);
          v14 = *(float64x2_t *)(a3 + 144);
          v16 = vmulq_n_f64(*(float64x2_t *)(a3 + 272), v104);
          v105 = vmulq_n_f64(*(float64x2_t *)(a3 + 256), v104);
          v106 = vmulq_n_f64(*(float64x2_t *)(a3 + 240), v104);
          v107 = vmulq_n_f64(*(float64x2_t *)(a3 + 224), v104);
          v108 = vmulq_n_f64(*(float64x2_t *)(a3 + 208), v104);
          v109 = vmulq_n_f64(*(float64x2_t *)(a3 + 192), v104);
          v110 = vmulq_n_f64(*(float64x2_t *)(a3 + 176), v104);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 160), v104);
          v13 = vmulq_n_f64(v14, v104);
          *(float64x2_t *)(a3 + 144) = v13;
          *(float64x2_t *)(a3 + 160) = _Q2;
          *(float64x2_t *)(a3 + 176) = v110;
          *(float64x2_t *)(a3 + 192) = v109;
          *(float64x2_t *)(a3 + 208) = v108;
          *(float64x2_t *)(a3 + 224) = v107;
          *(float64x2_t *)(a3 + 240) = v106;
          *(float64x2_t *)(a3 + 256) = v105;
          *(float64x2_t *)(a3 + 272) = v16;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
          v79 = v331;
          _Q2.f64[0] = v333;
          v80 = v332;
          v13.f64[0] = v335;
          v81 = v334;
LABEL_14:
          v111 = *(double *)(a3 + 160);
          _Q18 = *(float64x2_t *)(a3 + 144);
          v113 = *(double *)(a3 + 184);
          _Q20 = *(float64x2_t *)(a3 + 168);
          v115 = *(double *)(a3 + 208);
          _Q22 = *(float64x2_t *)(a3 + 192);
          v117 = *(double *)(a3 + 232);
          _Q24 = *(float64x2_t *)(a3 + 216);
          v119 = *(double *)(a3 + 256);
          _Q26 = *(float64x2_t *)(a3 + 240);
          v121 = *(double *)(a3 + 280);
          _Q16 = *v10;
          v123 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q18.f64[0]), v80, _Q18, 1), v81, v111);
          __asm { FMLA            D27, D2, V18.D[1] }
          v125 = _D27 + v13.f64[0] * v111;
          v126 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q20.f64[0]), v80, _Q20, 1), v81, v113);
          __asm { FMLA            D27, D2, V20.D[1] }
          v128 = _D27 + v13.f64[0] * v113;
          v129 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q22.f64[0]), v80, _Q22, 1), v81, v115);
          __asm { FMLA            D27, D2, V22.D[1] }
          v131 = _D27 + v13.f64[0] * v115;
          v132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q24.f64[0]), v80, _Q24, 1), v81, v117);
          __asm { FMLA            D27, D2, V24.D[1] }
          v134 = _D27 + v13.f64[0] * v117;
          v135 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, _Q26.f64[0]), v80, _Q26, 1), v81, v119);
          __asm { FMLA            D27, D2, V26.D[1] }
          v137 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, v10->f64[0]), v80, *v10, 1), v81, v121);
          __asm { FMLA            D1, D2, V16.D[1] }
          *(float64x2_t *)(a3 + 144) = v123;
          *(double *)(a3 + 160) = v125;
          *(float64x2_t *)(a3 + 168) = v126;
          *(double *)(a3 + 184) = v128;
          *(float64x2_t *)(a3 + 192) = v129;
          *(double *)(a3 + 208) = v131;
          *(float64x2_t *)(a3 + 216) = v132;
          *(double *)(a3 + 232) = v134;
          *(float64x2_t *)(a3 + 240) = v135;
          *(double *)(a3 + 256) = _D27 + v13.f64[0] * v119;
          *v10 = v137;
          *(double *)(a3 + 280) = _D1 + v13.f64[0] * v121;
          break;
        default:
          break;
      }
      switch(v12)
      {
        case 0:
          v139 = *(float64x2_t *)(v11 + 16);
          _Q2.f64[0] = *(float64_t *)(v11 + 56);
          v140 = *(float64x2_t *)(v11 + 40);
          v13.f64[0] = *(float64_t *)(v11 + 80);
          v141 = *(float64x2_t *)(v11 + 64);
          goto LABEL_20;
        case 1:
          v142 = *(float64x2_t *)(a3 + 416);
          v143 = *(float64x2_t *)(a3 + 400);
          v144 = *(float64x2_t *)(a3 + 384);
          v145 = *(float64x2_t *)(a3 + 368);
          v146 = *(float64x2_t *)(a3 + 352);
          v147 = *(float64x2_t *)(a3 + 336);
          v148 = *(float64x2_t *)(a3 + 320);
          v16.f64[0] = *(float64_t *)(v11 + 32);
          v14 = vmulq_f64(*(float64x2_t *)(a3 + 288), *(float64x2_t *)(v11 + 16));
          v149 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 304), v16);
          *(_QWORD *)&v150.f64[0] = v149.i64[0];
          v150.f64[1] = *(float64_t *)(a3 + 312);
          *(float64x2_t *)(a3 + 288) = v14;
          *(float64x2_t *)(a3 + 304) = v150;
          v151 = (float64x2_t)vextq_s8((int8x16_t)v150, (int8x16_t)v148, 8uLL);
          v150.f64[0] = *(float64_t *)(v11 + 32);
          v152 = vmulq_f64(*(float64x2_t *)(v11 + 16), v151);
          v16 = (float64x2_t)vzip1q_s64(v149, (int64x2_t)v152);
          *(float64x2_t *)(a3 + 288) = v14;
          *(float64x2_t *)(a3 + 304) = v16;
          v153 = vextq_s8((int8x16_t)v152, (int8x16_t)vmulq_laneq_f64(v150, v148, 1), 8uLL);
          *(int8x16_t *)(a3 + 320) = v153;
          v152.f64[0] = *(float64_t *)(v11 + 32);
          v154 = *(float64x2_t *)(v11 + 16);
          v155 = vmulq_f64(v154, v147);
          v156 = vmulq_f64(v152, v146);
          v146.f64[0] = v156.f64[0];
          *(int8x16_t *)(a3 + 320) = v153;
          *(float64x2_t *)(a3 + 304) = v16;
          *(float64x2_t *)(a3 + 288) = v14;
          *(float64x2_t *)(a3 + 336) = v155;
          *(float64x2_t *)(a3 + 352) = v146;
          v154.f64[0] = *(float64_t *)(v11 + 32);
          v157 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v146, (int8x16_t)v145, 8uLL));
          v158 = vextq_s8(v157, (int8x16_t)vmulq_laneq_f64(v154, v145, 1), 8uLL);
          v159 = vzip1q_s64((int64x2_t)v156, (int64x2_t)v157);
          *(float64x2_t *)(a3 + 336) = v155;
          *(int8x16_t *)(a3 + 320) = v153;
          *(float64x2_t *)(a3 + 304) = v16;
          *(float64x2_t *)(a3 + 288) = v14;
          *(int64x2_t *)(a3 + 352) = v159;
          *(int8x16_t *)(a3 + 368) = v158;
          v156.f64[0] = *(float64_t *)(v11 + 32);
          v160 = *(float64x2_t *)(v11 + 16);
          v161 = vmulq_f64(v160, v144);
          v162 = (int64x2_t)vmulq_f64(v156, v143);
          *(_QWORD *)&v143.f64[0] = v162.i64[0];
          *(int8x16_t *)(a3 + 368) = v158;
          *(float64x2_t *)(a3 + 336) = v155;
          *(int8x16_t *)(a3 + 320) = v153;
          *(float64x2_t *)(a3 + 304) = v16;
          *(float64x2_t *)(a3 + 288) = v14;
          *(int64x2_t *)(a3 + 352) = v159;
          *(float64x2_t *)(a3 + 384) = v161;
          *(float64x2_t *)(a3 + 400) = v143;
          v160.f64[0] = *(float64_t *)(v11 + 32);
          v163 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v143, (int8x16_t)v142, 8uLL));
          v13 = (float64x2_t)vextq_s8(v163, (int8x16_t)vmulq_laneq_f64(v160, v142, 1), 8uLL);
          _Q2 = (float64x2_t)vzip1q_s64(v162, (int64x2_t)v163);
          *(int64x2_t *)(a3 + 352) = v159;
          *(float64x2_t *)(a3 + 384) = v161;
          *(int8x16_t *)(a3 + 368) = v158;
          *(float64x2_t *)(a3 + 336) = v155;
          *(int8x16_t *)(a3 + 320) = v153;
          *(float64x2_t *)(a3 + 304) = v16;
          *(float64x2_t *)(a3 + 288) = v14;
          *(float64x2_t *)(a3 + 400) = _Q2;
          *(float64x2_t *)(a3 + 416) = v13;
          break;
        case 2:
          v164 = *(double *)(v11 + 16);
          v14 = *(float64x2_t *)(a3 + 288);
          v16 = vmulq_n_f64(*(float64x2_t *)(a3 + 416), v164);
          v165 = vmulq_n_f64(*(float64x2_t *)(a3 + 400), v164);
          v166 = vmulq_n_f64(*(float64x2_t *)(a3 + 384), v164);
          v167 = vmulq_n_f64(*(float64x2_t *)(a3 + 368), v164);
          v168 = vmulq_n_f64(*(float64x2_t *)(a3 + 352), v164);
          v169 = vmulq_n_f64(*(float64x2_t *)(a3 + 336), v164);
          v170 = vmulq_n_f64(*(float64x2_t *)(a3 + 320), v164);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 304), v164);
          v13 = vmulq_n_f64(v14, v164);
          *(float64x2_t *)(a3 + 288) = v13;
          *(float64x2_t *)(a3 + 304) = _Q2;
          *(float64x2_t *)(a3 + 320) = v170;
          *(float64x2_t *)(a3 + 336) = v169;
          *(float64x2_t *)(a3 + 352) = v168;
          *(float64x2_t *)(a3 + 368) = v167;
          *(float64x2_t *)(a3 + 384) = v166;
          *(float64x2_t *)(a3 + 400) = v165;
          *(float64x2_t *)(a3 + 416) = v16;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
          v139 = v331;
          _Q2.f64[0] = v333;
          v140 = v332;
          v13.f64[0] = v335;
          v141 = v334;
LABEL_20:
          v171 = *(double *)(a3 + 304);
          _Q18 = *(float64x2_t *)(a3 + 288);
          v173 = *(double *)(a3 + 328);
          _Q20 = *(float64x2_t *)(a3 + 312);
          v175 = *(double *)(a3 + 352);
          _Q22 = *(float64x2_t *)(a3 + 336);
          v177 = *(double *)(a3 + 376);
          _Q24 = *(float64x2_t *)(a3 + 360);
          v179 = *(double *)(a3 + 400);
          _Q26 = *(float64x2_t *)(a3 + 384);
          v181 = *(double *)(a3 + 424);
          _Q16 = *(float64x2_t *)(a3 + 408);
          v183 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q18.f64[0]), v140, _Q18, 1), v141, v171);
          __asm { FMLA            D27, D2, V18.D[1] }
          v185 = _D27 + v13.f64[0] * v171;
          v186 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q20.f64[0]), v140, _Q20, 1), v141, v173);
          __asm { FMLA            D27, D2, V20.D[1] }
          v188 = _D27 + v13.f64[0] * v173;
          v189 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q22.f64[0]), v140, _Q22, 1), v141, v175);
          __asm { FMLA            D27, D2, V22.D[1] }
          v191 = _D27 + v13.f64[0] * v175;
          v192 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q24.f64[0]), v140, _Q24, 1), v141, v177);
          __asm { FMLA            D27, D2, V24.D[1] }
          v194 = _D27 + v13.f64[0] * v177;
          __asm
          {
            FMLA            D27, D2, V26.D[1]
            FMLA            D1, D2, V16.D[1]
          }
          *(float64x2_t *)(a3 + 288) = v183;
          *(double *)(a3 + 304) = v185;
          *(float64x2_t *)(a3 + 312) = v186;
          *(double *)(a3 + 328) = v188;
          *(float64x2_t *)(a3 + 336) = v189;
          *(double *)(a3 + 352) = v191;
          *(float64x2_t *)(a3 + 360) = v192;
          *(double *)(a3 + 376) = v194;
          *(float64x2_t *)(a3 + 384) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q26.f64[0]), v140, _Q26, 1), v141, v179);
          *(double *)(a3 + 400) = _D27 + v13.f64[0] * v179;
          *(float64x2_t *)(a3 + 408) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, _Q16.f64[0]), v140, _Q16, 1), v141, v181);
          *(double *)(a3 + 424) = _D1 + v13.f64[0] * v181;
          break;
        default:
          break;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 240) + 20))
      {
        switch(v12)
        {
          case 0:
            v197 = *(float64x2_t *)(v11 + 16);
            _Q2.f64[0] = *(float64_t *)(v11 + 56);
            v198 = *(float64x2_t *)(v11 + 40);
            v13.f64[0] = *(float64_t *)(v11 + 80);
            v199 = *(float64x2_t *)(v11 + 64);
            goto LABEL_27;
          case 1:
            v201 = *(float64x2_t *)(a3 + 544);
            v200 = *(float64x2_t *)(a3 + 560);
            v203 = *(float64x2_t *)(a3 + 512);
            v202 = *(float64x2_t *)(a3 + 528);
            v205 = *(float64x2_t *)(a3 + 480);
            v204 = *(float64x2_t *)(a3 + 496);
            v206 = *(float64x2_t *)(a3 + 464);
            v16.f64[0] = *(float64_t *)(v11 + 32);
            v14 = vmulq_f64(*(float64x2_t *)(a3 + 432), *(float64x2_t *)(v11 + 16));
            v207 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 448), v16);
            *(_QWORD *)&v208.f64[0] = v207.i64[0];
            v208.f64[1] = *(float64_t *)(a3 + 456);
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v208;
            v209 = (float64x2_t)vextq_s8((int8x16_t)v208, (int8x16_t)v206, 8uLL);
            v208.f64[0] = *(float64_t *)(v11 + 32);
            v210 = vmulq_f64(*(float64x2_t *)(v11 + 16), v209);
            v16 = (float64x2_t)vzip1q_s64(v207, (int64x2_t)v210);
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v16;
            v211 = vextq_s8((int8x16_t)v210, (int8x16_t)vmulq_laneq_f64(v208, v206, 1), 8uLL);
            *(int8x16_t *)(a3 + 464) = v211;
            v210.f64[0] = *(float64_t *)(v11 + 32);
            v212 = *(float64x2_t *)(v11 + 16);
            v213 = vmulq_f64(v212, v205);
            v214 = vmulq_f64(v210, v204);
            v204.f64[0] = v214.f64[0];
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v16;
            *(int8x16_t *)(a3 + 464) = v211;
            *(float64x2_t *)(a3 + 480) = v213;
            *(float64x2_t *)(a3 + 496) = v204;
            v212.f64[0] = *(float64_t *)(v11 + 32);
            v215 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v204, (int8x16_t)v203, 8uLL));
            v216 = vextq_s8(v215, (int8x16_t)vmulq_laneq_f64(v212, v203, 1), 8uLL);
            v217 = vzip1q_s64((int64x2_t)v214, (int64x2_t)v215);
            *(int8x16_t *)(a3 + 464) = v211;
            *(float64x2_t *)(a3 + 480) = v213;
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v16;
            *(int64x2_t *)(a3 + 496) = v217;
            *(int8x16_t *)(a3 + 512) = v216;
            v214.f64[0] = *(float64_t *)(v11 + 32);
            v218 = *(float64x2_t *)(v11 + 16);
            v219 = vmulq_f64(v218, v202);
            v220 = (int64x2_t)vmulq_f64(v214, v201);
            *(_QWORD *)&v201.f64[0] = v220.i64[0];
            *(int8x16_t *)(a3 + 464) = v211;
            *(float64x2_t *)(a3 + 480) = v213;
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v16;
            *(int64x2_t *)(a3 + 496) = v217;
            *(int8x16_t *)(a3 + 512) = v216;
            *(float64x2_t *)(a3 + 528) = v219;
            *(float64x2_t *)(a3 + 544) = v201;
            v218.f64[0] = *(float64_t *)(v11 + 32);
            v221 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v201, (int8x16_t)v200, 8uLL));
            v13 = (float64x2_t)vextq_s8(v221, (int8x16_t)vmulq_laneq_f64(v218, v200, 1), 8uLL);
            _Q2 = (float64x2_t)vzip1q_s64(v220, (int64x2_t)v221);
            *(int64x2_t *)(a3 + 496) = v217;
            *(int8x16_t *)(a3 + 512) = v216;
            *(int8x16_t *)(a3 + 464) = v211;
            *(float64x2_t *)(a3 + 480) = v213;
            *(float64x2_t *)(a3 + 432) = v14;
            *(float64x2_t *)(a3 + 448) = v16;
            *(float64x2_t *)(a3 + 528) = v219;
            *(float64x2_t *)(a3 + 544) = _Q2;
            *(float64x2_t *)(a3 + 560) = v13;
            break;
          case 2:
            v222 = *(double *)(v11 + 16);
            v14 = *(float64x2_t *)(a3 + 432);
            v16 = vmulq_n_f64(*(float64x2_t *)(a3 + 560), v222);
            v223 = vmulq_n_f64(*(float64x2_t *)(a3 + 544), v222);
            v224 = vmulq_n_f64(*(float64x2_t *)(a3 + 528), v222);
            v225 = vmulq_n_f64(*(float64x2_t *)(a3 + 512), v222);
            v226 = vmulq_n_f64(*(float64x2_t *)(a3 + 496), v222);
            v227 = vmulq_n_f64(*(float64x2_t *)(a3 + 480), v222);
            v228 = vmulq_n_f64(*(float64x2_t *)(a3 + 464), v222);
            _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 448), v222);
            v13 = vmulq_n_f64(v14, v222);
            *(float64x2_t *)(a3 + 432) = v13;
            *(float64x2_t *)(a3 + 448) = _Q2;
            *(float64x2_t *)(a3 + 464) = v228;
            *(float64x2_t *)(a3 + 480) = v227;
            *(float64x2_t *)(a3 + 496) = v226;
            *(float64x2_t *)(a3 + 512) = v225;
            *(float64x2_t *)(a3 + 528) = v224;
            *(float64x2_t *)(a3 + 544) = v223;
            *(float64x2_t *)(a3 + 560) = v16;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
            v197 = v331;
            _Q2.f64[0] = v333;
            v198 = v332;
            v13.f64[0] = v335;
            v199 = v334;
LABEL_27:
            v229 = *(double *)(a3 + 448);
            _Q18 = *(float64x2_t *)(a3 + 432);
            v231 = *(double *)(a3 + 472);
            _Q20 = *(float64x2_t *)(a3 + 456);
            v233 = *(double *)(a3 + 496);
            _Q22 = *(float64x2_t *)(a3 + 480);
            v235 = *(double *)(a3 + 520);
            _Q24 = *(float64x2_t *)(a3 + 504);
            v237 = *(double *)(a3 + 544);
            _Q26 = *(float64x2_t *)(a3 + 528);
            v239 = *(double *)(a3 + 568);
            _Q16 = *(float64x2_t *)(a3 + 552);
            v241 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q18.f64[0]), v198, _Q18, 1), v199, v229);
            __asm { FMLA            D27, D2, V18.D[1] }
            v243 = _D27 + v13.f64[0] * v229;
            v244 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q20.f64[0]), v198, _Q20, 1), v199, v231);
            __asm { FMLA            D27, D2, V20.D[1] }
            v246 = _D27 + v13.f64[0] * v231;
            v247 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q22.f64[0]), v198, _Q22, 1), v199, v233);
            __asm { FMLA            D27, D2, V22.D[1] }
            v249 = _D27 + v13.f64[0] * v233;
            v250 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q24.f64[0]), v198, _Q24, 1), v199, v235);
            __asm { FMLA            D27, D2, V24.D[1] }
            v252 = _D27 + v13.f64[0] * v235;
            __asm
            {
              FMLA            D27, D2, V26.D[1]
              FMLA            D1, D2, V16.D[1]
            }
            *(float64x2_t *)(a3 + 432) = v241;
            *(double *)(a3 + 448) = v243;
            *(float64x2_t *)(a3 + 456) = v244;
            *(double *)(a3 + 472) = v246;
            *(float64x2_t *)(a3 + 480) = v247;
            *(double *)(a3 + 496) = v249;
            *(float64x2_t *)(a3 + 504) = v250;
            *(double *)(a3 + 520) = v252;
            *(float64x2_t *)(a3 + 528) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q26.f64[0]), v198, _Q26, 1), v199, v237);
            *(double *)(a3 + 544) = _D27 + v13.f64[0] * v237;
            *(float64x2_t *)(a3 + 552) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, _Q16.f64[0]), v198, _Q16, 1), v199, v239);
            *(double *)(a3 + 568) = _D1 + v13.f64[0] * v239;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 248) + 20))
      {
        v255 = (float64x2_t *)(a3 + 576);
        switch(v12)
        {
          case 0:
            v256 = *(float64x2_t *)(v11 + 16);
            _Q2.f64[0] = *(float64_t *)(v11 + 56);
            v257 = *(float64x2_t *)(v11 + 40);
            v13.f64[0] = *(float64_t *)(v11 + 80);
            v258 = *(float64x2_t *)(v11 + 64);
            goto LABEL_34;
          case 1:
            v260 = *(float64x2_t *)(a3 + 688);
            v259 = *(float64x2_t *)(a3 + 704);
            v262 = *(float64x2_t *)(a3 + 656);
            v261 = *(float64x2_t *)(a3 + 672);
            v264 = *(float64x2_t *)(a3 + 624);
            v263 = *(float64x2_t *)(a3 + 640);
            v265 = *(float64x2_t *)(a3 + 608);
            v16.f64[0] = *(float64_t *)(v11 + 32);
            v14 = vmulq_f64(*v255, *(float64x2_t *)(v11 + 16));
            v266 = (int64x2_t)vmulq_f64(*(float64x2_t *)(a3 + 592), v16);
            *(_QWORD *)&v267.f64[0] = v266.i64[0];
            v267.f64[1] = *(float64_t *)(a3 + 600);
            *v255 = v14;
            *(float64x2_t *)(a3 + 592) = v267;
            v268 = (float64x2_t)vextq_s8((int8x16_t)v267, (int8x16_t)v265, 8uLL);
            v267.f64[0] = *(float64_t *)(v11 + 32);
            v269 = vmulq_f64(*(float64x2_t *)(v11 + 16), v268);
            v270 = vzip1q_s64(v266, (int64x2_t)v269);
            *v255 = v14;
            *(int64x2_t *)(a3 + 592) = v270;
            v271 = vextq_s8((int8x16_t)v269, (int8x16_t)vmulq_laneq_f64(v267, v265, 1), 8uLL);
            *(int8x16_t *)(a3 + 608) = v271;
            v269.f64[0] = *(float64_t *)(v11 + 32);
            v272 = *(float64x2_t *)(v11 + 16);
            v273 = vmulq_f64(v272, v264);
            v274 = vmulq_f64(v269, v263);
            v263.f64[0] = v274.f64[0];
            *v255 = v14;
            *(int64x2_t *)(a3 + 592) = v270;
            *(int8x16_t *)(a3 + 608) = v271;
            *(float64x2_t *)(a3 + 624) = v273;
            *(float64x2_t *)(a3 + 640) = v263;
            v272.f64[0] = *(float64_t *)(v11 + 32);
            v275 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v263, (int8x16_t)v262, 8uLL));
            v276 = vextq_s8(v275, (int8x16_t)vmulq_laneq_f64(v272, v262, 1), 8uLL);
            v277 = vzip1q_s64((int64x2_t)v274, (int64x2_t)v275);
            *(int8x16_t *)(a3 + 608) = v271;
            *(float64x2_t *)(a3 + 624) = v273;
            *v255 = v14;
            *(int64x2_t *)(a3 + 592) = v270;
            *(int64x2_t *)(a3 + 640) = v277;
            *(int8x16_t *)(a3 + 656) = v276;
            v274.f64[0] = *(float64_t *)(v11 + 32);
            v278 = *(float64x2_t *)(v11 + 16);
            v279 = vmulq_f64(v278, v261);
            v280 = (int64x2_t)vmulq_f64(v274, v260);
            *(_QWORD *)&v260.f64[0] = v280.i64[0];
            *(int8x16_t *)(a3 + 608) = v271;
            *(float64x2_t *)(a3 + 624) = v273;
            *v255 = v14;
            *(int64x2_t *)(a3 + 592) = v270;
            *(int64x2_t *)(a3 + 640) = v277;
            *(int8x16_t *)(a3 + 656) = v276;
            *(float64x2_t *)(a3 + 672) = v279;
            *(float64x2_t *)(a3 + 688) = v260;
            v278.f64[0] = *(float64_t *)(v11 + 32);
            v281 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v11 + 16), (float64x2_t)vextq_s8((int8x16_t)v260, (int8x16_t)v259, 8uLL));
            v13 = (float64x2_t)vextq_s8(v281, (int8x16_t)vmulq_laneq_f64(v278, v259, 1), 8uLL);
            _Q2 = (float64x2_t)vzip1q_s64(v280, (int64x2_t)v281);
            *(int64x2_t *)(a3 + 640) = v277;
            *(int8x16_t *)(a3 + 656) = v276;
            *(int8x16_t *)(a3 + 608) = v271;
            *(float64x2_t *)(a3 + 624) = v273;
            *v255 = v14;
            *(int64x2_t *)(a3 + 592) = v270;
            *(float64x2_t *)(a3 + 672) = v279;
            *(float64x2_t *)(a3 + 688) = _Q2;
            *(float64x2_t *)(a3 + 704) = v13;
            break;
          case 2:
            v282 = *(double *)(v11 + 16);
            v14 = *v255;
            v283 = vmulq_n_f64(*(float64x2_t *)(a3 + 704), v282);
            v284 = vmulq_n_f64(*(float64x2_t *)(a3 + 688), v282);
            v285 = vmulq_n_f64(*(float64x2_t *)(a3 + 672), v282);
            v286 = vmulq_n_f64(*(float64x2_t *)(a3 + 656), v282);
            v287 = vmulq_n_f64(*(float64x2_t *)(a3 + 640), v282);
            v288 = vmulq_n_f64(*(float64x2_t *)(a3 + 624), v282);
            v289 = vmulq_n_f64(*(float64x2_t *)(a3 + 608), v282);
            _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 592), v282);
            v13 = vmulq_n_f64(*v255, v282);
            *v255 = v13;
            *(float64x2_t *)(a3 + 592) = _Q2;
            *(float64x2_t *)(a3 + 608) = v289;
            *(float64x2_t *)(a3 + 624) = v288;
            *(float64x2_t *)(a3 + 640) = v287;
            *(float64x2_t *)(a3 + 656) = v286;
            *(float64x2_t *)(a3 + 672) = v285;
            *(float64x2_t *)(a3 + 688) = v284;
            *(float64x2_t *)(a3 + 704) = v283;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
            v256 = v331;
            _Q2.f64[0] = v333;
            v257 = v332;
            v13.f64[0] = v335;
            v258 = v334;
LABEL_34:
            v290 = *(double *)(a3 + 592);
            _Q18 = *v255;
            v292 = *(double *)(a3 + 616);
            _Q20 = *(float64x2_t *)(a3 + 600);
            v294 = *(double *)(a3 + 640);
            _Q22 = *(float64x2_t *)(a3 + 624);
            v296 = *(double *)(a3 + 664);
            _Q24 = *(float64x2_t *)(a3 + 648);
            v298 = *(double *)(a3 + 688);
            _Q26 = *(float64x2_t *)(a3 + 672);
            v300 = *(double *)(a3 + 712);
            _Q16 = *(float64x2_t *)(a3 + 696);
            v302 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, v255->f64[0]), v257, *v255, 1), v258, v290);
            __asm { FMLA            D27, D2, V18.D[1] }
            v304 = _D27 + v13.f64[0] * v290;
            v305 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, _Q20.f64[0]), v257, _Q20, 1), v258, v292);
            __asm { FMLA            D27, D2, V20.D[1] }
            v307 = _D27 + v13.f64[0] * v292;
            v308 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, _Q22.f64[0]), v257, _Q22, 1), v258, v294);
            __asm { FMLA            D27, D2, V22.D[1] }
            v310 = _D27 + v13.f64[0] * v294;
            v311 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, _Q24.f64[0]), v257, _Q24, 1), v258, v296);
            __asm { FMLA            D27, D2, V24.D[1] }
            v313 = _D27 + v13.f64[0] * v296;
            __asm
            {
              FMLA            D27, D2, V26.D[1]
              FMLA            D1, D2, V16.D[1]
            }
            *v255 = v302;
            *(double *)(a3 + 592) = v304;
            *(float64x2_t *)(a3 + 600) = v305;
            *(double *)(a3 + 616) = v307;
            *(float64x2_t *)(a3 + 624) = v308;
            *(double *)(a3 + 640) = v310;
            *(float64x2_t *)(a3 + 648) = v311;
            *(double *)(a3 + 664) = v313;
            *(float64x2_t *)(a3 + 672) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, _Q26.f64[0]), v257, _Q26, 1), v258, v298);
            *(double *)(a3 + 688) = _D27 + v13.f64[0] * v298;
            *(float64x2_t *)(a3 + 696) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, _Q16.f64[0]), v257, _Q16, 1), v258, v300);
            *(double *)(a3 + 712) = _D1 + v13.f64[0] * v300;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 20))
      {
        v317 = v12;
        v316 = (float64x2_t *)(a3 + 720);
        switch(v317)
        {
          case 0:
            v318 = *(float64x2_t *)(v11 + 16);
            _D2 = *(double *)(v11 + 56);
            v320 = *(float64x2_t *)(v11 + 40);
            v321 = *(double *)(v11 + 80);
            v322 = *(float64x2_t *)(v11 + 64);
            goto LABEL_42;
          case 1:
            v14.f64[0] = *(float64_t *)(a3 + 736);
            _Q2.f64[0] = *(float64_t *)(v11 + 32);
            *(_QWORD *)&v14.f64[0] = *(_OWORD *)&vmulq_f64(v14, _Q2);
            v323 = vmulq_f64(*(float64x2_t *)(a3 + 720), *(float64x2_t *)(v11 + 16));
            goto LABEL_40;
          case 2:
            v13.f64[0] = *(float64_t *)(v11 + 16);
            v14.f64[0] = *(float64_t *)(a3 + 736);
            *(_QWORD *)&v14.f64[0] = *(_OWORD *)&vmulq_f64(v14, v13);
            v323 = vmulq_n_f64(*v316, v13.f64[0]);
LABEL_40:
            *v316 = v323;
            *(float64_t *)(a3 + 736) = v14.f64[0];
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 56))(&v331, v11);
            v318 = v331;
            _D2 = v333;
            v320 = v332;
            v321 = v335;
            v322 = v334;
LABEL_42:
            v324 = *(double *)(a3 + 736);
            _Q7 = *v316;
            __asm { FMLA            D0, D2, V7.D[1] }
            *v316 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v318, v316->f64[0]), v320, *v316, 1), v322, v324);
            *(double *)(a3 + 736) = _D0 + v321 * v324;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 264) = *(_OWORD *)v6;
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(v6 + 16);
    _Q1 = *(_OWORD *)v6;
    _D3 = *(_QWORD *)(v6 + 8);
    __asm { FMLA            D2, D3, V1.D[1] }
    v8 = *(double *)(a2 + 8) * (_D2 + *(double *)(v6 + 16) * *(double *)(v6 + 16));
  }
  *(double *)(a1 + 312) = v8;
  return v7;
}

BOOL sub_20FB267B0(uint64_t a1, uint64_t a2, float64x2_t *a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  _OWORD *v13;
  _BOOL8 v14;
  double v15;
  uint64_t v16;
  float64x2_t *v17;
  int v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t *v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v136;
  float64x2_t v137;

  v13 = (_OWORD *)(a1 + 120);
  v14 = sub_20FC78414(a1, (_QWORD *)(a1 + 56), a1 + 120, a3, a4, a5, a6, a7, a8, a9, a10);
  *(_BYTE *)(a1 + 144) = v14;
  v15 = 0.0;
  if (v14)
  {
    v16 = *(_QWORD *)(a1 + 152);
    if (v16)
    {
      (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)v16 + 24))(v16, v13, 0.0);
      v17 = *(float64x2_t **)(a1 + 152);
      v18 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v17->f64[0] + 16))(v17);
      switch(v18)
      {
        case 0:
          v19 = v17[1];
          v20 = v17[2];
          goto LABEL_8;
        case 1:
          v21 = a3[1];
          v22 = vmulq_f64(*a3, v17[1]);
          v24 = a3[4];
          v23 = a3[5];
          v26 = a3[2];
          v25 = a3[3];
          *a3 = v22;
          v27 = vmulq_f64(v21, v17[1]);
          *a3 = v22;
          a3[1] = v27;
          v28 = vmulq_f64(v26, v17[1]);
          *a3 = v22;
          a3[1] = v27;
          a3[2] = v28;
          v29 = vmulq_f64(v25, v17[1]);
          *a3 = v22;
          a3[1] = v27;
          a3[2] = v28;
          a3[3] = v29;
          v30 = vmulq_f64(v24, v17[1]);
          *a3 = v22;
          a3[1] = v27;
          a3[2] = v28;
          a3[3] = v29;
          a3[4] = v30;
          v31 = vmulq_f64(v23, v17[1]);
          a3[2] = v28;
          a3[3] = v29;
          *a3 = v22;
          a3[1] = v27;
          a3[4] = v30;
          a3[5] = v31;
          break;
        case 2:
          v32 = v17[1].f64[0];
          v33 = vmulq_n_f64(a3[5], v32);
          v34 = vmulq_n_f64(a3[4], v32);
          v35 = vmulq_n_f64(a3[3], v32);
          v36 = vmulq_n_f64(a3[2], v32);
          v37 = vmulq_n_f64(a3[1], v32);
          *a3 = vmulq_n_f64(*a3, v32);
          a3[1] = v37;
          a3[2] = v36;
          a3[3] = v35;
          a3[4] = v34;
          a3[5] = v33;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
          v19 = v136;
          v20 = v137;
LABEL_8:
          v38 = a3[5];
          v39 = vmlaq_laneq_f64(vmulq_n_f64(v19, a3[1].f64[0]), v20, a3[1], 1);
          v40 = vmlaq_laneq_f64(vmulq_n_f64(v19, a3[2].f64[0]), v20, a3[2], 1);
          v41 = vmlaq_laneq_f64(vmulq_n_f64(v19, a3[3].f64[0]), v20, a3[3], 1);
          v42 = vmlaq_laneq_f64(vmulq_n_f64(v19, a3[4].f64[0]), v20, a3[4], 1);
          *a3 = vmlaq_laneq_f64(vmulq_n_f64(v19, a3->f64[0]), v20, *a3, 1);
          a3[1] = v39;
          a3[2] = v40;
          a3[3] = v41;
          a3[4] = v42;
          a3[5] = vmlaq_laneq_f64(vmulq_n_f64(v19, v38.f64[0]), v20, v38, 1);
          break;
        default:
          break;
      }
      switch(v18)
      {
        case 0:
          v43 = v17[1];
          v44 = v17[2];
          goto LABEL_14;
        case 1:
          v45 = a3[7];
          v46 = vmulq_f64(a3[6], v17[1]);
          v48 = a3[10];
          v47 = a3[11];
          v50 = a3[8];
          v49 = a3[9];
          a3[6] = v46;
          v51 = vmulq_f64(v45, v17[1]);
          a3[6] = v46;
          a3[7] = v51;
          v52 = vmulq_f64(v50, v17[1]);
          a3[6] = v46;
          a3[7] = v51;
          a3[8] = v52;
          v53 = vmulq_f64(v49, v17[1]);
          a3[6] = v46;
          a3[7] = v51;
          a3[8] = v52;
          a3[9] = v53;
          v54 = vmulq_f64(v48, v17[1]);
          a3[6] = v46;
          a3[7] = v51;
          a3[8] = v52;
          a3[9] = v53;
          a3[10] = v54;
          v55 = vmulq_f64(v47, v17[1]);
          a3[8] = v52;
          a3[9] = v53;
          a3[6] = v46;
          a3[7] = v51;
          a3[10] = v54;
          a3[11] = v55;
          break;
        case 2:
          v56 = v17[1].f64[0];
          v57 = vmulq_n_f64(a3[11], v56);
          v58 = vmulq_n_f64(a3[10], v56);
          v59 = vmulq_n_f64(a3[9], v56);
          v60 = vmulq_n_f64(a3[8], v56);
          v61 = vmulq_n_f64(a3[7], v56);
          a3[6] = vmulq_n_f64(a3[6], v56);
          a3[7] = v61;
          a3[8] = v60;
          a3[9] = v59;
          a3[10] = v58;
          a3[11] = v57;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
          v43 = v136;
          v44 = v137;
LABEL_14:
          v62 = a3[11];
          v63 = vmlaq_laneq_f64(vmulq_n_f64(v43, a3[7].f64[0]), v44, a3[7], 1);
          v64 = vmlaq_laneq_f64(vmulq_n_f64(v43, a3[8].f64[0]), v44, a3[8], 1);
          v65 = vmlaq_laneq_f64(vmulq_n_f64(v43, a3[9].f64[0]), v44, a3[9], 1);
          v66 = vmlaq_laneq_f64(vmulq_n_f64(v43, a3[10].f64[0]), v44, a3[10], 1);
          a3[6] = vmlaq_laneq_f64(vmulq_n_f64(v43, a3[6].f64[0]), v44, a3[6], 1);
          a3[7] = v63;
          a3[8] = v64;
          a3[9] = v65;
          a3[10] = v66;
          a3[11] = vmlaq_laneq_f64(vmulq_n_f64(v43, v62.f64[0]), v44, v62, 1);
          break;
        default:
          break;
      }
      switch(v18)
      {
        case 0:
          v67 = v17[1];
          v68 = v17[2];
          goto LABEL_20;
        case 1:
          v69 = a3[13];
          v70 = vmulq_f64(a3[12], v17[1]);
          v72 = a3[14];
          v71 = a3[15];
          a3[12] = v70;
          v73 = vmulq_f64(v69, v17[1]);
          a3[12] = v70;
          a3[13] = v73;
          v74 = vmulq_f64(v72, v17[1]);
          a3[12] = v70;
          a3[13] = v73;
          a3[14] = v74;
          v75 = vmulq_f64(v71, v17[1]);
          a3[12] = v70;
          a3[13] = v73;
          a3[14] = v74;
          a3[15] = v75;
          break;
        case 2:
          v76 = v17[1].f64[0];
          v77 = vmulq_n_f64(a3[13], v76);
          v78 = vmulq_n_f64(a3[12], v76);
          v79 = vmulq_n_f64(a3[15], v76);
          a3[14] = vmulq_n_f64(a3[14], v76);
          a3[15] = v79;
          a3[12] = v78;
          a3[13] = v77;
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
          v67 = v136;
          v68 = v137;
LABEL_20:
          v80 = vmlaq_laneq_f64(vmulq_n_f64(v67, a3[12].f64[0]), v68, a3[12], 1);
          v81 = vmlaq_laneq_f64(vmulq_n_f64(v67, a3[13].f64[0]), v68, a3[13], 1);
          v82 = vmlaq_laneq_f64(vmulq_n_f64(v67, a3[14].f64[0]), v68, a3[14], 1);
          v83 = vmlaq_laneq_f64(vmulq_n_f64(v67, a3[15].f64[0]), v68, a3[15], 1);
          a3[12] = v80;
          a3[13] = v81;
          a3[14] = v82;
          a3[15] = v83;
          break;
        default:
          break;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 20))
      {
        switch(v18)
        {
          case 0:
            v84 = v17[1];
            v85 = v17[2];
            goto LABEL_27;
          case 1:
            v86 = a3[17];
            v87 = vmulq_f64(a3[16], v17[1]);
            v89 = a3[18];
            v88 = a3[19];
            a3[16] = v87;
            v90 = vmulq_f64(v86, v17[1]);
            a3[16] = v87;
            a3[17] = v90;
            v91 = vmulq_f64(v89, v17[1]);
            a3[16] = v87;
            a3[17] = v90;
            a3[18] = v91;
            v92 = vmulq_f64(v88, v17[1]);
            a3[16] = v87;
            a3[17] = v90;
            a3[18] = v91;
            a3[19] = v92;
            break;
          case 2:
            v93 = v17[1].f64[0];
            v94 = vmulq_n_f64(a3[17], v93);
            v95 = vmulq_n_f64(a3[16], v93);
            v96 = vmulq_n_f64(a3[19], v93);
            a3[18] = vmulq_n_f64(a3[18], v93);
            a3[19] = v96;
            a3[16] = v95;
            a3[17] = v94;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
            v84 = v136;
            v85 = v137;
LABEL_27:
            v97 = vmlaq_laneq_f64(vmulq_n_f64(v84, a3[16].f64[0]), v85, a3[16], 1);
            v98 = vmlaq_laneq_f64(vmulq_n_f64(v84, a3[17].f64[0]), v85, a3[17], 1);
            v99 = vmlaq_laneq_f64(vmulq_n_f64(v84, a3[18].f64[0]), v85, a3[18], 1);
            v100 = vmlaq_laneq_f64(vmulq_n_f64(v84, a3[19].f64[0]), v85, a3[19], 1);
            a3[16] = v97;
            a3[17] = v98;
            a3[18] = v99;
            a3[19] = v100;
            break;
          default:
            break;
        }
      }
      v101 = a3 + 20;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 20))
      {
        switch(v18)
        {
          case 0:
            v102 = v17[1];
            v103 = v17[2];
            goto LABEL_34;
          case 1:
            v104 = a3[21];
            v105 = vmulq_f64(*v101, v17[1]);
            v106 = a3[22];
            *v101 = v105;
            v107 = vmulq_f64(v104, v17[1]);
            *v101 = v105;
            a3[21] = v107;
            v108 = vmulq_f64(v106, v17[1]);
            *v101 = v105;
            a3[21] = v107;
            a3[22] = v108;
            break;
          case 2:
            v109 = v17[1].f64[0];
            v110 = vmulq_n_f64(a3[22], v109);
            v111 = vmulq_n_f64(a3[21], v109);
            *v101 = vmulq_n_f64(*v101, v109);
            a3[21] = v111;
            a3[22] = v110;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
            v102 = v136;
            v103 = v137;
LABEL_34:
            v112 = vmlaq_laneq_f64(vmulq_n_f64(v102, a3[20].f64[0]), v103, a3[20], 1);
            v113 = vmlaq_laneq_f64(vmulq_n_f64(v102, a3[21].f64[0]), v103, a3[21], 1);
            v114 = vmlaq_laneq_f64(vmulq_n_f64(v102, a3[22].f64[0]), v103, a3[22], 1);
            a3[20] = v112;
            a3[21] = v113;
            a3[22] = v114;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 20))
      {
        switch(v18)
        {
          case 0:
            v115 = v17[1];
            v116 = v17[2];
            goto LABEL_41;
          case 1:
            v117 = a3[24];
            v118 = vmulq_f64(a3[23], v17[1]);
            v119 = a3[25];
            a3[23] = v118;
            v120 = vmulq_f64(v117, v17[1]);
            a3[23] = v118;
            a3[24] = v120;
            v121 = vmulq_f64(v119, v17[1]);
            a3[23] = v118;
            a3[24] = v120;
            a3[25] = v121;
            break;
          case 2:
            v122 = v17[1].f64[0];
            v123 = vmulq_n_f64(a3[25], v122);
            v124 = vmulq_n_f64(a3[24], v122);
            a3[23] = vmulq_n_f64(a3[23], v122);
            a3[24] = v124;
            a3[25] = v123;
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v17->f64[0] + 56))(&v136, v17);
            v115 = v136;
            v116 = v137;
LABEL_41:
            v125 = vmlaq_laneq_f64(vmulq_n_f64(v115, a3[23].f64[0]), v116, a3[23], 1);
            v126 = vmlaq_laneq_f64(vmulq_n_f64(v115, a3[24].f64[0]), v116, a3[24], 1);
            v127 = vmlaq_laneq_f64(vmulq_n_f64(v115, a3[25].f64[0]), v116, a3[25], 1);
            a3[23] = v125;
            a3[24] = v126;
            a3[25] = v127;
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a1 + 104) = *v13;
    _Q0 = *(_OWORD *)(a1 + 120);
    _D2 = *(_QWORD *)(a1 + 128);
    __asm { FMLA            D1, D2, V0.D[1] }
    v15 = *(double *)(a2 + 8) * _D1;
  }
  *(double *)(a1 + 136) = v15;
  return v14;
}

float64x2_t sub_20FB26E60(uint64_t a1, uint64_t a2, float64x2_t *a3, double a4, double a5, double a6, double a7, float64x2_t a8)
{
  int8x16_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t result;
  int8x16_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  int8x16_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  const double *f64;
  const double *v54;
  float64x2_t *v55;
  const double *v56;
  const double *v57;
  float64x2_t *v58;
  const double *v59;
  const double *v60;
  float64x2_t *v61;
  const double *v62;
  const double *v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  float64x2_t v72;
  float64x2x2_t v73;
  float64x2x2_t v74;
  float64x2x2_t v75;
  float64x2x2_t v76;
  float64x2x2_t v77;
  float64x2x2_t v78;
  float64x2x2_t v79;
  float64x2x2_t v80;

  if (*(_BYTE *)a2)
  {
    v8 = (int8x16_t)vmulq_f64(a3[5], a3[5]);
    a8 = vmulq_f64(a3[4], a3[4]);
    v9 = (int64x2_t)vmulq_f64(a3[1], a3[1]);
    v10 = (int64x2_t)vmulq_f64(*a3, *a3);
    v11 = (int64x2_t)vmulq_f64(a3[3], a3[3]);
    v12 = (int64x2_t)vmulq_f64(a3[2], a3[2]);
    v13 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 6 * *(_DWORD *)(a2 + 4)));
    v14 = (float64x2_t)vzip1q_s64(v12, v11);
    v15 = (float64x2_t)vzip2q_s64(v12, v11);
    v16 = vaddq_f64((float64x2_t)vzip1q_s64(v10, v9), (float64x2_t)vzip2q_s64(v10, v9));
    v17 = (float64x2_t)vextq_s8((int8x16_t)a8, v8, 8uLL);
    *(_QWORD *)&a8.f64[1] = v8.i64[1];
    v18 = vaddq_f64(v13[2], vaddq_f64(v17, a8));
    result = vaddq_f64(v13[1], vaddq_f64(v14, v15));
    *v13 = vaddq_f64(*v13, v16);
    v13[1] = result;
    v13[2] = v18;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v20 = (int8x16_t)vmulq_f64(a3[11], a3[11]);
    a8 = vmulq_f64(a3[10], a3[10]);
    v21 = (int64x2_t)vmulq_f64(a3[7], a3[7]);
    v22 = (int64x2_t)vmulq_f64(a3[6], a3[6]);
    v23 = (int64x2_t)vmulq_f64(a3[9], a3[9]);
    v24 = (int64x2_t)vmulq_f64(a3[8], a3[8]);
    v25 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 6 * *(_DWORD *)(a2 + 12)));
    v26 = (float64x2_t)vzip1q_s64(v24, v23);
    v27 = (float64x2_t)vzip2q_s64(v24, v23);
    v28 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v21), (float64x2_t)vzip2q_s64(v22, v21));
    v29 = (float64x2_t)vextq_s8((int8x16_t)a8, v20, 8uLL);
    *(_QWORD *)&a8.f64[1] = v20.i64[1];
    v30 = vaddq_f64(v25[2], vaddq_f64(v29, a8));
    result = vaddq_f64(v25[1], vaddq_f64(v26, v27));
    *v25 = vaddq_f64(*v25, v28);
    v25[1] = result;
    v25[2] = v30;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v31 = (int8x16_t)vmulq_f64(a3[17], a3[17]);
    a8 = vmulq_f64(a3[16], a3[16]);
    v32 = (int64x2_t)vmulq_f64(a3[13], a3[13]);
    v33 = (int64x2_t)vmulq_f64(a3[12], a3[12]);
    v34 = (int64x2_t)vmulq_f64(a3[15], a3[15]);
    v35 = (int64x2_t)vmulq_f64(a3[14], a3[14]);
    v36 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 20)));
    v37 = (float64x2_t)vzip1q_s64(v35, v34);
    v38 = (float64x2_t)vzip2q_s64(v35, v34);
    v39 = vaddq_f64((float64x2_t)vzip1q_s64(v33, v32), (float64x2_t)vzip2q_s64(v33, v32));
    v40 = (float64x2_t)vextq_s8((int8x16_t)a8, v31, 8uLL);
    *(_QWORD *)&a8.f64[1] = v31.i64[1];
    v41 = vaddq_f64(v36[2], vaddq_f64(v40, a8));
    result = vaddq_f64(v36[1], vaddq_f64(v37, v38));
    *v36 = vaddq_f64(*v36, v39);
    v36[1] = result;
    v36[2] = v41;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    v42 = (int8x16_t)vmulq_f64(a3[23], a3[23]);
    a8 = vmulq_f64(a3[22], a3[22]);
    v43 = (int64x2_t)vmulq_f64(a3[19], a3[19]);
    v44 = (int64x2_t)vmulq_f64(a3[18], a3[18]);
    v45 = (int64x2_t)vmulq_f64(a3[21], a3[21]);
    v46 = (int64x2_t)vmulq_f64(a3[20], a3[20]);
    v47 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 28)));
    v48 = (float64x2_t)vzip1q_s64(v46, v45);
    v49 = (float64x2_t)vzip2q_s64(v46, v45);
    v50 = vaddq_f64((float64x2_t)vzip1q_s64(v44, v43), (float64x2_t)vzip2q_s64(v44, v43));
    v51 = (float64x2_t)vextq_s8((int8x16_t)a8, v42, 8uLL);
    *(_QWORD *)&a8.f64[1] = v42.i64[1];
    v52 = vaddq_f64(v47[2], vaddq_f64(v51, a8));
    result = vaddq_f64(v47[1], vaddq_f64(v48, v49));
    *v47 = vaddq_f64(*v47, v50);
    v47[1] = result;
    v47[2] = v52;
  }
  if (*(_BYTE *)(a2 + 32))
  {
    f64 = a3[24].f64;
    v73 = vld2q_f64(f64);
    v54 = a3[26].f64;
    v77 = vld2q_f64(v54);
    v55 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 92) + 4 * *(_DWORD *)(a2 + 36)));
    a8 = *v55;
    v73.val[0] = vaddq_f64(vmulq_f64(v73.val[0], v73.val[0]), vmulq_f64(v73.val[1], v73.val[1]));
    v73.val[1] = vaddq_f64(v55[1], vaddq_f64(vmulq_f64(v77.val[0], v77.val[0]), vmulq_f64(v77.val[1], v77.val[1])));
    result = vaddq_f64(*v55, v73.val[0]);
    *v55 = result;
    v55[1] = v73.val[1];
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v56 = a3[28].f64;
    v74 = vld2q_f64(v56);
    v57 = a3[30].f64;
    v78 = vld2q_f64(v57);
    v58 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 92) + 4 * *(_DWORD *)(a2 + 44)));
    a8 = *v58;
    v74.val[0] = vaddq_f64(vmulq_f64(v74.val[0], v74.val[0]), vmulq_f64(v74.val[1], v74.val[1]));
    v74.val[1] = vaddq_f64(v58[1], vaddq_f64(vmulq_f64(v78.val[0], v78.val[0]), vmulq_f64(v78.val[1], v78.val[1])));
    result = vaddq_f64(*v58, v74.val[0]);
    *v58 = result;
    v58[1] = v74.val[1];
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v59 = a3[32].f64;
    v75 = vld2q_f64(v59);
    v60 = a3[34].f64;
    v79 = vld2q_f64(v60);
    v61 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 96) + 4 * *(_DWORD *)(a2 + 52)));
    a8 = *v61;
    v75.val[0] = vaddq_f64(vmulq_f64(v75.val[0], v75.val[0]), vmulq_f64(v75.val[1], v75.val[1]));
    v75.val[1] = vaddq_f64(v61[1], vaddq_f64(vmulq_f64(v79.val[0], v79.val[0]), vmulq_f64(v79.val[1], v79.val[1])));
    result = vaddq_f64(*v61, v75.val[0]);
    *v61 = result;
    v61[1] = v75.val[1];
  }
  if (*(_BYTE *)(a2 + 56))
  {
    v62 = a3[36].f64;
    v76 = vld2q_f64(v62);
    v63 = a3[38].f64;
    v80 = vld2q_f64(v63);
    v64 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 96) + 4 * *(_DWORD *)(a2 + 60)));
    a8 = *v64;
    v76.val[0] = vaddq_f64(vmulq_f64(v76.val[0], v76.val[0]), vmulq_f64(v76.val[1], v76.val[1]));
    v76.val[1] = vaddq_f64(v64[1], vaddq_f64(vmulq_f64(v80.val[0], v80.val[0]), vmulq_f64(v80.val[1], v80.val[1])));
    result = vaddq_f64(*v64, v76.val[0]);
    *v64 = result;
    v64[1] = v76.val[1];
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v65 = vmulq_f64(a3[41], a3[41]);
    v66 = vmulq_f64(a3[40], a3[40]);
    v67 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 100) + 3 * *(_DWORD *)(a2 + 68));
    a8.f64[0] = *(float64_t *)(v67 + 16);
    v68 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v65, 8uLL);
    v66.f64[1] = v65.f64[1];
    v65.f64[0] = vaddvq_f64(vmulq_f64(a3[42], a3[42]));
    result = vaddq_f64(*(float64x2_t *)v67, vaddq_f64(v68, v66));
    *(float64x2_t *)v67 = result;
    *(_QWORD *)(v67 + 16) = *(_OWORD *)&vaddq_f64(a8, v65);
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v69 = vmulq_f64(a3[44], a3[44]);
    v70 = vmulq_f64(a3[43], a3[43]);
    v71 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 100) + 3 * *(_DWORD *)(a2 + 76));
    a8.f64[0] = *(float64_t *)(v71 + 16);
    v72 = (float64x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v69, 8uLL);
    v70.f64[1] = v69.f64[1];
    v69.f64[0] = vaddvq_f64(vmulq_f64(a3[45], a3[45]));
    result = vaddq_f64(*(float64x2_t *)v71, vaddq_f64(v72, v70));
    *(float64x2_t *)v71 = result;
    *(_QWORD *)(v71 + 16) = *(_OWORD *)&vaddq_f64(a8, v69);
  }
  return result;
}

float64x2_t sub_20FB272A8(uint64_t a1, uint64_t a2, double *a3, double a4, double a5, float64x2_t a6, double a7, float64x2_t a8)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t *v10;
  float64x2_t result;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t v27;
  uint64_t v28;
  float64x2_t v29;
  uint64_t v30;
  float64x2_t v31;
  uint64_t v32;
  float64x2_t v33;
  uint64_t v34;
  float64x2_t v35;
  uint64_t v36;

  if (*(_BYTE *)a2)
  {
    v8.f64[0] = *a3 * *a3;
    v9.f64[0] = a3[2] * a3[2];
    a8.f64[0] = a3[4] * a3[4];
    v10 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 6 * *(_DWORD *)(a2 + 4)));
    a8.f64[1] = a3[5] * a3[5];
    v9.f64[1] = a3[3] * a3[3];
    v8.f64[1] = a3[1] * a3[1];
    result = vaddq_f64(v8, *v10);
    v12 = vaddq_f64(v9, v10[1]);
    a6 = vaddq_f64(a8, v10[2]);
    v10[1] = v12;
    v10[2] = a6;
    *v10 = result;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v13.f64[0] = a3[6] * a3[6];
    v14.f64[0] = a3[8] * a3[8];
    a8.f64[0] = a3[10] * a3[10];
    v15 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 6 * *(_DWORD *)(a2 + 12)));
    a8.f64[1] = a3[11] * a3[11];
    v14.f64[1] = a3[9] * a3[9];
    v13.f64[1] = a3[7] * a3[7];
    result = vaddq_f64(v13, *v15);
    v16 = vaddq_f64(v14, v15[1]);
    a6 = vaddq_f64(a8, v15[2]);
    v15[1] = v16;
    v15[2] = a6;
    *v15 = result;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v17.f64[0] = a3[12] * a3[12];
    v18.f64[0] = a3[14] * a3[14];
    a8.f64[0] = a3[16] * a3[16];
    v19 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 20)));
    a8.f64[1] = a3[17] * a3[17];
    v18.f64[1] = a3[15] * a3[15];
    v17.f64[1] = a3[13] * a3[13];
    result = vaddq_f64(v17, *v19);
    v20 = vaddq_f64(v18, v19[1]);
    a6 = vaddq_f64(a8, v19[2]);
    v19[1] = v20;
    v19[2] = a6;
    *v19 = result;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    v21.f64[0] = a3[18] * a3[18];
    v22.f64[0] = a3[20] * a3[20];
    a8.f64[0] = a3[22] * a3[22];
    v23 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 28)));
    a8.f64[1] = a3[23] * a3[23];
    v22.f64[1] = a3[21] * a3[21];
    v21.f64[1] = a3[19] * a3[19];
    result = vaddq_f64(v21, *v23);
    v24 = vaddq_f64(v22, v23[1]);
    a6 = vaddq_f64(a8, v23[2]);
    v23[1] = v24;
    v23[2] = a6;
    *v23 = result;
  }
  if (*(_BYTE *)(a2 + 32))
  {
    v25.f64[0] = a3[24] * a3[24];
    a6.f64[0] = a3[26] * a3[26];
    v26 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 92) + 4 * *(_DWORD *)(a2 + 36));
    a8 = *(float64x2_t *)(v26 + 16);
    a6.f64[1] = a3[27] * a3[27];
    v25.f64[1] = a3[25] * a3[25];
    result = vaddq_f64(v25, *(float64x2_t *)v26);
    *(float64x2_t *)v26 = result;
    *(float64x2_t *)(v26 + 16) = vaddq_f64(a6, a8);
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v27.f64[0] = a3[28] * a3[28];
    a6.f64[0] = a3[30] * a3[30];
    v28 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 92) + 4 * *(_DWORD *)(a2 + 44));
    a8 = *(float64x2_t *)(v28 + 16);
    a6.f64[1] = a3[31] * a3[31];
    v27.f64[1] = a3[29] * a3[29];
    result = vaddq_f64(v27, *(float64x2_t *)v28);
    *(float64x2_t *)v28 = result;
    *(float64x2_t *)(v28 + 16) = vaddq_f64(a6, a8);
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v29.f64[0] = a3[32] * a3[32];
    a6.f64[0] = a3[34] * a3[34];
    v30 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 96) + 4 * *(_DWORD *)(a2 + 52));
    a8 = *(float64x2_t *)(v30 + 16);
    a6.f64[1] = a3[35] * a3[35];
    v29.f64[1] = a3[33] * a3[33];
    result = vaddq_f64(v29, *(float64x2_t *)v30);
    *(float64x2_t *)v30 = result;
    *(float64x2_t *)(v30 + 16) = vaddq_f64(a6, a8);
  }
  if (*(_BYTE *)(a2 + 56))
  {
    v31.f64[0] = a3[36] * a3[36];
    a6.f64[0] = a3[38] * a3[38];
    v32 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 96) + 4 * *(_DWORD *)(a2 + 60));
    a8 = *(float64x2_t *)(v32 + 16);
    a6.f64[1] = a3[39] * a3[39];
    v31.f64[1] = a3[37] * a3[37];
    result = vaddq_f64(v31, *(float64x2_t *)v32);
    *(float64x2_t *)v32 = result;
    *(float64x2_t *)(v32 + 16) = vaddq_f64(a6, a8);
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v33.f64[0] = a3[40] * a3[40];
    a6.f64[0] = a3[42] * a3[42];
    v34 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 100) + 3 * *(_DWORD *)(a2 + 68));
    a8.f64[0] = *(float64_t *)(v34 + 16);
    v33.f64[1] = a3[41] * a3[41];
    result = vaddq_f64(v33, *(float64x2_t *)v34);
    *(float64x2_t *)v34 = result;
    *(_QWORD *)(v34 + 16) = *(_OWORD *)&vaddq_f64(a6, a8);
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v35.f64[0] = a3[43] * a3[43];
    a6.f64[0] = a3[45] * a3[45];
    v36 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 100) + 3 * *(_DWORD *)(a2 + 76));
    a8.f64[0] = *(float64_t *)(v36 + 16);
    v35.f64[1] = a3[44] * a3[44];
    result = vaddq_f64(v35, *(float64x2_t *)v36);
    *(float64x2_t *)v36 = result;
    *(_QWORD *)(v36 + 16) = *(_OWORD *)&vaddq_f64(a6, a8);
  }
  return result;
}

float64x2_t sub_20FB27654(uint64_t a1, uint64_t a2, float64x2_t *a3, double a4, double a5, double a6, double a7, float64x2_t a8)
{
  int8x16_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t result;
  int8x16_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  const double *f64;
  const double *v43;
  float64x2_t *v44;
  const double *v45;
  const double *v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t v50;
  float64x2_t v51;
  float64x2x2_t v52;
  float64x2x2_t v53;
  float64x2x2_t v54;
  float64x2x2_t v55;

  if (*(_BYTE *)a2)
  {
    v8 = (int8x16_t)vmulq_f64(a3[5], a3[5]);
    a8 = vmulq_f64(a3[4], a3[4]);
    v9 = (int64x2_t)vmulq_f64(a3[1], a3[1]);
    v10 = (int64x2_t)vmulq_f64(*a3, *a3);
    v11 = (int64x2_t)vmulq_f64(a3[3], a3[3]);
    v12 = (int64x2_t)vmulq_f64(a3[2], a3[2]);
    v13 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 72) + 6 * *(_DWORD *)(a2 + 4)));
    v14 = (float64x2_t)vzip1q_s64(v12, v11);
    v15 = (float64x2_t)vzip2q_s64(v12, v11);
    v16 = vaddq_f64((float64x2_t)vzip1q_s64(v10, v9), (float64x2_t)vzip2q_s64(v10, v9));
    v17 = (float64x2_t)vextq_s8((int8x16_t)a8, v8, 8uLL);
    *(_QWORD *)&a8.f64[1] = v8.i64[1];
    v18 = vaddq_f64(v13[2], vaddq_f64(v17, a8));
    result = vaddq_f64(v13[1], vaddq_f64(v14, v15));
    *v13 = vaddq_f64(*v13, v16);
    v13[1] = result;
    v13[2] = v18;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v20 = (int8x16_t)vmulq_f64(a3[11], a3[11]);
    a8 = vmulq_f64(a3[10], a3[10]);
    v21 = (int64x2_t)vmulq_f64(a3[7], a3[7]);
    v22 = (int64x2_t)vmulq_f64(a3[6], a3[6]);
    v23 = (int64x2_t)vmulq_f64(a3[9], a3[9]);
    v24 = (int64x2_t)vmulq_f64(a3[8], a3[8]);
    v25 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 12)));
    v26 = (float64x2_t)vzip1q_s64(v24, v23);
    v27 = (float64x2_t)vzip2q_s64(v24, v23);
    v28 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v21), (float64x2_t)vzip2q_s64(v22, v21));
    v29 = (float64x2_t)vextq_s8((int8x16_t)a8, v20, 8uLL);
    *(_QWORD *)&a8.f64[1] = v20.i64[1];
    v30 = vaddq_f64(v25[2], vaddq_f64(v29, a8));
    result = vaddq_f64(v25[1], vaddq_f64(v26, v27));
    *v25 = vaddq_f64(*v25, v28);
    v25[1] = result;
    v25[2] = v30;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v31 = (int8x16_t)vmulq_f64(a3[17], a3[17]);
    a8 = vmulq_f64(a3[16], a3[16]);
    v32 = (int64x2_t)vmulq_f64(a3[13], a3[13]);
    v33 = (int64x2_t)vmulq_f64(a3[12], a3[12]);
    v34 = (int64x2_t)vmulq_f64(a3[15], a3[15]);
    v35 = (int64x2_t)vmulq_f64(a3[14], a3[14]);
    v36 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 64) + 6 * *(_DWORD *)(a2 + 20)));
    v37 = (float64x2_t)vzip1q_s64(v35, v34);
    v38 = (float64x2_t)vzip2q_s64(v35, v34);
    v39 = vaddq_f64((float64x2_t)vzip1q_s64(v33, v32), (float64x2_t)vzip2q_s64(v33, v32));
    v40 = (float64x2_t)vextq_s8((int8x16_t)a8, v31, 8uLL);
    *(_QWORD *)&a8.f64[1] = v31.i64[1];
    v41 = vaddq_f64(v36[2], vaddq_f64(v40, a8));
    result = vaddq_f64(v36[1], vaddq_f64(v37, v38));
    *v36 = vaddq_f64(*v36, v39);
    v36[1] = result;
    v36[2] = v41;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    f64 = a3[18].f64;
    v52 = vld2q_f64(f64);
    v43 = a3[20].f64;
    v54 = vld2q_f64(v43);
    v44 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 92) + 4 * *(_DWORD *)(a2 + 28)));
    a8 = *v44;
    v52.val[0] = vaddq_f64(vmulq_f64(v52.val[0], v52.val[0]), vmulq_f64(v52.val[1], v52.val[1]));
    v52.val[1] = vaddq_f64(v44[1], vaddq_f64(vmulq_f64(v54.val[0], v54.val[0]), vmulq_f64(v54.val[1], v54.val[1])));
    result = vaddq_f64(*v44, v52.val[0]);
    *v44 = result;
    v44[1] = v52.val[1];
  }
  if (*(_BYTE *)(a2 + 32))
  {
    v45 = a3[22].f64;
    v53 = vld2q_f64(v45);
    v46 = a3[24].f64;
    v55 = vld2q_f64(v46);
    v47 = (float64x2_t *)(**(_QWORD **)a1
                        + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 96) + 4 * *(_DWORD *)(a2 + 36)));
    a8 = *v47;
    v53.val[0] = vaddq_f64(vmulq_f64(v53.val[0], v53.val[0]), vmulq_f64(v53.val[1], v53.val[1]));
    v53.val[1] = vaddq_f64(v47[1], vaddq_f64(vmulq_f64(v55.val[0], v55.val[0]), vmulq_f64(v55.val[1], v55.val[1])));
    result = vaddq_f64(*v47, v53.val[0]);
    *v47 = result;
    v47[1] = v53.val[1];
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v48 = vmulq_f64(a3[27], a3[27]);
    v49 = vmulq_f64(a3[26], a3[26]);
    v50 = **(_QWORD **)a1 + 8 * (*(_DWORD *)(*(_QWORD *)a1 + 100) + 3 * *(_DWORD *)(a2 + 44));
    a8.f64[0] = *(float64_t *)(v50 + 16);
    v51 = (float64x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v48, 8uLL);
    v49.f64[1] = v48.f64[1];
    v48.f64[0] = vaddvq_f64(vmulq_f64(a3[28], a3[28]));
    result = vaddq_f64(*(float64x2_t *)v50, vaddq_f64(v51, v49));
    *(float64x2_t *)v50 = result;
    *(_QWORD *)(v50 + 16) = *(_OWORD *)&vaddq_f64(a8, v48);
  }
  return result;
}

int64x2_t *sub_20FB27900(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int **a4, unsigned __int8 *a5)
{
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int64x2_t v29;
  __int128 v30;
  int64x2_t v31;
  int64x2_t v32;
  __int128 v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  int v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  int64x2_t v82;
  __int128 v83;
  int64x2_t v84;
  int64x2_t v85;
  __int128 v86;
  int64x2_t v87;
  int64x2_t v88;
  __int128 v89;
  int64x2_t v90;
  int64x2_t v91;
  uint64_t v92;
  __int128 v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t *v136;
  int v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  int64x2_t v149;
  __int128 v150;
  int64x2_t v151;
  int64x2_t v152;
  __int128 v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t *v158;
  _OWORD *v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int *v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t *v189;
  int v190;
  unsigned int v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  int64x2_t v202;
  __int128 v203;
  int64x2_t v204;
  int64x2_t v205;
  __int128 v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t *v211;
  _OWORD *v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int *v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t *v242;
  int v243;
  unsigned int v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int8x16_t v254;
  unint64_t v255;
  int64x2_t v256;
  __int128 v257;
  uint64_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t *v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  int8x16_t *v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int *v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t *v278;
  int v279;
  unsigned int v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  unsigned int v286;
  int8x16_t *v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  __int128 v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int *v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t *v305;
  int v306;
  unsigned int v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int8x16_t v317;
  unint64_t v318;
  int64x2_t v319;
  __int128 v320;
  uint64_t v321;
  int64x2_t v322;
  int64x2_t v323;
  int64x2_t *v324;
  uint64_t v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  int8x16_t *v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int *v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t *v341;
  int v342;
  unsigned int v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int v348;
  unsigned int v349;
  uint64_t v350;
  uint64_t v351;
  int64x2_t *v352;
  int64x2_t v353;
  int64x2_t v354;
  int64x2_t v355;
  int64x2_t v356;
  int64x2_t v357;
  int64x2_t v358;
  int64x2_t v359;
  int64x2_t *v360;
  int64x2_t *v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  __int128 v368;
  uint64_t v369;
  __int128 v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int *v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t *v385;
  int v386;
  unsigned int v387;
  uint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  int64x2_t *v396;
  int64x2_t v397;
  int64x2_t v398;
  int64x2_t v399;
  int64x2_t v400;
  int64x2_t v401;
  int64x2_t v402;
  int64x2_t v403;
  int64x2_t *v404;
  int64x2_t *v405;
  uint64_t v406;
  uint64_t v407;
  __int128 v408;
  uint64_t v409;
  __int128 v410;
  uint64_t v411;
  __int128 v412;
  uint64_t v413;
  __int128 v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int *v426;
  uint64_t v427;
  unsigned int v428;
  uint64_t *v429;
  int v430;
  unsigned int v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int8x16_t v441;
  unint64_t v442;
  int64x2_t v443;
  __int128 v444;
  uint64_t v445;
  int64x2_t v446;
  int64x2_t v447;
  int64x2_t *v448;
  uint64_t v449;
  __int128 v450;
  __int128 v451;
  uint64_t v452;
  uint64_t v453;
  int8x16_t *v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int *v462;
  uint64_t v463;
  unsigned int v464;
  uint64_t *v465;
  int v466;
  unsigned int v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unsigned int v472;
  unsigned int v473;
  uint64_t v474;
  uint64_t v475;
  int64x2_t *v476;
  int64x2_t v477;
  int64x2_t v478;
  int64x2_t v479;
  int64x2_t v480;
  int64x2_t v481;
  int64x2_t v482;
  int64x2_t v483;
  int64x2_t v484;
  int64x2_t v485;
  int64x2_t v486;
  int64x2_t v487;
  int64x2_t v488;
  int64x2_t v489;
  int64x2_t v490;
  int64x2_t v491;
  int64x2_t *v492;
  int64x2_t *v493;
  int64x2_t *v494;
  _OWORD *v495;
  uint64_t v496;
  _OWORD *v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  _OWORD *v509;
  _OWORD *v510;
  _OWORD *v511;
  _OWORD *v512;
  _OWORD *v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unsigned int v519;
  unsigned int v520;
  unsigned int *v521;
  uint64_t v522;
  unsigned int v523;
  uint64_t *v524;
  int v525;
  unsigned int v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unsigned int v531;
  unsigned int v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int64x2_t v536;
  int64x2_t v537;
  int64x2_t v538;
  int64x2_t v539;
  int64x2_t v540;
  int64x2_t v541;
  int64x2_t v542;
  int64x2_t v543;
  int64x2_t v544;
  __int128 v545;
  __int128 v546;
  int64x2_t v547;
  int64x2_t v548;
  int64x2_t v549;
  int64x2_t v550;
  __int128 v551;
  int64x2_t v552;
  int64x2_t v553;
  int64x2_t v554;
  __int128 v555;
  uint64_t v556;
  int64x2_t *v557;
  uint64_t v558;
  _OWORD *v559;
  uint64_t v560;
  _OWORD *v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  _OWORD *v579;
  _OWORD *v580;
  _OWORD *v581;
  _OWORD *v582;
  _OWORD *v583;
  _OWORD *v584;
  _OWORD *v585;
  _OWORD *v586;
  uint64_t *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int *v594;
  uint64_t v595;
  unsigned int v596;
  uint64_t *v597;
  int v598;
  unsigned int v599;
  uint64_t *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unsigned int v604;
  unsigned int v605;
  uint64_t v606;
  uint64_t v607;
  int64x2_t *v608;
  int64x2_t v609;
  int64x2_t v610;
  int64x2_t v611;
  int64x2_t v612;
  int64x2_t v613;
  int64x2_t v614;
  int64x2_t v615;
  int64x2_t v616;
  int64x2_t v617;
  int64x2_t v618;
  int64x2_t v619;
  int64x2_t v620;
  int64x2_t v621;
  int64x2_t v622;
  int64x2_t v623;
  int64x2_t *v624;
  int64x2_t *v625;
  int64x2_t *v626;
  _OWORD *v627;
  uint64_t v628;
  _OWORD *v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  _OWORD *v641;
  _OWORD *v642;
  _OWORD *v643;
  _OWORD *v644;
  _OWORD *v645;
  uint64_t *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unsigned int v651;
  unsigned int v652;
  unsigned int *v653;
  uint64_t v654;
  unsigned int v655;
  uint64_t *v656;
  int v657;
  unsigned int v658;
  uint64_t *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unsigned int v663;
  unsigned int v664;
  uint64_t v665;
  uint64_t v666;
  int64x2_t *v667;
  int64x2_t v668;
  int64x2_t v669;
  int64x2_t v670;
  int64x2_t v671;
  int64x2_t v672;
  int64x2_t v673;
  int64x2_t v674;
  int64x2_t v675;
  int64x2_t v676;
  int64x2_t v677;
  int64x2_t v678;
  int64x2_t v679;
  int64x2_t v680;
  int64x2_t v681;
  int64x2_t v682;
  int64x2_t *v683;
  int64x2_t *v684;
  int64x2_t *v685;
  _OWORD *v686;
  uint64_t v687;
  _OWORD *v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  _OWORD *v700;
  _OWORD *v701;
  _OWORD *v702;
  _OWORD *v703;
  _OWORD *v704;
  uint64_t *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v710;
  unsigned int v711;
  unsigned int *v712;
  uint64_t v713;
  unsigned int v714;
  uint64_t *v715;
  int v716;
  unsigned int v717;
  uint64_t *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  unsigned int v722;
  unsigned int v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  int64x2_t v727;
  int64x2_t v728;
  int64x2_t v729;
  __int128 v730;
  __int128 v731;
  int64x2_t v732;
  int64x2_t v733;
  int64x2_t *v734;
  int64x2_t *v735;
  int64x2_t *v736;
  _OWORD *v737;
  uint64_t v738;
  _OWORD *v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  _OWORD *v745;
  _OWORD *v746;
  uint64_t *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  unsigned int v752;
  unsigned int v753;
  unsigned int *v754;
  uint64_t v755;
  unsigned int v756;
  uint64_t *v757;
  int v758;
  unsigned int v759;
  uint64_t *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  unsigned int v764;
  unsigned int v765;
  uint64_t v766;
  uint64_t v767;
  _QWORD *v768;
  int8x16_t v769;
  unint64_t v770;
  _OWORD *v771;
  _OWORD *v772;
  __int128 v773;
  uint64_t *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unsigned int v779;
  unsigned int v780;
  unsigned int *v781;
  uint64_t v782;
  unsigned int v783;
  uint64_t *v784;
  int v785;
  unsigned int v786;
  uint64_t *v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unsigned int v791;
  unsigned int v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  int64x2_t v796;
  int64x2_t v797;
  int64x2_t v798;
  __int128 v799;
  __int128 v800;
  int64x2_t v801;
  int64x2_t v802;
  int64x2_t *v803;
  int64x2_t *v804;
  int64x2_t *v805;
  _OWORD *v806;
  uint64_t v807;
  _OWORD *v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  _OWORD *v814;
  _OWORD *v815;
  uint64_t *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  unsigned int v821;
  unsigned int v822;
  unsigned int *v823;
  uint64_t v824;
  unsigned int v825;
  uint64_t *v826;
  int v827;
  unsigned int v828;
  uint64_t *v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  unsigned int v833;
  unsigned int v834;
  uint64_t v835;
  uint64_t v836;
  int64x2_t *v837;
  int64x2_t v838;
  int64x2_t v839;
  int64x2_t v840;
  int64x2_t v841;
  int64x2_t v842;
  int64x2_t v843;
  int64x2_t v844;
  int64x2_t v845;
  int64x2_t v846;
  int64x2_t v847;
  int64x2_t v848;
  int64x2_t v849;
  int64x2_t *v850;
  int64x2_t *v851;
  int64x2_t v852;
  int64x2_t v853;
  int64x2_t v854;
  __int8 *v855;
  int64x2_t *v856;
  int64x2_t *v857;
  uint64_t *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  unsigned int v863;
  unsigned int v864;
  unsigned int *v865;
  uint64_t v866;
  unsigned int v867;
  uint64_t *v868;
  int v869;
  unsigned int v870;
  uint64_t *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unsigned int v875;
  unsigned int v876;
  uint64_t v877;
  uint64_t v878;
  int64x2_t *v879;
  int64x2_t v880;
  int64x2_t v881;
  int64x2_t v882;
  int64x2_t v883;
  int64x2_t v884;
  int64x2_t v885;
  int64x2_t v886;
  int64x2_t v887;
  int64x2_t v888;
  int64x2_t v889;
  int64x2_t v890;
  int64x2_t v891;
  int64x2_t *v892;
  int64x2_t *v893;
  int64x2_t v894;
  int64x2_t v895;
  int64x2_t v896;
  __int8 *v897;
  int64x2_t *v898;
  int64x2_t *v899;
  uint64_t *v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  unsigned int v905;
  unsigned int v906;
  unsigned int *v907;
  uint64_t v908;
  unsigned int v909;
  uint64_t *v910;
  int v911;
  unsigned int v912;
  uint64_t *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  unsigned int v917;
  unsigned int v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  int64x2_t v922;
  int64x2_t v923;
  int64x2_t v924;
  __int128 v925;
  __int128 v926;
  int64x2_t v927;
  int64x2_t v928;
  int64x2_t *v929;
  int64x2_t *v930;
  int64x2_t *v931;
  _OWORD *v932;
  uint64_t v933;
  _OWORD *v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  _OWORD *v940;
  _OWORD *v941;
  uint64_t *v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  unsigned int v947;
  unsigned int v948;
  unsigned int *v949;
  uint64_t v950;
  unsigned int v951;
  uint64_t *v952;
  int v953;
  unsigned int v954;
  uint64_t *v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  unsigned int v959;
  unsigned int v960;
  uint64_t v961;
  uint64_t v962;
  int64x2_t *v963;
  int64x2_t v964;
  int64x2_t v965;
  int64x2_t v966;
  int64x2_t v967;
  int64x2_t v968;
  int64x2_t v969;
  int64x2_t v970;
  int64x2_t v971;
  int64x2_t v972;
  int64x2_t v973;
  int64x2_t v974;
  int64x2_t v975;
  int64x2_t v976;
  int64x2_t v977;
  int64x2_t v978;
  int64x2_t *v979;
  int64x2_t *v980;
  int64x2_t *v981;
  _OWORD *v982;
  uint64_t v983;
  _OWORD *v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  __int128 v988;
  __int128 v989;
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  _OWORD *v996;
  _OWORD *v997;
  _OWORD *v998;
  _OWORD *v999;
  _OWORD *v1000;
  uint64_t *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  unsigned int v1006;
  unsigned int v1007;
  unsigned int *v1008;
  uint64_t v1009;
  unsigned int v1010;
  uint64_t *v1011;
  int v1012;
  unsigned int v1013;
  uint64_t *v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  unsigned int v1018;
  unsigned int v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  int64x2_t v1023;
  int64x2_t v1024;
  int64x2_t v1025;
  int64x2_t v1026;
  int64x2_t v1027;
  int64x2_t v1028;
  int64x2_t v1029;
  int64x2_t v1030;
  int64x2_t v1031;
  __int128 v1032;
  __int128 v1033;
  int64x2_t v1034;
  int64x2_t v1035;
  int64x2_t v1036;
  int64x2_t v1037;
  __int128 v1038;
  int64x2_t v1039;
  int64x2_t v1040;
  int64x2_t v1041;
  __int128 v1042;
  uint64_t v1043;
  int64x2_t *v1044;
  uint64_t v1045;
  _OWORD *v1046;
  uint64_t v1047;
  _OWORD *v1048;
  __int128 v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  __int128 v1056;
  __int128 v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  _OWORD *v1066;
  _OWORD *v1067;
  _OWORD *v1068;
  _OWORD *v1069;
  _OWORD *v1070;
  _OWORD *v1071;
  _OWORD *v1072;
  _OWORD *v1073;
  uint64_t *v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  unsigned int v1079;
  unsigned int v1080;
  unsigned int *v1081;
  uint64_t v1082;
  unsigned int v1083;
  uint64_t *v1084;
  int v1085;
  unsigned int v1086;
  uint64_t *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  unsigned int v1091;
  unsigned int v1092;
  uint64_t v1093;
  uint64_t v1094;
  int64x2_t *v1095;
  int64x2_t v1096;
  int64x2_t v1097;
  int64x2_t v1098;
  int64x2_t v1099;
  int64x2_t v1100;
  int64x2_t v1101;
  int64x2_t v1102;
  int64x2_t v1103;
  int64x2_t v1104;
  int64x2_t v1105;
  int64x2_t v1106;
  int64x2_t v1107;
  int64x2_t v1108;
  int64x2_t v1109;
  int64x2_t v1110;
  int64x2_t *v1111;
  int64x2_t *v1112;
  int64x2_t *v1113;
  _OWORD *v1114;
  uint64_t v1115;
  _OWORD *v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  _OWORD *v1128;
  _OWORD *v1129;
  _OWORD *v1130;
  _OWORD *v1131;
  _OWORD *v1132;
  uint64_t *v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  unsigned int v1138;
  unsigned int v1139;
  unsigned int *v1140;
  uint64_t v1141;
  unsigned int v1142;
  uint64_t *v1143;
  int v1144;
  unsigned int v1145;
  uint64_t *v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  unsigned int v1150;
  unsigned int v1151;
  uint64_t v1152;
  uint64_t v1153;
  int64x2_t *v1154;
  int64x2_t v1155;
  int64x2_t v1156;
  int64x2_t v1157;
  int64x2_t v1158;
  int64x2_t v1159;
  int64x2_t v1160;
  int64x2_t v1161;
  int64x2_t v1162;
  int64x2_t v1163;
  int64x2_t v1164;
  int64x2_t v1165;
  int64x2_t v1166;
  int64x2_t v1167;
  int64x2_t v1168;
  int64x2_t v1169;
  int64x2_t *v1170;
  int64x2_t *v1171;
  int64x2_t *v1172;
  _OWORD *v1173;
  uint64_t v1174;
  _OWORD *v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  __int128 v1182;
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  _OWORD *v1187;
  _OWORD *v1188;
  _OWORD *v1189;
  _OWORD *v1190;
  _OWORD *v1191;
  uint64_t *v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  unsigned int v1197;
  unsigned int v1198;
  unsigned int *v1199;
  uint64_t v1200;
  unsigned int v1201;
  uint64_t *v1202;
  int v1203;
  unsigned int v1204;
  uint64_t *v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  unsigned int v1209;
  unsigned int v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  int64x2_t v1214;
  int64x2_t v1215;
  int64x2_t v1216;
  __int128 v1217;
  __int128 v1218;
  int64x2_t v1219;
  int64x2_t v1220;
  int64x2_t *v1221;
  int64x2_t *v1222;
  int64x2_t *v1223;
  _OWORD *v1224;
  uint64_t v1225;
  _OWORD *v1226;
  __int128 v1227;
  __int128 v1228;
  __int128 v1229;
  __int128 v1230;
  __int128 v1231;
  _OWORD *v1232;
  _OWORD *v1233;
  uint64_t *v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  unsigned int v1239;
  unsigned int v1240;
  unsigned int *v1241;
  uint64_t v1242;
  unsigned int v1243;
  uint64_t *v1244;
  int v1245;
  unsigned int v1246;
  uint64_t *v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  unsigned int v1251;
  unsigned int v1252;
  uint64_t v1253;
  uint64_t v1254;
  _QWORD *v1255;
  int8x16_t v1256;
  unint64_t v1257;
  _OWORD *v1258;
  _OWORD *v1259;
  __int128 v1260;
  uint64_t *v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  unsigned int v1266;
  unsigned int v1267;
  unsigned int *v1268;
  uint64_t v1269;
  unsigned int v1270;
  uint64_t *v1271;
  int v1272;
  unsigned int v1273;
  uint64_t *v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  unsigned int v1278;
  unsigned int v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  int64x2_t v1283;
  int64x2_t v1284;
  int64x2_t v1285;
  __int128 v1286;
  __int128 v1287;
  int64x2_t v1288;
  int64x2_t v1289;
  int64x2_t *v1290;
  int64x2_t *v1291;
  int64x2_t *v1292;
  _OWORD *v1293;
  uint64_t v1294;
  _OWORD *v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  _OWORD *v1301;
  _OWORD *v1302;
  uint64_t *v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  unsigned int v1308;
  unsigned int v1309;
  unsigned int *v1310;
  uint64_t v1311;
  unsigned int v1312;
  uint64_t *v1313;
  int v1314;
  unsigned int v1315;
  uint64_t *v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  unsigned int v1320;
  unsigned int v1321;
  uint64_t v1322;
  uint64_t v1323;
  int64x2_t *v1324;
  int64x2_t v1325;
  int64x2_t v1326;
  int64x2_t v1327;
  int64x2_t v1328;
  int64x2_t v1329;
  int64x2_t v1330;
  int64x2_t v1331;
  int64x2_t v1332;
  int64x2_t v1333;
  int64x2_t v1334;
  int64x2_t v1335;
  int64x2_t v1336;
  int64x2_t *v1337;
  int64x2_t *v1338;
  int64x2_t v1339;
  int64x2_t v1340;
  int64x2_t v1341;
  __int8 *v1342;
  int64x2_t *v1343;
  int64x2_t *v1344;
  uint64_t *v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  unsigned int v1350;
  unsigned int v1351;
  unsigned int *v1352;
  uint64_t v1353;
  unsigned int v1354;
  uint64_t *v1355;
  int v1356;
  unsigned int v1357;
  uint64_t *v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  unsigned int v1362;
  unsigned int v1363;
  uint64_t v1364;
  uint64_t v1365;
  int64x2_t *v1366;
  int64x2_t v1367;
  int64x2_t v1368;
  int64x2_t v1369;
  int64x2_t v1370;
  int64x2_t v1371;
  int64x2_t v1372;
  int64x2_t v1373;
  int64x2_t v1374;
  int64x2_t v1375;
  int64x2_t v1376;
  int64x2_t v1377;
  int64x2_t v1378;
  int64x2_t *v1379;
  int64x2_t *v1380;
  int64x2_t v1381;
  int64x2_t v1382;
  int64x2_t v1383;
  __int8 *v1384;
  int64x2_t *v1385;
  int64x2_t *v1386;
  uint64_t *v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  unsigned int v1392;
  unsigned int v1393;
  unsigned int *v1394;
  uint64_t v1395;
  unsigned int v1396;
  uint64_t *v1397;
  int v1398;
  unsigned int v1399;
  uint64_t *v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  unsigned int v1404;
  unsigned int v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  int64x2_t v1409;
  int64x2_t v1410;
  int64x2_t v1411;
  __int128 v1412;
  __int128 v1413;
  int64x2_t v1414;
  int64x2_t v1415;
  int64x2_t *v1416;
  int64x2_t *v1417;
  int64x2_t *v1418;
  _OWORD *v1419;
  uint64_t v1420;
  _OWORD *v1421;
  __int128 v1422;
  __int128 v1423;
  __int128 v1424;
  __int128 v1425;
  __int128 v1426;
  _OWORD *v1427;
  _OWORD *v1428;
  uint64_t *v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  unsigned int v1434;
  unsigned int v1435;
  unsigned int *v1436;
  uint64_t v1437;
  unsigned int v1438;
  uint64_t *v1439;
  int v1440;
  unsigned int v1441;
  uint64_t *v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  unsigned int v1446;
  unsigned int v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  __int128 v1451;
  int64x2_t v1452;
  __int128 v1453;
  int64x2_t v1454;
  int64x2_t v1455;
  __int128 v1456;
  int64x2_t v1457;
  int64x2_t v1458;
  int64x2_t v1459;
  int64x2_t v1460;
  int64x2_t *v1461;
  _OWORD *v1462;
  uint64_t v1463;
  uint64_t v1464;
  __int128 v1465;
  uint64_t v1466;
  __int128 v1467;
  uint64_t v1468;
  __int128 v1469;
  uint64_t v1470;
  __int128 v1471;
  uint64_t v1472;
  __int128 v1473;
  uint64_t v1474;
  __int128 v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t *v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  unsigned int v1487;
  unsigned int v1488;
  unsigned int *v1489;
  uint64_t v1490;
  unsigned int v1491;
  uint64_t *v1492;
  int v1493;
  unsigned int v1494;
  uint64_t *v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  unsigned int v1499;
  unsigned int v1500;
  uint64_t v1501;
  uint64_t v1502;
  __int128 v1503;
  uint64_t v1504;
  int64x2_t v1505;
  __int128 v1506;
  int64x2_t v1507;
  int64x2_t v1508;
  __int128 v1509;
  int64x2_t v1510;
  int64x2_t v1511;
  __int128 v1512;
  int64x2_t v1513;
  int64x2_t v1514;
  uint64_t v1515;
  __int128 v1516;
  int64x2_t v1517;
  int64x2_t v1518;
  int64x2_t *v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  __int128 v1523;
  uint64_t v1524;
  __int128 v1525;
  uint64_t v1526;
  __int128 v1527;
  uint64_t v1528;
  __int128 v1529;
  uint64_t v1530;
  __int128 v1531;
  uint64_t v1532;
  __int128 v1533;
  uint64_t v1534;
  __int128 v1535;
  uint64_t v1536;
  __int128 v1537;
  uint64_t v1538;
  __int128 v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t *v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  unsigned int v1554;
  unsigned int v1555;
  unsigned int *v1556;
  uint64_t v1557;
  unsigned int v1558;
  uint64_t *v1559;
  int v1560;
  unsigned int v1561;
  uint64_t *v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  unsigned int v1566;
  unsigned int v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  __int128 v1571;
  int64x2_t v1572;
  __int128 v1573;
  int64x2_t v1574;
  int64x2_t v1575;
  __int128 v1576;
  int64x2_t v1577;
  int64x2_t v1578;
  int64x2_t v1579;
  int64x2_t v1580;
  int64x2_t *v1581;
  _OWORD *v1582;
  uint64_t v1583;
  uint64_t v1584;
  __int128 v1585;
  uint64_t v1586;
  __int128 v1587;
  uint64_t v1588;
  __int128 v1589;
  uint64_t v1590;
  __int128 v1591;
  uint64_t v1592;
  __int128 v1593;
  uint64_t v1594;
  __int128 v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t *v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  unsigned int v1607;
  unsigned int v1608;
  unsigned int *v1609;
  uint64_t v1610;
  unsigned int v1611;
  uint64_t *v1612;
  int v1613;
  unsigned int v1614;
  uint64_t *v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  unsigned int v1619;
  unsigned int v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  __int128 v1624;
  int64x2_t v1625;
  __int128 v1626;
  int64x2_t v1627;
  int64x2_t v1628;
  __int128 v1629;
  int64x2_t v1630;
  int64x2_t v1631;
  int64x2_t v1632;
  int64x2_t v1633;
  int64x2_t *v1634;
  _OWORD *v1635;
  uint64_t v1636;
  uint64_t v1637;
  __int128 v1638;
  uint64_t v1639;
  __int128 v1640;
  uint64_t v1641;
  __int128 v1642;
  uint64_t v1643;
  __int128 v1644;
  uint64_t v1645;
  __int128 v1646;
  uint64_t v1647;
  __int128 v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t *v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  unsigned int v1660;
  unsigned int v1661;
  unsigned int *v1662;
  uint64_t v1663;
  unsigned int v1664;
  uint64_t *v1665;
  int v1666;
  unsigned int v1667;
  uint64_t *v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  unsigned int v1672;
  unsigned int v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  int8x16_t v1677;
  unint64_t v1678;
  int64x2_t v1679;
  __int128 v1680;
  uint64_t v1681;
  int64x2_t v1682;
  int64x2_t v1683;
  int64x2_t *v1684;
  uint64_t v1685;
  __int128 v1686;
  __int128 v1687;
  uint64_t v1688;
  uint64_t v1689;
  int8x16_t *v1690;
  uint64_t *v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  unsigned int v1696;
  unsigned int v1697;
  unsigned int *v1698;
  uint64_t v1699;
  unsigned int v1700;
  uint64_t *v1701;
  int v1702;
  unsigned int v1703;
  uint64_t *v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  unsigned int v1708;
  unsigned int v1709;
  int8x16_t *v1710;
  uint64_t v1711;
  _QWORD *v1712;
  uint64_t v1713;
  unint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  __int128 v1717;
  uint64_t *v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  unsigned int v1723;
  unsigned int v1724;
  unsigned int *v1725;
  uint64_t v1726;
  unsigned int v1727;
  uint64_t *v1728;
  int v1729;
  unsigned int v1730;
  uint64_t *v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  unsigned int v1735;
  unsigned int v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  int8x16_t v1740;
  unint64_t v1741;
  int64x2_t v1742;
  __int128 v1743;
  uint64_t v1744;
  int64x2_t v1745;
  int64x2_t v1746;
  int64x2_t *v1747;
  uint64_t v1748;
  __int128 v1749;
  __int128 v1750;
  uint64_t v1751;
  uint64_t v1752;
  int8x16_t *v1753;
  uint64_t *v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  unsigned int v1759;
  unsigned int v1760;
  unsigned int *v1761;
  uint64_t v1762;
  unsigned int v1763;
  uint64_t *v1764;
  int v1765;
  unsigned int v1766;
  uint64_t *v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  unsigned int v1771;
  unsigned int v1772;
  uint64_t v1773;
  uint64_t v1774;
  int64x2_t *v1775;
  int64x2_t v1776;
  int64x2_t v1777;
  int64x2_t v1778;
  int64x2_t v1779;
  int64x2_t v1780;
  int64x2_t v1781;
  int64x2_t v1782;
  int64x2_t *v1783;
  int64x2_t *v1784;
  uint64_t v1785;
  uint64_t v1786;
  __int128 v1787;
  uint64_t v1788;
  __int128 v1789;
  uint64_t v1790;
  __int128 v1791;
  uint64_t v1792;
  __int128 v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t *v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  unsigned int v1803;
  unsigned int v1804;
  unsigned int *v1805;
  uint64_t v1806;
  unsigned int v1807;
  uint64_t *v1808;
  int v1809;
  unsigned int v1810;
  uint64_t *v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  unsigned int v1815;
  unsigned int v1816;
  uint64_t v1817;
  uint64_t v1818;
  int64x2_t *v1819;
  int64x2_t v1820;
  int64x2_t v1821;
  int64x2_t v1822;
  int64x2_t v1823;
  int64x2_t v1824;
  int64x2_t v1825;
  int64x2_t v1826;
  int64x2_t *v1827;
  int64x2_t *v1828;
  uint64_t v1829;
  uint64_t v1830;
  __int128 v1831;
  uint64_t v1832;
  __int128 v1833;
  uint64_t v1834;
  __int128 v1835;
  uint64_t v1836;
  __int128 v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t *v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  unsigned int v1847;
  unsigned int v1848;
  unsigned int *v1849;
  uint64_t v1850;
  unsigned int v1851;
  uint64_t *v1852;
  int v1853;
  unsigned int v1854;
  uint64_t *v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  unsigned int v1859;
  unsigned int v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  int8x16_t v1864;
  unint64_t v1865;
  int64x2_t v1866;
  __int128 v1867;
  uint64_t v1868;
  int64x2_t v1869;
  int64x2_t v1870;
  int64x2_t *v1871;
  uint64_t v1872;
  __int128 v1873;
  __int128 v1874;
  uint64_t v1875;
  uint64_t v1876;
  int8x16_t *v1877;
  uint64_t *v1878;
  uint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t *v1883;
  unsigned int v1884;
  unsigned int v1885;
  unsigned int *v1886;
  uint64_t v1887;
  unsigned int v1888;
  uint64_t *v1889;
  int v1890;
  unsigned int v1891;
  uint64_t *v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  unsigned int v1896;
  unsigned int v1897;
  __int128 *v1898;
  _OWORD *v1899;
  __int128 v1900;
  __int128 v1901;
  _QWORD *v1902;
  uint64_t v1903;
  _QWORD *v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t *v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  unsigned int v1915;
  unsigned int v1916;
  unsigned int *v1917;
  uint64_t v1918;
  unsigned int v1919;
  uint64_t *v1920;
  int v1921;
  unsigned int v1922;
  uint64_t *v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  unsigned int v1927;
  unsigned int v1928;
  uint64_t v1929;
  uint64_t v1930;
  __int128 v1931;
  __int128 v1932;
  __int128 v1933;
  __int128 v1934;
  _QWORD *v1935;
  uint64_t v1936;
  _QWORD *v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t *v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  uint64_t v1950;
  unsigned int v1951;
  unsigned int v1952;
  unsigned int *v1953;
  uint64_t v1954;
  unsigned int v1955;
  uint64_t *v1956;
  int v1957;
  unsigned int v1958;
  uint64_t *v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  unsigned int v1963;
  unsigned int v1964;
  __int128 *v1965;
  _OWORD *v1966;
  __int128 v1967;
  __int128 v1968;
  _QWORD *v1969;
  uint64_t v1970;
  _QWORD *v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t *v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  unsigned int v1982;
  unsigned int v1983;
  unsigned int *v1984;
  uint64_t v1985;
  unsigned int v1986;
  uint64_t *v1987;
  int v1988;
  unsigned int v1989;
  uint64_t *v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  unsigned int v1994;
  unsigned int v1995;
  __int128 *v1996;
  _OWORD *v1997;
  __int128 v1998;
  __int128 v1999;
  _QWORD *v2000;
  uint64_t v2001;
  _QWORD *v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t *v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  unsigned int v2013;
  unsigned int v2014;
  unsigned int *v2015;
  uint64_t v2016;
  unsigned int v2017;
  uint64_t *v2018;
  int v2019;
  unsigned int v2020;
  uint64_t *v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  unsigned int v2025;
  unsigned int v2026;
  uint64_t v2027;
  uint64_t v2028;
  __int128 v2029;
  _QWORD *v2030;
  uint64_t v2031;
  _QWORD *v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t *v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  int v2040;
  unsigned int v2041;
  unsigned int v2042;
  unsigned int *v2043;
  uint64_t v2044;
  unsigned int v2045;
  uint64_t *v2046;
  int v2047;
  unsigned int v2048;
  uint64_t *v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  unsigned int v2053;
  unsigned int v2054;
  uint64_t v2055;
  uint64_t v2056;
  __int128 v2057;
  _QWORD *v2058;
  uint64_t v2059;
  _QWORD *v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t *v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  unsigned int v2068;
  unsigned int v2069;
  unsigned int *v2070;
  uint64_t v2071;
  unsigned int v2072;
  uint64_t *v2073;
  int v2074;
  unsigned int v2075;
  uint64_t *v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  unsigned int v2080;
  unsigned int v2081;
  _OWORD *v2082;
  _OWORD *v2083;
  __int128 v2084;
  _QWORD *v2085;
  uint64_t v2086;
  _QWORD *v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  uint64_t *v2091;
  uint64_t v2092;
  uint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  unsigned int v2096;
  unsigned int v2097;
  unsigned int *v2098;
  uint64_t v2099;
  unsigned int v2100;
  uint64_t *v2101;
  int v2102;
  unsigned int v2103;
  uint64_t *v2104;
  uint64_t v2105;
  uint64_t v2106;
  uint64_t v2107;
  unsigned int v2108;
  unsigned int v2109;
  _OWORD *v2110;
  _OWORD *v2111;
  __int128 v2112;
  _QWORD *v2113;
  uint64_t v2114;
  _QWORD *v2115;
  uint64_t v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t *v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  unsigned int v2124;
  unsigned int v2125;
  unsigned int *v2126;
  uint64_t v2127;
  unsigned int v2128;
  uint64_t *v2129;
  int v2130;
  unsigned int v2131;
  uint64_t *v2132;
  uint64_t v2133;
  uint64_t v2134;
  uint64_t v2135;
  unsigned int v2136;
  unsigned int v2137;
  uint64_t v2138;
  uint64_t v2139;
  __int128 v2140;
  _QWORD *v2141;
  uint64_t v2142;
  _QWORD *v2143;
  uint64_t v2144;
  uint64_t v2145;
  uint64_t *v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  uint64_t v2150;
  unsigned int v2151;
  unsigned int v2152;
  unsigned int *v2153;
  uint64_t v2154;
  unsigned int v2155;
  uint64_t *v2156;
  int v2157;
  unsigned int v2158;
  uint64_t *v2159;
  uint64_t v2160;
  uint64_t v2161;
  uint64_t v2162;
  unsigned int v2163;
  unsigned int v2164;
  uint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  __int128 v2168;
  int64x2_t v2169;
  __int128 v2170;
  int64x2_t v2171;
  int64x2_t v2172;
  __int128 v2173;
  int64x2_t v2174;
  int64x2_t v2175;
  int64x2_t v2176;
  int64x2_t v2177;
  int64x2_t *v2178;
  _OWORD *v2179;
  uint64_t v2180;
  uint64_t v2181;
  __int128 v2182;
  uint64_t v2183;
  __int128 v2184;
  uint64_t v2185;
  __int128 v2186;
  uint64_t v2187;
  __int128 v2188;
  uint64_t v2189;
  __int128 v2190;
  uint64_t v2191;
  __int128 v2192;
  uint64_t v2193;
  uint64_t v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t v2198;
  uint64_t *v2199;
  uint64_t v2200;
  uint64_t v2201;
  uint64_t v2202;
  uint64_t v2203;
  unsigned int v2204;
  unsigned int v2205;
  unsigned int *v2206;
  uint64_t v2207;
  unsigned int v2208;
  uint64_t *v2209;
  int v2210;
  unsigned int v2211;
  uint64_t *v2212;
  uint64_t v2213;
  uint64_t v2214;
  uint64_t v2215;
  unsigned int v2216;
  unsigned int v2217;
  uint64_t v2218;
  uint64_t v2219;
  __int128 v2220;
  uint64_t v2221;
  int64x2_t v2222;
  __int128 v2223;
  int64x2_t v2224;
  int64x2_t v2225;
  __int128 v2226;
  int64x2_t v2227;
  int64x2_t v2228;
  __int128 v2229;
  int64x2_t v2230;
  int64x2_t v2231;
  uint64_t v2232;
  __int128 v2233;
  int64x2_t v2234;
  int64x2_t v2235;
  int64x2_t *v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  __int128 v2240;
  uint64_t v2241;
  __int128 v2242;
  uint64_t v2243;
  __int128 v2244;
  uint64_t v2245;
  __int128 v2246;
  uint64_t v2247;
  __int128 v2248;
  uint64_t v2249;
  __int128 v2250;
  uint64_t v2251;
  __int128 v2252;
  uint64_t v2253;
  __int128 v2254;
  uint64_t v2255;
  __int128 v2256;
  uint64_t v2257;
  uint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t v2265;
  uint64_t *v2266;
  uint64_t v2267;
  uint64_t v2268;
  uint64_t v2269;
  uint64_t v2270;
  unsigned int v2271;
  unsigned int v2272;
  unsigned int *v2273;
  uint64_t v2274;
  unsigned int v2275;
  uint64_t *v2276;
  int v2277;
  unsigned int v2278;
  uint64_t *v2279;
  uint64_t v2280;
  uint64_t v2281;
  uint64_t v2282;
  unsigned int v2283;
  unsigned int v2284;
  uint64_t v2285;
  uint64_t v2286;
  uint64_t v2287;
  __int128 v2288;
  int64x2_t v2289;
  __int128 v2290;
  int64x2_t v2291;
  int64x2_t v2292;
  __int128 v2293;
  int64x2_t v2294;
  int64x2_t v2295;
  int64x2_t v2296;
  int64x2_t v2297;
  int64x2_t *v2298;
  _OWORD *v2299;
  uint64_t v2300;
  uint64_t v2301;
  __int128 v2302;
  uint64_t v2303;
  __int128 v2304;
  uint64_t v2305;
  __int128 v2306;
  uint64_t v2307;
  __int128 v2308;
  uint64_t v2309;
  __int128 v2310;
  uint64_t v2311;
  __int128 v2312;
  uint64_t v2313;
  uint64_t v2314;
  uint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  uint64_t *v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  unsigned int v2324;
  unsigned int v2325;
  unsigned int *v2326;
  uint64_t v2327;
  unsigned int v2328;
  uint64_t *v2329;
  int v2330;
  unsigned int v2331;
  uint64_t *v2332;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  unsigned int v2336;
  unsigned int v2337;
  uint64_t v2338;
  uint64_t v2339;
  uint64_t v2340;
  __int128 v2341;
  int64x2_t v2342;
  __int128 v2343;
  int64x2_t v2344;
  int64x2_t v2345;
  __int128 v2346;
  int64x2_t v2347;
  int64x2_t v2348;
  int64x2_t v2349;
  int64x2_t v2350;
  int64x2_t *v2351;
  _OWORD *v2352;
  uint64_t v2353;
  uint64_t v2354;
  __int128 v2355;
  uint64_t v2356;
  __int128 v2357;
  uint64_t v2358;
  __int128 v2359;
  uint64_t v2360;
  __int128 v2361;
  uint64_t v2362;
  __int128 v2363;
  uint64_t v2364;
  __int128 v2365;
  uint64_t v2366;
  uint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t *v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  uint64_t v2376;
  unsigned int v2377;
  unsigned int v2378;
  unsigned int *v2379;
  uint64_t v2380;
  unsigned int v2381;
  uint64_t *v2382;
  int v2383;
  unsigned int v2384;
  uint64_t *v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  unsigned int v2389;
  unsigned int v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  int8x16_t v2394;
  unint64_t v2395;
  int64x2_t v2396;
  __int128 v2397;
  uint64_t v2398;
  int64x2_t v2399;
  int64x2_t v2400;
  int64x2_t *v2401;
  uint64_t v2402;
  __int128 v2403;
  __int128 v2404;
  uint64_t v2405;
  uint64_t v2406;
  int8x16_t *v2407;
  uint64_t *v2408;
  uint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  unsigned int v2413;
  unsigned int v2414;
  unsigned int *v2415;
  uint64_t v2416;
  unsigned int v2417;
  uint64_t *v2418;
  int v2419;
  unsigned int v2420;
  uint64_t *v2421;
  uint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  unsigned int v2425;
  unsigned int v2426;
  int8x16_t *v2427;
  uint64_t v2428;
  _QWORD *v2429;
  uint64_t v2430;
  unint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  __int128 v2434;
  uint64_t *v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  unsigned int v2440;
  unsigned int v2441;
  unsigned int *v2442;
  uint64_t v2443;
  unsigned int v2444;
  uint64_t *v2445;
  int v2446;
  unsigned int v2447;
  uint64_t *v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  unsigned int v2452;
  unsigned int v2453;
  uint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  int8x16_t v2457;
  unint64_t v2458;
  int64x2_t v2459;
  __int128 v2460;
  uint64_t v2461;
  int64x2_t v2462;
  int64x2_t v2463;
  int64x2_t *v2464;
  uint64_t v2465;
  __int128 v2466;
  __int128 v2467;
  uint64_t v2468;
  uint64_t v2469;
  int8x16_t *v2470;
  uint64_t *v2471;
  uint64_t v2472;
  uint64_t v2473;
  uint64_t v2474;
  uint64_t v2475;
  unsigned int v2476;
  unsigned int v2477;
  unsigned int *v2478;
  uint64_t v2479;
  unsigned int v2480;
  uint64_t *v2481;
  int v2482;
  unsigned int v2483;
  uint64_t *v2484;
  uint64_t v2485;
  uint64_t v2486;
  uint64_t v2487;
  unsigned int v2488;
  unsigned int v2489;
  uint64_t v2490;
  uint64_t v2491;
  int64x2_t *v2492;
  int64x2_t v2493;
  int64x2_t v2494;
  int64x2_t v2495;
  int64x2_t v2496;
  int64x2_t v2497;
  int64x2_t v2498;
  int64x2_t v2499;
  int64x2_t *v2500;
  int64x2_t *v2501;
  uint64_t v2502;
  uint64_t v2503;
  __int128 v2504;
  uint64_t v2505;
  __int128 v2506;
  uint64_t v2507;
  __int128 v2508;
  uint64_t v2509;
  __int128 v2510;
  uint64_t v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  uint64_t *v2515;
  uint64_t v2516;
  uint64_t v2517;
  uint64_t v2518;
  uint64_t v2519;
  unsigned int v2520;
  unsigned int v2521;
  unsigned int *v2522;
  uint64_t v2523;
  unsigned int v2524;
  uint64_t *v2525;
  int v2526;
  unsigned int v2527;
  uint64_t *v2528;
  uint64_t v2529;
  uint64_t v2530;
  uint64_t v2531;
  unsigned int v2532;
  unsigned int v2533;
  uint64_t v2534;
  uint64_t v2535;
  int64x2_t *v2536;
  int64x2_t v2537;
  int64x2_t v2538;
  int64x2_t v2539;
  int64x2_t v2540;
  int64x2_t v2541;
  int64x2_t v2542;
  int64x2_t v2543;
  int64x2_t *v2544;
  int64x2_t *v2545;
  uint64_t v2546;
  uint64_t v2547;
  __int128 v2548;
  uint64_t v2549;
  __int128 v2550;
  uint64_t v2551;
  __int128 v2552;
  uint64_t v2553;
  __int128 v2554;
  uint64_t v2555;
  uint64_t v2556;
  uint64_t v2557;
  uint64_t v2558;
  uint64_t *v2559;
  uint64_t v2560;
  uint64_t v2561;
  uint64_t v2562;
  uint64_t v2563;
  unsigned int v2564;
  unsigned int v2565;
  unsigned int *v2566;
  uint64_t v2567;
  unsigned int v2568;
  uint64_t *v2569;
  int v2570;
  unsigned int v2571;
  uint64_t *v2572;
  uint64_t v2573;
  uint64_t v2574;
  uint64_t v2575;
  unsigned int v2576;
  unsigned int v2577;
  uint64_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  int8x16_t v2581;
  unint64_t v2582;
  int64x2_t v2583;
  __int128 v2584;
  uint64_t v2585;
  int64x2_t v2586;
  int64x2_t v2587;
  int64x2_t *v2588;
  uint64_t v2589;
  __int128 v2590;
  __int128 v2591;
  uint64_t v2592;
  uint64_t v2593;
  int8x16_t *v2594;
  uint64_t *v2595;
  uint64_t v2596;
  uint64_t v2597;
  uint64_t v2598;
  uint64_t v2599;
  unsigned int v2600;
  unsigned int v2601;
  unsigned int *v2602;
  uint64_t v2603;
  unsigned int v2604;
  uint64_t *v2605;
  int v2606;
  unsigned int v2607;
  uint64_t *v2608;
  uint64_t v2609;
  uint64_t v2610;
  uint64_t v2611;
  unsigned int v2612;
  unsigned int v2613;
  uint64_t v2614;
  uint64_t v2615;
  int64x2_t *v2616;
  int64x2_t v2617;
  int64x2_t v2618;
  int64x2_t v2619;
  int64x2_t v2620;
  int64x2_t v2621;
  int64x2_t v2622;
  int64x2_t v2623;
  int64x2_t v2624;
  int64x2_t v2625;
  int64x2_t v2626;
  int64x2_t v2627;
  int64x2_t v2628;
  int64x2_t v2629;
  int64x2_t v2630;
  int64x2_t v2631;
  int64x2_t v2632;
  int64x2_t v2633;
  int8x16_t v2634;
  int8x16_t v2635;
  int8x16_t v2636;
  unint64_t v2637;
  unint64_t v2638;
  unint64_t v2639;
  int8x16_t v2640;
  int8x16_t v2641;
  int8x16_t v2642;
  unint64_t v2643;
  unint64_t v2644;
  unint64_t v2645;
  int8x16_t v2646;
  int8x16_t v2647;
  int8x16_t v2648;
  unint64_t v2649;
  unint64_t v2650;
  unint64_t v2651;
  int8x16_t v2652;
  int8x16_t v2653;
  int8x16_t v2654;
  unint64_t v2655;
  unint64_t v2656;
  unint64_t v2657;
  int64x2_t *v2658;
  _OWORD *v2659;
  int64x2_t v2660;
  int64x2_t v2661;
  int64x2_t v2662;
  int64x2_t v2663;
  int8x16_t *v2664;
  int8x16_t *v2665;
  int8x16_t *v2666;
  int8x16_t *v2667;
  uint64_t *v2668;
  uint64_t v2669;
  uint64_t v2670;
  uint64_t v2671;
  uint64_t v2672;
  unsigned int v2673;
  unsigned int v2674;
  unsigned int *v2675;
  uint64_t v2676;
  unsigned int v2677;
  uint64_t *v2678;
  int v2679;
  unsigned int v2680;
  uint64_t *v2681;
  uint64_t v2682;
  uint64_t v2683;
  uint64_t v2684;
  unsigned int v2685;
  unsigned int v2686;
  uint64_t v2687;
  uint64_t v2688;
  uint64_t v2689;
  int64x2_t v2690;
  int64x2_t v2691;
  int64x2_t v2692;
  int64x2_t v2693;
  int64x2_t v2694;
  int64x2_t v2695;
  int64x2_t v2696;
  int64x2_t v2697;
  int64x2_t v2698;
  int64x2_t v2699;
  int64x2_t v2700;
  int64x2_t v2701;
  int64x2_t v2702;
  int64x2_t v2703;
  int64x2_t v2704;
  int64x2_t v2705;
  int64x2_t v2706;
  int64x2_t v2707;
  int64x2_t v2708;
  int64x2_t v2709;
  int64x2_t v2710;
  int64x2_t v2711;
  int64x2_t v2712;
  __int128 v2713;
  __int128 v2714;
  __int128 v2715;
  int64x2_t v2716;
  int64x2_t v2717;
  int64x2_t *v2718;
  int64x2_t *v2719;
  int64x2_t *v2720;
  int64x2_t *v2721;
  int64x2_t *v2722;
  __int128 *v2723;
  uint64_t v2724;
  _OWORD *v2725;
  __int128 v2726;
  __int128 v2727;
  __int128 v2728;
  __int128 v2729;
  __int128 v2730;
  __int128 v2731;
  __int128 v2732;
  __int128 v2733;
  __int128 v2734;
  __int128 v2735;
  __int128 v2736;
  __int128 v2737;
  __int128 v2738;
  __int128 v2739;
  __int128 v2740;
  __int128 v2741;
  __int128 v2742;
  __int128 v2743;
  __int128 v2744;
  __int128 v2745;
  __int128 v2746;
  __int128 v2747;
  __int128 v2748;
  __int128 v2749;
  __int128 v2750;
  __int128 v2751;
  _OWORD *v2752;
  _OWORD *v2753;
  _OWORD *v2754;
  _OWORD *v2755;
  _OWORD *v2756;
  _OWORD *v2757;
  _OWORD *v2758;
  _OWORD *v2759;
  uint64_t *v2760;
  uint64_t v2761;
  uint64_t v2762;
  uint64_t v2763;
  uint64_t v2764;
  unsigned int v2765;
  unsigned int v2766;
  unsigned int *v2767;
  uint64_t v2768;
  unsigned int v2769;
  uint64_t *v2770;
  int v2771;
  unsigned int v2772;
  uint64_t *v2773;
  uint64_t v2774;
  uint64_t v2775;
  uint64_t v2776;
  unsigned int v2777;
  unsigned int v2778;
  uint64_t v2779;
  uint64_t v2780;
  int64x2_t *v2781;
  int64x2_t v2782;
  int64x2_t v2783;
  int64x2_t v2784;
  int64x2_t v2785;
  int64x2_t v2786;
  int64x2_t v2787;
  int64x2_t v2788;
  int64x2_t v2789;
  int64x2_t v2790;
  int64x2_t v2791;
  int64x2_t v2792;
  int64x2_t v2793;
  int64x2_t v2794;
  int64x2_t v2795;
  int64x2_t v2796;
  int64x2_t v2797;
  int64x2_t v2798;
  int8x16_t v2799;
  int8x16_t v2800;
  int8x16_t v2801;
  unint64_t v2802;
  unint64_t v2803;
  unint64_t v2804;
  int8x16_t v2805;
  int8x16_t v2806;
  int8x16_t v2807;
  unint64_t v2808;
  unint64_t v2809;
  unint64_t v2810;
  int8x16_t v2811;
  int8x16_t v2812;
  int8x16_t v2813;
  unint64_t v2814;
  unint64_t v2815;
  unint64_t v2816;
  int8x16_t v2817;
  int8x16_t v2818;
  int8x16_t v2819;
  unint64_t v2820;
  unint64_t v2821;
  unint64_t v2822;
  int64x2_t *v2823;
  _OWORD *v2824;
  int64x2_t v2825;
  int64x2_t v2826;
  int64x2_t v2827;
  int64x2_t v2828;
  int8x16_t *v2829;
  int8x16_t *v2830;
  int8x16_t *v2831;
  int8x16_t *v2832;
  uint64_t *v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t v2837;
  unsigned int v2838;
  unsigned int v2839;
  unsigned int *v2840;
  uint64_t v2841;
  unsigned int v2842;
  uint64_t *v2843;
  int v2844;
  unsigned int v2845;
  uint64_t *v2846;
  uint64_t v2847;
  uint64_t v2848;
  uint64_t v2849;
  unsigned int v2850;
  unsigned int v2851;
  uint64_t v2852;
  uint64_t v2853;
  int64x2_t *v2854;
  int64x2_t v2855;
  int64x2_t v2856;
  int64x2_t v2857;
  int64x2_t v2858;
  int64x2_t v2859;
  int64x2_t v2860;
  int64x2_t v2861;
  int64x2_t v2862;
  int64x2_t v2863;
  int64x2_t v2864;
  int64x2_t v2865;
  int64x2_t v2866;
  int64x2_t v2867;
  int64x2_t v2868;
  int64x2_t v2869;
  int64x2_t v2870;
  int64x2_t v2871;
  int8x16_t v2872;
  int8x16_t v2873;
  int8x16_t v2874;
  unint64_t v2875;
  unint64_t v2876;
  unint64_t v2877;
  int8x16_t v2878;
  int8x16_t v2879;
  int8x16_t v2880;
  unint64_t v2881;
  unint64_t v2882;
  unint64_t v2883;
  int8x16_t v2884;
  int8x16_t v2885;
  int8x16_t v2886;
  unint64_t v2887;
  unint64_t v2888;
  unint64_t v2889;
  int8x16_t v2890;
  int8x16_t v2891;
  int8x16_t v2892;
  unint64_t v2893;
  unint64_t v2894;
  unint64_t v2895;
  int64x2_t *v2896;
  _OWORD *v2897;
  int64x2_t v2898;
  int64x2_t v2899;
  int64x2_t v2900;
  int64x2_t v2901;
  int8x16_t *v2902;
  int8x16_t *v2903;
  int8x16_t *v2904;
  int8x16_t *v2905;
  uint64_t *v2906;
  uint64_t v2907;
  uint64_t v2908;
  uint64_t v2909;
  uint64_t v2910;
  unsigned int v2911;
  unsigned int v2912;
  unsigned int *v2913;
  uint64_t v2914;
  unsigned int v2915;
  uint64_t *v2916;
  int v2917;
  unsigned int v2918;
  uint64_t *v2919;
  uint64_t v2920;
  uint64_t v2921;
  uint64_t v2922;
  unsigned int v2923;
  unsigned int v2924;
  uint64_t v2925;
  uint64_t v2926;
  uint64_t v2927;
  int64x2_t v2928;
  int64x2_t v2929;
  int64x2_t v2930;
  int64x2_t v2931;
  int64x2_t v2932;
  __int128 v2933;
  __int128 v2934;
  __int128 v2935;
  int64x2_t v2936;
  int64x2_t v2937;
  int64x2_t *v2938;
  int64x2_t *v2939;
  int64x2_t *v2940;
  int64x2_t *v2941;
  int64x2_t *v2942;
  __int128 *v2943;
  uint64_t v2944;
  _OWORD *v2945;
  __int128 v2946;
  __int128 v2947;
  __int128 v2948;
  __int128 v2949;
  __int128 v2950;
  __int128 v2951;
  __int128 v2952;
  __int128 v2953;
  _OWORD *v2954;
  _OWORD *v2955;
  uint64_t *v2956;
  uint64_t v2957;
  uint64_t v2958;
  uint64_t v2959;
  uint64_t v2960;
  unsigned int v2961;
  unsigned int v2962;
  unsigned int *v2963;
  uint64_t v2964;
  unsigned int v2965;
  uint64_t *v2966;
  int v2967;
  unsigned int v2968;
  uint64_t *v2969;
  uint64_t v2970;
  uint64_t v2971;
  uint64_t v2972;
  unsigned int v2973;
  unsigned int v2974;
  uint64_t v2975;
  uint64_t v2976;
  _QWORD *v2977;
  int8x16_t v2978;
  int8x16_t v2979;
  unint64_t v2980;
  __int128 *v2981;
  _OWORD *v2982;
  __int128 v2983;
  __int128 v2984;
  uint64_t *v2985;
  uint64_t v2986;
  uint64_t v2987;
  uint64_t v2988;
  uint64_t v2989;
  unsigned int v2990;
  unsigned int v2991;
  unsigned int *v2992;
  uint64_t v2993;
  unsigned int v2994;
  uint64_t *v2995;
  int v2996;
  unsigned int v2997;
  uint64_t *v2998;
  uint64_t v2999;
  uint64_t v3000;
  uint64_t v3001;
  unsigned int v3002;
  unsigned int v3003;
  uint64_t v3004;
  uint64_t v3005;
  uint64_t v3006;
  int64x2_t v3007;
  int64x2_t v3008;
  int64x2_t v3009;
  int64x2_t v3010;
  int64x2_t v3011;
  __int128 v3012;
  __int128 v3013;
  __int128 v3014;
  int64x2_t v3015;
  int64x2_t v3016;
  int64x2_t *v3017;
  int64x2_t *v3018;
  int64x2_t *v3019;
  int64x2_t *v3020;
  int64x2_t *v3021;
  __int128 *v3022;
  uint64_t v3023;
  _OWORD *v3024;
  __int128 v3025;
  __int128 v3026;
  __int128 v3027;
  __int128 v3028;
  __int128 v3029;
  __int128 v3030;
  __int128 v3031;
  __int128 v3032;
  _OWORD *v3033;
  _OWORD *v3034;
  uint64_t *v3035;
  uint64_t v3036;
  uint64_t v3037;
  uint64_t v3038;
  uint64_t v3039;
  unsigned int v3040;
  unsigned int v3041;
  unsigned int *v3042;
  uint64_t v3043;
  unsigned int v3044;
  uint64_t *v3045;
  int v3046;
  unsigned int v3047;
  uint64_t *v3048;
  uint64_t v3049;
  uint64_t v3050;
  uint64_t v3051;
  unsigned int v3052;
  unsigned int v3053;
  uint64_t v3054;
  uint64_t v3055;
  int64x2_t *v3056;
  int64x2_t v3057;
  int64x2_t v3058;
  int64x2_t v3059;
  int64x2_t v3060;
  int64x2_t v3061;
  int64x2_t v3062;
  int64x2_t v3063;
  int64x2_t v3064;
  int64x2_t v3065;
  int64x2_t v3066;
  int64x2_t v3067;
  int64x2_t v3068;
  int64x2_t *v3069;
  int64x2_t *v3070;
  int64x2_t *v3071;
  int64x2_t *v3072;
  int64x2_t *v3073;
  __int128 *v3074;
  uint64_t v3075;
  _OWORD *v3076;
  __int128 v3077;
  __int128 v3078;
  __int128 v3079;
  __int128 v3080;
  __int128 v3081;
  __int128 v3082;
  __int128 v3083;
  __int128 v3084;
  __int128 v3085;
  __int128 v3086;
  __int128 v3087;
  _OWORD *v3088;
  _OWORD *v3089;
  _OWORD *v3090;
  uint64_t *v3091;
  uint64_t v3092;
  uint64_t v3093;
  uint64_t v3094;
  uint64_t v3095;
  unsigned int v3096;
  unsigned int v3097;
  unsigned int *v3098;
  uint64_t v3099;
  unsigned int v3100;
  uint64_t *v3101;
  int v3102;
  unsigned int v3103;
  uint64_t *v3104;
  uint64_t v3105;
  uint64_t v3106;
  uint64_t v3107;
  unsigned int v3108;
  unsigned int v3109;
  uint64_t v3110;
  uint64_t v3111;
  int64x2_t *v3112;
  int64x2_t v3113;
  int64x2_t v3114;
  int64x2_t v3115;
  int64x2_t v3116;
  int64x2_t v3117;
  int64x2_t v3118;
  int64x2_t v3119;
  int64x2_t v3120;
  int64x2_t v3121;
  int64x2_t v3122;
  int64x2_t v3123;
  int64x2_t v3124;
  int64x2_t *v3125;
  int64x2_t *v3126;
  int64x2_t *v3127;
  int64x2_t *v3128;
  int64x2_t *v3129;
  __int128 *v3130;
  uint64_t v3131;
  _OWORD *v3132;
  __int128 v3133;
  __int128 v3134;
  __int128 v3135;
  __int128 v3136;
  __int128 v3137;
  __int128 v3138;
  __int128 v3139;
  __int128 v3140;
  __int128 v3141;
  __int128 v3142;
  __int128 v3143;
  _OWORD *v3144;
  _OWORD *v3145;
  _OWORD *v3146;
  uint64_t *v3147;
  uint64_t v3148;
  uint64_t v3149;
  uint64_t v3150;
  uint64_t v3151;
  unsigned int v3152;
  unsigned int v3153;
  unsigned int *v3154;
  uint64_t v3155;
  unsigned int v3156;
  uint64_t *v3157;
  int v3158;
  unsigned int v3159;
  uint64_t *v3160;
  uint64_t v3161;
  uint64_t v3162;
  uint64_t v3163;
  unsigned int v3164;
  unsigned int v3165;
  uint64_t v3166;
  uint64_t v3167;
  uint64_t v3168;
  int64x2_t v3169;
  int64x2_t v3170;
  int64x2_t v3171;
  int64x2_t v3172;
  int64x2_t v3173;
  __int128 v3174;
  __int128 v3175;
  __int128 v3176;
  int64x2_t v3177;
  int64x2_t v3178;
  int64x2_t *v3179;
  int64x2_t *v3180;
  int64x2_t *v3181;
  int64x2_t *v3182;
  int64x2_t *v3183;
  __int128 *v3184;
  uint64_t v3185;
  _OWORD *v3186;
  __int128 v3187;
  __int128 v3188;
  __int128 v3189;
  __int128 v3190;
  __int128 v3191;
  __int128 v3192;
  __int128 v3193;
  __int128 v3194;
  _OWORD *v3195;
  _OWORD *v3196;
  uint64_t *v3197;
  uint64_t v3198;
  uint64_t v3199;
  uint64_t v3200;
  uint64_t v3201;
  unsigned int v3202;
  unsigned int v3203;
  unsigned int *v3204;
  uint64_t v3205;
  unsigned int v3206;
  uint64_t *v3207;
  int v3208;
  unsigned int v3209;
  uint64_t *v3210;
  uint64_t v3211;
  uint64_t v3212;
  uint64_t v3213;
  unsigned int v3214;
  unsigned int v3215;
  uint64_t v3216;
  uint64_t v3217;
  int64x2_t *v3218;
  int64x2_t v3219;
  int64x2_t v3220;
  int64x2_t v3221;
  int64x2_t v3222;
  int64x2_t v3223;
  int64x2_t v3224;
  int64x2_t v3225;
  int64x2_t v3226;
  int64x2_t v3227;
  int64x2_t v3228;
  int64x2_t v3229;
  int64x2_t v3230;
  int64x2_t v3231;
  int64x2_t v3232;
  int64x2_t v3233;
  int64x2_t v3234;
  int64x2_t v3235;
  int8x16_t v3236;
  int8x16_t v3237;
  int8x16_t v3238;
  unint64_t v3239;
  unint64_t v3240;
  unint64_t v3241;
  int8x16_t v3242;
  int8x16_t v3243;
  int8x16_t v3244;
  unint64_t v3245;
  unint64_t v3246;
  unint64_t v3247;
  int8x16_t v3248;
  int8x16_t v3249;
  int8x16_t v3250;
  unint64_t v3251;
  unint64_t v3252;
  unint64_t v3253;
  int8x16_t v3254;
  int8x16_t v3255;
  int8x16_t v3256;
  unint64_t v3257;
  unint64_t v3258;
  unint64_t v3259;
  int64x2_t *v3260;
  _OWORD *v3261;
  int64x2_t v3262;
  int64x2_t v3263;
  int64x2_t v3264;
  int64x2_t v3265;
  int8x16_t *v3266;
  int8x16_t *v3267;
  int8x16_t *v3268;
  int8x16_t *v3269;
  uint64_t *v3270;
  uint64_t v3271;
  uint64_t v3272;
  uint64_t v3273;
  uint64_t v3274;
  unsigned int v3275;
  unsigned int v3276;
  unsigned int *v3277;
  uint64_t v3278;
  unsigned int v3279;
  uint64_t *v3280;
  int v3281;
  unsigned int v3282;
  uint64_t *v3283;
  uint64_t v3284;
  uint64_t v3285;
  uint64_t v3286;
  unsigned int v3287;
  unsigned int v3288;
  uint64_t v3289;
  uint64_t v3290;
  uint64_t v3291;
  int64x2_t v3292;
  int64x2_t v3293;
  int64x2_t v3294;
  int64x2_t v3295;
  int64x2_t v3296;
  int64x2_t v3297;
  int64x2_t v3298;
  int64x2_t v3299;
  int64x2_t v3300;
  int64x2_t v3301;
  int64x2_t v3302;
  int64x2_t v3303;
  int64x2_t v3304;
  int64x2_t v3305;
  int64x2_t v3306;
  int64x2_t v3307;
  int64x2_t v3308;
  int64x2_t v3309;
  int64x2_t v3310;
  int64x2_t v3311;
  int64x2_t v3312;
  int64x2_t v3313;
  int64x2_t v3314;
  __int128 v3315;
  __int128 v3316;
  __int128 v3317;
  int64x2_t v3318;
  int64x2_t v3319;
  int64x2_t *v3320;
  int64x2_t *v3321;
  int64x2_t *v3322;
  int64x2_t *v3323;
  int64x2_t *v3324;
  __int128 *v3325;
  uint64_t v3326;
  _OWORD *v3327;
  __int128 v3328;
  __int128 v3329;
  __int128 v3330;
  __int128 v3331;
  __int128 v3332;
  __int128 v3333;
  __int128 v3334;
  __int128 v3335;
  __int128 v3336;
  __int128 v3337;
  __int128 v3338;
  __int128 v3339;
  __int128 v3340;
  __int128 v3341;
  __int128 v3342;
  __int128 v3343;
  __int128 v3344;
  __int128 v3345;
  __int128 v3346;
  __int128 v3347;
  __int128 v3348;
  __int128 v3349;
  __int128 v3350;
  __int128 v3351;
  __int128 v3352;
  __int128 v3353;
  _OWORD *v3354;
  _OWORD *v3355;
  _OWORD *v3356;
  _OWORD *v3357;
  _OWORD *v3358;
  _OWORD *v3359;
  _OWORD *v3360;
  _OWORD *v3361;
  uint64_t *v3362;
  uint64_t v3363;
  uint64_t v3364;
  uint64_t v3365;
  uint64_t v3366;
  unsigned int v3367;
  unsigned int v3368;
  unsigned int *v3369;
  uint64_t v3370;
  unsigned int v3371;
  uint64_t *v3372;
  int v3373;
  unsigned int v3374;
  uint64_t *v3375;
  uint64_t v3376;
  uint64_t v3377;
  uint64_t v3378;
  unsigned int v3379;
  unsigned int v3380;
  uint64_t v3381;
  uint64_t v3382;
  int64x2_t *v3383;
  int64x2_t v3384;
  int64x2_t v3385;
  int64x2_t v3386;
  int64x2_t v3387;
  int64x2_t v3388;
  int64x2_t v3389;
  int64x2_t v3390;
  int64x2_t v3391;
  int64x2_t v3392;
  int64x2_t v3393;
  int64x2_t v3394;
  int64x2_t v3395;
  int64x2_t v3396;
  int64x2_t v3397;
  int64x2_t v3398;
  int64x2_t v3399;
  int64x2_t v3400;
  int8x16_t v3401;
  int8x16_t v3402;
  int8x16_t v3403;
  unint64_t v3404;
  unint64_t v3405;
  unint64_t v3406;
  int8x16_t v3407;
  int8x16_t v3408;
  int8x16_t v3409;
  unint64_t v3410;
  unint64_t v3411;
  unint64_t v3412;
  int8x16_t v3413;
  int8x16_t v3414;
  int8x16_t v3415;
  unint64_t v3416;
  unint64_t v3417;
  unint64_t v3418;
  int8x16_t v3419;
  int8x16_t v3420;
  int8x16_t v3421;
  unint64_t v3422;
  unint64_t v3423;
  unint64_t v3424;
  int64x2_t *v3425;
  _OWORD *v3426;
  int64x2_t v3427;
  int64x2_t v3428;
  int64x2_t v3429;
  int64x2_t v3430;
  int8x16_t *v3431;
  int8x16_t *v3432;
  int8x16_t *v3433;
  int8x16_t *v3434;
  uint64_t *v3435;
  uint64_t v3436;
  uint64_t v3437;
  uint64_t v3438;
  uint64_t v3439;
  unsigned int v3440;
  unsigned int v3441;
  unsigned int *v3442;
  uint64_t v3443;
  unsigned int v3444;
  uint64_t *v3445;
  int v3446;
  unsigned int v3447;
  uint64_t *v3448;
  uint64_t v3449;
  uint64_t v3450;
  uint64_t v3451;
  unsigned int v3452;
  unsigned int v3453;
  uint64_t v3454;
  uint64_t v3455;
  int64x2_t *v3456;
  int64x2_t v3457;
  int64x2_t v3458;
  int64x2_t v3459;
  int64x2_t v3460;
  int64x2_t v3461;
  int64x2_t v3462;
  int64x2_t v3463;
  int64x2_t v3464;
  int64x2_t v3465;
  int64x2_t v3466;
  int64x2_t v3467;
  int64x2_t v3468;
  int64x2_t v3469;
  int64x2_t v3470;
  int64x2_t v3471;
  int64x2_t v3472;
  int64x2_t v3473;
  int8x16_t v3474;
  int8x16_t v3475;
  int8x16_t v3476;
  unint64_t v3477;
  unint64_t v3478;
  unint64_t v3479;
  int8x16_t v3480;
  int8x16_t v3481;
  int8x16_t v3482;
  unint64_t v3483;
  unint64_t v3484;
  unint64_t v3485;
  int8x16_t v3486;
  int8x16_t v3487;
  int8x16_t v3488;
  unint64_t v3489;
  unint64_t v3490;
  unint64_t v3491;
  int8x16_t v3492;
  int8x16_t v3493;
  int8x16_t v3494;
  unint64_t v3495;
  unint64_t v3496;
  unint64_t v3497;
  int64x2_t *v3498;
  _OWORD *v3499;
  int64x2_t v3500;
  int64x2_t v3501;
  int64x2_t v3502;
  int64x2_t v3503;
  int8x16_t *v3504;
  int8x16_t *v3505;
  int8x16_t *v3506;
  int8x16_t *v3507;
  uint64_t *v3508;
  uint64_t v3509;
  uint64_t v3510;
  uint64_t v3511;
  uint64_t v3512;
  unsigned int v3513;
  unsigned int v3514;
  unsigned int *v3515;
  uint64_t v3516;
  unsigned int v3517;
  uint64_t *v3518;
  int v3519;
  unsigned int v3520;
  uint64_t *v3521;
  uint64_t v3522;
  uint64_t v3523;
  uint64_t v3524;
  unsigned int v3525;
  unsigned int v3526;
  uint64_t v3527;
  uint64_t v3528;
  uint64_t v3529;
  int64x2_t v3530;
  int64x2_t v3531;
  int64x2_t v3532;
  int64x2_t v3533;
  int64x2_t v3534;
  __int128 v3535;
  __int128 v3536;
  __int128 v3537;
  int64x2_t v3538;
  int64x2_t v3539;
  int64x2_t *v3540;
  int64x2_t *v3541;
  int64x2_t *v3542;
  int64x2_t *v3543;
  int64x2_t *v3544;
  __int128 *v3545;
  uint64_t v3546;
  _OWORD *v3547;
  __int128 v3548;
  __int128 v3549;
  __int128 v3550;
  __int128 v3551;
  __int128 v3552;
  __int128 v3553;
  __int128 v3554;
  __int128 v3555;
  _OWORD *v3556;
  _OWORD *v3557;
  uint64_t *v3558;
  uint64_t v3559;
  uint64_t v3560;
  uint64_t v3561;
  uint64_t v3562;
  unsigned int v3563;
  unsigned int v3564;
  unsigned int *v3565;
  uint64_t v3566;
  unsigned int v3567;
  uint64_t *v3568;
  int v3569;
  unsigned int v3570;
  uint64_t *v3571;
  uint64_t v3572;
  uint64_t v3573;
  uint64_t v3574;
  unsigned int v3575;
  unsigned int v3576;
  uint64_t v3577;
  uint64_t v3578;
  _QWORD *v3579;
  int8x16_t v3580;
  int8x16_t v3581;
  unint64_t v3582;
  __int128 *v3583;
  _OWORD *v3584;
  __int128 v3585;
  __int128 v3586;
  uint64_t *v3587;
  uint64_t v3588;
  uint64_t v3589;
  uint64_t v3590;
  uint64_t v3591;
  unsigned int v3592;
  unsigned int v3593;
  unsigned int *v3594;
  uint64_t v3595;
  unsigned int v3596;
  uint64_t *v3597;
  int v3598;
  unsigned int v3599;
  uint64_t *v3600;
  uint64_t v3601;
  uint64_t v3602;
  uint64_t v3603;
  unsigned int v3604;
  unsigned int v3605;
  uint64_t v3606;
  uint64_t v3607;
  uint64_t v3608;
  int64x2_t v3609;
  int64x2_t v3610;
  int64x2_t v3611;
  int64x2_t v3612;
  int64x2_t v3613;
  __int128 v3614;
  __int128 v3615;
  __int128 v3616;
  int64x2_t v3617;
  int64x2_t v3618;
  int64x2_t *v3619;
  int64x2_t *v3620;
  int64x2_t *v3621;
  int64x2_t *v3622;
  int64x2_t *v3623;
  __int128 *v3624;
  uint64_t v3625;
  _OWORD *v3626;
  __int128 v3627;
  __int128 v3628;
  __int128 v3629;
  __int128 v3630;
  __int128 v3631;
  __int128 v3632;
  __int128 v3633;
  __int128 v3634;
  _OWORD *v3635;
  _OWORD *v3636;
  uint64_t *v3637;
  uint64_t v3638;
  uint64_t v3639;
  uint64_t v3640;
  uint64_t v3641;
  unsigned int v3642;
  unsigned int v3643;
  unsigned int *v3644;
  uint64_t v3645;
  unsigned int v3646;
  uint64_t *v3647;
  int v3648;
  unsigned int v3649;
  uint64_t *v3650;
  uint64_t v3651;
  uint64_t v3652;
  uint64_t v3653;
  unsigned int v3654;
  unsigned int v3655;
  uint64_t v3656;
  uint64_t v3657;
  int64x2_t *v3658;
  int64x2_t v3659;
  int64x2_t v3660;
  int64x2_t v3661;
  int64x2_t v3662;
  int64x2_t v3663;
  int64x2_t v3664;
  int64x2_t v3665;
  int64x2_t v3666;
  int64x2_t v3667;
  int64x2_t v3668;
  int64x2_t v3669;
  int64x2_t v3670;
  int64x2_t *v3671;
  int64x2_t *v3672;
  int64x2_t *v3673;
  int64x2_t *v3674;
  int64x2_t *v3675;
  __int128 *v3676;
  uint64_t v3677;
  _OWORD *v3678;
  __int128 v3679;
  __int128 v3680;
  __int128 v3681;
  __int128 v3682;
  __int128 v3683;
  __int128 v3684;
  __int128 v3685;
  __int128 v3686;
  __int128 v3687;
  __int128 v3688;
  __int128 v3689;
  _OWORD *v3690;
  _OWORD *v3691;
  _OWORD *v3692;
  uint64_t *v3693;
  uint64_t v3694;
  uint64_t v3695;
  uint64_t v3696;
  uint64_t v3697;
  unsigned int v3698;
  unsigned int v3699;
  unsigned int *v3700;
  uint64_t v3701;
  unsigned int v3702;
  uint64_t *v3703;
  int v3704;
  unsigned int v3705;
  uint64_t *v3706;
  uint64_t v3707;
  uint64_t v3708;
  uint64_t v3709;
  unsigned int v3710;
  unsigned int v3711;
  uint64_t v3712;
  uint64_t v3713;
  int64x2_t *v3714;
  int64x2_t v3715;
  int64x2_t v3716;
  int64x2_t v3717;
  int64x2_t v3718;
  int64x2_t v3719;
  int64x2_t v3720;
  int64x2_t v3721;
  int64x2_t v3722;
  int64x2_t v3723;
  int64x2_t v3724;
  int64x2_t v3725;
  int64x2_t v3726;
  int64x2_t *v3727;
  int64x2_t *v3728;
  int64x2_t *v3729;
  int64x2_t *v3730;
  int64x2_t *v3731;
  __int128 *v3732;
  uint64_t v3733;
  _OWORD *v3734;
  __int128 v3735;
  __int128 v3736;
  __int128 v3737;
  __int128 v3738;
  __int128 v3739;
  __int128 v3740;
  __int128 v3741;
  __int128 v3742;
  __int128 v3743;
  __int128 v3744;
  __int128 v3745;
  _OWORD *v3746;
  _OWORD *v3747;
  _OWORD *v3748;
  uint64_t *v3749;
  uint64_t v3750;
  uint64_t v3751;
  uint64_t v3752;
  uint64_t v3753;
  unsigned int v3754;
  unsigned int v3755;
  unsigned int *v3756;
  uint64_t v3757;
  unsigned int v3758;
  uint64_t *v3759;
  int v3760;
  unsigned int v3761;
  uint64_t *v3762;
  uint64_t v3763;
  uint64_t v3764;
  uint64_t v3765;
  unsigned int v3766;
  unsigned int v3767;
  uint64_t v3768;
  uint64_t v3769;
  uint64_t v3770;
  int64x2_t v3771;
  int64x2_t v3772;
  int64x2_t v3773;
  int64x2_t v3774;
  int64x2_t v3775;
  __int128 v3776;
  __int128 v3777;
  __int128 v3778;
  int64x2_t v3779;
  int64x2_t v3780;
  int64x2_t *v3781;
  int64x2_t *v3782;
  int64x2_t *v3783;
  int64x2_t *v3784;
  int64x2_t *v3785;
  __int128 *v3786;
  uint64_t v3787;
  _OWORD *v3788;
  __int128 v3789;
  __int128 v3790;
  __int128 v3791;
  __int128 v3792;
  __int128 v3793;
  __int128 v3794;
  __int128 v3795;
  __int128 v3796;
  _OWORD *v3797;
  _OWORD *v3798;
  uint64_t *v3799;
  uint64_t v3800;
  uint64_t v3801;
  uint64_t v3802;
  uint64_t v3803;
  unsigned int v3804;
  unsigned int v3805;
  unsigned int *v3806;
  uint64_t v3807;
  unsigned int v3808;
  uint64_t *v3809;
  int v3810;
  unsigned int v3811;
  uint64_t *v3812;
  uint64_t v3813;
  uint64_t v3814;
  uint64_t v3815;
  unsigned int v3816;
  unsigned int v3817;
  uint64_t v3818;
  uint64_t v3819;
  int64x2_t v3820;
  int64x2_t *v3821;
  int64x2_t v3822;
  int64x2_t v3823;
  int64x2_t v3824;
  int64x2_t v3825;
  int64x2_t v3826;
  int64x2_t v3827;
  int64x2_t v3828;
  int64x2_t v3829;
  int64x2_t v3830;
  int64x2_t v3831;
  int64x2_t v3832;
  int64x2_t v3833;
  int64x2_t v3834;
  int64x2_t v3835;
  int64x2_t v3836;
  int64x2_t v3837;
  int64x2_t v3838;
  int64x2_t v3839;
  int64x2_t v3840;
  int64x2_t v3841;
  int64x2_t v3842;
  int64x2_t v3843;
  int64x2_t v3844;
  int64x2_t v3845;
  int64x2_t v3846;
  int64x2_t v3847;
  int64x2_t v3848;
  int64x2_t v3849;
  int64x2_t v3850;
  int64x2_t v3851;
  int64x2_t *v3852;
  int64x2_t *v3853;
  int64x2_t *v3854;
  int64x2_t *v3855;
  int64x2_t *v3856;
  int64x2_t *v3857;
  int64x2_t *v3858;
  int64x2_t *v3859;
  uint64_t v3860;
  uint64_t v3861;
  uint64_t v3862;
  uint64_t v3863;
  __int128 v3864;
  __int128 v3865;
  __int128 v3866;
  __int128 v3867;
  __int128 v3868;
  __int128 v3869;
  __int128 v3870;
  uint64_t v3871;
  __int128 v3872;
  __int128 v3873;
  __int128 v3874;
  __int128 v3875;
  uint64_t v3876;
  __int128 v3877;
  __int128 v3878;
  uint64_t v3879;
  __int128 v3880;
  __int128 v3881;
  __int128 v3882;
  __int128 v3883;
  uint64_t v3884;
  uint64_t v3885;
  __int128 v3886;
  __int128 v3887;
  __int128 v3888;
  __int128 v3889;
  __int128 v3890;
  __int128 v3891;
  uint64_t v3892;
  uint64_t v3893;
  uint64_t v3894;
  uint64_t v3895;
  uint64_t v3896;
  uint64_t *v3897;
  uint64_t v3898;
  uint64_t v3899;
  uint64_t v3900;
  uint64_t v3901;
  unsigned int v3902;
  unsigned int v3903;
  unsigned int *v3904;
  uint64_t v3905;
  unsigned int v3906;
  uint64_t *v3907;
  int v3908;
  unsigned int v3909;
  uint64_t *v3910;
  uint64_t v3911;
  uint64_t v3912;
  uint64_t v3913;
  unsigned int v3914;
  unsigned int v3915;
  uint64_t v3916;
  int64x2_t v3917;
  int8x16_t v3918;
  int64x2_t v3919;
  int64x2_t v3920;
  int64x2_t v3921;
  int8x16_t v3922;
  int64x2_t v3923;
  int64x2_t v3924;
  int64x2_t v3925;
  int64x2_t v3926;
  int64x2_t v3927;
  int64x2_t v3928;
  int64x2_t v3929;
  int64x2_t v3930;
  int64x2_t v3931;
  int64x2_t v3932;
  int64x2_t v3933;
  int8x16_t v3934;
  __int128 v3935;
  int8x16_t v3936;
  int8x16_t v3937;
  int8x16_t v3938;
  int8x16_t v3939;
  int8x16_t v3940;
  int8x16_t v3941;
  int8x16_t v3942;
  int8x16_t v3943;
  int8x16_t v3944;
  int8x16_t v3945;
  int8x16_t v3946;
  int64x2_t v3947;
  int8x16_t v3948;
  int64x2_t v3949;
  int8x16_t v3950;
  int8x16_t v3951;
  int8x16_t v3952;
  int64x2_t v3953;
  int8x16_t v3954;
  int8x16_t v3955;
  uint64_t v3956;
  uint64_t v3957;
  int8x16_t v3958;
  int8x16_t v3959;
  __int128 v3960;
  int8x16_t v3961;
  uint64_t v3962;
  unint64_t v3963;
  int8x16_t v3964;
  int8x16_t v3965;
  unint64_t v3966;
  unint64_t v3967;
  unint64_t v3968;
  int8x16_t v3969;
  unint64_t v3970;
  unint64_t v3971;
  unint64_t v3972;
  unint64_t v3973;
  int8x16_t v3974;
  unint64_t v3975;
  unint64_t v3976;
  unint64_t v3977;
  unint64_t v3978;
  uint64_t v3979;
  unint64_t v3980;
  unint64_t v3981;
  unint64_t v3982;
  unint64_t v3983;
  unint64_t v3984;
  uint64_t v3985;
  uint64_t v3986;
  int8x16_t v3987;
  int8x16_t v3988;
  int8x16_t v3989;
  int8x16_t v3990;
  int8x16_t v3991;
  int8x16_t v3992;
  int8x16_t v3993;
  int8x16_t v3994;
  int8x16_t v3995;
  int8x16_t v3996;
  int8x16_t v3997;
  int8x16_t v3998;
  int8x16_t v3999;
  int8x16_t v4000;
  int8x16_t v4001;
  int8x16_t v4002;
  int8x16_t v4003;
  uint64_t v4004;
  unint64_t v4005;
  unint64_t v4006;
  __int128 v4007;
  __int128 v4008;
  __int128 v4009;
  __int128 v4010;
  __int128 v4011;
  __int128 v4012;
  __int128 v4013;
  __int128 v4014;
  __int128 v4015;
  __int128 v4016;
  __int128 v4017;
  __int128 v4018;
  __int128 v4019;
  __int128 v4020;
  __int128 v4021;
  __int128 v4022;
  __int128 v4023;
  __int128 v4024;
  uint64_t v4025;
  uint64_t v4026;
  uint64_t v4027;
  int8x16_t *v4028;
  uint64_t v4029;
  uint64_t v4030;
  uint64_t v4031;
  uint64_t *v4032;
  uint64_t v4033;
  uint64_t v4034;
  uint64_t v4035;
  uint64_t v4036;
  unsigned int v4037;
  unsigned int v4038;
  unsigned int *v4039;
  uint64_t v4040;
  unsigned int v4041;
  uint64_t *v4042;
  int v4043;
  unsigned int v4044;
  uint64_t *v4045;
  uint64_t v4046;
  uint64_t v4047;
  uint64_t v4048;
  unsigned int v4049;
  unsigned int v4050;
  uint64_t v4051;
  uint64_t v4052;
  int64x2_t v4053;
  int64x2_t *v4054;
  int64x2_t v4055;
  int64x2_t v4056;
  int64x2_t v4057;
  int64x2_t v4058;
  int64x2_t v4059;
  int64x2_t v4060;
  int64x2_t v4061;
  int64x2_t v4062;
  int64x2_t v4063;
  int64x2_t v4064;
  int64x2_t v4065;
  int64x2_t v4066;
  int64x2_t v4067;
  int64x2_t v4068;
  int64x2_t v4069;
  int64x2_t v4070;
  int64x2_t v4071;
  int64x2_t v4072;
  int64x2_t v4073;
  int64x2_t v4074;
  int64x2_t v4075;
  int64x2_t v4076;
  int64x2_t v4077;
  int64x2_t v4078;
  int64x2_t v4079;
  int64x2_t v4080;
  int64x2_t v4081;
  int64x2_t v4082;
  int64x2_t v4083;
  int64x2_t v4084;
  int64x2_t *v4085;
  int64x2_t *v4086;
  int64x2_t *v4087;
  int64x2_t *v4088;
  int64x2_t *v4089;
  int64x2_t *v4090;
  int64x2_t *v4091;
  int64x2_t *v4092;
  uint64_t v4093;
  uint64_t v4094;
  uint64_t v4095;
  uint64_t v4096;
  __int128 v4097;
  __int128 v4098;
  __int128 v4099;
  __int128 v4100;
  __int128 v4101;
  __int128 v4102;
  __int128 v4103;
  uint64_t v4104;
  __int128 v4105;
  __int128 v4106;
  __int128 v4107;
  __int128 v4108;
  uint64_t v4109;
  __int128 v4110;
  __int128 v4111;
  uint64_t v4112;
  __int128 v4113;
  __int128 v4114;
  __int128 v4115;
  __int128 v4116;
  uint64_t v4117;
  uint64_t v4118;
  __int128 v4119;
  __int128 v4120;
  __int128 v4121;
  __int128 v4122;
  __int128 v4123;
  __int128 v4124;
  uint64_t v4125;
  uint64_t v4126;
  uint64_t v4127;
  uint64_t v4128;
  uint64_t v4129;
  uint64_t *v4130;
  uint64_t v4131;
  uint64_t v4132;
  uint64_t v4133;
  uint64_t v4134;
  unsigned int v4135;
  unsigned int v4136;
  unsigned int *v4137;
  uint64_t v4138;
  unsigned int v4139;
  uint64_t *v4140;
  int v4141;
  unsigned int v4142;
  uint64_t *v4143;
  uint64_t v4144;
  uint64_t v4145;
  uint64_t v4146;
  unsigned int v4147;
  unsigned int v4148;
  uint64_t v4149;
  uint64_t v4150;
  int64x2_t v4151;
  int64x2_t *v4152;
  int64x2_t v4153;
  int64x2_t v4154;
  int64x2_t v4155;
  int64x2_t v4156;
  int64x2_t v4157;
  int64x2_t v4158;
  int64x2_t v4159;
  int64x2_t v4160;
  int64x2_t v4161;
  int64x2_t v4162;
  int64x2_t v4163;
  int64x2_t v4164;
  int64x2_t v4165;
  int64x2_t v4166;
  int64x2_t v4167;
  int64x2_t v4168;
  int64x2_t v4169;
  int64x2_t v4170;
  int64x2_t v4171;
  int64x2_t v4172;
  int64x2_t v4173;
  int64x2_t v4174;
  int64x2_t v4175;
  int64x2_t v4176;
  int64x2_t v4177;
  int64x2_t v4178;
  int64x2_t v4179;
  int64x2_t v4180;
  int64x2_t v4181;
  int64x2_t v4182;
  int64x2_t *v4183;
  int64x2_t *v4184;
  int64x2_t *v4185;
  int64x2_t *v4186;
  int64x2_t *v4187;
  int64x2_t *v4188;
  int64x2_t *v4189;
  int64x2_t *v4190;
  uint64_t v4191;
  uint64_t v4192;
  uint64_t v4193;
  uint64_t v4194;
  __int128 v4195;
  __int128 v4196;
  __int128 v4197;
  __int128 v4198;
  __int128 v4199;
  __int128 v4200;
  __int128 v4201;
  uint64_t v4202;
  __int128 v4203;
  __int128 v4204;
  __int128 v4205;
  __int128 v4206;
  uint64_t v4207;
  __int128 v4208;
  __int128 v4209;
  uint64_t v4210;
  __int128 v4211;
  __int128 v4212;
  __int128 v4213;
  __int128 v4214;
  uint64_t v4215;
  uint64_t v4216;
  __int128 v4217;
  __int128 v4218;
  __int128 v4219;
  __int128 v4220;
  __int128 v4221;
  __int128 v4222;
  uint64_t v4223;
  uint64_t v4224;
  uint64_t v4225;
  uint64_t v4226;
  uint64_t v4227;
  uint64_t *v4228;
  uint64_t v4229;
  uint64_t v4230;
  uint64_t v4231;
  uint64_t v4232;
  unsigned int v4233;
  unsigned int v4234;
  unsigned int *v4235;
  uint64_t v4236;
  unsigned int v4237;
  uint64_t *v4238;
  int v4239;
  unsigned int v4240;
  uint64_t *v4241;
  uint64_t v4242;
  uint64_t v4243;
  uint64_t v4244;
  unsigned int v4245;
  unsigned int v4246;
  uint64_t v4247;
  uint64_t v4248;
  __int128 v4249;
  uint64_t v4250;
  int64x2_t v4251;
  int64x2_t v4252;
  int64x2_t v4253;
  int64x2_t v4254;
  int64x2_t v4255;
  int64x2_t v4256;
  int64x2_t v4257;
  uint64_t v4258;
  __int128 v4259;
  __int128 v4260;
  __int128 v4261;
  __int128 v4262;
  int64x2_t v4263;
  int64x2_t v4264;
  int64x2_t *v4265;
  int64x2_t *v4266;
  int64x2_t *v4267;
  int64x2_t *v4268;
  int64x2_t *v4269;
  int64x2_t *v4270;
  int64x2_t *v4271;
  uint64_t v4272;
  uint64_t v4273;
  uint64_t v4274;
  uint64_t v4275;
  uint64_t v4276;
  __int128 v4277;
  __int128 v4278;
  __int128 v4279;
  __int128 v4280;
  __int128 v4281;
  __int128 v4282;
  __int128 v4283;
  uint64_t v4284;
  __int128 v4285;
  __int128 v4286;
  __int128 v4287;
  __int128 v4288;
  uint64_t v4289;
  uint64_t v4290;
  uint64_t v4291;
  uint64_t *v4292;
  uint64_t v4293;
  uint64_t v4294;
  uint64_t v4295;
  uint64_t v4296;
  unsigned int v4297;
  unsigned int v4298;
  unsigned int *v4299;
  uint64_t v4300;
  unsigned int v4301;
  uint64_t *v4302;
  int v4303;
  unsigned int v4304;
  uint64_t *v4305;
  uint64_t v4306;
  uint64_t v4307;
  uint64_t v4308;
  unsigned int v4309;
  unsigned int v4310;
  uint64_t v4311;
  uint64_t v4312;
  _QWORD *v4313;
  uint64_t v4314;
  int8x16_t v4315;
  int8x16_t v4316;
  int8x16_t v4317;
  unint64_t v4318;
  uint64_t v4319;
  uint64_t v4320;
  uint64_t v4321;
  __int128 v4322;
  __int128 v4323;
  __int128 v4324;
  uint64_t *v4325;
  uint64_t v4326;
  uint64_t v4327;
  uint64_t v4328;
  uint64_t v4329;
  unsigned int v4330;
  unsigned int v4331;
  unsigned int *v4332;
  uint64_t v4333;
  unsigned int v4334;
  uint64_t *v4335;
  int v4336;
  unsigned int v4337;
  uint64_t *v4338;
  uint64_t v4339;
  uint64_t v4340;
  uint64_t v4341;
  unsigned int v4342;
  unsigned int v4343;
  uint64_t v4344;
  uint64_t v4345;
  __int128 v4346;
  uint64_t v4347;
  int64x2_t v4348;
  int64x2_t v4349;
  int64x2_t v4350;
  int64x2_t v4351;
  int64x2_t v4352;
  int64x2_t v4353;
  int64x2_t v4354;
  uint64_t v4355;
  __int128 v4356;
  __int128 v4357;
  __int128 v4358;
  __int128 v4359;
  int64x2_t v4360;
  int64x2_t v4361;
  int64x2_t *v4362;
  int64x2_t *v4363;
  int64x2_t *v4364;
  int64x2_t *v4365;
  int64x2_t *v4366;
  int64x2_t *v4367;
  int64x2_t *v4368;
  uint64_t v4369;
  uint64_t v4370;
  uint64_t v4371;
  uint64_t v4372;
  uint64_t v4373;
  __int128 v4374;
  __int128 v4375;
  __int128 v4376;
  __int128 v4377;
  __int128 v4378;
  __int128 v4379;
  __int128 v4380;
  uint64_t v4381;
  __int128 v4382;
  __int128 v4383;
  __int128 v4384;
  __int128 v4385;
  uint64_t v4386;
  uint64_t v4387;
  uint64_t v4388;
  uint64_t *v4389;
  uint64_t v4390;
  uint64_t v4391;
  uint64_t v4392;
  uint64_t v4393;
  unsigned int v4394;
  unsigned int v4395;
  unsigned int *v4396;
  uint64_t v4397;
  unsigned int v4398;
  uint64_t *v4399;
  int v4400;
  unsigned int v4401;
  uint64_t *v4402;
  uint64_t v4403;
  uint64_t v4404;
  uint64_t v4405;
  unsigned int v4406;
  unsigned int v4407;
  uint64_t v4408;
  uint64_t v4409;
  int64x2_t v4410;
  int64x2_t v4411;
  int64x2_t v4412;
  int64x2_t v4413;
  int64x2_t v4414;
  int64x2_t v4415;
  int64x2_t v4416;
  int64x2_t v4417;
  int64x2_t v4418;
  int64x2_t v4419;
  int64x2_t v4420;
  int64x2_t v4421;
  int64x2_t v4422;
  int64x2_t v4423;
  int64x2_t v4424;
  int64x2_t v4425;
  int64x2_t *v4426;
  int64x2_t v4427;
  int64x2_t v4428;
  int64x2_t *v4429;
  int64x2_t *v4430;
  int64x2_t *v4431;
  int64x2_t *v4432;
  int64x2_t *v4433;
  int64x2_t *v4434;
  int64x2_t *v4435;
  int64x2_t *v4436;
  uint64_t v4437;
  uint64_t v4438;
  uint64_t v4439;
  uint64_t v4440;
  __int128 v4441;
  __int128 v4442;
  __int128 v4443;
  __int128 v4444;
  __int128 v4445;
  __int128 v4446;
  __int128 v4447;
  uint64_t v4448;
  __int128 v4449;
  __int128 v4450;
  __int128 v4451;
  __int128 v4452;
  uint64_t v4453;
  __int128 v4454;
  __int128 v4455;
  uint64_t v4456;
  __int128 v4457;
  __int128 v4458;
  uint64_t v4459;
  uint64_t v4460;
  uint64_t v4461;
  uint64_t *v4462;
  uint64_t v4463;
  uint64_t v4464;
  uint64_t v4465;
  uint64_t v4466;
  unsigned int v4467;
  unsigned int v4468;
  unsigned int *v4469;
  uint64_t v4470;
  unsigned int v4471;
  uint64_t *v4472;
  int v4473;
  unsigned int v4474;
  uint64_t *v4475;
  uint64_t v4476;
  uint64_t v4477;
  uint64_t v4478;
  unsigned int v4479;
  unsigned int v4480;
  uint64_t v4481;
  uint64_t v4482;
  int64x2_t v4483;
  int64x2_t v4484;
  int64x2_t v4485;
  int64x2_t v4486;
  int64x2_t v4487;
  int64x2_t v4488;
  int64x2_t v4489;
  int64x2_t v4490;
  int64x2_t v4491;
  int64x2_t v4492;
  int64x2_t v4493;
  int64x2_t v4494;
  int64x2_t v4495;
  int64x2_t v4496;
  int64x2_t v4497;
  int64x2_t v4498;
  int64x2_t *v4499;
  int64x2_t v4500;
  int64x2_t v4501;
  int64x2_t *v4502;
  int64x2_t *v4503;
  int64x2_t *v4504;
  int64x2_t *v4505;
  int64x2_t *v4506;
  int64x2_t *v4507;
  int64x2_t *v4508;
  int64x2_t *v4509;
  uint64_t v4510;
  uint64_t v4511;
  uint64_t v4512;
  uint64_t v4513;
  __int128 v4514;
  __int128 v4515;
  __int128 v4516;
  __int128 v4517;
  __int128 v4518;
  __int128 v4519;
  __int128 v4520;
  uint64_t v4521;
  __int128 v4522;
  __int128 v4523;
  __int128 v4524;
  __int128 v4525;
  uint64_t v4526;
  __int128 v4527;
  __int128 v4528;
  uint64_t v4529;
  __int128 v4530;
  __int128 v4531;
  uint64_t v4532;
  uint64_t v4533;
  uint64_t v4534;
  uint64_t *v4535;
  uint64_t v4536;
  uint64_t v4537;
  uint64_t v4538;
  uint64_t v4539;
  unsigned int v4540;
  unsigned int v4541;
  unsigned int *v4542;
  uint64_t v4543;
  unsigned int v4544;
  uint64_t *v4545;
  int v4546;
  unsigned int v4547;
  uint64_t *v4548;
  uint64_t v4549;
  uint64_t v4550;
  uint64_t v4551;
  unsigned int v4552;
  unsigned int v4553;
  uint64_t v4554;
  uint64_t v4555;
  __int128 v4556;
  uint64_t v4557;
  int64x2_t v4558;
  int64x2_t v4559;
  int64x2_t v4560;
  int64x2_t v4561;
  int64x2_t v4562;
  int64x2_t v4563;
  int64x2_t v4564;
  uint64_t v4565;
  __int128 v4566;
  __int128 v4567;
  __int128 v4568;
  __int128 v4569;
  int64x2_t v4570;
  int64x2_t v4571;
  int64x2_t *v4572;
  int64x2_t *v4573;
  int64x2_t *v4574;
  int64x2_t *v4575;
  int64x2_t *v4576;
  int64x2_t *v4577;
  int64x2_t *v4578;
  uint64_t v4579;
  uint64_t v4580;
  uint64_t v4581;
  uint64_t v4582;
  uint64_t v4583;
  __int128 v4584;
  __int128 v4585;
  __int128 v4586;
  __int128 v4587;
  __int128 v4588;
  __int128 v4589;
  __int128 v4590;
  uint64_t v4591;
  __int128 v4592;
  __int128 v4593;
  __int128 v4594;
  __int128 v4595;
  uint64_t v4596;
  uint64_t v4597;
  uint64_t v4598;
  uint64_t *v4599;
  uint64_t v4600;
  uint64_t v4601;
  uint64_t v4602;
  uint64_t v4603;
  unsigned int v4604;
  unsigned int v4605;
  unsigned int *v4606;
  uint64_t v4607;
  unsigned int v4608;
  uint64_t *v4609;
  int v4610;
  unsigned int v4611;
  uint64_t *v4612;
  uint64_t v4613;
  uint64_t v4614;
  uint64_t v4615;
  unsigned int v4616;
  unsigned int v4617;
  uint64_t v4618;
  uint64_t v4619;
  int64x2_t *v4620;
  int64x2_t v4621;
  int64x2_t v4622;
  int64x2_t v4623;
  int64x2_t v4624;
  int64x2_t v4625;
  int64x2_t v4626;
  int64x2_t v4627;
  int64x2_t v4628;
  int64x2_t v4629;
  int64x2_t v4630;
  int64x2_t v4631;
  int64x2_t v4632;
  int64x2_t v4633;
  int64x2_t v4634;
  int64x2_t v4635;
  int64x2_t v4636;
  int64x2_t v4637;
  int8x16_t v4638;
  int8x16_t v4639;
  int8x16_t v4640;
  unint64_t v4641;
  unint64_t v4642;
  unint64_t v4643;
  int8x16_t v4644;
  int8x16_t v4645;
  int8x16_t v4646;
  unint64_t v4647;
  unint64_t v4648;
  unint64_t v4649;
  int8x16_t v4650;
  int8x16_t v4651;
  int8x16_t v4652;
  unint64_t v4653;
  unint64_t v4654;
  unint64_t v4655;
  int8x16_t v4656;
  int8x16_t v4657;
  int8x16_t v4658;
  unint64_t v4659;
  unint64_t v4660;
  unint64_t v4661;
  int64x2_t *v4662;
  _OWORD *v4663;
  int64x2_t v4664;
  int64x2_t v4665;
  int64x2_t v4666;
  int64x2_t v4667;
  int8x16_t *v4668;
  int8x16_t *v4669;
  int8x16_t *v4670;
  int8x16_t *v4671;
  uint64_t *v4672;
  uint64_t v4673;
  uint64_t v4674;
  uint64_t v4675;
  uint64_t v4676;
  int64x2_t *result;
  unsigned int v4678;
  unsigned int *v4679;
  uint64_t v4680;
  unsigned int v4681;
  uint64_t *v4682;
  int v4683;
  unsigned int v4684;
  uint64_t *v4685;
  uint64_t v4686;
  uint64_t v4687;
  uint64_t v4688;
  unsigned int v4689;
  unsigned int v4690;
  uint64_t v4691;
  uint64_t v4692;
  uint64_t v4693;
  int64x2_t v4694;
  int64x2_t v4695;
  int64x2_t v4696;
  int64x2_t v4697;
  int64x2_t v4698;
  int64x2_t v4699;
  int64x2_t v4700;
  int64x2_t v4701;
  int64x2_t v4702;
  int64x2_t v4703;
  int64x2_t v4704;
  int64x2_t v4705;
  int64x2_t v4706;
  int64x2_t v4707;
  int64x2_t v4708;
  int64x2_t v4709;
  int64x2_t v4710;
  int64x2_t v4711;
  int64x2_t v4712;
  int64x2_t v4713;
  int64x2_t v4714;
  int64x2_t v4715;
  int64x2_t v4716;
  __int128 v4717;
  __int128 v4718;
  __int128 v4719;
  int64x2_t v4720;
  int64x2_t v4721;
  int64x2_t *v4722;
  int64x2_t *v4723;
  int64x2_t *v4724;
  int64x2_t *v4725;
  int64x2_t *v4726;
  __int128 *v4727;
  uint64_t v4728;
  _OWORD *v4729;
  __int128 v4730;
  __int128 v4731;
  __int128 v4732;
  __int128 v4733;
  __int128 v4734;
  __int128 v4735;
  __int128 v4736;
  __int128 v4737;
  __int128 v4738;
  __int128 v4739;
  __int128 v4740;
  __int128 v4741;
  __int128 v4742;
  __int128 v4743;
  __int128 v4744;
  __int128 v4745;
  __int128 v4746;
  __int128 v4747;
  __int128 v4748;
  __int128 v4749;
  __int128 v4750;
  __int128 v4751;
  __int128 v4752;
  __int128 v4753;
  __int128 v4754;
  __int128 v4755;
  _OWORD *v4756;
  _OWORD *v4757;
  _OWORD *v4758;
  _OWORD *v4759;
  _OWORD *v4760;
  _OWORD *v4761;
  _OWORD *v4762;
  _OWORD *v4763;
  uint64_t *v4764;
  uint64_t v4765;
  uint64_t v4766;
  uint64_t v4767;
  uint64_t v4768;
  unsigned int v4769;
  unsigned int v4770;
  unsigned int *v4771;
  uint64_t v4772;
  unsigned int v4773;
  uint64_t *v4774;
  unsigned int v4775;
  uint64_t *v4776;
  uint64_t v4777;
  uint64_t v4778;
  uint64_t v4779;
  unsigned int v4780;
  unsigned int v4781;
  uint64_t v4782;
  uint64_t v4783;
  int64x2_t *v4784;
  int64x2_t v4785;
  int64x2_t v4786;
  int64x2_t v4787;
  int64x2_t v4788;
  int64x2_t v4789;
  int64x2_t v4790;
  int64x2_t v4791;
  int64x2_t v4792;
  int64x2_t v4793;
  int64x2_t v4794;
  int64x2_t v4795;
  int64x2_t v4796;
  int64x2_t v4797;
  int64x2_t v4798;
  int64x2_t v4799;
  int64x2_t v4800;
  int64x2_t v4801;
  int8x16_t v4802;
  int8x16_t v4803;
  int8x16_t v4804;
  unint64_t v4805;
  unint64_t v4806;
  unint64_t v4807;
  int8x16_t v4808;
  int8x16_t v4809;
  int8x16_t v4810;
  unint64_t v4811;
  unint64_t v4812;
  unint64_t v4813;
  int8x16_t v4814;
  int8x16_t v4815;
  int8x16_t v4816;
  unint64_t v4817;
  unint64_t v4818;
  unint64_t v4819;
  int8x16_t v4820;
  int8x16_t v4821;
  int8x16_t v4822;
  unint64_t v4823;
  unint64_t v4824;
  unint64_t v4825;
  int64x2_t *v4826;
  _OWORD *v4827;
  int64x2_t v4828;
  int64x2_t v4829;
  int64x2_t v4830;
  int64x2_t v4831;
  int8x16_t *v4832;
  int8x16_t *v4833;
  int8x16_t *v4834;
  uint64_t *v4835;
  uint64_t v4836;
  uint64_t v4837;
  uint64_t v4838;
  uint64_t v4839;
  unsigned int v4840;
  unsigned int v4841;
  unsigned int *v4842;
  uint64_t v4843;
  unsigned int v4844;
  uint64_t *v4845;
  unsigned int v4846;
  uint64_t *v4847;
  uint64_t v4848;
  uint64_t v4849;
  uint64_t v4850;
  unsigned int v4851;
  unsigned int v4852;
  uint64_t v4853;
  uint64_t v4854;
  int64x2_t *v4855;
  int64x2_t v4856;
  int64x2_t v4857;
  int64x2_t v4858;
  int64x2_t v4859;
  int64x2_t v4860;
  int64x2_t v4861;
  int64x2_t v4862;
  int64x2_t v4863;
  int64x2_t v4864;
  int64x2_t v4865;
  int64x2_t v4866;
  int64x2_t v4867;
  int64x2_t v4868;
  int64x2_t v4869;
  int64x2_t v4870;
  int64x2_t v4871;
  int64x2_t v4872;
  int8x16_t v4873;
  int8x16_t v4874;
  int8x16_t v4875;
  unint64_t v4876;
  unint64_t v4877;
  unint64_t v4878;
  int8x16_t v4879;
  int8x16_t v4880;
  int8x16_t v4881;
  unint64_t v4882;
  unint64_t v4883;
  unint64_t v4884;
  int8x16_t v4885;
  int8x16_t v4886;
  int8x16_t v4887;
  unint64_t v4888;
  unint64_t v4889;
  unint64_t v4890;
  int8x16_t v4891;
  int8x16_t v4892;
  int8x16_t v4893;
  unint64_t v4894;
  unint64_t v4895;
  unint64_t v4896;
  int64x2_t *v4897;
  _OWORD *v4898;
  int64x2_t v4899;
  int64x2_t v4900;
  int64x2_t v4901;
  int64x2_t v4902;
  int8x16_t *v4903;
  int8x16_t *v4904;
  int8x16_t *v4905;
  uint64_t *v4906;
  uint64_t v4907;
  uint64_t v4908;
  uint64_t v4909;
  uint64_t v4910;
  unsigned int v4911;
  unsigned int v4912;
  unsigned int *v4913;
  uint64_t v4914;
  unsigned int v4915;
  uint64_t *v4916;
  unsigned int v4917;
  uint64_t *v4918;
  uint64_t v4919;
  uint64_t v4920;
  uint64_t v4921;
  unsigned int v4922;
  unsigned int v4923;
  uint64_t v4924;
  uint64_t v4925;
  uint64_t v4926;
  int64x2_t v4927;
  int64x2_t v4928;
  int64x2_t v4929;
  int64x2_t v4930;
  int64x2_t v4931;
  __int128 v4932;
  __int128 v4933;
  __int128 v4934;
  int64x2_t v4935;
  int64x2_t v4936;
  int64x2_t *v4937;
  int64x2_t *v4938;
  int64x2_t *v4939;
  int64x2_t *v4940;
  int64x2_t *v4941;
  __int128 *v4942;
  uint64_t v4943;
  unsigned int v4944;
  _OWORD *v4945;
  __int128 v4946;
  __int128 v4947;
  __int128 v4948;
  __int128 v4949;
  __int128 v4950;
  __int128 v4951;
  __int128 v4952;
  __int128 v4953;
  _OWORD *v4954;
  _OWORD *v4955;
  uint64_t *v4956;
  uint64_t v4957;
  uint64_t v4958;
  uint64_t v4959;
  uint64_t v4960;
  unsigned int v4961;
  unsigned int v4962;
  unsigned int *v4963;
  uint64_t v4964;
  unsigned int v4965;
  uint64_t *v4966;
  unsigned int v4967;
  uint64_t *v4968;
  uint64_t v4969;
  uint64_t v4970;
  uint64_t v4971;
  unsigned int v4972;
  unsigned int v4973;
  uint64_t v4974;
  uint64_t v4975;
  unsigned int v4976;
  _QWORD *v4977;
  int8x16_t v4978;
  int8x16_t v4979;
  unint64_t v4980;
  __int128 *v4981;
  unsigned int v4982;
  _OWORD *v4983;
  __int128 v4984;
  __int128 v4985;
  uint64_t *v4986;
  uint64_t v4987;
  uint64_t v4988;
  uint64_t v4989;
  uint64_t v4990;
  unsigned int v4991;
  unsigned int v4992;
  unsigned int *v4993;
  uint64_t v4994;
  unsigned int v4995;
  uint64_t *v4996;
  unsigned int v4997;
  uint64_t *v4998;
  uint64_t v4999;
  uint64_t v5000;
  uint64_t v5001;
  unsigned int v5002;
  unsigned int v5003;
  uint64_t v5004;
  uint64_t v5005;
  uint64_t v5006;
  int64x2_t v5007;
  int64x2_t v5008;
  int64x2_t v5009;
  int64x2_t v5010;
  int64x2_t v5011;
  __int128 v5012;
  __int128 v5013;
  __int128 v5014;
  int64x2_t v5015;
  int64x2_t v5016;
  int64x2_t *v5017;
  int64x2_t *v5018;
  int64x2_t *v5019;
  int64x2_t *v5020;
  int64x2_t *v5021;
  __int128 *v5022;
  uint64_t v5023;
  unsigned int v5024;
  _OWORD *v5025;
  __int128 v5026;
  __int128 v5027;
  __int128 v5028;
  __int128 v5029;
  __int128 v5030;
  __int128 v5031;
  __int128 v5032;
  __int128 v5033;
  _OWORD *v5034;
  _OWORD *v5035;
  uint64_t *v5036;
  uint64_t v5037;
  uint64_t v5038;
  uint64_t v5039;
  uint64_t v5040;
  unsigned int v5041;
  unsigned int v5042;
  unsigned int *v5043;
  uint64_t v5044;
  unsigned int v5045;
  uint64_t *v5046;
  unsigned int v5047;
  uint64_t *v5048;
  uint64_t v5049;
  uint64_t v5050;
  uint64_t v5051;
  unsigned int v5052;
  unsigned int v5053;
  uint64_t v5054;
  uint64_t v5055;
  unsigned int v5056;
  int64x2_t *v5057;
  int64x2_t v5058;
  int64x2_t v5059;
  int64x2_t v5060;
  int64x2_t v5061;
  int64x2_t v5062;
  int64x2_t v5063;
  int64x2_t v5064;
  int64x2_t v5065;
  int64x2_t v5066;
  int64x2_t v5067;
  int64x2_t v5068;
  int64x2_t v5069;
  int64x2_t *v5070;
  int64x2_t *v5071;
  int64x2_t *v5072;
  int64x2_t *v5073;
  int64x2_t *v5074;
  __int128 *v5075;
  uint64_t v5076;
  unsigned int v5077;
  _OWORD *v5078;
  __int128 v5079;
  __int128 v5080;
  __int128 v5081;
  __int128 v5082;
  __int128 v5083;
  __int128 v5084;
  __int128 v5085;
  __int128 v5086;
  __int128 v5087;
  __int128 v5088;
  __int128 v5089;
  _OWORD *v5090;
  _OWORD *v5091;
  _OWORD *v5092;
  uint64_t *v5093;
  uint64_t v5094;
  uint64_t v5095;
  uint64_t v5096;
  uint64_t v5097;
  unsigned int v5098;
  unsigned int v5099;
  unsigned int *v5100;
  uint64_t v5101;
  unsigned int v5102;
  uint64_t *v5103;
  unsigned int v5104;
  uint64_t *v5105;
  uint64_t v5106;
  uint64_t v5107;
  uint64_t v5108;
  unsigned int v5109;
  unsigned int v5110;
  uint64_t v5111;
  uint64_t v5112;
  unsigned int v5113;
  int64x2_t *v5114;
  int64x2_t v5115;
  int64x2_t v5116;
  int64x2_t v5117;
  int64x2_t v5118;
  int64x2_t v5119;
  int64x2_t v5120;
  int64x2_t v5121;
  int64x2_t v5122;
  int64x2_t v5123;
  int64x2_t v5124;
  int64x2_t v5125;
  int64x2_t v5126;
  int64x2_t *v5127;
  int64x2_t *v5128;
  int64x2_t *v5129;
  int64x2_t *v5130;
  int64x2_t *v5131;
  __int128 *v5132;
  uint64_t v5133;
  unsigned int v5134;
  _OWORD *v5135;
  __int128 v5136;
  __int128 v5137;
  __int128 v5138;
  __int128 v5139;
  __int128 v5140;
  __int128 v5141;
  __int128 v5142;
  __int128 v5143;
  __int128 v5144;
  __int128 v5145;
  __int128 v5146;
  _OWORD *v5147;
  _OWORD *v5148;
  _OWORD *v5149;
  uint64_t *v5150;
  uint64_t v5151;
  uint64_t v5152;
  uint64_t v5153;
  uint64_t v5154;
  unsigned int v5155;
  int v5156;
  unsigned int *i;
  uint64_t v5158;
  unsigned int v5159;
  uint64_t *v5160;
  unsigned int v5161;
  uint64_t *v5162;
  uint64_t v5163;
  uint64_t v5164;
  uint64_t v5165;
  unsigned int v5166;
  unsigned int v5167;
  uint64_t v5168;
  uint64_t v5169;
  uint64_t v5170;
  int64x2_t v5171;
  int64x2_t v5172;
  int64x2_t v5173;
  int64x2_t v5174;
  int64x2_t v5175;
  __int128 v5176;
  __int128 v5177;
  __int128 v5178;
  int64x2_t v5179;
  int64x2_t v5180;
  int64x2_t *v5181;
  int64x2_t *v5182;
  int64x2_t *v5183;
  int64x2_t *v5184;
  int64x2_t *v5185;
  __int128 *v5186;
  uint64_t v5187;
  unsigned int v5188;
  _OWORD *v5189;
  __int128 v5190;
  __int128 v5191;
  __int128 v5192;
  __int128 v5193;
  __int128 v5194;
  __int128 v5195;
  __int128 v5196;
  __int128 v5197;
  _OWORD *v5198;
  _OWORD *v5199;
  uint64_t *v5200;
  uint64_t v5201;
  uint64_t v5202;
  uint64_t v5203;
  uint64_t v5204;
  unint64_t v5205;
  int8x16_t v5206;
  unint64_t v5207;
  unint64_t v5208;
  unint64_t v5209;
  unint64_t v5210;
  unint64_t v5211;
  uint64_t v5212;
  unint64_t v5213;
  unint64_t v5214;
  unint64_t v5215;
  uint64_t v5216;
  uint64_t v5217;
  uint64_t v5218;
  uint64_t v5219;
  uint64_t v5220;
  uint64_t v5221;
  uint64_t v5222;
  unint64_t v5223;
  unint64_t v5224;
  uint64_t v5225;
  unint64_t v5226;
  unint64_t v5227;
  unint64_t v5228;
  unint64_t v5229;
  int64x2_t v5230;
  uint64_t v5231;
  int64x2_t v5232;
  uint64_t v5233;
  int64x2_t v5234;
  uint64_t v5235;
  __int128 v5236;
  uint64_t v5237;
  uint64_t v5238;
  __int128 v5239;
  uint64_t v5240;
  __int128 v5241;
  int64x2_t v5242;
  uint64_t v5243;
  __int128 v5244;
  __int128 v5245;
  uint64_t v5246;
  __int128 v5247;
  uint64_t v5248;
  __int128 v5249;
  uint64_t v5250;
  uint64_t v5251;
  int64x2_t v5252;
  uint64_t v5253;
  __int128 v5254;
  int64x2_t v5255;
  uint64_t v5256;
  __int128 v5257;

  v10 = *a5;
  v11 = *(_DWORD *)(a1 + 1308);
  if (v11)
  {
    v12 = 0;
    v13 = *a4;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 1384);
      v15 = *(_DWORD *)(a1 + 1408) * v12;
      v16 = (uint64_t *)(v14 + 8 * v15);
      v17 = *(_DWORD *)(a1 + 1304);
      if (v17 && *v16 == -1)
      {
        v18 = 0;
        v61 = 8 * (v17 + v15) - 8 * v15 - 8;
        v62 = v14 + 8 * v15;
        while (v61)
        {
          v16 = (uint64_t *)(v62 + 8);
          ++v18;
          v63 = *(_QWORD *)(v62 + 8);
          v61 -= 8;
          v62 += 8;
          if (v63 != -1)
            goto LABEL_8;
        }
        goto LABEL_4;
      }
      v18 = 0;
LABEL_8:
      v19 = (uint64_t *)(v14 + 8 * (v15 + v17));
      if (v16 != v19)
        break;
LABEL_4:
      ++v12;
      ++v13;
      if (v12 >= v11)
      {
        v10 = *a5;
        goto LABEL_24;
      }
    }
    v20 = *v16;
    v21 = v18;
    v22 = a3[27];
    if (v10)
    {
LABEL_10:
      v23 = *v13;
      v24 = *(_DWORD *)(v22 + 4 * v21);
      if (*v13 < v24)
      {
        v25 = *(_QWORD *)(a1 + 1312) + 8 * v20;
        v26 = *(unsigned int *)(a2 + 16);
        v27 = *(_QWORD *)a2 + 8 * (v23 + (_DWORD)v26 * v24);
        *(_QWORD *)&v28 = *(_QWORD *)(v25 + 16);
        v29 = *(int64x2_t *)(v25 + 24);
        *(_QWORD *)&v30 = *(_QWORD *)(v25 + 64);
        v31 = *(int64x2_t *)(v25 + 48);
        v32 = *(int64x2_t *)(v25 + 72);
        *(_QWORD *)&v33 = *(_QWORD *)(v25 + 112);
        v34 = *(int64x2_t *)(v25 + 96);
        v35 = *(int64x2_t *)(v25 + 120);
        v36 = vzip1q_s64(*(int64x2_t *)v25, v29);
        v37 = vzip2q_s64(*(int64x2_t *)v25, v29);
        *((_QWORD *)&v28 + 1) = *(_QWORD *)(v25 + 40);
        *((_QWORD *)&v30 + 1) = *(_QWORD *)(v25 + 88);
        *((_QWORD *)&v33 + 1) = *(_QWORD *)(v25 + 136);
        *(int64x2_t *)(v27 + 16) = vzip1q_s64(v31, v32);
        *(int64x2_t *)(v27 + 32) = vzip1q_s64(v34, v35);
        *(int64x2_t *)v27 = v36;
        v38 = (int64x2_t *)(v27 + 8 * v26);
        v38[1] = vzip1q_s64(vdupq_laneq_s64(v31, 1), vdupq_laneq_s64(v32, 1));
        v38[2] = vzip2q_s64(v34, v35);
        *v38 = v37;
        v39 = (_OWORD *)(v27 + 16 * v26);
        v39[1] = v30;
        v39[2] = v33;
        *v39 = v28;
        goto LABEL_14;
      }
    }
    else
    {
LABEL_12:
      v24 = *(_DWORD *)(v22 + 4 * v21);
      v23 = *v13;
    }
    v40 = *(_QWORD *)(a1 + 1312) + 8 * v20;
    v41 = *(unsigned int *)(a2 + 16);
    v42 = *(_OWORD *)v40;
    v43 = *(_QWORD *)a2 + 8 * (v24 + (_DWORD)v41 * v23);
    v44 = *(_OWORD *)(v40 + 24);
    v45 = *(_QWORD *)(v40 + 40);
    v46 = *(_OWORD *)(v40 + 48);
    v47 = *(_QWORD *)(v40 + 64);
    v48 = *(_OWORD *)(v40 + 72);
    v49 = *(_QWORD *)(v40 + 88);
    v50 = *(_OWORD *)(v40 + 96);
    v51 = *(_QWORD *)(v40 + 112);
    v52 = *(_OWORD *)(v40 + 120);
    v53 = *(_QWORD *)(v40 + 136);
    *(_QWORD *)(v43 + 16) = *(_QWORD *)(v40 + 16);
    *(_OWORD *)v43 = v42;
    v54 = v43 + 8 * v41;
    *(_QWORD *)(v54 + 16) = v45;
    *(_OWORD *)v54 = v44;
    v55 = v43 + 16 * v41;
    *(_QWORD *)(v55 + 16) = v47;
    *(_OWORD *)v55 = v46;
    v56 = v43 + 24 * v41;
    *(_QWORD *)(v56 + 16) = v49;
    *(_OWORD *)v56 = v48;
    v57 = v43 + 32 * v41;
    *(_QWORD *)(v57 + 16) = v51;
    *(_OWORD *)v57 = v50;
    v58 = v43 + 40 * v41;
    *(_QWORD *)(v58 + 16) = v53;
    *(_OWORD *)v58 = v52;
LABEL_14:
    v59 = v16 + 1;
    while (v59 != v19)
    {
      ++v18;
      v60 = *v59++;
      v20 = v60;
      if (v60 != -1)
      {
        v16 = v59 - 1;
        v21 = v18;
        v22 = a3[27];
        if (v10)
          goto LABEL_10;
        goto LABEL_12;
      }
    }
    v11 = *(_DWORD *)(a1 + 1308);
    goto LABEL_4;
  }
LABEL_24:
  v64 = *(_DWORD *)(a1 + 2748);
  if (!v64)
    goto LABEL_47;
  v65 = 0;
  v66 = a4[3];
  do
  {
    v67 = *(_QWORD *)(a1 + 2824);
    v68 = *(_DWORD *)(a1 + 2848) * v65;
    v69 = (uint64_t *)(v67 + 8 * v68);
    v70 = *(_DWORD *)(a1 + 2744);
    if (v70 && *v69 == -1)
    {
      v71 = 0;
      v128 = 8 * (v70 + v68) - 8 * v68 - 8;
      v129 = v67 + 8 * v68;
      while (v128)
      {
        v69 = (uint64_t *)(v129 + 8);
        ++v71;
        v130 = *(_QWORD *)(v129 + 8);
        v128 -= 8;
        v129 += 8;
        if (v130 != -1)
          goto LABEL_31;
      }
    }
    else
    {
      v71 = 0;
LABEL_31:
      v72 = (uint64_t *)(v67 + 8 * (v68 + v70));
      if (v69 != v72)
      {
        v73 = *v69;
        v74 = v71;
        v75 = a3[27];
        if (v10)
        {
LABEL_33:
          v76 = *v66;
          v77 = *(_DWORD *)(v75 + 4 * v74);
          if (*v66 < v77)
          {
            v78 = *(unsigned int *)(a2 + 16);
            v79 = *(_QWORD *)(a1 + 2752) + 8 * v73;
            *(_QWORD *)&v80 = *(_QWORD *)(v79 + 16);
            v81 = *(_QWORD *)a2 + 8 * (v76 + (_DWORD)v78 * v77);
            v82 = *(int64x2_t *)(v79 + 24);
            *(_QWORD *)&v83 = *(_QWORD *)(v79 + 64);
            v84 = *(int64x2_t *)(v79 + 48);
            v85 = *(int64x2_t *)(v79 + 72);
            *(_QWORD *)&v86 = *(_QWORD *)(v79 + 112);
            v87 = *(int64x2_t *)(v79 + 96);
            v88 = *(int64x2_t *)(v79 + 120);
            *(_QWORD *)&v89 = *(_QWORD *)(v79 + 160);
            v90 = *(int64x2_t *)(v79 + 144);
            v91 = *(int64x2_t *)(v79 + 168);
            v92 = *(_QWORD *)(v79 + 208);
            v93 = *(_OWORD *)(v79 + 192);
            v94 = vzip1q_s64(*(int64x2_t *)v79, v82);
            v95 = vzip2q_s64(*(int64x2_t *)v79, v82);
            *((_QWORD *)&v80 + 1) = *(_QWORD *)(v79 + 40);
            *((_QWORD *)&v83 + 1) = *(_QWORD *)(v79 + 88);
            *((_QWORD *)&v86 + 1) = *(_QWORD *)(v79 + 136);
            *((_QWORD *)&v89 + 1) = *(_QWORD *)(v79 + 184);
            *(int64x2_t *)(v81 + 32) = vzip1q_s64(v87, v88);
            *(int64x2_t *)(v81 + 48) = vzip1q_s64(v90, v91);
            *(_QWORD *)(v81 + 64) = v93;
            *(int64x2_t *)v81 = v94;
            *(int64x2_t *)(v81 + 16) = vzip1q_s64(v84, v85);
            v96 = (int64x2_t *)(v81 + 8 * v78);
            v96[2] = vzip2q_s64(v87, v88);
            v96[3] = vzip2q_s64(v90, v91);
            *v96 = v95;
            v96[1] = vzip2q_s64(v84, v85);
            v96[4].i64[0] = *((_QWORD *)&v93 + 1);
            v97 = v81 + 16 * v78;
            *(_QWORD *)(v97 + 64) = v92;
            *(_OWORD *)(v97 + 32) = v86;
            *(_OWORD *)(v97 + 48) = v89;
            *(_OWORD *)v97 = v80;
            *(_OWORD *)(v97 + 16) = v83;
            goto LABEL_37;
          }
        }
        else
        {
LABEL_35:
          v77 = *(_DWORD *)(v75 + 4 * v74);
          v76 = *v66;
        }
        v98 = *(_QWORD *)(a1 + 2752) + 8 * v73;
        v99 = *(unsigned int *)(a2 + 16);
        v100 = *(_OWORD *)v98;
        v101 = *(_QWORD *)a2 + 8 * (v77 + (_DWORD)v99 * v76);
        v102 = *(_OWORD *)(v98 + 24);
        v103 = *(_QWORD *)(v98 + 40);
        v104 = *(_OWORD *)(v98 + 48);
        v105 = *(_QWORD *)(v98 + 64);
        v106 = *(_OWORD *)(v98 + 72);
        v107 = *(_QWORD *)(v98 + 88);
        v108 = *(_OWORD *)(v98 + 96);
        v109 = *(_QWORD *)(v98 + 112);
        v110 = *(_OWORD *)(v98 + 120);
        v111 = *(_QWORD *)(v98 + 136);
        v112 = *(_OWORD *)(v98 + 144);
        v113 = *(_QWORD *)(v98 + 160);
        v114 = *(_OWORD *)(v98 + 168);
        v115 = *(_QWORD *)(v98 + 184);
        v116 = *(_OWORD *)(v98 + 192);
        v117 = *(_QWORD *)(v98 + 208);
        *(_QWORD *)(v101 + 16) = *(_QWORD *)(v98 + 16);
        *(_OWORD *)v101 = v100;
        v118 = v101 + 8 * v99;
        *(_QWORD *)(v118 + 16) = v103;
        *(_OWORD *)v118 = v102;
        v119 = v101 + 16 * v99;
        *(_QWORD *)(v119 + 16) = v105;
        *(_OWORD *)v119 = v104;
        v120 = v101 + 24 * v99;
        *(_QWORD *)(v120 + 16) = v107;
        *(_OWORD *)v120 = v106;
        v121 = v101 + 32 * v99;
        *(_QWORD *)(v121 + 16) = v109;
        *(_OWORD *)v121 = v108;
        v122 = v101 + 40 * v99;
        *(_QWORD *)(v122 + 16) = v111;
        *(_OWORD *)v122 = v110;
        v123 = v101 + 48 * v99;
        *(_QWORD *)(v123 + 16) = v113;
        *(_OWORD *)v123 = v112;
        v124 = v101 + 56 * v99;
        *(_QWORD *)(v124 + 16) = v115;
        *(_OWORD *)v124 = v114;
        v125 = v101 + (v99 << 6);
        *(_QWORD *)(v125 + 16) = v117;
        *(_OWORD *)v125 = v116;
LABEL_37:
        v126 = v69 + 1;
        while (v126 != v72)
        {
          ++v71;
          v127 = *v126++;
          v73 = v127;
          if (v127 != -1)
          {
            v69 = v126 - 1;
            v74 = v71;
            v75 = a3[27];
            if (v10)
              goto LABEL_33;
            goto LABEL_35;
          }
        }
        v64 = *(_DWORD *)(a1 + 2748);
      }
    }
    ++v65;
    ++v66;
  }
  while (v65 < v64);
  v10 = *a5;
LABEL_47:
  v131 = *(_DWORD *)(a1 + 4188);
  if (!v131)
    goto LABEL_70;
  v132 = 0;
  v133 = a4[6];
  while (2)
  {
    v134 = *(_QWORD *)(a1 + 4264);
    v135 = *(_DWORD *)(a1 + 4288) * v132;
    v136 = (uint64_t *)(v134 + 8 * v135);
    v137 = *(_DWORD *)(a1 + 4184);
    if (v137 && *v136 == -1)
    {
      v138 = 0;
      v181 = 8 * (v137 + v135) - 8 * v135 - 8;
      v182 = v134 + 8 * v135;
      while (v181)
      {
        v136 = (uint64_t *)(v182 + 8);
        ++v138;
        v183 = *(_QWORD *)(v182 + 8);
        v181 -= 8;
        v182 += 8;
        if (v183 != -1)
          goto LABEL_54;
      }
      goto LABEL_50;
    }
    v138 = 0;
LABEL_54:
    v139 = (uint64_t *)(v134 + 8 * (v135 + v137));
    if (v136 == v139)
      goto LABEL_50;
    v140 = *v136;
    v141 = v138;
    v142 = a3[27];
    if (!v10)
    {
LABEL_58:
      v144 = *(_DWORD *)(v142 + 4 * v141);
      v143 = *v133;
      goto LABEL_59;
    }
LABEL_56:
    v143 = *v133;
    v144 = *(_DWORD *)(v142 + 4 * v141);
    if (*v133 >= v144)
    {
LABEL_59:
      v160 = *(_QWORD *)(a1 + 4192) + 8 * v140;
      v161 = *(unsigned int *)(a2 + 16);
      v162 = *(_OWORD *)v160;
      v163 = *(_QWORD *)a2 + 8 * (v144 + (_DWORD)v161 * v143);
      v164 = *(_OWORD *)(v160 + 24);
      v165 = *(_QWORD *)(v160 + 40);
      v166 = *(_OWORD *)(v160 + 48);
      v167 = *(_QWORD *)(v160 + 64);
      v168 = *(_OWORD *)(v160 + 72);
      v169 = *(_QWORD *)(v160 + 88);
      v170 = *(_OWORD *)(v160 + 96);
      v171 = *(_QWORD *)(v160 + 112);
      v172 = *(_OWORD *)(v160 + 120);
      v173 = *(_QWORD *)(v160 + 136);
      *(_QWORD *)(v163 + 16) = *(_QWORD *)(v160 + 16);
      *(_OWORD *)v163 = v162;
      v174 = v163 + 8 * v161;
      *(_QWORD *)(v174 + 16) = v165;
      *(_OWORD *)v174 = v164;
      v175 = v163 + 16 * v161;
      *(_QWORD *)(v175 + 16) = v167;
      *(_OWORD *)v175 = v166;
      v176 = v163 + 24 * v161;
      *(_QWORD *)(v176 + 16) = v169;
      *(_OWORD *)v176 = v168;
      v177 = v163 + 32 * v161;
      *(_QWORD *)(v177 + 16) = v171;
      *(_OWORD *)v177 = v170;
      v178 = v163 + 40 * v161;
      *(_QWORD *)(v178 + 16) = v173;
      *(_OWORD *)v178 = v172;
      goto LABEL_60;
    }
    v145 = *(_QWORD *)(a1 + 4192) + 8 * v140;
    v146 = *(unsigned int *)(a2 + 16);
    v147 = *(_QWORD *)a2 + 8 * (v143 + (_DWORD)v146 * v144);
    *(_QWORD *)&v148 = *(_QWORD *)(v145 + 16);
    v149 = *(int64x2_t *)(v145 + 24);
    *(_QWORD *)&v150 = *(_QWORD *)(v145 + 64);
    v151 = *(int64x2_t *)(v145 + 48);
    v152 = *(int64x2_t *)(v145 + 72);
    *(_QWORD *)&v153 = *(_QWORD *)(v145 + 112);
    v154 = *(int64x2_t *)(v145 + 96);
    v155 = *(int64x2_t *)(v145 + 120);
    v156 = vzip1q_s64(*(int64x2_t *)v145, v149);
    v157 = vzip2q_s64(*(int64x2_t *)v145, v149);
    *((_QWORD *)&v148 + 1) = *(_QWORD *)(v145 + 40);
    *((_QWORD *)&v150 + 1) = *(_QWORD *)(v145 + 88);
    *((_QWORD *)&v153 + 1) = *(_QWORD *)(v145 + 136);
    *(int64x2_t *)(v147 + 16) = vzip1q_s64(v151, v152);
    *(int64x2_t *)(v147 + 32) = vzip1q_s64(v154, v155);
    *(int64x2_t *)v147 = v156;
    v158 = (int64x2_t *)(v147 + 8 * v146);
    v158[1] = vzip1q_s64(vdupq_laneq_s64(v151, 1), vdupq_laneq_s64(v152, 1));
    v158[2] = vzip2q_s64(v154, v155);
    *v158 = v157;
    v159 = (_OWORD *)(v147 + 16 * v146);
    v159[1] = v150;
    v159[2] = v153;
    *v159 = v148;
LABEL_60:
    v179 = v136 + 1;
    while (v179 != v139)
    {
      ++v138;
      v180 = *v179++;
      v140 = v180;
      if (v180 != -1)
      {
        v136 = v179 - 1;
        v141 = v138;
        v142 = a3[27];
        if (v10)
          goto LABEL_56;
        goto LABEL_58;
      }
    }
    v131 = *(_DWORD *)(a1 + 4188);
LABEL_50:
    ++v132;
    ++v133;
    if (v132 < v131)
      continue;
    break;
  }
  v10 = *a5;
LABEL_70:
  v184 = *(_DWORD *)(a1 + 5628);
  if (!v184)
    goto LABEL_93;
  v185 = 0;
  v186 = a4[9];
  while (2)
  {
    v187 = *(_QWORD *)(a1 + 5704);
    v188 = *(_DWORD *)(a1 + 5728) * v185;
    v189 = (uint64_t *)(v187 + 8 * v188);
    v190 = *(_DWORD *)(a1 + 5624);
    if (v190 && *v189 == -1)
    {
      v191 = 0;
      v234 = 8 * (v190 + v188) - 8 * v188 - 8;
      v235 = v187 + 8 * v188;
      while (v234)
      {
        v189 = (uint64_t *)(v235 + 8);
        ++v191;
        v236 = *(_QWORD *)(v235 + 8);
        v234 -= 8;
        v235 += 8;
        if (v236 != -1)
          goto LABEL_77;
      }
      goto LABEL_73;
    }
    v191 = 0;
LABEL_77:
    v192 = (uint64_t *)(v187 + 8 * (v188 + v190));
    if (v189 == v192)
      goto LABEL_73;
    v193 = *v189;
    v194 = v191;
    v195 = a3[27];
    if (!v10)
    {
LABEL_81:
      v197 = *(_DWORD *)(v195 + 4 * v194);
      v196 = *v186;
      goto LABEL_82;
    }
LABEL_79:
    v196 = *v186;
    v197 = *(_DWORD *)(v195 + 4 * v194);
    if (*v186 >= v197)
    {
LABEL_82:
      v213 = *(_QWORD *)(a1 + 5632) + 8 * v193;
      v214 = *(unsigned int *)(a2 + 16);
      v215 = *(_OWORD *)v213;
      v216 = *(_QWORD *)a2 + 8 * (v197 + (_DWORD)v214 * v196);
      v217 = *(_OWORD *)(v213 + 24);
      v218 = *(_QWORD *)(v213 + 40);
      v219 = *(_OWORD *)(v213 + 48);
      v220 = *(_QWORD *)(v213 + 64);
      v221 = *(_OWORD *)(v213 + 72);
      v222 = *(_QWORD *)(v213 + 88);
      v223 = *(_OWORD *)(v213 + 96);
      v224 = *(_QWORD *)(v213 + 112);
      v225 = *(_OWORD *)(v213 + 120);
      v226 = *(_QWORD *)(v213 + 136);
      *(_QWORD *)(v216 + 16) = *(_QWORD *)(v213 + 16);
      *(_OWORD *)v216 = v215;
      v227 = v216 + 8 * v214;
      *(_QWORD *)(v227 + 16) = v218;
      *(_OWORD *)v227 = v217;
      v228 = v216 + 16 * v214;
      *(_QWORD *)(v228 + 16) = v220;
      *(_OWORD *)v228 = v219;
      v229 = v216 + 24 * v214;
      *(_QWORD *)(v229 + 16) = v222;
      *(_OWORD *)v229 = v221;
      v230 = v216 + 32 * v214;
      *(_QWORD *)(v230 + 16) = v224;
      *(_OWORD *)v230 = v223;
      v231 = v216 + 40 * v214;
      *(_QWORD *)(v231 + 16) = v226;
      *(_OWORD *)v231 = v225;
      goto LABEL_83;
    }
    v198 = *(_QWORD *)(a1 + 5632) + 8 * v193;
    v199 = *(unsigned int *)(a2 + 16);
    v200 = *(_QWORD *)a2 + 8 * (v196 + (_DWORD)v199 * v197);
    *(_QWORD *)&v201 = *(_QWORD *)(v198 + 16);
    v202 = *(int64x2_t *)(v198 + 24);
    *(_QWORD *)&v203 = *(_QWORD *)(v198 + 64);
    v204 = *(int64x2_t *)(v198 + 48);
    v205 = *(int64x2_t *)(v198 + 72);
    *(_QWORD *)&v206 = *(_QWORD *)(v198 + 112);
    v207 = *(int64x2_t *)(v198 + 96);
    v208 = *(int64x2_t *)(v198 + 120);
    v209 = vzip1q_s64(*(int64x2_t *)v198, v202);
    v210 = vzip2q_s64(*(int64x2_t *)v198, v202);
    *((_QWORD *)&v201 + 1) = *(_QWORD *)(v198 + 40);
    *((_QWORD *)&v203 + 1) = *(_QWORD *)(v198 + 88);
    *((_QWORD *)&v206 + 1) = *(_QWORD *)(v198 + 136);
    *(int64x2_t *)(v200 + 16) = vzip1q_s64(v204, v205);
    *(int64x2_t *)(v200 + 32) = vzip1q_s64(v207, v208);
    *(int64x2_t *)v200 = v209;
    v211 = (int64x2_t *)(v200 + 8 * v199);
    v211[1] = vzip1q_s64(vdupq_laneq_s64(v204, 1), vdupq_laneq_s64(v205, 1));
    v211[2] = vzip2q_s64(v207, v208);
    *v211 = v210;
    v212 = (_OWORD *)(v200 + 16 * v199);
    v212[1] = v203;
    v212[2] = v206;
    *v212 = v201;
LABEL_83:
    v232 = v189 + 1;
    while (v232 != v192)
    {
      ++v191;
      v233 = *v232++;
      v193 = v233;
      if (v233 != -1)
      {
        v189 = v232 - 1;
        v194 = v191;
        v195 = a3[27];
        if (v10)
          goto LABEL_79;
        goto LABEL_81;
      }
    }
    v184 = *(_DWORD *)(a1 + 5628);
LABEL_73:
    ++v185;
    ++v186;
    if (v185 < v184)
      continue;
    break;
  }
  v10 = *a5;
LABEL_93:
  v237 = *(_DWORD *)(a1 + 7068);
  if (!v237)
    goto LABEL_116;
  v238 = 0;
  v239 = a4[12];
  while (2)
  {
    v240 = *(_QWORD *)(a1 + 7144);
    v241 = *(_DWORD *)(a1 + 7168) * v238;
    v242 = (uint64_t *)(v240 + 8 * v241);
    v243 = *(_DWORD *)(a1 + 7064);
    if (v243 && *v242 == -1)
    {
      v244 = 0;
      v270 = 8 * (v243 + v241) - 8 * v241 - 8;
      v271 = v240 + 8 * v241;
      while (v270)
      {
        v242 = (uint64_t *)(v271 + 8);
        ++v244;
        v272 = *(_QWORD *)(v271 + 8);
        v270 -= 8;
        v271 += 8;
        if (v272 != -1)
          goto LABEL_100;
      }
      goto LABEL_96;
    }
    v244 = 0;
LABEL_100:
    v245 = (uint64_t *)(v240 + 8 * (v241 + v243));
    if (v242 == v245)
      goto LABEL_96;
    v246 = *v242;
    v247 = v244;
    v248 = a3[27];
    if (!v10)
    {
LABEL_104:
      v250 = *(_DWORD *)(v248 + 4 * v247);
      v249 = *v239;
      goto LABEL_105;
    }
LABEL_102:
    v249 = *v239;
    v250 = *(_DWORD *)(v248 + 4 * v247);
    if (*v239 >= v250)
    {
LABEL_105:
      v262 = *(_QWORD *)(a1 + 7072) + 8 * v246;
      v252 = *(unsigned int *)(a2 + 16);
      v253 = *(_QWORD *)a2 + 8 * (v250 + (_DWORD)v252 * v249);
      v263 = *(_OWORD *)v262;
      v264 = *(_OWORD *)(v262 + 24);
      v265 = *(_QWORD *)(v262 + 40);
      v254 = *(int8x16_t *)(v262 + 48);
      v258 = *(_QWORD *)(v262 + 64);
      v255 = vextq_s8(v254, v254, 8uLL).u64[0];
      *(_QWORD *)(v253 + 16) = *(_QWORD *)(v262 + 16);
      *(_OWORD *)v253 = v263;
      v266 = v253 + 8 * v252;
      *(_QWORD *)(v266 + 16) = v265;
      *(_OWORD *)v266 = v264;
      goto LABEL_106;
    }
    v251 = *(_QWORD *)(a1 + 7072) + 8 * v246;
    v252 = *(unsigned int *)(a2 + 16);
    v253 = *(_QWORD *)a2 + 8 * (v249 + (_DWORD)v252 * v250);
    v254.i64[0] = *(_QWORD *)(v251 + 16);
    v255 = *(_QWORD *)(v251 + 40);
    v256 = *(int64x2_t *)(v251 + 24);
    v257 = *(_OWORD *)(v251 + 48);
    v258 = *(_QWORD *)(v251 + 64);
    v259 = vzip1q_s64(*(int64x2_t *)v251, v256);
    v260 = vzip2q_s64(*(int64x2_t *)v251, v256);
    *(_QWORD *)(v253 + 16) = v257;
    *(int64x2_t *)v253 = v259;
    v261 = (int64x2_t *)(v253 + 8 * v252);
    *v261 = v260;
    v261[1].i64[0] = *((_QWORD *)&v257 + 1);
LABEL_106:
    v267 = (int8x16_t *)(v253 + 16 * v252);
    v267[1].i64[0] = v258;
    v254.i64[1] = v255;
    *v267 = v254;
    v268 = v242 + 1;
    while (v268 != v245)
    {
      ++v244;
      v269 = *v268++;
      v246 = v269;
      if (v269 != -1)
      {
        v242 = v268 - 1;
        v247 = v244;
        v248 = a3[27];
        if (v10)
          goto LABEL_102;
        goto LABEL_104;
      }
    }
    v237 = *(_DWORD *)(a1 + 7068);
LABEL_96:
    ++v238;
    ++v239;
    if (v238 < v237)
      continue;
    break;
  }
  v10 = *a5;
LABEL_116:
  v273 = *(_DWORD *)(a1 + 8508);
  if (!v273)
    goto LABEL_139;
  v274 = 0;
  v275 = a4[15];
  while (2)
  {
    v276 = *(_QWORD *)(a1 + 8584);
    v277 = *(_DWORD *)(a1 + 8608) * v274;
    v278 = (uint64_t *)(v276 + 8 * v277);
    v279 = *(_DWORD *)(a1 + 8504);
    if (v279 && *v278 == -1)
    {
      v280 = 0;
      v297 = 8 * (v279 + v277) - 8 * v277 - 8;
      v298 = v276 + 8 * v277;
      while (v297)
      {
        v278 = (uint64_t *)(v298 + 8);
        ++v280;
        v299 = *(_QWORD *)(v298 + 8);
        v297 -= 8;
        v298 += 8;
        if (v299 != -1)
          goto LABEL_123;
      }
      goto LABEL_119;
    }
    v280 = 0;
LABEL_123:
    v281 = (uint64_t *)(v276 + 8 * (v277 + v279));
    if (v278 == v281)
      goto LABEL_119;
    v282 = *v278;
    v283 = v280;
    v284 = a3[27];
    if (!v10)
    {
LABEL_127:
      v286 = *(_DWORD *)(v284 + 4 * v283);
      v285 = *v275;
      goto LABEL_128;
    }
LABEL_125:
    v285 = *v275;
    v286 = *(_DWORD *)(v284 + 4 * v283);
    if (*v275 >= v286)
    {
LABEL_128:
      v292 = *(_QWORD *)(a1 + 8512) + 8 * v282;
      v293 = *(_QWORD *)a2 + 8 * (v286 + *(_DWORD *)(a2 + 16) * v285);
      v294 = *(_OWORD *)v292;
      *(_QWORD *)(v293 + 16) = *(_QWORD *)(v292 + 16);
      *(_OWORD *)v293 = v294;
      goto LABEL_129;
    }
    v287 = (int8x16_t *)(*(_QWORD *)(a1 + 8512) + 8 * v282);
    v288 = *(unsigned int *)(a2 + 16);
    v289 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v285 + (_DWORD)v288 * v286));
    v290 = v287[1].i64[0];
    v291 = vextq_s8(*v287, *v287, 8uLL).u64[0];
    *v289 = v287->i64[0];
    v289[v288] = v291;
    v289[2 * v288] = v290;
LABEL_129:
    v295 = v278 + 1;
    while (v295 != v281)
    {
      ++v280;
      v296 = *v295++;
      v282 = v296;
      if (v296 != -1)
      {
        v278 = v295 - 1;
        v283 = v280;
        v284 = a3[27];
        if (v10)
          goto LABEL_125;
        goto LABEL_127;
      }
    }
    v273 = *(_DWORD *)(a1 + 8508);
LABEL_119:
    ++v274;
    ++v275;
    if (v274 < v273)
      continue;
    break;
  }
  v10 = *a5;
LABEL_139:
  v300 = *(_DWORD *)(a1 + 9948);
  if (!v300)
    goto LABEL_162;
  v301 = 0;
  v302 = a4[18];
  while (2)
  {
    v303 = *(_QWORD *)(a1 + 10024);
    v304 = *(_DWORD *)(a1 + 10048) * v301;
    v305 = (uint64_t *)(v303 + 8 * v304);
    v306 = *(_DWORD *)(a1 + 9944);
    if (v306 && *v305 == -1)
    {
      v307 = 0;
      v333 = 8 * (v306 + v304) - 8 * v304 - 8;
      v334 = v303 + 8 * v304;
      while (v333)
      {
        v305 = (uint64_t *)(v334 + 8);
        ++v307;
        v335 = *(_QWORD *)(v334 + 8);
        v333 -= 8;
        v334 += 8;
        if (v335 != -1)
          goto LABEL_146;
      }
      goto LABEL_142;
    }
    v307 = 0;
LABEL_146:
    v308 = (uint64_t *)(v303 + 8 * (v304 + v306));
    if (v305 == v308)
      goto LABEL_142;
    v309 = *v305;
    v310 = v307;
    v311 = a3[27];
    if (!v10)
    {
LABEL_150:
      v313 = *(_DWORD *)(v311 + 4 * v310);
      v312 = *v302;
      goto LABEL_151;
    }
LABEL_148:
    v312 = *v302;
    v313 = *(_DWORD *)(v311 + 4 * v310);
    if (*v302 >= v313)
    {
LABEL_151:
      v325 = *(_QWORD *)(a1 + 9952) + 8 * v309;
      v315 = *(unsigned int *)(a2 + 16);
      v316 = *(_QWORD *)a2 + 8 * (v313 + (_DWORD)v315 * v312);
      v326 = *(_OWORD *)v325;
      v327 = *(_OWORD *)(v325 + 24);
      v328 = *(_QWORD *)(v325 + 40);
      v317 = *(int8x16_t *)(v325 + 48);
      v321 = *(_QWORD *)(v325 + 64);
      v318 = vextq_s8(v317, v317, 8uLL).u64[0];
      *(_QWORD *)(v316 + 16) = *(_QWORD *)(v325 + 16);
      *(_OWORD *)v316 = v326;
      v329 = v316 + 8 * v315;
      *(_QWORD *)(v329 + 16) = v328;
      *(_OWORD *)v329 = v327;
      goto LABEL_152;
    }
    v314 = *(_QWORD *)(a1 + 9952) + 8 * v309;
    v315 = *(unsigned int *)(a2 + 16);
    v316 = *(_QWORD *)a2 + 8 * (v312 + (_DWORD)v315 * v313);
    v317.i64[0] = *(_QWORD *)(v314 + 16);
    v318 = *(_QWORD *)(v314 + 40);
    v319 = *(int64x2_t *)(v314 + 24);
    v320 = *(_OWORD *)(v314 + 48);
    v321 = *(_QWORD *)(v314 + 64);
    v322 = vzip1q_s64(*(int64x2_t *)v314, v319);
    v323 = vzip2q_s64(*(int64x2_t *)v314, v319);
    *(_QWORD *)(v316 + 16) = v320;
    *(int64x2_t *)v316 = v322;
    v324 = (int64x2_t *)(v316 + 8 * v315);
    *v324 = v323;
    v324[1].i64[0] = *((_QWORD *)&v320 + 1);
LABEL_152:
    v330 = (int8x16_t *)(v316 + 16 * v315);
    v330[1].i64[0] = v321;
    v317.i64[1] = v318;
    *v330 = v317;
    v331 = v305 + 1;
    while (v331 != v308)
    {
      ++v307;
      v332 = *v331++;
      v309 = v332;
      if (v332 != -1)
      {
        v305 = v331 - 1;
        v310 = v307;
        v311 = a3[27];
        if (v10)
          goto LABEL_148;
        goto LABEL_150;
      }
    }
    v300 = *(_DWORD *)(a1 + 9948);
LABEL_142:
    ++v301;
    ++v302;
    if (v301 < v300)
      continue;
    break;
  }
  v10 = *a5;
LABEL_162:
  v336 = *(_DWORD *)(a1 + 11388);
  if (!v336)
    goto LABEL_185;
  v337 = 0;
  v338 = a4[21];
  while (2)
  {
    v339 = *(_QWORD *)(a1 + 11464);
    v340 = *(_DWORD *)(a1 + 11488) * v337;
    v341 = (uint64_t *)(v339 + 8 * v340);
    v342 = *(_DWORD *)(a1 + 11384);
    if (v342 && *v341 == -1)
    {
      v343 = 0;
      v377 = 8 * (v342 + v340) - 8 * v340 - 8;
      v378 = v339 + 8 * v340;
      while (v377)
      {
        v341 = (uint64_t *)(v378 + 8);
        ++v343;
        v379 = *(_QWORD *)(v378 + 8);
        v377 -= 8;
        v378 += 8;
        if (v379 != -1)
          goto LABEL_169;
      }
      goto LABEL_165;
    }
    v343 = 0;
LABEL_169:
    v344 = (uint64_t *)(v339 + 8 * (v340 + v342));
    if (v341 == v344)
      goto LABEL_165;
    v345 = *v341;
    v346 = v343;
    v347 = a3[27];
    if (!v10)
    {
LABEL_173:
      v349 = *(_DWORD *)(v347 + 4 * v346);
      v348 = *v338;
      goto LABEL_174;
    }
LABEL_171:
    v348 = *v338;
    v349 = *(_DWORD *)(v347 + 4 * v346);
    if (*v338 >= v349)
    {
LABEL_174:
      v362 = *(_QWORD *)(a1 + 11392) + 8 * v345;
      v363 = *(unsigned int *)(a2 + 16);
      v364 = *(_OWORD *)v362;
      v365 = *(_QWORD *)a2 + 8 * (v349 + (_DWORD)v363 * v348);
      v366 = *(_OWORD *)(v362 + 24);
      v367 = *(_QWORD *)(v362 + 40);
      v368 = *(_OWORD *)(v362 + 48);
      v369 = *(_QWORD *)(v362 + 64);
      v370 = *(_OWORD *)(v362 + 72);
      v371 = *(_QWORD *)(v362 + 88);
      *(_QWORD *)(v365 + 16) = *(_QWORD *)(v362 + 16);
      *(_OWORD *)v365 = v364;
      v372 = v365 + 8 * v363;
      *(_QWORD *)(v372 + 16) = v367;
      *(_OWORD *)v372 = v366;
      v373 = v365 + 16 * v363;
      *(_QWORD *)(v373 + 16) = v369;
      *(_OWORD *)v373 = v368;
      v374 = v365 + 24 * v363;
      *(_QWORD *)(v374 + 16) = v371;
      *(_OWORD *)v374 = v370;
      goto LABEL_175;
    }
    v350 = *(_QWORD *)(a1 + 11392) + 8 * v345;
    v351 = *(unsigned int *)(a2 + 16);
    v352 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v348 + (_DWORD)v351 * v349));
    v353.i64[0] = *(_QWORD *)(v350 + 16);
    v354 = *(int64x2_t *)(v350 + 24);
    v355.i64[0] = *(_QWORD *)(v350 + 64);
    v356 = *(int64x2_t *)(v350 + 48);
    v357 = vzip1q_s64(*(int64x2_t *)v350, v354);
    v358 = vzip1q_s64(v356, *(int64x2_t *)(v350 + 72));
    v359 = vzip2q_s64(*(int64x2_t *)v350, v354);
    v354.i64[0] = vdupq_laneq_s64(v356, 1).u64[0];
    v354.i64[1] = *(_QWORD *)(v350 + 80);
    v353.i64[1] = *(_QWORD *)(v350 + 40);
    v355.i64[1] = *(_QWORD *)(v350 + 88);
    *v352 = v357;
    v352[1] = v358;
    v360 = (int64x2_t *)((char *)v352 + 8 * v351);
    *v360 = v359;
    v360[1] = v354;
    v361 = &v352[v351];
    *v361 = v353;
    v361[1] = v355;
LABEL_175:
    v375 = v341 + 1;
    while (v375 != v344)
    {
      ++v343;
      v376 = *v375++;
      v345 = v376;
      if (v376 != -1)
      {
        v341 = v375 - 1;
        v346 = v343;
        v347 = a3[27];
        if (v10)
          goto LABEL_171;
        goto LABEL_173;
      }
    }
    v336 = *(_DWORD *)(a1 + 11388);
LABEL_165:
    ++v337;
    ++v338;
    if (v337 < v336)
      continue;
    break;
  }
  v10 = *a5;
LABEL_185:
  v380 = *(_DWORD *)(a1 + 12828);
  if (!v380)
    goto LABEL_208;
  v381 = 0;
  v382 = a4[24];
  while (2)
  {
    v383 = *(_QWORD *)(a1 + 12904);
    v384 = *(_DWORD *)(a1 + 12928) * v381;
    v385 = (uint64_t *)(v383 + 8 * v384);
    v386 = *(_DWORD *)(a1 + 12824);
    if (v386 && *v385 == -1)
    {
      v387 = 0;
      v421 = 8 * (v386 + v384) - 8 * v384 - 8;
      v422 = v383 + 8 * v384;
      while (v421)
      {
        v385 = (uint64_t *)(v422 + 8);
        ++v387;
        v423 = *(_QWORD *)(v422 + 8);
        v421 -= 8;
        v422 += 8;
        if (v423 != -1)
          goto LABEL_192;
      }
      goto LABEL_188;
    }
    v387 = 0;
LABEL_192:
    v388 = (uint64_t *)(v383 + 8 * (v384 + v386));
    if (v385 == v388)
      goto LABEL_188;
    v389 = *v385;
    v390 = v387;
    v391 = a3[27];
    if (!v10)
    {
LABEL_196:
      v393 = *(_DWORD *)(v391 + 4 * v390);
      v392 = *v382;
      goto LABEL_197;
    }
LABEL_194:
    v392 = *v382;
    v393 = *(_DWORD *)(v391 + 4 * v390);
    if (*v382 >= v393)
    {
LABEL_197:
      v406 = *(_QWORD *)(a1 + 12832) + 8 * v389;
      v407 = *(unsigned int *)(a2 + 16);
      v408 = *(_OWORD *)v406;
      v409 = *(_QWORD *)a2 + 8 * (v393 + (_DWORD)v407 * v392);
      v410 = *(_OWORD *)(v406 + 24);
      v411 = *(_QWORD *)(v406 + 40);
      v412 = *(_OWORD *)(v406 + 48);
      v413 = *(_QWORD *)(v406 + 64);
      v414 = *(_OWORD *)(v406 + 72);
      v415 = *(_QWORD *)(v406 + 88);
      *(_QWORD *)(v409 + 16) = *(_QWORD *)(v406 + 16);
      *(_OWORD *)v409 = v408;
      v416 = v409 + 8 * v407;
      *(_QWORD *)(v416 + 16) = v411;
      *(_OWORD *)v416 = v410;
      v417 = v409 + 16 * v407;
      *(_QWORD *)(v417 + 16) = v413;
      *(_OWORD *)v417 = v412;
      v418 = v409 + 24 * v407;
      *(_QWORD *)(v418 + 16) = v415;
      *(_OWORD *)v418 = v414;
      goto LABEL_198;
    }
    v394 = *(_QWORD *)(a1 + 12832) + 8 * v389;
    v395 = *(unsigned int *)(a2 + 16);
    v396 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v392 + (_DWORD)v395 * v393));
    v397.i64[0] = *(_QWORD *)(v394 + 16);
    v398 = *(int64x2_t *)(v394 + 24);
    v399.i64[0] = *(_QWORD *)(v394 + 64);
    v400 = *(int64x2_t *)(v394 + 48);
    v401 = vzip1q_s64(*(int64x2_t *)v394, v398);
    v402 = vzip1q_s64(v400, *(int64x2_t *)(v394 + 72));
    v403 = vzip2q_s64(*(int64x2_t *)v394, v398);
    v398.i64[0] = vdupq_laneq_s64(v400, 1).u64[0];
    v398.i64[1] = *(_QWORD *)(v394 + 80);
    v397.i64[1] = *(_QWORD *)(v394 + 40);
    v399.i64[1] = *(_QWORD *)(v394 + 88);
    *v396 = v401;
    v396[1] = v402;
    v404 = (int64x2_t *)((char *)v396 + 8 * v395);
    *v404 = v403;
    v404[1] = v398;
    v405 = &v396[v395];
    *v405 = v397;
    v405[1] = v399;
LABEL_198:
    v419 = v385 + 1;
    while (v419 != v388)
    {
      ++v387;
      v420 = *v419++;
      v389 = v420;
      if (v420 != -1)
      {
        v385 = v419 - 1;
        v390 = v387;
        v391 = a3[27];
        if (v10)
          goto LABEL_194;
        goto LABEL_196;
      }
    }
    v380 = *(_DWORD *)(a1 + 12828);
LABEL_188:
    ++v381;
    ++v382;
    if (v381 < v380)
      continue;
    break;
  }
  v10 = *a5;
LABEL_208:
  v424 = *(_DWORD *)(a1 + 14268);
  if (!v424)
    goto LABEL_231;
  v425 = 0;
  v426 = a4[27];
  while (2)
  {
    v427 = *(_QWORD *)(a1 + 14344);
    v428 = *(_DWORD *)(a1 + 14368) * v425;
    v429 = (uint64_t *)(v427 + 8 * v428);
    v430 = *(_DWORD *)(a1 + 14264);
    if (v430 && *v429 == -1)
    {
      v431 = 0;
      v457 = 8 * (v430 + v428) - 8 * v428 - 8;
      v458 = v427 + 8 * v428;
      while (v457)
      {
        v429 = (uint64_t *)(v458 + 8);
        ++v431;
        v459 = *(_QWORD *)(v458 + 8);
        v457 -= 8;
        v458 += 8;
        if (v459 != -1)
          goto LABEL_215;
      }
      goto LABEL_211;
    }
    v431 = 0;
LABEL_215:
    v432 = (uint64_t *)(v427 + 8 * (v428 + v430));
    if (v429 == v432)
      goto LABEL_211;
    v433 = *v429;
    v434 = v431;
    v435 = a3[27];
    if (!v10)
    {
LABEL_219:
      v437 = *(_DWORD *)(v435 + 4 * v434);
      v436 = *v426;
      goto LABEL_220;
    }
LABEL_217:
    v436 = *v426;
    v437 = *(_DWORD *)(v435 + 4 * v434);
    if (*v426 >= v437)
    {
LABEL_220:
      v449 = *(_QWORD *)(a1 + 14272) + 8 * v433;
      v439 = *(unsigned int *)(a2 + 16);
      v440 = *(_QWORD *)a2 + 8 * (v437 + (_DWORD)v439 * v436);
      v450 = *(_OWORD *)v449;
      v451 = *(_OWORD *)(v449 + 24);
      v452 = *(_QWORD *)(v449 + 40);
      v441 = *(int8x16_t *)(v449 + 48);
      v445 = *(_QWORD *)(v449 + 64);
      v442 = vextq_s8(v441, v441, 8uLL).u64[0];
      *(_QWORD *)(v440 + 16) = *(_QWORD *)(v449 + 16);
      *(_OWORD *)v440 = v450;
      v453 = v440 + 8 * v439;
      *(_QWORD *)(v453 + 16) = v452;
      *(_OWORD *)v453 = v451;
      goto LABEL_221;
    }
    v438 = *(_QWORD *)(a1 + 14272) + 8 * v433;
    v439 = *(unsigned int *)(a2 + 16);
    v440 = *(_QWORD *)a2 + 8 * (v436 + (_DWORD)v439 * v437);
    v441.i64[0] = *(_QWORD *)(v438 + 16);
    v442 = *(_QWORD *)(v438 + 40);
    v443 = *(int64x2_t *)(v438 + 24);
    v444 = *(_OWORD *)(v438 + 48);
    v445 = *(_QWORD *)(v438 + 64);
    v446 = vzip1q_s64(*(int64x2_t *)v438, v443);
    v447 = vzip2q_s64(*(int64x2_t *)v438, v443);
    *(_QWORD *)(v440 + 16) = v444;
    *(int64x2_t *)v440 = v446;
    v448 = (int64x2_t *)(v440 + 8 * v439);
    *v448 = v447;
    v448[1].i64[0] = *((_QWORD *)&v444 + 1);
LABEL_221:
    v454 = (int8x16_t *)(v440 + 16 * v439);
    v454[1].i64[0] = v445;
    v441.i64[1] = v442;
    *v454 = v441;
    v455 = v429 + 1;
    while (v455 != v432)
    {
      ++v431;
      v456 = *v455++;
      v433 = v456;
      if (v456 != -1)
      {
        v429 = v455 - 1;
        v434 = v431;
        v435 = a3[27];
        if (v10)
          goto LABEL_217;
        goto LABEL_219;
      }
    }
    v424 = *(_DWORD *)(a1 + 14268);
LABEL_211:
    ++v425;
    ++v426;
    if (v425 < v424)
      continue;
    break;
  }
  v10 = *a5;
LABEL_231:
  v460 = *(_DWORD *)(a1 + 1164);
  if (!v460)
    goto LABEL_254;
  v461 = 0;
  v462 = *a4;
  while (2)
  {
    v463 = *(_QWORD *)(a1 + 1240);
    v464 = *(_DWORD *)(a1 + 1264) * v461;
    v465 = (uint64_t *)(v463 + 8 * v464);
    v466 = *(_DWORD *)(a1 + 1160);
    if (v466 && *v465 == -1)
    {
      v467 = 0;
      v516 = 8 * (v466 + v464) - 8 * v464 - 8;
      v517 = v463 + 8 * v464;
      while (v516)
      {
        v465 = (uint64_t *)(v517 + 8);
        ++v467;
        v518 = *(_QWORD *)(v517 + 8);
        v516 -= 8;
        v517 += 8;
        if (v518 != -1)
          goto LABEL_238;
      }
      goto LABEL_234;
    }
    v467 = 0;
LABEL_238:
    v468 = (uint64_t *)(v463 + 8 * (v464 + v466));
    if (v465 == v468)
      goto LABEL_234;
    v469 = *v465;
    v470 = v467;
    v471 = a3[24];
    if (!v10)
    {
LABEL_242:
      v473 = *(_DWORD *)(v471 + 4 * v470);
      v472 = *v462;
      goto LABEL_243;
    }
LABEL_240:
    v472 = *v462;
    v473 = *(_DWORD *)(v471 + 4 * v470);
    if (*v462 >= v473)
    {
LABEL_243:
      v495 = (_OWORD *)(*(_QWORD *)(a1 + 1168) + 8 * v469);
      v496 = *(unsigned int *)(a2 + 16);
      v497 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v473 + (_DWORD)v496 * v472));
      v498 = v495[1];
      v499 = v495[2];
      v500 = v495[3];
      v501 = v495[4];
      v502 = v495[5];
      v503 = v495[6];
      v504 = v495[7];
      v505 = v495[8];
      v506 = v495[9];
      v507 = v495[10];
      v508 = v495[11];
      *v497 = *v495;
      v497[1] = v498;
      v509 = (_OWORD *)((char *)v497 + 8 * v496);
      *v509 = v499;
      v509[1] = v500;
      v510 = &v497[v496];
      *v510 = v501;
      v510[1] = v502;
      v511 = (_OWORD *)((char *)v497 + 24 * v496);
      *v511 = v503;
      v511[1] = v504;
      v512 = &v497[2 * v496];
      *v512 = v505;
      v512[1] = v506;
      v513 = (_OWORD *)((char *)v497 + 40 * v496);
      *v513 = v507;
      v513[1] = v508;
      goto LABEL_244;
    }
    v474 = *(_QWORD *)(a1 + 1168) + 8 * v469;
    v475 = *(unsigned int *)(a2 + 16);
    v476 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v472 + (_DWORD)v475 * v473));
    v477 = *(int64x2_t *)(v474 + 16);
    v479 = *(int64x2_t *)(v474 + 32);
    v478 = *(int64x2_t *)(v474 + 48);
    v481 = *(int64x2_t *)(v474 + 64);
    v480 = *(int64x2_t *)(v474 + 80);
    v483 = *(int64x2_t *)(v474 + 128);
    v482 = *(int64x2_t *)(v474 + 144);
    v484 = vzip1q_s64(*(int64x2_t *)v474, v479);
    v485 = vzip1q_s64(v481, *(int64x2_t *)(v474 + 96));
    v486 = vzip1q_s64(v483, *(int64x2_t *)(v474 + 160));
    v481.i64[0] = vdupq_laneq_s64(v481, 1).u64[0];
    v481.i64[1] = *(_QWORD *)(v474 + 104);
    v487.i64[0] = vdupq_laneq_s64(v483, 1).u64[0];
    v488 = vzip2q_s64(*(int64x2_t *)v474, v479);
    v487.i64[1] = *(_QWORD *)(v474 + 168);
    v489 = vzip1q_s64(v480, *(int64x2_t *)(v474 + 112));
    v490 = vzip1q_s64(v482, *(int64x2_t *)(v474 + 176));
    v480.i64[0] = vdupq_laneq_s64(v480, 1).u64[0];
    v480.i64[1] = *(_QWORD *)(v474 + 120);
    v491.i64[0] = vdupq_laneq_s64(v482, 1).u64[0];
    v491.i64[1] = *(_QWORD *)(v474 + 184);
    v476[1] = v485;
    v476[2] = v486;
    *v476 = v484;
    v492 = (int64x2_t *)((char *)v476 + 8 * v475);
    v492[1] = v481;
    v492[2] = v487;
    *v492 = v488;
    v493 = &v476[v475];
    v493[1] = v489;
    v493[2] = v490;
    *v493 = vzip1q_s64(v477, v478);
    v494 = (int64x2_t *)((char *)v476 + 24 * v475);
    v494[1] = v480;
    v494[2] = v491;
    *v494 = vzip2q_s64(v477, v478);
LABEL_244:
    v514 = v465 + 1;
    while (v514 != v468)
    {
      ++v467;
      v515 = *v514++;
      v469 = v515;
      if (v515 != -1)
      {
        v465 = v514 - 1;
        v470 = v467;
        v471 = a3[24];
        if (v10)
          goto LABEL_240;
        goto LABEL_242;
      }
    }
    v460 = *(_DWORD *)(a1 + 1164);
LABEL_234:
    ++v461;
    ++v462;
    if (v461 < v460)
      continue;
    break;
  }
  v10 = *a5;
LABEL_254:
  v519 = *(_DWORD *)(a1 + 2604);
  if (!v519)
    goto LABEL_277;
  v520 = 0;
  v521 = a4[3];
  while (2)
  {
    v522 = *(_QWORD *)(a1 + 2680);
    v523 = *(_DWORD *)(a1 + 2704) * v520;
    v524 = (uint64_t *)(v522 + 8 * v523);
    v525 = *(_DWORD *)(a1 + 2600);
    if (v525 && *v524 == -1)
    {
      v526 = 0;
      v589 = 8 * (v525 + v523) - 8 * v523 - 8;
      v590 = v522 + 8 * v523;
      while (v589)
      {
        v524 = (uint64_t *)(v590 + 8);
        ++v526;
        v591 = *(_QWORD *)(v590 + 8);
        v589 -= 8;
        v590 += 8;
        if (v591 != -1)
          goto LABEL_261;
      }
      goto LABEL_257;
    }
    v526 = 0;
LABEL_261:
    v527 = (uint64_t *)(v522 + 8 * (v523 + v525));
    if (v524 == v527)
      goto LABEL_257;
    v528 = *v524;
    v529 = v526;
    v530 = a3[24];
    if (!v10)
    {
LABEL_265:
      v532 = *(_DWORD *)(v530 + 4 * v529);
      v531 = *v521;
      goto LABEL_266;
    }
LABEL_263:
    v531 = *v521;
    v532 = *(_DWORD *)(v530 + 4 * v529);
    if (*v521 >= v532)
    {
LABEL_266:
      v559 = (_OWORD *)(*(_QWORD *)(a1 + 2608) + 8 * v528);
      v560 = *(unsigned int *)(a2 + 16);
      v561 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v532 + (_DWORD)v560 * v531));
      v562 = v559[1];
      v563 = v559[2];
      v564 = v559[3];
      v565 = v559[4];
      v566 = v559[5];
      v567 = v559[6];
      v568 = v559[7];
      v569 = v559[8];
      v570 = v559[9];
      v571 = v559[10];
      v572 = v559[11];
      v573 = v559[12];
      v574 = v559[13];
      v575 = v559[14];
      v576 = v559[15];
      v577 = v559[16];
      v578 = v559[17];
      *v561 = *v559;
      v561[1] = v562;
      v579 = (_OWORD *)((char *)v561 + 8 * v560);
      *v579 = v563;
      v579[1] = v564;
      v580 = &v561[v560];
      *v580 = v565;
      v580[1] = v566;
      v581 = (_OWORD *)((char *)v561 + 24 * v560);
      *v581 = v567;
      v581[1] = v568;
      v582 = &v561[2 * v560];
      *v582 = v569;
      v582[1] = v570;
      v583 = (_OWORD *)((char *)v561 + 40 * v560);
      *v583 = v571;
      v583[1] = v572;
      v584 = &v561[3 * v560];
      *v584 = v573;
      v584[1] = v574;
      v585 = (_OWORD *)((char *)v561 + 56 * v560);
      *v585 = v575;
      v585[1] = v576;
      v586 = &v561[4 * v560];
      *v586 = v577;
      v586[1] = v578;
      goto LABEL_267;
    }
    v533 = *(_QWORD *)(a1 + 2608) + 8 * v528;
    v534 = *(unsigned int *)(a2 + 16);
    v535 = *(_QWORD *)a2 + 8 * (v531 + (_DWORD)v534 * v532);
    v536 = *(int64x2_t *)(v533 + 16);
    v538 = *(int64x2_t *)(v533 + 32);
    v537 = *(int64x2_t *)(v533 + 48);
    v540 = *(int64x2_t *)(v533 + 64);
    v539 = *(int64x2_t *)(v533 + 80);
    v542 = *(int64x2_t *)(v533 + 128);
    v541 = *(int64x2_t *)(v533 + 144);
    v544 = *(int64x2_t *)(v533 + 192);
    v543 = *(int64x2_t *)(v533 + 208);
    v546 = *(_OWORD *)(v533 + 256);
    v545 = *(_OWORD *)(v533 + 272);
    v547 = vzip1q_s64(*(int64x2_t *)v533, v538);
    v548 = vzip1q_s64(v540, *(int64x2_t *)(v533 + 96));
    v549 = vzip1q_s64(v544, *(int64x2_t *)(v533 + 224));
    v550 = vzip2q_s64(*(int64x2_t *)v533, v538);
    v538.i64[0] = vdupq_laneq_s64(v540, 1).u64[0];
    v538.i64[1] = *(_QWORD *)(v533 + 104);
    v540.i64[0] = vdupq_laneq_s64(v542, 1).u64[0];
    v540.i64[1] = *(_QWORD *)(v533 + 168);
    *(_QWORD *)&v551 = vdupq_laneq_s64(v544, 1).u64[0];
    *((_QWORD *)&v551 + 1) = *(_QWORD *)(v533 + 232);
    v552 = vzip1q_s64(v539, *(int64x2_t *)(v533 + 112));
    v553 = vzip1q_s64(v541, *(int64x2_t *)(v533 + 176));
    v554 = vzip1q_s64(v543, *(int64x2_t *)(v533 + 240));
    v539.i64[0] = vdupq_laneq_s64(v539, 1).u64[0];
    v539.i64[1] = *(_QWORD *)(v533 + 120);
    *(_QWORD *)&v555 = vdupq_laneq_s64(v541, 1).u64[0];
    *((_QWORD *)&v555 + 1) = *(_QWORD *)(v533 + 184);
    v541.i64[0] = vdupq_laneq_s64(v543, 1).u64[0];
    v541.i64[1] = *(_QWORD *)(v533 + 248);
    *(int64x2_t *)(v535 + 32) = vzip1q_s64(v542, *(int64x2_t *)(v533 + 160));
    *(int64x2_t *)(v535 + 48) = v549;
    *(_QWORD *)(v535 + 64) = v546;
    *(int64x2_t *)v535 = v547;
    *(int64x2_t *)(v535 + 16) = v548;
    v556 = v535 + 8 * v534;
    *(int64x2_t *)(v556 + 32) = v540;
    *(_OWORD *)(v556 + 48) = v551;
    *(int64x2_t *)v556 = v550;
    *(int64x2_t *)(v556 + 16) = v538;
    *(_QWORD *)(v556 + 64) = *((_QWORD *)&v546 + 1);
    v557 = (int64x2_t *)(v535 + 16 * v534);
    v557[4].i64[0] = v545;
    v557[2] = v553;
    v557[3] = v554;
    *v557 = vzip1q_s64(v536, v537);
    v557[1] = v552;
    v558 = v535 + 24 * v534;
    *(_QWORD *)(v558 + 64) = *((_QWORD *)&v545 + 1);
    *(_OWORD *)(v558 + 32) = v555;
    *(int64x2_t *)(v558 + 48) = v541;
    *(int64x2_t *)v558 = vzip2q_s64(v536, v537);
    *(int64x2_t *)(v558 + 16) = v539;
LABEL_267:
    v587 = v524 + 1;
    while (v587 != v527)
    {
      ++v526;
      v588 = *v587++;
      v528 = v588;
      if (v588 != -1)
      {
        v524 = v587 - 1;
        v529 = v526;
        v530 = a3[24];
        if (v10)
          goto LABEL_263;
        goto LABEL_265;
      }
    }
    v519 = *(_DWORD *)(a1 + 2604);
LABEL_257:
    ++v520;
    ++v521;
    if (v520 < v519)
      continue;
    break;
  }
  v10 = *a5;
LABEL_277:
  v592 = *(_DWORD *)(a1 + 4044);
  if (!v592)
    goto LABEL_300;
  v593 = 0;
  v594 = a4[6];
  while (2)
  {
    v595 = *(_QWORD *)(a1 + 4120);
    v596 = *(_DWORD *)(a1 + 4144) * v593;
    v597 = (uint64_t *)(v595 + 8 * v596);
    v598 = *(_DWORD *)(a1 + 4040);
    if (v598 && *v597 == -1)
    {
      v599 = 0;
      v648 = 8 * (v598 + v596) - 8 * v596 - 8;
      v649 = v595 + 8 * v596;
      while (v648)
      {
        v597 = (uint64_t *)(v649 + 8);
        ++v599;
        v650 = *(_QWORD *)(v649 + 8);
        v648 -= 8;
        v649 += 8;
        if (v650 != -1)
          goto LABEL_284;
      }
      goto LABEL_280;
    }
    v599 = 0;
LABEL_284:
    v600 = (uint64_t *)(v595 + 8 * (v596 + v598));
    if (v597 == v600)
      goto LABEL_280;
    v601 = *v597;
    v602 = v599;
    v603 = a3[24];
    if (!v10)
    {
LABEL_288:
      v605 = *(_DWORD *)(v603 + 4 * v602);
      v604 = *v594;
      goto LABEL_289;
    }
LABEL_286:
    v604 = *v594;
    v605 = *(_DWORD *)(v603 + 4 * v602);
    if (*v594 >= v605)
    {
LABEL_289:
      v627 = (_OWORD *)(*(_QWORD *)(a1 + 4048) + 8 * v601);
      v628 = *(unsigned int *)(a2 + 16);
      v629 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v605 + (_DWORD)v628 * v604));
      v630 = v627[1];
      v631 = v627[2];
      v632 = v627[3];
      v633 = v627[4];
      v634 = v627[5];
      v635 = v627[6];
      v636 = v627[7];
      v637 = v627[8];
      v638 = v627[9];
      v639 = v627[10];
      v640 = v627[11];
      *v629 = *v627;
      v629[1] = v630;
      v641 = (_OWORD *)((char *)v629 + 8 * v628);
      *v641 = v631;
      v641[1] = v632;
      v642 = &v629[v628];
      *v642 = v633;
      v642[1] = v634;
      v643 = (_OWORD *)((char *)v629 + 24 * v628);
      *v643 = v635;
      v643[1] = v636;
      v644 = &v629[2 * v628];
      *v644 = v637;
      v644[1] = v638;
      v645 = (_OWORD *)((char *)v629 + 40 * v628);
      *v645 = v639;
      v645[1] = v640;
      goto LABEL_290;
    }
    v606 = *(_QWORD *)(a1 + 4048) + 8 * v601;
    v607 = *(unsigned int *)(a2 + 16);
    v608 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v604 + (_DWORD)v607 * v605));
    v609 = *(int64x2_t *)(v606 + 16);
    v611 = *(int64x2_t *)(v606 + 32);
    v610 = *(int64x2_t *)(v606 + 48);
    v613 = *(int64x2_t *)(v606 + 64);
    v612 = *(int64x2_t *)(v606 + 80);
    v615 = *(int64x2_t *)(v606 + 128);
    v614 = *(int64x2_t *)(v606 + 144);
    v616 = vzip1q_s64(*(int64x2_t *)v606, v611);
    v617 = vzip1q_s64(v613, *(int64x2_t *)(v606 + 96));
    v618 = vzip1q_s64(v615, *(int64x2_t *)(v606 + 160));
    v613.i64[0] = vdupq_laneq_s64(v613, 1).u64[0];
    v613.i64[1] = *(_QWORD *)(v606 + 104);
    v619.i64[0] = vdupq_laneq_s64(v615, 1).u64[0];
    v620 = vzip2q_s64(*(int64x2_t *)v606, v611);
    v619.i64[1] = *(_QWORD *)(v606 + 168);
    v621 = vzip1q_s64(v612, *(int64x2_t *)(v606 + 112));
    v622 = vzip1q_s64(v614, *(int64x2_t *)(v606 + 176));
    v612.i64[0] = vdupq_laneq_s64(v612, 1).u64[0];
    v612.i64[1] = *(_QWORD *)(v606 + 120);
    v623.i64[0] = vdupq_laneq_s64(v614, 1).u64[0];
    v623.i64[1] = *(_QWORD *)(v606 + 184);
    v608[1] = v617;
    v608[2] = v618;
    *v608 = v616;
    v624 = (int64x2_t *)((char *)v608 + 8 * v607);
    v624[1] = v613;
    v624[2] = v619;
    *v624 = v620;
    v625 = &v608[v607];
    v625[1] = v621;
    v625[2] = v622;
    *v625 = vzip1q_s64(v609, v610);
    v626 = (int64x2_t *)((char *)v608 + 24 * v607);
    v626[1] = v612;
    v626[2] = v623;
    *v626 = vzip2q_s64(v609, v610);
LABEL_290:
    v646 = v597 + 1;
    while (v646 != v600)
    {
      ++v599;
      v647 = *v646++;
      v601 = v647;
      if (v647 != -1)
      {
        v597 = v646 - 1;
        v602 = v599;
        v603 = a3[24];
        if (v10)
          goto LABEL_286;
        goto LABEL_288;
      }
    }
    v592 = *(_DWORD *)(a1 + 4044);
LABEL_280:
    ++v593;
    ++v594;
    if (v593 < v592)
      continue;
    break;
  }
  v10 = *a5;
LABEL_300:
  v651 = *(_DWORD *)(a1 + 5484);
  if (!v651)
    goto LABEL_323;
  v652 = 0;
  v653 = a4[9];
  while (2)
  {
    v654 = *(_QWORD *)(a1 + 5560);
    v655 = *(_DWORD *)(a1 + 5584) * v652;
    v656 = (uint64_t *)(v654 + 8 * v655);
    v657 = *(_DWORD *)(a1 + 5480);
    if (v657 && *v656 == -1)
    {
      v658 = 0;
      v707 = 8 * (v657 + v655) - 8 * v655 - 8;
      v708 = v654 + 8 * v655;
      while (v707)
      {
        v656 = (uint64_t *)(v708 + 8);
        ++v658;
        v709 = *(_QWORD *)(v708 + 8);
        v707 -= 8;
        v708 += 8;
        if (v709 != -1)
          goto LABEL_307;
      }
      goto LABEL_303;
    }
    v658 = 0;
LABEL_307:
    v659 = (uint64_t *)(v654 + 8 * (v655 + v657));
    if (v656 == v659)
      goto LABEL_303;
    v660 = *v656;
    v661 = v658;
    v662 = a3[24];
    if (!v10)
    {
LABEL_311:
      v664 = *(_DWORD *)(v662 + 4 * v661);
      v663 = *v653;
      goto LABEL_312;
    }
LABEL_309:
    v663 = *v653;
    v664 = *(_DWORD *)(v662 + 4 * v661);
    if (*v653 >= v664)
    {
LABEL_312:
      v686 = (_OWORD *)(*(_QWORD *)(a1 + 5488) + 8 * v660);
      v687 = *(unsigned int *)(a2 + 16);
      v688 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v664 + (_DWORD)v687 * v663));
      v689 = v686[1];
      v690 = v686[2];
      v691 = v686[3];
      v692 = v686[4];
      v693 = v686[5];
      v694 = v686[6];
      v695 = v686[7];
      v696 = v686[8];
      v697 = v686[9];
      v698 = v686[10];
      v699 = v686[11];
      *v688 = *v686;
      v688[1] = v689;
      v700 = (_OWORD *)((char *)v688 + 8 * v687);
      *v700 = v690;
      v700[1] = v691;
      v701 = &v688[v687];
      *v701 = v692;
      v701[1] = v693;
      v702 = (_OWORD *)((char *)v688 + 24 * v687);
      *v702 = v694;
      v702[1] = v695;
      v703 = &v688[2 * v687];
      *v703 = v696;
      v703[1] = v697;
      v704 = (_OWORD *)((char *)v688 + 40 * v687);
      *v704 = v698;
      v704[1] = v699;
      goto LABEL_313;
    }
    v665 = *(_QWORD *)(a1 + 5488) + 8 * v660;
    v666 = *(unsigned int *)(a2 + 16);
    v667 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v663 + (_DWORD)v666 * v664));
    v668 = *(int64x2_t *)(v665 + 16);
    v670 = *(int64x2_t *)(v665 + 32);
    v669 = *(int64x2_t *)(v665 + 48);
    v672 = *(int64x2_t *)(v665 + 64);
    v671 = *(int64x2_t *)(v665 + 80);
    v674 = *(int64x2_t *)(v665 + 128);
    v673 = *(int64x2_t *)(v665 + 144);
    v675 = vzip1q_s64(*(int64x2_t *)v665, v670);
    v676 = vzip1q_s64(v672, *(int64x2_t *)(v665 + 96));
    v677 = vzip1q_s64(v674, *(int64x2_t *)(v665 + 160));
    v672.i64[0] = vdupq_laneq_s64(v672, 1).u64[0];
    v672.i64[1] = *(_QWORD *)(v665 + 104);
    v678.i64[0] = vdupq_laneq_s64(v674, 1).u64[0];
    v679 = vzip2q_s64(*(int64x2_t *)v665, v670);
    v678.i64[1] = *(_QWORD *)(v665 + 168);
    v680 = vzip1q_s64(v671, *(int64x2_t *)(v665 + 112));
    v681 = vzip1q_s64(v673, *(int64x2_t *)(v665 + 176));
    v671.i64[0] = vdupq_laneq_s64(v671, 1).u64[0];
    v671.i64[1] = *(_QWORD *)(v665 + 120);
    v682.i64[0] = vdupq_laneq_s64(v673, 1).u64[0];
    v682.i64[1] = *(_QWORD *)(v665 + 184);
    v667[1] = v676;
    v667[2] = v677;
    *v667 = v675;
    v683 = (int64x2_t *)((char *)v667 + 8 * v666);
    v683[1] = v672;
    v683[2] = v678;
    *v683 = v679;
    v684 = &v667[v666];
    v684[1] = v680;
    v684[2] = v681;
    *v684 = vzip1q_s64(v668, v669);
    v685 = (int64x2_t *)((char *)v667 + 24 * v666);
    v685[1] = v671;
    v685[2] = v682;
    *v685 = vzip2q_s64(v668, v669);
LABEL_313:
    v705 = v656 + 1;
    while (v705 != v659)
    {
      ++v658;
      v706 = *v705++;
      v660 = v706;
      if (v706 != -1)
      {
        v656 = v705 - 1;
        v661 = v658;
        v662 = a3[24];
        if (v10)
          goto LABEL_309;
        goto LABEL_311;
      }
    }
    v651 = *(_DWORD *)(a1 + 5484);
LABEL_303:
    ++v652;
    ++v653;
    if (v652 < v651)
      continue;
    break;
  }
  v10 = *a5;
LABEL_323:
  v710 = *(_DWORD *)(a1 + 6924);
  if (!v710)
    goto LABEL_346;
  v711 = 0;
  v712 = a4[12];
  while (2)
  {
    v713 = *(_QWORD *)(a1 + 7000);
    v714 = *(_DWORD *)(a1 + 7024) * v711;
    v715 = (uint64_t *)(v713 + 8 * v714);
    v716 = *(_DWORD *)(a1 + 6920);
    if (v716 && *v715 == -1)
    {
      v717 = 0;
      v749 = 8 * (v716 + v714) - 8 * v714 - 8;
      v750 = v713 + 8 * v714;
      while (v749)
      {
        v715 = (uint64_t *)(v750 + 8);
        ++v717;
        v751 = *(_QWORD *)(v750 + 8);
        v749 -= 8;
        v750 += 8;
        if (v751 != -1)
          goto LABEL_330;
      }
      goto LABEL_326;
    }
    v717 = 0;
LABEL_330:
    v718 = (uint64_t *)(v713 + 8 * (v714 + v716));
    if (v715 == v718)
      goto LABEL_326;
    v719 = *v715;
    v720 = v717;
    v721 = a3[24];
    if (!v10)
    {
LABEL_334:
      v723 = *(_DWORD *)(v721 + 4 * v720);
      v722 = *v712;
      goto LABEL_335;
    }
LABEL_332:
    v722 = *v712;
    v723 = *(_DWORD *)(v721 + 4 * v720);
    if (*v712 >= v723)
    {
LABEL_335:
      v737 = (_OWORD *)(*(_QWORD *)(a1 + 6928) + 8 * v719);
      v738 = *(unsigned int *)(a2 + 16);
      v739 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v723 + (_DWORD)v738 * v722));
      v740 = v737[1];
      v741 = v737[2];
      v742 = v737[3];
      v743 = v737[4];
      v744 = v737[5];
      *v739 = *v737;
      v739[1] = v740;
      v745 = (_OWORD *)((char *)v739 + 8 * v738);
      *v745 = v741;
      v745[1] = v742;
      v746 = &v739[v738];
      *v746 = v743;
      v746[1] = v744;
      goto LABEL_336;
    }
    v724 = *(_QWORD *)(a1 + 6928) + 8 * v719;
    v725 = *(unsigned int *)(a2 + 16);
    v726 = *(_QWORD *)a2 + 8 * (v722 + (_DWORD)v725 * v723);
    v727 = *(int64x2_t *)(v724 + 16);
    v729 = *(int64x2_t *)(v724 + 32);
    v728 = *(int64x2_t *)(v724 + 48);
    v731 = *(_OWORD *)(v724 + 64);
    v730 = *(_OWORD *)(v724 + 80);
    v732 = vzip1q_s64(*(int64x2_t *)v724, v729);
    v733 = vzip2q_s64(*(int64x2_t *)v724, v729);
    *(_QWORD *)(v726 + 16) = v731;
    *(int64x2_t *)v726 = v732;
    v734 = (int64x2_t *)(v726 + 8 * v725);
    *v734 = v733;
    v734[1].i64[0] = *((_QWORD *)&v731 + 1);
    v735 = (int64x2_t *)(v726 + 16 * v725);
    v735[1].i64[0] = v730;
    *v735 = vzip1q_s64(v727, v728);
    v736 = (int64x2_t *)(v726 + 24 * v725);
    v736[1].i64[0] = *((_QWORD *)&v730 + 1);
    *v736 = vzip2q_s64(v727, v728);
LABEL_336:
    v747 = v715 + 1;
    while (v747 != v718)
    {
      ++v717;
      v748 = *v747++;
      v719 = v748;
      if (v748 != -1)
      {
        v715 = v747 - 1;
        v720 = v717;
        v721 = a3[24];
        if (v10)
          goto LABEL_332;
        goto LABEL_334;
      }
    }
    v710 = *(_DWORD *)(a1 + 6924);
LABEL_326:
    ++v711;
    ++v712;
    if (v711 < v710)
      continue;
    break;
  }
  v10 = *a5;
LABEL_346:
  v752 = *(_DWORD *)(a1 + 8364);
  if (!v752)
    goto LABEL_369;
  v753 = 0;
  v754 = a4[15];
  while (2)
  {
    v755 = *(_QWORD *)(a1 + 8440);
    v756 = *(_DWORD *)(a1 + 8464) * v753;
    v757 = (uint64_t *)(v755 + 8 * v756);
    v758 = *(_DWORD *)(a1 + 8360);
    if (v758 && *v757 == -1)
    {
      v759 = 0;
      v776 = 8 * (v758 + v756) - 8 * v756 - 8;
      v777 = v755 + 8 * v756;
      while (v776)
      {
        v757 = (uint64_t *)(v777 + 8);
        ++v759;
        v778 = *(_QWORD *)(v777 + 8);
        v776 -= 8;
        v777 += 8;
        if (v778 != -1)
          goto LABEL_353;
      }
      goto LABEL_349;
    }
    v759 = 0;
LABEL_353:
    v760 = (uint64_t *)(v755 + 8 * (v756 + v758));
    if (v757 == v760)
      goto LABEL_349;
    v761 = *v757;
    v762 = v759;
    v763 = a3[24];
    if (!v10)
    {
LABEL_357:
      v765 = *(_DWORD *)(v763 + 4 * v762);
      v764 = *v754;
      goto LABEL_358;
    }
LABEL_355:
    v764 = *v754;
    v765 = *(_DWORD *)(v763 + 4 * v762);
    if (*v754 >= v765)
    {
LABEL_358:
      v771 = (_OWORD *)(*(_QWORD *)(a1 + 8368) + 8 * v761);
      v772 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v765 + *(_DWORD *)(a2 + 16) * v764));
      v773 = v771[1];
      *v772 = *v771;
      v772[1] = v773;
      goto LABEL_359;
    }
    v766 = *(_QWORD *)(a1 + 8368) + 8 * v761;
    v767 = *(unsigned int *)(a2 + 16);
    v768 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v764 + (_DWORD)v767 * v765));
    v769 = *(int8x16_t *)(v766 + 16);
    v770 = vextq_s8(*(int8x16_t *)v766, *(int8x16_t *)v766, 8uLL).u64[0];
    *v768 = *(_QWORD *)v766;
    v768[v767] = v770;
    v768[2 * v767] = v769.i64[0];
    v768[3 * v767] = vextq_s8(v769, v769, 8uLL).u64[0];
LABEL_359:
    v774 = v757 + 1;
    while (v774 != v760)
    {
      ++v759;
      v775 = *v774++;
      v761 = v775;
      if (v775 != -1)
      {
        v757 = v774 - 1;
        v762 = v759;
        v763 = a3[24];
        if (v10)
          goto LABEL_355;
        goto LABEL_357;
      }
    }
    v752 = *(_DWORD *)(a1 + 8364);
LABEL_349:
    ++v753;
    ++v754;
    if (v753 < v752)
      continue;
    break;
  }
  v10 = *a5;
LABEL_369:
  v779 = *(_DWORD *)(a1 + 9804);
  if (!v779)
    goto LABEL_392;
  v780 = 0;
  v781 = a4[18];
  while (2)
  {
    v782 = *(_QWORD *)(a1 + 9880);
    v783 = *(_DWORD *)(a1 + 9904) * v780;
    v784 = (uint64_t *)(v782 + 8 * v783);
    v785 = *(_DWORD *)(a1 + 9800);
    if (v785 && *v784 == -1)
    {
      v786 = 0;
      v818 = 8 * (v785 + v783) - 8 * v783 - 8;
      v819 = v782 + 8 * v783;
      while (v818)
      {
        v784 = (uint64_t *)(v819 + 8);
        ++v786;
        v820 = *(_QWORD *)(v819 + 8);
        v818 -= 8;
        v819 += 8;
        if (v820 != -1)
          goto LABEL_376;
      }
      goto LABEL_372;
    }
    v786 = 0;
LABEL_376:
    v787 = (uint64_t *)(v782 + 8 * (v783 + v785));
    if (v784 == v787)
      goto LABEL_372;
    v788 = *v784;
    v789 = v786;
    v790 = a3[24];
    if (!v10)
    {
LABEL_380:
      v792 = *(_DWORD *)(v790 + 4 * v789);
      v791 = *v781;
      goto LABEL_381;
    }
LABEL_378:
    v791 = *v781;
    v792 = *(_DWORD *)(v790 + 4 * v789);
    if (*v781 >= v792)
    {
LABEL_381:
      v806 = (_OWORD *)(*(_QWORD *)(a1 + 9808) + 8 * v788);
      v807 = *(unsigned int *)(a2 + 16);
      v808 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v792 + (_DWORD)v807 * v791));
      v809 = v806[1];
      v810 = v806[2];
      v811 = v806[3];
      v812 = v806[4];
      v813 = v806[5];
      *v808 = *v806;
      v808[1] = v809;
      v814 = (_OWORD *)((char *)v808 + 8 * v807);
      *v814 = v810;
      v814[1] = v811;
      v815 = &v808[v807];
      *v815 = v812;
      v815[1] = v813;
      goto LABEL_382;
    }
    v793 = *(_QWORD *)(a1 + 9808) + 8 * v788;
    v794 = *(unsigned int *)(a2 + 16);
    v795 = *(_QWORD *)a2 + 8 * (v791 + (_DWORD)v794 * v792);
    v796 = *(int64x2_t *)(v793 + 16);
    v798 = *(int64x2_t *)(v793 + 32);
    v797 = *(int64x2_t *)(v793 + 48);
    v800 = *(_OWORD *)(v793 + 64);
    v799 = *(_OWORD *)(v793 + 80);
    v801 = vzip1q_s64(*(int64x2_t *)v793, v798);
    v802 = vzip2q_s64(*(int64x2_t *)v793, v798);
    *(_QWORD *)(v795 + 16) = v800;
    *(int64x2_t *)v795 = v801;
    v803 = (int64x2_t *)(v795 + 8 * v794);
    *v803 = v802;
    v803[1].i64[0] = *((_QWORD *)&v800 + 1);
    v804 = (int64x2_t *)(v795 + 16 * v794);
    v804[1].i64[0] = v799;
    *v804 = vzip1q_s64(v796, v797);
    v805 = (int64x2_t *)(v795 + 24 * v794);
    v805[1].i64[0] = *((_QWORD *)&v799 + 1);
    *v805 = vzip2q_s64(v796, v797);
LABEL_382:
    v816 = v784 + 1;
    while (v816 != v787)
    {
      ++v786;
      v817 = *v816++;
      v788 = v817;
      if (v817 != -1)
      {
        v784 = v816 - 1;
        v789 = v786;
        v790 = a3[24];
        if (v10)
          goto LABEL_378;
        goto LABEL_380;
      }
    }
    v779 = *(_DWORD *)(a1 + 9804);
LABEL_372:
    ++v780;
    ++v781;
    if (v780 < v779)
      continue;
    break;
  }
  v10 = *a5;
LABEL_392:
  v821 = *(_DWORD *)(a1 + 11244);
  if (!v821)
    goto LABEL_415;
  v822 = 0;
  v823 = a4[21];
  while (2)
  {
    v824 = *(_QWORD *)(a1 + 11320);
    v825 = *(_DWORD *)(a1 + 11344) * v822;
    v826 = (uint64_t *)(v824 + 8 * v825);
    v827 = *(_DWORD *)(a1 + 11240);
    if (v827 && *v826 == -1)
    {
      v828 = 0;
      v860 = 8 * (v827 + v825) - 8 * v825 - 8;
      v861 = v824 + 8 * v825;
      while (v860)
      {
        v826 = (uint64_t *)(v861 + 8);
        ++v828;
        v862 = *(_QWORD *)(v861 + 8);
        v860 -= 8;
        v861 += 8;
        if (v862 != -1)
          goto LABEL_399;
      }
      goto LABEL_395;
    }
    v828 = 0;
LABEL_399:
    v829 = (uint64_t *)(v824 + 8 * (v825 + v827));
    if (v826 == v829)
      goto LABEL_395;
    v830 = *v826;
    v831 = v828;
    v832 = a3[24];
    if (!v10)
    {
LABEL_403:
      v834 = *(_DWORD *)(v832 + 4 * v831);
      v833 = *v823;
      goto LABEL_404;
    }
LABEL_401:
    v833 = *v823;
    v834 = *(_DWORD *)(v832 + 4 * v831);
    if (*v823 >= v834)
    {
LABEL_404:
      v851 = (int64x2_t *)(*(_QWORD *)(a1 + 11248) + 8 * v830);
      v836 = *(unsigned int *)(a2 + 16);
      v837 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v834 + (_DWORD)v836 * v833));
      v852 = v851[1];
      v853 = v851[2];
      v854 = v851[3];
      v846 = v851[4];
      v847 = v851[5];
      v849 = v851[6];
      v848 = v851[7];
      *v837 = *v851;
      v837[1] = v852;
      v855 = &v837->i8[8 * v836];
      *(int64x2_t *)v855 = v853;
      *((int64x2_t *)v855 + 1) = v854;
      goto LABEL_405;
    }
    v835 = *(_QWORD *)(a1 + 11248) + 8 * v830;
    v836 = *(unsigned int *)(a2 + 16);
    v837 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v833 + (_DWORD)v836 * v834));
    v838 = *(int64x2_t *)(v835 + 16);
    v839 = *(int64x2_t *)(v835 + 32);
    v840 = *(int64x2_t *)(v835 + 48);
    v842 = *(int64x2_t *)(v835 + 64);
    v841 = *(int64x2_t *)(v835 + 80);
    v843 = vzip1q_s64(*(int64x2_t *)v835, v839);
    v844 = vzip1q_s64(v842, *(int64x2_t *)(v835 + 96));
    v845 = vzip2q_s64(*(int64x2_t *)v835, v839);
    v842.i64[0] = vdupq_laneq_s64(v842, 1).u64[0];
    v842.i64[1] = *(_QWORD *)(v835 + 104);
    v846 = vzip1q_s64(v838, v840);
    v847 = vzip1q_s64(v841, *(int64x2_t *)(v835 + 112));
    v848.i64[0] = vdupq_laneq_s64(v841, 1).u64[0];
    v848.i64[1] = *(_QWORD *)(v835 + 120);
    v849 = vzip2q_s64(v838, v840);
    *v837 = v843;
    v837[1] = v844;
    v850 = (int64x2_t *)((char *)v837 + 8 * v836);
    *v850 = v845;
    v850[1] = v842;
LABEL_405:
    v856 = &v837[v836];
    *v856 = v846;
    v856[1] = v847;
    v857 = (int64x2_t *)((char *)v837 + 24 * v836);
    *v857 = v849;
    v857[1] = v848;
    v858 = v826 + 1;
    while (v858 != v829)
    {
      ++v828;
      v859 = *v858++;
      v830 = v859;
      if (v859 != -1)
      {
        v826 = v858 - 1;
        v831 = v828;
        v832 = a3[24];
        if (v10)
          goto LABEL_401;
        goto LABEL_403;
      }
    }
    v821 = *(_DWORD *)(a1 + 11244);
LABEL_395:
    ++v822;
    ++v823;
    if (v822 < v821)
      continue;
    break;
  }
  v10 = *a5;
LABEL_415:
  v863 = *(_DWORD *)(a1 + 12684);
  if (!v863)
    goto LABEL_438;
  v864 = 0;
  v865 = a4[24];
  while (2)
  {
    v866 = *(_QWORD *)(a1 + 12760);
    v867 = *(_DWORD *)(a1 + 12784) * v864;
    v868 = (uint64_t *)(v866 + 8 * v867);
    v869 = *(_DWORD *)(a1 + 12680);
    if (v869 && *v868 == -1)
    {
      v870 = 0;
      v902 = 8 * (v869 + v867) - 8 * v867 - 8;
      v903 = v866 + 8 * v867;
      while (v902)
      {
        v868 = (uint64_t *)(v903 + 8);
        ++v870;
        v904 = *(_QWORD *)(v903 + 8);
        v902 -= 8;
        v903 += 8;
        if (v904 != -1)
          goto LABEL_422;
      }
      goto LABEL_418;
    }
    v870 = 0;
LABEL_422:
    v871 = (uint64_t *)(v866 + 8 * (v867 + v869));
    if (v868 == v871)
      goto LABEL_418;
    v872 = *v868;
    v873 = v870;
    v874 = a3[24];
    if (!v10)
    {
LABEL_426:
      v876 = *(_DWORD *)(v874 + 4 * v873);
      v875 = *v865;
      goto LABEL_427;
    }
LABEL_424:
    v875 = *v865;
    v876 = *(_DWORD *)(v874 + 4 * v873);
    if (*v865 >= v876)
    {
LABEL_427:
      v893 = (int64x2_t *)(*(_QWORD *)(a1 + 12688) + 8 * v872);
      v878 = *(unsigned int *)(a2 + 16);
      v879 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v876 + (_DWORD)v878 * v875));
      v894 = v893[1];
      v895 = v893[2];
      v896 = v893[3];
      v888 = v893[4];
      v889 = v893[5];
      v891 = v893[6];
      v890 = v893[7];
      *v879 = *v893;
      v879[1] = v894;
      v897 = &v879->i8[8 * v878];
      *(int64x2_t *)v897 = v895;
      *((int64x2_t *)v897 + 1) = v896;
      goto LABEL_428;
    }
    v877 = *(_QWORD *)(a1 + 12688) + 8 * v872;
    v878 = *(unsigned int *)(a2 + 16);
    v879 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v875 + (_DWORD)v878 * v876));
    v880 = *(int64x2_t *)(v877 + 16);
    v881 = *(int64x2_t *)(v877 + 32);
    v882 = *(int64x2_t *)(v877 + 48);
    v884 = *(int64x2_t *)(v877 + 64);
    v883 = *(int64x2_t *)(v877 + 80);
    v885 = vzip1q_s64(*(int64x2_t *)v877, v881);
    v886 = vzip1q_s64(v884, *(int64x2_t *)(v877 + 96));
    v887 = vzip2q_s64(*(int64x2_t *)v877, v881);
    v884.i64[0] = vdupq_laneq_s64(v884, 1).u64[0];
    v884.i64[1] = *(_QWORD *)(v877 + 104);
    v888 = vzip1q_s64(v880, v882);
    v889 = vzip1q_s64(v883, *(int64x2_t *)(v877 + 112));
    v890.i64[0] = vdupq_laneq_s64(v883, 1).u64[0];
    v890.i64[1] = *(_QWORD *)(v877 + 120);
    v891 = vzip2q_s64(v880, v882);
    *v879 = v885;
    v879[1] = v886;
    v892 = (int64x2_t *)((char *)v879 + 8 * v878);
    *v892 = v887;
    v892[1] = v884;
LABEL_428:
    v898 = &v879[v878];
    *v898 = v888;
    v898[1] = v889;
    v899 = (int64x2_t *)((char *)v879 + 24 * v878);
    *v899 = v891;
    v899[1] = v890;
    v900 = v868 + 1;
    while (v900 != v871)
    {
      ++v870;
      v901 = *v900++;
      v872 = v901;
      if (v901 != -1)
      {
        v868 = v900 - 1;
        v873 = v870;
        v874 = a3[24];
        if (v10)
          goto LABEL_424;
        goto LABEL_426;
      }
    }
    v863 = *(_DWORD *)(a1 + 12684);
LABEL_418:
    ++v864;
    ++v865;
    if (v864 < v863)
      continue;
    break;
  }
  v10 = *a5;
LABEL_438:
  v905 = *(_DWORD *)(a1 + 14124);
  if (!v905)
    goto LABEL_461;
  v906 = 0;
  v907 = a4[27];
  while (2)
  {
    v908 = *(_QWORD *)(a1 + 14200);
    v909 = *(_DWORD *)(a1 + 14224) * v906;
    v910 = (uint64_t *)(v908 + 8 * v909);
    v911 = *(_DWORD *)(a1 + 14120);
    if (v911 && *v910 == -1)
    {
      v912 = 0;
      v944 = 8 * (v911 + v909) - 8 * v909 - 8;
      v945 = v908 + 8 * v909;
      while (v944)
      {
        v910 = (uint64_t *)(v945 + 8);
        ++v912;
        v946 = *(_QWORD *)(v945 + 8);
        v944 -= 8;
        v945 += 8;
        if (v946 != -1)
          goto LABEL_445;
      }
      goto LABEL_441;
    }
    v912 = 0;
LABEL_445:
    v913 = (uint64_t *)(v908 + 8 * (v909 + v911));
    if (v910 == v913)
      goto LABEL_441;
    v914 = *v910;
    v915 = v912;
    v916 = a3[24];
    if (!v10)
    {
LABEL_449:
      v918 = *(_DWORD *)(v916 + 4 * v915);
      v917 = *v907;
      goto LABEL_450;
    }
LABEL_447:
    v917 = *v907;
    v918 = *(_DWORD *)(v916 + 4 * v915);
    if (*v907 >= v918)
    {
LABEL_450:
      v932 = (_OWORD *)(*(_QWORD *)(a1 + 14128) + 8 * v914);
      v933 = *(unsigned int *)(a2 + 16);
      v934 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v918 + (_DWORD)v933 * v917));
      v935 = v932[1];
      v936 = v932[2];
      v937 = v932[3];
      v938 = v932[4];
      v939 = v932[5];
      *v934 = *v932;
      v934[1] = v935;
      v940 = (_OWORD *)((char *)v934 + 8 * v933);
      *v940 = v936;
      v940[1] = v937;
      v941 = &v934[v933];
      *v941 = v938;
      v941[1] = v939;
      goto LABEL_451;
    }
    v919 = *(_QWORD *)(a1 + 14128) + 8 * v914;
    v920 = *(unsigned int *)(a2 + 16);
    v921 = *(_QWORD *)a2 + 8 * (v917 + (_DWORD)v920 * v918);
    v922 = *(int64x2_t *)(v919 + 16);
    v924 = *(int64x2_t *)(v919 + 32);
    v923 = *(int64x2_t *)(v919 + 48);
    v926 = *(_OWORD *)(v919 + 64);
    v925 = *(_OWORD *)(v919 + 80);
    v927 = vzip1q_s64(*(int64x2_t *)v919, v924);
    v928 = vzip2q_s64(*(int64x2_t *)v919, v924);
    *(_QWORD *)(v921 + 16) = v926;
    *(int64x2_t *)v921 = v927;
    v929 = (int64x2_t *)(v921 + 8 * v920);
    *v929 = v928;
    v929[1].i64[0] = *((_QWORD *)&v926 + 1);
    v930 = (int64x2_t *)(v921 + 16 * v920);
    v930[1].i64[0] = v925;
    *v930 = vzip1q_s64(v922, v923);
    v931 = (int64x2_t *)(v921 + 24 * v920);
    v931[1].i64[0] = *((_QWORD *)&v925 + 1);
    *v931 = vzip2q_s64(v922, v923);
LABEL_451:
    v942 = v910 + 1;
    while (v942 != v913)
    {
      ++v912;
      v943 = *v942++;
      v914 = v943;
      if (v943 != -1)
      {
        v910 = v942 - 1;
        v915 = v912;
        v916 = a3[24];
        if (v10)
          goto LABEL_447;
        goto LABEL_449;
      }
    }
    v905 = *(_DWORD *)(a1 + 14124);
LABEL_441:
    ++v906;
    ++v907;
    if (v906 < v905)
      continue;
    break;
  }
  v10 = *a5;
LABEL_461:
  v947 = *(_DWORD *)(a1 + 1020);
  if (!v947)
    goto LABEL_484;
  v948 = 0;
  v949 = *a4;
  while (2)
  {
    v950 = *(_QWORD *)(a1 + 1096);
    v951 = *(_DWORD *)(a1 + 1120) * v948;
    v952 = (uint64_t *)(v950 + 8 * v951);
    v953 = *(_DWORD *)(a1 + 1016);
    if (v953 && *v952 == -1)
    {
      v954 = 0;
      v1003 = 8 * (v953 + v951) - 8 * v951 - 8;
      v1004 = v950 + 8 * v951;
      while (v1003)
      {
        v952 = (uint64_t *)(v1004 + 8);
        ++v954;
        v1005 = *(_QWORD *)(v1004 + 8);
        v1003 -= 8;
        v1004 += 8;
        if (v1005 != -1)
          goto LABEL_468;
      }
      goto LABEL_464;
    }
    v954 = 0;
LABEL_468:
    v955 = (uint64_t *)(v950 + 8 * (v951 + v953));
    if (v952 == v955)
      goto LABEL_464;
    v956 = *v952;
    v957 = v954;
    v958 = a3[21];
    if (!v10)
    {
LABEL_472:
      v960 = *(_DWORD *)(v958 + 4 * v957);
      v959 = *v949;
      goto LABEL_473;
    }
LABEL_470:
    v959 = *v949;
    v960 = *(_DWORD *)(v958 + 4 * v957);
    if (*v949 >= v960)
    {
LABEL_473:
      v982 = (_OWORD *)(*(_QWORD *)(a1 + 1024) + 8 * v956);
      v983 = *(unsigned int *)(a2 + 16);
      v984 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v960 + (_DWORD)v983 * v959));
      v985 = v982[1];
      v986 = v982[2];
      v987 = v982[3];
      v988 = v982[4];
      v989 = v982[5];
      v990 = v982[6];
      v991 = v982[7];
      v992 = v982[8];
      v993 = v982[9];
      v994 = v982[10];
      v995 = v982[11];
      *v984 = *v982;
      v984[1] = v985;
      v996 = (_OWORD *)((char *)v984 + 8 * v983);
      *v996 = v986;
      v996[1] = v987;
      v997 = &v984[v983];
      *v997 = v988;
      v997[1] = v989;
      v998 = (_OWORD *)((char *)v984 + 24 * v983);
      *v998 = v990;
      v998[1] = v991;
      v999 = &v984[2 * v983];
      *v999 = v992;
      v999[1] = v993;
      v1000 = (_OWORD *)((char *)v984 + 40 * v983);
      *v1000 = v994;
      v1000[1] = v995;
      goto LABEL_474;
    }
    v961 = *(_QWORD *)(a1 + 1024) + 8 * v956;
    v962 = *(unsigned int *)(a2 + 16);
    v963 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v959 + (_DWORD)v962 * v960));
    v964 = *(int64x2_t *)(v961 + 16);
    v966 = *(int64x2_t *)(v961 + 32);
    v965 = *(int64x2_t *)(v961 + 48);
    v968 = *(int64x2_t *)(v961 + 64);
    v967 = *(int64x2_t *)(v961 + 80);
    v970 = *(int64x2_t *)(v961 + 128);
    v969 = *(int64x2_t *)(v961 + 144);
    v971 = vzip1q_s64(*(int64x2_t *)v961, v966);
    v972 = vzip1q_s64(v968, *(int64x2_t *)(v961 + 96));
    v973 = vzip1q_s64(v970, *(int64x2_t *)(v961 + 160));
    v968.i64[0] = vdupq_laneq_s64(v968, 1).u64[0];
    v968.i64[1] = *(_QWORD *)(v961 + 104);
    v974.i64[0] = vdupq_laneq_s64(v970, 1).u64[0];
    v975 = vzip2q_s64(*(int64x2_t *)v961, v966);
    v974.i64[1] = *(_QWORD *)(v961 + 168);
    v976 = vzip1q_s64(v967, *(int64x2_t *)(v961 + 112));
    v977 = vzip1q_s64(v969, *(int64x2_t *)(v961 + 176));
    v967.i64[0] = vdupq_laneq_s64(v967, 1).u64[0];
    v967.i64[1] = *(_QWORD *)(v961 + 120);
    v978.i64[0] = vdupq_laneq_s64(v969, 1).u64[0];
    v978.i64[1] = *(_QWORD *)(v961 + 184);
    v963[1] = v972;
    v963[2] = v973;
    *v963 = v971;
    v979 = (int64x2_t *)((char *)v963 + 8 * v962);
    v979[1] = v968;
    v979[2] = v974;
    *v979 = v975;
    v980 = &v963[v962];
    v980[1] = v976;
    v980[2] = v977;
    *v980 = vzip1q_s64(v964, v965);
    v981 = (int64x2_t *)((char *)v963 + 24 * v962);
    v981[1] = v967;
    v981[2] = v978;
    *v981 = vzip2q_s64(v964, v965);
LABEL_474:
    v1001 = v952 + 1;
    while (v1001 != v955)
    {
      ++v954;
      v1002 = *v1001++;
      v956 = v1002;
      if (v1002 != -1)
      {
        v952 = v1001 - 1;
        v957 = v954;
        v958 = a3[21];
        if (v10)
          goto LABEL_470;
        goto LABEL_472;
      }
    }
    v947 = *(_DWORD *)(a1 + 1020);
LABEL_464:
    ++v948;
    ++v949;
    if (v948 < v947)
      continue;
    break;
  }
  v10 = *a5;
LABEL_484:
  v1006 = *(_DWORD *)(a1 + 2460);
  if (!v1006)
    goto LABEL_507;
  v1007 = 0;
  v1008 = a4[3];
  while (2)
  {
    v1009 = *(_QWORD *)(a1 + 2536);
    v1010 = *(_DWORD *)(a1 + 2560) * v1007;
    v1011 = (uint64_t *)(v1009 + 8 * v1010);
    v1012 = *(_DWORD *)(a1 + 2456);
    if (v1012 && *v1011 == -1)
    {
      v1013 = 0;
      v1076 = 8 * (v1012 + v1010) - 8 * v1010 - 8;
      v1077 = v1009 + 8 * v1010;
      while (v1076)
      {
        v1011 = (uint64_t *)(v1077 + 8);
        ++v1013;
        v1078 = *(_QWORD *)(v1077 + 8);
        v1076 -= 8;
        v1077 += 8;
        if (v1078 != -1)
          goto LABEL_491;
      }
      goto LABEL_487;
    }
    v1013 = 0;
LABEL_491:
    v1014 = (uint64_t *)(v1009 + 8 * (v1010 + v1012));
    if (v1011 == v1014)
      goto LABEL_487;
    v1015 = *v1011;
    v1016 = v1013;
    v1017 = a3[21];
    if (!v10)
    {
LABEL_495:
      v1019 = *(_DWORD *)(v1017 + 4 * v1016);
      v1018 = *v1008;
      goto LABEL_496;
    }
LABEL_493:
    v1018 = *v1008;
    v1019 = *(_DWORD *)(v1017 + 4 * v1016);
    if (*v1008 >= v1019)
    {
LABEL_496:
      v1046 = (_OWORD *)(*(_QWORD *)(a1 + 2464) + 8 * v1015);
      v1047 = *(unsigned int *)(a2 + 16);
      v1048 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1019 + (_DWORD)v1047 * v1018));
      v1049 = v1046[1];
      v1050 = v1046[2];
      v1051 = v1046[3];
      v1052 = v1046[4];
      v1053 = v1046[5];
      v1054 = v1046[6];
      v1055 = v1046[7];
      v1056 = v1046[8];
      v1057 = v1046[9];
      v1058 = v1046[10];
      v1059 = v1046[11];
      v1060 = v1046[12];
      v1061 = v1046[13];
      v1062 = v1046[14];
      v1063 = v1046[15];
      v1064 = v1046[16];
      v1065 = v1046[17];
      *v1048 = *v1046;
      v1048[1] = v1049;
      v1066 = (_OWORD *)((char *)v1048 + 8 * v1047);
      *v1066 = v1050;
      v1066[1] = v1051;
      v1067 = &v1048[v1047];
      *v1067 = v1052;
      v1067[1] = v1053;
      v1068 = (_OWORD *)((char *)v1048 + 24 * v1047);
      *v1068 = v1054;
      v1068[1] = v1055;
      v1069 = &v1048[2 * v1047];
      *v1069 = v1056;
      v1069[1] = v1057;
      v1070 = (_OWORD *)((char *)v1048 + 40 * v1047);
      *v1070 = v1058;
      v1070[1] = v1059;
      v1071 = &v1048[3 * v1047];
      *v1071 = v1060;
      v1071[1] = v1061;
      v1072 = (_OWORD *)((char *)v1048 + 56 * v1047);
      *v1072 = v1062;
      v1072[1] = v1063;
      v1073 = &v1048[4 * v1047];
      *v1073 = v1064;
      v1073[1] = v1065;
      goto LABEL_497;
    }
    v1020 = *(_QWORD *)(a1 + 2464) + 8 * v1015;
    v1021 = *(unsigned int *)(a2 + 16);
    v1022 = *(_QWORD *)a2 + 8 * (v1018 + (_DWORD)v1021 * v1019);
    v1023 = *(int64x2_t *)(v1020 + 16);
    v1025 = *(int64x2_t *)(v1020 + 32);
    v1024 = *(int64x2_t *)(v1020 + 48);
    v1027 = *(int64x2_t *)(v1020 + 64);
    v1026 = *(int64x2_t *)(v1020 + 80);
    v1029 = *(int64x2_t *)(v1020 + 128);
    v1028 = *(int64x2_t *)(v1020 + 144);
    v1031 = *(int64x2_t *)(v1020 + 192);
    v1030 = *(int64x2_t *)(v1020 + 208);
    v1033 = *(_OWORD *)(v1020 + 256);
    v1032 = *(_OWORD *)(v1020 + 272);
    v1034 = vzip1q_s64(*(int64x2_t *)v1020, v1025);
    v1035 = vzip1q_s64(v1027, *(int64x2_t *)(v1020 + 96));
    v1036 = vzip1q_s64(v1031, *(int64x2_t *)(v1020 + 224));
    v1037 = vzip2q_s64(*(int64x2_t *)v1020, v1025);
    v1025.i64[0] = vdupq_laneq_s64(v1027, 1).u64[0];
    v1025.i64[1] = *(_QWORD *)(v1020 + 104);
    v1027.i64[0] = vdupq_laneq_s64(v1029, 1).u64[0];
    v1027.i64[1] = *(_QWORD *)(v1020 + 168);
    *(_QWORD *)&v1038 = vdupq_laneq_s64(v1031, 1).u64[0];
    *((_QWORD *)&v1038 + 1) = *(_QWORD *)(v1020 + 232);
    v1039 = vzip1q_s64(v1026, *(int64x2_t *)(v1020 + 112));
    v1040 = vzip1q_s64(v1028, *(int64x2_t *)(v1020 + 176));
    v1041 = vzip1q_s64(v1030, *(int64x2_t *)(v1020 + 240));
    v1026.i64[0] = vdupq_laneq_s64(v1026, 1).u64[0];
    v1026.i64[1] = *(_QWORD *)(v1020 + 120);
    *(_QWORD *)&v1042 = vdupq_laneq_s64(v1028, 1).u64[0];
    *((_QWORD *)&v1042 + 1) = *(_QWORD *)(v1020 + 184);
    v1028.i64[0] = vdupq_laneq_s64(v1030, 1).u64[0];
    v1028.i64[1] = *(_QWORD *)(v1020 + 248);
    *(int64x2_t *)(v1022 + 32) = vzip1q_s64(v1029, *(int64x2_t *)(v1020 + 160));
    *(int64x2_t *)(v1022 + 48) = v1036;
    *(_QWORD *)(v1022 + 64) = v1033;
    *(int64x2_t *)v1022 = v1034;
    *(int64x2_t *)(v1022 + 16) = v1035;
    v1043 = v1022 + 8 * v1021;
    *(int64x2_t *)(v1043 + 32) = v1027;
    *(_OWORD *)(v1043 + 48) = v1038;
    *(int64x2_t *)v1043 = v1037;
    *(int64x2_t *)(v1043 + 16) = v1025;
    *(_QWORD *)(v1043 + 64) = *((_QWORD *)&v1033 + 1);
    v1044 = (int64x2_t *)(v1022 + 16 * v1021);
    v1044[4].i64[0] = v1032;
    v1044[2] = v1040;
    v1044[3] = v1041;
    *v1044 = vzip1q_s64(v1023, v1024);
    v1044[1] = v1039;
    v1045 = v1022 + 24 * v1021;
    *(_QWORD *)(v1045 + 64) = *((_QWORD *)&v1032 + 1);
    *(_OWORD *)(v1045 + 32) = v1042;
    *(int64x2_t *)(v1045 + 48) = v1028;
    *(int64x2_t *)v1045 = vzip2q_s64(v1023, v1024);
    *(int64x2_t *)(v1045 + 16) = v1026;
LABEL_497:
    v1074 = v1011 + 1;
    while (v1074 != v1014)
    {
      ++v1013;
      v1075 = *v1074++;
      v1015 = v1075;
      if (v1075 != -1)
      {
        v1011 = v1074 - 1;
        v1016 = v1013;
        v1017 = a3[21];
        if (v10)
          goto LABEL_493;
        goto LABEL_495;
      }
    }
    v1006 = *(_DWORD *)(a1 + 2460);
LABEL_487:
    ++v1007;
    ++v1008;
    if (v1007 < v1006)
      continue;
    break;
  }
  v10 = *a5;
LABEL_507:
  v1079 = *(_DWORD *)(a1 + 3900);
  if (!v1079)
    goto LABEL_530;
  v1080 = 0;
  v1081 = a4[6];
  while (2)
  {
    v1082 = *(_QWORD *)(a1 + 3976);
    v1083 = *(_DWORD *)(a1 + 4000) * v1080;
    v1084 = (uint64_t *)(v1082 + 8 * v1083);
    v1085 = *(_DWORD *)(a1 + 3896);
    if (v1085 && *v1084 == -1)
    {
      v1086 = 0;
      v1135 = 8 * (v1085 + v1083) - 8 * v1083 - 8;
      v1136 = v1082 + 8 * v1083;
      while (v1135)
      {
        v1084 = (uint64_t *)(v1136 + 8);
        ++v1086;
        v1137 = *(_QWORD *)(v1136 + 8);
        v1135 -= 8;
        v1136 += 8;
        if (v1137 != -1)
          goto LABEL_514;
      }
      goto LABEL_510;
    }
    v1086 = 0;
LABEL_514:
    v1087 = (uint64_t *)(v1082 + 8 * (v1083 + v1085));
    if (v1084 == v1087)
      goto LABEL_510;
    v1088 = *v1084;
    v1089 = v1086;
    v1090 = a3[21];
    if (!v10)
    {
LABEL_518:
      v1092 = *(_DWORD *)(v1090 + 4 * v1089);
      v1091 = *v1081;
      goto LABEL_519;
    }
LABEL_516:
    v1091 = *v1081;
    v1092 = *(_DWORD *)(v1090 + 4 * v1089);
    if (*v1081 >= v1092)
    {
LABEL_519:
      v1114 = (_OWORD *)(*(_QWORD *)(a1 + 3904) + 8 * v1088);
      v1115 = *(unsigned int *)(a2 + 16);
      v1116 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1092 + (_DWORD)v1115 * v1091));
      v1117 = v1114[1];
      v1118 = v1114[2];
      v1119 = v1114[3];
      v1120 = v1114[4];
      v1121 = v1114[5];
      v1122 = v1114[6];
      v1123 = v1114[7];
      v1124 = v1114[8];
      v1125 = v1114[9];
      v1126 = v1114[10];
      v1127 = v1114[11];
      *v1116 = *v1114;
      v1116[1] = v1117;
      v1128 = (_OWORD *)((char *)v1116 + 8 * v1115);
      *v1128 = v1118;
      v1128[1] = v1119;
      v1129 = &v1116[v1115];
      *v1129 = v1120;
      v1129[1] = v1121;
      v1130 = (_OWORD *)((char *)v1116 + 24 * v1115);
      *v1130 = v1122;
      v1130[1] = v1123;
      v1131 = &v1116[2 * v1115];
      *v1131 = v1124;
      v1131[1] = v1125;
      v1132 = (_OWORD *)((char *)v1116 + 40 * v1115);
      *v1132 = v1126;
      v1132[1] = v1127;
      goto LABEL_520;
    }
    v1093 = *(_QWORD *)(a1 + 3904) + 8 * v1088;
    v1094 = *(unsigned int *)(a2 + 16);
    v1095 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1091 + (_DWORD)v1094 * v1092));
    v1096 = *(int64x2_t *)(v1093 + 16);
    v1098 = *(int64x2_t *)(v1093 + 32);
    v1097 = *(int64x2_t *)(v1093 + 48);
    v1100 = *(int64x2_t *)(v1093 + 64);
    v1099 = *(int64x2_t *)(v1093 + 80);
    v1102 = *(int64x2_t *)(v1093 + 128);
    v1101 = *(int64x2_t *)(v1093 + 144);
    v1103 = vzip1q_s64(*(int64x2_t *)v1093, v1098);
    v1104 = vzip1q_s64(v1100, *(int64x2_t *)(v1093 + 96));
    v1105 = vzip1q_s64(v1102, *(int64x2_t *)(v1093 + 160));
    v1100.i64[0] = vdupq_laneq_s64(v1100, 1).u64[0];
    v1100.i64[1] = *(_QWORD *)(v1093 + 104);
    v1106.i64[0] = vdupq_laneq_s64(v1102, 1).u64[0];
    v1107 = vzip2q_s64(*(int64x2_t *)v1093, v1098);
    v1106.i64[1] = *(_QWORD *)(v1093 + 168);
    v1108 = vzip1q_s64(v1099, *(int64x2_t *)(v1093 + 112));
    v1109 = vzip1q_s64(v1101, *(int64x2_t *)(v1093 + 176));
    v1099.i64[0] = vdupq_laneq_s64(v1099, 1).u64[0];
    v1099.i64[1] = *(_QWORD *)(v1093 + 120);
    v1110.i64[0] = vdupq_laneq_s64(v1101, 1).u64[0];
    v1110.i64[1] = *(_QWORD *)(v1093 + 184);
    v1095[1] = v1104;
    v1095[2] = v1105;
    *v1095 = v1103;
    v1111 = (int64x2_t *)((char *)v1095 + 8 * v1094);
    v1111[1] = v1100;
    v1111[2] = v1106;
    *v1111 = v1107;
    v1112 = &v1095[v1094];
    v1112[1] = v1108;
    v1112[2] = v1109;
    *v1112 = vzip1q_s64(v1096, v1097);
    v1113 = (int64x2_t *)((char *)v1095 + 24 * v1094);
    v1113[1] = v1099;
    v1113[2] = v1110;
    *v1113 = vzip2q_s64(v1096, v1097);
LABEL_520:
    v1133 = v1084 + 1;
    while (v1133 != v1087)
    {
      ++v1086;
      v1134 = *v1133++;
      v1088 = v1134;
      if (v1134 != -1)
      {
        v1084 = v1133 - 1;
        v1089 = v1086;
        v1090 = a3[21];
        if (v10)
          goto LABEL_516;
        goto LABEL_518;
      }
    }
    v1079 = *(_DWORD *)(a1 + 3900);
LABEL_510:
    ++v1080;
    ++v1081;
    if (v1080 < v1079)
      continue;
    break;
  }
  v10 = *a5;
LABEL_530:
  v1138 = *(_DWORD *)(a1 + 5340);
  if (!v1138)
    goto LABEL_553;
  v1139 = 0;
  v1140 = a4[9];
  while (2)
  {
    v1141 = *(_QWORD *)(a1 + 5416);
    v1142 = *(_DWORD *)(a1 + 5440) * v1139;
    v1143 = (uint64_t *)(v1141 + 8 * v1142);
    v1144 = *(_DWORD *)(a1 + 5336);
    if (v1144 && *v1143 == -1)
    {
      v1145 = 0;
      v1194 = 8 * (v1144 + v1142) - 8 * v1142 - 8;
      v1195 = v1141 + 8 * v1142;
      while (v1194)
      {
        v1143 = (uint64_t *)(v1195 + 8);
        ++v1145;
        v1196 = *(_QWORD *)(v1195 + 8);
        v1194 -= 8;
        v1195 += 8;
        if (v1196 != -1)
          goto LABEL_537;
      }
      goto LABEL_533;
    }
    v1145 = 0;
LABEL_537:
    v1146 = (uint64_t *)(v1141 + 8 * (v1142 + v1144));
    if (v1143 == v1146)
      goto LABEL_533;
    v1147 = *v1143;
    v1148 = v1145;
    v1149 = a3[21];
    if (!v10)
    {
LABEL_541:
      v1151 = *(_DWORD *)(v1149 + 4 * v1148);
      v1150 = *v1140;
      goto LABEL_542;
    }
LABEL_539:
    v1150 = *v1140;
    v1151 = *(_DWORD *)(v1149 + 4 * v1148);
    if (*v1140 >= v1151)
    {
LABEL_542:
      v1173 = (_OWORD *)(*(_QWORD *)(a1 + 5344) + 8 * v1147);
      v1174 = *(unsigned int *)(a2 + 16);
      v1175 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1151 + (_DWORD)v1174 * v1150));
      v1176 = v1173[1];
      v1177 = v1173[2];
      v1178 = v1173[3];
      v1179 = v1173[4];
      v1180 = v1173[5];
      v1181 = v1173[6];
      v1182 = v1173[7];
      v1183 = v1173[8];
      v1184 = v1173[9];
      v1185 = v1173[10];
      v1186 = v1173[11];
      *v1175 = *v1173;
      v1175[1] = v1176;
      v1187 = (_OWORD *)((char *)v1175 + 8 * v1174);
      *v1187 = v1177;
      v1187[1] = v1178;
      v1188 = &v1175[v1174];
      *v1188 = v1179;
      v1188[1] = v1180;
      v1189 = (_OWORD *)((char *)v1175 + 24 * v1174);
      *v1189 = v1181;
      v1189[1] = v1182;
      v1190 = &v1175[2 * v1174];
      *v1190 = v1183;
      v1190[1] = v1184;
      v1191 = (_OWORD *)((char *)v1175 + 40 * v1174);
      *v1191 = v1185;
      v1191[1] = v1186;
      goto LABEL_543;
    }
    v1152 = *(_QWORD *)(a1 + 5344) + 8 * v1147;
    v1153 = *(unsigned int *)(a2 + 16);
    v1154 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1150 + (_DWORD)v1153 * v1151));
    v1155 = *(int64x2_t *)(v1152 + 16);
    v1157 = *(int64x2_t *)(v1152 + 32);
    v1156 = *(int64x2_t *)(v1152 + 48);
    v1159 = *(int64x2_t *)(v1152 + 64);
    v1158 = *(int64x2_t *)(v1152 + 80);
    v1161 = *(int64x2_t *)(v1152 + 128);
    v1160 = *(int64x2_t *)(v1152 + 144);
    v1162 = vzip1q_s64(*(int64x2_t *)v1152, v1157);
    v1163 = vzip1q_s64(v1159, *(int64x2_t *)(v1152 + 96));
    v1164 = vzip1q_s64(v1161, *(int64x2_t *)(v1152 + 160));
    v1159.i64[0] = vdupq_laneq_s64(v1159, 1).u64[0];
    v1159.i64[1] = *(_QWORD *)(v1152 + 104);
    v1165.i64[0] = vdupq_laneq_s64(v1161, 1).u64[0];
    v1166 = vzip2q_s64(*(int64x2_t *)v1152, v1157);
    v1165.i64[1] = *(_QWORD *)(v1152 + 168);
    v1167 = vzip1q_s64(v1158, *(int64x2_t *)(v1152 + 112));
    v1168 = vzip1q_s64(v1160, *(int64x2_t *)(v1152 + 176));
    v1158.i64[0] = vdupq_laneq_s64(v1158, 1).u64[0];
    v1158.i64[1] = *(_QWORD *)(v1152 + 120);
    v1169.i64[0] = vdupq_laneq_s64(v1160, 1).u64[0];
    v1169.i64[1] = *(_QWORD *)(v1152 + 184);
    v1154[1] = v1163;
    v1154[2] = v1164;
    *v1154 = v1162;
    v1170 = (int64x2_t *)((char *)v1154 + 8 * v1153);
    v1170[1] = v1159;
    v1170[2] = v1165;
    *v1170 = v1166;
    v1171 = &v1154[v1153];
    v1171[1] = v1167;
    v1171[2] = v1168;
    *v1171 = vzip1q_s64(v1155, v1156);
    v1172 = (int64x2_t *)((char *)v1154 + 24 * v1153);
    v1172[1] = v1158;
    v1172[2] = v1169;
    *v1172 = vzip2q_s64(v1155, v1156);
LABEL_543:
    v1192 = v1143 + 1;
    while (v1192 != v1146)
    {
      ++v1145;
      v1193 = *v1192++;
      v1147 = v1193;
      if (v1193 != -1)
      {
        v1143 = v1192 - 1;
        v1148 = v1145;
        v1149 = a3[21];
        if (v10)
          goto LABEL_539;
        goto LABEL_541;
      }
    }
    v1138 = *(_DWORD *)(a1 + 5340);
LABEL_533:
    ++v1139;
    ++v1140;
    if (v1139 < v1138)
      continue;
    break;
  }
  v10 = *a5;
LABEL_553:
  v1197 = *(_DWORD *)(a1 + 6780);
  if (!v1197)
    goto LABEL_576;
  v1198 = 0;
  v1199 = a4[12];
  while (2)
  {
    v1200 = *(_QWORD *)(a1 + 6856);
    v1201 = *(_DWORD *)(a1 + 6880) * v1198;
    v1202 = (uint64_t *)(v1200 + 8 * v1201);
    v1203 = *(_DWORD *)(a1 + 6776);
    if (v1203 && *v1202 == -1)
    {
      v1204 = 0;
      v1236 = 8 * (v1203 + v1201) - 8 * v1201 - 8;
      v1237 = v1200 + 8 * v1201;
      while (v1236)
      {
        v1202 = (uint64_t *)(v1237 + 8);
        ++v1204;
        v1238 = *(_QWORD *)(v1237 + 8);
        v1236 -= 8;
        v1237 += 8;
        if (v1238 != -1)
          goto LABEL_560;
      }
      goto LABEL_556;
    }
    v1204 = 0;
LABEL_560:
    v1205 = (uint64_t *)(v1200 + 8 * (v1201 + v1203));
    if (v1202 == v1205)
      goto LABEL_556;
    v1206 = *v1202;
    v1207 = v1204;
    v1208 = a3[21];
    if (!v10)
    {
LABEL_564:
      v1210 = *(_DWORD *)(v1208 + 4 * v1207);
      v1209 = *v1199;
      goto LABEL_565;
    }
LABEL_562:
    v1209 = *v1199;
    v1210 = *(_DWORD *)(v1208 + 4 * v1207);
    if (*v1199 >= v1210)
    {
LABEL_565:
      v1224 = (_OWORD *)(*(_QWORD *)(a1 + 6784) + 8 * v1206);
      v1225 = *(unsigned int *)(a2 + 16);
      v1226 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1210 + (_DWORD)v1225 * v1209));
      v1227 = v1224[1];
      v1228 = v1224[2];
      v1229 = v1224[3];
      v1230 = v1224[4];
      v1231 = v1224[5];
      *v1226 = *v1224;
      v1226[1] = v1227;
      v1232 = (_OWORD *)((char *)v1226 + 8 * v1225);
      *v1232 = v1228;
      v1232[1] = v1229;
      v1233 = &v1226[v1225];
      *v1233 = v1230;
      v1233[1] = v1231;
      goto LABEL_566;
    }
    v1211 = *(_QWORD *)(a1 + 6784) + 8 * v1206;
    v1212 = *(unsigned int *)(a2 + 16);
    v1213 = *(_QWORD *)a2 + 8 * (v1209 + (_DWORD)v1212 * v1210);
    v1214 = *(int64x2_t *)(v1211 + 16);
    v1216 = *(int64x2_t *)(v1211 + 32);
    v1215 = *(int64x2_t *)(v1211 + 48);
    v1218 = *(_OWORD *)(v1211 + 64);
    v1217 = *(_OWORD *)(v1211 + 80);
    v1219 = vzip1q_s64(*(int64x2_t *)v1211, v1216);
    v1220 = vzip2q_s64(*(int64x2_t *)v1211, v1216);
    *(_QWORD *)(v1213 + 16) = v1218;
    *(int64x2_t *)v1213 = v1219;
    v1221 = (int64x2_t *)(v1213 + 8 * v1212);
    *v1221 = v1220;
    v1221[1].i64[0] = *((_QWORD *)&v1218 + 1);
    v1222 = (int64x2_t *)(v1213 + 16 * v1212);
    v1222[1].i64[0] = v1217;
    *v1222 = vzip1q_s64(v1214, v1215);
    v1223 = (int64x2_t *)(v1213 + 24 * v1212);
    v1223[1].i64[0] = *((_QWORD *)&v1217 + 1);
    *v1223 = vzip2q_s64(v1214, v1215);
LABEL_566:
    v1234 = v1202 + 1;
    while (v1234 != v1205)
    {
      ++v1204;
      v1235 = *v1234++;
      v1206 = v1235;
      if (v1235 != -1)
      {
        v1202 = v1234 - 1;
        v1207 = v1204;
        v1208 = a3[21];
        if (v10)
          goto LABEL_562;
        goto LABEL_564;
      }
    }
    v1197 = *(_DWORD *)(a1 + 6780);
LABEL_556:
    ++v1198;
    ++v1199;
    if (v1198 < v1197)
      continue;
    break;
  }
  v10 = *a5;
LABEL_576:
  v1239 = *(_DWORD *)(a1 + 8220);
  if (!v1239)
    goto LABEL_599;
  v1240 = 0;
  v1241 = a4[15];
  while (2)
  {
    v1242 = *(_QWORD *)(a1 + 8296);
    v1243 = *(_DWORD *)(a1 + 8320) * v1240;
    v1244 = (uint64_t *)(v1242 + 8 * v1243);
    v1245 = *(_DWORD *)(a1 + 8216);
    if (v1245 && *v1244 == -1)
    {
      v1246 = 0;
      v1263 = 8 * (v1245 + v1243) - 8 * v1243 - 8;
      v1264 = v1242 + 8 * v1243;
      while (v1263)
      {
        v1244 = (uint64_t *)(v1264 + 8);
        ++v1246;
        v1265 = *(_QWORD *)(v1264 + 8);
        v1263 -= 8;
        v1264 += 8;
        if (v1265 != -1)
          goto LABEL_583;
      }
      goto LABEL_579;
    }
    v1246 = 0;
LABEL_583:
    v1247 = (uint64_t *)(v1242 + 8 * (v1243 + v1245));
    if (v1244 == v1247)
      goto LABEL_579;
    v1248 = *v1244;
    v1249 = v1246;
    v1250 = a3[21];
    if (!v10)
    {
LABEL_587:
      v1252 = *(_DWORD *)(v1250 + 4 * v1249);
      v1251 = *v1241;
      goto LABEL_588;
    }
LABEL_585:
    v1251 = *v1241;
    v1252 = *(_DWORD *)(v1250 + 4 * v1249);
    if (*v1241 >= v1252)
    {
LABEL_588:
      v1258 = (_OWORD *)(*(_QWORD *)(a1 + 8224) + 8 * v1248);
      v1259 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1252 + *(_DWORD *)(a2 + 16) * v1251));
      v1260 = v1258[1];
      *v1259 = *v1258;
      v1259[1] = v1260;
      goto LABEL_589;
    }
    v1253 = *(_QWORD *)(a1 + 8224) + 8 * v1248;
    v1254 = *(unsigned int *)(a2 + 16);
    v1255 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1251 + (_DWORD)v1254 * v1252));
    v1256 = *(int8x16_t *)(v1253 + 16);
    v1257 = vextq_s8(*(int8x16_t *)v1253, *(int8x16_t *)v1253, 8uLL).u64[0];
    *v1255 = *(_QWORD *)v1253;
    v1255[v1254] = v1257;
    v1255[2 * v1254] = v1256.i64[0];
    v1255[3 * v1254] = vextq_s8(v1256, v1256, 8uLL).u64[0];
LABEL_589:
    v1261 = v1244 + 1;
    while (v1261 != v1247)
    {
      ++v1246;
      v1262 = *v1261++;
      v1248 = v1262;
      if (v1262 != -1)
      {
        v1244 = v1261 - 1;
        v1249 = v1246;
        v1250 = a3[21];
        if (v10)
          goto LABEL_585;
        goto LABEL_587;
      }
    }
    v1239 = *(_DWORD *)(a1 + 8220);
LABEL_579:
    ++v1240;
    ++v1241;
    if (v1240 < v1239)
      continue;
    break;
  }
  v10 = *a5;
LABEL_599:
  v1266 = *(_DWORD *)(a1 + 9660);
  if (!v1266)
    goto LABEL_622;
  v1267 = 0;
  v1268 = a4[18];
  while (2)
  {
    v1269 = *(_QWORD *)(a1 + 9736);
    v1270 = *(_DWORD *)(a1 + 9760) * v1267;
    v1271 = (uint64_t *)(v1269 + 8 * v1270);
    v1272 = *(_DWORD *)(a1 + 9656);
    if (v1272 && *v1271 == -1)
    {
      v1273 = 0;
      v1305 = 8 * (v1272 + v1270) - 8 * v1270 - 8;
      v1306 = v1269 + 8 * v1270;
      while (v1305)
      {
        v1271 = (uint64_t *)(v1306 + 8);
        ++v1273;
        v1307 = *(_QWORD *)(v1306 + 8);
        v1305 -= 8;
        v1306 += 8;
        if (v1307 != -1)
          goto LABEL_606;
      }
      goto LABEL_602;
    }
    v1273 = 0;
LABEL_606:
    v1274 = (uint64_t *)(v1269 + 8 * (v1270 + v1272));
    if (v1271 == v1274)
      goto LABEL_602;
    v1275 = *v1271;
    v1276 = v1273;
    v1277 = a3[21];
    if (!v10)
    {
LABEL_610:
      v1279 = *(_DWORD *)(v1277 + 4 * v1276);
      v1278 = *v1268;
      goto LABEL_611;
    }
LABEL_608:
    v1278 = *v1268;
    v1279 = *(_DWORD *)(v1277 + 4 * v1276);
    if (*v1268 >= v1279)
    {
LABEL_611:
      v1293 = (_OWORD *)(*(_QWORD *)(a1 + 9664) + 8 * v1275);
      v1294 = *(unsigned int *)(a2 + 16);
      v1295 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1279 + (_DWORD)v1294 * v1278));
      v1296 = v1293[1];
      v1297 = v1293[2];
      v1298 = v1293[3];
      v1299 = v1293[4];
      v1300 = v1293[5];
      *v1295 = *v1293;
      v1295[1] = v1296;
      v1301 = (_OWORD *)((char *)v1295 + 8 * v1294);
      *v1301 = v1297;
      v1301[1] = v1298;
      v1302 = &v1295[v1294];
      *v1302 = v1299;
      v1302[1] = v1300;
      goto LABEL_612;
    }
    v1280 = *(_QWORD *)(a1 + 9664) + 8 * v1275;
    v1281 = *(unsigned int *)(a2 + 16);
    v1282 = *(_QWORD *)a2 + 8 * (v1278 + (_DWORD)v1281 * v1279);
    v1283 = *(int64x2_t *)(v1280 + 16);
    v1285 = *(int64x2_t *)(v1280 + 32);
    v1284 = *(int64x2_t *)(v1280 + 48);
    v1287 = *(_OWORD *)(v1280 + 64);
    v1286 = *(_OWORD *)(v1280 + 80);
    v1288 = vzip1q_s64(*(int64x2_t *)v1280, v1285);
    v1289 = vzip2q_s64(*(int64x2_t *)v1280, v1285);
    *(_QWORD *)(v1282 + 16) = v1287;
    *(int64x2_t *)v1282 = v1288;
    v1290 = (int64x2_t *)(v1282 + 8 * v1281);
    *v1290 = v1289;
    v1290[1].i64[0] = *((_QWORD *)&v1287 + 1);
    v1291 = (int64x2_t *)(v1282 + 16 * v1281);
    v1291[1].i64[0] = v1286;
    *v1291 = vzip1q_s64(v1283, v1284);
    v1292 = (int64x2_t *)(v1282 + 24 * v1281);
    v1292[1].i64[0] = *((_QWORD *)&v1286 + 1);
    *v1292 = vzip2q_s64(v1283, v1284);
LABEL_612:
    v1303 = v1271 + 1;
    while (v1303 != v1274)
    {
      ++v1273;
      v1304 = *v1303++;
      v1275 = v1304;
      if (v1304 != -1)
      {
        v1271 = v1303 - 1;
        v1276 = v1273;
        v1277 = a3[21];
        if (v10)
          goto LABEL_608;
        goto LABEL_610;
      }
    }
    v1266 = *(_DWORD *)(a1 + 9660);
LABEL_602:
    ++v1267;
    ++v1268;
    if (v1267 < v1266)
      continue;
    break;
  }
  v10 = *a5;
LABEL_622:
  v1308 = *(_DWORD *)(a1 + 11100);
  if (!v1308)
    goto LABEL_645;
  v1309 = 0;
  v1310 = a4[21];
  while (2)
  {
    v1311 = *(_QWORD *)(a1 + 11176);
    v1312 = *(_DWORD *)(a1 + 11200) * v1309;
    v1313 = (uint64_t *)(v1311 + 8 * v1312);
    v1314 = *(_DWORD *)(a1 + 11096);
    if (v1314 && *v1313 == -1)
    {
      v1315 = 0;
      v1347 = 8 * (v1314 + v1312) - 8 * v1312 - 8;
      v1348 = v1311 + 8 * v1312;
      while (v1347)
      {
        v1313 = (uint64_t *)(v1348 + 8);
        ++v1315;
        v1349 = *(_QWORD *)(v1348 + 8);
        v1347 -= 8;
        v1348 += 8;
        if (v1349 != -1)
          goto LABEL_629;
      }
      goto LABEL_625;
    }
    v1315 = 0;
LABEL_629:
    v1316 = (uint64_t *)(v1311 + 8 * (v1312 + v1314));
    if (v1313 == v1316)
      goto LABEL_625;
    v1317 = *v1313;
    v1318 = v1315;
    v1319 = a3[21];
    if (!v10)
    {
LABEL_633:
      v1321 = *(_DWORD *)(v1319 + 4 * v1318);
      v1320 = *v1310;
      goto LABEL_634;
    }
LABEL_631:
    v1320 = *v1310;
    v1321 = *(_DWORD *)(v1319 + 4 * v1318);
    if (*v1310 >= v1321)
    {
LABEL_634:
      v1338 = (int64x2_t *)(*(_QWORD *)(a1 + 11104) + 8 * v1317);
      v1323 = *(unsigned int *)(a2 + 16);
      v1324 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1321 + (_DWORD)v1323 * v1320));
      v1339 = v1338[1];
      v1340 = v1338[2];
      v1341 = v1338[3];
      v1333 = v1338[4];
      v1334 = v1338[5];
      v1336 = v1338[6];
      v1335 = v1338[7];
      *v1324 = *v1338;
      v1324[1] = v1339;
      v1342 = &v1324->i8[8 * v1323];
      *(int64x2_t *)v1342 = v1340;
      *((int64x2_t *)v1342 + 1) = v1341;
      goto LABEL_635;
    }
    v1322 = *(_QWORD *)(a1 + 11104) + 8 * v1317;
    v1323 = *(unsigned int *)(a2 + 16);
    v1324 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1320 + (_DWORD)v1323 * v1321));
    v1325 = *(int64x2_t *)(v1322 + 16);
    v1326 = *(int64x2_t *)(v1322 + 32);
    v1327 = *(int64x2_t *)(v1322 + 48);
    v1329 = *(int64x2_t *)(v1322 + 64);
    v1328 = *(int64x2_t *)(v1322 + 80);
    v1330 = vzip1q_s64(*(int64x2_t *)v1322, v1326);
    v1331 = vzip1q_s64(v1329, *(int64x2_t *)(v1322 + 96));
    v1332 = vzip2q_s64(*(int64x2_t *)v1322, v1326);
    v1329.i64[0] = vdupq_laneq_s64(v1329, 1).u64[0];
    v1329.i64[1] = *(_QWORD *)(v1322 + 104);
    v1333 = vzip1q_s64(v1325, v1327);
    v1334 = vzip1q_s64(v1328, *(int64x2_t *)(v1322 + 112));
    v1335.i64[0] = vdupq_laneq_s64(v1328, 1).u64[0];
    v1335.i64[1] = *(_QWORD *)(v1322 + 120);
    v1336 = vzip2q_s64(v1325, v1327);
    *v1324 = v1330;
    v1324[1] = v1331;
    v1337 = (int64x2_t *)((char *)v1324 + 8 * v1323);
    *v1337 = v1332;
    v1337[1] = v1329;
LABEL_635:
    v1343 = &v1324[v1323];
    *v1343 = v1333;
    v1343[1] = v1334;
    v1344 = (int64x2_t *)((char *)v1324 + 24 * v1323);
    *v1344 = v1336;
    v1344[1] = v1335;
    v1345 = v1313 + 1;
    while (v1345 != v1316)
    {
      ++v1315;
      v1346 = *v1345++;
      v1317 = v1346;
      if (v1346 != -1)
      {
        v1313 = v1345 - 1;
        v1318 = v1315;
        v1319 = a3[21];
        if (v10)
          goto LABEL_631;
        goto LABEL_633;
      }
    }
    v1308 = *(_DWORD *)(a1 + 11100);
LABEL_625:
    ++v1309;
    ++v1310;
    if (v1309 < v1308)
      continue;
    break;
  }
  v10 = *a5;
LABEL_645:
  v1350 = *(_DWORD *)(a1 + 12540);
  if (!v1350)
    goto LABEL_668;
  v1351 = 0;
  v1352 = a4[24];
  while (2)
  {
    v1353 = *(_QWORD *)(a1 + 12616);
    v1354 = *(_DWORD *)(a1 + 12640) * v1351;
    v1355 = (uint64_t *)(v1353 + 8 * v1354);
    v1356 = *(_DWORD *)(a1 + 12536);
    if (v1356 && *v1355 == -1)
    {
      v1357 = 0;
      v1389 = 8 * (v1356 + v1354) - 8 * v1354 - 8;
      v1390 = v1353 + 8 * v1354;
      while (v1389)
      {
        v1355 = (uint64_t *)(v1390 + 8);
        ++v1357;
        v1391 = *(_QWORD *)(v1390 + 8);
        v1389 -= 8;
        v1390 += 8;
        if (v1391 != -1)
          goto LABEL_652;
      }
      goto LABEL_648;
    }
    v1357 = 0;
LABEL_652:
    v1358 = (uint64_t *)(v1353 + 8 * (v1354 + v1356));
    if (v1355 == v1358)
      goto LABEL_648;
    v1359 = *v1355;
    v1360 = v1357;
    v1361 = a3[21];
    if (!v10)
    {
LABEL_656:
      v1363 = *(_DWORD *)(v1361 + 4 * v1360);
      v1362 = *v1352;
      goto LABEL_657;
    }
LABEL_654:
    v1362 = *v1352;
    v1363 = *(_DWORD *)(v1361 + 4 * v1360);
    if (*v1352 >= v1363)
    {
LABEL_657:
      v1380 = (int64x2_t *)(*(_QWORD *)(a1 + 12544) + 8 * v1359);
      v1365 = *(unsigned int *)(a2 + 16);
      v1366 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1363 + (_DWORD)v1365 * v1362));
      v1381 = v1380[1];
      v1382 = v1380[2];
      v1383 = v1380[3];
      v1375 = v1380[4];
      v1376 = v1380[5];
      v1378 = v1380[6];
      v1377 = v1380[7];
      *v1366 = *v1380;
      v1366[1] = v1381;
      v1384 = &v1366->i8[8 * v1365];
      *(int64x2_t *)v1384 = v1382;
      *((int64x2_t *)v1384 + 1) = v1383;
      goto LABEL_658;
    }
    v1364 = *(_QWORD *)(a1 + 12544) + 8 * v1359;
    v1365 = *(unsigned int *)(a2 + 16);
    v1366 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1362 + (_DWORD)v1365 * v1363));
    v1367 = *(int64x2_t *)(v1364 + 16);
    v1368 = *(int64x2_t *)(v1364 + 32);
    v1369 = *(int64x2_t *)(v1364 + 48);
    v1371 = *(int64x2_t *)(v1364 + 64);
    v1370 = *(int64x2_t *)(v1364 + 80);
    v1372 = vzip1q_s64(*(int64x2_t *)v1364, v1368);
    v1373 = vzip1q_s64(v1371, *(int64x2_t *)(v1364 + 96));
    v1374 = vzip2q_s64(*(int64x2_t *)v1364, v1368);
    v1371.i64[0] = vdupq_laneq_s64(v1371, 1).u64[0];
    v1371.i64[1] = *(_QWORD *)(v1364 + 104);
    v1375 = vzip1q_s64(v1367, v1369);
    v1376 = vzip1q_s64(v1370, *(int64x2_t *)(v1364 + 112));
    v1377.i64[0] = vdupq_laneq_s64(v1370, 1).u64[0];
    v1377.i64[1] = *(_QWORD *)(v1364 + 120);
    v1378 = vzip2q_s64(v1367, v1369);
    *v1366 = v1372;
    v1366[1] = v1373;
    v1379 = (int64x2_t *)((char *)v1366 + 8 * v1365);
    *v1379 = v1374;
    v1379[1] = v1371;
LABEL_658:
    v1385 = &v1366[v1365];
    *v1385 = v1375;
    v1385[1] = v1376;
    v1386 = (int64x2_t *)((char *)v1366 + 24 * v1365);
    *v1386 = v1378;
    v1386[1] = v1377;
    v1387 = v1355 + 1;
    while (v1387 != v1358)
    {
      ++v1357;
      v1388 = *v1387++;
      v1359 = v1388;
      if (v1388 != -1)
      {
        v1355 = v1387 - 1;
        v1360 = v1357;
        v1361 = a3[21];
        if (v10)
          goto LABEL_654;
        goto LABEL_656;
      }
    }
    v1350 = *(_DWORD *)(a1 + 12540);
LABEL_648:
    ++v1351;
    ++v1352;
    if (v1351 < v1350)
      continue;
    break;
  }
  v10 = *a5;
LABEL_668:
  v1392 = *(_DWORD *)(a1 + 13980);
  if (!v1392)
    goto LABEL_691;
  v1393 = 0;
  v1394 = a4[27];
  while (2)
  {
    v1395 = *(_QWORD *)(a1 + 14056);
    v1396 = *(_DWORD *)(a1 + 14080) * v1393;
    v1397 = (uint64_t *)(v1395 + 8 * v1396);
    v1398 = *(_DWORD *)(a1 + 13976);
    if (v1398 && *v1397 == -1)
    {
      v1399 = 0;
      v1431 = 8 * (v1398 + v1396) - 8 * v1396 - 8;
      v1432 = v1395 + 8 * v1396;
      while (v1431)
      {
        v1397 = (uint64_t *)(v1432 + 8);
        ++v1399;
        v1433 = *(_QWORD *)(v1432 + 8);
        v1431 -= 8;
        v1432 += 8;
        if (v1433 != -1)
          goto LABEL_675;
      }
      goto LABEL_671;
    }
    v1399 = 0;
LABEL_675:
    v1400 = (uint64_t *)(v1395 + 8 * (v1396 + v1398));
    if (v1397 == v1400)
      goto LABEL_671;
    v1401 = *v1397;
    v1402 = v1399;
    v1403 = a3[21];
    if (!v10)
    {
LABEL_679:
      v1405 = *(_DWORD *)(v1403 + 4 * v1402);
      v1404 = *v1394;
      goto LABEL_680;
    }
LABEL_677:
    v1404 = *v1394;
    v1405 = *(_DWORD *)(v1403 + 4 * v1402);
    if (*v1394 >= v1405)
    {
LABEL_680:
      v1419 = (_OWORD *)(*(_QWORD *)(a1 + 13984) + 8 * v1401);
      v1420 = *(unsigned int *)(a2 + 16);
      v1421 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1405 + (_DWORD)v1420 * v1404));
      v1422 = v1419[1];
      v1423 = v1419[2];
      v1424 = v1419[3];
      v1425 = v1419[4];
      v1426 = v1419[5];
      *v1421 = *v1419;
      v1421[1] = v1422;
      v1427 = (_OWORD *)((char *)v1421 + 8 * v1420);
      *v1427 = v1423;
      v1427[1] = v1424;
      v1428 = &v1421[v1420];
      *v1428 = v1425;
      v1428[1] = v1426;
      goto LABEL_681;
    }
    v1406 = *(_QWORD *)(a1 + 13984) + 8 * v1401;
    v1407 = *(unsigned int *)(a2 + 16);
    v1408 = *(_QWORD *)a2 + 8 * (v1404 + (_DWORD)v1407 * v1405);
    v1409 = *(int64x2_t *)(v1406 + 16);
    v1411 = *(int64x2_t *)(v1406 + 32);
    v1410 = *(int64x2_t *)(v1406 + 48);
    v1413 = *(_OWORD *)(v1406 + 64);
    v1412 = *(_OWORD *)(v1406 + 80);
    v1414 = vzip1q_s64(*(int64x2_t *)v1406, v1411);
    v1415 = vzip2q_s64(*(int64x2_t *)v1406, v1411);
    *(_QWORD *)(v1408 + 16) = v1413;
    *(int64x2_t *)v1408 = v1414;
    v1416 = (int64x2_t *)(v1408 + 8 * v1407);
    *v1416 = v1415;
    v1416[1].i64[0] = *((_QWORD *)&v1413 + 1);
    v1417 = (int64x2_t *)(v1408 + 16 * v1407);
    v1417[1].i64[0] = v1412;
    *v1417 = vzip1q_s64(v1409, v1410);
    v1418 = (int64x2_t *)(v1408 + 24 * v1407);
    v1418[1].i64[0] = *((_QWORD *)&v1412 + 1);
    *v1418 = vzip2q_s64(v1409, v1410);
LABEL_681:
    v1429 = v1397 + 1;
    while (v1429 != v1400)
    {
      ++v1399;
      v1430 = *v1429++;
      v1401 = v1430;
      if (v1430 != -1)
      {
        v1397 = v1429 - 1;
        v1402 = v1399;
        v1403 = a3[21];
        if (v10)
          goto LABEL_677;
        goto LABEL_679;
      }
    }
    v1392 = *(_DWORD *)(a1 + 13980);
LABEL_671:
    ++v1393;
    ++v1394;
    if (v1393 < v1392)
      continue;
    break;
  }
  v10 = *a5;
LABEL_691:
  v1434 = *(_DWORD *)(a1 + 876);
  if (!v1434)
    goto LABEL_714;
  v1435 = 0;
  v1436 = *a4;
  while (2)
  {
    v1437 = *(_QWORD *)(a1 + 952);
    v1438 = *(_DWORD *)(a1 + 976) * v1435;
    v1439 = (uint64_t *)(v1437 + 8 * v1438);
    v1440 = *(_DWORD *)(a1 + 872);
    if (v1440 && *v1439 == -1)
    {
      v1441 = 0;
      v1484 = 8 * (v1440 + v1438) - 8 * v1438 - 8;
      v1485 = v1437 + 8 * v1438;
      while (v1484)
      {
        v1439 = (uint64_t *)(v1485 + 8);
        ++v1441;
        v1486 = *(_QWORD *)(v1485 + 8);
        v1484 -= 8;
        v1485 += 8;
        if (v1486 != -1)
          goto LABEL_698;
      }
      goto LABEL_694;
    }
    v1441 = 0;
LABEL_698:
    v1442 = (uint64_t *)(v1437 + 8 * (v1438 + v1440));
    if (v1439 == v1442)
      goto LABEL_694;
    v1443 = *v1439;
    v1444 = v1441;
    v1445 = a3[18];
    if (!v10)
    {
LABEL_702:
      v1447 = *(_DWORD *)(v1445 + 4 * v1444);
      v1446 = *v1436;
      goto LABEL_703;
    }
LABEL_700:
    v1446 = *v1436;
    v1447 = *(_DWORD *)(v1445 + 4 * v1444);
    if (*v1436 >= v1447)
    {
LABEL_703:
      v1463 = *(_QWORD *)(a1 + 880) + 8 * v1443;
      v1464 = *(unsigned int *)(a2 + 16);
      v1465 = *(_OWORD *)v1463;
      v1466 = *(_QWORD *)a2 + 8 * (v1447 + (_DWORD)v1464 * v1446);
      v1467 = *(_OWORD *)(v1463 + 24);
      v1468 = *(_QWORD *)(v1463 + 40);
      v1469 = *(_OWORD *)(v1463 + 48);
      v1470 = *(_QWORD *)(v1463 + 64);
      v1471 = *(_OWORD *)(v1463 + 72);
      v1472 = *(_QWORD *)(v1463 + 88);
      v1473 = *(_OWORD *)(v1463 + 96);
      v1474 = *(_QWORD *)(v1463 + 112);
      v1475 = *(_OWORD *)(v1463 + 120);
      v1476 = *(_QWORD *)(v1463 + 136);
      *(_QWORD *)(v1466 + 16) = *(_QWORD *)(v1463 + 16);
      *(_OWORD *)v1466 = v1465;
      v1477 = v1466 + 8 * v1464;
      *(_QWORD *)(v1477 + 16) = v1468;
      *(_OWORD *)v1477 = v1467;
      v1478 = v1466 + 16 * v1464;
      *(_QWORD *)(v1478 + 16) = v1470;
      *(_OWORD *)v1478 = v1469;
      v1479 = v1466 + 24 * v1464;
      *(_QWORD *)(v1479 + 16) = v1472;
      *(_OWORD *)v1479 = v1471;
      v1480 = v1466 + 32 * v1464;
      *(_QWORD *)(v1480 + 16) = v1474;
      *(_OWORD *)v1480 = v1473;
      v1481 = v1466 + 40 * v1464;
      *(_QWORD *)(v1481 + 16) = v1476;
      *(_OWORD *)v1481 = v1475;
      goto LABEL_704;
    }
    v1448 = *(_QWORD *)(a1 + 880) + 8 * v1443;
    v1449 = *(unsigned int *)(a2 + 16);
    v1450 = *(_QWORD *)a2 + 8 * (v1446 + (_DWORD)v1449 * v1447);
    *(_QWORD *)&v1451 = *(_QWORD *)(v1448 + 16);
    v1452 = *(int64x2_t *)(v1448 + 24);
    *(_QWORD *)&v1453 = *(_QWORD *)(v1448 + 64);
    v1454 = *(int64x2_t *)(v1448 + 48);
    v1455 = *(int64x2_t *)(v1448 + 72);
    *(_QWORD *)&v1456 = *(_QWORD *)(v1448 + 112);
    v1457 = *(int64x2_t *)(v1448 + 96);
    v1458 = *(int64x2_t *)(v1448 + 120);
    v1459 = vzip1q_s64(*(int64x2_t *)v1448, v1452);
    v1460 = vzip2q_s64(*(int64x2_t *)v1448, v1452);
    *((_QWORD *)&v1451 + 1) = *(_QWORD *)(v1448 + 40);
    *((_QWORD *)&v1453 + 1) = *(_QWORD *)(v1448 + 88);
    *((_QWORD *)&v1456 + 1) = *(_QWORD *)(v1448 + 136);
    *(int64x2_t *)(v1450 + 16) = vzip1q_s64(v1454, v1455);
    *(int64x2_t *)(v1450 + 32) = vzip1q_s64(v1457, v1458);
    *(int64x2_t *)v1450 = v1459;
    v1461 = (int64x2_t *)(v1450 + 8 * v1449);
    v1461[1] = vzip1q_s64(vdupq_laneq_s64(v1454, 1), vdupq_laneq_s64(v1455, 1));
    v1461[2] = vzip2q_s64(v1457, v1458);
    *v1461 = v1460;
    v1462 = (_OWORD *)(v1450 + 16 * v1449);
    v1462[1] = v1453;
    v1462[2] = v1456;
    *v1462 = v1451;
LABEL_704:
    v1482 = v1439 + 1;
    while (v1482 != v1442)
    {
      ++v1441;
      v1483 = *v1482++;
      v1443 = v1483;
      if (v1483 != -1)
      {
        v1439 = v1482 - 1;
        v1444 = v1441;
        v1445 = a3[18];
        if (v10)
          goto LABEL_700;
        goto LABEL_702;
      }
    }
    v1434 = *(_DWORD *)(a1 + 876);
LABEL_694:
    ++v1435;
    ++v1436;
    if (v1435 < v1434)
      continue;
    break;
  }
  v10 = *a5;
LABEL_714:
  v1487 = *(_DWORD *)(a1 + 2316);
  if (!v1487)
    goto LABEL_737;
  v1488 = 0;
  v1489 = a4[3];
  while (2)
  {
    v1490 = *(_QWORD *)(a1 + 2392);
    v1491 = *(_DWORD *)(a1 + 2416) * v1488;
    v1492 = (uint64_t *)(v1490 + 8 * v1491);
    v1493 = *(_DWORD *)(a1 + 2312);
    if (v1493 && *v1492 == -1)
    {
      v1494 = 0;
      v1551 = 8 * (v1493 + v1491) - 8 * v1491 - 8;
      v1552 = v1490 + 8 * v1491;
      while (v1551)
      {
        v1492 = (uint64_t *)(v1552 + 8);
        ++v1494;
        v1553 = *(_QWORD *)(v1552 + 8);
        v1551 -= 8;
        v1552 += 8;
        if (v1553 != -1)
          goto LABEL_721;
      }
      goto LABEL_717;
    }
    v1494 = 0;
LABEL_721:
    v1495 = (uint64_t *)(v1490 + 8 * (v1491 + v1493));
    if (v1492 == v1495)
      goto LABEL_717;
    v1496 = *v1492;
    v1497 = v1494;
    v1498 = a3[18];
    if (!v10)
    {
LABEL_725:
      v1500 = *(_DWORD *)(v1498 + 4 * v1497);
      v1499 = *v1489;
      goto LABEL_726;
    }
LABEL_723:
    v1499 = *v1489;
    v1500 = *(_DWORD *)(v1498 + 4 * v1497);
    if (*v1489 >= v1500)
    {
LABEL_726:
      v1521 = *(_QWORD *)(a1 + 2320) + 8 * v1496;
      v1522 = *(unsigned int *)(a2 + 16);
      v1523 = *(_OWORD *)v1521;
      v1524 = *(_QWORD *)a2 + 8 * (v1500 + (_DWORD)v1522 * v1499);
      v1525 = *(_OWORD *)(v1521 + 24);
      v1526 = *(_QWORD *)(v1521 + 40);
      v1527 = *(_OWORD *)(v1521 + 48);
      v1528 = *(_QWORD *)(v1521 + 64);
      v1529 = *(_OWORD *)(v1521 + 72);
      v1530 = *(_QWORD *)(v1521 + 88);
      v1531 = *(_OWORD *)(v1521 + 96);
      v1532 = *(_QWORD *)(v1521 + 112);
      v1533 = *(_OWORD *)(v1521 + 120);
      v1534 = *(_QWORD *)(v1521 + 136);
      v1535 = *(_OWORD *)(v1521 + 144);
      v1536 = *(_QWORD *)(v1521 + 160);
      v1537 = *(_OWORD *)(v1521 + 168);
      v1538 = *(_QWORD *)(v1521 + 184);
      v1539 = *(_OWORD *)(v1521 + 192);
      v1540 = *(_QWORD *)(v1521 + 208);
      *(_QWORD *)(v1524 + 16) = *(_QWORD *)(v1521 + 16);
      *(_OWORD *)v1524 = v1523;
      v1541 = v1524 + 8 * v1522;
      *(_QWORD *)(v1541 + 16) = v1526;
      *(_OWORD *)v1541 = v1525;
      v1542 = v1524 + 16 * v1522;
      *(_QWORD *)(v1542 + 16) = v1528;
      *(_OWORD *)v1542 = v1527;
      v1543 = v1524 + 24 * v1522;
      *(_QWORD *)(v1543 + 16) = v1530;
      *(_OWORD *)v1543 = v1529;
      v1544 = v1524 + 32 * v1522;
      *(_QWORD *)(v1544 + 16) = v1532;
      *(_OWORD *)v1544 = v1531;
      v1545 = v1524 + 40 * v1522;
      *(_QWORD *)(v1545 + 16) = v1534;
      *(_OWORD *)v1545 = v1533;
      v1546 = v1524 + 48 * v1522;
      *(_QWORD *)(v1546 + 16) = v1536;
      *(_OWORD *)v1546 = v1535;
      v1547 = v1524 + 56 * v1522;
      *(_QWORD *)(v1547 + 16) = v1538;
      *(_OWORD *)v1547 = v1537;
      v1548 = v1524 + (v1522 << 6);
      *(_QWORD *)(v1548 + 16) = v1540;
      *(_OWORD *)v1548 = v1539;
      goto LABEL_727;
    }
    v1501 = *(unsigned int *)(a2 + 16);
    v1502 = *(_QWORD *)(a1 + 2320) + 8 * v1496;
    *(_QWORD *)&v1503 = *(_QWORD *)(v1502 + 16);
    v1504 = *(_QWORD *)a2 + 8 * (v1499 + (_DWORD)v1501 * v1500);
    v1505 = *(int64x2_t *)(v1502 + 24);
    *(_QWORD *)&v1506 = *(_QWORD *)(v1502 + 64);
    v1507 = *(int64x2_t *)(v1502 + 48);
    v1508 = *(int64x2_t *)(v1502 + 72);
    *(_QWORD *)&v1509 = *(_QWORD *)(v1502 + 112);
    v1510 = *(int64x2_t *)(v1502 + 96);
    v1511 = *(int64x2_t *)(v1502 + 120);
    *(_QWORD *)&v1512 = *(_QWORD *)(v1502 + 160);
    v1513 = *(int64x2_t *)(v1502 + 144);
    v1514 = *(int64x2_t *)(v1502 + 168);
    v1515 = *(_QWORD *)(v1502 + 208);
    v1516 = *(_OWORD *)(v1502 + 192);
    v1517 = vzip1q_s64(*(int64x2_t *)v1502, v1505);
    v1518 = vzip2q_s64(*(int64x2_t *)v1502, v1505);
    *((_QWORD *)&v1503 + 1) = *(_QWORD *)(v1502 + 40);
    *((_QWORD *)&v1506 + 1) = *(_QWORD *)(v1502 + 88);
    *((_QWORD *)&v1509 + 1) = *(_QWORD *)(v1502 + 136);
    *((_QWORD *)&v1512 + 1) = *(_QWORD *)(v1502 + 184);
    *(int64x2_t *)(v1504 + 32) = vzip1q_s64(v1510, v1511);
    *(int64x2_t *)(v1504 + 48) = vzip1q_s64(v1513, v1514);
    *(_QWORD *)(v1504 + 64) = v1516;
    *(int64x2_t *)v1504 = v1517;
    *(int64x2_t *)(v1504 + 16) = vzip1q_s64(v1507, v1508);
    v1519 = (int64x2_t *)(v1504 + 8 * v1501);
    v1519[2] = vzip2q_s64(v1510, v1511);
    v1519[3] = vzip2q_s64(v1513, v1514);
    *v1519 = v1518;
    v1519[1] = vzip2q_s64(v1507, v1508);
    v1519[4].i64[0] = *((_QWORD *)&v1516 + 1);
    v1520 = v1504 + 16 * v1501;
    *(_QWORD *)(v1520 + 64) = v1515;
    *(_OWORD *)(v1520 + 32) = v1509;
    *(_OWORD *)(v1520 + 48) = v1512;
    *(_OWORD *)v1520 = v1503;
    *(_OWORD *)(v1520 + 16) = v1506;
LABEL_727:
    v1549 = v1492 + 1;
    while (v1549 != v1495)
    {
      ++v1494;
      v1550 = *v1549++;
      v1496 = v1550;
      if (v1550 != -1)
      {
        v1492 = v1549 - 1;
        v1497 = v1494;
        v1498 = a3[18];
        if (v10)
          goto LABEL_723;
        goto LABEL_725;
      }
    }
    v1487 = *(_DWORD *)(a1 + 2316);
LABEL_717:
    ++v1488;
    ++v1489;
    if (v1488 < v1487)
      continue;
    break;
  }
  v10 = *a5;
LABEL_737:
  v1554 = *(_DWORD *)(a1 + 3756);
  if (!v1554)
    goto LABEL_760;
  v1555 = 0;
  v1556 = a4[6];
  while (2)
  {
    v1557 = *(_QWORD *)(a1 + 3832);
    v1558 = *(_DWORD *)(a1 + 3856) * v1555;
    v1559 = (uint64_t *)(v1557 + 8 * v1558);
    v1560 = *(_DWORD *)(a1 + 3752);
    if (v1560 && *v1559 == -1)
    {
      v1561 = 0;
      v1604 = 8 * (v1560 + v1558) - 8 * v1558 - 8;
      v1605 = v1557 + 8 * v1558;
      while (v1604)
      {
        v1559 = (uint64_t *)(v1605 + 8);
        ++v1561;
        v1606 = *(_QWORD *)(v1605 + 8);
        v1604 -= 8;
        v1605 += 8;
        if (v1606 != -1)
          goto LABEL_744;
      }
      goto LABEL_740;
    }
    v1561 = 0;
LABEL_744:
    v1562 = (uint64_t *)(v1557 + 8 * (v1558 + v1560));
    if (v1559 == v1562)
      goto LABEL_740;
    v1563 = *v1559;
    v1564 = v1561;
    v1565 = a3[18];
    if (!v10)
    {
LABEL_748:
      v1567 = *(_DWORD *)(v1565 + 4 * v1564);
      v1566 = *v1556;
      goto LABEL_749;
    }
LABEL_746:
    v1566 = *v1556;
    v1567 = *(_DWORD *)(v1565 + 4 * v1564);
    if (*v1556 >= v1567)
    {
LABEL_749:
      v1583 = *(_QWORD *)(a1 + 3760) + 8 * v1563;
      v1584 = *(unsigned int *)(a2 + 16);
      v1585 = *(_OWORD *)v1583;
      v1586 = *(_QWORD *)a2 + 8 * (v1567 + (_DWORD)v1584 * v1566);
      v1587 = *(_OWORD *)(v1583 + 24);
      v1588 = *(_QWORD *)(v1583 + 40);
      v1589 = *(_OWORD *)(v1583 + 48);
      v1590 = *(_QWORD *)(v1583 + 64);
      v1591 = *(_OWORD *)(v1583 + 72);
      v1592 = *(_QWORD *)(v1583 + 88);
      v1593 = *(_OWORD *)(v1583 + 96);
      v1594 = *(_QWORD *)(v1583 + 112);
      v1595 = *(_OWORD *)(v1583 + 120);
      v1596 = *(_QWORD *)(v1583 + 136);
      *(_QWORD *)(v1586 + 16) = *(_QWORD *)(v1583 + 16);
      *(_OWORD *)v1586 = v1585;
      v1597 = v1586 + 8 * v1584;
      *(_QWORD *)(v1597 + 16) = v1588;
      *(_OWORD *)v1597 = v1587;
      v1598 = v1586 + 16 * v1584;
      *(_QWORD *)(v1598 + 16) = v1590;
      *(_OWORD *)v1598 = v1589;
      v1599 = v1586 + 24 * v1584;
      *(_QWORD *)(v1599 + 16) = v1592;
      *(_OWORD *)v1599 = v1591;
      v1600 = v1586 + 32 * v1584;
      *(_QWORD *)(v1600 + 16) = v1594;
      *(_OWORD *)v1600 = v1593;
      v1601 = v1586 + 40 * v1584;
      *(_QWORD *)(v1601 + 16) = v1596;
      *(_OWORD *)v1601 = v1595;
      goto LABEL_750;
    }
    v1568 = *(_QWORD *)(a1 + 3760) + 8 * v1563;
    v1569 = *(unsigned int *)(a2 + 16);
    v1570 = *(_QWORD *)a2 + 8 * (v1566 + (_DWORD)v1569 * v1567);
    *(_QWORD *)&v1571 = *(_QWORD *)(v1568 + 16);
    v1572 = *(int64x2_t *)(v1568 + 24);
    *(_QWORD *)&v1573 = *(_QWORD *)(v1568 + 64);
    v1574 = *(int64x2_t *)(v1568 + 48);
    v1575 = *(int64x2_t *)(v1568 + 72);
    *(_QWORD *)&v1576 = *(_QWORD *)(v1568 + 112);
    v1577 = *(int64x2_t *)(v1568 + 96);
    v1578 = *(int64x2_t *)(v1568 + 120);
    v1579 = vzip1q_s64(*(int64x2_t *)v1568, v1572);
    v1580 = vzip2q_s64(*(int64x2_t *)v1568, v1572);
    *((_QWORD *)&v1571 + 1) = *(_QWORD *)(v1568 + 40);
    *((_QWORD *)&v1573 + 1) = *(_QWORD *)(v1568 + 88);
    *((_QWORD *)&v1576 + 1) = *(_QWORD *)(v1568 + 136);
    *(int64x2_t *)(v1570 + 16) = vzip1q_s64(v1574, v1575);
    *(int64x2_t *)(v1570 + 32) = vzip1q_s64(v1577, v1578);
    *(int64x2_t *)v1570 = v1579;
    v1581 = (int64x2_t *)(v1570 + 8 * v1569);
    v1581[1] = vzip1q_s64(vdupq_laneq_s64(v1574, 1), vdupq_laneq_s64(v1575, 1));
    v1581[2] = vzip2q_s64(v1577, v1578);
    *v1581 = v1580;
    v1582 = (_OWORD *)(v1570 + 16 * v1569);
    v1582[1] = v1573;
    v1582[2] = v1576;
    *v1582 = v1571;
LABEL_750:
    v1602 = v1559 + 1;
    while (v1602 != v1562)
    {
      ++v1561;
      v1603 = *v1602++;
      v1563 = v1603;
      if (v1603 != -1)
      {
        v1559 = v1602 - 1;
        v1564 = v1561;
        v1565 = a3[18];
        if (v10)
          goto LABEL_746;
        goto LABEL_748;
      }
    }
    v1554 = *(_DWORD *)(a1 + 3756);
LABEL_740:
    ++v1555;
    ++v1556;
    if (v1555 < v1554)
      continue;
    break;
  }
  v10 = *a5;
LABEL_760:
  v1607 = *(_DWORD *)(a1 + 5196);
  if (!v1607)
    goto LABEL_783;
  v1608 = 0;
  v1609 = a4[9];
  while (2)
  {
    v1610 = *(_QWORD *)(a1 + 5272);
    v1611 = *(_DWORD *)(a1 + 5296) * v1608;
    v1612 = (uint64_t *)(v1610 + 8 * v1611);
    v1613 = *(_DWORD *)(a1 + 5192);
    if (v1613 && *v1612 == -1)
    {
      v1614 = 0;
      v1657 = 8 * (v1613 + v1611) - 8 * v1611 - 8;
      v1658 = v1610 + 8 * v1611;
      while (v1657)
      {
        v1612 = (uint64_t *)(v1658 + 8);
        ++v1614;
        v1659 = *(_QWORD *)(v1658 + 8);
        v1657 -= 8;
        v1658 += 8;
        if (v1659 != -1)
          goto LABEL_767;
      }
      goto LABEL_763;
    }
    v1614 = 0;
LABEL_767:
    v1615 = (uint64_t *)(v1610 + 8 * (v1611 + v1613));
    if (v1612 == v1615)
      goto LABEL_763;
    v1616 = *v1612;
    v1617 = v1614;
    v1618 = a3[18];
    if (!v10)
    {
LABEL_771:
      v1620 = *(_DWORD *)(v1618 + 4 * v1617);
      v1619 = *v1609;
      goto LABEL_772;
    }
LABEL_769:
    v1619 = *v1609;
    v1620 = *(_DWORD *)(v1618 + 4 * v1617);
    if (*v1609 >= v1620)
    {
LABEL_772:
      v1636 = *(_QWORD *)(a1 + 5200) + 8 * v1616;
      v1637 = *(unsigned int *)(a2 + 16);
      v1638 = *(_OWORD *)v1636;
      v1639 = *(_QWORD *)a2 + 8 * (v1620 + (_DWORD)v1637 * v1619);
      v1640 = *(_OWORD *)(v1636 + 24);
      v1641 = *(_QWORD *)(v1636 + 40);
      v1642 = *(_OWORD *)(v1636 + 48);
      v1643 = *(_QWORD *)(v1636 + 64);
      v1644 = *(_OWORD *)(v1636 + 72);
      v1645 = *(_QWORD *)(v1636 + 88);
      v1646 = *(_OWORD *)(v1636 + 96);
      v1647 = *(_QWORD *)(v1636 + 112);
      v1648 = *(_OWORD *)(v1636 + 120);
      v1649 = *(_QWORD *)(v1636 + 136);
      *(_QWORD *)(v1639 + 16) = *(_QWORD *)(v1636 + 16);
      *(_OWORD *)v1639 = v1638;
      v1650 = v1639 + 8 * v1637;
      *(_QWORD *)(v1650 + 16) = v1641;
      *(_OWORD *)v1650 = v1640;
      v1651 = v1639 + 16 * v1637;
      *(_QWORD *)(v1651 + 16) = v1643;
      *(_OWORD *)v1651 = v1642;
      v1652 = v1639 + 24 * v1637;
      *(_QWORD *)(v1652 + 16) = v1645;
      *(_OWORD *)v1652 = v1644;
      v1653 = v1639 + 32 * v1637;
      *(_QWORD *)(v1653 + 16) = v1647;
      *(_OWORD *)v1653 = v1646;
      v1654 = v1639 + 40 * v1637;
      *(_QWORD *)(v1654 + 16) = v1649;
      *(_OWORD *)v1654 = v1648;
      goto LABEL_773;
    }
    v1621 = *(_QWORD *)(a1 + 5200) + 8 * v1616;
    v1622 = *(unsigned int *)(a2 + 16);
    v1623 = *(_QWORD *)a2 + 8 * (v1619 + (_DWORD)v1622 * v1620);
    *(_QWORD *)&v1624 = *(_QWORD *)(v1621 + 16);
    v1625 = *(int64x2_t *)(v1621 + 24);
    *(_QWORD *)&v1626 = *(_QWORD *)(v1621 + 64);
    v1627 = *(int64x2_t *)(v1621 + 48);
    v1628 = *(int64x2_t *)(v1621 + 72);
    *(_QWORD *)&v1629 = *(_QWORD *)(v1621 + 112);
    v1630 = *(int64x2_t *)(v1621 + 96);
    v1631 = *(int64x2_t *)(v1621 + 120);
    v1632 = vzip1q_s64(*(int64x2_t *)v1621, v1625);
    v1633 = vzip2q_s64(*(int64x2_t *)v1621, v1625);
    *((_QWORD *)&v1624 + 1) = *(_QWORD *)(v1621 + 40);
    *((_QWORD *)&v1626 + 1) = *(_QWORD *)(v1621 + 88);
    *((_QWORD *)&v1629 + 1) = *(_QWORD *)(v1621 + 136);
    *(int64x2_t *)(v1623 + 16) = vzip1q_s64(v1627, v1628);
    *(int64x2_t *)(v1623 + 32) = vzip1q_s64(v1630, v1631);
    *(int64x2_t *)v1623 = v1632;
    v1634 = (int64x2_t *)(v1623 + 8 * v1622);
    v1634[1] = vzip1q_s64(vdupq_laneq_s64(v1627, 1), vdupq_laneq_s64(v1628, 1));
    v1634[2] = vzip2q_s64(v1630, v1631);
    *v1634 = v1633;
    v1635 = (_OWORD *)(v1623 + 16 * v1622);
    v1635[1] = v1626;
    v1635[2] = v1629;
    *v1635 = v1624;
LABEL_773:
    v1655 = v1612 + 1;
    while (v1655 != v1615)
    {
      ++v1614;
      v1656 = *v1655++;
      v1616 = v1656;
      if (v1656 != -1)
      {
        v1612 = v1655 - 1;
        v1617 = v1614;
        v1618 = a3[18];
        if (v10)
          goto LABEL_769;
        goto LABEL_771;
      }
    }
    v1607 = *(_DWORD *)(a1 + 5196);
LABEL_763:
    ++v1608;
    ++v1609;
    if (v1608 < v1607)
      continue;
    break;
  }
  v10 = *a5;
LABEL_783:
  v1660 = *(_DWORD *)(a1 + 6636);
  if (!v1660)
    goto LABEL_806;
  v1661 = 0;
  v1662 = a4[12];
  while (2)
  {
    v1663 = *(_QWORD *)(a1 + 6712);
    v1664 = *(_DWORD *)(a1 + 6736) * v1661;
    v1665 = (uint64_t *)(v1663 + 8 * v1664);
    v1666 = *(_DWORD *)(a1 + 6632);
    if (v1666 && *v1665 == -1)
    {
      v1667 = 0;
      v1693 = 8 * (v1666 + v1664) - 8 * v1664 - 8;
      v1694 = v1663 + 8 * v1664;
      while (v1693)
      {
        v1665 = (uint64_t *)(v1694 + 8);
        ++v1667;
        v1695 = *(_QWORD *)(v1694 + 8);
        v1693 -= 8;
        v1694 += 8;
        if (v1695 != -1)
          goto LABEL_790;
      }
      goto LABEL_786;
    }
    v1667 = 0;
LABEL_790:
    v1668 = (uint64_t *)(v1663 + 8 * (v1664 + v1666));
    if (v1665 == v1668)
      goto LABEL_786;
    v1669 = *v1665;
    v1670 = v1667;
    v1671 = a3[18];
    if (!v10)
    {
LABEL_794:
      v1673 = *(_DWORD *)(v1671 + 4 * v1670);
      v1672 = *v1662;
      goto LABEL_795;
    }
LABEL_792:
    v1672 = *v1662;
    v1673 = *(_DWORD *)(v1671 + 4 * v1670);
    if (*v1662 >= v1673)
    {
LABEL_795:
      v1685 = *(_QWORD *)(a1 + 6640) + 8 * v1669;
      v1675 = *(unsigned int *)(a2 + 16);
      v1676 = *(_QWORD *)a2 + 8 * (v1673 + (_DWORD)v1675 * v1672);
      v1686 = *(_OWORD *)v1685;
      v1687 = *(_OWORD *)(v1685 + 24);
      v1688 = *(_QWORD *)(v1685 + 40);
      v1677 = *(int8x16_t *)(v1685 + 48);
      v1681 = *(_QWORD *)(v1685 + 64);
      v1678 = vextq_s8(v1677, v1677, 8uLL).u64[0];
      *(_QWORD *)(v1676 + 16) = *(_QWORD *)(v1685 + 16);
      *(_OWORD *)v1676 = v1686;
      v1689 = v1676 + 8 * v1675;
      *(_QWORD *)(v1689 + 16) = v1688;
      *(_OWORD *)v1689 = v1687;
      goto LABEL_796;
    }
    v1674 = *(_QWORD *)(a1 + 6640) + 8 * v1669;
    v1675 = *(unsigned int *)(a2 + 16);
    v1676 = *(_QWORD *)a2 + 8 * (v1672 + (_DWORD)v1675 * v1673);
    v1677.i64[0] = *(_QWORD *)(v1674 + 16);
    v1678 = *(_QWORD *)(v1674 + 40);
    v1679 = *(int64x2_t *)(v1674 + 24);
    v1680 = *(_OWORD *)(v1674 + 48);
    v1681 = *(_QWORD *)(v1674 + 64);
    v1682 = vzip1q_s64(*(int64x2_t *)v1674, v1679);
    v1683 = vzip2q_s64(*(int64x2_t *)v1674, v1679);
    *(_QWORD *)(v1676 + 16) = v1680;
    *(int64x2_t *)v1676 = v1682;
    v1684 = (int64x2_t *)(v1676 + 8 * v1675);
    *v1684 = v1683;
    v1684[1].i64[0] = *((_QWORD *)&v1680 + 1);
LABEL_796:
    v1690 = (int8x16_t *)(v1676 + 16 * v1675);
    v1690[1].i64[0] = v1681;
    v1677.i64[1] = v1678;
    *v1690 = v1677;
    v1691 = v1665 + 1;
    while (v1691 != v1668)
    {
      ++v1667;
      v1692 = *v1691++;
      v1669 = v1692;
      if (v1692 != -1)
      {
        v1665 = v1691 - 1;
        v1670 = v1667;
        v1671 = a3[18];
        if (v10)
          goto LABEL_792;
        goto LABEL_794;
      }
    }
    v1660 = *(_DWORD *)(a1 + 6636);
LABEL_786:
    ++v1661;
    ++v1662;
    if (v1661 < v1660)
      continue;
    break;
  }
  v10 = *a5;
LABEL_806:
  v1696 = *(_DWORD *)(a1 + 8076);
  if (!v1696)
    goto LABEL_829;
  v1697 = 0;
  v1698 = a4[15];
  while (2)
  {
    v1699 = *(_QWORD *)(a1 + 8152);
    v1700 = *(_DWORD *)(a1 + 8176) * v1697;
    v1701 = (uint64_t *)(v1699 + 8 * v1700);
    v1702 = *(_DWORD *)(a1 + 8072);
    if (v1702 && *v1701 == -1)
    {
      v1703 = 0;
      v1720 = 8 * (v1702 + v1700) - 8 * v1700 - 8;
      v1721 = v1699 + 8 * v1700;
      while (v1720)
      {
        v1701 = (uint64_t *)(v1721 + 8);
        ++v1703;
        v1722 = *(_QWORD *)(v1721 + 8);
        v1720 -= 8;
        v1721 += 8;
        if (v1722 != -1)
          goto LABEL_813;
      }
      goto LABEL_809;
    }
    v1703 = 0;
LABEL_813:
    v1704 = (uint64_t *)(v1699 + 8 * (v1700 + v1702));
    if (v1701 == v1704)
      goto LABEL_809;
    v1705 = *v1701;
    v1706 = v1703;
    v1707 = a3[18];
    if (!v10)
    {
LABEL_817:
      v1709 = *(_DWORD *)(v1707 + 4 * v1706);
      v1708 = *v1698;
      goto LABEL_818;
    }
LABEL_815:
    v1708 = *v1698;
    v1709 = *(_DWORD *)(v1707 + 4 * v1706);
    if (*v1698 >= v1709)
    {
LABEL_818:
      v1715 = *(_QWORD *)(a1 + 8080) + 8 * v1705;
      v1716 = *(_QWORD *)a2 + 8 * (v1709 + *(_DWORD *)(a2 + 16) * v1708);
      v1717 = *(_OWORD *)v1715;
      *(_QWORD *)(v1716 + 16) = *(_QWORD *)(v1715 + 16);
      *(_OWORD *)v1716 = v1717;
      goto LABEL_819;
    }
    v1710 = (int8x16_t *)(*(_QWORD *)(a1 + 8080) + 8 * v1705);
    v1711 = *(unsigned int *)(a2 + 16);
    v1712 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1708 + (_DWORD)v1711 * v1709));
    v1713 = v1710[1].i64[0];
    v1714 = vextq_s8(*v1710, *v1710, 8uLL).u64[0];
    *v1712 = v1710->i64[0];
    v1712[v1711] = v1714;
    v1712[2 * v1711] = v1713;
LABEL_819:
    v1718 = v1701 + 1;
    while (v1718 != v1704)
    {
      ++v1703;
      v1719 = *v1718++;
      v1705 = v1719;
      if (v1719 != -1)
      {
        v1701 = v1718 - 1;
        v1706 = v1703;
        v1707 = a3[18];
        if (v10)
          goto LABEL_815;
        goto LABEL_817;
      }
    }
    v1696 = *(_DWORD *)(a1 + 8076);
LABEL_809:
    ++v1697;
    ++v1698;
    if (v1697 < v1696)
      continue;
    break;
  }
  v10 = *a5;
LABEL_829:
  v1723 = *(_DWORD *)(a1 + 9516);
  if (!v1723)
    goto LABEL_852;
  v1724 = 0;
  v1725 = a4[18];
  while (2)
  {
    v1726 = *(_QWORD *)(a1 + 9592);
    v1727 = *(_DWORD *)(a1 + 9616) * v1724;
    v1728 = (uint64_t *)(v1726 + 8 * v1727);
    v1729 = *(_DWORD *)(a1 + 9512);
    if (v1729 && *v1728 == -1)
    {
      v1730 = 0;
      v1756 = 8 * (v1729 + v1727) - 8 * v1727 - 8;
      v1757 = v1726 + 8 * v1727;
      while (v1756)
      {
        v1728 = (uint64_t *)(v1757 + 8);
        ++v1730;
        v1758 = *(_QWORD *)(v1757 + 8);
        v1756 -= 8;
        v1757 += 8;
        if (v1758 != -1)
          goto LABEL_836;
      }
      goto LABEL_832;
    }
    v1730 = 0;
LABEL_836:
    v1731 = (uint64_t *)(v1726 + 8 * (v1727 + v1729));
    if (v1728 == v1731)
      goto LABEL_832;
    v1732 = *v1728;
    v1733 = v1730;
    v1734 = a3[18];
    if (!v10)
    {
LABEL_840:
      v1736 = *(_DWORD *)(v1734 + 4 * v1733);
      v1735 = *v1725;
      goto LABEL_841;
    }
LABEL_838:
    v1735 = *v1725;
    v1736 = *(_DWORD *)(v1734 + 4 * v1733);
    if (*v1725 >= v1736)
    {
LABEL_841:
      v1748 = *(_QWORD *)(a1 + 9520) + 8 * v1732;
      v1738 = *(unsigned int *)(a2 + 16);
      v1739 = *(_QWORD *)a2 + 8 * (v1736 + (_DWORD)v1738 * v1735);
      v1749 = *(_OWORD *)v1748;
      v1750 = *(_OWORD *)(v1748 + 24);
      v1751 = *(_QWORD *)(v1748 + 40);
      v1740 = *(int8x16_t *)(v1748 + 48);
      v1744 = *(_QWORD *)(v1748 + 64);
      v1741 = vextq_s8(v1740, v1740, 8uLL).u64[0];
      *(_QWORD *)(v1739 + 16) = *(_QWORD *)(v1748 + 16);
      *(_OWORD *)v1739 = v1749;
      v1752 = v1739 + 8 * v1738;
      *(_QWORD *)(v1752 + 16) = v1751;
      *(_OWORD *)v1752 = v1750;
      goto LABEL_842;
    }
    v1737 = *(_QWORD *)(a1 + 9520) + 8 * v1732;
    v1738 = *(unsigned int *)(a2 + 16);
    v1739 = *(_QWORD *)a2 + 8 * (v1735 + (_DWORD)v1738 * v1736);
    v1740.i64[0] = *(_QWORD *)(v1737 + 16);
    v1741 = *(_QWORD *)(v1737 + 40);
    v1742 = *(int64x2_t *)(v1737 + 24);
    v1743 = *(_OWORD *)(v1737 + 48);
    v1744 = *(_QWORD *)(v1737 + 64);
    v1745 = vzip1q_s64(*(int64x2_t *)v1737, v1742);
    v1746 = vzip2q_s64(*(int64x2_t *)v1737, v1742);
    *(_QWORD *)(v1739 + 16) = v1743;
    *(int64x2_t *)v1739 = v1745;
    v1747 = (int64x2_t *)(v1739 + 8 * v1738);
    *v1747 = v1746;
    v1747[1].i64[0] = *((_QWORD *)&v1743 + 1);
LABEL_842:
    v1753 = (int8x16_t *)(v1739 + 16 * v1738);
    v1753[1].i64[0] = v1744;
    v1740.i64[1] = v1741;
    *v1753 = v1740;
    v1754 = v1728 + 1;
    while (v1754 != v1731)
    {
      ++v1730;
      v1755 = *v1754++;
      v1732 = v1755;
      if (v1755 != -1)
      {
        v1728 = v1754 - 1;
        v1733 = v1730;
        v1734 = a3[18];
        if (v10)
          goto LABEL_838;
        goto LABEL_840;
      }
    }
    v1723 = *(_DWORD *)(a1 + 9516);
LABEL_832:
    ++v1724;
    ++v1725;
    if (v1724 < v1723)
      continue;
    break;
  }
  v10 = *a5;
LABEL_852:
  v1759 = *(_DWORD *)(a1 + 10956);
  if (!v1759)
    goto LABEL_875;
  v1760 = 0;
  v1761 = a4[21];
  while (2)
  {
    v1762 = *(_QWORD *)(a1 + 11032);
    v1763 = *(_DWORD *)(a1 + 11056) * v1760;
    v1764 = (uint64_t *)(v1762 + 8 * v1763);
    v1765 = *(_DWORD *)(a1 + 10952);
    if (v1765 && *v1764 == -1)
    {
      v1766 = 0;
      v1800 = 8 * (v1765 + v1763) - 8 * v1763 - 8;
      v1801 = v1762 + 8 * v1763;
      while (v1800)
      {
        v1764 = (uint64_t *)(v1801 + 8);
        ++v1766;
        v1802 = *(_QWORD *)(v1801 + 8);
        v1800 -= 8;
        v1801 += 8;
        if (v1802 != -1)
          goto LABEL_859;
      }
      goto LABEL_855;
    }
    v1766 = 0;
LABEL_859:
    v1767 = (uint64_t *)(v1762 + 8 * (v1763 + v1765));
    if (v1764 == v1767)
      goto LABEL_855;
    v1768 = *v1764;
    v1769 = v1766;
    v1770 = a3[18];
    if (!v10)
    {
LABEL_863:
      v1772 = *(_DWORD *)(v1770 + 4 * v1769);
      v1771 = *v1761;
      goto LABEL_864;
    }
LABEL_861:
    v1771 = *v1761;
    v1772 = *(_DWORD *)(v1770 + 4 * v1769);
    if (*v1761 >= v1772)
    {
LABEL_864:
      v1785 = *(_QWORD *)(a1 + 10960) + 8 * v1768;
      v1786 = *(unsigned int *)(a2 + 16);
      v1787 = *(_OWORD *)v1785;
      v1788 = *(_QWORD *)a2 + 8 * (v1772 + (_DWORD)v1786 * v1771);
      v1789 = *(_OWORD *)(v1785 + 24);
      v1790 = *(_QWORD *)(v1785 + 40);
      v1791 = *(_OWORD *)(v1785 + 48);
      v1792 = *(_QWORD *)(v1785 + 64);
      v1793 = *(_OWORD *)(v1785 + 72);
      v1794 = *(_QWORD *)(v1785 + 88);
      *(_QWORD *)(v1788 + 16) = *(_QWORD *)(v1785 + 16);
      *(_OWORD *)v1788 = v1787;
      v1795 = v1788 + 8 * v1786;
      *(_QWORD *)(v1795 + 16) = v1790;
      *(_OWORD *)v1795 = v1789;
      v1796 = v1788 + 16 * v1786;
      *(_QWORD *)(v1796 + 16) = v1792;
      *(_OWORD *)v1796 = v1791;
      v1797 = v1788 + 24 * v1786;
      *(_QWORD *)(v1797 + 16) = v1794;
      *(_OWORD *)v1797 = v1793;
      goto LABEL_865;
    }
    v1773 = *(_QWORD *)(a1 + 10960) + 8 * v1768;
    v1774 = *(unsigned int *)(a2 + 16);
    v1775 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1771 + (_DWORD)v1774 * v1772));
    v1776.i64[0] = *(_QWORD *)(v1773 + 16);
    v1777 = *(int64x2_t *)(v1773 + 24);
    v1778.i64[0] = *(_QWORD *)(v1773 + 64);
    v1779 = *(int64x2_t *)(v1773 + 48);
    v1780 = vzip1q_s64(*(int64x2_t *)v1773, v1777);
    v1781 = vzip1q_s64(v1779, *(int64x2_t *)(v1773 + 72));
    v1782 = vzip2q_s64(*(int64x2_t *)v1773, v1777);
    v1777.i64[0] = vdupq_laneq_s64(v1779, 1).u64[0];
    v1777.i64[1] = *(_QWORD *)(v1773 + 80);
    v1776.i64[1] = *(_QWORD *)(v1773 + 40);
    v1778.i64[1] = *(_QWORD *)(v1773 + 88);
    *v1775 = v1780;
    v1775[1] = v1781;
    v1783 = (int64x2_t *)((char *)v1775 + 8 * v1774);
    *v1783 = v1782;
    v1783[1] = v1777;
    v1784 = &v1775[v1774];
    *v1784 = v1776;
    v1784[1] = v1778;
LABEL_865:
    v1798 = v1764 + 1;
    while (v1798 != v1767)
    {
      ++v1766;
      v1799 = *v1798++;
      v1768 = v1799;
      if (v1799 != -1)
      {
        v1764 = v1798 - 1;
        v1769 = v1766;
        v1770 = a3[18];
        if (v10)
          goto LABEL_861;
        goto LABEL_863;
      }
    }
    v1759 = *(_DWORD *)(a1 + 10956);
LABEL_855:
    ++v1760;
    ++v1761;
    if (v1760 < v1759)
      continue;
    break;
  }
  v10 = *a5;
LABEL_875:
  v1803 = *(_DWORD *)(a1 + 12396);
  if (!v1803)
    goto LABEL_898;
  v1804 = 0;
  v1805 = a4[24];
  while (2)
  {
    v1806 = *(_QWORD *)(a1 + 12472);
    v1807 = *(_DWORD *)(a1 + 12496) * v1804;
    v1808 = (uint64_t *)(v1806 + 8 * v1807);
    v1809 = *(_DWORD *)(a1 + 12392);
    if (v1809 && *v1808 == -1)
    {
      v1810 = 0;
      v1844 = 8 * (v1809 + v1807) - 8 * v1807 - 8;
      v1845 = v1806 + 8 * v1807;
      while (v1844)
      {
        v1808 = (uint64_t *)(v1845 + 8);
        ++v1810;
        v1846 = *(_QWORD *)(v1845 + 8);
        v1844 -= 8;
        v1845 += 8;
        if (v1846 != -1)
          goto LABEL_882;
      }
      goto LABEL_878;
    }
    v1810 = 0;
LABEL_882:
    v1811 = (uint64_t *)(v1806 + 8 * (v1807 + v1809));
    if (v1808 == v1811)
      goto LABEL_878;
    v1812 = *v1808;
    v1813 = v1810;
    v1814 = a3[18];
    if (!v10)
    {
LABEL_886:
      v1816 = *(_DWORD *)(v1814 + 4 * v1813);
      v1815 = *v1805;
      goto LABEL_887;
    }
LABEL_884:
    v1815 = *v1805;
    v1816 = *(_DWORD *)(v1814 + 4 * v1813);
    if (*v1805 >= v1816)
    {
LABEL_887:
      v1829 = *(_QWORD *)(a1 + 12400) + 8 * v1812;
      v1830 = *(unsigned int *)(a2 + 16);
      v1831 = *(_OWORD *)v1829;
      v1832 = *(_QWORD *)a2 + 8 * (v1816 + (_DWORD)v1830 * v1815);
      v1833 = *(_OWORD *)(v1829 + 24);
      v1834 = *(_QWORD *)(v1829 + 40);
      v1835 = *(_OWORD *)(v1829 + 48);
      v1836 = *(_QWORD *)(v1829 + 64);
      v1837 = *(_OWORD *)(v1829 + 72);
      v1838 = *(_QWORD *)(v1829 + 88);
      *(_QWORD *)(v1832 + 16) = *(_QWORD *)(v1829 + 16);
      *(_OWORD *)v1832 = v1831;
      v1839 = v1832 + 8 * v1830;
      *(_QWORD *)(v1839 + 16) = v1834;
      *(_OWORD *)v1839 = v1833;
      v1840 = v1832 + 16 * v1830;
      *(_QWORD *)(v1840 + 16) = v1836;
      *(_OWORD *)v1840 = v1835;
      v1841 = v1832 + 24 * v1830;
      *(_QWORD *)(v1841 + 16) = v1838;
      *(_OWORD *)v1841 = v1837;
      goto LABEL_888;
    }
    v1817 = *(_QWORD *)(a1 + 12400) + 8 * v1812;
    v1818 = *(unsigned int *)(a2 + 16);
    v1819 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v1815 + (_DWORD)v1818 * v1816));
    v1820.i64[0] = *(_QWORD *)(v1817 + 16);
    v1821 = *(int64x2_t *)(v1817 + 24);
    v1822.i64[0] = *(_QWORD *)(v1817 + 64);
    v1823 = *(int64x2_t *)(v1817 + 48);
    v1824 = vzip1q_s64(*(int64x2_t *)v1817, v1821);
    v1825 = vzip1q_s64(v1823, *(int64x2_t *)(v1817 + 72));
    v1826 = vzip2q_s64(*(int64x2_t *)v1817, v1821);
    v1821.i64[0] = vdupq_laneq_s64(v1823, 1).u64[0];
    v1821.i64[1] = *(_QWORD *)(v1817 + 80);
    v1820.i64[1] = *(_QWORD *)(v1817 + 40);
    v1822.i64[1] = *(_QWORD *)(v1817 + 88);
    *v1819 = v1824;
    v1819[1] = v1825;
    v1827 = (int64x2_t *)((char *)v1819 + 8 * v1818);
    *v1827 = v1826;
    v1827[1] = v1821;
    v1828 = &v1819[v1818];
    *v1828 = v1820;
    v1828[1] = v1822;
LABEL_888:
    v1842 = v1808 + 1;
    while (v1842 != v1811)
    {
      ++v1810;
      v1843 = *v1842++;
      v1812 = v1843;
      if (v1843 != -1)
      {
        v1808 = v1842 - 1;
        v1813 = v1810;
        v1814 = a3[18];
        if (v10)
          goto LABEL_884;
        goto LABEL_886;
      }
    }
    v1803 = *(_DWORD *)(a1 + 12396);
LABEL_878:
    ++v1804;
    ++v1805;
    if (v1804 < v1803)
      continue;
    break;
  }
  v10 = *a5;
LABEL_898:
  v1847 = *(_DWORD *)(a1 + 13836);
  if (!v1847)
    goto LABEL_921;
  v1848 = 0;
  v1849 = a4[27];
  while (2)
  {
    v1850 = *(_QWORD *)(a1 + 13912);
    v1851 = *(_DWORD *)(a1 + 13936) * v1848;
    v1852 = (uint64_t *)(v1850 + 8 * v1851);
    v1853 = *(_DWORD *)(a1 + 13832);
    if (v1853 && *v1852 == -1)
    {
      v1854 = 0;
      v1880 = 8 * (v1853 + v1851) - 8 * v1851 - 8;
      v1881 = v1850 + 8 * v1851;
      while (v1880)
      {
        v1852 = (uint64_t *)(v1881 + 8);
        ++v1854;
        v1882 = *(_QWORD *)(v1881 + 8);
        v1880 -= 8;
        v1881 += 8;
        if (v1882 != -1)
          goto LABEL_905;
      }
      goto LABEL_901;
    }
    v1854 = 0;
LABEL_905:
    v1855 = (uint64_t *)(v1850 + 8 * (v1851 + v1853));
    if (v1852 == v1855)
      goto LABEL_901;
    v1856 = *v1852;
    v1857 = v1854;
    v1858 = a3[18];
    if (!v10)
    {
LABEL_909:
      v1860 = *(_DWORD *)(v1858 + 4 * v1857);
      v1859 = *v1849;
      goto LABEL_910;
    }
LABEL_907:
    v1859 = *v1849;
    v1860 = *(_DWORD *)(v1858 + 4 * v1857);
    if (*v1849 >= v1860)
    {
LABEL_910:
      v1872 = *(_QWORD *)(a1 + 13840) + 8 * v1856;
      v1862 = *(unsigned int *)(a2 + 16);
      v1863 = *(_QWORD *)a2 + 8 * (v1860 + (_DWORD)v1862 * v1859);
      v1873 = *(_OWORD *)v1872;
      v1874 = *(_OWORD *)(v1872 + 24);
      v1875 = *(_QWORD *)(v1872 + 40);
      v1864 = *(int8x16_t *)(v1872 + 48);
      v1868 = *(_QWORD *)(v1872 + 64);
      v1865 = vextq_s8(v1864, v1864, 8uLL).u64[0];
      *(_QWORD *)(v1863 + 16) = *(_QWORD *)(v1872 + 16);
      *(_OWORD *)v1863 = v1873;
      v1876 = v1863 + 8 * v1862;
      *(_QWORD *)(v1876 + 16) = v1875;
      *(_OWORD *)v1876 = v1874;
      goto LABEL_911;
    }
    v1861 = *(_QWORD *)(a1 + 13840) + 8 * v1856;
    v1862 = *(unsigned int *)(a2 + 16);
    v1863 = *(_QWORD *)a2 + 8 * (v1859 + (_DWORD)v1862 * v1860);
    v1864.i64[0] = *(_QWORD *)(v1861 + 16);
    v1865 = *(_QWORD *)(v1861 + 40);
    v1866 = *(int64x2_t *)(v1861 + 24);
    v1867 = *(_OWORD *)(v1861 + 48);
    v1868 = *(_QWORD *)(v1861 + 64);
    v1869 = vzip1q_s64(*(int64x2_t *)v1861, v1866);
    v1870 = vzip2q_s64(*(int64x2_t *)v1861, v1866);
    *(_QWORD *)(v1863 + 16) = v1867;
    *(int64x2_t *)v1863 = v1869;
    v1871 = (int64x2_t *)(v1863 + 8 * v1862);
    *v1871 = v1870;
    v1871[1].i64[0] = *((_QWORD *)&v1867 + 1);
LABEL_911:
    v1877 = (int8x16_t *)(v1863 + 16 * v1862);
    v1877[1].i64[0] = v1868;
    v1864.i64[1] = v1865;
    *v1877 = v1864;
    v1878 = v1852 + 1;
    while (v1878 != v1855)
    {
      ++v1854;
      v1879 = *v1878++;
      v1856 = v1879;
      if (v1879 != -1)
      {
        v1852 = v1878 - 1;
        v1857 = v1854;
        v1858 = a3[18];
        if (v10)
          goto LABEL_907;
        goto LABEL_909;
      }
    }
    v1847 = *(_DWORD *)(a1 + 13836);
LABEL_901:
    ++v1848;
    ++v1849;
    if (v1848 < v1847)
      continue;
    break;
  }
  v10 = *a5;
LABEL_921:
  v1883 = a3 + 15;
  v1884 = *(_DWORD *)(a1 + 732);
  if (!v1884)
    goto LABEL_944;
  v1885 = 0;
  v1886 = *a4;
  while (2)
  {
    v1887 = *(_QWORD *)(a1 + 808);
    v1888 = *(_DWORD *)(a1 + 832) * v1885;
    v1889 = (uint64_t *)(v1887 + 8 * v1888);
    v1890 = *(_DWORD *)(a1 + 728);
    if (v1890 && *v1889 == -1)
    {
      v1891 = 0;
      v1912 = 8 * (v1890 + v1888) - 8 * v1888 - 8;
      v1913 = v1887 + 8 * v1888;
      while (v1912)
      {
        v1889 = (uint64_t *)(v1913 + 8);
        ++v1891;
        v1914 = *(_QWORD *)(v1913 + 8);
        v1912 -= 8;
        v1913 += 8;
        if (v1914 != -1)
          goto LABEL_928;
      }
      goto LABEL_924;
    }
    v1891 = 0;
LABEL_928:
    v1892 = (uint64_t *)(v1887 + 8 * (v1888 + v1890));
    if (v1889 == v1892)
      goto LABEL_924;
    v1893 = *v1889;
    v1894 = v1891;
    v1895 = *v1883;
    if (!v10)
    {
LABEL_932:
      v1897 = *(_DWORD *)(v1895 + 4 * v1894);
      v1896 = *v1886;
      goto LABEL_933;
    }
LABEL_930:
    v1896 = *v1886;
    v1897 = *(_DWORD *)(v1895 + 4 * v1894);
    if (*v1886 >= v1897)
    {
LABEL_933:
      v1902 = (_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v1893);
      v1903 = *(unsigned int *)(a2 + 16);
      v1904 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1897 + (_DWORD)v1903 * v1896));
      v1905 = v1902[1];
      v1906 = v1902[2];
      v1907 = v1902[3];
      v1908 = v1902[4];
      v1909 = v1902[5];
      *v1904 = *v1902;
      v1904[v1903] = v1905;
      v1904[2 * v1903] = v1906;
      v1904[3 * v1903] = v1907;
      v1904[4 * v1903] = v1908;
      v1904[5 * v1903] = v1909;
      goto LABEL_934;
    }
    v1898 = (__int128 *)(*(_QWORD *)(a1 + 736) + 8 * v1893);
    v1899 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1896 + *(_DWORD *)(a2 + 16) * v1897));
    v1900 = *v1898;
    v1901 = v1898[2];
    v1899[1] = v1898[1];
    v1899[2] = v1901;
    *v1899 = v1900;
LABEL_934:
    v1910 = v1889 + 1;
    while (v1910 != v1892)
    {
      ++v1891;
      v1911 = *v1910++;
      v1893 = v1911;
      if (v1911 != -1)
      {
        v1889 = v1910 - 1;
        v1894 = v1891;
        v1895 = *v1883;
        if (v10)
          goto LABEL_930;
        goto LABEL_932;
      }
    }
    v1884 = *(_DWORD *)(a1 + 732);
LABEL_924:
    ++v1885;
    ++v1886;
    if (v1885 < v1884)
      continue;
    break;
  }
  v10 = *a5;
LABEL_944:
  v1915 = *(_DWORD *)(a1 + 2172);
  if (!v1915)
    goto LABEL_967;
  v1916 = 0;
  v1917 = a4[3];
  while (2)
  {
    v1918 = *(_QWORD *)(a1 + 2248);
    v1919 = *(_DWORD *)(a1 + 2272) * v1916;
    v1920 = (uint64_t *)(v1918 + 8 * v1919);
    v1921 = *(_DWORD *)(a1 + 2168);
    if (v1921 && *v1920 == -1)
    {
      v1922 = 0;
      v1948 = 8 * (v1921 + v1919) - 8 * v1919 - 8;
      v1949 = v1918 + 8 * v1919;
      while (v1948)
      {
        v1920 = (uint64_t *)(v1949 + 8);
        ++v1922;
        v1950 = *(_QWORD *)(v1949 + 8);
        v1948 -= 8;
        v1949 += 8;
        if (v1950 != -1)
          goto LABEL_951;
      }
      goto LABEL_947;
    }
    v1922 = 0;
LABEL_951:
    v1923 = (uint64_t *)(v1918 + 8 * (v1919 + v1921));
    if (v1920 == v1923)
      goto LABEL_947;
    v1924 = *v1920;
    v1925 = v1922;
    v1926 = *v1883;
    if (!v10)
    {
LABEL_955:
      v1928 = *(_DWORD *)(v1926 + 4 * v1925);
      v1927 = *v1917;
      goto LABEL_956;
    }
LABEL_953:
    v1927 = *v1917;
    v1928 = *(_DWORD *)(v1926 + 4 * v1925);
    if (*v1917 >= v1928)
    {
LABEL_956:
      v1935 = (_QWORD *)(*(_QWORD *)(a1 + 2176) + 8 * v1924);
      v1936 = *(unsigned int *)(a2 + 16);
      v1937 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1928 + (_DWORD)v1936 * v1927));
      v1938 = v1935[1];
      v1939 = v1935[2];
      v1940 = v1935[3];
      v1941 = v1935[4];
      v1942 = v1935[5];
      v1943 = v1935[6];
      v1944 = v1935[7];
      v1945 = v1935[8];
      *v1937 = *v1935;
      v1937[v1936] = v1938;
      v1937[2 * v1936] = v1939;
      v1937[3 * v1936] = v1940;
      v1937[4 * v1936] = v1941;
      v1937[5 * v1936] = v1942;
      v1937[6 * v1936] = v1943;
      v1937[7 * v1936] = v1944;
      v1937[8 * v1936] = v1945;
      goto LABEL_957;
    }
    v1929 = *(_QWORD *)(a1 + 2176) + 8 * v1924;
    v1930 = *(_QWORD *)a2 + 8 * (v1927 + *(_DWORD *)(a2 + 16) * v1928);
    v1931 = *(_OWORD *)v1929;
    v1932 = *(_OWORD *)(v1929 + 16);
    v1933 = *(_OWORD *)(v1929 + 32);
    v1934 = *(_OWORD *)(v1929 + 48);
    *(_QWORD *)(v1930 + 64) = *(_QWORD *)(v1929 + 64);
    *(_OWORD *)(v1930 + 32) = v1933;
    *(_OWORD *)(v1930 + 48) = v1934;
    *(_OWORD *)v1930 = v1931;
    *(_OWORD *)(v1930 + 16) = v1932;
LABEL_957:
    v1946 = v1920 + 1;
    while (v1946 != v1923)
    {
      ++v1922;
      v1947 = *v1946++;
      v1924 = v1947;
      if (v1947 != -1)
      {
        v1920 = v1946 - 1;
        v1925 = v1922;
        v1926 = *v1883;
        if (v10)
          goto LABEL_953;
        goto LABEL_955;
      }
    }
    v1915 = *(_DWORD *)(a1 + 2172);
LABEL_947:
    ++v1916;
    ++v1917;
    if (v1916 < v1915)
      continue;
    break;
  }
  v10 = *a5;
LABEL_967:
  v1951 = *(_DWORD *)(a1 + 3612);
  if (!v1951)
    goto LABEL_990;
  v1952 = 0;
  v1953 = a4[6];
  while (2)
  {
    v1954 = *(_QWORD *)(a1 + 3688);
    v1955 = *(_DWORD *)(a1 + 3712) * v1952;
    v1956 = (uint64_t *)(v1954 + 8 * v1955);
    v1957 = *(_DWORD *)(a1 + 3608);
    if (v1957 && *v1956 == -1)
    {
      v1958 = 0;
      v1979 = 8 * (v1957 + v1955) - 8 * v1955 - 8;
      v1980 = v1954 + 8 * v1955;
      while (v1979)
      {
        v1956 = (uint64_t *)(v1980 + 8);
        ++v1958;
        v1981 = *(_QWORD *)(v1980 + 8);
        v1979 -= 8;
        v1980 += 8;
        if (v1981 != -1)
          goto LABEL_974;
      }
      goto LABEL_970;
    }
    v1958 = 0;
LABEL_974:
    v1959 = (uint64_t *)(v1954 + 8 * (v1955 + v1957));
    if (v1956 == v1959)
      goto LABEL_970;
    v1960 = *v1956;
    v1961 = v1958;
    v1962 = *v1883;
    if (!v10)
    {
LABEL_978:
      v1964 = *(_DWORD *)(v1962 + 4 * v1961);
      v1963 = *v1953;
      goto LABEL_979;
    }
LABEL_976:
    v1963 = *v1953;
    v1964 = *(_DWORD *)(v1962 + 4 * v1961);
    if (*v1953 >= v1964)
    {
LABEL_979:
      v1969 = (_QWORD *)(*(_QWORD *)(a1 + 3616) + 8 * v1960);
      v1970 = *(unsigned int *)(a2 + 16);
      v1971 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1964 + (_DWORD)v1970 * v1963));
      v1972 = v1969[1];
      v1973 = v1969[2];
      v1974 = v1969[3];
      v1975 = v1969[4];
      v1976 = v1969[5];
      *v1971 = *v1969;
      v1971[v1970] = v1972;
      v1971[2 * v1970] = v1973;
      v1971[3 * v1970] = v1974;
      v1971[4 * v1970] = v1975;
      v1971[5 * v1970] = v1976;
      goto LABEL_980;
    }
    v1965 = (__int128 *)(*(_QWORD *)(a1 + 3616) + 8 * v1960);
    v1966 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1963 + *(_DWORD *)(a2 + 16) * v1964));
    v1967 = *v1965;
    v1968 = v1965[2];
    v1966[1] = v1965[1];
    v1966[2] = v1968;
    *v1966 = v1967;
LABEL_980:
    v1977 = v1956 + 1;
    while (v1977 != v1959)
    {
      ++v1958;
      v1978 = *v1977++;
      v1960 = v1978;
      if (v1978 != -1)
      {
        v1956 = v1977 - 1;
        v1961 = v1958;
        v1962 = *v1883;
        if (v10)
          goto LABEL_976;
        goto LABEL_978;
      }
    }
    v1951 = *(_DWORD *)(a1 + 3612);
LABEL_970:
    ++v1952;
    ++v1953;
    if (v1952 < v1951)
      continue;
    break;
  }
  v10 = *a5;
LABEL_990:
  v1982 = *(_DWORD *)(a1 + 5052);
  if (!v1982)
    goto LABEL_1013;
  v1983 = 0;
  v1984 = a4[9];
  while (2)
  {
    v1985 = *(_QWORD *)(a1 + 5128);
    v1986 = *(_DWORD *)(a1 + 5152) * v1983;
    v1987 = (uint64_t *)(v1985 + 8 * v1986);
    v1988 = *(_DWORD *)(a1 + 5048);
    if (v1988 && *v1987 == -1)
    {
      v1989 = 0;
      v2010 = 8 * (v1988 + v1986) - 8 * v1986 - 8;
      v2011 = v1985 + 8 * v1986;
      while (v2010)
      {
        v1987 = (uint64_t *)(v2011 + 8);
        ++v1989;
        v2012 = *(_QWORD *)(v2011 + 8);
        v2010 -= 8;
        v2011 += 8;
        if (v2012 != -1)
          goto LABEL_997;
      }
      goto LABEL_993;
    }
    v1989 = 0;
LABEL_997:
    v1990 = (uint64_t *)(v1985 + 8 * (v1986 + v1988));
    if (v1987 == v1990)
      goto LABEL_993;
    v1991 = *v1987;
    v1992 = v1989;
    v1993 = *v1883;
    if (!v10)
    {
LABEL_1001:
      v1995 = *(_DWORD *)(v1993 + 4 * v1992);
      v1994 = *v1984;
      goto LABEL_1002;
    }
LABEL_999:
    v1994 = *v1984;
    v1995 = *(_DWORD *)(v1993 + 4 * v1992);
    if (*v1984 >= v1995)
    {
LABEL_1002:
      v2000 = (_QWORD *)(*(_QWORD *)(a1 + 5056) + 8 * v1991);
      v2001 = *(unsigned int *)(a2 + 16);
      v2002 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v1995 + (_DWORD)v2001 * v1994));
      v2003 = v2000[1];
      v2004 = v2000[2];
      v2005 = v2000[3];
      v2006 = v2000[4];
      v2007 = v2000[5];
      *v2002 = *v2000;
      v2002[v2001] = v2003;
      v2002[2 * v2001] = v2004;
      v2002[3 * v2001] = v2005;
      v2002[4 * v2001] = v2006;
      v2002[5 * v2001] = v2007;
      goto LABEL_1003;
    }
    v1996 = (__int128 *)(*(_QWORD *)(a1 + 5056) + 8 * v1991);
    v1997 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v1994 + *(_DWORD *)(a2 + 16) * v1995));
    v1998 = *v1996;
    v1999 = v1996[2];
    v1997[1] = v1996[1];
    v1997[2] = v1999;
    *v1997 = v1998;
LABEL_1003:
    v2008 = v1987 + 1;
    while (v2008 != v1990)
    {
      ++v1989;
      v2009 = *v2008++;
      v1991 = v2009;
      if (v2009 != -1)
      {
        v1987 = v2008 - 1;
        v1992 = v1989;
        v1993 = *v1883;
        if (v10)
          goto LABEL_999;
        goto LABEL_1001;
      }
    }
    v1982 = *(_DWORD *)(a1 + 5052);
LABEL_993:
    ++v1983;
    ++v1984;
    if (v1983 < v1982)
      continue;
    break;
  }
  v10 = *a5;
LABEL_1013:
  v2013 = *(_DWORD *)(a1 + 6492);
  if (!v2013)
    goto LABEL_1036;
  v2014 = 0;
  v2015 = a4[12];
  while (2)
  {
    v2016 = *(_QWORD *)(a1 + 6568);
    v2017 = *(_DWORD *)(a1 + 6592) * v2014;
    v2018 = (uint64_t *)(v2016 + 8 * v2017);
    v2019 = *(_DWORD *)(a1 + 6488);
    if (v2019 && *v2018 == -1)
    {
      v2020 = 0;
      v2037 = 8 * (v2019 + v2017) - 8 * v2017 - 8;
      v2038 = v2016 + 8 * v2017;
      while (v2037)
      {
        v2018 = (uint64_t *)(v2038 + 8);
        ++v2020;
        v2039 = *(_QWORD *)(v2038 + 8);
        v2037 -= 8;
        v2038 += 8;
        if (v2039 != -1)
          goto LABEL_1020;
      }
      goto LABEL_1016;
    }
    v2020 = 0;
LABEL_1020:
    v2021 = (uint64_t *)(v2016 + 8 * (v2017 + v2019));
    if (v2018 == v2021)
      goto LABEL_1016;
    v2022 = *v2018;
    v2023 = v2020;
    v2024 = *v1883;
    if (!v10)
    {
LABEL_1024:
      v2026 = *(_DWORD *)(v2024 + 4 * v2023);
      v2025 = *v2015;
      goto LABEL_1025;
    }
LABEL_1022:
    v2025 = *v2015;
    v2026 = *(_DWORD *)(v2024 + 4 * v2023);
    if (*v2015 >= v2026)
    {
LABEL_1025:
      v2030 = (_QWORD *)(*(_QWORD *)(a1 + 6496) + 8 * v2022);
      v2031 = *(unsigned int *)(a2 + 16);
      v2032 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2026 + (_DWORD)v2031 * v2025));
      v2033 = v2030[1];
      v2034 = v2030[2];
      *v2032 = *v2030;
      v2032[v2031] = v2033;
      v2032[2 * v2031] = v2034;
      goto LABEL_1026;
    }
    v2027 = *(_QWORD *)(a1 + 6496) + 8 * v2022;
    v2028 = *(_QWORD *)a2 + 8 * (v2025 + *(_DWORD *)(a2 + 16) * v2026);
    v2029 = *(_OWORD *)v2027;
    *(_QWORD *)(v2028 + 16) = *(_QWORD *)(v2027 + 16);
    *(_OWORD *)v2028 = v2029;
LABEL_1026:
    v2035 = v2018 + 1;
    while (v2035 != v2021)
    {
      ++v2020;
      v2036 = *v2035++;
      v2022 = v2036;
      if (v2036 != -1)
      {
        v2018 = v2035 - 1;
        v2023 = v2020;
        v2024 = *v1883;
        if (v10)
          goto LABEL_1022;
        goto LABEL_1024;
      }
    }
    v2013 = *(_DWORD *)(a1 + 6492);
LABEL_1016:
    ++v2014;
    ++v2015;
    if (v2014 < v2013)
      continue;
    break;
  }
  v10 = *a5;
LABEL_1036:
  sub_20F9CA990(a1 + 7920, a2, a3 + 15, a4[15], v10 != 0);
  v2040 = *a5;
  v2041 = *(_DWORD *)(a1 + 9372);
  if (!v2041)
    goto LABEL_1059;
  v2042 = 0;
  v2043 = a4[18];
  while (2)
  {
    v2044 = *(_QWORD *)(a1 + 9448);
    v2045 = *(_DWORD *)(a1 + 9472) * v2042;
    v2046 = (uint64_t *)(v2044 + 8 * v2045);
    v2047 = *(_DWORD *)(a1 + 9368);
    if (v2047 && *v2046 == -1)
    {
      v2048 = 0;
      v2065 = 8 * (v2047 + v2045) - 8 * v2045 - 8;
      v2066 = v2044 + 8 * v2045;
      while (v2065)
      {
        v2046 = (uint64_t *)(v2066 + 8);
        ++v2048;
        v2067 = *(_QWORD *)(v2066 + 8);
        v2065 -= 8;
        v2066 += 8;
        if (v2067 != -1)
          goto LABEL_1043;
      }
      goto LABEL_1039;
    }
    v2048 = 0;
LABEL_1043:
    v2049 = (uint64_t *)(v2044 + 8 * (v2045 + v2047));
    if (v2046 == v2049)
      goto LABEL_1039;
    v2050 = *v2046;
    v2051 = v2048;
    v2052 = *v1883;
    if (!v2040)
    {
LABEL_1047:
      v2054 = *(_DWORD *)(v2052 + 4 * v2051);
      v2053 = *v2043;
      goto LABEL_1048;
    }
LABEL_1045:
    v2053 = *v2043;
    v2054 = *(_DWORD *)(v2052 + 4 * v2051);
    if (*v2043 >= v2054)
    {
LABEL_1048:
      v2058 = (_QWORD *)(*(_QWORD *)(a1 + 9376) + 8 * v2050);
      v2059 = *(unsigned int *)(a2 + 16);
      v2060 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2054 + (_DWORD)v2059 * v2053));
      v2061 = v2058[1];
      v2062 = v2058[2];
      *v2060 = *v2058;
      v2060[v2059] = v2061;
      v2060[2 * v2059] = v2062;
      goto LABEL_1049;
    }
    v2055 = *(_QWORD *)(a1 + 9376) + 8 * v2050;
    v2056 = *(_QWORD *)a2 + 8 * (v2053 + *(_DWORD *)(a2 + 16) * v2054);
    v2057 = *(_OWORD *)v2055;
    *(_QWORD *)(v2056 + 16) = *(_QWORD *)(v2055 + 16);
    *(_OWORD *)v2056 = v2057;
LABEL_1049:
    v2063 = v2046 + 1;
    while (v2063 != v2049)
    {
      ++v2048;
      v2064 = *v2063++;
      v2050 = v2064;
      if (v2064 != -1)
      {
        v2046 = v2063 - 1;
        v2051 = v2048;
        v2052 = *v1883;
        if (v2040)
          goto LABEL_1045;
        goto LABEL_1047;
      }
    }
    v2041 = *(_DWORD *)(a1 + 9372);
LABEL_1039:
    ++v2042;
    ++v2043;
    if (v2042 < v2041)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1059:
  v2068 = *(_DWORD *)(a1 + 10812);
  if (!v2068)
    goto LABEL_1082;
  v2069 = 0;
  v2070 = a4[21];
  while (2)
  {
    v2071 = *(_QWORD *)(a1 + 10888);
    v2072 = *(_DWORD *)(a1 + 10912) * v2069;
    v2073 = (uint64_t *)(v2071 + 8 * v2072);
    v2074 = *(_DWORD *)(a1 + 10808);
    if (v2074 && *v2073 == -1)
    {
      v2075 = 0;
      v2093 = 8 * (v2074 + v2072) - 8 * v2072 - 8;
      v2094 = v2071 + 8 * v2072;
      while (v2093)
      {
        v2073 = (uint64_t *)(v2094 + 8);
        ++v2075;
        v2095 = *(_QWORD *)(v2094 + 8);
        v2093 -= 8;
        v2094 += 8;
        if (v2095 != -1)
          goto LABEL_1066;
      }
      goto LABEL_1062;
    }
    v2075 = 0;
LABEL_1066:
    v2076 = (uint64_t *)(v2071 + 8 * (v2072 + v2074));
    if (v2073 == v2076)
      goto LABEL_1062;
    v2077 = *v2073;
    v2078 = v2075;
    v2079 = *v1883;
    if (!v2040)
    {
LABEL_1070:
      v2081 = *(_DWORD *)(v2079 + 4 * v2078);
      v2080 = *v2070;
      goto LABEL_1071;
    }
LABEL_1068:
    v2080 = *v2070;
    v2081 = *(_DWORD *)(v2079 + 4 * v2078);
    if (*v2070 >= v2081)
    {
LABEL_1071:
      v2085 = (_QWORD *)(*(_QWORD *)(a1 + 10816) + 8 * v2077);
      v2086 = *(unsigned int *)(a2 + 16);
      v2087 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2081 + (_DWORD)v2086 * v2080));
      v2088 = v2085[1];
      v2089 = v2085[2];
      v2090 = v2085[3];
      *v2087 = *v2085;
      v2087[v2086] = v2088;
      v2087[2 * v2086] = v2089;
      v2087[3 * v2086] = v2090;
      goto LABEL_1072;
    }
    v2082 = (_OWORD *)(*(_QWORD *)(a1 + 10816) + 8 * v2077);
    v2083 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2080 + *(_DWORD *)(a2 + 16) * v2081));
    v2084 = v2082[1];
    *v2083 = *v2082;
    v2083[1] = v2084;
LABEL_1072:
    v2091 = v2073 + 1;
    while (v2091 != v2076)
    {
      ++v2075;
      v2092 = *v2091++;
      v2077 = v2092;
      if (v2092 != -1)
      {
        v2073 = v2091 - 1;
        v2078 = v2075;
        v2079 = *v1883;
        if (v2040)
          goto LABEL_1068;
        goto LABEL_1070;
      }
    }
    v2068 = *(_DWORD *)(a1 + 10812);
LABEL_1062:
    ++v2069;
    ++v2070;
    if (v2069 < v2068)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1082:
  v2096 = *(_DWORD *)(a1 + 12252);
  if (!v2096)
    goto LABEL_1105;
  v2097 = 0;
  v2098 = a4[24];
  while (2)
  {
    v2099 = *(_QWORD *)(a1 + 12328);
    v2100 = *(_DWORD *)(a1 + 12352) * v2097;
    v2101 = (uint64_t *)(v2099 + 8 * v2100);
    v2102 = *(_DWORD *)(a1 + 12248);
    if (v2102 && *v2101 == -1)
    {
      v2103 = 0;
      v2121 = 8 * (v2102 + v2100) - 8 * v2100 - 8;
      v2122 = v2099 + 8 * v2100;
      while (v2121)
      {
        v2101 = (uint64_t *)(v2122 + 8);
        ++v2103;
        v2123 = *(_QWORD *)(v2122 + 8);
        v2121 -= 8;
        v2122 += 8;
        if (v2123 != -1)
          goto LABEL_1089;
      }
      goto LABEL_1085;
    }
    v2103 = 0;
LABEL_1089:
    v2104 = (uint64_t *)(v2099 + 8 * (v2100 + v2102));
    if (v2101 == v2104)
      goto LABEL_1085;
    v2105 = *v2101;
    v2106 = v2103;
    v2107 = *v1883;
    if (!v2040)
    {
LABEL_1093:
      v2109 = *(_DWORD *)(v2107 + 4 * v2106);
      v2108 = *v2098;
      goto LABEL_1094;
    }
LABEL_1091:
    v2108 = *v2098;
    v2109 = *(_DWORD *)(v2107 + 4 * v2106);
    if (*v2098 >= v2109)
    {
LABEL_1094:
      v2113 = (_QWORD *)(*(_QWORD *)(a1 + 12256) + 8 * v2105);
      v2114 = *(unsigned int *)(a2 + 16);
      v2115 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2109 + (_DWORD)v2114 * v2108));
      v2116 = v2113[1];
      v2117 = v2113[2];
      v2118 = v2113[3];
      *v2115 = *v2113;
      v2115[v2114] = v2116;
      v2115[2 * v2114] = v2117;
      v2115[3 * v2114] = v2118;
      goto LABEL_1095;
    }
    v2110 = (_OWORD *)(*(_QWORD *)(a1 + 12256) + 8 * v2105);
    v2111 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2108 + *(_DWORD *)(a2 + 16) * v2109));
    v2112 = v2110[1];
    *v2111 = *v2110;
    v2111[1] = v2112;
LABEL_1095:
    v2119 = v2101 + 1;
    while (v2119 != v2104)
    {
      ++v2103;
      v2120 = *v2119++;
      v2105 = v2120;
      if (v2120 != -1)
      {
        v2101 = v2119 - 1;
        v2106 = v2103;
        v2107 = *v1883;
        if (v2040)
          goto LABEL_1091;
        goto LABEL_1093;
      }
    }
    v2096 = *(_DWORD *)(a1 + 12252);
LABEL_1085:
    ++v2097;
    ++v2098;
    if (v2097 < v2096)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1105:
  v2124 = *(_DWORD *)(a1 + 13692);
  if (!v2124)
    goto LABEL_1128;
  v2125 = 0;
  v2126 = a4[27];
  while (2)
  {
    v2127 = *(_QWORD *)(a1 + 13768);
    v2128 = *(_DWORD *)(a1 + 13792) * v2125;
    v2129 = (uint64_t *)(v2127 + 8 * v2128);
    v2130 = *(_DWORD *)(a1 + 13688);
    if (v2130 && *v2129 == -1)
    {
      v2131 = 0;
      v2148 = 8 * (v2130 + v2128) - 8 * v2128 - 8;
      v2149 = v2127 + 8 * v2128;
      while (v2148)
      {
        v2129 = (uint64_t *)(v2149 + 8);
        ++v2131;
        v2150 = *(_QWORD *)(v2149 + 8);
        v2148 -= 8;
        v2149 += 8;
        if (v2150 != -1)
          goto LABEL_1112;
      }
      goto LABEL_1108;
    }
    v2131 = 0;
LABEL_1112:
    v2132 = (uint64_t *)(v2127 + 8 * (v2128 + v2130));
    if (v2129 == v2132)
      goto LABEL_1108;
    v2133 = *v2129;
    v2134 = v2131;
    v2135 = *v1883;
    if (!v2040)
    {
LABEL_1116:
      v2137 = *(_DWORD *)(v2135 + 4 * v2134);
      v2136 = *v2126;
      goto LABEL_1117;
    }
LABEL_1114:
    v2136 = *v2126;
    v2137 = *(_DWORD *)(v2135 + 4 * v2134);
    if (*v2126 >= v2137)
    {
LABEL_1117:
      v2141 = (_QWORD *)(*(_QWORD *)(a1 + 13696) + 8 * v2133);
      v2142 = *(unsigned int *)(a2 + 16);
      v2143 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2137 + (_DWORD)v2142 * v2136));
      v2144 = v2141[1];
      v2145 = v2141[2];
      *v2143 = *v2141;
      v2143[v2142] = v2144;
      v2143[2 * v2142] = v2145;
      goto LABEL_1118;
    }
    v2138 = *(_QWORD *)(a1 + 13696) + 8 * v2133;
    v2139 = *(_QWORD *)a2 + 8 * (v2136 + *(_DWORD *)(a2 + 16) * v2137);
    v2140 = *(_OWORD *)v2138;
    *(_QWORD *)(v2139 + 16) = *(_QWORD *)(v2138 + 16);
    *(_OWORD *)v2139 = v2140;
LABEL_1118:
    v2146 = v2129 + 1;
    while (v2146 != v2132)
    {
      ++v2131;
      v2147 = *v2146++;
      v2133 = v2147;
      if (v2147 != -1)
      {
        v2129 = v2146 - 1;
        v2134 = v2131;
        v2135 = *v1883;
        if (v2040)
          goto LABEL_1114;
        goto LABEL_1116;
      }
    }
    v2124 = *(_DWORD *)(a1 + 13692);
LABEL_1108:
    ++v2125;
    ++v2126;
    if (v2125 < v2124)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1128:
  v2151 = *(_DWORD *)(a1 + 588);
  if (!v2151)
    goto LABEL_1151;
  v2152 = 0;
  v2153 = *a4;
  while (2)
  {
    v2154 = *(_QWORD *)(a1 + 664);
    v2155 = *(_DWORD *)(a1 + 688) * v2152;
    v2156 = (uint64_t *)(v2154 + 8 * v2155);
    v2157 = *(_DWORD *)(a1 + 584);
    if (v2157 && *v2156 == -1)
    {
      v2158 = 0;
      v2201 = 8 * (v2157 + v2155) - 8 * v2155 - 8;
      v2202 = v2154 + 8 * v2155;
      while (v2201)
      {
        v2156 = (uint64_t *)(v2202 + 8);
        ++v2158;
        v2203 = *(_QWORD *)(v2202 + 8);
        v2201 -= 8;
        v2202 += 8;
        if (v2203 != -1)
          goto LABEL_1135;
      }
      goto LABEL_1131;
    }
    v2158 = 0;
LABEL_1135:
    v2159 = (uint64_t *)(v2154 + 8 * (v2155 + v2157));
    if (v2156 == v2159)
      goto LABEL_1131;
    v2160 = *v2156;
    v2161 = v2158;
    v2162 = a3[12];
    if (!v2040)
    {
LABEL_1139:
      v2164 = *(_DWORD *)(v2162 + 4 * v2161);
      v2163 = *v2153;
      goto LABEL_1140;
    }
LABEL_1137:
    v2163 = *v2153;
    v2164 = *(_DWORD *)(v2162 + 4 * v2161);
    if (*v2153 >= v2164)
    {
LABEL_1140:
      v2180 = *(_QWORD *)(a1 + 592) + 8 * v2160;
      v2181 = *(unsigned int *)(a2 + 16);
      v2182 = *(_OWORD *)v2180;
      v2183 = *(_QWORD *)a2 + 8 * (v2164 + (_DWORD)v2181 * v2163);
      v2184 = *(_OWORD *)(v2180 + 24);
      v2185 = *(_QWORD *)(v2180 + 40);
      v2186 = *(_OWORD *)(v2180 + 48);
      v2187 = *(_QWORD *)(v2180 + 64);
      v2188 = *(_OWORD *)(v2180 + 72);
      v2189 = *(_QWORD *)(v2180 + 88);
      v2190 = *(_OWORD *)(v2180 + 96);
      v2191 = *(_QWORD *)(v2180 + 112);
      v2192 = *(_OWORD *)(v2180 + 120);
      v2193 = *(_QWORD *)(v2180 + 136);
      *(_QWORD *)(v2183 + 16) = *(_QWORD *)(v2180 + 16);
      *(_OWORD *)v2183 = v2182;
      v2194 = v2183 + 8 * v2181;
      *(_QWORD *)(v2194 + 16) = v2185;
      *(_OWORD *)v2194 = v2184;
      v2195 = v2183 + 16 * v2181;
      *(_QWORD *)(v2195 + 16) = v2187;
      *(_OWORD *)v2195 = v2186;
      v2196 = v2183 + 24 * v2181;
      *(_QWORD *)(v2196 + 16) = v2189;
      *(_OWORD *)v2196 = v2188;
      v2197 = v2183 + 32 * v2181;
      *(_QWORD *)(v2197 + 16) = v2191;
      *(_OWORD *)v2197 = v2190;
      v2198 = v2183 + 40 * v2181;
      *(_QWORD *)(v2198 + 16) = v2193;
      *(_OWORD *)v2198 = v2192;
      goto LABEL_1141;
    }
    v2165 = *(_QWORD *)(a1 + 592) + 8 * v2160;
    v2166 = *(unsigned int *)(a2 + 16);
    v2167 = *(_QWORD *)a2 + 8 * (v2163 + (_DWORD)v2166 * v2164);
    *(_QWORD *)&v2168 = *(_QWORD *)(v2165 + 16);
    v2169 = *(int64x2_t *)(v2165 + 24);
    *(_QWORD *)&v2170 = *(_QWORD *)(v2165 + 64);
    v2171 = *(int64x2_t *)(v2165 + 48);
    v2172 = *(int64x2_t *)(v2165 + 72);
    *(_QWORD *)&v2173 = *(_QWORD *)(v2165 + 112);
    v2174 = *(int64x2_t *)(v2165 + 96);
    v2175 = *(int64x2_t *)(v2165 + 120);
    v2176 = vzip1q_s64(*(int64x2_t *)v2165, v2169);
    v2177 = vzip2q_s64(*(int64x2_t *)v2165, v2169);
    *((_QWORD *)&v2168 + 1) = *(_QWORD *)(v2165 + 40);
    *((_QWORD *)&v2170 + 1) = *(_QWORD *)(v2165 + 88);
    *((_QWORD *)&v2173 + 1) = *(_QWORD *)(v2165 + 136);
    *(int64x2_t *)(v2167 + 16) = vzip1q_s64(v2171, v2172);
    *(int64x2_t *)(v2167 + 32) = vzip1q_s64(v2174, v2175);
    *(int64x2_t *)v2167 = v2176;
    v2178 = (int64x2_t *)(v2167 + 8 * v2166);
    v2178[1] = vzip1q_s64(vdupq_laneq_s64(v2171, 1), vdupq_laneq_s64(v2172, 1));
    v2178[2] = vzip2q_s64(v2174, v2175);
    *v2178 = v2177;
    v2179 = (_OWORD *)(v2167 + 16 * v2166);
    v2179[1] = v2170;
    v2179[2] = v2173;
    *v2179 = v2168;
LABEL_1141:
    v2199 = v2156 + 1;
    while (v2199 != v2159)
    {
      ++v2158;
      v2200 = *v2199++;
      v2160 = v2200;
      if (v2200 != -1)
      {
        v2156 = v2199 - 1;
        v2161 = v2158;
        v2162 = a3[12];
        if (v2040)
          goto LABEL_1137;
        goto LABEL_1139;
      }
    }
    v2151 = *(_DWORD *)(a1 + 588);
LABEL_1131:
    ++v2152;
    ++v2153;
    if (v2152 < v2151)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1151:
  v2204 = *(_DWORD *)(a1 + 2028);
  if (!v2204)
    goto LABEL_1174;
  v2205 = 0;
  v2206 = a4[3];
  while (2)
  {
    v2207 = *(_QWORD *)(a1 + 2104);
    v2208 = *(_DWORD *)(a1 + 2128) * v2205;
    v2209 = (uint64_t *)(v2207 + 8 * v2208);
    v2210 = *(_DWORD *)(a1 + 2024);
    if (v2210 && *v2209 == -1)
    {
      v2211 = 0;
      v2268 = 8 * (v2210 + v2208) - 8 * v2208 - 8;
      v2269 = v2207 + 8 * v2208;
      while (v2268)
      {
        v2209 = (uint64_t *)(v2269 + 8);
        ++v2211;
        v2270 = *(_QWORD *)(v2269 + 8);
        v2268 -= 8;
        v2269 += 8;
        if (v2270 != -1)
          goto LABEL_1158;
      }
      goto LABEL_1154;
    }
    v2211 = 0;
LABEL_1158:
    v2212 = (uint64_t *)(v2207 + 8 * (v2208 + v2210));
    if (v2209 == v2212)
      goto LABEL_1154;
    v2213 = *v2209;
    v2214 = v2211;
    v2215 = a3[12];
    if (!v2040)
    {
LABEL_1162:
      v2217 = *(_DWORD *)(v2215 + 4 * v2214);
      v2216 = *v2206;
      goto LABEL_1163;
    }
LABEL_1160:
    v2216 = *v2206;
    v2217 = *(_DWORD *)(v2215 + 4 * v2214);
    if (*v2206 >= v2217)
    {
LABEL_1163:
      v2238 = *(_QWORD *)(a1 + 2032) + 8 * v2213;
      v2239 = *(unsigned int *)(a2 + 16);
      v2240 = *(_OWORD *)v2238;
      v2241 = *(_QWORD *)a2 + 8 * (v2217 + (_DWORD)v2239 * v2216);
      v2242 = *(_OWORD *)(v2238 + 24);
      v2243 = *(_QWORD *)(v2238 + 40);
      v2244 = *(_OWORD *)(v2238 + 48);
      v2245 = *(_QWORD *)(v2238 + 64);
      v2246 = *(_OWORD *)(v2238 + 72);
      v2247 = *(_QWORD *)(v2238 + 88);
      v2248 = *(_OWORD *)(v2238 + 96);
      v2249 = *(_QWORD *)(v2238 + 112);
      v2250 = *(_OWORD *)(v2238 + 120);
      v2251 = *(_QWORD *)(v2238 + 136);
      v2252 = *(_OWORD *)(v2238 + 144);
      v2253 = *(_QWORD *)(v2238 + 160);
      v2254 = *(_OWORD *)(v2238 + 168);
      v2255 = *(_QWORD *)(v2238 + 184);
      v2256 = *(_OWORD *)(v2238 + 192);
      v2257 = *(_QWORD *)(v2238 + 208);
      *(_QWORD *)(v2241 + 16) = *(_QWORD *)(v2238 + 16);
      *(_OWORD *)v2241 = v2240;
      v2258 = v2241 + 8 * v2239;
      *(_QWORD *)(v2258 + 16) = v2243;
      *(_OWORD *)v2258 = v2242;
      v2259 = v2241 + 16 * v2239;
      *(_QWORD *)(v2259 + 16) = v2245;
      *(_OWORD *)v2259 = v2244;
      v2260 = v2241 + 24 * v2239;
      *(_QWORD *)(v2260 + 16) = v2247;
      *(_OWORD *)v2260 = v2246;
      v2261 = v2241 + 32 * v2239;
      *(_QWORD *)(v2261 + 16) = v2249;
      *(_OWORD *)v2261 = v2248;
      v2262 = v2241 + 40 * v2239;
      *(_QWORD *)(v2262 + 16) = v2251;
      *(_OWORD *)v2262 = v2250;
      v2263 = v2241 + 48 * v2239;
      *(_QWORD *)(v2263 + 16) = v2253;
      *(_OWORD *)v2263 = v2252;
      v2264 = v2241 + 56 * v2239;
      *(_QWORD *)(v2264 + 16) = v2255;
      *(_OWORD *)v2264 = v2254;
      v2265 = v2241 + (v2239 << 6);
      *(_QWORD *)(v2265 + 16) = v2257;
      *(_OWORD *)v2265 = v2256;
      goto LABEL_1164;
    }
    v2218 = *(unsigned int *)(a2 + 16);
    v2219 = *(_QWORD *)(a1 + 2032) + 8 * v2213;
    *(_QWORD *)&v2220 = *(_QWORD *)(v2219 + 16);
    v2221 = *(_QWORD *)a2 + 8 * (v2216 + (_DWORD)v2218 * v2217);
    v2222 = *(int64x2_t *)(v2219 + 24);
    *(_QWORD *)&v2223 = *(_QWORD *)(v2219 + 64);
    v2224 = *(int64x2_t *)(v2219 + 48);
    v2225 = *(int64x2_t *)(v2219 + 72);
    *(_QWORD *)&v2226 = *(_QWORD *)(v2219 + 112);
    v2227 = *(int64x2_t *)(v2219 + 96);
    v2228 = *(int64x2_t *)(v2219 + 120);
    *(_QWORD *)&v2229 = *(_QWORD *)(v2219 + 160);
    v2230 = *(int64x2_t *)(v2219 + 144);
    v2231 = *(int64x2_t *)(v2219 + 168);
    v2232 = *(_QWORD *)(v2219 + 208);
    v2233 = *(_OWORD *)(v2219 + 192);
    v2234 = vzip1q_s64(*(int64x2_t *)v2219, v2222);
    v2235 = vzip2q_s64(*(int64x2_t *)v2219, v2222);
    *((_QWORD *)&v2220 + 1) = *(_QWORD *)(v2219 + 40);
    *((_QWORD *)&v2223 + 1) = *(_QWORD *)(v2219 + 88);
    *((_QWORD *)&v2226 + 1) = *(_QWORD *)(v2219 + 136);
    *((_QWORD *)&v2229 + 1) = *(_QWORD *)(v2219 + 184);
    *(int64x2_t *)(v2221 + 32) = vzip1q_s64(v2227, v2228);
    *(int64x2_t *)(v2221 + 48) = vzip1q_s64(v2230, v2231);
    *(_QWORD *)(v2221 + 64) = v2233;
    *(int64x2_t *)v2221 = v2234;
    *(int64x2_t *)(v2221 + 16) = vzip1q_s64(v2224, v2225);
    v2236 = (int64x2_t *)(v2221 + 8 * v2218);
    v2236[2] = vzip2q_s64(v2227, v2228);
    v2236[3] = vzip2q_s64(v2230, v2231);
    *v2236 = v2235;
    v2236[1] = vzip2q_s64(v2224, v2225);
    v2236[4].i64[0] = *((_QWORD *)&v2233 + 1);
    v2237 = v2221 + 16 * v2218;
    *(_QWORD *)(v2237 + 64) = v2232;
    *(_OWORD *)(v2237 + 32) = v2226;
    *(_OWORD *)(v2237 + 48) = v2229;
    *(_OWORD *)v2237 = v2220;
    *(_OWORD *)(v2237 + 16) = v2223;
LABEL_1164:
    v2266 = v2209 + 1;
    while (v2266 != v2212)
    {
      ++v2211;
      v2267 = *v2266++;
      v2213 = v2267;
      if (v2267 != -1)
      {
        v2209 = v2266 - 1;
        v2214 = v2211;
        v2215 = a3[12];
        if (v2040)
          goto LABEL_1160;
        goto LABEL_1162;
      }
    }
    v2204 = *(_DWORD *)(a1 + 2028);
LABEL_1154:
    ++v2205;
    ++v2206;
    if (v2205 < v2204)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1174:
  v2271 = *(_DWORD *)(a1 + 3468);
  if (!v2271)
    goto LABEL_1197;
  v2272 = 0;
  v2273 = a4[6];
  while (2)
  {
    v2274 = *(_QWORD *)(a1 + 3544);
    v2275 = *(_DWORD *)(a1 + 3568) * v2272;
    v2276 = (uint64_t *)(v2274 + 8 * v2275);
    v2277 = *(_DWORD *)(a1 + 3464);
    if (v2277 && *v2276 == -1)
    {
      v2278 = 0;
      v2321 = 8 * (v2277 + v2275) - 8 * v2275 - 8;
      v2322 = v2274 + 8 * v2275;
      while (v2321)
      {
        v2276 = (uint64_t *)(v2322 + 8);
        ++v2278;
        v2323 = *(_QWORD *)(v2322 + 8);
        v2321 -= 8;
        v2322 += 8;
        if (v2323 != -1)
          goto LABEL_1181;
      }
      goto LABEL_1177;
    }
    v2278 = 0;
LABEL_1181:
    v2279 = (uint64_t *)(v2274 + 8 * (v2275 + v2277));
    if (v2276 == v2279)
      goto LABEL_1177;
    v2280 = *v2276;
    v2281 = v2278;
    v2282 = a3[12];
    if (!v2040)
    {
LABEL_1185:
      v2284 = *(_DWORD *)(v2282 + 4 * v2281);
      v2283 = *v2273;
      goto LABEL_1186;
    }
LABEL_1183:
    v2283 = *v2273;
    v2284 = *(_DWORD *)(v2282 + 4 * v2281);
    if (*v2273 >= v2284)
    {
LABEL_1186:
      v2300 = *(_QWORD *)(a1 + 3472) + 8 * v2280;
      v2301 = *(unsigned int *)(a2 + 16);
      v2302 = *(_OWORD *)v2300;
      v2303 = *(_QWORD *)a2 + 8 * (v2284 + (_DWORD)v2301 * v2283);
      v2304 = *(_OWORD *)(v2300 + 24);
      v2305 = *(_QWORD *)(v2300 + 40);
      v2306 = *(_OWORD *)(v2300 + 48);
      v2307 = *(_QWORD *)(v2300 + 64);
      v2308 = *(_OWORD *)(v2300 + 72);
      v2309 = *(_QWORD *)(v2300 + 88);
      v2310 = *(_OWORD *)(v2300 + 96);
      v2311 = *(_QWORD *)(v2300 + 112);
      v2312 = *(_OWORD *)(v2300 + 120);
      v2313 = *(_QWORD *)(v2300 + 136);
      *(_QWORD *)(v2303 + 16) = *(_QWORD *)(v2300 + 16);
      *(_OWORD *)v2303 = v2302;
      v2314 = v2303 + 8 * v2301;
      *(_QWORD *)(v2314 + 16) = v2305;
      *(_OWORD *)v2314 = v2304;
      v2315 = v2303 + 16 * v2301;
      *(_QWORD *)(v2315 + 16) = v2307;
      *(_OWORD *)v2315 = v2306;
      v2316 = v2303 + 24 * v2301;
      *(_QWORD *)(v2316 + 16) = v2309;
      *(_OWORD *)v2316 = v2308;
      v2317 = v2303 + 32 * v2301;
      *(_QWORD *)(v2317 + 16) = v2311;
      *(_OWORD *)v2317 = v2310;
      v2318 = v2303 + 40 * v2301;
      *(_QWORD *)(v2318 + 16) = v2313;
      *(_OWORD *)v2318 = v2312;
      goto LABEL_1187;
    }
    v2285 = *(_QWORD *)(a1 + 3472) + 8 * v2280;
    v2286 = *(unsigned int *)(a2 + 16);
    v2287 = *(_QWORD *)a2 + 8 * (v2283 + (_DWORD)v2286 * v2284);
    *(_QWORD *)&v2288 = *(_QWORD *)(v2285 + 16);
    v2289 = *(int64x2_t *)(v2285 + 24);
    *(_QWORD *)&v2290 = *(_QWORD *)(v2285 + 64);
    v2291 = *(int64x2_t *)(v2285 + 48);
    v2292 = *(int64x2_t *)(v2285 + 72);
    *(_QWORD *)&v2293 = *(_QWORD *)(v2285 + 112);
    v2294 = *(int64x2_t *)(v2285 + 96);
    v2295 = *(int64x2_t *)(v2285 + 120);
    v2296 = vzip1q_s64(*(int64x2_t *)v2285, v2289);
    v2297 = vzip2q_s64(*(int64x2_t *)v2285, v2289);
    *((_QWORD *)&v2288 + 1) = *(_QWORD *)(v2285 + 40);
    *((_QWORD *)&v2290 + 1) = *(_QWORD *)(v2285 + 88);
    *((_QWORD *)&v2293 + 1) = *(_QWORD *)(v2285 + 136);
    *(int64x2_t *)(v2287 + 16) = vzip1q_s64(v2291, v2292);
    *(int64x2_t *)(v2287 + 32) = vzip1q_s64(v2294, v2295);
    *(int64x2_t *)v2287 = v2296;
    v2298 = (int64x2_t *)(v2287 + 8 * v2286);
    v2298[1] = vzip1q_s64(vdupq_laneq_s64(v2291, 1), vdupq_laneq_s64(v2292, 1));
    v2298[2] = vzip2q_s64(v2294, v2295);
    *v2298 = v2297;
    v2299 = (_OWORD *)(v2287 + 16 * v2286);
    v2299[1] = v2290;
    v2299[2] = v2293;
    *v2299 = v2288;
LABEL_1187:
    v2319 = v2276 + 1;
    while (v2319 != v2279)
    {
      ++v2278;
      v2320 = *v2319++;
      v2280 = v2320;
      if (v2320 != -1)
      {
        v2276 = v2319 - 1;
        v2281 = v2278;
        v2282 = a3[12];
        if (v2040)
          goto LABEL_1183;
        goto LABEL_1185;
      }
    }
    v2271 = *(_DWORD *)(a1 + 3468);
LABEL_1177:
    ++v2272;
    ++v2273;
    if (v2272 < v2271)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1197:
  v2324 = *(_DWORD *)(a1 + 4908);
  if (!v2324)
    goto LABEL_1220;
  v2325 = 0;
  v2326 = a4[9];
  while (2)
  {
    v2327 = *(_QWORD *)(a1 + 4984);
    v2328 = *(_DWORD *)(a1 + 5008) * v2325;
    v2329 = (uint64_t *)(v2327 + 8 * v2328);
    v2330 = *(_DWORD *)(a1 + 4904);
    if (v2330 && *v2329 == -1)
    {
      v2331 = 0;
      v2374 = 8 * (v2330 + v2328) - 8 * v2328 - 8;
      v2375 = v2327 + 8 * v2328;
      while (v2374)
      {
        v2329 = (uint64_t *)(v2375 + 8);
        ++v2331;
        v2376 = *(_QWORD *)(v2375 + 8);
        v2374 -= 8;
        v2375 += 8;
        if (v2376 != -1)
          goto LABEL_1204;
      }
      goto LABEL_1200;
    }
    v2331 = 0;
LABEL_1204:
    v2332 = (uint64_t *)(v2327 + 8 * (v2328 + v2330));
    if (v2329 == v2332)
      goto LABEL_1200;
    v2333 = *v2329;
    v2334 = v2331;
    v2335 = a3[12];
    if (!v2040)
    {
LABEL_1208:
      v2337 = *(_DWORD *)(v2335 + 4 * v2334);
      v2336 = *v2326;
      goto LABEL_1209;
    }
LABEL_1206:
    v2336 = *v2326;
    v2337 = *(_DWORD *)(v2335 + 4 * v2334);
    if (*v2326 >= v2337)
    {
LABEL_1209:
      v2353 = *(_QWORD *)(a1 + 4912) + 8 * v2333;
      v2354 = *(unsigned int *)(a2 + 16);
      v2355 = *(_OWORD *)v2353;
      v2356 = *(_QWORD *)a2 + 8 * (v2337 + (_DWORD)v2354 * v2336);
      v2357 = *(_OWORD *)(v2353 + 24);
      v2358 = *(_QWORD *)(v2353 + 40);
      v2359 = *(_OWORD *)(v2353 + 48);
      v2360 = *(_QWORD *)(v2353 + 64);
      v2361 = *(_OWORD *)(v2353 + 72);
      v2362 = *(_QWORD *)(v2353 + 88);
      v2363 = *(_OWORD *)(v2353 + 96);
      v2364 = *(_QWORD *)(v2353 + 112);
      v2365 = *(_OWORD *)(v2353 + 120);
      v2366 = *(_QWORD *)(v2353 + 136);
      *(_QWORD *)(v2356 + 16) = *(_QWORD *)(v2353 + 16);
      *(_OWORD *)v2356 = v2355;
      v2367 = v2356 + 8 * v2354;
      *(_QWORD *)(v2367 + 16) = v2358;
      *(_OWORD *)v2367 = v2357;
      v2368 = v2356 + 16 * v2354;
      *(_QWORD *)(v2368 + 16) = v2360;
      *(_OWORD *)v2368 = v2359;
      v2369 = v2356 + 24 * v2354;
      *(_QWORD *)(v2369 + 16) = v2362;
      *(_OWORD *)v2369 = v2361;
      v2370 = v2356 + 32 * v2354;
      *(_QWORD *)(v2370 + 16) = v2364;
      *(_OWORD *)v2370 = v2363;
      v2371 = v2356 + 40 * v2354;
      *(_QWORD *)(v2371 + 16) = v2366;
      *(_OWORD *)v2371 = v2365;
      goto LABEL_1210;
    }
    v2338 = *(_QWORD *)(a1 + 4912) + 8 * v2333;
    v2339 = *(unsigned int *)(a2 + 16);
    v2340 = *(_QWORD *)a2 + 8 * (v2336 + (_DWORD)v2339 * v2337);
    *(_QWORD *)&v2341 = *(_QWORD *)(v2338 + 16);
    v2342 = *(int64x2_t *)(v2338 + 24);
    *(_QWORD *)&v2343 = *(_QWORD *)(v2338 + 64);
    v2344 = *(int64x2_t *)(v2338 + 48);
    v2345 = *(int64x2_t *)(v2338 + 72);
    *(_QWORD *)&v2346 = *(_QWORD *)(v2338 + 112);
    v2347 = *(int64x2_t *)(v2338 + 96);
    v2348 = *(int64x2_t *)(v2338 + 120);
    v2349 = vzip1q_s64(*(int64x2_t *)v2338, v2342);
    v2350 = vzip2q_s64(*(int64x2_t *)v2338, v2342);
    *((_QWORD *)&v2341 + 1) = *(_QWORD *)(v2338 + 40);
    *((_QWORD *)&v2343 + 1) = *(_QWORD *)(v2338 + 88);
    *((_QWORD *)&v2346 + 1) = *(_QWORD *)(v2338 + 136);
    *(int64x2_t *)(v2340 + 16) = vzip1q_s64(v2344, v2345);
    *(int64x2_t *)(v2340 + 32) = vzip1q_s64(v2347, v2348);
    *(int64x2_t *)v2340 = v2349;
    v2351 = (int64x2_t *)(v2340 + 8 * v2339);
    v2351[1] = vzip1q_s64(vdupq_laneq_s64(v2344, 1), vdupq_laneq_s64(v2345, 1));
    v2351[2] = vzip2q_s64(v2347, v2348);
    *v2351 = v2350;
    v2352 = (_OWORD *)(v2340 + 16 * v2339);
    v2352[1] = v2343;
    v2352[2] = v2346;
    *v2352 = v2341;
LABEL_1210:
    v2372 = v2329 + 1;
    while (v2372 != v2332)
    {
      ++v2331;
      v2373 = *v2372++;
      v2333 = v2373;
      if (v2373 != -1)
      {
        v2329 = v2372 - 1;
        v2334 = v2331;
        v2335 = a3[12];
        if (v2040)
          goto LABEL_1206;
        goto LABEL_1208;
      }
    }
    v2324 = *(_DWORD *)(a1 + 4908);
LABEL_1200:
    ++v2325;
    ++v2326;
    if (v2325 < v2324)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1220:
  v2377 = *(_DWORD *)(a1 + 6348);
  if (!v2377)
    goto LABEL_1243;
  v2378 = 0;
  v2379 = a4[12];
  while (2)
  {
    v2380 = *(_QWORD *)(a1 + 6424);
    v2381 = *(_DWORD *)(a1 + 6448) * v2378;
    v2382 = (uint64_t *)(v2380 + 8 * v2381);
    v2383 = *(_DWORD *)(a1 + 6344);
    if (v2383 && *v2382 == -1)
    {
      v2384 = 0;
      v2410 = 8 * (v2383 + v2381) - 8 * v2381 - 8;
      v2411 = v2380 + 8 * v2381;
      while (v2410)
      {
        v2382 = (uint64_t *)(v2411 + 8);
        ++v2384;
        v2412 = *(_QWORD *)(v2411 + 8);
        v2410 -= 8;
        v2411 += 8;
        if (v2412 != -1)
          goto LABEL_1227;
      }
      goto LABEL_1223;
    }
    v2384 = 0;
LABEL_1227:
    v2385 = (uint64_t *)(v2380 + 8 * (v2381 + v2383));
    if (v2382 == v2385)
      goto LABEL_1223;
    v2386 = *v2382;
    v2387 = v2384;
    v2388 = a3[12];
    if (!v2040)
    {
LABEL_1231:
      v2390 = *(_DWORD *)(v2388 + 4 * v2387);
      v2389 = *v2379;
      goto LABEL_1232;
    }
LABEL_1229:
    v2389 = *v2379;
    v2390 = *(_DWORD *)(v2388 + 4 * v2387);
    if (*v2379 >= v2390)
    {
LABEL_1232:
      v2402 = *(_QWORD *)(a1 + 6352) + 8 * v2386;
      v2392 = *(unsigned int *)(a2 + 16);
      v2393 = *(_QWORD *)a2 + 8 * (v2390 + (_DWORD)v2392 * v2389);
      v2403 = *(_OWORD *)v2402;
      v2404 = *(_OWORD *)(v2402 + 24);
      v2405 = *(_QWORD *)(v2402 + 40);
      v2394 = *(int8x16_t *)(v2402 + 48);
      v2398 = *(_QWORD *)(v2402 + 64);
      v2395 = vextq_s8(v2394, v2394, 8uLL).u64[0];
      *(_QWORD *)(v2393 + 16) = *(_QWORD *)(v2402 + 16);
      *(_OWORD *)v2393 = v2403;
      v2406 = v2393 + 8 * v2392;
      *(_QWORD *)(v2406 + 16) = v2405;
      *(_OWORD *)v2406 = v2404;
      goto LABEL_1233;
    }
    v2391 = *(_QWORD *)(a1 + 6352) + 8 * v2386;
    v2392 = *(unsigned int *)(a2 + 16);
    v2393 = *(_QWORD *)a2 + 8 * (v2389 + (_DWORD)v2392 * v2390);
    v2394.i64[0] = *(_QWORD *)(v2391 + 16);
    v2395 = *(_QWORD *)(v2391 + 40);
    v2396 = *(int64x2_t *)(v2391 + 24);
    v2397 = *(_OWORD *)(v2391 + 48);
    v2398 = *(_QWORD *)(v2391 + 64);
    v2399 = vzip1q_s64(*(int64x2_t *)v2391, v2396);
    v2400 = vzip2q_s64(*(int64x2_t *)v2391, v2396);
    *(_QWORD *)(v2393 + 16) = v2397;
    *(int64x2_t *)v2393 = v2399;
    v2401 = (int64x2_t *)(v2393 + 8 * v2392);
    *v2401 = v2400;
    v2401[1].i64[0] = *((_QWORD *)&v2397 + 1);
LABEL_1233:
    v2407 = (int8x16_t *)(v2393 + 16 * v2392);
    v2407[1].i64[0] = v2398;
    v2394.i64[1] = v2395;
    *v2407 = v2394;
    v2408 = v2382 + 1;
    while (v2408 != v2385)
    {
      ++v2384;
      v2409 = *v2408++;
      v2386 = v2409;
      if (v2409 != -1)
      {
        v2382 = v2408 - 1;
        v2387 = v2384;
        v2388 = a3[12];
        if (v2040)
          goto LABEL_1229;
        goto LABEL_1231;
      }
    }
    v2377 = *(_DWORD *)(a1 + 6348);
LABEL_1223:
    ++v2378;
    ++v2379;
    if (v2378 < v2377)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1243:
  v2413 = *(_DWORD *)(a1 + 7788);
  if (!v2413)
    goto LABEL_1266;
  v2414 = 0;
  v2415 = a4[15];
  while (2)
  {
    v2416 = *(_QWORD *)(a1 + 7864);
    v2417 = *(_DWORD *)(a1 + 7888) * v2414;
    v2418 = (uint64_t *)(v2416 + 8 * v2417);
    v2419 = *(_DWORD *)(a1 + 7784);
    if (v2419 && *v2418 == -1)
    {
      v2420 = 0;
      v2437 = 8 * (v2419 + v2417) - 8 * v2417 - 8;
      v2438 = v2416 + 8 * v2417;
      while (v2437)
      {
        v2418 = (uint64_t *)(v2438 + 8);
        ++v2420;
        v2439 = *(_QWORD *)(v2438 + 8);
        v2437 -= 8;
        v2438 += 8;
        if (v2439 != -1)
          goto LABEL_1250;
      }
      goto LABEL_1246;
    }
    v2420 = 0;
LABEL_1250:
    v2421 = (uint64_t *)(v2416 + 8 * (v2417 + v2419));
    if (v2418 == v2421)
      goto LABEL_1246;
    v2422 = *v2418;
    v2423 = v2420;
    v2424 = a3[12];
    if (!v2040)
    {
LABEL_1254:
      v2426 = *(_DWORD *)(v2424 + 4 * v2423);
      v2425 = *v2415;
      goto LABEL_1255;
    }
LABEL_1252:
    v2425 = *v2415;
    v2426 = *(_DWORD *)(v2424 + 4 * v2423);
    if (*v2415 >= v2426)
    {
LABEL_1255:
      v2432 = *(_QWORD *)(a1 + 7792) + 8 * v2422;
      v2433 = *(_QWORD *)a2 + 8 * (v2426 + *(_DWORD *)(a2 + 16) * v2425);
      v2434 = *(_OWORD *)v2432;
      *(_QWORD *)(v2433 + 16) = *(_QWORD *)(v2432 + 16);
      *(_OWORD *)v2433 = v2434;
      goto LABEL_1256;
    }
    v2427 = (int8x16_t *)(*(_QWORD *)(a1 + 7792) + 8 * v2422);
    v2428 = *(unsigned int *)(a2 + 16);
    v2429 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2425 + (_DWORD)v2428 * v2426));
    v2430 = v2427[1].i64[0];
    v2431 = vextq_s8(*v2427, *v2427, 8uLL).u64[0];
    *v2429 = v2427->i64[0];
    v2429[v2428] = v2431;
    v2429[2 * v2428] = v2430;
LABEL_1256:
    v2435 = v2418 + 1;
    while (v2435 != v2421)
    {
      ++v2420;
      v2436 = *v2435++;
      v2422 = v2436;
      if (v2436 != -1)
      {
        v2418 = v2435 - 1;
        v2423 = v2420;
        v2424 = a3[12];
        if (v2040)
          goto LABEL_1252;
        goto LABEL_1254;
      }
    }
    v2413 = *(_DWORD *)(a1 + 7788);
LABEL_1246:
    ++v2414;
    ++v2415;
    if (v2414 < v2413)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1266:
  v2440 = *(_DWORD *)(a1 + 9228);
  if (!v2440)
    goto LABEL_1289;
  v2441 = 0;
  v2442 = a4[18];
  while (2)
  {
    v2443 = *(_QWORD *)(a1 + 9304);
    v2444 = *(_DWORD *)(a1 + 9328) * v2441;
    v2445 = (uint64_t *)(v2443 + 8 * v2444);
    v2446 = *(_DWORD *)(a1 + 9224);
    if (v2446 && *v2445 == -1)
    {
      v2447 = 0;
      v2473 = 8 * (v2446 + v2444) - 8 * v2444 - 8;
      v2474 = v2443 + 8 * v2444;
      while (v2473)
      {
        v2445 = (uint64_t *)(v2474 + 8);
        ++v2447;
        v2475 = *(_QWORD *)(v2474 + 8);
        v2473 -= 8;
        v2474 += 8;
        if (v2475 != -1)
          goto LABEL_1273;
      }
      goto LABEL_1269;
    }
    v2447 = 0;
LABEL_1273:
    v2448 = (uint64_t *)(v2443 + 8 * (v2444 + v2446));
    if (v2445 == v2448)
      goto LABEL_1269;
    v2449 = *v2445;
    v2450 = v2447;
    v2451 = a3[12];
    if (!v2040)
    {
LABEL_1277:
      v2453 = *(_DWORD *)(v2451 + 4 * v2450);
      v2452 = *v2442;
      goto LABEL_1278;
    }
LABEL_1275:
    v2452 = *v2442;
    v2453 = *(_DWORD *)(v2451 + 4 * v2450);
    if (*v2442 >= v2453)
    {
LABEL_1278:
      v2465 = *(_QWORD *)(a1 + 9232) + 8 * v2449;
      v2455 = *(unsigned int *)(a2 + 16);
      v2456 = *(_QWORD *)a2 + 8 * (v2453 + (_DWORD)v2455 * v2452);
      v2466 = *(_OWORD *)v2465;
      v2467 = *(_OWORD *)(v2465 + 24);
      v2468 = *(_QWORD *)(v2465 + 40);
      v2457 = *(int8x16_t *)(v2465 + 48);
      v2461 = *(_QWORD *)(v2465 + 64);
      v2458 = vextq_s8(v2457, v2457, 8uLL).u64[0];
      *(_QWORD *)(v2456 + 16) = *(_QWORD *)(v2465 + 16);
      *(_OWORD *)v2456 = v2466;
      v2469 = v2456 + 8 * v2455;
      *(_QWORD *)(v2469 + 16) = v2468;
      *(_OWORD *)v2469 = v2467;
      goto LABEL_1279;
    }
    v2454 = *(_QWORD *)(a1 + 9232) + 8 * v2449;
    v2455 = *(unsigned int *)(a2 + 16);
    v2456 = *(_QWORD *)a2 + 8 * (v2452 + (_DWORD)v2455 * v2453);
    v2457.i64[0] = *(_QWORD *)(v2454 + 16);
    v2458 = *(_QWORD *)(v2454 + 40);
    v2459 = *(int64x2_t *)(v2454 + 24);
    v2460 = *(_OWORD *)(v2454 + 48);
    v2461 = *(_QWORD *)(v2454 + 64);
    v2462 = vzip1q_s64(*(int64x2_t *)v2454, v2459);
    v2463 = vzip2q_s64(*(int64x2_t *)v2454, v2459);
    *(_QWORD *)(v2456 + 16) = v2460;
    *(int64x2_t *)v2456 = v2462;
    v2464 = (int64x2_t *)(v2456 + 8 * v2455);
    *v2464 = v2463;
    v2464[1].i64[0] = *((_QWORD *)&v2460 + 1);
LABEL_1279:
    v2470 = (int8x16_t *)(v2456 + 16 * v2455);
    v2470[1].i64[0] = v2461;
    v2457.i64[1] = v2458;
    *v2470 = v2457;
    v2471 = v2445 + 1;
    while (v2471 != v2448)
    {
      ++v2447;
      v2472 = *v2471++;
      v2449 = v2472;
      if (v2472 != -1)
      {
        v2445 = v2471 - 1;
        v2450 = v2447;
        v2451 = a3[12];
        if (v2040)
          goto LABEL_1275;
        goto LABEL_1277;
      }
    }
    v2440 = *(_DWORD *)(a1 + 9228);
LABEL_1269:
    ++v2441;
    ++v2442;
    if (v2441 < v2440)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1289:
  v2476 = *(_DWORD *)(a1 + 10668);
  if (!v2476)
    goto LABEL_1312;
  v2477 = 0;
  v2478 = a4[21];
  while (2)
  {
    v2479 = *(_QWORD *)(a1 + 10744);
    v2480 = *(_DWORD *)(a1 + 10768) * v2477;
    v2481 = (uint64_t *)(v2479 + 8 * v2480);
    v2482 = *(_DWORD *)(a1 + 10664);
    if (v2482 && *v2481 == -1)
    {
      v2483 = 0;
      v2517 = 8 * (v2482 + v2480) - 8 * v2480 - 8;
      v2518 = v2479 + 8 * v2480;
      while (v2517)
      {
        v2481 = (uint64_t *)(v2518 + 8);
        ++v2483;
        v2519 = *(_QWORD *)(v2518 + 8);
        v2517 -= 8;
        v2518 += 8;
        if (v2519 != -1)
          goto LABEL_1296;
      }
      goto LABEL_1292;
    }
    v2483 = 0;
LABEL_1296:
    v2484 = (uint64_t *)(v2479 + 8 * (v2480 + v2482));
    if (v2481 == v2484)
      goto LABEL_1292;
    v2485 = *v2481;
    v2486 = v2483;
    v2487 = a3[12];
    if (!v2040)
    {
LABEL_1300:
      v2489 = *(_DWORD *)(v2487 + 4 * v2486);
      v2488 = *v2478;
      goto LABEL_1301;
    }
LABEL_1298:
    v2488 = *v2478;
    v2489 = *(_DWORD *)(v2487 + 4 * v2486);
    if (*v2478 >= v2489)
    {
LABEL_1301:
      v2502 = *(_QWORD *)(a1 + 10672) + 8 * v2485;
      v2503 = *(unsigned int *)(a2 + 16);
      v2504 = *(_OWORD *)v2502;
      v2505 = *(_QWORD *)a2 + 8 * (v2489 + (_DWORD)v2503 * v2488);
      v2506 = *(_OWORD *)(v2502 + 24);
      v2507 = *(_QWORD *)(v2502 + 40);
      v2508 = *(_OWORD *)(v2502 + 48);
      v2509 = *(_QWORD *)(v2502 + 64);
      v2510 = *(_OWORD *)(v2502 + 72);
      v2511 = *(_QWORD *)(v2502 + 88);
      *(_QWORD *)(v2505 + 16) = *(_QWORD *)(v2502 + 16);
      *(_OWORD *)v2505 = v2504;
      v2512 = v2505 + 8 * v2503;
      *(_QWORD *)(v2512 + 16) = v2507;
      *(_OWORD *)v2512 = v2506;
      v2513 = v2505 + 16 * v2503;
      *(_QWORD *)(v2513 + 16) = v2509;
      *(_OWORD *)v2513 = v2508;
      v2514 = v2505 + 24 * v2503;
      *(_QWORD *)(v2514 + 16) = v2511;
      *(_OWORD *)v2514 = v2510;
      goto LABEL_1302;
    }
    v2490 = *(_QWORD *)(a1 + 10672) + 8 * v2485;
    v2491 = *(unsigned int *)(a2 + 16);
    v2492 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2488 + (_DWORD)v2491 * v2489));
    v2493.i64[0] = *(_QWORD *)(v2490 + 16);
    v2494 = *(int64x2_t *)(v2490 + 24);
    v2495.i64[0] = *(_QWORD *)(v2490 + 64);
    v2496 = *(int64x2_t *)(v2490 + 48);
    v2497 = vzip1q_s64(*(int64x2_t *)v2490, v2494);
    v2498 = vzip1q_s64(v2496, *(int64x2_t *)(v2490 + 72));
    v2499 = vzip2q_s64(*(int64x2_t *)v2490, v2494);
    v2494.i64[0] = vdupq_laneq_s64(v2496, 1).u64[0];
    v2494.i64[1] = *(_QWORD *)(v2490 + 80);
    v2493.i64[1] = *(_QWORD *)(v2490 + 40);
    v2495.i64[1] = *(_QWORD *)(v2490 + 88);
    *v2492 = v2497;
    v2492[1] = v2498;
    v2500 = (int64x2_t *)((char *)v2492 + 8 * v2491);
    *v2500 = v2499;
    v2500[1] = v2494;
    v2501 = &v2492[v2491];
    *v2501 = v2493;
    v2501[1] = v2495;
LABEL_1302:
    v2515 = v2481 + 1;
    while (v2515 != v2484)
    {
      ++v2483;
      v2516 = *v2515++;
      v2485 = v2516;
      if (v2516 != -1)
      {
        v2481 = v2515 - 1;
        v2486 = v2483;
        v2487 = a3[12];
        if (v2040)
          goto LABEL_1298;
        goto LABEL_1300;
      }
    }
    v2476 = *(_DWORD *)(a1 + 10668);
LABEL_1292:
    ++v2477;
    ++v2478;
    if (v2477 < v2476)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1312:
  v2520 = *(_DWORD *)(a1 + 12108);
  if (!v2520)
    goto LABEL_1335;
  v2521 = 0;
  v2522 = a4[24];
  while (2)
  {
    v2523 = *(_QWORD *)(a1 + 12184);
    v2524 = *(_DWORD *)(a1 + 12208) * v2521;
    v2525 = (uint64_t *)(v2523 + 8 * v2524);
    v2526 = *(_DWORD *)(a1 + 12104);
    if (v2526 && *v2525 == -1)
    {
      v2527 = 0;
      v2561 = 8 * (v2526 + v2524) - 8 * v2524 - 8;
      v2562 = v2523 + 8 * v2524;
      while (v2561)
      {
        v2525 = (uint64_t *)(v2562 + 8);
        ++v2527;
        v2563 = *(_QWORD *)(v2562 + 8);
        v2561 -= 8;
        v2562 += 8;
        if (v2563 != -1)
          goto LABEL_1319;
      }
      goto LABEL_1315;
    }
    v2527 = 0;
LABEL_1319:
    v2528 = (uint64_t *)(v2523 + 8 * (v2524 + v2526));
    if (v2525 == v2528)
      goto LABEL_1315;
    v2529 = *v2525;
    v2530 = v2527;
    v2531 = a3[12];
    if (!v2040)
    {
LABEL_1323:
      v2533 = *(_DWORD *)(v2531 + 4 * v2530);
      v2532 = *v2522;
      goto LABEL_1324;
    }
LABEL_1321:
    v2532 = *v2522;
    v2533 = *(_DWORD *)(v2531 + 4 * v2530);
    if (*v2522 >= v2533)
    {
LABEL_1324:
      v2546 = *(_QWORD *)(a1 + 12112) + 8 * v2529;
      v2547 = *(unsigned int *)(a2 + 16);
      v2548 = *(_OWORD *)v2546;
      v2549 = *(_QWORD *)a2 + 8 * (v2533 + (_DWORD)v2547 * v2532);
      v2550 = *(_OWORD *)(v2546 + 24);
      v2551 = *(_QWORD *)(v2546 + 40);
      v2552 = *(_OWORD *)(v2546 + 48);
      v2553 = *(_QWORD *)(v2546 + 64);
      v2554 = *(_OWORD *)(v2546 + 72);
      v2555 = *(_QWORD *)(v2546 + 88);
      *(_QWORD *)(v2549 + 16) = *(_QWORD *)(v2546 + 16);
      *(_OWORD *)v2549 = v2548;
      v2556 = v2549 + 8 * v2547;
      *(_QWORD *)(v2556 + 16) = v2551;
      *(_OWORD *)v2556 = v2550;
      v2557 = v2549 + 16 * v2547;
      *(_QWORD *)(v2557 + 16) = v2553;
      *(_OWORD *)v2557 = v2552;
      v2558 = v2549 + 24 * v2547;
      *(_QWORD *)(v2558 + 16) = v2555;
      *(_OWORD *)v2558 = v2554;
      goto LABEL_1325;
    }
    v2534 = *(_QWORD *)(a1 + 12112) + 8 * v2529;
    v2535 = *(unsigned int *)(a2 + 16);
    v2536 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2532 + (_DWORD)v2535 * v2533));
    v2537.i64[0] = *(_QWORD *)(v2534 + 16);
    v2538 = *(int64x2_t *)(v2534 + 24);
    v2539.i64[0] = *(_QWORD *)(v2534 + 64);
    v2540 = *(int64x2_t *)(v2534 + 48);
    v2541 = vzip1q_s64(*(int64x2_t *)v2534, v2538);
    v2542 = vzip1q_s64(v2540, *(int64x2_t *)(v2534 + 72));
    v2543 = vzip2q_s64(*(int64x2_t *)v2534, v2538);
    v2538.i64[0] = vdupq_laneq_s64(v2540, 1).u64[0];
    v2538.i64[1] = *(_QWORD *)(v2534 + 80);
    v2537.i64[1] = *(_QWORD *)(v2534 + 40);
    v2539.i64[1] = *(_QWORD *)(v2534 + 88);
    *v2536 = v2541;
    v2536[1] = v2542;
    v2544 = (int64x2_t *)((char *)v2536 + 8 * v2535);
    *v2544 = v2543;
    v2544[1] = v2538;
    v2545 = &v2536[v2535];
    *v2545 = v2537;
    v2545[1] = v2539;
LABEL_1325:
    v2559 = v2525 + 1;
    while (v2559 != v2528)
    {
      ++v2527;
      v2560 = *v2559++;
      v2529 = v2560;
      if (v2560 != -1)
      {
        v2525 = v2559 - 1;
        v2530 = v2527;
        v2531 = a3[12];
        if (v2040)
          goto LABEL_1321;
        goto LABEL_1323;
      }
    }
    v2520 = *(_DWORD *)(a1 + 12108);
LABEL_1315:
    ++v2521;
    ++v2522;
    if (v2521 < v2520)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1335:
  v2564 = *(_DWORD *)(a1 + 13548);
  if (!v2564)
    goto LABEL_1358;
  v2565 = 0;
  v2566 = a4[27];
  while (2)
  {
    v2567 = *(_QWORD *)(a1 + 13624);
    v2568 = *(_DWORD *)(a1 + 13648) * v2565;
    v2569 = (uint64_t *)(v2567 + 8 * v2568);
    v2570 = *(_DWORD *)(a1 + 13544);
    if (v2570 && *v2569 == -1)
    {
      v2571 = 0;
      v2597 = 8 * (v2570 + v2568) - 8 * v2568 - 8;
      v2598 = v2567 + 8 * v2568;
      while (v2597)
      {
        v2569 = (uint64_t *)(v2598 + 8);
        ++v2571;
        v2599 = *(_QWORD *)(v2598 + 8);
        v2597 -= 8;
        v2598 += 8;
        if (v2599 != -1)
          goto LABEL_1342;
      }
      goto LABEL_1338;
    }
    v2571 = 0;
LABEL_1342:
    v2572 = (uint64_t *)(v2567 + 8 * (v2568 + v2570));
    if (v2569 == v2572)
      goto LABEL_1338;
    v2573 = *v2569;
    v2574 = v2571;
    v2575 = a3[12];
    if (!v2040)
    {
LABEL_1346:
      v2577 = *(_DWORD *)(v2575 + 4 * v2574);
      v2576 = *v2566;
      goto LABEL_1347;
    }
LABEL_1344:
    v2576 = *v2566;
    v2577 = *(_DWORD *)(v2575 + 4 * v2574);
    if (*v2566 >= v2577)
    {
LABEL_1347:
      v2589 = *(_QWORD *)(a1 + 13552) + 8 * v2573;
      v2579 = *(unsigned int *)(a2 + 16);
      v2580 = *(_QWORD *)a2 + 8 * (v2577 + (_DWORD)v2579 * v2576);
      v2590 = *(_OWORD *)v2589;
      v2591 = *(_OWORD *)(v2589 + 24);
      v2592 = *(_QWORD *)(v2589 + 40);
      v2581 = *(int8x16_t *)(v2589 + 48);
      v2585 = *(_QWORD *)(v2589 + 64);
      v2582 = vextq_s8(v2581, v2581, 8uLL).u64[0];
      *(_QWORD *)(v2580 + 16) = *(_QWORD *)(v2589 + 16);
      *(_OWORD *)v2580 = v2590;
      v2593 = v2580 + 8 * v2579;
      *(_QWORD *)(v2593 + 16) = v2592;
      *(_OWORD *)v2593 = v2591;
      goto LABEL_1348;
    }
    v2578 = *(_QWORD *)(a1 + 13552) + 8 * v2573;
    v2579 = *(unsigned int *)(a2 + 16);
    v2580 = *(_QWORD *)a2 + 8 * (v2576 + (_DWORD)v2579 * v2577);
    v2581.i64[0] = *(_QWORD *)(v2578 + 16);
    v2582 = *(_QWORD *)(v2578 + 40);
    v2583 = *(int64x2_t *)(v2578 + 24);
    v2584 = *(_OWORD *)(v2578 + 48);
    v2585 = *(_QWORD *)(v2578 + 64);
    v2586 = vzip1q_s64(*(int64x2_t *)v2578, v2583);
    v2587 = vzip2q_s64(*(int64x2_t *)v2578, v2583);
    *(_QWORD *)(v2580 + 16) = v2584;
    *(int64x2_t *)v2580 = v2586;
    v2588 = (int64x2_t *)(v2580 + 8 * v2579);
    *v2588 = v2587;
    v2588[1].i64[0] = *((_QWORD *)&v2584 + 1);
LABEL_1348:
    v2594 = (int8x16_t *)(v2580 + 16 * v2579);
    v2594[1].i64[0] = v2585;
    v2581.i64[1] = v2582;
    *v2594 = v2581;
    v2595 = v2569 + 1;
    while (v2595 != v2572)
    {
      ++v2571;
      v2596 = *v2595++;
      v2573 = v2596;
      if (v2596 != -1)
      {
        v2569 = v2595 - 1;
        v2574 = v2571;
        v2575 = a3[12];
        if (v2040)
          goto LABEL_1344;
        goto LABEL_1346;
      }
    }
    v2564 = *(_DWORD *)(a1 + 13548);
LABEL_1338:
    ++v2565;
    ++v2566;
    if (v2565 < v2564)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1358:
  v2600 = *(_DWORD *)(a1 + 444);
  if (!v2600)
    goto LABEL_1381;
  v2601 = 0;
  v2602 = *a4;
  while (2)
  {
    v2603 = *(_QWORD *)(a1 + 520);
    v2604 = *(_DWORD *)(a1 + 544) * v2601;
    v2605 = (uint64_t *)(v2603 + 8 * v2604);
    v2606 = *(_DWORD *)(a1 + 440);
    if (v2606 && *v2605 == -1)
    {
      v2607 = 0;
      v2670 = 8 * (v2606 + v2604) - 8 * v2604 - 8;
      v2671 = v2603 + 8 * v2604;
      while (v2670)
      {
        v2605 = (uint64_t *)(v2671 + 8);
        ++v2607;
        v2672 = *(_QWORD *)(v2671 + 8);
        v2670 -= 8;
        v2671 += 8;
        if (v2672 != -1)
          goto LABEL_1365;
      }
      goto LABEL_1361;
    }
    v2607 = 0;
LABEL_1365:
    v2608 = (uint64_t *)(v2603 + 8 * (v2604 + v2606));
    if (v2605 == v2608)
      goto LABEL_1361;
    v2609 = *v2605;
    v2610 = v2607;
    v2611 = a3[9];
    if (!v2040)
    {
LABEL_1369:
      v2613 = *(_DWORD *)(v2611 + 4 * v2610);
      v2612 = *v2602;
      goto LABEL_1370;
    }
LABEL_1367:
    v2612 = *v2602;
    v2613 = *(_DWORD *)(v2611 + 4 * v2610);
    if (*v2602 >= v2613)
    {
LABEL_1370:
      v2659 = (_OWORD *)(*(_QWORD *)(a1 + 448) + 8 * v2609);
      v2615 = *(unsigned int *)(a2 + 16);
      v2616 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2613 + (_DWORD)v2615 * v2612));
      v2660 = *(int64x2_t *)v2659;
      v2661 = *((int64x2_t *)v2659 + 2);
      v2632 = *((int64x2_t *)v2659 + 3);
      v2662 = *((int64x2_t *)v2659 + 4);
      v2663 = *((int64x2_t *)v2659 + 5);
      v2634 = *((int8x16_t *)v2659 + 6);
      v2635 = *((int8x16_t *)v2659 + 7);
      v2636 = *((int8x16_t *)v2659 + 8);
      v2640 = *((int8x16_t *)v2659 + 9);
      v2637 = vextq_s8(v2636, v2636, 8uLL).u64[0];
      v2638 = vextq_s8(v2635, v2635, 8uLL).u64[0];
      v2639 = vextq_s8(v2634, v2634, 8uLL).u64[0];
      v2641 = *((int8x16_t *)v2659 + 10);
      v2642 = *((int8x16_t *)v2659 + 11);
      v2644 = vextq_s8(v2642, v2642, 8uLL).u64[0];
      v2645 = vextq_s8(v2641, v2641, 8uLL).u64[0];
      v2643 = vextq_s8(v2640, v2640, 8uLL).u64[0];
      v2646 = *((int8x16_t *)v2659 + 12);
      v2647 = *((int8x16_t *)v2659 + 13);
      v2648 = *((int8x16_t *)v2659 + 14);
      v2652 = *((int8x16_t *)v2659 + 15);
      v2649 = vextq_s8(v2648, v2648, 8uLL).u64[0];
      v2650 = vextq_s8(v2647, v2647, 8uLL).u64[0];
      v2651 = vextq_s8(v2646, v2646, 8uLL).u64[0];
      v2653 = *((int8x16_t *)v2659 + 16);
      v2654 = *((int8x16_t *)v2659 + 17);
      v2656 = vextq_s8(v2654, v2654, 8uLL).u64[0];
      v2657 = vextq_s8(v2653, v2653, 8uLL).u64[0];
      v2655 = vextq_s8(v2652, v2652, 8uLL).u64[0];
      v2616[1] = *((int64x2_t *)v2659 + 1);
      v2616[2] = v2661;
      *v2616 = v2660;
      v2658 = (int64x2_t *)((char *)v2616 + 8 * v2615);
      v2658[1] = v2662;
      v2658[2] = v2663;
      goto LABEL_1371;
    }
    v2614 = *(_QWORD *)(a1 + 448) + 8 * v2609;
    v2615 = *(unsigned int *)(a2 + 16);
    v2616 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2612 + (_DWORD)v2615 * v2613));
    v2617 = *(int64x2_t *)(v2614 + 16);
    v2618 = *(int64x2_t *)(v2614 + 64);
    v2619 = *(int64x2_t *)(v2614 + 80);
    v2621 = *(int64x2_t *)(v2614 + 32);
    v2620 = *(int64x2_t *)(v2614 + 48);
    v2622 = *(int64x2_t *)(v2614 + 96);
    v2623 = *(int64x2_t *)(v2614 + 112);
    v2624 = *(int64x2_t *)(v2614 + 128);
    v2625 = *(int64x2_t *)(v2614 + 192);
    v2626 = *(int64x2_t *)(v2614 + 208);
    v2627 = *(int64x2_t *)(v2614 + 224);
    v2628 = vzip1q_s64(*(int64x2_t *)v2614, v2620);
    v2629 = vzip1q_s64(v2622, *(int64x2_t *)(v2614 + 144));
    v2630 = vzip1q_s64(v2625, *(int64x2_t *)(v2614 + 240));
    v2631.i64[0] = vdupq_laneq_s64(v2622, 1).u64[0];
    v2631.i64[1] = *(_QWORD *)(v2614 + 152);
    v2632 = vzip2q_s64(*(int64x2_t *)v2614, v2620);
    v2633.i64[0] = vdupq_laneq_s64(v2625, 1).u64[0];
    v2633.i64[1] = *(_QWORD *)(v2614 + 248);
    v2634 = (int8x16_t)vzip1q_s64(v2617, v2618);
    v2635 = (int8x16_t)vzip1q_s64(v2623, *(int64x2_t *)(v2614 + 160));
    v2636 = (int8x16_t)vzip1q_s64(v2626, *(int64x2_t *)(v2614 + 256));
    v2637 = vextq_s8(v2636, v2636, 8uLL).u64[0];
    v2638 = vextq_s8(v2635, v2635, 8uLL).u64[0];
    v2639 = vextq_s8(v2634, v2634, 8uLL).u64[0];
    v2640 = (int8x16_t)vzip2q_s64(v2617, v2618);
    v2641.i64[0] = vdupq_laneq_s64(v2623, 1).u64[0];
    v2641.i64[1] = *(_QWORD *)(v2614 + 168);
    v2642.i64[0] = vdupq_laneq_s64(v2626, 1).u64[0];
    v2642.i64[1] = *(_QWORD *)(v2614 + 264);
    v2643 = vextq_s8(v2640, v2640, 8uLL).u64[0];
    v2644 = vextq_s8(v2642, v2642, 8uLL).u64[0];
    v2645 = vextq_s8(v2641, v2641, 8uLL).u64[0];
    v2646 = (int8x16_t)vzip1q_s64(v2621, v2619);
    v2647 = (int8x16_t)vzip1q_s64(v2624, *(int64x2_t *)(v2614 + 176));
    v2648 = (int8x16_t)vzip1q_s64(v2627, *(int64x2_t *)(v2614 + 272));
    v2649 = vextq_s8(v2648, v2648, 8uLL).u64[0];
    v2650 = vextq_s8(v2647, v2647, 8uLL).u64[0];
    v2651 = vextq_s8(v2646, v2646, 8uLL).u64[0];
    v2652 = (int8x16_t)vzip2q_s64(v2621, v2619);
    v2653.i64[0] = vdupq_laneq_s64(v2624, 1).u64[0];
    v2653.i64[1] = *(_QWORD *)(v2614 + 184);
    v2654.i64[0] = vdupq_laneq_s64(v2627, 1).u64[0];
    v2654.i64[1] = *(_QWORD *)(v2614 + 280);
    v2655 = vextq_s8(v2652, v2652, 8uLL).u64[0];
    v2656 = vextq_s8(v2654, v2654, 8uLL).u64[0];
    v2657 = vextq_s8(v2653, v2653, 8uLL).u64[0];
    v2616[1] = v2629;
    v2616[2] = v2630;
    *v2616 = v2628;
    v2658 = (int64x2_t *)((char *)v2616 + 8 * v2615);
    v2658[1] = v2631;
    v2658[2] = v2633;
LABEL_1371:
    *v2658 = v2632;
    v2634.i64[1] = v2639;
    v2635.i64[1] = v2638;
    v2664 = (int8x16_t *)&v2616[v2615];
    *v2664 = v2634;
    v2664[1] = v2635;
    v2636.i64[1] = v2637;
    v2664[2] = v2636;
    v2665 = (int8x16_t *)((char *)v2616 + 24 * v2615);
    v2642.i64[1] = v2644;
    v2641.i64[1] = v2645;
    v2640.i64[1] = v2643;
    v2665[1] = v2641;
    v2665[2] = v2642;
    *v2665 = v2640;
    v2666 = (int8x16_t *)&v2616[2 * v2615];
    v2648.i64[1] = v2649;
    v2647.i64[1] = v2650;
    v2646.i64[1] = v2651;
    v2666[1] = v2647;
    v2666[2] = v2648;
    *v2666 = v2646;
    v2667 = (int8x16_t *)((char *)v2616 + 40 * v2615);
    v2654.i64[1] = v2656;
    v2653.i64[1] = v2657;
    v2667[1] = v2653;
    v2667[2] = v2654;
    v2652.i64[1] = v2655;
    v2668 = v2605 + 1;
    *v2667 = v2652;
    while (v2668 != v2608)
    {
      ++v2607;
      v2669 = *v2668++;
      v2609 = v2669;
      if (v2669 != -1)
      {
        v2605 = v2668 - 1;
        v2610 = v2607;
        v2611 = a3[9];
        if (v2040)
          goto LABEL_1367;
        goto LABEL_1369;
      }
    }
    v2600 = *(_DWORD *)(a1 + 444);
LABEL_1361:
    ++v2601;
    ++v2602;
    if (v2601 < v2600)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1381:
  v2673 = *(_DWORD *)(a1 + 1884);
  if (!v2673)
    goto LABEL_1404;
  v2674 = 0;
  v2675 = a4[3];
  while (2)
  {
    v2676 = *(_QWORD *)(a1 + 1960);
    v2677 = *(_DWORD *)(a1 + 1984) * v2674;
    v2678 = (uint64_t *)(v2676 + 8 * v2677);
    v2679 = *(_DWORD *)(a1 + 1880);
    if (v2679 && *v2678 == -1)
    {
      v2680 = 0;
      v2762 = 8 * (v2679 + v2677) - 8 * v2677 - 8;
      v2763 = v2676 + 8 * v2677;
      while (v2762)
      {
        v2678 = (uint64_t *)(v2763 + 8);
        ++v2680;
        v2764 = *(_QWORD *)(v2763 + 8);
        v2762 -= 8;
        v2763 += 8;
        if (v2764 != -1)
          goto LABEL_1388;
      }
      goto LABEL_1384;
    }
    v2680 = 0;
LABEL_1388:
    v2681 = (uint64_t *)(v2676 + 8 * (v2677 + v2679));
    if (v2678 == v2681)
      goto LABEL_1384;
    v2682 = *v2678;
    v2683 = v2680;
    v2684 = a3[9];
    if (!v2040)
    {
LABEL_1392:
      v2686 = *(_DWORD *)(v2684 + 4 * v2683);
      v2685 = *v2675;
      goto LABEL_1393;
    }
LABEL_1390:
    v2685 = *v2675;
    v2686 = *(_DWORD *)(v2684 + 4 * v2683);
    if (*v2675 >= v2686)
    {
LABEL_1393:
      v2723 = (__int128 *)(*(_QWORD *)(a1 + 1888) + 8 * v2682);
      v2724 = *(unsigned int *)(a2 + 16);
      v2725 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2686 + (_DWORD)v2724 * v2685));
      v2726 = *v2723;
      v2727 = v2723[2];
      v2728 = v2723[3];
      v2729 = v2723[4];
      v2730 = v2723[5];
      v2731 = v2723[6];
      v2732 = v2723[7];
      v2733 = v2723[8];
      v2734 = v2723[9];
      v2735 = v2723[10];
      v2736 = v2723[11];
      v2737 = v2723[12];
      v2738 = v2723[13];
      v2739 = v2723[14];
      v2740 = v2723[15];
      v2741 = v2723[16];
      v2742 = v2723[17];
      v2743 = v2723[18];
      v2744 = v2723[19];
      v2745 = v2723[20];
      v2746 = v2723[21];
      v2747 = v2723[22];
      v2748 = v2723[23];
      v2749 = v2723[24];
      v2750 = v2723[25];
      v2751 = v2723[26];
      v2725[1] = v2723[1];
      v2725[2] = v2727;
      *v2725 = v2726;
      v2752 = (_OWORD *)((char *)v2725 + 8 * v2724);
      v2752[1] = v2729;
      v2752[2] = v2730;
      *v2752 = v2728;
      v2753 = &v2725[v2724];
      v2753[1] = v2732;
      v2753[2] = v2733;
      *v2753 = v2731;
      v2754 = (_OWORD *)((char *)v2725 + 24 * v2724);
      v2754[1] = v2735;
      v2754[2] = v2736;
      *v2754 = v2734;
      v2755 = &v2725[2 * v2724];
      v2755[1] = v2738;
      v2755[2] = v2739;
      *v2755 = v2737;
      v2756 = (_OWORD *)((char *)v2725 + 40 * v2724);
      v2756[1] = v2741;
      v2756[2] = v2742;
      *v2756 = v2740;
      v2757 = &v2725[3 * v2724];
      v2757[1] = v2744;
      v2757[2] = v2745;
      *v2757 = v2743;
      v2758 = (_OWORD *)((char *)v2725 + 56 * v2724);
      v2758[1] = v2747;
      v2758[2] = v2748;
      *v2758 = v2746;
      v2759 = &v2725[4 * v2724];
      v2759[1] = v2750;
      v2759[2] = v2751;
      *v2759 = v2749;
      goto LABEL_1394;
    }
    v2687 = *(_QWORD *)(a1 + 1888) + 8 * v2682;
    v2688 = *(unsigned int *)(a2 + 16);
    v2689 = *(_QWORD *)a2 + 8 * (v2685 + (_DWORD)v2688 * v2686);
    v2690 = *(int64x2_t *)(v2687 + 16);
    v2692 = *(int64x2_t *)(v2687 + 64);
    v2691 = *(int64x2_t *)(v2687 + 80);
    v2693 = *(int64x2_t *)(v2687 + 32);
    v2694 = *(int64x2_t *)(v2687 + 48);
    v2696 = *(int64x2_t *)(v2687 + 96);
    v2695 = *(int64x2_t *)(v2687 + 112);
    v2698 = *(int64x2_t *)(v2687 + 160);
    v2697 = *(int64x2_t *)(v2687 + 176);
    v2699 = *(int64x2_t *)(v2687 + 128);
    v2700 = *(int64x2_t *)(v2687 + 144);
    v2702 = *(int64x2_t *)(v2687 + 192);
    v2701 = *(int64x2_t *)(v2687 + 208);
    v2704 = *(int64x2_t *)(v2687 + 256);
    v2703 = *(int64x2_t *)(v2687 + 272);
    v2705 = *(int64x2_t *)(v2687 + 224);
    v2706 = *(int64x2_t *)(v2687 + 240);
    v2708 = *(int64x2_t *)(v2687 + 288);
    v2707 = *(int64x2_t *)(v2687 + 304);
    v2710 = *(int64x2_t *)(v2687 + 352);
    v2709 = *(int64x2_t *)(v2687 + 368);
    v2712 = *(int64x2_t *)(v2687 + 320);
    v2711 = *(int64x2_t *)(v2687 + 336);
    v2714 = *(_OWORD *)(v2687 + 400);
    v2713 = *(_OWORD *)(v2687 + 416);
    v2715 = *(_OWORD *)(v2687 + 384);
    v2716 = vzip1q_s64(*(int64x2_t *)v2687, v2694);
    v2717 = vzip2q_s64(*(int64x2_t *)v2687, v2694);
    *(int64x2_t *)(v2689 + 32) = vzip1q_s64(v2702, v2706);
    *(int64x2_t *)(v2689 + 48) = vzip1q_s64(v2708, v2711);
    *(_QWORD *)(v2689 + 64) = v2715;
    *(int64x2_t *)v2689 = v2716;
    *(int64x2_t *)(v2689 + 16) = vzip1q_s64(v2696, v2700);
    v2718 = (int64x2_t *)(v2689 + 8 * v2688);
    v2718[2] = vzip2q_s64(v2702, v2706);
    v2718[3] = vzip2q_s64(v2708, v2711);
    *v2718 = v2717;
    v2718[1] = vzip2q_s64(v2696, v2700);
    v2718[4].i64[0] = *((_QWORD *)&v2715 + 1);
    v2719 = (int64x2_t *)(v2689 + 16 * v2688);
    v2719[4].i64[0] = v2714;
    v2719[2] = vzip1q_s64(v2701, v2704);
    v2719[3] = vzip1q_s64(v2707, v2710);
    *v2719 = vzip1q_s64(v2690, v2692);
    v2719[1] = vzip1q_s64(v2695, v2698);
    v2720 = (int64x2_t *)(v2689 + 24 * v2688);
    v2720[4].i64[0] = *((_QWORD *)&v2714 + 1);
    v2720[2] = vzip2q_s64(v2701, v2704);
    v2720[3] = vzip2q_s64(v2707, v2710);
    *v2720 = vzip2q_s64(v2690, v2692);
    v2720[1] = vzip2q_s64(v2695, v2698);
    v2721 = (int64x2_t *)(v2689 + 32 * v2688);
    v2721[4].i64[0] = v2713;
    v2721[2] = vzip1q_s64(v2705, v2703);
    v2721[3] = vzip1q_s64(v2712, v2709);
    *v2721 = vzip1q_s64(v2693, v2691);
    v2721[1] = vzip1q_s64(v2699, v2697);
    v2722 = (int64x2_t *)(v2689 + 40 * v2688);
    v2722[4].i64[0] = *((_QWORD *)&v2713 + 1);
    v2722[2] = vzip2q_s64(v2705, v2703);
    v2722[3] = vzip2q_s64(v2712, v2709);
    *v2722 = vzip2q_s64(v2693, v2691);
    v2722[1] = vzip2q_s64(v2699, v2697);
LABEL_1394:
    v2760 = v2678 + 1;
    while (v2760 != v2681)
    {
      ++v2680;
      v2761 = *v2760++;
      v2682 = v2761;
      if (v2761 != -1)
      {
        v2678 = v2760 - 1;
        v2683 = v2680;
        v2684 = a3[9];
        if (v2040)
          goto LABEL_1390;
        goto LABEL_1392;
      }
    }
    v2673 = *(_DWORD *)(a1 + 1884);
LABEL_1384:
    ++v2674;
    ++v2675;
    if (v2674 < v2673)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1404:
  v2765 = *(_DWORD *)(a1 + 3324);
  if (!v2765)
    goto LABEL_1427;
  v2766 = 0;
  v2767 = a4[6];
  while (2)
  {
    v2768 = *(_QWORD *)(a1 + 3400);
    v2769 = *(_DWORD *)(a1 + 3424) * v2766;
    v2770 = (uint64_t *)(v2768 + 8 * v2769);
    v2771 = *(_DWORD *)(a1 + 3320);
    if (v2771 && *v2770 == -1)
    {
      v2772 = 0;
      v2835 = 8 * (v2771 + v2769) - 8 * v2769 - 8;
      v2836 = v2768 + 8 * v2769;
      while (v2835)
      {
        v2770 = (uint64_t *)(v2836 + 8);
        ++v2772;
        v2837 = *(_QWORD *)(v2836 + 8);
        v2835 -= 8;
        v2836 += 8;
        if (v2837 != -1)
          goto LABEL_1411;
      }
      goto LABEL_1407;
    }
    v2772 = 0;
LABEL_1411:
    v2773 = (uint64_t *)(v2768 + 8 * (v2769 + v2771));
    if (v2770 == v2773)
      goto LABEL_1407;
    v2774 = *v2770;
    v2775 = v2772;
    v2776 = a3[9];
    if (!v2040)
    {
LABEL_1415:
      v2778 = *(_DWORD *)(v2776 + 4 * v2775);
      v2777 = *v2767;
      goto LABEL_1416;
    }
LABEL_1413:
    v2777 = *v2767;
    v2778 = *(_DWORD *)(v2776 + 4 * v2775);
    if (*v2767 >= v2778)
    {
LABEL_1416:
      v2824 = (_OWORD *)(*(_QWORD *)(a1 + 3328) + 8 * v2774);
      v2780 = *(unsigned int *)(a2 + 16);
      v2781 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2778 + (_DWORD)v2780 * v2777));
      v2825 = *(int64x2_t *)v2824;
      v2826 = *((int64x2_t *)v2824 + 2);
      v2797 = *((int64x2_t *)v2824 + 3);
      v2827 = *((int64x2_t *)v2824 + 4);
      v2828 = *((int64x2_t *)v2824 + 5);
      v2799 = *((int8x16_t *)v2824 + 6);
      v2800 = *((int8x16_t *)v2824 + 7);
      v2801 = *((int8x16_t *)v2824 + 8);
      v2805 = *((int8x16_t *)v2824 + 9);
      v2802 = vextq_s8(v2801, v2801, 8uLL).u64[0];
      v2803 = vextq_s8(v2800, v2800, 8uLL).u64[0];
      v2804 = vextq_s8(v2799, v2799, 8uLL).u64[0];
      v2806 = *((int8x16_t *)v2824 + 10);
      v2807 = *((int8x16_t *)v2824 + 11);
      v2809 = vextq_s8(v2807, v2807, 8uLL).u64[0];
      v2810 = vextq_s8(v2806, v2806, 8uLL).u64[0];
      v2808 = vextq_s8(v2805, v2805, 8uLL).u64[0];
      v2811 = *((int8x16_t *)v2824 + 12);
      v2812 = *((int8x16_t *)v2824 + 13);
      v2813 = *((int8x16_t *)v2824 + 14);
      v2817 = *((int8x16_t *)v2824 + 15);
      v2814 = vextq_s8(v2813, v2813, 8uLL).u64[0];
      v2815 = vextq_s8(v2812, v2812, 8uLL).u64[0];
      v2816 = vextq_s8(v2811, v2811, 8uLL).u64[0];
      v2818 = *((int8x16_t *)v2824 + 16);
      v2819 = *((int8x16_t *)v2824 + 17);
      v2821 = vextq_s8(v2819, v2819, 8uLL).u64[0];
      v2822 = vextq_s8(v2818, v2818, 8uLL).u64[0];
      v2820 = vextq_s8(v2817, v2817, 8uLL).u64[0];
      v2781[1] = *((int64x2_t *)v2824 + 1);
      v2781[2] = v2826;
      *v2781 = v2825;
      v2823 = (int64x2_t *)((char *)v2781 + 8 * v2780);
      v2823[1] = v2827;
      v2823[2] = v2828;
      goto LABEL_1417;
    }
    v2779 = *(_QWORD *)(a1 + 3328) + 8 * v2774;
    v2780 = *(unsigned int *)(a2 + 16);
    v2781 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2777 + (_DWORD)v2780 * v2778));
    v2782 = *(int64x2_t *)(v2779 + 16);
    v2783 = *(int64x2_t *)(v2779 + 64);
    v2784 = *(int64x2_t *)(v2779 + 80);
    v2786 = *(int64x2_t *)(v2779 + 32);
    v2785 = *(int64x2_t *)(v2779 + 48);
    v2787 = *(int64x2_t *)(v2779 + 96);
    v2788 = *(int64x2_t *)(v2779 + 112);
    v2789 = *(int64x2_t *)(v2779 + 128);
    v2790 = *(int64x2_t *)(v2779 + 192);
    v2791 = *(int64x2_t *)(v2779 + 208);
    v2792 = *(int64x2_t *)(v2779 + 224);
    v2793 = vzip1q_s64(*(int64x2_t *)v2779, v2785);
    v2794 = vzip1q_s64(v2787, *(int64x2_t *)(v2779 + 144));
    v2795 = vzip1q_s64(v2790, *(int64x2_t *)(v2779 + 240));
    v2796.i64[0] = vdupq_laneq_s64(v2787, 1).u64[0];
    v2796.i64[1] = *(_QWORD *)(v2779 + 152);
    v2797 = vzip2q_s64(*(int64x2_t *)v2779, v2785);
    v2798.i64[0] = vdupq_laneq_s64(v2790, 1).u64[0];
    v2798.i64[1] = *(_QWORD *)(v2779 + 248);
    v2799 = (int8x16_t)vzip1q_s64(v2782, v2783);
    v2800 = (int8x16_t)vzip1q_s64(v2788, *(int64x2_t *)(v2779 + 160));
    v2801 = (int8x16_t)vzip1q_s64(v2791, *(int64x2_t *)(v2779 + 256));
    v2802 = vextq_s8(v2801, v2801, 8uLL).u64[0];
    v2803 = vextq_s8(v2800, v2800, 8uLL).u64[0];
    v2804 = vextq_s8(v2799, v2799, 8uLL).u64[0];
    v2805 = (int8x16_t)vzip2q_s64(v2782, v2783);
    v2806.i64[0] = vdupq_laneq_s64(v2788, 1).u64[0];
    v2806.i64[1] = *(_QWORD *)(v2779 + 168);
    v2807.i64[0] = vdupq_laneq_s64(v2791, 1).u64[0];
    v2807.i64[1] = *(_QWORD *)(v2779 + 264);
    v2808 = vextq_s8(v2805, v2805, 8uLL).u64[0];
    v2809 = vextq_s8(v2807, v2807, 8uLL).u64[0];
    v2810 = vextq_s8(v2806, v2806, 8uLL).u64[0];
    v2811 = (int8x16_t)vzip1q_s64(v2786, v2784);
    v2812 = (int8x16_t)vzip1q_s64(v2789, *(int64x2_t *)(v2779 + 176));
    v2813 = (int8x16_t)vzip1q_s64(v2792, *(int64x2_t *)(v2779 + 272));
    v2814 = vextq_s8(v2813, v2813, 8uLL).u64[0];
    v2815 = vextq_s8(v2812, v2812, 8uLL).u64[0];
    v2816 = vextq_s8(v2811, v2811, 8uLL).u64[0];
    v2817 = (int8x16_t)vzip2q_s64(v2786, v2784);
    v2818.i64[0] = vdupq_laneq_s64(v2789, 1).u64[0];
    v2818.i64[1] = *(_QWORD *)(v2779 + 184);
    v2819.i64[0] = vdupq_laneq_s64(v2792, 1).u64[0];
    v2819.i64[1] = *(_QWORD *)(v2779 + 280);
    v2820 = vextq_s8(v2817, v2817, 8uLL).u64[0];
    v2821 = vextq_s8(v2819, v2819, 8uLL).u64[0];
    v2822 = vextq_s8(v2818, v2818, 8uLL).u64[0];
    v2781[1] = v2794;
    v2781[2] = v2795;
    *v2781 = v2793;
    v2823 = (int64x2_t *)((char *)v2781 + 8 * v2780);
    v2823[1] = v2796;
    v2823[2] = v2798;
LABEL_1417:
    *v2823 = v2797;
    v2799.i64[1] = v2804;
    v2800.i64[1] = v2803;
    v2829 = (int8x16_t *)&v2781[v2780];
    *v2829 = v2799;
    v2829[1] = v2800;
    v2801.i64[1] = v2802;
    v2829[2] = v2801;
    v2830 = (int8x16_t *)((char *)v2781 + 24 * v2780);
    v2807.i64[1] = v2809;
    v2806.i64[1] = v2810;
    v2805.i64[1] = v2808;
    v2830[1] = v2806;
    v2830[2] = v2807;
    *v2830 = v2805;
    v2831 = (int8x16_t *)&v2781[2 * v2780];
    v2813.i64[1] = v2814;
    v2812.i64[1] = v2815;
    v2811.i64[1] = v2816;
    v2831[1] = v2812;
    v2831[2] = v2813;
    *v2831 = v2811;
    v2832 = (int8x16_t *)((char *)v2781 + 40 * v2780);
    v2819.i64[1] = v2821;
    v2818.i64[1] = v2822;
    v2832[1] = v2818;
    v2832[2] = v2819;
    v2817.i64[1] = v2820;
    v2833 = v2770 + 1;
    *v2832 = v2817;
    while (v2833 != v2773)
    {
      ++v2772;
      v2834 = *v2833++;
      v2774 = v2834;
      if (v2834 != -1)
      {
        v2770 = v2833 - 1;
        v2775 = v2772;
        v2776 = a3[9];
        if (v2040)
          goto LABEL_1413;
        goto LABEL_1415;
      }
    }
    v2765 = *(_DWORD *)(a1 + 3324);
LABEL_1407:
    ++v2766;
    ++v2767;
    if (v2766 < v2765)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1427:
  v2838 = *(_DWORD *)(a1 + 4764);
  if (!v2838)
    goto LABEL_1450;
  v2839 = 0;
  v2840 = a4[9];
  while (2)
  {
    v2841 = *(_QWORD *)(a1 + 4840);
    v2842 = *(_DWORD *)(a1 + 4864) * v2839;
    v2843 = (uint64_t *)(v2841 + 8 * v2842);
    v2844 = *(_DWORD *)(a1 + 4760);
    if (v2844 && *v2843 == -1)
    {
      v2845 = 0;
      v2908 = 8 * (v2844 + v2842) - 8 * v2842 - 8;
      v2909 = v2841 + 8 * v2842;
      while (v2908)
      {
        v2843 = (uint64_t *)(v2909 + 8);
        ++v2845;
        v2910 = *(_QWORD *)(v2909 + 8);
        v2908 -= 8;
        v2909 += 8;
        if (v2910 != -1)
          goto LABEL_1434;
      }
      goto LABEL_1430;
    }
    v2845 = 0;
LABEL_1434:
    v2846 = (uint64_t *)(v2841 + 8 * (v2842 + v2844));
    if (v2843 == v2846)
      goto LABEL_1430;
    v2847 = *v2843;
    v2848 = v2845;
    v2849 = a3[9];
    if (!v2040)
    {
LABEL_1438:
      v2851 = *(_DWORD *)(v2849 + 4 * v2848);
      v2850 = *v2840;
      goto LABEL_1439;
    }
LABEL_1436:
    v2850 = *v2840;
    v2851 = *(_DWORD *)(v2849 + 4 * v2848);
    if (*v2840 >= v2851)
    {
LABEL_1439:
      v2897 = (_OWORD *)(*(_QWORD *)(a1 + 4768) + 8 * v2847);
      v2853 = *(unsigned int *)(a2 + 16);
      v2854 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2851 + (_DWORD)v2853 * v2850));
      v2898 = *(int64x2_t *)v2897;
      v2899 = *((int64x2_t *)v2897 + 2);
      v2870 = *((int64x2_t *)v2897 + 3);
      v2900 = *((int64x2_t *)v2897 + 4);
      v2901 = *((int64x2_t *)v2897 + 5);
      v2872 = *((int8x16_t *)v2897 + 6);
      v2873 = *((int8x16_t *)v2897 + 7);
      v2874 = *((int8x16_t *)v2897 + 8);
      v2878 = *((int8x16_t *)v2897 + 9);
      v2875 = vextq_s8(v2874, v2874, 8uLL).u64[0];
      v2876 = vextq_s8(v2873, v2873, 8uLL).u64[0];
      v2877 = vextq_s8(v2872, v2872, 8uLL).u64[0];
      v2879 = *((int8x16_t *)v2897 + 10);
      v2880 = *((int8x16_t *)v2897 + 11);
      v2882 = vextq_s8(v2880, v2880, 8uLL).u64[0];
      v2883 = vextq_s8(v2879, v2879, 8uLL).u64[0];
      v2881 = vextq_s8(v2878, v2878, 8uLL).u64[0];
      v2884 = *((int8x16_t *)v2897 + 12);
      v2885 = *((int8x16_t *)v2897 + 13);
      v2886 = *((int8x16_t *)v2897 + 14);
      v2890 = *((int8x16_t *)v2897 + 15);
      v2887 = vextq_s8(v2886, v2886, 8uLL).u64[0];
      v2888 = vextq_s8(v2885, v2885, 8uLL).u64[0];
      v2889 = vextq_s8(v2884, v2884, 8uLL).u64[0];
      v2891 = *((int8x16_t *)v2897 + 16);
      v2892 = *((int8x16_t *)v2897 + 17);
      v2894 = vextq_s8(v2892, v2892, 8uLL).u64[0];
      v2895 = vextq_s8(v2891, v2891, 8uLL).u64[0];
      v2893 = vextq_s8(v2890, v2890, 8uLL).u64[0];
      v2854[1] = *((int64x2_t *)v2897 + 1);
      v2854[2] = v2899;
      *v2854 = v2898;
      v2896 = (int64x2_t *)((char *)v2854 + 8 * v2853);
      v2896[1] = v2900;
      v2896[2] = v2901;
      goto LABEL_1440;
    }
    v2852 = *(_QWORD *)(a1 + 4768) + 8 * v2847;
    v2853 = *(unsigned int *)(a2 + 16);
    v2854 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v2850 + (_DWORD)v2853 * v2851));
    v2855 = *(int64x2_t *)(v2852 + 16);
    v2856 = *(int64x2_t *)(v2852 + 64);
    v2857 = *(int64x2_t *)(v2852 + 80);
    v2859 = *(int64x2_t *)(v2852 + 32);
    v2858 = *(int64x2_t *)(v2852 + 48);
    v2860 = *(int64x2_t *)(v2852 + 96);
    v2861 = *(int64x2_t *)(v2852 + 112);
    v2862 = *(int64x2_t *)(v2852 + 128);
    v2863 = *(int64x2_t *)(v2852 + 192);
    v2864 = *(int64x2_t *)(v2852 + 208);
    v2865 = *(int64x2_t *)(v2852 + 224);
    v2866 = vzip1q_s64(*(int64x2_t *)v2852, v2858);
    v2867 = vzip1q_s64(v2860, *(int64x2_t *)(v2852 + 144));
    v2868 = vzip1q_s64(v2863, *(int64x2_t *)(v2852 + 240));
    v2869.i64[0] = vdupq_laneq_s64(v2860, 1).u64[0];
    v2869.i64[1] = *(_QWORD *)(v2852 + 152);
    v2870 = vzip2q_s64(*(int64x2_t *)v2852, v2858);
    v2871.i64[0] = vdupq_laneq_s64(v2863, 1).u64[0];
    v2871.i64[1] = *(_QWORD *)(v2852 + 248);
    v2872 = (int8x16_t)vzip1q_s64(v2855, v2856);
    v2873 = (int8x16_t)vzip1q_s64(v2861, *(int64x2_t *)(v2852 + 160));
    v2874 = (int8x16_t)vzip1q_s64(v2864, *(int64x2_t *)(v2852 + 256));
    v2875 = vextq_s8(v2874, v2874, 8uLL).u64[0];
    v2876 = vextq_s8(v2873, v2873, 8uLL).u64[0];
    v2877 = vextq_s8(v2872, v2872, 8uLL).u64[0];
    v2878 = (int8x16_t)vzip2q_s64(v2855, v2856);
    v2879.i64[0] = vdupq_laneq_s64(v2861, 1).u64[0];
    v2879.i64[1] = *(_QWORD *)(v2852 + 168);
    v2880.i64[0] = vdupq_laneq_s64(v2864, 1).u64[0];
    v2880.i64[1] = *(_QWORD *)(v2852 + 264);
    v2881 = vextq_s8(v2878, v2878, 8uLL).u64[0];
    v2882 = vextq_s8(v2880, v2880, 8uLL).u64[0];
    v2883 = vextq_s8(v2879, v2879, 8uLL).u64[0];
    v2884 = (int8x16_t)vzip1q_s64(v2859, v2857);
    v2885 = (int8x16_t)vzip1q_s64(v2862, *(int64x2_t *)(v2852 + 176));
    v2886 = (int8x16_t)vzip1q_s64(v2865, *(int64x2_t *)(v2852 + 272));
    v2887 = vextq_s8(v2886, v2886, 8uLL).u64[0];
    v2888 = vextq_s8(v2885, v2885, 8uLL).u64[0];
    v2889 = vextq_s8(v2884, v2884, 8uLL).u64[0];
    v2890 = (int8x16_t)vzip2q_s64(v2859, v2857);
    v2891.i64[0] = vdupq_laneq_s64(v2862, 1).u64[0];
    v2891.i64[1] = *(_QWORD *)(v2852 + 184);
    v2892.i64[0] = vdupq_laneq_s64(v2865, 1).u64[0];
    v2892.i64[1] = *(_QWORD *)(v2852 + 280);
    v2893 = vextq_s8(v2890, v2890, 8uLL).u64[0];
    v2894 = vextq_s8(v2892, v2892, 8uLL).u64[0];
    v2895 = vextq_s8(v2891, v2891, 8uLL).u64[0];
    v2854[1] = v2867;
    v2854[2] = v2868;
    *v2854 = v2866;
    v2896 = (int64x2_t *)((char *)v2854 + 8 * v2853);
    v2896[1] = v2869;
    v2896[2] = v2871;
LABEL_1440:
    *v2896 = v2870;
    v2872.i64[1] = v2877;
    v2873.i64[1] = v2876;
    v2902 = (int8x16_t *)&v2854[v2853];
    *v2902 = v2872;
    v2902[1] = v2873;
    v2874.i64[1] = v2875;
    v2902[2] = v2874;
    v2903 = (int8x16_t *)((char *)v2854 + 24 * v2853);
    v2880.i64[1] = v2882;
    v2879.i64[1] = v2883;
    v2878.i64[1] = v2881;
    v2903[1] = v2879;
    v2903[2] = v2880;
    *v2903 = v2878;
    v2904 = (int8x16_t *)&v2854[2 * v2853];
    v2886.i64[1] = v2887;
    v2885.i64[1] = v2888;
    v2884.i64[1] = v2889;
    v2904[1] = v2885;
    v2904[2] = v2886;
    *v2904 = v2884;
    v2905 = (int8x16_t *)((char *)v2854 + 40 * v2853);
    v2892.i64[1] = v2894;
    v2891.i64[1] = v2895;
    v2905[1] = v2891;
    v2905[2] = v2892;
    v2890.i64[1] = v2893;
    v2906 = v2843 + 1;
    *v2905 = v2890;
    while (v2906 != v2846)
    {
      ++v2845;
      v2907 = *v2906++;
      v2847 = v2907;
      if (v2907 != -1)
      {
        v2843 = v2906 - 1;
        v2848 = v2845;
        v2849 = a3[9];
        if (v2040)
          goto LABEL_1436;
        goto LABEL_1438;
      }
    }
    v2838 = *(_DWORD *)(a1 + 4764);
LABEL_1430:
    ++v2839;
    ++v2840;
    if (v2839 < v2838)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1450:
  v2911 = *(_DWORD *)(a1 + 6204);
  if (!v2911)
    goto LABEL_1473;
  v2912 = 0;
  v2913 = a4[12];
  while (2)
  {
    v2914 = *(_QWORD *)(a1 + 6280);
    v2915 = *(_DWORD *)(a1 + 6304) * v2912;
    v2916 = (uint64_t *)(v2914 + 8 * v2915);
    v2917 = *(_DWORD *)(a1 + 6200);
    if (v2917 && *v2916 == -1)
    {
      v2918 = 0;
      v2958 = 8 * (v2917 + v2915) - 8 * v2915 - 8;
      v2959 = v2914 + 8 * v2915;
      while (v2958)
      {
        v2916 = (uint64_t *)(v2959 + 8);
        ++v2918;
        v2960 = *(_QWORD *)(v2959 + 8);
        v2958 -= 8;
        v2959 += 8;
        if (v2960 != -1)
          goto LABEL_1457;
      }
      goto LABEL_1453;
    }
    v2918 = 0;
LABEL_1457:
    v2919 = (uint64_t *)(v2914 + 8 * (v2915 + v2917));
    if (v2916 == v2919)
      goto LABEL_1453;
    v2920 = *v2916;
    v2921 = v2918;
    v2922 = a3[9];
    if (!v2040)
    {
LABEL_1461:
      v2924 = *(_DWORD *)(v2922 + 4 * v2921);
      v2923 = *v2913;
      goto LABEL_1462;
    }
LABEL_1459:
    v2923 = *v2913;
    v2924 = *(_DWORD *)(v2922 + 4 * v2921);
    if (*v2913 >= v2924)
    {
LABEL_1462:
      v2943 = (__int128 *)(*(_QWORD *)(a1 + 6208) + 8 * v2920);
      v2944 = *(unsigned int *)(a2 + 16);
      v2945 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2924 + (_DWORD)v2944 * v2923));
      v2946 = *v2943;
      v2947 = v2943[2];
      v2948 = v2943[3];
      v2949 = v2943[4];
      v2950 = v2943[5];
      v2951 = v2943[6];
      v2952 = v2943[7];
      v2953 = v2943[8];
      v2945[1] = v2943[1];
      v2945[2] = v2947;
      *v2945 = v2946;
      v2954 = (_OWORD *)((char *)v2945 + 8 * v2944);
      v2954[1] = v2949;
      v2954[2] = v2950;
      *v2954 = v2948;
      v2955 = &v2945[v2944];
      v2955[1] = v2952;
      v2955[2] = v2953;
      *v2955 = v2951;
      goto LABEL_1463;
    }
    v2925 = *(_QWORD *)(a1 + 6208) + 8 * v2920;
    v2926 = *(unsigned int *)(a2 + 16);
    v2927 = *(_QWORD *)a2 + 8 * (v2923 + (_DWORD)v2926 * v2924);
    v2928 = *(int64x2_t *)(v2925 + 16);
    v2930 = *(int64x2_t *)(v2925 + 64);
    v2929 = *(int64x2_t *)(v2925 + 80);
    v2931 = *(int64x2_t *)(v2925 + 32);
    v2932 = *(int64x2_t *)(v2925 + 48);
    v2934 = *(_OWORD *)(v2925 + 112);
    v2933 = *(_OWORD *)(v2925 + 128);
    v2935 = *(_OWORD *)(v2925 + 96);
    v2936 = vzip1q_s64(*(int64x2_t *)v2925, v2932);
    v2937 = vzip2q_s64(*(int64x2_t *)v2925, v2932);
    *(_QWORD *)(v2927 + 16) = v2935;
    *(int64x2_t *)v2927 = v2936;
    v2938 = (int64x2_t *)(v2927 + 8 * v2926);
    *v2938 = v2937;
    v2938[1].i64[0] = *((_QWORD *)&v2935 + 1);
    v2939 = (int64x2_t *)(v2927 + 16 * v2926);
    v2939[1].i64[0] = v2934;
    *v2939 = vzip1q_s64(v2928, v2930);
    v2940 = (int64x2_t *)(v2927 + 24 * v2926);
    v2940[1].i64[0] = *((_QWORD *)&v2934 + 1);
    *v2940 = vzip2q_s64(v2928, v2930);
    v2941 = (int64x2_t *)(v2927 + 32 * v2926);
    v2941[1].i64[0] = v2933;
    *v2941 = vzip1q_s64(v2931, v2929);
    v2942 = (int64x2_t *)(v2927 + 40 * v2926);
    v2942[1].i64[0] = *((_QWORD *)&v2933 + 1);
    *v2942 = vzip2q_s64(v2931, v2929);
LABEL_1463:
    v2956 = v2916 + 1;
    while (v2956 != v2919)
    {
      ++v2918;
      v2957 = *v2956++;
      v2920 = v2957;
      if (v2957 != -1)
      {
        v2916 = v2956 - 1;
        v2921 = v2918;
        v2922 = a3[9];
        if (v2040)
          goto LABEL_1459;
        goto LABEL_1461;
      }
    }
    v2911 = *(_DWORD *)(a1 + 6204);
LABEL_1453:
    ++v2912;
    ++v2913;
    if (v2912 < v2911)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1473:
  v2961 = *(_DWORD *)(a1 + 7644);
  if (!v2961)
    goto LABEL_1496;
  v2962 = 0;
  v2963 = a4[15];
  while (2)
  {
    v2964 = *(_QWORD *)(a1 + 7720);
    v2965 = *(_DWORD *)(a1 + 7744) * v2962;
    v2966 = (uint64_t *)(v2964 + 8 * v2965);
    v2967 = *(_DWORD *)(a1 + 7640);
    if (v2967 && *v2966 == -1)
    {
      v2968 = 0;
      v2987 = 8 * (v2967 + v2965) - 8 * v2965 - 8;
      v2988 = v2964 + 8 * v2965;
      while (v2987)
      {
        v2966 = (uint64_t *)(v2988 + 8);
        ++v2968;
        v2989 = *(_QWORD *)(v2988 + 8);
        v2987 -= 8;
        v2988 += 8;
        if (v2989 != -1)
          goto LABEL_1480;
      }
      goto LABEL_1476;
    }
    v2968 = 0;
LABEL_1480:
    v2969 = (uint64_t *)(v2964 + 8 * (v2965 + v2967));
    if (v2966 == v2969)
      goto LABEL_1476;
    v2970 = *v2966;
    v2971 = v2968;
    v2972 = a3[9];
    if (!v2040)
    {
LABEL_1484:
      v2974 = *(_DWORD *)(v2972 + 4 * v2971);
      v2973 = *v2963;
      goto LABEL_1485;
    }
LABEL_1482:
    v2973 = *v2963;
    v2974 = *(_DWORD *)(v2972 + 4 * v2971);
    if (*v2963 >= v2974)
    {
LABEL_1485:
      v2981 = (__int128 *)(*(_QWORD *)(a1 + 7648) + 8 * v2970);
      v2982 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v2974 + *(_DWORD *)(a2 + 16) * v2973));
      v2983 = v2981[2];
      v2984 = *v2981;
      v2982[1] = v2981[1];
      v2982[2] = v2983;
      *v2982 = v2984;
      goto LABEL_1486;
    }
    v2975 = *(_QWORD *)(a1 + 7648) + 8 * v2970;
    v2976 = *(unsigned int *)(a2 + 16);
    v2977 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v2973 + (_DWORD)v2976 * v2974));
    v2979 = *(int8x16_t *)(v2975 + 16);
    v2978 = *(int8x16_t *)(v2975 + 32);
    v2980 = vextq_s8(*(int8x16_t *)v2975, *(int8x16_t *)v2975, 8uLL).u64[0];
    *v2977 = *(_QWORD *)v2975;
    v2977[v2976] = v2980;
    v2977[2 * v2976] = v2979.i64[0];
    v2977[3 * v2976] = vextq_s8(v2979, v2979, 8uLL).u64[0];
    v2977[4 * v2976] = v2978.i64[0];
    v2977[5 * v2976] = vextq_s8(v2978, v2978, 8uLL).u64[0];
LABEL_1486:
    v2985 = v2966 + 1;
    while (v2985 != v2969)
    {
      ++v2968;
      v2986 = *v2985++;
      v2970 = v2986;
      if (v2986 != -1)
      {
        v2966 = v2985 - 1;
        v2971 = v2968;
        v2972 = a3[9];
        if (v2040)
          goto LABEL_1482;
        goto LABEL_1484;
      }
    }
    v2961 = *(_DWORD *)(a1 + 7644);
LABEL_1476:
    ++v2962;
    ++v2963;
    if (v2962 < v2961)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1496:
  v2990 = *(_DWORD *)(a1 + 9084);
  if (!v2990)
    goto LABEL_1519;
  v2991 = 0;
  v2992 = a4[18];
  while (2)
  {
    v2993 = *(_QWORD *)(a1 + 9160);
    v2994 = *(_DWORD *)(a1 + 9184) * v2991;
    v2995 = (uint64_t *)(v2993 + 8 * v2994);
    v2996 = *(_DWORD *)(a1 + 9080);
    if (v2996 && *v2995 == -1)
    {
      v2997 = 0;
      v3037 = 8 * (v2996 + v2994) - 8 * v2994 - 8;
      v3038 = v2993 + 8 * v2994;
      while (v3037)
      {
        v2995 = (uint64_t *)(v3038 + 8);
        ++v2997;
        v3039 = *(_QWORD *)(v3038 + 8);
        v3037 -= 8;
        v3038 += 8;
        if (v3039 != -1)
          goto LABEL_1503;
      }
      goto LABEL_1499;
    }
    v2997 = 0;
LABEL_1503:
    v2998 = (uint64_t *)(v2993 + 8 * (v2994 + v2996));
    if (v2995 == v2998)
      goto LABEL_1499;
    v2999 = *v2995;
    v3000 = v2997;
    v3001 = a3[9];
    if (!v2040)
    {
LABEL_1507:
      v3003 = *(_DWORD *)(v3001 + 4 * v3000);
      v3002 = *v2992;
      goto LABEL_1508;
    }
LABEL_1505:
    v3002 = *v2992;
    v3003 = *(_DWORD *)(v3001 + 4 * v3000);
    if (*v2992 >= v3003)
    {
LABEL_1508:
      v3022 = (__int128 *)(*(_QWORD *)(a1 + 9088) + 8 * v2999);
      v3023 = *(unsigned int *)(a2 + 16);
      v3024 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3003 + (_DWORD)v3023 * v3002));
      v3025 = *v3022;
      v3026 = v3022[2];
      v3027 = v3022[3];
      v3028 = v3022[4];
      v3029 = v3022[5];
      v3030 = v3022[6];
      v3031 = v3022[7];
      v3032 = v3022[8];
      v3024[1] = v3022[1];
      v3024[2] = v3026;
      *v3024 = v3025;
      v3033 = (_OWORD *)((char *)v3024 + 8 * v3023);
      v3033[1] = v3028;
      v3033[2] = v3029;
      *v3033 = v3027;
      v3034 = &v3024[v3023];
      v3034[1] = v3031;
      v3034[2] = v3032;
      *v3034 = v3030;
      goto LABEL_1509;
    }
    v3004 = *(_QWORD *)(a1 + 9088) + 8 * v2999;
    v3005 = *(unsigned int *)(a2 + 16);
    v3006 = *(_QWORD *)a2 + 8 * (v3002 + (_DWORD)v3005 * v3003);
    v3007 = *(int64x2_t *)(v3004 + 16);
    v3009 = *(int64x2_t *)(v3004 + 64);
    v3008 = *(int64x2_t *)(v3004 + 80);
    v3010 = *(int64x2_t *)(v3004 + 32);
    v3011 = *(int64x2_t *)(v3004 + 48);
    v3013 = *(_OWORD *)(v3004 + 112);
    v3012 = *(_OWORD *)(v3004 + 128);
    v3014 = *(_OWORD *)(v3004 + 96);
    v3015 = vzip1q_s64(*(int64x2_t *)v3004, v3011);
    v3016 = vzip2q_s64(*(int64x2_t *)v3004, v3011);
    *(_QWORD *)(v3006 + 16) = v3014;
    *(int64x2_t *)v3006 = v3015;
    v3017 = (int64x2_t *)(v3006 + 8 * v3005);
    *v3017 = v3016;
    v3017[1].i64[0] = *((_QWORD *)&v3014 + 1);
    v3018 = (int64x2_t *)(v3006 + 16 * v3005);
    v3018[1].i64[0] = v3013;
    *v3018 = vzip1q_s64(v3007, v3009);
    v3019 = (int64x2_t *)(v3006 + 24 * v3005);
    v3019[1].i64[0] = *((_QWORD *)&v3013 + 1);
    *v3019 = vzip2q_s64(v3007, v3009);
    v3020 = (int64x2_t *)(v3006 + 32 * v3005);
    v3020[1].i64[0] = v3012;
    *v3020 = vzip1q_s64(v3010, v3008);
    v3021 = (int64x2_t *)(v3006 + 40 * v3005);
    v3021[1].i64[0] = *((_QWORD *)&v3012 + 1);
    *v3021 = vzip2q_s64(v3010, v3008);
LABEL_1509:
    v3035 = v2995 + 1;
    while (v3035 != v2998)
    {
      ++v2997;
      v3036 = *v3035++;
      v2999 = v3036;
      if (v3036 != -1)
      {
        v2995 = v3035 - 1;
        v3000 = v2997;
        v3001 = a3[9];
        if (v2040)
          goto LABEL_1505;
        goto LABEL_1507;
      }
    }
    v2990 = *(_DWORD *)(a1 + 9084);
LABEL_1499:
    ++v2991;
    ++v2992;
    if (v2991 < v2990)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1519:
  v3040 = *(_DWORD *)(a1 + 10524);
  if (!v3040)
    goto LABEL_1542;
  v3041 = 0;
  v3042 = a4[21];
  while (2)
  {
    v3043 = *(_QWORD *)(a1 + 10600);
    v3044 = *(_DWORD *)(a1 + 10624) * v3041;
    v3045 = (uint64_t *)(v3043 + 8 * v3044);
    v3046 = *(_DWORD *)(a1 + 10520);
    if (v3046 && *v3045 == -1)
    {
      v3047 = 0;
      v3093 = 8 * (v3046 + v3044) - 8 * v3044 - 8;
      v3094 = v3043 + 8 * v3044;
      while (v3093)
      {
        v3045 = (uint64_t *)(v3094 + 8);
        ++v3047;
        v3095 = *(_QWORD *)(v3094 + 8);
        v3093 -= 8;
        v3094 += 8;
        if (v3095 != -1)
          goto LABEL_1526;
      }
      goto LABEL_1522;
    }
    v3047 = 0;
LABEL_1526:
    v3048 = (uint64_t *)(v3043 + 8 * (v3044 + v3046));
    if (v3045 == v3048)
      goto LABEL_1522;
    v3049 = *v3045;
    v3050 = v3047;
    v3051 = a3[9];
    if (!v2040)
    {
LABEL_1530:
      v3053 = *(_DWORD *)(v3051 + 4 * v3050);
      v3052 = *v3042;
      goto LABEL_1531;
    }
LABEL_1528:
    v3052 = *v3042;
    v3053 = *(_DWORD *)(v3051 + 4 * v3050);
    if (*v3042 >= v3053)
    {
LABEL_1531:
      v3074 = (__int128 *)(*(_QWORD *)(a1 + 10528) + 8 * v3049);
      v3075 = *(unsigned int *)(a2 + 16);
      v3076 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3053 + (_DWORD)v3075 * v3052));
      v3077 = *v3074;
      v3078 = v3074[2];
      v3079 = v3074[3];
      v3080 = v3074[4];
      v3081 = v3074[5];
      v3082 = v3074[6];
      v3083 = v3074[7];
      v3084 = v3074[8];
      v3085 = v3074[9];
      v3086 = v3074[10];
      v3087 = v3074[11];
      v3076[1] = v3074[1];
      v3076[2] = v3078;
      *v3076 = v3077;
      v3088 = (_OWORD *)((char *)v3076 + 8 * v3075);
      v3088[1] = v3080;
      v3088[2] = v3081;
      *v3088 = v3079;
      v3089 = &v3076[v3075];
      v3089[1] = v3083;
      v3089[2] = v3084;
      *v3089 = v3082;
      v3090 = (_OWORD *)((char *)v3076 + 24 * v3075);
      v3090[1] = v3086;
      v3090[2] = v3087;
      *v3090 = v3085;
      goto LABEL_1532;
    }
    v3054 = *(_QWORD *)(a1 + 10528) + 8 * v3049;
    v3055 = *(unsigned int *)(a2 + 16);
    v3056 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3052 + (_DWORD)v3055 * v3053));
    v3057 = *(int64x2_t *)(v3054 + 16);
    v3059 = *(int64x2_t *)(v3054 + 64);
    v3058 = *(int64x2_t *)(v3054 + 80);
    v3060 = *(int64x2_t *)(v3054 + 32);
    v3061 = *(int64x2_t *)(v3054 + 48);
    v3063 = *(int64x2_t *)(v3054 + 96);
    v3062 = *(int64x2_t *)(v3054 + 112);
    v3065 = *(int64x2_t *)(v3054 + 160);
    v3064 = *(int64x2_t *)(v3054 + 176);
    v3066 = *(int64x2_t *)(v3054 + 128);
    v3067 = *(int64x2_t *)(v3054 + 144);
    v3068 = vzip2q_s64(*(int64x2_t *)v3054, v3061);
    *v3056 = vzip1q_s64(*(int64x2_t *)v3054, v3061);
    v3056[1] = vzip1q_s64(v3063, v3067);
    v3069 = (int64x2_t *)((char *)v3056 + 8 * v3055);
    *v3069 = v3068;
    v3069[1] = vzip2q_s64(v3063, v3067);
    v3070 = &v3056[v3055];
    *v3070 = vzip1q_s64(v3057, v3059);
    v3070[1] = vzip1q_s64(v3062, v3065);
    v3071 = (int64x2_t *)((char *)v3056 + 24 * v3055);
    *v3071 = vzip2q_s64(v3057, v3059);
    v3071[1] = vzip2q_s64(v3062, v3065);
    v3072 = &v3056[2 * v3055];
    *v3072 = vzip1q_s64(v3060, v3058);
    v3072[1] = vzip1q_s64(v3066, v3064);
    v3073 = (int64x2_t *)((char *)v3056 + 40 * v3055);
    *v3073 = vzip2q_s64(v3060, v3058);
    v3073[1] = vzip2q_s64(v3066, v3064);
LABEL_1532:
    v3091 = v3045 + 1;
    while (v3091 != v3048)
    {
      ++v3047;
      v3092 = *v3091++;
      v3049 = v3092;
      if (v3092 != -1)
      {
        v3045 = v3091 - 1;
        v3050 = v3047;
        v3051 = a3[9];
        if (v2040)
          goto LABEL_1528;
        goto LABEL_1530;
      }
    }
    v3040 = *(_DWORD *)(a1 + 10524);
LABEL_1522:
    ++v3041;
    ++v3042;
    if (v3041 < v3040)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1542:
  v3096 = *(_DWORD *)(a1 + 11964);
  if (!v3096)
    goto LABEL_1565;
  v3097 = 0;
  v3098 = a4[24];
  while (2)
  {
    v3099 = *(_QWORD *)(a1 + 12040);
    v3100 = *(_DWORD *)(a1 + 12064) * v3097;
    v3101 = (uint64_t *)(v3099 + 8 * v3100);
    v3102 = *(_DWORD *)(a1 + 11960);
    if (v3102 && *v3101 == -1)
    {
      v3103 = 0;
      v3149 = 8 * (v3102 + v3100) - 8 * v3100 - 8;
      v3150 = v3099 + 8 * v3100;
      while (v3149)
      {
        v3101 = (uint64_t *)(v3150 + 8);
        ++v3103;
        v3151 = *(_QWORD *)(v3150 + 8);
        v3149 -= 8;
        v3150 += 8;
        if (v3151 != -1)
          goto LABEL_1549;
      }
      goto LABEL_1545;
    }
    v3103 = 0;
LABEL_1549:
    v3104 = (uint64_t *)(v3099 + 8 * (v3100 + v3102));
    if (v3101 == v3104)
      goto LABEL_1545;
    v3105 = *v3101;
    v3106 = v3103;
    v3107 = a3[9];
    if (!v2040)
    {
LABEL_1553:
      v3109 = *(_DWORD *)(v3107 + 4 * v3106);
      v3108 = *v3098;
      goto LABEL_1554;
    }
LABEL_1551:
    v3108 = *v3098;
    v3109 = *(_DWORD *)(v3107 + 4 * v3106);
    if (*v3098 >= v3109)
    {
LABEL_1554:
      v3130 = (__int128 *)(*(_QWORD *)(a1 + 11968) + 8 * v3105);
      v3131 = *(unsigned int *)(a2 + 16);
      v3132 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3109 + (_DWORD)v3131 * v3108));
      v3133 = *v3130;
      v3134 = v3130[2];
      v3135 = v3130[3];
      v3136 = v3130[4];
      v3137 = v3130[5];
      v3138 = v3130[6];
      v3139 = v3130[7];
      v3140 = v3130[8];
      v3141 = v3130[9];
      v3142 = v3130[10];
      v3143 = v3130[11];
      v3132[1] = v3130[1];
      v3132[2] = v3134;
      *v3132 = v3133;
      v3144 = (_OWORD *)((char *)v3132 + 8 * v3131);
      v3144[1] = v3136;
      v3144[2] = v3137;
      *v3144 = v3135;
      v3145 = &v3132[v3131];
      v3145[1] = v3139;
      v3145[2] = v3140;
      *v3145 = v3138;
      v3146 = (_OWORD *)((char *)v3132 + 24 * v3131);
      v3146[1] = v3142;
      v3146[2] = v3143;
      *v3146 = v3141;
      goto LABEL_1555;
    }
    v3110 = *(_QWORD *)(a1 + 11968) + 8 * v3105;
    v3111 = *(unsigned int *)(a2 + 16);
    v3112 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3108 + (_DWORD)v3111 * v3109));
    v3113 = *(int64x2_t *)(v3110 + 16);
    v3115 = *(int64x2_t *)(v3110 + 64);
    v3114 = *(int64x2_t *)(v3110 + 80);
    v3116 = *(int64x2_t *)(v3110 + 32);
    v3117 = *(int64x2_t *)(v3110 + 48);
    v3119 = *(int64x2_t *)(v3110 + 96);
    v3118 = *(int64x2_t *)(v3110 + 112);
    v3121 = *(int64x2_t *)(v3110 + 160);
    v3120 = *(int64x2_t *)(v3110 + 176);
    v3122 = *(int64x2_t *)(v3110 + 128);
    v3123 = *(int64x2_t *)(v3110 + 144);
    v3124 = vzip2q_s64(*(int64x2_t *)v3110, v3117);
    *v3112 = vzip1q_s64(*(int64x2_t *)v3110, v3117);
    v3112[1] = vzip1q_s64(v3119, v3123);
    v3125 = (int64x2_t *)((char *)v3112 + 8 * v3111);
    *v3125 = v3124;
    v3125[1] = vzip2q_s64(v3119, v3123);
    v3126 = &v3112[v3111];
    *v3126 = vzip1q_s64(v3113, v3115);
    v3126[1] = vzip1q_s64(v3118, v3121);
    v3127 = (int64x2_t *)((char *)v3112 + 24 * v3111);
    *v3127 = vzip2q_s64(v3113, v3115);
    v3127[1] = vzip2q_s64(v3118, v3121);
    v3128 = &v3112[2 * v3111];
    *v3128 = vzip1q_s64(v3116, v3114);
    v3128[1] = vzip1q_s64(v3122, v3120);
    v3129 = (int64x2_t *)((char *)v3112 + 40 * v3111);
    *v3129 = vzip2q_s64(v3116, v3114);
    v3129[1] = vzip2q_s64(v3122, v3120);
LABEL_1555:
    v3147 = v3101 + 1;
    while (v3147 != v3104)
    {
      ++v3103;
      v3148 = *v3147++;
      v3105 = v3148;
      if (v3148 != -1)
      {
        v3101 = v3147 - 1;
        v3106 = v3103;
        v3107 = a3[9];
        if (v2040)
          goto LABEL_1551;
        goto LABEL_1553;
      }
    }
    v3096 = *(_DWORD *)(a1 + 11964);
LABEL_1545:
    ++v3097;
    ++v3098;
    if (v3097 < v3096)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1565:
  v3152 = *(_DWORD *)(a1 + 13404);
  if (!v3152)
    goto LABEL_1588;
  v3153 = 0;
  v3154 = a4[27];
  while (2)
  {
    v3155 = *(_QWORD *)(a1 + 13480);
    v3156 = *(_DWORD *)(a1 + 13504) * v3153;
    v3157 = (uint64_t *)(v3155 + 8 * v3156);
    v3158 = *(_DWORD *)(a1 + 13400);
    if (v3158 && *v3157 == -1)
    {
      v3159 = 0;
      v3199 = 8 * (v3158 + v3156) - 8 * v3156 - 8;
      v3200 = v3155 + 8 * v3156;
      while (v3199)
      {
        v3157 = (uint64_t *)(v3200 + 8);
        ++v3159;
        v3201 = *(_QWORD *)(v3200 + 8);
        v3199 -= 8;
        v3200 += 8;
        if (v3201 != -1)
          goto LABEL_1572;
      }
      goto LABEL_1568;
    }
    v3159 = 0;
LABEL_1572:
    v3160 = (uint64_t *)(v3155 + 8 * (v3156 + v3158));
    if (v3157 == v3160)
      goto LABEL_1568;
    v3161 = *v3157;
    v3162 = v3159;
    v3163 = a3[9];
    if (!v2040)
    {
LABEL_1576:
      v3165 = *(_DWORD *)(v3163 + 4 * v3162);
      v3164 = *v3154;
      goto LABEL_1577;
    }
LABEL_1574:
    v3164 = *v3154;
    v3165 = *(_DWORD *)(v3163 + 4 * v3162);
    if (*v3154 >= v3165)
    {
LABEL_1577:
      v3184 = (__int128 *)(*(_QWORD *)(a1 + 13408) + 8 * v3161);
      v3185 = *(unsigned int *)(a2 + 16);
      v3186 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3165 + (_DWORD)v3185 * v3164));
      v3187 = *v3184;
      v3188 = v3184[2];
      v3189 = v3184[3];
      v3190 = v3184[4];
      v3191 = v3184[5];
      v3192 = v3184[6];
      v3193 = v3184[7];
      v3194 = v3184[8];
      v3186[1] = v3184[1];
      v3186[2] = v3188;
      *v3186 = v3187;
      v3195 = (_OWORD *)((char *)v3186 + 8 * v3185);
      v3195[1] = v3190;
      v3195[2] = v3191;
      *v3195 = v3189;
      v3196 = &v3186[v3185];
      v3196[1] = v3193;
      v3196[2] = v3194;
      *v3196 = v3192;
      goto LABEL_1578;
    }
    v3166 = *(_QWORD *)(a1 + 13408) + 8 * v3161;
    v3167 = *(unsigned int *)(a2 + 16);
    v3168 = *(_QWORD *)a2 + 8 * (v3164 + (_DWORD)v3167 * v3165);
    v3169 = *(int64x2_t *)(v3166 + 16);
    v3171 = *(int64x2_t *)(v3166 + 64);
    v3170 = *(int64x2_t *)(v3166 + 80);
    v3172 = *(int64x2_t *)(v3166 + 32);
    v3173 = *(int64x2_t *)(v3166 + 48);
    v3175 = *(_OWORD *)(v3166 + 112);
    v3174 = *(_OWORD *)(v3166 + 128);
    v3176 = *(_OWORD *)(v3166 + 96);
    v3177 = vzip1q_s64(*(int64x2_t *)v3166, v3173);
    v3178 = vzip2q_s64(*(int64x2_t *)v3166, v3173);
    *(_QWORD *)(v3168 + 16) = v3176;
    *(int64x2_t *)v3168 = v3177;
    v3179 = (int64x2_t *)(v3168 + 8 * v3167);
    *v3179 = v3178;
    v3179[1].i64[0] = *((_QWORD *)&v3176 + 1);
    v3180 = (int64x2_t *)(v3168 + 16 * v3167);
    v3180[1].i64[0] = v3175;
    *v3180 = vzip1q_s64(v3169, v3171);
    v3181 = (int64x2_t *)(v3168 + 24 * v3167);
    v3181[1].i64[0] = *((_QWORD *)&v3175 + 1);
    *v3181 = vzip2q_s64(v3169, v3171);
    v3182 = (int64x2_t *)(v3168 + 32 * v3167);
    v3182[1].i64[0] = v3174;
    *v3182 = vzip1q_s64(v3172, v3170);
    v3183 = (int64x2_t *)(v3168 + 40 * v3167);
    v3183[1].i64[0] = *((_QWORD *)&v3174 + 1);
    *v3183 = vzip2q_s64(v3172, v3170);
LABEL_1578:
    v3197 = v3157 + 1;
    while (v3197 != v3160)
    {
      ++v3159;
      v3198 = *v3197++;
      v3161 = v3198;
      if (v3198 != -1)
      {
        v3157 = v3197 - 1;
        v3162 = v3159;
        v3163 = a3[9];
        if (v2040)
          goto LABEL_1574;
        goto LABEL_1576;
      }
    }
    v3152 = *(_DWORD *)(a1 + 13404);
LABEL_1568:
    ++v3153;
    ++v3154;
    if (v3153 < v3152)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1588:
  v3202 = *(_DWORD *)(a1 + 300);
  if (!v3202)
    goto LABEL_1611;
  v3203 = 0;
  v3204 = *a4;
  while (2)
  {
    v3205 = *(_QWORD *)(a1 + 376);
    v3206 = *(_DWORD *)(a1 + 400) * v3203;
    v3207 = (uint64_t *)(v3205 + 8 * v3206);
    v3208 = *(_DWORD *)(a1 + 296);
    if (v3208 && *v3207 == -1)
    {
      v3209 = 0;
      v3272 = 8 * (v3208 + v3206) - 8 * v3206 - 8;
      v3273 = v3205 + 8 * v3206;
      while (v3272)
      {
        v3207 = (uint64_t *)(v3273 + 8);
        ++v3209;
        v3274 = *(_QWORD *)(v3273 + 8);
        v3272 -= 8;
        v3273 += 8;
        if (v3274 != -1)
          goto LABEL_1595;
      }
      goto LABEL_1591;
    }
    v3209 = 0;
LABEL_1595:
    v3210 = (uint64_t *)(v3205 + 8 * (v3206 + v3208));
    if (v3207 == v3210)
      goto LABEL_1591;
    v3211 = *v3207;
    v3212 = v3209;
    v3213 = a3[6];
    if (!v2040)
    {
LABEL_1599:
      v3215 = *(_DWORD *)(v3213 + 4 * v3212);
      v3214 = *v3204;
      goto LABEL_1600;
    }
LABEL_1597:
    v3214 = *v3204;
    v3215 = *(_DWORD *)(v3213 + 4 * v3212);
    if (*v3204 >= v3215)
    {
LABEL_1600:
      v3261 = (_OWORD *)(*(_QWORD *)(a1 + 304) + 8 * v3211);
      v3217 = *(unsigned int *)(a2 + 16);
      v3218 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3215 + (_DWORD)v3217 * v3214));
      v3262 = *(int64x2_t *)v3261;
      v3263 = *((int64x2_t *)v3261 + 2);
      v3234 = *((int64x2_t *)v3261 + 3);
      v3264 = *((int64x2_t *)v3261 + 4);
      v3265 = *((int64x2_t *)v3261 + 5);
      v3236 = *((int8x16_t *)v3261 + 6);
      v3237 = *((int8x16_t *)v3261 + 7);
      v3238 = *((int8x16_t *)v3261 + 8);
      v3242 = *((int8x16_t *)v3261 + 9);
      v3239 = vextq_s8(v3238, v3238, 8uLL).u64[0];
      v3240 = vextq_s8(v3237, v3237, 8uLL).u64[0];
      v3241 = vextq_s8(v3236, v3236, 8uLL).u64[0];
      v3243 = *((int8x16_t *)v3261 + 10);
      v3244 = *((int8x16_t *)v3261 + 11);
      v3246 = vextq_s8(v3244, v3244, 8uLL).u64[0];
      v3247 = vextq_s8(v3243, v3243, 8uLL).u64[0];
      v3245 = vextq_s8(v3242, v3242, 8uLL).u64[0];
      v3248 = *((int8x16_t *)v3261 + 12);
      v3249 = *((int8x16_t *)v3261 + 13);
      v3250 = *((int8x16_t *)v3261 + 14);
      v3254 = *((int8x16_t *)v3261 + 15);
      v3251 = vextq_s8(v3250, v3250, 8uLL).u64[0];
      v3252 = vextq_s8(v3249, v3249, 8uLL).u64[0];
      v3253 = vextq_s8(v3248, v3248, 8uLL).u64[0];
      v3255 = *((int8x16_t *)v3261 + 16);
      v3256 = *((int8x16_t *)v3261 + 17);
      v3258 = vextq_s8(v3256, v3256, 8uLL).u64[0];
      v3259 = vextq_s8(v3255, v3255, 8uLL).u64[0];
      v3257 = vextq_s8(v3254, v3254, 8uLL).u64[0];
      v3218[1] = *((int64x2_t *)v3261 + 1);
      v3218[2] = v3263;
      *v3218 = v3262;
      v3260 = (int64x2_t *)((char *)v3218 + 8 * v3217);
      v3260[1] = v3264;
      v3260[2] = v3265;
      goto LABEL_1601;
    }
    v3216 = *(_QWORD *)(a1 + 304) + 8 * v3211;
    v3217 = *(unsigned int *)(a2 + 16);
    v3218 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3214 + (_DWORD)v3217 * v3215));
    v3219 = *(int64x2_t *)(v3216 + 16);
    v3220 = *(int64x2_t *)(v3216 + 64);
    v3221 = *(int64x2_t *)(v3216 + 80);
    v3223 = *(int64x2_t *)(v3216 + 32);
    v3222 = *(int64x2_t *)(v3216 + 48);
    v3224 = *(int64x2_t *)(v3216 + 96);
    v3225 = *(int64x2_t *)(v3216 + 112);
    v3226 = *(int64x2_t *)(v3216 + 128);
    v3227 = *(int64x2_t *)(v3216 + 192);
    v3228 = *(int64x2_t *)(v3216 + 208);
    v3229 = *(int64x2_t *)(v3216 + 224);
    v3230 = vzip1q_s64(*(int64x2_t *)v3216, v3222);
    v3231 = vzip1q_s64(v3224, *(int64x2_t *)(v3216 + 144));
    v3232 = vzip1q_s64(v3227, *(int64x2_t *)(v3216 + 240));
    v3233.i64[0] = vdupq_laneq_s64(v3224, 1).u64[0];
    v3233.i64[1] = *(_QWORD *)(v3216 + 152);
    v3234 = vzip2q_s64(*(int64x2_t *)v3216, v3222);
    v3235.i64[0] = vdupq_laneq_s64(v3227, 1).u64[0];
    v3235.i64[1] = *(_QWORD *)(v3216 + 248);
    v3236 = (int8x16_t)vzip1q_s64(v3219, v3220);
    v3237 = (int8x16_t)vzip1q_s64(v3225, *(int64x2_t *)(v3216 + 160));
    v3238 = (int8x16_t)vzip1q_s64(v3228, *(int64x2_t *)(v3216 + 256));
    v3239 = vextq_s8(v3238, v3238, 8uLL).u64[0];
    v3240 = vextq_s8(v3237, v3237, 8uLL).u64[0];
    v3241 = vextq_s8(v3236, v3236, 8uLL).u64[0];
    v3242 = (int8x16_t)vzip2q_s64(v3219, v3220);
    v3243.i64[0] = vdupq_laneq_s64(v3225, 1).u64[0];
    v3243.i64[1] = *(_QWORD *)(v3216 + 168);
    v3244.i64[0] = vdupq_laneq_s64(v3228, 1).u64[0];
    v3244.i64[1] = *(_QWORD *)(v3216 + 264);
    v3245 = vextq_s8(v3242, v3242, 8uLL).u64[0];
    v3246 = vextq_s8(v3244, v3244, 8uLL).u64[0];
    v3247 = vextq_s8(v3243, v3243, 8uLL).u64[0];
    v3248 = (int8x16_t)vzip1q_s64(v3223, v3221);
    v3249 = (int8x16_t)vzip1q_s64(v3226, *(int64x2_t *)(v3216 + 176));
    v3250 = (int8x16_t)vzip1q_s64(v3229, *(int64x2_t *)(v3216 + 272));
    v3251 = vextq_s8(v3250, v3250, 8uLL).u64[0];
    v3252 = vextq_s8(v3249, v3249, 8uLL).u64[0];
    v3253 = vextq_s8(v3248, v3248, 8uLL).u64[0];
    v3254 = (int8x16_t)vzip2q_s64(v3223, v3221);
    v3255.i64[0] = vdupq_laneq_s64(v3226, 1).u64[0];
    v3255.i64[1] = *(_QWORD *)(v3216 + 184);
    v3256.i64[0] = vdupq_laneq_s64(v3229, 1).u64[0];
    v3256.i64[1] = *(_QWORD *)(v3216 + 280);
    v3257 = vextq_s8(v3254, v3254, 8uLL).u64[0];
    v3258 = vextq_s8(v3256, v3256, 8uLL).u64[0];
    v3259 = vextq_s8(v3255, v3255, 8uLL).u64[0];
    v3218[1] = v3231;
    v3218[2] = v3232;
    *v3218 = v3230;
    v3260 = (int64x2_t *)((char *)v3218 + 8 * v3217);
    v3260[1] = v3233;
    v3260[2] = v3235;
LABEL_1601:
    *v3260 = v3234;
    v3236.i64[1] = v3241;
    v3237.i64[1] = v3240;
    v3266 = (int8x16_t *)&v3218[v3217];
    *v3266 = v3236;
    v3266[1] = v3237;
    v3238.i64[1] = v3239;
    v3266[2] = v3238;
    v3267 = (int8x16_t *)((char *)v3218 + 24 * v3217);
    v3244.i64[1] = v3246;
    v3243.i64[1] = v3247;
    v3242.i64[1] = v3245;
    v3267[1] = v3243;
    v3267[2] = v3244;
    *v3267 = v3242;
    v3268 = (int8x16_t *)&v3218[2 * v3217];
    v3250.i64[1] = v3251;
    v3249.i64[1] = v3252;
    v3248.i64[1] = v3253;
    v3268[1] = v3249;
    v3268[2] = v3250;
    *v3268 = v3248;
    v3269 = (int8x16_t *)((char *)v3218 + 40 * v3217);
    v3256.i64[1] = v3258;
    v3255.i64[1] = v3259;
    v3269[1] = v3255;
    v3269[2] = v3256;
    v3254.i64[1] = v3257;
    v3270 = v3207 + 1;
    *v3269 = v3254;
    while (v3270 != v3210)
    {
      ++v3209;
      v3271 = *v3270++;
      v3211 = v3271;
      if (v3271 != -1)
      {
        v3207 = v3270 - 1;
        v3212 = v3209;
        v3213 = a3[6];
        if (v2040)
          goto LABEL_1597;
        goto LABEL_1599;
      }
    }
    v3202 = *(_DWORD *)(a1 + 300);
LABEL_1591:
    ++v3203;
    ++v3204;
    if (v3203 < v3202)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1611:
  v3275 = *(_DWORD *)(a1 + 1740);
  if (!v3275)
    goto LABEL_1634;
  v3276 = 0;
  v3277 = a4[3];
  while (2)
  {
    v3278 = *(_QWORD *)(a1 + 1816);
    v3279 = *(_DWORD *)(a1 + 1840) * v3276;
    v3280 = (uint64_t *)(v3278 + 8 * v3279);
    v3281 = *(_DWORD *)(a1 + 1736);
    if (v3281 && *v3280 == -1)
    {
      v3282 = 0;
      v3364 = 8 * (v3281 + v3279) - 8 * v3279 - 8;
      v3365 = v3278 + 8 * v3279;
      while (v3364)
      {
        v3280 = (uint64_t *)(v3365 + 8);
        ++v3282;
        v3366 = *(_QWORD *)(v3365 + 8);
        v3364 -= 8;
        v3365 += 8;
        if (v3366 != -1)
          goto LABEL_1618;
      }
      goto LABEL_1614;
    }
    v3282 = 0;
LABEL_1618:
    v3283 = (uint64_t *)(v3278 + 8 * (v3279 + v3281));
    if (v3280 == v3283)
      goto LABEL_1614;
    v3284 = *v3280;
    v3285 = v3282;
    v3286 = a3[6];
    if (!v2040)
    {
LABEL_1622:
      v3288 = *(_DWORD *)(v3286 + 4 * v3285);
      v3287 = *v3277;
      goto LABEL_1623;
    }
LABEL_1620:
    v3287 = *v3277;
    v3288 = *(_DWORD *)(v3286 + 4 * v3285);
    if (*v3277 >= v3288)
    {
LABEL_1623:
      v3325 = (__int128 *)(*(_QWORD *)(a1 + 1744) + 8 * v3284);
      v3326 = *(unsigned int *)(a2 + 16);
      v3327 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3288 + (_DWORD)v3326 * v3287));
      v3328 = *v3325;
      v3329 = v3325[2];
      v3330 = v3325[3];
      v3331 = v3325[4];
      v3332 = v3325[5];
      v3333 = v3325[6];
      v3334 = v3325[7];
      v3335 = v3325[8];
      v3336 = v3325[9];
      v3337 = v3325[10];
      v3338 = v3325[11];
      v3339 = v3325[12];
      v3340 = v3325[13];
      v3341 = v3325[14];
      v3342 = v3325[15];
      v3343 = v3325[16];
      v3344 = v3325[17];
      v3345 = v3325[18];
      v3346 = v3325[19];
      v3347 = v3325[20];
      v3348 = v3325[21];
      v3349 = v3325[22];
      v3350 = v3325[23];
      v3351 = v3325[24];
      v3352 = v3325[25];
      v3353 = v3325[26];
      v3327[1] = v3325[1];
      v3327[2] = v3329;
      *v3327 = v3328;
      v3354 = (_OWORD *)((char *)v3327 + 8 * v3326);
      v3354[1] = v3331;
      v3354[2] = v3332;
      *v3354 = v3330;
      v3355 = &v3327[v3326];
      v3355[1] = v3334;
      v3355[2] = v3335;
      *v3355 = v3333;
      v3356 = (_OWORD *)((char *)v3327 + 24 * v3326);
      v3356[1] = v3337;
      v3356[2] = v3338;
      *v3356 = v3336;
      v3357 = &v3327[2 * v3326];
      v3357[1] = v3340;
      v3357[2] = v3341;
      *v3357 = v3339;
      v3358 = (_OWORD *)((char *)v3327 + 40 * v3326);
      v3358[1] = v3343;
      v3358[2] = v3344;
      *v3358 = v3342;
      v3359 = &v3327[3 * v3326];
      v3359[1] = v3346;
      v3359[2] = v3347;
      *v3359 = v3345;
      v3360 = (_OWORD *)((char *)v3327 + 56 * v3326);
      v3360[1] = v3349;
      v3360[2] = v3350;
      *v3360 = v3348;
      v3361 = &v3327[4 * v3326];
      v3361[1] = v3352;
      v3361[2] = v3353;
      *v3361 = v3351;
      goto LABEL_1624;
    }
    v3289 = *(_QWORD *)(a1 + 1744) + 8 * v3284;
    v3290 = *(unsigned int *)(a2 + 16);
    v3291 = *(_QWORD *)a2 + 8 * (v3287 + (_DWORD)v3290 * v3288);
    v3292 = *(int64x2_t *)(v3289 + 16);
    v3294 = *(int64x2_t *)(v3289 + 64);
    v3293 = *(int64x2_t *)(v3289 + 80);
    v3295 = *(int64x2_t *)(v3289 + 32);
    v3296 = *(int64x2_t *)(v3289 + 48);
    v3298 = *(int64x2_t *)(v3289 + 96);
    v3297 = *(int64x2_t *)(v3289 + 112);
    v3300 = *(int64x2_t *)(v3289 + 160);
    v3299 = *(int64x2_t *)(v3289 + 176);
    v3301 = *(int64x2_t *)(v3289 + 128);
    v3302 = *(int64x2_t *)(v3289 + 144);
    v3304 = *(int64x2_t *)(v3289 + 192);
    v3303 = *(int64x2_t *)(v3289 + 208);
    v3306 = *(int64x2_t *)(v3289 + 256);
    v3305 = *(int64x2_t *)(v3289 + 272);
    v3307 = *(int64x2_t *)(v3289 + 224);
    v3308 = *(int64x2_t *)(v3289 + 240);
    v3310 = *(int64x2_t *)(v3289 + 288);
    v3309 = *(int64x2_t *)(v3289 + 304);
    v3312 = *(int64x2_t *)(v3289 + 352);
    v3311 = *(int64x2_t *)(v3289 + 368);
    v3314 = *(int64x2_t *)(v3289 + 320);
    v3313 = *(int64x2_t *)(v3289 + 336);
    v3316 = *(_OWORD *)(v3289 + 400);
    v3315 = *(_OWORD *)(v3289 + 416);
    v3317 = *(_OWORD *)(v3289 + 384);
    v3318 = vzip1q_s64(*(int64x2_t *)v3289, v3296);
    v3319 = vzip2q_s64(*(int64x2_t *)v3289, v3296);
    *(int64x2_t *)(v3291 + 32) = vzip1q_s64(v3304, v3308);
    *(int64x2_t *)(v3291 + 48) = vzip1q_s64(v3310, v3313);
    *(_QWORD *)(v3291 + 64) = v3317;
    *(int64x2_t *)v3291 = v3318;
    *(int64x2_t *)(v3291 + 16) = vzip1q_s64(v3298, v3302);
    v3320 = (int64x2_t *)(v3291 + 8 * v3290);
    v3320[2] = vzip2q_s64(v3304, v3308);
    v3320[3] = vzip2q_s64(v3310, v3313);
    *v3320 = v3319;
    v3320[1] = vzip2q_s64(v3298, v3302);
    v3320[4].i64[0] = *((_QWORD *)&v3317 + 1);
    v3321 = (int64x2_t *)(v3291 + 16 * v3290);
    v3321[4].i64[0] = v3316;
    v3321[2] = vzip1q_s64(v3303, v3306);
    v3321[3] = vzip1q_s64(v3309, v3312);
    *v3321 = vzip1q_s64(v3292, v3294);
    v3321[1] = vzip1q_s64(v3297, v3300);
    v3322 = (int64x2_t *)(v3291 + 24 * v3290);
    v3322[4].i64[0] = *((_QWORD *)&v3316 + 1);
    v3322[2] = vzip2q_s64(v3303, v3306);
    v3322[3] = vzip2q_s64(v3309, v3312);
    *v3322 = vzip2q_s64(v3292, v3294);
    v3322[1] = vzip2q_s64(v3297, v3300);
    v3323 = (int64x2_t *)(v3291 + 32 * v3290);
    v3323[4].i64[0] = v3315;
    v3323[2] = vzip1q_s64(v3307, v3305);
    v3323[3] = vzip1q_s64(v3314, v3311);
    *v3323 = vzip1q_s64(v3295, v3293);
    v3323[1] = vzip1q_s64(v3301, v3299);
    v3324 = (int64x2_t *)(v3291 + 40 * v3290);
    v3324[4].i64[0] = *((_QWORD *)&v3315 + 1);
    v3324[2] = vzip2q_s64(v3307, v3305);
    v3324[3] = vzip2q_s64(v3314, v3311);
    *v3324 = vzip2q_s64(v3295, v3293);
    v3324[1] = vzip2q_s64(v3301, v3299);
LABEL_1624:
    v3362 = v3280 + 1;
    while (v3362 != v3283)
    {
      ++v3282;
      v3363 = *v3362++;
      v3284 = v3363;
      if (v3363 != -1)
      {
        v3280 = v3362 - 1;
        v3285 = v3282;
        v3286 = a3[6];
        if (v2040)
          goto LABEL_1620;
        goto LABEL_1622;
      }
    }
    v3275 = *(_DWORD *)(a1 + 1740);
LABEL_1614:
    ++v3276;
    ++v3277;
    if (v3276 < v3275)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1634:
  v3367 = *(_DWORD *)(a1 + 3180);
  if (!v3367)
    goto LABEL_1657;
  v3368 = 0;
  v3369 = a4[6];
  while (2)
  {
    v3370 = *(_QWORD *)(a1 + 3256);
    v3371 = *(_DWORD *)(a1 + 3280) * v3368;
    v3372 = (uint64_t *)(v3370 + 8 * v3371);
    v3373 = *(_DWORD *)(a1 + 3176);
    if (v3373 && *v3372 == -1)
    {
      v3374 = 0;
      v3437 = 8 * (v3373 + v3371) - 8 * v3371 - 8;
      v3438 = v3370 + 8 * v3371;
      while (v3437)
      {
        v3372 = (uint64_t *)(v3438 + 8);
        ++v3374;
        v3439 = *(_QWORD *)(v3438 + 8);
        v3437 -= 8;
        v3438 += 8;
        if (v3439 != -1)
          goto LABEL_1641;
      }
      goto LABEL_1637;
    }
    v3374 = 0;
LABEL_1641:
    v3375 = (uint64_t *)(v3370 + 8 * (v3371 + v3373));
    if (v3372 == v3375)
      goto LABEL_1637;
    v3376 = *v3372;
    v3377 = v3374;
    v3378 = a3[6];
    if (!v2040)
    {
LABEL_1645:
      v3380 = *(_DWORD *)(v3378 + 4 * v3377);
      v3379 = *v3369;
      goto LABEL_1646;
    }
LABEL_1643:
    v3379 = *v3369;
    v3380 = *(_DWORD *)(v3378 + 4 * v3377);
    if (*v3369 >= v3380)
    {
LABEL_1646:
      v3426 = (_OWORD *)(*(_QWORD *)(a1 + 3184) + 8 * v3376);
      v3382 = *(unsigned int *)(a2 + 16);
      v3383 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3380 + (_DWORD)v3382 * v3379));
      v3427 = *(int64x2_t *)v3426;
      v3428 = *((int64x2_t *)v3426 + 2);
      v3399 = *((int64x2_t *)v3426 + 3);
      v3429 = *((int64x2_t *)v3426 + 4);
      v3430 = *((int64x2_t *)v3426 + 5);
      v3401 = *((int8x16_t *)v3426 + 6);
      v3402 = *((int8x16_t *)v3426 + 7);
      v3403 = *((int8x16_t *)v3426 + 8);
      v3407 = *((int8x16_t *)v3426 + 9);
      v3404 = vextq_s8(v3403, v3403, 8uLL).u64[0];
      v3405 = vextq_s8(v3402, v3402, 8uLL).u64[0];
      v3406 = vextq_s8(v3401, v3401, 8uLL).u64[0];
      v3408 = *((int8x16_t *)v3426 + 10);
      v3409 = *((int8x16_t *)v3426 + 11);
      v3411 = vextq_s8(v3409, v3409, 8uLL).u64[0];
      v3412 = vextq_s8(v3408, v3408, 8uLL).u64[0];
      v3410 = vextq_s8(v3407, v3407, 8uLL).u64[0];
      v3413 = *((int8x16_t *)v3426 + 12);
      v3414 = *((int8x16_t *)v3426 + 13);
      v3415 = *((int8x16_t *)v3426 + 14);
      v3419 = *((int8x16_t *)v3426 + 15);
      v3416 = vextq_s8(v3415, v3415, 8uLL).u64[0];
      v3417 = vextq_s8(v3414, v3414, 8uLL).u64[0];
      v3418 = vextq_s8(v3413, v3413, 8uLL).u64[0];
      v3420 = *((int8x16_t *)v3426 + 16);
      v3421 = *((int8x16_t *)v3426 + 17);
      v3423 = vextq_s8(v3421, v3421, 8uLL).u64[0];
      v3424 = vextq_s8(v3420, v3420, 8uLL).u64[0];
      v3422 = vextq_s8(v3419, v3419, 8uLL).u64[0];
      v3383[1] = *((int64x2_t *)v3426 + 1);
      v3383[2] = v3428;
      *v3383 = v3427;
      v3425 = (int64x2_t *)((char *)v3383 + 8 * v3382);
      v3425[1] = v3429;
      v3425[2] = v3430;
      goto LABEL_1647;
    }
    v3381 = *(_QWORD *)(a1 + 3184) + 8 * v3376;
    v3382 = *(unsigned int *)(a2 + 16);
    v3383 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3379 + (_DWORD)v3382 * v3380));
    v3384 = *(int64x2_t *)(v3381 + 16);
    v3385 = *(int64x2_t *)(v3381 + 64);
    v3386 = *(int64x2_t *)(v3381 + 80);
    v3388 = *(int64x2_t *)(v3381 + 32);
    v3387 = *(int64x2_t *)(v3381 + 48);
    v3389 = *(int64x2_t *)(v3381 + 96);
    v3390 = *(int64x2_t *)(v3381 + 112);
    v3391 = *(int64x2_t *)(v3381 + 128);
    v3392 = *(int64x2_t *)(v3381 + 192);
    v3393 = *(int64x2_t *)(v3381 + 208);
    v3394 = *(int64x2_t *)(v3381 + 224);
    v3395 = vzip1q_s64(*(int64x2_t *)v3381, v3387);
    v3396 = vzip1q_s64(v3389, *(int64x2_t *)(v3381 + 144));
    v3397 = vzip1q_s64(v3392, *(int64x2_t *)(v3381 + 240));
    v3398.i64[0] = vdupq_laneq_s64(v3389, 1).u64[0];
    v3398.i64[1] = *(_QWORD *)(v3381 + 152);
    v3399 = vzip2q_s64(*(int64x2_t *)v3381, v3387);
    v3400.i64[0] = vdupq_laneq_s64(v3392, 1).u64[0];
    v3400.i64[1] = *(_QWORD *)(v3381 + 248);
    v3401 = (int8x16_t)vzip1q_s64(v3384, v3385);
    v3402 = (int8x16_t)vzip1q_s64(v3390, *(int64x2_t *)(v3381 + 160));
    v3403 = (int8x16_t)vzip1q_s64(v3393, *(int64x2_t *)(v3381 + 256));
    v3404 = vextq_s8(v3403, v3403, 8uLL).u64[0];
    v3405 = vextq_s8(v3402, v3402, 8uLL).u64[0];
    v3406 = vextq_s8(v3401, v3401, 8uLL).u64[0];
    v3407 = (int8x16_t)vzip2q_s64(v3384, v3385);
    v3408.i64[0] = vdupq_laneq_s64(v3390, 1).u64[0];
    v3408.i64[1] = *(_QWORD *)(v3381 + 168);
    v3409.i64[0] = vdupq_laneq_s64(v3393, 1).u64[0];
    v3409.i64[1] = *(_QWORD *)(v3381 + 264);
    v3410 = vextq_s8(v3407, v3407, 8uLL).u64[0];
    v3411 = vextq_s8(v3409, v3409, 8uLL).u64[0];
    v3412 = vextq_s8(v3408, v3408, 8uLL).u64[0];
    v3413 = (int8x16_t)vzip1q_s64(v3388, v3386);
    v3414 = (int8x16_t)vzip1q_s64(v3391, *(int64x2_t *)(v3381 + 176));
    v3415 = (int8x16_t)vzip1q_s64(v3394, *(int64x2_t *)(v3381 + 272));
    v3416 = vextq_s8(v3415, v3415, 8uLL).u64[0];
    v3417 = vextq_s8(v3414, v3414, 8uLL).u64[0];
    v3418 = vextq_s8(v3413, v3413, 8uLL).u64[0];
    v3419 = (int8x16_t)vzip2q_s64(v3388, v3386);
    v3420.i64[0] = vdupq_laneq_s64(v3391, 1).u64[0];
    v3420.i64[1] = *(_QWORD *)(v3381 + 184);
    v3421.i64[0] = vdupq_laneq_s64(v3394, 1).u64[0];
    v3421.i64[1] = *(_QWORD *)(v3381 + 280);
    v3422 = vextq_s8(v3419, v3419, 8uLL).u64[0];
    v3423 = vextq_s8(v3421, v3421, 8uLL).u64[0];
    v3424 = vextq_s8(v3420, v3420, 8uLL).u64[0];
    v3383[1] = v3396;
    v3383[2] = v3397;
    *v3383 = v3395;
    v3425 = (int64x2_t *)((char *)v3383 + 8 * v3382);
    v3425[1] = v3398;
    v3425[2] = v3400;
LABEL_1647:
    *v3425 = v3399;
    v3401.i64[1] = v3406;
    v3402.i64[1] = v3405;
    v3431 = (int8x16_t *)&v3383[v3382];
    *v3431 = v3401;
    v3431[1] = v3402;
    v3403.i64[1] = v3404;
    v3431[2] = v3403;
    v3432 = (int8x16_t *)((char *)v3383 + 24 * v3382);
    v3409.i64[1] = v3411;
    v3408.i64[1] = v3412;
    v3407.i64[1] = v3410;
    v3432[1] = v3408;
    v3432[2] = v3409;
    *v3432 = v3407;
    v3433 = (int8x16_t *)&v3383[2 * v3382];
    v3415.i64[1] = v3416;
    v3414.i64[1] = v3417;
    v3413.i64[1] = v3418;
    v3433[1] = v3414;
    v3433[2] = v3415;
    *v3433 = v3413;
    v3434 = (int8x16_t *)((char *)v3383 + 40 * v3382);
    v3421.i64[1] = v3423;
    v3420.i64[1] = v3424;
    v3434[1] = v3420;
    v3434[2] = v3421;
    v3419.i64[1] = v3422;
    v3435 = v3372 + 1;
    *v3434 = v3419;
    while (v3435 != v3375)
    {
      ++v3374;
      v3436 = *v3435++;
      v3376 = v3436;
      if (v3436 != -1)
      {
        v3372 = v3435 - 1;
        v3377 = v3374;
        v3378 = a3[6];
        if (v2040)
          goto LABEL_1643;
        goto LABEL_1645;
      }
    }
    v3367 = *(_DWORD *)(a1 + 3180);
LABEL_1637:
    ++v3368;
    ++v3369;
    if (v3368 < v3367)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1657:
  v3440 = *(_DWORD *)(a1 + 4620);
  if (!v3440)
    goto LABEL_1680;
  v3441 = 0;
  v3442 = a4[9];
  while (2)
  {
    v3443 = *(_QWORD *)(a1 + 4696);
    v3444 = *(_DWORD *)(a1 + 4720) * v3441;
    v3445 = (uint64_t *)(v3443 + 8 * v3444);
    v3446 = *(_DWORD *)(a1 + 4616);
    if (v3446 && *v3445 == -1)
    {
      v3447 = 0;
      v3510 = 8 * (v3446 + v3444) - 8 * v3444 - 8;
      v3511 = v3443 + 8 * v3444;
      while (v3510)
      {
        v3445 = (uint64_t *)(v3511 + 8);
        ++v3447;
        v3512 = *(_QWORD *)(v3511 + 8);
        v3510 -= 8;
        v3511 += 8;
        if (v3512 != -1)
          goto LABEL_1664;
      }
      goto LABEL_1660;
    }
    v3447 = 0;
LABEL_1664:
    v3448 = (uint64_t *)(v3443 + 8 * (v3444 + v3446));
    if (v3445 == v3448)
      goto LABEL_1660;
    v3449 = *v3445;
    v3450 = v3447;
    v3451 = a3[6];
    if (!v2040)
    {
LABEL_1668:
      v3453 = *(_DWORD *)(v3451 + 4 * v3450);
      v3452 = *v3442;
      goto LABEL_1669;
    }
LABEL_1666:
    v3452 = *v3442;
    v3453 = *(_DWORD *)(v3451 + 4 * v3450);
    if (*v3442 >= v3453)
    {
LABEL_1669:
      v3499 = (_OWORD *)(*(_QWORD *)(a1 + 4624) + 8 * v3449);
      v3455 = *(unsigned int *)(a2 + 16);
      v3456 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3453 + (_DWORD)v3455 * v3452));
      v3500 = *(int64x2_t *)v3499;
      v3501 = *((int64x2_t *)v3499 + 2);
      v3472 = *((int64x2_t *)v3499 + 3);
      v3502 = *((int64x2_t *)v3499 + 4);
      v3503 = *((int64x2_t *)v3499 + 5);
      v3474 = *((int8x16_t *)v3499 + 6);
      v3475 = *((int8x16_t *)v3499 + 7);
      v3476 = *((int8x16_t *)v3499 + 8);
      v3480 = *((int8x16_t *)v3499 + 9);
      v3477 = vextq_s8(v3476, v3476, 8uLL).u64[0];
      v3478 = vextq_s8(v3475, v3475, 8uLL).u64[0];
      v3479 = vextq_s8(v3474, v3474, 8uLL).u64[0];
      v3481 = *((int8x16_t *)v3499 + 10);
      v3482 = *((int8x16_t *)v3499 + 11);
      v3484 = vextq_s8(v3482, v3482, 8uLL).u64[0];
      v3485 = vextq_s8(v3481, v3481, 8uLL).u64[0];
      v3483 = vextq_s8(v3480, v3480, 8uLL).u64[0];
      v3486 = *((int8x16_t *)v3499 + 12);
      v3487 = *((int8x16_t *)v3499 + 13);
      v3488 = *((int8x16_t *)v3499 + 14);
      v3492 = *((int8x16_t *)v3499 + 15);
      v3489 = vextq_s8(v3488, v3488, 8uLL).u64[0];
      v3490 = vextq_s8(v3487, v3487, 8uLL).u64[0];
      v3491 = vextq_s8(v3486, v3486, 8uLL).u64[0];
      v3493 = *((int8x16_t *)v3499 + 16);
      v3494 = *((int8x16_t *)v3499 + 17);
      v3496 = vextq_s8(v3494, v3494, 8uLL).u64[0];
      v3497 = vextq_s8(v3493, v3493, 8uLL).u64[0];
      v3495 = vextq_s8(v3492, v3492, 8uLL).u64[0];
      v3456[1] = *((int64x2_t *)v3499 + 1);
      v3456[2] = v3501;
      *v3456 = v3500;
      v3498 = (int64x2_t *)((char *)v3456 + 8 * v3455);
      v3498[1] = v3502;
      v3498[2] = v3503;
      goto LABEL_1670;
    }
    v3454 = *(_QWORD *)(a1 + 4624) + 8 * v3449;
    v3455 = *(unsigned int *)(a2 + 16);
    v3456 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3452 + (_DWORD)v3455 * v3453));
    v3457 = *(int64x2_t *)(v3454 + 16);
    v3458 = *(int64x2_t *)(v3454 + 64);
    v3459 = *(int64x2_t *)(v3454 + 80);
    v3461 = *(int64x2_t *)(v3454 + 32);
    v3460 = *(int64x2_t *)(v3454 + 48);
    v3462 = *(int64x2_t *)(v3454 + 96);
    v3463 = *(int64x2_t *)(v3454 + 112);
    v3464 = *(int64x2_t *)(v3454 + 128);
    v3465 = *(int64x2_t *)(v3454 + 192);
    v3466 = *(int64x2_t *)(v3454 + 208);
    v3467 = *(int64x2_t *)(v3454 + 224);
    v3468 = vzip1q_s64(*(int64x2_t *)v3454, v3460);
    v3469 = vzip1q_s64(v3462, *(int64x2_t *)(v3454 + 144));
    v3470 = vzip1q_s64(v3465, *(int64x2_t *)(v3454 + 240));
    v3471.i64[0] = vdupq_laneq_s64(v3462, 1).u64[0];
    v3471.i64[1] = *(_QWORD *)(v3454 + 152);
    v3472 = vzip2q_s64(*(int64x2_t *)v3454, v3460);
    v3473.i64[0] = vdupq_laneq_s64(v3465, 1).u64[0];
    v3473.i64[1] = *(_QWORD *)(v3454 + 248);
    v3474 = (int8x16_t)vzip1q_s64(v3457, v3458);
    v3475 = (int8x16_t)vzip1q_s64(v3463, *(int64x2_t *)(v3454 + 160));
    v3476 = (int8x16_t)vzip1q_s64(v3466, *(int64x2_t *)(v3454 + 256));
    v3477 = vextq_s8(v3476, v3476, 8uLL).u64[0];
    v3478 = vextq_s8(v3475, v3475, 8uLL).u64[0];
    v3479 = vextq_s8(v3474, v3474, 8uLL).u64[0];
    v3480 = (int8x16_t)vzip2q_s64(v3457, v3458);
    v3481.i64[0] = vdupq_laneq_s64(v3463, 1).u64[0];
    v3481.i64[1] = *(_QWORD *)(v3454 + 168);
    v3482.i64[0] = vdupq_laneq_s64(v3466, 1).u64[0];
    v3482.i64[1] = *(_QWORD *)(v3454 + 264);
    v3483 = vextq_s8(v3480, v3480, 8uLL).u64[0];
    v3484 = vextq_s8(v3482, v3482, 8uLL).u64[0];
    v3485 = vextq_s8(v3481, v3481, 8uLL).u64[0];
    v3486 = (int8x16_t)vzip1q_s64(v3461, v3459);
    v3487 = (int8x16_t)vzip1q_s64(v3464, *(int64x2_t *)(v3454 + 176));
    v3488 = (int8x16_t)vzip1q_s64(v3467, *(int64x2_t *)(v3454 + 272));
    v3489 = vextq_s8(v3488, v3488, 8uLL).u64[0];
    v3490 = vextq_s8(v3487, v3487, 8uLL).u64[0];
    v3491 = vextq_s8(v3486, v3486, 8uLL).u64[0];
    v3492 = (int8x16_t)vzip2q_s64(v3461, v3459);
    v3493.i64[0] = vdupq_laneq_s64(v3464, 1).u64[0];
    v3493.i64[1] = *(_QWORD *)(v3454 + 184);
    v3494.i64[0] = vdupq_laneq_s64(v3467, 1).u64[0];
    v3494.i64[1] = *(_QWORD *)(v3454 + 280);
    v3495 = vextq_s8(v3492, v3492, 8uLL).u64[0];
    v3496 = vextq_s8(v3494, v3494, 8uLL).u64[0];
    v3497 = vextq_s8(v3493, v3493, 8uLL).u64[0];
    v3456[1] = v3469;
    v3456[2] = v3470;
    *v3456 = v3468;
    v3498 = (int64x2_t *)((char *)v3456 + 8 * v3455);
    v3498[1] = v3471;
    v3498[2] = v3473;
LABEL_1670:
    *v3498 = v3472;
    v3474.i64[1] = v3479;
    v3475.i64[1] = v3478;
    v3504 = (int8x16_t *)&v3456[v3455];
    *v3504 = v3474;
    v3504[1] = v3475;
    v3476.i64[1] = v3477;
    v3504[2] = v3476;
    v3505 = (int8x16_t *)((char *)v3456 + 24 * v3455);
    v3482.i64[1] = v3484;
    v3481.i64[1] = v3485;
    v3480.i64[1] = v3483;
    v3505[1] = v3481;
    v3505[2] = v3482;
    *v3505 = v3480;
    v3506 = (int8x16_t *)&v3456[2 * v3455];
    v3488.i64[1] = v3489;
    v3487.i64[1] = v3490;
    v3486.i64[1] = v3491;
    v3506[1] = v3487;
    v3506[2] = v3488;
    *v3506 = v3486;
    v3507 = (int8x16_t *)((char *)v3456 + 40 * v3455);
    v3494.i64[1] = v3496;
    v3493.i64[1] = v3497;
    v3507[1] = v3493;
    v3507[2] = v3494;
    v3492.i64[1] = v3495;
    v3508 = v3445 + 1;
    *v3507 = v3492;
    while (v3508 != v3448)
    {
      ++v3447;
      v3509 = *v3508++;
      v3449 = v3509;
      if (v3509 != -1)
      {
        v3445 = v3508 - 1;
        v3450 = v3447;
        v3451 = a3[6];
        if (v2040)
          goto LABEL_1666;
        goto LABEL_1668;
      }
    }
    v3440 = *(_DWORD *)(a1 + 4620);
LABEL_1660:
    ++v3441;
    ++v3442;
    if (v3441 < v3440)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1680:
  v3513 = *(_DWORD *)(a1 + 6060);
  if (!v3513)
    goto LABEL_1703;
  v3514 = 0;
  v3515 = a4[12];
  while (2)
  {
    v3516 = *(_QWORD *)(a1 + 6136);
    v3517 = *(_DWORD *)(a1 + 6160) * v3514;
    v3518 = (uint64_t *)(v3516 + 8 * v3517);
    v3519 = *(_DWORD *)(a1 + 6056);
    if (v3519 && *v3518 == -1)
    {
      v3520 = 0;
      v3560 = 8 * (v3519 + v3517) - 8 * v3517 - 8;
      v3561 = v3516 + 8 * v3517;
      while (v3560)
      {
        v3518 = (uint64_t *)(v3561 + 8);
        ++v3520;
        v3562 = *(_QWORD *)(v3561 + 8);
        v3560 -= 8;
        v3561 += 8;
        if (v3562 != -1)
          goto LABEL_1687;
      }
      goto LABEL_1683;
    }
    v3520 = 0;
LABEL_1687:
    v3521 = (uint64_t *)(v3516 + 8 * (v3517 + v3519));
    if (v3518 == v3521)
      goto LABEL_1683;
    v3522 = *v3518;
    v3523 = v3520;
    v3524 = a3[6];
    if (!v2040)
    {
LABEL_1691:
      v3526 = *(_DWORD *)(v3524 + 4 * v3523);
      v3525 = *v3515;
      goto LABEL_1692;
    }
LABEL_1689:
    v3525 = *v3515;
    v3526 = *(_DWORD *)(v3524 + 4 * v3523);
    if (*v3515 >= v3526)
    {
LABEL_1692:
      v3545 = (__int128 *)(*(_QWORD *)(a1 + 6064) + 8 * v3522);
      v3546 = *(unsigned int *)(a2 + 16);
      v3547 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3526 + (_DWORD)v3546 * v3525));
      v3548 = *v3545;
      v3549 = v3545[2];
      v3550 = v3545[3];
      v3551 = v3545[4];
      v3552 = v3545[5];
      v3553 = v3545[6];
      v3554 = v3545[7];
      v3555 = v3545[8];
      v3547[1] = v3545[1];
      v3547[2] = v3549;
      *v3547 = v3548;
      v3556 = (_OWORD *)((char *)v3547 + 8 * v3546);
      v3556[1] = v3551;
      v3556[2] = v3552;
      *v3556 = v3550;
      v3557 = &v3547[v3546];
      v3557[1] = v3554;
      v3557[2] = v3555;
      *v3557 = v3553;
      goto LABEL_1693;
    }
    v3527 = *(_QWORD *)(a1 + 6064) + 8 * v3522;
    v3528 = *(unsigned int *)(a2 + 16);
    v3529 = *(_QWORD *)a2 + 8 * (v3525 + (_DWORD)v3528 * v3526);
    v3530 = *(int64x2_t *)(v3527 + 16);
    v3532 = *(int64x2_t *)(v3527 + 64);
    v3531 = *(int64x2_t *)(v3527 + 80);
    v3533 = *(int64x2_t *)(v3527 + 32);
    v3534 = *(int64x2_t *)(v3527 + 48);
    v3536 = *(_OWORD *)(v3527 + 112);
    v3535 = *(_OWORD *)(v3527 + 128);
    v3537 = *(_OWORD *)(v3527 + 96);
    v3538 = vzip1q_s64(*(int64x2_t *)v3527, v3534);
    v3539 = vzip2q_s64(*(int64x2_t *)v3527, v3534);
    *(_QWORD *)(v3529 + 16) = v3537;
    *(int64x2_t *)v3529 = v3538;
    v3540 = (int64x2_t *)(v3529 + 8 * v3528);
    *v3540 = v3539;
    v3540[1].i64[0] = *((_QWORD *)&v3537 + 1);
    v3541 = (int64x2_t *)(v3529 + 16 * v3528);
    v3541[1].i64[0] = v3536;
    *v3541 = vzip1q_s64(v3530, v3532);
    v3542 = (int64x2_t *)(v3529 + 24 * v3528);
    v3542[1].i64[0] = *((_QWORD *)&v3536 + 1);
    *v3542 = vzip2q_s64(v3530, v3532);
    v3543 = (int64x2_t *)(v3529 + 32 * v3528);
    v3543[1].i64[0] = v3535;
    *v3543 = vzip1q_s64(v3533, v3531);
    v3544 = (int64x2_t *)(v3529 + 40 * v3528);
    v3544[1].i64[0] = *((_QWORD *)&v3535 + 1);
    *v3544 = vzip2q_s64(v3533, v3531);
LABEL_1693:
    v3558 = v3518 + 1;
    while (v3558 != v3521)
    {
      ++v3520;
      v3559 = *v3558++;
      v3522 = v3559;
      if (v3559 != -1)
      {
        v3518 = v3558 - 1;
        v3523 = v3520;
        v3524 = a3[6];
        if (v2040)
          goto LABEL_1689;
        goto LABEL_1691;
      }
    }
    v3513 = *(_DWORD *)(a1 + 6060);
LABEL_1683:
    ++v3514;
    ++v3515;
    if (v3514 < v3513)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1703:
  v3563 = *(_DWORD *)(a1 + 7500);
  if (!v3563)
    goto LABEL_1726;
  v3564 = 0;
  v3565 = a4[15];
  while (2)
  {
    v3566 = *(_QWORD *)(a1 + 7576);
    v3567 = *(_DWORD *)(a1 + 7600) * v3564;
    v3568 = (uint64_t *)(v3566 + 8 * v3567);
    v3569 = *(_DWORD *)(a1 + 7496);
    if (v3569 && *v3568 == -1)
    {
      v3570 = 0;
      v3589 = 8 * (v3569 + v3567) - 8 * v3567 - 8;
      v3590 = v3566 + 8 * v3567;
      while (v3589)
      {
        v3568 = (uint64_t *)(v3590 + 8);
        ++v3570;
        v3591 = *(_QWORD *)(v3590 + 8);
        v3589 -= 8;
        v3590 += 8;
        if (v3591 != -1)
          goto LABEL_1710;
      }
      goto LABEL_1706;
    }
    v3570 = 0;
LABEL_1710:
    v3571 = (uint64_t *)(v3566 + 8 * (v3567 + v3569));
    if (v3568 == v3571)
      goto LABEL_1706;
    v3572 = *v3568;
    v3573 = v3570;
    v3574 = a3[6];
    if (!v2040)
    {
LABEL_1714:
      v3576 = *(_DWORD *)(v3574 + 4 * v3573);
      v3575 = *v3565;
      goto LABEL_1715;
    }
LABEL_1712:
    v3575 = *v3565;
    v3576 = *(_DWORD *)(v3574 + 4 * v3573);
    if (*v3565 >= v3576)
    {
LABEL_1715:
      v3583 = (__int128 *)(*(_QWORD *)(a1 + 7504) + 8 * v3572);
      v3584 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3576 + *(_DWORD *)(a2 + 16) * v3575));
      v3585 = v3583[2];
      v3586 = *v3583;
      v3584[1] = v3583[1];
      v3584[2] = v3585;
      *v3584 = v3586;
      goto LABEL_1716;
    }
    v3577 = *(_QWORD *)(a1 + 7504) + 8 * v3572;
    v3578 = *(unsigned int *)(a2 + 16);
    v3579 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v3575 + (_DWORD)v3578 * v3576));
    v3581 = *(int8x16_t *)(v3577 + 16);
    v3580 = *(int8x16_t *)(v3577 + 32);
    v3582 = vextq_s8(*(int8x16_t *)v3577, *(int8x16_t *)v3577, 8uLL).u64[0];
    *v3579 = *(_QWORD *)v3577;
    v3579[v3578] = v3582;
    v3579[2 * v3578] = v3581.i64[0];
    v3579[3 * v3578] = vextq_s8(v3581, v3581, 8uLL).u64[0];
    v3579[4 * v3578] = v3580.i64[0];
    v3579[5 * v3578] = vextq_s8(v3580, v3580, 8uLL).u64[0];
LABEL_1716:
    v3587 = v3568 + 1;
    while (v3587 != v3571)
    {
      ++v3570;
      v3588 = *v3587++;
      v3572 = v3588;
      if (v3588 != -1)
      {
        v3568 = v3587 - 1;
        v3573 = v3570;
        v3574 = a3[6];
        if (v2040)
          goto LABEL_1712;
        goto LABEL_1714;
      }
    }
    v3563 = *(_DWORD *)(a1 + 7500);
LABEL_1706:
    ++v3564;
    ++v3565;
    if (v3564 < v3563)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1726:
  v3592 = *(_DWORD *)(a1 + 8940);
  if (!v3592)
    goto LABEL_1749;
  v3593 = 0;
  v3594 = a4[18];
  while (2)
  {
    v3595 = *(_QWORD *)(a1 + 9016);
    v3596 = *(_DWORD *)(a1 + 9040) * v3593;
    v3597 = (uint64_t *)(v3595 + 8 * v3596);
    v3598 = *(_DWORD *)(a1 + 8936);
    if (v3598 && *v3597 == -1)
    {
      v3599 = 0;
      v3639 = 8 * (v3598 + v3596) - 8 * v3596 - 8;
      v3640 = v3595 + 8 * v3596;
      while (v3639)
      {
        v3597 = (uint64_t *)(v3640 + 8);
        ++v3599;
        v3641 = *(_QWORD *)(v3640 + 8);
        v3639 -= 8;
        v3640 += 8;
        if (v3641 != -1)
          goto LABEL_1733;
      }
      goto LABEL_1729;
    }
    v3599 = 0;
LABEL_1733:
    v3600 = (uint64_t *)(v3595 + 8 * (v3596 + v3598));
    if (v3597 == v3600)
      goto LABEL_1729;
    v3601 = *v3597;
    v3602 = v3599;
    v3603 = a3[6];
    if (!v2040)
    {
LABEL_1737:
      v3605 = *(_DWORD *)(v3603 + 4 * v3602);
      v3604 = *v3594;
      goto LABEL_1738;
    }
LABEL_1735:
    v3604 = *v3594;
    v3605 = *(_DWORD *)(v3603 + 4 * v3602);
    if (*v3594 >= v3605)
    {
LABEL_1738:
      v3624 = (__int128 *)(*(_QWORD *)(a1 + 8944) + 8 * v3601);
      v3625 = *(unsigned int *)(a2 + 16);
      v3626 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3605 + (_DWORD)v3625 * v3604));
      v3627 = *v3624;
      v3628 = v3624[2];
      v3629 = v3624[3];
      v3630 = v3624[4];
      v3631 = v3624[5];
      v3632 = v3624[6];
      v3633 = v3624[7];
      v3634 = v3624[8];
      v3626[1] = v3624[1];
      v3626[2] = v3628;
      *v3626 = v3627;
      v3635 = (_OWORD *)((char *)v3626 + 8 * v3625);
      v3635[1] = v3630;
      v3635[2] = v3631;
      *v3635 = v3629;
      v3636 = &v3626[v3625];
      v3636[1] = v3633;
      v3636[2] = v3634;
      *v3636 = v3632;
      goto LABEL_1739;
    }
    v3606 = *(_QWORD *)(a1 + 8944) + 8 * v3601;
    v3607 = *(unsigned int *)(a2 + 16);
    v3608 = *(_QWORD *)a2 + 8 * (v3604 + (_DWORD)v3607 * v3605);
    v3609 = *(int64x2_t *)(v3606 + 16);
    v3611 = *(int64x2_t *)(v3606 + 64);
    v3610 = *(int64x2_t *)(v3606 + 80);
    v3612 = *(int64x2_t *)(v3606 + 32);
    v3613 = *(int64x2_t *)(v3606 + 48);
    v3615 = *(_OWORD *)(v3606 + 112);
    v3614 = *(_OWORD *)(v3606 + 128);
    v3616 = *(_OWORD *)(v3606 + 96);
    v3617 = vzip1q_s64(*(int64x2_t *)v3606, v3613);
    v3618 = vzip2q_s64(*(int64x2_t *)v3606, v3613);
    *(_QWORD *)(v3608 + 16) = v3616;
    *(int64x2_t *)v3608 = v3617;
    v3619 = (int64x2_t *)(v3608 + 8 * v3607);
    *v3619 = v3618;
    v3619[1].i64[0] = *((_QWORD *)&v3616 + 1);
    v3620 = (int64x2_t *)(v3608 + 16 * v3607);
    v3620[1].i64[0] = v3615;
    *v3620 = vzip1q_s64(v3609, v3611);
    v3621 = (int64x2_t *)(v3608 + 24 * v3607);
    v3621[1].i64[0] = *((_QWORD *)&v3615 + 1);
    *v3621 = vzip2q_s64(v3609, v3611);
    v3622 = (int64x2_t *)(v3608 + 32 * v3607);
    v3622[1].i64[0] = v3614;
    *v3622 = vzip1q_s64(v3612, v3610);
    v3623 = (int64x2_t *)(v3608 + 40 * v3607);
    v3623[1].i64[0] = *((_QWORD *)&v3614 + 1);
    *v3623 = vzip2q_s64(v3612, v3610);
LABEL_1739:
    v3637 = v3597 + 1;
    while (v3637 != v3600)
    {
      ++v3599;
      v3638 = *v3637++;
      v3601 = v3638;
      if (v3638 != -1)
      {
        v3597 = v3637 - 1;
        v3602 = v3599;
        v3603 = a3[6];
        if (v2040)
          goto LABEL_1735;
        goto LABEL_1737;
      }
    }
    v3592 = *(_DWORD *)(a1 + 8940);
LABEL_1729:
    ++v3593;
    ++v3594;
    if (v3593 < v3592)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1749:
  v3642 = *(_DWORD *)(a1 + 10380);
  if (!v3642)
    goto LABEL_1772;
  v3643 = 0;
  v3644 = a4[21];
  while (2)
  {
    v3645 = *(_QWORD *)(a1 + 10456);
    v3646 = *(_DWORD *)(a1 + 10480) * v3643;
    v3647 = (uint64_t *)(v3645 + 8 * v3646);
    v3648 = *(_DWORD *)(a1 + 10376);
    if (v3648 && *v3647 == -1)
    {
      v3649 = 0;
      v3695 = 8 * (v3648 + v3646) - 8 * v3646 - 8;
      v3696 = v3645 + 8 * v3646;
      while (v3695)
      {
        v3647 = (uint64_t *)(v3696 + 8);
        ++v3649;
        v3697 = *(_QWORD *)(v3696 + 8);
        v3695 -= 8;
        v3696 += 8;
        if (v3697 != -1)
          goto LABEL_1756;
      }
      goto LABEL_1752;
    }
    v3649 = 0;
LABEL_1756:
    v3650 = (uint64_t *)(v3645 + 8 * (v3646 + v3648));
    if (v3647 == v3650)
      goto LABEL_1752;
    v3651 = *v3647;
    v3652 = v3649;
    v3653 = a3[6];
    if (!v2040)
    {
LABEL_1760:
      v3655 = *(_DWORD *)(v3653 + 4 * v3652);
      v3654 = *v3644;
      goto LABEL_1761;
    }
LABEL_1758:
    v3654 = *v3644;
    v3655 = *(_DWORD *)(v3653 + 4 * v3652);
    if (*v3644 >= v3655)
    {
LABEL_1761:
      v3676 = (__int128 *)(*(_QWORD *)(a1 + 10384) + 8 * v3651);
      v3677 = *(unsigned int *)(a2 + 16);
      v3678 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3655 + (_DWORD)v3677 * v3654));
      v3679 = *v3676;
      v3680 = v3676[2];
      v3681 = v3676[3];
      v3682 = v3676[4];
      v3683 = v3676[5];
      v3684 = v3676[6];
      v3685 = v3676[7];
      v3686 = v3676[8];
      v3687 = v3676[9];
      v3688 = v3676[10];
      v3689 = v3676[11];
      v3678[1] = v3676[1];
      v3678[2] = v3680;
      *v3678 = v3679;
      v3690 = (_OWORD *)((char *)v3678 + 8 * v3677);
      v3690[1] = v3682;
      v3690[2] = v3683;
      *v3690 = v3681;
      v3691 = &v3678[v3677];
      v3691[1] = v3685;
      v3691[2] = v3686;
      *v3691 = v3684;
      v3692 = (_OWORD *)((char *)v3678 + 24 * v3677);
      v3692[1] = v3688;
      v3692[2] = v3689;
      *v3692 = v3687;
      goto LABEL_1762;
    }
    v3656 = *(_QWORD *)(a1 + 10384) + 8 * v3651;
    v3657 = *(unsigned int *)(a2 + 16);
    v3658 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3654 + (_DWORD)v3657 * v3655));
    v3659 = *(int64x2_t *)(v3656 + 16);
    v3661 = *(int64x2_t *)(v3656 + 64);
    v3660 = *(int64x2_t *)(v3656 + 80);
    v3662 = *(int64x2_t *)(v3656 + 32);
    v3663 = *(int64x2_t *)(v3656 + 48);
    v3665 = *(int64x2_t *)(v3656 + 96);
    v3664 = *(int64x2_t *)(v3656 + 112);
    v3667 = *(int64x2_t *)(v3656 + 160);
    v3666 = *(int64x2_t *)(v3656 + 176);
    v3668 = *(int64x2_t *)(v3656 + 128);
    v3669 = *(int64x2_t *)(v3656 + 144);
    v3670 = vzip2q_s64(*(int64x2_t *)v3656, v3663);
    *v3658 = vzip1q_s64(*(int64x2_t *)v3656, v3663);
    v3658[1] = vzip1q_s64(v3665, v3669);
    v3671 = (int64x2_t *)((char *)v3658 + 8 * v3657);
    *v3671 = v3670;
    v3671[1] = vzip2q_s64(v3665, v3669);
    v3672 = &v3658[v3657];
    *v3672 = vzip1q_s64(v3659, v3661);
    v3672[1] = vzip1q_s64(v3664, v3667);
    v3673 = (int64x2_t *)((char *)v3658 + 24 * v3657);
    *v3673 = vzip2q_s64(v3659, v3661);
    v3673[1] = vzip2q_s64(v3664, v3667);
    v3674 = &v3658[2 * v3657];
    *v3674 = vzip1q_s64(v3662, v3660);
    v3674[1] = vzip1q_s64(v3668, v3666);
    v3675 = (int64x2_t *)((char *)v3658 + 40 * v3657);
    *v3675 = vzip2q_s64(v3662, v3660);
    v3675[1] = vzip2q_s64(v3668, v3666);
LABEL_1762:
    v3693 = v3647 + 1;
    while (v3693 != v3650)
    {
      ++v3649;
      v3694 = *v3693++;
      v3651 = v3694;
      if (v3694 != -1)
      {
        v3647 = v3693 - 1;
        v3652 = v3649;
        v3653 = a3[6];
        if (v2040)
          goto LABEL_1758;
        goto LABEL_1760;
      }
    }
    v3642 = *(_DWORD *)(a1 + 10380);
LABEL_1752:
    ++v3643;
    ++v3644;
    if (v3643 < v3642)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1772:
  v3698 = *(_DWORD *)(a1 + 11820);
  if (!v3698)
    goto LABEL_1795;
  v3699 = 0;
  v3700 = a4[24];
  while (2)
  {
    v3701 = *(_QWORD *)(a1 + 11896);
    v3702 = *(_DWORD *)(a1 + 11920) * v3699;
    v3703 = (uint64_t *)(v3701 + 8 * v3702);
    v3704 = *(_DWORD *)(a1 + 11816);
    if (v3704 && *v3703 == -1)
    {
      v3705 = 0;
      v3751 = 8 * (v3704 + v3702) - 8 * v3702 - 8;
      v3752 = v3701 + 8 * v3702;
      while (v3751)
      {
        v3703 = (uint64_t *)(v3752 + 8);
        ++v3705;
        v3753 = *(_QWORD *)(v3752 + 8);
        v3751 -= 8;
        v3752 += 8;
        if (v3753 != -1)
          goto LABEL_1779;
      }
      goto LABEL_1775;
    }
    v3705 = 0;
LABEL_1779:
    v3706 = (uint64_t *)(v3701 + 8 * (v3702 + v3704));
    if (v3703 == v3706)
      goto LABEL_1775;
    v3707 = *v3703;
    v3708 = v3705;
    v3709 = a3[6];
    if (!v2040)
    {
LABEL_1783:
      v3711 = *(_DWORD *)(v3709 + 4 * v3708);
      v3710 = *v3700;
      goto LABEL_1784;
    }
LABEL_1781:
    v3710 = *v3700;
    v3711 = *(_DWORD *)(v3709 + 4 * v3708);
    if (*v3700 >= v3711)
    {
LABEL_1784:
      v3732 = (__int128 *)(*(_QWORD *)(a1 + 11824) + 8 * v3707);
      v3733 = *(unsigned int *)(a2 + 16);
      v3734 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3711 + (_DWORD)v3733 * v3710));
      v3735 = *v3732;
      v3736 = v3732[2];
      v3737 = v3732[3];
      v3738 = v3732[4];
      v3739 = v3732[5];
      v3740 = v3732[6];
      v3741 = v3732[7];
      v3742 = v3732[8];
      v3743 = v3732[9];
      v3744 = v3732[10];
      v3745 = v3732[11];
      v3734[1] = v3732[1];
      v3734[2] = v3736;
      *v3734 = v3735;
      v3746 = (_OWORD *)((char *)v3734 + 8 * v3733);
      v3746[1] = v3738;
      v3746[2] = v3739;
      *v3746 = v3737;
      v3747 = &v3734[v3733];
      v3747[1] = v3741;
      v3747[2] = v3742;
      *v3747 = v3740;
      v3748 = (_OWORD *)((char *)v3734 + 24 * v3733);
      v3748[1] = v3744;
      v3748[2] = v3745;
      *v3748 = v3743;
      goto LABEL_1785;
    }
    v3712 = *(_QWORD *)(a1 + 11824) + 8 * v3707;
    v3713 = *(unsigned int *)(a2 + 16);
    v3714 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3710 + (_DWORD)v3713 * v3711));
    v3715 = *(int64x2_t *)(v3712 + 16);
    v3717 = *(int64x2_t *)(v3712 + 64);
    v3716 = *(int64x2_t *)(v3712 + 80);
    v3718 = *(int64x2_t *)(v3712 + 32);
    v3719 = *(int64x2_t *)(v3712 + 48);
    v3721 = *(int64x2_t *)(v3712 + 96);
    v3720 = *(int64x2_t *)(v3712 + 112);
    v3723 = *(int64x2_t *)(v3712 + 160);
    v3722 = *(int64x2_t *)(v3712 + 176);
    v3724 = *(int64x2_t *)(v3712 + 128);
    v3725 = *(int64x2_t *)(v3712 + 144);
    v3726 = vzip2q_s64(*(int64x2_t *)v3712, v3719);
    *v3714 = vzip1q_s64(*(int64x2_t *)v3712, v3719);
    v3714[1] = vzip1q_s64(v3721, v3725);
    v3727 = (int64x2_t *)((char *)v3714 + 8 * v3713);
    *v3727 = v3726;
    v3727[1] = vzip2q_s64(v3721, v3725);
    v3728 = &v3714[v3713];
    *v3728 = vzip1q_s64(v3715, v3717);
    v3728[1] = vzip1q_s64(v3720, v3723);
    v3729 = (int64x2_t *)((char *)v3714 + 24 * v3713);
    *v3729 = vzip2q_s64(v3715, v3717);
    v3729[1] = vzip2q_s64(v3720, v3723);
    v3730 = &v3714[2 * v3713];
    *v3730 = vzip1q_s64(v3718, v3716);
    v3730[1] = vzip1q_s64(v3724, v3722);
    v3731 = (int64x2_t *)((char *)v3714 + 40 * v3713);
    *v3731 = vzip2q_s64(v3718, v3716);
    v3731[1] = vzip2q_s64(v3724, v3722);
LABEL_1785:
    v3749 = v3703 + 1;
    while (v3749 != v3706)
    {
      ++v3705;
      v3750 = *v3749++;
      v3707 = v3750;
      if (v3750 != -1)
      {
        v3703 = v3749 - 1;
        v3708 = v3705;
        v3709 = a3[6];
        if (v2040)
          goto LABEL_1781;
        goto LABEL_1783;
      }
    }
    v3698 = *(_DWORD *)(a1 + 11820);
LABEL_1775:
    ++v3699;
    ++v3700;
    if (v3699 < v3698)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1795:
  v3754 = *(_DWORD *)(a1 + 13260);
  if (!v3754)
    goto LABEL_1818;
  v3755 = 0;
  v3756 = a4[27];
  while (2)
  {
    v3757 = *(_QWORD *)(a1 + 13336);
    v3758 = *(_DWORD *)(a1 + 13360) * v3755;
    v3759 = (uint64_t *)(v3757 + 8 * v3758);
    v3760 = *(_DWORD *)(a1 + 13256);
    if (v3760 && *v3759 == -1)
    {
      v3761 = 0;
      v3801 = 8 * (v3760 + v3758) - 8 * v3758 - 8;
      v3802 = v3757 + 8 * v3758;
      while (v3801)
      {
        v3759 = (uint64_t *)(v3802 + 8);
        ++v3761;
        v3803 = *(_QWORD *)(v3802 + 8);
        v3801 -= 8;
        v3802 += 8;
        if (v3803 != -1)
          goto LABEL_1802;
      }
      goto LABEL_1798;
    }
    v3761 = 0;
LABEL_1802:
    v3762 = (uint64_t *)(v3757 + 8 * (v3758 + v3760));
    if (v3759 == v3762)
      goto LABEL_1798;
    v3763 = *v3759;
    v3764 = v3761;
    v3765 = a3[6];
    if (!v2040)
    {
LABEL_1806:
      v3767 = *(_DWORD *)(v3765 + 4 * v3764);
      v3766 = *v3756;
      goto LABEL_1807;
    }
LABEL_1804:
    v3766 = *v3756;
    v3767 = *(_DWORD *)(v3765 + 4 * v3764);
    if (*v3756 >= v3767)
    {
LABEL_1807:
      v3786 = (__int128 *)(*(_QWORD *)(a1 + 13264) + 8 * v3763);
      v3787 = *(unsigned int *)(a2 + 16);
      v3788 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v3767 + (_DWORD)v3787 * v3766));
      v3789 = *v3786;
      v3790 = v3786[2];
      v3791 = v3786[3];
      v3792 = v3786[4];
      v3793 = v3786[5];
      v3794 = v3786[6];
      v3795 = v3786[7];
      v3796 = v3786[8];
      v3788[1] = v3786[1];
      v3788[2] = v3790;
      *v3788 = v3789;
      v3797 = (_OWORD *)((char *)v3788 + 8 * v3787);
      v3797[1] = v3792;
      v3797[2] = v3793;
      *v3797 = v3791;
      v3798 = &v3788[v3787];
      v3798[1] = v3795;
      v3798[2] = v3796;
      *v3798 = v3794;
      goto LABEL_1808;
    }
    v3768 = *(_QWORD *)(a1 + 13264) + 8 * v3763;
    v3769 = *(unsigned int *)(a2 + 16);
    v3770 = *(_QWORD *)a2 + 8 * (v3766 + (_DWORD)v3769 * v3767);
    v3771 = *(int64x2_t *)(v3768 + 16);
    v3773 = *(int64x2_t *)(v3768 + 64);
    v3772 = *(int64x2_t *)(v3768 + 80);
    v3774 = *(int64x2_t *)(v3768 + 32);
    v3775 = *(int64x2_t *)(v3768 + 48);
    v3777 = *(_OWORD *)(v3768 + 112);
    v3776 = *(_OWORD *)(v3768 + 128);
    v3778 = *(_OWORD *)(v3768 + 96);
    v3779 = vzip1q_s64(*(int64x2_t *)v3768, v3775);
    v3780 = vzip2q_s64(*(int64x2_t *)v3768, v3775);
    *(_QWORD *)(v3770 + 16) = v3778;
    *(int64x2_t *)v3770 = v3779;
    v3781 = (int64x2_t *)(v3770 + 8 * v3769);
    *v3781 = v3780;
    v3781[1].i64[0] = *((_QWORD *)&v3778 + 1);
    v3782 = (int64x2_t *)(v3770 + 16 * v3769);
    v3782[1].i64[0] = v3777;
    *v3782 = vzip1q_s64(v3771, v3773);
    v3783 = (int64x2_t *)(v3770 + 24 * v3769);
    v3783[1].i64[0] = *((_QWORD *)&v3777 + 1);
    *v3783 = vzip2q_s64(v3771, v3773);
    v3784 = (int64x2_t *)(v3770 + 32 * v3769);
    v3784[1].i64[0] = v3776;
    *v3784 = vzip1q_s64(v3774, v3772);
    v3785 = (int64x2_t *)(v3770 + 40 * v3769);
    v3785[1].i64[0] = *((_QWORD *)&v3776 + 1);
    *v3785 = vzip2q_s64(v3774, v3772);
LABEL_1808:
    v3799 = v3759 + 1;
    while (v3799 != v3762)
    {
      ++v3761;
      v3800 = *v3799++;
      v3763 = v3800;
      if (v3800 != -1)
      {
        v3759 = v3799 - 1;
        v3764 = v3761;
        v3765 = a3[6];
        if (v2040)
          goto LABEL_1804;
        goto LABEL_1806;
      }
    }
    v3754 = *(_DWORD *)(a1 + 13260);
LABEL_1798:
    ++v3755;
    ++v3756;
    if (v3755 < v3754)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1818:
  v3804 = *(_DWORD *)(a1 + 156);
  if (!v3804)
    goto LABEL_1841;
  v3805 = 0;
  v3806 = *a4;
  while (2)
  {
    v3807 = *(_QWORD *)(a1 + 232);
    v3808 = *(_DWORD *)(a1 + 256) * v3805;
    v3809 = (uint64_t *)(v3807 + 8 * v3808);
    v3810 = *(_DWORD *)(a1 + 152);
    if (v3810 && *v3809 == -1)
    {
      v3811 = 0;
      v3899 = 8 * (v3810 + v3808) - 8 * v3808 - 8;
      v3900 = v3807 + 8 * v3808;
      while (v3899)
      {
        v3809 = (uint64_t *)(v3900 + 8);
        ++v3811;
        v3901 = *(_QWORD *)(v3900 + 8);
        v3899 -= 8;
        v3900 += 8;
        if (v3901 != -1)
          goto LABEL_1825;
      }
      goto LABEL_1821;
    }
    v3811 = 0;
LABEL_1825:
    v3812 = (uint64_t *)(v3807 + 8 * (v3808 + v3810));
    if (v3809 == v3812)
      goto LABEL_1821;
    v3813 = *v3809;
    v3814 = v3811;
    v3815 = a3[3];
    if (!v2040)
    {
LABEL_1829:
      v3817 = *(_DWORD *)(v3815 + 4 * v3814);
      v3816 = *v3806;
      goto LABEL_1830;
    }
LABEL_1827:
    v3816 = *v3806;
    v3817 = *(_DWORD *)(v3815 + 4 * v3814);
    if (*v3806 >= v3817)
    {
LABEL_1830:
      v3860 = *(_QWORD *)(a1 + 160) + 8 * v3813;
      v3861 = *(unsigned int *)(a2 + 16);
      v3862 = *(_QWORD *)(v3860 + 64);
      v3863 = *(_QWORD *)a2 + 8 * (v3817 + (_DWORD)v3861 * v3816);
      v3864 = *(_OWORD *)(v3860 + 48);
      v3865 = *(_OWORD *)v3860;
      v3866 = *(_OWORD *)(v3860 + 16);
      v3867 = *(_OWORD *)(v3860 + 72);
      v3868 = *(_OWORD *)(v3860 + 88);
      v3869 = *(_OWORD *)(v3860 + 104);
      v3870 = *(_OWORD *)(v3860 + 120);
      v3871 = *(_QWORD *)(v3860 + 136);
      v3872 = *(_OWORD *)(v3860 + 144);
      v3873 = *(_OWORD *)(v3860 + 160);
      v3874 = *(_OWORD *)(v3860 + 176);
      v3875 = *(_OWORD *)(v3860 + 192);
      v3876 = *(_QWORD *)(v3860 + 208);
      v3877 = *(_OWORD *)(v3860 + 232);
      v3878 = *(_OWORD *)(v3860 + 248);
      v3879 = *(_QWORD *)(v3860 + 280);
      v3880 = *(_OWORD *)(v3860 + 288);
      v3881 = *(_OWORD *)(v3860 + 304);
      v3882 = *(_OWORD *)(v3860 + 320);
      v3883 = *(_OWORD *)(v3860 + 336);
      v3884 = *(_QWORD *)(v3860 + 352);
      v3885 = *(_QWORD *)(v3860 + 424);
      v3886 = *(_OWORD *)(v3860 + 216);
      v3887 = *(_OWORD *)(v3860 + 264);
      v3888 = *(_OWORD *)(v3860 + 360);
      v3889 = *(_OWORD *)(v3860 + 376);
      v3890 = *(_OWORD *)(v3860 + 392);
      v3891 = *(_OWORD *)(v3860 + 408);
      *(_OWORD *)(v3863 + 32) = *(_OWORD *)(v3860 + 32);
      *(_OWORD *)(v3863 + 48) = v3864;
      *(_QWORD *)(v3863 + 64) = v3862;
      *(_OWORD *)v3863 = v3865;
      *(_OWORD *)(v3863 + 16) = v3866;
      v3892 = v3863 + 8 * v3861;
      *(_QWORD *)(v3892 + 64) = v3871;
      *(_OWORD *)(v3892 + 32) = v3869;
      *(_OWORD *)(v3892 + 48) = v3870;
      *(_OWORD *)v3892 = v3867;
      *(_OWORD *)(v3892 + 16) = v3868;
      v3893 = v3863 + 16 * v3861;
      *(_QWORD *)(v3893 + 64) = v3876;
      *(_OWORD *)(v3893 + 32) = v3874;
      *(_OWORD *)(v3893 + 48) = v3875;
      *(_OWORD *)v3893 = v3872;
      *(_OWORD *)(v3893 + 16) = v3873;
      v3894 = v3863 + 24 * v3861;
      *(_QWORD *)(v3894 + 64) = v3879;
      *(_OWORD *)(v3894 + 32) = v3878;
      *(_OWORD *)(v3894 + 48) = v3887;
      *(_OWORD *)v3894 = v3886;
      *(_OWORD *)(v3894 + 16) = v3877;
      v3895 = v3863 + 32 * v3861;
      *(_QWORD *)(v3895 + 64) = v3884;
      *(_OWORD *)(v3895 + 32) = v3882;
      *(_OWORD *)(v3895 + 48) = v3883;
      *(_OWORD *)v3895 = v3880;
      *(_OWORD *)(v3895 + 16) = v3881;
      v3896 = v3863 + 40 * v3861;
      *(_QWORD *)(v3896 + 64) = v3885;
      *(_OWORD *)(v3896 + 32) = v3890;
      *(_OWORD *)(v3896 + 48) = v3891;
      *(_OWORD *)v3896 = v3888;
      *(_OWORD *)(v3896 + 16) = v3889;
      goto LABEL_1831;
    }
    v3818 = *(unsigned int *)(a2 + 16);
    v3819 = *(_QWORD *)(a1 + 160) + 8 * v3813;
    v3820.i64[0] = *(_QWORD *)(v3819 + 64);
    v3821 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v3816 + (_DWORD)v3818 * v3817));
    v3823 = *(int64x2_t *)(v3819 + 32);
    v3822 = *(int64x2_t *)(v3819 + 48);
    v3824 = *(int64x2_t *)(v3819 + 16);
    v3825 = *(int64x2_t *)(v3819 + 120);
    v3826 = *(int64x2_t *)(v3819 + 104);
    v3827 = *(int64x2_t *)(v3819 + 88);
    v3828 = *(int64x2_t *)(v3819 + 72);
    v3829.i64[0] = *(_QWORD *)(v3819 + 208);
    v3831 = *(int64x2_t *)(v3819 + 176);
    v3830 = *(int64x2_t *)(v3819 + 192);
    v3833 = *(int64x2_t *)(v3819 + 144);
    v3832 = *(int64x2_t *)(v3819 + 160);
    v3834 = *(int64x2_t *)(v3819 + 248);
    v3835 = *(int64x2_t *)(v3819 + 232);
    v3836.i64[0] = *(_QWORD *)(v3819 + 352);
    v3838 = *(int64x2_t *)(v3819 + 320);
    v3837 = *(int64x2_t *)(v3819 + 336);
    v3840 = *(int64x2_t *)(v3819 + 288);
    v3839 = *(int64x2_t *)(v3819 + 304);
    v3841 = *(int64x2_t *)(v3819 + 216);
    v3842 = *(int64x2_t *)(v3819 + 264);
    v3843 = *(int64x2_t *)(v3819 + 392);
    v3844 = *(int64x2_t *)(v3819 + 408);
    v3845 = *(int64x2_t *)(v3819 + 376);
    v3846 = vzip1q_s64(*(int64x2_t *)v3819, v3828);
    v3847 = vzip1q_s64(v3840, *(int64x2_t *)(v3819 + 360));
    v3848 = vzip1q_s64(v3833, v3841);
    v3849 = vzip2q_s64(*(int64x2_t *)v3819, v3828);
    v3850 = vzip2q_s64(v3833, v3841);
    v3851 = vzip2q_s64(v3840, *(int64x2_t *)(v3819 + 360));
    v3820.i64[1] = *(_QWORD *)(v3819 + 136);
    v3829.i64[1] = *(_QWORD *)(v3819 + 280);
    v3836.i64[1] = *(_QWORD *)(v3819 + 424);
    v3821[1] = v3848;
    v3821[2] = v3847;
    *v3821 = v3846;
    v3852 = (int64x2_t *)((char *)v3821 + 8 * v3818);
    v3852[1] = v3850;
    v3852[2] = v3851;
    *v3852 = v3849;
    v3853 = &v3821[v3818];
    v3853[1] = vzip1q_s64(v3832, v3835);
    v3853[2] = vzip1q_s64(v3839, v3845);
    *v3853 = vzip1q_s64(v3824, v3827);
    v3854 = (int64x2_t *)((char *)v3821 + 24 * v3818);
    v3854[1] = vzip2q_s64(v3832, v3835);
    v3854[2] = vzip2q_s64(v3839, v3845);
    *v3854 = vzip2q_s64(v3824, v3827);
    v3855 = &v3821[2 * v3818];
    v3855[1] = vzip1q_s64(v3831, v3834);
    v3855[2] = vzip1q_s64(v3838, v3843);
    *v3855 = vzip1q_s64(v3823, v3826);
    v3856 = (int64x2_t *)((char *)v3821 + 40 * v3818);
    v3856[1] = vzip2q_s64(v3831, v3834);
    v3856[2] = vzip2q_s64(v3838, v3843);
    *v3856 = vzip2q_s64(v3823, v3826);
    v3857 = &v3821[3 * v3818];
    v3857[1] = vzip1q_s64(v3830, v3842);
    v3857[2] = vzip1q_s64(v3837, v3844);
    *v3857 = vzip1q_s64(v3822, v3825);
    v3858 = (int64x2_t *)((char *)v3821 + 56 * v3818);
    v3858[1] = vzip2q_s64(v3830, v3842);
    v3858[2] = vzip2q_s64(v3837, v3844);
    *v3858 = vzip2q_s64(v3822, v3825);
    v3859 = &v3821[4 * v3818];
    v3859[1] = v3829;
    v3859[2] = v3836;
    *v3859 = v3820;
LABEL_1831:
    v3897 = v3809 + 1;
    while (v3897 != v3812)
    {
      ++v3811;
      v3898 = *v3897++;
      v3813 = v3898;
      if (v3898 != -1)
      {
        v3809 = v3897 - 1;
        v3814 = v3811;
        v3815 = a3[3];
        if (v2040)
          goto LABEL_1827;
        goto LABEL_1829;
      }
    }
    v3804 = *(_DWORD *)(a1 + 156);
LABEL_1821:
    ++v3805;
    ++v3806;
    if (v3805 < v3804)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1841:
  v3902 = *(_DWORD *)(a1 + 1596);
  if (!v3902)
    goto LABEL_1864;
  v3903 = 0;
  v3904 = a4[3];
  while (2)
  {
    v3905 = *(_QWORD *)(a1 + 1672);
    v3906 = *(_DWORD *)(a1 + 1696) * v3903;
    v3907 = (uint64_t *)(v3905 + 8 * v3906);
    v3908 = *(_DWORD *)(a1 + 1592);
    if (v3908 && *v3907 == -1)
    {
      v3909 = 0;
      v4034 = 8 * (v3908 + v3906) - 8 * v3906 - 8;
      v4035 = v3905 + 8 * v3906;
      while (v4034)
      {
        v3907 = (uint64_t *)(v4035 + 8);
        ++v3909;
        v4036 = *(_QWORD *)(v4035 + 8);
        v4034 -= 8;
        v4035 += 8;
        if (v4036 != -1)
          goto LABEL_1848;
      }
      goto LABEL_1844;
    }
    v3909 = 0;
LABEL_1848:
    v3910 = (uint64_t *)(v3905 + 8 * (v3906 + v3908));
    if (v3907 == v3910)
      goto LABEL_1844;
    v3911 = *v3907;
    v3912 = v3909;
    v3913 = a3[3];
    if (!v2040)
    {
LABEL_1852:
      v3915 = *(_DWORD *)(v3913 + 4 * v3912);
      v3914 = *v3904;
      goto LABEL_1853;
    }
LABEL_1850:
    v3914 = *v3904;
    v3915 = *(_DWORD *)(v3913 + 4 * v3912);
    if (*v3904 >= v3915)
    {
LABEL_1853:
      v3956 = *(unsigned int *)(a2 + 16);
      v3985 = *(_QWORD *)(a1 + 1600) + 8 * v3911;
      v5251 = *(_QWORD *)(v3985 + 64);
      v3957 = *(_QWORD *)a2 + 8 * (v3915 + (_DWORD)v3956 * v3914);
      v5244 = *(_OWORD *)(v3985 + 48);
      v5247 = *(_OWORD *)v3985;
      v5254 = *(_OWORD *)(v3985 + 88);
      v5257 = *(_OWORD *)(v3985 + 72);
      v5249 = *(_OWORD *)(v3985 + 104);
      v5239 = *(_OWORD *)(v3985 + 120);
      v5241 = *(_OWORD *)(v3985 + 16);
      v3986 = *(_QWORD *)(v3985 + 136);
      v3987 = *(int8x16_t *)(v3985 + 176);
      v3988 = *(int8x16_t *)(v3985 + 192);
      v3989 = *(int8x16_t *)(v3985 + 144);
      v3990 = *(int8x16_t *)(v3985 + 160);
      v5225 = *(_QWORD *)(v3985 + 208);
      v3991 = *(int8x16_t *)(v3985 + 248);
      v3992 = *(int8x16_t *)(v3985 + 232);
      v5227 = *(_QWORD *)(v3985 + 280);
      v3993 = *(int8x16_t *)(v3985 + 320);
      v3994 = *(int8x16_t *)(v3985 + 336);
      v3996 = *(int8x16_t *)(v3985 + 288);
      v3995 = *(int8x16_t *)(v3985 + 304);
      v5231 = *(_QWORD *)(v3985 + 352);
      v5228 = *(_QWORD *)(v3985 + 424);
      v3997 = *(int8x16_t *)(v3985 + 480);
      v5206 = *(int8x16_t *)(v3985 + 464);
      v3998 = *(int8x16_t *)(v3985 + 432);
      v3999 = *(int8x16_t *)(v3985 + 448);
      v5233 = *(_QWORD *)(v3985 + 496);
      v5229 = *(_QWORD *)(v3985 + 568);
      v4001 = *(int8x16_t *)(v3985 + 608);
      v4000 = *(int8x16_t *)(v3985 + 624);
      v3965 = *(int8x16_t *)(v3985 + 576);
      v4002 = *(int8x16_t *)(v3985 + 592);
      v5220 = *(_QWORD *)(v3985 + 640);
      v3964 = *(int8x16_t *)(v3985 + 216);
      v3939 = *(int8x16_t *)(v3985 + 264);
      v3974 = *(int8x16_t *)(v3985 + 392);
      v3946 = *(int8x16_t *)(v3985 + 408);
      v3941 = *(int8x16_t *)(v3985 + 360);
      v3943 = *(int8x16_t *)(v3985 + 376);
      v4003 = *(int8x16_t *)(v3985 + 536);
      v3955 = *(int8x16_t *)(v3985 + 552);
      v3969 = *(int8x16_t *)(v3985 + 504);
      v3951 = *(int8x16_t *)(v3985 + 520);
      *(_OWORD *)(v3957 + 32) = *(_OWORD *)(v3985 + 32);
      *(_OWORD *)(v3957 + 48) = v5244;
      *(_QWORD *)(v3957 + 64) = v5251;
      *(_OWORD *)v3957 = v5247;
      *(_OWORD *)(v3957 + 16) = v5241;
      v4004 = v3957 + 8 * v3956;
      *(_QWORD *)(v4004 + 64) = v3986;
      *(_OWORD *)(v4004 + 32) = v5249;
      *(_OWORD *)(v4004 + 48) = v5239;
      *(_OWORD *)v4004 = v5257;
      *(_OWORD *)(v4004 + 16) = v5254;
      v5256 = v3988.i64[0];
      v5243 = v3987.i64[0];
      v4005 = vextq_s8(v3987, v3987, 8uLL).u64[0];
      v5221 = v3989.i64[0];
      v5222 = v3990.i64[0];
      v3963 = vextq_s8(v3990, v3990, 8uLL).u64[0];
      v3973 = vextq_s8(v3989, v3989, 8uLL).u64[0];
      v5253 = v3991.i64[0];
      v5211 = vextq_s8(v3991, v3991, 8uLL).u64[0];
      v5218 = v3993.i64[0];
      v5219 = v3992.i64[0];
      v3968 = vextq_s8(v3992, v3992, 8uLL).u64[0];
      v3967 = vextq_s8(v3939, v3939, 8uLL).u64[0];
      v5216 = v3994.i64[0];
      v4006 = vextq_s8(v3993, v3993, 8uLL).u64[0];
      v5246 = v3995.i64[0];
      v5217 = v3996.i64[0];
      v3982 = vextq_s8(v3996, v3996, 8uLL).u64[0];
      v5214 = vextq_s8(v3946, v3946, 8uLL).u64[0];
      v5212 = v3997.i64[0];
      v5213 = vextq_s8(v3974, v3974, 8uLL).u64[0];
      v3975 = vextq_s8(v3943, v3943, 8uLL).u64[0];
      v5215 = vextq_s8(v3941, v3941, 8uLL).u64[0];
      v5210 = vextq_s8(v3997, v3997, 8uLL).u64[0];
      v3966 = vextq_s8(v3964, v3964, 8uLL).u64[0];
      v3978 = vextq_s8(v5206, v5206, 8uLL).u64[0];
      v5235 = v3999.i64[0];
      v5237 = v3998.i64[0];
      v5209 = vextq_s8(v3999, v3999, 8uLL).u64[0];
      v3977 = vextq_s8(v3998, v3998, 8uLL).u64[0];
      v5208 = vextq_s8(v3955, v3955, 8uLL).u64[0];
      v3979 = v4003.i64[0];
      v3980 = vextq_s8(v4003, v4003, 8uLL).u64[0];
      v3983 = vextq_s8(v3951, v3951, 8uLL).u64[0];
      v5207 = vextq_s8(v3969, v3969, 8uLL).u64[0];
      v5238 = v4000.i64[0];
      v5223 = vextq_s8(v4000, v4000, 8uLL).u64[0];
      v5240 = v4001.i64[0];
      v5224 = vextq_s8(v4001, v4001, 8uLL).u64[0];
      v3972 = v4005;
      v3976 = vextq_s8(v3995, v3995, 8uLL).u64[0];
      v5248 = v3965.i64[0];
      v5250 = v4002.i64[0];
      v3981 = vextq_s8(v4002, v4002, 8uLL).u64[0];
      v5226 = vextq_s8(v3965, v3965, 8uLL).u64[0];
      v3984 = vextq_s8(v3988, v3988, 8uLL).u64[0];
      v3970 = vextq_s8(v3994, v3994, 8uLL).u64[0];
      v3965.i64[0] = v5206.i64[0];
      v3971 = v4006;
      goto LABEL_1854;
    }
    v3916 = *(_QWORD *)(a1 + 1600) + 8 * v3911;
    v3918 = *(int8x16_t *)(v3916 + 16);
    v3917 = *(int64x2_t *)(v3916 + 32);
    v3919 = *(int64x2_t *)(v3916 + 120);
    v3920 = *(int64x2_t *)(v3916 + 104);
    v3921 = *(int64x2_t *)(v3916 + 88);
    v3922 = *(int8x16_t *)(v3916 + 72);
    v3923 = *(int64x2_t *)(v3916 + 176);
    v3924 = *(int64x2_t *)(v3916 + 192);
    v3926 = *(int64x2_t *)(v3916 + 144);
    v3925 = *(int64x2_t *)(v3916 + 160);
    v3927 = *(int64x2_t *)(v3916 + 320);
    v3928 = *(int64x2_t *)(v3916 + 336);
    v3930 = *(int64x2_t *)(v3916 + 288);
    v3929 = *(int64x2_t *)(v3916 + 304);
    v3931 = *(int64x2_t *)(v3916 + 464);
    v3932 = *(int64x2_t *)(v3916 + 480);
    v3934 = *(int8x16_t *)(v3916 + 432);
    v3933 = *(int64x2_t *)(v3916 + 448);
    v5242 = vzip1q_s64(v3926, *(int64x2_t *)(v3916 + 216));
    v3926.i64[0] = vdupq_laneq_s64(v3926, 1).u64[0];
    v3926.i64[1] = *(_QWORD *)(v3916 + 224);
    v5255 = v3926;
    v5234 = vzip1q_s64(*(int64x2_t *)v3916, (int64x2_t)v3922);
    v5252 = vzip2q_s64(*(int64x2_t *)v3916, (int64x2_t)v3922);
    v5232 = vzip1q_s64(v3930, *(int64x2_t *)(v3916 + 360));
    *(_QWORD *)&v3935 = vdupq_laneq_s64(v3930, 1).u64[0];
    *((_QWORD *)&v3935 + 1) = *(_QWORD *)(v3916 + 368);
    v5245 = v3935;
    v5230 = vzip1q_s64((int64x2_t)v3934, *(int64x2_t *)(v3916 + 504));
    *(_QWORD *)&v3935 = vdupq_laneq_s64((int64x2_t)v3934, 1).u64[0];
    *((_QWORD *)&v3935 + 1) = *(_QWORD *)(v3916 + 512);
    v5236 = v3935;
    v3974 = (int8x16_t)vzip1q_s64((int64x2_t)v3918, v3921);
    v3936 = (int8x16_t)vzip2q_s64((int64x2_t)v3918, v3921);
    v3964 = (int8x16_t)vzip1q_s64(v3925, *(int64x2_t *)(v3916 + 232));
    v3918.i64[0] = vdupq_laneq_s64(v3925, 1).u64[0];
    v3918.i64[1] = *(_QWORD *)(v3916 + 240);
    v3937 = (int8x16_t)vzip1q_s64(v3929, *(int64x2_t *)(v3916 + 376));
    v3934.i64[0] = vdupq_laneq_s64(v3929, 1).u64[0];
    v3934.i64[1] = *(_QWORD *)(v3916 + 384);
    v3938 = (int8x16_t)vzip1q_s64(v3933, *(int64x2_t *)(v3916 + 520));
    v3939.i64[0] = vdupq_laneq_s64(v3933, 1).u64[0];
    v3939.i64[1] = *(_QWORD *)(v3916 + 528);
    v3940 = (int8x16_t)vzip1q_s64(v3917, v3920);
    v3941 = (int8x16_t)vzip2q_s64(v3917, v3920);
    v3942 = (int8x16_t)vzip1q_s64(v3923, *(int64x2_t *)(v3916 + 248));
    v3943.i64[0] = vdupq_laneq_s64(v3923, 1).u64[0];
    v3943.i64[1] = *(_QWORD *)(v3916 + 256);
    v3944 = (int8x16_t)vzip1q_s64(v3927, *(int64x2_t *)(v3916 + 392));
    v3922.i64[0] = vdupq_laneq_s64(v3927, 1).u64[0];
    v3922.i64[1] = *(_QWORD *)(v3916 + 400);
    v3946.i64[0] = vdupq_laneq_s64(v3931, 1).u64[0];
    v3945 = (int8x16_t)vzip1q_s64(v3931, *(int64x2_t *)(v3916 + 536));
    v3946.i64[1] = *(_QWORD *)(v3916 + 544);
    v3947 = *(int64x2_t *)(v3916 + 48);
    v3948 = (int8x16_t)vzip1q_s64(v3947, v3919);
    v3949 = vzip2q_s64(v3947, v3919);
    v3950 = (int8x16_t)vzip1q_s64(v3924, *(int64x2_t *)(v3916 + 264));
    v3951.i64[0] = vdupq_laneq_s64(v3924, 1).u64[0];
    v3951.i64[1] = *(_QWORD *)(v3916 + 272);
    v3952.i64[0] = vdupq_laneq_s64(v3928, 1).u64[0];
    v3953 = vzip1q_s64(v3928, *(int64x2_t *)(v3916 + 408));
    v3952.i64[1] = *(_QWORD *)(v3916 + 416);
    v3955.i64[0] = vdupq_laneq_s64(v3932, 1).u64[0];
    v3954 = (int8x16_t)vzip1q_s64(v3932, *(int64x2_t *)(v3916 + 552));
    v3955.i64[1] = *(_QWORD *)(v3916 + 560);
    v3956 = *(unsigned int *)(a2 + 16);
    v3957 = *(_QWORD *)a2 + 8 * (v3914 + (_DWORD)v3956 * v3915);
    v5248 = *(_QWORD *)(v3916 + 64);
    v5226 = *(_QWORD *)(v3916 + 136);
    v5250 = *(_QWORD *)(v3916 + 208);
    v3925.i64[0] = *(_QWORD *)(v3916 + 280);
    v5240 = *(_QWORD *)(v3916 + 352);
    v5224 = *(_QWORD *)(v3916 + 424);
    v5238 = *(_QWORD *)(v3916 + 496);
    v5223 = *(_QWORD *)(v3916 + 568);
    v5220 = *(_QWORD *)(v3916 + 640);
    v3959 = *(int8x16_t *)(v3916 + 608);
    v3958 = *(int8x16_t *)(v3916 + 624);
    v3960 = *(_OWORD *)(v3916 + 576);
    v3961 = *(int8x16_t *)(v3916 + 592);
    *(int64x2_t *)(v3957 + 32) = v5232;
    *(int64x2_t *)(v3957 + 48) = v5230;
    *(int64x2_t *)(v3957 + 16) = v5242;
    *(int64x2_t *)v3957 = v5234;
    v3962 = v3957 + 8 * v3956;
    *(_QWORD *)(v3957 + 64) = v3960;
    *(_QWORD *)(v3962 + 64) = *((_QWORD *)&v3960 + 1);
    *(_OWORD *)(v3962 + 32) = v5245;
    *(_OWORD *)(v3962 + 48) = v5236;
    *(int64x2_t *)v3962 = v5252;
    *(int64x2_t *)(v3962 + 16) = v5255;
    v5221 = v3974.i64[0];
    v5222 = v3964.i64[0];
    v3963 = vextq_s8(v3964, v3964, 8uLL).u64[0];
    v3964.i64[0] = v3936.i64[0];
    v5256 = v3938.i64[0];
    v5205 = vextq_s8(v3938, v3938, 8uLL).u64[0];
    v3965 = (int8x16_t)v3953;
    v5243 = v3937.i64[0];
    v3966 = vextq_s8(v3936, v3936, 8uLL).u64[0];
    v3967 = vextq_s8(v3939, v3939, 8uLL).u64[0];
    v5253 = v3934.i64[0];
    v5211 = vextq_s8(v3934, v3934, 8uLL).u64[0];
    v5219 = v3918.i64[0];
    v3968 = vextq_s8(v3918, v3918, 8uLL).u64[0];
    v5225 = v3961.i64[0];
    v5227 = vextq_s8(v3961, v3961, 8uLL).u64[0];
    v5246 = v3942.i64[0];
    v5216 = v3945.i64[0];
    v5217 = v3940.i64[0];
    v3961.i64[0] = vextq_s8(v3940, v3940, 8uLL).u64[0];
    v3969 = (int8x16_t)v3949;
    v3970 = vextq_s8(v3945, v3945, 8uLL).u64[0];
    v5218 = v3944.i64[0];
    v3971 = vextq_s8(v3944, v3944, 8uLL).u64[0];
    v3972 = vextq_s8(v3937, v3937, 8uLL).u64[0];
    v3973 = vextq_s8(v3974, v3974, 8uLL).u64[0];
    v3974.i64[0] = v3922.i64[0];
    v5215 = vextq_s8(v3941, v3941, 8uLL).u64[0];
    v5214 = vextq_s8(v3946, v3946, 8uLL).u64[0];
    v5212 = v3954.i64[0];
    v5213 = vextq_s8(v3922, v3922, 8uLL).u64[0];
    v3975 = vextq_s8(v3943, v3943, 8uLL).u64[0];
    v5231 = v3959.i64[0];
    v5233 = v3958.i64[0];
    v5228 = vextq_s8(v3959, v3959, 8uLL).u64[0];
    v3976 = vextq_s8(v3942, v3942, 8uLL).u64[0];
    v5235 = v3950.i64[0];
    v5237 = v3948.i64[0];
    v3977 = vextq_s8(v3948, v3948, 8uLL).u64[0];
    v5210 = vextq_s8(v3954, v3954, 8uLL).u64[0];
    v3978 = vextq_s8(v3965, v3965, 8uLL).u64[0];
    v5209 = vextq_s8(v3950, v3950, 8uLL).u64[0];
    v5207 = vextq_s8(v3969, v3969, 8uLL).u64[0];
    v5208 = vextq_s8(v3955, v3955, 8uLL).u64[0];
    v3979 = v3952.i64[0];
    v3980 = vextq_s8(v3952, v3952, 8uLL).u64[0];
    v3981 = v3925.i64[0];
    v3982 = v3961.i64[0];
    v3983 = vextq_s8(v3951, v3951, 8uLL).u64[0];
    v5229 = vextq_s8(v3958, v3958, 8uLL).u64[0];
    v3984 = v5205;
LABEL_1854:
    *(_QWORD *)&v4007 = v5221;
    *((_QWORD *)&v4007 + 1) = v3973;
    *(_QWORD *)&v4008 = v5222;
    *((_QWORD *)&v4008 + 1) = v3963;
    *(_QWORD *)&v4009 = v5243;
    *((_QWORD *)&v4009 + 1) = v3972;
    *(_QWORD *)&v4010 = v5256;
    *((_QWORD *)&v4010 + 1) = v3984;
    v3939.i64[1] = v3967;
    *(_QWORD *)&v4011 = v5253;
    *((_QWORD *)&v4011 + 1) = v5211;
    *(_QWORD *)&v4012 = v5218;
    *(_QWORD *)&v4013 = v5219;
    *((_QWORD *)&v4013 + 1) = v3968;
    v3964.i64[1] = v3966;
    *(_QWORD *)&v4014 = v5216;
    *((_QWORD *)&v4014 + 1) = v3970;
    *((_QWORD *)&v4012 + 1) = v3971;
    *(_QWORD *)&v4015 = v5246;
    *((_QWORD *)&v4015 + 1) = v3976;
    *(_QWORD *)&v4016 = v5217;
    *((_QWORD *)&v4016 + 1) = v3982;
    v3946.i64[1] = v5214;
    *(_QWORD *)&v4017 = v5212;
    v3974.i64[1] = v5213;
    v3943.i64[1] = v3975;
    v3941.i64[1] = v5215;
    *((_QWORD *)&v4017 + 1) = v5210;
    v3965.i64[1] = v3978;
    *(_QWORD *)&v4018 = v5235;
    *((_QWORD *)&v4018 + 1) = v5209;
    *(_QWORD *)&v4019 = v5237;
    *((_QWORD *)&v4019 + 1) = v3977;
    v3955.i64[1] = v5208;
    *(_QWORD *)&v4020 = v3979;
    *((_QWORD *)&v4020 + 1) = v3980;
    v3951.i64[1] = v3983;
    v3969.i64[1] = v5207;
    *(_QWORD *)&v4022 = v5238;
    *(_QWORD *)&v4021 = v5240;
    *((_QWORD *)&v4022 + 1) = v5223;
    *((_QWORD *)&v4021 + 1) = v5224;
    *(_QWORD *)&v4023 = v5250;
    *((_QWORD *)&v4023 + 1) = v3981;
    *(_QWORD *)&v4024 = v5248;
    *((_QWORD *)&v4024 + 1) = v5226;
    v4025 = v3957 + 16 * v3956;
    *(_OWORD *)v4025 = v4007;
    *(_OWORD *)(v4025 + 16) = v4008;
    *(_OWORD *)(v4025 + 32) = v4009;
    *(_OWORD *)(v4025 + 48) = v4010;
    *(_QWORD *)(v4025 + 64) = v5225;
    v4026 = v3957 + 24 * v3956;
    *(_QWORD *)(v4026 + 64) = v5227;
    *(_OWORD *)(v4026 + 32) = v4011;
    *(int8x16_t *)(v4026 + 48) = v3939;
    *(int8x16_t *)v4026 = v3964;
    *(_OWORD *)(v4026 + 16) = v4013;
    v4027 = v3957 + 32 * v3956;
    *(_QWORD *)(v4027 + 64) = v5231;
    *(_OWORD *)(v4027 + 32) = v4012;
    *(_OWORD *)(v4027 + 48) = v4014;
    *(_OWORD *)v4027 = v4016;
    *(_OWORD *)(v4027 + 16) = v4015;
    v4028 = (int8x16_t *)(v3957 + 40 * v3956);
    v4028[4].i64[0] = v5228;
    v4028[2] = v3974;
    v4028[3] = v3946;
    *v4028 = v3941;
    v4028[1] = v3943;
    v4029 = v3957 + 48 * v3956;
    *(_QWORD *)(v4029 + 64) = v5233;
    *(int8x16_t *)(v4029 + 32) = v3965;
    *(_OWORD *)(v4029 + 48) = v4017;
    *(_OWORD *)v4029 = v4019;
    *(_OWORD *)(v4029 + 16) = v4018;
    v4030 = v3957 + 56 * v3956;
    *(_QWORD *)(v4030 + 64) = v5229;
    *(_OWORD *)(v4030 + 32) = v4020;
    *(int8x16_t *)(v4030 + 48) = v3955;
    *(int8x16_t *)v4030 = v3969;
    *(int8x16_t *)(v4030 + 16) = v3951;
    v4031 = v3957 + (v3956 << 6);
    *(_QWORD *)(v4031 + 64) = v5220;
    *(_OWORD *)(v4031 + 32) = v4021;
    *(_OWORD *)(v4031 + 48) = v4022;
    v4032 = v3907 + 1;
    *(_OWORD *)v4031 = v4024;
    *(_OWORD *)(v4031 + 16) = v4023;
    while (v4032 != v3910)
    {
      ++v3909;
      v4033 = *v4032++;
      v3911 = v4033;
      if (v4033 != -1)
      {
        v3907 = v4032 - 1;
        v3912 = v3909;
        v3913 = a3[3];
        if (v2040)
          goto LABEL_1850;
        goto LABEL_1852;
      }
    }
    v3902 = *(_DWORD *)(a1 + 1596);
LABEL_1844:
    ++v3903;
    ++v3904;
    if (v3903 < v3902)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1864:
  v4037 = *(_DWORD *)(a1 + 3036);
  if (!v4037)
    goto LABEL_1887;
  v4038 = 0;
  v4039 = a4[6];
  while (2)
  {
    v4040 = *(_QWORD *)(a1 + 3112);
    v4041 = *(_DWORD *)(a1 + 3136) * v4038;
    v4042 = (uint64_t *)(v4040 + 8 * v4041);
    v4043 = *(_DWORD *)(a1 + 3032);
    if (v4043 && *v4042 == -1)
    {
      v4044 = 0;
      v4132 = 8 * (v4043 + v4041) - 8 * v4041 - 8;
      v4133 = v4040 + 8 * v4041;
      while (v4132)
      {
        v4042 = (uint64_t *)(v4133 + 8);
        ++v4044;
        v4134 = *(_QWORD *)(v4133 + 8);
        v4132 -= 8;
        v4133 += 8;
        if (v4134 != -1)
          goto LABEL_1871;
      }
      goto LABEL_1867;
    }
    v4044 = 0;
LABEL_1871:
    v4045 = (uint64_t *)(v4040 + 8 * (v4041 + v4043));
    if (v4042 == v4045)
      goto LABEL_1867;
    v4046 = *v4042;
    v4047 = v4044;
    v4048 = a3[3];
    if (!v2040)
    {
LABEL_1875:
      v4050 = *(_DWORD *)(v4048 + 4 * v4047);
      v4049 = *v4039;
      goto LABEL_1876;
    }
LABEL_1873:
    v4049 = *v4039;
    v4050 = *(_DWORD *)(v4048 + 4 * v4047);
    if (*v4039 >= v4050)
    {
LABEL_1876:
      v4093 = *(_QWORD *)(a1 + 3040) + 8 * v4046;
      v4094 = *(unsigned int *)(a2 + 16);
      v4095 = *(_QWORD *)(v4093 + 64);
      v4096 = *(_QWORD *)a2 + 8 * (v4050 + (_DWORD)v4094 * v4049);
      v4097 = *(_OWORD *)(v4093 + 48);
      v4098 = *(_OWORD *)v4093;
      v4099 = *(_OWORD *)(v4093 + 16);
      v4100 = *(_OWORD *)(v4093 + 72);
      v4101 = *(_OWORD *)(v4093 + 88);
      v4102 = *(_OWORD *)(v4093 + 104);
      v4103 = *(_OWORD *)(v4093 + 120);
      v4104 = *(_QWORD *)(v4093 + 136);
      v4105 = *(_OWORD *)(v4093 + 144);
      v4106 = *(_OWORD *)(v4093 + 160);
      v4107 = *(_OWORD *)(v4093 + 176);
      v4108 = *(_OWORD *)(v4093 + 192);
      v4109 = *(_QWORD *)(v4093 + 208);
      v4110 = *(_OWORD *)(v4093 + 232);
      v4111 = *(_OWORD *)(v4093 + 248);
      v4112 = *(_QWORD *)(v4093 + 280);
      v4113 = *(_OWORD *)(v4093 + 288);
      v4114 = *(_OWORD *)(v4093 + 304);
      v4115 = *(_OWORD *)(v4093 + 320);
      v4116 = *(_OWORD *)(v4093 + 336);
      v4117 = *(_QWORD *)(v4093 + 352);
      v4118 = *(_QWORD *)(v4093 + 424);
      v4119 = *(_OWORD *)(v4093 + 216);
      v4120 = *(_OWORD *)(v4093 + 264);
      v4121 = *(_OWORD *)(v4093 + 360);
      v4122 = *(_OWORD *)(v4093 + 376);
      v4123 = *(_OWORD *)(v4093 + 392);
      v4124 = *(_OWORD *)(v4093 + 408);
      *(_OWORD *)(v4096 + 32) = *(_OWORD *)(v4093 + 32);
      *(_OWORD *)(v4096 + 48) = v4097;
      *(_QWORD *)(v4096 + 64) = v4095;
      *(_OWORD *)v4096 = v4098;
      *(_OWORD *)(v4096 + 16) = v4099;
      v4125 = v4096 + 8 * v4094;
      *(_QWORD *)(v4125 + 64) = v4104;
      *(_OWORD *)(v4125 + 32) = v4102;
      *(_OWORD *)(v4125 + 48) = v4103;
      *(_OWORD *)v4125 = v4100;
      *(_OWORD *)(v4125 + 16) = v4101;
      v4126 = v4096 + 16 * v4094;
      *(_QWORD *)(v4126 + 64) = v4109;
      *(_OWORD *)(v4126 + 32) = v4107;
      *(_OWORD *)(v4126 + 48) = v4108;
      *(_OWORD *)v4126 = v4105;
      *(_OWORD *)(v4126 + 16) = v4106;
      v4127 = v4096 + 24 * v4094;
      *(_QWORD *)(v4127 + 64) = v4112;
      *(_OWORD *)(v4127 + 32) = v4111;
      *(_OWORD *)(v4127 + 48) = v4120;
      *(_OWORD *)v4127 = v4119;
      *(_OWORD *)(v4127 + 16) = v4110;
      v4128 = v4096 + 32 * v4094;
      *(_QWORD *)(v4128 + 64) = v4117;
      *(_OWORD *)(v4128 + 32) = v4115;
      *(_OWORD *)(v4128 + 48) = v4116;
      *(_OWORD *)v4128 = v4113;
      *(_OWORD *)(v4128 + 16) = v4114;
      v4129 = v4096 + 40 * v4094;
      *(_QWORD *)(v4129 + 64) = v4118;
      *(_OWORD *)(v4129 + 32) = v4123;
      *(_OWORD *)(v4129 + 48) = v4124;
      *(_OWORD *)v4129 = v4121;
      *(_OWORD *)(v4129 + 16) = v4122;
      goto LABEL_1877;
    }
    v4051 = *(unsigned int *)(a2 + 16);
    v4052 = *(_QWORD *)(a1 + 3040) + 8 * v4046;
    v4053.i64[0] = *(_QWORD *)(v4052 + 64);
    v4054 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4049 + (_DWORD)v4051 * v4050));
    v4056 = *(int64x2_t *)(v4052 + 32);
    v4055 = *(int64x2_t *)(v4052 + 48);
    v4057 = *(int64x2_t *)(v4052 + 16);
    v4058 = *(int64x2_t *)(v4052 + 120);
    v4059 = *(int64x2_t *)(v4052 + 104);
    v4060 = *(int64x2_t *)(v4052 + 88);
    v4061 = *(int64x2_t *)(v4052 + 72);
    v4062.i64[0] = *(_QWORD *)(v4052 + 208);
    v4064 = *(int64x2_t *)(v4052 + 176);
    v4063 = *(int64x2_t *)(v4052 + 192);
    v4066 = *(int64x2_t *)(v4052 + 144);
    v4065 = *(int64x2_t *)(v4052 + 160);
    v4067 = *(int64x2_t *)(v4052 + 248);
    v4068 = *(int64x2_t *)(v4052 + 232);
    v4069.i64[0] = *(_QWORD *)(v4052 + 352);
    v4071 = *(int64x2_t *)(v4052 + 320);
    v4070 = *(int64x2_t *)(v4052 + 336);
    v4073 = *(int64x2_t *)(v4052 + 288);
    v4072 = *(int64x2_t *)(v4052 + 304);
    v4074 = *(int64x2_t *)(v4052 + 216);
    v4075 = *(int64x2_t *)(v4052 + 264);
    v4076 = *(int64x2_t *)(v4052 + 392);
    v4077 = *(int64x2_t *)(v4052 + 408);
    v4078 = *(int64x2_t *)(v4052 + 376);
    v4079 = vzip1q_s64(*(int64x2_t *)v4052, v4061);
    v4080 = vzip1q_s64(v4073, *(int64x2_t *)(v4052 + 360));
    v4081 = vzip1q_s64(v4066, v4074);
    v4082 = vzip2q_s64(*(int64x2_t *)v4052, v4061);
    v4083 = vzip2q_s64(v4066, v4074);
    v4084 = vzip2q_s64(v4073, *(int64x2_t *)(v4052 + 360));
    v4053.i64[1] = *(_QWORD *)(v4052 + 136);
    v4062.i64[1] = *(_QWORD *)(v4052 + 280);
    v4069.i64[1] = *(_QWORD *)(v4052 + 424);
    v4054[1] = v4081;
    v4054[2] = v4080;
    *v4054 = v4079;
    v4085 = (int64x2_t *)((char *)v4054 + 8 * v4051);
    v4085[1] = v4083;
    v4085[2] = v4084;
    *v4085 = v4082;
    v4086 = &v4054[v4051];
    v4086[1] = vzip1q_s64(v4065, v4068);
    v4086[2] = vzip1q_s64(v4072, v4078);
    *v4086 = vzip1q_s64(v4057, v4060);
    v4087 = (int64x2_t *)((char *)v4054 + 24 * v4051);
    v4087[1] = vzip2q_s64(v4065, v4068);
    v4087[2] = vzip2q_s64(v4072, v4078);
    *v4087 = vzip2q_s64(v4057, v4060);
    v4088 = &v4054[2 * v4051];
    v4088[1] = vzip1q_s64(v4064, v4067);
    v4088[2] = vzip1q_s64(v4071, v4076);
    *v4088 = vzip1q_s64(v4056, v4059);
    v4089 = (int64x2_t *)((char *)v4054 + 40 * v4051);
    v4089[1] = vzip2q_s64(v4064, v4067);
    v4089[2] = vzip2q_s64(v4071, v4076);
    *v4089 = vzip2q_s64(v4056, v4059);
    v4090 = &v4054[3 * v4051];
    v4090[1] = vzip1q_s64(v4063, v4075);
    v4090[2] = vzip1q_s64(v4070, v4077);
    *v4090 = vzip1q_s64(v4055, v4058);
    v4091 = (int64x2_t *)((char *)v4054 + 56 * v4051);
    v4091[1] = vzip2q_s64(v4063, v4075);
    v4091[2] = vzip2q_s64(v4070, v4077);
    *v4091 = vzip2q_s64(v4055, v4058);
    v4092 = &v4054[4 * v4051];
    v4092[1] = v4062;
    v4092[2] = v4069;
    *v4092 = v4053;
LABEL_1877:
    v4130 = v4042 + 1;
    while (v4130 != v4045)
    {
      ++v4044;
      v4131 = *v4130++;
      v4046 = v4131;
      if (v4131 != -1)
      {
        v4042 = v4130 - 1;
        v4047 = v4044;
        v4048 = a3[3];
        if (v2040)
          goto LABEL_1873;
        goto LABEL_1875;
      }
    }
    v4037 = *(_DWORD *)(a1 + 3036);
LABEL_1867:
    ++v4038;
    ++v4039;
    if (v4038 < v4037)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1887:
  v4135 = *(_DWORD *)(a1 + 4476);
  if (!v4135)
    goto LABEL_1910;
  v4136 = 0;
  v4137 = a4[9];
  while (2)
  {
    v4138 = *(_QWORD *)(a1 + 4552);
    v4139 = *(_DWORD *)(a1 + 4576) * v4136;
    v4140 = (uint64_t *)(v4138 + 8 * v4139);
    v4141 = *(_DWORD *)(a1 + 4472);
    if (v4141 && *v4140 == -1)
    {
      v4142 = 0;
      v4230 = 8 * (v4141 + v4139) - 8 * v4139 - 8;
      v4231 = v4138 + 8 * v4139;
      while (v4230)
      {
        v4140 = (uint64_t *)(v4231 + 8);
        ++v4142;
        v4232 = *(_QWORD *)(v4231 + 8);
        v4230 -= 8;
        v4231 += 8;
        if (v4232 != -1)
          goto LABEL_1894;
      }
      goto LABEL_1890;
    }
    v4142 = 0;
LABEL_1894:
    v4143 = (uint64_t *)(v4138 + 8 * (v4139 + v4141));
    if (v4140 == v4143)
      goto LABEL_1890;
    v4144 = *v4140;
    v4145 = v4142;
    v4146 = a3[3];
    if (!v2040)
    {
LABEL_1898:
      v4148 = *(_DWORD *)(v4146 + 4 * v4145);
      v4147 = *v4137;
      goto LABEL_1899;
    }
LABEL_1896:
    v4147 = *v4137;
    v4148 = *(_DWORD *)(v4146 + 4 * v4145);
    if (*v4137 >= v4148)
    {
LABEL_1899:
      v4191 = *(_QWORD *)(a1 + 4480) + 8 * v4144;
      v4192 = *(unsigned int *)(a2 + 16);
      v4193 = *(_QWORD *)(v4191 + 64);
      v4194 = *(_QWORD *)a2 + 8 * (v4148 + (_DWORD)v4192 * v4147);
      v4195 = *(_OWORD *)(v4191 + 48);
      v4196 = *(_OWORD *)v4191;
      v4197 = *(_OWORD *)(v4191 + 16);
      v4198 = *(_OWORD *)(v4191 + 72);
      v4199 = *(_OWORD *)(v4191 + 88);
      v4200 = *(_OWORD *)(v4191 + 104);
      v4201 = *(_OWORD *)(v4191 + 120);
      v4202 = *(_QWORD *)(v4191 + 136);
      v4203 = *(_OWORD *)(v4191 + 144);
      v4204 = *(_OWORD *)(v4191 + 160);
      v4205 = *(_OWORD *)(v4191 + 176);
      v4206 = *(_OWORD *)(v4191 + 192);
      v4207 = *(_QWORD *)(v4191 + 208);
      v4208 = *(_OWORD *)(v4191 + 232);
      v4209 = *(_OWORD *)(v4191 + 248);
      v4210 = *(_QWORD *)(v4191 + 280);
      v4211 = *(_OWORD *)(v4191 + 288);
      v4212 = *(_OWORD *)(v4191 + 304);
      v4213 = *(_OWORD *)(v4191 + 320);
      v4214 = *(_OWORD *)(v4191 + 336);
      v4215 = *(_QWORD *)(v4191 + 352);
      v4216 = *(_QWORD *)(v4191 + 424);
      v4217 = *(_OWORD *)(v4191 + 216);
      v4218 = *(_OWORD *)(v4191 + 264);
      v4219 = *(_OWORD *)(v4191 + 360);
      v4220 = *(_OWORD *)(v4191 + 376);
      v4221 = *(_OWORD *)(v4191 + 392);
      v4222 = *(_OWORD *)(v4191 + 408);
      *(_OWORD *)(v4194 + 32) = *(_OWORD *)(v4191 + 32);
      *(_OWORD *)(v4194 + 48) = v4195;
      *(_QWORD *)(v4194 + 64) = v4193;
      *(_OWORD *)v4194 = v4196;
      *(_OWORD *)(v4194 + 16) = v4197;
      v4223 = v4194 + 8 * v4192;
      *(_QWORD *)(v4223 + 64) = v4202;
      *(_OWORD *)(v4223 + 32) = v4200;
      *(_OWORD *)(v4223 + 48) = v4201;
      *(_OWORD *)v4223 = v4198;
      *(_OWORD *)(v4223 + 16) = v4199;
      v4224 = v4194 + 16 * v4192;
      *(_QWORD *)(v4224 + 64) = v4207;
      *(_OWORD *)(v4224 + 32) = v4205;
      *(_OWORD *)(v4224 + 48) = v4206;
      *(_OWORD *)v4224 = v4203;
      *(_OWORD *)(v4224 + 16) = v4204;
      v4225 = v4194 + 24 * v4192;
      *(_QWORD *)(v4225 + 64) = v4210;
      *(_OWORD *)(v4225 + 32) = v4209;
      *(_OWORD *)(v4225 + 48) = v4218;
      *(_OWORD *)v4225 = v4217;
      *(_OWORD *)(v4225 + 16) = v4208;
      v4226 = v4194 + 32 * v4192;
      *(_QWORD *)(v4226 + 64) = v4215;
      *(_OWORD *)(v4226 + 32) = v4213;
      *(_OWORD *)(v4226 + 48) = v4214;
      *(_OWORD *)v4226 = v4211;
      *(_OWORD *)(v4226 + 16) = v4212;
      v4227 = v4194 + 40 * v4192;
      *(_QWORD *)(v4227 + 64) = v4216;
      *(_OWORD *)(v4227 + 32) = v4221;
      *(_OWORD *)(v4227 + 48) = v4222;
      *(_OWORD *)v4227 = v4219;
      *(_OWORD *)(v4227 + 16) = v4220;
      goto LABEL_1900;
    }
    v4149 = *(unsigned int *)(a2 + 16);
    v4150 = *(_QWORD *)(a1 + 4480) + 8 * v4144;
    v4151.i64[0] = *(_QWORD *)(v4150 + 64);
    v4152 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4147 + (_DWORD)v4149 * v4148));
    v4154 = *(int64x2_t *)(v4150 + 32);
    v4153 = *(int64x2_t *)(v4150 + 48);
    v4155 = *(int64x2_t *)(v4150 + 16);
    v4156 = *(int64x2_t *)(v4150 + 120);
    v4157 = *(int64x2_t *)(v4150 + 104);
    v4158 = *(int64x2_t *)(v4150 + 88);
    v4159 = *(int64x2_t *)(v4150 + 72);
    v4160.i64[0] = *(_QWORD *)(v4150 + 208);
    v4162 = *(int64x2_t *)(v4150 + 176);
    v4161 = *(int64x2_t *)(v4150 + 192);
    v4164 = *(int64x2_t *)(v4150 + 144);
    v4163 = *(int64x2_t *)(v4150 + 160);
    v4165 = *(int64x2_t *)(v4150 + 248);
    v4166 = *(int64x2_t *)(v4150 + 232);
    v4167.i64[0] = *(_QWORD *)(v4150 + 352);
    v4169 = *(int64x2_t *)(v4150 + 320);
    v4168 = *(int64x2_t *)(v4150 + 336);
    v4171 = *(int64x2_t *)(v4150 + 288);
    v4170 = *(int64x2_t *)(v4150 + 304);
    v4172 = *(int64x2_t *)(v4150 + 216);
    v4173 = *(int64x2_t *)(v4150 + 264);
    v4174 = *(int64x2_t *)(v4150 + 392);
    v4175 = *(int64x2_t *)(v4150 + 408);
    v4176 = *(int64x2_t *)(v4150 + 376);
    v4177 = vzip1q_s64(*(int64x2_t *)v4150, v4159);
    v4178 = vzip1q_s64(v4171, *(int64x2_t *)(v4150 + 360));
    v4179 = vzip1q_s64(v4164, v4172);
    v4180 = vzip2q_s64(*(int64x2_t *)v4150, v4159);
    v4181 = vzip2q_s64(v4164, v4172);
    v4182 = vzip2q_s64(v4171, *(int64x2_t *)(v4150 + 360));
    v4151.i64[1] = *(_QWORD *)(v4150 + 136);
    v4160.i64[1] = *(_QWORD *)(v4150 + 280);
    v4167.i64[1] = *(_QWORD *)(v4150 + 424);
    v4152[1] = v4179;
    v4152[2] = v4178;
    *v4152 = v4177;
    v4183 = (int64x2_t *)((char *)v4152 + 8 * v4149);
    v4183[1] = v4181;
    v4183[2] = v4182;
    *v4183 = v4180;
    v4184 = &v4152[v4149];
    v4184[1] = vzip1q_s64(v4163, v4166);
    v4184[2] = vzip1q_s64(v4170, v4176);
    *v4184 = vzip1q_s64(v4155, v4158);
    v4185 = (int64x2_t *)((char *)v4152 + 24 * v4149);
    v4185[1] = vzip2q_s64(v4163, v4166);
    v4185[2] = vzip2q_s64(v4170, v4176);
    *v4185 = vzip2q_s64(v4155, v4158);
    v4186 = &v4152[2 * v4149];
    v4186[1] = vzip1q_s64(v4162, v4165);
    v4186[2] = vzip1q_s64(v4169, v4174);
    *v4186 = vzip1q_s64(v4154, v4157);
    v4187 = (int64x2_t *)((char *)v4152 + 40 * v4149);
    v4187[1] = vzip2q_s64(v4162, v4165);
    v4187[2] = vzip2q_s64(v4169, v4174);
    *v4187 = vzip2q_s64(v4154, v4157);
    v4188 = &v4152[3 * v4149];
    v4188[1] = vzip1q_s64(v4161, v4173);
    v4188[2] = vzip1q_s64(v4168, v4175);
    *v4188 = vzip1q_s64(v4153, v4156);
    v4189 = (int64x2_t *)((char *)v4152 + 56 * v4149);
    v4189[1] = vzip2q_s64(v4161, v4173);
    v4189[2] = vzip2q_s64(v4168, v4175);
    *v4189 = vzip2q_s64(v4153, v4156);
    v4190 = &v4152[4 * v4149];
    v4190[1] = v4160;
    v4190[2] = v4167;
    *v4190 = v4151;
LABEL_1900:
    v4228 = v4140 + 1;
    while (v4228 != v4143)
    {
      ++v4142;
      v4229 = *v4228++;
      v4144 = v4229;
      if (v4229 != -1)
      {
        v4140 = v4228 - 1;
        v4145 = v4142;
        v4146 = a3[3];
        if (v2040)
          goto LABEL_1896;
        goto LABEL_1898;
      }
    }
    v4135 = *(_DWORD *)(a1 + 4476);
LABEL_1890:
    ++v4136;
    ++v4137;
    if (v4136 < v4135)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1910:
  v4233 = *(_DWORD *)(a1 + 5916);
  if (!v4233)
    goto LABEL_1933;
  v4234 = 0;
  v4235 = a4[12];
  while (2)
  {
    v4236 = *(_QWORD *)(a1 + 5992);
    v4237 = *(_DWORD *)(a1 + 6016) * v4234;
    v4238 = (uint64_t *)(v4236 + 8 * v4237);
    v4239 = *(_DWORD *)(a1 + 5912);
    if (v4239 && *v4238 == -1)
    {
      v4240 = 0;
      v4294 = 8 * (v4239 + v4237) - 8 * v4237 - 8;
      v4295 = v4236 + 8 * v4237;
      while (v4294)
      {
        v4238 = (uint64_t *)(v4295 + 8);
        ++v4240;
        v4296 = *(_QWORD *)(v4295 + 8);
        v4294 -= 8;
        v4295 += 8;
        if (v4296 != -1)
          goto LABEL_1917;
      }
      goto LABEL_1913;
    }
    v4240 = 0;
LABEL_1917:
    v4241 = (uint64_t *)(v4236 + 8 * (v4237 + v4239));
    if (v4238 == v4241)
      goto LABEL_1913;
    v4242 = *v4238;
    v4243 = v4240;
    v4244 = a3[3];
    if (!v2040)
    {
LABEL_1921:
      v4246 = *(_DWORD *)(v4244 + 4 * v4243);
      v4245 = *v4235;
      goto LABEL_1922;
    }
LABEL_1919:
    v4245 = *v4235;
    v4246 = *(_DWORD *)(v4244 + 4 * v4243);
    if (*v4235 >= v4246)
    {
LABEL_1922:
      v4273 = *(_QWORD *)(a1 + 5920) + 8 * v4242;
      v4274 = *(unsigned int *)(a2 + 16);
      v4275 = *(_QWORD *)(v4273 + 64);
      v4276 = *(_QWORD *)a2 + 8 * (v4246 + (_DWORD)v4274 * v4245);
      v4277 = *(_OWORD *)(v4273 + 48);
      v4278 = *(_OWORD *)v4273;
      v4279 = *(_OWORD *)(v4273 + 16);
      v4280 = *(_OWORD *)(v4273 + 72);
      v4281 = *(_OWORD *)(v4273 + 88);
      v4282 = *(_OWORD *)(v4273 + 104);
      v4283 = *(_OWORD *)(v4273 + 120);
      v4284 = *(_QWORD *)(v4273 + 136);
      v4285 = *(_OWORD *)(v4273 + 144);
      v4286 = *(_OWORD *)(v4273 + 160);
      v4287 = *(_OWORD *)(v4273 + 176);
      v4288 = *(_OWORD *)(v4273 + 192);
      v4289 = *(_QWORD *)(v4273 + 208);
      *(_OWORD *)(v4276 + 32) = *(_OWORD *)(v4273 + 32);
      *(_OWORD *)(v4276 + 48) = v4277;
      *(_QWORD *)(v4276 + 64) = v4275;
      *(_OWORD *)v4276 = v4278;
      *(_OWORD *)(v4276 + 16) = v4279;
      v4290 = v4276 + 8 * v4274;
      *(_QWORD *)(v4290 + 64) = v4284;
      *(_OWORD *)(v4290 + 32) = v4282;
      *(_OWORD *)(v4290 + 48) = v4283;
      *(_OWORD *)v4290 = v4280;
      *(_OWORD *)(v4290 + 16) = v4281;
      v4291 = v4276 + 16 * v4274;
      *(_QWORD *)(v4291 + 64) = v4289;
      *(_OWORD *)(v4291 + 32) = v4287;
      *(_OWORD *)(v4291 + 48) = v4288;
      *(_OWORD *)v4291 = v4285;
      *(_OWORD *)(v4291 + 16) = v4286;
      goto LABEL_1923;
    }
    v4247 = *(_QWORD *)(a1 + 5920) + 8 * v4242;
    v4248 = *(unsigned int *)(a2 + 16);
    *(_QWORD *)&v4249 = *(_QWORD *)(v4247 + 64);
    v4250 = *(_QWORD *)a2 + 8 * (v4245 + (_DWORD)v4248 * v4246);
    v4252 = *(int64x2_t *)(v4247 + 32);
    v4251 = *(int64x2_t *)(v4247 + 48);
    v4253 = *(int64x2_t *)(v4247 + 16);
    v4254 = *(int64x2_t *)(v4247 + 120);
    v4255 = *(int64x2_t *)(v4247 + 104);
    v4256 = *(int64x2_t *)(v4247 + 88);
    v4257 = *(int64x2_t *)(v4247 + 72);
    v4258 = *(_QWORD *)(v4247 + 208);
    v4260 = *(_OWORD *)(v4247 + 176);
    v4259 = *(_OWORD *)(v4247 + 192);
    v4262 = *(_OWORD *)(v4247 + 144);
    v4261 = *(_OWORD *)(v4247 + 160);
    v4263 = vzip1q_s64(*(int64x2_t *)v4247, v4257);
    v4264 = vzip2q_s64(*(int64x2_t *)v4247, v4257);
    *((_QWORD *)&v4249 + 1) = *(_QWORD *)(v4247 + 136);
    *(_QWORD *)(v4250 + 16) = v4262;
    *(int64x2_t *)v4250 = v4263;
    v4265 = (int64x2_t *)(v4250 + 8 * v4248);
    *v4265 = v4264;
    v4265[1].i64[0] = *((_QWORD *)&v4262 + 1);
    v4266 = (int64x2_t *)(v4250 + 16 * v4248);
    v4266[1].i64[0] = v4261;
    *v4266 = vzip1q_s64(v4253, v4256);
    v4267 = (int64x2_t *)(v4250 + 24 * v4248);
    v4267[1].i64[0] = *((_QWORD *)&v4261 + 1);
    *v4267 = vzip2q_s64(v4253, v4256);
    v4268 = (int64x2_t *)(v4250 + 32 * v4248);
    v4268[1].i64[0] = v4260;
    *v4268 = vzip1q_s64(v4252, v4255);
    v4269 = (int64x2_t *)(v4250 + 40 * v4248);
    v4269[1].i64[0] = *((_QWORD *)&v4260 + 1);
    *v4269 = vzip2q_s64(v4252, v4255);
    v4270 = (int64x2_t *)(v4250 + 48 * v4248);
    v4270[1].i64[0] = v4259;
    *v4270 = vzip1q_s64(v4251, v4254);
    v4271 = (int64x2_t *)(v4250 + 56 * v4248);
    v4271[1].i64[0] = *((_QWORD *)&v4259 + 1);
    *v4271 = vzip2q_s64(v4251, v4254);
    v4272 = v4250 + (v4248 << 6);
    *(_QWORD *)(v4272 + 16) = v4258;
    *(_OWORD *)v4272 = v4249;
LABEL_1923:
    v4292 = v4238 + 1;
    while (v4292 != v4241)
    {
      ++v4240;
      v4293 = *v4292++;
      v4242 = v4293;
      if (v4293 != -1)
      {
        v4238 = v4292 - 1;
        v4243 = v4240;
        v4244 = a3[3];
        if (v2040)
          goto LABEL_1919;
        goto LABEL_1921;
      }
    }
    v4233 = *(_DWORD *)(a1 + 5916);
LABEL_1913:
    ++v4234;
    ++v4235;
    if (v4234 < v4233)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1933:
  v4297 = *(_DWORD *)(a1 + 7356);
  if (!v4297)
    goto LABEL_1956;
  v4298 = 0;
  v4299 = a4[15];
  while (2)
  {
    v4300 = *(_QWORD *)(a1 + 7432);
    v4301 = *(_DWORD *)(a1 + 7456) * v4298;
    v4302 = (uint64_t *)(v4300 + 8 * v4301);
    v4303 = *(_DWORD *)(a1 + 7352);
    if (v4303 && *v4302 == -1)
    {
      v4304 = 0;
      v4327 = 8 * (v4303 + v4301) - 8 * v4301 - 8;
      v4328 = v4300 + 8 * v4301;
      while (v4327)
      {
        v4302 = (uint64_t *)(v4328 + 8);
        ++v4304;
        v4329 = *(_QWORD *)(v4328 + 8);
        v4327 -= 8;
        v4328 += 8;
        if (v4329 != -1)
          goto LABEL_1940;
      }
      goto LABEL_1936;
    }
    v4304 = 0;
LABEL_1940:
    v4305 = (uint64_t *)(v4300 + 8 * (v4301 + v4303));
    if (v4302 == v4305)
      goto LABEL_1936;
    v4306 = *v4302;
    v4307 = v4304;
    v4308 = a3[3];
    if (!v2040)
    {
LABEL_1944:
      v4310 = *(_DWORD *)(v4308 + 4 * v4307);
      v4309 = *v4299;
      goto LABEL_1945;
    }
LABEL_1942:
    v4309 = *v4299;
    v4310 = *(_DWORD *)(v4308 + 4 * v4307);
    if (*v4299 >= v4310)
    {
LABEL_1945:
      v4319 = *(_QWORD *)(a1 + 7360) + 8 * v4306;
      v4320 = *(_QWORD *)a2 + 8 * (v4310 + *(_DWORD *)(a2 + 16) * v4309);
      v4321 = *(_QWORD *)(v4319 + 64);
      v4322 = *(_OWORD *)(v4319 + 48);
      v4323 = *(_OWORD *)v4319;
      v4324 = *(_OWORD *)(v4319 + 16);
      *(_OWORD *)(v4320 + 32) = *(_OWORD *)(v4319 + 32);
      *(_OWORD *)(v4320 + 48) = v4322;
      *(_QWORD *)(v4320 + 64) = v4321;
      *(_OWORD *)v4320 = v4323;
      *(_OWORD *)(v4320 + 16) = v4324;
      goto LABEL_1946;
    }
    v4311 = *(_QWORD *)(a1 + 7360) + 8 * v4306;
    v4312 = *(unsigned int *)(a2 + 16);
    v4313 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v4309 + (_DWORD)v4312 * v4310));
    v4314 = *(_QWORD *)(v4311 + 64);
    v4316 = *(int8x16_t *)(v4311 + 32);
    v4315 = *(int8x16_t *)(v4311 + 48);
    v4317 = *(int8x16_t *)(v4311 + 16);
    v4318 = vextq_s8(*(int8x16_t *)v4311, *(int8x16_t *)v4311, 8uLL).u64[0];
    *v4313 = *(_QWORD *)v4311;
    v4313[v4312] = v4318;
    v4313[2 * v4312] = v4317.i64[0];
    v4313[3 * v4312] = vextq_s8(v4317, v4317, 8uLL).u64[0];
    v4313[4 * v4312] = v4316.i64[0];
    v4313[5 * v4312] = vextq_s8(v4316, v4316, 8uLL).u64[0];
    v4313[6 * v4312] = v4315.i64[0];
    v4313[7 * v4312] = vextq_s8(v4315, v4315, 8uLL).u64[0];
    v4313[8 * v4312] = v4314;
LABEL_1946:
    v4325 = v4302 + 1;
    while (v4325 != v4305)
    {
      ++v4304;
      v4326 = *v4325++;
      v4306 = v4326;
      if (v4326 != -1)
      {
        v4302 = v4325 - 1;
        v4307 = v4304;
        v4308 = a3[3];
        if (v2040)
          goto LABEL_1942;
        goto LABEL_1944;
      }
    }
    v4297 = *(_DWORD *)(a1 + 7356);
LABEL_1936:
    ++v4298;
    ++v4299;
    if (v4298 < v4297)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1956:
  v4330 = *(_DWORD *)(a1 + 8796);
  if (!v4330)
    goto LABEL_1979;
  v4331 = 0;
  v4332 = a4[18];
  while (2)
  {
    v4333 = *(_QWORD *)(a1 + 8872);
    v4334 = *(_DWORD *)(a1 + 8896) * v4331;
    v4335 = (uint64_t *)(v4333 + 8 * v4334);
    v4336 = *(_DWORD *)(a1 + 8792);
    if (v4336 && *v4335 == -1)
    {
      v4337 = 0;
      v4391 = 8 * (v4336 + v4334) - 8 * v4334 - 8;
      v4392 = v4333 + 8 * v4334;
      while (v4391)
      {
        v4335 = (uint64_t *)(v4392 + 8);
        ++v4337;
        v4393 = *(_QWORD *)(v4392 + 8);
        v4391 -= 8;
        v4392 += 8;
        if (v4393 != -1)
          goto LABEL_1963;
      }
      goto LABEL_1959;
    }
    v4337 = 0;
LABEL_1963:
    v4338 = (uint64_t *)(v4333 + 8 * (v4334 + v4336));
    if (v4335 == v4338)
      goto LABEL_1959;
    v4339 = *v4335;
    v4340 = v4337;
    v4341 = a3[3];
    if (!v2040)
    {
LABEL_1967:
      v4343 = *(_DWORD *)(v4341 + 4 * v4340);
      v4342 = *v4332;
      goto LABEL_1968;
    }
LABEL_1965:
    v4342 = *v4332;
    v4343 = *(_DWORD *)(v4341 + 4 * v4340);
    if (*v4332 >= v4343)
    {
LABEL_1968:
      v4370 = *(_QWORD *)(a1 + 8800) + 8 * v4339;
      v4371 = *(unsigned int *)(a2 + 16);
      v4372 = *(_QWORD *)(v4370 + 64);
      v4373 = *(_QWORD *)a2 + 8 * (v4343 + (_DWORD)v4371 * v4342);
      v4374 = *(_OWORD *)(v4370 + 48);
      v4375 = *(_OWORD *)v4370;
      v4376 = *(_OWORD *)(v4370 + 16);
      v4377 = *(_OWORD *)(v4370 + 72);
      v4378 = *(_OWORD *)(v4370 + 88);
      v4379 = *(_OWORD *)(v4370 + 104);
      v4380 = *(_OWORD *)(v4370 + 120);
      v4381 = *(_QWORD *)(v4370 + 136);
      v4382 = *(_OWORD *)(v4370 + 144);
      v4383 = *(_OWORD *)(v4370 + 160);
      v4384 = *(_OWORD *)(v4370 + 176);
      v4385 = *(_OWORD *)(v4370 + 192);
      v4386 = *(_QWORD *)(v4370 + 208);
      *(_OWORD *)(v4373 + 32) = *(_OWORD *)(v4370 + 32);
      *(_OWORD *)(v4373 + 48) = v4374;
      *(_QWORD *)(v4373 + 64) = v4372;
      *(_OWORD *)v4373 = v4375;
      *(_OWORD *)(v4373 + 16) = v4376;
      v4387 = v4373 + 8 * v4371;
      *(_QWORD *)(v4387 + 64) = v4381;
      *(_OWORD *)(v4387 + 32) = v4379;
      *(_OWORD *)(v4387 + 48) = v4380;
      *(_OWORD *)v4387 = v4377;
      *(_OWORD *)(v4387 + 16) = v4378;
      v4388 = v4373 + 16 * v4371;
      *(_QWORD *)(v4388 + 64) = v4386;
      *(_OWORD *)(v4388 + 32) = v4384;
      *(_OWORD *)(v4388 + 48) = v4385;
      *(_OWORD *)v4388 = v4382;
      *(_OWORD *)(v4388 + 16) = v4383;
      goto LABEL_1969;
    }
    v4344 = *(_QWORD *)(a1 + 8800) + 8 * v4339;
    v4345 = *(unsigned int *)(a2 + 16);
    *(_QWORD *)&v4346 = *(_QWORD *)(v4344 + 64);
    v4347 = *(_QWORD *)a2 + 8 * (v4342 + (_DWORD)v4345 * v4343);
    v4349 = *(int64x2_t *)(v4344 + 32);
    v4348 = *(int64x2_t *)(v4344 + 48);
    v4350 = *(int64x2_t *)(v4344 + 16);
    v4351 = *(int64x2_t *)(v4344 + 120);
    v4352 = *(int64x2_t *)(v4344 + 104);
    v4353 = *(int64x2_t *)(v4344 + 88);
    v4354 = *(int64x2_t *)(v4344 + 72);
    v4355 = *(_QWORD *)(v4344 + 208);
    v4357 = *(_OWORD *)(v4344 + 176);
    v4356 = *(_OWORD *)(v4344 + 192);
    v4359 = *(_OWORD *)(v4344 + 144);
    v4358 = *(_OWORD *)(v4344 + 160);
    v4360 = vzip1q_s64(*(int64x2_t *)v4344, v4354);
    v4361 = vzip2q_s64(*(int64x2_t *)v4344, v4354);
    *((_QWORD *)&v4346 + 1) = *(_QWORD *)(v4344 + 136);
    *(_QWORD *)(v4347 + 16) = v4359;
    *(int64x2_t *)v4347 = v4360;
    v4362 = (int64x2_t *)(v4347 + 8 * v4345);
    *v4362 = v4361;
    v4362[1].i64[0] = *((_QWORD *)&v4359 + 1);
    v4363 = (int64x2_t *)(v4347 + 16 * v4345);
    v4363[1].i64[0] = v4358;
    *v4363 = vzip1q_s64(v4350, v4353);
    v4364 = (int64x2_t *)(v4347 + 24 * v4345);
    v4364[1].i64[0] = *((_QWORD *)&v4358 + 1);
    *v4364 = vzip2q_s64(v4350, v4353);
    v4365 = (int64x2_t *)(v4347 + 32 * v4345);
    v4365[1].i64[0] = v4357;
    *v4365 = vzip1q_s64(v4349, v4352);
    v4366 = (int64x2_t *)(v4347 + 40 * v4345);
    v4366[1].i64[0] = *((_QWORD *)&v4357 + 1);
    *v4366 = vzip2q_s64(v4349, v4352);
    v4367 = (int64x2_t *)(v4347 + 48 * v4345);
    v4367[1].i64[0] = v4356;
    *v4367 = vzip1q_s64(v4348, v4351);
    v4368 = (int64x2_t *)(v4347 + 56 * v4345);
    v4368[1].i64[0] = *((_QWORD *)&v4356 + 1);
    *v4368 = vzip2q_s64(v4348, v4351);
    v4369 = v4347 + (v4345 << 6);
    *(_QWORD *)(v4369 + 16) = v4355;
    *(_OWORD *)v4369 = v4346;
LABEL_1969:
    v4389 = v4335 + 1;
    while (v4389 != v4338)
    {
      ++v4337;
      v4390 = *v4389++;
      v4339 = v4390;
      if (v4390 != -1)
      {
        v4335 = v4389 - 1;
        v4340 = v4337;
        v4341 = a3[3];
        if (v2040)
          goto LABEL_1965;
        goto LABEL_1967;
      }
    }
    v4330 = *(_DWORD *)(a1 + 8796);
LABEL_1959:
    ++v4331;
    ++v4332;
    if (v4331 < v4330)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_1979:
  v4394 = *(_DWORD *)(a1 + 10236);
  if (!v4394)
    goto LABEL_2002;
  v4395 = 0;
  v4396 = a4[21];
  while (2)
  {
    v4397 = *(_QWORD *)(a1 + 10312);
    v4398 = *(_DWORD *)(a1 + 10336) * v4395;
    v4399 = (uint64_t *)(v4397 + 8 * v4398);
    v4400 = *(_DWORD *)(a1 + 10232);
    if (v4400 && *v4399 == -1)
    {
      v4401 = 0;
      v4464 = 8 * (v4400 + v4398) - 8 * v4398 - 8;
      v4465 = v4397 + 8 * v4398;
      while (v4464)
      {
        v4399 = (uint64_t *)(v4465 + 8);
        ++v4401;
        v4466 = *(_QWORD *)(v4465 + 8);
        v4464 -= 8;
        v4465 += 8;
        if (v4466 != -1)
          goto LABEL_1986;
      }
      goto LABEL_1982;
    }
    v4401 = 0;
LABEL_1986:
    v4402 = (uint64_t *)(v4397 + 8 * (v4398 + v4400));
    if (v4399 == v4402)
      goto LABEL_1982;
    v4403 = *v4399;
    v4404 = v4401;
    v4405 = a3[3];
    if (!v2040)
    {
LABEL_1990:
      v4407 = *(_DWORD *)(v4405 + 4 * v4404);
      v4406 = *v4396;
      goto LABEL_1991;
    }
LABEL_1988:
    v4406 = *v4396;
    v4407 = *(_DWORD *)(v4405 + 4 * v4404);
    if (*v4396 >= v4407)
    {
LABEL_1991:
      v4437 = *(_QWORD *)(a1 + 10240) + 8 * v4403;
      v4438 = *(unsigned int *)(a2 + 16);
      v4439 = *(_QWORD *)(v4437 + 64);
      v4440 = *(_QWORD *)a2 + 8 * (v4407 + (_DWORD)v4438 * v4406);
      v4441 = *(_OWORD *)(v4437 + 48);
      v4442 = *(_OWORD *)v4437;
      v4443 = *(_OWORD *)(v4437 + 16);
      v4444 = *(_OWORD *)(v4437 + 72);
      v4445 = *(_OWORD *)(v4437 + 88);
      v4446 = *(_OWORD *)(v4437 + 104);
      v4447 = *(_OWORD *)(v4437 + 120);
      v4448 = *(_QWORD *)(v4437 + 136);
      v4449 = *(_OWORD *)(v4437 + 144);
      v4450 = *(_OWORD *)(v4437 + 160);
      v4451 = *(_OWORD *)(v4437 + 176);
      v4452 = *(_OWORD *)(v4437 + 192);
      v4453 = *(_QWORD *)(v4437 + 208);
      v4454 = *(_OWORD *)(v4437 + 232);
      v4455 = *(_OWORD *)(v4437 + 248);
      v4456 = *(_QWORD *)(v4437 + 280);
      v4457 = *(_OWORD *)(v4437 + 216);
      v4458 = *(_OWORD *)(v4437 + 264);
      *(_OWORD *)(v4440 + 32) = *(_OWORD *)(v4437 + 32);
      *(_OWORD *)(v4440 + 48) = v4441;
      *(_QWORD *)(v4440 + 64) = v4439;
      *(_OWORD *)v4440 = v4442;
      *(_OWORD *)(v4440 + 16) = v4443;
      v4459 = v4440 + 8 * v4438;
      *(_QWORD *)(v4459 + 64) = v4448;
      *(_OWORD *)(v4459 + 32) = v4446;
      *(_OWORD *)(v4459 + 48) = v4447;
      *(_OWORD *)v4459 = v4444;
      *(_OWORD *)(v4459 + 16) = v4445;
      v4460 = v4440 + 16 * v4438;
      *(_QWORD *)(v4460 + 64) = v4453;
      *(_OWORD *)(v4460 + 32) = v4451;
      *(_OWORD *)(v4460 + 48) = v4452;
      *(_OWORD *)v4460 = v4449;
      *(_OWORD *)(v4460 + 16) = v4450;
      v4461 = v4440 + 24 * v4438;
      *(_QWORD *)(v4461 + 64) = v4456;
      *(_OWORD *)(v4461 + 32) = v4455;
      *(_OWORD *)(v4461 + 48) = v4458;
      *(_OWORD *)v4461 = v4457;
      *(_OWORD *)(v4461 + 16) = v4454;
      goto LABEL_1992;
    }
    v4408 = *(unsigned int *)(a2 + 16);
    v4409 = *(_QWORD *)(a1 + 10240) + 8 * v4403;
    v4410.i64[0] = *(_QWORD *)(v4409 + 64);
    v4412 = *(int64x2_t *)(v4409 + 32);
    v4411 = *(int64x2_t *)(v4409 + 48);
    v4413 = *(int64x2_t *)(v4409 + 16);
    v4414 = *(int64x2_t *)(v4409 + 120);
    v4415 = *(int64x2_t *)(v4409 + 104);
    v4416 = *(int64x2_t *)(v4409 + 88);
    v4417 = *(int64x2_t *)(v4409 + 72);
    v4418.i64[0] = *(_QWORD *)(v4409 + 208);
    v4420 = *(int64x2_t *)(v4409 + 176);
    v4419 = *(int64x2_t *)(v4409 + 192);
    v4422 = *(int64x2_t *)(v4409 + 144);
    v4421 = *(int64x2_t *)(v4409 + 160);
    v4423 = *(int64x2_t *)(v4409 + 248);
    v4424 = *(int64x2_t *)(v4409 + 232);
    v4425 = *(int64x2_t *)(v4409 + 216);
    v4426 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4406 + (_DWORD)v4408 * v4407));
    v4427 = *(int64x2_t *)(v4409 + 264);
    v4428 = vzip2q_s64(*(int64x2_t *)v4409, v4417);
    v4410.i64[1] = *(_QWORD *)(v4409 + 136);
    v4418.i64[1] = *(_QWORD *)(v4409 + 280);
    *v4426 = vzip1q_s64(*(int64x2_t *)v4409, v4417);
    v4426[1] = vzip1q_s64(v4422, v4425);
    v4429 = (int64x2_t *)((char *)v4426 + 8 * v4408);
    *v4429 = v4428;
    v4429[1] = vzip2q_s64(v4422, v4425);
    v4430 = &v4426[v4408];
    *v4430 = vzip1q_s64(v4413, v4416);
    v4430[1] = vzip1q_s64(v4421, v4424);
    v4431 = (int64x2_t *)((char *)v4426 + 24 * v4408);
    *v4431 = vzip2q_s64(v4413, v4416);
    v4431[1] = vzip2q_s64(v4421, v4424);
    v4432 = &v4426[2 * v4408];
    *v4432 = vzip1q_s64(v4412, v4415);
    v4432[1] = vzip1q_s64(v4420, v4423);
    v4433 = (int64x2_t *)((char *)v4426 + 40 * v4408);
    *v4433 = vzip2q_s64(v4412, v4415);
    v4433[1] = vzip2q_s64(v4420, v4423);
    v4434 = &v4426[3 * v4408];
    *v4434 = vzip1q_s64(v4411, v4414);
    v4434[1] = vzip1q_s64(v4419, v4427);
    v4435 = (int64x2_t *)((char *)v4426 + 56 * v4408);
    *v4435 = vzip2q_s64(v4411, v4414);
    v4435[1] = vzip2q_s64(v4419, v4427);
    v4436 = &v4426[4 * v4408];
    *v4436 = v4410;
    v4436[1] = v4418;
LABEL_1992:
    v4462 = v4399 + 1;
    while (v4462 != v4402)
    {
      ++v4401;
      v4463 = *v4462++;
      v4403 = v4463;
      if (v4463 != -1)
      {
        v4399 = v4462 - 1;
        v4404 = v4401;
        v4405 = a3[3];
        if (v2040)
          goto LABEL_1988;
        goto LABEL_1990;
      }
    }
    v4394 = *(_DWORD *)(a1 + 10236);
LABEL_1982:
    ++v4395;
    ++v4396;
    if (v4395 < v4394)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2002:
  v4467 = *(_DWORD *)(a1 + 11676);
  if (!v4467)
    goto LABEL_2025;
  v4468 = 0;
  v4469 = a4[24];
  while (2)
  {
    v4470 = *(_QWORD *)(a1 + 11752);
    v4471 = *(_DWORD *)(a1 + 11776) * v4468;
    v4472 = (uint64_t *)(v4470 + 8 * v4471);
    v4473 = *(_DWORD *)(a1 + 11672);
    if (v4473 && *v4472 == -1)
    {
      v4474 = 0;
      v4537 = 8 * (v4473 + v4471) - 8 * v4471 - 8;
      v4538 = v4470 + 8 * v4471;
      while (v4537)
      {
        v4472 = (uint64_t *)(v4538 + 8);
        ++v4474;
        v4539 = *(_QWORD *)(v4538 + 8);
        v4537 -= 8;
        v4538 += 8;
        if (v4539 != -1)
          goto LABEL_2009;
      }
      goto LABEL_2005;
    }
    v4474 = 0;
LABEL_2009:
    v4475 = (uint64_t *)(v4470 + 8 * (v4471 + v4473));
    if (v4472 == v4475)
      goto LABEL_2005;
    v4476 = *v4472;
    v4477 = v4474;
    v4478 = a3[3];
    if (!v2040)
    {
LABEL_2013:
      v4480 = *(_DWORD *)(v4478 + 4 * v4477);
      v4479 = *v4469;
      goto LABEL_2014;
    }
LABEL_2011:
    v4479 = *v4469;
    v4480 = *(_DWORD *)(v4478 + 4 * v4477);
    if (*v4469 >= v4480)
    {
LABEL_2014:
      v4510 = *(_QWORD *)(a1 + 11680) + 8 * v4476;
      v4511 = *(unsigned int *)(a2 + 16);
      v4512 = *(_QWORD *)(v4510 + 64);
      v4513 = *(_QWORD *)a2 + 8 * (v4480 + (_DWORD)v4511 * v4479);
      v4514 = *(_OWORD *)(v4510 + 48);
      v4515 = *(_OWORD *)v4510;
      v4516 = *(_OWORD *)(v4510 + 16);
      v4517 = *(_OWORD *)(v4510 + 72);
      v4518 = *(_OWORD *)(v4510 + 88);
      v4519 = *(_OWORD *)(v4510 + 104);
      v4520 = *(_OWORD *)(v4510 + 120);
      v4521 = *(_QWORD *)(v4510 + 136);
      v4522 = *(_OWORD *)(v4510 + 144);
      v4523 = *(_OWORD *)(v4510 + 160);
      v4524 = *(_OWORD *)(v4510 + 176);
      v4525 = *(_OWORD *)(v4510 + 192);
      v4526 = *(_QWORD *)(v4510 + 208);
      v4527 = *(_OWORD *)(v4510 + 232);
      v4528 = *(_OWORD *)(v4510 + 248);
      v4529 = *(_QWORD *)(v4510 + 280);
      v4530 = *(_OWORD *)(v4510 + 216);
      v4531 = *(_OWORD *)(v4510 + 264);
      *(_OWORD *)(v4513 + 32) = *(_OWORD *)(v4510 + 32);
      *(_OWORD *)(v4513 + 48) = v4514;
      *(_QWORD *)(v4513 + 64) = v4512;
      *(_OWORD *)v4513 = v4515;
      *(_OWORD *)(v4513 + 16) = v4516;
      v4532 = v4513 + 8 * v4511;
      *(_QWORD *)(v4532 + 64) = v4521;
      *(_OWORD *)(v4532 + 32) = v4519;
      *(_OWORD *)(v4532 + 48) = v4520;
      *(_OWORD *)v4532 = v4517;
      *(_OWORD *)(v4532 + 16) = v4518;
      v4533 = v4513 + 16 * v4511;
      *(_QWORD *)(v4533 + 64) = v4526;
      *(_OWORD *)(v4533 + 32) = v4524;
      *(_OWORD *)(v4533 + 48) = v4525;
      *(_OWORD *)v4533 = v4522;
      *(_OWORD *)(v4533 + 16) = v4523;
      v4534 = v4513 + 24 * v4511;
      *(_QWORD *)(v4534 + 64) = v4529;
      *(_OWORD *)(v4534 + 32) = v4528;
      *(_OWORD *)(v4534 + 48) = v4531;
      *(_OWORD *)v4534 = v4530;
      *(_OWORD *)(v4534 + 16) = v4527;
      goto LABEL_2015;
    }
    v4481 = *(unsigned int *)(a2 + 16);
    v4482 = *(_QWORD *)(a1 + 11680) + 8 * v4476;
    v4483.i64[0] = *(_QWORD *)(v4482 + 64);
    v4485 = *(int64x2_t *)(v4482 + 32);
    v4484 = *(int64x2_t *)(v4482 + 48);
    v4486 = *(int64x2_t *)(v4482 + 16);
    v4487 = *(int64x2_t *)(v4482 + 120);
    v4488 = *(int64x2_t *)(v4482 + 104);
    v4489 = *(int64x2_t *)(v4482 + 88);
    v4490 = *(int64x2_t *)(v4482 + 72);
    v4491.i64[0] = *(_QWORD *)(v4482 + 208);
    v4493 = *(int64x2_t *)(v4482 + 176);
    v4492 = *(int64x2_t *)(v4482 + 192);
    v4495 = *(int64x2_t *)(v4482 + 144);
    v4494 = *(int64x2_t *)(v4482 + 160);
    v4496 = *(int64x2_t *)(v4482 + 248);
    v4497 = *(int64x2_t *)(v4482 + 232);
    v4498 = *(int64x2_t *)(v4482 + 216);
    v4499 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4479 + (_DWORD)v4481 * v4480));
    v4500 = *(int64x2_t *)(v4482 + 264);
    v4501 = vzip2q_s64(*(int64x2_t *)v4482, v4490);
    v4483.i64[1] = *(_QWORD *)(v4482 + 136);
    v4491.i64[1] = *(_QWORD *)(v4482 + 280);
    *v4499 = vzip1q_s64(*(int64x2_t *)v4482, v4490);
    v4499[1] = vzip1q_s64(v4495, v4498);
    v4502 = (int64x2_t *)((char *)v4499 + 8 * v4481);
    *v4502 = v4501;
    v4502[1] = vzip2q_s64(v4495, v4498);
    v4503 = &v4499[v4481];
    *v4503 = vzip1q_s64(v4486, v4489);
    v4503[1] = vzip1q_s64(v4494, v4497);
    v4504 = (int64x2_t *)((char *)v4499 + 24 * v4481);
    *v4504 = vzip2q_s64(v4486, v4489);
    v4504[1] = vzip2q_s64(v4494, v4497);
    v4505 = &v4499[2 * v4481];
    *v4505 = vzip1q_s64(v4485, v4488);
    v4505[1] = vzip1q_s64(v4493, v4496);
    v4506 = (int64x2_t *)((char *)v4499 + 40 * v4481);
    *v4506 = vzip2q_s64(v4485, v4488);
    v4506[1] = vzip2q_s64(v4493, v4496);
    v4507 = &v4499[3 * v4481];
    *v4507 = vzip1q_s64(v4484, v4487);
    v4507[1] = vzip1q_s64(v4492, v4500);
    v4508 = (int64x2_t *)((char *)v4499 + 56 * v4481);
    *v4508 = vzip2q_s64(v4484, v4487);
    v4508[1] = vzip2q_s64(v4492, v4500);
    v4509 = &v4499[4 * v4481];
    *v4509 = v4483;
    v4509[1] = v4491;
LABEL_2015:
    v4535 = v4472 + 1;
    while (v4535 != v4475)
    {
      ++v4474;
      v4536 = *v4535++;
      v4476 = v4536;
      if (v4536 != -1)
      {
        v4472 = v4535 - 1;
        v4477 = v4474;
        v4478 = a3[3];
        if (v2040)
          goto LABEL_2011;
        goto LABEL_2013;
      }
    }
    v4467 = *(_DWORD *)(a1 + 11676);
LABEL_2005:
    ++v4468;
    ++v4469;
    if (v4468 < v4467)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2025:
  v4540 = *(_DWORD *)(a1 + 13116);
  if (!v4540)
    goto LABEL_2048;
  v4541 = 0;
  v4542 = a4[27];
  while (2)
  {
    v4543 = *(_QWORD *)(a1 + 13192);
    v4544 = *(_DWORD *)(a1 + 13216) * v4541;
    v4545 = (uint64_t *)(v4543 + 8 * v4544);
    v4546 = *(_DWORD *)(a1 + 13112);
    if (v4546 && *v4545 == -1)
    {
      v4547 = 0;
      v4601 = 8 * (v4546 + v4544) - 8 * v4544 - 8;
      v4602 = v4543 + 8 * v4544;
      while (v4601)
      {
        v4545 = (uint64_t *)(v4602 + 8);
        ++v4547;
        v4603 = *(_QWORD *)(v4602 + 8);
        v4601 -= 8;
        v4602 += 8;
        if (v4603 != -1)
          goto LABEL_2032;
      }
      goto LABEL_2028;
    }
    v4547 = 0;
LABEL_2032:
    v4548 = (uint64_t *)(v4543 + 8 * (v4544 + v4546));
    if (v4545 == v4548)
      goto LABEL_2028;
    v4549 = *v4545;
    v4550 = v4547;
    v4551 = a3[3];
    if (!v2040)
    {
LABEL_2036:
      v4553 = *(_DWORD *)(v4551 + 4 * v4550);
      v4552 = *v4542;
      goto LABEL_2037;
    }
LABEL_2034:
    v4552 = *v4542;
    v4553 = *(_DWORD *)(v4551 + 4 * v4550);
    if (*v4542 >= v4553)
    {
LABEL_2037:
      v4580 = *(_QWORD *)(a1 + 13120) + 8 * v4549;
      v4581 = *(unsigned int *)(a2 + 16);
      v4582 = *(_QWORD *)(v4580 + 64);
      v4583 = *(_QWORD *)a2 + 8 * (v4553 + (_DWORD)v4581 * v4552);
      v4584 = *(_OWORD *)(v4580 + 48);
      v4585 = *(_OWORD *)v4580;
      v4586 = *(_OWORD *)(v4580 + 16);
      v4587 = *(_OWORD *)(v4580 + 72);
      v4588 = *(_OWORD *)(v4580 + 88);
      v4589 = *(_OWORD *)(v4580 + 104);
      v4590 = *(_OWORD *)(v4580 + 120);
      v4591 = *(_QWORD *)(v4580 + 136);
      v4592 = *(_OWORD *)(v4580 + 144);
      v4593 = *(_OWORD *)(v4580 + 160);
      v4594 = *(_OWORD *)(v4580 + 176);
      v4595 = *(_OWORD *)(v4580 + 192);
      v4596 = *(_QWORD *)(v4580 + 208);
      *(_OWORD *)(v4583 + 32) = *(_OWORD *)(v4580 + 32);
      *(_OWORD *)(v4583 + 48) = v4584;
      *(_QWORD *)(v4583 + 64) = v4582;
      *(_OWORD *)v4583 = v4585;
      *(_OWORD *)(v4583 + 16) = v4586;
      v4597 = v4583 + 8 * v4581;
      *(_QWORD *)(v4597 + 64) = v4591;
      *(_OWORD *)(v4597 + 32) = v4589;
      *(_OWORD *)(v4597 + 48) = v4590;
      *(_OWORD *)v4597 = v4587;
      *(_OWORD *)(v4597 + 16) = v4588;
      v4598 = v4583 + 16 * v4581;
      *(_QWORD *)(v4598 + 64) = v4596;
      *(_OWORD *)(v4598 + 32) = v4594;
      *(_OWORD *)(v4598 + 48) = v4595;
      *(_OWORD *)v4598 = v4592;
      *(_OWORD *)(v4598 + 16) = v4593;
      goto LABEL_2038;
    }
    v4554 = *(_QWORD *)(a1 + 13120) + 8 * v4549;
    v4555 = *(unsigned int *)(a2 + 16);
    *(_QWORD *)&v4556 = *(_QWORD *)(v4554 + 64);
    v4557 = *(_QWORD *)a2 + 8 * (v4552 + (_DWORD)v4555 * v4553);
    v4559 = *(int64x2_t *)(v4554 + 32);
    v4558 = *(int64x2_t *)(v4554 + 48);
    v4560 = *(int64x2_t *)(v4554 + 16);
    v4561 = *(int64x2_t *)(v4554 + 120);
    v4562 = *(int64x2_t *)(v4554 + 104);
    v4563 = *(int64x2_t *)(v4554 + 88);
    v4564 = *(int64x2_t *)(v4554 + 72);
    v4565 = *(_QWORD *)(v4554 + 208);
    v4567 = *(_OWORD *)(v4554 + 176);
    v4566 = *(_OWORD *)(v4554 + 192);
    v4569 = *(_OWORD *)(v4554 + 144);
    v4568 = *(_OWORD *)(v4554 + 160);
    v4570 = vzip1q_s64(*(int64x2_t *)v4554, v4564);
    v4571 = vzip2q_s64(*(int64x2_t *)v4554, v4564);
    *((_QWORD *)&v4556 + 1) = *(_QWORD *)(v4554 + 136);
    *(_QWORD *)(v4557 + 16) = v4569;
    *(int64x2_t *)v4557 = v4570;
    v4572 = (int64x2_t *)(v4557 + 8 * v4555);
    *v4572 = v4571;
    v4572[1].i64[0] = *((_QWORD *)&v4569 + 1);
    v4573 = (int64x2_t *)(v4557 + 16 * v4555);
    v4573[1].i64[0] = v4568;
    *v4573 = vzip1q_s64(v4560, v4563);
    v4574 = (int64x2_t *)(v4557 + 24 * v4555);
    v4574[1].i64[0] = *((_QWORD *)&v4568 + 1);
    *v4574 = vzip2q_s64(v4560, v4563);
    v4575 = (int64x2_t *)(v4557 + 32 * v4555);
    v4575[1].i64[0] = v4567;
    *v4575 = vzip1q_s64(v4559, v4562);
    v4576 = (int64x2_t *)(v4557 + 40 * v4555);
    v4576[1].i64[0] = *((_QWORD *)&v4567 + 1);
    *v4576 = vzip2q_s64(v4559, v4562);
    v4577 = (int64x2_t *)(v4557 + 48 * v4555);
    v4577[1].i64[0] = v4566;
    *v4577 = vzip1q_s64(v4558, v4561);
    v4578 = (int64x2_t *)(v4557 + 56 * v4555);
    v4578[1].i64[0] = *((_QWORD *)&v4566 + 1);
    *v4578 = vzip2q_s64(v4558, v4561);
    v4579 = v4557 + (v4555 << 6);
    *(_QWORD *)(v4579 + 16) = v4565;
    *(_OWORD *)v4579 = v4556;
LABEL_2038:
    v4599 = v4545 + 1;
    while (v4599 != v4548)
    {
      ++v4547;
      v4600 = *v4599++;
      v4549 = v4600;
      if (v4600 != -1)
      {
        v4545 = v4599 - 1;
        v4550 = v4547;
        v4551 = a3[3];
        if (v2040)
          goto LABEL_2034;
        goto LABEL_2036;
      }
    }
    v4540 = *(_DWORD *)(a1 + 13116);
LABEL_2028:
    ++v4541;
    ++v4542;
    if (v4541 < v4540)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2048:
  v4604 = *(_DWORD *)(a1 + 12);
  if (!v4604)
    goto LABEL_2071;
  v4605 = 0;
  v4606 = *a4;
  while (2)
  {
    v4607 = *(_QWORD *)(a1 + 88);
    v4608 = *(_DWORD *)(a1 + 112) * v4605;
    v4609 = (uint64_t *)(v4607 + 8 * v4608);
    v4610 = *(_DWORD *)(a1 + 8);
    if (v4610 && *v4609 == -1)
    {
      v4611 = 0;
      v4674 = 8 * (v4610 + v4608) - 8 * v4608 - 8;
      v4675 = v4607 + 8 * v4608;
      while (v4674)
      {
        v4609 = (uint64_t *)(v4675 + 8);
        ++v4611;
        v4676 = *(_QWORD *)(v4675 + 8);
        v4674 -= 8;
        v4675 += 8;
        if (v4676 != -1)
          goto LABEL_2055;
      }
      goto LABEL_2051;
    }
    v4611 = 0;
LABEL_2055:
    v4612 = (uint64_t *)(v4607 + 8 * (v4608 + v4610));
    if (v4609 == v4612)
      goto LABEL_2051;
    v4613 = *v4609;
    v4614 = v4611;
    v4615 = *a3;
    if (!v2040)
    {
LABEL_2059:
      v4617 = *(_DWORD *)(v4615 + 4 * v4614);
      v4616 = *v4606;
      goto LABEL_2060;
    }
LABEL_2057:
    v4616 = *v4606;
    v4617 = *(_DWORD *)(v4615 + 4 * v4614);
    if (*v4606 >= v4617)
    {
LABEL_2060:
      v4663 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4613);
      v4619 = *(unsigned int *)(a2 + 16);
      v4620 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4617 + (_DWORD)v4619 * v4616));
      v4664 = *(int64x2_t *)v4663;
      v4665 = *((int64x2_t *)v4663 + 2);
      v4636 = *((int64x2_t *)v4663 + 3);
      v4666 = *((int64x2_t *)v4663 + 4);
      v4667 = *((int64x2_t *)v4663 + 5);
      v4638 = *((int8x16_t *)v4663 + 6);
      v4639 = *((int8x16_t *)v4663 + 7);
      v4640 = *((int8x16_t *)v4663 + 8);
      v4644 = *((int8x16_t *)v4663 + 9);
      v4641 = vextq_s8(v4640, v4640, 8uLL).u64[0];
      v4642 = vextq_s8(v4639, v4639, 8uLL).u64[0];
      v4643 = vextq_s8(v4638, v4638, 8uLL).u64[0];
      v4645 = *((int8x16_t *)v4663 + 10);
      v4646 = *((int8x16_t *)v4663 + 11);
      v4648 = vextq_s8(v4646, v4646, 8uLL).u64[0];
      v4649 = vextq_s8(v4645, v4645, 8uLL).u64[0];
      v4647 = vextq_s8(v4644, v4644, 8uLL).u64[0];
      v4650 = *((int8x16_t *)v4663 + 12);
      v4651 = *((int8x16_t *)v4663 + 13);
      v4652 = *((int8x16_t *)v4663 + 14);
      v4656 = *((int8x16_t *)v4663 + 15);
      v4653 = vextq_s8(v4652, v4652, 8uLL).u64[0];
      v4654 = vextq_s8(v4651, v4651, 8uLL).u64[0];
      v4655 = vextq_s8(v4650, v4650, 8uLL).u64[0];
      v4657 = *((int8x16_t *)v4663 + 16);
      v4658 = *((int8x16_t *)v4663 + 17);
      v4660 = vextq_s8(v4658, v4658, 8uLL).u64[0];
      v4661 = vextq_s8(v4657, v4657, 8uLL).u64[0];
      v4659 = vextq_s8(v4656, v4656, 8uLL).u64[0];
      v4620[1] = *((int64x2_t *)v4663 + 1);
      v4620[2] = v4665;
      *v4620 = v4664;
      v4662 = (int64x2_t *)((char *)v4620 + 8 * v4619);
      v4662[1] = v4666;
      v4662[2] = v4667;
      goto LABEL_2061;
    }
    v4618 = *(_QWORD *)(a1 + 16) + 8 * v4613;
    v4619 = *(unsigned int *)(a2 + 16);
    v4620 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4616 + (_DWORD)v4619 * v4617));
    v4621 = *(int64x2_t *)(v4618 + 16);
    v4622 = *(int64x2_t *)(v4618 + 64);
    v4623 = *(int64x2_t *)(v4618 + 80);
    v4625 = *(int64x2_t *)(v4618 + 32);
    v4624 = *(int64x2_t *)(v4618 + 48);
    v4626 = *(int64x2_t *)(v4618 + 96);
    v4627 = *(int64x2_t *)(v4618 + 112);
    v4628 = *(int64x2_t *)(v4618 + 128);
    v4629 = *(int64x2_t *)(v4618 + 192);
    v4630 = *(int64x2_t *)(v4618 + 208);
    v4631 = *(int64x2_t *)(v4618 + 224);
    v4632 = vzip1q_s64(*(int64x2_t *)v4618, v4624);
    v4633 = vzip1q_s64(v4626, *(int64x2_t *)(v4618 + 144));
    v4634 = vzip1q_s64(v4629, *(int64x2_t *)(v4618 + 240));
    v4635.i64[0] = vdupq_laneq_s64(v4626, 1).u64[0];
    v4635.i64[1] = *(_QWORD *)(v4618 + 152);
    v4636 = vzip2q_s64(*(int64x2_t *)v4618, v4624);
    v4637.i64[0] = vdupq_laneq_s64(v4629, 1).u64[0];
    v4637.i64[1] = *(_QWORD *)(v4618 + 248);
    v4638 = (int8x16_t)vzip1q_s64(v4621, v4622);
    v4639 = (int8x16_t)vzip1q_s64(v4627, *(int64x2_t *)(v4618 + 160));
    v4640 = (int8x16_t)vzip1q_s64(v4630, *(int64x2_t *)(v4618 + 256));
    v4641 = vextq_s8(v4640, v4640, 8uLL).u64[0];
    v4642 = vextq_s8(v4639, v4639, 8uLL).u64[0];
    v4643 = vextq_s8(v4638, v4638, 8uLL).u64[0];
    v4644 = (int8x16_t)vzip2q_s64(v4621, v4622);
    v4645.i64[0] = vdupq_laneq_s64(v4627, 1).u64[0];
    v4645.i64[1] = *(_QWORD *)(v4618 + 168);
    v4646.i64[0] = vdupq_laneq_s64(v4630, 1).u64[0];
    v4646.i64[1] = *(_QWORD *)(v4618 + 264);
    v4647 = vextq_s8(v4644, v4644, 8uLL).u64[0];
    v4648 = vextq_s8(v4646, v4646, 8uLL).u64[0];
    v4649 = vextq_s8(v4645, v4645, 8uLL).u64[0];
    v4650 = (int8x16_t)vzip1q_s64(v4625, v4623);
    v4651 = (int8x16_t)vzip1q_s64(v4628, *(int64x2_t *)(v4618 + 176));
    v4652 = (int8x16_t)vzip1q_s64(v4631, *(int64x2_t *)(v4618 + 272));
    v4653 = vextq_s8(v4652, v4652, 8uLL).u64[0];
    v4654 = vextq_s8(v4651, v4651, 8uLL).u64[0];
    v4655 = vextq_s8(v4650, v4650, 8uLL).u64[0];
    v4656 = (int8x16_t)vzip2q_s64(v4625, v4623);
    v4657.i64[0] = vdupq_laneq_s64(v4628, 1).u64[0];
    v4657.i64[1] = *(_QWORD *)(v4618 + 184);
    v4658.i64[0] = vdupq_laneq_s64(v4631, 1).u64[0];
    v4658.i64[1] = *(_QWORD *)(v4618 + 280);
    v4659 = vextq_s8(v4656, v4656, 8uLL).u64[0];
    v4660 = vextq_s8(v4658, v4658, 8uLL).u64[0];
    v4661 = vextq_s8(v4657, v4657, 8uLL).u64[0];
    v4620[1] = v4633;
    v4620[2] = v4634;
    *v4620 = v4632;
    v4662 = (int64x2_t *)((char *)v4620 + 8 * v4619);
    v4662[1] = v4635;
    v4662[2] = v4637;
LABEL_2061:
    *v4662 = v4636;
    v4638.i64[1] = v4643;
    v4639.i64[1] = v4642;
    v4668 = (int8x16_t *)&v4620[v4619];
    *v4668 = v4638;
    v4668[1] = v4639;
    v4640.i64[1] = v4641;
    v4668[2] = v4640;
    v4669 = (int8x16_t *)((char *)v4620 + 24 * v4619);
    v4646.i64[1] = v4648;
    v4645.i64[1] = v4649;
    v4644.i64[1] = v4647;
    v4669[1] = v4645;
    v4669[2] = v4646;
    *v4669 = v4644;
    v4670 = (int8x16_t *)&v4620[2 * v4619];
    v4652.i64[1] = v4653;
    v4651.i64[1] = v4654;
    v4650.i64[1] = v4655;
    v4670[1] = v4651;
    v4670[2] = v4652;
    *v4670 = v4650;
    v4671 = (int8x16_t *)((char *)v4620 + 40 * v4619);
    v4658.i64[1] = v4660;
    v4657.i64[1] = v4661;
    v4671[1] = v4657;
    v4671[2] = v4658;
    v4656.i64[1] = v4659;
    v4672 = v4609 + 1;
    *v4671 = v4656;
    while (v4672 != v4612)
    {
      ++v4611;
      v4673 = *v4672++;
      v4613 = v4673;
      if (v4673 != -1)
      {
        v4609 = v4672 - 1;
        v4614 = v4611;
        v4615 = *a3;
        if (v2040)
          goto LABEL_2057;
        goto LABEL_2059;
      }
    }
    v4604 = *(_DWORD *)(a1 + 12);
LABEL_2051:
    ++v4605;
    ++v4606;
    if (v4605 < v4604)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2071:
  result = (int64x2_t *)*(unsigned int *)(a1 + 1452);
  if (!(_DWORD)result)
    goto LABEL_2094;
  v4678 = 0;
  v4679 = a4[3];
  while (2)
  {
    v4680 = *(_QWORD *)(a1 + 1528);
    v4681 = *(_DWORD *)(a1 + 1552) * v4678;
    v4682 = (uint64_t *)(v4680 + 8 * v4681);
    v4683 = *(_DWORD *)(a1 + 1448);
    if (v4683 && *v4682 == -1)
    {
      v4684 = 0;
      v4766 = 8 * (v4683 + v4681) - 8 * v4681 - 8;
      v4767 = v4680 + 8 * v4681;
      while (v4766)
      {
        v4682 = (uint64_t *)(v4767 + 8);
        ++v4684;
        v4768 = *(_QWORD *)(v4767 + 8);
        v4766 -= 8;
        v4767 += 8;
        if (v4768 != -1)
          goto LABEL_2078;
      }
      goto LABEL_2074;
    }
    v4684 = 0;
LABEL_2078:
    v4685 = (uint64_t *)(v4680 + 8 * (v4681 + v4683));
    if (v4682 == v4685)
      goto LABEL_2074;
    v4686 = *v4682;
    v4687 = v4684;
    v4688 = *a3;
    if (!v2040)
    {
LABEL_2082:
      v4690 = *(_DWORD *)(v4688 + 4 * v4687);
      v4689 = *v4679;
      goto LABEL_2083;
    }
LABEL_2080:
    v4689 = *v4679;
    v4690 = *(_DWORD *)(v4688 + 4 * v4687);
    if (*v4679 >= v4690)
    {
LABEL_2083:
      v4727 = (__int128 *)(*(_QWORD *)(a1 + 1456) + 8 * v4686);
      v4728 = *(unsigned int *)(a2 + 16);
      v4729 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v4690 + (_DWORD)v4728 * v4689));
      v4730 = *v4727;
      v4731 = v4727[2];
      v4732 = v4727[3];
      v4733 = v4727[4];
      v4734 = v4727[5];
      v4735 = v4727[6];
      v4736 = v4727[7];
      v4737 = v4727[8];
      v4738 = v4727[9];
      v4739 = v4727[10];
      v4740 = v4727[11];
      v4741 = v4727[12];
      v4742 = v4727[13];
      v4743 = v4727[14];
      v4744 = v4727[15];
      v4745 = v4727[16];
      v4746 = v4727[17];
      v4747 = v4727[18];
      v4748 = v4727[19];
      v4749 = v4727[20];
      v4750 = v4727[21];
      v4751 = v4727[22];
      v4752 = v4727[23];
      v4753 = v4727[24];
      v4754 = v4727[25];
      v4755 = v4727[26];
      v4729[1] = v4727[1];
      v4729[2] = v4731;
      *v4729 = v4730;
      v4756 = (_OWORD *)((char *)v4729 + 8 * v4728);
      v4756[1] = v4733;
      v4756[2] = v4734;
      *v4756 = v4732;
      v4757 = &v4729[v4728];
      v4757[1] = v4736;
      v4757[2] = v4737;
      *v4757 = v4735;
      v4758 = (_OWORD *)((char *)v4729 + 24 * v4728);
      v4758[1] = v4739;
      v4758[2] = v4740;
      *v4758 = v4738;
      v4759 = &v4729[2 * v4728];
      v4759[1] = v4742;
      v4759[2] = v4743;
      *v4759 = v4741;
      v4760 = (_OWORD *)((char *)v4729 + 40 * v4728);
      v4760[1] = v4745;
      v4760[2] = v4746;
      *v4760 = v4744;
      v4761 = &v4729[3 * v4728];
      v4761[1] = v4748;
      v4761[2] = v4749;
      *v4761 = v4747;
      v4762 = (_OWORD *)((char *)v4729 + 56 * v4728);
      v4762[1] = v4751;
      v4762[2] = v4752;
      *v4762 = v4750;
      v4763 = &v4729[4 * v4728];
      v4763[1] = v4754;
      v4763[2] = v4755;
      *v4763 = v4753;
      goto LABEL_2084;
    }
    v4691 = *(_QWORD *)(a1 + 1456) + 8 * v4686;
    v4692 = *(unsigned int *)(a2 + 16);
    v4693 = *(_QWORD *)a2 + 8 * (v4689 + (_DWORD)v4692 * v4690);
    v4694 = *(int64x2_t *)(v4691 + 16);
    v4696 = *(int64x2_t *)(v4691 + 64);
    v4695 = *(int64x2_t *)(v4691 + 80);
    v4697 = *(int64x2_t *)(v4691 + 32);
    v4698 = *(int64x2_t *)(v4691 + 48);
    v4700 = *(int64x2_t *)(v4691 + 96);
    v4699 = *(int64x2_t *)(v4691 + 112);
    v4702 = *(int64x2_t *)(v4691 + 160);
    v4701 = *(int64x2_t *)(v4691 + 176);
    v4703 = *(int64x2_t *)(v4691 + 128);
    v4704 = *(int64x2_t *)(v4691 + 144);
    v4706 = *(int64x2_t *)(v4691 + 192);
    v4705 = *(int64x2_t *)(v4691 + 208);
    v4708 = *(int64x2_t *)(v4691 + 256);
    v4707 = *(int64x2_t *)(v4691 + 272);
    v4709 = *(int64x2_t *)(v4691 + 224);
    v4710 = *(int64x2_t *)(v4691 + 240);
    v4712 = *(int64x2_t *)(v4691 + 288);
    v4711 = *(int64x2_t *)(v4691 + 304);
    v4714 = *(int64x2_t *)(v4691 + 352);
    v4713 = *(int64x2_t *)(v4691 + 368);
    v4716 = *(int64x2_t *)(v4691 + 320);
    v4715 = *(int64x2_t *)(v4691 + 336);
    v4718 = *(_OWORD *)(v4691 + 400);
    v4717 = *(_OWORD *)(v4691 + 416);
    v4719 = *(_OWORD *)(v4691 + 384);
    v4720 = vzip1q_s64(*(int64x2_t *)v4691, v4698);
    v4721 = vzip2q_s64(*(int64x2_t *)v4691, v4698);
    *(int64x2_t *)(v4693 + 32) = vzip1q_s64(v4706, v4710);
    *(int64x2_t *)(v4693 + 48) = vzip1q_s64(v4712, v4715);
    *(_QWORD *)(v4693 + 64) = v4719;
    *(int64x2_t *)v4693 = v4720;
    *(int64x2_t *)(v4693 + 16) = vzip1q_s64(v4700, v4704);
    v4722 = (int64x2_t *)(v4693 + 8 * v4692);
    v4722[2] = vzip2q_s64(v4706, v4710);
    v4722[3] = vzip2q_s64(v4712, v4715);
    *v4722 = v4721;
    v4722[1] = vzip2q_s64(v4700, v4704);
    v4722[4].i64[0] = *((_QWORD *)&v4719 + 1);
    v4723 = (int64x2_t *)(v4693 + 16 * v4692);
    v4723[4].i64[0] = v4718;
    v4723[2] = vzip1q_s64(v4705, v4708);
    v4723[3] = vzip1q_s64(v4711, v4714);
    *v4723 = vzip1q_s64(v4694, v4696);
    v4723[1] = vzip1q_s64(v4699, v4702);
    v4724 = (int64x2_t *)(v4693 + 24 * v4692);
    v4724[4].i64[0] = *((_QWORD *)&v4718 + 1);
    v4724[2] = vzip2q_s64(v4705, v4708);
    v4724[3] = vzip2q_s64(v4711, v4714);
    *v4724 = vzip2q_s64(v4694, v4696);
    v4724[1] = vzip2q_s64(v4699, v4702);
    v4725 = (int64x2_t *)(v4693 + 32 * v4692);
    v4725[4].i64[0] = v4717;
    v4725[2] = vzip1q_s64(v4709, v4707);
    v4725[3] = vzip1q_s64(v4716, v4713);
    *v4725 = vzip1q_s64(v4697, v4695);
    v4725[1] = vzip1q_s64(v4703, v4701);
    v4726 = (int64x2_t *)(v4693 + 40 * v4692);
    v4726[4].i64[0] = *((_QWORD *)&v4717 + 1);
    v4726[2] = vzip2q_s64(v4709, v4707);
    v4726[3] = vzip2q_s64(v4716, v4713);
    *v4726 = vzip2q_s64(v4697, v4695);
    v4726[1] = vzip2q_s64(v4703, v4701);
LABEL_2084:
    v4764 = v4682 + 1;
    while (v4764 != v4685)
    {
      ++v4684;
      v4765 = *v4764++;
      v4686 = v4765;
      if (v4765 != -1)
      {
        v4682 = v4764 - 1;
        v4687 = v4684;
        v4688 = *a3;
        if (v2040)
          goto LABEL_2080;
        goto LABEL_2082;
      }
    }
    result = (int64x2_t *)*(unsigned int *)(a1 + 1452);
LABEL_2074:
    ++v4678;
    ++v4679;
    if (v4678 < result)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2094:
  v4769 = *(_DWORD *)(a1 + 2892);
  if (!v4769)
    goto LABEL_2117;
  v4770 = 0;
  v4771 = a4[6];
  while (2)
  {
    v4772 = *(_QWORD *)(a1 + 2968);
    v4773 = *(_DWORD *)(a1 + 2992) * v4770;
    v4774 = (uint64_t *)(v4772 + 8 * v4773);
    result = (int64x2_t *)*(unsigned int *)(a1 + 2888);
    if ((_DWORD)result && *v4774 == -1)
    {
      v4775 = 0;
      v4837 = 8 * (result + v4773) - 8 * v4773 - 8;
      v4838 = v4772 + 8 * v4773;
      while (v4837)
      {
        v4774 = (uint64_t *)(v4838 + 8);
        ++v4775;
        v4839 = *(_QWORD *)(v4838 + 8);
        v4837 -= 8;
        v4838 += 8;
        if (v4839 != -1)
          goto LABEL_2101;
      }
      goto LABEL_2097;
    }
    v4775 = 0;
LABEL_2101:
    v4776 = (uint64_t *)(v4772 + 8 * (v4773 + result));
    if (v4774 == v4776)
      goto LABEL_2097;
    v4777 = *v4774;
    v4778 = v4775;
    v4779 = *a3;
    if (!v2040)
    {
LABEL_2105:
      v4781 = *(_DWORD *)(v4779 + 4 * v4778);
      v4780 = *v4771;
      goto LABEL_2106;
    }
LABEL_2103:
    v4780 = *v4771;
    v4781 = *(_DWORD *)(v4779 + 4 * v4778);
    if (*v4771 >= v4781)
    {
LABEL_2106:
      v4827 = (_OWORD *)(*(_QWORD *)(a1 + 2896) + 8 * v4777);
      v4783 = *(unsigned int *)(a2 + 16);
      v4784 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4781 + (_DWORD)v4783 * v4780));
      v4828 = *(int64x2_t *)v4827;
      v4829 = *((int64x2_t *)v4827 + 2);
      v4800 = *((int64x2_t *)v4827 + 3);
      v4830 = *((int64x2_t *)v4827 + 4);
      v4831 = *((int64x2_t *)v4827 + 5);
      v4802 = *((int8x16_t *)v4827 + 6);
      v4803 = *((int8x16_t *)v4827 + 7);
      v4804 = *((int8x16_t *)v4827 + 8);
      v4808 = *((int8x16_t *)v4827 + 9);
      v4805 = vextq_s8(v4804, v4804, 8uLL).u64[0];
      v4806 = vextq_s8(v4803, v4803, 8uLL).u64[0];
      v4807 = vextq_s8(v4802, v4802, 8uLL).u64[0];
      v4809 = *((int8x16_t *)v4827 + 10);
      v4810 = *((int8x16_t *)v4827 + 11);
      v4812 = vextq_s8(v4810, v4810, 8uLL).u64[0];
      v4813 = vextq_s8(v4809, v4809, 8uLL).u64[0];
      v4811 = vextq_s8(v4808, v4808, 8uLL).u64[0];
      v4814 = *((int8x16_t *)v4827 + 12);
      v4815 = *((int8x16_t *)v4827 + 13);
      v4816 = *((int8x16_t *)v4827 + 14);
      v4820 = *((int8x16_t *)v4827 + 15);
      v4817 = vextq_s8(v4816, v4816, 8uLL).u64[0];
      v4818 = vextq_s8(v4815, v4815, 8uLL).u64[0];
      v4819 = vextq_s8(v4814, v4814, 8uLL).u64[0];
      v4821 = *((int8x16_t *)v4827 + 16);
      v4822 = *((int8x16_t *)v4827 + 17);
      v4824 = vextq_s8(v4822, v4822, 8uLL).u64[0];
      v4825 = vextq_s8(v4821, v4821, 8uLL).u64[0];
      v4823 = vextq_s8(v4820, v4820, 8uLL).u64[0];
      v4784[1] = *((int64x2_t *)v4827 + 1);
      v4784[2] = v4829;
      *v4784 = v4828;
      v4826 = (int64x2_t *)((char *)v4784 + 8 * v4783);
      v4826[1] = v4830;
      v4826[2] = v4831;
      goto LABEL_2107;
    }
    v4782 = *(_QWORD *)(a1 + 2896) + 8 * v4777;
    v4783 = *(unsigned int *)(a2 + 16);
    v4784 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4780 + (_DWORD)v4783 * v4781));
    v4785 = *(int64x2_t *)(v4782 + 16);
    v4786 = *(int64x2_t *)(v4782 + 64);
    v4787 = *(int64x2_t *)(v4782 + 80);
    v4789 = *(int64x2_t *)(v4782 + 32);
    v4788 = *(int64x2_t *)(v4782 + 48);
    v4790 = *(int64x2_t *)(v4782 + 96);
    v4791 = *(int64x2_t *)(v4782 + 112);
    v4792 = *(int64x2_t *)(v4782 + 128);
    v4793 = *(int64x2_t *)(v4782 + 192);
    v4794 = *(int64x2_t *)(v4782 + 208);
    v4795 = *(int64x2_t *)(v4782 + 224);
    v4796 = vzip1q_s64(*(int64x2_t *)v4782, v4788);
    v4797 = vzip1q_s64(v4790, *(int64x2_t *)(v4782 + 144));
    v4798 = vzip1q_s64(v4793, *(int64x2_t *)(v4782 + 240));
    v4799.i64[0] = vdupq_laneq_s64(v4790, 1).u64[0];
    v4799.i64[1] = *(_QWORD *)(v4782 + 152);
    v4800 = vzip2q_s64(*(int64x2_t *)v4782, v4788);
    v4801.i64[0] = vdupq_laneq_s64(v4793, 1).u64[0];
    v4801.i64[1] = *(_QWORD *)(v4782 + 248);
    v4802 = (int8x16_t)vzip1q_s64(v4785, v4786);
    v4803 = (int8x16_t)vzip1q_s64(v4791, *(int64x2_t *)(v4782 + 160));
    v4804 = (int8x16_t)vzip1q_s64(v4794, *(int64x2_t *)(v4782 + 256));
    v4805 = vextq_s8(v4804, v4804, 8uLL).u64[0];
    v4806 = vextq_s8(v4803, v4803, 8uLL).u64[0];
    v4807 = vextq_s8(v4802, v4802, 8uLL).u64[0];
    v4808 = (int8x16_t)vzip2q_s64(v4785, v4786);
    v4809.i64[0] = vdupq_laneq_s64(v4791, 1).u64[0];
    v4809.i64[1] = *(_QWORD *)(v4782 + 168);
    v4810.i64[0] = vdupq_laneq_s64(v4794, 1).u64[0];
    v4810.i64[1] = *(_QWORD *)(v4782 + 264);
    v4811 = vextq_s8(v4808, v4808, 8uLL).u64[0];
    v4812 = vextq_s8(v4810, v4810, 8uLL).u64[0];
    v4813 = vextq_s8(v4809, v4809, 8uLL).u64[0];
    v4814 = (int8x16_t)vzip1q_s64(v4789, v4787);
    v4815 = (int8x16_t)vzip1q_s64(v4792, *(int64x2_t *)(v4782 + 176));
    v4816 = (int8x16_t)vzip1q_s64(v4795, *(int64x2_t *)(v4782 + 272));
    v4817 = vextq_s8(v4816, v4816, 8uLL).u64[0];
    v4818 = vextq_s8(v4815, v4815, 8uLL).u64[0];
    v4819 = vextq_s8(v4814, v4814, 8uLL).u64[0];
    v4820 = (int8x16_t)vzip2q_s64(v4789, v4787);
    v4821.i64[0] = vdupq_laneq_s64(v4792, 1).u64[0];
    v4821.i64[1] = *(_QWORD *)(v4782 + 184);
    v4822.i64[0] = vdupq_laneq_s64(v4795, 1).u64[0];
    v4822.i64[1] = *(_QWORD *)(v4782 + 280);
    v4823 = vextq_s8(v4820, v4820, 8uLL).u64[0];
    v4824 = vextq_s8(v4822, v4822, 8uLL).u64[0];
    v4825 = vextq_s8(v4821, v4821, 8uLL).u64[0];
    v4784[1] = v4797;
    v4784[2] = v4798;
    *v4784 = v4796;
    v4826 = (int64x2_t *)((char *)v4784 + 8 * v4783);
    v4826[1] = v4799;
    v4826[2] = v4801;
LABEL_2107:
    *v4826 = v4800;
    v4802.i64[1] = v4807;
    v4803.i64[1] = v4806;
    v4832 = (int8x16_t *)&v4784[v4783];
    *v4832 = v4802;
    v4832[1] = v4803;
    v4804.i64[1] = v4805;
    v4832[2] = v4804;
    v4833 = (int8x16_t *)((char *)v4784 + 24 * v4783);
    v4810.i64[1] = v4812;
    v4809.i64[1] = v4813;
    v4808.i64[1] = v4811;
    v4833[1] = v4809;
    v4833[2] = v4810;
    *v4833 = v4808;
    result = &v4784[2 * v4783];
    v4816.i64[1] = v4817;
    v4815.i64[1] = v4818;
    v4814.i64[1] = v4819;
    result[1] = (int64x2_t)v4815;
    result[2] = (int64x2_t)v4816;
    *result = (int64x2_t)v4814;
    v4834 = (int8x16_t *)((char *)v4784 + 40 * v4783);
    v4822.i64[1] = v4824;
    v4821.i64[1] = v4825;
    v4834[1] = v4821;
    v4834[2] = v4822;
    v4820.i64[1] = v4823;
    v4835 = v4774 + 1;
    *v4834 = v4820;
    while (v4835 != v4776)
    {
      ++v4775;
      v4836 = *v4835++;
      v4777 = v4836;
      if (v4836 != -1)
      {
        v4774 = v4835 - 1;
        v4778 = v4775;
        v4779 = *a3;
        if (v2040)
          goto LABEL_2103;
        goto LABEL_2105;
      }
    }
    v4769 = *(_DWORD *)(a1 + 2892);
LABEL_2097:
    ++v4770;
    ++v4771;
    if (v4770 < v4769)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2117:
  v4840 = *(_DWORD *)(a1 + 4332);
  if (!v4840)
    goto LABEL_2140;
  v4841 = 0;
  v4842 = a4[9];
  while (2)
  {
    v4843 = *(_QWORD *)(a1 + 4408);
    v4844 = *(_DWORD *)(a1 + 4432) * v4841;
    v4845 = (uint64_t *)(v4843 + 8 * v4844);
    result = (int64x2_t *)*(unsigned int *)(a1 + 4328);
    if ((_DWORD)result && *v4845 == -1)
    {
      v4846 = 0;
      v4908 = 8 * (result + v4844) - 8 * v4844 - 8;
      v4909 = v4843 + 8 * v4844;
      while (v4908)
      {
        v4845 = (uint64_t *)(v4909 + 8);
        ++v4846;
        v4910 = *(_QWORD *)(v4909 + 8);
        v4908 -= 8;
        v4909 += 8;
        if (v4910 != -1)
          goto LABEL_2124;
      }
      goto LABEL_2120;
    }
    v4846 = 0;
LABEL_2124:
    v4847 = (uint64_t *)(v4843 + 8 * (v4844 + result));
    if (v4845 == v4847)
      goto LABEL_2120;
    v4848 = *v4845;
    v4849 = v4846;
    v4850 = *a3;
    if (!v2040)
    {
LABEL_2128:
      v4852 = *(_DWORD *)(v4850 + 4 * v4849);
      v4851 = *v4842;
      goto LABEL_2129;
    }
LABEL_2126:
    v4851 = *v4842;
    v4852 = *(_DWORD *)(v4850 + 4 * v4849);
    if (*v4842 >= v4852)
    {
LABEL_2129:
      v4898 = (_OWORD *)(*(_QWORD *)(a1 + 4336) + 8 * v4848);
      v4854 = *(unsigned int *)(a2 + 16);
      v4855 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4852 + (_DWORD)v4854 * v4851));
      v4899 = *(int64x2_t *)v4898;
      v4900 = *((int64x2_t *)v4898 + 2);
      v4871 = *((int64x2_t *)v4898 + 3);
      v4901 = *((int64x2_t *)v4898 + 4);
      v4902 = *((int64x2_t *)v4898 + 5);
      v4873 = *((int8x16_t *)v4898 + 6);
      v4874 = *((int8x16_t *)v4898 + 7);
      v4875 = *((int8x16_t *)v4898 + 8);
      v4879 = *((int8x16_t *)v4898 + 9);
      v4876 = vextq_s8(v4875, v4875, 8uLL).u64[0];
      v4877 = vextq_s8(v4874, v4874, 8uLL).u64[0];
      v4878 = vextq_s8(v4873, v4873, 8uLL).u64[0];
      v4880 = *((int8x16_t *)v4898 + 10);
      v4881 = *((int8x16_t *)v4898 + 11);
      v4883 = vextq_s8(v4881, v4881, 8uLL).u64[0];
      v4884 = vextq_s8(v4880, v4880, 8uLL).u64[0];
      v4882 = vextq_s8(v4879, v4879, 8uLL).u64[0];
      v4885 = *((int8x16_t *)v4898 + 12);
      v4886 = *((int8x16_t *)v4898 + 13);
      v4887 = *((int8x16_t *)v4898 + 14);
      v4891 = *((int8x16_t *)v4898 + 15);
      v4888 = vextq_s8(v4887, v4887, 8uLL).u64[0];
      v4889 = vextq_s8(v4886, v4886, 8uLL).u64[0];
      v4890 = vextq_s8(v4885, v4885, 8uLL).u64[0];
      v4892 = *((int8x16_t *)v4898 + 16);
      v4893 = *((int8x16_t *)v4898 + 17);
      v4895 = vextq_s8(v4893, v4893, 8uLL).u64[0];
      v4896 = vextq_s8(v4892, v4892, 8uLL).u64[0];
      v4894 = vextq_s8(v4891, v4891, 8uLL).u64[0];
      v4855[1] = *((int64x2_t *)v4898 + 1);
      v4855[2] = v4900;
      *v4855 = v4899;
      v4897 = (int64x2_t *)((char *)v4855 + 8 * v4854);
      v4897[1] = v4901;
      v4897[2] = v4902;
      goto LABEL_2130;
    }
    v4853 = *(_QWORD *)(a1 + 4336) + 8 * v4848;
    v4854 = *(unsigned int *)(a2 + 16);
    v4855 = (int64x2_t *)(*(_QWORD *)a2 + 8 * (v4851 + (_DWORD)v4854 * v4852));
    v4856 = *(int64x2_t *)(v4853 + 16);
    v4857 = *(int64x2_t *)(v4853 + 64);
    v4858 = *(int64x2_t *)(v4853 + 80);
    v4860 = *(int64x2_t *)(v4853 + 32);
    v4859 = *(int64x2_t *)(v4853 + 48);
    v4861 = *(int64x2_t *)(v4853 + 96);
    v4862 = *(int64x2_t *)(v4853 + 112);
    v4863 = *(int64x2_t *)(v4853 + 128);
    v4864 = *(int64x2_t *)(v4853 + 192);
    v4865 = *(int64x2_t *)(v4853 + 208);
    v4866 = *(int64x2_t *)(v4853 + 224);
    v4867 = vzip1q_s64(*(int64x2_t *)v4853, v4859);
    v4868 = vzip1q_s64(v4861, *(int64x2_t *)(v4853 + 144));
    v4869 = vzip1q_s64(v4864, *(int64x2_t *)(v4853 + 240));
    v4870.i64[0] = vdupq_laneq_s64(v4861, 1).u64[0];
    v4870.i64[1] = *(_QWORD *)(v4853 + 152);
    v4871 = vzip2q_s64(*(int64x2_t *)v4853, v4859);
    v4872.i64[0] = vdupq_laneq_s64(v4864, 1).u64[0];
    v4872.i64[1] = *(_QWORD *)(v4853 + 248);
    v4873 = (int8x16_t)vzip1q_s64(v4856, v4857);
    v4874 = (int8x16_t)vzip1q_s64(v4862, *(int64x2_t *)(v4853 + 160));
    v4875 = (int8x16_t)vzip1q_s64(v4865, *(int64x2_t *)(v4853 + 256));
    v4876 = vextq_s8(v4875, v4875, 8uLL).u64[0];
    v4877 = vextq_s8(v4874, v4874, 8uLL).u64[0];
    v4878 = vextq_s8(v4873, v4873, 8uLL).u64[0];
    v4879 = (int8x16_t)vzip2q_s64(v4856, v4857);
    v4880.i64[0] = vdupq_laneq_s64(v4862, 1).u64[0];
    v4880.i64[1] = *(_QWORD *)(v4853 + 168);
    v4881.i64[0] = vdupq_laneq_s64(v4865, 1).u64[0];
    v4881.i64[1] = *(_QWORD *)(v4853 + 264);
    v4882 = vextq_s8(v4879, v4879, 8uLL).u64[0];
    v4883 = vextq_s8(v4881, v4881, 8uLL).u64[0];
    v4884 = vextq_s8(v4880, v4880, 8uLL).u64[0];
    v4885 = (int8x16_t)vzip1q_s64(v4860, v4858);
    v4886 = (int8x16_t)vzip1q_s64(v4863, *(int64x2_t *)(v4853 + 176));
    v4887 = (int8x16_t)vzip1q_s64(v4866, *(int64x2_t *)(v4853 + 272));
    v4888 = vextq_s8(v4887, v4887, 8uLL).u64[0];
    v4889 = vextq_s8(v4886, v4886, 8uLL).u64[0];
    v4890 = vextq_s8(v4885, v4885, 8uLL).u64[0];
    v4891 = (int8x16_t)vzip2q_s64(v4860, v4858);
    v4892.i64[0] = vdupq_laneq_s64(v4863, 1).u64[0];
    v4892.i64[1] = *(_QWORD *)(v4853 + 184);
    v4893.i64[0] = vdupq_laneq_s64(v4866, 1).u64[0];
    v4893.i64[1] = *(_QWORD *)(v4853 + 280);
    v4894 = vextq_s8(v4891, v4891, 8uLL).u64[0];
    v4895 = vextq_s8(v4893, v4893, 8uLL).u64[0];
    v4896 = vextq_s8(v4892, v4892, 8uLL).u64[0];
    v4855[1] = v4868;
    v4855[2] = v4869;
    *v4855 = v4867;
    v4897 = (int64x2_t *)((char *)v4855 + 8 * v4854);
    v4897[1] = v4870;
    v4897[2] = v4872;
LABEL_2130:
    *v4897 = v4871;
    v4873.i64[1] = v4878;
    v4874.i64[1] = v4877;
    v4903 = (int8x16_t *)&v4855[v4854];
    *v4903 = v4873;
    v4903[1] = v4874;
    v4875.i64[1] = v4876;
    v4903[2] = v4875;
    v4904 = (int8x16_t *)((char *)v4855 + 24 * v4854);
    v4881.i64[1] = v4883;
    v4880.i64[1] = v4884;
    v4879.i64[1] = v4882;
    v4904[1] = v4880;
    v4904[2] = v4881;
    *v4904 = v4879;
    result = &v4855[2 * v4854];
    v4887.i64[1] = v4888;
    v4886.i64[1] = v4889;
    v4885.i64[1] = v4890;
    result[1] = (int64x2_t)v4886;
    result[2] = (int64x2_t)v4887;
    *result = (int64x2_t)v4885;
    v4905 = (int8x16_t *)((char *)v4855 + 40 * v4854);
    v4893.i64[1] = v4895;
    v4892.i64[1] = v4896;
    v4905[1] = v4892;
    v4905[2] = v4893;
    v4891.i64[1] = v4894;
    v4906 = v4845 + 1;
    *v4905 = v4891;
    while (v4906 != v4847)
    {
      ++v4846;
      v4907 = *v4906++;
      v4848 = v4907;
      if (v4907 != -1)
      {
        v4845 = v4906 - 1;
        v4849 = v4846;
        v4850 = *a3;
        if (v2040)
          goto LABEL_2126;
        goto LABEL_2128;
      }
    }
    v4840 = *(_DWORD *)(a1 + 4332);
LABEL_2120:
    ++v4841;
    ++v4842;
    if (v4841 < v4840)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2140:
  v4911 = *(_DWORD *)(a1 + 5772);
  if (!v4911)
    goto LABEL_2163;
  v4912 = 0;
  v4913 = a4[12];
  while (2)
  {
    v4914 = *(_QWORD *)(a1 + 5848);
    v4915 = *(_DWORD *)(a1 + 5872) * v4912;
    v4916 = (uint64_t *)(v4914 + 8 * v4915);
    result = (int64x2_t *)*(unsigned int *)(a1 + 5768);
    if ((_DWORD)result && *v4916 == -1)
    {
      v4917 = 0;
      v4958 = 8 * (result + v4915) - 8 * v4915 - 8;
      v4959 = v4914 + 8 * v4915;
      while (v4958)
      {
        v4916 = (uint64_t *)(v4959 + 8);
        ++v4917;
        v4960 = *(_QWORD *)(v4959 + 8);
        v4958 -= 8;
        v4959 += 8;
        if (v4960 != -1)
          goto LABEL_2147;
      }
      goto LABEL_2143;
    }
    v4917 = 0;
LABEL_2147:
    v4918 = (uint64_t *)(v4914 + 8 * (v4915 + result));
    if (v4916 == v4918)
      goto LABEL_2143;
    v4919 = *v4916;
    v4920 = v4917;
    v4921 = *a3;
    if (!v2040)
    {
LABEL_2151:
      v4923 = *(_DWORD *)(v4921 + 4 * v4920);
      v4922 = *v4913;
      goto LABEL_2152;
    }
LABEL_2149:
    v4922 = *v4913;
    v4923 = *(_DWORD *)(v4921 + 4 * v4920);
    if (*v4913 >= v4923)
    {
LABEL_2152:
      v4942 = (__int128 *)(*(_QWORD *)(a1 + 5776) + 8 * v4919);
      v4943 = *(unsigned int *)(a2 + 16);
      v4944 = v4923 + v4943 * v4922;
      result = *(int64x2_t **)a2;
      v4945 = (_OWORD *)(*(_QWORD *)a2 + 8 * v4944);
      v4946 = *v4942;
      v4947 = v4942[2];
      v4948 = v4942[3];
      v4949 = v4942[4];
      v4950 = v4942[5];
      v4951 = v4942[6];
      v4952 = v4942[7];
      v4953 = v4942[8];
      v4945[1] = v4942[1];
      v4945[2] = v4947;
      *v4945 = v4946;
      v4954 = (_OWORD *)((char *)v4945 + 8 * v4943);
      v4954[1] = v4949;
      v4954[2] = v4950;
      *v4954 = v4948;
      v4955 = &v4945[v4943];
      v4955[1] = v4952;
      v4955[2] = v4953;
      *v4955 = v4951;
      goto LABEL_2153;
    }
    v4924 = *(_QWORD *)(a1 + 5776) + 8 * v4919;
    v4925 = *(unsigned int *)(a2 + 16);
    v4926 = *(_QWORD *)a2 + 8 * (v4922 + (_DWORD)v4925 * v4923);
    v4927 = *(int64x2_t *)(v4924 + 16);
    v4929 = *(int64x2_t *)(v4924 + 64);
    v4928 = *(int64x2_t *)(v4924 + 80);
    v4930 = *(int64x2_t *)(v4924 + 32);
    v4931 = *(int64x2_t *)(v4924 + 48);
    v4933 = *(_OWORD *)(v4924 + 112);
    v4932 = *(_OWORD *)(v4924 + 128);
    v4934 = *(_OWORD *)(v4924 + 96);
    v4935 = vzip1q_s64(*(int64x2_t *)v4924, v4931);
    v4936 = vzip2q_s64(*(int64x2_t *)v4924, v4931);
    *(_QWORD *)(v4926 + 16) = v4934;
    *(int64x2_t *)v4926 = v4935;
    v4937 = (int64x2_t *)(v4926 + 8 * v4925);
    *v4937 = v4936;
    v4937[1].i64[0] = *((_QWORD *)&v4934 + 1);
    v4938 = (int64x2_t *)(v4926 + 16 * v4925);
    v4938[1].i64[0] = v4933;
    *v4938 = vzip1q_s64(v4927, v4929);
    v4939 = (int64x2_t *)(v4926 + 24 * v4925);
    result = v4939 + 1;
    v4939[1].i64[0] = *((_QWORD *)&v4933 + 1);
    *v4939 = vzip2q_s64(v4927, v4929);
    v4940 = (int64x2_t *)(v4926 + 32 * v4925);
    v4940[1].i64[0] = v4932;
    *v4940 = vzip1q_s64(v4930, v4928);
    v4941 = (int64x2_t *)(v4926 + 40 * v4925);
    v4941[1].i64[0] = *((_QWORD *)&v4932 + 1);
    *v4941 = vzip2q_s64(v4930, v4928);
LABEL_2153:
    v4956 = v4916 + 1;
    while (v4956 != v4918)
    {
      ++v4917;
      v4957 = *v4956++;
      v4919 = v4957;
      if (v4957 != -1)
      {
        v4916 = v4956 - 1;
        v4920 = v4917;
        v4921 = *a3;
        if (v2040)
          goto LABEL_2149;
        goto LABEL_2151;
      }
    }
    v4911 = *(_DWORD *)(a1 + 5772);
LABEL_2143:
    ++v4912;
    ++v4913;
    if (v4912 < v4911)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2163:
  v4961 = *(_DWORD *)(a1 + 7212);
  if (!v4961)
    goto LABEL_2186;
  v4962 = 0;
  v4963 = a4[15];
  while (2)
  {
    v4964 = *(_QWORD *)(a1 + 7288);
    v4965 = *(_DWORD *)(a1 + 7312) * v4962;
    v4966 = (uint64_t *)(v4964 + 8 * v4965);
    result = (int64x2_t *)*(unsigned int *)(a1 + 7208);
    if ((_DWORD)result && *v4966 == -1)
    {
      v4967 = 0;
      v4988 = 8 * (result + v4965) - 8 * v4965 - 8;
      v4989 = v4964 + 8 * v4965;
      while (v4988)
      {
        v4966 = (uint64_t *)(v4989 + 8);
        ++v4967;
        v4990 = *(_QWORD *)(v4989 + 8);
        v4988 -= 8;
        v4989 += 8;
        if (v4990 != -1)
          goto LABEL_2170;
      }
      goto LABEL_2166;
    }
    v4967 = 0;
LABEL_2170:
    v4968 = (uint64_t *)(v4964 + 8 * (v4965 + result));
    if (v4966 == v4968)
      goto LABEL_2166;
    v4969 = *v4966;
    v4970 = v4967;
    v4971 = *a3;
    if (!v2040)
    {
LABEL_2174:
      v4973 = *(_DWORD *)(v4971 + 4 * v4970);
      v4972 = *v4963;
      goto LABEL_2175;
    }
LABEL_2172:
    v4972 = *v4963;
    v4973 = *(_DWORD *)(v4971 + 4 * v4970);
    if (*v4963 >= v4973)
    {
LABEL_2175:
      v4981 = (__int128 *)(*(_QWORD *)(a1 + 7216) + 8 * v4969);
      v4982 = v4973 + *(_DWORD *)(a2 + 16) * v4972;
      result = *(int64x2_t **)a2;
      v4983 = (_OWORD *)(*(_QWORD *)a2 + 8 * v4982);
      v4984 = v4981[2];
      v4985 = *v4981;
      v4983[1] = v4981[1];
      v4983[2] = v4984;
      *v4983 = v4985;
      goto LABEL_2176;
    }
    v4974 = *(_QWORD *)(a1 + 7216) + 8 * v4969;
    v4975 = *(unsigned int *)(a2 + 16);
    v4976 = v4972 + v4975 * v4973;
    result = *(int64x2_t **)a2;
    v4977 = (_QWORD *)(*(_QWORD *)a2 + 8 * v4976);
    v4979 = *(int8x16_t *)(v4974 + 16);
    v4978 = *(int8x16_t *)(v4974 + 32);
    v4980 = vextq_s8(*(int8x16_t *)v4974, *(int8x16_t *)v4974, 8uLL).u64[0];
    *v4977 = *(_QWORD *)v4974;
    v4977[v4975] = v4980;
    v4977[2 * v4975] = v4979.i64[0];
    v4977[3 * v4975] = vextq_s8(v4979, v4979, 8uLL).u64[0];
    v4977[4 * v4975] = v4978.i64[0];
    v4977[5 * v4975] = vextq_s8(v4978, v4978, 8uLL).u64[0];
LABEL_2176:
    v4986 = v4966 + 1;
    while (v4986 != v4968)
    {
      ++v4967;
      v4987 = *v4986++;
      v4969 = v4987;
      if (v4987 != -1)
      {
        v4966 = v4986 - 1;
        v4970 = v4967;
        v4971 = *a3;
        if (v2040)
          goto LABEL_2172;
        goto LABEL_2174;
      }
    }
    v4961 = *(_DWORD *)(a1 + 7212);
LABEL_2166:
    ++v4962;
    ++v4963;
    if (v4962 < v4961)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2186:
  v4991 = *(_DWORD *)(a1 + 8652);
  if (!v4991)
    goto LABEL_2209;
  v4992 = 0;
  v4993 = a4[18];
  while (2)
  {
    v4994 = *(_QWORD *)(a1 + 8728);
    v4995 = *(_DWORD *)(a1 + 8752) * v4992;
    v4996 = (uint64_t *)(v4994 + 8 * v4995);
    result = (int64x2_t *)*(unsigned int *)(a1 + 8648);
    if ((_DWORD)result && *v4996 == -1)
    {
      v4997 = 0;
      v5038 = 8 * (result + v4995) - 8 * v4995 - 8;
      v5039 = v4994 + 8 * v4995;
      while (v5038)
      {
        v4996 = (uint64_t *)(v5039 + 8);
        ++v4997;
        v5040 = *(_QWORD *)(v5039 + 8);
        v5038 -= 8;
        v5039 += 8;
        if (v5040 != -1)
          goto LABEL_2193;
      }
      goto LABEL_2189;
    }
    v4997 = 0;
LABEL_2193:
    v4998 = (uint64_t *)(v4994 + 8 * (v4995 + result));
    if (v4996 == v4998)
      goto LABEL_2189;
    v4999 = *v4996;
    v5000 = v4997;
    v5001 = *a3;
    if (!v2040)
    {
LABEL_2197:
      v5003 = *(_DWORD *)(v5001 + 4 * v5000);
      v5002 = *v4993;
      goto LABEL_2198;
    }
LABEL_2195:
    v5002 = *v4993;
    v5003 = *(_DWORD *)(v5001 + 4 * v5000);
    if (*v4993 >= v5003)
    {
LABEL_2198:
      v5022 = (__int128 *)(*(_QWORD *)(a1 + 8656) + 8 * v4999);
      v5023 = *(unsigned int *)(a2 + 16);
      v5024 = v5003 + v5023 * v5002;
      result = *(int64x2_t **)a2;
      v5025 = (_OWORD *)(*(_QWORD *)a2 + 8 * v5024);
      v5026 = *v5022;
      v5027 = v5022[2];
      v5028 = v5022[3];
      v5029 = v5022[4];
      v5030 = v5022[5];
      v5031 = v5022[6];
      v5032 = v5022[7];
      v5033 = v5022[8];
      v5025[1] = v5022[1];
      v5025[2] = v5027;
      *v5025 = v5026;
      v5034 = (_OWORD *)((char *)v5025 + 8 * v5023);
      v5034[1] = v5029;
      v5034[2] = v5030;
      *v5034 = v5028;
      v5035 = &v5025[v5023];
      v5035[1] = v5032;
      v5035[2] = v5033;
      *v5035 = v5031;
      goto LABEL_2199;
    }
    v5004 = *(_QWORD *)(a1 + 8656) + 8 * v4999;
    v5005 = *(unsigned int *)(a2 + 16);
    v5006 = *(_QWORD *)a2 + 8 * (v5002 + (_DWORD)v5005 * v5003);
    v5007 = *(int64x2_t *)(v5004 + 16);
    v5009 = *(int64x2_t *)(v5004 + 64);
    v5008 = *(int64x2_t *)(v5004 + 80);
    v5010 = *(int64x2_t *)(v5004 + 32);
    v5011 = *(int64x2_t *)(v5004 + 48);
    v5013 = *(_OWORD *)(v5004 + 112);
    v5012 = *(_OWORD *)(v5004 + 128);
    v5014 = *(_OWORD *)(v5004 + 96);
    v5015 = vzip1q_s64(*(int64x2_t *)v5004, v5011);
    v5016 = vzip2q_s64(*(int64x2_t *)v5004, v5011);
    *(_QWORD *)(v5006 + 16) = v5014;
    *(int64x2_t *)v5006 = v5015;
    v5017 = (int64x2_t *)(v5006 + 8 * v5005);
    *v5017 = v5016;
    v5017[1].i64[0] = *((_QWORD *)&v5014 + 1);
    v5018 = (int64x2_t *)(v5006 + 16 * v5005);
    v5018[1].i64[0] = v5013;
    *v5018 = vzip1q_s64(v5007, v5009);
    v5019 = (int64x2_t *)(v5006 + 24 * v5005);
    result = v5019 + 1;
    v5019[1].i64[0] = *((_QWORD *)&v5013 + 1);
    *v5019 = vzip2q_s64(v5007, v5009);
    v5020 = (int64x2_t *)(v5006 + 32 * v5005);
    v5020[1].i64[0] = v5012;
    *v5020 = vzip1q_s64(v5010, v5008);
    v5021 = (int64x2_t *)(v5006 + 40 * v5005);
    v5021[1].i64[0] = *((_QWORD *)&v5012 + 1);
    *v5021 = vzip2q_s64(v5010, v5008);
LABEL_2199:
    v5036 = v4996 + 1;
    while (v5036 != v4998)
    {
      ++v4997;
      v5037 = *v5036++;
      v4999 = v5037;
      if (v5037 != -1)
      {
        v4996 = v5036 - 1;
        v5000 = v4997;
        v5001 = *a3;
        if (v2040)
          goto LABEL_2195;
        goto LABEL_2197;
      }
    }
    v4991 = *(_DWORD *)(a1 + 8652);
LABEL_2189:
    ++v4992;
    ++v4993;
    if (v4992 < v4991)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2209:
  v5041 = *(_DWORD *)(a1 + 10092);
  if (!v5041)
    goto LABEL_2232;
  v5042 = 0;
  v5043 = a4[21];
  while (2)
  {
    v5044 = *(_QWORD *)(a1 + 10168);
    v5045 = *(_DWORD *)(a1 + 10192) * v5042;
    v5046 = (uint64_t *)(v5044 + 8 * v5045);
    result = (int64x2_t *)*(unsigned int *)(a1 + 10088);
    if ((_DWORD)result && *v5046 == -1)
    {
      v5047 = 0;
      v5095 = 8 * (result + v5045) - 8 * v5045 - 8;
      v5096 = v5044 + 8 * v5045;
      while (v5095)
      {
        v5046 = (uint64_t *)(v5096 + 8);
        ++v5047;
        v5097 = *(_QWORD *)(v5096 + 8);
        v5095 -= 8;
        v5096 += 8;
        if (v5097 != -1)
          goto LABEL_2216;
      }
      goto LABEL_2212;
    }
    v5047 = 0;
LABEL_2216:
    v5048 = (uint64_t *)(v5044 + 8 * (v5045 + result));
    if (v5046 == v5048)
      goto LABEL_2212;
    v5049 = *v5046;
    v5050 = v5047;
    v5051 = *a3;
    if (!v2040)
    {
LABEL_2220:
      v5053 = *(_DWORD *)(v5051 + 4 * v5050);
      v5052 = *v5043;
      goto LABEL_2221;
    }
LABEL_2218:
    v5052 = *v5043;
    v5053 = *(_DWORD *)(v5051 + 4 * v5050);
    if (*v5043 >= v5053)
    {
LABEL_2221:
      v5075 = (__int128 *)(*(_QWORD *)(a1 + 10096) + 8 * v5049);
      v5076 = *(unsigned int *)(a2 + 16);
      v5077 = v5053 + v5076 * v5052;
      result = *(int64x2_t **)a2;
      v5078 = (_OWORD *)(*(_QWORD *)a2 + 8 * v5077);
      v5079 = *v5075;
      v5080 = v5075[2];
      v5081 = v5075[3];
      v5082 = v5075[4];
      v5083 = v5075[5];
      v5084 = v5075[6];
      v5085 = v5075[7];
      v5086 = v5075[8];
      v5087 = v5075[9];
      v5088 = v5075[10];
      v5089 = v5075[11];
      v5078[1] = v5075[1];
      v5078[2] = v5080;
      *v5078 = v5079;
      v5090 = (_OWORD *)((char *)v5078 + 8 * v5076);
      v5090[1] = v5082;
      v5090[2] = v5083;
      *v5090 = v5081;
      v5091 = &v5078[v5076];
      v5091[1] = v5085;
      v5091[2] = v5086;
      *v5091 = v5084;
      v5092 = (_OWORD *)((char *)v5078 + 24 * v5076);
      v5092[1] = v5088;
      v5092[2] = v5089;
      *v5092 = v5087;
      goto LABEL_2222;
    }
    v5054 = *(_QWORD *)(a1 + 10096) + 8 * v5049;
    v5055 = *(unsigned int *)(a2 + 16);
    v5056 = v5052 + v5055 * v5053;
    result = *(int64x2_t **)a2;
    v5057 = (int64x2_t *)(*(_QWORD *)a2 + 8 * v5056);
    v5058 = *(int64x2_t *)(v5054 + 16);
    v5060 = *(int64x2_t *)(v5054 + 64);
    v5059 = *(int64x2_t *)(v5054 + 80);
    v5061 = *(int64x2_t *)(v5054 + 32);
    v5062 = *(int64x2_t *)(v5054 + 48);
    v5064 = *(int64x2_t *)(v5054 + 96);
    v5063 = *(int64x2_t *)(v5054 + 112);
    v5066 = *(int64x2_t *)(v5054 + 160);
    v5065 = *(int64x2_t *)(v5054 + 176);
    v5067 = *(int64x2_t *)(v5054 + 128);
    v5068 = *(int64x2_t *)(v5054 + 144);
    v5069 = vzip2q_s64(*(int64x2_t *)v5054, v5062);
    *v5057 = vzip1q_s64(*(int64x2_t *)v5054, v5062);
    v5057[1] = vzip1q_s64(v5064, v5068);
    v5070 = (int64x2_t *)((char *)v5057 + 8 * v5055);
    *v5070 = v5069;
    v5070[1] = vzip2q_s64(v5064, v5068);
    v5071 = &v5057[v5055];
    *v5071 = vzip1q_s64(v5058, v5060);
    v5071[1] = vzip1q_s64(v5063, v5066);
    v5072 = (int64x2_t *)((char *)v5057 + 24 * v5055);
    *v5072 = vzip2q_s64(v5058, v5060);
    v5072[1] = vzip2q_s64(v5063, v5066);
    v5073 = &v5057[2 * v5055];
    *v5073 = vzip1q_s64(v5061, v5059);
    v5073[1] = vzip1q_s64(v5067, v5065);
    v5074 = (int64x2_t *)((char *)v5057 + 40 * v5055);
    *v5074 = vzip2q_s64(v5061, v5059);
    v5074[1] = vzip2q_s64(v5067, v5065);
LABEL_2222:
    v5093 = v5046 + 1;
    while (v5093 != v5048)
    {
      ++v5047;
      v5094 = *v5093++;
      v5049 = v5094;
      if (v5094 != -1)
      {
        v5046 = v5093 - 1;
        v5050 = v5047;
        v5051 = *a3;
        if (v2040)
          goto LABEL_2218;
        goto LABEL_2220;
      }
    }
    v5041 = *(_DWORD *)(a1 + 10092);
LABEL_2212:
    ++v5042;
    ++v5043;
    if (v5042 < v5041)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2232:
  v5098 = *(_DWORD *)(a1 + 11532);
  if (!v5098)
    goto LABEL_2255;
  v5099 = 0;
  v5100 = a4[24];
  while (2)
  {
    v5101 = *(_QWORD *)(a1 + 11608);
    v5102 = *(_DWORD *)(a1 + 11632) * v5099;
    v5103 = (uint64_t *)(v5101 + 8 * v5102);
    result = (int64x2_t *)*(unsigned int *)(a1 + 11528);
    if ((_DWORD)result && *v5103 == -1)
    {
      v5104 = 0;
      v5152 = 8 * (result + v5102) - 8 * v5102 - 8;
      v5153 = v5101 + 8 * v5102;
      while (v5152)
      {
        v5103 = (uint64_t *)(v5153 + 8);
        ++v5104;
        v5154 = *(_QWORD *)(v5153 + 8);
        v5152 -= 8;
        v5153 += 8;
        if (v5154 != -1)
          goto LABEL_2239;
      }
      goto LABEL_2235;
    }
    v5104 = 0;
LABEL_2239:
    v5105 = (uint64_t *)(v5101 + 8 * (v5102 + result));
    if (v5103 == v5105)
      goto LABEL_2235;
    v5106 = *v5103;
    v5107 = v5104;
    v5108 = *a3;
    if (!v2040)
    {
LABEL_2243:
      v5110 = *(_DWORD *)(v5108 + 4 * v5107);
      v5109 = *v5100;
      goto LABEL_2244;
    }
LABEL_2241:
    v5109 = *v5100;
    v5110 = *(_DWORD *)(v5108 + 4 * v5107);
    if (*v5100 >= v5110)
    {
LABEL_2244:
      v5132 = (__int128 *)(*(_QWORD *)(a1 + 11536) + 8 * v5106);
      v5133 = *(unsigned int *)(a2 + 16);
      v5134 = v5110 + v5133 * v5109;
      result = *(int64x2_t **)a2;
      v5135 = (_OWORD *)(*(_QWORD *)a2 + 8 * v5134);
      v5136 = *v5132;
      v5137 = v5132[2];
      v5138 = v5132[3];
      v5139 = v5132[4];
      v5140 = v5132[5];
      v5141 = v5132[6];
      v5142 = v5132[7];
      v5143 = v5132[8];
      v5144 = v5132[9];
      v5145 = v5132[10];
      v5146 = v5132[11];
      v5135[1] = v5132[1];
      v5135[2] = v5137;
      *v5135 = v5136;
      v5147 = (_OWORD *)((char *)v5135 + 8 * v5133);
      v5147[1] = v5139;
      v5147[2] = v5140;
      *v5147 = v5138;
      v5148 = &v5135[v5133];
      v5148[1] = v5142;
      v5148[2] = v5143;
      *v5148 = v5141;
      v5149 = (_OWORD *)((char *)v5135 + 24 * v5133);
      v5149[1] = v5145;
      v5149[2] = v5146;
      *v5149 = v5144;
      goto LABEL_2245;
    }
    v5111 = *(_QWORD *)(a1 + 11536) + 8 * v5106;
    v5112 = *(unsigned int *)(a2 + 16);
    v5113 = v5109 + v5112 * v5110;
    result = *(int64x2_t **)a2;
    v5114 = (int64x2_t *)(*(_QWORD *)a2 + 8 * v5113);
    v5115 = *(int64x2_t *)(v5111 + 16);
    v5117 = *(int64x2_t *)(v5111 + 64);
    v5116 = *(int64x2_t *)(v5111 + 80);
    v5118 = *(int64x2_t *)(v5111 + 32);
    v5119 = *(int64x2_t *)(v5111 + 48);
    v5121 = *(int64x2_t *)(v5111 + 96);
    v5120 = *(int64x2_t *)(v5111 + 112);
    v5123 = *(int64x2_t *)(v5111 + 160);
    v5122 = *(int64x2_t *)(v5111 + 176);
    v5124 = *(int64x2_t *)(v5111 + 128);
    v5125 = *(int64x2_t *)(v5111 + 144);
    v5126 = vzip2q_s64(*(int64x2_t *)v5111, v5119);
    *v5114 = vzip1q_s64(*(int64x2_t *)v5111, v5119);
    v5114[1] = vzip1q_s64(v5121, v5125);
    v5127 = (int64x2_t *)((char *)v5114 + 8 * v5112);
    *v5127 = v5126;
    v5127[1] = vzip2q_s64(v5121, v5125);
    v5128 = &v5114[v5112];
    *v5128 = vzip1q_s64(v5115, v5117);
    v5128[1] = vzip1q_s64(v5120, v5123);
    v5129 = (int64x2_t *)((char *)v5114 + 24 * v5112);
    *v5129 = vzip2q_s64(v5115, v5117);
    v5129[1] = vzip2q_s64(v5120, v5123);
    v5130 = &v5114[2 * v5112];
    *v5130 = vzip1q_s64(v5118, v5116);
    v5130[1] = vzip1q_s64(v5124, v5122);
    v5131 = (int64x2_t *)((char *)v5114 + 40 * v5112);
    *v5131 = vzip2q_s64(v5118, v5116);
    v5131[1] = vzip2q_s64(v5124, v5122);
LABEL_2245:
    v5150 = v5103 + 1;
    while (v5150 != v5105)
    {
      ++v5104;
      v5151 = *v5150++;
      v5106 = v5151;
      if (v5151 != -1)
      {
        v5103 = v5150 - 1;
        v5107 = v5104;
        v5108 = *a3;
        if (v2040)
          goto LABEL_2241;
        goto LABEL_2243;
      }
    }
    v5098 = *(_DWORD *)(a1 + 11532);
LABEL_2235:
    ++v5099;
    ++v5100;
    if (v5099 < v5098)
      continue;
    break;
  }
  v2040 = *a5;
LABEL_2255:
  v5155 = *(_DWORD *)(a1 + 12972);
  if (v5155)
  {
    v5156 = 0;
    for (i = a4[27]; ; ++i)
    {
      v5158 = *(_QWORD *)(a1 + 13048);
      v5159 = *(_DWORD *)(a1 + 13072) * v5156;
      v5160 = (uint64_t *)(v5158 + 8 * v5159);
      result = (int64x2_t *)*(unsigned int *)(a1 + 12968);
      if ((_DWORD)result && *v5160 == -1)
      {
        v5161 = 0;
        v5202 = 8 * (result + v5159) - 8 * v5159 - 8;
        v5203 = v5158 + 8 * v5159;
        while (v5202)
        {
          v5160 = (uint64_t *)(v5203 + 8);
          ++v5161;
          v5204 = *(_QWORD *)(v5203 + 8);
          v5202 -= 8;
          v5203 += 8;
          if (v5204 != -1)
            goto LABEL_2262;
        }
        goto LABEL_2258;
      }
      v5161 = 0;
LABEL_2262:
      v5162 = (uint64_t *)(v5158 + 8 * (v5159 + result));
      if (v5160 != v5162)
        break;
LABEL_2258:
      if (++v5156 >= v5155)
        return result;
    }
    v5163 = *v5160;
    v5164 = v5161;
    v5165 = *a3;
    if (v2040)
    {
LABEL_2264:
      v5166 = *i;
      v5167 = *(_DWORD *)(v5165 + 4 * v5164);
      if (*i < v5167)
      {
        v5168 = *(_QWORD *)(a1 + 12976) + 8 * v5163;
        v5169 = *(unsigned int *)(a2 + 16);
        v5170 = *(_QWORD *)a2 + 8 * (v5166 + (_DWORD)v5169 * v5167);
        v5171 = *(int64x2_t *)(v5168 + 16);
        v5173 = *(int64x2_t *)(v5168 + 64);
        v5172 = *(int64x2_t *)(v5168 + 80);
        v5174 = *(int64x2_t *)(v5168 + 32);
        v5175 = *(int64x2_t *)(v5168 + 48);
        v5177 = *(_OWORD *)(v5168 + 112);
        v5176 = *(_OWORD *)(v5168 + 128);
        v5178 = *(_OWORD *)(v5168 + 96);
        v5179 = vzip1q_s64(*(int64x2_t *)v5168, v5175);
        v5180 = vzip2q_s64(*(int64x2_t *)v5168, v5175);
        *(_QWORD *)(v5170 + 16) = v5178;
        *(int64x2_t *)v5170 = v5179;
        v5181 = (int64x2_t *)(v5170 + 8 * v5169);
        *v5181 = v5180;
        v5181[1].i64[0] = *((_QWORD *)&v5178 + 1);
        v5182 = (int64x2_t *)(v5170 + 16 * v5169);
        v5182[1].i64[0] = v5177;
        *v5182 = vzip1q_s64(v5171, v5173);
        v5183 = (int64x2_t *)(v5170 + 24 * v5169);
        result = v5183 + 1;
        v5183[1].i64[0] = *((_QWORD *)&v5177 + 1);
        *v5183 = vzip2q_s64(v5171, v5173);
        v5184 = (int64x2_t *)(v5170 + 32 * v5169);
        v5184[1].i64[0] = v5176;
        *v5184 = vzip1q_s64(v5174, v5172);
        v5185 = (int64x2_t *)(v5170 + 40 * v5169);
        v5185[1].i64[0] = *((_QWORD *)&v5176 + 1);
        *v5185 = vzip2q_s64(v5174, v5172);
        goto LABEL_2268;
      }
    }
    else
    {
LABEL_2266:
      v5167 = *(_DWORD *)(v5165 + 4 * v5164);
      v5166 = *i;
    }
    v5186 = (__int128 *)(*(_QWORD *)(a1 + 12976) + 8 * v5163);
    v5187 = *(unsigned int *)(a2 + 16);
    v5188 = v5167 + v5187 * v5166;
    result = *(int64x2_t **)a2;
    v5189 = (_OWORD *)(*(_QWORD *)a2 + 8 * v5188);
    v5190 = *v5186;
    v5191 = v5186[2];
    v5192 = v5186[3];
    v5193 = v5186[4];
    v5194 = v5186[5];
    v5195 = v5186[6];
    v5196 = v5186[7];
    v5197 = v5186[8];
    v5189[1] = v5186[1];
    v5189[2] = v5191;
    *v5189 = v5190;
    v5198 = (_OWORD *)((char *)v5189 + 8 * v5187);
    v5198[1] = v5193;
    v5198[2] = v5194;
    *v5198 = v5192;
    v5199 = &v5189[v5187];
    v5199[1] = v5196;
    v5199[2] = v5197;
    *v5199 = v5195;
LABEL_2268:
    v5200 = v5160 + 1;
    while (v5200 != v5162)
    {
      ++v5161;
      v5201 = *v5200++;
      v5163 = v5201;
      if (v5201 != -1)
      {
        v5160 = v5200 - 1;
        v5164 = v5161;
        v5165 = *a3;
        if (v2040)
          goto LABEL_2264;
        goto LABEL_2266;
      }
    }
    v5155 = *(_DWORD *)(a1 + 12972);
    goto LABEL_2258;
  }
  return result;
}

